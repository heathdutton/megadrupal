<?php

/**
 * @file
 * Module to administer ISPConfig Mail from within Drupal.
 */

/**
 *  Implements hook_ispconfig_api_functions_register().
 */
function ispconfig_mail_ispconfig_api_functions_register() {
  $path = drupal_get_path('module', 'ispconfig_mail');
  $file = 'ispconfig_mail.module';

  // Standard Mail add and update fields for alias, catchall, forward.
  $mail_field_1 = array(
    'server_id' => '',                    // server_id  (int(11))
    'source' => '',                       // source  (varchar(255))
    'destination' => '',                  // destination  (text)
    'type' => '',                         // type  (enum('alias','aliasdomain','forward','catchall'))
    'active' => '',                       // active  (enum('n','y'))
  );
  // Standard Mail add and update fields for blacklist, whitelist.
  $mail_field_2 = array(
    'server_id' => '',                    // server_id  (int(11))
    'source' => '',                       // source  (varchar(255))
    'access' => '',                       // access  (varchar(255))
    'type'  => '',                        // type  (set('recipient','sender','client'))
    'active' => '',                       // active  (enum('n','y'))
  );
  // Standard Mail add and update fields for domains.
  $mail_field_domains = array(
    'server_id' => '',                    // server_id  (int(11))
    'domain' => '',                       // domain  (varchar(255))
    'active' => '',                       // active  (enum('n','y'))
  );
  // Standard Mail add and update fields for fetchmail.
  $mail_field_fetchmail = array(
    'server_id' => '',                    // server_id  (int(11))
    'type' => '',                         // type  (varchar(255))
    'source_sever' => '',                 // source_server  (varchar(255))
    'source_username' => '',              // source_username  (varchar(255))
    'source_password' => '',              // source_password  (varchar(64))
    'source_delete' => '',                // source_delete  (varchar(255))
    'destination' => '',                  // destination  (varchar(255))
    'active' => '',                       // active  (varchar(255))
    'source_read_all' => '',              // source_read_all  (varchar(255))
  );
  // Standard Mail add and update fields for mailinglist.
  $mail_field_mailinglist = array(
    'server_id' => '',                    // server_id  (int(11))
    'domain' => '',                       // domain  (varchar(255))
    'listname' => '',                     // listname  (varchar(255))
    'email' => '',                        // email  (varchar(255))
    'password' => '',                     // password  (varchar(255))
  );
  // Standard Mail add and update fields for policy.
  $mail_field_policy = array(
    'policy_name' => '',                  // policy_name  (varchar(64))
    'virus_lover' => '',                  // virus_lover  (enum('N','Y'))
    'spam_lover' => '',                   // spam_lover  (enum('N','Y'))
    'banned_files_lover' => '',           // banned_files_lover  (enum('N','Y'))
    'bad_header_lover' => '',             // bad_header_lover  (enum('N','Y'))
    'bypass_virus_checks' => '',          // bypass_virus_checks  (enum('N','Y'))
    'bypass_spam_checks' => '',           // bypass_spam_checks  (enum('N','Y'))
    'bypass_banned_checks' => '',         // bypass_banned_checks  (enum('N','Y'))
    'bypass_header_cheks' => '',          // bypass_header_checks  (enum('N','Y'))
    'spam_modifies_subj' => '',           // spam_modifies_subj  (enum('N','Y'))
    'virus_quarantine_to' => '',          // virus_quarantine_to  (varchar(255))
    'spam_quarantine_to' => '',           // spam_quarantine_to  (varchar(255))
    'banned_quarantine_to' => '',         // banned_quarantine_to  (varchar(255))
    'bad_header_quarantine_to' => '',     // bad_header_quarantine_to  (varchar(255))
    'clean_quarantine_to' => '',          // clean_quarantine_to  (varchar(255))
    'other_quarantine_to' => '',          // other_quarantine_to  (varchar(255))
    'spam_tag_level' => '',               // spam_tag_level  (float)
    'spam_tag2_level' => '',              // spam_tag2_level  (float)
    'spam_kill_level' => '',              // spam_kill_level  (float)
    'spam_dsn_cutoff_level' => '',        // spam_dsn_cutoff_level  (float)
    'spam_quarantine_cutoff_level' => '', // spam_quarantine_cutoff_level  (float)
    'addr_extension_virus' => '',         // addr_extension_virus  (varchar(64))
    'addr_extension_spam' => '',          // addr_extension_spam  (varchar(64))
    'addr_extension_banned' => '',        // addr_extension_banned  (varchar(64))
    'addr_extension_bad_header' => '',    // addr_extension_bad_header  (varchar(64))
    'warnvirusrecip' => '',               // warnvirusrecip  (enum('N','Y'))
    'warnbannedrecip' => '',              // warnbannedrecip  (enum('N','Y'))
    'warnbadhrecip' => '',                // warnbadhrecip  (enum('N','Y'))
    'newvirus_admin' => '',               // newvirus_admin  (varchar(64))
    'virus_admin' => '',                  // virus_admin  (varchar(64))
    'banned_admin' => '',                 // banned_admin  (varchar(64))
    'bad_header_admin' => '',             // bad_header_admin  (varchar(64))
    'spam_admin' => '',                   // spam_admin  (varchar(64))
    'spam_subject_tag' => '',             // spam_subject_tag  (varchar(64))
    'spam_subject_tag2' => '',            // spam_subject_tag2  (varchar(64))
    'message_size_limit' => '',           // message_size_limit  (int(11))
    'banned_rulenames' => '',             // banned_rulenames  (varchar(64))
  );
  // Standard Mail add and update field for spamfilter_blacklist, spamfilter_whitelist.
  $mail_field_3 = array(
    'server_id' => '',                    // server_id  (int(11))
    'wb' => '',                           // wb  (enum('W','B'))
    'rid' => '',                          // rid  (int(11))
    'email' => '',                        // email  (varchar(255))
    'priority' => '',                     // priority  (tinyint(3))
    'active' => '',                       // active  (enum('n','y'))
  );
  // Standard Mail add and update field for spamfilter_user.
  $mail_field_spamfilter_user = array(
    'server_id' => '',                    // server_id  (int(11))
    'priority' => '',                     // priority  (tinyint(3))
    'policy_id' => '',                    // policy_id  (int(11))
    'email' => '',                        // email  (varchar(255))
    'fullname' => '',                     // fullname  (varchar(64))
    'local' => '',                        // local  (varchar(1))
  );
  // Standard Mail add and update field for transport
  $mail_field_transport = array(
    'server_id' => '',                    // server_id  (int(11))
    'domain' => '',                       // domain  (varchar(255))
    'transport' => '',                    // transport  (varchar(255))
    'sort_order' => '',                   // sort_order  (int(11))
    'active' => '',                       // active  (enum('n','y'))
  );
  // Standard Mail add and update field for user.
  $mail_field_user = array(
    'server_id' => '',                    // server_id  (int(11))
    'email' => '',                        // email  (varchar(255))
    'login' => '',                        // login  (varchar(255))
    'password' => '',                     // password  (varchar(255))
    'name' => '',                         // name  (varchar(255))
    'uid' => '',                          // uid  (int(11))
    'gid' => '',                          // gid  (int(11))
    'maildir' => '',                      // maildir  (varchar(255))
    'quota' => '',                        // quota  (bigint(20))
    'cc' => '',                           // cc  (varchar(255))
    'homedir' => '',                      // homedir  (varchar(255))
    'autoresponder' => '',                // autoresponder  (enum('n','y'))
    'autoresponder_start_date' => '',     // autoresponder_start_date  (datetime)
    'autoresponder_end_date' => '',       // autoresponder_end_date  (datetime)
    'autoresponder_text' => '',           // autoresponder_text  (mediumtext)
    'move_junk' => '',                    // move_junk  (enum('n','y'))
    'custom_mailfilter' => '',            // custom_mailfilter  (mediumtext)
    'postfix' => '',                      // postfix  (enum('n','y'))
    'access' => '',                       // access  (enum('n','y'))
    'disableimap' => '',                  // disableimap  (enum('n','y'))
    'disablepop3' => '',                  // disablepop3  (enum('n','y'))
    'disabledeliver' => '',               // disabledeliver  (enum('n','y'))
    'disablesmtp' => '',                  // disablesmtp  (enum('n','y'))
  );
  // Standard Mail add and update field for user_filter.
  $mail_field_user_filter = array(
    'mailuser_id' => '',                  // mailuser_id  (int(11))
    'rulename' => '',                     // rulename  (varchar(64))
    'source' => '',                       // source  (varchar(255))
    'serachterm' => '',                   // searchterm  (varchar(255))
    'op' => '',                           // op  (varchar(255))
    'action' => '',                       // action  (varchar(255))
    'target' => '',                       // target  (varchar(255))
    'active' => '',                       // active  (enum('n','y'))
  );
  return array(
    // Native API functions.
    'mail_alias_add' => array(
      'name' => 'mail_alias_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_1,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_alias_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_alias_delete' => array(
      'name' => 'mail_alias_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_alias_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_alias_get' => array(
      'name' => 'mail_alias_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_alias_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_alias_update' => array(
      'name' => 'mail_alias_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_1,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows updating a Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_alias_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_blacklist_add' => array(
      'name' => 'mail_blacklist_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_2,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_blacklist_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_blacklist_delete' => array(
      'name' => 'mail_blacklist_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_blacklist_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_blacklist_get' => array(
      'name' => 'mail_blacklist_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_blacklist_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_blacklist_update' => array(
      'name' => 'mail_blacklist_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_2,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_blacklist_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_catchall_add' => array(
      'name' => 'mail_catchall_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_1,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_catchall_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_catchall_delete' => array(
      'name' => 'mail_catchall_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_catchall_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_catchall_get' => array(
      'name' => 'mail_catchall_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_catchall_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_catchall_update' => array(
      'name' => 'mail_catchall_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_1,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_catchall_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_domain_add' => array(
      'name' => 'mail_domain_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_domains,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_domain_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_domain_delete' => array(
      'name' => 'mail_domain_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_domain_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_domain_get' => array(
      'name' => 'mail_domain_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_domain_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_domain_update' => array(
      'name' => 'mail_domain_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_domains,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_domain_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_fetchmail_add' => array(
      'name' => 'mail_fetchmail_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_fetchmail,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_fetchmail_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_fetchmail_delete' => array(
      'name' => 'mail_fetchmail_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_fetchmail_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_fetchmail_get' => array(
      'name' => 'mail_fetchmail_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_fetchmail_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_fetchmail_update' => array(
      'name' => 'mail_fetchmail_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_fetchmail,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_fetchmail_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_forward_add' => array(
      'name' => 'mail_forward_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_1,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_forward_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_forward_delete' => array(
      'name' => 'mail_forward_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_forward_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_forward_get' => array(
      'name' => 'mail_forward_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_forward_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_forward_update' => array(
      'name' => 'mail_forward_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_1,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_forward_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_mailinglist_add' => array(
      'name' => 'mail_mailinglist_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_mailinglist,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_mailinglist_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_mailinglist_delete' => array(
      'name' => 'mail_mailinglist_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_mailinglist_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_mailinglist_get' => array(
      'name' => 'mail_mailinglist_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_mailinglist_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_mailinglist_update' => array(
      'name' => 'mail_mailinglist_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_mailinglist,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_mailinglist_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_policy_add' => array(
      'name' => 'mail_policy_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_policy,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_policy_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_policy_delete' => array(
      'name' => 'mail_policy_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_policy_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_policy_get' => array(
      'name' => 'mail_policy_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_policy_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_policy_update' => array(
      'name' => 'mail_policy_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_policy,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_policy_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_blacklist_add' => array(
      'name' => 'mail_spamfilter_blacklist_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_3,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_blacklist_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_blacklist_delete' => array(
      'name' => 'mail_spamfilter_blacklist_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_blacklist_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_blacklist_get' => array(
      'name' => 'mail_spamfilter_blacklist_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_blacklist_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_blacklist_update' => array(
      'name' => 'mail_spamfilter_blacklist_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_3,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_blacklist_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_user_add' => array(
      'name' => 'mail_spamfilter_user_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_spamfilter_user,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_user_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_user_delete' => array(
      'name' => 'mail_spamfilter_user_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_user_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_user_get' => array(
      'name' => 'mail_spamfilter_user_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_user_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_user_update' => array(
      'name' => 'mail_spamfilter_user_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_spamfilter_user,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_user_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_whitelist_add' => array(
      'name' => 'mail_spamfilter_whitelist_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_3,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_whitelist_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_whitelist_delete' => array(
      'name' => 'mail_spamfilter_whitelist_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_whitelist_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_whitelist_get' => array(
      'name' => 'mail_spamfilter_whitelist_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_whitelist_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_spamfilter_whitelist_update' => array(
      'name' => 'mail_spamfilter_whitelist_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_3,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_spamfilter_whitelist_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_transport_add' => array(
      'name' => 'mail_transport_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_transport,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_transport_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_transport_delete' => array(
      'name' => 'mail_transport_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_transportt_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_transport_get' => array(
      'name' => 'mail_transport_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_transport_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_transport_update' => array(
      'name' => 'mail_transport_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_transport,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_transport_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_user_add' => array(
      'name' => 'mail_user_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_user,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_user_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_user_delete' => array(
      'name' => 'mail_user_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_user_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_user_get' => array(
      'name' => 'mail_user_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_user_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_user_update' => array(
      'name' => 'mail_user_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_user,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_user_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_user_filter_add' => array(
      'name' => 'mail_user_filter_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_user_filter,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_user_filter_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_user_filter_delete' => array(
      'name' => 'mail_user_filter_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_user_filter_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_user_filter_get' => array(
      'name' => 'mail_user_filter_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_user_filter_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_user_filter_update' => array(
      'name' => 'mail_user_filter_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_user_filter,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_user_filter_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_whitelist_add' => array(
      'name' => 'mail_whitelist_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_user_filter,
      ),
      'access' => array(
        'ispconfig_mail mail_add' => array(
          'title' => t('Add Mail'),
          'description' => t('Allows adding a new Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_whitelist_add',
      'file' => $file,
      'path' => $path,
    ),
    'mail_whitelist_delete' => array(
      'name' => 'mail_whitelist_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_delete' => array(
          'title' => t('Delete Mail'),
          'description' => t('Allows deleting Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_whitelist_delete',
      'file' => $file,
      'path' => $path,
    ),
    'mail_whitelist_get' => array(
      'name' => 'mail_whitelist_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_whitelist_get',
      'file' => $file,
      'path' => $path,
    ),
    'mail_whitelist_update' => array(
      'name' => 'mail_whitelist_update',
      'parameters' => array(
        'client_id' => 0,
        'params' => $mail_field_user_filter,
      ),
      'access' => array(
        'ispconfig_mail mail_update' => array(
          'title' => t('Update Mail'),
          'description' => t('Allows updating Mail information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_whitelist_update',
      'file' => $file,
      'path' => $path,
    ),
    'mail_domain_get_by_domain' => array(
      'name' => 'mail_domain_get_by_domain',
      'parameters' => array(
        'domain' => '',
      ),
      'access' => array(
        'ispconfig_mail mail_get' => array(
          'title' => t('Get Mail'),
          'description' => t('Allows receiving Mail information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_mail',
      'callback' => 'ispconfig_mail_mail_domain_get_by_domain',
      'file' => $file,
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_help().
 */
function ispconfig_mail_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ispconfig_mail':
      return '<p>' . t('ISPConfig Help') . '</p>';
  }
}

//-----------------------------------------------------------------------------
// API functions of ISPConfig
//-----------------------------------------------------------------------------

/**
 * Adds a new mail alias if type is alias.
 *
 * Implements ISPConfig mail_alias_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_alias_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_alias_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mail blacklist entry if access is REJECT.
 *
 * Implements ISPConfig mail_blacklist_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_blacklist_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_blacklist_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mail catchall if type is catchall.
 *
 * Implements ISPConfig mail_catchall_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_catchall_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_catchall_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mail domain.
 *
 * Implements ISPconfig mail_domain_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_domain_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_domain_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new fetchmail.
 *
 * Implements ISPConfig mail_fetchmail_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_fetchmail_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_fetchmail_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mail forwarding if type is forward.
 *
 * Implements ISPConfig mail_forward_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_forward_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_forward_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mailinglist.
 *
 * Implements ISPConfig mail_mailinglist_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_mailinglist_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_mailinglist_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mail policy.
 *
 * Implements ISPConfig mail_policy_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_policy_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_policy_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mailing spamfilter blacklist entry if wb is B.
 *
 * Implements ISPConfig mail_spamfilter_blacklist_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_spamfilter_blacklist_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_blacklist_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mailing spamfilter user.
 *
 * Implements ISPConfig mail_spamfilter_user_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_spamfilter_user_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_user_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mailing spamfilter whitelist entry if wb is W.
 *
 * Implements ISPConfig mail_spamfilter_whitelist_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_spamfilter_whitelist_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_user_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mail transport.
 *
 * Implements ISPConfig mail_transport_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_transport_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_transport_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a mail user.
 *
 * Implements ISPconfig mail_user_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_user_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_user_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mail user filter.
 *
 * mail_user_filter_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_user_filter_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_user_filter_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new mail whitelist entry if access is OK.
 *
 * Implements ISPConfig mail_whitelist_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_mail_mail_whitelist_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_whitelist_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail alias if type is alias.
 *
 * Implements ISPConfig mail_alias_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_alias_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_alias_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail blacklist entry if access is REJECT.
 *
 * Implements ISPConfig mail_blacklist_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_blacklist_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_blacklist_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail catchall if type is catchall.
 *
 * Implements ISPConfig mail_catchall_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_catchall_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_catchall_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail domain.
 *
 * Implements ISPConfig mail_domain_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_domain_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_domain_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a fetchmail.
 *
 * Implements ISPConfig mail_fetchmail_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_fetchmail_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_fetchmail_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail forwarding if type is forward.
 *
 * Implements ISPConfig mail_forward_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_forward_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_forward_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mailinglist.
 *
 * Implements ISPConfig mail_mailinglist_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_mailinglist_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_mailinglist_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail policy.
 *
 * Implements ISPConfig mail_policy_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_policy_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_policy_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mailing spamfilter blacklist entry if wb is B.
 *
 * Implements ISPConfig mail_spamfilter_blacklist_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_spamfilter_blacklist_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_blacklist_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mailing spamfilter user.
 *
 * Implements ISPConfig mail_spamfilter_user_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_spamfilter_user_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_user_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mailing spamfilter whitelist if wb is W.
 *
 * Implements ISPConfig mail_spamfilter_whitelist_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_spamfilter_whitelist_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_whitelist_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail transport.
 *
 * Implements ISPConfig mail_transport_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_transport_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_transport_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail user.
 *
 * Implements ISPConfig mail_user_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_user_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_user_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail user filter.
 *
 * Implements ISPConfig mail_user_filter_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_user_filter_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_user_filter_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a mail whitelist entry if access is OK.
 *
 * Implements ISPConfig mail_whitelist_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_mail_mail_whitelist_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_whitelist_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail alias.
 *
 * Implements ISPConfig mail_alias_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_alias_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_alias_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail blacklist entry.
 *
 * Implements ISPConfig mail_blacklist_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_blacklist_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_blacklist_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail catchall.
 *
 * Implements ISPConfig mail_catchall_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_catchall_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_catchall_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail domain.
 *
 * Implements ISPConfig mail_domain_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_domain_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_domain_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a fetchmail.
 *
 * Implements ISPConfig mail_fetchmail_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_fetchmail_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_fetchmail_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail forwarding.
 *
 * Implements ISPConfig mail_forward_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_forward_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_forward_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mailinglist.
 *
 * Implements ISPConfig mail_mailinglist_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_mailinglist_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_mailinglist_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail policy.
 *
 * Implements ISPConfig mail_policy_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_policy_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_mailinglist_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mailing spamfilter blacklist entry.
 *
 * Implements ISPConfig mail_spamfilter_blacklist_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_spamfilter_blacklist_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_blacklist_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mailing spamfilter user.
 *
 * Implements ISPConfig mail_spamfilter_user_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_spamfilter_user_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_user_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mailing spamfilter whitelist entry.
 *
 * Implements ISPConfig mail_spamfilter_whitelist_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_spamfilter_whitelist_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_whitelist_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail transport.
 *
 * Implements ISPConfig mail_transport_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_transport_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_transport_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail user.
 *
 * Implements ISPConfig mail_user_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_user_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_user_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail user filter.
 *
 * Implements ISPConfig mail_user_filter_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_user_filter_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_user_filter_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a mail whitelist entry.
 *
 * Implements ISPConfig mail_whitelist_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_mail_mail_whitelist_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_whitelist_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail alias.
 *
 * Implements ISPConfig mail_alias_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_alias_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_alias_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail blacklist entry.
 *
 * Implements ISPConfig mail_blacklist_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_blacklist_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_blacklist_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail catchall.
 *
 * Implements ISPConfig mail_catchall_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_catchall_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_catchall_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail domain.
 *
 * Implements ISPConfig mail_domain_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_domain_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_domain_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a fetchmail.
 *
 * Implements ISPConfig mail_fetchmail_get($session_id, $primary_id).
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_fetchmail_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_fetchmail_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail forwarding.
 *
 * Implements ISPConfig mail_forward_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_forward_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_forward_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mailinglist.
 *
 * Implements ISPConfig mail_mailinglist_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_mailinglist_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_mailinglist_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail policy.
 *
 * Implements ISPConfig mail_policy_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_policy_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_policy_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mailing spamfilter user.
 *
 * Implements ISPConfig mail_spamfilter_user_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_spamfilter_blacklist_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_blacklist_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mailing spamfilter user.
 *
 * Implements ISPConfig mail_spamfilter_user_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_spamfilter_user_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_user_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mailing spamfilter whitelist entry.
 *
 * Implements ISPConfig mail_spamfilter_whitelist_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_spamfilter_whitelist_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_spamfilter_whitelist_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail transport.
 *
 * Implements ISPConfig mail_transport_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_transport_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_transport_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail user filter.
 *
 * Implements ISPConfig mail_user_filter_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_user_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_user_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail user filter.
 *
 * Implements ISPConfig mail_user_filter_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_user_filter_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_user_filter_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a mail whitelist entry.
 *
 * Implements ISPConfig mail_whitelist_get($session_id, $primary_id).
 *
 *  @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_mail_mail_whitelist_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_whitelist_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Shows information about target mail domain.
 *
 * Implements ISPConfig mail_domain_get_by_domain($session_id, $domain).
 *
 * @param string $domain
 *  Target mail domain.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 * Records of target mail domain or NULL on error.
 */
function ispconfig_mail_mail_domain_get_by_domain($domain, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('mail_domain_get_by_domain', array(
    'domain' => $domain,
  ), $session_id, $show_errors);
}
