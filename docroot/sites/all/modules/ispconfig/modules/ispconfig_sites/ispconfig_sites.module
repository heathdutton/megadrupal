<?php

/**
 * @file
 *  Module to administer ISPConfig Sites from within Drupal.
 */

/**
 *  Implements hook_ispconfig_api_functions_register().
 */
function ispconfig_sites_ispconfig_api_functions_register() {
  $path = drupal_get_path('module', 'ispconfig_sites');
  $file = 'ispconfig_sites.module';

  // Standard Sites add and update fields for params.
  $sites_cron = array(
    'server_id' => '', // server_id  (int(11))
    'parent_domain_id' => '',// parent_domain_id  (int(11))
    'type' => '',       // type  (enum('url','chrooted','full'))
    'command' => '',    // command  (varchar(255))
    'run_min' => '',    // run_min  (varchar(100))
    'run_hour' => '',   // run_hour  (varchar(100))
    'run_mday' => '',   // run_mday  (varchar(100))
    'run_month' => '',  // run_month  (varchar(100))
    'run_wady' => '',   // run_wday  (varchar(100))
    'active' => '',     // active  (enum('n','y'))
  );
  $sites_database = array(
    'server_id' => '',            // server_id  (int(11))
    'website_id' => '',           // website_id  (int(11))
    'type' => '',                 // type  (varchar(16))
    'database_name' => '',        // database_name  (varchar(64))
    'database_user_id' => '',     // database_user_id  (int(11))
    'database_ro_user_id' => '',  // database_ro_user_id  (int(11))
    'database_password' => '',    // database_password  (varchar(64))
    'database_charset' => '',     // database_charset  (varchar(64))
    'remote_access' => '',        // remote_access  (enum('n','y'))
    'remote_ips' => '',           // remote_ips  (text)
    'backup_interval' => '',      // backup_interval  (varchar(255))
    'backup_copies' => '',        // backup_copies  (int(11))
    'active' => '',               // active  (enum('n','y'))
  );
  $sites_db_user = array(
    'server_id' => '',            // server_id  (int(11))
    'database_user' => '',        // database_user  (varchar(64))
    'database_password' => '',    // database_password  (varchar(64))
  );
  $sites_ftp = array(
    'server_id' => '',            // server_id  (int(11))
    'parent_domain_id' => '',     // parent_domain_id  (int(11))
    'username' => '',             // username  (varchar(64))
    'password' => '',             // password  (varchar(64))
    'quota_size' => '',           // quota_size  (bigint(20))
    'active' => '',               // active  (enum('n','y'))
    'uid' => '',                  // uid  (varchar(64))
    'gid' => '',                  // gid  (varchar(64))
    'dir' => '',                  // dir  (varchar(255))
    'quota_files' => '',          // quota_files  (bigint(20))
    'ul_ratio' => '',             // ul_ratio  (int(11))
    'dl_ratio' => '',             // dl_ratio  (int(11))
    'ul_bandwidth' => '',         // ul_bandwidth  (int(11))
    'dl_bandwidth' => '',         // dl_bandwidth  (int(11))
  );
  $sites_shell = array(
    'server_id' => '',            // server_id  (int(11))
    'parent_domain_id' => '',     // parent_domain_id  (int(11))
    'username' => '',             // username  (varchar(64))
    'password' => '',             // password  (varchar(64))
    'quota_size' => '',           // quota_size  (bigint(20))
    'acitve' => '' ,              // active  (enum('n','y'))
    'puser' => '',                // puser  (varchar(64))
    'pgroup' => '',               // pgroup  (varchar(64))
    'shell' => '',                // shell  (varchar(255))
    'dir' => '',                  // dir  (bigint(20))
    'chroot' => '',               // chroot  (int(11))
  );
  $sites_web = array(
    'server_id' => '',            // server_id  (int(11))
    'ip_address' => '',           // ip_address  (varchar(39))
    'domain' => '',               // domain  (varchar(255))
    'type' => '',                 // type  (varchar(32))
    'parent_domain_id' => '',     // parent_domain_id  (int(11))
    'vhost_type' => '',           // vhost_type  (varchar(32))
    'document_root' => '',        // document_root  (varchar(255))
    'system_user' => '',          // system_user  (varchar(255))
    'system_group' => '',         // system_group  (varchar(255))
    'hd_quota' => '',             // hd_quota  (bigint(20))
    'traffic_quota' => '',        // traffic_quota  (bigint(20))
    'cgi' => '',                  // cgi  (enum('n','y'))
    'ssi' => '',                  // ssi  (enum('n','y'))
    'suexec' => '',               // suexec  (enum('n','y'))
    'errordocs' => '',            // errordocs  (tinyint(1))
    'is_subdomaionwww' => '',     // is_subdomainwww  (tinyint(1))
    'subdomain' => '',            // subdomain  (enum('none','www','*'))
    'php' => '',                  // php  (enum('n','y'))
    'ruby' => '',                 // ruby  (enum('n','y'))
    'redirect_type' => '',        // redirect_type  (varchar(255))
    'redirect_path' => '',        // redirect_path  (varchar(255))
    'ssl' => '',                  // ssl  (enum('n','y'))
    'ssl_state' => '',            // ssl_state  (varchar(255))
    'ssl_locality' => '',         // ssl_locality  (varchar(255))
    'ssl_organisation' => '',     // ssl_organisation  (varchar(255))
    'ssl_organization_unit' => '',// ssl_organisation_unit  (varchar(255))
    'ssl_country' => '',          // ssl_country  (varchar(255))
    'ssl_domain' => '',           // ssl_domain  (varchar(255))
    'ssl_request' => '',          // ssl_request  (mediumtext)
    'ssl_cert' => '',             // ssl_cert  (mediumtext)
    'ssl_bundle' => '',           // ssl_bundle  (mediumtext)
    'ssl_action' => '',           // ssl_action  (varchar(16))
    'stats_password' => '',       // stats_password  (varchar(255))
    'stats_type' => '',           // stats_type  (varchar(255))
    'allow_override' => '',       // allow_override  (varchar(255))
    'apache_directives' => '',    // apache_directives  (mediumtext)
    'php_open_base_dir' => '',    // php_open_basedir  (mediumtext)
    'custom_php_ini' => '',       // custom_php_ini  (mediumtext)
    'backup_interval' => '',      // backup_interval  (varchar(255))
    'backup_copies' => '',        // backup_copies  (int(11))
    'active' => '',               // active  (enum('n','y'))
    'traffic_quota_lock' => '',   // traffic_quota_lock  (enum('n','y'))
  );
  $sites_subdomain = array(
    'server_id' => '',            // server_id  (int(11))
    'ip_address' => '',           // ip_address  (varchar(39))
    'domain' => '',               // domain  (varchar(255))
    'type' => '',                 // type  (varchar(32))
    'parent_domain_id' => '',     // parent_domain_id  (int(11))
    'vhost_type' => '',           // vhost_type  (varchar(32))
    'document_root' => '',        // document_root  (varchar(255))
    'system_user' => '',          // system_user  (varchar(255))
    'system_group' => '',         // system_group  (varchar(255))
    'hd_quota' => '',             // hd_quota  (bigint(20))
    'traffic_quota' => '',        // traffic_quota  (bigint(20))
    'cgi' => '',                  // cgi  (enum('n','y'))
    'ssi' => '',                  // ssi  (enum('n','y'))
    'suexec' => '',               // suexec  (enum('n','y'))
    'errordocs' => '',            // errordocs  (tinyint(1))
    'is_subdomainwww' => '',      // is_subdomainwww  (tinyint(1))
    'subdomain' => '',            // subdomain  (enum('none','www','*'))
    'php' => '',                  // php  (enum('n','y'))
    'ruby' => '',                 // ruby  (enum('n','y'))
    'redirect_type' => '',        // redirect_type  (varchar(255))
    'redirect_path' => '',        // redirect_path  (varchar(255))
    'ssl' => '',                  // ssl  (enum('n','y'))
    'ssl_state' => '',            // ssl_state  (varchar(255))
    'ssl_locality' => '',         // ssl_locality  (varchar(255))
    'ssl_organisation' => '',     // ssl_organisation  (varchar(255))
    'ssl_organisation_unit' => '',// ssl_organisation_unit  (varchar(255))
    'ssl_country' => '',          // ssl_country  (varchar(255))
    'ssl_domain' => '',           // ssl_domain  (varchar(255))
    'ssl_request' => '',          // ssl_request  (mediumtext)
    'ssl_cert' => '',             // ssl_cert  (mediumtext)
    'ssl_bundle' => '',           // ssl_bundle  (mediumtext)
    'ssl_action' => '',           // ssl_action  (varchar(16))
    'stats_password' => '',       // stats_password  (varchar(255))
    'stats_type' => '',           // stats_type  (varchar(255))
    'allow_override' => '',       // allow_override  (varchar(255))
    'apache_directives' => '',    // apache_directives  (mediumtext)
    'php_open_basedir' => '',     // php_open_basedir  (mediumtext)
    'custom_php_ini' => '',       // custom_php_ini  (mediumtext)
    'backup_interval' => '',      // backup_interval  (varchar(255))
    'backup_copies' => '',        // backup_copies  (int(11))
    'active' => '',               // active  (enum('n','y'))
    'traffic_quota_lock' => '',   // traffic_quota_lock  (enum('n','y'))
  );

  return array(
    // Native API functions.
    'sites_cron_add' => array(
      'name' => 'sites_cron_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $sites_cron,
      ),
      'access' => array(
        'ispconfig_sites sites_add' => array(
          'title' => t('Adds Sites'),
          'description' => t('Allows adding a new Sites information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_cron_add',
      'file' => $file,
      'path' => $path,
    ),
    'sites_database_add' => array(
      'name' => 'sites_database_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $sites_database,
      ),
      'access' => array(
        'ispconfig_sites sites_add' => array(
          'title' => t('Adds Sites'),
          'description' => t('Allows adding a new Sites information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_database_add',
      'file' => $file,
      'path' => $path,
    ),
    'sites_database_user_add' => array(
      'name' => 'sites_database_user_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $sites_db_user,
      ),
      'access' => array(
        'ispconfig_sites sites_add' => array(
          'title' => t('Adds Sites'),
          'description' => t('Allows adding a new Sites information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_database_user_add',
      'file' => $file,
      'path' => $path,
    ),
    'sites_ftp_user_add' => array(
      'name' => 'sites_ftp_user_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $sites_ftp,
      ),
      'access' => array(
        'ispconfig_sites sites_add' => array(
          'title' => t('Adds Sites'),
          'description' => t('Allows adding a new Sites information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_sites_ftp_user_add',
      'file' => $file,
      'path' => $path,
    ),
    'sites_shell_user_add' => array(
      'name' => 'sites_shell_user_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $sites_shell,
      ),
      'access' => array(
        'ispconfig_sites sites_add' => array(
          'title' => t('Adds Sites'),
          'description' => t('Allows adding a new Sites information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_shell_user_add',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_aliasdomain_add' => array(
      'name' => 'sites_web_aliasdomain_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $sites_web,
        'readonly' => FALSE,
      ),
      'access' => array(
        'ispconfig_sites sites_add' => array(
          'title' => t('Adds Sites'),
          'description' => t('Allows adding a new Sites information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_aliasdomain_add',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_domain_add' => array(
      'name' => 'sites_web_domain_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $sites_web,
        'readonly' => FALSE,
      ),
      'access' => array(
        'ispconfig_sites sites_add' => array(
          'title' => t('Adds Sites'),
          'description' => t('Allows adding a new Sites information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_domain_add',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_subdomain_add' => array(
      'name' => 'sites_web_subdomain_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $sites_subdomain,
        'readonly' => FALSE,
      ),
      'access' => array(
        'ispconfig_sites sites_add' => array(
          'title' => t('Adds Sites'),
          'description' => t('Allows adding a new Sites information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_subdomain_add',
      'file' => $file,
      'path' => $path,
    ),
    'sites_cron_delete' => array(
      'name' => 'sites_cron_delete',
      'parameters' => array(
        'cron_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_delete' => array(
          'title' => t('Delete Sites'),
          'description' => t('Allows deleting Sites information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_cron_delete',
      'file' => $file,
      'path' => $path,
    ),
    'sites_database_delete' => array(
      'name' => 'sites_database_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_delete' => array(
          'title' => t('Delete Sites'),
          'description' => t('Allows deleting Sites information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_database_delete',
      'file' => $file,
      'path' => $path,
    ),
    'sites_database_user_delete' => array(
      'name' => 'sites_database_user_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_delete' => array(
          'title' => t('Delete Sites'),
          'description' => t('Allows deleting Sites information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_database_user_delete',
      'file' => $file,
      'path' => $path,
    ),
    'sites_ftp_user_delete' => array(
      'name' => 'sites_ftp_user_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_delete' => array(
          'title' => t('Delete Sites'),
          'description' => t('Allows deleting Sites information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_ftp_user_delete',
      'file' => $file,
      'path' => $path,
    ),
    'sites_shell_user_delete' => array(
      'name' => 'sites_shell_user_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_delete' => array(
          'title' => t('Delete Sites'),
          'description' => t('Allows deleting Sites information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_shell_user_delete',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_aliasdomain_delete' => array(
      'name' => 'sites_web_aliasdomain_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_delete' => array(
          'title' => t('Delete Sites'),
          'description' => t('Allows deleting Sites information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_aliasdomain_delete',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_domain_delete' => array(
      'name' => 'sites_web_domain_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_delete' => array(
          'title' => t('Delete Sites'),
          'description' => t('Allows deleting Sites information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_domain_delete',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_subdomain_delete' => array(
      'name' => 'sites_web_subdomain_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_delete' => array(
          'title' => t('Delete Sites'),
          'description' => t('Allows deleting Sites information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_subdomain_delete',
      'file' => $file,
      'path' => $path,
    ),
    'sites_cron_get' => array(
      'name' => 'sites_cron_get',
      'parameters' => array(
        'cron_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_get' => array(
          'title' => t('Get Sites'),
          'description' => t('Allows receiving Sites information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_cron_get',
      'file' => $file,
      'path' => $path,
    ),
    'sites_database_get' => array(
      'name' => 'sites_database_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_get' => array(
          'title' => t('Get Sites'),
          'description' => t('Allows receiving Sites information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_database_get',
      'file' => $file,
      'path' => $path,
    ),
    'sites_database_user_get' => array(
      'name' => 'sites_database_user_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_get' => array(
          'title' => t('Get Sites'),
          'description' => t('Allows receiving Sites information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_database_user_get',
      'file' => $file,
      'path' => $path,
    ),
    'sites_ftp_user_get' => array(
      'name' => 'sites_ftp_user_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_get' => array(
          'title' => t('Get Sites'),
          'description' => t('Allows receiving Sites information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_ftp_user_get',
      'file' => $file,
      'path' => $path,
    ),
    'sites_shell_user_get' => array(
      'name' => 'sites_shell_user_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_get' => array(
          'title' => t('Get Sites'),
          'description' => t('Allows receiving Sites information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_shell_user_get',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_aliasdomain_get' => array(
      'name' => 'sites_web_aliasdomain_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_get' => array(
          'title' => t('Get Sites'),
          'description' => t('Allows receiving Sites information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_aliasdomain_get',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_domain_get' => array(
      'name' => 'sites_web_domain_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_get' => array(
          'title' => t('Get Sites'),
          'description' => t('Allows receiving Sites information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_domain_get',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_subdomain_get' => array(
      'name' => 'sites_web_subdomain_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_get' => array(
          'title' => t('Get Sites'),
          'description' => t('Allows receiving Sites information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_subdomain_get',
      'file' => $file,
      'path' => $path,
    ),
    'sites_database_get_all_by_user' => array(
      'name' => 'sites_database_get_all_by_user',
      'parameters' => array(
        'client_id' => 0,
      ),
      'access' => array(
        'ispconfig_sites sites_get' => array(
          'title' => t('Get Sites'),
          'description' => t('Allows receiving Sites information from ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_database_get_all_by_user',
      'file' => $file,
      'path' => $path,
    ),
    'sites_cron_update' => array(
      'name' => 'sites_cron_update',
      'parameters' => array(
        'client_id' => 0,
        'cron_id' => 0,
        'params' => $sites_cron,
      ),
      'access' => array(
        'ispconfig_sites sites_update' => array(
          'title' => t('Update Sites'),
          'description' => t('Allows updating Sites information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_cron_update',
      'file' => $file,
      'path' => $path,
    ),
    'sites_database_update' => array(
      'name' => 'sites_database_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $sites_database,
      ),
      'access' => array(
        'ispconfig_sites sites_update' => array(
          'title' => t('Update Sites'),
          'description' => t('Allows updating Sites information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_database_update',
      'file' => $file,
      'path' => $path,
    ),
    'sites_database_user_update' => array(
      'name' => 'sites_database_user_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $sites_db_user,
      ),
      'access' => array(
        'ispconfig_sites sites_update' => array(
          'title' => t('Update Sites'),
          'description' => t('Allows updating Sites information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_database_user_update',
      'file' => $file,
      'path' => $path,
    ),
    'sites_ftp_user_update' => array(
      'name' => 'sites_ftp_user_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $sites_ftp,
      ),
      'access' => array(
        'ispconfig_sites sites_update' => array(
          'title' => t('Update Sites'),
          'description' => t('Allows updating Sites information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_ftp_user_update',
      'file' => $file,
      'path' => $path,
    ),
    'sites_shell_user_update' => array(
      'name' => 'sites_shell_user_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $sites_shell,
      ),
      'access' => array(
        'ispconfig_sites sites_update' => array(
          'title' => t('Update Sites'),
          'description' => t('Allows updating Sites information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_shell_user_update',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_aliasdomain_update' => array(
      'name' => 'sites_web_aliasdomain_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $sites_web,
      ),
      'access' => array(
        'ispconfig_sites sites_update' => array(
          'title' => t('Update Sites'),
          'description' => t('Allows updating Sites information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_aliasdomain_update',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_domain_update' => array(
      'name' => 'sites_web_domain_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $sites_web,
      ),
      'access' => array(
        'ispconfig_sites sites_update' => array(
          'title' => t('Update Sites'),
          'description' => t('Allows updating Sites information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_domain_update',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_subdomain_update' => array(
      'name' => 'sites_web_subdomain_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $sites_subdomain,
      ),
      'access' => array(
        'ispconfig_sites sites_update' => array(
          'title' => t('Update Sites'),
          'description' => t('Allows updating Sites information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_subdomain_update',
      'file' => $file,
      'path' => $path,
    ),
    'sites_web_domain_set_status' => array(
      'name' => 'sites_web_domain_set_status',
      'parameters' => array(
        'primary_id' => 0,
        'status' => '',
      ),
      'access' => array(
        'ispconfig_sites sites_update' => array(
          'title' => t('Update Sites'),
          'description' => t('Allows updating Sites information to ISPConfig.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_sites',
      'callback' => 'ispconfig_sites_sites_web_domain_set_status',
      'file' => $file,
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_help().
 */
function ispconfig_sites_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ispconfig_sites':
      return '<p>' . t('ISPConfig Help') . '</p>';
  }
}

//-----------------------------------------------------------------------------
// API functions of ISPConfig
//-----------------------------------------------------------------------------

/**
 * Adds a new cronjob.
 *
 * Implements ISPConfig sites_cron_add($session_id, $client_id, $params).
 *
 * @param $client_id
 *  ID of the Client.
 * @param $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of the newly added resource or NULL on errors.
 */
function ispconfig_sites_sites_cron_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_cron_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new database.
 *
 * Implements ISPConfig sites_database_add($session_id, $client_id, $params).
 *
 * @param $client_id
 *  ID of the Client.
 * @param $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of the newly added resource or NULL on errors.
 */
function ispconfig_sites_sites_database_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_database_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new database user.
 *
 * Implements ISPConfig sites_database_user_add($session_id, $client_id, $params).
 *
 * @param $client_id
 *  ID of the Client.
 * @param $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of the newly added resource or NULL on errors.
 */
function ispconfig_sites_sites_database_user_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_database_user_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new ftp user.
 *
 * Implements ISPConfig sites_ftp_user_add($session_id, $client_id, $params).
 *
 * @param $client_id
 *  ID of the Client.
 * @param $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of the newly added resource or NULL on errors.
 */
function ispconfig_sites_sites_ftp_user_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_ftp_user_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new shell user.
 *
 * Implements ISPConfig sites_shell_user_add($session_id, $client_id, $params).
 *
 * @param $client_id
 *  ID of the Client.
 * @param $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of the newly added resource or NULL on errors.
 */
function ispconfig_sites_sites_shell_user_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_shell_user_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new web aliasdomain if type is alias.
 *
 * Implements ISPConfig sites_web_aliasdomain_add($session_id, $client_id, $params, $readonly = false).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param boolean $readonly
 *  ReadOnly status either TRUE or FALSE.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of the newly added resource or NULL on errors.
 */
function ispconfig_sites_sites_web_aliasdomain_add($client_id, $params, $readonly, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_aliasdomain_add', array(
    'client_id' => $client_id,
    'params' => $params,
    'readonly' => $readonly,
  ), $session_id, $show_errors);
}

/**
 * Adds a new web domain.
 *
 * Implements ISPConfig sites_web_domain_add($session_id, $client_id, $params, $readonly = false).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param boolean $readonly
 *  ReadOnly status either TRUE or FALSE.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of the newly added resource or NULL on errors.
 */
function ispconfig_sites_sites_web_domain_add($client_id, $params, $readonly, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_domain_add', array(
    'client_id' => $client_id,
    'params' => $params,
    'readonly' => $readonly,
  ), $session_id, $show_errors);
}

/**
 * Adds a new web subdomain if type is subdomain.
 *
 * Implements ISPConfig sites_web_subdomain_add($session_id, $client_id, $params, $readonly = false).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param boolean $readonly
 *  ReadOnly status either TRUE or FALSE.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of the newly added resource or NULL on errors.
 */
function ispconfig_sites_sites_web_subdomain_add($client_id, $params, $readonly, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_subdomain_add', array(
    'client_id' => $client_id,
    'params' => $params,
    'readonly' => $readonly,
  ), $session_id, $show_errors);
}

/**
 * Deletes a cronjob.
 *
 * Implements ISPConfig sites_cron_delete($session_id, $cron_id).
 *
 * @param int $cron_id
 *  ID of the Cron.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_sites_sites_cron_delete($cron_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_cron_delete', array(
    'cron_id' => $cron_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a database.
 *
 * Implements ISPConfig sites_database_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  Primary ID of the source.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_sites_sites_database_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_database_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a database user.
 *
 * Implements ISPConfig sites_database_user_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  Primary ID of source.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_sites_sites_database_user_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_database_user_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes an ftp user.
 *
 * Implements ISPConfig sites_ftp_user_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  Primary ID of source.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_sites_sites_ftp_user_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_ftp_user_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a shell user.
 *
 * Implements ISPConfig sites_shell_user_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  Primary ID of source.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_sites_sites_shell_user_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_shell_user_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a web aliasdomain.
 *
 * Implements ISPConfig sites_web_aliasdomain_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  Primary ID of source.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_sites_sites_web_aliasdomain_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_aliasdomain_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a web domain.
 *
 * Implements ISPConfig sites_web_domain_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  Primary ID of source.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_sites_sites_web_domain_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_domain_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a web subdomain.
 *
 * Implements ISPConfig sites_web_subdomain_delete($session_id, $primary_id).
 * @param int $primary_id
 *  Primary ID of source.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_sites_sites_web_subdomain_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_subdomain_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a cronjob.
 *
 * Implements ISPConfig sites_cron_get($session_id, $cron_id).
 *
 * @param int $cron_id
 *  ID of the Cron.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_sites_sites_cron_get($cron_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_cron_get', array(
    'cron_id' => $cron_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a database.
 *
 * Implements ISPconfig sites_database_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_sites_sites_database_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_database_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a database.
 *
 * Implements ISPConfig sites_database_user_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_sites_sites_database_user_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_database_user_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about an ftp user.
 *
 * Implements ISPconfig sites_ftp_user_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_sites_sites_ftp_user_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_ftp_user_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a shell user.
 *
 * Implements ISPConfig sites_shell_user_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_sites_sites_shell_user_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_shell_user_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 *Retrieves information about a web aliasdomain.
 *
 * Implements ISPConfig sites_web_aliasdomain_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_sites_sites_web_aliasdomain_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_aliasdomain_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a web domain.
 *
 * Implements ISPConfig sites_web_domain_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_sites_sites_web_domain_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_domain_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a web subdomain.
 *
 * Implements ISPConfig sites_web_subdomain_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_sites_sites_web_subdomain_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_subdomain_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Returns information about the databases of the system user.
 *
 * Implements ISPConfig sites_database_get_all_by_user($session_id, $client_id).
 *
 * @param int $client_id
 *  ID of target client.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen client or NULL on error.
 */
function ispconfig_sites_sites_database_get_all_by_user($client_id, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_database_get_all_by_user', array(
    'client_id' => $client_id,
  ), $session_id, $show_errors);
}

/**
 * Updates a cronjob.
 *
 * Implements ISPConfig sites_cron_update($session_id, $client_id, $cron_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $cron_id
 *  ID of target cron.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_sites_sites_cron_update($client_id, $cron_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_cron_update', array(
    'client_id' => $client_id,
    'cron_id' => $cron_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a database.
 *
 * Implements ISPConfig sites_database_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_sites_sites_database_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_database_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a database.
 *
 * Implements ISPConfig sites_database_user_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_sites_sites_database_user_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_database_user_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates an ftp user.
 *
 * Implements ISPConfig sites_ftp_user_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_sites_sites_ftp_user_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_ftp_user_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a shell user.
 *
 * Implements ISPConfig sites_shell_user_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_sites_sites_shell_user_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_shell_user_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a web aliasdomain if type is alias.
 *
 * Implements ISPConfig sites_web_aliasdomain_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_sites_sites_web_aliasdomain_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_aliasdomain_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a web domain.
 *
 * Implements ISPConfig sites_web_domain_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_sites_sites_web_domain_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_domain_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a web subdomain if type is subdomain.
 *
 * Implements ISPConfig sites_web_subdomain_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_sites_sites_web_subdomain_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_subdomain_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Changes status of a web domain to 'active' or 'inactive'.
 *
 * Implements ISPConfig sites_web_domain_set_status($session_id, $primary_id, $status).
 *
 * @param int $primary_id
 *  Primary ID of the resource.
 * @param int $status
 *  Web domain status 'active' or 'inactive'.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  '1' if status has been changed, '0' if no changes were taken or NULL on error.
 */
function ispconfig_sites_sites_web_domain_set_status($primary_id, $status, $session_id = '', $show_errors = TRUE) {
  // Call to the ISPConfig core module.
  return ispconfig_api_execute('sites_web_domain_set_status', array(
    'primary_id' => $primary_id,
    'status' => $status,
  ), $session_id, $show_errors);
}
