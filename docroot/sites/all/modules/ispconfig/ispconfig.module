<?php

/**
 * @file
 * Module to administer ISPConfig from within Drupal.
 */

/**
 * Implements hook_help().
 */
function ispconfig_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ispconfig':
      return '<p>' . t('ISPConfig Help') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function ispconfig_permission() {
  return array(
    'ispconfig administration' => array(
      'title' => t('Administer ISPConfig'),
      'description' => t('Allows administering the settings of the ISPConfig module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ispconfig_menu() {
  $items = array();

  // Administration pages.
  $items['admin/config/services/ispconfig'] = array(
    'title' => 'ISPConfig',
    'description' => 'Manage ISPConfig settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ispconfig_settings_admin_form'),
    'file path' => drupal_get_path('module', 'ispconfig'),
    'file' => 'ispconfig.admin.inc',
    'access arguments' => array('ispconfig administration'),
  );

  // Translatables, included for translation extractors.
  t('ISPConfig');
  t('Manage ISPConfig settings.');

  return $items;
}

/**
 * Initializes and returns a SoapClient object to connect to the ISPConfig API
 *
 * @staticvar SoapClient $soap_client
 * @param bool $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return \SoapClient
 */
function ispconfig_api_get_soap_client($show_errors = TRUE) {
  // Check whether SoapClient is available
  if (!class_exists("SoapClient")) {
    $error = t('ISPconfig requires the PHP SOAP extension to be installed.');
    if ($show_errors) {
      drupal_set_message($error, 'error');
    }
    watchdog('ispconfig', 'ispconfig_api_get_soap_client: ' . $error, WATCHDOG_ERROR);
    return NULL;
  }

  if (!isset($soap_client)) {
    // Get the module settings
    $settings = variable_get('ispconfig_settings', array());

    // Validate the parameters and the settings
    if (empty($settings)) {
      $error = t('The ISPconfig settings are not valid.');
      if ($show_errors) {
        drupal_set_message($error, 'error');
      }
      watchdog('ispconfig', 'ispconfig_api_get_soap_client: ' . $error, WATCHDOG_ERROR);
      return NULL;
    }

    // Initialize the SoapClient
    static $soap_client;
    $soap_client = new SoapClient(NULL, array(
      'location' => $settings['location'],
      'uri' => $settings['uri'],
      'trace' => 1,
      'exceptions' => 1,
      'connect_timeout' => $settings['connection_timeout'],
    ));
  }

  return $soap_client;
}

/**
 * Starts an ISPConfig API session.
 *
 * This function is using the credentials set in the module administration.
 * It returns the session ID for the created session.
 *
 * @param bool $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *   Session ID string or null on errors.
 */
function ispconfig_api_login($show_errors = TRUE) {
  // Get the module settings
  $settings = variable_get('ispconfig_settings', array());

  // Initialize the SoapClient
  $soap_client = ispconfig_api_get_soap_client();
  if (is_null($soap_client)) {
    return NULL;
  }

  // Execute the API function
  try {
    // Start an API session with ISPConfig
    $session_id = $soap_client->login($settings['username'], $settings['password']);
  } catch (SoapFault $e) {
    $error = t('Error logging in to ISPconfig: @error', array('@error' => $e->getMessage()));
    if ($show_errors) {
      drupal_set_message($error, 'error');
    }
    watchdog('ispconfig', 'ispconfig_api_login: ' . $error, WATCHDOG_ERROR);
    return null;
  }

  // Whether we have a valid session
  if (empty($session_id)) {
    $error = t('Could not get a valid session ID from remote server.');
    if ($show_errors) {
      drupal_set_message($error, 'error');
    }
    watchdog('ispconfig', 'ispconfig_api_login: ' . $error, WATCHDOG_ERROR);
    return null;
  }

  return $session_id;
}

/**
 * Ends the given ISPConfig API session.
 *
 * @param string $session_id
 *   ID of an existing session with ISPConfig.
 * @param boolean $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return boolean
 *   true on success, false otherwise
 */
function ispconfig_api_logout($session_id, $show_errors = TRUE) {
  // Initialize the SoapClient
  $soap_client = ispconfig_api_get_soap_client();
  if (is_null($soap_client)) {
    return FALSE;
  }

  try {
    // Close the API session
    $soap_client->logout($session_id);
  } catch (SoapFault $e) {
    $error = t('Error logging out of ISPconfig: @error', array('@error' => $e->getMessage()));
    if ($show_errors) {
      drupal_set_message($error, 'error');
    }
    watchdog('ispconfig', 'ispconfig_api_logout: ' . $error, WATCHDOG_ERROR);
    return FALSE;
  }

  return TRUE;
}

/**
 * Executes an API call against the ISPconfig SOAP API.
 *
 * @param string $function
 *   The name of the API function to execute.
 * @param array $parameters
 *   Associative array containing the parameters for the API call.
 * @param string $session_id (optional)
 *   ID of an existing session with ISPConfig. If not set, a new session will be
 *   opened for this request and closed afterwards.
 * @param boolean $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *   null on error, the API call result otherwise.
 */
function ispconfig_api_execute($function, $parameters = array(), $session_id = '', $show_errors = TRUE) {
  // Initialize result
  $result = NULL;

  // Get a list of the registered API functions
  $functions = ispconfig_api_functions_get();

  // Validate the function; sub modules MUST register the allowed functions and their parameter structure.
  if (empty($function) || !array_key_exists($function, $functions)) {
    $error = t('The requested ISPconfig API function "@function" is not allowed.', array('@function' => $function));
    if ($show_errors) {
      drupal_set_message($error, 'error');
    }
    watchdog('ispconfig', 'ispconfig_api_execute: ' . $error, WATCHDOG_ERROR);
    return NULL;
  }

  // Validate the function; sub modules MUST register the allowed functions and their parameter structure.
  if ($functions[$function]['native'] !== TRUE) {
    $error = t('The requested "@function" is not a native ISPconfig API function. Execute the function "@fname" of the module "@module" instead.',
        array(
          '@function' => $function,
          '@fname' => $functions[$function]['callback'],
          '@module' => $functions[$function]['module'],
        ));
    if ($show_errors) {
      drupal_set_message($error, 'error');
    }
    watchdog('ispconfig', 'ispconfig_api_execute: ' . $error, WATCHDOG_ERROR);
    return NULL;
  }

  // Invoke pre-execution hooks
  foreach (module_implements("ispconfig_api_{$function}_pre_execute") as $module) {
    $pre_execute_hook = $module . '_ispconfig_api_' . $function . '_pre_execute';
    $pre_execute_hook($parameters);
  }

  $own_session = empty($session_id);
  // Whethter we have a valid session or have to open one for this API call.
  if ($own_session) {
    $session_id = ispconfig_api_login($show_errors);
  }
  if (is_null($session_id)) {
    return NULL;
  }

  // Initialize the SoapClient
  $soap_client = ispconfig_api_get_soap_client($show_errors);

  // Execute the API function
  try {
    // Do the actual API request
    $result = call_user_func_array(
      array(&$soap_client, $function),
      array_merge(array($session_id), array_values($parameters))
    );
  //  $result = $soap_client->get_function_list($session_id);
  }
  catch (SoapFault $e) {
    $error = t('Error while executing ISPconfig API function "@function": @error',
        array('@function' => $function, '@error' => $e->getMessage()));
    if ($show_errors) {
      drupal_set_message($error, 'error');
    }
    watchdog('ispconfig', 'ispconfig_api_execute: ' . $error, WATCHDOG_ERROR);
    return NULL;
  }

  // End the session, if it was opened for this request only.
  if ($own_session) {
    ispconfig_api_logout($session_id, $show_errors);
  }

  // Return the result
  return $result;
}

/**
 * Returns the registered ISPConfig API functions.
 *
 * @staticvar array $functions
 *   Registered API functions information.
 * @return array
 *   Registered API functions information.
 */
function ispconfig_api_functions_get() {
  if (!isset($functions)) {
    static $functions;

    // Invoke register api functions hooks
    $functions = module_invoke_all('ispconfig_api_functions_register');

    // Allow other modules to alter the API functions information
    drupal_alter('ispconfig_api_functions', $functions);
  }

  return $functions;
}

/**
 * Implements hook_ispconfig_api_functions_register().
 *
 * This ensures, we always have an array as return value.
 */
function ispconfig_ispconfig_api_functions_register() {
  return array();
}

/**
 * Checks, whether a given function name is implemented with the
 * ISPConfig API or not.
 *
 * @param string $function
 *   API function name to check for.
 * @return bool
 *   true, if the function is a registered ISPConfig API function, false otherwise.
 */
function ispconfig_api_is_registered_function($function) {
  $functions = ispconfig_api_functions_get();

  return(isset($functions[$function]));
}

/**
 * Gets the default parameters of a given API function.
 *
 * @param string $function
 *   API function name.
 * @return array
 *   Associative array of parameters for the API function call.
 */
function ispconfig_api_parameters($function) {
  $functions = ispconfig_api_functions_get();

  return (isset($functions[$function]['parameters'])) ? $functions[$function]['parameters'] : array();
}

/**
 * Provides a simplified way of calling native and custom functions against
 * the ISPConfig API.
 *
 * @param string $function
 *   Function name to execute. This function must have been registered before.
 * @param array $parameters
 *  Associative array containing the function parameters.
 * @param string $session_id
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Result of the API call or NULL on errors.
 */
function ispconfig_api($function, $parameters = array(), $session_id = '', $show_errors = true) {
  $functions = ispconfig_api_functions_get();

  // Validate the function; sub modules MUST register the allowed functions and their parameter structure.
  if (empty($function) || !array_key_exists($function, $functions)) {
    $error = t('The requested ISPconfig API function "@function" is not allowed.', array('@function' => $function));
    if ($show_errors) {
      drupal_set_message($error, 'error');
    }
    watchdog('ispconfig', 'ispconfig_api: ' . $error, WATCHDOG_ERROR);
    return NULL;
  }

  $callback = empty($functions[$function]['callback']) ? '' : $functions[$function]['callback'];

  if (empty($callback) || !is_callable($callback)) {
    $error = t('The callback function "@callback" for "@function" does not exist.', array('@callback' => $callback, '@function' => $function));
    if ($show_errors) {
      drupal_set_message($error, 'error');
    }
    watchdog('ispconfig', 'ispconfig_api: ' . $error, WATCHDOG_ERROR);
    return NULL;
  }

  // Make sure, we do have the right amount of parameters by merging the
  // given parameters with the registered parameter structure
  $parameters = array_merge($functions[$function]['parameters'], $parameters);

  // Execute the function
  return call_user_func_array(
    $callback,
    array_merge($parameters, array('session_id' => $session_id, 'show_errors' => $show_errors))
  );
}