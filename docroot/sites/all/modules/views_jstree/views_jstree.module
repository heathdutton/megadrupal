<?php

module_load_include('inc', 'views_jstree', 'views_jstree.token');

/**
 * Implements of hook_views_api().
 */
function views_jstree_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'views_jstree'),
  );
}

/**
* Implements hook_menu
*/
function views_jstree_menu() {
  $items = array();
  $items['jstree/load/%/%/%'] = array(
    'page callback' => 'views_jstree_load_children',
    'page arguments' => array(2,3,4), //2=view name, 3=display, 4=parent_id, ID if initial display
    'access callback' => 'views_jstree_load_children_access',
    'access arguments' => array(2,3),
  );
  
  $items['jstree/move/%/%/%node'] = array(
    'page callback' => 'views_jstree_move_child',
    'page arguments' => array(2, 3, 4), //2=view name, 3=display, 4=parent_id
    'access callback' => 'views_jstree_move_child_access',
    'access arguments' => array(2, 3, 4),
  );
  
  $items['jstree/move/%/%/%/access/%'] = array( 
    'page callback' => 'views_jstree_move_child_check_access',
    'page arguments' => array(2,3,4,6), //arg 2 is the view name, 3rd is the display_id, 4 is the id of the moved node and 6 is 4 is the nid of the new parent
    'access callback' => true,
  );

  return $items;
}

/**
* Implements hook_form_alter
*/
function views_jstree_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $form['#submit'][] = 'views_js_tree_views_exposed_form_submit';
  }
}

function views_js_tree_views_exposed_form_submit($form, $form_state) {
  //save the values submitted to the view if view is js tree plugin
  //but we dont save the filter for get children requests because they dont submit filter data on ajax request
  if (!isset($_REQUEST['operation'])) {
    $display = $form_state['display'];
    $display_vid = $display->vid;
    $display_id = $display->id;
    $_SESSION['views_jstree_filter'][$display_vid] = $_REQUEST;
  }
  
}

/**
* Adds jstree CSS and JS files
*/
function views_jstree_require_jstree() {
  //include the jstree with the library module
  $jstree_path = libraries_get_path('jstree');

  //if not exists, warn the user!
  $jstree_download = l('latest jstree', 'http://www.jstree.com');
  $jstree_root = $jstree_path;
  if (!file_exists($jstree_path."/jquery.jstree.js")) {
    drupal_set_message(t('Please download !jstree_download and place files from package in !jstree_root', array('!jstree_download' => $jstree_download, '!jstree_root' => $jstree_root)), 'warning');
  }
  
  drupal_add_css($jstree_path."/themes/default/style.css",array('type'=>'file','preprocess'=>FALSE));
  
  //add jstree Javascript and all its components
  drupal_add_js($jstree_path."/_lib/jquery.cookie.js",array('type'=>'file','group'=>JS_LIBRARY,'preprocess'=>FALSE));
  drupal_add_js($jstree_path."/_lib/jquery.hotkeys.js",array('type'=>'file','group'=>JS_LIBRARY,'preprocess'=>FALSE));
  drupal_add_js($jstree_path."/jquery.jstree.js",array('type'=>'file','group'=>JS_LIBRARY,'preprocess'=>FALSE));
}

/**
 * Implements of hook_theme().
 */
function views_jstree_theme($existing, $type, $theme, $path) {
  return array(
    //the js tree
    'views_jstree' => array(
      'variables' => array(
        'view' => NULL,
        'options' => array(),
        'rows' => array(),
        'title' => NULL,
      ),
    ),
  );
}

/**
* Returns fields of a display. If fields are not overriden, we take the fields of the default view.
*/
function views_jstree_get_fields_of_view($view, $display) {
  $fields = false;
  if (isset($display->display_options['fields']))
    $fields = $display->display_options['fields'];

  if (!$fields) { //if not overriden, take from view
    if (isset($view->display['default']->display_options['fields']))
      $fields = $view->display['default']->display_options['fields'];
  }
  
  return $fields;
}

function views_jstree_get_options_of_view($view, $display) {
  $options = isset($display->display_options['style_options']) ? $display->display_options['style_options'] : false;

  if (!$options) { //if not overriden, take from view
    $options = $view->display['default']->display_options['style_options'];
  }
  
  return $options;
}

/**
 * Theme function for the jstree style plugin.
 *
 * We need to do some weirdness that makes more sense as a theme function
 * than as a template.
 *
 * @ingroup themeable
 * @link http://drupal.org/node/355919
 */
function theme_views_jstree($variables) {
  //only if this is not a view path....oh man thats dirty :-(
  if (strpos($_GET['q'], 'jstree') === false)
    $_SESSION['view_jstree']['current_tree_url'] = $_GET['q'];  //so other modules know which url ist actually viewd (@see erpal_book_helper, erpal_book_helper_jstree_context_menu)
    
  views_jstree_require_jstree();

  $view = $variables['view'];
  $options = $variables['options'];
  $rows = $variables['rows'];
  $title = $variables['title'];

  $result = $view->result;
  $fields = &$view->field;

  $parents = array();
  
  //now we show the first nodes at top level here, other nodes are reloaded by ajax in the tree  
  $nid = isset($view->args[0]) ? $view->args[0] : 0;
  $id = 'views_jstree_'.$nid;
  $view_name = $view->name;  

  $display_id = $view->current_display;
  
  //save the views arguments in session so we can use them in other child view reuqest (for example the argument project that definies the project of a task and should be used in every query to improve performance and not select all tasks!)
  //$_SESSION['view_jstree'][$view_name][$display_id]['args'] = $view->args;
  
  //add javascript variables
  $ajax_url = url("jstree/load/$view_name/$display_id");
  $ajax_url_move = url("jstree/move/$view_name/$display_id");
  $ajax_url_move_access_base = url("jstree/move/$view_name/$display_id");
  
  $jstree_options = array();
  $jstree_options['trees'][$id] = array('parent_nid' => $nid, 'ajax_url' => $ajax_url, 'ajax_url_move' => $ajax_url_move, 'ajax_url_move_access_base' => $ajax_url_move_access_base);
  
  //get all parent possible parent child node type relations. 
  $allowed_parent_child_types = module_invoke_all('jstree_allowed_child_types');
  if (!$allowed_parent_child_types)
    $allowed_parent_child_types = array();
  $jstree_options['allowed_parent_child_types'] = $allowed_parent_child_types;
  drupal_add_js(array('jstree_options' => $jstree_options), 'setting');
  
  $mod_path = drupal_get_path('module', 'views_jstree');
  drupal_add_js($mod_path."/js/views_jstree.js");
  
  return '<div id="'.$id.'" class="jstree"></div>';
 
}

/**
* Access callback for ajax loading of view_data
*/
function views_jstree_load_children_access() {
  return true; //@TODO implement access validation, maybe use permissions set on view but nodes will be check by grant system anyway.
}

/**
* This function is used as callback for menu item to let the tree check access when moving a node
* @param $nid the nid of the node that is moved
* @param $parent_nid the nid of the new parent node
*/
function views_jstree_move_child_check_access($view_name, $display_id, $nid, $parent_nid) {
    
  if ($parent_nid) {
    $node = node_load($nid);  
    $parent_node = node_load($parent_nid);
  } else
    $parent_node = false;
  
  $access = views_jstree_move_child_access($view_name, $display_id, $node, $parent_node);
  
  $ret = array();
  $ret['access'] = $access;
 
  die(json_encode($ret));
}

/**
* validate access if a node is going to be moved in the tree
*/
function views_jstree_move_child_access($view_name, $display_id, $node, $new_parent_node=false) {
 
  if (!$new_parent_node) {
    $data = $_REQUEST;
    $parent_nid = $data['new_parent_nid'];
    $new_parent_node = node_load($parent_nid);
  }  
  
  //no self referencing!
  if ($node->field_parent[LANGUAGE_NONE][0]['target_id'] == $node->nid)
    return false;
    
  //ask other modules if they are against moving this node
  $deny_access = module_invoke_all('jstree_move_child_deny_access', $view_name, $display_id, $node, $new_parent_node);
  if (in_array(1, $deny_access))
    return false; 
  
  return node_access('update', $node);
}

/**
* AJAX Callback function for moving the node in jstree
* @param $nid the nid of the node that is moved
*/
function views_jstree_move_child($view_name, $display_id, $node) {
  $data = $_REQUEST;

  $op = $data['operation'];
  $new_parent_nid = $data['new_parent_nid'];
  $position = $data['position'];
  $root = $data['root'];
  
  $view = views_get_view($view_name);
  if (!is_object($view))
    die(json_encode(array('result' => false)));
  
  $children_display = _views_jstree_get_display($view, $display_id);  //the view that displays the children
  
  if ($op != 'move_node')
    die(json_encode(array('result' => false)));
   
  //check what is the parent field
  $fields = views_jstree_get_fields_of_view($view, $children_display);
  $options = views_jstree_get_options_of_view($view, $children_display);
  
  $parent_field = $fields[$options['parent_field']];
  $weight_field = $fields[$options['weight_field']];

  if ($new_parent_nid == 1){  //@TODO: is this really always 1 if we drag at top level under the root??
    //set parent to argument, because this is the root.
    $new_parent_nid = $root;
  }

  $node->old_parent = $node->{$parent_field['id']}[LANGUAGE_NONE][0]['target_id'];
  $node->old_weight = $node->{$weight_field['id']}[LANGUAGE_NONE][0]['value'];
  $node->{$parent_field['id']}[LANGUAGE_NONE][0]['target_id'] = $new_parent_nid;
  $node->{$weight_field['id']}[LANGUAGE_NONE][0]['value'] = $position;

  //call hook when node is moved, so other module could interact with the moved node
  module_invoke_all('views_tree_before_move', $node, $position, $view_name, $display_id);


  //### ONLY SAVE THE NODEs FIELD INSTEAD OF THE COMPLETE NODE
  //save only the weight field  
  $fields = array();  
  $info = field_info_field($weight_field['id']);
  $fields[] = $info['id'];
  $info = field_info_field($parent_field['id']);
  $fields[] = $info['id'];

  //write new parent and weight field to database   
  field_sql_storage_field_storage_write('node', $node, 'update', $fields);
  entity_get_controller('node')->resetCache(array($node->nid));  //clear cache
  //### END SAVING NODES FIELD

  module_invoke_all('views_tree_after_move', $node, $view_name, $display_id);

  die(json_encode(array('result' => true)));
}

/**
 * Implements hook_views_query_alter
 */
function views_jstree_views_query_alter(&$view, &$query) {

  if ($view->style_plugin->plugin_name == 'jstree') {
    
    $ids = _views_jstree_cache_children();
 
    //get the ID field
    $id_field = _views_jstree_cache_view_id_field();
    if (!isset($id_field['table']))
      return;

    $query->add_where(
      $id_field['table'].'.'.$id_field['field'], $id_field['table'].'.'.$id_field['field'], $ids, 'IN'
    );
    
  }
  
}

/**
 * Cache child nids to be used in hook_views_query_alter
 */
function _views_jstree_cache_children($set_ids=false) {
    
  static $ids = array();
  
  if ($set_ids) {
    $ids = $set_ids;
  }
  return $ids;
}

function _views_jstree_cache_view_id_field($set_id_field=false) {
   
  static $id_field = array();
  
  if ($set_id_field) {
    $id_field = $set_id_field;
  }
  return $id_field;
}

/**
* Implements hook_views_pre_view
*/
function views_jstree_views_pre_build(&$view) {
  
  if (!empty($view->jstree_remove_args)) {
    //we remove the arguments because we need the view to be executed only with filters and the given IDs to check
    //which IDs are matching the views filter
    $view->display_handler->handlers['argument'] = array();
    $view->argument = array();
    
  }

  if (!empty($view->jstree_remove_filters)) {
    //we remove the arguments because we need the view to be executed only with filters and the given IDs to check
    //which IDs are matching the views filter
    $view->display_handler->handlers['filter'] = array();
    $view->filter = array();
  }
  
}


/**
* AJAX Callback function for loading tree children
*/
function views_jstree_load_children($view_name, $display_id, $parent_id) {

  $view = views_get_view($view_name);

  if (!is_object($view))
    return array();
  
  $parent_node = node_load($parent_id);
  $parent_types = array($parent_node->type);

  $children_display = _views_jstree_get_display($view, $display_id);

  //execute it and return data as json  
  $args = array($parent_id);

  $display_vid = $children_display->vid; 
  $filter_values = isset($_SESSION['views_jstree_filter'][$display_vid]) ? $_SESSION['views_jstree_filter'][$display_vid] : array(); //@TODO this works but it is not the best way to do that!

  $fields = views_jstree_get_fields_of_view($view, $children_display);
  $options = views_jstree_get_options_of_view($view, $children_display);
  
  $parent_field = $fields[$options['parent_field']];

  $id_field = $fields[$options['id_field']];
  $weight_field = $fields[$options['weight_field']];  
  $type_field = $fields[$options['type_field']];

  $total_result = _views_jstree_get_direct_children($parent_id, $parent_field['id'], $parent_types);

  //$total_result = _views_jstree_get_children_by_parent($parent_id, $id_field, $type_field, $parent_field, $parent_types);

  //go through the results and get the nids of all parents that have filter-matching childs but dont match the filter themselfes.

  /*  
  - 1) If an exposed filter is set: We fist have to load all nodes that exist as direct children of the parent. The exposed filter has to be ignored.
  - 2) After that we have to execute a deep search for every result node. We collect all these nids per parent on top level of the parent node grouped by the parent.
  (that means per result row from the first query)
  - 3) Then we execute a query that will get these new result IDs from the previous query as argument (including the parents from top level of the current parent node) 
  and we assign the exposed filter the user has set (previously we ignored the filter to get all ids!)
  - 4) Now we iterate through all grouped nodes (grouped by parent) from step 2 and their children (that we known from the deep search) and check if one of these children is 
  still included in the result set of step 3. If this is not, we delete the nids, otherwise we keep then and add them to the final result set.
  - 5) Now we check for all results on top level that have no childre if they match the filter (that means they are included in the nids of step 3). If not, they will be removed
  from the result set.
  */  

  unset($filter_values['operation']);  //if not removed, this will disturb our filtering "if-statement"

  //What is done in this if-section? So we have a tree. If we filter with exposed filters, users will get filtered nodes in the tree. But they will see nodes that dont match the filter if these nodes are parent nodes of filter-matching children. If these non-filter-matching parent nodes would not be shown, even the matching children would not be visible. At first try, I thougth it is enough to execute this section only if exposed form was submitted because of Performance reasons, BUT: in ERPAL for example we filter tickets and tasks (the same node type with a flag). So a ticket ca be parent of a task and a task can be the parent of a ticket. So here we have to show parents that dont match the filter (task or ticket) even if no exposed form was submitted.
    
  $all_children_flat = array(); //simply all the child nids
  $children_by_root = array(); //child nids grouped by parent

  //in results array we have all nids that have parent_id as direct parent
  foreach ($total_result as $delta=>$obj) {      
    //now get all children of the current rows sub tree
    $sub_children = _views_jstree_get_all_child_nids_deep_search($obj->nid, $parent_field['id']);
    //add the node itself, too
    $all_children_flat[$obj->nid] = $obj->nid;
    $children_by_root[$obj->nid] = array();  //otherwise the node will not be displayed if it has no children, which would be wrong.
    //now add the children to our array
    foreach ($sub_children as $delta=>$sub) {
      $all_children_flat[$sub['child']] = $sub['child'];
      $children_by_root[$obj->nid][] = $sub['child'];
    }      
  }

  //now execute a view by id arguement and the given filter to filter node that 
  //should not be displayed according to the current set filter. Therefor
  //we make a new view instance
  
  $by_id_view = views_get_view($view_name);    
  $by_id_display = _views_jstree_get_by_id_display($by_id_view, $display_id); 

  //$args = $_SESSION['view_jstree'][$view_name][$display_id]['args'];
  /*
  hier müssen wir dafür sorgen, dass das View ausgeführt wird, ohne dass ein argument vorhanden ist und dieses die Ergebnisse beeinflusst. Dafür altern wir das query und packen dort alle nids rein damit der einzige Filter des Views die nids und die tatsächlich eingestellten Filter sind. 
  */
  //set filter  
  _views_jstree_cache_children($all_children_flat);  
  _views_jstree_cache_view_id_field($id_field); 

  //execute the view to know, which nodes are really part of the result
  $view->set_exposed_input($filter_values);
  
  $view->jstree_remove_args = true;

  $view->preview($display_id);

  $filtered_result = $view->result;

  //now go through the grouped array of all results and eleminate nodes from deep search that are no more part of the filtered result set.      
  $non_filter_matching_nids = array();
  foreach ($children_by_root as $parent_nid=>$children_nids) {        
    foreach ($children_nids as $delta=>$child_nid) {
      $in_filtered_result = false;
      foreach ($filtered_result as $filtered_obj) {
        //check children
        if ($filtered_obj->nid == $child_nid) {
          $in_filtered_result = true;
        }
      }
      
      if (!$in_filtered_result) {
        unset($children_by_root[$parent_nid][$delta]); //no result of filtered nodes, so delete the node from final resultset            
      }
      
    }
    
    //if there are some root nodes without children in $children_by_root, check if they match the filtered_result. If not, delete them        
    if (is_array($children_by_root)) {
      if (!count($children_by_root[$parent_nid])) { //if there are no child nids in the parent subtree, delete the parent, but only if the parent itself doesnt match the filter!

        $in_filtered_result = false;
        foreach ($filtered_result as $filtered_obj) {
          if ($filtered_obj->nid == $parent_nid) {
            $in_filtered_result = true;
            break;
          }
        }
        if (!$in_filtered_result)
          unset($children_by_root[$parent_nid]);
      }
    }
  }

  //now delete all the nodes in total_result that are not direct children and mark non filter-matching nodes.
  foreach ($total_result as $delta=>$result_obj) {
    if (!isset($children_by_root[$result_obj->nid])) {
      unset($total_result[$delta]);
    }
    if (isset($total_result[$delta])) {
      //mark the result if it doesn't match the filter
      $result_obj->filter_matching = false;
      foreach ($filtered_result as $filtered_obj) {
        if ($result_obj->nid == $filtered_obj->nid)
          $result_obj->filter_matching = true;
      }           
    }
      
  }

  //check if the result has some children
  $total_result_flat = array();
  foreach ($total_result as $delta=>$result_obj) {               
    if (isset($children_by_root[$result_obj->nid]) && count($children_by_root[$result_obj->nid])) {
      $result_obj->has_children = true;
    } else
      $result_obj->has_children = false;
    $total_result_flat[$result_obj->nid] = array('has_children' => $result_obj->has_children, 'filter_matching' => $result_obj->filter_matching);
  }     

  //remove all children nids that are not part of the views result
  foreach ($all_children_flat as $delta => $child) {
    if (!isset($total_result_flat[$child])) {
      unset($all_children_flat[$delta]);
    }
  }
  

  _views_jstree_cache_children($all_children_flat);  
  //execute with no filters and no arguments, just with the nids of all tree children
  $view = views_get_view($view_name);
  $view->jstree_remove_args = true;
  $view->jstree_remove_filters = true;
  $view->preview($display_id);

  $filtered_result = $view->result;
  
  $result = $total_result;

  $output = array();
  $passed_nids = array();
  foreach($view->result as $delta=>$row) {        
    //@TODO thats not very good way but if there are some relations, setting query distinct will not work...
    //so we remove douplicate tasks here in the view result
    if ($view->query->distinct && isset($passed_nids[$row->nid]))
      continue;
    
    $passed_nids[$row->nid] = true;
  
    //Execute next view to see if it has some children!
    $subargs = array($row->nid);

    $node_type_field = $type_field['table'].'_'.$type_field['id'];
    $row_type = !empty($row->type) ? $row->type : $row->{$node_type_field}; //@TODO is there a way to get the real name?
    $parent_types = array($row_type);  

    $hasChildren = $total_result_flat[$row->nid]['has_children'];
    $filter_matching = $total_result_flat[$row->nid]['filter_matching'];
    $node_uri = url('node/'.$row->nid);

    $status = '';
    if (isset($row->field_field_task_status_term[0]['raw']['value']))  //@TODO should be dynamically set in view options for general usage
      $status = " ".$row->field_field_task_status_term[0]['raw']['value'];
      
    //if filter matching is not set, there may be no filter...!
    if (!isset($row->filter_matching))
      $row->filter_matching = true;
    
    //create the output
    $renderer = $view->style_plugin->row_plugin;

    $view->row_index = $delta;

    $rendered_row = $renderer->render($row);

    $filter_matching_class = $filter_matching ? 'filter_matching' : 'no_filter_matching';
    
    if($node_uri) {
      $rendered_row = array('attr' => array('href' => $node_uri),'title' => $rendered_row);      
    }
    
    $output[] = array(
      "attr" => array(
  "id" => "node_".$row->nid, "rel" => $row->node_type, "type" => $row->node_type, "uri" => $node_uri, "entity_id" => $row->nid, "class" => $row->node_type." ".$status." ".$filter_matching_class
      ), 
      "data" => $rendered_row,
      "state" => $hasChildren ? "closed" : '', //or '' if no Children!
      'context_menu' => _views_jstree_get_context_menu($view, $children_display, $row->node_type, $row->nid, $row, $parent_id),
    );
  }

  die(json_encode($output));
}


/**
 * Implements hook_jstree_context_menu
 * This hook will add the "Collapse All" and "Expand All" option to the context menu.
 */
function views_jstree_jstree_context_menu( $entity_type, $bundle, $id, $root_id ) {
  $items    = array();
  
  $items[]  = array(
    // This will add a separator above the link if it's not the first item of the menu.
    'group_start' => TRUE,
    'title'       => t('Expand All'),
    'action'      => 'expand_all',
  );
  $items[]  = array(
    'title'       => t('Collapse All'),
    'action'      => 'collapse_all',
  );
  
  return $items;
}


/**
* returns context_menu data for a given node
*/
function _views_jstree_get_context_menu($view, $display, $node_type, $nid, $row, $root_id) {
  //get the options first!
  $context_menu_options = !empty($display->display_options['style_options']['context_menu']) ? $display->display_options['style_options']['context_menu'] : FALSE;
  if (!$context_menu_options) {
    //get options from default view
    if (isset($view->display['default']->display_options['style_options']['context_menu']))
      $context_menu_options = $view->display['default']->display_options['style_options']['context_menu'];
    else 
      $context_menu_options = array('use_context_menu_hook' => true);
  }

  //now get the menu either from textarea or from implemented hooks
  if ($context_menu_options['use_context_menu_hook']) {
    //from hooks!   
    $menu = module_invoke_all('jstree_context_menu', 'node', $node_type, $nid, $root_id, $view, $display);
    _views_jstree_prepare_context_menu($menu);
    return $menu;
  } else {
    $type_prefix = 'views_jstree';
    $type = $type_prefix."_".$view->name."_".$display->id;

    $custom_context_menu = $context_menu_options['custom_context_menu'];
    $custom_context_menu = token_replace($custom_context_menu, array($type => array('view' => $view, 'display' => $display, 'row' => $row)));
   
$br = "
";    //a linebreak that always works
    $menu = array();
    $items = explode($br, $custom_context_menu);
    
    foreach ($items as $item) {
      $elements = explode('|', $item);
      $title = $elements[0];
      $url = $elements[1];
      $menu[] = array('title' => $title, 'url' => $url);
    }
    
    _views_jstree_prepare_context_menu($menu);
    return $menu;
  }
 
}

/**
* Returns the view that is needed for querying all tasks only by nid using contextual filter because views filter cannot
* query with "Where nid IN (1,2,4)"
*/
function _views_jstree_get_by_id_display($view, $a_display_id) {
  
  foreach($view->display as $display_id=>$display) {
    $display_options = $display->display_options;
    if ($display_id == $a_display_id) {
    //if (isset($display_options['style_options']['results_id']) && $display_options['style_options']['results_id']) {
      return $display;     
    }
  }
  
  return false;
}

/**
* Validates that the user has access to all path of the given array
* Returns if the current user has access, false otherwise
* path, the user has no access to or where the path not exists
*/
function _views_jstree_prepare_context_menu(&$urls) {
  foreach ($urls as $delta => $url) {
    
    if(empty($url['url']))
      continue;

    $path_valid = drupal_valid_path($url['url']);
 
    if (!$path_valid) {
      unset($urls[$delta]);
    }
    else {
      //make a full path
      $options = array();
      if (!empty($url['attributes']))
        $options = $url['attributes'];
      $urls[$delta]['url'] = url($url['url'], $options);
    }
  }

}

/**
* Return the display of a view 
*/
function _views_jstree_get_display($view, $a_display_id) {

  foreach($view->display as $display_id=>$display) {
    $display_options = $display->display_options;
    
    if ($a_display_id == $display_id)
      return $display;   
  }
  return false;
}

/**
 * Code mostly taken from views_tree module, THANKS!
 *
 * Normalize a value out of the record to an int.
 *
 * If the field in question comes from Field API, then it will be an array, not
 * an int.  We need to detect that and extract the int value we want from it.
 * Note that because Field API structures are so free-form, we have to specifically
 * support each field type.  For right now we support entityreference (target_id),
 * nodereference (nid), userreference (uid), and taxonomyreference (tid).
 *
 * @param mixed $value
 *   The value to normalize.  It should be either an int or an array. If an int,
 *   it is returned unaltered.  If it's an array, we extract the int we want
 *   and return that.
 * @param views_handler_field $field
 *   Metadata about the field we are extracting information from.
 * @return int
 *   The value of this key, normalized to an int.
*
*
* @TODO I think this function could be removed but we have to check if it is not executed as a hook
 */
function views_jstree_normalize_key($value, views_handler_field $field) {
  if (is_array($value) && count($value)) {
    if (isset($field->field_info['columns'])) {
      $columns = array_keys($field->field_info['columns']);
      foreach ($columns as $column) {
        if (in_array($column, array('target_id', 'nid', 'uid', 'tid'))) {
          $field_property = $column;
          break;
        }
      }
    }
    else {
      $field_property = '';
    }
    return $field_property ? $value[0][$field_property] : 0;
  }
  else {
    return $value ? $value : 0;
  }
}

/**
* Gets all child nodes nids of a given parent by deepsearch.
* @return a flat array with all children nids in deep search order, each node in an array whith key 'child' and 'parent'
*/
function _views_jstree_get_all_child_nids_deep_search($nid, $parent_field_name) {
  $children = _views_jstree_get_direct_children($nid, $parent_field_name);

  $all_children = array();
  foreach ($children as $delta=>$child) {    
    $sub_children = _views_jstree_get_all_child_nids_deep_search($child->nid, $parent_field_name);
    $all_children[] = array('parent' => $nid, 'child' => $child->nid);
    $all_children = array_merge($all_children, $sub_children);
  }
  
  return $all_children;
}

/**
* returns an array of direct children nids of a node using field_parent
* @param $nid the parent nid to search children for
* @param $types only those node types are returned
*/
function _views_jstree_get_direct_children($nid, $parent_field_name, $parent_types=array()) {

  if (!$nid)
    return array();

  $metaData = array('parent_id' => $nid, 'parent_types' => $parent_types);  
  
  //load information for parent field
  $field_info = field_info_field($parent_field_name);
  $sql_arr = $field_info['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
  $field_name = array_keys($sql_arr);
  $field_parent_table = $field_name[0];
  $value_field_parent = $sql_arr[$field_parent_table]['target_id'];
  
  $parent_type_field = 'parent_type'; //just an alias
  $query = db_select('node',"n");  //@TODO: works only with nodes, yet.
  $query->fields('n', array('nid', 'title', 'type'));
  $query->addField('np', 'type', $parent_type_field);
  $query->leftJoin($field_parent_table, 'p', 'n.vid = p.revision_id');
  $query->leftJoin('node', 'np', 'np.nid = p.'.$value_field_parent);    
  
  $query->addMetaData('jstree_child_query_data', $metaData); //add some MetaData to process in altered Query
  $query->addTag('views_jstree');
  
  //ask other modules to skipp the conditions because they implement it on their own
  $before_execute = module_invoke_all('jstree_query_before_execute', $query, $parent_types);

  if (empty($before_execute['skip_conditions'])) {
    $query->condition('p.'.$value_field_parent, $nid);
  }

  $result = $query->execute();
  
  $children = array();
  foreach ($result as $record) {
    // Do something with each $record
    $resultObj = new stdClass;
    $resultObj->nid = $record->nid;
    $resultObj->type = $record->type;
    $resultObj->title = $record->title;
    $children[] = $resultObj;    
  }

  return $children;
}