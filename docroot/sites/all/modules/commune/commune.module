<?php

/**
 * @file
 * Generate a Drupal wall for user status post and wall updates.
 * @auther : Abhijeet Kalsi.
 */

module_load_include ('inc', 'commune', 'commune.page');
/**
 * Implements hook_permission().
 */
function commune_permission() {
  return array (
      'access global commune posts' => array (
          'title' => t ('Access Global Commune Posts') 
      ),
      'commune_delete_posts_on_own_wall' => array(
          'title' => t ('Delete Any Posts on Own Wall')
      ),
      'commune_edit_posts_on_own_wall' => array(
          'title' => t ('Edit Any Posts on Own Wall')
      ),
  );
}

/*
 * implement hook_views_api()
 */
function commune_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commune') . '/views',
  );
}

/**
 * Implements hook_help().
 */
function commune_help($path) {
  if ($path == 'admin/help#commune') {
    $help = '<p>' . t ("This module allows you to post the status on a user’s profile in the form of text, image or video status. Logged user can post comments on any user’s status. Visitors can only view the status and comments of any user (by default). While the permission of View/ Delete/ Edit can also be set by the administrator. The user can delete only that post or comment which he/ she has submitted to other profile. Posts on user’s own profile can also be easily deleted or edited instantly via AJAX.") . '<br /><br />' . t ("Also, it allows the user to like his own status or comments as well as other user’s status with help of a well known FLAG module. The theming of wall status will give you the experience just like the facebook wall.") . '</p>';
    return $help;
  }
}

/**
 * Implements hook_help().
 */
function commune_menu() {
  $menu['commune/users'] = array(
      'page callback' => 'commune_users',
      'access arguments' => array('access user profiles'),
      'type' => MENU_CALLBACK,
  );

  $menu['admin/config/user-interface/commune'] = array (
      'title' => t('Commune Post Settings'),
      'description' => t('Manage what is posted and displayed on Community walls'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array (
          '_commune_configure_form' 
      ),
      'access callback' => 'user_access',
      'access arguments' => array (
          'administer site configuration' 
      ),
      'file' => 'commune.admin.inc',
      'weight' => - 1 
  );

  // For global drupal wall page
  $menu['commune'] = array (
      'title' => t('Global Commune Posts'),
      'page callback' => '_commune_page',
      'page arguments' => array('global', 0),
      'access callback' => 'user_access',
      'access arguments' => array (
          'access global commune posts' 
      ),
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM 
  );

  $menu['commune/u/%commune_uid_optional'] = array (
      'title' => t('My Community'),
      'page callback' => '_commune_page',
      'access callback' => 'user_access',
      'page arguments' => array('all', 2),
      'access arguments' => array (
          'access global commune posts' 
      ),
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM 
  );

  $menu['commune/u/%commune_uid_optional/mentions'] = array (
      'title' => t('@ Mentions'),
      'page callback' => '_commune_page',
      'page arguments' => array('mentioned', 2),
      'access callback' => 'user_access',
      'access arguments' => array (
          'access global commune posts' 
      ),
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM 
  );

  $menu['commune/u/%commune_uid_optional/likes'] = array (
      'title' => t('Likes'),
      'page callback' => '_commune_page',
      'page arguments' => array('liked', 2),
      'access callback' => 'user_access',
      'access arguments' => array (
          'access global commune posts' 
      ),
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM 
  );

  $menu['commune/u/%commune_uid_optional/to'] = array (
      'title' => t('Posted to'),
      'page callback' => '_commune_page',
      'page arguments' => array('postedto', 2),
      'access callback' => 'user_access',
      'access arguments' => array (
          'access global commune posts' 
      ),
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM 
  );
  
    $menu['commune/u/%commune_uid_optional/by'] = array (
      'title' => t('Posted By'),
      'page callback' => '_commune_page',
      'page arguments' => array('postedby', 2),
      'access callback' => 'user_access',
      'access arguments' => array (
          'access global commune posts' 
      ),
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM 
  );
  
  /*
  $menu['commune/u/%commune_uid_optional/files'] = array (
      'title' => t('Uploaded Files'),
      'page callback' => '_commune_page',
      'page arguments' => array('global', 0),
      'access callback' => 'user_access',
      'access arguments' => array (
          'access global commune posts' 
      ),
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM 
  );
  */
  
  return $menu;
}

function commune_uid_optional_to_arg($arg) {
	global $user;
	return empty($arg) || $arg == '%'? $user->uid: $arg;
}

function _commune_page($mode, $uid) {
  variable_set ('commune_wall_post_offset', 0);
  $wall_post = _commune_get_wall_post($uid, $mode);
  $wall_post_display = drupal_get_form ('_commune_wall_post_display', $uid, $mode);
  if ($wall_post != NULL) {
    $user_wall = '<div class="drupal_wall_outer">' . $wall_post . drupal_render ($wall_post_display) . '</div>';
  }
  else {
    $user_wall = '<div class="drupal_wall_outer"><span class="status_msg">No wall status available !</span></div>';
  }
  return $user_wall;
}

/**
 * Implements hook_block_info().
 */
function commune_block_info() {
  $block['commune_new_post'] = array (
      'info' => t ('Commune - New Post') 
  );
  $block['commune_feed'] = array (
      'info' => t ('Commune - Feed') 
  );
  return $block;
}

/*
 * hook_node_info() defines the commune_post node type
 */
function commune_node_info() {
   return array(
     'commune_post' => array(
        'name' => t ('Commune Post'),
        'base' => 'commune',
        'title_label' => t('Title'),
        'locked' => TRUE,
        'has_title' => FALSE,
        'description' => t('Community Post'),
      )
   );
}

function commune_form($node, $form_state) {
    return node_content_form($node, $form_state);
}

function commune_get_context($type) {
   if($type == 'global') return 0;
   if($type == 'currentuser') { 
      global $user;
      return $user->uid;
   }
   if($type == 'selecteduser') {
      if(arg(0) == 'user' && is_numeric(arg(1))) {
	return arg(1);
      }
   }
   if($type == 'author') {
     if (arg(0) == 'node' && is_numeric(arg(1))) { 
        $node = node_load(arg(1));
        return $node->uid;
     }
   }
   return -1;
}

function _commune_attachment_files() {
  $attaches = array();
  $enable = variable_get('commune_use_embedly');
  if($enable) {
    $attaches['js']['http://cdn.embed.ly/jquery.preview-0.3.2.min.js'] = array('type'=>'external');
    $attaches['css']['http://cdn.embed.ly/jquery.preview-0.3.2.css'] = array('type'=>'external');
  }
  $attaches['js'][] = drupal_get_path('module','commune') . '/js/commune.js';

  return $attaches;
}

/**
 * Implements hook_block_view().
 */
function commune_block_view($delta = '') {
  $block = array ();
  global $user;
  $anonymous_user = array_key_exists ('1', $user->roles);

  /* do not render block for anonymous user OR if on the global wall page. */
  if($anonymous_user || arg(0) == 'commune') { return; }

  $module_path['path'] = drupal_get_path ('module', 'commune');
  drupal_add_js ($module_path, 'setting');

  $uid = commune_get_context(variable_get('commune_feed_context', 'global'));
  if ($delta == 'commune_new_post'){
    $block['subject'] = NULL;
    $block['content'] = drupal_get_form ('_commune_content_post_form', $uid);
  } 

  if ($delta == 'commune_feed'){
    variable_set ('commune_wall_post_offset', 0);
    $block['subject'] = NULL;
    $wall_post = _commune_get_wall_post ($uid);
    $wall_wall_post = drupal_get_form ('_commune_wall_post_display', $uid);
    if ($wall_post != NULL) {
      $block['content'] = array(
         '#markup' => '<div class="drupal_wall_outer">' . $wall_post . drupal_render ($wall_wall_post) . '</div>',
         '#attached' => _commune_attachment_files(),
      );
    }
    else {
      $block['content'] = '<div class="drupal_wall_outer"><span class="status_msg">No wall status avaliable !</span></div>';
    }
  }
  return $block;
}

function commune_block_configure($delta = '') {
  $form = array();
  if ($delta == 'commune_feed') {
    $form['commune_feed_context'] = array(
      '#type' => 'select',
      '#title' => t('Which Wall to display?'),
      '#options' => array(
          'global' => t('Global'),
          'currentuser' => t('Logged in User'),
          'selecteduser' => t('User of Viewed Profile'),
          'author' => t('Author of Displayed Node'),
       ),
      '#default_value' => variable_get('commune_feed_context', 'global'),
    );
  }
  return $form;
}
function commune_block_save($delta = '', $edit = array()) {
  if ($delta == 'commune_feed') {
    variable_set('commune_feed_context', $edit['commune_feed_context']);
  }
}


/**
 * Implements hook_FORM_ID_alter().
 */
function commune_form_commune_post_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  // Make fields hide & readonly as required from drupal_wall content type form
  if (! empty ($node->nid)) {
    if (empty ($node->field_commune_upload[LANGUAGE_NONE][0]['fid'])) {
      $form['field_commune_upload']['#attributes']['class'] = array (
          'element-invisible' 
      );
    }
    else {
      $form['field_commune_upload'][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
    }
    /*
    if (empty ($node->field_commune_url[LANGUAGE_NONE][0]['value'])) {
      $form['field_commune_url']['#attributes']['class'] = array (
          'element-invisible' 
      );
    }
    else {
      $form['field_commune_url'][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
    }*/
  }
}

/**
 * Get "show Older post" button.
 */
function _commune_wall_post_display($form, $form_state, $subject_id, $mode = 'all') {
  $form = array ();
  if (variable_get ('commune_older_post_button') == 1) {
    $form['commune_older_post'] = array (
        '#value' => t ('Show older posts'),
        '#type' => 'submit',
        '#prefix' => '<div style="margin:20px; clear:both;">',
        '#suffix' => '</div>',
        '#ajax' => array (
            'callback' => '_commune_wall_post_display_ajax',
            'wrapper' => 'commune_append_older_wall_post',
            'method' => 'append' 
        ) 
    );
    $form['user_id'] = array(
        '#value' => $subject_id,
    );
    $form['mode'] = array(
	    '#value' => $mode,
    );
  }
  return $form;
}

/**
 * Get older wall post via ajax call to function.
 */
function _commune_wall_post_display_ajax($form, $form_state) {
  $html = NULL;
  $mode = $form['mode']['#value'];
  if (variable_get ('commune_wall_post_offset') != - 1) {
    $html = _commune_get_wall_post ($form['user_id']['#value'], $mode);
  }
  if ($html != NULL) {
    return $html;
  }
  elseif (variable_get ('commune_wall_post_offset') != - 1) {
    variable_set ('commune_wall_post_offset', - 1);
    return '<p style="color:red; margin:25px;">No more older wall post exists !</p>';
  }
}

/**
 * Get node post content from Drupal wall content type.
 * View Modes:
 *    global - global wall
 *    user   - user wall only
 *    mention - user's @mentions only
 *    likes  - user's likes only
 *
 * @return array Merge array of wall post with its related comment and FALSE if it isn't.
 */
function _commune_get_wall_post($subject_id, $view_mode = 'all') {
  $uid = $subject_id;

  $query = db_select ('node', 'n')->distinct();
  $query->fields('n', array('nid'))->condition('n.status', 1);
  $query->leftjoin ('commune_context', 't', 'n.nid=t.pid');

  if($view_mode == 'global' || $uid <= 0) {
     //fetch all posts - no filters required.
  } elseif ($view_mode == 'liked') {
	 //fetch all posts that user has liked.
	 $query->leftjoin('flagging', 'f', 'f.entity_id=n.nid');
	 $query->condition('f.uid', $uid);
  } elseif ($view_mode == 'mentioned') {
	 //all posts that user has been mentioned in
	 $query->condition('t.context_id', $uid)->condition('t.type', 'at');
  } elseif ($view_mode == 'postedby') {
	 $query->condition('n.uid', $uid);
  } elseif ($view_mode == 'postedto') {
	 $query->condition('t.context_id', $uid)->condition('t.type', 'to');
  } else {
      //we show all posts, posted by user, mentioning user, posted to user
      $or = db_or();
      $or->condition('n.uid', $uid);
      $or->condition('t.context_id', $uid);
      $query->condition($or);
  }

  if (variable_get ('commune_content_type') == 0) {
    $query = $query->condition ('n.type', 'commune_post');
  }

  $query->leftjoin('node_comment_statistics', 'c', 'n.nid=c.nid');
  $query->orderby('c.last_comment_timestamp', 'desc');
  $query->orderby ('n.created', 'desc')->range ((0 + variable_get ('commune_wall_post_offset')), variable_get ('commune_wall_post_limit'));
  $nids = $query->execute ()->fetchCol ();
  
  if(!$nids) return NULL;
  
  $size = variable_get ('commune_wall_post_limit') + variable_get ('commune_wall_post_offset');
  variable_set ('commune_wall_post_offset', $size);
  $posts = node_load_multiple($nids);
  $html = theme ('commune_posts', array (
        'wall_post' => $posts,
        'user_info' => '' 
   ));
  return $html;
}

/**
 * Implements hook_theme().
 */
function commune_theme() {
  return array (
      'commune_posts' => array (
          'template' => 'commune',
          'variable' => array (
              'node' => NULL 
          ) 
      ) 
  );
}

/**
 * Get user profile picture with given user id (uid).
 *
 * @param string $uid
 *          Drupal user ID (uid).
 *          
 * @return string desire image path of drupal user and FALSE if it isn't.
 */
function _commune_user_profile_picture($uid) {
  $user = user_load ($uid);
  if (isset ($user->picture->uri)) {
    return file_create_url ($user->picture->uri);
  }
  else {
    return $base_url . '/' . drupal_get_path ('module', 'commune') . '/images/picture-default.png';
  }
}

/**
 * Get user status picture with given image id.
 *
 * @param string $image_id
 *          Drupal image ID.
 *          
 * @return string Desire image path of uploaded user photo and FALSE if it isn't.
 */
function _commune_status_picture($image_id) {
  $file = file_load ($image_id);
  if (is_object ($file)) {
    return file_create_url ($file->uri);
  }
  else {
    return NULL;
  }
}

/**
 * Implements hook_user_view().
 */
function commune_user_view($account, $view_mode) {
  
  if ($view_mode == 'full') {
    global $user;
    $module_path['path'] = drupal_get_path ('module', 'commune');
    drupal_add_js (drupal_get_path ('module', 'commune') . '/js/commune.js');
    drupal_add_js ($module_path, 'setting');
    $wall_content_post = drupal_get_form ('_commune_content_post_form', $account->uid);
    $post = drupal_render ($wall_content_post);
    if ($account->uid == $user->uid) {
      $msg = t("What's on your mind ?");
    } else {
      $msg = t("What do you want to share with this user");
    }
    $account->content['commune']['post_status'] = array (
          '#type' => 'user_profile_item',
          '#title' => $msg,
          '#markup' => $post 
    );
    variable_set ('commune_wall_post_offset', 0);
    $wall_post = _commune_get_wall_post ($account->uid);
    $wall_post_display = drupal_get_form ('_commune_wall_post_display', $account->uid);
    if ($wall_post != NULL) {
      $user_wall = '<div class="drupal_wall_outer">' . $wall_post . drupal_render ($wall_post_display) . '</div>';
    }
    else {
      $user_wall = '<div class="drupal_wall_outer"><span class="status_msg">No wall status available !</span></div>';
    }
    if (empty ($user_wall) && empty ($post)) {
      return;
    }
    if (! isset ($account->content['commune'])) {
      $account->content['commune'] = array ();
    }
    // Drupal wall - User wall posts.
    $account->content['commune']['wall_post'] = array (
        '#type' => 'user_profile_item',
        '#title' => t ('Wall Post'),
        '#markup' => $user_wall 
    );
  }
}

function commune_users($keys) {
    global $user;
    $find = array();

    $results = db_select('users', 'u')
       ->fields('u', array('uid', 'name', 'picture'))
       ->condition('u.status', 1)
       ->condition('name','%' . db_like($keys) . '%', 'LIKE')
       ->condition('uid', $user->uid, '<>')
       ->range(0, 10)
       ->execute()
       ->fetchAll();

    foreach ($results as $u) {
        if(!empty($u->picture)) {
           $avatar = file_load($u->picture);
           if(!empty($avatar->uri)) {
              $avatar = file_create_url($avatar->uri);
           }
        }
        $find [] = array('name' => $u->name, 'id' => $u->uid, 'type'=> 'contact', 'avatar' => $avatar, 'link' => url('user/' . $u->uid, array('absolute' => TRUE)));
    }

    drupal_json_output($find);
}

function commune_load($nodes) {
  $result = db_select('commune_context', 'c')
                 ->condition('pid', array_keys($nodes), 'IN')
                 ->condition('type', 'to')
                 ->fields('c', array('context_id', 'pid'))
                 ->execute();
  foreach ($result as $context) {
      $nodes[$context->pid]->context_id = $context->context_id;
  }
}

function commune_insert($node) {
       if(!isset($node->context_id) || $node->context_id <= 0) {
          $node->context_id = $node->uid;
       }
       db_insert('commune_context')
           ->fields(array(
                'pid' => $node->nid,
                'context_id' => $node->context_id,
                'type' => 'to'
       ))->execute();
       /* loop through the mentions. */
       if(isset($node->commune_mentions)) {
	 $mentions = $node->commune_mentions;
	 foreach($mentions as $u) {
            if($u['id'] > 0) {
	      db_insert('commune_context')
		 ->fields(array(
		    'pid' => $node->nid,
		    'context_id' => $u['id'],
		    'type' => 'at'
	      ))->execute();
	 }
       }
    }
}

function commune_delete($node) {
      db_delete('commune_context')
            ->condition('pid', $node->nid)
            ->execute();
}

function commune_file_link($variables) {
    $file = $variables['file'];
    $mimetype = file_get_mimetype($file->uri);
    if(substr($mimetype,0, 5) == 'image') {
      $url = file_create_url($file->uri);
      $thumbnail = theme('image_style',array(
        'style_name' => 'thumbnail',
        'path' => $file->uri,
        'alt' => t('uploaded image')
      ));
      return '<span class="file">' . $thumbnail. '</span>';
    } else {
       return theme('file_link', $variables);
    }
}

function commune_flag_default_flags() {
  $flags = array();
  
  $flags['commune_post_like'] = array (
    'entity_type' => 'node',
    'title' => 'Like',
    'global' => false,
    'types' => array('commune_post'),
    'flag_short' => 'Like',
    'flag_long' => '',
    'flag_message' => '',
    'unflag_short' => 'Un-Like',
    'unflag_long' => '',
    'unflag_message' => '',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'show_on_form' => false,
    'show_in_links' => 'Full',
    'status' => true,
    'module' => 'commune',
    'show_on_teaser' => true,
    'api_version' => 3,
    'locked' => 
       array (
        'show_on_teaser',
        'name',
        'types',
        'global',
       ),
    );
  
   $flags['commune_post_comment_like'] = array (
    'entity_type' => 'comment',
    'title' => 'Like',
    'global' => false,
    'types' => array('comment_node_commune_post'),
    'flag_short' => 'Like',
    'flag_long' => '',
    'flag_message' => '',
    'unflag_short' => 'Un-Like',
    'unflag_long' => '',
    'unflag_message' => '',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'show_on_form' => false,
    'show_in_links' => 'Full',
    'show_on_teaser' => true,
    'status' => true,
    'module' => 'commune',
    'api_version' => 3,
    'locked' => 
       array (
       'show_on_teaser',
        'name',
        'types',
        'global',
       ),
    );

  variable_set('commune_likes_node', 'commune_post_like');
  variable_set('commune_likes_comment', 'commune_post_comment_like');

  return $flags;
}

/*
 * hook_theme_registry_alter
 * module defines the following templates
 * commune-post
 * commune-post-comment
 * commune-post-form
 */
function commune_theme_registry_alter(&$theme_registry) {
  // Defined path to current module.
  $module_path = drupal_get_path('module', 'commune');

  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);

  // Itterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key]['type'] = 'module';
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
    }
  }
}

function commune_page_comments($node) {
	$additions = array();
	
	if (($node->comment_count && user_access('access comments')) || user_access('administer comments')) {
    	$mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
		$comments_per_page = 5;
		if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
		      $comments = comment_load_multiple($cids);
		      comment_prepare_thread($comments);
		      $build = comment_view_multiple($comments, $node);
		      //$build ['pager']['#theme'] = 'pager';
		      $additions ['comments'] = $build;
	    }
  	}
  	
  	if($additions) {
	  	$additions += array(
		  	'#theme' => 'comment_wrapper_node_' . $node->type,
		  	'#node' => $node,
		  	'comments' => array(),
		  	'comment_form' => array(),
		  	);
  	}
  	
  	return $additions;
}
