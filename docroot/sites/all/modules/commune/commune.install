<?php

/**
 * @file
 * Creating content type 'commune_post' & remove its content during remove.
 */

/**
 * hook_schema()
 */
function commune_schema() {
  $schema['commune_context'] = array(
     'descriptions' => 'Store mentions and wall ids for posts',
     'fields' => array(
        'pid' => array(
           'description' => 'The node id of the post referenced in this field',
           'type' => 'int',
           'not null' => TRUE,
           'unsigned' => TRUE,
         ),
         'context_id' => array(
           'description' => 'The entity id of the entity this post refers to',
           'type' => 'int',
           'no_ui' => true,
           'not null' => FALSE,
           'unsigned' => TRUE
	     ),
         'type' => array(
           'description' => 'Type of Reference - "to" or "at"',
           'type' => 'char',
           'length' => 16,
           'not null' => TRUE,
           'default' => 'to'
	    )
      ),
      'indexes' => array(
   	  'pid' => array('pid'),
          'context_id_type' => array('context_id', 'type'),
          'context_id' => array('context_id'),
      ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function commune_install() {
  $t = get_t ();
  $name = 'commune_post';

  node_types_rebuild();
  $types = node_type_get_types();
  $commune = $types[$name];
  node_add_body_field ($commune, $t ("What's on your mind?"));

  // Set other node defaults not declared above.
  $content_type = node_type_set_defaults ($commune);

  // Add persistent variables that control settings.
  variable_set ('additional_settings__active_tab_' . $name, 'edit-menu');
  // 0 = disabled, 1 = optional, 2 = required.
  variable_set ('node_preview_' . $name, 0);
  // array(0 => 'status', 1 => 'promote', 2 => 'sticky', 3 => 'revision').
  variable_set ('node_options_' . $name, array (
      0 => 'status' 
  ));
  // 1 = Display author and date information, 0 = none.
  variable_set ('node_submitted_' . $name, 0);
  variable_set ('menu_options_' . $name, array ());
  variable_set ('menu_parent_' . $name, 'main-menu:0');

  // Create all the fields we are adding to our content type.
  module_load_include ('inc', 'commune', 'commune.fields');
  foreach (_commune_create_fields () as $field) {
    field_create_field ($field);
  }
  // Create all the instances for our fields.
  foreach (_commune_create_instances () as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $name;
    field_create_instance ($instance);
  }
  // Drupal wall Custom variables.
  variable_set ('commune_wall_post_limit', 10);
  variable_set ('commune_global_post_limit', 10);
  variable_set ('commune_wall_post_offset', 0);
  variable_set ('commune_global_post_offset', 0);
  variable_set ('commune_older_post_button', 1);
  variable_set ('commune_delete_post_button', 1);
  variable_set ('commune_edit_post_button', 1);
  variable_set ('commune_show_comments', 1);
  variable_set ('commune_comment_post_textbox', 1);
  variable_set ('commune_post_type_photo', 1);
  variable_set ('commune_post_type_video', 1);
  variable_set ('commune_likes_post', 1);
  variable_set ('commune_show_post_types', 'private');
  variable_set ('commune_textbox_type', 'textarea');
}

/**
 * Implements hook_uninstall().
 */
function commune_uninstall() {
  // Machine name of the content type.
  $name = 'commune_post';
  // Gather all job nodes created.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query ($sql, array (
      ':type' => $name 
  ));
  $nids = array ();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  // Delete all the job nodes at once.
  node_delete_multiple ($nids);

  // Remove persistant variables that control settings.
  variable_del ('additional_settings__active_tab_' . $name);
  variable_del ('node_preview_' . $name);
  variable_del ('node_options_' . $name);
  variable_del ('node_submitted_' . $name);
  variable_del ('menu_options_' . $name);
  variable_del ('menu_parent_' . $name);
  variable_del ('commune_wall_post_limit');
  variable_del ('commune_global_post_limit');
  variable_del ('commune_wall_post_offset');
  variable_del ('commune_global_post_offset');
  variable_del ('commune_older_post_button');
  variable_del ('commune_delete_post_button');
  variable_del ('commune_edit_post_button');
  variable_del ('commune_show_comments');
  variable_del ('commune_comment_post_textbox');
  variable_del ('commune_post_type_photo');
  variable_del ('commune_post_type_video');
  variable_del ('commune_likes_post');
  variable_del ('commune_textbox_type');
  variable_del ('commune_show_post_types');

  // Find all fields and delete them.
  module_load_include ('inc', 'commune', 'commune.fields');
  foreach (array_keys (_commune_create_fields ()) as $field) {
    field_delete_field ($field);
  }

  // Find all fields and delete instance.
  $instances = field_info_instances ('node', $name);
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance ($instance);
  }

  // Delete our content type.
  //node_type_delete ($name);

  // Purge all field info.
  field_purge_batch (1000);

}

function commune_update_7001(&$sandbox) {
  //field_delete_field('field_commune_url');
  //field_purge_batch(1000);
  
  $name = 'commune_post';
  $t = get_t ();
  
  $field = array (
      'field_name' => 'field_commune_url',
      'cardinality' => 1,
      'type' => 'link_field',
      'bundles' => array (
          'node' => array (
              $name 
          ) 
      ) 
  );

 field_create_field ($field);
 
 $fields = array (
      'field_name' => 'field_commune_upload',
      'cardinality' => 1,
      'type' => 'file',
      'bundles' => array (
          'node' => array (
              $name 
          ) 
      ) 
  );
  field_create_field ($field);

  
  $instance = array (
      'field_name' => 'field_commune_url',
      'label' => $t ('Share Links'),
      'type' => 'link_field',
      'required' => FALSE,
      'widget' => array (
          'type' => 'commune_embed' 
      ),
      'display' => array (
          'joinprofile_field' => array (
              'label' => 'hidden',
              'type' => 'hidden' 
          ) 
      ),
      'entity_type' => 'node',
      'bundle' => $name,
      'deleted' => '0' 
  );
  
  field_create_instance ($instance);
  
  $instance = array (
      'field_name' => 'field_commune_upload',
      'label' => $t ('File Uploads'),
      'type' => 'file',
      'required' => FALSE,
      'widget' => array (
          'type' => 'file_widget' 
      ),
      'display' => array (
          'joinprofile_field' => array (
              'label' => 'hidden',
              'type' => 'hidden' 
          ) 
      ),
      'entity_type' => 'node',
      'bundle' => $name,
      'deleted' => '0' 
  );
  field_create_instance ($instance);

}

function commune_update_7002(&$sandbox) {
   if(!isset($sandbox['max'])) {
     $query = db_select('node', 'n');
     $query->addExpression('COUNT(*)', 'count');
     $query->condition('n.type', 'commune_post');
     $sandbox['max'] = $query->execute()->fetchField();
     $sandbox['current_position'] = 0;
  }

  if($sandbox['max'] > 0) {
     $limit = 10;
     $nids = db_select('node', 'n')
          ->fields('n', array('nid'))
          ->condition('n.type', 'commune_post')
          ->orderBy('n.nid')
          ->range($sandbox['current_position'], $limit)
          ->execute()
          ->fetchCol();

     $nodes = node_load_multiple($nids);
     foreach ($nodes as $node) {
	    $node->field_commune_url['und'][0]['url'] =  $node->field_commune_link['und'][0]['value'];
	    $node->field_commune_upload['und'][0] =  $node->field_commune_file['und'][0];
	    node_save($node);
     }
     $sandbox['current_position'] += $limit;
     $sandbox['#finished'] = $sandbox['current_position'] / $sandbox['max'];
   }
   else {
     $sandbox['#finished'] = 1;
   }

   if ($sandbox['#finished'] >= 1) {
     return format_plural($sandbox['max'], '1 post updated', '@count posts updated');
   }
}

function commune_update_7003(&$sandbox) {
  field_delete_field('field_commune_link');
  field_delete_field('field_commune_file');

  field_purge_batch(1000);
}

function commune_update_7004() {
  $instance_info = field_info_instance('node', 'field_commune_upload', 'commune_post');
  // Change a single property in the instance definition.
  if($instance_info) {
  	$instance_info['display'] = array (
          'default' => array (
              'label' => 'hidden',
              'type' => 'commune_embed_file',
          ),
    );
    $instance_info['settings']['no_ui'] = TRUE;
	// Write the changed definition back.
	field_update_instance($instance_info);
  }

  $instance_info = field_info_instance('node', 'field_commune_url', 'commune_post');
  // Change a single property in the instance definition.
  if($instance_info) {
  	$instance_info['display'] = array (
          'default' => array (
              'label' => 'hidden',
              'type' => 'commune_embed',
          ),
    );
    $instance_info['settings']['no_ui'] = TRUE;
	// Write the changed definition back.
	field_update_instance($instance_info);
  }
  
   $field = field_info_field('field_commune_upload');
   $field['locked'] = TRUE;
   field_update_field($field);
   
   $field = field_info_field('field_commune_url');
   $field['locked'] = TRUE;
   field_update_field($field);
   
}

function commune_migrate_from_drupal_wall(&$sandbox) {

  if(!isset($sandbox['max'])) {
     $query = db_select('node', 'n');
     $query->addExpression('COUNT(*)', 'count');
     $query->condition('n.type', 'commune_post');
     $sandbox['max'] = $query->execute()->fetchField();
     $sandbox['current_position'] = 0;
  }

  if($sandbox['max'] > 0) {
     $limit = 10;
     $nids = db_select('node', 'n')
          ->fields('n', array('nid'))
          ->condition('n.type', 'commune_post')
          ->orderBy('n.nid')
          ->range($sandbox['current_position'], $limit)
          ->execute()
          ->fetchCol();

     $nodes = node_load_multiple($nids);
     foreach ($nodes as $node) {
        $context = $node->field_drupal_wall_context['und'][0]['value'];
        if(!$context) $context = $node->uid;
	       db_insert('drupal_wall_context')
             ->fields(array(
               'pid' => $node->nid, 
               'context_id' => $context,
               'type' => 'to'
        ))
        ->execute();
     }
     $sandbox['current_position'] += $limit;
     $sandbox['#finished'] = $sandbox['current_position'] / $sandbox['max'];
   }
   else {
     $sandbox['#finished'] = 1;
   }

   if ($sandbox['#finished'] >= 1) {
     return format_plural($sandbox['max'], '1 post updated', '@count posts updated');
   }
}
