<?php
	
function commune_embed_menu() {
  $menu['admin/config/user-interface/commune_embed'] = array (
      'title' => t('Commune Embed Settings'),
      'description' => t('Adds a formatter to the link field type which to display a snippet from the URL using oembed and embedly.com'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array (
          '_commune_embed_configure_form' 
      ),
      'access callback' => 'user_access',
      'access arguments' => array (
          'administer site configuration' 
      ),
      'file' => 'commune_embed.admin.inc',
      'weight' => - 1,
  );
  return $menu;
}

function _commune_embed_providers_list() {
  $providers = array(
	'#http://(www\.)?youtube\.com/watch.*#i'              => array( 'http://www.youtube.com/oembed',                      true  ),
	'#https://(www\.)?youtube\.com/watch.*#i'             => array( 'http://www.youtube.com/oembed?scheme=https',         true  ),
	'#http://(www\.)?youtube\.com/playlist.*#i'           => array( 'http://www.youtube.com/oembed',                      true  ),
	'#https://(www\.)?youtube\.com/playlist.*#i'          => array( 'http://www.youtube.com/oembed?scheme=https',         true  ),
	'#http://youtu\.be/.*#i'                              => array( 'http://www.youtube.com/oembed',                      true  ),
	'#https://youtu\.be/.*#i'                             => array( 'http://www.youtube.com/oembed?scheme=https',         true  ),
	'http://blip.tv/*'                                    => array( 'http://blip.tv/oembed/',                             false ),
	'#https?://(.+\.)?vimeo\.com/.*#i'                    => array( 'http://vimeo.com/api/oembed.{format}',               true  ),
	'#https?://(www\.)?dailymotion\.com/.*#i'             => array( 'http://www.dailymotion.com/services/oembed',         true  ),
	'http://dai.ly/*'                                     => array( 'http://www.dailymotion.com/services/oembed',         false ),
	'#https?://(www\.)?flickr\.com/.*#i'                  => array( 'https://www.flickr.com/services/oembed/',            true  ),
	'#https?://flic\.kr/.*#i'                             => array( 'https://www.flickr.com/services/oembed/',            true  ),
	'#https?://(.+\.)?smugmug\.com/.*#i'                  => array( 'http://api.smugmug.com/services/oembed/',            true  ),
	'#https?://(www\.)?hulu\.com/watch/.*#i'              => array( 'http://www.hulu.com/api/oembed.{format}',            true  ),
	'http://revision3.com/*'                              => array( 'http://revision3.com/api/oembed/',                   false ),
	'http://i*.photobucket.com/albums/*'                  => array( 'http://photobucket.com/oembed',                      false ),
	'http://gi*.photobucket.com/groups/*'                 => array( 'http://photobucket.com/oembed',                      false ),
	'#https?://(www\.)?scribd\.com/doc/.*#i'              => array( 'http://www.scribd.com/services/oembed',              true  ),
	'#https?://wordpress.tv/.*#i'                         => array( 'http://wordpress.tv/oembed/',                        true ),
	'#https?://(.+\.)?polldaddy\.com/.*#i'                => array( 'https://polldaddy.com/oembed/',                      true  ),
	'#https?://poll\.fm/.*#i'                             => array( 'https://polldaddy.com/oembed/',                      true  ),
	'#https?://(www\.)?funnyordie\.com/videos/.*#i'       => array( 'http://www.funnyordie.com/oembed',                   true  ),
	'#https?://(www\.)?twitter\.com/.+?/status(es)?/.*#i' => array( 'https://api.twitter.com/1/statuses/oembed.{format}', true  ),
	'#https?://vine.co/v/.*#i'                            => array( 'https://vine.co/oembed.{format}',                    true  ),
	'#https?://(www\.)?soundcloud\.com/.*#i'              => array( 'http://soundcloud.com/oembed',                       true  ),
	'#https?://(.+?\.)?slideshare\.net/.*#i'              => array( 'https://www.slideshare.net/api/oembed/2',            true  ),
	'#http://instagr(\.am|am\.com)/p/.*#i'                => array( 'http://api.instagram.com/oembed',                    true  ),
	'#https?://(www\.)?rdio\.com/.*#i'                    => array( 'http://www.rdio.com/api/oembed/',                    true  ),
	'#https?://rd\.io/x/.*#i'                             => array( 'http://www.rdio.com/api/oembed/',                    true  ),
	'#https?://(open|play)\.spotify\.com/.*#i'            => array( 'https://embed.spotify.com/oembed/',                  true  ),
	'#https?://(.+\.)?imgur\.com/.*#i'                    => array( 'http://api.imgur.com/oembed',                        true  ),
	'#https?://(www\.)?meetu(\.ps|p\.com)/.*#i'           => array( 'http://api.meetup.com/oembed',                       true  ),
	'#https?://(www\.)?issuu\.com/.+/docs/.+#i'           => array( 'http://issuu.com/oembed_wp',                         true  ),
	'#https?://(www\.)?collegehumor\.com/video/.*#i'      => array( 'http://www.collegehumor.com/oembed.{format}',        true  ),
	'#https?://(www\.)?mixcloud\.com/.*#i'                => array( 'http://www.mixcloud.com/oembed',                     true  ),
	'#https?://(www\.|embed\.)?ted\.com/talks/.*#i'       => array( 'http://www.ted.com/talks/oembed.{format}',           true  ),
	'#https?://(www\.)?(animoto|video214)\.com/play/.*#i' => array( 'http://animoto.com/oembeds/create',                  true  ),
  );

  /* allow for user to add/remove providers 
    $providers[ $format ] = $data;
    unset( $providers[ $format ] );
  */

  return $providers;
}

/*
 *	provide a hook_ce_filter that allows you to transform the URL.
 */
function commune_embed_ce_filter($url) {
   if(preg_match('/youtube.com\/embed\/([^&]+)/', $url, $matches)) {
	   if($matches[1]) return "http://youtube.com/watch?v=" . $matches[1];
   } 
   return $url;
}

function commune_embed_get_provider( $url, $args = '' ) {

  $provider = false;
  $providers = _commune_embed_providers_list();

  foreach ( $providers as $matchmask => $data ) {
    list( $providerurl, $regex ) = $data;

    // Turn the asterisk-type provider URLs into regex
    if ( !$regex ) {
      $matchmask = '#' . str_replace( '___wildcard___', '(.+)', preg_quote( str_replace( '*', '___wildcard___', $matchmask ), '#' ) ) . '#i';
      $matchmask = preg_replace( '|^#http\\\://|', '#https?\://', $matchmask );
    }

    if ( preg_match( $matchmask, $url ) ) {
      $provider = str_replace( '{format}', 'json', $providerurl ); 
      break;
    }
  }

  /* discover the provider if not provided - TBD.  */

  /* provider is missing - we try OpenGraph. */
  if($provider) {
    $provider = array(
	'driver' => '_commune_embed_oembed_fetch',
	'url' => $provider
    );
  } else {
    $provider = array(
	'driver' => '_commune_embed_opengraph_fetch',
	'url' => $url
    );
  }

  return $provider;
}


function commune_embed_get($url) {	
  // is this in the cache?
  //db_delete('commune_embed_cache')->execute();
    
  $query = db_select ('commune_embed_cache', 'c');
  $query->fields('c', array('data'))->condition('c.url', $url)->orderby('c.created', 'DESC')->range(0,1);
  $result = $query->execute()->fetchField();

  if( !$result) {
	//run hook filter to transform the URLs
	$cleanurl = commune_embed_ce_filter($url);
    $provider = commune_embed_get_provider($cleanurl);
    $embed = call_user_func($provider["driver"],$provider["url"], $cleanurl);
    if ($embed) {
      $embed->source_url = $url;
    } else {
      $embed['source_url'] = $url;
      $embed['width'] = 0.0;
      $embed['height'] = 0.0;
      $embed['title'] = "";
      $embed['type'] = "link";
      $embed = (object) $embed;
    }
    $record = new stdClass();
    $record->url = $url;
    $record->data = $embed;
    $record->created = REQUEST_TIME;
    drupal_write_record('commune_embed_cache', $record);
  } else { 
	  $embed = unserialize($result);
  }
  return $embed;
}
  
 
function _commune_embed_oembed_fetch( $provider, $url, $args = '' ) {
  $params['url'] = $url;
  foreach( array( 'json', 'xml' ) as $format ) {
    $params['format'] = $format;
    $url = url($provider, array('query'=>$params));
    $request = drupal_http_request($url);
    if ($request->code == 200) { 
      $html = $request->data;
      $parse_method = "_commune_embed_parse_$format";
      return $parse_method( $html);
    } else {
    } 
  }
  return false;
}

function _commune_embed_opengraph_fetch( $provider, $url, $args = '' ) {
  $params['url'] = $url;
  $format = 'opengraph';
  $request = drupal_http_request($url);
  if ($request->code == 200) { 
    $html = $request->data;
    $parse_method = "_commune_embed_parse_$format";
    return $parse_method( $html );
  } 
  return false;
}

/**
 * Parses a json response body.
 *
 * @since 3.0.0
 * @access private
 */
function _commune_embed_parse_json( $response_body ) {
  return ( ( $data = json_decode( trim( $response_body ) ) ) && is_object( $data ) ) ? $data : false;
}

function _commune_embed_parse_xml( $response_body ) {
  if ( ! function_exists( 'libxml_disable_entity_loader' ) )
    return false;

  $loader = libxml_disable_entity_loader( true );
  $errors = libxml_use_internal_errors( true );

  $return = _parse_xml_body( $response_body );

  libxml_use_internal_errors( $errors );
  libxml_disable_entity_loader( $loader );

  return $return;
}

/**
* Helper function for parsing an XML response body.
*
* @since 3.6.0
* @access private
*/
function _parse_xml_body( $response_body ) {
  if ( ! function_exists( 'simplexml_import_dom' ) 
            || ! class_exists( 'DOMDocument' ) )
    return false;

  $dom = new DOMDocument;
  $success = $dom->loadXML( $response_body );
  if ( ! $success )
    return false;

  if ( isset( $dom->doctype ) )
    return false;

  foreach ( $dom->childNodes as $child ) {
    if ( XML_DOCUMENT_TYPE_NODE === $child->nodeType )
      return false;
  }

  $xml = simplexml_import_dom( $dom );
  if ( ! $xml )
    return false;

  $return = new stdClass;
  foreach ( $xml as $key => $value ) {
    $return->$key = (string) $value;
  }

  return $return;
}

function _commune_embed_parse_opengraph( $response_body ) {
  if(!class_exists( 'DOMDocument' )) 
    return false;

  $doc = new DOMDocument();
  @$doc->loadHTML($response_body);
  $node = $doc->getElementsByTagName('title');
  if($node) $title = $node->item(0)->nodeValue;
  $metaTags['title'] = $title;
  $metas = $doc->getElementsByTagName('meta');
  for ($i = 0; $i < $metas->length; $i++) {
    $meta = $metas->item($i);
    $name = $meta->getAttribute('name');
    if(!$name) $name = $meta->getAttribute('property');
    $metaTags[$name] = $meta->getAttribute('content');
  }

  $embed = array('title' => $title, 'type' => 'opengraph');
  $embed["description"] = _commune_embed_scan_variable($metaTags, 
                             array('og:description','description'));
  $embed["thumbnail_url"] = _commune_embed_scan_variable($metaTags, 
                             array('og:image', 'image', 'og:image:url'));
  $embed["width"] = _commune_embed_scan_variable($metaTags, 
                             array('og:image:width', 'width'));
  $embed["height"] = _commune_embed_scan_variable($metaTags, 
                             array('og:image:height', 'height'));

  return (object) $embed;
}

function _commune_embed_scan_variable($hash, $vars) {
   foreach ($vars as $t) {
     if(isset($hash[$t]) && $hash[$t] != '') {
       return $hash[$t];
     }
   }
   return NULL;
}

function commune_embed_theme($existing, $type, $theme, $path) {
  return array(
    'commune_embed_content' => array(
      'template' => 'commune_embed',
      'variables' => array(
           'embed' => NULL, 
           'source' => NULL, 
           'format' => NULL,
           'use_embedly' => NULL
      ),
    ),
  );
}

function commune_embed_field_formatter_info() {
	$info = array(
		'commune_embed' => array(
			'label' => t('URL Preview'),
			'field types' => array('link_field', 'url'),
			'description' => t('Displays a URL as en embedded HTML using oembed or OpenGraph'),
		),
		'commune_embed_file' => array(
			'label' => t('File Preview'),
			'field types' => array('file'),
			'description' => t('Displays a file in preview mode - not all formats supported'),
		),
	);
	return $info;
}

function template_preprocess_commune_embed_content(&$variables) {
	static $included_once = false;
	
	if(!isset($variables['use_embedly'])) {
		$variables['use_embedly'] = variable_get('commune_embed_use_embedly', false);
	}
	if($variables['use_embedly'] && !$included_once) {
		drupal_add_js('http://cdn.embed.ly/jquery.embedly-3.1.1.min.js', 'external');
		drupal_add_js('http://cdn.embed.ly/jquery.preview-0.3.2.min.js', 'external');
		drupal_add_css('http://cdn.embed.ly/jquery.preview-0.3.2.css', 'external');
		drupal_add_js(array('commune_embed' => array('embedly_key' => $key)), 'setting');
		drupal_add_js(drupal_get_path('module', 'commune_embed') . '/js/commune_embed.js');
		$included_once = true;
	}
}

function commune_embed_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'commune_embed':
      foreach ($items as $delta => $item) {
	    $url = isset($item['display_url']) ? $item['display_url']: $item['value'];
	    $embed = commune_embed_get($url);
        $element[$delta] = array(
          '#theme' => 'commune_embed_content', 
          '#embed' => $embed, 
          '#use_embedly' => variable_get('commune_embed_use_embedly', false),
          '#url' => $url, 
        );
      }
      break;
    case 'commune_embed_file':
      foreach ($items as $delta => $item) {
	      $driver = commune_embed_get_file_provider($item);
	      $markup = call_user_func($driver, $item, $display['settings']);
	      $element[$delta] = array(
		      '#markup' => $markup,
	      );
      }
	  break;
  }
  return $element;
}

/**
 * File embed formatters. 
 */
 
/*
 * manage a list of file preview drivers. Add new drivers for new mimetypes - this logic may need to change
 */
function _commune_embed_file_providers_list() {
	$providers = array(
		'/image\/.*/' => '_commune_embed_file_image',
		'/application\/pdf/' => '_commune_embed_file_pdf',
	);
	
	return $providers;
}

/*
 * find a file preview provider for provided file type.
 */
function commune_embed_get_file_provider( $file, $args = '' ) {
  $provider = false;
  $providers = _commune_embed_file_providers_list();
  $mime_type = $file['filemime'];
  
  foreach ( $providers as $matchmask => $driver ) {	  
	if (preg_match($matchmask,$mime_type)) {
      return $driver;
    }
  }
  return '_commune_embed_file_generic';
}

/*
 * find the driver for a file and return the themed output.
 */
function commune_embed_file($file) {
	$driver = commune_embed_get_file_provider($file);
	return call_user_func($driver, $file);
}

/*
 * pdf preview
 */
function _commune_embed_file_pdf($file, $settings = array()) {
	return _commune_embed_file_generic($file, $settings);
}

/*
 * preview for files that do not have a driver.
 * just display the file url
 */
function _commune_embed_file_generic($file, $settings = array()) {
	return theme('file_link', array('file' => (object)$file));
}

/*
 * image preview.
 */
function _commune_embed_file_image($file, $settings = array()) {
	$style = variable_get ('commune_embed_image_style', 0);
	if($style) {
		return theme('image_style', array('style_name' => $style, 'path' => $file['uri']));	
	} else {
		return theme('image', array('path' => $file['uri']));	
	}
}