<?php

/**
 * Implements hook_menu().
 */
function commerce_checkout_multilane_ui_menu() {
  $items['admin/commerce/config/checkout/form/add'] = array(
    'title' => 'Add checkout lane',
    'description' => 'Add a custom checkout lane.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_checkout_multilane_ui_lane_form'),
    'access arguments' => array('administer checkout'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'commerce_checkout_multilane_ui.admin.inc',
  );

  $items['admin/commerce/config/checkout/form/delete/%'] = array(
    'title' => 'Remove a checkout lane',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_checkout_multilane_ui_lane_delete_form', 6),
    'access arguments' => array('administer checkout'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_checkout_multilane_ui.admin.inc',
  );

  $items['admin/commerce/config/checkout/form/manage/default'] = array(
    'title' => 'Default',
    'description' => 'Customize the checkout form and configure checkout rules.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  foreach (commerce_checkout_multilane_lanes() as $lane_id => $lane) {
    $items['admin/commerce/config/checkout/form/manage/' . $lane_id] = array(
      'title callback' => 'commerce_checkout_multilane_ui_checkout_settings_title',
      'title arguments' => array($lane_id),
      'description' => 'Customize the checkout form and configure checkout rules.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_checkout_multilane_ui_checkout_settings_form', $lane_id),
      'access arguments' => array('administer checkout'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'commerce_checkout_multilane_ui.admin.inc',
    );

    $items['admin/commerce/config/checkout/form/manage/' . $lane_id . '/pane/%commerce_checkout_multilane_ui_pane'] = array(
      'title callback' => 'commerce_checkout_multilane_ui_pane_settings_title',
      'title arguments' => array($lane_id, 8),
      'description' => 'Configure the settings for a checkout pane.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_checkout_multilane_ui_pane_settings_form', $lane_id, 8),
      'access arguments' => array('administer checkout'),
      'file' => 'commerce_checkout_multilane_ui.admin.inc',
    );
  }

  return $items;
}

/**
 * Returns the title of a given lane id.
 */
function commerce_checkout_multilane_ui_checkout_settings_title($lane_id) {
  $lanes = commerce_checkout_multilane_lanes();
  if (!empty($lanes[$lane_id]['title'])) {
    return $lanes[$lane_id]['title'];
  }
}

/**
 * Returns the title of a given lane id.
 */
function commerce_checkout_multilane_ui_lane_exists($lane_id) {
  if ($lane_id === COMMERCE_CHECKOUT_MULTILANE_DEFAULT_LANE_ID) {
    return TRUE;
  }
  else {
    $lanes = commerce_checkout_multilane_lanes();
    return isset($lanes[$lane_id]);
  }
}

/**
 * Returns the title of a given pane.
 */
function commerce_checkout_multilane_ui_pane_settings_title($lane_id, $checkout_pane) {
  return t('!pane_title (@lane_title lane)', array(
    '!pane_title' => commerce_checkout_pane_settings_title($checkout_pane),
    '@lane_title' => commerce_checkout_multilane_ui_checkout_settings_title($lane_id),
  ));
}

/**
 * Loads the data for a specific multilane variant of a checkout pane.
 *
 * @param string $lane_pane_id
 *   The machine readable ID of the checkout pane including the lane id suffix.
 * @param $skip_saved_data
 *   A boolean that will allow the retrieval of checkout panes directly from
 *   code. Specifically, it will skip the cache and also prevent configured
 *   checkout panes data from merging.
 *
 * @return array|FALSE
 *   The requested checkout pane array or FALSE if not found.
 */
function commerce_checkout_multilane_ui_pane_load($lane_pane_id) {
  $panes = commerce_checkout_multilane_ui_panes();
  return isset($panes[$lane_pane_id]) ? $panes[$lane_pane_id] : FALSE;
}

/**
 * Return an array of multilane checkout pane variants.
 *
 * @see commerce_checkout_panes()
 *
 * @param string $lane_id
 *   (optional) Only return pane records for the given lane id. If not
 *   specified, all multilane pane records are returned.
 *
 * @return array
 *   The array of checkout pane records, keyed by pane ID.
 */
function commerce_checkout_multilane_ui_panes($lane_id = NULL, $skip_saved_data = FALSE) {
  // Directly call our implementation of hook_commerce_checkout_pane_info().
  $multilane_panes = commerce_checkout_multilane_commerce_checkout_pane_info();
  if (!$skip_saved_data) {
    $saved_panes = db_query('SELECT * FROM {commerce_checkout_pane}')->fetchAllAssoc('pane_id', PDO::FETCH_ASSOC);
  }

  $checkout_panes = array();
  foreach ($multilane_panes as $pane_id => $multilane_pane) {
    if ($lane_id && $multilane_pane['#lane_id'] != $lane_id) {
      continue;
    }

    if (!$skip_saved_data && !empty($saved_panes[$pane_id])) {
      $multilane_pane = array_merge($multilane_pane, $saved_panes[$pane_id]);
      $multilane_pane['saved'] = TRUE;
    }

    // Remove #lane_id and #orig from the array such that
    // commerce_checkout_multilane pane alter hook leaves this alone.
    $multilane_pane = $multilane_pane['#orig'] + $multilane_pane;
    unset($multilane_pane['#orig']);
    unset($multilane_pane['#lane_id']);

    // Ensure that the correct suffixed pane-id is in the record.
    $multilane_pane['pane_id'] = $pane_id;

    $checkout_panes[$pane_id] = $multilane_pane;
  }

  drupal_alter('commerce_checkout_pane_info', $checkout_panes);

  // Merge in defaults.
  foreach ($checkout_panes as $pane_id => $checkout_pane) {
    // Set some defaults for the checkout pane.
    $defaults = array(
      'base' => $pane_id,
      'name' => $checkout_pane['title'],
      'page' => 'checkout',
      'locked' => FALSE,
      'fieldset' => TRUE,
      'collapsible' => FALSE,
      'collapsed' => FALSE,
      'weight' => 0,
      'enabled' => TRUE,
      'review' => TRUE,
      'callbacks' => array(),
      'file' => '',
    );
    $checkout_pane += $defaults;

    // Disable all callbacks.
    foreach (array('settings_form', 'checkout_form', 'checkout_form_validate', 'checkout_form_submit', 'review') as $callback) {
      $checkout_pane['callbacks'][$callback] = FALSE;
    }

    $checkout_panes[$pane_id] = $checkout_pane;
  }

  // Sort the panes by their weight value.
  uasort($checkout_panes, 'drupal_sort_weight');

  return $checkout_panes;
}
