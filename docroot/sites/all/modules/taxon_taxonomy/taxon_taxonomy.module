<?php

/**
 * @file
 * Calls Taxon Classifier and displays the resulting tags.
 *
 * The Taxon Classifier web service must be installed, see the Taxon Classifier manual at www.taxon.dk.
 *
 * taxon_taxonomy.module manage general hooks of module.
 */

/**
 * Implements hook_menu().
 */
function taxon_taxonomy_menu() {
  $items = array();

  $items['taxon-taxonomy'] = array(
    'title'            => 'Taxon',
    'description'      => '',
    'page callback'    => '_taxon_taxonomy_proxy',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/config/content/taxon-taxonomy'] = array(
    'title' => 'Taxon Taxonomy',
    'description' => 'Configuration for the Taxon Taxonomy module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxon_taxonomy_admin_form'),
    'access arguments' => array('administer taxon taxononmy'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function taxon_taxonomy_permission() {
  return array(
    'administer taxon taxononmy' => array(
      'title' => t('Taxon Taxonomy administration'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function taxon_taxonomy_help($path, $arg) {
  switch ($path) {
    case 'admin/help#taxon_taxonomy':
      module_load_include('inc', 'taxon_taxonomy');

      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides the connection to your existing Taxon Classifier web service.') . '</p>';
      $output .= '<p>' . t('You can read more about Taxon Classifier and the Taxon Taxonomy module at') . ' <a target = "_blank" href = "http://www.taxon.dk">www.taxon.dk</a>.' . '</p>';

      return $output;
  }
}

/**
 * The administration form.
 */
function taxon_taxonomy_admin_form($form, &$form_state) {
  $drupal_name = variable_get('taxon_taxonomy_drupal_name', "kle");

  $form['taxon_taxonomy_drupal_name'] = array(
    '#type' => 'textfield',
    '#title' => t('The machine name of the taxonomy in Drupal'),
    '#description' => t('The machine name of the taxonomy in Drupal.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $drupal_name,
  );

  $lookup_file = variable_get('taxon_taxonomy_lookup_file');

  $form['taxon_taxonomy_lookup_file'] = array(
    '#type' => 'textfield',
    '#title' => t('Lookup taxonomy for Taxon Classifier'),
    '#description' => t('The full path and filename for the lookup taxonomy for Taxon Classifier.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#default_value' => $lookup_file,
  );

  $taxonhub_api_key = variable_get('taxon_taxonomy_taxonhub_api_key');

  $form['taxon_taxonomy_taxonhub_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('TaxonHub API Key for Taxon Classifier Cloud'),
    '#description' => t('The TaxonHub API Key used with Taxon Classifier Cloud.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#default_value' => $taxonhub_api_key,
  );

  $taxon_url = variable_get('taxon_taxonomy_taxon_url');

  $form['taxon_taxonomy_taxon_url'] = array(
    '#type' => 'textfield',
    '#title' => t('The URL for Taxon Classifier'),
    '#description' => t('The URL where we can find the Taxon Classifier web service.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $taxon_url,
  );

  $number_results_returned = variable_get('taxon_taxonomy_number_results_returned', 5);

  $form['taxon_taxonomy_number_results_returned'] = array(
    '#type' => 'textfield',
    '#title' => t('The number of returned results'),
    '#description' => t('The number of results to return from Taxon Classifier. 0 means all.'),
    '#size' => 10,
    '#maxlength' => 16,
    '#required' => TRUE,
    '#default_value' => $number_results_returned,
  );

  $field_name = variable_get('taxon_taxonomy_field_name');

  $form['taxon_taxonomy_field_name'] = array(
    '#type' => 'textfield',
    '#title' => t('The name of the taxonomy field'),
    '#description' => t('The name of the taxonomy field where the results from Taxon Classifier is added or removed. Use a # for ids, e.g. #taxonomy-tag-id and . for classes, e.g. .taxonomy-tags-class'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $field_name,
  );

  $selected_image = variable_get('taxon_taxonomy_selected_image', '/sites/all/modules/taxon_taxonomy/images/selected.png');

  $form['taxon_taxonomy_selected_image'] = array(
    '#type' => 'textfield',
    '#title' => t('The path to the selected image'),
    '#description' => t('The path relative to Drupal home directory to the image used when a Taxon Classifier class is selected.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $selected_image,
  );

  $not_selected_image = variable_get('taxon_taxonomy_not_selected_image', '/sites/all/modules/taxon_taxonomy/images/not_selected.png');

  $form['taxon_taxonomy_not_selected_image'] = array(
    '#type' => 'textfield',
    '#title' => t('The path to the not-selected image'),
    '#description' => t('The path relative to Drupal home directory to the image used when a Taxon Classifier class is not selected.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $not_selected_image,
  );

  $wait_image = variable_get('taxon_taxonomy_wait_image', '/sites/all/modules/taxon_taxonomy/images/wait.gif');

  $form['taxon_taxonomy_wait_image'] = array(
    '#type' => 'textfield',
    '#title' => t('The path to the wait image'),
    '#description' => t('The path relative to Drupal home directory to the image used when waiting for Taxon Classifier to return the results. Usually an animated GIF.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $wait_image,
  );

  $help_image = variable_get('taxon_taxonomy_help_image', '/sites/all/modules/taxon_taxonomy/images/help.png');

  $form['taxon_taxonomy_help_image'] = array(
    '#type' => 'textfield',
    '#title' => t('The path to the help image'),
    '#description' => t('The path relative to Drupal home directory to the image used for help.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $help_image,
  );

  $button_text = variable_get('taxon_taxonomy_button_text', t("Classify with Taxon Classifier"));

  $form['taxon_taxonomy_button_text'] = array(
    '#type' => 'textfield',
    '#title' => t('The text on the Taxon Classifier button'),
    '#description' => t('The text on the Taxon Classifier button.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $button_text,
  );

  $button_text_wait = variable_get('taxon_taxonomy_button_text_wait', t("Classifying ..."));

  $form['taxon_taxonomy_button_text_wait'] = array(
    '#type' => 'textfield',
    '#title' => t('The text on the Taxon Classifier button while waiting'),
    '#description' => t('The text on the Taxon Classifier button while waiting for Taxon Classifier to return results.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $button_text_wait,
  );

  $text_title = variable_get('taxon_taxonomy_text_title', '#edit-title');

  $form['taxon_taxonomy_text_title'] = array(
    '#type' => 'textfield',
    '#title' => t('The id of the title field'),
    '#description' => t('The id of the title field including the #.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#default_value' => $text_title,
  );

  $text_breadcrumb = variable_get('taxon_taxonomy_text_breadcrumb', false);

  $form['taxon_taxonomy_text_breadcrumb'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include the breadcrumb'),
    '#description' => t('Include the breadcrumb in the text sent to Taxon Classifier.'),
    '#default_value' => $text_breadcrumb,
  );

  $text_field = variable_get('taxon_taxonomy_text_field', '#edit-body-en-0-value');

  $form['taxon_taxonomy_text_field'] = array(
    '#type' => 'textfield',
    '#title' => t('The id of the text field'),
    '#description' => t('The id of the text field including the #.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $text_field,
  );

  $text_field_ckeditor = variable_get('taxon_taxonomy_text_field_ckeditor', true);

  $form['taxon_taxonomy_text_field_ckeditor'] = array(
    '#type' => 'checkbox',
    '#title' => t('Using CKEditor'),
    '#description' => t('Check this if you want to classify text from the CKEditor.'),
    '#default_value' => $text_field_ckeditor,
  );

  $help_texts = variable_get('taxon_taxonomy_help_texts', "");

  $form['taxon_taxonomy_help_texts'] = array(
    '#type' => 'textfield',
    '#title' => t('The path to help texts for Taxon Classifier'),
    '#description' => t('The path relative to Drupal home directory to help texts for Taxon Classifier. Leave blank if you do not have help texts.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#default_value' => $help_texts,
  );

  $exclude_classes = variable_get('taxon_taxonomy_exclude_classes', "");

  $form['taxon_taxonomy_exclude_classes'] = array(
    '#type' => 'textfield',
    '#title' => t('Exclude classes from the result'),
    '#description' => t('A comma separated list of classes to exclude from the Taxon Classifier result. Note that all children/grandchildren etc. of an excluded class also are excluded.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#default_value' => $exclude_classes,
  );

  $auto_fill = variable_get('taxon_taxonomy_auto_fill', false);

  $form['taxon_taxonomy_auto_fill'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically fill taxonomy field on editing'),
    '#description' => t('If the taxonomy field is empty the field is filled with the result from Taxon Classifier when the page is opened for edit.'),
    '#required' => FALSE,
    '#default_value' => $auto_fill,
  );

  $auto_fill_on_save = variable_get('taxon_taxonomy_auto_fill_on_save', false);

  $form['taxon_taxonomy_auto_fill_on_save'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically fill taxonomy field on saving'),
    '#description' => t('If the taxonomy field is empty the field is filled with the result from Taxon Classifier when the page is saved.'),
    '#required' => FALSE,
    '#default_value' => $auto_fill_on_save,
  );

  $delay_taxon_call = variable_get('taxon_taxonomy_delay_taxon_call', 100);

  $form['taxon_taxonomy_delay_taxon_call'] = array(
    '#type' => 'textfield',
    '#title' => t('Time to delay the initial call to Taxon Classifier'),
    '#description' => t('When opening the page for editing wait this long before calling Taxon Classifier. The delay should be long enough to ensure that the full overlay is loaded.'),
    '#size' => 10,
    '#maxlength' => 16,
    '#required' => TRUE,
    '#default_value' => $delay_taxon_call,
  );

  $hide_taxon = variable_get('taxon_taxonomy_hide_taxon', false);

  $form['taxon_taxonomy_hide_taxon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide the whole Taxon Classifier part'),
    '#description' => t('This is useful in connection with some of the auto fill settings. Otherwise it might be slightly pointless.'),
    '#required' => FALSE,
    '#default_value' => $hide_taxon,
  );

  $threshold_weight = variable_get('taxon_taxonomy_threshold_weight', 0);

  $form['taxon_taxonomy_threshold_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Threshold for weight'),
    '#description' => t('Threshold for the weight of the top result returned from Taxon Classifier.'),
    '#size' => 10,
    '#maxlength' => 16,
    '#required' => FALSE,
    '#default_value' => $threshold_weight,
  );

  $threshold_weight_text = variable_get('taxon_taxonomy_threshold_weight_text', 'The weight is lower than the threshold');

  $form['taxon_taxonomy_threshold_weight_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Message if threshold for weight is not met'),
    '#description' => t('Message if threshold for weight is not met by the top result returned from Taxon Classifier.'),
    '#size' => 60,
    '#maxlength' => 256,
    '#required' => FALSE,
    '#default_value' => $threshold_weight_text,
  );

  $threshold_confidenceCoefficient = variable_get('taxon_taxonomy_threshold_confidenceCoefficient', 0);

  $form['taxon_taxonomy_threshold_confidenceCoefficient'] = array(
    '#type' => 'textfield',
    '#title' => t('Threshold for confidenceCoefficient'),
    '#description' => t('Threshold for the confidenceCoefficient of the top result returned from Taxon Classifier.'),
    '#size' => 10,
    '#maxlength' => 16,
    '#required' => FALSE,
    '#default_value' => $threshold_confidenceCoefficient,
  );

  $threshold_confidenceCoefficient_text = variable_get('taxon_taxonomy_threshold_confidenceCoefficient_text', 'The confidenceCoefficient is lower than the threshold');

  $form['taxon_taxonomy_threshold_confidenceCoefficient_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Message if threshold for confidenceCoefficient is not met'),
    '#description' => t('Message if threshold for confidenceCoefficient is not met by the top result returned from Taxon Classifier.'),
    '#size' => 60,
    '#maxlength' => 256,
    '#required' => FALSE,
    '#default_value' => $threshold_confidenceCoefficient_text,
  );

  $no_result_text = variable_get('taxon_taxonomy_no_result_text', 'Taxon Classifier did not find any classes');

  $form['taxon_taxonomy_no_result_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Message if Taxon Classifier did not find any relevant classes'),
    '#description' => t('Message if Taxon Classifier did not find any relevant classes.'),
    '#size' => 60,
    '#maxlength' => 256,
    '#required' => FALSE,
    '#default_value' => $no_result_text,
  );

  $threshold_loop_up = variable_get('taxon_taxonomy_threshold_loop_up', false);

  $form['taxon_taxonomy_threshold_loop_up'] = array(
    '#type' => 'checkbox',
    '#title' => t('Loop up Taxon Classifier result'),
    '#description' => t('If the result does not meet the thresholds and two or more classes exist in the same 2nd level class they are loop up in the xx.yy.00 class. Mainly relevant for KLE type taxonomies.'),
    '#required' => FALSE,
    '#default_value' => $threshold_loop_up,
  );

  // Submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

/**
 * Save configuration settings for Taxon Taxonomy module.
 */
function taxon_taxonomy_admin_form_submit($form, &$form_state) {
  variable_set('taxon_taxonomy_drupal_name', $form_state['values']['taxon_taxonomy_drupal_name']);
  variable_set('taxon_taxonomy_lookup_file', $form_state['values']['taxon_taxonomy_lookup_file']);
  variable_set('taxon_taxonomy_taxonhub_api_key', $form_state['values']['taxon_taxonomy_taxonhub_api_key']);
  variable_set('taxon_taxonomy_taxon_url', $form_state['values']['taxon_taxonomy_taxon_url']);
  variable_set('taxon_taxonomy_number_results_returned', $form_state['values']['taxon_taxonomy_number_results_returned']);
  variable_set('taxon_taxonomy_field_name', $form_state['values']['taxon_taxonomy_field_name']);
  variable_set('taxon_taxonomy_selected_image', $form_state['values']['taxon_taxonomy_selected_image']);
  variable_set('taxon_taxonomy_not_selected_image', $form_state['values']['taxon_taxonomy_not_selected_image']);
  variable_set('taxon_taxonomy_wait_image', $form_state['values']['taxon_taxonomy_wait_image']);
  variable_set('taxon_taxonomy_help_image', $form_state['values']['taxon_taxonomy_help_image']);
  variable_set('taxon_taxonomy_button_text', $form_state['values']['taxon_taxonomy_button_text']);
  variable_set('taxon_taxonomy_button_text_wait', $form_state['values']['taxon_taxonomy_button_text_wait']);
  variable_set('taxon_taxonomy_text_title', $form_state['values']['taxon_taxonomy_text_title']);
  variable_set('taxon_taxonomy_text_breadcrumb', $form_state['values']['taxon_taxonomy_text_breadcrumb']);
  variable_set('taxon_taxonomy_text_field', $form_state['values']['taxon_taxonomy_text_field']);
  variable_set('taxon_taxonomy_text_field_ckeditor', $form_state['values']['taxon_taxonomy_text_field_ckeditor']);
  variable_set('taxon_taxonomy_help_texts', $form_state['values']['taxon_taxonomy_help_texts']);
  variable_set('taxon_taxonomy_exclude_classes', $form_state['values']['taxon_taxonomy_exclude_classes']);
  variable_set('taxon_taxonomy_auto_fill', $form_state['values']['taxon_taxonomy_auto_fill']);
  variable_set('taxon_taxonomy_auto_fill_on_save', $form_state['values']['taxon_taxonomy_auto_fill_on_save']);
  variable_set('taxon_taxonomy_delay_taxon_call', $form_state['values']['taxon_taxonomy_delay_taxon_call']);
  variable_set('taxon_taxonomy_hide_taxon', $form_state['values']['taxon_taxonomy_hide_taxon']);
  variable_set('taxon_taxonomy_threshold_weight', $form_state['values']['taxon_taxonomy_threshold_weight']);
  variable_set('taxon_taxonomy_threshold_weight_text', $form_state['values']['taxon_taxonomy_threshold_weight_text']);
  variable_set('taxon_taxonomy_threshold_confidenceCoefficient', $form_state['values']['taxon_taxonomy_threshold_confidenceCoefficient']);
  variable_set('taxon_taxonomy_threshold_confidenceCoefficient_text', $form_state['values']['taxon_taxonomy_threshold_confidenceCoefficient_text']);
  variable_set('taxon_taxonomy_no_result_text', $form_state['values']['taxon_taxonomy_no_result_text']);
  variable_set('taxon_taxonomy_threshold_loop_up', $form_state['values']['taxon_taxonomy_threshold_loop_up']);

  drupal_set_message(t('The settings have been saved'));
}

/**
 * As JavaScript can not call an external domain directly, we use a proxy.
 */
function _taxon_taxonomy_proxy() {
  $text = isset($_POST['text']) ? $_POST['text'] : "";
  $taxonomy = isset($_POST['taxonomy']) ? $_POST['taxonomy'] : "";

  $text = preg_replace("/<\s*script[^>]*>[\s\S]*?<\/script[^>]*>/", " ", $text);
  $text = preg_replace("/<\s*style[^>]*>[\s\S]*?<\/style[^>]*>/", " ", $text);
  $text = preg_replace("/<[^>]*>/", " ", $text);
  $text = preg_replace("/\\n/", " ", $text);
  $text = preg_replace("/\\t/", " ", $text);
  $text = preg_replace("/\\r/", " ", $text);
  $text = preg_replace("/\s+/", " ", $text);

  mb_internal_encoding("UTF-8");

  // We need to set the encoding to UTF-8 for PHP versions < 5.4
  if ((!defined('PHP_VERSION_ID')) || (PHP_VERSION_ID < 50400)) {
    $text = html_entity_decode($text, ENT_COMPAT, 'UTF-8');
  }
  else {
    $text = html_entity_decode($text);
  }

  // Set POST variables.
  $url = variable_get('taxon_taxonomy_taxon_url');
  $number_results_returned  = variable_get('taxon_taxonomy_number_results_returned');

  // The taxonomy path is used with Taxon Classifier Web service
  $taxonomy = variable_get('taxon_taxonomy_lookup_file');

  // The TaxonHub API Key is used with Taxon Classifier Cloud and Taxon Classifier Enterprise
  $taxonhub_api_key  = variable_get('taxon_taxonomy_taxonhub_api_key');

  // We send both taxonomy and taxonhub_api_key regardless expecting the receiving service to use 
  // the information it needs and ignore the rest rather than introducing complicated logic.
  $fields = array(
    'taxonomy' => urlencode($taxonomy),
    'taxonhub_api_key' => urlencode($taxonhub_api_key),
    'text' => urlencode("$text"),
    'settings' => urlencode(json_encode(array("numberResultsReturned" => $number_results_returned))),
  );

  $fields_string = http_build_query($fields);

  // Open connection.
  $ch = curl_init();

  // Set curl to POST the data and return the result.
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, count($fields));
  curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

  // Execute post.
  $taxonomy_taxon_json = curl_exec($ch);

  // Check this later
  $curl_error = curl_error($ch);
  $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  
  // Close connection.
  curl_close($ch);

  // Convert the JSON.
  $result = json_decode($taxonomy_taxon_json, true);

  $result_text = "";

  if(($result == null) || ($result['status']['status'] == 'Error')) {
    if(($curl_error == "") && ($httpCode == 200)) {
      // cURL return OK
      if($result == null) {
        // The result is not JSON, so print it
        $result_text = "Note: $taxonomy_taxon_json"; // Taxon Classifier 2.x
      }
      else {
        $result_text = "Note: " . $result['status']['errors'][0]['errorText']; // Taxon Classifier 3.x
      }
    }
    else {
      // Connection error
      $result_text = "Note: Error connecting to Taxon Classifier:";
      $result_text .= $curl_error != "" ? " $curl_error." : "";
      $result_text .= $httpCode != 0 ? " HTTP = $httpCode on '$url'." : "";
    }
  }
  else {
    $classes = array();

    // Check for Taxon Classifier 2.x or Taxon Classifier 3.x result
    if(! isset($result['classes'])) {
      $classes = $result; // Taxon Classifier 2.x
    }
    else {
      $classes = $result['classes']; // Taxon Classifier 3.x
    }

    // Print the result, if any
    if (count($classes) > 0) {
      $message_text_set = false;
      $threshold_not_met = false;

      // Check for weight threshold
      $threshold_weight = variable_get('taxon_taxonomy_threshold_weight');

      if ($threshold_weight > 0) {
        $top_result = reset($classes);

        if ($threshold_weight > $top_result['scoreTotal']) {
          $result_text = "Note: " . variable_get('taxon_taxonomy_threshold_weight_text') . "\n";

          $message_text_set = true;
          $threshold_not_met = true;
        }
      }

      // Check for confidenceCoefficient threshold
      $threshold_confidenceCoefficient = variable_get('taxon_taxonomy_threshold_confidenceCoefficient');

      if ($threshold_confidenceCoefficient > 0) {
        $top_result = reset($classes);

        if ($threshold_confidenceCoefficient > $top_result['scoreConfidenceCoefficient']) {
          if ($message_text_set) {
            $result_text .= "Note: " . variable_get('taxon_taxonomy_threshold_confidenceCoefficient_text') . "\n";
          }
          else {
            $result_text = variable_get('taxon_taxonomy_threshold_confidenceCoefficient_text');
          }

          $message_text_set = true;
          $threshold_not_met = true;
        }
      }

      if ($threshold_not_met) {
        $threshold_loop_up = variable_get('taxon_taxonomy_threshold_loop_up');

        if ($threshold_loop_up) {
          // Loop up the results to the JavaScript function.
          $looped_up_classes = array();

          foreach ($classes as $classid => $class) {
            $parent_classid = preg_replace("/\.[^\.]+$/", "", $classid);

            if (isset($looped_up_classes[$parent_classid])) {
              $looped_up_classes[$parent_classid]['count']++;
            }
            else {
              $looped_up_classes[$parent_classid]['title'] = "$classid " . $class['title'];
              $looped_up_classes[$parent_classid]['count'] = 1;
            }
          }

          $drupal_name = variable_get('taxon_taxonomy_drupal_name', "kle");
          $taxonomy_name_load = taxonomy_vocabulary_machine_name_load($drupal_name);
          $taxonomy_vid = $taxonomy_name_load->vid;

          foreach ($looped_up_classes as $parent_classid => $class) {
            if ($class['count'] > 1) {
              // Get the full title of the class from the taxonomy table
              $class_name = db_query("SELECT name FROM {taxonomy_term_data} WHERE vid = :vid AND name LIKE :classid LIMIT 1", array(':vid' => $taxonomy_vid, ':classid' => "$parent_classid.00 %"))->fetchField();

              if ($message_text_set) {
                $result_text = "$class_name\n";

                $message_text_set = false;
              }
              else {
                $result_text .= "$class_name\n";
              }
            }
            else {
              if ($message_text_set) {
                $result_text = $class['title'] . "\n";

                $message_text_set = false;
              }
              else {
                $result_text .= $class['title'] . "\n";
              }            
            }
          }
        }
      }
      else {
        // Get the classes (if any) to exclude from the result
        $exclude_classes_string  = variable_get('taxon_taxonomy_exclude_classes');

        $exclude_classes = array();

        if (preg_match_all("/([0-9\.]+)/", $exclude_classes_string, $matches)) {
          $exclude_classes = $matches[1];
        }

        // Return the result in text to the JavaScript function.
        foreach ($classes as $classid => $class) {
          foreach($exclude_classes as $exclude_classid) {
            if (preg_match("/^$exclude_classid/", $classid)) {
              // Exclude the result and continue the outer foreach
              continue 2;
            }
          }

          $classtitle = $class['title'];

          $classtitle = html_entity_decode($classtitle);

          $result_text .= "$classid $classtitle\n";
        }
      }
    }
  }

  print $result_text;

  // Return empty so no theming.
  return;
}

/**
 * Implements hook_node_prepare().
 */
function taxon_taxonomy_node_prepare($node) {
  // Add our custom JavaScript.
  drupal_add_js(drupal_get_path('module', 'taxon_taxonomy') . '/js/taxon_taxonomy.js',
    array(
      'type' => 'file',
      'preprocess' => FALSE,
      'weight' => '9999',
    )
  );

  // Add our custom style sheet.
  drupal_add_css(drupal_get_path('module', 'taxon_taxonomy') . '/css/taxon_taxonomy.css',
    array(
      'type' => 'file',
      'media' => 'screen',
      'preprocess' => FALSE,
      'weight' => '9999',
    )
  );

  drupal_add_js(
    array(
      'taxon_taxonomy' => array(
        'field_name' => variable_get('taxon_taxonomy_field_name'),
        'selected_image' => variable_get('taxon_taxonomy_selected_image'),
        'not_selected_image' => variable_get('taxon_taxonomy_not_selected_image'),
        'wait_image' => variable_get('taxon_taxonomy_wait_image'),
        'help_image' => variable_get('taxon_taxonomy_help_image'),
        'button_text' => variable_get('taxon_taxonomy_button_text'),
        'button_text_wait' => variable_get('taxon_taxonomy_button_text_wait'),
        'text_title' => variable_get('taxon_taxonomy_text_title'),
        'text_breadcrumb' => variable_get('taxon_taxonomy_text_breadcrumb'),
        'text_field' => variable_get('taxon_taxonomy_text_field'),
        'text_field_ckeditor' => variable_get('taxon_taxonomy_text_field_ckeditor'),
        'help_texts' => variable_get('taxon_taxonomy_help_texts'),
        'auto_fill' => variable_get('taxon_taxonomy_auto_fill'),
        'auto_fill_on_save' => variable_get('taxon_taxonomy_auto_fill_on_save'),
        'delay_taxon_call' => variable_get('taxon_taxonomy_delay_taxon_call'),
        'hide_taxon' => variable_get('taxon_taxonomy_hide_taxon'),
      ),
    ),
    'setting'
  );
}
