<?php
/**
 * @file
 * Drupal hook implementations.
 */

/**
 * Custom drupal_http_request() wrapper that implements caching.
 *
 * @see drupal_http_request()
 */
function http_request_cache_http_request($url, array $options = array()) {

  // Create a cache key that is unique to this request. We hash it to prevent
  // any potentially sensitive information from being stored in the database.
  $args = func_get_args();
  $key = __FUNCTION__ . serialize($args);
  $cid = hash('sha512', drupal_get_hash_salt() . $key);

  // Skip POST requests no matter what.
  // All other requests get cached by default.
  $is_cacheable = empty($options['method']) || drupal_strtoupper($options['method']) != 'POST';

  // Allow modules to adjust cacheable status.
  if ($is_cacheable) {

    $context = array(
      'url' => $url,
      'options' => $options,
    );
    drupal_alter('http_request_is_cacheable', $is_cacheable, $context);
  }

  $result = NULL;

  if ($is_cacheable) {

    $result = &drupal_static($cid);
    // See if we have a static cached result so we can avoid the db completely.
    if (!empty($result)) {

      return $result;
    }
    // Check for a cached version of this request in the db.
    elseif($cache = cache_get($cid, 'cache_http_request')) {

      // Assign to our static cache before returning result.
      $result = $cache->data;
      return $result;
    }
  }

  // We need to remove our drupal_http_request() override so it doesn't result
  // in an infinite recursion scenario. We then need to restore our custom
  // setting after the call is complete.
  global $conf;
  $original_function = $conf['drupal_http_request_function'];
  $conf['drupal_http_request_function'] = FALSE;
  $result = call_user_func_array('drupal_http_request', $args);
  $conf['drupal_http_request_function'] = $original_function;

  $cache_errors = variable_get('http_request_cache_cache_errors', FALSE);
  // A request is considered failed if it does not have a 200 or 300 series
  // response code.
  $is_error = $result->code < 200 || $result->code >= 400;
  if ($is_error && !$cache_errors) {

    $is_cacheable = FALSE;
  }

  if ($is_cacheable) {

    // If no duration was configured we want to pass CACHE_PERMANENT to the
    // cache_set() call. Otherwise we want to set an appropriate timestamp.
    $expire = CACHE_PERMANENT;
    $duration = variable_get('http_request_cache_duration', CACHE_PERMANENT);
    if (CACHE_PERMANENT != $duration) {

      $expire = REQUEST_TIME + $duration;
    }

    // Be sure to save this request so we can avoid it in the future.
    cache_set($cid, $result, 'cache_http_request', $expire);
  }

  return $result;
}

/**
 * Implements hook_boot().
 */
function http_request_cache_boot() {

  // Use our custom function only after the module is loaded. If this gets
  // defined by variable_set(), drush, or in settings.php it will cause the
  // site to break because the module hasn't been loaded before the function
  // is used.
  global $conf;
  $conf['drupal_http_request_function'] = 'http_request_cache_http_request';
}

/**
 * Implements hook_flush_caches().
 */
function http_request_cache_flush_caches() {

  if (variable_get('http_request_cache_allow_flushing', TRUE)) {

    return array('cache_http_request');
  }
}

/**
 * Implements hook_menu().
 */
function http_request_cache_menu() {

  $items = array();
  $items['admin/config/system/request-cache'] = array(
    'title' => 'HTTP Request Caching',
    'description' => 'Configure HTTP Request Cache',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('http_request_cache_admin'),
    'access arguments' => array('administer http request cache'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function http_request_cache_permission() {

  return array(
    'administer http request cache' => array(
      'title' => t('Administer HTTP Request Cache'),
      'description' => t('Allows controlling configuration for HTTP Request Cache.'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function http_request_cache_admin() {

  $form = array();

  $form['intro'] = array(
    '#markup' => t('You can configure caching options on this screen.'),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );

  $form['http_request_cache_allow_flushing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow cache flushing'),
    '#description' => t('If enabled then cached HTTP requests will be flushed with regular Drupal cache flushes.'),
    '#default_value' => variable_get('http_request_cache_allow_flushing', TRUE),
    '#return_value' => TRUE,
  );

  $period = drupal_map_assoc(array(0, 60, 180, 300, 600, 900, 1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400, 86400 * 7, 86400 * 30), 'format_interval');
  $period[0] = '<' . t('persist') . '>';
  $form['http_request_cache_duration'] = array(
    '#type' => 'select',
    '#title' => t('How long should items be cached?'),
    '#description' => t('The length of time requests should be cached. If not set items will last until the cache table is cleared. Has no effect if cache flushing is disabled.'),
    '#options' => $period,
    '#default_value' => variable_get('http_request_cache_duration', 0),
    '#states' => array(
      'visible' => array(
        ':input[name="http_request_cache_allow_flushing"]' => array('checked' => TRUE)
      ),
    ),
  );

  $form['http_request_cache_cache_errors'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cache failed requests'),
    '#description' => t('If enabled then failed requests will also be cached. A request is considered failed if it does not return a 200 or 300 series response code.'),
    '#default_value' => variable_get('http_request_cache_cache_errors', TRUE),
    '#return_value' => TRUE,
  );

  $form['clear'] = array(
    '#type' => 'fieldset',
    '#title' => t('Clear cached requests'),
  );

  $cids = db_select('cache_http_request', 'r')->fields('r', array('cid'))->execute();
  $form['clear']['number of items'] = array(
    '#markup' => format_plural($cids->rowCount(),
        'There is 1 request currently cached.',
        'There are @count requests currently cached.'
      ),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );

  $form['clear']['clear-cache'] = array(
    '#type' => 'submit',
    '#value' => t('Clear'),
    '#submit' => array('http_request_cache_admin_submit'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_submit().
 */
function http_request_cache_admin_submit($form, &$form_state) {

  drupal_set_message(t('Cleared all cache items.'));
  cache_clear_all('*', 'cache_http_request', TRUE);
}
