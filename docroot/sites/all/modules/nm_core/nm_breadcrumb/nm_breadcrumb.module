<?php
/**
 * @file
 * Code for nm_breadcrumb.
 *
 * @todo
 * Store path, title, timestamp for breadcrumb in database
 * so we don't need to validate URL each time.
 * Timestamp will let us know how long ago was valid URL, to know if we need a recheck.
 */


/**
 * Implements hook_preprocess_page().
 */
function nm_breadcrumb_preprocess_page(&$variables) {

  //get the current URL
  $alias = drupal_get_path_alias();
  //separate it into parts
  $alias_parts = explode('/', $alias);

  //do nothing on admin paths
  //do nothing on the home page
  if ($alias_parts[0] == 'admin') {
    return;
  }
  if (drupal_is_front_page()) {
    return;
  }

  //make new breadcrumb data
  $new_crumb_data = nm_breadcrumb_make_crumb_data($alias_parts);

  //zero out the trail for these pages
  if ($alias_parts[0] == 'user' && isset($alias_parts[1])) {
    if ($alias_parts[1] == 'reset' || $alias_parts[1] == 'login' || $alias_parts[1] == 'register'|| $alias_parts[1] == 'password') {
      $new_crumb_data = array(
        array(
          'title' => t('Home'),
          'href' => '<front>',
        ),
      );
    }
  }

  //add page title to end
  $title = drupal_get_title();
  $new_crumb_data[] = array('title' => $title);

  //set an array we can grab from if we/others need to make changes later
  $variables['breadcrumb_array'] = $new_crumb_data;

  //set menu active trail
  if (isset($new_crumb_data[1]['href'])) {
    #menu_set_active_item(drupal_get_normal_path($new_crumb_data[1]['href']));
    if ($title != drupal_get_title()) {
      drupal_set_title($title);
    }
  }

  //make new breadcrumbs
  $new_crumbs = nm_breadcrumb_make_crumbs($new_crumb_data);

  //set new breacdrumbs
  drupal_set_breadcrumb($new_crumbs);
  $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => drupal_get_breadcrumb()));

}


/**
 * Custom function that creates breadcrumb links
 * @param $alias_parts
 *   An array of URL parts exploded at '/'.
 * @return $active_trail
 *   An associative array of breadcrumb link data.
 */
function nm_breadcrumb_make_crumb_data($alias_parts) {

  //set first breadcrumb to be Home
  $active_trail[] = array(
    'title' => t('Home'),
    'href' => '<front>',
  );

  //how many alias parts do we have?
  $total = count($alias_parts);
  //for each alias part
  for ($i=0; $i<=$total-2; $i++) {
    $url = '';
    //figure out the breadcumb item url
    for ($j=0; $j<=$i; $j++) {
      if ($i == $j) {
        //if it is the last part of the URL
        $url .= $alias_parts[$j];
      }
      else {
        //if it is a middle part of the URL
        $url .= $alias_parts[$j] . '/';
      }
    }

    // skip validation on problematic URLS
    $skip = FALSE;
    if ($url == 'node') {
      $skip = TRUE;
    }
    if ($url == 'node/add') {
      $skip = TRUE;
    }

    //if not a 404
    if ($skip == TRUE || nm_breadcrumb_validate_path($url) == TRUE) {
      //set the breadcrumb item
      //@todo - find a function to get page title from alias url

      //clean up some titles
      if ($url == 'node/add') {
        $alias_parts[$i] = t('Create Content');
      }

      //change label on node/edit pages
      $parts = explode('/', $url);
      if (count($parts) == 2 && $parts[0] == 'node' && is_numeric($parts[1])) {
        $alias_parts[$i] = 'View';
      }

      //we don't want to print 'node' b/c it is redundant of 'home'
      if ($url != 'node') {
        $active_trail[] = array(
          'title' => t(ucwords(str_replace('-', ' ', check_plain($alias_parts[$i])))),
          'href' => $url,
        );
      }
    }

  }  //end $alias_parts for loops

  return $active_trail;

}


/**
 * Check to see if a path works
 */
function nm_breadcrumb_validate_path($url) {

  // Get max_execution_time from configuration, override 0 with 240 seconds.
  $max_execution_time = ini_get('max_execution_time') == 0 ? 240 : ini_get('max_execution_time');
  // Make sure we have enough time to validate the link.
  drupal_set_time_limit(240);

  global $base_url;
  $useragent = variable_get('site_name', 'Drupal') . '(+' . $base_url . ')';
  $headers = array();
  $headers['User-Agent'] = 'User-Agent: ' . $useragent;

  // Range: Only request the first 1024 bytes from remote server. This is
  // required to prevent timeouts on URLs that are large downloads.
  $headers['Range'] = 'bytes=0-1024';

  // Fetch URL.
  $response = drupal_http_request($base_url . '/' . $url, $headers);

  // End if taking too long
  if ((timer_read('page') / 1000) > ($max_execution_time / 2)) {
    exit; // Stop once we have used over half of the maximum execution time.
  }

  // Handle the results
  if ($response->code != '404') {
    return TRUE;
  }
  return FALSE;

}


/**
 * Custom function that creates breadcrumb links
 * @param $crumb_data
 *   An associative array to create links from
 *   'title' = display text
 *   'href' = the relative URL
 * @return $crumbs
 *   An array of rendered breadcrumb links.
 */
function nm_breadcrumb_make_crumbs($crumb_data) {

  $crumbs = array();
  foreach ($crumb_data as $crumb) {
    //use title if no optional hover text
    if (!isset($crumb['hover'])) {
      $crumb['hover'] = $crumb['title'];
    }

    if (isset($crumb['href'])) {
      $crumbs[] = l($crumb['title'], $crumb['href'], array('attributes' => array('title' => $crumb['hover'])));
    }
    elseif (isset($crumb['title'])) {
      $crumbs[] = $crumb['title'];
    }
  }
  return $crumbs;
}


/**
 * Implements hook_help().
 */
function nm_breadcrumb_help($path, $arg) {
  switch ($path) {
    case 'admin/help#nm_breadcrumb':
      $content = array(
        '#group' => 'info',
        '#theme' => 'item_list',
        '#attributes' => array(
          'class' => array('nodemaker-apps-details'),
        ),
        '#items' => nm_breadcrumb_help_details(),
      );

      return render($content);
      break;
  }
}


/**
  * Content for hook_help().
  */
function nm_breadcrumb_help_details() {
  $items = array();
  $items[] = '<strong>' . t('Usable, accurate breadcrumb trails.') . '</strong>  ' . t('Looks at the path parts of the current URL, and if valid, sets the trail.  This works in conjunction with alias patterns and Views.');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('Issues?') . '</strong>  ' . t('Have a support question?  Find a bug?  !issue!', array('!issue' => '<a href="http://drupal.org/project/issues/nm_core" title="NodeMaker Core Issue Queue" target="_blank">Please use the issue queue</a>'));
  return $items;
}

