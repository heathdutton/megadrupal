<?php
/**
 * @file
 * Code for the nm_core feature.
 */

include_once 'nm_core.features.inc';
include_once 'nm_core.fields.inc';


/**
 * Implements hook_node_type_insert().
 */
function nm_core_node_type_insert($info) {
  //add NodeMaker fields
  if ($info->type == 'forum') {
    nm_core_add_body_field($info);
    nm_core_add_tags_field($info);
  }
  elseif ($info->type == 'nm_testimonial') {
    nm_core_add_body_field($info);
  }
  else {
    nm_core_add_body_field($info);
    nm_core_add_tags_field($info);
    nm_core_add_image_field($info);
    nm_core_add_reference_field($info);
  }

}


/**
 * Implements hook_menu_alter().
 */
function nm_core_menu_alter(&$items) {
  if (module_exists('nm_members')) {
    $items['user/%user/view']['title'] = t('Profile');
  }
  else {
    $items['user/%user/view']['title'] = t('Account');

  }
}



/**
 * Implements hook_context_page_condition().
 */
function nm_core_context_page_condition() {
  if ($plugin = context_get_plugin('condition', 'is_403')) {
    $plugin->execute();
  }
}


/**
 * Implements hook_context_registry().
 */
function nm_core_context_registry() {
  return array(
    'conditions' => array(
      'is_403' => array(
        'title' => t('Is 403'),
        'description' => t("If a 403 is returned."),
        'plugin' => 'nm_core_context_condition_403',
      ),
    ),
  );
}


/**
 * Implements hook_context_plugins().
 */
function nm_core_context_plugins() {
  $plugins = array();
  $plugins['nm_core_context_condition_403'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'nm_core'),
      'file' => 'nm_core_context_condition_403.inc',
      'class' => 'nm_core_context_condition_403',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}


function nm_core_system_info_alter(&$info, $file, $type) {

  $exclude = array(
    'Bartik',
    'Alpha',
    'Omega',
    'Stark',
    'Garland',
    'Tao',
    'Rubik',
  );
  switch ($type) {
    case 'theme':
      if (in_array($info['name'], $exclude)) {
        $info['hidden'] = TRUE;
      }
    break;
  }
  return;
}


/**
 * Implements hook_theme().
 */
function nm_core_theme($existing, $type, $theme, $path) {
  return array(
    'nm_core_social_links' => array(
      'variables' => array('links' => NULL),
    ),
    'nm_core_social_links_form' => array(
      'template' => 'nm-core-social-links-form',
      'render element' => 'nm_core_social_links',
    ),
  );
}


/**
 * Custom theme function
 */
function theme_nm_core_social_links($variables) {
  //@see http://www.elegantthemes.com/blog/resources/beautiful-free-social-media-icons

  //sort
  _link_sort($variables['links'], 'weight');

  $icons = array();
  foreach ($variables['links'] as $type => $data) {
    $image = array(
      'path' =>  drupal_get_path('module', 'nm_core') . '/icons/' . $type . '.png',
      'alt' => $data['label'],
    );

    $link = array(
      'text' => theme('image', $image) . '<span class="social-label">' . $data['label'] . '</span>',
      'path' => $data['link'],
      'options' => array(
        'attributes' => array(
          'title' => $data['label'],
          'target' => '_blank',
        ),
        'html' => TRUE,
      ),
    );

    $icons[] = theme('link', $link);

  }

  return theme('item_list', array('items' => $icons));
}


/**
 * Helper function to sort links by weight
 */
function _link_sort(&$array, $key) {
    $sorter = array();
    $ret = array();
    reset($array);
    foreach ($array as $ii => $va) {
        $sorter[$ii] = $va[$key];
    }
    asort($sorter);
    foreach ($sorter as $ii => $va) {
        $ret[$ii] = $array[$ii];
    }
    $array = $ret;
}


/**
 * Implements hook_block_info().
 */
function nm_core_block_info() {
  //sitewide social links
  $blocks['nm_core_social_links'] = array(
    'info' => t('Sitewide Social Media Links'),
  );

  // add our own custom nice menu block(s)
  if(module_exists('nice_menus')) {
    $blocks['nodemaker_nice_menus_main'] = array(
      'info' => t('NodeMaker: Dropdown Navigation'),
    );   
  }

  return $blocks;
}


/**
 * Implements hook_block_configure().
 */
function nm_core_block_configure($delta) {
  $form = array();

  if ($delta == 'nm_core_social_links') {
    $types = nm_core_social_links_types();
    $weight_delta = round(count($types) / 2);

    $form['nm_core_social_links'] = array(
      '#type' => 'markup',
      '#prefix' => '<div>',
      '#suffix' => '</div>',
      '#theme' =>  'nm_core_social_links_form',
      '#tree' => TRUE,
    );


    foreach ($types as $type => $label) {
      //figure out display order in form so empty ones are at the bottom
      if (variable_get('nm_core_social_links_' . $type . '_link') == '') {
        $order = 20;
      }
      else {
        $order = variable_get('nm_core_social_links_' . $type . '_weight', 0);
      }

      $form['nm_core_social_links']['nm_core_social_links_' . $type] = array(
        '#weight' => $order,
      );
      $form['nm_core_social_links']['nm_core_social_links_' . $type]['link'] = array(
        '#type' => 'textfield',
        '#title' => t($label),
        '#description' => t('Please enter a valid url for @label, including "http://"', array('@label' => $label)),
        '#default_value' => variable_get('nm_core_social_links_' . $type . '_link', 'http://themegeeks.com'),
      );
      $form['nm_core_social_links']['nm_core_social_links_' . $type]['weight'] = array(
        '#type' => 'weight',
        '#title' => t('Weight for @link link.', array('@link' => $label)),
        '#title_display' => 'invisible',
        '#delta' => $weight_delta,
        '#default_value' => variable_get('nm_core_social_links_' . $type . '_weight', 0),
      );
    }
  }

  if ($delta == 'nodemaker_nice_menus_main') {
    $form['nice_menus_name_' . $delta] = array(
      '#type' => 'textfield',
      '#title' => t('Menu Name'),
      '#default_value' => variable_get('nice_menus_name_' . $delta, 'NodeMaker: Dropdown Navigation'),
    );
    $form['nice_menus_menu_' . $delta] = array(
      '#type' => 'select',
      '#title' => t('Menu Parent'),
      '#description' => t('The menu parent from which to show a Nice menu.'),
      '#default_value' => variable_get('nice_menus_menu_' . $delta, 'main-menu'),
      '#options' => menu_get_menus(),
    );
    $form['nice_menus_depth_' . $delta] = array(
      '#type' => 'select',
      '#title' => t('Menu Depth'),
      '#description' => t('The depth of the menu, i.e. the number of child levels starting with the parent selected above. Use 0 to display no children.'),
      '#default_value' => variable_get('nice_menus_depth_' . $delta, 2),
      '#options' => drupal_map_assoc(range(0, 3)),
    );
    $form['nice_menus_type_' . $delta] = array(
      '#type' => 'select',
      '#title' => t('Menu Style'),
      '#description' => t('down: menu items are listed side by side and expand down'),
      '#default_value' => variable_get('nice_menus_type_' . $delta, 'down'),
      '#options' => drupal_map_assoc(array('down')),
    );
  }

  return $form;

}


/**
 * Implements hook_block_save().
 */
function nm_core_block_save($delta = '', $edit = array()) {
  if ($delta == 'nm_core_social_links') {
    foreach ($edit['nm_core_social_links'] as $k => $v) {
      if (substr($k, 0, 21) == 'nm_core_social_links_') {
        variable_set($k . '_link', $edit['nm_core_social_links'][$k]['link']);
        variable_set($k . '_weight', $edit['nm_core_social_links'][$k]['weight']);
      }
    }
  }
  
  if ($delta == 'nodemaker_nice_menus_main') {
    variable_set('nice_menus_name_' . $delta, $edit['nice_menus_name_' . $delta]);
    variable_set('nice_menus_menu_' . $delta, $edit['nice_menus_menu_' . $delta]);
    variable_set('nice_menus_depth_' . $delta, $edit['nice_menus_depth_' . $delta]);
    variable_set('nice_menus_type_' . $delta, $edit['nice_menus_type_' . $delta]);
  }
}


/**
 * Implements hook_block_view().
 */
function nm_core_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'nm_core_social_links':

      $types = nm_core_social_links_types();

      $links = array();
      foreach ($types as $type => $label) {
        if (variable_get('nm_core_social_links_' . $type . '_link', '') != '') {
          $links[$type] = array(
            'link' => variable_get('nm_core_social_links_' . $type . '_link', ''),
            'label' => $label,
            'weight' => variable_get('nm_core_social_links_' . $type . '_weight', '0'),
          );
        }
      }

      $block['subject'] = t('Connect with us!');
      $block['content'] = array(
        '#theme' => 'nm_core_social_links',
        '#links' => $links,
      );
      break;

    case 'nodemaker_nice_menus_main':
      // Build the Nice menu for the block.
      list($menu_name) = explode(':', variable_get('nice_menus_menu_' . $delta, 'main-menu'));
      $direction = variable_get('nice_menus_type_' . $delta, 'down');
      $depth = variable_get('nice_menus_depth_' . $delta, '2');
      if ($output = theme('nice_menus', array('id' => $delta, 'menu_name' => $menu_name, 'direction' => $direction, 'depth' => $depth))) {
        $block['content'] = $output['content'];
        if (variable_get('nice_menus_type_' . $delta, 'down') == 'down') {
          $class = 'nice-menu-hide-title';
        }
        else {
          $class = 'nice-menu-show-title';
        }
        // If we're building the navigation block
        // use the same block title logic as menu module.
        global $user;
        if ($output['subject'] == t('navigation') && $user->uid) {
          $subject = $user->name;
        }
        else {
          $subject = $output['subject'];
        }
        $block['subject'] = '<span class="' . $class . '">' . check_plain($subject) . '</span>';
      }
      else {
        $block['content'] = FALSE;
      }
      break;
  }
  return $block;
}

/**
 *  Helper function for social links
 */
function nm_core_social_links_types() {
  $types = array(
    'delicious' => 'Delicious',
    'deviantart' => 'Deviant Art',
    'digg' => 'Digg',
    'facebook' => 'Facebook',
    'flickr' => 'Flickr',
    'googleplus' => 'Google+',
    'instagram' => 'Instagram',
    'linkedin' => 'Linkedin',
    'pinterest' => 'Pinterest',
    'posterous' => 'Posterous',
    'reddit' => 'Reddit',
    'rss' => 'RSS',
    'stumbleupon' => 'StumbleUpon',
    'tumblr' => 'Tumblr',
    'twitter' => 'Twitter',
    'vimeo' => 'Vimeo',
    'youtube' => 'YouTube',
  );
  return $types;
}




/**
 * Implements hook_form_FORM_ID_alter().
 */
function nm_core_form_node_type_form_alter(&$form, &$form_state, $form_id) {

  //'node_type_form_submit' adds the body field to every content type.
  //remove default submit handler and our own
  foreach($form['#submit'] as $k => $handler) {
    if ($handler == 'node_type_form_submit') {
      unset($form['#submit'][$k]);
      $form['#submit'][$k] = 'nm_core_node_type_form_submit';
    }
  }
}


/**
 * Custom submit handler.
 * @see node_type_form_submit().
 * NOTE:  since this feels like 'hacking' core, we need to pay attention
 * to if the original function ever gets updated and we need to update our version
 * This function is correct as of 7.15
 * NOTE: to make this easier, I just commented out the ONE line that we don't want
 */
function nm_core_node_type_form_submit($form, &$form_state) {

  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';

  $type = node_type_set_defaults();

  $type->type = trim($form_state['values']['type']);
  $type->name = trim($form_state['values']['name']);
  $type->orig_type = trim($form_state['values']['orig_type']);
  $type->old_type = isset($form_state['values']['old_type']) ? $form_state['values']['old_type'] : $type->type;

  $type->description = $form_state['values']['description'];
  $type->help = $form_state['values']['help'];
  $type->title_label = $form_state['values']['title_label'];
  // title_label is required in core; has_title will always be true, unless a
  // module alters the title field.
  $type->has_title = ($type->title_label != '');

  $type->base = !empty($form_state['values']['base']) ? $form_state['values']['base'] : 'node_content';
  $type->custom = $form_state['values']['custom'];
  $type->modified = TRUE;
  $type->locked = $form_state['values']['locked'];
  if (isset($form['#node_type']->module)) {
    $type->module = $form['#node_type']->module;
  }

  if ($op == t('Delete content type')) {
    $form_state['redirect'] = 'admin/structure/types/manage/' . str_replace('_', '-', $type->old_type) . '/delete';
    return;
  }

  $variables = $form_state['values'];

  // Remove everything that's been saved already - whatever's left is assumed
  // to be a persistent variable.
  foreach ($variables as $key => $value) {
    if (isset($type->$key)) {
      unset($variables[$key]);
    }
  }

  unset($variables['form_token'], $variables['op'], $variables['submit'], $variables['delete'], $variables['reset'], $variables['form_id'], $variables['form_build_id']);

  // Save or reset persistent variable values.
  foreach ($variables as $key => $value) {
    $variable_new = $key . '_' . $type->type;
    $variable_old = $key . '_' . $type->old_type;

    if (is_array($value)) {
      $value = array_keys(array_filter($value));
    }
    variable_set($variable_new, $value);

    if ($variable_new != $variable_old) {
      variable_del($variable_old);
    }
  }

  // Saving the content type after saving the variables allows modules to act
  // on those variables via hook_node_type_insert().
  $status = node_type_save($type);

  node_types_rebuild();
  menu_rebuild();
  $t_args = array('%name' => $type->name);

  if ($status == SAVED_UPDATED) {
    drupal_set_message(t('The content type %name has been updated.', $t_args));
  }
  elseif ($status == SAVED_NEW) {
    /*node_add_body_field($type);*/
    drupal_set_message(t('The content type %name has been added.', $t_args));
    watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l(t('view'), 'admin/structure/types'));
  }

  $form_state['redirect'] = 'admin/structure/types';
  return;

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nm_core_form_pathauto_patterns_form_alter(&$form, &$form_state, $form_id) {
  //hide the default one b/c we are not using it for anything - only the sub ones
  $form['nm_core']['pathauto_nm_core_pattern']['#access'] = FALSE;
}


 /**
  * Implements hook_modules_enabled().
  */
function nm_core_modules_enabled($modules) {
  if (in_array('webform', $modules)) {
    if (function_exists('nm_core_remove_webform_body')) {
       nm_core_remove_webform_body();
    }
  }
}


/**
 * Remove body from webform since we have our own.
 */
function nm_core_remove_webform_body() {
  $entity_type = 'node';
  $field_name = 'body';
  $bundle_name = 'webform';
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);
  if ($instance) {
    field_purge_instance($instance);
  }
}


/**
 * Implements hook_pathauto().
 */
function nm_core_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'nm_core';
      $settings['token_type'] = 'user';
      $settings['groupheader'] = t('More User paths');
      $settings['patterndescr'] = '';  //this gets hidden in form_alter
      $settings['patterndefault'] = '';  //this gets hidden in form_alter
      $settings['patternitems']['edit'] = t('Pattern for user edit page paths');
      if (module_exists('contact')) {
        $settings['patternitems']['contact'] = t('Pattern for user contact page paths');
      }
      if (module_exists('nm_blog')) {
        $settings['patternitems']['blog'] = t('Pattern for user blog page paths');
      }
      if (module_exists('nm_activity')) {
        $settings['patternitems']['activity'] = t('Pattern for user activty page paths');
      }
      if (module_exists('nm_members')) {
        $settings['patternitems']['profile'] = t('Pattern for user editing member profile page paths');
      }
      $settings['bulkname'] = t('Bulk update user paths');
      $settings['bulkdescr'] = t('Generate aliases for all existing users which do not already have aliases.');
      $settings['batch_update_callback'] = 'nm_core_pathauto_bulk_update_batch_process';
      $settings['batch_file'] = drupal_get_path('module', 'nm_core') . '/nm_core.pathauto.inc';
      return (object) $settings;
    default:
      break;
  }
}


/**
 * Implements hook_user_insert().
 */
function nm_core_user_insert(&$edit, $account, $category) {
  //generate aliases for the user
  nm_core_update_alias($account, 'insert');
}


/**
 * Implements hook_user_update().
 */
function nm_core_user_update(&$edit, $account, $category) {
  //update aliases for the user
  nm_core_update_alias($account, 'update');
}


/**
 * Implements hook_user_cancel().
 */
function nm_core_user_cancel($edit, $account, $method) {
  //$methods =
  //'user_cancel_block' = 'Your account will be blocked and you will no longer be able to log in. All of your content will remain attributed to your user name.'
  //'user_cancel_block_unpublish' = 'Your account will be blocked and you will no longer be able to log in. All of your content will be hidden from everyone but administrators.'
  //'user_cancel_reassign' = 'Your account will be removed and all account information deleted. All of your content will be assigned to the anonymous user.'
  if ($method == 'user_cancel_reassign' || $method == 'user_cancel_block_unpublish') {
    pathauto_path_delete_all("user/{$account->uid}/edit");
    pathauto_path_delete_all("user/{$account->uid}/contact");
    pathauto_path_delete_all("user/{$account->uid}/blog");
    pathauto_path_delete_all("user/{$account->uid}/activity");
    pathauto_path_delete_all("user/{$account->uid}/edit/nm_member_profile");
  }
}


/**
 * Implements hook_user_delete().
 */
function nm_core_user_delete($account) {
  pathauto_path_delete_all("user/{$account->uid}/edit");
  pathauto_path_delete_all("user/{$account->uid}/contact");
  pathauto_path_delete_all("user/{$account->uid}/blog");
  pathauto_path_delete_all("user/{$account->uid}/activity");
  pathauto_path_delete_all("user/{$account->uid}/edit/nm_member_profile");
}

/**
 * Update the edit URL & contact aliases for an individual user account.
 *
 * @param $account
 *   A user account object.
 * @param $op
 *   Operation being performed on the blog ('insert', 'update' or
 *   'bulkupdate').
 * @param $options
 *   An optional array of additional options.
 */
function nm_core_update_alias(stdClass $account, $op, array $options = array()) {
  $options += array(
    'language' => LANGUAGE_NONE,
  );
  module_load_include('inc', 'pathauto');
  drupal_static_reset('user_access');

  //user edit pages
  if (pathauto_pattern_load_by_entity('nm_core', 'edit')) {
    pathauto_create_alias('nm_core', $op, "user/{$account->uid}/edit", array('user' => $account), 'edit', $options['language']);
  }

  //user contact pages
  if (pathauto_pattern_load_by_entity('nm_core', 'contact')) {
    pathauto_create_alias('nm_core', $op, "user/{$account->uid}/contact", array('user' => $account), 'contact', $options['language']);
  }

  //blog pages
  if (module_exists('nm_blog') && pathauto_pattern_load_by_entity('nm_core', 'blog')) {
    pathauto_create_alias('nm_core', $op, "user/{$account->uid}/blog", array('user' => $account), 'blog', $options['language']);
  }

  //activity pages
  if (module_exists('nm_activity') && pathauto_pattern_load_by_entity('nm_core', 'activity')) {
    pathauto_create_alias('nm_core', $op, "user/{$account->uid}/activity", array('user' => $account), 'activity', $options['language']);
  }

  //edit profile pages
  if (module_exists('nm_members') && pathauto_pattern_load_by_entity('nm_core', 'profile')) {
    pathauto_create_alias('nm_core', $op, "user/{$account->uid}/edit/nm_member_profile", array('user' => $account), 'profile', $options['language']);
  }

  return;
}


/**
 * Implements hook_menu_block_blocks().
 */
function nm_core_menu_block_blocks() {
  // The array key is the block delta used by menu block.
  return array(
    'nm_core-mobile-menu' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => 'NodeMaker: Mobile Menu',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 3,
      'expanded'    => 1,
      'sort'        => 0,
    ),
    'nm_core-footer-menu' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => 'NodeMaker: Footer Menu',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 2,
      'expanded'    => 1,
      'sort'        => 0,
    ),
    'nm_core-secondary-nav' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => 'Menu Block: Secondary Nav',
      'level'       => 2,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
  );
}

function nm_core_date_format_types() {
  // Define the core date format types.
  return array(
    'nodemaker_date_friendly' => t('Friendly'),
  );
}

function nm_core_date_formats() {
  return array(
    array(
      'type' => 'nodemaker_date_friendly',
      'format' => 'l, F jS',
      'locales' => array(),
    ),
  );
}



/**
 * Implements hook_metatag_config_default_alter().
 */
function nm_core_metatag_config_default_alter(&$configs) {
  $configs['node']->config['keywords']['value'] = '[node:field_nm_tags]';
  $configs['node']->config['description']['value'] = '[node:field-nm-body:summary]';
}


/**
 * Implements hook_tokens_alter().
 */
function nm_core_tokens_alter(array &$replacements, array $context) {
  if ($context['type'] == 'node' && !empty($context['data']) && !empty($context['data']['node'])) {
    $node = $context['data']['node'];
    //make sure there is data for the summary of nm-body field even if summary was not filled out
    //used with metatags description
    if (isset($node->field_nm_body[$node->language][0]['value']) && !is_null($node->field_nm_body[$node->language][0]['value'])) {
      if ($node->field_nm_body[$node->language][0]['summary'] !== '') {
        $replacements['[node:field-nm-body:summary]'] = check_plain(strip_tags($node->field_nm_body[$node->language][0]['summary']));
      }
      else {
        $replacements['[node:field-nm-body:summary]'] = drupal_substr(check_plain(strip_tags($node->field_nm_body[$node->language][0]['value'])), 0, 200) . '...';
      }
    }
  }
}


/**
 * Processes variables for nm-core-social-links-form.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $form
 *
 * @see nm-core-social-links-form.tpl.php
 */
function template_preprocess_nm_core_social_links_form(&$variables) {
  // Add each item in the form to the appropriate place
  foreach (element_children($variables['nm_core_social_links']) as $i) {
    //make sure only the ones we want
    if ($i != 'title' && $i != 'form_build_id' && $i != 'form_token' && $i != 'form_id') {
      $variables['nm_core_social_links'][$i]['link']['#attributes']['class'] = array('link-select');
      $variables['nm_core_social_links'][$i]['weight']['#attributes']['class'] = array('weight-select');
      $variables['link_listing'][$i] = new stdClass();
      $variables['link_listing'][$i]->item_modified = !empty($variables['nm_core_social_links'][$i]['#attributes']['class']) && in_array('link-modified', $variables['nm_core_social_links'][$i]['#attributes']['class']);
      $variables['link_listing'][$i]->link = drupal_render($variables['nm_core_social_links'][$i]['link']);
      $variables['link_listing'][$i]->weight_select = drupal_render($variables['nm_core_social_links'][$i]['weight']);
      $variables['link_listing'][$i]->printed = FALSE;
    }
  }
}


/**
 * Implements hook_node_delete().
 */
function nm_core_node_delete($node) {
  //check & see if vars are set with nid
  if (variable_get('site_404') == 'node/'.$node->nid) {
    variable_del('site_404');
  }
  if (variable_get('site_403') == 'node/'.$node->nid) {
    variable_del('site_403');
  }
}


/**
 * Implements hook_help().
 */
function nm_core_help($path, $arg) {
  switch ($path) {
    case 'admin/help#nm_core':
      $content = array(
        '#group' => 'info',
        '#theme' => 'item_list',
        '#attributes' => array(
          'class' => array('nodemaker-apps-details'),
        ),
        '#items' => nm_core_help_details(),
      );

      return render($content);
      break;
  }
}


/**
  * Content for hook_help().
  */
function nm_core_help_details() {
  $items = array();
  $items[] = '<strong>' . t('403 page.') . '</strong>  ' . t('This is what your visitors see if they try to view a page that they do not have persmission to see.  You can view & edit the content at ' . l('/403', '403', array('attributes' => array('title' => t('403')))) . '.');
  $items[] = '<strong>' . t('404 page.') . '</strong>  ' . t('This is what yout visitors see if they try to view a page that does not exist.  You can view & edit the content at ' . l('/404', '404', array('attributes' => array('title' => t('404')))) . '.  Also note that all of the navigation menus are present to help the user find thei way.');
  $items[] = '<strong>' . t('A \'Footer Utility\' menu.') . '</strong>  ' . t('You can configure the items in this menu at ' . l('/admin/structure/menu/manage/menu-footer-utility', 'admin/structure/menu/manage/menu-footer-utility', array('attributes' => array('title' => t('Configure links in \'Footer Utility\' menu')))) . '.');
  $items[] = '<strong>' . t('Contact Form sending to your site email address.') . '</strong>  ' . t('Linked from the \'Footer Utility\' menu.  You can configure the contact form at ' . l('/admin/structure/contact', 'admin/structure/contact', array('attributes' => array('title' => t('Configure your Contact Form')))) . '.');
  $items[] = '<strong>' . t('Privacy Policy page.') . '</strong>  ' . t('Linked from the \'Footer Utility\' menu.  You may view and edit the content at ' . l('/privacy-policy', 'privacy-policy', array('attributes' => array('title' => t('Privacy Policy')))) . '.');
  $items[] = '<strong>' . t('Terms of Use page.') . '</strong>  ' . t('Linked from the \'Footer Utility\' menu.  You may view and edit the content at ' . l('/terms-use', 'terms-use', array('attributes' => array('title' => t('Terms of Use')))) . '.');
  $items[] = '<strong>' . t('Page content type.') . '</strong>  ' . t('For creating basic pages, like your \'About\' page.');
  $sub1[] = '<strong>' . t('Body.') . '</strong>  ' . t('This is where you main content is written.');
  $sub1[] = '<strong>' . t('Tags.') . '</strong>  ' . t('Also known as free tagging, you can keywords to you pages.');
  $sub1[] = '<strong>' . t('Headline Image.') . '</strong>  ' . t('You can add an image to every piece.  It will be displayed on the full page as well as any teasers.');
  $sub1[] = '<strong>' . t('Related Content.') . '</strong>  ' . t('Allows you to manually decide that there are related piceces content.  A snippet will automatially display.');
  $items[] = '<strong>' . t('Default fields.') . '</strong>  ' . t('When you create a new content type, several fields will be added automatically.  Although you do have the option to remove them, they greatly enhance your content.') . theme('item_list', array('items' => $sub1));
  $items[] = '<strong>' . t('Pretty URLs for content.') . '</strong>  ' . t('For every piece of content created, a pretty URL is created using the content title.  Some other NodeMaker Apps expand on this to increase usability.  If you change the title, a new pretty URL is created to refelct that change.  But, don\'t worry, the previous URL still exists and will automatically forward to the new one.');
  $items[] = '<strong>' . t('Pretty URLs for members.') . '</strong>  ' . t('For every registered member account, a pretty URL is created using the username.  When editing a member account, this URL is used as well.  If a member changes their username, a new pretty URL is created to refelct that change.  But, don\'t worry, the previous URL still exists and will automatically forward to the new one.');
  $items[] = '<strong>' . t('Members can login with either their username or their email address.') . '</strong>  ' . t('Just a usability asset.');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('Issues?') . '</strong>  ' . t('Have a support question?  Find a bug?  !issue!', array('!issue' => '<a href="http://drupal.org/project/issues/nm_core" title="NodeMaker Core Issue Queue" target="_blank">Please use the issue queue</a>'));
  return $items;
}


function nodemaker_nm_core_getting_started_form() {
  $form = nodemaker_nm_core_getting_started_content();
  return system_settings_form($form);
}


/**
  * Content for nodemaker_getting_started_form().
  * Content for nodemaker_nm_core_getting_started_form().
  */
function nodemaker_nm_core_getting_started_content() {

  //variables used throughout form
  $destination = drupal_get_destination();
  $destination = $destination['destination'];
  
  //get the icon
  $icon = drupal_get_path('module', 'nm_core') . '/' . 'nm_core' . '-icon.png';
  if (file_exists($icon)) {
    $image = l(theme('image', array('path' => $icon, 'attributes' => array('class' => array('nodemaker-icon')))), 'admin/nodemaker/apps/'. 'nm_core', array('html' => TRUE, 'attributes' => array('class' => array('nodemaker-icon-link'), 'title' => 'NodeMaker Core Details')));
  }
  else {
    $image = '';
  }
  
  //group
  $form['tabs']['nm_core_getting_started'] = array(
    '#type' => 'fieldset',
    '#title' => t('NodeMaker Core'),
    '#description' => $image . t('<h4>NodeMaker Core Launch Checklist</h4><p>NodeMaker Core provides many default configurations, including several that were defined during installation. This launch checklist will help you understand some of the configurations that you should verify are correct for your needs prior to launching your new website.</p>'),
    '#attributes' => array(
      'class' => array('getting-started'),
    ),
    '#weight' => -10,
  );

  //do you like what you entered on in the install screen?
  $description = t('When you installed NodeMaker, we asked you what you wanted for your "Site Name" and "Site Email."  Please confirm that %site_name and  %site_mail are correct.  You can change these values at !url.', array('%site_name' => variable_get('site_name'), '%site_mail' => variable_get('site_mail'), '!url' => l('/admin/config/system/site-information', 'admin/config/system/site-information', array('query' => array('destination' => $destination), 'attributes' => array('title' => 'Configure Site Information')))));
  $form['tabs']['nm_core_getting_started']['nm_core_getting_started_site_info'] = array(
    '#type' => 'checkbox',
    '#title' => t('Site Information'),
    '#description' => $description,
    '#default_value' => variable_get('nm_core_getting_started_site_info', 0),
    '#title_display' => 'after',
    '#theme' => 'toggleswitch',
  );

  //check user/1
  $description = t('When you installed NodeMaker, we prefilled account information for the "super user" and logged you in with those credentials.  If you clicked the checkbox to customize the account information, then you are all set.  Otherwise, please !user1 (user/1) and at the minimum change the password.  Save these credentials and don\'t share them with anyone!', array('!user1' => l('edit the "super user" account', 'user/1/edit', array('query' => array('destination' => $destination), 'attributes' => array('title' => 'Edit the "super user" account')))));
  $form['tabs']['nm_core_getting_started']['nm_core_getting_started_user_1'] = array(
    '#type' => 'checkbox',
    '#title' => t('The Super User'),
    '#description' => $description,
    '#default_value' => variable_get('nm_core_getting_started_user_1', 0),
    '#title_display' => 'after',
    '#theme' => 'toggleswitch',
  );
  
  //check contact form settings
  $description = t('When you installed NodeMaker, we configured the contact form using the email you provided. If %site_mail is the email you would like contact form submissions to be sent to, then you are all set.  Otherwise, please !contact and set the appropriate email and/or categories for your contact form.', array('%site_mail' => variable_get('site_mail'), '!contact' => l('edit contact form settings', 'admin/structure/contact', array('query' => array('destination' => $destination), 'attributes' => array('title' => 'Edit contact form settings')))));
  $form['tabs']['nm_core_getting_started']['nm_core_getting_started_contact_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Contact Form Settings'),
    '#description' => $description,
    '#default_value' => variable_get('nm_core_getting_started_contact_form', 0),
    '#title_display' => 'after',
    '#theme' => 'toggleswitch',
  );

  if (variable_get('site_403', '') != '') {
    //edit content on 403 page
    $description = t('A "403 page" is what users see if they navigate to a page that they do not have permission to view.  NodeMaker has created one for you, but you should !403 to suit your needs.', array('!403' => l('verify and edit the content', variable_get('site_403') . '/edit', array('query' => array('destination' => $destination), 'attributes' => array('title' => 'Edit your 403 page.')))));
    $form['tabs']['nm_core_getting_started']['nm_core_getting_started_403'] = array(
      '#type' => 'checkbox',
      '#title' => t('403 - Access Denied Page'),
      '#description' => $description,
      '#default_value' => variable_get('nm_core_getting_started_403', 0),
      '#title_display' => 'after',
      '#theme' => 'toggleswitch',
    );
  }

  if (variable_get('site_404', '') != '') {
    //edit content on 404 page
    $description = t('A "404 page" is what users see if they navigate to a page that does not exist.  NodeMaker has created one for you, but you should !404 to suit your needs.', array('!404' => l('verify and edit the content', variable_get('site_404') . '/edit', array('query' => array('destination' => $destination), 'attributes' => array('title' => 'Edit your 404 page.')))));
    $form['tabs']['nm_core_getting_started']['nm_core_getting_started_404'] = array(
      '#type' => 'checkbox',
      '#title' => t('404 - Page Not Found'),
      '#description' => $description,
      '#default_value' => variable_get('nm_core_getting_started_404', 0),
      '#title_display' => 'after',
      '#theme' => 'toggleswitch',
    );
  }

  if (drupal_get_normal_path('privacy-policy') != 'privacy-policy') {
    //edit content on privacy policy page
    $description = t('NodeMaker has created a "Privacy Policy" page for you and linked it from the "Footer Utility Menu".  You should !privacy to suit your needs.', array('!privacy' => l('verify and edit the content', drupal_get_normal_path('privacy-policy') . '/edit', array('query' => array('destination' => $destination), 'attributes' => array('title' => 'Edit your Privacy Policy page.')))));
    $form['tabs']['nm_core_getting_started']['nm_core_getting_started_privacy'] = array(
      '#type' => 'checkbox',
      '#title' => t('Privacy Policy Page'),
      '#description' => $description,
      '#default_value' => variable_get('nm_core_getting_started_privacy', 0),
      '#title_display' => 'after',
      '#theme' => 'toggleswitch',
    );
  }

  if (drupal_get_normal_path('terms-use') != 'terms-use') {
    //edit content on terms of use page
    $description = t('NodeMaker has created a "Terms of Use" page for you and linked it from the "Footer Utility Menu".  You should !terms to suit your needs.', array('!terms' => l('verify and edit the content', drupal_get_normal_path('terms-use') . '/edit', array('query' => array('destination' => $destination), 'attributes' => array('title' => 'Edit your Terms of Use page.')))));
    $form['tabs']['nm_core_getting_started']['nm_core_getting_started_terms'] = array(
      '#type' => 'checkbox',
      '#title' => t('Terms of Use Page'),
      '#description' => $description,
      '#default_value' => variable_get('nm_core_getting_started_terms', 0),
      '#title_display' => 'after',
      '#theme' => 'toggleswitch',
    );
  }

  //who can register
  $description = t('There are three options for who can register new user accounts:  Administrators only, Visitors and Visitors, but administrator approval is required.  !link', array('!link' => l('Please confirm this setting.', 'admin/config/people/accounts',  array('query' => array('destination' => $destination), 'attributes' => array('title' => 'User registration settings.')) ) ));
  $form['tabs']['nm_core_getting_started']['nm_core_getting_started_registration'] = array(
    '#type' => 'checkbox',
    '#title' => t('User Registration'),
    '#description' => $description,
    '#default_value' => variable_get('nm_core_getting_started_registration', 0),
    '#title_display' => 'after',
    '#theme' => 'toggleswitch',
  );

  //Post comments 
  $description = t('During installation, we set the permission for who can post comments.  Although anyone can read comments, only loged in users have the abilty to post comments.  !link', array('!link' => l('Confirm this configuration is what you want.', 'admin/people/permissions', array('query' => array('destination' => $destination)) ) ));
  $form['tabs']['nm_core_getting_started']['nm_core_getting_started_comments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Commenting'),
    '#description' => $description,
    '#default_value' => variable_get('nm_core_getting_started_comments', 0),
    '#title_display' => 'after',
    '#theme' => 'toggleswitch',
  );

  //performance
  $description = t('One of the most important things you will need to do when taking your NodeMaker site from development mode to a live, public facing site is ensuring the performance settings are appropriately set to enable caching for anonymous users, and that CSS and JavaScript files are compressed. You should !performance to suit your needs.', array('!performance' => l('configure performance settings', 'admin/config/development/performance', array('query' => array('destination' => $destination), 'attributes' => array('title' => 'Configure performance settings.')))));
  $form['tabs']['nm_core_getting_started']['nm_core_getting_started_performance'] = array(
    '#type' => 'checkbox',
    '#title' => t('Performance & Caching'),
    '#description' => $description,
    '#default_value' => variable_get('nm_core_getting_started_performance', 0),
    '#title_display' => 'after',
    '#theme' => 'toggleswitch',
  );

  return $form;

}