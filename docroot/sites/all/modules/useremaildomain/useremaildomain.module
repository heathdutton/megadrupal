<?php
/**
 * @file
 * Specify what domains are allowed in a user'a email address.
 *
 */

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
  function useremaildomain_help($path, $arg) {
    switch ($path) {
      case "admin/help#useremaildomain":
        return '<p>' . t("Allows you to specify what domains are allowed in a user'a email address.") . '</p>';
        break;
    }
  }


/**
 * Implements hook_menu().
 *
 */
  function useremaildomain_menu() {
    $items = array();

    $items['admin/config/people/useremaildomain'] = array(
      'title' => 'Email Domains',
      'description' => 'Specify domains you want to allow in user email fields.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('useremaildomain_form'),
      'access arguments' => array('administer useremaildomain'),
      'file' => 'useremaildomain.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    );

    return $items;
  }


/**
 * Implements hook_permission().
 *
 */
  function useremaildomain_permission() {
    return array(
      'administer useremaildomain' => array(
        'title' => t('Administer user domains'),
        'description' => t('Define what domains may be included in user email addresses.'),
        'restrict access' => TRUE,
      ),
      'override useremaildomain' => array(
        'title' => t('Override user domains'),
        'description' => t('Override the limitation on domains when registering a user (role must be allowed to create users).'),
        'restrict access' => TRUE,
      ),
    );
  }


/**
 * Implements hook_form_alter().
 *
 */
  function useremaildomain_form_alter(&$form, &$form_state, $form_id) {
    // Apply ONLY to the user register form and user profile form.
    if ($form_id == 'user_register_form' || $form_id == 'user_profile_form') {
      // if the user is allowed to override the limitations, just display a message
      if (user_access('override useremaildomain')) {
        drupal_set_message(
          (t('Defined limitation for user email domain') .
          ': <em>' .
          filter_xss_admin(variable_get('useremaildomain_description')) .
          '</em><br>' . t('You are allowed to override this limitation.')),
          'warning'
          );
      }

      // else: the user is NOT allowed to override the form, apply the user email domain limitations.
      else {
        // if this is the user profile form and the email does not conform to limitations, it was set by the admin, prevent the user from changing it.
        if ($form_id == 'user_profile_form' && !useremaildomain_validate_current_user_email()) {
          $form['account']['mail']['#disabled'] = TRUE;
          $form['account']['mail']['#description'] = t('This email address was set by an administrator and may not be changed.');
        }
        // normal case: user is not allowed to override and does not have an invalid address set
        else {
          $mailfield = set_checker_useremaildomain();
          if (isset($form['account']) && is_array($form['account'])) {
            if (isset($form['account']['mail'])) {
              $form['account']['mail'] = array_merge($form['account']['mail'], $mailfield);
            }
          }
          elseif (isset($form['mail'])) {
            $form['mail'] = array_merge($form['mail'], $mailfield);
          }
        }
      } // !user_access('override useremaildomain')
    } // $form_id = user_profile_form
  } // function


/**
 * Populates field array for useremaildomain_form_alter(), including #ajax.
 *
 * Sets field to call useremaildomain_callback(), _mail_useremaildomain_validate().
 *
 * @return
 *   array $mailfield: Field array to replace the E-mail field in forms.
 */
  function set_checker_useremaildomain() {
    // Revise Email field from existing Registration form.
      $mailfield = array(
        '#description' => filter_xss_admin(variable_get('useremaildomain_description')),
        '#prefix' => '<div id="check_email_domain">',
        '#suffix' => '</div>',
      );

      $mailfield['#element_validate'][] = '_mail_useremaildomain_validate';

      return ($mailfield);
  }

/**
 * Checks if the user's current email address is valid.
 *
 * @return
 *   true if address is valid, false if not
 */
  function useremaildomain_validate_current_user_email() {
    global $user;

    module_load_include('inc', 'useremaildomain', 'useremaildomain.checker');
    $checker = new useremaildomain_checker($user->mail, $user->mail);

    return $checker->domain_approved;
  }

/**
 * Validation function for the mail field.
 * Calls the checker routine FOLLOWING submission.
 *
 * @param array $element
 *   Portion of the $form array for just the $mail field.
 * @param array &$form_state
 *   Reference to the form current values array.
 *
 * @return
 *   Sets status and error messages, sends to watchdog logs.
 */
  function _mail_useremaildomain_validate($element, $form_state) {
    module_load_include('inc', 'useremaildomain', 'useremaildomain.checker');
    $checker = new useremaildomain_checker($form_state['values']['mail'], $element['#title']);

    // Display all notices as Status messages.
    foreach ($checker->notice as $noticekey => $noticetext) {
      drupal_set_message(filter_xss($noticetext), 'status');
    }

    // Display all faults as Warning messages.
    foreach ($checker->fault as $faultkey => $faulttext) {
      drupal_set_message(filter_xss($faulttext), 'warning');
    }

    // Final Status Message, Error Messages, Watchdog
    if (empty($checker->domain)) {
      watchdog('useremaildomain', "Attempt to enter invalid email address, '@value', into user account.", array('@value' => $checker->value), WATCHDOG_NOTICE);
      form_set_error('mail', t("@title entry, '@value', is not a valid address.", array('@title' => $checker->title, '@value' => $checker->clean_value)));
    }
    elseif (!$checker->domain_approved) {
      drupal_set_message(t("@title address domain, '@domain', is not authorized.", array('@title' => $checker->title, '@domain' => $checker->domain)), 'warning');
      watchdog('useremaildomain', "Attempt to enter email address, '@value', with unapproved domain into user account.", array('@value' => $checker->value), WATCHDOG_NOTICE);
      form_set_error('mail', t("@title address domain, '@domain', cannot be registered.", array('@title' => $checker->title, '@domain' => $checker->domain)));
    }
  }


/**
 * Remove all whitespace characters in all parts of string.
 *
 * @param string $string
 *   Any string that might have whitespace.
 *
 * @return string $string
 *   String with no spaces, tabs, returns nor any other whitespace.
 */
  function _clear_whitespace_useremaildomain($string = "") {
    // Remove whitespace characters.
    $string = str_replace(' ', '', $string);
    $string = str_replace('\t', '', $string);
    $string = str_replace('\r', '', $string);
    $string = str_replace('\n', '', $string);
    $string = str_replace('\0', '', $string);
    $string = str_replace('\x0B', '', $string);

    return ($string);
  }
