<?php

/**
 * @file
 * Module provides an area handler that displays a form allowing the user
 * to specify the number of items to be displayed on one view page.
 */

/**
 * Implements hook_views_api().
 */
function views_pager_count_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_pager_count') . '/views',
  );
}

/**
 * Form callback.
 *
 * @see views_pager_count_view_form_submit()
 */
function views_pager_count_view_form($form, &$form_state, $pager_options, $view) {
  $form['#attached']['css'][] = drupal_get_path('module', 'views_pager_count') . '/views_pager_count.admin.css';

  // Get default view's Items per page value, either for current display,
  // or, if not defined there, from default display.
  $source_display = (!empty($view->display[$view->current_display]->display_options['pager']['options']['items_per_page'])) ? $view->current_display : 'default';
  $default_items_per_page = $view->display[$source_display]->display_options['pager']['options']['items_per_page'];

  $form['views_pager_count'] = array(
    '#type' => $pager_options['elements']['input_type'],
    '#title' => t($pager_options['labels']['input_label']),
    '#element_validate' => array('element_validate_integer_positive'),
  );
  if ($pager_options['elements']['input_type'] == 'select') {
    // Get select options from handler settings.
    $options = explode("\n", trim($pager_options['elements']['select_options']));
    // Also add view's default number of items per page.
    $options[] = $default_items_per_page;
    // Sort and convert them into options for the select field.
    $options = drupal_map_assoc($options);
    natsort($options);
    $form['views_pager_count']['#options'] = $options;
  }
  else {
    $form['views_pager_count']['#size'] = 5;
  }
  if (isset($_COOKIE['Drupal_visitor_views_pager_count'])) {
    $form['views_pager_count']['#default_value'] = $_COOKIE['Drupal_visitor_views_pager_count'];
  }
  else {
    $form['views_pager_count']['#default_value'] = $default_items_per_page;
  }

  // Submit button always needs to be added to the form for the submit process
  // to work properly. Let's just hide it when it shouldn't be displayed.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t($pager_options['labels']['submit_label']),
  );
  // When submit is hidden, form submission should be done on value change.
  if (!$pager_options['elements']['show_submit']) {
    $form['submit']['#attributes']['style'] = 'display:none';
    $form['#attributes']['name'] = 'edit-views-pager-count';
    $form['views_pager_count']['#attributes']['onchange'] = 'document.forms["edit-views-pager-count"].submit();';
  }

  if ($pager_options['elements']['show_reset']) {
    $form['reset'] = array(
      '#type' => 'submit',
      '#value' => t($pager_options['labels']['reset_label']),
    );
  }

  return $form;
}

/**
 * Form submit callback.
 *
 * @see views_pager_count_view_form()
 */
function views_pager_count_view_form_submit($form, &$form_state) {
  if ($form_state['triggering_element']['#id'] == 'edit-reset') {
    user_cookie_delete('views_pager_count');
  }
  else {
    user_cookie_save(array('views_pager_count' => $form_state['values']['views_pager_count']));
  }
}

/**
 * Implements hook_views_pre_build().
 */
function views_pager_count_views_pre_build(&$view) {
  if (
    isset($_COOKIE['Drupal_visitor_views_pager_count'])
    && is_numeric($_COOKIE['Drupal_visitor_views_pager_count'])
    && $_COOKIE['Drupal_visitor_views_pager_count'] > 0
  ) {
    $view->items_per_page = $_COOKIE['Drupal_visitor_views_pager_count'];
  }
}
