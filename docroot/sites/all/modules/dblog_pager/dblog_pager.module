<?php
/**
 * @file
 * Overrides dblog's event viewer to include paging functionality on events.
 */

/**
 * Implements hook_theme().
 */
function dblog_pager_theme() {
  return array(
    'dblog_pager' => array(
      'render element' => 'elements',
      'template' => 'templates/dblog-event',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function dblog_pager_menu_alter(&$items) {
  if (isset($items['admin/reports/event/%'])) {
    $items['admin/reports/event/%']['page callback'] = 'dblog_pager_dblog_event';
  }
}

/**
 * Implements hook_menu().
 */
function dblog_pager_menu() {
  $items = array();
  $items['admin/config/development/logging/default'] = array(
    'title' => 'Error Display',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/development/logging/dblog_pager'] = array(
    'title' => 'DBLog Pager',
    'description' => 'Configuration for DBLog Pager',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dblog_pager_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Function: get link to log record as found via the query args/filter.
 *
 * @param array $query_args
 *   Used to generate a where based on record.wid. It must have these indices:
 *     sort => ASC|DESC - the sort direction of the query.
 *     operator => string -- the operator (=/>/< etc.) to be used in the query
 *     value => int -- the value to compare to record.wid.
 * @param array $filter
 *   An array of Where conditions and associative array of values.
 * @param bool $id
 *   Controls what return value type is.
 *
 * @return array|int
 *   if bool $id  is TRUE, return the ID, otherwise return formatted link.
 */
function dblog_pager_get_link(array $query_args, array $filter = NULL, $id = FALSE) {
  $pos = 0;
  $query = db_select('watchdog', 'w');
  $query
    ->fields('w', array('wid'))
    ->orderBy('w.wid', $query_args['sort']);
  if (!empty($filter['where'])) {
    $pos = count($filter['args']);
    $query->where($filter['where'], $filter['args']);
  }
  $query->where("w.wid {$query_args['operator']} ?",
    array($pos => $query_args['value']));
  $records = $query
    ->range(0, 1)
    ->execute();
  if (!$records) {
    return FALSE;
  }
  foreach ($records as $record) {
    if ($record->wid === $id) {
      continue;
    }
    if ($id) {
      return $record->wid;
    }
    return l($query_args['title'],
      'admin/reports/event/' . $record->wid, array('html' => TRUE));
  }

}

/**
 * Page callback: Displays details about a specific database log message.
 *
 * @param int $id
 *   Unique ID of the database log message.
 *
 * @return array|string
 *   If the ID is located in the Database Logging table, a build array in the
 *   format expected by drupal_render(); otherwise, an empty string.
 *
 * @see dblog_menu()
 * @see dblog_event()
 */
function dblog_pager_dblog_event($id) {
  $output = array(
    '#theme' => 'dblog_pager',);
  $event_data = dblog_event($id);
  $filter = dblog_build_filter_query();

  if (variable_get('dblog_pager_fix_breadcrumbs', TRUE)) {
    $bc = drupal_get_breadcrumb();
    $bc[] = l(t('Event Log'), 'admin/reports/dblog');
    drupal_set_breadcrumb($bc);
  }

  // Original implementation returns a empty string when log record not found.
  if (!$event_data) {
    // If we aren't overriding that we'll return an empty string, else warn.
    if (!variable_get('dblog_pager_bad_id_override', TRUE)) {
      return '';
    }
    drupal_set_message(t('No event log record found for id: @id.',
     array('@id' => $id)), 'warning');
    if (variable_get('dblog_pager_bad_id_last', TRUE)) {
      $id = dblog_pager_get_link(array(
        'sort' => 'DESC',
        'operator' => '<',
        'value' => PHP_INT_MAX), $filter, TRUE);
      if (!$id) {
        drupal_set_message(t('There appears to be no log messages.'), 'error');
        return '';
      }
      drupal_set_message(t('Selected last log record to display.'), 'status');
      drupal_goto("admin/reports/event/$id");
    }
    else {
      $output['table'] = FALSE;
    }
  }
  else {
    $output['table'] = $event_data['dblog_table'];
  }
  $query_data = array(
    'next' => array(
      'sort' => 'ASC',
      'operator' => '>',
      'value' => $id,
      'title' => t('Next')),
    'prev' => array(
      'sort' => "DESC",
      'operator' => '<',
      'value' => $id,
      'title' => t('Previous')),
  );
  if (variable_get('dblog_pager_show_fl', 'TRUE')) {
    $query_data['first'] = array(
      'sort' => 'ASC',
      'operator' => '>',
      'value' => 0,
      'title' => t('First'));
    $query_data['last'] = array(
      'sort' => 'DESC',
      'operator' => '<',
      'value' => PHP_INT_MAX,
      'title' => t('Last'));
  }
  else {
    $output['first'] = FALSE;
    $output['last'] = FALSE;
  }

  foreach ($query_data as $name => $query_args) {
    $output[$name] = dblog_pager_get_link($query_args, $filter);
  }
  return $output;
}

/**
 * Implements hook_help().
 */
function dblog_pager_help($path, $arg) {
  switch ($path) {

    // Display readme or link to module page if can't display the readme on the
    // main Drupal admin help pages at /admin/help/dblog_pager.
    case 'admin/help#dblog_pager':
      $readme_path = drupal_get_path('module', 'dblog_pager') . '/README.md';
      if (file_exists($readme_path)) {
        if (module_exists('markdown')) {
          $filters = module_invoke('markdown', 'filter_info');
          $info = $filters['filter_markdown'];
          if (function_exists($info['process callback'])) {
            return $info['process callback'](
              file_get_contents($readme_path), NULL);
          }
          else {
            return '<pre>' . file_get_contents($readme_path) . '</pre>';
          }
        }
        else {
          return '<pre>' . file_get_contents($readme_path) . '</pre>';
        }
      }
      else {
        return "<p>" . t("Readme unavailable. Please see %l for help.", array(
          '%l' => "<a href='https://www.drupal.org/project/dblog_pager'>module
          page</a>")) . "</p>";
      }
  }
}


/**
 * Page callback: DBLog Pager settings.
 *
 * @see dblog_pager_menu()
 */
function dblog_pager_admin_form($form, &$form_state) {
  $form['dblog_pager_show_fl'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show First/Last links'),
    '#default_value' => variable_get('dblog_pager_show_fl', TRUE),
    '#description' => t(
      "On individual log events show or hide the First/Last links."),
  );
  $form['dblog_pager_fix_breadcrumbs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add DBLog to Breadcrumbs'),
    '#default_value' => variable_get('dblog_pager_fix_breadcrumbs', TRUE),
    '#description' => t(
      "On individual log events add the DBLog page to the breadcrumbs rather than just reports."),
  );
  $form['dblog_pager_bad_id'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bad ID Processing'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['dblog_pager_bad_id']['dblog_pager_bad_id_override'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override Bad ID Processing'),
    '#default_value' => variable_get('dblog_pager_bad_id_override', TRUE),
    '#description' => t(
      "Override processing of log ids that can't be found. Instead of a blank
      page display a warning."),
  );
  $form['dblog_pager_bad_id']['dblog_pager_bad_id_last'] = array(
    '#type' => 'checkbox',
    '#title' => t('Redirect To Last Log Record'),
    '#default_value' => variable_get('dblog_pager_bad_id_last', TRUE),
    '#description' => t(
      "If overriding bad ID processing, redirect to last valid log record."),
    '#states' => array(
      'visible' => array(
        ':input[name="dblog_pager_bad_id_override"]' =>
        array('checked' => TRUE),
      ),
    ),
  );
  return system_settings_form($form);
}
