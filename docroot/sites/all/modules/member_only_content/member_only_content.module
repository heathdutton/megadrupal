<?php
/**
 *  This module creates fields on nodes to allow them to be marked as 'member only content'
 *  It then changes the template suggestion if the node is marked as 'member only'
 *  and adds in any content specified for addition to the page
 */

 define('MEMBER_ONLY_CONTENT_FIELD_NAME', 'member_only_flag');

 /**
  *  Implements hook_menu().
  */
function member_only_content_menu(){
  $items = array();

  $items['admin/config/content/member_only'] = array(
    'title' => 'Member Only Content',
    'description' => 'Configure the member only content settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('member_only_content_admin'),
    'type' => MENU_NORMAL_ITEM
  );

  $items['admin/config/content/member_only/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure the member only content settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('member_only_content_admin'),
    'type' => MENU_DEFAULT_LOCAL_TASK
  );

  $items['admin/config/content/member_only/list'] = array(
    'title' => 'List of Member Only Content',
    'page callback' => 'member_only_content_list',
    'page arguments' => array(),
    'description' => 'A list of content marked as member-only',
    'access arguments' => array('administer site configuration'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK
  );

  return $items;
}

/**
 *  implements hook_permission().
 */
function member_only_content_permission(){
  return array(
    'view member only content' => array(
      'title' => t('View Member-Only Content'),
      'description' => t('Allow the user to view the full contents of nodes marked as Member-Only'),
    ),
  );
}

/**
 *  Creates an admin form to configure member only content.
 *  Allows you to add the member only field to content types.
 */
function member_only_content_admin(){
  $form = array();

  $form = array();
  $content_types = _member_only_content_fetch_content_types();
  $form['content_types'] = array(
    '#type' => 'fieldset',
    '#title' => 'Content Types'
  );
  $form['content_types']['info'] = array(
    '#markup' => '<div class="messages warning">' . t('Unchecking a content type and saving this form will result in deletion of the member only field from that content type and the loss of all the data stored there.  Please proceed with caution.') . '</div>'
  );

  //make values for the content types
  $default = array();
  foreach ($content_types as $key => $value) {
    if(member_only_content_has_field($key)){
      $default[] = $key;
    }
  }

  $form['content_types']['member_only_content_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content Types'),
    '#description' => t('Which content types to add the member only field to'),
    '#options' => $content_types,
    '#default_value' => $default,
  );

  $form['set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
  );

  $form['set']['member_only_view_mode'] = array(
    '#type' => 'textfield',
    '#title' => t('View Mode'),
    '#description' => t('Which view mode to use when viewing node for member-only content (Blank for no change to view mode)'),
    '#default_value' => variable_get('member_only_view_mode', 'member_only'),
  );

  $anon = array(
    '#type' => 'fieldset',
    '#title' => t('Anonymous Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $anon['member_only_content_anon_content_top'] = array(
    '#type' => 'textarea',
    '#title' => t('Content Above Login Form'),
    '#description' => t('The content that will appear above the form in the area explaining members only content, the form will only appear if its turned on'),
    '#default_value' => variable_get('member_only_content_anon_content_top', ''),
  );

  $anon['member_only_content_show_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Login Form'),
    '#description' => t('Show the user login form on the page'),
    '#default_value' => variable_get('member_only_content_show_form', TRUE),
  );

  $anon['member_only_content_anon_content_bottom'] = array(
    '#type' => 'textarea',
    '#title' => t('Content Below Login Form'),
    '#description' => t('The content that will appear below the form in the area explaining members only content, the form will only appear if its turned on'),
    '#default_value' => variable_get('member_only_content_anon_content_bottom', ''),
  );
  $form['set']['anon'] = $anon;

  $form['set']['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Logged In Non-Member Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['set']['auth']['member_only_content_auth_content'] = array(
    '#type' => 'textarea',
    '#title' => t('Content'),
    '#description' => t('The content to show if the user is logged in but not a member'),
    '#default_value' => variable_get('member_only_content_auth_content', ''),
  );

  $form['set']['auth']['member_only_content_auth_show_webform'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Webform'),
    '#description' => t('Show a specified webform below the content if the user is logged in, but not authorized to view the content'),
    '#default_value' => variable_get('member_only_content_auth_show_webform', FALSE),
  );
  if(!module_exists('webform')){
    $form['set']['auth']['member_only_content_auth_show_webform']['#disabled'] = TRUE;
  }

  //Get all webform nodes to list for the user to select
  $nodes = node_load_multiple(array(), array('type' => 'webform'));
  foreach($nodes as $node){
    $options[$node->nid] = $node->title;
  }

  $form['set']['auth']['member_only_content_auth_webform'] = array(
    '#type' => 'radios',
    '#title' => t('Webform'),
    '#description' => t('Select the webform to display if the user is logged in, but not authorized to see the content. Make sure the show webform checkbox is checked'),
    '#options' => $options,
    '#default_value' => variable_get('member_only_content_auth_webform', array()),
  );

  $form['set']['member_only_in_options'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show in Publishing Options tab'),
    '#description' => t('Show member-only checkbox in the Publishing Options area.'),
    '#default_value' => variable_get('member_only_in_options', TRUE),
  );

  $form['#submit'] = array('member_only_content_create_fields_submit');

  return system_settings_form($form);
}

/**
 *  Add a display mode for members only
 *  This will allow the user to easily hide what they don't want to show - and then export as feature.
 *  This could probably come with some sort of defaults to make things easier for peoples
 *
 *  Implements hook_entity_info_alter().
 */
function member_only_content_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['member_only'] = array(
    'label' => t('Member Only - NonMember'),
    'custom settings' => TRUE,
  );
}

/**
 *  Implements hook_menu_alter
 *  Override the callback for the node view page so we can switch the view mode as we please
 */
function member_only_content_menu_alter(&$items){
  $items['node/%node']['page callback'] = 'member_only_content_node_page_view';
}

/**
 *  Copy of node_page_view except with a different function call at the bottom. Literally copied and pasted
 *  There is no way to alter this stuff or change the view mode in any way without fully overriding this and node_show
 */
function member_only_content_node_page_view($node){
  // If there is a menu link to this node, the link becomes the last part
    // of the active trail, and the link name becomes the page title.
    // Thus, we must explicitly set the page title to be the node title.
    drupal_set_title($node->title);
    $uri = entity_uri('node', $node);
    // Set the node path as the canonical URL to prevent duplicate content.
    drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
    // Set the non-aliased path as a default shortlink.
    drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);
    return member_only_content_node_show($node);
}

/**
 *  Direct copy of node_show - see above comments
 */
function member_only_content_node_show($node, $message = FALSE) {
  if ($message) {
    drupal_set_title(t('Revision of %title from %date', array('%title' => $node->title, '%date' => format_date($node->revision_timestamp))), PASS_THROUGH);
  }

  //default
  $view_mode = 'full';
  //change the view mode here.
  if (member_only_no_access($node)) {
    $new_mode = variable_get('member_only_view_mode', 'member_only');
    if (!empty($new_mode)) {
      $view_mode = $new_mode;

      // Make sure context conditions based on node still execute.
      if (module_exists('context')) {
        $object = menu_get_object();
        if (isset($object->nid) && $object->nid === $node->nid) {
          context_node_condition($node, 'view');
        }
      }

    }
  }
  // For markup consistency with other pages, use node_view_multiple() rather than node_view().
  $nodes = node_view_multiple(array($node->nid => $node), $view_mode);

  // Update the history table, stating that this user viewed this node.
  node_tag_new($node);

  return $nodes;
}

/*
 * Returns TRUE if the user does not have member access to the node
 */
function member_only_no_access($node) {
  return (member_only_content_is_member_only($node) && !member_only_content_is_member($node));
}

/**
 *  I'm leaving this function commented out here for posterity. This doesn't work. I don't know why, but it seems the objects
 *  are already stored somewhere and carry through with the wrong view mode.
 *
 *  Alter the node and call node_view again with the right view mode, and make sure we don't recurse. And pray.
 *  This is ridiculously difficult - seems like it should be normal
 *  Implements hook_node_view_alter
 *
 *  function member_only_content_node_view_alter($node){
 *    $langcode = $node['#language'];
 *    $node = $node['#node'];
 *
 *    if(!isset($node->member_only_content_called) || !$node->member_only_content_called){
 *      $view_mode = 'member_only';
 *      //Call these functions again so we get the right outcome
 *      $nodes = array($node->nid => $node);
 *      field_attach_prepare_view('node', $nodes, $view_mode, $langcode);
 *      entity_prepare_view('node', $nodes, $langcode);
 *
 *      $node->member_only_content_called = TRUE;
 *      $node = node_view($node, 'member_only');
 *    }
 *  }
 */

/**
 *  Add and remove fields as necessary when the form is submitted
 */
function member_only_content_create_fields_submit($form, &$form_state){
  $types = $form_state['values']['member_only_content_content_types'];

  $checked = array_filter($types);
  $unchecked = array_keys(array_diff_key($types, $checked));
  $checked = array_keys($checked);

  foreach($checked as $type){
    if(!member_only_content_has_field($type)){
      member_only_content_add_field($type);
    }
  }

  foreach($unchecked as $type){
    if(member_only_content_has_field($type)){
      _member_only_content_remove_field($type, MEMBER_ONLY_CONTENT_FIELD_NAME);
    }
  }
  //remove our field settings from the form_state so they won't get shoved in teh variables table by system_settings_form submit handler
  unset($form_state['values']['member_only_content_content_types']);
}

/**
 *  Alter the node edit form to put our field in the 'published' tab
 */
function member_only_content_form_node_form_alter(&$form, &$form_state) {
  if (isset($form[MEMBER_ONLY_CONTENT_FIELD_NAME]) && variable_get('member_only_in_options', TRUE)) {
    $form['options'][MEMBER_ONLY_CONTENT_FIELD_NAME] = $form['member_only_flag'];
    unset($form[MEMBER_ONLY_CONTENT_FIELD_NAME]);
  }
}

/**
 *  Preprocess nodes with the field on them to show the members only content warning
 *  if the user isn't logged in / doesn't have the right permissions
 */
function member_only_content_preprocess_node(&$vars) {
  //TODO Check view mode and add in content if necessary
  if (member_only_no_access($vars['node'])) {
    //We don't need an extra title since the main usage is for node_view pages
    $vars['title'] = '';
    $vars['content'] += member_only_content_get_content();
  }
}

/**
 *  Add a field to a content type - calls our utility function, but ensures consistant naming and such.
 */
function member_only_content_add_field($content_type){
  $name = MEMBER_ONLY_CONTENT_FIELD_NAME;
  $title = t('Members Only Content');
  $desc = t('Controls whether a user must be a member in order to view this content.');

  _member_only_content_add_field($content_type, $name, $title, $desc);
}

/**
 *  Function to get the content for non-members for a node
 */
function member_only_content_get_content(){
  if (user_is_logged_in()) {
    $content = variable_get('member_only_content_auth_content', '');
    if(variable_get('member_only_content_auth_show_webform', null)){
      $node = node_load(variable_get('member_only_content_auth_webform', null));
    }
    $ret = array(
      '#prefix' => '<div class="member-only-content-description member-only-auth">',
      'content' => array(
        '#markup' => $content,
      ),
      'webform' => isset($node) ? node_view($node) : null,
    );
  }
  else {
    $top = variable_get('member_only_content_anon_content_top', '');
    $bottom = variable_get('member_only_content_anon_content_bottom', '');

    $form = variable_get('member_only_content_show_form', TRUE) ? drupal_get_form('user_login_block', array()) : '';

    if($form){
      $form += array(
        '#theme' => 'form',
      );
    }

    $ret = array(
      '#prefix' => '<div class="member-only-content-description member-only-anon">',
      'top' => array(
        '#type' => 'markup',
        '#markup' => $top,
      ),
      'form' => $form,
      'bottom' => array(
        '#type' => 'markup',
        '#markup' => $bottom,
      ),
      '#suffix' => '</div>',
    );
  }
  $ret['#weight'] = 10;
  drupal_alter('member_only_content_content', $ret);

  return array('member_only_description' => $ret);
}

/**
 *  implements hook_node_load, calls hook_context_condition
 */
function member_only_content_node_view($node, $view_mode = 'full'){
  //If the context module is installed & view mode is member only, fire the condition
  if (module_exists('context') && member_only_no_access($node)){
    member_only_content_context_condition($node);
  }
}

######### Context Hooks ##########

/**
 *  implements hook_context_registry
 */
function member_only_content_context_registry(){
  return array(
    'conditions' => array(
      'member_only_content_non_member' => array(
        'title' => t('Non-Member on member node'),
        'description' => t('Triggers when a non-member (anonymous or logged in) is viewing content that is changed based on their role via Member Only Content.'),
        'plugin' => 'member_only_content_context_condition',
      ),
    ),
  );
}

/**
 *  implements hook_context_plugins
 */
function member_only_content_context_plugins(){
  $plugins = array();
  $plugins['member_only_content_context_condition'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'member_only_content') . '/plugins',
      'file' => 'member_only_content.context.inc',
      'class' => 'member_only_content_context_condition',
      'parent' => 'context_condition_node',
    ),
  );

  return $plugins;
}

/**
 *  Implements hook_context_condition, executes the plugin
 */
function member_only_content_context_condition($node){
  if($plugin = context_get_plugin('condition', 'member_only_content_non_member')){
    $plugin->execute($node);
  }
}

################# Utility functions for manipulating content types and fields  #################

/**
 *  Get a list of content types in a format that can be used as options for forms api
 */
function _member_only_content_fetch_content_types(){
  $nodes = entity_get_info('node');

  return _member_only_content_make_options_array($nodes['bundles']);
}

/**
 *  Quick utility function to make an options array out of the bundles array
 */
function _member_only_content_make_options_array($values){
  $options = array();
  foreach($values as $key=>$bundle){
    $options[$key] = $bundle['label'];
  }
  return $options;
}

/**
 *  Adds spaces to camel cased words
 */
function _member_only_content_make_readable($camel_case) {
  return preg_replace('/(.*?[a-z]{1})([A-Z]{1}.*?)/', '${1} ${2}', $camel_case);
}

/**
 *  Add a field to a content_type
 *  @param content_type should be the string machine name of a content type
 *  @param field_name should be the string name of the field
 *  @param taxonomy_name should be the machine name of the taxonomy you want to add a linked field to
 *  Some settings cannot be specified through this function - this is really just a utility wrapper for the fields api
 */
function _member_only_content_add_field($content_type, $field_name, $title='', $description=''){
  node_types_rebuild();

  //We'll be using the boolean field out of the list module
  $field_def = list_field_info();
  //get the boolean version
  $field_def = $field_def['list_boolean'];

  //we want to use the options_buttons widget
  $widget = 'options_onoff';

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  $field['field_name'] = strtolower(str_ireplace(' ', '_', $field_name));

  $field['settings']['allowed_values'] = array(0=>'Not Member Only', 1=>'Member Only');

  $field['type'] = 'list_boolean';

  //handle any fieldexceptions that occur by just setting and error message and returning
  try{
    //only try to create the field if it doesn't exist, otherwise just create an instance
    if(!field_read_field($field['field_name'], array('include_inactive' => TRUE))){
      field_create_field($field);
    }
  } catch (FieldException $f){
    drupal_set_message($f->getMessage(), 'error');
    return;
  }

  $instance = $field;

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  $instance['field_name'] = $field['field_name'];
  $instance['title'] = $title ? $title : $field['field_name'];
  $instance['label'] = $title ? $title : $field['field_name'];;
  $instance['description'] = $description;

  $instance['widget'] = array(
    'type' => $widget,
    'settings' => array(
      'display_label' => TRUE,
    ),
    'module' => 'options'
  );
  $instance['entity_type'] = 'node';
  $instance['bundle'] = $content_type;

  $instance['default_value'] = array(
    0 => array(
      'value' => variable_get('member_only_content_default_value', 0)
    )
  );

  $instance['settings'] = array(
    'member_only_flag' => TRUE
  );

  //handle any fieldexceptions that occur by just setting and error message and returning
  try{
    $existing = field_read_instance('node', $instance['field_name'], $content_type) ;
    if(!$existing){
      field_create_instance($instance);
      $url = $GLOBALS['base_url'].'/admin/structure/types/manage/'.$content_type.'/display/member_only';
      drupal_set_message( t('Member Only Content Flag Field created for @type.
        !beginClick here!end to change the member only display settings.',
        array(
          '!begin' => '<a href="'.$url.'">',
          '!end' => '</a>',
          '@type' => $content_type,
        )
      ));
    } else {
      //If the field already exists then we should just update it
      field_update_instance($instance);
      drupal_set_message( t('Member Only Content Flag Field updated for @type.', array('@type' => $content_type)) );
    }
  } catch (FieldException $f){
    drupal_set_message($f->getMessage(), 'error');
    return;
  }
}

/**
 *  Remove the member_only_content field from a content type (actually removes instances)
 *  @param content_type - the string name of the content type
 */
 function _member_only_content_remove_field($content_type, $field_name){
   $instance['field_name'] = strtolower(str_ireplace(' ', '_', $field_name));
   $existing = field_read_instance('node', $instance['field_name'], $content_type);
   if($existing && isset($existing['settings']['member_only_flag']) && $existing['settings']['member_only_flag']){
     $instance['bundle'] = $content_type;
     $instance['entity_type'] = 'node';

     field_delete_instance($instance);
     drupal_set_message( t('Member Only Content Flag Field deleted for @type.', array('@type' => $content_type)) );
   }
 }


 /**
  *  Check if the user is allowed to view members only content
  */
function member_only_content_is_member($node) {
  // Allow for custom access hooks for node-dependant access
  $data = array(
    'node' => $node,
    'allowed' => user_access('view member only content'),
    );
  drupal_alter('member_only_content_access', $data);
  return $data['allowed'];
}

/**
 *  Check if the content is member only
 */
function member_only_content_is_member_only($node){
  if($node){
    $lang = $node->language;
    if (isset($node->{MEMBER_ONLY_CONTENT_FIELD_NAME}[$lang][0]['value'])) {
      //Just to make sure we get a good boolean response
      return $node->{MEMBER_ONLY_CONTENT_FIELD_NAME}[$lang][0]['value'] == 1;
    }
    else {
      return FALSE;
    }
  }
}

/**
 *  Check if a content type has a member only field
 */
function member_only_content_has_field($content_type){
  $instance = field_read_instance('node', MEMBER_ONLY_CONTENT_FIELD_NAME, $content_type);
  //just gonna transform this into a boolean
  return $instance !== FALSE;
}

/**
 *  Get the content for the list page
 */
function member_only_content_list(){
  $default = array();
  $content_types = _member_only_content_fetch_content_types();
  foreach ($content_types as $key => $value) {
    if(member_only_content_has_field($key)){
      $default[] = $key;
    }
  }
  if($default){
    $render_array = array(
      '#markup' => views_embed_view('member_only_content', 'block_1')
    );
  } else {
    $render_array = array(
      '#markup' => '<div class="messages warning">' . t('No content-types have Member Only Content types enabled.') . '</div>',
    );
  }

  return $render_array;
}
