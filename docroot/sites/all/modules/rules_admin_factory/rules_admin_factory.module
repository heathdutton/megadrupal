<?php
/**
 * @file
 * Adds facility for creating plugins with custom options.
 */

/**
 * Checks whether a plugin supports factory form.
 *
 * @param $plugin_name
 *   Name of the plugin to check.
 * @return
 *   Whether the plugin supports factory form.
 */
function rules_admin_factory_supported($plugin_name) {
  $cache = rules_get_cache();
  return isset($cache['plugin_info'][$plugin_name]['faces_cache'][2]['RulesFactoryUIInterface']);
}

/**
 * Implements hook_form_FORM_ID_alter() for rules_ui_add_element.
 *
 * This function modifies the element similarly to rules_ui_add_element() by
 * nesting the element in the parent and adding the element form when ready.
 */
function rules_admin_factory_form_rules_ui_add_element_alter(&$form, &$form_state) {
  // Check 'rules_element' is not abstract. The 'rules_element' object will
  // always be available if non-abstract because rules_ui_add_element() adds it.
  if (isset($form_state['rules_element']) && !$form_state['rules_element'] instanceof RulesAbstractPlugin) {
    /** @var $rules_element RulesPlugin */
    $rules_element = $form_state['rules_element'];
    $plugin_name = $rules_element->plugin();
    // Make sure plugin supports factory.
    if (!rules_admin_factory_supported($plugin_name)) {
      return;
    }

    // Use element created by the original form function as factory.
    if (!isset($form_state['rules_factory'])) {
      $form_state['rules_factory'] = clone $rules_element;
    }
    // Delete the empty element.
    $rules_element->delete();
    // Alter form for factory.
    rules_admin_factory_form_add_alter($form, $form_state, $plugin_name, 'submit');
    // Add element form.
    if (isset($form_state['rules_factory_created'])) {
      // Store created plugin into 'rules_element' for regular form handling.
      $form_state['rules_element'] = $form_state['rules_factory_created'];
      // Add form.
      $form_state['rules_element']->form($form, $form_state, array('button' => TRUE, 'init' => TRUE));
    }
    else {
      // Remove form element for custom submit handler to recreate properly.
      unset($form_state['rules_element']);
      $form['submit']['#submit'][] = 'rules_admin_factory_form_rules_ui_add_element_submit';
    }
    // Tweak submit button label.
    $form['submit']['#value'] = !isset($form_state['rules_factory_created']) ? t('Continue') : t('Save');
  }
}

/**
 * Finalizes factory form submission to .
 */
function rules_admin_factory_form_rules_ui_add_element_submit(&$form, &$form_state) {
  // Process created plugin according to rules_ui_add_element().
  if (isset($form_state['rules_factory_created']) && !isset($form_state['rules_element'])) {
    /** @var $element RulesPlugin */
    $element = $form_state['rules_factory_created'];
    /** @var $parent RulesContainerPlugin */
    $parent = $form_state['build_info']['args'][2];
    // Add new element at the bottom.
    $iterator = $parent->getIterator();
    if ($sibling = end($iterator)) {
      $element->weight = $sibling->weight + 1;
    }
    $element->setParent($parent);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for rules_admin_add_component.
 */
function rules_admin_factory_form_rules_admin_add_component_alter(&$form, &$form_state) {
  if (isset($form['continue'])) {
    $form['continue']['#validate'][] = 'rules_admin_factory_form_rules_admin_add_component_validate';
  }

  // Track current plugin through form state or POST to persist across rebuilds.
  if (isset($form_state['rules_factory_plugin']) || isset($form_state['input']['rules_factory_plugin'])) {
    if (!isset($form_state['rules_factory_plugin'])) {
      $form_state['rules_factory_plugin'] = $form_state['input']['rules_factory_plugin'];
    }
    $form['rules_factory_plugin'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['rules_factory_plugin'],
    );
  }

  // Invalidate changed plugin.
  if (isset($form_state['rules_factory_plugin']) && isset($form_state['input']['plugin_name']) &&
      $form_state['rules_factory_plugin'] != $form_state['input']['plugin_name']) {
    unset($form_state['rules_factory_plugin']);
    if (isset($form_state['rules_factory'])) {
      unset($form_state['rules_factory']);
    }
    if (isset($form_state['rules_factory_created'])) {
      unset($form_state['rules_factory_created']);
    }
  }

  // Alter form for factory.
  if (isset($form_state['rules_factory_plugin'])) {
    rules_admin_factory_form_add_alter($form, $form_state, $form_state['rules_factory_plugin'], 'continue', array('component' => TRUE));
  }

  if (isset($form['continue'])) {
    $form['continue']['#submit'][] = 'rules_admin_factory_form_rules_admin_add_component_submit';
  }
}

/**
 * Validates the form for rules_admin_add_component.
 */
function rules_admin_factory_form_rules_admin_add_component_validate(&$form, &$form_state) {
  // Invalidate changed plugin.
  if (isset($form_state['rules_factory_plugin']) && $form_state['rules_factory_plugin'] != $form_state['values']['plugin_name']) {
    // Invalidate only where factory object exists (since 'rules_factory_plugin'
    // state may exist without object if refreshed).
    if (isset($form_state['rules_factory'])) {
      unset($form_state['rules_factory']);
    }
    if (isset($form_state['rules_factory_created'])) {
      unset($form_state['rules_factory_created']);
    }
  }
}

/**
 * Handles plugin selection form submission.
 */
function rules_admin_factory_form_rules_admin_add_component_submit(&$form, &$form_state) {
  $plugin_name = $form_state['values']['plugin_name'];
  // Check if selected plugin supports factory form.
  if (rules_admin_factory_supported($plugin_name)) {
    // Create factory or update to newly selected factory.
    if (!isset($form_state['rules_factory']) || isset($form_state['rules_factory_plugin']) && $form_state['rules_factory_plugin'] != $form_state['values']['plugin_name']) {
      $rules_config = $form_state['rules_config'];
      // Use plugin as factory.
      $form_state['rules_factory'] = $rules_config;
      // Store current plugin name for change reference.
      $form_state['rules_factory_plugin'] = $plugin_name;
      $form_state['rebuild'] = TRUE;
    }
    // Remove the existing blank configuration for the original form not to
    // begin the configuration form.
    if (isset($form_state['rules_config']) && !isset($form_state['rules_factory_created'])) {
      unset($form_state['rules_config']);
    }
    // Give the created plugin back to rules_admin_add_component().
    if (isset($form_state['rules_config']) && isset($form_state['rules_factory_created']) &&
        $form_state['rules_config'] !== $form_state['rules_factory_created']) {
      $form_state['rules_config'] = $form_state['rules_factory_created'];
      // Force the form to go back to the original form builder.
      $form_state['rebuild'] = TRUE;
    }
  }
}

/**
 * Adds the capability to Rules UI for a component to be created with additional
 * options.
 */
function rules_admin_factory_form_add_alter(&$form, &$form_state, $plugin_name, $submit_key, $base_options = array()) {
  // Process initial plugin selection form.
  if (isset($form[$submit_key])) {
    $form[$submit_key] += array('#validate' => array(), '#submit' => array());
    $form[$submit_key]['#weight'] = 10;
    $form[$submit_key]['#validate'][] = 'rules_admin_factory_form_add_validate';
    $form[$submit_key]['#submit'][] = 'rules_admin_factory_form_add_submit';
  }

  // Attach factory form.
  if (isset($form_state['rules_factory']) || !empty($form_state['input']['rules_config_is_factory'])) {
    // Add hidden field starting from the moment the given Rules configuration
    // is recognized to support factory. This is to account for form refresh.
    $form['rules_config_is_factory'] = array(
      '#type' => 'hidden',
      '#value' => TRUE,
    );

    // Check if factory object is missing (i.e. page has just been refreshed).
    if (!isset($form_state['rules_factory'])) {
      // Ensure factory object with default (empty) configuration.
      $form_state['rules_factory'] = rules_plugin_factory($plugin_name);
    }

    // Invoke factory.
    $options = array(
      'plugin_name' => $plugin_name,
      'init' => isset($form_state['rules_factory_created']) ? TRUE : NULL,
    ) + $base_options;
    $form_state['rules_factory_options'] = $options;
    $form_state['rules_factory']->__call('factoryForm', array(&$form, &$form_state, $options));
  }
}

/**
 * Validates the component factory form submission.
 */
function rules_admin_factory_form_add_validate(&$form, &$form_state) {
  // Validate factory form if plugin has not changed.
  if (isset($form_state['rules_factory']) && !isset($form_state['rules_factory_created'])) {
    // Invoke factory.
    $options = $form_state['rules_factory_options'];
    $form_state['rules_factory']->__call('factoryFormValidate', array(&$form, &$form_state, $options));
  }
}

/**
 * Processes the component factory form submission.
 *
 * Create an instance of a Rules plugin or the use the initial plugin type
 * selection to attach a factory form.
 */
function rules_admin_factory_form_add_submit(&$form, &$form_state) {
  // Process form submission for the factory.
  if (isset($form_state['rules_factory']) && !isset($form_state['rules_factory_created'])) {
    // Invoke factory.
    $options = $form_state['rules_factory_options'];
    $form_state['rules_factory']->__call('factoryFormSubmit', array(&$form, &$form_state, $options));

    // Rebuild the form for the successfully created configuration.
    $form_state['rebuild'] = TRUE;
  }
}
