<?php
/**
 * @file
 * Provides a unit test for the factory UI.
 */

/**
 * Tests documented usage of the factory UI.
 */
class RulesFactoryUITestCase extends DrupalWebTestCase {
  protected $privileged_user;

  /**
   * Returns tests.
   */
  public static function getInfo() {
    return array(
      'name' => 'Rules Factory UI tests',
      'description' => 'Test the extension of Rules plugins using factory UI.',
      'group' => 'Rules',
    );
  }

  /**
   * Sets up the basic test workflow.
   */
  public function setUp() {
    parent::setUp('rules_admin_factory', 'rules_admin_factory_test');
    // Perform tests as Rules administrator.
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer rules',
    ));
    $this->drupalLogin($this->privileged_user);
  }

  /**
   * Tests the creation of a component without factory form.
   */
  public function testOriginalCreateComponent() {
    $this->drupalGet('admin/config/workflow/rules/components/add');

    // Check the element configuration form is displayed correctly.
    $edit = array(
      'plugin_name' => 'rule',
    );
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertFieldByName('settings[name]', '', 'Original configuration form is correctly displayed.');
  }

  /**
   * Tests the creation of a component using a multi-step factory form.
   */
  public function testCreateComponent() {
    // Verify the factory form is not triggered initially.
    $this->drupalGet('admin/config/workflow/rules/components/add');
    $this->assertNoFieldByName('foo', 'foo', 'Factory form is not triggered prematurely.');

    // Check the factory form is displayed correctly.
    $edit = array(
      'plugin_name' => 'rules_admin_factory_test',
    );
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertFieldByName('foo', 'foo', 'Factory form is found.');

    // Verify form state.
    $this->assertText('[factory form foo: ]', 'Component has not been initialized prematurely.');
    $this->assertText('[factory form init: no]', 'Component form has been prevented from being initialized.');
    $this->assertText('[factory form validate: no]', 'Component form has not been validated prematurely.');

    // Create the component.
    $edit = array(
      'foo' => 'foo',
    );
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertText('[factory form foo: foo]', 'Component has been properly created.');
    $this->assertText('[factory form init: yes]', 'Component form is being initialized.');
    $this->assertText('[factory form validate: yes]', 'Component form is validated.');

    // Simulate refresh by posting to a rebuilt form.
    $this->drupalPost(NULL, array(), NULL, array(), array(), NULL, 'op=' . t('Continue'));
    // Verify that form refresh works.
    $this->assertText('[factory form init: yes]', 'Component form can be refreshed.');
  }

  /**
   * Tests refreshing when creating a component.
   */
  public function testSwitchComponent() {
    // Check a different plugin can be selected.
    $edit = array(
      'plugin_name' => 'rules_admin_factory_test',
    );
    $this->drupalPost('admin/config/workflow/rules/components/add', $edit, t('Continue'));

    // Check that a default one can be used.
    $edit = array(
      'plugin_name' => 'rules_admin_factory_test2',
    );
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertText('[factory form test2: yes]', 'Component can be switched.');

    // Check that the created plugin has the correct class.
    $edit = array(
      'plugin_name' => 'rules_admin_factory_test2',
      'foo' => 'foo2',
    );
    $this->drupalPost(NULL, $edit, t('Continue'));
    $this->assertText('[factory form foo: foo2]', 'Switched component form value has been changed.');
    $this->assertText('[factory form class: RulesFactoryUITestPlugin2]', 'Switched component can be properly created.');
  }

  /**
   * Tests the creation of an embedded element using a multi-step factory form.
   */
  public function testCreateElement() {
    rules_reaction_rule()->save('test');
    rules_clear_cache();

    // Verify the factory form is not triggered initially.
    $this->drupalGet('admin/config/workflow/rules/reaction/manage/test/add/1/rules_admin_factory_test_element');
    $this->assertText('[factory form foo: ]', 'Element has not been initialized prematurely.');
    $this->assertText('[factory form validate: no]', 'Element form has not been validated prematurely.');

    // Create element.
    $this->drupalPost(NULL, array(), t('Continue'));
    $this->assertText('[factory form foo: foo]', 'Element has been properly created.');
    $this->assertText('[factory form init: yes]', 'Element form is being initialized.');

    // Save element.
    $this->drupalPost(NULL, array(), t('Save'));
    $elements = array();
    // Check action elements.
    $rule = rules_config_load('test');
    foreach ($rule->elements() as $element) {
      if ($element instanceof RulesActionInterface) {
        $elements[] = $element;
      }
    }
    $this->assertEqual(1, count($elements), 'One element has been saved.');
    $this->assertEqual('RulesFactoryUITestElementPlugin', get_class($elements[0]), 'Element has the correct type.');
  }

  /**
   * Tests multi-step forms for components.
   */
  public function testComponentMultiStepForm() {
    // Request initial form.
    $edit = array(
      'plugin_name' => 'rules_admin_factory_test_multistep',
    );
    $this->drupalPost('admin/config/workflow/rules/components/add', $edit, t('Continue'));
    $this->assertText('[factory form step: ]', 'Initial form step is displayed.');

    // Proceed to step 1.
    $this->drupalPost(NULL, array(), t('Continue'));
    $this->assertText('[factory form step: 1]', 'Form step 1 is displayed.');
    $this->assertText('[factory form class: ]', 'Element is not created before end of multi-step form.');
    $this->assertNoFieldByName('settings[name]', 'Configuration form is not displayed.');

    // Proceed to create element.
    $this->drupalPost(NULL, array(), t('Continue'));
    $this->assertText('[factory form step: 2]', 'Form step 2 is displayed.');
    $this->assertText('[factory form class: RulesFactoryUITestMultiStepPlugin]', 'Element is correctly created at end of multi-step form.');
    $this->assertFieldByName('settings[name]', '', 'Configuration form is correctly displayed.');
  }

  /**
   * Tests multi-step forms for embedded elements.
   */
  public function testElementMultiStepForm() {
    rules_reaction_rule()->save('test');
    rules_clear_cache();

    // Request initial form.
    $this->drupalGet('admin/config/workflow/rules/reaction/manage/test/add/1/rules_admin_factory_test_element_multistep');
    $this->assertText('[factory form step: ]', 'Initial form step is displayed.');

    // Proceed to step 1.
    $this->drupalPost(NULL, array(), t('Continue'));
    $this->assertText('[factory form step: 1]', 'Form step 1 is displayed.');
    $this->assertText('[factory form class: ]', 'Embedded element is not created before end of multi-step form.');

    // Proceed to create element.
    $this->drupalPost(NULL, array(), t('Continue'));
    $this->assertText('[factory form step: 2]', 'Form step 2 is displayed.');
    $this->assertText('[factory form class: RulesFactoryUITestElementMultiStepPlugin]', 'Embedded element is correctly created at end of multi-step form.');

    // Save element.
    $this->drupalPost(NULL, array(), t('Save'));
    $elements = array();
    // Check action elements.
    $rule = rules_config_load('test');
    foreach ($rule->elements() as $element) {
      if ($element instanceof RulesActionInterface) {
        $elements[] = $element;
      }
    }
    $this->assertEqual(1, count($elements), 'Multi-step embedded element has been saved.');
    $this->assertEqual('RulesFactoryUITestElementMultiStepPlugin', get_class($elements[0]), 'Embedded element has the correct type.');
  }
}
