<?php

/*
 * @file
 * Adds a tab to the profile page that enables users to select which newsletters
 * they want to subscribe to.
 */

/**
 * Implements hook_perm().
 */
function campaignmonitor_user_permission() {
  return array(
    'access campaign monitor user' => array(
      'title' => t('Access Campaign Monitor on user page'),
      'description' => t('Allow user to subscribe to lists on the user page.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function campaignmonitor_user_menu() {
  $items = array();

  $items['user/%user/newsletters'] = array(
    'title' => 'My newsletters',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_user_form'),
    'access callback' => 'campaignmonitor_user_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}

/**
 * Access callback for the user newsletters page.
 */
function campaignmonitor_user_access($account) {
  global $user;
  if ($user->uid && $user->uid == $account->uid && user_access('access campaign monitor user')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Builds the selection list for the user profile page.
 *
 * @return array $form
 */
function campaignmonitor_user_form() {
  global $user;
  $form = array();

  // Get connected to the API and get lists.
  $cm = CampaignMonitor::getConnector();
  $lists = $cm->getLists();

  // Build options for the form selector.
  $options = array();
  $default = array();
  foreach ($lists as $list_id => $list) {
    // Check if the list is selected to be shown.
    $list_options = variable_get('campaignmonitor_list_' . $list_id, array());
    if (campaignmonitor_is_list_enabled($list_id) && isset($list_options['display']['user']) && $list_options['display']['user']) {
      $options[$list_id] = $list['name'];

      // Check if the user is subscribed to the current list.
      $default[$list_id] = 0;
      if ($cm->isSubscribed($list_id, $user->mail)) {
        $default[$list_id] = $list_id;
      }
    }
  }

  $defaults = variable_get('campaignmonitor_general', array());
  if (!empty($options)) {
    $form['lists'] = array(
      '#type' => 'checkboxes',
      '#title' => t('News lists'),
      '#description' => !empty($defaults['instructions']) ? t($defaults['instructions']) : t('Select the news lists that you want to subscribe to.'),
      '#options' => $options,
      '#default_value' => $default,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Update subscriptions'),
    );
  }
  else {
    drupal_set_message('There are no available lists to subscribe to at the moment.', 'warning');
  }

  $form['#submit'][] = 'campaignmonitor_user_form_submit';
  return $form;
}

/**
 * Submission form handler. The information about the selected list will be
 * submitted to Campaign Monitor.
 */
function campaignmonitor_user_form_submit($form, &$form_state) {
  global $user;

  // Get connected to the API and get lists.
  $cm = CampaignMonitor::getConnector();
  $lists_info = $cm->getLists();

  // Loop through the lists.
  foreach ($form_state['values']['lists'] as $list_id => $selected) {
    if ($selected) {
      // If not subscribed, subscribe, else do nothing. The subscribe state is
      // already in the cache, so it cheaper to check then re-subscribe.
      if (!$cm->isSubscribed($list_id, $user->mail)) {
        if (!$cm->subscribe($list_id, $user->mail, $user->name)) {
          form_set_error('', t('You were not subscribed to the list. Please try again later.'));
          $form_state['redirect'] = FALSE;
          return FALSE;
        }

        // Check if the user should be sent to a subscribe page.
        if (isset($lists_info[$list_id]['details']['ConfirmationSuccessPage']) && !empty($lists_info[$list_id]['details']['ConfirmationSuccessPage'])) {
          drupal_goto($lists_info[$list_id]['details']['ConfirmationSuccessPage']);
        }
        else {
          drupal_set_message(t('You are now subscribed to the "@list" list.', array('@list' => $lists_info[$list_id]['name'])), 'status');
        }
      }
    }
    else {
      // Maybe this is an unsubscribe.
      if ($cm->isSubscribed($list_id, $user->mail)) {
        if (!$cm->unsubscribe($list_id, $user->mail)) {
          form_set_error('', t('You were not unsubscribed from the list(s). Please try again later.'));
          $form_state['redirect'] = FALSE;
          return FALSE;
        }

        // Check if the user should be sent to an unsubscribe page.
        if (isset($lists_info[$list_id]['details']['UnsubscribePage']) && !empty($lists_info[$list_id]['details']['UnsubscribePage'])) {
          drupal_goto($lists_info[$list_id]['details']['UnsubscribePage']);
        }
        else {
          drupal_set_message(t('You are now removed from the "@list" list.', array('@list' => $lists_info[$list_id]['name'])), 'status');
        }
      }
    }
  }
}

function campaignmonitor_user_form_campaignmonitor_admin_settings_list_edit_alter(&$form, &$form_state, $form_id) {
  // Find form key to index the form array and load defaults.
  $form_key = 'campaignmonitor_list_' . $form['listId']['#value'];
  $defaults = variable_get($form_key, array());

  // Add option to enable this form on the user page.
  $form[$form_key]['display']['user'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display list on user page'),
    '#description' => t('Enable this list on the user page and allow subscription.'),
    '#default_value' => isset($defaults['display']['user']) ? $defaults['display']['user'] : 0,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds the option to synchronize subscriptions with user updates to the general
 * settings form.
 */
function campaignmonitor_form_campaignmonitor_admin_settings_general_alter(&$form, &$form_state, $form_id) {
  $defaults = variable_get('campaignmonitor_general', array());
  $form['campaignmonitor_general']['synchronize'] = array(
    '#type' => 'checkbox',
    '#title' => t('Synchronize e-mail address when updating user account.'),
    '#default_value' => isset($defaults['synchronize']) ? $defaults['synchronize'] : 0,
    '#description' => t('If checked, user e-mail adresses will be synchronized when users update their account.'),
  );
}

/**
 * Implements hook_user_update().
 *
 * Makes sure that user e-mail addresses are synchronized with Campaign Monitor
 * when user accounts are updated, if this option has been enabledin the
 * administration interface.
 */
function campaignmonitor_user_update(&$edit, $account, $category) {
  // In $edit['mail'] we have the entered e-mail address, and in
  // $account->original->mail the original one before editing the account. If
  // they are equal, we do nothing.
  if (isset($edit['mail']) && $edit['mail'] != $account->original->mail && $category == 'account') {
    // Get Campaign Monitor settings and check if the e-mail address should be
    // synchronized.
    $settings = variable_get('campaignmonitor_general', array());
    if (isset($settings['synchronize']) && $settings['synchronize']) {
      $cm = CampaignMonitor::getConnector();
      $lists_info = $cm->getLists();
      $lists_to_update = array();
      foreach ($lists_info as $list_id => $list) {
        // Check if the list is selected to be shown.
        $list_options = variable_get('campaignmonitor_list_' . $list_id, array());
        if (campaignmonitor_is_list_enabled($list_id) && isset($list_options['display']['user']) && $list_options['display']['user']) {
          // Check if the user is subscribed to the current list, but not yet
          // subscribed with the new e-mail.
          if ($cm->isSubscribed($list_id, $account->original->mail) && !$cm->isSubscribed($list_id, $edit['mail'])) {
            if ($cm->updateSubscriberEmail($list_id, $account->original->mail, $edit['mail'])) {
              drupal_set_message(t('Your e-mail adress has been updated for the "@list" list.', array('@list' => $list['name'])), 'status');
            }
            else {
              drupal_set_message(t('Your e-mail adress has not been updated for the "@list" list.', array('@list' => $list['name'])), 'error');
            }
          }
        }
      }
    }
  }
}
