<?php
/**
 * @file
 * Device Detector module hooks implementation.
 */

// Defining browser constants.
define("DEVICE_DETECTOR_CLASS_NAME_FORMAT_RULES", '#^[a-zA-Z,]+$#');
define("DEVICE_DETECTOR_CHROME_NAME", "Chrome");
define("DEVICE_DETECTOR_MSIE_NAME", "IE");
define("DEVICE_DETECTOR_FIREFOX_NAME", "Firefox");
define("DEVICE_DETECTOR_SAFARI_NAME", "Safari");
define("DEVICE_DETECTOR_OPERA_NAME", "Opera");

// Always include the common functions file.
require_once dirname(__FILE__) . '/includes/device_detector.common.inc';

/**
 * Implements hook_help().
 */
function device_detector_help($path, $arg) {
  switch ($path) {
    // Main module help for the Field Permissions module.
    case 'admin/help#device_detector':
      return '<p><strong>' . t('Device Detector') . '</strong> ' . t('is a simple, PHP-based browser and device(Desktop & Mobile)feature-detection module that can detect devices & browsers on its own without the need to pull from a central database of browser information and adds configuration classes to') . ' <strong>' . t('Html "body"') . '</strong> ' . t('tag.') . '<ul><li>' . t('This module provides an admin configuration section, where the user can provide different class names for different conditions(Browser & Device wise).') . ' </li><li>' . t('This class names are then added to the Html "body" tag, while the page gets rendered from the server end.') . '</li><li>' . t("The class names for browsers are rendered based on the the admin configurations, using a browser's(mainly) unique user-agent string as a key.") . '</li><li>' . t("Mobile Detect Class, included in in the module itself, is used to collect and record any useful information's(like OS or device name) the user-agent string may contain, for rendering classes for device(Desktop & Mobile).") . '</li></ul><br/><strong>' . t('Currently Device Detector provides browser support  for :') . '</strong> ' . t('Internet Explorer(IE6 and above), Google Chrome, Mozilla Firefox, Safari and Opera Mini') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function device_detector_menu() {
  $items = array();
  $items['admin/config/device-detector-settings'] = array(
    'title' => 'Device Detector Settings',
    'description' => 'Contains configuration url for device detector settings page',
    'position' => 'right',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/device-detector-settings/device-detector/browser'] = array(
    'title' => 'Browser Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/device-detector-settings/device-detector'] = array(
    'title' => 'Device Detector Settings',
    'description' => 'Device Detector Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('device_detector_browser_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/device_detector.admin.config.browser.inc',
    'weight' => 0,
  );
  $items['admin/config/device-detector-settings/device-detector/device'] = array(
    'title' => 'Device Settings',
    'description' => 'Manage Device Settings options for device-wise customization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('device_detector_device_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/device_detector.admin.config.device.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}

/**
 * Implements hook_preprocess_html().
 */
function device_detector_preprocess_html(&$vars) {
  // Variable declaration and initialisation.
  // Settings array.
  $settings_chck = array();
  // Browser details array.
  $browser_details = array();
  // Body class container.
  $body_classes = '';
  // The current url path.
  $current_path = NULL;
  // Used to get the url arguments breakup.
  $url_breakup = '';
  // Used to get the last arguments from the url arguments breakup.
  $last_arg = '';
  // Object var used to hold new DeviceDetectorMobileDetect object.
  $detect = NULL;
  // Creating settings array to check any settings is/are enabled or not.
  if (variable_get('device_detector_is_body_settings_chkd', FALSE)) {
    $settings_chck[] = 'body_settings_chkd';
  }
  if (variable_get('device_detector_is_brwsr_settings_chkd', FALSE)) {
    $settings_chck[] = 'brwsr_settings_chkd';
  }
  if (variable_get('device_detector_is_dsktp_settings_chkd', FALSE)) {
    $settings_chck[] = 'dsktp_settings_chkd';
  }
  if (variable_get('device_detector_is_dvc_settings_chkd', FALSE)) {
    $settings_chck[] = 'dvc_settings_chkd';
  }
  if (!empty($settings_chck) && is_array($settings_chck)) {
    foreach ($settings_chck as $settings_type) {
      switch ($settings_type) {
        case 'body_settings_chkd':
          // Check for the device_detector_body_common_class_name val.
          $device_detector_body_common_class_name = filter_xss(variable_get('device_detector_body_common_class_name'));
          if ($device_detector_body_common_class_name) {
            $body_classes .= ' ' . trim(str_replace(',', ' ', $device_detector_body_common_class_name));
          }
          // Check for the device_detector_url_as_body_class val.
          $device_detector_url_as_body_class = filter_xss(variable_get('device_detector_url_as_body_class'));
          if ($device_detector_url_as_body_class) {
            $current_path = drupal_get_path_alias(current_path());
            $url_breakup = explode('/', $current_path);
            $whole_url_args = trim(implode(' ', $url_breakup));
            $whole_url_args = check_plain($whole_url_args);
            $body_classes .= ' ' . ((!(drupal_is_front_page())) ? strtolower($whole_url_args) : 'home');
          }
          // Check for the device_detector_url_last_arg_as_body_class val.
          $device_detector_url_last_arg_as_body_class = filter_xss(variable_get('device_detector_url_last_arg_as_body_class'));
          if ($device_detector_url_last_arg_as_body_class) {
            $current_path = drupal_get_path_alias(current_path());
            $url_breakup = explode('/', $current_path);
            $last_arg = trim(array_pop($url_breakup));
            $last_arg = (is_numeric($last_arg)) ? ('node-' . $last_arg) : $last_arg;
            $last_arg = check_plain($last_arg);
            $body_classes .= ' ' . ((!(drupal_is_front_page())) ? strtolower($last_arg) : 'home');
          }
          // Check for the device_detector_node_spfc_class val.
          $device_detector_node_spfc_class = filter_xss(variable_get('device_detector_node_spfc_class'));
          if ($device_detector_node_spfc_class) {
            // Convert path to lowercase.
            // This allows comparison of the same path.
            $current_path = drupal_strtolower(drupal_get_path_alias(current_path()));
            $body_classes .= ' ' . device_detector_check_url_and_return_classes($current_path);
          }
          break;

        case 'brwsr_settings_chkd':
          // Getting the browser name and version details array.
          $browser_details = device_detector_get_browser_info();
          // Check for the device_detector_brwsr_as_class_name val.
          $device_detector_brwsr_as_class_name = filter_xss(variable_get('device_detector_brwsr_as_class_name'));
          if ($device_detector_brwsr_as_class_name) {
            $body_classes .= ' ' . trim(strtolower($browser_details['browser']));
          }
          // Check for the device_detector_brwsr_vrsion_as_class_name val.
          $device_detector_brwsr_vrsion_as_class_name = filter_xss(variable_get('device_detector_brwsr_vrsion_as_class_name'));
          if ($device_detector_brwsr_vrsion_as_class_name) {
            $body_classes .= ' ' . trim(strtolower($browser_details['browser'] . '_' . $browser_details['version']));
          }
          // Check for the device_detector_chrm_spfc_class val.
          if (filter_xss(variable_get('device_detector_chrm_spfc_class')) && (strtolower($browser_details['browser']) == strtolower(DEVICE_DETECTOR_CHROME_NAME))) {
            // Check for the device_detector_chrm_class_name val.
            $device_detector_chrm_class_name = filter_xss(variable_get('device_detector_chrm_class_name'));
            $body_classes .= ' ' . trim(str_replace(',', ' ', $device_detector_chrm_class_name));
          }
          elseif (filter_xss(variable_get('device_detector_firefx_spfc_class')) && (strtolower($browser_details['browser']) == strtolower(DEVICE_DETECTOR_FIREFOX_NAME))) {
            // Check for the device_detector_firefx_class_name val.
            $device_detector_firefx_class_name = filter_xss(variable_get('device_detector_firefx_class_name'));
            $body_classes .= ' ' . trim(str_replace(',', ' ', $device_detector_firefx_class_name));
          }
          elseif (filter_xss(variable_get('device_detector_ie_spfc_class')) && (strtolower($browser_details['browser']) == strtolower(DEVICE_DETECTOR_MSIE_NAME))) {
            // Check for the device_detector_firefx_class_name val.
            $device_detector_ie_class_name = filter_xss(variable_get('device_detector_ie_class_name'));
            $body_classes .= ' ' . trim(str_replace(',', ' ', $device_detector_ie_class_name));
          }
          elseif (filter_xss(variable_get('device_detector_safari_spfc_class')) && (strtolower($browser_details['browser']) == strtolower(DEVICE_DETECTOR_SAFARI_NAME))) {
            // Check for the device_detector_safari_class_name val.
            $device_detector_safari_class_name = filter_xss(variable_get('device_detector_safari_class_name'));
            $body_classes .= ' ' . trim(str_replace(',', ' ', $device_detector_safari_class_name));
          }
          elseif (filter_xss(variable_get('device_detector_opera_spfc_class')) && (strtolower($browser_details['browser']) == strtolower(DEVICE_DETECTOR_OPERA_NAME))) {
            // Check for the device_detector_opera_class_name val.
            $device_detector_opera_class_name = filter_xss(variable_get('device_detector_opera_class_name'));
            $body_classes .= ' ' . trim(str_replace(',', ' ', $device_detector_opera_class_name));
          }
          break;

        case 'dsktp_settings_chkd':
          $detect = new DeviceDetectorMobileDetect();
          // Check for the device_detector_dsktp_common_class_name val.
          $device_detector_dsktp_common_class_name = filter_xss(variable_get('device_detector_dsktp_common_class_name'));
          if (!$detect->ismobile() && $device_detector_dsktp_common_class_name) {
            $body_classes .= ' ' . trim(str_replace(',', ' ', $device_detector_dsktp_common_class_name));
          }
          break;

        case 'dvc_settings_chkd':
          $detect = new DeviceDetectorMobileDetect();
          if ($detect->ismobile()) {
            // Check for the device_detector_othr_dvc_common_class_name val.
            $device_detector_othr_dvc_common_class_name = filter_xss(variable_get('device_detector_othr_dvc_common_class_name'));
            if ($device_detector_othr_dvc_common_class_name) {
              $body_classes .= ' ' . trim(str_replace(',', ' ', $device_detector_othr_dvc_common_class_name));
            }
            // Check for the device_detector_othr_dvc_as_class_name val.
            $device_detector_othr_dvc_as_class_name = filter_xss(variable_get('device_detector_othr_dvc_as_class_name'));
            if ($device_detector_othr_dvc_as_class_name) {
              $body_classes .= ' ' . trim(strtolower($detect->getDeviceType()));
            }
            // Check for the device_detector_othr_dvc_os_as_class_name val.
            $device_detector_othr_dvc_os_as_class_name = filter_xss(variable_get('device_detector_othr_dvc_os_as_class_name'));
            if ($device_detector_othr_dvc_os_as_class_name) {
              $body_classes .= ' ' . trim(strtolower($detect->getOsName()));
            }
          }
          break;
      }
    }
    // To remove repeating classes.
    $body_classes = implode(' ', array_unique(explode(' ', $body_classes)));
    // Adding classes to html <body> tag.
    $vars['classes_array'][] = rtrim($body_classes);
  }
}
