<?php

/**
 * Impliments hook_commerce_checkout_pane_info().
 */
function commerce_cart_form_checkout_pane_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['cart_contents_form'] = array(
    'title' => t('Shopping cart contents (Form)'),
    'file' => 'includes/commerce_cart_form_checkout_pane.checkout_pane.inc',
    'base' => 'commerce_cart_form_checkout_pane',
    'page' => 'checkout',
    'fieldset' => FALSE,
    'locked' => FALSE,
  );

  return $checkout_panes;
}

/**
 * Checkout pane submit finction.
 */
function commerce_cart_form_checkout_pane_checkout_form_delete_submit($form, &$form_state) {
  $order = $form_state['order'];
  $line_item_id = $form_state['triggering_element']['#line_item_id'];
  $order = commerce_cart_order_product_line_item_delete($order, $line_item_id);

  $form_state['rebuild'] = TRUE;

  if (module_exists('commerce_checkout_ajax')) {
    commerce_checkout_ajax_submit($form, $form_state, $order, 'cart_contents_form');
  }
}

/**
 * Checkout pane submit finction.
 */
function commerce_cart_form_checkout_pane_checkout_form_update_submit($form, &$form_state) {
  $order = $form_state['order'];

  $deleted_line_items = array();
  $updated_line_items = array();

  foreach (element_children($form['cart_contents_form']['cart_contents_form_view']['edit_quantity']) as $row_id) {
    $line_item_id = $form['cart_contents_form']['cart_contents_form_view']['edit_quantity'][$row_id]['#line_item_id'];

    // If the line item hasn't been deleted...
    if ($line_item = commerce_line_item_load($line_item_id)) {
      $form_quantity = $form_state['values']['cart_contents_form']['cart_contents_form_view']['edit_quantity'][$row_id];

      // If the quantity on the form is different...
      if ($form_quantity != $line_item->quantity) {
        // If the quantity specified is 0 or less,
        // flag the line item for deletion.
        if ($form_quantity <= 0) {
          $deleted_line_items[] = $line_item_id;
        }
        else {
          // Otherwise queue the line item quantity update.
          $updated_line_items[$line_item_id] = $form_quantity;
        }
      }
    }
  }

  // Then process the quantity updates.
  foreach ($updated_line_items as $line_item_id => $quantity) {
    // Load the line item and update it.
    $line_item = commerce_line_item_load($line_item_id);
    $line_item->quantity = $quantity;
    commerce_line_item_save($line_item);
    entity_get_controller('commerce_line_item')->resetCache(array($line_item->line_item_id));
  }

  // Process the deletes first.
  foreach ($deleted_line_items as $line_item_id) {
    commerce_cart_order_product_line_item_delete($order, $line_item_id);
  }

  // Skip saving in the status update and manually save here to force a save
  // even when the status doesn't actually change.
  if (variable_get('commerce_order_auto_revision', TRUE)) {
    $order->revision = TRUE;
    $order->log = t('Customer updated the order via the shopping cart form.');
  }

  commerce_order_save($order);

  $form_state['rebuild'] = TRUE;

  if (module_exists('commerce_checkout_ajax')) {
    commerce_checkout_ajax_submit($form, $form_state, $order, 'cart_contents_form');
  }
}
