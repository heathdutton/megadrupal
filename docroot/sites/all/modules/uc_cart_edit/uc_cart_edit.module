<?php
/**
 * @file
 * Adds the possibility to return from cart to the
 * product form and change the selected options.
 */

/**
 * Implements hook_form_alter().
 */
function uc_cart_edit_form_alter(&$form, $form_state, $form_id) {
  // In the Ubercart 3.x version the uc_product_add_to_cart_form
  // are part of the uc_cart_view_form. Continuing here would lead
  // to errors, so we will just return. As I couldn't find a better
  // way to check if this form is loaded as part of the cart,
  // I will just check, if we are on the cart's page.
  if (arg(0) == 'cart') {
    return;
  }

  if (strpos($form_id, 'uc_product_add_to_cart_form') !== FALSE ||
      strpos($form_id, 'uc_product_kit_add_to_cart_form') !== FALSE) {

    $cart_item_ids = isset($_GET['ciids']) ? $_GET['ciids'] : NULL;
    if (is_array($cart_item_ids)) {
      // Cart ID is needed for access validation.
      $cart_id = uc_cart_get_id();

      $module = 'uc_product';
      $cart_items = array();
      foreach ($cart_item_ids as $cart_item_id) {
        // Load cart item from database.
        $item = entity_load_single('uc_cart_item', $cart_item_id);

        // Check if item is part of the active user's cart.
        if ($item->cart_id === $cart_id) {
          $cart_items[$item->nid] = $item;

          // If this is part of a product kit, but displayed individually
          // there will be a kit_id value in place. In this case we will
          // hardcode the module value to uc_product so uc_cart_edit can
          // process the attribute values correctly.
          if (isset($item->data['kit_id'])) {
            $module = 'uc_product';
          }
          else {
            $module = $item->module;
          }
        }
      }

      // If one cart item is not part of the current user's cart
      // we will return to the cart immediately & display an error message.
      if (!count($cart_items)) {
        drupal_set_message(t('Cart item not available, please try again.'), 'error');
        drupal_goto('cart');
      }
      elseif (strpos($form_id, $module . '_add_to_cart_form') !== FALSE) {
        // Change default form item values to cart item values.
        // But only if form has not been submitted yet.
        if (!isset($form_state['values'])) {
          if ($module == 'uc_product_kit') {
            foreach (element_children($form['products']) as $element) {
              $item = $cart_items[$form['products'][$element]['nid']['#value']];

              $form['products'][$element]['qty']['#default_value'] = $item->qty;
              foreach ((array) $item->data['attributes'] as $aid => $option) {
                $form['products'][$element]['attributes'][$aid]['#default_value'] = $option;
              }
            }
          }
          else {
            $item = $cart_items[$form['nid']['#value']];

            $form['qty']['#default_value'] = $item->qty;

            // We should avoid undefined index errors.
            if (isset($item->data['attributes'])) {
              foreach ((array) $item->data['attributes'] as $aid => $option) {
                $form['attributes'][$aid]['#default_value'] = $option;
              }
            }
          }
        }

        // Add the cart item id to the form, so we can grab it during submit.
        $form['cart_item_ids'] = array(
          '#type' => 'value',
          '#value' => $cart_item_ids,
        );

        // Add a cancelation link to the add to cart form.
        $form['actions']['cancel'] = array(
          '#markup' => l(t('Cancel'), 'cart'),
        );

        // Maybe we should update the submit button value
        // to something that says "update".
        $form['actions']['submit']['#value'] = t('Save changes');

        // Prepend a callback before all submit functions.
        // This deletes the existing cart item.
        // Before anything can be written to the database.
        array_unshift($form['#submit'], '_uc_cart_edit_delete_cart_item');

        // Change action in case some error's occure.
        $form['#action'] = url('node/' . $form['nid']['#value'], array(
          'query' => array(
            'ciids' => $cart_item_ids,
          ),
        ));
      }
    }
  }
}

/**
 * Implements hook_form_uc_cart_view_form_alter().
 *
 * Add an edit button for each product to the cart form.
 */
function uc_cart_edit_form_uc_cart_view_form_alter(&$form, &$form_state) {
  if (count($form['items'])) {
    // Add edit column to tapir table.
    $form['items']['#columns']['edit'] = array(
      'cell'   => t('Edit'),
      'weight' => 5,
    );

    // Add edit link to all products.
    foreach (element_children($form['items']) as $key) {
      // Products and product kits will have a cart_item_id-element.
      if (isset($form['items'][$key]['cart_item_id'])) {
        $edit_link = '';

        // We should only display edit links if attributes are there to edit.
        if (count($form['items'][$key]['#entity']->data['attributes'])) {
          // For a simple product we can simply add the cart item id
          // to the edit link. For a product kit, we will have to add
          // all cart item ids of the kits items.
          if ($form['items'][$key]['module']['#value'] == 'uc_product_kit') {
            $data = unserialize($form['items'][$key]['data']['#value']);

            $cart_item_ids = array();
            foreach ($data as $product_kit_item) {
              array_push($cart_item_ids, $product_kit_item->cart_item_id);
            }
          }
          else {
            $cart_item_ids = array($form['items'][$key]['cart_item_id']['#value']);
          }

          $nid = $form['items'][$key]['nid']['#value'];

          $edit_link = l(t('Edit'), 'node/' . $nid, array(
            'query' => array(
              'ciids' => $cart_item_ids,
            ),
          ));
        }

        $form['items'][$key]['edit'] = array(
          '#markup' => $edit_link,
        );
      }
    }
  }
}

/**
 * Remove cart item from database, if cart_item_id is available.
 */
function _uc_cart_edit_delete_cart_item($form, &$form_state) {
  // If a cart item id is available, this is an edited product form.
  if (isset($form_state['values']['cart_item_ids'])) {
    $cart_item_ids = $form_state['values']['cart_item_ids'];
    foreach ($cart_item_ids as $cart_item_id) {
      // Load cart item from database.
      $item = entity_load_single('uc_cart_item', $cart_item_id);

      // Delete cart item from database.
      // Now ubercart will create a new cart item.
      uc_cart_remove_item($item->nid, NULL, $item->data);
    }
  }
}
