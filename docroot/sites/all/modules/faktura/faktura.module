<?php
/**
 * @file
 * Code for the Faktura feature.
 */

include_once 'faktura.features.inc';

/*
 * Implementation of hook_menu().
 */
function faktura_menu() {
  $items['admin/faktura'] = array(
    'title' => 'Faktura',
    'description' => 'Administer Faktura settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );
  
  $items['admin/faktura/dunning'] = array(
    'title' => 'Dunning',
    'description' => 'Configure settings and business rules for dunning letters.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  
  $items['admin/faktura/taxes'] = array(
    'title' => 'Taxes',
    'description' => 'Manage tax rates and types.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  
  $items['admin/faktura/export'] = array(
    'title' => 'Export to PDF',
    'description' => 'Select the method for to export documents to PDF.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faktura_settings_export_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
    'file' => 'includes/faktura.admin.inc',
  );
  
  $items['node/%node/export/pdf'] = array(
    'title' => 'Export to PDF',
    'description' => 'Export invoice to PDF',
    'page callback' => '_faktura_export',
    'page arguments' => array(1, 'pdf'),
    'access arguments' => array(1),
    'access callback' => '_faktura_export_access',
    'type' => MENU_CALLBACK,
    'weight' => 50,
    'file' => 'includes/faktura.export.inc',
  );
  
  $items['node/%node/export/odt'] = array(
    'title' => 'Export to ODT',
    'description' => 'Export invoice to ODT',
    'page callback' => '_faktura_export',
    'page arguments' => array(1, 'odt'),
    'access arguments' => array(1),
    'access callback' => '_faktura_export_access',
    'type' => MENU_CALLBACK,
    'weight' => 50,
    'file' => 'includes/faktura.export.inc',
  );
    
  return $items;
}

/*
 * Implementation of hook_permission().
 */
function faktura_permission() {
  $permissions = array(
    'configure faktura' => array(
      'title' => t('Configure Faktura settings'),
      'description' => t('Allows users to update Faktura settings.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

function faktura_preprocess_page(&$variables) {  
  switch(current_path()) {
    case 'customers':
      $variables['action_links'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'href' => 'node/add/customer',
          'title' => t('Add customer')
        )
      );
      break;
    
    case 'invoices':
      $variables['action_links'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'href' => 'node/add/invoice',
          'title' => t('Add invoice')
        )
      );
      break;
    
    case 'dunning':
      $variables['action_links'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'href' => 'node/add/dunning',
          'title' => t('Add dunning letter')
        )
      );
      break;
    
    case 'time-reports':
      $variables['action_links'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'href' => 'node/add/time-report',
          'title' => t('Add time report')
        )
      );
      break;
    
    case 'projects':
      $variables['action_links'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'href' => 'node/add/project',
          'title' => t('Add project')
        )
      );
      break;
    
    case 'tasks':
      $variables['action_links'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'href' => 'node/add/task',
          'title' => t('Add task')
        )
      );
      break;
    
    case 'admin/faktura/dunning/levels':
      $variables['action_links'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'href' => 'node/add/dunning-level',
          'title' => t('Add dunning level')
        )
      );
      break;
    
    case 'admin/faktura/taxes/list':
      $variables['action_links'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'href' => 'node/add/tax',
          'title' => t('Add tax')
        )
      );
      break;
  }
}

function faktura_document_export($node, $format = 'pdf') {
  $wrapper = entity_metadata_wrapper('node', $node);
  require_once('sites/all/libraries/odtphp/library/odf.php');
  
  
  
  switch($node->type) {
    case 'invoice':
      $file = $wrapper->field_ref_company->field_invoice_template->value();
      $template = $file['uri'];
      break;
    
    case 'dunning':
      $file = $wrapper->field_ref_company->field_dunning_template->value();
      $template = $file['uri'];
      break;
  }
  $template = drupal_realpath($template);
  $odf = new odf($template);
  
  switch($node->type) {
    case 'invoice':
      $odf->setVars('created', utf8_decode(date('d.m.Y', $wrapper->created->value())));
      break;
    
    case 'dunning':      
      $odf->setVars('invoice_created', utf8_decode(date('d.m.Y', $wrapper->created->value())));
      $odf->setVars('field_dunning_level_title', utf8_decode($wrapper->field_dunning_level->title->value()));
      $odf->setVars('field_dunning_level_body', utf8_decode($wrapper->field_dunning_level->body->value()));
      $odf->setVars('field_payment_deadline', date('d.m.Y', $wrapper->field_payment_deadline->value()));
      break;
  }
  
  if(!isset($node->field_invoice_number['und'][0]['value'])) {
    $node->field_invoice_number['und'][0]['value'] = 'RECHNUNGSNUMMER!!!!';
  }
  $odf->setVars('field_invoice_number', utf8_decode($node->field_invoice_number['und'][0]['value']));
  
  
  $odf->setVars('field_company', utf8_decode($wrapper->field_customer->field_company->value()));
  $odf->setVars('field_street', utf8_decode($wrapper->field_customer->field_street->value()));
  $odf->setVars('field_zip', utf8_decode($wrapper->field_customer->field_zip->value()));
  $odf->setVars('field_city', utf8_decode($wrapper->field_customer->field_city->value()));
  
  $odf->setVars('field_invoice_total', utf8_decode(number_format($wrapper->field_invoice_total->value(), 2, ',', '.')));
     
  $invoiceitems = $odf->setSegment('invoiceitems');
  $i = 1;
  foreach($wrapper->field_invoice_item as $item) {
    $invoiceitems->field_invoice_item_position($i);
    $invoiceitems->field_invoice_item_desc(utf8_decode($item->field_invoice_item_desc->value()));
    $invoiceitems->field_invoice_item_qty(utf8_decode(number_format($item->field_invoice_item_qty->value(), 2, ',', '.')));
    $invoiceitems->field_invoice_item_unit('');
    $invoiceitems->field_invoice_item_unit_price(utf8_decode(number_format($item->field_invoice_item_unit_price->value(), 2, ',', '.')));
    $invoiceitems->field_invoice_item_total(utf8_decode(number_format($item->field_invoice_item_total->value(), 2, ',', '.')));
    $invoiceitems->merge();
    $i++;
  }
  $odf->mergeSegment($invoiceitems); 
  
  $invoicetaxes = $odf->setSegment('invoicetaxes');
  
  $taxes = array();
  foreach($node->field_invoice_tax[LANGUAGE_NONE] as $entity_id) {
    $entity = entity_load('field_collection_item', array($entity_id['value']));
    if(!empty($entity)) {
      $taxes = array_merge($taxes, $entity);
    }    
  }
  
  foreach($taxes as $key => $tax_line) {
    $tax_node = node_load($tax_line->field_tax[LANGUAGE_NONE][0]['target_id']);
    $invoicetaxes->field_tax_value(utf8_decode(number_format($tax_node->field_tax_value[LANGUAGE_NONE][0]['value'], 2, ',', '.')));
    $invoicetaxes->field_taxed_amount(utf8_decode(number_format($tax_line->field_taxed_amount[LANGUAGE_NONE][0]['value'], 2, ',', '.')));
    $invoicetaxes->field_tax_amount(utf8_decode(number_format($tax_line->field_tax_amount[LANGUAGE_NONE][0]['value'], 2, ',', '.')));
    $invoicetaxes->merge();    
  }
  $odf->mergeSegment($invoicetaxes); 
  
  switch($format) {
    case 'odt':
      $odf->exportAsAttachedPDF('R-' . $node->field_invoice_number['und'][0]['value'] . '-' . date('Y', $wrapper->created->value()));
      break;
    
    case 'pdf':
      $odf->exportAsAttachedFile();
      break;
  }
  exit;  
}

/*
 * Implementation of hook_form_alter
 */
function faktura_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'invoice_node_form') {
    drupal_add_js(drupal_get_path('module', 'faktura') .'/js/faktura.liveCalc.js', 'file');
  }
  
  if($form_id == 'company_node_form') {
    if(variable_get('faktura_pdf_method_pdftemplate', 1)) {
      $form['pdftemplate'] = array(
        '#type' => 'fieldset',
        '#title' => t('PDFTemplate.eu templates'),
        '#weight' => 10,
        '#tree' => TRUE,
      );
      
      $form['pdftemplate']['invoice'] = array(
        '#type' => 'fieldset',
        '#title' => t('Invoice template'),
        '#tree' => TRUE,
      );
      
      $form['pdftemplate']['invoice']['template'] = array(
        '#type' => 'textfield',
        '#title' => t('Template name'),
        '#description' => t('Enter the name of your invoice template from you have uploaded to www.pdftemplate.eu.'),
        '#default_value' => variable_get('pdftemplate_' . $form['nid']['#value'] . '_invoice_template', '')
      );
            
      $form['pdftemplate']['invoice']['key'] = array(
        '#type' => 'textfield',
        '#title' => t('Template key'),
        '#description' => t('Enter the key of your invoice template.'),
        '#default_value' => variable_get('pdftemplate_' . $form['nid']['#value'] . '_invoice_key', '')
      );
      
      $form['pdftemplate']['dunning'] = array(
        '#type' => 'fieldset',
        '#title' => t('Dunning template'),
        '#tree' => TRUE,
      );
      
      $form['pdftemplate']['dunning']['template'] = array(
        '#type' => 'textfield',
        '#title' => t('Template name'),
        '#description' => t('Enter the name of your invoice template from you have uploaded to www.pdftemplate.eu.'),
        '#default_value' => variable_get('pdftemplate_' . $form['nid']['#value'] . '_dunning_template', '')
      );
      
      $form['pdftemplate']['dunning']['key'] = array(
        '#type' => 'textfield',
        '#title' => t('Template key'),
        '#description' => t('Enter the key of your invoice template.'),
        '#default_value' => variable_get('pdftemplate_' . $form['nid']['#value'] . '_dunning_key', '')
      );
    }
  }
}

/*
 * Implementation of hook_node_submit()
 */
function faktura_node_submit($node, $form, &$form_state) {
  if($node->type == 'company' && variable_get('faktura_pdf_method_pdftemplate', 1)) {
    variable_set('pdftemplate_' . $node->nid . '_invoice_template', $node->pdftemplate['invoice']['template']);
    variable_set('pdftemplate_' . $node->nid . '_invoice_key', $node->pdftemplate['invoice']['key']);
    variable_set('pdftemplate_' . $node->nid . '_dunning_template', $node->pdftemplate['dunning']['template']);
    variable_set('pdftemplate_' . $node->nid . '_dunning_key', $node->pdftemplate['dunning']['key']);
  }
}


/*
 * Implementation of hook_rules_action_info()
 */
function faktura_rules_action_info()
{  
  $defaults = array(
   'parameter' => array(
      'node' => array(
        'type' => 'node',
        'label' => t('Invoice node'),
        'save' => TRUE,
      ),
    ),
    'group' => t('Faktura')
  );
    
  $actions['faktura_calculate_taxes'] = $defaults + array(
    'label' => t('Calculate total taxes from line items'),
    'base' => 'faktura_calculate_taxes',
  );
  
  return $actions;
}

function faktura_calculate_taxes($node) {
  $line_items = array();
  foreach($node->field_invoice_item[LANGUAGE_NONE] as $entity_id) {
    $entity = entity_load('field_collection_item', array($entity_id['value']));
    $line_items = array_merge($line_items, $entity);
  }
  
  $taxes = array();
  foreach($line_items as $key => $line_item) {
    if(isset($line_item->field_invoice_item_tax[LANGUAGE_NONE][0]['target_id'])) {
      $tax_entity = node_load($line_item->field_invoice_item_tax[LANGUAGE_NONE][0]['target_id']);
      if(isset($taxes[$tax_entity->nid])) {
        $taxes[$tax_entity->nid]['taxed_amount'] += $line_item->field_invoice_item_total[LANGUAGE_NONE][0]['value'];
      } else {
        $taxes[$tax_entity->nid]['value'] = $tax_entity->field_tax_value[LANGUAGE_NONE][0]['value'];
        $taxes[$tax_entity->nid]['taxed_amount'] = $line_item->field_invoice_item_total[LANGUAGE_NONE][0]['value'];
      }
    }
  }
  
  foreach($taxes as $tax_id => $value) {
    $taxes[$tax_id]['tax_amount'] = $value['taxed_amount'] * $value['value'] / 100;
    
    $values = array(
      'field_name' => 'field_invoice_tax',
      'field_tax' => array(
        LANGUAGE_NONE => array(array('target_id' => $tax_id)),
      ),
      'field_taxed_amount' => array(
        LANGUAGE_NONE => array(array('value' => $taxes[$tax_id]['taxed_amount'])),
      ),
      'field_tax_amount' => array(
        LANGUAGE_NONE => array(array('value' => $taxes[$tax_id]['tax_amount'])),
      ),
    );
    $entity = entity_create('field_collection_item', $values);
    $entity->setHostEntity('node', $node);
    $entity->save();
    
  }
}

function _faktura_export_access($node) {
  return TRUE;
}