<?php

/**
 * @file
 * Main module file.
 *
 * Instantiates TARDIS blocks, menu items, theme
 * and a couple of helper functions.
 */

/**
 * Implements hook_menu().
 */
function tardis_menu() {
  $items = array();

  // Main settings page.
  $items['admin/structure/tardis'] = array(
    'title' => 'TARDIS',
    'description' => 'Create TARDIS pages and blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tardis_overview'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/tardis.admin.inc',
  );

  // TARDIS block creation.
  $items['admin/structure/tardis/block/add'] = array(
    'title' => 'Create TARDIS block',
    'description' => 'Create a block with nodes displayed by year and month.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tardis_block_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tardis.admin.inc',
  );

  // TARDIS block settings.
  $items['admin/structure/tardis/block/edit'] = array(
    'title' => 'Edit TARDIS block',
    'description' => 'Customize settings for this TARDIS block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tardis_block_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tardis.admin.inc',
  );

  // TARDIS block erasure.
  $items['admin/structure/tardis/block/delete/%'] = array(
    'title' => 'Delete TARDIS block',
    'description' => 'Delete this TARDIS block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tardis_delete_confirm', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tardis.admin.inc',
  );

  // TARDIS page creation.
  $items['admin/structure/tardis/page/add'] = array(
    'title' => 'Create TARDIS page',
    'description' => 'Create a page with nodes displayed by year and month.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tardis_page_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tardis.admin.inc',
  );

  // TARDIS page settings.
  $items['admin/structure/tardis/page/edit'] = array(
    'title' => 'Edit TARDIS page',
    'description' => 'Customize settings for this TARDIS page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tardis_page_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tardis.admin.inc',
  );

  // TARDIS page erasure.
  $items['admin/structure/tardis/page/delete/%'] = array(
    'title' => 'Delete TARDIS page',
    'description' => 'Delete this TARDIS page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tardis_delete_confirm', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tardis.admin.inc',
  );

  // TARDIS page callback. There can be several TARDIS pages, so query the db
  // and fetch all TARDIS page names, titles and addresses.
  $query = db_select('tardis_pages', 'tp')
      ->fields('tp', array(
        'name',
        'title',
        'address',
      ));
  $results = $query->execute()->fetchAllAssoc('name');

  // For each one, build a menu item.
  // Each TARDIS page name is used as argument for the page callback - in order
  // to load the right one.
  foreach ($results as $result) {
    $tardis_page_name = $result->name;
    $tardis_page_title = $result->title;
    $tardis_page_address = $result->address;

    // Each page title must be run through filter_xss() in order to avoid
    // malicious scripts. So we change the title callback, which is usually t().
    $items[$tardis_page_address] = array(
      'title' => $tardis_page_title,
      'title callback' => 'filter_xss',
      'description' => 'View past nodes',
      'page callback' => 'tardis_page',
      'page arguments' => array($tardis_page_name),
      'access arguments' => array('view TARDIS page'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/tardis.page.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_permission(). 
 *
 * See tardis.install for an implementation of hook_enable()
 * that automatically grants access to the TARDIS.
 */
function tardis_permission() {
  return array(
    'view TARDIS page' => array(
      'title' => t('View TARDIS page'),
      'description' => t('Allows users access to the TARDIS.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tardis_theme() {
  // Keeping TPLs in a separate path so as to organise things.
  $path = drupal_get_path('module', 'tardis');

  return array(
    'tardis_year' => array(
      'arguments' => array(
        'title' => NULL,
        'link' => NULL,
      ),
      'template' => 'tardis-year',
      'path' => "$path/theme",
    ),
    'tardis_month' => array(
      'arguments' => array(
        'title' => NULL,
        'link' => NULL,
      ),
      'template' => 'tardis-month',
      'path' => "$path/theme",
    ),
  );
}

/**
 * Implements hook_block_info().
 *
 * Fetches all the TARDIS blocks from the db.
 */
function tardis_block_info() {
  $blocks = array();

  // Each block must be declared with a name and a subject. We use the
  // machine-readable name for both...
  $tardis_blocks = db_select('tardis_blocks', 'tb')
    ->fields('tb', array('name'))
    ->execute()
    ->fetchAllAssoc('name');

  // ... with slight differences.
  if ($tardis_blocks > 0) {
    foreach ($tardis_blocks as $tardis_block) {
      $tardis_block_name = $tardis_block->name;
      $blocks['tardis_' . $tardis_block_name] = array(
        'info' => 'TARDIS: ' . $tardis_block_name,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view(). 
 */
function tardis_block_view($delta = '') {
  $block = array();

  // Through this query we fetch all blocks from the db.
  $tardis_blocks = db_select('tardis_blocks', 'tb')
    ->fields('tb')
    ->execute()
    ->fetchAllAssoc('name');

  // Usually blocks are declared inside a module using one switch statement.
  // There's no way to tell how many blocks we have because that number varies.
  // Since we can't have a foreach statement inside a switch, we instead have
  // one switch per block inside a foreach. Drupal is OK with that :)
  foreach ($tardis_blocks as $tardis_block) {
    $tardis_block_name = 'tardis_' . $tardis_block->name;

    switch ($delta) {
      case $tardis_block_name:
        // Sanitize block title.
        $block['subject'] = filter_xss($tardis_block->title);

        $past_months = $tardis_block->past_months;
        $node_types = unserialize($tardis_block->node_types);
        $stop_year = $tardis_block->stop_year;
        $current_month = $tardis_block->current_month;
        $block_link = $tardis_block->block_link;
        $year_link = $tardis_block->year_link;
        $month_link = $tardis_block->month_link;

        // Fetch fields used by submodules in the query.
        $tardistoken_block_strings = array();
        _tardis_submodule_fields($tardis_block, 'block', $tardisdate_field, $tardisi18n_lang, $tardistoken_titles);

        // Build the query that returns a list of TARDIS links.
        $information = _tardis_query_block($past_months, $node_types, $stop_year, $current_month, $block_link, $year_link, $month_link, $tardisdate_field, $tardisi18n_lang, $tardistoken_titles);

        // Main block content.
        $content = array();

        // Check whether the user has set links to be nested.
        $tardis_block_link_nesting_months_years = $tardis_block->link_nesting_months_years;

        // If not, months go together with years.
        if ($tardis_block_link_nesting_months_years == FALSE) {
          foreach ($information as $item) {
            // Did the user set month names or numbers?
            $tardis_block_month_link = $tardis_block->month_link;
            $tardis_block_month_link_separator = ($tardis_block_month_link == 'names') ? ', ' : '/';
            $tardis_block_nesting_year = $tardis_block_month_link_separator . $item['title'];
            if ($item['children']) {
              foreach ($item['children'] as $child_item) {
                // Is there a token-enabled title?
                if (module_exists('tardistoken') && $tardistoken_titles['tardistoken_year_month'] != '') {
                  $tardis_options = array(
                    'object' => 'block',
                    'year' => $child_item['year'],
                    'month' => $child_item['month'],
                  );
                  $child_item['title'] = token_replace($tardistoken_titles['tardistoken_year_month'], $tardis_options);
                }
                else {
                  $child_item['title'] .= $tardis_block_nesting_year;
                }
                $content[] = array(
                  'data' => theme('tardis_month', $child_item),
                  'class' => $child_item['class'],
                );
              }
            }
          }
        }
        else {
          // Or else, months are nested as sublists of each year item.
          foreach ($information as $item) {
            $content[] = array(
              'data' => theme('tardis_year', $item),
              'class' => $item['class'],
            );
            if ($item['children']) {
              foreach ($item['children'] as $child_item) {
                $content[count($content) - 1]['children'][] = array(
                  'data' => theme('tardis_month', $child_item),
                  'class' => $child_item['class'],
                );
              }
            }
          }

          // Did the user set the block links to render as an accordion?
          $tardis_block_year_link = $tardis_block->year_link;

          if ($tardis_block_year_link == 'accordion') {
            // The accordion works by showing the current year's months
            // and hiding the other years'. So we have to figure out
            // which year the user is currently viewing.
            // First off, this function returns the arguments from the URL.
            $tardis_query_arg = _tardis_query_arg();

            // Check if we're seeing a node, not a TARDIS page, and add
            // the node's created year as argument for the TARDIS block.
            if (!isset($tardis_query_arg[0])) {
              $node = node_load(arg(1));
              $tardis_query_year = ($node) ? date('Y', $node->created) : '';
            }
            else {
              $tardis_query_year = $tardis_query_arg[0];
            }

            // Now we'll attach some handy javascript. The following command
            // passes the variable retrieved from the query to the external
            // JS file.
            drupal_add_js(array('tardis' => array('year' => $tardis_query_year)), 'setting');
            $block['content']['#attached']['js'][] = array(
              'data' => drupal_get_path('module', 'tardis') . '/js/tardis.js',
              'scope' => 'header',
            );
          }
        }

        // Regardless of how settings look,
        // attributes, items and theme stay the same.
        $block['content']['#attributes'] = array(
          'class' => array('tardis', 'tardis-list'),
          'id' => 'tardis-accordion',
        );
        $block['content']['#items'] = $content;
        $block['content']['#theme'] = 'item_list';

        break;
    }
  }

  return $block;
}

/**
 * This function builds the links list on the TARDIS block.
 *
 * @return array
 *   A renderable array of links to archive pages.
 */
function _tardis_query_block($past_months, $node_types, $stop_year, $current_month, $block_link, $year_link, $month_link, $tardisdate_field, $tardisi18n_lang, $tardistoken_titles) {
  // The $list array will hold all of our content.
  $list = array();

  // First we get the current month and year.
  $tardis_today = date('d', time());
  $tardis_this_month = date('m', time());
  $tardis_this_year = date('Y', time());

  // And we define the current year and past month as the starting point.
  $tardis_past_year = $tardis_this_year;
  $tardis_past_month = $tardis_this_month;

  // Then how many months to go back in time.
  $tardis_block_past_months = $past_months;

  // We also restrict our search to the selected node types.
  $tardis_block_node_types = $node_types;

  // And establish a point in time beyond which the TARDIS shouldn't go,
  // for performance reasons.
  $tardis_block_stop_year = $stop_year;

  // By default, we show the year along with the first month in the list.
  $tardis_show_year = 1;

  // Then recursively go back one month at a time and check if there is
  // at least one node there - unless we've hit the last year we're
  // supposed to look into.
  // If users specify the current month as part of the TARDIS block, the list
  // begins with the current day and month.
  $tardis_block_current_month = $current_month;
  while ($tardis_block_past_months > 0 && $tardis_past_year >= $tardis_block_stop_year) {
    // If we're in December, then the next step is November, last year.
    if ($tardis_this_month == 0) {
      $tardis_this_month = 12;
    }

    // If we're on the current month, TARDIS queries the DB looking for nodes
    // from the first day of the month up until today.
    // If we're on the previous month, or if users choose not to display the
    // current month, TARDIS creates a a one-month period for the queries.
    ($tardis_block_current_month == 0) ? $tardis_past_month = $tardis_this_month - 1 : '';

    // If we're in January, then the next step is December, last year.
    if ($tardis_past_month == 0) {
      $tardis_past_month = 12;
      $tardis_this_year--;
      $tardis_past_year--;
      $tardis_show_year = 1;
    }

    // This is the interval in which we'll investigate.
    if ($tardis_block_current_month == 1) {
      $tardis_query_date_max = $tardis_this_year . '-' . $tardis_this_month . '-' . $tardis_today;
      $tardis_query_date_min = $tardis_past_year . '-' . $tardis_this_month . '-01';
    }
    else {
      $tardis_query_last_day = _tardis_query_last_day($tardis_this_year, $tardis_past_month);
      $tardis_query_date_max = $tardis_this_year . '-' . $tardis_past_month . '-' . $tardis_query_last_day;
      $tardis_query_date_min = $tardis_past_year . '-' . $tardis_past_month . '-01';
    }

    // And we query the db once for each node we find in each month,
    // going one month further back with each iteration.
    // If we happen to find at least one node, we add its month to the list.
    $query = db_select('node', 'n')
      ->fields('n', array(
        'nid',
        'type',
        'created',
      ))
      ->addTag('node_access')
      ->condition('type', $tardis_block_node_types)
      ->range(0, 1);

    // Query joins made by submodules.
    _tardis_submodule_query_joins($query, $tardisi18n_lang, $tardisdate_field, $tardis_query_date);

    // Determines whether date.module fields should be used.
    _tardisdate_query_dates($query, $tardis_query_date, $tardis_query_date_min, $tardis_query_date_max);

    $result = $query->execute()->fetchAllAssoc('nid');

    // In case our query was successful, we'll display the link for the past
    // month.
    // If we're in January, then we'll display December from the previous year.
    if (count($result) > 0) {
      // This is the link for this block:
      $tardis_page_address = ($block_link == '') ? 'recent/nodes' : $block_link;

      // Did users set the block years to render without links?
      if ($year_link == 'no_link') {
        $tardis_block_year_link_target = NULL;
      }
      else {
        $tardis_block_year_link_target = $tardis_page_address . '/' . $tardis_past_year;
      }

      // We add the year the first time.
      if ($tardis_show_year == 1) {
        // Is TARDIS Token enabled? And is there a token-enabled title?
        if (module_exists('tardistoken') && $tardistoken_titles['tardistoken_year'] != '') {
          $tardis_options = array(
            'object' => 'block',
            'year' => $tardis_past_year,
          );
          $tardis_past_year_title = token_replace($tardistoken_titles['tardistoken_year'], $tardis_options);
        }
        else {
          $tardis_past_year_title = $tardis_past_year;
        }

        $list[] = array(
          'title' => $tardis_past_year_title,
          'link' => $tardis_block_year_link_target,
          // Those classes will help style links if needed.
          'class' => array('tardis-link-year', "tardis-year-$tardis_past_year"),
          'year' => $tardis_past_year,
        );
        // Each time we show the year, we mark it so that it's not shown again
        // until it reaches December on another iteration.
        $tardis_show_year = 0;
      }

      // For displaying purposes, we pad the month with a leading zero.
      $tardis_past_month = sprintf('%02d', $tardis_past_month);

      // Did the user set months to render as names or numbers?
      $tardis_block_month_link = $month_link;

      // Check whether TARDIS Token is enabled and if there's a
      // token-enabled link text for this option.
      if (module_exists('tardistoken') && $tardistoken_titles['tardistoken_month'] != '') {
        $tardis_options = array(
          'object' => 'block',
          'month' => $tardis_past_month,
        );
        $tardis_past_month_title = token_replace($tardistoken_titles['tardistoken_month'], $tardis_options);
      }
      else {
        if ($tardis_block_month_link == 'names') {
          // This helper funtion retrieves month names.
          $tardis_month_names = _tardis_month_names();
          $tardis_past_month_title = $tardis_month_names[$tardis_past_month];
        }
        else {
          $tardis_past_month_title = $tardis_past_month;
        }
      }

      // Now we add a month. Just like with the year link, the month link
      // can be customised in settings.
      $list[count($list) - 1]['children'][] = array(
        'title' => $tardis_past_month_title,
        'link' => $tardis_page_address . '/' . $tardis_past_year . '/' . $tardis_past_month,
        // Those classes will help style links if needed.
        'class' => array(
          'tardis-link-month',
          "tardis-year-$tardis_past_year",
          "tardis-month-$tardis_past_month",
        ),
        'year' => $tardis_past_year,
        'month' => $tardis_past_month,
      );
      $tardis_block_past_months--;
    }

    // Finally, we step back one month in time.
    if ($tardis_block_current_month == 1) {
      $tardis_block_current_month = 0;
    }
    else {
      $tardis_this_month--;
      $tardis_past_month--;
    }
  }

  return $list;
}

/**
 * TARDIS helper functions
 */

/**
 * Helper function that writes records to db.
 */
function _tardis_save($tardis_table, $tardis_values) {
  // Are we creating a new block, or updating an existing one?
  $tardis_update = $tardis_values->tardis_update;
  $tardis_name = $tardis_values->name;

  // We're either updating an existing block:
  if ($tardis_update !== 0) {
    if ($tardis_update != $tardis_name) {
      // If the name has changed, we need to delete the old record
      // and create a new one.
      _tardis_delete($tardis_table, $tardis_update);
      drupal_write_record($tardis_table, $tardis_values);
    }
    else {
      drupal_write_record($tardis_table, $tardis_values, 'name');
    }
    return 'update';
  }
  // Or creating a new one:
  else {
    drupal_write_record($tardis_table, $tardis_values);
  }
  return 'save';
}

/**
 * Helper function that deletes records from db.
 */
function _tardis_delete($tardis_table, $tardis_name) {
  db_delete($tardis_table)
    ->condition('name', $tardis_name)
    ->execute();
}

/**
 * Helper function that takes the arguments from the URL in an orderly fashion.
 */
function _tardis_query_arg() {
  // arg() returns arguments from the URL.
  $q = arg();

  // By default, this function returns an empty array
  // if no month or year arguments are supplied.
  $tardis_query_arg = array();

  // First we have to know if the URL has more than one part,
  // or else it's pointless to look for a year or a month.
  if (count($q) > 1) {
    // We can tell there's a year and a month if we get 2 numeric
    // arguments at the end of the URL:
    // - a four-digit number representing a year
    // - a two-digit number between 01 and 12 representing a month
    // So we use preg_match to check for that.
    if (preg_match('/^[0-9]{4}$/', $q[count($q) - 2]) && preg_match('/^[0-9]{2}$/', $q[count($q) - 1]) && $q[count($q) - 1][1] >= 1 && $q[count($q) - 1] <= 12) {
      $tardis_query_arg[0] = $q[count($q) - 2];
      $tardis_query_arg[1] = $q[count($q) - 1];
    }

    // Or if there's only a year as argument:
    if (preg_match('/^[0-9]{4}$/', $q[count($q) - 1])) {
      $tardis_query_arg[0] = $q[count($q) - 1];
    }
  }
  else {
    $tardis_query_arg[0] = '';
  }
  return $tardis_query_arg;
}

/**
 * Helper function that calculates the last day in a given month.
 */
function _tardis_query_last_day($tardis_query_year, $tardis_query_month) {
  // Is it February?
  if (sprintf('%02d', $tardis_query_month) == '02') {
    // Is it a leap year?
    return ($tardis_query_year % 4 == 0) ? '29' : '28';
  }
  // Is it a month with 30 days?
  $tardis_short_months = array('04', '06', '09', '11');
  return (in_array($tardis_query_month, $tardis_short_months)) ? '30' : '31';
}

/**
 * Helper function that returns month names.
 */
function _tardis_month_names() {
  $tardis_month_names = array(
    '01' => t('January'),
    '02' => t('February'),
    '03' => t('March'),
    '04' => t('April'),
    '05' => t('May'),
    '06' => t('June'),
    '07' => t('July'),
    '08' => t('August'),
    '09' => t('September'),
    '10' => t('October'),
    '11' => t('November'),
    '12' => t('December'),
  );

  return $tardis_month_names;
}

/**
 * Helper function that returns month abbreviations.
 */
function _tardis_month_abbreviations() {
  $tardis_month_abbreviations = array(
    '01' => t('Jan'),
    '02' => t('Feb'),
    '03' => t('Mar'),
    '04' => t('Apr'),
    '05' => t('May'),
    '06' => t('Jun'),
    '07' => t('Jul'),
    '08' => t('Aug'),
    '09' => t('Sep'),
    '10' => t('Oct'),
    '11' => t('Nov'),
    '12' => t('Dec'),
  );

  return $tardis_month_abbreviations;
}

/**
 * TARDIS submodules helper function.
 *
 * Determines whether date.module fields should be used in queries.
 */
function _tardisdate_query_dates($query, $tardis_query_date, $tardis_query_date_min, $tardis_query_date_max) {
  if (module_exists('tardisdate') && $tardis_query_date != 'created') {
    // date.module fields are stored as YYYY-MM-DD HH:MM:SS
    // and need no conversion.
    $tardis_query_date .= '_value';
  }
  else {
    // Base table Created fields are stored as timestamps
    // and need to be converted.
    $tardis_query_date_min = strtotime($tardis_query_date_min);
    $tardis_query_date_max = strtotime($tardis_query_date_max);
  }

  // So if the URL supplies one or two valid arguments, let's use them
  // to filter only nodes from a given year and month (if applicable).
  $query->condition($tardis_query_date, array($tardis_query_date_min, $tardis_query_date_max), 'BETWEEN');
}

/**
 * TARDIS submodules helper function.
 *
 * Fetches fields used by submodules in the query.
 */
function _tardis_submodule_fields($tardis_object, $tardis_object_type, &$tardisdate_field, &$tardisi18n_lang, &$tardistoken_titles) {
  // If TARDIS Date module is on, fetch the date field used in the query.
  if (module_exists('tardisdate')) {
    $tardisdate_field = ($tardis_object->tardisdate_field != '') ? $tardis_object->tardisdate_field : 'created';
  }
  else {
    $tardisdate_field = 'created';
  }

  // If TARDIS Internationalization is on, fetch the query language.
  // There might be no language yet, so we need a default value.
  // Also the language is an array, which is stored in serialized form.
  if (module_exists('tardisi18n')) {
    $tardisi18n_lang = ($tardis_object->tardisi18n_lang != '') ? unserialize($tardis_object->tardisi18n_lang) : array('cur_lang' => 'cur_lang');
  }
  else {
    $tardisi18n_lang = '';
  }

  // If TARDIS Token module is on, and it's a page,
  // fetch specific page titles used in the query.
  if (module_exists('tardistoken') && $tardis_object_type == 'page') {
    $tardistoken_titles['year'] = $tardis_object->tardistoken_year;
    $tardistoken_titles['year_month'] = $tardis_object->tardistoken_year_month;
  }

  // If TARDIS Token module is on, and it's a block,
  // fetch specific link texts used in the query.
  if (module_exists('tardistoken') && $tardis_object_type == 'block') {
    $tardistoken_titles['tardistoken_year'] = $tardis_object->tardistoken_year;
    $tardistoken_titles['tardistoken_month'] = $tardis_object->tardistoken_month;
    $tardistoken_titles['tardistoken_year_month'] = $tardis_object->tardistoken_year_month;
  }
}

/**
 * TARDIS submodules helper function.
 *
 * Query joins made by submodules.
 */
function _tardis_submodule_query_joins($query, $tardisi18n_lang, $tardisdate_field, &$tardis_query_date) {
  // TARDIS Internationalization query join.
  // Allows TARDIS Internationalization to change the query, restricting it
  // to nodes that are in a certain language.
  if (module_exists('tardisi18n')) {
    _tardisi18n_join_query($query, $tardisi18n_lang);
  }
  else {
    $tardisi18n_lang = '';
  }

  // TARDIS Date query join.
  // Allows TARDIS Date to change the query, restricting it to nodes that
  // have a certain date.module field.
  if (module_exists('tardisdate')) {
    _tardisdate_join_query($query, $tardisdate_field);

    // Check for any date.module field that might change the query.
    $tardis_query_date = $tardisdate_field;
  }
  else {
    $tardis_query_date = 'created';
  }
}
