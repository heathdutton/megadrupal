<?php

/**
 * @file
 * Provides a page to view only unread private messages.
 */

/**
 * Implements hook_menu().
 */
function privatemsg_unread_menu() {
  $items = array();
  $path = variable_get('privatemsg_unread_path');
  $items[$path] = array(
    'title' => 'Unread messages',
    'page callback' => 'privatemsg_unread_page_callback',
    'access callback' => 'privatemsg_user_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => -20,
  );

  $items['admin/config/messaging/privatemsg_unread'] = array(
    'title' => 'Privatemsg unread settings',
    'description' => 'Configure Privatemsg unread settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('privatemsg_unread_admin_settings'),
    'file' => 'privatemsg_unread.admin.inc',
    'access arguments' => array('administer privatemsg settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback for unread private messages.
 */
function privatemsg_unread_page_callback() {
  global $user;
  module_load_include('inc', 'privatemsg', 'privatemsg.pages');
  drupal_set_title(t('Unread messages'));
  return drupal_get_form('privatemsg_list', 'unread', $user);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function privatemsg_unread_form_privatemsg_list_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', 'privatemsg', 'privatemsg.pages');
}

/**
 * Implements hook_query_privatemsg_list_alter().
 */
function privatemsg_unread_query_privatemsg_list_alter($query) {
  if ($query->getMetaData('arg_2') === 'unread') {
    $query->condition('pmi.is_new', 1);
    $count_query = $query->getCountQuery();
    $count_query->condition('pmi.is_new', 1);
    $query->setCountQuery($count_query);
  }
}

/**
 * Checks to see if a path is already in use.
 */
function _privatemsg_unread_check_path($path) {
	// @todo: add multilingual support.
  $internal_path = drupal_lookup_path('source', $path);
  if (!$internal_path) {
    // Not an alias. Check if it's handled by a menu hook (router item).
    $menu_item = menu_get_item($path);
    if (!$menu_item) {
      // Path not in use.
      return TRUE;
    }
    else {
      // Path in use.
      return FALSE;
    }
  }
  else {
    // Path in use as an alias.
    return FALSE;
  }
}
