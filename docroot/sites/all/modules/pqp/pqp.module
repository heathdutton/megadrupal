<?php

/**
 * @file
 * Wrapper for Particletree.com's PHP Quick Profiler
 */

/**
 * Implementation of hook_help().
 */
function pqp_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/pqp':
      return t('Provides integration of Particletree.com\'s PHP Quick Profiler.');

    case 'admin/help#pqp':
      $output = '';
      $output .= '<p>'. t('All PQP functions are wrapped in the <strong>pqp($logs)<strong> function.
        <h4>log</h4>
        <code>
        pqp($variable);
        </code>
        
        <h4>logMemory</h4>
        <code>
        pqp($variable, "mem");
        </code>
        or
        <code>
        pqp(array("Your tag name", $variable), "mem");
        </code>
        
        
        <h4>logSpeed</h4>
        <code>
        pqp("Your tag name", "spd");
        </code>
        
        
        <h4>logError</h4>
        <code>
        pqp($e, "error");
        </code>
        or
        <code>
        pqp(array("Your error tag", $e), "error");
        </code>

        <p>
          <h3>References</h3>
          <p>Help and further instructions can be found on the <strong><a href="@drupal">PQP project page</a></strong>.</p>
        </p>', array('@caktux' => 'http://drupal.org/project/pqp')) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function pqp_menu() {
  $items = array();
  $items['admin/settings/pqp'] = array(
    'title' => 'PHP Quick Profiler',
    'description' => 'Adjust PHP Quick Profiler settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pqp_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['devel/pqp'] = array(
    'title callback' => 'pqp_title_toggle',
    'title arguments' => array(NULL),
    'title' => 'foo',
    'title' => 'PHP Quick Profiler',
    'description' => 'Quickly enable or disable PHP Quick Profiler.',
    'page callback' => 'pqp_toggle',
    'page arguments' => array('destination' => 'foo'),
    'access arguments' => array('access devel information'),
    'menu_name' => 'devel',
  );
  $items['pqp/explain_query'] = array(
    'page callback' => 'pqp_attemptToExplainQuery',
    'access arguments' => array('access devel information'),
    'type' => MENU_CALLBACK,
  );
  $items['pqp/get'] = array(
    'page callback' => 'pqp_get',
    'access arguments' => array('access devel information'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Form builder function for module settings.
 */
function pqp_settings() {
  $form['pqp_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable PHP Quick Profiler'),
    '#default_value' => variable_get('pqp_enable', 0),
  );
  $form['pqp_db'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable MySql Database Query debugging support (unsupported)'),
    '#default_value' => variable_get('pqp_db', 0),
  );
  
  $form = system_settings_form($form);

  return $form;
}

function pqp_init() {

  // Prevent loading on own page calls
  switch (arg(1)) {
    case 'pqp':
    case 'devel':
    case 'admin/build/modules':
      break;
    default:
      $path = drupal_get_path('module', 'pqp');
      drupal_add_js($path .'/pqp.js');

      $settings = array(
        'enable' => (variable_get('pqp_enable', 0) && user_access('access devel information')) ? 1 : 0
      );
      if (module_exists('i18n')) {
        $settings['lang'] = i18n_get_lang();
      }
      drupal_add_js(array('pqp_settings' => $settings), 'setting');
    
      if (empty($_POST['pqp_key']) && variable_get('pqp_enable', 0) && user_access('access devel information')) {
        drupal_add_css($path .'/pqp/pqp.css');
        // Start the whole process, only if $_POST['pqp_key'] is empty to
        // prevent double logging
        pqp_start();
      }
    
      // Cleanup task
/*
      $cleanup = db_query("SELECT * FROM variable WHERE name LIKE 'pqp_key_%%'");
      while ($leftover = db_fetch_object($cleanup)) {
        variable_del($leftover->name);
      }
*/
  }
}


/**
 * Performance module is taking over from here to do the logging, we just
 * need to display PQP, which is taken care of with an ajax call if PQP
 * is enabled
 */
function pqp_exit($destination = NULL) {
  if (variable_get('pqp_enable', 0) && user_access('access devel information')) {
    pqs(t('Stopping PHP Quick Profiler at') .'&nbsp;');
  }
}

function pqp_get() {
  if (variable_get('pqp_enable', 0) && user_access('access devel information')) {

    // Prepare PQP's display of current performance logging info
    $pqp_lines = array();
    $result = db_query("SELECT * FROM {performance_detail} ORDER BY timestamp DESC");

    while ($data = db_fetch_array($result)) {
      if (!empty($data)) {
        $pqp_lines[] = unserialize($data['data']);
      }
    }

    print pqp_display($pqp_lines);
  }
  exit();
}

function pqp_toggle($destination = '') {
  variable_set('pqp_enable', !variable_get('pqp_enable', 0));
  exit();
/*   drupal_goto($destination); */
}

function pqp_title_toggle() {
  if (variable_get('pqp_enable', 0)) {
    return t('Disable PQP');
  }
  else {
    return t('Enable PQP');
  }
}

function pqp_start() {
  pqs(t('Starting PHP Quick Profiler at') .'&nbsp;');
/*   pqp_sampleConsoleData(); */
}

function pqp_theme() {
  return array(
    'pqp' => array(
      'arguments' => array('vars' => NULL),
      'file' => 'pqp/display.php',
    ),
  );
}

function pqp($var, $type = 'log') {
  if (variable_get('pqp_enable', 0) && user_access('access devel information')) {
    pqp_dolog(array($type => $var));
  }
}

function pqp_dolog($logs) {
  if (empty($logs)) return NULL;
  $type = key($logs);
  $log = $logs[$type];

  try {
    switch ($type) {
      case 'mem':
        if (empty($log)) {
          pqp_logMemory();
        }
        else {
          if (is_array($log)) {
            pqp_logMemory($log[1], $log[0]);
          }
          else {
            pqp_logMemory($log, 'Memory usage of variable');
          }
        }
        break;
      case 'spd':
        pqp_logSpeed($log);
        break;
      case 'db':
        // Not implemented yet
        break;
      case 'error':
        if (!empty($log)) {
          if (is_array($log)) {
            $msg = $log[0];
            $e = $log[1];
          }
          else {
            $msg = 'Error';
            $e = $log;
          }
          pqp_logError($e, $msg);
        }
        break;
      default:
        pqp_log($log);
        break;
    }
  }
  catch(Exception $e) {
    dpm(t('Error logging to PHP Quick Profiler, error was:'));
    dpm($e);
  }

}

function pqm($var) {
  pqp($var, 'mem');
}

function pqs($var) {
  pqp($var, 'spd');
}

function pqe($var) {
  pqp($var, 'error');
}

function pqp_display($pqp_data) {

  /**
   * For when I'll hook everything to summary performance logging, only using
   * detailed logging for now...
   */
  /*
    if (!variable_get('performance_summary_db', 0) || !variable_get('performance_summary_apc', 0)) {
    	$pqp_output['logs']['console'][] = array(
        "data" => '<pre>'. t('Performance logging is not enabled. Go to the !link to enable it.', array('!link' => l(t('settings page'), 'admin/settings/performance_logging'))) .'</pre>',
        "type" => 'log'
      );
    }
  */

  if (variable_get('performance_detail', 0) && !empty($pqp_data[0])) {
    $pqp_output = $pqp_data[0];

    // Show old logs, max of 5 which actually gives us 2 previous output when
    // counting our own "/pqp/get" calls ...
    //
    // @TODO own pqp calls as setting and the number of previous outputs..
  
    for ( $i=1; $i<=5; $i++ ) {
      if (!empty($pqp_data[$i]['logs']['console'])) {
        foreach ($pqp_data[$i]['logs']['console'] as $console_data) {
          $data = $console_data['data'];
          $type = $console_data['type'];
          if (!empty($data)) {
            $name = (!empty($console_data['name']) ? $console_data['name'] : '');
            $data_type = (!empty($console_data['dataType']) ? $console_data['dataType'] : '');
          	$cached[$i][] = array(
              "data" => $data,
              "type" => $type,
              "name" => $name,
              "dataType" => $data_type,
            );
          }
        }
        if (!empty($cached[$i])) {
          foreach ($cached[$i] as $console) {
          	$pqp_output['logs']['console'][] = array(
              "data" => $console['data'],
              "type" => $console['type'],
              "name" => $console['name'],
              "dataType" => $console['dataType'],
            );
          }
        }
      }
    }
  }
  else {
/*     $pqp_data = _pqp_get_data(); */
    $pqp_output = $pqp_data[0];
  	$pqp_output['logs']['console'][] = array(
      "data" => '<pre>'. t('Detailed performance logging is not enabled. Go to the !link to enable it.', array('!link' => l(t('settings page'), 'admin/settings/performance_logging'))) .'</pre>',
      "type" => 'log'
    );
  }

  return theme('pqp', $pqp_output);
}

function _pqp_get_data() {
  $pqp_data = array_merge(
    pqp_gatherFileData(),
    pqp_gatherSpeedData(),
    pqp_gatherQueryData(),
    pqp_gatherMemoryData(),
    pqp_gatherConsoleData()
  );

  return $pqp_data;
}

function _pqp_set_header($path, $timer, $anon) {
  $pqp_header = array(
    "data" => t('Output from') .' "/'. $path .'" '. t('on') .' '. format_date(time(), 'small') .' '. t('in') .' '. pqp_getReadableTime($timer) .' (Anon.: '. $anon .')',
    "type" => 'log'
  );

  array_unshift($GLOBALS['debugger_logs']['console'], $pqp_header);
}

/**
 * Implementation of hook_performance()
 */
function pqp_performance($op, $args = array()) {
  switch ($op) {
    case 'header':
      // Set our header for PQP's output
      _pqp_set_header($args['path'], $args['timer'], $args['anon']);
    case 'data':
      // Gather PQP data
      return serialize(_pqp_get_data());
    case 'disable':
/*       pqp_print_live(_pqp_get_data()); */
      return FALSE;
  }
}

/**
 * Instead of using hook_performance('disable'), print live output in
 * hook_footer...
 */
function pqp_footer($main = 0) {
  if (variable_get('pqp_enable', 0) && user_access('access devel information') && !variable_get('performance_detail', 0)) {
    return pqp_print_live(_pqp_get_data());;
  }
}


/**
 * Get and pass live PQP data if detailed performance loggin is disabled
 * CURRENTLY NOT WORKING...
 */
function pqp_print_live($pqp_data) {
/* dpr(array('pqp_display' => $pqp_display)); */
  
  $pqp_output = drupal_to_js(array('pqp_data' => pqp_display($pqp_data)));

  return '<script type="text/javascript">'."\n".
    '<!--//--><![CDATA[//><!--'."\n".
    'jQuery.extend(Drupal.settings, '. $pqp_output .');'."\n".
    '//--><!]]>'."\n".
    '</script>'."\n";
}

function pqp_sampleConsoleData() {
  try {
    pqp('Begin logging data');
    pqp('PQP mem used at line '.__LINE__, 'mem');
    pqp('Time taken to get to line '.__LINE__, 'spd');
    pqp(array('Name' => 'Ryan', 'Last' => 'Campbell', 'Drupal module' => 'caktux'));
    pqp('Time taken to get to line '.__LINE__, 'spd');
    pqp(array('PQP mem example : ', 'lengthofthisdatalengthofthisdatalengthofthisdatalengthofthisdata'), 'mem');
    pqp('Ending log below with a sample error.');
    throw new Exception('Unable to write to log!');
  }
  catch(Exception $e) {
    pqp(array('Sample error logging, with message: ', $e), 'error');
    pqp('Without (this one as log):');
    pqp($e, 'error');
  }
}


/* - - - - - - - - - - - - - - - - - - - - -

 Title : PHP Quick Profiler Class
 Author : Created by Ryan Campbell
 URL : http://particletree.com/features/php-quick-profiler/

 Last Updated : April 22, 2009

 Description : This class processes the logs and organizes the data
 for output to the browser. Initialize this class with a start time at
 the beginning of your code, and then call the display method when your code
 is terminating.

- - - - - - - - - - - - - - - - - - - - - */

/*-------------------------------------------
     FORMAT THE DIFFERENT TYPES OF LOGS
-------------------------------------------*/

function pqp_gatherConsoleData() {
  global $pqp_startTime;
  $logs = pqp_getLogs();
  if($logs['console']) {
    foreach($logs['console'] as $key => $log) {
      if($log['type'] == 'log') {
        if (function_exists('kpr')) {
          $logs['console'][$key]['data'] = kpr($log['data'], TRUE);
        }
        else {
          $logs['console'][$key]['data'] = '<div class="messages error">The krumo library could not be found, using dprint_r() for output instead.</div><code type="php">'.dpr($log['data'], TRUE).'</code>';
        }
      }
      elseif($log['type'] == 'memory') {
        $logs['console'][$key]['data'] = pqp_getReadableFileSize($log['data']);
      }
      elseif($log['type'] == 'speed') {
        $logs['console'][$key]['data'] = $log['data'];
      }
    }
  }
  $pqp_output['logs'] = $logs;
  return $pqp_output;
}

/*-------------------------------------------
    AGGREGATE DATA ON THE FILES INCLUDED
-------------------------------------------*/

function pqp_gatherFileData() {
  $files = get_included_files();
  $fileList = array();
  $fileTotals = array(
    "count" => count($files),
    "size" => 0,
    "largest" => 0,
  );

  foreach($files as $key => $file) {
    $size = filesize($file);
    $fileList[] = array(
        'name' => $file,
        'size' => pqp_getReadableFileSize($size)
      );
    $fileTotals['size'] += $size;
    if($size > $fileTotals['largest']) $fileTotals['largest'] = $size;
  }
  
  $fileTotals['size'] = pqp_getReadableFileSize($fileTotals['size']);
  $fileTotals['largest'] = pqp_getReadableFileSize($fileTotals['largest']);
  $pqp_output['files'] = $fileList;
  $pqp_output['fileTotals'] = $fileTotals;
  return $pqp_output;
}

/*-------------------------------------------
     MEMORY USAGE AND MEMORY AVAILABLE
-------------------------------------------*/

function pqp_gatherMemoryData() {
  $memoryTotals = array();
  $memoryTotals['used'] = pqp_getReadableFileSize(memory_get_peak_usage());
  $memoryTotals['total'] = ini_get("memory_limit");
  $pqp_output['memoryTotals'] = $memoryTotals;
  return $pqp_output;
}

/*-------------------------------------------
     SPEED DATA FOR ENTIRE PAGE LOAD
-------------------------------------------*/

function pqp_gatherSpeedData() {
  $speedTotals = array();
  $speedTotals['total'] = pqp_getReadableTime(timer_read('page'));
  $speedTotals['allowed'] = ini_get("max_execution_time");
  $pqp_output['speedTotals'] = $speedTotals;
  return $pqp_output;
}

/*--------------------------------------------------------
     QUERY DATA -- DATABASE OBJECT WITH LOGGING REQUIRED
----------------------------------------------------------*/

function pqp_gatherQueryData() {

  global $user;
  global $queries;
  global $pqp_queries;
  global $pqp_qry_totaltime;

  // Collect and EXPLAIN queries
  if (is_array($queries)) {
    if (!empty($queries))  {
      setlocale(LC_NUMERIC, 'C');
      foreach($queries as $value) {
        list($function, $query) = explode("\n", $value[0]);
        $query = str_replace('/* '. $user->name .' : '.$function.' */ ', '', $query);
        if (!empty($query)) {
          $plain_queries[] = trim($query);
          $equery['sql'] = trim($query);
/*         $equery['explain'] = pqp_attemptToExplainQuery($query); */
          $pqp_qry_totaltime += $value[1];
          $equery['time'] = pqp_getReadableTime($value[1]);
          $pqp_queries[] = $equery;
          $count++;
        }
      }
    }
  }

  $queryTotals = array();
  $queryTotals['count'] = count($queries);
  if (!empty($pqp_queries)) {
    $queryTotals['duplicates'] = pqp_array_repeated($plain_queries);
    $queryTotals['duplicate_count'] = count($queryTotals['duplicates']);
  }
  else {
    $queryTotals['duplicate_count'] = 0;
  }
  $queryTotals['time'] = pqp_getReadableTime($pqp_qry_totaltime);

  $pqp_output['queries'] = $pqp_queries;
  $pqp_output['queryTotals'] = $queryTotals;
  return $pqp_output;
}


function pqp_array_repeated($array)
{
  if ( !is_array($array) ) {
    return FALSE;
  }
  
  $duplicates = array();
  foreach ( $array as $key => $val ) {
    end($array);
    $k = key($array);
    $v = current($array);

    while ( $k !== $key ) {
      if ( $v === $val ) {
        $duplicates[] = $v;
        break;
      }

      $v = prev($array);
      $k = key($array);
    }
  }
  
  return $duplicates;
} 


/*--------------------------------------------------------
     CALL SQL EXPLAIN ON THE QUERY TO FIND MORE INFO
----------------------------------------------------------*/

function pqp_attemptToExplainQuery() {
  $sql = stripslashes(trim($_POST['sql']));

  drupal_set_message('<strong>'. t('Result of') .'</strong> '. $sql);

  if (strpos($sql, 'SELECT') === 0) {
    $rs = db_query('EXPLAIN '. $sql);
    if ($rs) {
      $row = db_fetch_array($rs);
      drupal_set_message( 
        '<em>
          <strong>'. t('Key Used:') .'</strong> '.$row['key'].' &middot;
          <strong>'. t('Possible keys:') .'</strong> '.$row['possible_keys'].' &middot;
          <strong>'. t('Type:') .'</strong> '.$row['type'].' &middot;
          <strong>'. t('Rows:') .'</strong> '.$row['rows'].'
        </em>');
      print theme_status_messages();
      kpr($row);
    }
  }
  exit();
}


/*-------------------------------------------
     HELPER FUNCTIONS TO FORMAT DATA
-------------------------------------------*/

function pqp_getReadableFileSize($size, $retstring = NULL) {
  // adapted from code at http://aidanlister.com/repos/v/function.size_readable.php
  $sizes = array('bytes', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');
  
  if ($retstring === NULL) { $retstring = '%01.2f %s'; }
  
  $lastsizestring = end($sizes);
  
  foreach ($sizes as $sizestring) {
    if ($size < 1024) { break; }
    if ($sizestring != $lastsizestring) { $size /= 1024; }
  }
  if ($sizestring == $sizes[0]) { $retstring = '%01d %s'; } // Bytes aren't normally fractional
  return sprintf($retstring, $size, $sizestring);
}

function pqp_getReadableTime($time) {
  $ret = $time;
  $formatter = 0;
  $formats = array('ms', 's', 'm');
  if($time >= 1000 && $time < 60000) {
    $formatter = 1;
    $ret = ($time / 1000);
  }
  if($time >= 60000) {
    $formatter = 2;
    $ret = ($time / 1000) / 60;
  }
  $ret = number_format($ret,4,'.','') .' '. $formats[$formatter];

  return $ret;
}


/* - - - - - - - - - - - - - - - - - - - - -

 Title : PHP Quick Profiler Console Class
 Author : Created by Ryan Campbell
 URL : http://particletree.com/features/php-quick-profiler/

 Last Updated : April 22, 2009

 Description : This class serves as a wrapper around a global
 php variable, debugger_logs, that we have created.

- - - - - - - - - - - - - - - - - - - - - */
  
/*-----------------------------------
     LOG A VARIABLE TO CONSOLE
------------------------------------*/

function pqp_log($data) {
  $logItem = array(
    "data" => $data,
    "type" => 'log'
  );
  if (!isset($GLOBALS['debugger_logs'])) {
    $GLOBALS['debugger_logs'] = array();
  }
  $GLOBALS['debugger_logs'] += array(
    'console' => array(),
    'logCount' => 0,
  );
  $GLOBALS['debugger_logs']['console'][] = $logItem;
  $GLOBALS['debugger_logs']['logCount'] += 1;
}

/*---------------------------------------------------
     LOG MEMORY USAGE OF VARIABLE OR ENTIRE SCRIPT
-----------------------------------------------------*/

function pqp_logMemory($object = FALSE, $name = 'PHP') {
  if ($object) {
    $memory = strlen(serialize($object));
  } else {
    $memory = memory_get_usage();
  }

  $logItem = array(
    "data" => $memory,
    "type" => 'memory',
    "name" => $name,
    "dataType" => gettype($object)
  );

  $GLOBALS['debugger_logs']['console'][] = $logItem;
  $GLOBALS['debugger_logs']['memoryCount'] += 1;
}

/*-----------------------------------
     LOG A PHP EXCEPTION OBJECT
------------------------------------*/

function pqp_logError($exception, $message) {
  $logItem = array(
    "data" => $message,
    "type" => 'error',
    "file" => $exception->getFile(),
    "line" => $exception->getLine()
  );

  $GLOBALS['debugger_logs']['console'][] = $logItem;
  $GLOBALS['debugger_logs']['errorCount'] += 1;
}

/*------------------------------------
     POINT IN TIME SPEED SNAPSHOT
-------------------------------------*/

function pqp_logSpeed($name = 'Point in Time') {
  $logItem = array(
    "data" => pqp_getReadableTime(timer_read('page')),
    "type" => 'speed',
    "name" => $name
  );

  $GLOBALS['debugger_logs']['console'][] = $logItem;
  $GLOBALS['debugger_logs']['speedCount'] += 1;
}

/*-----------------------------------
     SET DEFAULTS & RETURN LOGS
------------------------------------*/

function pqp_getLogs() {
  $GLOBALS['debugger_logs'] += array(
    'memoryCount' => 0,
    'logCount' => 0,
    'speedCount' => 0,
    'errorCount' => 0,
  );
  return $GLOBALS['debugger_logs'];
}

