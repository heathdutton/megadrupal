<?php

define('SITE_EXPIRE_DEFAULT_WARNING_MESSAGE', "This site will expire in @daysleft day(s).");
define('SITE_EXPIRE_DEFAULT_MAINTENANCE_MESSAGE', "This site has expired. Please contact your administrator.");

/**
 * Implements hook_init().
 *
 * Shows a warning if there is little time left before expiration
 */
function site_expire_init() {
  global $user;

  if (variable_get('site_expire_warning_days', 0)) {
    if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
      return; // Don't process AJAX requests
    }

    $seconds_left = variable_get('site_expire_date', 0) - time();

    $warning_seconds = variable_get('site_expire_warning_days', 0) * 24 * 60 * 60;

    if ($warning_seconds < $seconds_left) {
      return; // The time to warn has not come yet
    }
   
    $patterns = variable_get('site_expire_warning_pages', FALSE);

    if (($patterns && !drupal_match_path(current_path(), $patterns))) {
      return;
    }

    $roles = variable_get('site_expire_warning_roles', array('anonymous user'));
    // Check the user for one of the allowed roles
    if ($roles) {
      $user_has_role = FALSE;

      foreach ($user->roles as $rid => $role) {
        if (in_array($rid, $roles)) {
          $user_has_role = TRUE;
          break;
        }
      }
      
      if (!$user_has_role) {
        return;
      }
    }

    $days_left = floor($seconds_left / 60 / 60 / 24);
    $hours_left = floor($seconds_left / 60 / 60);

    $raw_message = variable_get('site_expire_warning_message', SITE_EXPIRE_DEFAULT_WARNING_MESSAGE);
    $message = drupal_html_to_text($raw_message);

    drupal_set_message(t($message, array('@daysleft' => $days_left, '@hoursleft' => $hours_left)), 'warning');
  }
}

/**
 * Implements hook_menu().
 */
function site_expire_menu() {
  $items = array();

  $items['admin/config/system/site-expire'] = array(
    'title' => 'Site expire',
    'description' => 'Administer site expiration date',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_expire_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access site in maintenance mode'),
  );

  return $items;
}

function site_expire_access_admin_page($array) {
  foreach ($array as $argument) {
    if (!user_access($argument)) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Implements hook_form().
 */
function site_expire_admin_form($form, &$form_state) {
  $date_format = "Y-m-d";

  $default_date = variable_get('site_expire_date', NULL);
  if ($default_date != NULL) {
    $default_date = date($date_format, $default_date);
  }

  $form['explanation'] = array(
    '#markup' => '<p>' . t('The site will be switched to maintenance mode at the specified date, whenever the cron is run starting at 00:00 server time on that date.') . '</p>',
  );

  $form['expiration_date'] = array(
    '#type' => 'date_popup',
    '#title' => 'Expiration date',
    '#date_format' => $date_format,
    '#default_value' => $default_date,
    '#description' => 'The date at which this site expires. Leave empty for never.',
  );

  $form['site_expire_maintenance_message'] = array(
    '#type' => 'textarea',
    '#title' => 'Maintenance message after site has expired.',
    '#description' => 'This message will temporarily replace the <a href="/admin/config/development/maintenance">maintenance message</a> when the site expires.',
    '#default_value' => variable_get('site_expire_maintenance_message', SITE_EXPIRE_DEFAULT_MAINTENANCE_MESSAGE),
    '#size' => 2,
  );

  $form['warning'] = array(
    '#type' => 'fieldset',
    '#title' => 'Warning message',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['warning']['site_expire_warning_days'] = array(
    '#type' => 'textfield',
    '#title' => 'Show a message within this many days of the site expiring.',
    '#description' => 'Set to zero for no messages.',
    '#default_value' => variable_get('site_expire_warning_days', '0'),
  );

  $form['warning']['site_expire_warning_message'] = array(
    '#type' => 'textfield',
    '#title' => 'Expiration warning.',
    '#description' => 'This variable will be translated. Use @daysleft for days left and/or @hoursleft for hours left.',
    '#default_value' => variable_get('site_expire_warning_message', SITE_EXPIRE_DEFAULT_WARNING_MESSAGE),
    '#size' => 100,
  );

  $form['warning']['site_expire_warning_pages'] = array(
    '#type' => 'textarea',
    '#title' => 'Only show the message on these pages.',
    '#description' => 'Enter one path per line. Leave empty to show on all pages.',
    '#default_value' => variable_get('site_expire_warning_pages', ''),
  );

  $form['warning']['site_expire_warning_roles'] = array(
    '#type' => 'select',
    '#options' => user_roles(),
    '#title' => 'Only show the message to users with these roles.',
    '#description' => 'Leave empty to show to all users.',
    '#default_value' => variable_get('site_expire_warning_roles', ''),
    '#multiple' => TRUE,
  );

  $form['submit_button'] = array('#type' => 'submit', '#value' => t('Submit'));

  return $form;
}

/**
 * Submit handler for site_expire_admin_form().
 */
function site_expire_admin_form_submit($form, &$form_state) {
  $date_format = "Y-m-d";

  // Set all variables assuming the form element key is the variable name
  foreach ($form_state['values'] as $key => $value) {
    if (substr($key, 0, 11) == 'site_expire') {
      if (!empty($value)) {
        variable_set($key, $value);
      }
      else {
        variable_del($key);
      }
    }
  }

  // Special case for dates as usual
  if (empty($form_state['values']['expiration_date'])) {
    variable_del('site_expire_date');
  } else {
    variable_set('site_expire_date', strtotime($form_state['values']['expiration_date']));
  }
}

/**
 * Implements hook_cron()
 *
 * Turns off the site if the expiration date is past.
 */
function site_expire_cron() {
  $exp_date = variable_get('site_expire_date', FALSE);

  if (variable_get('maintenance_mode', 1) == 0) {
    // The site has been turned back online, but our variable wasn't reset
    variable_set('site_expire_site_disabled', 0);
  }

  if ($exp_date && $exp_date < time()) {
    if (variable_get('maintenance_mode', 0) == 0) {
      _site_expire_expire_site();
    }
  }
  else {
    if (variable_get('maintenance_mode', 1) && variable_get('site_expire_site_disabled', 1)) {
      _site_expire_unexpire_site();
    }
  }
}

/**
 * Helper function, called when site expires.
 */
function _site_expire_expire_site() {
  watchdog('site_expire', 'Sited is expired, turning on maintenance mode.');
  variable_set('maintenance_mode', 1);
  variable_set('site_expire_site_disabled', 1);
  $new_message = variable_get('site_expire_maintenance_message', SITE_EXPIRE_DEFAULT_MAINTENANCE_MESSAGE);
  variable_set('site_expire_original_maintenance_message', variable_get('maintenance_mode_message'));
  variable_set('maintenance_mode_message', $new_message);

  if (module_exists('rules')) {
    rules_invoke_event('site_expire_expiration');
  }

  module_invoke_all('site_expire_expiration');
}

/**
 * Helper function, called when site "unexpires". MIGHT NOT GET CALLED!
 */
function _site_expire_unexpire_site() {
  watchdog('site_expire', 'Site expiration date changed. Turning off maintenance mode.');
  variable_set('maintenance_mode', 0);
  variable_set('site_expire_site_disabled', 0);
  variable_set('maintenance_mode_message', variable_get('site_expire_original_maintenance_message', SITE_EXPIRE_DEFAULT_MAINTENANCE_MESSAGE));
  variable_del('site_expire_original_maintenance_message');

  module_invoke_all('site_expire_unexpiration');
}
