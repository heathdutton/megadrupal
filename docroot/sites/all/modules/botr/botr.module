<?php

/**
 * @file
 * The Bits on the Run module, which allows users to embed videos from
 * Bits on the run into their Drupal nodes.
 *
 * A widget is provided for searching and easy insertion of these videos.
 */

define('BOTR_PLAYER', 'ALJ3XQCI');
define('BOTR_TIMEOUT', 0);
define('BOTR_CONTENT_MASK', 'content.bitsontherun.com');
define('BOTR_NR_VIDEOS', 5);
define('BOTR_TARGET', 'body');
define('BOTR_WEIGHT', 0);
// After the default "Limit allowed HTML tags" filter.
define('BOTR_FILTER_WEIGHT', -1);
// The URL to the Bits on the Run dashboard.
define('BOTR_DASHBOARD_URL', 'dashboard.bitsontherun.com');

class BotrException extends Exception {};

/**
 * Implements hook_filter_info().
 */
function botr_filter_info() {
  $filters['botr'] = array(
    'title' => t('Bits on the Run quicktag replacement'),
    'description' => t('Replace video quicktags with javascript embeds.'),
    'process callback' => 'botr_filter_process',
    'settings callback' => 'botr_filter_settings',
    'default settings' => array(
      'botr_timeout' => 0,
      'botr_content_mask' => BOTR_CONTENT_MASK,
      'botr_player' => BOTR_PLAYER,
    ),
    'tips callback' => 'botr_filter_tips',
    'cache' => FALSE,
    'weight' => BOTR_FILTER_WEIGHT,
  );
  return $filters;
}

/**
 * Implements hook_permission().
 */
function botr_permission() {
  return array(
    'use botr' => array(
      'title' => t('Use the Bits on the Run widget'),
      'description' => t('Use the Bits on the Run widget for embedding videos in posts.'),
    ),
    'configure botr' => array(
      'title' => t('Configure the Bits on the Run module'),
      'description' => t('View and change the Bits on the Run API key and secret.'),
      'restrict access' => TRUE,
    ),
    'open botr dashboard' => array(
      'title' => t('Open the Bits on the Run dashboard'),
      'description' => t('Open the Bits on the Run dashboard and automatically log in.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_filter_FILTER_tips().
 */
function botr_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('Use the quicktag [bitsontherun &lt;id&gt;], where &lt;id&gt; represents the video id, to embed a video from Bits on the Run. Alternatively, use [bitsontherun &lt;id&gt;-&lt;playerID&gt;] to specify which player to use.');
  }
  else {
    return t('Use [bitsontherun &lt;id&gt;] to embed a video from Bits on the Run.');
  }
}

/**
 * Implements hook_filter_FILTER_process().
 */
function botr_filter_process($text, $filter, $format) {
  // Replace all occurrences of [bitsontherun <key>] or
  // [bitsontherun <key>:<player>] with the appropriate embed codes.
  $api_key = variable_get('botr_api_key', '');
  $api_secret = variable_get('botr_api_secret', '');

  if ($api_key && $api_secret) {
    $regex = '/\[bitsontherun ([0-9a-z]{8})(?:[-_])?([0-9a-z]{8})?\]/si';
    $lambda = function($arguments) use($filter) {
      return botr_create_js_embed($filter, $arguments);
    };
    return preg_replace_callback($regex, $lambda, $text);
  }
  else {
    return $text;
  }
}

/**
 * Implements hook_filter_FILTER_settings().
 */
function botr_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;

  $form = array();

  $form['#validate'][] = 'botr_filter_settings_validate';

  $form['botr_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Timeout for signed links'),
    '#default_value' => $filter->settings['botr_timeout'],
    '#size' => 4,
    '#maxlength' => 4,
    '#field_suffix' => t('minutes'),
    '#description' => t("The duration in minutes for which a !security_link will be valid. Don't forget to enable secure content on your !settings_link if you want to use this feature. Set this to 0 if you want to disable signing (and use the Drupal page cache).",
      array(
        '!security_link' => l(t('secured player'),
          'http://www.longtailvideo.com/support/bits-on-the-run/15986/secure-your-videos-with-signing'),
        '!settings_link' => l(t('settings page'),
          'http://dashboard.bitsontherun.com/settings/'),
      )),
    '#required' => FALSE,
  );

  $form['botr_content_mask'] = array(
    '#type' => 'textfield',
    '#title' => t('Content DNS mask'),
    '#default_value' => $filter->settings['botr_content_mask'],
    '#description' => t('The !dns_mask_link of the content server.',
      array(
        '!dns_mask_link' => l(t('DNS mask'),
          'http://www.longtailvideo.com/support/bits-on-the-run/21627/dns-mask-our-content-servers'),
      )),
    '#required' => FALSE,
  );

  $form['botr_player'] = array(
    '#title' => t('Default player'),
    '#default_value' => $filter->settings['botr_player'],
    '#description' => t('The !player_link to use for embedding the videos. If you want to override the default player for a given video, simply append a dash and the corresponding player key to video key in the quicktag. For example: [bitsontherun MdkflPz7-35rdi1pO].',
      array(
        '!player_link' => l(t('player'),
          'http://dashboard.bitsontherun.com/players/'),
      )
    ),
  );

  try {
    $players = botr_get_players();
    $form['botr_player']['#type'] = 'select';
    $form['botr_player']['#options'] = $players;
  } catch (BotrException $e) {
    $form['botr_player']['#type'] = 'item';
    $form['botr_player']['#value'] = $e->getMessage();
  }

  return $form;
}

/**
 * Create the JavaScript embed code.
 */
function botr_create_js_embed($filter, $arguments) {
  $video_hash = $arguments[1];
  if (!empty($arguments[2])) {
    $player_hash = $arguments[2];
  }
  else {
    $player_hash = $filter->settings['botr_player'];
  }
  $path = 'players/' . $video_hash . '-' . $player_hash . '.js';

  $content_mask = $filter->settings['botr_content_mask'];
  $url = 'http://' . $content_mask . '/' . $path;

  $timeout = intval($filter->settings['botr_timeout']);

  if ($timeout > 0) {
    $api_secret = variable_get('botr_api_secret', '');
    $expires = time() + 60 * $timeout;
    $signature = md5("$path:$expires:$api_secret");
    $url .= '?exp=' . $expires . '&sig=' . $signature;
  }

  return "<script type='text/javascript' src='$url'></script>";
}

/**
 * List the available players.
 */
function botr_get_players() {
  $api_key = variable_get('botr_api_key', '');
  $api_secret = variable_get('botr_api_secret', '');

  if (!$api_key || !$api_secret) {
    throw new BotrException(t('You have to log in before you can set this option.'));
  }

  require_once 'botr_api.php';
  $botr_api = new BotrAPI($api_key, $api_secret);
  $response = $botr_api->call('/players/list');

  if (!$response || $response['status'] != 'ok') {
    throw new BotrException(t('Cannot fetch player listing, please try again later.'));
  }

  $players = array();

  foreach ($response['players'] as $i => $p) {
    $description = $p['name'] . ' (' . $p['width'] . 'x' . $p['height'] . ')';
    $players[$p['key']] = $description;
  }

  return $players;
}

/**
 * Describes the login form.
 */
function botr_login() {
  $form = array();

  $form['#submit'][] = 'botr_login_submit';

  $form['botr_login_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Log in'),

    '#description' => t('Please log in using your Bits on the Run username and password. If you do not yet have an account, you can !signup_link up immediately.',
      array('!signup_link' => l(t('sign up'), 'admin/config/media/botr/signup'))
    ),

    // Login field.
    'botr_login' => array(
      '#type' => 'textfield',
      '#title' => t('Username'),
    ),

    // Password field.
    'botr_password' => array(
      '#type' => 'password',
      '#title' => t('Password'),
      '#description' => t('Your password will not be stored in the Drupal database.'),
    ),

    // Submit button.
    'botr_submit_login' => array(
      '#type' => 'submit',
      '#value' => t('Log in'),
    ),
  );

  return $form;
}

/**
 * Handles the input of the login form.
 */
function botr_login_submit($form, &$form_state) {
  $login = $form_state['values']['botr_login'];
  $password = $form_state['values']['botr_password'];

  $keysecret = botr_get_api_key_secret($login, $password);

  if ($keysecret === NULL) {
    drupal_set_message(t('Communications with the Bits on the Run API failed. Please try again later.'), 'error');
  }
  elseif (!isset($keysecret['key'], $keysecret['secret'])) {
    form_set_error('botr_login_fieldset', t('Your login credentials were not accepted. Please try again.'));
  }
  else {
    // Perform the login.
    variable_set('botr_login', $form_state['values']['botr_login']);
    variable_set('botr_api_key', $keysecret['key']);
    variable_set('botr_api_secret', $keysecret['secret']);
  }
}

/**
 * Return an associative array with keys 'key' and 'secret', containing the API
 * key and secret for the account with the specified login credentials.
 *
 * If the credentials are invalid, return an empty array.
 *
 * If the API call failed, return NULL.
 */
function botr_get_api_key_secret($login, $password) {
  require_once 'botr_api.php';

  // Create an API object without key and secret.
  $api = new BotrAPI('', '');
  $params = array(
    'account_login' => $login,
    'account_password' => $password,
  );
  $response = $api->call('/accounts/credentials/show', $params);

  if (!$response) {
    return NULL;
  }
  if ($response['status'] != 'ok') {
    if ($response['status'] == 'error' && $response['code'] == 'NotFound') {
      return array();
    }
    return NULL;
  }

  // No errors.
  return array(
    'key' => $response['account']['key'],
    'secret' => $response['account']['secret'],
  );
}

/**
 * Describes the logout form.
 */
function botr_logout() {
  $form = array();

  $form['#submit'][] = 'botr_logout_submit';

  // A fieldset with only the logout button.
  $form['botr_logout_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Log out'),

    'botr_logout' => array(
      '#type' => 'submit',
      '#title' => t('Log out current user'),
      '#value' => t('Log out @login',
        array(
          '@login' => variable_get('botr_login', ''),
        )),
    ),
  );

  return $form;
}

/**
 * Handles input from the logout form.
 */
function botr_logout_submit($form, &$form_state) {
  // XSS protection is done by the Drupal form API.
  variable_set('botr_login', '');
  variable_set('botr_api_key', '');
  variable_set('botr_api_secret', '');
}

/**
 * Describes the settings form.
 */
function botr_settings() {
  $form = array();

  $form['#validate'][] = 'botr_settings_validate';

  $form['botr_widget_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Widget settings'),

    'botr_nr_videos' => array(
      '#type' => 'textfield',
      '#title' => t('Number of videos'),
      '#default_value' => variable_get('botr_nr_videos', BOTR_NR_VIDEOS),
      '#size' => 2,
      '#description' => t('The number of videos to show in the widget on the <em>edit post</em> page.'),
      '#required' => FALSE,
    ),
  );

  return system_settings_form($form);
}

/**
 * Validates the input of the settings form.
 */
function botr_settings_validate($form, &$form_state) {
  if (!preg_match('/^\d+$/', $form_state['values']['botr_nr_videos'])) {
    form_set_error('botr_nr_videos', t('Number of videos should be a positive integer number.'));
  }
}

/**
 * Either return the login form or the logout and settings forms.
 */
function botr_settings_page() {
  if (variable_get('botr_login') == NULL) {
    // Not logged in; display the login form.
    return drupal_get_form('botr_login');
  }
  // Logged in; display the logout and settings forms.
  return array(
    drupal_get_form('botr_logout'),
    drupal_get_form('botr_settings'),
  );
}

/**
 * Describes the signup form.
 */
function botr_signup() {
  $form = array();

  $form['#validate'][] = 'botr_signup_validate';
  $form['#submit'][] = 'botr_signup_submit';

  $form['botr_signup_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sign up'),

    'botr_email' => array(
      '#type' => 'textfield',
      '#title' => t('E-mail address'),
      '#description' => t('Your e-mail address will become your Bits on the Run username.'),
    ),

    'botr_password' => array(
      '#type' => 'password',
      '#title' => t('Password'),
    ),

    'botr_password_repeat' => array(
      '#type' => 'password',
      '#title' => t('Password (repeat)'),
      '#description' => t('Your password will not be stored in the Drupal database.'),
    ),

    'botr_agree' => array(
      '#type' => 'checkbox',
      '#title' => t('I agree to the !toc_link and !privacy_link.', array(
        '!toc_link' => l(t('terms of service'), 'https://www.longtailvideo.com/bits-on-the-run/terms-and-conditions/'),
        '!privacy_link' => l(t('privacy policy'), 'https://www.longtailvideo.com/bits-on-the-run/privacy-policy/'),
      )),
    ),

    'botr_submit_signup' => array(
      '#type' => 'submit',
      '#value' => t('Sign up'),
    ),
  );

  return $form;
}

/**
 * Validates the input of the signup form.
 */
function botr_signup_validate($form, &$form_state) {
  $email = $form_state['values']['botr_email'];
  $password = $form_state['values']['botr_password'];
  $password_repeat = $form_state['values']['botr_password_repeat'];
  $agree = $form_state['values']['botr_agree'];

  if (!preg_match('/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i', $email)) {
    form_set_error('botr_email', t('The e-mail address does not seem to be valid.'));
  }
  if ($password == '') {
    form_set_error('botr_password', t('Passwords may not be empty.'));
  }
  if ($password != $password_repeat) {
    form_set_error('botr_password_repeat', t('The two given passwords do not match.'));
  }
  if (!$agree) {
    form_set_error('botr_agree', t('You must agree to our terms of service and privacy policy before signing up.'));
  }
}

/**
 * Handles the input of the signup form.
 */
function botr_signup_submit($form, &$form_state) {
  require_once 'botr_signup_api.php';

  $email = $form_state['values']['botr_email'];
  $password = $form_state['values']['botr_password'];
  $response = botr_request_signup($email, $password);

  if (!$response) {
    drupal_set_message(t('Communications with the Bits on the Run signup API failed. Please try again later.'), 'error');
  }
  elseif ($response['status'] != 'ok') {
    if ($response['status'] == 'error') {
      drupal_set_message(t($response['message']), 'error');
    }
    else {
      drupal_set_message(t('An error occurred in the Bits on the Run signup API. Please try again later.'), 'error');
    }
  }
  else {
    variable_set('botr_login', $email);
    variable_set('botr_api_key', $response['account']['key']);
    variable_set('botr_api_secret', $response['account']['secret']);
    // Redirect to the settings page.
    $form_state['redirect'] = 'admin/config/media/botr';
    drupal_set_message(t('Signup was successful. You are now logged in.'));
  }
}

/**
 * Get a dashboard login URL for the current user. Automatically log in
 * if allowed.
 */
function botr_delegate_login_url($redirect = NULL) {
  if (!user_access('open botr dashboard')) {
    return NULL;
  }

  $key = variable_get('botr_api_key');
  $secret = variable_get('botr_api_secret');

  if (!$key || !$secret) {
    return NULL;
  }

  if ($redirect) {
    $redirect = urlencode($redirect);
  }

  $timestamp = REQUEST_TIME + 60;
  $string_to_sign = 'account_key=' . $key . '&auth_key=' . $key;

  if ($redirect) {
    $string_to_sign .= '&redirect=' . $redirect;
  }

  $string_to_sign .= '&timestamp=' . $timestamp . $secret;
  $signature = sha1($string_to_sign);

  $url  = 'http://' . BOTR_DASHBOARD_URL . '/delegate_login/' . '?account_key=' . $key . '&auth_key=' . $key;

  if ($redirect) {
    $url .= '&redirect=' . $redirect;
  }

  $url .= '&signature=' . $signature . '&timestamp=' . $timestamp;

  return $url;
}

/**
 * Redirect the user to his dashboard. Log in if allowed.
 */
function botr_open_dashboard() {
  // Create a signed url.
  $url = botr_delegate_login_url();

  if (!$url) {
    $url = 'http://' . DASHBOARD_URL . '/login/';
  }

  // Perform an automatic redirect.
  drupal_goto($url);
}

/**
 * Implements hook_menu().
 */
function botr_menu() {
  $items = array();

  // Add the settings / login / logout page as admin/config/media/botr
  $items['admin/config/media/botr'] = array(
    // Note: no t() in title and description here.
    'title' => 'Bits on the Run',
    'description' => 'Settings for the Bits on the Run module.',
    'page callback' => 'botr_settings_page',
    'access arguments' => array('configure botr'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Add the signup screen as admin/config/media/botr
  $items['admin/config/media/botr/signup'] = array(
    // Note: no t() in title and description here.
    'title' => 'Bits on the Run',
    'description' => 'Sign up for Bits on the Run.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('botr_signup'),
    'access arguments' => array('configure botr'),
    'type' => MENU_LOCAL_TASK,
  );

  // Add the BotR dashboard login as botr/dashboard
  $items['botr/dashboard'] = array(
    // Note: no t() in title and description here.
    'title' => 'Bits on the Run dashboard login',
    'description' => 'Open the Bits on the Run dashboard and automatically log in.',
    'page callback' => 'botr_open_dashboard',
    'access arguments' => array('open botr dashboard'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function botr_form_node_type_form_alter(&$form, &$form_state) {
  // Add the widget configuration to the node type form.
  // Allows users to use the widget in custom node types.
  if (!isset($form['#node_type']) || empty($form['#node_type']->type)) {
    return;
  }

  $form['botr'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bits on the Run widget settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );

  $form['botr']['botr_target'] = array(
    '#title' => t('Insertion target for Bits on the Run widget'),
    '#type' => 'textfield',
    '#default_value' => variable_get('botr_target_' . $form['#node_type']->type, BOTR_TARGET),
    '#description' => t('The name of the field into which the Bits on the Run widget will insert video quicktags. Defaults to the <i>body</i> field. Leave this field empty if you want to hide the widget.'),
  );

  $form['botr']['botr_weight'] = array(
    '#title' => t('Weight of the Bits on the Run widget'),
    '#type' => 'weight',
    '#default_value' => variable_get('botr_weight_' . $form['#node_type']->type, BOTR_WEIGHT),
    '#description' => t('The heavier items will sink and the lighter items will be positioned nearer the top.'),
  );
}

/**
 * Implements hook_form_alter().
 */
function botr_form_alter(&$form, &$form_state, $form_id) {
  // Add the widget and target identifier to the node form.
  global $base_url;

  if (!isset($form['#node']) || empty($form['#node']->type)) {
    return;
  }

  $node_type = $form['#node']->type;
  $target = variable_get('botr_target_' . $node_type, BOTR_TARGET);

  if (empty($target)) {
    return;
  }

  if (isset($form[$target])) {
    // The widget uses jQuery UI Draggable.
    drupal_add_library('system', 'ui.draggable');

    // Add the 'botr_widget_target' class to the form element, so the JavaScript
    // knows where the tags inserted by the widget should go.
    if (!isset($form[$target]['#attributes'])) {
      $form[$target]['#attributes'] = array();
    }
    $form[$target]['#attributes']['class'][] = 'botr_widget_target';

    $api_key = variable_get('botr_api_key', '');
    $api_secret = variable_get('botr_api_secret', '');

    if ($api_key && $api_secret) {
      $form['botr'] = array(
        '#type' => 'fieldset',
        '#title' => t('Bits on the Run'),
        '#collapsible' => TRUE,
        '#access' => user_access('use botr'),
        '#attributes' => array('id' => 'botr-video-widget'),
        '#post_render' => array('botr_insert_widget'),
        '#weight' => variable_get('botr_weight_' . $node_type, BOTR_WEIGHT),
        '#collapsed' => TRUE,
        '#pre_render' => array('botr_prerender_widget'),
      );
    }
    else {
      drupal_set_message(t("Don't forget to log in on the !settings_link.",
        array(
          '!settings_link' => l(t('Bits on the Run settings page'),
            'admin/config/media/botr'),
        )),
        'warning');
    }
  }
}

/**
 * Executed before rendering the widget.
 */
function botr_prerender_widget($form) {
  global $base_url;

  $path = drupal_get_path('module', 'botr');

  drupal_add_js($path . '/misc/upload.js');
  drupal_add_js($path . '/misc/logic.js');

  $content_mask = variable_get('botr_content_mask', BOTR_CONTENT_MASK);
  $nr_videos = variable_get('botr_nr_videos', BOTR_NR_VIDEOS);

  $settings = array(
    'botr' => array(
      'plugin_url' => "$base_url/$path",
      'content_mask' => $content_mask,
      'nr_videos' => intval($nr_videos),
    ),
  );

  drupal_add_js($settings, 'setting');
  drupal_add_css($path . '/misc/botr-style.css');

  return $form;
}

/**
 * Implements hook_theme().
 */
function botr_theme() {
  return array(
    'botr_widget' => array(
      'arguments' => array(),
      'template' => 'botr-widget',
    ),
  );
}

/**
 * Insert the widget into the contents.
 */
function botr_insert_widget($content, $element) {
  // Insert widget after legend tag.
  $needle = "</legend>";
  $pos = strpos($content, $needle);
  $pos = $pos === FALSE ? drupal_strlen($content) : $pos + drupal_strlen($needle);
  $html = theme('botr_widget');
  return drupal_substr($content, 0, $pos) . $html . drupal_substr($content, $pos);
}

/**
 * Implements hook_help().
 */
function botr_help($path, $arg) {
  switch ($path) {
    case 'admin/help#botr':
      // Return a formatted version of the module README.txt
      return '<tt>' . check_markup(file_get_contents(dirname(__FILE__) . '/README.txt')) . '</tt>';
  }
}
