<?php

/**
 * @file
 * Anti bot module to prevent bots from using forms on your site.
 *
 * BotScout Module version 7.x.1.0 for Drupal anti-bot module.
 *
 * Copyright (C) 2015  Jon "Acetolyne" Langlois.
 */

/**
 * Implements hook_help().
 */
function botscout_help($path, $arg) {
  switch ($path) {
    case 'admin/help#botscout':
      return t('Botscout is a module that prevents bots from doing 
things like registering on your site and sending site-wide contact forms. This 
module brings the Botscout functionality to Drupal. more info available at 
www.botscout.com. Botscout Drupal Module by Jonathan Acetolyne Langlois');
  }
}

/**
 * Implements hook_permission().
 */
function botscout_permission() {
  return array(
    'administrate botscout' => array(
      'title' => t('Administer BotScout'),
      'description' => t('Perform administration for BotScout'),
    ),
  );
}

/**
 * Implements hook_admin().
 */
function botscout_admin() {
  $form = array();
  $form['botscout_ip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable IP filtering'),
    '#default_value' => variable_get('botscout_ip', FALSE),
    '#description' => t('Allows botscout to block bots based on the users IP 
address.'),
    '#required' => FALSE,
  );

  $form['botscout_name'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable username filtering'),
    '#default_value' => variable_get('botscout_name', FALSE),
    '#description' => t('Allows botscout to block bots based on the users 
name.'),
    '#required' => FALSE,
  );

  $form['botscout_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable email filtering'),
    '#default_value' => variable_get('botscout_email', FALSE),
    '#description' => t('Allows botscout to block bots based on the users email 
address.'),
    '#required' => FALSE,
  );

  $form['botscout_contact'] = array(
    '#type' => 'checkbox',
    '#title' => t('Protect the site-wide contact form'),
    '#default_value' => variable_get('botscout_contact', FALSE),
    '#description' => t('enables botscout to check users when they submit a 
site-wide contact form.'),
    '#required' => FALSE,
  );

  $form['botscout_footer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show the BotScout footer on your site'),
    '#default_value' => variable_get('botscout_footer', TRUE),
    '#description' => t('Shows a footer on your site that says "This site 
protected by BotScout"'),
    '#required' => FALSE,
  );

  $form['botscout_alert'] = array(
    '#type' => 'checkbox',
    '#title' => t('Alert by email when bot is blocked'),
    '#default_value' => variable_get('botscout_alert', FALSE),
    '#description' => t('Sends an email to the site administrator. It will use 
the 
email set below'),
    '#required' => FALSE,
  );

  $form['botscout_adminemail'] = array(
    '#type' => 'textfield',
    '#size' => 35,
    '#title' => t('the email address to alert you at'),
    '#default_value' => variable_get('botscout_adminemail', NULL),
    '#description' => t('Sets the email for the alerts to go to when a bot is 
blocked'),
    '#required' => FALSE,
  );

  $form['botscout_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter your API KEY'),
    '#size' => 25,
    '#default_value' => variable_get('botscout_key', NULL),
    '#description' => t('Entering an API key from botscout.net allows you to 
check 
unlimited registrations per day without one 20 is the limit per day please 
visit 
www.botscout.com for more info'),
    '#required' => FALSE,
  );

  $form['botscout_count'] = array(
    '#type' => 'textfield',
    '#title' => t('BotScout has stopped this many bots from submitting forms 
since 
you installed it'),
    '#size' => 25,
    '#description' => t('shows how many bots the BotScout has blocked on your 
site'),
    '#required' => FALSE,
    '#attributes' => array('readonly' => 'readonly'),
    '#default_value' => variable_get('botscout_count', 0),
    '#disabled' => TRUE,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_menu().
 */
function botscout_menu() {
  $items = array();
  $items['admin/config/people/botscout'] = array(
    'title' => 'BotScout Settings',
    'description' => 'Block spammers based on name, email, and ip.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('botscout_admin'),
    'access arguments' => array('administrate botscout'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['botscout'] = array(
    'title' => 'BotScout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('botscout_block_view', 'botscout'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Submits information and returns a value that tells us if the user is a bot.
 *
 * Takes the information we have decided to check for known bot information and
 * returns a value indicating if the information is known to be associated with
 * a known bot's information.
 *
 * @string $register
 *   returns Y if submitted information returns a match against known bot
 *   information. Returns N if there was no matching information found.
 */
function botscout_check($form, &$form_state) {
  // Clears the filter variable in case this is not the first time trying.
  $filter = '';
  // Clears the keyfilter variable in case this is not the first time trying.
  $keyfilter = '';
  // Gets the name provided from the form that the user has submitted.
  $name = $form_state['values']['name'];
  // Gets the email provided from the form that the user has submitted.
  $mail = $form_state['values']['mail'];
  // Checks if we have email alerts set on our settings page.
  $alert = variable_get('botscout_alert', FALSE);
  // Gets the ip address of the person submitting the form.
  $ip = ip_address();
  // Checks if we have enabled checking usernames against bot data.
  $namechk = variable_get('botscout_name', FALSE);
  // Checks if we have enabled checking emails against bot data.
  $emailchk = variable_get('botscout_email', FALSE);
  // Checks if we have enabled checking the ip address against bot data.
  $ipchk = variable_get('botscout_ip', FALSE);
  // Gets the botscout key which is set on the settings page.
  $key = variable_get('botscout_key', NULL);
  // Sets the variable that holds the query string. This string is used to
  // check a database for bot information.
  $apiquery = 'http://www.botscout.com/test/?multi';
  // Adds NAME checking to the query if it is enabled.
  if ($namechk == TRUE) {
    $filter .= '&name=';
    $filter .= $name;
  }
  // Adds EMAIL checking to the query if it is enabled.
  if ($emailchk == TRUE) {
    $filter .= '&mail=';
    $filter .= $mail;
  }
  // Adds IP checking to query if it is enabled.
  if ($ipchk == TRUE) {
    $filter .= '&ip=';
    $filter .= $ip;
  }
  $apiquery .= $filter;
  // Adds the API key if one is set.
  if ($key != NULL) {
    $keyfilter .= '&key=';
    $keyfilter .= $key;
    $apiquery .= $keyfilter;
  }
  // If we are not filtering then return that they are not a bot and set a
  // warning in our logs.
  if ($filter == '') {
    $register = 'N';
    watchdog('botscout event', 'The BotScout module is enabled but no filters 
are enabled all users will pass the check');
  }
  // If we have a filter set then send the request to the botscout server
  // to get a response.
  if ($filter != '') {
    // Sends the query to the botscout api and gets the return value ready for
    // processing.
    $return_data = drupal_http_request($apiquery);
    $returned_data = $return_data->data;
    $botdata = explode('|', $returned_data);
    $register = $botdata[0];
  }
  // Sets up and sends and email if they are a bot and we have email alerts
  // enabled.
  if ($alert == TRUE && $register == 'Y') {
    botscout_mail($name, $mail);
  }
  if ($register == 'N') {
    watchdog('botscout event', 'A user has passed the bot check');
  }
  elseif ($register == 'Y') {
    watchdog('botscout event', 'A bot was stopped from creating an account');
    $count = variable_get('botscout_count');
    variable_set('botscout_count', ++$count);
    form_set_error('', t('It appears you have been reported as a bot so the 
form was not sent. If you are not a bot please contact the admin or get 
removed from the list at www.botscout.com'));
  }
  if (($register != 'Y') && ($register != 'N')) {
    watchdog('botscout event', 'Bad response from botscout server the response 
received was %response.', array('%response' => $returned_data));
    form_set_error('', t('There was a problem checking your information the 
admin has been informed.'));
  }
}
/**
 * Emails an alert to the email provided on the botscout administration page.
 */
function botscout_mail($name, $mail) {
  $ip = ip_address();
  $adminemail = variable_get('botscout_adminemail', NULL);
  $sitename = variable_get('site_name', NULL);
  $token = microtime();
  $subject = 'A bot was blocked on your website ' . $sitename;
  $msg = 'A bot tried to register, but was stopped from doing so.' . "\n\n";
  $msg .= 'Bot Name: ' . $name . "\n";
  $msg .= 'Bot Email: ' . $mail . "\n";
  $msg .= 'IP Address: ' . $ip . "\n";
  $from = 'BotScout Module on ' . $sitename;
  $message = array(
    'id' => 'botscout_' . $token,
    'to' => $adminemail,
    'subject' => $subject,
    'body' => array($msg),
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
    ),
  );

  $system = drupal_mail_system('botscout', $token);
  $message = $system->format($message);
  if ($system->mail($message)) {
    return TRUE;
  }
  else {
    RETURN FALSE;
  }
}

/**
 * Implements hook_block_info().
 */
function botscout_block_info() {
  $blocks['botscout_footer'] = array(
    'info' => 'BotScout Footer',
    'cache' => DRUPAL_CACHE_PER_USER,
    'status' => TRUE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'region' => 'footer',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function botscout_block_view($delta = 'botscout_footer') {
  $block = array();
  $showfooter = variable_get('botscout_footer', TRUE);
  if ($showfooter == TRUE) {
    $block_content = '<center>This site protected by ';
    $block_content .= '<a href="http://www.botscout.com" target="_blank">';
    $block_content .= 'Botscout';
    $block_content .= '</a></center>';
    $block['content'] = $block_content;
    $block['subject'] = '';
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function botscout_form_user_register_form_alter(&$form, $form_state) {
  $form['#validate'][] = 'botscout_check';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function botscout_form_contact_site_form_alter(&$form, $form_state) {
  $blockcontact = variable_get('botscout_contact', FALSE);
  if ($blockcontact == '1') {
    $form['#validate'][] = 'botscout_check';
  }
}
