<?php

/**
 * @file
 * Provides a batched rule set component to rules.
 *
 * @see rules_batch.rules.inc
 */

/**
 * Batch operation which will take over execution of each rule.
 */
function rules_batch_batch_loop_process(RulesBatchLoop $rule, RulesState $state, &$context) {

  $param_info = $rule->pluginParameterInfo();
  $list = $rule->getPublicArgument('list', $param_info['list'], $state);
  $item_var_info = $rule->listItemInfo();
  $item_var_name = $rule->settings['item:var'];

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current'] = $list->getIterator();
    $context['sandbox']['max'] = $list->count();
  }

  $item = $list[$context['sandbox']['current']->key()];

  rules_log('Processing %name.', array('%name' => $rule->getPluginName()), RulesLog::INFO, $rule);
  // Use a separate state so variables are available in the loop only.
  $state->addVariable($item_var_name, $item, $item_var_info);
  $rule->process($state);
  $state->cleanUp($rule);

  $context['results'][] = $context['sandbox']['current']->key();
  $context['sandbox']['current']->next();
  $context['sandbox']['progress']++;

  if ($context['sandbox']['current']->valid()) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch 'finished' callback
 */
function rules_batch_batch_loop_fininshed($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = count($results) .' processed.';
    $message .= theme('item_list', $results);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
  }
  drupal_set_message($message);
}
