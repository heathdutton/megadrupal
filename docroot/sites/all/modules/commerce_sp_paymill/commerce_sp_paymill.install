<?php

/**
 * @file
 * Installation file for commerce sp paymill.
 */


/**
 * Implements hook_schema().
 */
function commerce_sp_paymill_schema() {
  $schema = array();

  $schema['commerce_sp_paymill_sub'] = array(
    'description' => 'Stores Paymill subscription info.',
    'fields' => array(
      'id' => array(
        'description' => 'The internal primary identifier for the subscription.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this subscription.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'order_id' => array(
        'description' => 'The {commerce_order}.order_id.',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ),
      'subscription_id' => array(
        'description' => 'The Paymill subscription id.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => '255',
      ),
      'status' => array(
        'description' => 'The status of this subscription, 1=active, 0=inactive.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'payment_count' => array(
        'description' => 'The number of payment that have been made for this subscriptions.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the subscription was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the subscription was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'order_id' => array('order_id'),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
  );
  return $schema;
}

/**
* Implements hook_uninstall().
*/
function commerce_sp_paymill_uninstall() {
  $webhook_test_id = variable_get('commerce_sp_paymill_test_webhooks_id', '');
  $webhook_live_id = variable_get('commerce_sp_paymill_live_webhooks_id', '');
  if (!empty($webhook_test_id)) {
    commerce_sp_paymill_api_webhook_delete($webhook_test_id, 'test');
  }
  if (!empty($webhook_live_id)) {
    commerce_sp_paymill_api_webhook_delete($webhook_live_id, 'live');
  }
  // Remove the site-wide account settings.
  variable_del('commerce_sp_paymill_test_private_key');
  variable_del('commerce_sp_paymill_test_public_key');
  variable_del('commerce_sp_paymill_live_private_key');
  variable_del('commerce_sp_paymill_live_public_key');
  variable_del('commerce_sp_paymill_mode');
  variable_del('commerce_sp_paymill_capture_mode');
  variable_del('commerce_sp_paymill_webhook_key');
  variable_del('commerce_sp_paymill_test_webhooks_id');
  variable_del('commerce_sp_paymill_live_webhooks_id');
}

/**
 * Adds payment_count field to database table. Initial value for existing
 * subscriptions is set to 1.
 */
function commerce_sp_paymill_update_7100(&$sandbox) {
  $field_defintion = array(
    'description' => 'The number of payment that have been made for this subscriptions.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('commerce_sp_paymill_sub', 'payment_count', $field_defintion);
  db_update('commerce_sp_paymill_sub')->fields(array('payment_count' => 1))->condition('payment_count', 0)->execute();
}
