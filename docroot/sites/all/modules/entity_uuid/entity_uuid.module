<?php

/**
 * @file
 * Main module functions for the entity uuid module.
 */

/**
 * Implements hook_menu().
 */
function entity_uuid_menu() {
  $items['admin/config/system/entity-uuid'] = array(
    'title' => 'UUID for any entities',
    'description' => 'Enable/disable uuid field for any entities in system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_uuid_settings_form'),
    'access arguments' => array('administer uuid'),
    'file' => 'entity_uuid.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Helper function that returns entity info for all supported another entity
 * relevant for UUID functionality.
 */
function entity_uuid_get_entity_info() {
  $infos = entity_get_info();
  $uuid_info = array();
  $core_entities = array_keys(uuid_get_core_entity_info());

  foreach ($infos as $entity_type => $info) {
    // Skip all entities, that is suported by UUID.
    if (in_array($entity_type, $core_entities)) {
      continue;
    }

    if (isset($info['uuid']) && !empty($info['uuid'])) {
      $uuid_info[$entity_type] = array(
        'base table' => $info['base table'],
        'entity keys' => array(
          'uuid' => 'uuid',
        ),
      );
      // If module support revision, set info revision for module.
      if (isset($info['revision table']) && isset($info['entity keys']['revision'])) {
        $uuid_info[$entity_type]['revision table'] = $info['revision table'];
        $uuid_info[$entity_type]['entity keys']['revision uuid'] = 'vuuid';
      }
    }
  }

  return $uuid_info;
}

/**
 * Implements hook_entity_info_alter().
 */
function entity_uuid_entity_info_alter(&$info) {
  $setting = variable_get('entity_uuid', array());

  if (!empty($setting)) {
    // Check for all settings in system.
    foreach ($setting as $entity_type => $uuid) {
      if ($uuid) {
        $info[$entity_type]['uuid'] = TRUE;
      }
    }
  }

  // Add settings uuid for 'entity keys' subarray for entity_info.
  foreach ($info as $entity_type => $entity_info) {
    if (!empty($entity_info['uuid'])) {
      $info[$entity_type]['entity keys']['uuid'] = 'uuid';
      if (isset($entity_info['revision table']) && isset($entity_info['entity keys']['revision'])) {
        $info[$entity_type]['entity keys']['revision uuid'] = 'vuuid';
      }
    }
  }
}

/**
 * Helper function for install_uuid_fields.
 * Install the 'uuid' and 'vuuid' fields into entity tables where needed.
 */
function _entity_uuid_create_uuid_fields() {
  module_load_include('install', 'uuid', 'uuid');
  $field = uuid_schema_field_definition();

  foreach (entity_uuid_get_entity_info() as $entity_type => $info) {
    if (!db_field_exists($info['base table'], $info['entity keys']['uuid'])) {
      db_add_field($info['base table'], $info['entity keys']['uuid'], $field);
      db_add_index($info['base table'], $info['entity keys']['uuid'], array($info['entity keys']['uuid']));
    }
    if (!empty($info['revision table']) && !empty($info['entity keys']['revision uuid'])) {
      if (!db_field_exists($info['revision table'], $info['entity keys']['revision uuid'])) {
        db_add_field($info['revision table'], $info['entity keys']['revision uuid'], $field);
        db_add_index($info['revision table'], $info['entity keys']['revision uuid'], array($info['entity keys']['revision uuid']));
      }
    }
  }
}

/**
 * Create field and sync data.
 */
function entity_uuid_install_uuid_fields() {
  _entity_uuid_create_uuid_fields();
  _uuid_install_uuid_fields();
  uuid_sync_all();
}
