<?php
/**
 * @file
 * Test for custom paths.
 */

/**
 * Class CommerceCheckoutPathsValidPathsAbstract.
 */
abstract class CommerceCheckoutPathsValidPathsAbstract extends CommerceBaseTestCase {
  /**
   * Protected property of privileged user.
   *
   * @var object
   *   Object of privileged user.
   */
  protected $siteAdmin;

  /**
   * Protected property of created order.
   */
  protected $order;

  /**
   * Protected property of commerce_checkout_paths_checkout path being set.
   */
  protected $path;

  /**
   * Required setup processes before run a tests.
   */
  public function setUp() {
    $modules = parent::setUpHelper('ui', array('commerce_checkout_paths'));
    parent::setUp($modules);
    $this->siteAdmin = $this->createUserWithPermissionHelper(array(
      'site admin',
      'store admin',
      'store customer',
    ));
    $this->drupalLogin($this->siteAdmin);
  }

  /**
   * Helper method which generates dummy content.
   */
  protected function createDummyContent() {
    // Create a dummy product and product display content type.
    $this->createDummyProductDisplayContentType();
    $product = $this->createDummyProduct();
    $this->assertProductCreated($product);

    // Create a dummy Order with a "Checkout: Checkout" status.
    $this->order = $this->createDummyOrder($this->siteAdmin->uid, array($product->product_id => 1));
    $this->assertProductAddedToCart($this->order, $product, $this->siteAdmin);
  }

  /**
   * Helper method which edits admin settings.
   *
   * @param string $path
   *   Path string.
   */
  protected function editAdminSettings($path) {
    $this->path = $path;
    $edit = array(
      'commerce_checkout_paths_checkout' => $this->path,
    );
    // Set a custom value to commerce checkout page "Checkout" path.
    $this->drupalPost('admin/commerce/config/commerce-checkout-paths', $edit, t('Save configuration'));
  }

  /**
   * Helper method which runs path checking itself.
   */
  protected function checkPath() {
    // Check custom path and replace it to original path if custom path is exist
    // in the commerce_checkout_pages() array.
    $this->checkCustomPath();
    $this->drupalGet($this->path);
    // Check valid original path.
    $this->assertTrue(drupal_valid_path($this->path), 'Path for "Checkout page"(' . $this->path . ') is valid!');
  }

  /**
   * Helper method to change custom path into the correct path.
   */
  protected function checkCustomPath() {
    foreach (_commerce_checkout_paths_get_checkout_pages_list() as $name => $value) {
      // Get custom path which has been set in admin config page.
      // Returned FALSE, if it doesn't set.
      $custom_path = variable_get('commerce_checkout_paths_' . $name, FALSE);
      // Check if custom path has been set.
      if ($custom_path !== FALSE) {
        // Check if URL path is equal to our custom path.
        if ($this->path == $custom_path) {
          $temp_path = 'checkout/' . $this->order->order_id . '/' . $name;
          // Check if path is valid.
          if (drupal_valid_path(token_replace($temp_path, array('user' => $this->siteAdmin->uid)))) {
            $this->path = $temp_path;
            break;
          }
        }
      }
    }
  }

}

/**
 * Class CommerceCheckoutPathsValidPaths.
 *
 * Tests for custom paths validation.
 */
class CommerceCheckoutPathsValidPaths extends CommerceCheckoutPathsValidPathsAbstract {
  /**
   * Setting a test info.
   *
   * @return array
   *   An array with an info data.
   */
  public static function getInfo() {
    return array(
      'name'        => 'Valid path test',
      'description' => 'Check if custom paths are valid.',
      'group'       => 'Commerce Checkout Paths',
    );
  }

  /**
   * Test custom paths validation.
   */
  public function testValidPaths() {
    $this->createDummyContent();
    $this->editAdminSettings('shop/checkout');
    $this->checkPath();
  }

}

/**
 * Class CommerceCheckoutPathsValidPathsWithTokens.
 *
 * Tests for custom paths with tokens validation.
 */
class CommerceCheckoutPathsValidPathsWithTokens extends CommerceCheckoutPathsValidPathsAbstract {
  /**
   * Setting a test info.
   *
   * @return array
   *   An array with an info data.
   */
  public static function getInfo() {
    return array(
      'name'        => 'Valid path with tokens test',
      'description' => 'Check if custom paths with tokens are valid.',
      'group'       => 'Commerce Checkout Paths',
    );
  }

  /**
   * Test custom paths validation.
   */
  public function testValidPathsWithTokens() {
    $this->createDummyContent();
    $this->editAdminSettings('shop/checkout/[site:current-user:uid]');
    $this->checkPath();
  }

}
