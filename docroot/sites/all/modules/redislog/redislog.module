<?php

define("REDISLOG_KEY", "drupal:watchdog");

/**
 * Implements hook_menu().
 */
function redislog_menu() {
  $items = array();

  $items['admin/reports/redislog'] = array(
    'title' => 'Recent log messages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redislog_overview'),
    'access arguments' => array('access site reports'),
    'weight' => -1,
    'file' => 'redislog.admin.inc',
  );

  $items['admin/reports/redislog/view'] = array(
    'title' => 'Logs',
    'description' => 'View events that have recently been logged.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/reports/redislog/configure'] = array(
    'title' => 'Configure',
    'description' => 'Configure Redis Logging settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redislog_admin_settings'),
    'access arguments' => array('administer redislog'),
    'file' => 'redislog.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/reports/redislog/event/%/%'] = array(
    'title' => 'Details',
    'page callback' => 'redislog_event',
    'page arguments' => array(4, 5),
    'access arguments' => array('access site reports'),
    'file' => 'redislog.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function redislog_permission() {
  $permissions = array(
    'administer redislog' => array(
      'title' => t('Administer Redis Logging'),
      'description' => t('Allows to administer Redis Logging module.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_watchdog().
 */
function redislog_watchdog(array $entry) {
  $redis = Redis_Client::getClient();

  // The user object may not exist in all conditions, so 0 is substituted if needed.
  $entry['uid'] = isset($entry['user']->uid) ? $entry['user']->uid : 0;
  $entry['hostname'] = $entry['ip'];
  $entry['location'] = $entry['request_uri'];

  $type = drupal_html_class($entry['type']);

  $key = implode(':', array(
    REDISLOG_KEY,
    $type,
    $entry['severity'],
    $entry['uid'],
    $entry['timestamp']
  ));

  $entry['key'] = $key;

  $redis->lPush($key, serialize($entry));

  $ttl = variable_get('redislog_ttl_' . $type, FALSE) ?: variable_get('redislog_ttl', 60 * 60 * 24);
  $redis->setTimeout($key, $ttl); // Set TTL.
}

/**
 * Get types of messages.
 *
 * @return array
 */
function redislog_get_types() {
  $types = array_map(function($key) {
    $key = explode(':', $key);
    return $key[2];
  }, Redis_Client::getClient()->keys(REDISLOG_KEY . ':*'));

  return array_unique($types);
}

/**
 * Get log messages.
 *
 * @return array
 */
function redislog_get_multiple() {
  $redis = Redis_Client::getClient();
  $logs = array();

  foreach ($redis->keys(REDISLOG_KEY . ':*') as $key) {
    foreach ($redis->lRange($key, 0, -1) as $id => $message) {
      $message = unserialize($message);
      $message['id'] = $id;

      $logs[] = $message;
    }
  }

  return $logs;
}
