<?php

/**
 * @file
 * Presents users with an option to create another node of the same type after a
 * node is added.
 */

/**
 * Implements hook_help().
 */
function node_clone_onsave_help($path, $arg) {
  if ($path == "admin/help#node_clone_onsave") {
    return '<p>' . t("Presents users with an option to create a cloned node after a node is added.") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function node_clone_onsave_permission() {
  return array(
    'administer node clone on save' => array(
      'title' => t('Administer Node Clone on Save'),
      'description' => t('Configure content types for Node Clone on Save'),
    ),
    'use node clone on save' => array(
      'title' => t('Use Node Clone on Save'),
      'description' => t('Use the "Save and Clone..." link or button to create additional content'),
    ),
  );
}

/**
 * Check if we should display the Clone another verbiage on a node.
 */
function node_clone_onsave_access($node) {
  if (!node_access('create', $node->type)) {
    return FALSE;
  }
  if (arg(2) == "edit" &&
      !variable_get('node_clone_onsave_tab_edit_' . $node->type, FALSE)) {
    return FALSE;
  }

  if ($node && variable_get('node_clone_onsave_tab_' . $node->type, FALSE)
      && user_access('use node clone on save')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Alter content type settings to add our options.
 */
function node_clone_onsave_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['#node_type'])) {
    $form['node_clone_onsave_display'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node Clone on Save settings'),
      '#collapsible' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['node_clone_onsave_display']['node_clone_onsave_button'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display Save and Clone button on node add form.'),
      '#default_value' => variable_get('node_clone_onsave_button_' . $form['#node_type']->type, FALSE),
      '#description' => t('Enable this checkbox if you want to provide a "Save and Clone" button on the node add form for your users.'),
    );
    $form['node_clone_onsave_display']['node_clone_onsave_allow_recurse'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display Save and Clone button on clone form.'),
      '#default_value' => variable_get('node_clone_onsave_allow_recurse_' . $form['#node_type']->type, TRUE),
      '#description' => t('Enable this checkbox if you want to provide a "Save and Clone" button on the clone url save form for your users. This allows a streamlined workflow to cloning a node many times. For some workflows this could be confusing.'),
    );
    $form['node_clone_onsave_display']['node_clone_onsave_message'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display the Clone another message after node creation.'),
      '#default_value' => variable_get('node_clone_onsave_message_' . $form['#node_type']->type, FALSE),
      '#description' => t('Enable this checkbox if you want to show a "Clone another..." message after creating a new node.'),
    );
    $form['node_clone_onsave_display']['node_clone_onsave_keep_query'] = array(
      '#type' => 'checkbox',
      '#title' => t('Keep URL query params'),
      '#default_value' => variable_get('node_clone_onsave_keep_query_' . $form['#node_type']->type, FALSE),
      '#description' => t('Enable this checkbox if you want to keep the query parameters while using the "Save and Clone" button. Useful if you already have a destination set.'),
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function node_clone_onsave_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['#node_edit_form'])) {
    $node_type = $form['type']['#value'];

    if (user_access('use node clone on save')) {
      if (variable_get('node_clone_onsave_button_' . $node_type, FALSE)) {
        $form['actions']['node_clone_onsave'] = array(
          '#type' => 'submit',
          '#value' => t('Save and Clone'),
          '#weight' => -41,
          '#submit' => array(
            'node_form_submit',
            'node_clone_onsave_node_form_submit',
          ),
        );
        // Dont show the save and clone button if we're on the Clone page,
        // as we'd loose our edits.
        $url = request_path();
        $clone_form_path = substr_compare($url, 'clone', -strlen('clone'), strlen('clone')) === 0;
        if ($clone_form_path && !variable_get('node_clone_onsave_allow_recurse_' . $node_type, FALSE) && isset($form['actions']['node_clone_onsave'])) {
          unset($form['actions']['node_clone_onsave']);
        }
      }

      if (variable_get('node_clone_onsave_message_' . $node_type, FALSE)) {
        $form['actions']['submit']['#submit'][] = 'node_clone_onsave_node_form_message_submit';
      }
    }
  }
}

/**
 * Submit handler for the 'Save and Clone' button.
 *
 * This allows a redirect to be set if this was the button pressed.
 */
function node_clone_onsave_node_form_submit($form, &$form_state) {
  $node = _node_clone_onsave_get_node_from_form_state($form_state);
  if ($node) {
    _node_clone_onsave_quelch_message($node);
    theme('node_clone_onsave_button_message', array('nid' => $node->nid));

    $node_type = $form['type']['#value'];

    if (variable_get('node_clone_onsave_keep_query_' . $node_type, FALSE)) {
      $form['actions']['submit']['#submit'][] = 'node_clone_onsave_node_form_message_submit';
      $query = "?";
      foreach ($_GET as $key => $value) {
        if ($key != 'q') {
          $query .= $key . "=" . $value . "&";
        }
      }
      $_GET['destination'] = _node_clone_onsave_node_clone_path($node) . $query;
    }
    else {
      unset($_GET['destination']);
      $form_state['redirect'] = _node_clone_onsave_node_clone_path($node);
    }
  }
}

/**
 * Submit handler if the normal submit button, if node has 'message' enabled.
 */
function node_clone_onsave_node_form_message_submit($form, &$form_state) {
  $node = _node_clone_onsave_get_node_from_form_state($form_state);
  if ($node) {
    _node_clone_onsave_quelch_message($node);
    theme('node_clone_onsave_message_message', array('node' => $node));
  }
}


/**
 * Internal helper function to get the node from a $form_state.
 */
function _node_clone_onsave_get_node_from_form_state(&$form_state) {
  // Check the node is in the form state - if it isn't, something has gone very
  // wrong; best not to continue.
  if (!isset($form_state['node'])) {
    return FALSE;
  }

  // Return the node.
  return $form_state['node'];
}

/**
 * Implements hook_theme().
 */
function node_clone_onsave_theme() {
  return array(
    'node_clone_onsave_message_message' => array(
      'variables' => array('node' => NULL),
    ),
    'node_clone_onsave_button_message' => array(
      'variables' => array('nid' => NULL),
    ),
  );
}

/**
 * Displays a message and link to the added/edited node after submit.
 */
function theme_node_clone_onsave_message_message($variables) {
  $node = $variables['node'];

  $t_args = array(
    '@type' => node_type_get_name($node),
    '@cloneurl' => url(_node_clone_onsave_node_clone_path($node)),
    '%title' => $node->title,
  );
  $node_clone_onsave_message = t('@type %title has been created. You may <a href="@cloneurl">clone another @type</a>.', $t_args);
  drupal_set_message($node_clone_onsave_message);
  return array();
}

/**
 * Displays a message and link to the added/edited node after submit.
 */
function theme_node_clone_onsave_button_message($variables) {
  $node = node_load($variables['nid']);
  $t_args = array(
    '@type' => node_type_get_name($node),
    '!title' => l(drupal_placeholder($node->title), 'node/' . $node->nid, array('html' => TRUE)),
  );
  drupal_set_message(t('@type !title has been created.', $t_args));
  return array();
}

/**
 * Remove the default Drupal node creation message.
 */
function _node_clone_onsave_quelch_message($node) {
  if (!isset($_SESSION['messages']['status'])) {
    return 0;
  }

  $t_args = array(
    '@type' => node_type_get_name($node),
    '%title' => $node->title,
  );
  $remove[] = t('@type %title has been created.', $t_args);

  $messages = array_diff($_SESSION['messages']['status'], $remove);

  if ($messages) {
    $_SESSION['messages']['status'] = $messages;
  }
  else {
    $_SESSION['messages']['status'] = array();
  }
}

/**
 * Return the best possible path to provide to the user to clone the node.
 */
function _node_clone_onsave_node_clone_path($node) {
  $path = 'node/' . $node->nid . '/clone/confirm';
  return $path;
}
