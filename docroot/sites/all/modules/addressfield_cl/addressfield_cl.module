<?php

/**
 * @file
 * Defines plugins for Chile address.
 */

/**
 * Implements hook_permission().
 */
function addressfield_cl_permission() {
  return array(
    'admin addressfield chile' => array(
      'title' => t('Administer the address format for chile.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function addressfield_cl_menu() {
  $items['admin/config/regional/addressfield-cl'] = array(
    'title'             => 'Addressfield Chile',
    'description'       => 'Configure the address format for Chile.',
    'access arguments'  => array('admin addressfield chile'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('addressfield_cl_admin_form'),
    'file'              => 'addressfield_cl.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_ctools_plugin_directory().
 */
function addressfield_cl_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}


/**
 * Reads a file which has the geographic information.
 *
 * @return mixed
 *   An structure from a json that contains the information.
 */
function addressfield_cl_get_division_geographic(){
  static $data = NULL;

  if ($data != NULL) {
    return $data;
  }

  $filename = drupal_get_path('module', 'addressfield_cl') . '/data/data.json';
  $handle   = fopen($filename, "r");
  $contents = fread($handle, filesize($filename));

  fclose($handle);

  $data = json_decode($contents);

  return $data;
}


/**
 * Get all options to be used in forms.
 *
 * @return array
 *   An array containing 3 keys: regiones, provincias, communes.
 */
function addressfield_cl_get_options() {
  $data = addressfield_cl_get_division_geographic();
  $select_text = t('- Select -');
  $communes    = array("00000" => $select_text);
  $provincias = array("00000" => $select_text);
  $regiones   = array("00000" => $select_text);

  foreach ($data as $id_region => $region) {
    $regiones[$id_region] = $region->name;

    foreach ($region->provinces as $id_provincia => $provincia) {
      $provincias[$id_provincia] = $provincia->name;

      foreach ($provincia->communes as $id_comuna => $comuna) {
        $communes[$id_comuna] = $comuna->name;
      }
    }
  }

  asort($communes);
  asort($provincias);

  return array(
    'regions'     => $regiones,
    'provinces'   => $provincias,
    'communes'    => $communes,
  );
}


/**
 * Get communes from region.
 *
 * @param int $id_region
 *   The region ID.
 *
 * @return array
 *   An array with all communes from a region.
 */
function addressfield_cl_get_options_communes_by_region($id_region) {
  $data = addressfield_cl_get_division_geographic();
  $options = array();
  if (isset($data->{$id_region})) {
    foreach ($data->{$id_region}->provinces as $province) {
      foreach ($province->communes as $id_commune => $commune) {
        $options[$id_commune] = $commune->name;
      }
    }
  }

  return $options;
}


/**
 * Get communes from province.
 *
 * @param int $id_province
 *   The province ID.
 *
 * @return array
 *   An array with all communes from a province.
 */
function addressfield_cl_get_options_communes_by_province($id_province) {
  $data = addressfield_cl_get_division_geographic();
  $region = _addressfield_cl_get_region_from($id_province, $data);
  $options = array();
  if (!empty($region)) {
    foreach ($region->provinces->{$id_province}->communes as $id_commune => $commune) {
      $options[$id_commune] = $commune->name;
    }
  }

  return $options;
}


/**
 * Get provinces from region.
 *
 * @param int $id_region
 *   The region ID.
 *
 * @return array
 *   An array with all provinces from a region.
 */
function addressfield_cl_get_options_provinces_by_region($id_region) {
  $data = addressfield_cl_get_division_geographic();
  $options = array();
  if (isset($data->{$id_region})) {
    foreach ($data->{$id_region}->provinces as $id_province => $province) {
      $options[$id_province] = $province->name;
    }
  }

  return $options;
}


/**
 * Get all regions.
 *
 * @return array
 *   An array with all regions.
 */
function addressfield_cl_get_options_regions() {
  $data = addressfield_cl_get_division_geographic();
  $options = array();
  foreach ($data as $id_region => $region) {
    $options[$id_region] = $region->name;
  }

  return $options;
}


/**
 * Gets the region and its information from the id of one of his children.
 *
 * @param int $id
 *   The id of some province or commune.
 * @param object $data
 *   All structure of data.
 *
 * @return object
 *   Get all structure from a region.
 */
function _addressfield_cl_get_region_from($id, $data) {
  $id_region = substr($id, 0, 2);
  if (!isset($data->{$id_region})) {
    return FALSE;
  }

  return $data->{$id_region};
}


/**
 * Process the element.
 */
function addressfield_cl_format_address_process($element) {
  $element['#limit_validation_errors'] = array($element['#parents']);

  return $element;
}


/**
 * Update the value in the form.
 */
function addressfield_cl_format_address_validate_change_region_commune($element, &$form_state) {
  if ($element['#array_parents'] == $form_state['triggering_element']['#array_parents']
      && end($form_state['triggering_element']['#array_parents']) == 'administrative_area') {
    // Get the base #parents for this address form.
    $base_parents = array_slice($element['#parents'], 0, -1);
    // Set the new values in the form.
    drupal_array_set_nested_value($form_state['values'], array_merge($base_parents, array('locality')), NULL);
  }
}
