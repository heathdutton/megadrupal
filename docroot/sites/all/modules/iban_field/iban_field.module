<?php

/**
 * @file
 * Iban Field module, provides IBAN validation.
 *
 * This module allows users to create a field which
 * will be validated as an IBAN number.
 */

// Define the max length for iban field.
define('IBAN_FIELD_MAX_LENGTH', 31);

/**
 * Implements hook_menu().
 */
function iban_field_menu() {
  // IBAN settings.
  $items['admin/config/iban'] = array(
    'title' => 'IBAN',
    'description' => 'IBAN specific settings.',
    'access arguments' => array('access administration pages'),
    'file' => 'iban_field.admin.inc',
  );

  $items['admin/config/iban/settings'] = array(
    'title' => 'IBAN',
    'description' => 'Configure settings for IBAN validation.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iban_field_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'iban_field.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_field_info().
 */
function iban_field_field_info() {
  $field = array(
    'iban_field' => array(
      'label' => t('IBAN'),
      'description' => 'Field containing IBAN number',
      'settings' => array('max_length' => IBAN_FIELD_MAX_LENGTH),
      'instance_settings' => array(
        'text_processing' => 0,
      ),
      'default_widget' => 'iban_field',
      'default_formatter' => 'iban_field_default',
    ),
  );

  return $field;
}

/**
 * Implements hook_field_schema().
 */
function iban_field_field_schema($field) {
  return array(
    'columns' => array(
      'iban_field' => array(
        'type' => 'varchar',
        'length' => IBAN_FIELD_MAX_LENGTH,
        'not null' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function iban_field_field_widget_info() {
  return array(
    'iban_field' => array(
      'label' => t('IBAN'),
      'field types' => array('iban_field'),
    ),
  );
}

/**
 * Get all enabled countries.
 */
function iban_field_enabled_countries() {
  $results = db_select('iban_field_countries', 'i')
    ->fields('i', array(
      'country_code',
      'country_name',
    ))
    ->condition('country_enabled', 1, '=')
    ->orderBy('country_code', 'ASC')
    ->execute();

  return $results;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function iban_field_field_instance_settings_form($field, $instance) {
  $enabled_countries = iban_field_enabled_countries();

  $default_value = array();
  $default_set = FALSE;
  if (isset($instance['settings']['iban_field_country_settings']['iban_field_enabled_countries'])) {
    $default_value = $instance['settings']['iban_field_country_settings']['iban_field_enabled_countries'];
    $default_set = TRUE;
  }

  $options = array();
  foreach ($enabled_countries as $option) {
    $options[$option->country_code] = $option->country_name;
    if (!$default_set) {
      $default_value[$option->country_code] = $option->country_code;
    }
  }

  $form['iban_field_country_settings'] = array(
    '#type' => 'fieldset',
    '#description' => t('Select which countries IBAN numbers should be validated as valid.'),
    '#title' => t('IBAN country settings'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  $form['iban_field_country_settings']['iban_field_enabled_countries'] = array(
    '#type' => 'checkboxes',
    '#title' => t('IBAN Banks by country'),
    '#options' => $options,
    '#description' => t("Select which countries' IBAN numbers should be allowed."),
    '#default_value' => $default_value,
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function iban_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['iban_field'] = array(
    '#type' => 'textfield',
    '#title' => t('IBAN'),
    '#default_value' => isset($items[$delta]['iban_field']) ? $items[$delta]['iban_field'] : '',
    '#required' => $element['#required'],
  );

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function iban_field_field_is_empty($iban) {
  if (empty($iban) || $iban == '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_validate().
 */
function iban_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {

    // Strip all whitespaces.
    $iban = preg_replace('/\s+/', '', $item['iban_field']);
    if (!iban_field_field_is_empty($iban)) {
      $allowed_countries = $instance['settings']['iban_field_country_settings']['iban_field_enabled_countries'];

      if (!iban_field_validate_country($iban, $allowed_countries)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'iban_field_country_invalid',
          'message' => t('IBAN number is from an not-supported country.'),
        );
      }
      if (!iban_field_validate_length($iban)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'iban_field_country_length_invalid',
          'message' => t("IBAN length does not match with the countries' IBAN length."),
        );
      }
      if (!iban_field_validate_iban($iban)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'iban_field_iban_invalid',
          'message' => t('Invalid IBAN number.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function iban_field_field_formatter_info() {
  return array(
    'iban_field_default' => array(
      'label' => t('IBAN'),
      'field types' => array('iban_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function iban_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'iban_field_default':
      foreach ($items as $delta => $item) {
        if (isset($item['iban_field'])) {
          $element[$delta]['#markup'] = $item['iban_field'];
        }
      }
      break;
  }
  return $element;
}

/**
 * Validate if country is in allowed countrie list.
 */
function iban_field_validate_country($iban, $allowed_countries) {
  $country = substr($iban, 0, 2);

  if (in_array(strtoupper($country), $allowed_countries) && $allowed_countries[$country] != '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Validate if iban matches the correct length for the country.
 */
function iban_field_validate_length($iban) {
  $iban_length = strlen($iban);
  $country = strtoupper(substr($iban, 0, 2));

  $result = db_select('iban_field_countries', 'i')
    ->fields('i', array('iban_length'))
    ->condition('country_code', $country, '=')
    ->execute()
    ->fetchAssoc();

  $required_length = $result['iban_length'];

  if ($iban_length == $required_length) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_error().
 */
function iban_field_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_placeholder_info().
 */
function iban_field_field_placeholder_info() {
  return array(
    'iban_field' => t('IBAN'),
  );
}

/**
 * Validates given IBAN number.
 */
function iban_field_validate_iban($iban) {
  $iban = strtolower($iban);
  // Move the first 4 characters to the end of the string.
  $move = substr($iban, 4) . substr($iban, 0, 4);
  $moved_array = str_split($move);
  $new = "";

  // Array for converting letters to their numeric value.
  $convert_table = array(
    'a' => 10,
    'b' => 11,
    'c' => 12,
    'd' => 13,
    'e' => 14,
    'f' => 15,
    'g' => 16,
    'h' => 17,
    'i' => 18,
    'j' => 19,
    'k' => 20,
    'l' => 21,
    'm' => 22,
    'n' => 23,
    'o' => 24,
    'p' => 25,
    'q' => 26,
    'r' => 27,
    's' => 28,
    't' => 29,
    'u' => 30,
    'v' => 31,
    'w' => 32,
    'x' => 33,
    'y' => 34,
    'z' => 35,
  );

  // Convert all letters to a number (a = 10, b = 11, etc).
  foreach ($moved_array as $key => $value) {
    if (!is_numeric($moved_array[$key])) {
      $moved_array[$key] = $convert_table[$moved_array[$key]];
    }
    // Replace the letter in the iban.
    $new .= $moved_array[$key];
  }

  // Validate the new iban number with the division 97 mod.
  if (bcmod($new, '97') == 1) {
    return TRUE;
  }

  return FALSE;
}
