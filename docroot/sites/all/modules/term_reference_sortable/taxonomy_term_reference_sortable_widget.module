<?php

/**
 * @file
 * Define the term reference field form (Term reference sortable widget)
 */

/**
 * Implements hook_field_widget_info().
 */
function taxonomy_term_reference_sortable_widget_field_widget_info() {
  return array(
    'taxonomy_term_reference_sortable_widget' => array(
      'label' => 'Term reference sortable',
      'field types' => array('taxonomy_term_reference'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function taxonomy_term_reference_sortable_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value_key = key($field['columns']);

  $type = '';
  if ($instance['widget']['type'] == 'taxonomy_term_reference_sortable_widget') {
    $type = 'select';
  }

  $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
  $required = $element['#required'];
  $has_value = isset($items[0][$value_key]);
  $properties = _options_properties($type, $multiple, $required, $has_value);

  $entity_type = $element['#entity_type'];
  $entity = $element['#entity'];
  $module_path = drupal_get_path('module', 'taxonomy_term_reference_sortable_widget');
  // Prepare the list of options.
  $options = _options_get_options($field, $instance, $properties, $entity_type, $entity);

  // Put current field values in shape.
  $default_value = _options_storage_to_form($items, $options, $value_key, $properties);

  switch ($type) {
    case 'select':
      $element += array(
        '#type' => 'select',
        '#default_value' => $default_value,
        // Do not display a 'multiple' select box if there is only one option.
        '#multiple' => $multiple && count($options) > 1,
        '#options' => $options,
        '#theme' => 'taxonomy_term_reference_sortable_widget_select',
        '#field_suffix' => theme('taxonomy_term_reference_sortable_widget_list', array(
          'options' => $options,
          'default_value' => $default_value,
          'field' => $field,
          'required' => $required,
          'element' => $element
        )),
      );
      $element['#attached']['css'] = array($module_path . '/css/taxonomy_term_reference_sortable_widget.css');
      $element['#after_build'] = array('taxonomy_term_reference_sortable_widget_widget_after_build');
      break;
  }

  $element += array(
    '#value_key' => $value_key,
    '#element_validate' => array('options_field_widget_validate'),
    '#properties' => $properties,
  );

  return $element;
}

/**
 * Form element after build, adding js library.
 *
 * @param array $form_element
 *   Element array
 *
 * @return array
 *   Form element
 */
function taxonomy_term_reference_sortable_widget_widget_after_build($form_element) {
  drupal_add_library('system', 'ui.sortable');
  drupal_add_js(drupal_get_path('module', 'taxonomy_term_reference_sortable_widget') . '/js/taxonomy_term_reference_sortable_widget.js');
  return $form_element;
}

/**
 * Implements hook_theme().
 */
function taxonomy_term_reference_sortable_widget_theme(&$existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['taxonomy_term_reference_sortable_widget_list'] = array(
    'variables' => array(
      'options' => array(),
      'default_value' => array(),
      'field' => array(),
    ),
  );
  $hooks['taxonomy_term_reference_sortable_widget_select'] = array(
    'render element' => 'element',
  );

  return $hooks;
}

/**
 * Provide sortable block html for jQuery ui.sortable.
 *
 * @param array $vars
 *   Full list of field options
 *
 * @return string
 *   HTML for ui.sortable
 */
function theme_taxonomy_term_reference_sortable_widget_list($vars) {
  $field = $vars['field'];

  if ($field['cardinality'] > 1 || $field['cardinality'] != FIELD_CARDINALITY_UNLIMITED) {
    $max_elements_in_id = ' max_elem="' . $field['cardinality'] . '"';
  }
  else {
    $max_elements_in_id = '';
  }

  $sortable_classes = $vars['required'] ? ' required' : '';

  $output = '
    <div class="sortable-lists ' . $sortable_classes . '"' . $max_elements_in_id . '>
    <ul id="sortable1" class="sortable1 connectedSortable">';

  $output .= '</ul>
    <ul id="sortable2" class="sortable2 connectedSortable"> ';
  $output .= '
    </ul>
  </div>
  <div class="clearfix"></div>';

  return $output;
}

/**
 * Returns HTML for a select form element based on original theme_select().
 *
 * It is possible to group options together; to do this, change the format of
 * $options to an associative array in which the keys are group labels, and the
 * values are associative arrays in the normal $options format.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #options, #description, #extra,
 *     #multiple, #required, #name, #attributes, #size.
 *
 * @ingroup themeable
 */
function theme_taxonomy_term_reference_sortable_widget_select($variables) {
  $element = $variables['element'];
  element_set_attributes($element, array('id', 'name', 'size'));
  _form_set_class($element, array('form-select'));

  return '<select' . drupal_attributes($element['#attributes']) . '>' . taxonomy_term_reference_sortable_widget_form_select_options($element) . '</select>';
}

/**
 * Converts a select form element's options array into HTML based on
 * original form_select_options().
 *
 * @param array $element
 *   An associative array containing the properties of the element.
 * @param boolean $choices
 *   Mixed: Either an associative array of items to list as choices, or an
 *   object with an 'option' member that is an associative array. This
 *   parameter is only used internally and should not be passed.
 *
 * @return string
 *   An HTML string of options for the select form element.
 */
function taxonomy_term_reference_sortable_widget_form_select_options($element, $choices = NULL) {
  if (!isset($choices)) {
    $choices = $element['#options'];
  }
  // array_key_exists() accommodates the rare event where $element['#value']
  // is NULL.
  // isset() fails in this situation.
  $value_valid = isset($element['#value']) || array_key_exists('#value', $element);
  $value_is_array = $value_valid && is_array($element['#value']);
  $value_is_single = $value_valid && !$element['#multiple'] && is_string($element['#value']);
  $options = '';
  $selected_options = array();
  foreach ($choices as $key => $choice) {
    if (is_array($choice)) {
      $options .= '<optgroup label="' . $key . '">';
      $options .= form_select_options($element, $choice);
      $options .= '</optgroup>';
    }
    elseif (is_object($choice)) {
      $options .= form_select_options($element, $choice->option);
    }
    else {
      $key = (string) $key;
      if ($value_valid && (!$value_is_array && (string) $element['#value'] === $key || ($value_is_array && in_array($key, $element['#value'])))) {
        $selected = ' selected="selected"';
        $selected_options[check_plain($key)] = '<option value="' . check_plain($key) . '"' . $selected . '>' . check_plain($choice) . '</option>';
      }
      else {
        $selected = '';
        $options .= '<option value="' . check_plain($key) . '"' . $selected . '>' . check_plain($choice) . '</option>';
      }
    }
  }
  $selected_options_string = '';
  if ($value_valid && $value_is_array) {
    foreach ($element['#value'] as $key) {
      if (isset($selected_options[$key])) {
        $selected_options_string .= $selected_options[$key];
      }
    }
  } else if($value_valid && $value_is_single) {
    if (isset($selected_options[$element['#value']])) {
        $selected_options_string .= $selected_options[$element['#value']];
      }
  }

  return $selected_options_string . $options;
}
