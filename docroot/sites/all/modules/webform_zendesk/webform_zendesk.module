<?php

/**
 * @file
 * Modules file for Webform ZenDesk Integration.
 * @author Gokul N K <gokul@azrisolutions.com>
 */

/**
 * Implements hook_menu().
 */
function webform_zendesk_menu() {
  $items = array();
  $items['admin/config/services/webform-zendesk'] = array(
    'title' => 'Zendesk Credentials',
    'description' => 'Configure Zendesk credentials.',
    'access arguments' => array('administer zendesk form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_zendesk_settings_form'),
    'file' => 'webform_zendesk.admin.inc',
    'file path' => drupal_get_path('module', 'webform_zendesk'),
  );
  $items['node/%webform_menu/webform/webform-zendesk-mapping'] = array(
    'title' => 'ZenDesk Field Mapping',
    'page callback' => 'webform_zendesk_components',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer webforms'),
    'weight' => 5,
  );
  return $items;
}

/**
 * Callback function for Webform Field Mapping page.
 */
function webform_zendesk_components($node) {
  $webform = $node->webform;
  $components = $webform['components'];
  $form_field = array();
  foreach ($components as $component) {
    $form_field[$component['form_key']] = $component['name'];
  }
  $form = drupal_get_form('webform_zendesk_mapping_form', $form_field, $node->nid);
  return $form;
}

/**
 * Returns form Element.
 */
function webform_zendesk_mapping_form($form, &$form_state, $components, $node_id) {
  $saved_mapping = webform_zendesk_get_saved_mapping($node_id);
  $form['mapping_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Post the submissions for this Webform to ZenDesk'),
    '#default_value' => isset($saved_mapping['mapping_enabled']) ? $saved_mapping['mapping_enabled'] : 0,
    '#description' => t('When enabled the submissions for this webform will be submitted to ZenDesk for ticket creation.'),
  );

  $zendesk_fields = webform_zendesk_get_all_fields();
  foreach ($zendesk_fields as $field_key => $field_label) {
    $form['zendesk_field_' . $field_key] = array(
      '#type' => 'item',
      '#markup' => $field_label,
    );
    $field_key_default = isset($saved_mapping['webform_field_mapping_' . $field_key]) ? $saved_mapping['webform_field_mapping_' . $field_key] : '';
    $form['webform_field_mapping_' . $field_key] = array(
      '#type' => 'select',
      '#options' => $components,
      '#required' => TRUE,
      '#default_value' => $field_key_default,
    );
  }
  $form['webform_nid'] = array(
    '#type' => 'value',
    '#value' => $node_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );
  $form['components'] = array(
    '#type' => 'hidden',
    '#value' => $components,
  );
  $form['#theme'] = 'webform_zendesk_mapping_form';
  return $form;
}

/**
 * Validate function for webform_zendesk_mapping_form.
 */
function webform_zendesk_mapping_form_validate($form, &$form_state) {
  // Check Email fields is mapped to email id only.
}

/**
 * Submit function for webform_zendesk_mapping_form.
 */
function webform_zendesk_mapping_form_submit($form, &$form_state) {
  $nid = $form_state['values']['webform_nid'];
  $mapping_enabled = $form_state['values']['mapping_enabled'];
  db_merge('webform_zendesk_mapping')
    ->key(array('nid' => $nid))
    ->fields(array(
        'value' => serialize($form_state['values']),
        'status' => $mapping_enabled,
      ))
    ->execute();
  drupal_set_message(t('The mapping has been successfully saved.'));
}

/**
 * Implements hook_theme().
 */
function webform_zendesk_theme() {
  $theme['webform_zendesk_mapping_form'] = array(
    'render element' => 'form',
  );
  return $theme;
}

/**
 * Renders form to theme table.
 */
function theme_webform_zendesk_mapping_form($vars) {
  $output = '';
  $form = $vars['form'];
  $head = array('ZenDesk Fields', 'Webform Fields');
  $rows = array();
  $zendesk_fields = webform_zendesk_get_all_fields();
  foreach ($zendesk_fields as $field_name => $field_label) {
    $fields = array();
    $fields[] = drupal_render($form['zendesk_field_' . $field_name]);
    $fields[] = drupal_render($form['webform_field_mapping_' . $field_name]);
    $rows[] = $fields;
  }
  $options = array(
    'header' => $head,
    'rows' => $rows,
  );

  $output .= drupal_render_children($form['mapping_enabled']);
  $output .= theme('table', $options);
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Function to return the save mapping.
 */
function webform_zendesk_get_saved_mapping($node_id) {
  $result = db_query('SELECT wzm.value
                        FROM {webform_zendesk_mapping} wzm
                        WHERE wzm.nid = :nid',
                          array(':nid' => $node_id));
  $value = $result->fetchField();
  return (unserialize($value));
}

/**
 * Implements hook_webform_submission_presave().
 */
function webform_zendesk_webform_submission_presave($node, $submission) {
  $saved_mapping = webform_zendesk_get_saved_mapping($node->nid);
  if (isset($saved_mapping['mapping_enabled']) && $saved_mapping['mapping_enabled'] == 1) {
    $webform_submission = array();
    foreach ($node->webform['components'] as $i => $component) {
      $webform_submission[$component['form_key']] = $submission->data[$i][0];
    }
    $ticket = array(
      'subject' => $webform_submission[$saved_mapping['webform_field_mapping_subject']],
      'comment' => array(
        'body' => $webform_submission[$saved_mapping['webform_field_mapping_comment_body']],
      ),
      'requester' => array(
        'name' => $webform_submission[$saved_mapping['webform_field_mapping_requester_name']],
        'email' => $webform_submission[$saved_mapping['webform_field_mapping_requester_email']],
      ),
    );
    webform_zendesk_api_call(array('ticket' => $ticket), 'tickets.json');
  }
}

/**
 * Function to return the fields from Zendesk.
 */
function webform_zendesk_get_all_fields() {
  $mapping_options = array(
    'subject' => t('Title'),
    'comment_body' => t('Body'),
    'requester_email' => t('Requester Email'),
    'requester_name' => t('Requester Name'),
  );
  return $mapping_options;
}

/**
 * Code reused from https://www.drupal.org/project/zendesk_forms module.
 *
 * Performs a call to the Zendesk API with the given data.
 *
 * @param array $data
 *   The data to be sent to the API endpoint.
 * @param string $command
 *   The command to call at the endpoint.Will be a filename like "tickets.json".
 *
 * @return array
 *   The json response array.
 */
function webform_zendesk_api_call($data = array(), $command = 'tickets.json', $type = "POST") {
  $json = json_encode($data);
  $ch = curl_init();
  $zendesk_key = variable_get('webform_zendesk_api_key', '');
  $zendesk_url = variable_get('webform_zendesk_url', '');
  $zendesk_user = variable_get('webform_zendesk_user_name', '');
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
  curl_setopt($ch, CURLOPT_URL, $zendesk_url . '/api/v2/' . $command);
  curl_setopt($ch, CURLOPT_USERPWD, $zendesk_user . "/token:" . $zendesk_key);
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $type);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
  curl_setopt($ch, CURLOPT_USERAGENT, 'MozillaXYZ/1.0');
  curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  $output = curl_exec($ch);
  curl_close($ch);
  return json_decode($output);
}
