<?php

define('DOCCHECK_DEFAULT_LANGUAGE', 'com');

define('DOCCHECK_ENCODE_MAGIC', 'DCEC');

/**
 * Implements hook_init().
 */
function doccheck_init() {
  if (variable_get('doccheck_force_mapping_roles')) {
    global $user;
    if ($user->uid) {
      $user = user_load($user->uid);
    }
  }

  drupal_static_reset('drupal_get_destination');
  if (isset($_GET['destination']) && (strpos($_GET['destination'], DOCCHECK_ENCODE_MAGIC) === 0)) {
    $_GET['destination'] = base64_decode(substr($_GET['destination'], strlen(DOCCHECK_ENCODE_MAGIC)));
  }
}

/**
 * Implements hook_theme().
 */
function doccheck_theme() {
  return array(
    'doccheck' => array(
      'variables' => array(
        'keynumber' => NULL,
        'language' => 'com',
        'size' => 'XL',
        'template_name' => '',
        'user_token' => '',
        'session_id' => '',
        'destination' => '',
      ),
    ),
    'doccheck_form_table' => array(
      'render element' => 'element',
    ),
    'doccheck_form_tr' => array(
      'render element' => 'element',
    ),
    'doccheck_form_th' => array(
      'render element' => 'element',
    ),
    'doccheck_form_td' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function doccheck_permission() {
  return array(
    'administer doccheck' => array(
      'title' => t('Administer DocCheck'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function doccheck_menu() {
  $items = array();

  $items['doccheck'] = array(
    'title' => 'DocCheck login',
    'page callback' => 'doccheck_login_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['doccheck/authenticate/%'] = array(
    'title' => '',
    'page callback' => 'doccheck_login_authenticate',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['doccheck/403'] = array(
    'title' => 'Access Denied',
    'page callback' => 'doccheck_403',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/doccheck'] = array(
    'title' => 'DocCheck',
    'page callback' => 'doccheck_user_debug_page',
    'page arguments' => array(1),
    'access arguments' => array('administer doccheck'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'doccheck.pages.userdebug.inc',
    'weight' => 100,
  );

  $items['admin/config/people/doccheck'] = array(
    'title' => 'DocCheck settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('doccheck_admin_form'),
    'access arguments' => array('administer doccheck'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'doccheck.admin.inc',
  );

  $items['admin/config/people/doccheck/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/people/doccheck/keynumbers'] = array(
    'title' => 'Keynumbers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('doccheck_admin_keynumbers_form'),
    'access arguments' => array('administer doccheck'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'doccheck.admin.keynumbers.inc',
  );

  $items['admin/config/people/doccheck/mapping'] = array(
    'title' => 'Mappings',
    'page callback' => 'doccheck_admin_mapping_page',
    'access arguments' => array('administer doccheck'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'doccheck.admin.mapping.inc',
  );

  $items['admin/config/people/doccheck/mapping/%user_role'] = array(
    'title' => 'Role mappings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('doccheck_admin_mapping_role_form', 5),
    'access arguments' => array('administer doccheck'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'doccheck.admin.mapping.inc',
  );

  $items['admin/config/people/doccheck/redirect'] = array(
    'title' => 'Login redirects',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('doccheck_admin_redirect_form'),
    'access arguments' => array('administer doccheck'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'doccheck.admin.redirect.inc',
  );

  if (variable_get('doccheck_authentication_method', 'uniquekey') === 'profession') {
    $items['admin/config/people/doccheck/professionauth'] = array(
      'title' => 'Profession authentication',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('doccheck_admin_profession_auth_form'),
      'access arguments' => array('administer doccheck'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'doccheck.admin.profauth.inc',
    );
  }

  if (variable_get('doccheck_log_get_array', FALSE)) {
    $items['admin/reports/doccheck'] = array(
      'title' => 'DocCheck logs',
      'page callback' => 'doccheck_log_page',
      'access arguments' => array('administer doccheck'),
      'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/reports/doccheck/%user'] = array(
      'title' => 'DocCheck logs',
      'page callback' => 'doccheck_log_page',
      'page arguments' => array(3),
      'access arguments' => array('administer doccheck'),
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function doccheck_menu_alter(&$items) {
  if (variable_get('doccheck_disable_normal_registration')) {
    $items['user/register']['access callback'] = 'doccheck_user_register_access';
  }
}

/**
 * Overridden user/register access function.
 */
function doccheck_user_register_access() {
  return !empty($_SESSION['doccheck']) && user_register_access();
}

/**
 * Implements hook_block_info().
 */
function doccheck_block_info() {
  return array(
    'doccheck' => array(
      'info' => t('DocCheck login block'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function doccheck_block_view() {
  global $user;
  module_load_include('data.inc', 'doccheck');
  $l = doccheck_get_language(DOCCHECK_DEFAULT_LANGUAGE);

  if (db_query('SELECT 1 FROM {authmap} WHERE uid = :uid', array(':uid' => $user->uid))->fetchField()) {
    return array();
  }

  return array(
    'subject' => t('DocCheck login'),
    'content' => theme('doccheck', array(
      'keynumber' => doccheck_get_active_keynumber(),
      'language' => $l,
      'size' => variable_get('doccheck_block_template_size'),
      'template_name' => variable_get('doccheck_block_template_name'),
      'user_token' => $user->uid ? drupal_get_token('doccheck_login') : '',
      'session_id' => session_id(),
      'destination' => _doccheck_get_destination(),
    )),
  );
}

/**
 * Implements hook_user_load().
 */
function doccheck_user_load($users) {
  if (variable_get('doccheck_force_mapping_roles')) {
    foreach ($users as $account) {
      $roles = user_roles(TRUE);
      $rids = _doccheck_get_mapped_roles_for_user($account);
      foreach ($rids as $rid) {
        if (empty($account->roles[$rid])) {
          db_insert('users_roles')
            ->fields(array(
              'uid' => $account->uid,
              'rid' => $rid,
            ))
            ->execute();
          $account->roles[$rid] = $roles[$rid];
        }
      }
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function doccheck_user_presave(&$edit, $account, $category) {
  if (isset($edit['devel_generate']) && $edit['devel_generate']) {
    module_load_include('data.inc', 'doccheck');
    $stubs = doccheck_get_profile_field_stubs();
    foreach ($stubs as $name => $def) {
      // Simulate missing user data too.
      $edit[$name] = $def['type'] == 'selection' ? $def['options'][array_rand($def['options'])] : user_password(16);
      if (mt_rand(0, 12) === 0) {
        $edit[$name] = '';
      }
    }
  }

  $roles = user_roles(TRUE);
  $rids = _doccheck_get_mapped_roles_for_user((object) $edit);

  if ($rids) {
    foreach ($rids as $rid) {
      if (isset($roles[$rid])) {
        $edit['roles'][$rid] = $roles[$rid];
      }
    }
  }
}

function _doccheck_get_mapped_roles_for_user($account) {
  $rids = array();

  // Check for profession and activity mappings
  if (!empty($account->dc_beruf) && !empty($account->dc_activity)) {
    $rid_result = db_query('SELECT rid FROM {doccheck_mapping} WHERE profession = :profession AND activity = :activity', array(
      ':profession' => $account->dc_beruf,
      ':activity' => $account->dc_activity,
    ))->fetchCol();
    $rids += drupal_map_assoc($rid_result);
  }
  // Check for profession only mappings
  if (!empty($account->dc_beruf)) {
    $rid_result = db_query('SELECT rid FROM {doccheck_mapping} WHERE profession = :profession AND activity = :activity', array(
      ':profession' => $account->dc_beruf,
      ':activity' => 'Any',
    ))->fetchCol();
    $rids += drupal_map_assoc($rid_result);
  }

  return $rids;
}

/**
 * Implements hook_user_insert().
 */
function doccheck_user_insert(&$edit, $account, $category) {
  if (isset($edit['uniquekey'])) {
    // The user has registered after trying to login via DocCheck.
    if (variable_get('user_email_verification', TRUE)) {
      drupal_set_message(t('Once you have verified your email address, ' .
        'you may log in via DocCheck.'));
    }

    db_insert('authmap')
      ->fields(array(
        'uid' => $account->uid,
        'authname' => $edit['uniquekey'],
        'module' => 'doccheck',
      ))
      ->execute();

    unset($_SESSION['doccheck']);
  }
  else {
    watchdog('doccheck', t('Insering user %uid -> %name without uniquekey'), array(
      '%uid' => $account->uid,
      '%name' => $account->name,
    ), WATCHDOG_INFO);
  }
}

/**
 * Implements hook_form_alter().
 */
function doccheck_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($form_id == 'user_register_form' && isset($_SESSION['doccheck']['values'])) {
    module_load_include('data.inc', 'doccheck');

    // We were unable to auto-register a new user. Prefill the registration
    // form with the values we have.
    $form['account']['name']['#default_value'] = isset($_SESSION['doccheck']['values']['name']) ?
      $_SESSION['doccheck']['values']['name'] : NULL;
    $form['account']['mail']['#default_value'] = isset($_SESSION['doccheck']['values']['mail']) ?
      $_SESSION['doccheck']['values']['mail'] : NULL;
    $form['uniquekey'] = array(
      '#type' => 'value',
      '#value' => $_SESSION['doccheck']['uniquekey'],
    );
    // If user_email_verification is off, hide the password field and just fill
    // with random password to avoid confusion.
    if (!variable_get('user_email_verification', TRUE)) {
      $form['account']['pass']['#type'] = 'hidden';
      $form['account']['pass']['#value'] = user_password();
    }

    $categories = doccheck_get_profile_categories(FALSE);
    foreach ($_SESSION['doccheck']['values'] as $key => $value) {
      if ($value) {
        foreach ($categories as $category) {
          if (isset($form[$category][$key])) {
            $form[$category][$key]['#default_value'] = $value;
          }
        }
      }
    }

    if (variable_get('doccheck_hide_dc_profile_fields', FALSE)) {
      foreach ($categories as $category) {
        $form[$category]['#access'] = FALSE;
      }
    }
  }

  if ($form_id == 'user_profile_form') {
    if (variable_get('doccheck_hide_dc_profile_fields', FALSE) && ($user->uid > 1)) {
      foreach ($form as &$subform) {
        if (is_array($subform) && isset($subform['#type']) && $subform['#type'] == 'fieldset') {
          foreach ($subform as $itemname => &$item) {
            if (strpos($itemname, 'dc_') === 0 && is_array($item)) {
              $item['#access'] = FALSE;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function doccheck_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move doccheck's form alter to the bottom.
    $group = $implementations['doccheck'];
    unset($implementations['doccheck']);
    $implementations['doccheck'] = $group;
  }
  if ($hook == 'user_load') {
    $group = $implementations['doccheck'];
    unset($implementations['doccheck']);
    $implementations['doccheck'] = $group;
  }
}

/**
 * Page callback for 'admin/reports/doccheck'.
 */
function doccheck_log_page($account = NULL) {
  $q = db_select('doccheck_log', 'dl')->extend('PagerDefault')->limit(100);
  $q->fields('dl', array('uid', 'created', 'data', 'post_get'));
  $q->leftJoin('users', 'u', 'dl.uid = u.uid');
  $q->fields('u', array('name'));
  $q->orderBy('created', 'DESC');
  if ($account !== NULL) {
    $q->condition(db_or()
      ->condition('dl.uid', $account->uid)
      ->condition('dl.created', array($account->created - 1, $account->created), 'BETWEEN'));
  }
  $result = $q->execute();
  $rows = array();
  foreach ($result as $res) {
    $rows[] = array(
      'data' => array(
        array(
          'data' => format_date($res->created),
        ),
        array(
          'data' => $res->uid ? l($res->name, "user/{$res->uid}") : t('Anonymous'),
        ),
        array(
          'data' => _doccheck_pretty_print_log_data(unserialize($res->data)),
        ),
        array(
          'data' => _doccheck_log_make_link(unserialize($res->data)),
        ),
        array(
          'data' => $res->post_get ? 'POST' : 'GET',
        ),
      ),
    );
  }
  return array(
    array(
      '#theme' => 'table',
      '#header' => array(
        t('Time'), t('User'), t('Data'), t('Link'), t('Type'),
      ),
      '#rows' => $rows,
    ),
    array(
      '#theme' => 'pager',
    ),
  );
}

/**
 * Tries to pretty print the log data.
 *
 * @param array $data
 *   Logged data.
 *
 * @return string
 *   Pretty printed data.
 */
function _doccheck_pretty_print_log_data(array $data) {
  unset($data['q']);

  // kprint_r is the part of the devel module.
  if (function_exists('kprint_r')) {
    return kprint_r($data, TRUE);
  }

  return check_plain(serialize($data));
}

/**
 * Recreates the login URL as a clickable link from the logged data.
 *
 * @param array $data
 *   Logged data.
 *
 * @return string
 *   HTML link.
 */
function _doccheck_log_make_link(array $data) {
  $q = $data['q'];
  unset($data['q']);
  list(,,$langcode) = explode('/', $q);
  return l(t('Login link'), "doccheck/authenticate/{$langcode}", array(
    'query' => $data,
  ));
}

/**
 * Page callback for doccheck.
 */
function doccheck_login_page() {
  global $user;
  module_load_include('data.inc', 'doccheck');
  $l = doccheck_get_language(DOCCHECK_DEFAULT_LANGUAGE);
  return theme('doccheck', array(
    'keynumber' => doccheck_get_active_keynumber(),
    'language' => $l,
    'size' => variable_get('doccheck_page_template_size'),
    'template_name' => variable_get('doccheck_page_template_name'),
    'user_token' => $user->uid ? drupal_get_token('doccheck_login') : '',
    'session_id' => session_id(),
    'destination' => _doccheck_get_destination(),
  ));
}

/**
 * Page callback for 'doccheck/authenticate'.
 */
function doccheck_login_authenticate($lang = DOCCHECK_DEFAULT_LANGUAGE) {
  global $language_url;
  if (variable_get('doccheck_log_get_array', FALSE)) {
    _doccheck_log_post_get_array();
  }

  if (variable_get('doccheck_shared_secret') && !_doccheck_check_checksum()) {
    drupal_set_message(t('Invalid session key.'), 'error');
    drupal_goto('<front>');
    return;
  }

  module_load_include('data.inc', 'doccheck');

  $drupal_language = doccheck_get_drupal_language($lang);

  if (variable_get('doccheck_force_language', FALSE)) {
    $language_list = language_list('enabled');
    $enabled_languages = reset($language_list);
    if (isset($enabled_languages[$drupal_language])) {
      $language_url = clone($enabled_languages[$drupal_language]);
    }
  }

  $auth_method = variable_get('doccheck_authentication_method', 'uniquekey');
  if (($auth_function = "_doccheck_login_authenticate_{$auth_method}") && function_exists($auth_function)) {
    $auth_function($lang);
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Authenticates a user based on the profession parameter only.
 */
function _doccheck_login_authenticate_profession() {
  $profauth = variable_get('doccheck_profauth', array());
  $profid = filter_input(INPUT_GET, 'dc_profession_id', FILTER_SANITIZE_NUMBER_INT);
  $activityid = filter_input(INPUT_GET, 'dc_activity', FILTER_SANITIZE_NUMBER_INT);
  $id = "{$profid}_{$activityid}";
  if ($profid && !empty($profauth[$id])) {
    $uid = $profauth[$id];
    $account = user_load($uid);
    if ($account) {
      _doccheck_login_account($account);
      return;
    }
  }

  drupal_access_denied();
}

/**
 * Verifies URL checksum.
 *
 * Note: this feature is currently buggy in DocCheck. The service should return
 * our own session ID, but for some reason it returns a completely new.
 *
 * @return bool
 */
function _doccheck_check_checksum() {
  $hash = isset($_GET['session_id_enc']) ? $_GET['session_id_enc'] : NULL;
  $sid = isset($_GET['session_id']) ? $_GET['session_id'] : NULL;
  $secret = variable_get('doccheck_shared_secret');

  if ($hash !== '' && $sid !== '' && $secret !== '') {
    return $hash === md5($sid . $secret);
  }

  return FALSE;
}

/**
 * Helper function to determine the correct destination for login.
 *
 * @return string
 */
function _doccheck_get_destination() {
  $redirects = doccheck_get_redirects();
  $fullurl = url($_GET['q'], array('absolute' => TRUE));
  foreach ($redirects as $pattern => $redirect) {
    if (strpos($fullurl, $pattern) !== FALSE) {
      return $redirect;
    }
  }

  return isset($_GET['destination']) ? $_GET['destination'] : $_GET['q'];
}

/**
 * Helper for page callback for 'doccheck/authenticate'.
 */
function _doccheck_login_authenticate_uniquekey($lang) {
  global $user;

  $drupal_language = doccheck_get_drupal_language($lang);

  $uniquekey = filter_input(INPUT_GET, 'uniquekey', FILTER_SANITIZE_STRING);

  if ($user->uid) {
    $token = filter_input(INPUT_GET, 'user_token', FILTER_SANITIZE_STRING);
    if (drupal_valid_token($token, 'doccheck_login')) {
      db_merge('authmap')
        ->key(array('authname' => $uniquekey))
        ->fields(array(
          'uid' => $user->uid,
          'module' => 'doccheck',
        ))
        ->execute();
    }
    else {
      watchdog('doccheck', 'Invalid token for user %uid:%name', array(
        '%uid' => $user->uid,
        '%name' => $user->name,
      ), WATCHDOG_WARNING);
      if (($destination = (isset($_GET['destination']) ? base64_decode($_GET['destination']) : NULL))) {
        drupal_goto($destination);
      }
      else {
        drupal_access_denied();
      }
      return;
    }
  }

  $edit = _doccheck_login_authenticate_fetch_input();

  $edit['uniquekey'] = $uniquekey;
  $_SESSION['doccheck']['uniquekey'] = $uniquekey;

  if ($mail = filter_input(INPUT_GET, 'dc_email', FILTER_VALIDATE_EMAIL)) {
    $edit['mail'] = $mail;
  }

  $account = user_external_load($uniquekey);
  if ($account && $account->uid) { // User exists
    // Update user values
    foreach ($edit as $k => $v) {
      if ($v !== NULL) {
        $fid = db_select('profile_field', 'pf')
          ->fields('pf', array('fid'))
          ->condition('name', $k)
          ->execute()
          ->fetchField();
        db_update('profile_value')
          ->fields(array(
            'value' => $v,
          ))
          ->condition('uid', $account->uid)
          ->condition('fid', $fid)
          ->execute();
      }
    }
    _doccheck_login_account($account);
  }
  elseif (variable_get('user_register', 1)) {
    // Register new user.
    $form_state = array();
    $form_state['redirect'] = '<front>';
    $form_state['values'] = &$edit;
    $form_state['build_info']['args'] = array();
    $form_state['method'] = 'post';

    $edit['name'] = _doccheck_create_unique_name($edit);
    $edit['pass'] = user_password();
    $edit['status'] = variable_get('user_register', 1) == 1;

    if (_doccheck_validate_user_data($edit)) {
      // Validating input values.
      $form = drupal_retrieve_form('user_register_form', $form_state);
      drupal_prepare_form('user_register_form', $form, $form_state);
      $form = form_builder('user_register_form', $form, $form_state);
      drupal_validate_form('user_register_form', $form, $form_state);
      $success = !form_get_errors();
    }
    else {
      $success = FALSE;
    }

    $destination = array(
      'destination' => (isset($_GET['destination']) ? $_GET['destination'] : '<front>'),
    );

    if (!$success) {
      $_SESSION['doccheck']['values'] = $edit;
      unset($_REQUEST['destination']);
      unset($_GET['destination']);
      drupal_goto('user/register', $destination);
    }
    else {
      if ($drupal_language) {
        $edit['language'] = $drupal_language;
      }

      $account = user_save('', $edit);

      if (!$account) {
        drupal_set_message(t('Error saving user account.'), 'error');
        drupal_goto('<front>');
      }
      $fs['uid'] = $account->uid;
      user_login_submit(array(), $fs);
    }

    $form_state['redirect'] = $destination;

    drupal_alter('doccheck_authentication_redirection',
      $form_state['redirect'], $drupal_language);

    drupal_redirect_form($form_state);
  }
  else {
    drupal_set_message(t('Only site administrators can create new user ' .
      'accounts.'), 'error');
  }
}

/**
 * Logs in the given account.
 *
 * @param stdClass $account
 *   User object.
 */
function _doccheck_login_account($account) {
  if (!variable_get('user_email_verification', TRUE) || $account->login) {
    $form_state['uid'] = $account->uid;
    user_login_submit(array(), $form_state);
    if (($destination = (isset($_GET['destination']) ? $_GET['destination'] : '<front>'))) {
      $form_state['redirect'] = $destination;
    }
    drupal_redirect_form($form_state);
  }
  else {
    drupal_set_message(t('You must validate your email address for this ' .
    'account before logging in via DocCheck'));
    drupal_goto('<front>');
  }
}

/**
 * Validates user data received from doccheck.
 *
 * @param array $edit
 *   User data.
 *
 * @return bool
 */
function _doccheck_validate_user_data(array $edit) {
  return !empty($edit['mail']) && !empty($edit['name']);
}

/**
 * Logs GET and POST arrays.
 */
function _doccheck_log_post_get_array() {
  global $user;

  if (count($_GET)) {
    $record_get = array(
      'uid' => $user->uid,
      'created' => REQUEST_TIME,
      'data' => $_GET,
      'post_get' => 0,
    );
    drupal_write_record('doccheck_log', $record_get);
  }
  if (count($_POST)) {
    $record_post = array(
      'uid' => $user->uid,
      'created' => REQUEST_TIME,
      'data' => $_POST,
      'post_get' => 1,
    );
    drupal_write_record('doccheck_log', $record_post);
  }
}

/**
 * Tries to create a unique Drupal username from the response from DocCheck.
 *
 * @param array $response
 *   The response array containing the values from DocCheck.
 *   This should be similar to the one originally filled with GET data.
 *
 * @return string
 *   A unique username based on DocCheck data.
 */
function _doccheck_create_unique_name($response) {
  // Assemble the username from the response
  $name = '';
  if (isset($response['dc_vorname'])) {
    $name .= $response['dc_vorname'];
  }
  if (isset($response['dc_name'])) {
    if (!empty($name)) {
      $name .= " ";
    }
    $name .= $response['dc_name'];
  }

  if (trim($name) === '') {
    return '';
  }

  // Clean the name up to match Drupal username standard
  // see user.module @ line 394 and 397
  $name = preg_replace('/[^ a-z0-9@_.\'-]/i', "", $name);

  // Make the username unique
  $result = db_query("SELECT name FROM {users} WHERE name LIKE :name;",
    array(
      ':name' => db_like($name) . '%',
    ));
  $similar_names = array();
  foreach ($result as $similar_name) {
    $similar_names[] = $similar_name->name;
  }

  $original_name = $name;
  $unique_counter = 0;
  $is_unique = empty($similar_names);
  while (!$is_unique) {
    $name = $original_name . ' ' . ((string) ($unique_counter + 2));
    $found = FALSE;
    foreach ($similar_names as $similar_name) {
      $found |= ($name === $similar_name);
    }
    $is_unique = !$found;
    ++$unique_counter;
  }
  return trim($name);
}

/**
 * Fixes string encoding.
 *
 * Tries to detect strong encoding and forces it UTF-8.
 *
 * @param string $string
 *   Source string.
 *
 * @return string
 *   UTF-8 string.
 */
function _doccheck_fix_encoding($string) {
  $encoding = mb_detect_encoding($string, array(
    'utf-8', 'latin1', 'latin2',
  ));

  return $encoding == 'UTF-8' ? $string : mb_convert_encoding($string, 'UTF-8', $encoding);
}

/**
 * Fetches profile values from url parameters supplied by doccheck.
 *
 * @return array
 */
function _doccheck_login_authenticate_fetch_input() {
  $values = array();

  foreach (doccheck_get_profile_field_stubs() as $field => $data) {
    $value = filter_input(INPUT_GET, $field, FILTER_SANITIZE_STRING);
    if (!$value && !empty($data['altnames'])) {
      foreach ($data['altnames'] as $altname) {
        if (($altnamevalue = filter_input(INPUT_GET, $altname, FILTER_SANITIZE_STRING))) {
          $value = $altnamevalue;
          break;
        }
      }
    }
    if ($data['type'] == 'selection') {
      if (isset($data['options'][$value])) {
        $value = $data['options'][$value];
      }
      elseif (!in_array($value, $data['options'])) {
        watchdog('doccheck', 'Unknown %type: @value', array(
          '%type' => $data['title'],
          '@value' => $value,
        ), WATCHDOG_WARNING);
        continue;
      }
    }

    $values[$field] = _doccheck_fix_encoding($value);
  }
  return $values;
}

/**
 * Page callback for 'doccheck/403'.
 */
function doccheck_403() {
  if (user_is_anonymous()) {
    drupal_set_message(t('Access denied. You must login to view this page.'), 'error');
    $path = $_GET['destination'];

    // Avoid infinite loop with drupal_goto().
    unset($_GET['destination']);
    drupal_static_reset('drupal_get_destination');

    drupal_goto('doccheck', array(
      'query' => array(
        // base64_encode() here is a hack to make the url redirection work.
        // If the $path value gets passed directly, and it contains a '/'
        // character, the parameter will be corrupted, because '/' is the
        // separator between the parameters.
        // If the urlencoded $path gets passed here, doccheck will return 404.
        'destination' => DOCCHECK_ENCODE_MAGIC . base64_encode($path),
      ),
    ));
  }
  // Use the original Drupal 403 page.
  drupal_set_title(t('Access denied'));
  return t('You are not authorized to access this page.');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function doccheck_form_system_site_information_settings_alter(&$form, &$form_state) {
  $checked = variable_get('site_403', '') === 'doccheck/403';
  $form['error_page']['doccheck_403'] = array(
    '#title' => t('Let DocCheck handle 403 (access denied).'),
    '#type' => 'checkbox',
    '#default_value' => $checked,
    '#weight' => -1,
  );

  $form['error_page']['site_403']['#states']['disabled'] = array(
    ':input[name="doccheck_403"]' => array('checked' => TRUE),
  );

  if ($checked) {
    $form['error_page']['site_403']['#default_value'] = variable_get('doccheck_403');
  }

  $form['#validate'][] = '_doccheck_site_information_form_validate';
}

/**
 * Validation callback for the site information form.
 */
function _doccheck_site_information_form_validate($form, &$form_state) {
  $doccheck_403 = $form_state['values']['doccheck_403'];
  $site_403 = $form_state['values']['site_403'];

  if ($doccheck_403) { // Overwrite and backup
    form_set_value($form['error_page']['doccheck_403'], $site_403, $form_state);
    form_set_value($form['error_page']['site_403'], 'doccheck/403', $form_state);
  }
  elseif ($site_403 == 'doccheck/403') { // Restore
    $doccheck_403_backup = variable_get('doccheck_403');
    form_set_value($form['error_page']['site_403'], $doccheck_403_backup, $form_state);
  }
}

/**
 * AJAX callback for doccheck_admin_mapping_form.
 */
function _doccheck_mapping_ajax($form) {
  return $form;
}

/**
 * Returns professions and activities for a given role.
 *
 * @param array $roles
 *
 * @return array
 */
function _doccheck_get_professions_and_activities_by_role($roles) {
  $cached = &drupal_static(__FUNCTION__, array());

  $return_roles = $roles;

  // Check which items are in cache
  foreach (array_keys($cached) as $rid) {
    unset($roles[$rid]);
  }

  // Load the missing items
  if ($roles) {
    foreach (array_keys($roles) as $rid) {
      $cached[$rid] = array();
    }
    $res = db_query('SELECT * FROM {doccheck_mapping} WHERE rid IN (:rids)', array(
      ':rids' => array_keys($roles),
    ));
    foreach ($res as $record) {
      $cached[$record->rid][] = (array) $record;
    }
  }

  // Create the requested array
  foreach (array_keys($return_roles) as $rid) {
    $return_roles[$rid] = $cached[$rid];
  }

  return $return_roles;
}

/**
 * Returns redirects.
 *
 * @return array
 */
function doccheck_get_redirects() {
  return variable_get('doccheck_redirects', array());
}

/**
 * Returns all professions.
 *
 * @return array
 */
function _doccheck_get_profession_list($keyid = FALSE) {
  $cache = &drupal_static(__FUNCTION__);

  if ($cache === NULL) {
    module_load_include('data.inc', 'doccheck');
    $cache = array();
    foreach (doccheck_get_professions() as $profrecord) {
      $cache[$profrecord[(int) !$keyid]] = $profrecord[1];
    }
  }

  return $cache;
}

/**
 * Returns all activities.
 *
 * @return array
 */
function _doccheck_get_activity_list($keyid = FALSE) {
  $cache = &drupal_static(__FUNCTION__);

  if ($cache === NULL) {
    module_load_include('data.inc', 'doccheck');
    $cache = array();
    foreach (doccheck_get_activities() as $actrecord) {
      $cache[$actrecord[(int) !$keyid]] = $actrecord[1];
    }
  }

  return $cache;
}

/**
 * Returns all professions and activities.
 *
 * The format is "$profession :: $activity".
 *
 * @return array
 */
function _doccheck_get_professions_and_activities() {
  $cache = &drupal_static(__FUNCTION__);

  if ($cache === NULL) {
    $professions = _doccheck_get_profession_list();
    $activities = _doccheck_get_activity_list();

    $cache = array();

    foreach ($professions as $p) {
      foreach ($activities as $a) {
        $str = "{$p} :: {$a}";
        $cache[$str] = $str;
      }
    }
  }

  return $cache;
}

/**
 * Searches for a profession by id.
 *
 * @param int $id
 *
 * @return string|null
 */
function _doccheck_get_profession_by_id($id) {
  module_load_include('data.inc', 'doccheck');

  foreach (doccheck_get_professions() as $profrecord) {
    if ($profrecord[0] === $id) {
      return $profrecord[1];
    }
  }

  return NULL;
}

/**
 * Searches for an activity by id.
 *
 * @param int $id
 *
 * @return string|null
 */
function _doccheck_get_activity_by_id($id) {
  module_load_include('data.inc', 'doccheck');

  foreach (doccheck_get_activities() as $actrecord) {
    if ($actrecord[0] === $id) {
      return $actrecord[1];
    }
  }

  return NULL;
}

function doccheck_get_active_keynumber() {
  $language = doccheck_get_language(DOCCHECK_DEFAULT_LANGUAGE);
  $domain = $_SERVER['HTTP_HOST'];
  return variable_get("doccheck_keynumber_{$language}_" . drupal_html_class($domain));
}

/**
 * Theme callback for 'doccheck'.
 */
function theme_doccheck($variables) {
  // TODO lift out size determination and URL assembling
  $width = 100;
  $height = 100;
  switch ($variables['size']) {
    case 'S':
      $width = 156;
      $height = 203;
      break;
    case 'M':
      $width = 320;
      $height = 190;
      break;
    case 'L':
      $width = 424;
      $height = 215;
      break;
    case 'XL':
      $width = 467;
      $height = 231;
      break;
  }
  $login = t('LOGIN');
  $url = 'https://login.doccheck.com/code/' .
    $variables['language'] . '/' .
    $variables['keynumber'] . '/' .
    strtolower($variables['size']) . '_' . $variables['template_name'];
  if ($variables['session_id']) {
    $url .= "/session_id={$variables['session_id']}";
  }
  if ($variables['user_token']) {
    $url .= "/user_token={$variables['user_token']}";
  }
  if ($variables['destination']) {
    $url .= '/destination=' . DOCCHECK_ENCODE_MAGIC . base64_encode($variables['destination']);
  }
  $url .= '?dc_force_logout=1';
  drupal_alter('doccheck_login_iframe_url', $url);
  return <<<HTML
<iframe
    align="left"
    frameborder="0"
    scrolling="no"
    width="{$width}"
    height="{$height}"
    name="dc_login_iframe"
    id="dc_login_iframe"
    src="{$url}">
  <a href="{$url}" target="_blank">{$login}</a>
</iframe>
HTML;
}

/**
 * Helper function for theme_doccheck_form_*.
 *
 * @param array $variables
 *   $variables array of the theme function.
 * @param string $tag
 *   The tag, which surrounds the form element.
 *
 * @return string
 *   Form element, wrapped with $tag.
 */
function _theme_doccheck_form_element($variables, $tag) {
  return "<{$tag}>{$variables['element']['#children']}</{$tag}>";
}

/**
 * Wraps a form element around with the <table> tag.
 */
function theme_doccheck_form_table($variables) {
  return _theme_doccheck_form_element($variables, 'table');
}

/**
 * Wraps a form element around with the <tr> tag.
 */
function theme_doccheck_form_tr($variables) {
  return _theme_doccheck_form_element($variables, 'tr');
}

/**
 * Wraps a form element around with the <th> tag.
 */
function theme_doccheck_form_th($variables) {
  return _theme_doccheck_form_element($variables, 'th');
}

/**
 * Wraps a form element around with the <td> tag.
 */
function theme_doccheck_form_td($variables) {
  return _theme_doccheck_form_element($variables, 'td');
}
