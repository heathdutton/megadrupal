<?php

/**
 * Implements hook_schema().
 */
function doccheck_schema() {
  $log_table = _doccheck_update_7002_schema_doccheck_log();
  $log_table['fields'] += array(
    'post_get' => _doccheck_update_7003_schema_doccheck_log_new_column()
  );
  $schema['doccheck_log'] = $log_table;

  $schema['doccheck_mapping'] = _doccheck_update_7004_schema_mappings();

  return $schema;
}

/**
 * Implements hook_install().
 */
function doccheck_install() {
  module_load_include('data.inc', 'doccheck');

  $profile_fields = doccheck_get_profile_field_stubs();
  foreach ($profile_fields as $name => $data) {
    db_insert('profile_field')
      ->fields(array(
        'name' => $name,
        'title' => $data['title'],
        'category' => $data['category'],
        'type' => $data['type'],
        'visibility' => $data['visibility'],
        'options' => implode("\n", $data['options']),
        'register' => 1,
      ))
      ->execute();
  }
}

/**
 * Adds activity field to the profile fields.
 */
function doccheck_update_7001() {
  module_load_include('data.inc', 'doccheck');

  $profile_fields = doccheck_get_profile_field_stubs();
  $actname = 'dc_activity';
  $actfield = $profile_fields[$actname];

  db_insert('profile_field')
    ->fields(array(
      'name' => $actname,
      'title' => $actfield['title'],
      'category' => $actfield['category'],
      'type' => $actfield['type'],
      'visibility' => $actfield['visibility'],
      'options' => implode("\n", $actfield['options']),
      'register' => 1,
    ))
    ->execute();
}

/**
 * Adds doccheck_log table for debug logging purposes.
 */
function doccheck_update_7002() {
  db_create_table('doccheck_log', _doccheck_update_7002_schema_doccheck_log());
}

/**
 * Adds new column to doccheck_log table for storing if post or get.
 */
function doccheck_update_7003() {
  db_add_field( 'doccheck_log', 'post_get', _doccheck_update_7003_schema_doccheck_log_new_column());
}

/**
 * Creates the mappings table.
 */
function doccheck_update_7004() {
  db_create_table('doccheck_mapping', _doccheck_update_7004_schema_mappings());
}

/**
 * Returns the schema for the doccheck_log table.
 */
function _doccheck_update_7002_schema_doccheck_log() {
  return array(
    'description' => 'Logs $_GET for the path \'doccheck/authenticate/%\'.',
    'fields' => array(
      'dclid' => array(
        'description' => 'Primary Key: Doccheck Log ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid.",
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the log record was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'The serialized $_GET array.',
      ),
    ),
    'primary key' => array('dclid'),
  );
}

function _doccheck_update_7003_schema_doccheck_log_new_column() {
  return array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => "Whether the record is the _POST (1) or _GET (0).",
    'not null' => TRUE,
    'default' => 0,
  );
}

function _doccheck_update_7004_schema_mappings() {
  return array(
    'description' => 'Schema for the role mappings table.',
    'fields' => array(
      'rid' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'profession' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'activity' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('rid', 'profession', 'activity'),
    'indexes' => array(
      'rid' => array('rid'),
    ),
  );
}

/**
 * Implements hook_uninstall().
 */
function doccheck_uninstall() {
  db_delete('variable')
    ->condition('name', 'doccheck_%', 'LIKE')
    ->execute();
  db_delete('profile_value')
    ->condition('fid', db_select('profile_field', 'pf')
      ->fields('pf', array('fid'))
      ->condition('name', 'dc_%', 'LIKE'))
    ->execute();
  db_delete('profile_field')
    ->condition('name', 'dc_%', 'LIKE')
    ->execute();
  db_delete('authmap')
    ->condition('module', 'doccheck')
    ->execute();
}
