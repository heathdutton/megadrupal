<?php

/**
 * Implements hook_permission
 */
function forum_reportabuse_permission() {
  return array(
    'report abuse' => array(
      'title' => 'Report abuse',
    ),
    'moderate reported abuse' => array(
      'title' => 'Moderate reported abuse',
    )
  );
}


/**
 * Implements hook_menu().
 */
function forum_reportabuse_menu() {
  $items = array();

  $items['comment/%/report'] = array(
    'title' => 'Report abuse',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forum_reportabuse_report_form', 0, 1),
    'access arguments' => array('report abuse'),
  );

  $items['node/%/report'] = array(
    'title' => 'Report abuse',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forum_reportabuse_report_form', 0, 1),
    'access arguments' => array('report abuse'),
  );

  $items['forum/moderate/%'] = array(
    'title' => 'Moderate forum reports',
    'title callback' => 'forum_reportabuse_manage_form_title',
    'title arguments' => array(2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forum_reportabuse_manage_form', 2),
    'access arguments' => array('moderate reported abuse'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_views_api().
 */
function forum_reportabuse_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'forum_reportabuse') . '/includes/views'
  );
}


/**
 * Implements hook_node_view_alter
 */
function forum_reportabuse_node_view_alter(&$build) {
  $node = $build['#node'];

  // Check if forum node
  if ($node->type !== 'forum') {
    return;
  }

  // Check if user has permission to report abuse
  if (user_access('report abuse')) {
    _forum_reportabuse_add_report_button($build, 'node', $node->nid);
  }

  // Check if user has permission to moderate reported abuse
  if (user_access('moderate reported abuse')) {
    $res = db_select('forum_reportabuse', 'r')
      ->fields('r')
      ->condition('entity_type', 'node')
      ->condition('entity_id', $node->nid)
      ->condition('status', 1)
      ->orderBy('id', 'DESC')
      ->execute();

    $num_reports = $res->rowCount();
    if ($num_reports !== 0) {
      $report = $res->fetchObject();
      $recent_id = $report->id;
      _forum_reportabuse_number_of_reports_markup($build, $num_reports, $recent_id);
    }
  }
}


/**
 * Implements hook_comment_view_alter
 */
function forum_reportabuse_comment_view_alter(&$build) {
  $comment = $build['#comment'];

  // Check if forum comment
  $node = node_load($comment->nid);
  if ($node->type !== 'forum') {
    return;
  }

  // Check if user has permission to report abuse
  if (user_access('report abuse')) {
    _forum_reportabuse_add_report_button($build, 'comment', $comment->cid);
  }

  // Check if user has permission to moderate reported abuse
  if (user_access('moderate reported abuse')) {
    $res = db_select('forum_reportabuse', 'r')
      ->fields('r')
      ->condition('entity_type', 'comment')
      ->condition('entity_id', $comment->cid)
      ->condition('status', 1)
      ->execute();

    $num_reports = $res->rowCount();
    if ($num_reports !== 0) {
      $report = $res->fetchObject();
      $recent_id = $report->id;
      _forum_reportabuse_number_of_reports_markup($build, $num_reports, $recent_id);
    }
  }
}


/**
 * Implements hook_entity_info().
 */
function forum_reportabuse_entity_info() {
  $return = array(
    'ReportAbuse' => array(
      'label' => t('Abuse reports'),
      'base table' => 'forum_reportabuse',
      'controller class' => 'EntityAPIController',
      'views controller class' => 'EntityDefaultViewsController',
      'entity keys' => array(
        'id' => 'id',
      ),
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_property_info_alter().
 *
 * Necessary for building views relations for author and reported_by.
 */
function forum_reportabuse_entity_property_info_alter(&$info) {
  $properties = &$info['ReportAbuse']['properties'];

  $properties['author'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the report."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer site configuration',
    'required' => TRUE,
    'schema field' => 'author',
  );

  $properties['reported_by'] = array(
    'label' => t("Reported by"),
    'type' => 'user',
    'description' => t("The author of the report."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer site configuration',
    'required' => TRUE,
    'schema field' => 'reported_by',
  );
}


/**
 * Implements hook_action_info().
 */
function forum_reportabuse_action_info() {
  return array (
    'forum_reportabuse_mark_closed_bulk' => array(
      'label' => t('Mark as closed'),
      'type' => 'entity',
      'configurable' => FALSE,
      'aggregate' => TRUE,
    ),
    'forum_reportabuse_mark_open_bulk' => array(
      'label' => t('Mark as open'),
      'type' => 'entity',
      'configurable' => FALSE,
      'aggregate' => TRUE,
    ),
    'forum_reportabuse_delete_content_bulk' => array(
      'label' => t('Delete node/comment'),
      'type' => 'entity',
      'configurable' => FALSE,
      'aggregate' => TRUE,
    ),
    'forum_reportabuse_lock_thread_bulk' => array(
      'label' => t('Lock thread'),
      'type' => 'entity',
      'configurable' => FALSE,
      'aggregate' => TRUE,
    ),
    'forum_reportabuse_unpublish_thread_bulk' => array(
      'label' => t('Unpublish thread'),
      'type' => 'entity',
      'configurable' => FALSE,
      'aggregate' => TRUE,
    ),
    'forum_reportabuse_block_user_bulk' => array(
      'label' => t('Block user'),
      'type' => 'entity',
      'configurable' => FALSE,
      'aggregate' => TRUE,
    ),
  );
}


/**
  * Add abuse report page
  */
function forum_reportabuse_report_form($form, $form_state, $entity_type, $entity_id) {
  global $user;

  // Check whether this poster has already reported this content
  $count = db_select('forum_reportabuse')
    ->condition('reported_by', $user->uid)
    ->condition('entity_id', $entity_id)
    ->condition('entity_type', $entity_type)
    ->countQuery()
    ->execute()
    ->fetchField();
  if ($count) {
    drupal_set_message(t('You have already reported this content, you cannot report it again.'), 'warning');
    drupal_goto();
  }

  // Load the content
  $content_array = entity_load($entity_type, array($entity_id));
  if (empty($content_array)) {
    return drupal_not_found();
  }
  $content = $content_array[$entity_id];

  switch ($entity_type) {
    case 'node':
      $body = $content->body[LANGUAGE_NONE][0]['value'];
      $title = $content->title;
      $author = $content->uid;
      break;

    case 'comment':
      $body = $content->comment_body[LANGUAGE_NONE][0]['value'];
      $title = $content->subject;
      $author = $content->uid;
      break;
  }

  $form = array();

  $form['#entity_id'] = $entity_id;
  $form['#entity_type'] = $entity_type;

  $form['reported_content'] = array(
    '#prefix' => '<label>' . t('Content to be reported:') . '</label>',
    '#markup' => t('<pre><div><strong>@title</strong></div><div>@body</div></pre>',
      array('@title' => $title, '@body' => $body)),
  );

  $form['reason'] = array(
    '#title' => t('Remark'),
    '#description' => t('Please tell us why you would like to report this content.'),
    '#type' => 'textarea',
    '#required' => TRUE,
  );

  $form['body'] = array(
    '#type' => 'value',
    '#value' => $body,
  );

  $form['title'] = array(
    '#type' => 'value',
    '#value' => $title,
  );

  $form['author'] = array(
    '#type' => 'value',
    '#value' => $author,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit report'),
  );

  return $form;
}


/**
 * Submit action
 */
function forum_reportabuse_report_form_submit($form, $form_state) {
  global $user;
  $report = (object) array (
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
    'author' => $form_state['values']['author'],
    'title' => $form_state['values']['title'],
    'body' => $form_state['values']['body'],
    'entity_type' => $form['#entity_type'],
    'entity_id' => $form['#entity_id'],
    'reported_by' => $user->uid,
    'reason' => $form_state['values']['reason'],

  );

  drupal_write_record('forum_reportabuse', $report);
  drupal_set_message(t('Your report has been successfully logged.'));

  // Where do we want the user redirected?
  drupal_goto('forum');
}


/**
* Page to manage an individual report.
*/
function forum_reportabuse_manage_form($form, $form_state, $entity_id) {
  $reports = entity_load('ReportAbuse', array($entity_id));
  if (empty($reports)) {
    return drupal_not_found();
  }

  $form = array();

  $report = $reports[$entity_id];
  $form['#report_id'] = $entity_id;

  $author = user_load($report->author);
  $reported_by = user_load($report->reported_by);

  $entity_link = l(check_plain($report->title), $report->entity_type . '/' . $report->entity_id);
  $form['title'] = array(
    '#prefix' => '<label>' . t('Content title') . '</label>',
    '#markup' => '<div>' . $entity_link . '</div>',
  );

  $form['body'] = array(
    '#prefix' => '<label>' . t('Content body') . '</label>',
    '#markup' => '<div>' . check_plain($report->body) . '</div>',
  );

  if ($author) {
    $author_markup = l($author->name, 'user/' . $author->uid);
  }
  else {
    $author_markup = t('The user account of this author has been deleted.');
  }

  $form['author'] = array(
    '#prefix' => '<label>' . t('Author') . '</label>',
    '#markup' => '<div>' . $author_markup . '</div>',
  );

  $form['reason'] = array(
    '#prefix' => '<label>' . t('Remark') . '</label>',
    '#markup' => '<div>' . $report->reason . '</div>',
  );
  $form['reported_by'] = array(
    '#prefix' => '<label>Reported by</label>',
    '#markup' => '<div>' . l($reported_by->name, 'user/' . $reported_by->uid) . '</div>',
  );

  if ($report->status == 0) {
    $status = 'closed';
    $status_toggle = 'open';
  }
  else {
    $status = 'open';
    $status_toggle = 'closed';
  }

  $form['status'] = array(
    '#prefix' => '<label>Status</label>',
    '#markup' => '<div>' . $status . '</div>',
  );

  $form['toggle_status'] = array(
    '#prefix' => '<br /><div class="actions">',
    '#type' => 'submit',
    '#value' => t('Mark as ' . $status_toggle),
    '#weight' => 12,
    '#submit' => array('forum_reportabuse_toggle_status'),
  );

  if ($report->entity_type === 'comment') {
    $form['delete_comment'] = array(
      '#type' => 'submit',
      '#value' => t('Delete comment'),
      '#weight' => 13,
      '#submit' => array('forum_reportabuse_delete_comment'),
    );
  }

  $form['delete_thread'] = array(
    '#type' => 'submit',
    '#value' => t('Delete thread'),
    '#weight' => 14,
    '#submit' => array('forum_reportabuse_delete_thread'),
  );

  $form['lock_thread'] = array(
    '#type' => 'submit',
    '#value' => t('Lock thread'),
    '#weight' => 15,
    '#submit' => array('forum_reportabuse_lock_thread'),
  );

  $form['unpublish_thread'] = array(
    '#type' => 'submit',
    '#value' => t('Unpublish thread'),
    '#weight' => 16,
    '#submit' => array('forum_reportabuse_unpublish_thread'),
  );

  $form['block_user'] = array(
    '#type' => 'submit',
    '#value' => t('Block user'),
    '#weight' => 17,
    '#submit' => array('forum_reportabuse_block_user'),
    '#suffix' => '</div>',
  );

  return $form;
}


/**
* Title callback for forum_reportabuse_manage_form().
*/
function forum_reportabuse_manage_form_title($id) {
  $reports = entity_load('ReportAbuse', array($id));
  $report = $reports[$id];
  return t('Report #@id (@type @entity_id)',
    array('@id' => $id, '@type' => $report->entity_type, '@entity_id' => $report->entity_id));
}


/**
  * Submit action to toggle open/closed status
  */
function forum_reportabuse_toggle_status($form, $form_state) {
  $id = $form['#report_id'];
  $report = entity_load('ReportAbuse', array($id));

  if ($report[$id]->status == 1) {
    $report[$id]->status = 0;
  }
  else {
    $report[$id]->status = 1;
  }

  entity_save('ReportAbuse', $report[$id]);
  drupal_set_message('Content status has been changed.');
}


/**
  * Submit action to delete reported comment
  */
function forum_reportabuse_delete_comment($form, $form_state) {
  $id = $form['#report_id'];
  $report = entity_load('ReportAbuse', array($id));
  comment_delete($report[$id]->entity_id);

  drupal_set_message('The reported comment has been deleted.');
}


/**
  * Submit action to delete thread
  */
function forum_reportabuse_delete_thread($form, $form_state) {
  $id = $form['#report_id'];
  $report = entity_load('ReportAbuse', array($id));
  $type = $report[$id]->entity_type;

  switch ($type) {
    case 'node':
      $node = node_load($report[$id]->entity_id);
      node_delete($node->nid);
      break;

    case 'comment':
      $comment = comment_load($report[$id]->entity_id);
      node_delete($comment->nid);
      break;
  }

  drupal_set_message('The thread has been deleted.');
}


/**
  * Submit action to lock thread
  */
function forum_reportabuse_lock_thread($form, $form_state) {
  $id = $form['#report_id'];
  $report = entity_load('ReportAbuse', array($id));
  $type = $report[$id]->entity_type;

  switch ($type) {
    case 'node':
      $node = node_load($report[$id]->entity_id);
      break;

    case 'comment':
      $comment = comment_load($report[$id]->entity_id);
      $node = node_load($comment->nid);
      break;
  }

  $node->comment = COMMENT_NODE_CLOSED;
  node_save($node);

  drupal_set_message('The thread has been locked.');
}


/**
  * Submit action to unpublish thread
  */
function forum_reportabuse_unpublish_thread($form, $form_state) {
  $id = $form['#report_id'];
  $report = entity_load('ReportAbuse', array($id));
  $type = $report[$id]->entity_type;

  switch ($type) {
    case 'node':
      $node = node_load($report[$id]->entity_id);
      break;

    case 'comment':
      $comment = comment_load($report[$id]->entity_id);
      $node = node_load($comment->nid);
      break;
  }

  $node->status = NODE_NOT_PUBLISHED;
  node_save($node);

  drupal_set_message('The thread has been unpublished.');
}

/**
  * Submit action to block a user
  */
function forum_reportabuse_block_user($form, $form_state) {
  $id = $form['#report_id'];
  $report = entity_load('ReportAbuse', array($id));
  $uid = $report[$id]->author;

  // Make sure the content was not authored by admin
  if ($uid == 1) {
    drupal_set_message('You cannot block the site administration account.');
    return;
  }

  // Block the user
  $user = user_load($uid);
  $user->status = 0;
  user_save($user);

  drupal_set_message('The user account has been blocked.');
}


/**
 * Action: Mark all reports as closed
 */
function forum_reportabuse_mark_closed_bulk($entities, $context = array()) {
  foreach ($entities as $entity) {
    $entity->status = 0;
    entity_save('ReportAbuse', $entity);
  }

  drupal_set_message('The selected reports have been marked as closed.');
}


/**
 * Action: Mark all reports as open
 */
function forum_reportabuse_mark_open_bulk($entities, $context = array()) {
  foreach ($entities as $entity) {
    $entity->status = 1;
    entity_save('ReportAbuse', $entity);
  }

  drupal_set_message('The selected reports have been marked as open.');
}


/**
 * Bulk action: Delete content
 */
function forum_reportabuse_delete_content_bulk($entities, $context = array()) {
  foreach ($entities as $entity) {
    $type = $entity->entity_type;
    switch ($type) {
      case 'node':
        $node = node_load($entity->entity_id);
        node_delete($node->nid);
        break;

      case 'comment':
        $comment = comment_load($entity->entity_id);
        comment_delete($comment->cid);
        break;
    }
  }

  drupal_set_message('The selected content has been deleted.');
}


/**
 * Bulk action: Lock threads
 */
function forum_reportabuse_lock_thread_bulk($entities, $context = array()) {
  foreach ($entities as $entity) {
    $type = $entity->entity_type;
    switch ($type) {
      case 'node':
        $node = node_load($entity->entity_id);
        break;

      case 'comment':
        $comment = comment_load($entity->entity_id);
        $node = node_load($comment->nid);
        break;

    }
    $node->comment = COMMENT_NODE_CLOSED;
    node_save($node);
  }

  drupal_set_message('The threads for the selected content have been locked.');
}


/**
 * Bulk action: Unpublish thread
 */
function forum_reportabuse_unpublish_thread_bulk($entities, $context = array()) {
  foreach ($entities as $entity) {
    $type = $entity->entity_type;
    switch ($type) {
      case 'node':
        $node = node_load($entity->entity_id);
        break;

      case 'comment':
        $comment = comment_load($entity->entity_id);
        $node = node_load($comment->nid);
        break;
    }

    $node->status = NODE_NOT_PUBLISHED;
    node_save($node);
  }

  drupal_set_message('The threads for the selected content have been unpublished.');
}


/**
 * Bulk action: Block user
 */
function forum_reportabuse_block_user_bulk($entities, $context = array()) {
  foreach ($entities as $entity) {
    $user = user_load($entity->author);
    $user->status = 0;
    user_save($user);
  }

  drupal_set_message('The selected users have been blocked.');
}


/**
 * Add number of reports markup.
 */
function _forum_reportabuse_number_of_reports_markup(&$build, $num_reports, $recent_id) {
  $view_link = l('view most recent report', 'forum/moderate/' . $recent_id);

  $build['num_reports'] = array(
    '#prefix' => '<em>',
    '#suffix' => '</em>',
    '#markup' => t("There are <strong>@num</strong> open abuse reports for this item (!recent_link).",
      array('@num' => $num_reports, '!recent_link' => $view_link)),
    '#weight' => 70,
  );
}


/**
 * Add report abuse button.
 */
function _forum_reportabuse_add_report_button(&$build, $type, $eid) {
  $build['links']['comment']['#links']['reportabuse'] = array(
    'title' => '<span>report</span>',
    'html' => true,
    'href' => sprintf("%s/%d/report", $type, $eid),
    'query' => array('destination' => current_path()),
    'attributes' => array(
      'class' => array('af-button-small'),
    ),
  );
}
