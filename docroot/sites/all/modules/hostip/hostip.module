<?php
// Created, maintained and sponsored by Tekriti Software (http://www.tekritisoftware.com)

/**
 * @file
 * Queries the hostip.info api to get the country / state info. based on the
 * user's ip or specific ip passed to it
 */


/**
 * Implements hook_menu().
 */
function hostip_menu() {
  $items = array();
  $items['admin/config/people/hostip'] = array(
    'title' => 'Hostip Settings',
    'description' => 'Queries the hostip.info api to get the country / state info. based on the user\'s ip or specific ip passed to it.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hostip_admin_settings'),
    'access arguments' => array('administer site configuration'),
    );
  
  return $items;
}

/**
 * Implements hook_help().
 */
function hostip_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/hostip':
      return t('Queries the hostip.info api to get the country / state info. based on the user\'s ip or specific ip passed to it');
  }
}

/**
 * Menu callback; presents the hostip settings page.
 */
function hostip_admin_settings() {
  /*$form['hostip_global_vars'] = array(
    '#type' => 'checkbox',
    '#title' => t('Store country information in global variable'),
    '#default_value' => variable_get('hostip_global_vars', ''),
    '#description' => t('Stores the country related information in HostipLookupResultSet global array. Please use print_r(HostipLookupResultSet); to see all the values.'),
  );*/
  $form['hostip_user_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display location information on user profile page'),
    '#default_value' => variable_get('hostip_user_profile', '1'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_init().
 */
function hostip_init() {
  if (empty($_SESSION['hostip_data'])) {
    $_SESSION['hostip_data'] = hostip_get_iptocountry_info();
  }
}

/**
 * Based on admin setting, saves the country details in global array.
 */
/*if (variable_get('hostip_global_vars', '')) {
  global $HostipLookupResultSet;
  $HostipLookupResultSet = _get_iptocountry_info();
}*/

/**
 * Implements hook_user_view().
 */
function hostip_user_view($account, $view_mode, $langcode) {
  global $user;
  // user is viewing his own profile
  if ($user->uid == $account->uid && variable_get('hostip_user_profile', '1') && !empty($_SESSION['hostip_data'])) {
    $HostipLookupResultSet = $_SESSION['hostip_data'];
    $country_info = $HostipLookupResultSet['country'] ? $HostipLookupResultSet['country'] . ' (' . $HostipLookupResultSet['countrycode'] . '), ' . $HostipLookupResultSet['city'] : '';
    $account->content['summary']['hostip'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Country details'),
      '#markup' => $country_info,
      '#attributes' => array('class' => 'hostip'),
    );
  }
}

/**
  * hostip_get_iptocountry -- gets country details for the given ip by calling hostip api
  *
  * Takes ($ip)
  *
  * @param valid ip addess to get country details for specific ip address otherwise
  * it returns country details for the user
  */
function hostip_get_iptocountry_info($ip = '') {
  $ip = $ip ? $ip : ip_address();
  if (!hostip_is_valid_ip($ip)) {
    //drupal_set_message(t('Please specify valid IP address.'), 'error');
    return array();
  }
  // HTML Format
  /*$url = "http://api.hostip.info/get_html.php?ip=$ip&position=true";
  $ip_details = drupal_http_request($url);
  $output = nl2br($ip_details->data);
  return $output;*/

  // XML Format
  $url = "http://api.hostip.info/?ip=$ip&position=true";
  
  $ip_details = drupal_http_request($url);
  if (empty($ip_details)) {
    return array();
  }
  $ip_details_array = hostip_xml2array($ip_details->data);
  if (empty($ip_details_array['HostipLookupResultSet'])) {
    return array();
  }

  $data['country'] = check_plain($ip_details_array['HostipLookupResultSet']['gml:featureMember']['Hostip']['countryName']['value']);
  $data['countrycode'] = check_plain($ip_details_array['HostipLookupResultSet']['gml:featureMember']['Hostip']['countryAbbrev']['value']);
  $data['city'] = check_plain($ip_details_array['HostipLookupResultSet']['gml:featureMember']['Hostip']['gml:name']['value']);
  if (!empty($ip_details_array['HostipLookupResultSet']['gml:featureMember']['Hostip']['ipLocation'])) {
    $map_info = explode(',', $ip_details_array['HostipLookupResultSet']['gml:featureMember']['Hostip']['ipLocation']['gml:pointProperty']['gml:Point']['gml:coordinates']['value']);
    $data['longitude'] = check_plain($map_info[0]);
    $data['latitude'] = check_plain($map_info[1]);
  }
 
  return $data;
}

/**
  * checks for valid ip
  */
function hostip_is_valid_ip($ip) {
  if (!preg_match("/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/", $ip)) $return = FALSE;
  else $return = TRUE;
    
  $tmp = explode(".", $ip);
  if ($return == TRUE) {
    foreach ($tmp AS $sub) {
      $sub = $sub * 1;
      if ($sub<0 || $sub>256) $return = FALSE;
    }
  }
  return $return;
}

/**
  * hostip_xml2array -- convert the given XML text to an array in the XML structure
  *
  * Takes ($contents, $get_attributes)
  *
  * @param string $contents: the XML text
  * @param integer $get_attributes: if you need attributes of the nodes set to 1 else 0 (default 1)
  */ 
function hostip_xml2array($contents, $get_attributes = 1) {
  if (!$contents) return array();
  
  if (!function_exists('xml_parser_create')) {
    //print "'xml_parser_create()' function not found!";
    return array();
  }
  //Get the XML parser of PHP - PHP must have this module for the parser to work
  $parser = xml_parser_create();
  xml_parser_set_option( $parser, XML_OPTION_CASE_FOLDING, 0 );
  xml_parser_set_option( $parser, XML_OPTION_SKIP_WHITE, 1 );
  xml_parse_into_struct( $parser, $contents, $xml_values );
  xml_parser_free( $parser );
  
  if (!$xml_values) return;
  
  //Initializations
  $xml_array = array();
  $parents = array();
  $opened_tags = array();
  $arr = array();
  
  $current = &$xml_array;
  
  //Go through the tags.
  foreach ($xml_values as $data) {
    unset($attributes, $value);//Remove existing values, or there will be trouble
    extract($data);//We could use the array by itself, but this cooler.
    
    $result = '';
    if ($get_attributes) {//The second argument of the function decides this.
      $result = array();
      if (isset($value)) $result['value'] = $value;
      
      //Set the attributes too.
      if (isset($attributes)) {
        foreach ($attributes as $attr => $val) {
        if ($get_attributes == 1) $result['attr'][$attr] = $val; //Set all the attributes in a array called 'attr'
        /** :TODO: should we change the key name to '_attr'? Someone may use the tagname 'attr'. Same goes for 'value' too */
        }
      }
    } 
    elseif (isset($value)) {
      $result = $value;
    }
    
    //See tag status and do the needed.
    if ($type == "open") {//The starting of the tag '<tag>'
      $parent[$level-1] = &$current;
    
      if (!is_array($current) or (!in_array($tag, array_keys($current)))) { //Insert New tag
        $current[$tag] = $result;
        $current = &$current[$tag];
      
      }
      else { //There was another element with the same tag name
        if (isset($current[$tag][0])) {
          array_push($current[$tag], $result);
        }
        else {
          $current[$tag] = array($current[$tag], $result);
        }
        $last = count($current[$tag]) - 1;
        $current = &$current[$tag][$last];
      }
    
    }
    elseif ($type == "complete") { //Tags that ends in 1 line '<tag />'
    //See if the key is already taken.
      if (!isset($current[$tag])) { //New Key
        $current[$tag] = $result;
      
      }
      else { //If taken, put all things inside a list(array)
        if ((is_array($current[$tag]) && $get_attributes == 0) || (isset($current[$tag][0]) && is_array($current[$tag][0]) && $get_attributes == 1)) {
          array_push($current[$tag], $result); // ...push the new element into that array.
        }
        else { //If it is not an array...
          $current[$tag] = array($current[$tag], $result); //...Make it an array using using the existing value and the new value
        }
      }
    
    }
    elseif ($type == 'close') { //End of tag '</tag>'
      $current = &$parent[$level-1];
    }
  }
  
  return ($xml_array);
}
