<?php

/*
 * Implements hook_apachesolr_entity_info_alter().
 *
 */
function profile2_apachesolr_apachesolr_entity_info_alter(&$entity_info) {
  $entity_info['profile2']['indexable'] = TRUE;
  $entity_info['profile2']['status callback'][] = 'profile2_apachesolr_profile2_status_callback';
  $entity_info['profile2']['document callback'][] = 'profile2_apachesolr_solr_document_profile2';
  $entity_info['profile2']['reindex callback'] = 'profile2_apachesolr_solr_reindex_profile2';
  $entity_info['profile2']['index_table'] = 'apachesolr_index_entities_profile2';
}
  
/**
 * Implements hook_entity_info_alter().
 */
function profile2_apachesolr_entity_info_alter(&$entity_info) {
  $entity_info['profile2']['view modes']['search_index'] = array(
    'label' => t('Search Index'),
    'custom settings' => 'TRUE',
  );
}

/**
 * Status callback for ApacheSolr, for profile2
 */
function profile2_apachesolr_profile2_status_callback($profile2, $type) {
  return true;
}

/**
 * Builds the profile2-specific information for a Solr document.
 *
 * @param Apache_Solr_Document $document
 *   The Solr document we are building up.
 * @param stdClass $entity
 *   The entity we are indexing.
 * @param string $entity_type
 *   The type of entity we're dealing with.
 */
function profile2_apachesolr_solr_document_profile2(ApacheSolrDocument $document, $profile2, $entity_type) {
  global $language;
  //save language
  $backup_language = $language;

  $documents = array();

  $document->entity_id = $profile2->pid;
  $account = user_load($profile2->uid);
  $document->label = $account->name;
  $document->entity_type = $entity_type;

  $languages = language_list();
  foreach($languages as $langcode => $local_language)
  {
    //switch language to index translated fields
    $language = $local_language;
    $language_document = clone $document;

    $language_document->language = $langcode;

    $build = $profile2->view('search_index', $langcode);
    unset($build['#theme']);
    $text = drupal_render($build);
    $language_document->content = apachesolr_clean_text($text);

    $documents[] = $language_document;
  }

  //restore language
  $language = $backup_language;
  return $documents;
}

/**
 * Reindexing callback for ApacheSolr, for profile2
 */
function profile2_apachesolr_solr_reindex_profile2() {
  //This is what it should be but it doesn't exist in apachesolr module...
  $indexer_table = apachesolr_get_indexer_table('profile2');
  $transaction = db_transaction();
  try {
      db_delete($indexer_table)
        ->condition('entity_type', 'profile2')
        ->execute();
      
      $select = db_select('profile', 'p');
      $select->addExpression("'profile2'", 'entity_type');
      $select->addField('p', 'pid', 'entity_id');
      $select->addField('p','type', 'bundle');
      $select->addExpression(REQUEST_TIME, 'changed');
  
      $insert = db_insert($indexer_table)
        ->fields(array('entity_id', 'bundle', 'entity_type', 'changed'))
        ->from($select)
        ->execute();
    }
    catch(Exception $e) {
        $transaction->rollback();
        watchdog_exception('Apache Solr Profile2', $e);
        return FALSE;
   }
    
  return TRUE;
}

/**
 * Helper function for checking if a profile is selected in solr config to be indexed
 */
function profile2_apachesolr_indexable($profile){
  $envs = apachesolr_load_all_environments();
  foreach ($envs as $env){
    $bundles = apachesolr_get_index_bundles($env['env_id'], 'profile2');
    foreach($bundles as $bundle){
      if($bundle != $profile->type){
        continue;
      }
      return $env['env_id'];   
    }
  }
  return FALSE;
}
