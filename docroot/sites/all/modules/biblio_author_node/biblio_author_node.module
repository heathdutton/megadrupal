<?php

/**
 * @file
 * This module adds an option to link Biblio authors to nodes.
 */

/**
 * Implementation of hook_views_api().
 */
function biblio_author_node_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'biblio_author_node') . '/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function biblio_author_node_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'biblio_admin_settings') {

    /*
     * We insert the new option checkbox (link author names to nodes).
     *
     * This variable is auto saved.
     */
    $form['links']['author']['biblio_author_node_link'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hyperlink author names to a node (Biblio author node)'),
      '#return_value' => 1,
      '#default_value' => variable_get('biblio_author_node_link', 0),
      '#description' => t('This creates a hyperlink on author names which, when clicked, will take the user to authors node page'),
      '#weight' => -2,
    );

    /*
     * We insert the node bundle selector if author_link_node is checked.
     *
     * This variable is auto saved.
     */
    $form['links']['author']['biblio_author_node_link_bundle'] = array(
      '#type' => 'select',
      '#title' => t('Target node bundle'),
      '#options' => biblio_author_node_get_bundles(),
      '#default_value' => variable_get('biblio_author_node_link_bundle', 'All'),
      '#description' => t('Select the content type you want to link authors to'),
      '#weight' => -1,
      '#required' => TRUE,
      '#states' => array(
        'invisible' => array(
          ':input[name="biblio_author_node_link"]' => array('checked' => FALSE),
        ),
      ),
    );
  }
  elseif ($form_id == 'biblio_admin_author_edit_form') {

    $enabled = variable_get('biblio_author_node_link', 0);

    if ($enabled) {

      // Primary key on biblio_contributor_data table (contributor ID).
      $cid = $form['cid']['#value'];

      $author = db_query('SELECT * FROM {biblio_contributor_data} b WHERE b.cid = :aid ', array(':aid' => $cid))->fetchObject();
      if ($author) {
        $drupal_nid_def = $author->drupal_nid;
      }
      else {
        $drupal_nid_def = 0;
      }

      /*
       * We add the ability to link current author to a node.
       */
      $form['drupal_nid'] = array(
        '#type' => 'select',
        '#title' => t('Drupal Node ID'),
        '#options' => biblio_author_node_get_author_nodes(),
        '#default_value' => $drupal_nid_def,
        '#weight' => -15,
        '#required' => FALSE,
        '#description' => t('If this author has a node (Drupal Node ID) on this web site, you may select it here.  This will help to link the authors publications with other content.'),
      );

      /*
       * No custom submit handler for drupal_nid is necessary because inside
       * biblio's function biblio_admin_author_edit_form_submit there is a call
       * to drupal_write_record for all form values.
       */
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * This lets us override theme_biblio_author_link theming function.
 *
 * @see biblio_theme.inc
 *
 * @param array $theme_registry
 *   Array with theme registry.
 */
function biblio_author_node_theme_registry_alter(&$theme_registry) {
  // https://www.drupal.org/node/839376#comment-10180778
  $theme_registry['biblio_author_link']['function'] = 'biblio_author_node_biblio_author_link';
  $theme_registry['biblio_author_link']['includes'] = array();
  $theme_registry['biblio_author_link']['theme path'] = drupal_get_path('module', 'biblio_author_node');
}

/**
 * Overrides theme_biblio_author_link.
 *
 * Author links customization.
 *
 * @param array $variables
 *   Array with all theming variables.
 */
function biblio_author_node_biblio_author_link($variables) {
  $base  = variable_get('biblio_base', 'biblio');
  $author = $variables['author'];
  $options = isset($variables['options']) ? $variables['options'] : array();

  $link_to_node = variable_get('biblio_author_node_link', 0);
  $link_to_profile = variable_get('biblio_author_link_profile', 0);
  $link_to_profile_path = variable_get('biblio_author_link_profile_path', 'user/[user:uid]');

  $uri = drupal_parse_url(request_uri());
  $uri = array_merge($uri, $options);
  if (!isset($uri['attributes'])) {
    $uri['attributes'] = array('rel' => 'nofollow');
  }
  $path = $uri['path'];

  if (isset($author['drupal_uid']) && $author['drupal_uid'] > 0) {
    $uri['attributes'] += array('class' => array('biblio-local-author'));
  }
  if (variable_get('biblio_links_target_new_window', NULL)) {
    $uri['attributes'] += array('target' => '_blank');
    $uri['html'] = TRUE;
  }

  if ($link_to_node && isset($author['drupal_nid'])  &&  $author['drupal_nid'] > 0) {
    $path_node = drupal_get_path_alias('node/' . $author['drupal_nid']);
    return l(trim($author['name']), $path_node, $uri);
  }
  elseif ($link_to_profile && isset($author['drupal_uid'])  &&  $author['drupal_uid'] > 0) {
    $data['user'] = user_load($author['drupal_uid']);
    $path = token_replace($link_to_profile_path, $data);
    $alias = drupal_get_path_alias($path);
    $path_profile = variable_get('biblio_show_profile', '0') ? "$path/$base" : $alias;
    return l(trim($author['name']), $path_profile, $uri);
  }
  else {
    $uri['path'] = variable_get('biblio_base', 'biblio');
    $uri['query']['f']['author'] = $author['cid'];
    return l(trim($author['name']), $uri['path'], $uri );
  }

}

/**
 * Get nodes to relate to authors.
 *
 * @param bool $reset
 *   Indicates if result cache should be reset.
 *
 * @return array
 *   List of selectable nodes.
 */
function biblio_author_node_get_author_nodes($reset = FALSE) {
  static $result;

  if (!isset($result) || $reset) {

    $bundle = variable_get('biblio_author_node_link_bundle', 'All');

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', $bundle);

    $authors_query = $query->execute();
    $authors = array_pop($authors_query);
    $lines = array(0 => t('(None)'));

    foreach ($authors as $auth) {
      if (!empty($auth)) {
        $author = node_load($auth->nid);
        $lines[$auth->nid] = $author->title;
      }
    }

    $result = $lines;
  }

  return $result;
}

/**
 * Get bundle selector options.
 *
 * @param bool $reset
 *   Indicates if result cache should be reset.
 *
 * @return array
 *   List of selectable content types.
 */
function biblio_author_node_get_bundles($reset = FALSE) {
  static $result;

  if (!isset($result) || $reset) {

    $bundles = node_type_get_types();
    $types = array('All' => t('- Select a node bundle -'));

    foreach ($bundles as $machine_name => $ct) {
      $types[$machine_name] = $ct->name;
    }

    $result = $types;
  }

  return $result;
}
