<?php
/**
 * @file
 * Site Search Analytics from Visitors Voice installation.
 */

/**
 * The JSON-based Visitors Voice API's URL.
 * @var string
 */
define('VISITORSVOICE_API_JSON_ENDPOINT', 'http://api.visitorsvoice.com/api/{date when api was published}');

/**
 * The Visitors Voice cache table name.
 * @var string
 */
define('VISITORSVOICE_API_CACHE', 'cache_visitorsvoice_api');

/**
 * The Visitors Voice API Key.
 * @var string
 */
define('VISITORSVOICE_API_KEY', variable_get('visitorsvoice_api_key', ''));

/**
 * Implements hook_menu().
 */
function visitorsvoice_api_menu() {
  $items['admin/settings/visitorsvoice'] = array(
    'title' => 'Visitors Voice API key setting',
    'description' => 'Register your Visitors Voice API in order to integrate Visitors Voice on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('visitorsvoice_api_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Settings form for the API key.
 */
function visitorsvoice_api_settings() {

  // Visitors Voice API Key Field.
  $form['visitorsvoice_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t("Visitors Voice API key"),
    '#description' => t("Please input your Visitors Voice API key. If you don\'t have, you can sign up for your 60 days free trial !here.",
        array('!here' => l(t('here'), 'http://en.visitorsvoice.com/sign-up-for-free-trial/'))),
    '#default_value' => variable_get('visitorsvoice_api_key', ''),
    '#size' => 20,
  );

  // Cache Response Data checkbox.
  $form['visitorsvoice_api_cache_data'] = array(
    '#type' => 'checkbox',
    '#title' => t("Cache Response Data"),
    '#description' => t("Store Visitors Voice API response in cache."),
    '#default_value' => variable_get('visitorsvoice_api_cache_data', ''),
  );

  // Cache Expiration field.
  $form['visitorsvoice_api_cache_expire'] = array(
    '#type' => 'textfield',
    '#title' => t("Cache Expiration"),
    '#description' => t("Set cache expiration time in minutes.  This will only work if `Cache Response Data` is checked."),
    '#default_value' => variable_get('visitorsvoice_api_cache_expire', '0'),
    '#size' => 5,
  );

  return system_settings_form($form);
}

/**
 * Check if your API key is valid.
 *
 * @return object
 *   The Drupal result object, or FALSE if the API key is not set.
 */
function visitorsvoice_api_checkapi() {
  $api_key = VISITORSVOICE_API_KEY;

  if ($api_key == '') {
    drupal_set_message(t("The Visitors Voice API key is not set correctly in this site. Please report the problem to site administrator."));
    return FALSE;
  }

  $params = array(
    'api_key' => $api_key,
  );

  $endpoint = 'APIKey';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Detect sudden changes (in real time or in the past) in what users are searching for.
 * The function returns trending search terms ordered by increase in number of users
 * that searched (increasedUser). 
 *
 * @param int $date_zero
 *   End date of the period where the search term trend should be detected (yyyymmdd).
 * @param int $duration
 *   How many days back from date zero should be used for tracking the search term trend (1-10).
 * @param int $offset
 *   How many days previous to search term trend should be used for comparison (1-30).
 * @param int $min_user
 *   Minimum user count per day during trend period (>1).
 * @param int $min_increase
 *   Min increase in user count during trend period compared to previous period (>1).
 * @param string $ctr
 *   Min (GT) /max (LT) click through rate ("GT-61" search terms with max CTR of 60 during the trend period. "LT-59" means the opposite).
 * 
 * @return object
 *   The Drupal result object, or FALSE if the API key is not set.
 */
function visitorsvoice_api_trending_search_terms($date_zero, $duration, $offset, $min_user, $min_increase, $ctr) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'date_zero' => $date_zero,
    'duration' => $duration,
    'offset' => $offset,
    'min_user' => $min_user,
    'min_increase_percentage' => $min_increase,
    'click_through_rate' => $ctr,
  );

  $endpoint = 'trendingsearchterms';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * This function returns all search terms that were refined and then lead a user 
 * to a URL sorted by count. 
 *
 * @param int $start_date
 *   From which date should data be retrieved (yyyymmdd).
 * @param int $end_date
 *   Until which date should data be retrieved (yyyymmdd).
 * @param string $url
 *   The url (e.g. "http://www.uddevalla.se/arbete.html").
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_refinements_to_url($start_date, $end_date, $url) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'start_date' => $start_date,
    'end_date' => $end_date,
    'url' => $url,
  );

  $endpoint = 'refinementstourl';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Get all refinements for a search term ackumulated over time ordered by count. 
 *
 * @param string $searchterm
 *   The search term (e.g. "förskola").
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_refinements_to_search_term($searchterm) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'searchterm' => $searchterm,
  );

  $endpoint = 'RefinementsToSearchTerm';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Get an extensive set of data of all users behavior who searches for the search term (all lists are sorted on count descending). 
 *
 * @param int $start_date
 *   From which date should data be retrieved (yyyymmdd).
 * @param int $end_date
 *   Until which date should data be retrieved (yyyymmdd).
 * @param string $searchterm
 *   The search term (e.g. "förskola").
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_search_term_context($start_date, $end_date, $searchterm) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'start_date' => $start_date,
    'end_date' => $end_date,
    'searchterm' => $searchterm,
  );

  $endpoint = 'searchtermcontext';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Understand which search terms and keywords relate to a URL; get all search terms and keywords that led to and from the URL. All search terms are ordered by count. 
 *
 * @param int $start_date
 *   From which date should data be retrieved (yyyymmdd).
 * @param int $end_date
 *   Until which date should data be retrieved (yyyymmdd).
 * @param string $url
 *   The url (e.g. "http://www.uddevalla.se/arbete.html").
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_url_context($start_date, $end_date, $url) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'start_date' => $start_date,
    'end_date' => $end_date,
    'url' => $url,
  );

  $endpoint = 'urlcontext';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Get all actions (clicks and searches) a users has done during his/her visit ordered by time sequence with oldest action first.
 *
 * @param string $sessionid
 *   The user session id. Can handle more than one session id separated by ||.
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_user_session($sessionid) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'sessionid' => $sessionid,
  );

  $endpoint = 'usersession';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * General performance metrics are number of searches, number of users, number of clicks, number of clickbacks, number of users that clicked in search engine result page. 
 *
 * @param int $start_date
 *   From which date should data be retrieved (yyyymmdd).
 * @param in $end_date
 *   Until which date should data be retrieved (yyyymmdd).
 * @param string $searchterm
 *   The search term (e.g. "förskola").
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_search_term_performance($start_date, $end_date, $searchterm) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'start_date' => $start_date,
    'end_date' => $end_date,
  );

  if ($searchterm) {
    // Not a required paramenter.
    $params['searchterm'] = $searchterm;
  }

  $endpoint = 'searchtermperformance';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * General list of search terms with performance metrics ordered by count.
 *
 * @param int $start_date
 *   From which date should data be retrieved (yyyymmdd).
 * @param int $end_date
 *   Until which date should data be retrieved (yyyymmdd).
 * @param int $min_count
 *   Only returns search terms where searches > min_searches (not a required field).
 * @param int $min_user
 *   Only returns search terms where users > min_count (not a required field).
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_search_term_performance_list($start_date, $end_date, $min_count, $min_user) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'start_date' => $start_date,
    'end_date' => $end_date,
  );

  if ($min_count) {
    // Not a required paramenter.
    $params['min_count'] = $min_count;
  }

  if ($min_user) {
    // Not a required paramenter.
    $params['min_user'] = $min_user;
  }

  $endpoint = 'searchtermperformancelist';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Calculate the overall quality of the search results based on total nr of searches, total nr of users, total nr of clicks and total nr of users that clicked for all keywords used.
 *
 * @param int $start_date
 *   From which date should data be retrieved (yyyymmdd).
 * @param int $end_date
 *   Until which date should data be retrieved (yyyymmdd).
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_overall_performance($start_date, $end_date) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'start_date' => $start_date,
    'end_date' => $end_date,
  );

  $endpoint = 'overallperformance';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Get search terms searched to an URL sorted by count descending.
 *
 * @param int $start_date
 *   From which date should data be retrieved (yyyymmdd).
 * @param int $end_date
 *   Until which date should data be retrieved (yyyymmdd).
 * @param string $url
 *   The url - could also be part of url and get all urls matching (e.g. "http://www.uddevalla.se/arbete/ledigajobb.4.58be7a9d10d9c62bc5f800019612.html").
 * @param int $max_searchterms
 *   Max. number of search terms to be returned (default is 20).
 * @param int $min_count
 *   Min. number of searches for each search term to be returned (e.g. 5).
 * @param int $min_user
 *   Min. number of users searching for each search term to be returned (e.g. 5).
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_search_terms_to_url($start_date, $end_date, $url, $max_searchterms, $min_count, $min_user) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'start_date' => $start_date,
    'end_date' => $end_date,
    'url' => $url,
  );

  // Not a required paramenter.  Default is 20.
  $params['max_searchterms'] = (($max_searchterms) ? $max_searchterms : 20);

  if ($min_count) {
    // Not a required paramenter.
    $params['min_count'] = $min_count;
  }

  if ($min_user) {
    // Not a required paramenter.
    $params['min_user'] = $min_user;
  }

  $endpoint = 'SearchTermsToUrl';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Get search terms searched to an URL sorted by count descending.
 *
 * @param int $start_date
 *   From which date should data be retrieved (yyyymmdd).
 * @param int $end_date
 *   Until which date should data be retrieved (yyyymmdd).
 * @param string $url
 *   The url - could also be part of url and get all urls matching (e.g. "http://www.uddevalla.se/arbete/ledigajobb.4.58be7a9d10d9c62bc5f800019612.html").
 * @param int $max_searchterms
 *   Max. number of search terms to be returned (default is 20).
 * @param int $min_count
 *   Min. number of searches for each search term to be returned (e.g. 5).
 * @param int $min_user
 *   Min. number of users searching for each search term to be returned (e.g. 5).
 * @param string $max_ctr
 *   Max. click through rate for each search term to be returned (e.g. 25 %).
 * @param string $min_ctr
 *   Min. click through rate for each search term to be returned (e.g. 25 %).
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_search_terms_from_url($start_date, $end_date, $url, $max_searchterms, $min_count, $min_user, $max_ctr, $min_ctr) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'start_date' => $start_date,
    'end_date' => $end_date,
    'url' => $url,
  );

  // Not a required paramenter.  Defaults 20.
  $params['max_searchterms'] = (($max_searchterms) ? $max_searchterms : 20);

  if ($min_count) {
    $params['min_count'] = $min_count;
  }

  if ($min_user) {
    $params['min_user'] = $min_user;
  }

  if ($max_ctr) {
    $params['max_ctr'] = $max_ctr;
  }

  if ($min_ctr) {
    $params['min_ctr'] = $min_ctr;
  }

  $endpoint = 'SearchTermsFromUrl';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Get search terms searched to an URL sorted by count descending.
 *
 * @param int $start_date
 *   From which date should data be retrieved (yyyymmdd).
 * @param int $end_date
 *   Until which date should data be retrieved (yyyymmdd).
 * @param string $url
 *   The url - could also be part of url and get all urls matching (e.g. "http://www.uddevalla.se/arbete/ledigajobb.4.58be7a9d10d9c62bc5f800019612.html").
 * @param int $max_keywords
 *   Max. nr of keywords to be returned (default is 20).
 * @param int $min_user
 *   Min. number of users searching for each search term to be returned (e.g. 5).
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_keywords_to_url($start_date, $end_date, $url, $max_keywords, $min_user) {
  $params = array(
    'api_key' => VISITORSVOICE_API_KEY,
    'start_date' => $start_date,
    'end_date' => $end_date,
    'url' => $url,
  );

  // Not a required paramenter.  Default is 20.
  $params['max_keywords'] = (($max_keywords) ? $max_keywords : 20);

  if ($min_user) {
    $params['min_user'] = $min_user;
  }

  $endpoint = 'KeywordsToUrl';

  $data = visitorsvoice_api_retrieve_results($params, $endpoint);

  return $data;
}

/**
 * Retrieve results from Visitors Voice API.
 *
 * @param string $params
 *   The query term
 *
 * @return array
 *   The Drupal result array, or FALSE if the API key is not set.
 */
function visitorsvoice_api_retrieve_results($params, $endpoint) {
  $url = 'http://api.visitorsvoice.com/Api/V1/' . $endpoint . '?' . http_build_query($params, '', '&');

  $is_cached = variable_get('visitorsvoice_api_cache_data', '0');

  if ($is_cached == 1) {
    $cid = 'visitorsvoice:' . md5($url);

    $cached = cache_get($cid, VISITORSVOICE_API_CACHE);

    if ($cached) {
      $data = $cached->data;
    }
    else {
      $cache_expire = variable_get('visitorsvoice_api_cache_expire', '0');

      $response = drupal_http_request($url);

      $data = json_decode($response->data);

      cache_set($cid, $data, VISITORSVOICE_API_CACHE, strtotime("+" . $cache_expire . " minutes"));
    }
  }
  else {
    $response = drupal_http_request($url);

    $data = json_decode($response->data);
  }

  if ($data->ErrorType) {
    drupal_set_message($data->ErrorType . ': ' . $data->Message, 'error', TRUE);

    return FALSE;
  }
  else {
    return $data;
  }
}
