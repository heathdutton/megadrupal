<?php

/**
 * Implements hook_help().
 */
function chessboard_help($path, $arg) {

  switch ($path) {
    case 'admin/help#chessboard':
      $output = t('Renders chessboard diagrams specified with the FEN syntax or a simple piece placement format.');
      break;

    default:
      $output = '';
      break;
  }

  return $output;
}

/**
 * Implements hook_init().
 */
function chessboard_init() {
  $formats = filter_formats();

  // Build list cache IDs.
  $cids = _chessboard_filter_page_structures_list_cids($formats);

  // Retrieve lists.
  $cache = cache_get_multiple($cids, 'cache_filter');

  // Build structure cache IDs.
  $cids = array();
  foreach ($cache as $item) {
    $cids += array_keys($item->data);
  }

  // Retrieve structures.
  $cache = cache_get_multiple($cids, 'cache_filter');

  // Process structures.
  foreach ($cache as $item) {
    if (isset($item->data['#attached'])) {
      drupal_process_attached($item->data);
    }
  }
}

/**
 * Implements hook_field().
 */
function chessboard_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'sanitize':
      foreach ($items as $delta => $item) {
        preg_match('@^\s*(?:\((.*?)\))?(.*)$@s', $item['value'], $matches);

        // Parameter Parsing
        //--------------------------------
        $params =& $matches[1];

        // Number of files: any integer (default: 8)
        $item['file_max'] = preg_match('@[0-9]+@', $params, $m) ? $m[0] : 8;

        // Color of the upper left square: [l]ight (default), or [d]ark
        $item['square_color_first'] = (strpos($params, 'd') !== FALSE) ? 1 : 0;

        // Borders
        $item['border'] = array('T' => (strpos($params, 'T') !== FALSE),
                        'B' => (strpos($params, 'B') !== FALSE),
                        'L' => (strpos($params, 'L') !== FALSE),
                        'R' => (strpos($params, 'R') !== FALSE));

        // Render the board in XHTML syntax
        //----------------------------------
        $board_value =& $matches[2];
        $board_value = strip_tags($board_value);
        $item['board'] = array();
        $file = $rank_d = 0;
        for ($i=0; isset($board_value[$i]); $i++) {
          // Ignore unknown characters
          if (strpos('12345678KQBNRPkqbnrp-x', $board_value[$i]) === FALSE) {
            continue;
          }

          if ($file >= $item['file_max']) {
            $file = 0;
            $rank_d++;
          }

          if (strpos('12345678', $board_value[$i]) !== FALSE) {
            // Multiple empty squares
            for ($j=0; $j<$board_value[$i]; $j++) {
              $item['board'][$rank_d][$file] = '-';
              $file++;
            }
          }
          else {
            $item['board'][$rank_d][$file] = $board_value[$i];
            $file++;
          }
        }
        $items[$delta] = $item;
      }
  }
}

/**
 * Implements hook_filter_info().
 */
function chessboard_filter_info() {
  $filters = array();
  $filters['chessboard_filter_diagram'] = array(
    'title' => t('Chessboard'),
    'description' => t('Renders chessboard diagrams.'),
    'process callback' => '_chessboard_filter_0',
    'tips callback' => '_chessboard_filter_0_tips',
    'weight' => 10,
  );

  return $filters;
}

/**
 * Implements hook_theme().
 */
function chessboard_theme() {
  return array(
    'chessboard_formatter_chessboard_default' => array(
      'render element' => 'element',
      'file' => 'chessboard_render.php',
    ),
    'chessboard' => array(
      'template' => 'chessboard',
      'render element' => 'element',
      'file' => 'chessboard_render.php',
    ),
  );
}

/**
 * Chessboard filter. Provides filtering of input into chessboard diagrams.
 *
 * @param $filter
 *   The filter object containing settings for the given format.
 *
 * @param $text
 *   The content to filter.
 */
function _chessboard_filter_0($text, $filter) {
  // Prepare the callback function.
  _chessboard_filter_callback(NULL, $filter);

  return preg_replace_callback('@\[chessboard\](.*?)\[/chessboard\]@si', '_chessboard_filter_callback', $text);
}

/**
 * Filter tips callback for chessboard filter.
 */
function _chessboard_filter_0_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('<h4>Chessboard Diagrams</h4>
<h5>Basic Usage</h5>
<p>Use the pair of <code>[chessboard]</code> and <code>[/chessboard]</code> tags to define a chessboard. The following formats are recognized:</p>
<ul>
  <li>The piece placement field (i.e., the first field) of the FEN (Forsyth-Edwards Notation) syntax. E.g., for the starting position:
    <code>[chessboard]rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR[/chessboard]</code>
  </li>
  <li>A simple and direct piece placement format. E.g., for the starting position:
<pre>[chessboard]
rnbqkbnr
pppppppp
--------
--------
--------
--------
PPPPPPPP
RNBQKBNR
[/chessboard]</pre>
Note that a dash (-) character represents an empty square.
  </li>
  <li>A mixture of the previous two formats. This is possible because the previous formats are in fact compatible to each other. E.g., for the starting position:
<pre>[chessboard]
rnbqkbnr
pppppppp
8/8/8/8
PPPPPPPP
RNBQKBNR
[/chessboard]</pre>
  However, the use of this format is NOT encouraged as it may lead to confusion.
  </li>
</ul>
<p>The renderer also supports a special feature that will converts \'x\' character to a marked square. For example, to display the diagram below which shows the squares a knight can control, you can write</p>
<pre>[chessboard]
--------
---x-x--
--x---x-
----N---
--x---x-
---x-x--
--------
--------
[/chessboard]</pre>
<p>or</p>
<pre>[chessboard]8/3x1x2/2x3x1/4N3/2x3x1/3x1x2/8/8[/chessboard]</pre>

<h5>Advanced Usage</h5>
<p>You can configure the appearance of the chessboard with a few flags, with the following syntax:</p>
<pre>[chessboard](<i>flags</i>)board[/chessboard]</pre>
<p>The following flags are supported:</p>
<ul>
  <li>Borders. Valid flags are T, B, L, and R, which correspond to the top border, the bottom border, the left border, and the right border respectively. The corresponding borders of the chessboard will be rendered for the flags specified. (Default: none is specified.)</li>
  <li>Number of Files. Valid flags are positive integers such as 4, 6, and 12. (Default: 8.)</li>
  <li>Color of the Upper Left Square. Valid flags are d and l, which correspond to the dark color and the light color. (Default: l.)</li>
</ul>
<p>These flags are especially useful in displaying a portion of a chessboard. For example, the following sentence illustrates a smothered mate at the upper-right corner:</p>
<pre>[chessboard](d3TR)
-rk
Npp
---
[/chessboard]
</pre>
<p>Any portion of a chessboard can be displayed by using these flags.</p>
');
  }
  else {
    return t('Renders chessboard diagrams.');
  }
}

/**
 * preg_replace callback to make chessboard diagrams out of chessboard syntax.
 *
 * @param $matches
 *   An array of matches found by preg_replace_callback(). Elements 0 and 1 of
 *   $matches must be the complete match and the piece placement field.
 *
 * @param $set_filter
 *   The filter object containing settings for the given format. This should
 *   only be set during a preparatory call before preg_replace_callback().
 *
 * @return
 *   A <code>string</code> containing the replacement text.
 */
function _chessboard_filter_callback($matches, $set_filter = NULL) {
  static $filter;
  if (isset($set_filter)) {
    // This is a preparatory call.
    $filter = $set_filter;
    return;
  }
  $item = array(
    'value' => $matches[1],
  );
  $node = NULL;
  $field = array();
  $items = array($item);
  chessboard_field('sanitize', $node, $field, $items, FALSE, FALSE);
  $element = _chessboard_formatter_view($items);
  $output = drupal_render($element);
  if (isset($element['#attached']) && filter_format_allowcache($filter->format)) {
    // Store attached structures so we can process these when cached filtered text is being output.
    $data['#attached'] = $element['#attached'];
    $cid = $filter->format . '::chessboard-filter-attached' . hash('sha256', serialize($element['#attached']));
    $expire = CACHE_PERMANENT;
    cache_set($cid, $data, 'cache_filter', $expire);
    $list_cid = $filter->format . '::chessboard-filter-attached-cids';
    $cache = cache_get($list_cid, 'cache_filter');
    $cids = isset($cache->data) ? $cache->data : array();
    $cids[$cid] = TRUE;
    if (!$cache || $cids != $cache->data || $expire != $cache->expire) {
      cache_set($list_cid, $cids, 'cache_filter', $expire);
    }
  }
  return $output;
}

function _chessboard_filter_page_structures_list_cids($formats) {
  $cids = array();
  foreach ($formats as $format) {
    if ($format->cache) {
      $cids[] = $format->format . '::chessboard-filter-attached-cids';
    }
  }
  return $cids;
}

function _chessboard_formatter_view($items) {
  $element = array(
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'chessboard') . '/chessboard.css' => array('media' => 'all', 'preprocess' => FALSE),
      ),
    ),
  );
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'chessboard',
      '#item' => $item,
      '#prefix' => '<div class="chessboard">',
      '#suffix' => '</div>',
      '#weight' => $delta,
    );
  }
  return $element;
}
