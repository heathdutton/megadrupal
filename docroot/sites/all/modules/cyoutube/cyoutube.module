<?php

/**
 * @file
 * Implements the functionality required to sync youtube videos.
 */

/**
 * Implements hook_menu().
 */
function cyoutube_menu() {
  $items = array();

  $items['admin/config/media/cyoutube'] = array(
    'title' => 'Youtube Sync',
    'description' => 'Configuration for syncing between Drupal and YouTube.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cyoutube_settings'),
    'access arguments' => array('Administer CYouTube'),
    'file' => 'cyoutube.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Decode the result.
 */
function cyoutube_decode($data) {
  $search_response = json_decode($data, TRUE);
  return $search_response;
}
/**
 * Fetch the schedule json data.
 */
function cyoutube_fetch($url) {
  $data = '';
  $result = drupal_http_request($url);
  if (!$result) {
    watchdog('cyoutube', 'No valid result from drupal_http_request.', array(), WATCHDOG_ERROR);
    return;
  }

  if (!isset($result->headers)) {
    watchdog('cyoutube', 'No valid headers from drupal_http_request.', array(), WATCHDOG_ERROR);
    return;
  }

  // Process HTTP response code.
  switch ($result->code) {
    case 304:
      // Could be more efficient if we can use 304 http status code.
      break;

    case 301:
    case 200:
    case 302:
    case 307:
      $data = $result->data;
      break;

    default:
      watchdog('cyoutube', 'The result from %site seems to be broken, due to "%error".', array('%site' => $url, '%error' => $result->code . ' ' . $result->error), WATCHDOG_WARNING);
  }
  return $data;
}

/**
 * Get developer ID.
 */
function cyoutube_get_channels() {
  $channel_ids = cyoutube_get_channel_ids();
  $ychannels = array();
  foreach ($channel_ids as $cid) {
    $result = db_select('field_data_' . $cid, 'c')
      ->fields('c')
      ->condition('deleted', 0)
      ->execute();
    $results = $result->fetchAll();
    $ychannels[$cid] = $results;
  }
  return $ychannels;
}


/**
 * Get developer ID.
 */
function cyoutube_get_developer_id() {
  return variable_get('cyoutube_developer_key', '');
}

/**
 * Get channel source field ID.
 */
function cyoutube_get_channel_ids() {
  $cs = variable_get('cyoutube_channel_name', '');
  $channels = explode(',', $cs);
  return $channels;
}

/**
 * Get a list of channels with additional entity field data.
 *
 * In the format of following
 * array(
 *  'channel name' => array(
 *    'file entity field machine name' => array('value',...),
 *     ...
 *   ),
 *   ...
 * )
 */
function cyoutube_get_channels_info() {
  $cids = cyoutube_get_channels();
  $result = module_invoke_all('cyoutube_get_channels_info', $cids);
  if ($result) {
    return $result;
  }
  else {
    $return = array();
    foreach ($cids as $cid => $ids) {
      $col = $cid . '_value';
      foreach ($ids as $id) {
        $return[$id->$col] = array();
      }
    }
    return $return;
  }
}

/**
 * Get channel id from youtube with the channel name.
 */
function cyoutube_get_channel_upload_id($channelname) {
  $query = db_select('cyoutube_channels', 'c');
  $query->fields('c', array('uploads'))
        ->condition('name', $channelname, '=');
  $result = $query->execute()->fetchAssoc();
  if ($result) {
    return $result['uploads'];
  }
  else {
    $channel = array('name' => $channelname);
    $cservice = cyoutube_get_youtube_service();
    $response = $cservice->channels->listChannels('contentDetails', array('forUsername' => $channelname));
    $items = $response->getItems();

    // Following is for the error tolerance purpose, we have customer use
    // channel id for channel name. Should suggest user to use channel name
    // for better performance.
    if (empty($items)) {
      $response = $cservice->channels->listChannels('contentDetails', array('id' => $channelname));
      $items = $response->getItems();
      watchdog('cyoutube', "Please use channel name only here, The '!channelname' is not a channel name.", array('!channelname' => $channelname));
    }
    if (isset($items) && isset($items[0]) && is_object($items[0])) {
      $channel['id'] = $items[0]->id;
      $channel['uploads'] = $items[0]->getContentDetails()->getRelatedPlaylists()->uploads;
      $channel['request_time'] = time();
      drupal_write_record('cyoutube_channels', $channel);
      return $channel['uploads'];
    }
  }
}

/**
 * Compose the youtube feed url with channel name.
 */
function cyoutube_feeds_url($channelname) {
  $channel_id = cyoutube_get_channel_upload_id($channelname);
  if (!$channel_id) {
    return FALSE;
  }
  else {
    return 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=' . $channel_id . '&key=AIzaSyCYKJOptr0WKOxiDtbZM1OfQz5JjVg0Kpc';
  }
}

/**
 * Get Google client.
 */
function cyoutube_get_google_client() {
  static $google_client;

  if ($google_client) {
    return $google_client;
  }

  $libraries = libraries_load('google-api-php-client');
  $developer_key = cyoutube_get_developer_id();
  if (!empty($developer_key)) {
    $google_client = new Google_Client();
    $google_client->setDeveloperKey($developer_key);
    return $google_client;
  }
}

/**
 * Get Google Youtube service.
 */
function cyoutube_get_youtube_service() {
  static $corus_youtube;

  if (empty($corus_youtube)) {
    $gclient = cyoutube_get_google_client();
    if ($gclient) {
      $corus_youtube = new Google_Service_YouTube($gclient);
      return $corus_youtube;
    }
  }
  else {
    return $corus_youtube;
  }
}

/**
 * Implements hook_permission().
 */
function cyoutube_permission() {
  return array(
    'Administer CYouTube' => array(
      'title' => t('Administer YouTube Sync'),
      'description' => t('Perform administration tasks for YouTube sync.'),
    ),
  );
}

/**
 * Get a list of video asset.
 */
function cyoutube_videos_list($channel) {

  $url = cyoutube_feeds_url($channel);
  if ($url === FALSE) {
    return FALSE;
  }

  $data = cyoutube_fetch($url);

  if ($data) {
    $data = cyoutube_decode($data);
    $videos = cyoutube_parsevideoitems($data);
    return $videos;
  }
}

/**
 * Parse YouTube video feed.
 */
function cyoutube_parsevideoitems($video_items) {
  if (!isset($video_items['items'])) {
    return;
  }
  foreach ($video_items['items'] as $key => $video) {
    $feed_title = $video['snippet']['title'];
    $id = $video['id'];
    $video_id = $video['snippet']['resourceId']['videoId'];
    $video_url = 'http://www.youtube.com/watch?v=' . $video_id;
    $thumbnail_default = $video['snippet']['thumbnails']['default']['url'];
    $thumbnail_medium = $video['snippet']['thumbnails']['medium']['url'];
    $thumbnail_high = $video['snippet']['thumbnails']['high']['url'];
    $description = $video['snippet']['description'];
    $published = $video['snippet']['publishedAt'];

    $item = array(
      'feed_title' => $feed_title,
      'id' => $id,
      'video_id' => $video_id,
      'video_url' => $video_url,
      'title' => $feed_title,
      'description' => $description,
      'thumbnail_default' => $thumbnail_default,
      'thumbnail_medium' => $thumbnail_medium,
      'thumbnail_high' => $thumbnail_high,
      'published_datetime' => date('Y-m-d H:i:s', strtotime($published)),
      'published_timestamp' => strtotime($published),
    );

    $result->items[] = $item;
  }
  return $result;
}

/**
 * Implements hook_cron().
 *
 * Import data and put it in queue for next step processing.
 */
function cyoutube_cron() {
  $channels = cyoutube_get_channels_info();

  $queue = DrupalQueue::get('cyoutube');
  foreach ($channels as $channel => $cdata) {
    $videos = cyoutube_videos_list($channel);
    if ($videos) {
      foreach ($videos->items as $video) {
        $task = array(
          'video' => $video,
          'cdata' => $cdata,
        );
        $queue->createItem($task);
      }
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 *
 * Provides an import queue processed on cron.
 */
function cyoutube_cron_queue_info() {
  return array(
    'cyoutube' => array(
      'worker callback' => 'cyoutube_queue_process',
      'time' => '900',
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function cyoutube_libraries_info() {
  $libraries['google-api-php-client'] = array(
    'name' => 'Google API',
    'vendor url' => 'http://developers.google.com',
    'download url' => 'https://github.com/google/google-api-php-client',
    'version' => '1.1.3',
    'files' => array(
      'php' => array(
        'src/Google/autoload.php',
      ),
    ),
    'versions' => array(
      '1.1.3' => array(
        'files' => array(
          'php' => array(
            'src/Google/autoload.php',
          ),
        ),
      ),
    ),
    'version arguments' => array(
      'file' => 'src/Google/Client.php',
      'pattern' => '@LIBVER\s+([0-9\.]+)@',
      'lines' => 29,
      'cols' => 9,
    ),
  );
  return $libraries;
}

/**
 * Worker callback for import schedule queue.
 *
 * Schedule title will never be changed. This field served as identifier of
 * the unique start time of each channel.
 */
function cyoutube_queue_process($item) {
  $video = $item['video'];
  $localdata = $item['cdata'];

  // Get uri string to create file:
  $uri = _cyoutube_get_video_file_uri($video);

  // Create the file.
  try {
    $provider = media_internet_get_provider($uri);
    $file = $provider->save();
    if (!is_object($file) || empty($file->fid)) {
      watchdog('cyoutube', 'Failed to create file for video "@title" - @id.',
        array(
          '@title' => $video['title'],
          '@id' => $video['id'],
        ),
        WATCHDOG_ERROR);

      return NULL;
    }

    // Fill the fields.
    $fw = entity_metadata_wrapper('file', $file);
    $fi = field_info_instances('file', 'video');
    foreach ($localdata as $field => $val) {
      if (isset($fi[$field])) {
        $fw->$field->set($val);
      }
      else {
        watchdog('cyoutube', "Field @field was not found in video file entity.", array('@field' => $field), WATCHDOG_ERROR);
      }
    }
    $mapdata = _cyoutube_get_video_file_map();
    $remotedata = array();
    foreach ($mapdata as $mapitem) {
      $remotedata = $remotedata + $mapitem;
    }
    foreach ($remotedata as $field => $val) {
      if (isset($fi[$field])) {
        if ($fi[$field]['widget']['module'] == 'image') {
          $image_url = $video[$val];
          $managed = TRUE;
          $path = system_retrieve_file($image_url, 'public://', $managed);
          if ($path) {
            $external_image_object = file_load($path->fid);
            $fw->$field->file->set($external_image_object);
          }
        }
        else {
          $fw->$field->set($video[$val]);
        }
      }
      else {
        watchdog('cyoutube', "Field @field was not found in video file entity.", array('@field' => $field), WATCHDOG_ERROR);
      }
    }
    $fw->save();
  }
  catch (Exception $e) {
    watchdog('cyoutube', "failed to sync video: !video with message: !msg", array('!video' => $video['video_url'], '!msg' => $e->getMessage()));
  }
}

/**
 * Gets video uri.
 */
function _cyoutube_get_video_file_uri($video) {
  return 'youtube://v/' . $video['video_url'];
}

/**
 * Gets video uri.
 */
function _cyoutube_get_video_file_map() {
  $result = array();
  $var = variable_get('cyoutube_description', '');
  if ($var != '') {
    $result[] = array($var => 'description');
  }
  $var = variable_get('cyoutube_id', '');
  if ($var != '') {
    $result[] = array($var => 'id');
  }
  $var = variable_get('cyoutube_video_id', '');
  if ($var != '') {
    $result[] = array($var => 'video_id');
  }
  $var = variable_get('cyoutube_thumbnail_default', '');
  if ($var != '') {
    $result[] = array($var => 'thumbnail_default');
  }
  $var = variable_get('cyoutube_thumbnail_medium', '');
  if ($var != '') {
    $result[] = array($var => 'thumbnail_medium');
  }
  $var = variable_get('cyoutube_thumbnail_high', '');
  if ($var != '') {
    $result[] = array($var => 'thumbnail_high');
  }
  $var = variable_get('cyoutube_published_timestamp', '');
  if ($var != '') {
    $result[] = array($var => 'published_timestamp');
  }
  return $result;
}
