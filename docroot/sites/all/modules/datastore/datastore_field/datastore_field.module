<?php
// $Id$

/**
 * @file
 * Provides datastore field type.
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function datastore_field_field_info() {
  return array(
    'datastore_field' => array(
      'label' => t('Datastore value field'),
      'description' => t('Stores timestamp/value pairs.'),
      'settings' => array(),
      'instance_settings' => array('multiple' => TRUE),
      'default_widget' => 'datastore_field_widget_hidden',
      'default_formatter' => 'datastore_field_default_formatter',
      'property_type' => 'field_item_datastore_field',
      'property_callbacks' => array('datastore_field_datastore_field_callback'),
    ),
  );
}

/**
 * Implementation of hook_views_api().
 */
function datastore_field_views_api() {
  return array(
    'api' => '3.0-alpha1',
  );
}

/**
 *
 */
function datastore_field_datastore_field_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';

  $property['property info'] = datastore_field_datastore_field_info();

  unset($property['query callback']);
}

/**
 * Defines info for the properties of the file-field item data structure.
 */
function datastore_field_datastore_field_info() {
  $properties['timestamp'] = array(
    'type' => 'date',
    'label' => t('Date'),
    'description' => t('Timestamp for given dataset.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['value'] = array(
    'type' => 'decimal',
    'label' => t('Value'),
    'description' => t('Value for given dataset.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $properties;
}

/**
 * Implements hook_field_validate().
 */
function datastore_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  //TODO
  foreach ($items as $delta => $item) {
    if (empty($item['timestamp'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'datastore_field_no_timestamp',
        'message' => t('Timestamp must be given.'),
      );
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function datastore_field_field_is_empty($item, $field) {
  return empty($item['timestamp']) && empty($item['value']);
}


/**
 * Implements hook_field_widget_info().
 */
function datastore_field_field_widget_info() {
  return array(
    'datastore_field_widget_hidden' => array(
      'label' => t('Hidden'),
      'field types' => array('datastore_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function datastore_field_field_formatter_info() {
  return array(
    'datastore_field_default_formatter' => array(
      'label' => t('Ouput value and timestamp'),
      'field types' => array('datastore_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function datastore_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text.
    case 'datastore_field_default_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = $item['timestamp'] . ' ' . $item['value'];
      }
      break;
  }

  return $element;
}

/**
 * Add datastore field to domain entity
 * Is only called if domain entity exists
 */
function datastore_field_datastore_domain_insert($domain) {
  $bundle = $domain->domain;

  $field_name = _datastore_field_field_name_from_domain($bundle);
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'datastore_field',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'translatable' => FALSE,
    );
    field_create_field($field);
  }

  $instance = array(
    'entity_type' => 'datastore',
    'field_name' => $field_name,
    'bundle' => $bundle,
  );

  // TODO: http://drupal.org/node/1007830
  try {
    if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }
  catch (Exception $e) {
    field_create_instance($instance);
  }
}

/**
 * Implements hook_field_storage_pre_load().
 */
function datastore_field_field_storage_pre_load($entity_type, $entities, $age, &$skip_fields, $options) {
  foreach ($entities as $entity) {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $instances = _field_invoke_get_instances($entity_type, $bundle, $options);

    foreach ($instances as $instance) {
      $field_id = $instance['field_id'];
      $field_info_instance = field_info_field_by_id($field_id);

      if ($field_info_instance['type'] == 'datastore_field') {
        $skip_fields[$field_id] = array();
      }
    }
  }
}

/**
 * Implements hook_field_storage_pre_insert().
 */
function datastore_field_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  // Prevent field api from saving the datastore field content
  // do the same as in pre update hook
  datastore_field_field_storage_pre_update($entity_type, $entity, $skip_fields);
}

/**
 * Implements hook_field_storage_pre_update().
 */
function datastore_field_field_storage_pre_update($entity_type, $entity, &$skip_fields) {
  // Prevent field api from saving the datastore field content
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  $instances = _field_invoke_get_instances($entity_type, $bundle, array('deleted' => FALSE));
  foreach ($instances as $instance) {
    $field_id = $instance['field_id'];
    $field_info_instance = field_info_field_by_id($field_id);
    if ($field_info_instance['type'] == 'datastore_field') {
      $skip_fields[$field_id] = array();

      // hook for saving field data
      if (isset($entity->$field_info_instance['field_name'])) {
        module_invoke_all('datastore_field_field_save_values', $entity_type, $entity, $field_info_instance);
      }      
    }
  }
}

/**
 * Implements hook_datastore_field_field_save_values().
 */
function datastore_field_datastore_field_field_save_values($entity_type, $entity, $field_info_instance) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  $field_name = $field_info_instance['field_name'];
  $storage_type = $field_info_instance['storage']['type'];

  $field_data = $entity->$field_name;

  if ($storage_type == 'field_sql_storage') {
    $table_name = _field_sql_storage_tablename($field_info_instance);

    $all_languages = field_available_languages($entity_type, $field_info_instance);
    $field_languages = array_intersect($all_languages, array_keys((array) $entity->$field_name));

    $columns = array('entity_type', 'entity_id', 'revision_id', 'bundle', 'delta', 'language');
    foreach ($field_info_instance['columns'] as $column => $attributes) {
      $columns[] = _field_sql_storage_columnname($field_name, $column);
    }
    $query = db_insert($table_name)->fields($columns);

    $result = db_select($table_name, 'd')
        ->fields('d', array('delta'))
        ->condition('entity_id', $id, '=')
        ->orderBy('delta', 'DESC')
        ->range(0, 1)
        ->execute()
        ->fetchAssoc();

    if (isset($result['delta'])) {
      $result['delta']++;
      $start_delta = $result['delta'];
    }
    else {
      $start_delta = 0;
    }

    foreach ($field_languages as $langcode) {
      $items = (array) $entity->{$field_name}[$langcode];
      $items = array_values($items);
      foreach ($items as $delta => $item) {
        $record = array(
          'entity_type' => $entity_type,
          'entity_id' => $id,
          'revision_id' => $vid,
          'bundle' => $bundle,
          'delta' => $start_delta + $delta,
          'language' => $langcode,
        );
        foreach ($field_info_instance['columns'] as $column => $attributes) {
          $record[_field_sql_storage_columnname($field_name, $column)] = isset($item[$column]) ? $item[$column] : NULL;
        }
        $query->values($record);

        if ($field_info_instance['cardinality'] != FIELD_CARDINALITY_UNLIMITED && ++$delta_count == $field_info_instance['cardinality']) {
          break;
        }
      }
    }
    $query->execute();
  }
}

/**
 * Implements hook_field_views_data().
 */
function datastore_field_field_views_data($field) {
  $data = field_views_field_default_views_data($field);
  foreach ($data as $table_name => $table_data) {
    // just for data fields (not revision fields)
    if (strpos($table_name, 'field_data_') !== FALSE) {
      $field_name = str_replace('field_data_', '', $table_name);
      
      // unset the combined formatter dependent field
      unset($data[$table_name][$field_name]);
      
      // change filter handler from numeric to date
      $data[$table_name][$field_name . '_timestamp']['filter']['handler'] = 'views_handler_filter_date';
      
      // add views integration for timestamp field
      $data[$table_name][$field_name . '_timestamp']['field'] = array(
        'field' => $field_name . '_timestamp',
        'table' => $table_name,
        'handler' => 'views_handler_field_date',
        'click sortable' => TRUE,
        'field_name' => $field_name . '_timestamp',
        'is revision' => FALSE, 
      );
      
      // add views integration for value field      
      $data[$table_name][$field_name . '_value']['field'] = array(
        'field' => $field_name . '_value',
        'table' => $table_name,
        'handler' => 'views_handler_field_numeric',
        'click sortable' => TRUE,
        'field_name' => $field_name . '_value',
        'is revision' => FALSE, 
      );
     }
   }
  return $data;
}


/**
 * API function for saving values to a specific datastore field
 */
function datastore_field_save_values($entity_type, $entity, $fieldname, $values, $lang = LANGUAGE_NONE) {
  $entity->{$fieldname} += array($lang => array());
  $entity->{$fieldname}[$lang] = array_merge($entity->{$fieldname}[$lang], $values);
  return entity_save($entity_type, $entity);
}

/**
 * Helper function to get field from domain/bundle
 */
function _datastore_field_field_name_from_domain($domain) {
  return 'datastore_field_' . $domain;
}
