<?php

/**
 * @file
 * Provides datastore field tests.
 */
 
class DataStoreFieldTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Datastore field tests',
      'description' => 'Test basic field functionality.',
      'group' => 'Datastore',
    );
  }

  function setUp() {
    parent::setUp('entity', 'datastore_field');
    
    // add field
    if (!field_info_field('datastore_testfield')) {
      $field = array(
        'field_name' => 'datastore_testfield',
        'type' => 'datastore_field',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'translatable' => FALSE,
      );
      field_create_field($field);
    }
    
    // add field to article
    $instance = array(
      'entity_type' => 'node',
      'field_name' => 'datastore_testfield',
      'bundle' => 'article',
      'label' => 'Value field',
      'description' => 'Value field.',
      'widget' => array(
        'type' => 'datastore_field_hidden',
        'weight' => 0,
      ),
    );
    if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
    
  }

  /**
   * Tests CRUD for a datastore.
   */
  function testSaveValues() {
    $node = new stdClass();
    $node->type = 'article';
    node_object_prepare($node);
 
    $node->title    = 'Test article';
    $node->language = LANGUAGE_NONE;
    $node->datastore_testfield[LANGUAGE_NONE] = array(
      '0' => array(
        'timestamp' => time(),
        'value'     => 23
      ),
      '1' => array(
        'timestamp' => time(),
        'value'     => 45
      ),
    );

    node_save($node);
    
    // Check for right values in db
    $result = db_select('field_data_datastore_testfield', 'd')
        ->fields('d', array('datastore_testfield_value'))
        ->orderBy('delta', 'ASC')
        ->execute()
        ->fetchAll();
    
    $this->assertEqual(23, $result[0]->datastore_testfield_value, 'First value correct.');
    $this->assertEqual(45, $result[1]->datastore_testfield_value, 'Second value correct.');
    
    // Check if values are in node object - should not be there
    $node_load = node_load(1);
    $this->assertEqual($node_load->datastore_testfield, array(), 'Values are hidden.');
    
    // Try to add more values
    $node_load->datastore_testfield[LANGUAGE_NONE] = array(
      '0' => array(
        'timestamp' => time(),
        'value'     => 120
      ),
      '1' => array(
        'timestamp' => time(),
        'value'     => 156
      ),
    );
    
    node_save($node_load);
    
    // Check for right values in db
    $result = db_select('field_data_datastore_testfield', 'd')
        ->fields('d', array('datastore_testfield_value'))
        ->orderBy('delta', 'ASC')
        ->execute()
        ->fetchAll();
    
    $this->assertEqual(23, $result[0]->datastore_testfield_value, 'First value correct.');
    $this->assertEqual(45, $result[1]->datastore_testfield_value, 'Second value correct.');
    $this->assertEqual(120, $result[2]->datastore_testfield_value, 'Third value correct.');
    $this->assertEqual(156, $result[3]->datastore_testfield_value, 'Fourth value correct.'); 
  }
}

