<?php

/**
 * @file
 * Provides datastore entity type.
 */

/**
 * Implements hook_entity_info().
 */
function datastore_entity_entity_info() {
  $return = array(
    'datastore' => array(
      'label' => t('DataStore'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'datastore',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'did',
        'bundle' => 'domain',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'domain',
      ),
      'access callback' => 'datastore_entity_access',
      'module' => 'datastore_entity',
      'metadata controller class' => 'DatastoreEntityMetadataController'
    ),
  );

  $return['datastore_domain'] = array(
    'label' => t('Domain type'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'datastore_domain',
    'fieldable' => FALSE,
    'bundle of' => 'datastore',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'domain',
      'label' => 'label',
    ),
    'access callback' => 'datastore_entity_domain_access',
    'module' => 'datastore_entity',
    'admin ui' => array(
      'path' => 'admin/structure/datastore_domains',
      'file' => 'datastore_entity.admin.inc',
      'controller class' => 'DataStoreDomainUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify domain bundles to avoid a recursion, as loading
 * the domain types needs the entity info too.
 */
function datastore_entity_entity_info_alter(&$entity_info) {
  foreach (datastore_entity_get_domains() as $domain => $info) {
    $entity_info['datastore']['bundles'][$domain] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/datastore_domains/manage/%datastore_domain',
        'real path' => 'admin/structure/datastore_domains/manage/' . $domain,
        'bundle argument' => 4,
        'access arguments' => array('administer datastore domains'),
      ),
    );
  }
}

/**
 * Menu argument loader; Load a datastore domain by string.
 *
 * @param $domain
 *   The machine-readable name of a domain type to load
 * @return
 *   A datastore domain array or FALSE if $type does not exist.
 */
function datastore_domain_load($domain) {
  return datastore_entity_get_domains($domain);
}

/**
 * Access callback for the entity API.
 */
function datastore_entity_access($op, $datastore = NULL, $account = NULL, $datastore_domain = NULL) {
  return user_access('administer datastores');
}

/**
 * Access callback for the entity API.
 */
function datastore_entity_domain_access($op, $datastore = NULL, $account = NULL, $datastore_domain = NULL) {
  return user_access('administer datastore domains');
}

/**
 * Implements hook_permission().
 */
function datastore_entity_permission() {
  $permissions = array(
    'administer datastores' =>  array(
      'title' => t('Administer datastores'),
      'description' => t('Create and delete datastores'),
    ),
    'administer datastore domains' => array(
      'title' => t('Administer datastore domains'),
      'description' => t('Create and delete datastore domains.'),
    ),
  );
  return $permissions;
}

/**
 * Gets an array of all datastore domains, keyed by the domain name.
 *
 * @param $domain
 *   If set, the domain with the given name is returned.
 * @return Entity[]
 *   Depending whether $domain isset, an array of datastore domains or a single one.
 */
function datastore_entity_get_domains($domain = NULL) {
  $domains = entity_load_multiple_by_name('datastore_domain', isset($domain) ? array($domain) : FALSE);
  if (isset($domain)) {
    return isset($domains[$domain]) ? $domains[$domain] : FALSE;
  }
  return $domains;
}

/**
 * Return option array for all currently available domains
 */
function datastore_entity_get_domain_list() {
  $options = array();

  $domains = datastore_entity_get_domains();
  foreach ($domains as $domain) {
    $options += array($domain->domain => $domain->label);
  }

  return $options;
}

/**
 * Fetch a datastore object.
 *
 * @param $did
 *   Integer specifying the datastore id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $datastore object or FALSE if it cannot be loaded.
 *
 * @see datastore_load_multiple()
 */
function datastore_load($did, $reset = FALSE) {
  $datastores = datastore_load_multiple(array($did), array(), $reset);
  return reset($datastores);
}

/**
 * Load multiple datastores based on certain conditions.
 *
 * @param $dids
 *   An array of datastore IDs.
 * @param $conditions
 *   An array of conditions to match against the {datastore} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of datastore objects, indexed by did.
 *
 * @see entity_load_multiple_by_name()
 * @see datastore_load()
 */
function datastore_load_multiple($dids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load_multiple_by_name('datastore', $dids, $conditions, $reset);
}

/**
 * Create a new datastore
 */
function datastore_create(array $values) {
  return entity_create('datastore', $values);
}

/**
 * Saves a datastore to the database.
 *
 * @param $datastore
 *   The datastore object.
 */
function datastore_save(Entity $datastore) {
  return $datastore->save();
}

/**
 * Deletes a datastore.
 *
 * @param $datastore
 *   The datastore object.
 */
function datastore_delete(Entity $datastore) {
  $datastore->delete();
}

/**
 * Delete multiple datastores.
 *
 * @param $dids
 *   An array of datastore IDs.
 */
function datastore_delete_multiple(array $dids) {
  entity_get_controller('datastore')->delete($dids);
}

/**
 * Create a new datastore domain.
 */
function datastore_domain_create(array $values) {
  return entity_create('datastore_domain', $values);
}

/**
 * Saves a datastore domain to the db.
 *
 * @param $domain
 *   The datastore domain object.
 */
function datastore_domain_save(Entity $domain) {
  $domain->save();
}

/**
 * Deletes a profile type from.
 *
 * @param $domain
 *   The datastore domain object.
 */
function datastore_domain_delete(Entity $domain) {
  $domain->delete();
}

/**
 * API function for saving values to a specific datastore entity
 */
function datastore_entity_save_values_entity($entity, $fieldname, $values, $lang = LANGUAGE_NONE) {
  // TODO: check for domain
  return datastore_field_save_values('datastore', $entity, $fieldname, $values, $lang);
}

/**
 * Implementation of rules action to store datasets
 */
function datastore_entity_add_values($domain, $category, $reference, $values) {
  $datastore = datastore_get_by_properties($domain, $category, $reference);
  $field = 'datastore_field_' . $domain;
  datastore_entity_save_values_entity($datastore, $field, $values);
}

/**
 * Returns a loaded or newly created datastore for the given properties.
 */
function datastore_get_by_properties($domain, $category, $reference) {
  $filter = array('domain' => $domain);

  if ($category) {
    $filter['category'] = $category;
  }
  if ($reference) {
    $filter['reference'] = $reference;
  }

  $datastores = datastore_load_multiple(FALSE, $filter);
  if (!$datastores) {
    datastore_save(datastore_create($filter));
    $datastores = datastore_load_multiple(FALSE, $filter);
  }

  return array_pop($datastores);
}

/**
 * Use a separate class for datastore domains.
 */
class DatastoreDomain extends Entity {
  public function __construct($values = array()) {
    parent::__construct($values, 'datastore_domain');
  }
}