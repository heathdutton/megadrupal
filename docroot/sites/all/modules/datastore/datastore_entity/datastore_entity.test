<?php

/**
 * @file
 * Provides datastore entity tests.
 */

class DataStoreEntityTestCase extends DrupalWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Datastore entity testcase',
      'description' => 'Test datastore entity functionality.',
      'group' => 'Datastore',
    );
  }

  public function setUp() {
    parent::setUp('entity', 'datastore_entity');

    $this->privileged_user = $this->drupalCreateUser(array('administer datastores', 'administer datastore domains'));
    $this->drupalLogin($this->privileged_user);
  }

  public function testCRUDDatastoreDomainInterface() {
    // Create a datastore domain with UI.
    $edit = array();
    $domain = $this->randomName(8);
    $edit['label'] = $domain;
    $edit['domain'] = drupal_strtolower($domain);
    $this->drupalPost('admin/structure/datastore_domains/add', $edit, t('Save datastore domain'));
    $this->assertText(t('Stored datastore domain @label.', array('@label' => $domain)));

    // Edit datastore domain
    $this->clickLink(t('edit'));
    $edit = array();
    $domain_new = $this->randomName(8);
    $edit['label'] = $domain_new;
    $edit['domain'] = drupal_strtolower($domain_new);
    $this->drupalPost(NULL, $edit, t('Save datastore domain'));

    // Check for changes
    $this->assertText($domain_new);
    $this->assertNoText($domain);

    // Delete datastore domain
    $this->clickLink(t('delete'));
    $this->drupalPost(NULL, array(), t('Confirm'));
    $this->assertText(t('Deleted Domain type @label.', array('@label' => $domain_new)));

    // Really deleted?
    $this->drupalGet('admin/structure/datastore_domains');
    $this->assertNoText($domain_new);
  }
}

