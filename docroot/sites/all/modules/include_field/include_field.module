<?php

/**
 * Implements hook_field_info().
 */
function include_field_field_info() {
  return array(
    'include_field_include' => array(
      'label' => t('Include'),
      'description' => t('This field identifies a local file or HTTP URL as a simple Server-Side Include.'),
      'instance_settings' => array('querystring_passthrough' => FALSE),
      'default_widget' => 'include_field_text',
      'default_formatter' => 'include_field_contents',
    ),
  );
}

/**
 * Page callback for administrative settings
 */
function include_field_admin() {
  $form = array();

  $form['#validate'][] = 'include_field_admin_validate';

  $form['files'] = array(
    '#type' => 'fieldset',
    '#title' => t('File includes'),
    '#collapsible' => FALSE,
  );

  $form['files']['include_field_containing_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('Containing folder for included files'),
    '#default_value' => variable_get('include_field_containing_folder', drupal_realpath('public://') . '/'),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t("Only files within this folder can be used in Include fields. " .
                        "This should be an absolute path, and must end with a <code>/</code>"),
    '#required' => FALSE,
  );

  $form['http'] = array(
    '#type' => 'fieldset',
    '#title' => t('HTTP includes'),
    '#collapsible' => FALSE,
  );

  $form['http']['include_field_allow_http_includes'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow HTTP includes'),
    '#default_value' => variable_get('include_field_allow_http_includes', FALSE),
    '#description' => t("Allow inclusion of resources loaded via HTTP URLs"),
  );

  $form['http']['include_field_hostname_regex'] = array(
    '#type' => 'textfield',
    '#title' => t('Regular expression for hostname validation'),
    '#default_value' => variable_get('include_field_hostname_regex', ''),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t("Restrict HTTP includes to those coming from hostnames which match the regular expression.<br/>" .
                        "Only the hostname part of the URL (between <code>http://</code> and the first <code>/</code>) " .
                        "will be considered.<br/>" .
                        "<p><strong>Note:</strong> do not surround the regex with <code>/</code>s. They will be provided for you.</p>" .
                        "<p>Example: <code>^www[0-9]?\.example\.com$</code></p>"),
    '#required' => FALSE,
  );

  $form['errors'] = array(
    '#type' => 'fieldset',
    '#title' => t('Error handling'),
    '#collapsible' => FALSE,
  );

  $failure_modes = array(
    'loud'   => t('Loud'),
    'quiet'  => t('Quiet'),
    'silent' => t('Silent'),
  );

  $failure_mode_descriptions = array(
    'loud'   => t('Show missing include warning in HTML paragraph.'),
    'quiet'  => t('Show missing include warning in HTML comment.'),
    'silent' => t('Do not show warning.'),
  );

  $form['errors']['include_field_failure_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Failure mode for Includes that cannot be loaded'),
    '#default_value' => variable_get('include_field_failure_mode', 'loud'),
    '#options' => $failure_modes,
  );

  foreach ($form['errors']['include_field_failure_mode']['#options'] as $key => $label) {
    $form['errors']['include_field_failure_mode'][$key]['#description'] = $failure_mode_descriptions[$key];
  }

  return system_settings_form($form);
}

function include_field_admin_validate($form, &$form_state) {
  if (! preg_match('/\/$/', $form_state['values']['include_field_containing_folder'])) {
    form_set_error('include_field_containing_folder', t('Containing folder path must end with a <code>/</code>.'));
  }
  if (preg_match('/\//', $form_state['values']['include_field_hostname_regex'])) {
    form_set_error('include_field_hostname_regex', t('Omit <code>/</code> from regular expression.'));
  }
}

/**
 * Implements hook_menu().
 */
function include_field_menu() {
  $items = array();

  $items['admin/config/content/include_field'] = array(
    'title' => 'Include settings',
    'description' => 'Settings of the Include Field module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('include_field_admin'),
    'access arguments' => array('manage include_field configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function include_field_permission() {
  return array(
    'manage include_field configuration' => array(
      'title' => t('Manage Include Field Configuration'),
      'description' => t('Modify configuration settings of the Include Field module.'),
    ),
    'manage include_field fields' => array(
      'title' => t('Manage Include Field Fields'),
      'description' => t('Modify the values of Include Field fields.'),
    ),
  );
}

/**
 * Implements hook_field_access().
 *
 * @todo: Find a way to prevent creation of new Include Field fields by unprivileged users.
 */
function include_field_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['type'] == 'include_field_include' && $op == 'edit') {
    if (user_access('manage include_field fields', $account)) {
      return TRUE;
    }
    return FALSE;
  }
}

/**
 * Implements hook_field_instance_settings_form().
 */
function include_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['querystring_passthrough'] = array(
    '#type' => 'checkbox',
    '#title' => t('Querystring passthrough'),
    '#default_value' => $settings['querystring_passthrough'],
    '#description' => t('If HTTP includes are enabled, passes the Drupal querystring through on the HTTP requests'),
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 */
function include_field_field_validate($obj_type, $object, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['location'])) {
      if (preg_match('/^https?:\/\//', $item['location'])) {
        if (! variable_get('include_field_allow_http_includes', FALSE)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'include_field_invalid',
            'message' => t('HTTP includes are not enabled.'),
          );
        }
        elseif ($regex = variable_get('include_field_hostname_regex', NULL)) {
          $regex = trim($regex);
          $matches = array();
          preg_match('/^https?:\/\/([^\/]*)/', $item['location'], $matches);
          $hostname = $matches[1];
          if (! preg_match('/' . $regex . '/', $hostname)) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'include_field_invalid',
              'message' => t('Hostname not allowed'),
            );
          }
        }
      }
      else {
        if (preg_match('/\.\./', $item['location'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'include_field_invalid',
            'message' => t('Path may not contain ..'),
          );
        }
        if (preg_match('/^\//', $item['location'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'include_field_invalid',
            'message' => t('Path may not begin with /'),
          );
        }
        if (preg_match('/^~/', $item['location'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'include_field_invalid',
            'message' => t('Path may not begin with ~'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function include_field_field_is_empty($item, $field) {
  return empty($item['location']);
}

/**
 * Implements hook_field_formatter_info().
 */
function include_field_field_formatter_info() {
  return array(
    'include_field_location' => array(
      'label' => t('Show location of included item'),
      'field types' => array('include_field_include'),
    ),
    'include_field_contents' => array(
      'label' => t('Show contents of included file'),
      'field types' => array('include_field_include'),
    ),
  );
}

function _include_field_location($location) {
  if (preg_match('/^https?:\/\//', $location)) {
    return $location;
  }
  $include_location = variable_get('include_field_containing_folder', drupal_realpath('public://') . '/');
  return $include_location . $location;
}

function _include_field_contents($location, $querystring_passthrough = FALSE) {
  if (preg_match('/^https?:\/\//', $location)) {
    return _include_field_http($location, $querystring_passthrough);
  }
  else {
    return _include_field_local($location);
  }
}

function _include_field_local($path) {
  $full_path = _include_field_location($path);
  if (file_exists($full_path)) {
    $contents = file_get_contents($full_path);
    return $contents;
  }
  switch (variable_get('include_field_failure_mode', 'loud')) {
    case 'loud':
      return "<p><strong>&lt;MISSING INCLUDE FILE&gt;</strong></p>";
      break;
    case 'quiet':
      return "<!-- MISSING INCLUDE FILE -->";
      break;
    case 'silent':
      return '';
      break;
  }
}

function _include_field_http($url, $querystring_passthrough = FALSE) {
  if ($querystring_passthrough && $querystring = $_SERVER['QUERY_STRING']) {
    if (preg_match('/\?/', $url)) {
      $url = $url . '&' . $querystring;
    }
    else {
      $url = $url . '?' . $querystring;
    }
  }
  $contents = @file_get_contents($url);
  if ($contents) {
    return $contents;
  }
  switch (variable_get('include_field_failure_mode', 'loud')) {
    case 'loud':
      return "<p><strong>&lt;MISSING INCLUDE FILE&gt;</strong></p>";
      break;
    case 'quiet':
      return "<!-- MISSING INCLUDE FILE -->";
      break;
    case 'silent':
      return '';
      break;
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function include_field_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $querystring_passthrough = $instance['settings']['querystring_passthrough'];
  switch ($display['type']) {
    case 'include_field_contents':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => _include_field_contents($item['location'], $querystring_passthrough));
      }
      break;
    case 'include_field_location':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => check_plain(_include_field_location($item['location'])));
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function include_field_field_widget_info() {
  return array(
    'include_field_text' => array(
      'label' => t('Text field (path or URL)'),
      'field types' => array('include_field_include'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function include_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['location']) ? $items[$delta]['location'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'include_field_text':
    default:
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 60,
        '#maxlength' => 255,
      );
      break;
  }

  $element['location'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function include_field_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}
