<?php

/**
 * @file
 * Hook Implementatinos and custom code for the achievements_embeddable module.
 */

/**
 * Implements hook_services_resources().
 */
function achievements_embeddable_services_resources() {
  return array(
    'get_user_achievements' => array(
      'operations' => array(
        'index' => array(
          'help' => 'Retrieves a list of all achievements that the specified user account has unlocked.',
          'file' => array(
            'type' => 'inc',
            'module' => 'achievements_embeddable',
            'name' => 'resources/achievements_embeddable.resource',
          ),
          'callback' => '_achievements_embeddable_get_user_achievements',
          'access callback' => 'achievements_embeddable_check_access',
          // 'access callback' => 'user_access',
          // 'access arguments' => array('access achievements'),
          // 'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'The id of the user whose achievements we will retrieve.',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
          ),
        ),
      ),
    ),
    'get_all_achievements' => array(
      'operations' => array(
        'index' => array(
          'help' => 'Retrieves a list of all achievements available on the site.',
          'file' => array(
            'type' => 'inc',
            'module' => 'achievements_embeddable',
            'name' => 'resources/achievements_embeddable.resource',
          ),
          'callback' => '_achievements_embeddable_get_all_achievements',
          'access callback' => 'achievements_embeddable_check_access',
          // 'access callback' => 'user_access',
          // 'access arguments' => array('access achievements'),
          // 'access arguments append' => FALSE,
        ),
      ),
    ),
    'achievement_trigger' => array(
      'operations' => array(
        'index' => array(
          'help' => 'Notifies the Achievements module that the specified user has earned credit towards an achievement.',
          'file' => array(
            'type' => 'inc',
            'module' => 'achievements_embeddable',
            'name' => 'resources/achievements_embeddable.resource',
          ),
          'callback' => '_achievements_embeddable_achievement_trigger',
          'access callback' => 'achievements_embeddable_check_access',
          // 'access callback' => 'user_access',
          // 'access arguments' => array('access achievements'),
          // 'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'uid',
              'type' => 'int',
              'description' => 'The id of the user who has earned credit towards an achievement.',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'achievement_id',
              'type' => 'string',
              'description' => 'The ID of the achievement to award credit towards.',
              'source' => array('path' => '1'),
              'optional' => FALSE,
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Services access function. We might change this according the client needs.
 */
function achievements_embeddable_check_access() {
  return TRUE;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function achievements_embeddable_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
    );
  }
}

/**
 * Implements hook_achievements_embeddable_callbacks().
 */
function achievements_embeddable_achievements_embeddable_callbacks() {
  $callbacks = array();

  $callbacks['defaults'] = array(
    'title' => t('Default'),
    'description' => t('Default trigger for all Achievements.'),
    'callback' => '_achievement_trigger_default',
  );

  return $callbacks;
}

/**
 * Performs the default Achievement Triggering events:
 * Award points to the given achievement and unlocks milestones (levels).
 *
 * @param int $achievement_id
 *   The ID of the achievement to award credit towards.
 * @param int $uid
 *   The user id to whom award points and/or unlock achievements.
 * @param array $data
 *   (Optional) Additional data to pass to the achievements module.
 *
 * @return String
 *   Information about the earned credit.
 */
function _achievement_trigger_default($achievement_id, $uid, $data = NULL) {
  $results = array();

  // The levels that this Achievement has.
  $levels = _achievements_embeddable_get_achievement_levels($achievement_id);

  $current_count = achievements_storage_get($achievement_id, $uid) + 1;
  achievements_storage_set($achievement_id, $current_count, $uid);
  $results['credit'] = $current_count . ' ' . $achievement_id . ' points earned';

  foreach ($levels as $count) {
    if ($current_count == $count) {
      achievements_unlocked($achievement_id . '-' . $count, $uid);
      // Info about the unlocked achievement.
      $achievement = achievements_load($achievement_id . '-' . $count);
      $achievement_unlocked = achievements_unlocked_already($achievement_id . '-' . $count, $uid);
      $achievement['rank'] = $achievement_unlocked['rank'];
      $results['unlock'] = $achievement;
    }
  }

  return $results;
}

/**
 * Helper function. Get the levels defined for the given achievement.
 *
 * @param int $achievement_id
 *   The achievement ID to get the levels from.
 *
 * @return array
 *   An array of the levels defined for the given achievement.
 */
function _achievements_embeddable_get_achievement_levels($achievement_id) {
  $levels = array();
  $achievements = achievements_load(NULL, TRUE);
  foreach ($achievements[$achievement_id]['achievements'] as $key => $achievement_level) {
    $subject = $key;
    $levels[] = (int) str_replace($achievement_id . '-', '', $subject);
  }
  return $levels;
}
