<?php


function raw_sql_query_schema() {
  $schema['raw_sql_query'] = array(
    'description' => 'TODO: please describe this table!',
    'export' => array(
      'key' => 'name',
      'key name' => 'Name',
      'primary key' => 'id',
      'identifier' => 'preset', // Exports will be defined as $preset
      'default hook' => 'default_raw_sql_query_preset',  // Function hook name.
      'api' => array(
        'owner' => 'raw_sql_query',
        'api' => 'default_raw_sql_query_preset',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique ID for presets.',
      ),
      'id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'menu_path' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'menu_title' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'tablename' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'fields' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'sql_query' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
  );

  // Supply the various materialized view schema for the sake of drupal_write_record().

  if (function_exists('raw_sql_query_get_schemas') && function_exists('raw_sql_query_prefix_table')) {
    $materialized_views = raw_sql_query_get_schemas();
      foreach ($materialized_views as $k => $v) {
        $schema[raw_sql_query_prefix_table($k)] = $v[raw_sql_query_prefix_table($k)];
      }
  }

  return $schema;

}

function raw_sql_query_uninstall() {
  $rows = db_select('raw_sql_query', 'r')->fields('r')->execute()->fetchAll();

  foreach ($rows as $row) {
    try {
      db_query(db_drop_table("rsq_" . $row->tablename));

    } catch (Exception $e) {
      drupal_set_message(t('There was not rsq tables to remove'), 'warning');
    }
  }

}

function raw_sql_query_install() {

  // create a mysql view as example
  //$query = raw_sql_query_default_raw_sql_query_preset()['example']->sql_query;
  // run this query if you are still using node table for default example
  $query = "SELECT * FROM node LIMIT 0,10";
  $sql = "CREATE TABLE rsq_drinux AS " . $query;
  $query = db_query($sql);

  // insert data example into table raw_sql-query

  db_insert('raw_sql_query')->fields(array('name' => 'example', 'menu_path' => 'drinux', 'menu_title' => 'Drinux', 'tablename' => 'drinux', 'fields' => 'title,created', 'sql_query' => 'SELECT * FROM node LIMIT 0,10'))->execute();

}



