<?php

/**
 * @file
 * This is the main module file for social media aggregation facebook.
 */

/**
 * Implements hook_social_media_aggregator_source_info().
 */
function social_media_aggregator_facebook_social_media_aggregator_source_info() {
  $source['facebook'] = array(
    'name' => 'facebook',
    'label' => t('Facebook'),
    'base' => 'social_media_aggregator_facebook',
  );
  return $source;
}

/**
 * Validate supplied identifier with the source.
 *
 * @param string $identifier
 *   The social media identifier.
 * @param int $quantity
 *   The quanity of social media atoms being returned.
 *
 * @return bool
 *   returns TRUE if a valid identifier is found
 */
function social_media_aggregator_facebook_validate($identifier, $quantity) {
  if (!$identifier) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Before save lets convert a facebook html page into a user id.
 *
 * @param array $item
 *   The social media item before being saved.
 */
function social_media_aggregator_facebook_presave(array $item) {
  $item['identifier'] = social_media_aggregator_facebook_get_page_id($item['identifier']);
  return $item;
}

/**
 * Build a render array of items belonging to identifier.
 *
 * @param string $identifier
 *   The facebook page id.
 * @param int $quantity
 *   The quanity of social media items to gather.
 * @param int $offset
 *   An optional offset if you want to skip the first X items.
 */
function social_media_aggregator_facebook_build($identifier, $quantity, $offset = NULL) {
  $build = array();
  $items = social_media_aggregator_facebook_get_posts($identifier, $quantity, $offset);
  if (!empty($items)) {
    foreach ($items as $item) {
      // We use filter_xss as we don't want to encode special chars.
      $build[] = array(
        '#theme' => 'social_media_aggregator_item',
        '#account_name' => filter_xss($item['account_name']),
        '#account_handle' => filter_xss($item['account_handle']),
        '#content' => filter_xss($item['content']),
        '#profile_pic' => filter_xss($item['profile_pic']),
      );
    }
  }

  return $build;
}

/**
 * Get the facebook page id given a URL.
 *
 * @param string $url
 *   The facebook page url for converying to a facebook id.
 */
function social_media_aggregator_facebook_get_page_id($url) {
  $page_id = &drupal_static(__FUNCTION__);
  // Facebook is super picky about headers  drupal_http_request doesn't work.
  if (!isset($page_id)) {
    $url = 'https://graph.facebook.com/' . $url;
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_BINARYTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Host: graph.facebook.com'));
    $output = curl_exec($ch);
    $output = json_decode($output);
    if (isset($output->link)) {
      $page_id = $output->id;
      return $page_id;
    }
    return FALSE;
  }
  return $page_id;
}

/**
 * Get the facebook posts and cache them.
 *
 * @param string $identifier
 *   The social media identifier.
 * @param int $quantity
 *   The quanity of social media items to gather.
 * @param int $offset
 *   An optional offset if you want to skip the first X items.
 */
function social_media_aggregator_facebook_get_posts($identifier, $quantity, $offset = NULL) {
  $cache_key = 'facebook::' . $identifier . '::' . $quantity . '::' . $offset;
  $cache = cache_get($cache_key, SOCIAL_MEDIA_AGGREGATOR_CACHE_TABLE);
  $facebook_posts = array();
  if (!empty($cache) && !empty($cache->data) && (time() < $cache->expire)) {
    $facebook_posts = $cache->data;
  }
  else {
    $app_id = variable_get('facebook_pull_app_id', '');
    $app_secret = variable_get('facebook_pull_app_secret', '');
    $options = array('limit' => $quantity);
    if (isset($offset)) {
      $options['until'] = $offset;
    }
    $posts = _facebook_pull_feed_cached($identifier, 'feed', $app_id, $app_secret, $options);
    if (!empty($posts)) {
      foreach ($posts as $post) {
        $facebook_posts[] = social_media_aggregator_facebook_normalizer($post);
      }
      $cache_length = social_media_aggregator_cache_length();
      cache_set($cache_key, $facebook_posts, SOCIAL_MEDIA_AGGREGATOR_CACHE_TABLE, REQUEST_TIME + $cache_length);
    }
  }
  return $facebook_posts;
}

/**
 * Replace the standard facebook feeds image with a larger one.
 *
 * @param string $url
 *   The url of the facebook image.
 */
function social_media_aggregator_facebook_alter_picture_url($url) {
  $url_replace = str_replace('_s.jpg', '_n.jpg', $url);
  if ($url_replace != $url) {
    return $url_replace;
  }
  return FALSE;
}

/**
 * Normalise the facebook post.
 *
 * @param object $post
 *   The facebook post object.
 */
function social_media_aggregator_facebook_normalizer($post) {
  $atom = array();
  $atom['account_name'] = $post->from->name;
  $atom['account_handle'] = $post->from->name;
  if (isset($post->picture_large) && $post->picture_large) {
    $atom['content_image'] = theme('image', array('path' => $post->picture_large, 'attributes' => array('class' => array('facebook-image'))));
  }
  else if (isset($post->picture)) {
    $atom['content_image'] = theme('image', array('path' => $post->picture, 'attributes' => array('class' => array('facebook-image'))));
  }
  else {
    $atom['content_image'] = FALSE;
  }
  $atom['profile_pic'] = theme('image', array('path' => 'https://graph.facebook.com/' . $post->from->id . '/picture', 'attributes' => array('class' => array('facebook-profile-pic'))));
  if (isset($post->message)) {
    $atom['content'] = $post->message;
  }
  else {
    $atom['content'] = '';
  }
  $timestamp = strtotime($post->created_time);
  $atom['time'] = social_media_aggregator_time_ago($timestamp);
  $atom['time_stamp'] = $timestamp;
  $atom['source'] = 'facebook';
  $atom['source_id'] = $post->id;
  return $atom;
}
