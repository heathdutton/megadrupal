<?php

/**
 * @file
 * This is the main module file for social media aggregation twitter.
 */

/**
 * Implements hook_social_media_aggregator_source_info().
 */
function social_media_aggregator_twitter_social_media_aggregator_source_info() {
  $source['twitter'] = array(
    'name' => 'twitter',
    'label' => t('Twitter'),
    'base' => 'social_media_aggregator_twitter',
  );
  return $source;
}

/**
 * Validate supplied identifier with the source.
 *
 * @param string $identifier
 *   The social media identifier.
 *
 * @return bool
 *   returns TRUE if a valid identifier is found.
 */
function social_media_aggregator_twitter_validate($identifier) {
  return TRUE;
}

/**
 * Build a render array of items belonging to identifier.
 *
 * @param string $identifier
 *   The twitter hash or at tag.
 * @param int $quantity
 *   The quanity of social media items to gather.
 * @param int $offset
 *   An optional offset if you want to skip the first X items.
 */
function social_media_aggregator_twitter_build($identifier, $quantity, $offset = NULL) {
  $build = array();
  $tweets = social_media_aggregator_twitter_get_tweets($identifier, $quantity, $offset);
  foreach ($tweets as $tweet) {
    // We use filter_xss as we don't want to encode special chars.
    $build[] = array(
      '#theme' => 'social_media_aggregator_item',
      '#account_name' => filter_xss($tweet['account_name']),
      '#account_handle' => filter_xss($tweet['account_handle']),
      '#content' => filter_xss($tweet['content']),
      '#profile_pic' => filter_xss($tweet['profile_pic']),
    );
  }
  return $build;
}

/**
 * Get the facebook posts and cache them.
 *
 * @param string $identifier
 *   The social media identifier.
 * @param int $quantity
 *   The quanity of social media items to gather.
 * @param int $offset
 *   An optional offset if you want to skip the first X items.
 */
function social_media_aggregator_twitter_get_tweets($identifier, $quantity, $offset = NULL) {
  $cache_key = 'tweets::' . $identifier . '::' . 200 . '::' . $offset;
  $cache = cache_get($cache_key, SOCIAL_MEDIA_AGGREGATOR_CACHE_TABLE);
  if (!empty($cache) && !empty($cache->data) && (time() < $cache->expire)) {
    $tweets = $cache->data;
  }
  else {
    $tweets = array();
    $twitter_pull_tweets = array();
    $twitter_pull_tweets = twitter_pull_retrieve($identifier, 200, FALSE, FALSE);
    // The twitter pull module doesn't let us do offsets.
    $x = 0;
    if (isset($offset)) {
      if ((200 - $offset) > 0) {
        $twitter_pull_tweets = array_splice($twitter_pull_tweets, $offset);
      }
      if ($offset == 200) {
        $twitter_pull_tweets = array();
      }
    }
    if (is_array($twitter_pull_tweets) && !empty($twitter_pull_tweets)) {
      foreach ($twitter_pull_tweets as $tweet) {
        if ($x == $quantity) {
          break;
        }
        $tweets[] = social_media_aggregator_twitter_normalizer($tweet, $identifier);
        $x++;
      }
    }

    $cache_length = social_media_aggregator_cache_length();
    cache_set($cache_key, $tweets, SOCIAL_MEDIA_AGGREGATOR_CACHE_TABLE, REQUEST_TIME + $cache_length);
  }
  return $tweets;
}

/**
 * Normalise the twitter post.
 *
 * @param object $tweet
 *   The tweet object.
 * @param string $identifier
 *   The twitter at or hash tag.
 */
function social_media_aggregator_twitter_normalizer($tweet, $identifier) {
  $atom = array();
  $atom['account_name'] = $tweet->username;
  $atom['account_handle'] = twitter_pull_add_links($identifier);
  $atom['content_image'] = FALSE;
  $atom['profile_pic'] = theme('image', array('path' => $tweet->userphoto_https, 'attributes' => array('class' => array('tweet-profile-pic'))));
  $atom['content'] = twitter_pull_add_links($tweet->text);
  $atom['time'] = social_media_aggregator_time_ago($tweet->timestamp);
  $atom['time_stamp'] = $tweet->timestamp;
  $atom['source'] = 'twitter';
  $atom['source_id'] = $tweet->id;
  return $atom;
}
