<?php

/**
 * @file
 * This is the main module file for social media aggregation instagram.
 */

/**
 * Implements hook_social_media_aggregator_source_info().
 */
function social_media_aggregator_instagram_social_media_aggregator_source_info() {
  $source['instagram'] = array(
    'name' => 'instagram',
    'label' => t('Instagram'),
    'base' => 'social_media_aggregator_instagram',
  );
  return $source;
}

/**
 * Validate supplied identifier with the source.
 *
 * @param string $identifier
 *   The social media identifier.
 * @param int $quantity
 *   The quanity of social media atoms being returned.
 *
 * @return bool
 *   returns TRUE if a valid identifier is found.
 */
function social_media_aggregator_instagram_validate($identifier, $quantity) {
  return TRUE;
}

/**
 * Before save lets convert a instagram user id into a proper instagram id.
 *
 * @param array $item
 *   The array of the social media item before being saved.
 */
function social_media_aggregator_instagram_presave(array $item) {
  if ((string) (int) $item['identifier'] != $item['identifier']) {
    $item['identifier'] = social_media_aggregator_instagram_convert_instagram_profile($item['identifier']);
  }
  return $item;
}

/**
 * Before save lets convert a instagram page into a user id.
 *
 * @param string $profile_id
 *   The instagram profile to convert to an instagram id.
 */
function social_media_aggregator_instagram_convert_instagram_profile($profile_id) {
  if ((string) (int) $profile_id != $profile_id) {
    module_load_include('inc', 'drupagram');
    $account = social_media_aggregator_instagram_load_master_account();
    $drupagram = drupagram_connect($account);
    if ($account_id = social_media_aggregator_instagram_user_search($drupagram, $profile_id)) {
      return $account_id;
    }
  }
  return $profile_id;
}

/**
 * Build a render array of items belonging to identifier.
 *
 * @param string $identifier
 *   The instagram id.
 * @param int $quantity
 *   The quanity of social media items to gather.
 * @param int $offset
 *   An optional offset if you want to skip the first X items.
 */
function social_media_aggregator_instagram_build($identifier, $quantity, $offset = NULL) {
  $build = array();
  $posts = social_media_aggregator_instagram_get_posts($identifier, $quantity, $offset);
  if (is_array($posts) && !empty($posts)) {
    foreach ($posts as $post) {
      // We use filter_xss as we don't want to encode special chars.
      $build[] = array(
        '#theme' => 'social_media_aggregator_item',
        '#account_name' => filter_xss($post['account_name']),
        '#account_handle' => filter_xss($post['account_handle']),
        '#content' => filter_xss($post['content']),
        '#profile_pic' => filter_xss($post['profile_pic']),
      );
    }
  }
  return $build;
}

/**
 * Search for an instagram user using the drupagram api.
 *
 * @param object $instagram_account
 *   The instagram account object.
 * @param string $user_name
 *   The instagram account username.
 */
function social_media_aggregator_instagram_user_search($instagram_account, $user_name) {
  $cache_key = 'instagram_account::' . $user_name;
  $cache = cache_get($cache_key, SOCIAL_MEDIA_AGGREGATOR_CACHE_TABLE);
  if (!empty($cache->data)) {
    $account_id = $cache->data;
  }
  else {
    $accounts = $instagram_account->user_lookup($user_name);
    if (is_array($accounts) && !empty($accounts)) {
      foreach ($accounts as $account) {
        if ($account->username == $user_name) {
          $account_id = $account->id;
          cache_set($cache_key, $account_id, SOCIAL_MEDIA_AGGREGATOR_CACHE_TABLE, CACHE_PERMANENT);
          break;
        }
      }
    }
  }
  if (isset($account_id)) {
    return $account_id;
  }
  return FALSE;
}

/**
 * Get the facebook posts and cache them.
 *
 * @param string $identifier
 *   The social media identifier.
 * @param int $quantity
 *   The quanity of social media items to gather.
 * @param int $offset
 *   An optional offset if you want to skip the first X items.
 */
function social_media_aggregator_instagram_get_posts($identifier, $quantity, $offset = NULL) {
  $cache_key = 'instagram_posts::' . $identifier . '::' . $quantity . '::' . $offset;
  $cache = cache_get($cache_key, SOCIAL_MEDIA_AGGREGATOR_CACHE_TABLE);
  if (!empty($cache) && !empty($cache->data) && (time() < $cache->expire)) {
    $posts = $cache->data;
  }
  else {
    $posts = array();
    module_load_include('inc', 'drupagram');
    $account = social_media_aggregator_instagram_load_master_account();
    if (!$account) {
      return FALSE;
    }
    $drupagram = drupagram_connect($account);
    if (!$drupagram) {
      return FALSE;
    }
    $params = array('count' => $quantity);
    if (isset($offset)) {
      $params['!max_timestamp'] = $offset;
    }
    $instagram_posts = $drupagram->user_recent($identifier, $params);
    $x = 1;
    foreach ($instagram_posts as $instagram_post) {
      if ($x > $quantity) {
        break;
      }
      // Currently the drupagram API doesn't acctually use the count parameter.
      $posts[] = social_media_aggregator_instagram_normalizer($instagram_post);
      $x++;
    }
    $cache_length = social_media_aggregator_cache_length();
    cache_set($cache_key, $instagram_posts, SOCIAL_MEDIA_AGGREGATOR_CACHE_TABLE, $cache_length);
  }
  return $posts;
}

/**
 * Get the instagram master account.
 */
function social_media_aggregator_instagram_load_master_account() {
  if ($values = db_query('SELECT drupagram_id FROM {drupagram_account}')->fetchAssoc()) {
    return drupagram_account_load($values['drupagram_id']);
  }
  return FALSE;
}

/**
 * Filter instagram posts for hastags.
 *
 * @param string $text
 *   The text to filter for hashtags.
 */
function social_media_aggregator_instagram_filter_hashtag($text) {
  $prefix = '#';
  $destination = 'http://www.instagram.com';
  $filtered_text = _drupagram_filter_text($text, $prefix, $destination);
  return $filtered_text;
}

/**
 * Filter instagram posts for @ mentions.
 *
 * @param string $text
 *   The text to filter for @ mentions.
 */
function social_media_aggregator_instagram_filter_at_mention($text) {
  $prefix = '@';
  $destination = 'http://www.instagram.com';
  $filtered_text = _drupagram_filter_text($text, $prefix, $destination);
  return $filtered_text;
}

/**
 * Normalise the instagram post.
 *
 * @param object $post
 *   The instagram object.
 */
function social_media_aggregator_instagram_normalizer($post) {
  $atom = array();
  $atom['account_name'] = $post->user->full_name;
  $atom['account_handle'] = social_media_aggregator_instagram_filter_at_mention('@' . $post->user->username);
  if ($post->images['standard_resolution']['url']) {
    $url = str_replace('http://', 'https://', $post->images['standard_resolution']['url']);
    $atom['content_image'] = theme('image', array('path' => $url, 'attributes' => array('class' => array('instagram-image'))));
  }
  else {
    $atom['content_image'] = FALSE;
  }
  $profile_url = str_replace('http://images.ak.instagram.com/', 'https://distillery.s3.amazonaws.com/', $post->user->profile_picture);
  $atom['profile_pic'] = theme('image', array('path' => $profile_url, 'attributes' => array('class' => array('instagram-profile-pic'))));
  $atom['content'] = social_media_aggregator_instagram_filter_hashtag($post->caption['text']);
  $atom['content'] = social_media_aggregator_instagram_filter_at_mention($atom['content']);
  $atom['time'] = social_media_aggregator_time_ago($post->created_time);
  $atom['time_stamp'] = $post->created_time;
  $atom['source'] = 'instagram';
  $atom['source_id'] = $post->id;
  return $atom;
}
