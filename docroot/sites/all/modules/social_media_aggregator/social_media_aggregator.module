<?php

/**
 * @file
 * This is the main module file for social media aggregation api.
 */
define('SOCIAL_MEDIA_AGGREGATOR_CACHE_TABLE', 'cache_social_media_aggregator');
define('SOCIAL_MEDIA_AGGREGATOR_CACHE_LENGTH', 1200);

/**
 * Implements hook_flush_caches().
 */
function social_media_aggregator_flush_caches() {
  return array('cache_social_media_aggregator');
}

/**
 * Implements hook_menu().
 */
function social_media_aggregator_menu() {
  $items = array();

  $items['admin/config/services/social-aggregator'] = array(
    'title' => 'Social Media Aggregator',
    'description' => 'Set settings for the social media aggregator services',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_media_aggregator_settings'),
    'access arguments' => array('administer social media aggregator'),
    'file' => 'includes/social_media_aggregator.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function social_media_aggregator_permission() {
  return array(
    'administer social media aggregator' => array(
      'title' => t('Administer social media aggregator'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function social_media_aggregator_entity_info() {
  $data = array();

  $data['social_media_aggregator'] = array(
    'label' => t('Social Aggregated Atoms'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'social_media_aggregator',
    'locking mode' => 'pessimistic',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'atom_id',
      'label' => 'atom_id',
    ),
    'load hook' => 'social_media_aggregator_load',
    'token type' => 'social-media-aggregator',
    'metadata controller class' => '',
  );

  return $data;
}

/**
 * Load a single social media atom.
 */
function social_media_aggregator_load($atom_id) {
  return entity_load_single('social_media_aggregator', $atom_id);
}

/**
 * Implements hook_theme().
 */
function social_media_aggregator_theme($existing, $type, $theme, $path) {
  return array(
    'social_media_aggregator_field' => array(
      'variables' => array(
        'source' => FALSE,
        'build' => FALSE,
      ),
    ),
    'social_media_aggregator_item' => array(
      'variables' => array(
        'source' => FALSE,
        'time' => FALSE,
        'profile_pic' => FALSE,
        'account_name' => FALSE,
        'account_handle' => FALSE,
        'content_image' => FALSE,
        'content' => FALSE,
      ),
      'template' => 'social-media-aggregator-item',
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function social_media_aggregator_hook_info() {
  $hooks = array(
    'social_media_aggregator_source' => array(),
  );
  return $hooks;
}

/**
 * Return an the named social media source.
 */
function social_media_aggregator_source($source) {
  $sources = social_media_aggregator_sources();
  return isset($sources[$source]) ? $sources[$source] : FALSE;
}

/**
 * Return an array of configured and enabled social media sources.
 */
function social_media_aggregator_sources() {

  // First check the static cache for a line item types array.
  $social_media_sources = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($social_media_sources)) {
    $social_media_sources = module_invoke_all('social_media_aggregator_source_info');
    drupal_alter('social_media_aggregator_sources_info', $social_media_sources);
  }
  return $social_media_sources;
}

/**
 * Return an array of sources suitable for use as a 'select' options list.
 */
function social_media_aggregator_sources_list() {
  $sources = social_media_aggregator_sources();
  $source_options = array(0 => t('-- Select --'));
  if (!empty($sources)) {
    foreach ($sources as $key => $details) {
      $source_options[$key] = $details['label'];
    }
  }
  return $source_options;
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function social_media_aggregator_field_info() {
  return array(
    'social_media_aggregator' => array(
      'label' => t('Social Media Aggregator'),
      'description' => t('Creates a field for Social Media sources.'),
      'default_widget' => 'social_media_aggregator',
      'default_formatter' => 'social_media_aggregator',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 *
 * Tells Drupal if the field is empty or not.
 */
function social_media_aggregator_field_is_empty($item, $field) {
  if (empty($item['source']) || empty($item['identifier'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_validate().
 *
 * Check submitted data.
 */
function social_media_aggregator_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['source'])) {
      $source = social_media_aggregator_source($item['source']);
      if (!empty($source)) {
        $validate = isset($source['base']) ? $source['base'] . '_validate' : '';
        if (!empty($validate)) {
          if (!$validate($item['identifier'], $item['quantity'])) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'social_media_aggregator_source_invalid',
              'message' => t('Unable to validate the identifier %identifier', array('%identifier' => $item['identifier'])),
            );
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 *
 * Give an option to alter our submitted data.
 */
function social_media_aggregator_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (!empty($item['source'])) {
      $source = social_media_aggregator_source($item['source']);
      if (!empty($source)) {
        $presave = isset($source['base']) ? $source['base'] . '_presave' : '';
        if (!empty($presave) && function_exists($presave)) {
          if ($data = $presave($item)) {
            $items[$delta] = $data;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 *
 * Expose Field API widget types.
 */
function social_media_aggregator_field_widget_info() {
  return array(
    'social_media_aggregator' => array(
      'label' => t('Social Media Aggregator Widget'),
      'field types' => array('social_media_aggregator'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Return the form for a single field widget.
 */
function social_media_aggregator_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    'source' => array(
      '#type' => 'select',
      '#title' => t('Source'),
      '#options' => social_media_aggregator_sources_list(),
      '#description' => t('Select the social media source'),
      '#default_value' => isset($items[$delta]['source']) ? $items[$delta]['source'] : '',
    ),
    'identifier' => array(
      '#type' => 'textfield',
      '#title' => t('Identifier'),
      '#description' => t('Input the relevant identifier for the source'),
      '#default_value' => isset($items[$delta]['identifier']) ? $items[$delta]['identifier'] : '',
    ),
    'quantity' => array(
      '#type' => 'textfield',
      '#title' => t('No. of Items'),
      '#description' => t('Select the number of items you would like to return from the source'),
      '#default_value' => isset($items[$delta]['quantity']) ? $items[$delta]['quantity'] : '',
    ),
  );
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function social_media_aggregator_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'social_media_aggregator_source_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function social_media_aggregator_field_formatter_info() {
  $info = array(
    'social_media_aggregator' => array(
      'label' => t('Social Media Aggregator'),
      'field types' => array('social_media_aggregator'),
      'description' => t('Format social items for display'),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function social_media_aggregator_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'social_media_aggregator':
      foreach ($items as $delta => $item) {
        $build = array();
        $source = social_media_aggregator_source($item['source']);
        $callback = isset($source['base']) ? $source['base'] . '_build' : '';
        if (!empty($callback) && function_exists($callback)) {
          $build = $callback($item['identifier'], $item['quantity']);
        }
        $element[$delta][] = array(
          '#theme' => 'social_media_aggregator_field',
          '#source' => $source,
          '#build' => $build,
        );
      }
      break;
  }
  return $element;
}

/**
 * Return the themed a normalised social media atom.
 *
 * @param array $variables
 *   The rendered social media atom array to pass to the fields theme function.
 */
function theme_social_media_aggregator_field(array $variables) {
  $build = $variables['build'];
  $content = '';
  if (!empty($build)) {
    $content .= drupal_render($build);
  }
  return $content;
}

/**
 * Get a nicer looking date than a timestamp.
 *
 * @param int $timestamp
 *   A timestamp to work out the time relative to now.
 */
function social_media_aggregator_time_ago($timestamp) {
  if (empty($timestamp)) {
    return FALSE;
  }
  $now = REQUEST_TIME;
  // Is it future date or past date?
  if ($now > $timestamp) {
    $difference = $now - $timestamp;
  }
  else {
    $difference = $timestamp - $now;
  }
  $interval = format_interval($difference, 1);
  return t('@time ago', array('@time' => $interval));
}

/**
 * Return the standard cache length for all social media atoms.
 */
function social_media_aggregator_cache_length() {
  return variable_get('social_media_aggregator_cache_length', SOCIAL_MEDIA_AGGREGATOR_CACHE_LENGTH);
}
