<?php

/**
 * @file
 * Display a div for users with appropriate permissions.
 * The div is driven by jQuery and appended to the body tag.
 * The div displays the current viewport dimensions measured with verge.
 */

define('VERGE_LIB_MEASURE_DIV_ENABLED', 1);
define('VERGE_LIB_MEASURE_CSS_ENABLED', 1);
define('VERGE_LIB_MEASURE_TARGET_ID', 'page');

/**
 * Implements hook_help().
 */
function verge_lib_measure_help($path, $arg) {
  switch ($path) {
    case 'admin/help#verge_lib_measure':
      // Return a safe version of the module's README.txt file.
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implements hook_permission().
 */
function verge_lib_measure_permission() {
  return array(
    // Configuration permission.
    'configure verge measure' => array(
      'title' => t("Configure 'verge_lib_measure'"),
      'description' => t('Allow users within role to set up <em>verge_lib_measure</em> configuration options.'),
    ),

    // View permission (@ enabled frontend themes).
    'display verge measure at frontend themes' => array(
      'title' => t("Display 'viewport dimensions' at enabled frontend themes"),
      'description' => t('Allow users within role to view the actual viewport dimensions at all enabled frontend themes.'),
    ),

    // View permission (@ backend (admin) theme).
    'display verge measure at backend themes' => array(
      'title' => t("Display 'viewport dimensions' at the admin theme"),
      'description' => t('Allow users within role to view the actual viewport dimensions at the admin theme.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function verge_lib_measure_menu() {
  // Include configuration file/form.
  $items['admin/config/media/verge-lib-measure'] = array(
    'title' => 'Verge.js library measure',
    'description' => "Settings for 'verge_lib_measure'.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('verge_lib_measure_settings_form'),
    'access arguments' => array('configure verge measure'),
    'file' => 'inc/verge_lib_measure.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_js_alter().
 */
function verge_lib_measure_js_alter(&$javascript) {
  // Check if library is loaded.
  if (verge_lib_loaded()) {
    // Get active theme.
    global $theme;
    // Get admin theme name.
    $theme_admin = variable_get('admin_theme', 'seven');
    // Get all themes.
    $themes_all = list_themes();
    // Build cutsom array: enabled themes, without 'seven'.
    $themes_enabled = array();
    foreach ($themes_all as $theme_enabled) {
      if ($theme_enabled->status == 1 && $theme_enabled->name != 'seven') {
        $themes_enabled[] = $theme_enabled->name;
      }
    }

    // Act on admin theme.
    if ($theme == $theme_admin) {
      if (user_access('display verge measure at backend themes')) {
        _verge_lib_measure_add_files();
      }
    }
    // Act on enabled frontend themes.
    elseif (in_array($theme, $themes_enabled)) {
      if (user_access('display verge measure at frontend themes')) {
        _verge_lib_measure_add_files();
      }
    }
  }
}

/**
 * Custom drupal_add_js() and drupal_add_css() calls.
 */
function _verge_lib_measure_add_files() {
  // Load jQuery.ui and jQuery.cookie if needed.
  $system_libs_given = drupal_get_library('system');
  $system_libs_needed = array(
    'ui',
    'jquery.cookie',
  );
  foreach ($system_libs_needed as $needed) {
    if (!in_array($needed, $system_libs_given)) {
      drupal_add_library('system', $needed);
    }
  }

  // Add base javascript to page (verge cookie).
  $data_js_base = drupal_get_path('module', 'verge_lib_measure') . '/js/verge_lib_measure.cookie.js';
  $options_js_base = array(
    'type' => 'file',
    'scope' => 'header',
    'group' => JS_THEME,
    'every_page' => FALSE,
    'cache' => TRUE,
    'preprocess' => TRUE,
    'weight' => 0,
  );
  drupal_add_js($data_js_base, $options_js_base);

  // Add extended javascript to page (measurement results div),
  // if corresponding setting is enabled.
  if (variable_get('verge_lib_measure_div_enabled', VERGE_LIB_MEASURE_DIV_ENABLED) == 1) {
    $data_js_base = drupal_get_path('module', 'verge_lib_measure') . '/js/verge_lib_measure.div.js';
    $options_js_base = array(
      'type' => 'file',
      'scope' => 'header',
      'group' => JS_THEME,
      'every_page' => FALSE,
      'cache' => TRUE,
      'preprocess' => TRUE,
      'weight' => 1,
    );
    drupal_add_js($data_js_base, $options_js_base);
    // Attach setting to js.
    drupal_add_js(array('verge_lib_measure' => array('append_id' => variable_get('verge_lib_measure_target_id', VERGE_LIB_MEASURE_TARGET_ID))), 'setting');

    // Add css to page if corresponding setting is enabled.
    if (variable_get('verge_lib_measure_css_enabled', VERGE_LIB_MEASURE_CSS_ENABLED) == 1) {
      $data_css = drupal_get_path('module', 'verge_lib_measure') . '/css/verge_lib_measure.css';
      $options_css = array(
        'type' => 'file',
        'group' => JS_THEME,
        'every_page' => FALSE,
        'preprocess' => TRUE,
        'media' => 'screen',
      );
      drupal_add_css($data_css, $options_css);
    }
  }
}
