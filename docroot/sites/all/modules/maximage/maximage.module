<?php
/**
 * @file
 * Maximage Module - Beta version - March 2014.
 */

/**
 * Hook_help().
 */
function maximage_help($path, $arg) {
  switch ($path) {
    case "admin/help#maximage":
      $output = '<p>' . t("Maximage Help") . '</p>';
      $output .= '<p><h1>Install</h1></p><p>Put the module folder into sites/all/modules dir.<br />Download <a href="http://blog.aaronvanderzwan.com/2012/07/maximage-2-0/#download">jquery.maximage.js</a>, <a href="http://jquery.malsup.com/cycle/download.html">jquery.cycle.all.js</a>.<br />Install the libraries under your js directory (i.e. put the into "maximage" and "cycle" directories and put them into Libraries folder).</p>';
      $output .= '<p>Under admin/modules enable Maximage module.<br />Configure the path of js libraries and css or leave the default path.</p>';
      $output .= '<p><br /><h1>Usage</h1></p>';
      $output .= '<p>The module create a new content type "Maximage".<br />To insert a background slideshow add a new content of type "Maximage".<br />Upload images, order them, add captions and put in path textarea all paths (one per line) where the Maximage item has to be shown. <br />Metachar * or &lt;front&gt; are allowed.</p>';
      break;

    default:
      $output = '';
  }
  return $output;
}

/**
 * Hook_permission().
 */
function maximage_permission() {
  return array(
    'access maximage content' => array(
      'title' => t('Access to Maximage'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function maximage_menu() {
  $items = array();
  $items['admin/config/maximage'] = array(
    'title' => 'Maximage configuration',
    'description' => 'Maximage configuration',
    'file' => 'maximage_configuration.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('maximage_configuration_setting_form'),
    'access arguments' => array('administer content'),
  );
  return $items;
}

/**
 * Hook_theme.
 */
function maximage_theme() {
  return array(
    'maximage' => array(
      'template' => 'maximage',
      'variables' => array(),
    ),
  );
}

/**
 * Implements preprocess_html().
 */
function maximage_preprocess_html(&$variables) {
  if (user_access('access maximage content')) {

    /* Get the url path */
    $path = current_path();
    $path_alias = drupal_get_path_alias();
    global $language;
    /* Get all data in 'Maximage' */
    $maximage = maximage_get_maximage($path_alias, $path, $language->language);
    /* Add css and jQuery + HTML */
    if (count($maximage) > 0) {
      $css_path = maximage_get_path('css');
      drupal_add_css($css_path . '/maximage.css');
      $js_path_maximage = maximage_get_path('maximage');
      $js_path_cycle = maximage_get_path('cycle');
      $htmlcustom = $maximage['custom_html'];
      $htmlbody = $maximage['body'];
      $instance_of_maximage = maximage_get_custom($maximage['custom_js']);

      $output = theme('maximage', array(
        'title' => t('Maximage'),
        'images' => $maximage['arr_images'],
        'htmlcustom' => $htmlcustom,
        'htmlbody' => $htmlbody,
        'customjs' => $maximage['custom_js'],
        'instance_of_maximage' => $instance_of_maximage,
      ));
      drupal_add_js($js_path_maximage . "/jquery.maximage.js");
      drupal_add_js($js_path_cycle . "/jquery.cycle.all.js");
      drupal_add_js("jQuery(window).load(function(){ jQuery('body').prepend('" . trim(preg_replace('/\s+/', ' ', $output)) . "')});", "inline");
      drupal_add_js("jQuery(window).load(function(){ " . $instance_of_maximage . " });", "inline");
    }
  }
}

/**
 * Implements hook_node_info().
 */
function maximage_node_info() {
  return array(
    'maximage' => array(
      'name' => t('Maximage'),
      'base' => 'maximage',
      'description' => t('Use this to create a new Maximage container.'),
      'has_title' => TRUE,
      'title_label' => t('maximage'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function maximage_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Get the Maximage object.
 *
 * @param string $path
 *   The path of current Drupal page.
 *
 * @return array
 *   The array containing the best Maximage item (longest Maximage path).
 */
function maximage_get_maximage($path, $path_alias, $language) {
  $maximage_stack = array();
  $query = db_select('node', 'n')
    ->fields('n')
    ->condition('n.type', 'maximage', '=')
    ->execute();

  foreach ($query as $q) {
    $obj = node_load($q->nid);
    $fields_array = field_get_items('node', $obj, 'field_maximagepath');
    $field_value = $fields_array[0]['value'];
    $maximage_path = maximage_get_best_matching_path($path, $field_value);
    $maximage_path_alias = maximage_get_best_matching_path($path_alias, $field_value);
    $body_values = field_get_items('node', $obj, 'body');
    $custom_js_values = field_get_items('node', $obj, 'field_maximagejquery');
    $custom_html_values = field_get_items('node', $obj, 'field_maximagehtml');
    $language_field = $obj->language;
    if ($maximage_path != '' && ($language_field == 'und' || $language_field == $language)) {
      $maximage_stack[] = array(
        'nid' => $q->nid,
        'body' => $body_values[0]['value'],
        'custom_js' => $custom_js_values[0]['value'],
        'custom_html' => $custom_html_values[0]['value'],
        'arr_images' => field_get_items('node', $obj, 'field_maximage'),
        'maximage_path' => $maximage_path,
      );
    }
    if ($maximage_path_alias != '' && ($language_field == 'und' || $language_field == $language)) {
      $maximage_stack[] = array(
        'nid' => $q->nid,
        'body' => $body_values[0]['value'],
        'custom_js' => $custom_js_values[0]['value'],
        'custom_html' => $custom_html_values[0]['value'],
        'arr_images' => field_get_items('node', $obj, 'field_maximage'),
        'maximage_path' => $maximage_path_alias,
      );
    }
  }
  $maximage = maximage_select_best_maximage($maximage_stack);
  return $maximage;
}

/**
 * Select the best Maximage.
 */
function maximage_select_best_maximage($maximage_stack) {
  $best_maximage = array();
  $len_of_path = '';
  for ($i = 0; $i < count($maximage_stack); $i++) {
    if (strlen($maximage_stack[$i]['maximage_path']) > $len_of_path) {
      $len_of_path = strlen($maximage_stack[$i]['maximage_path']);
      $best_maximage = $maximage_stack[$i];
    }
  }
  return $best_maximage;
}

/**
 * Filter images in path.
 *
 * @param string $path
 *   The path of current Drupal page.
 * @param string $field_value
 *   The string containing path of Maximage.
 *
 * @return string
 *   The string containing the longest publication Maximage path.
 */
function maximage_get_best_matching_path($path, $field_value) {
  $found = array();
  $longest = '';
  $frontpage = variable_get('site_frontpage');

  /* get the Maximage path, trim spaces and convert new lines */
  $str = nl2br(trim($field_value));

  /* get all path in Maximage textarea */
  $lineofpath = explode('<br />', $str);

  /* for every path found... */
  for ($j = 0; $j < count($lineofpath); $j++) {
    if (drupal_match_path($path, $lineofpath[$j])) {
      $found[] = $lineofpath[$j];
    }
    elseif (($lineofpath[$j] == '<front>') && ($frontpage == current_path())) {
      /* is the path front? */
      $found[] = $lineofpath[$j];
    }
  }
  /* set longest to the first item found */
  if (isset($found[0])) {
    $longest = $found[0];
  }
  /* choose the longest (deeper) path */
  for ($i = 0; $i < count($found); $i++) {
    if ($found[$i] > $longest) {
      $longest = $found[$i];
    }
  }
  return $longest;
}

/**
 * Return the path.
 */
function maximage_get_path($var) {
  if ($var == 'css') {
    return variable_get('csspath');
  }
  elseif ($var == 'maximage') {
    return variable_get('jspathmaximage');
  }
  elseif ($var == 'cycle') {
    return variable_get('jspathcycle');
  }
}

/**
 * Return the custom code of Maximage.
 */
function maximage_get_custom($jscustom) {
  $instance = '';
  if (trim($jscustom) == '') {
    $instance = "jQuery('#maximage').maximage();";
  }
  else {
    $instance = $jscustom;
  }
  return $instance;
}

/**
 * Remove options from form.
 */
function maximage_form_alter(&$form, &$form_state, $form_id) {
  if ($_GET['q'] == 'node/add/maximage') {
    $form['comment_settings']['#access'] = FALSE;
    $form['comment_settings']['#disabled'] = TRUE;
    $form['options']['promote']['#default_value'] = FALSE;
    $form['#after_build'][] = 'maximage_after_build';
  }
}

/**
 * Remove options from form.
 */
function maximage_after_build($form, &$form_state) {
  $form['path']['#access'] = FALSE;
  $form['menu']['#access'] = FALSE;
  return ($form);
}

/**
 * Remove options from node form.
 */
function maximage_form_node_form_alter(&$form, $form_state) {
  $type = $form['#node']->type;
  if ($type == 'maximage') {
    $form['comment_settings']['#access'] = FALSE;
    $form['comment_settings']['#disabled'] = TRUE;
    $form['options']['promote']['#default_value'] = FALSE;
    $form['#after_build'][] = 'maximage_after_build';
  }
}

/**
 * Deny access for maximage nodes.
 */
function maximage_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'maximage' && $op == 'view') {
    return NODE_ACCESS_DENY;
  }
}
