<?php

/**
 * @file
 * The node delete module
 */

/**
 * Implements hook_node_insert()
 */
function node_delete_node_insert($node) {
  // When node insert complete then insert node_delete_deleted on node_delete table
  db_insert('node_delete')
      ->fields(array(
        'nid' => $node->nid,
        'uid' => $node->uid,
        'node_delete_deleted' => 0,
        'last_updated_time' => $node->created,
      ))
      ->execute();
}

/**
 * Implements hook_form_FORM_ID_alter()
 * Alter form id node_delete_confirm at node.pages.inc
 * url: node/%/delete
 */
function node_delete_form_node_delete_confirm_alter(&$form, &$form_state) {
  $form['#submit'] = array('node_delete_form_node_delete_confirm_submit');
}

/**
 * Implements hook_form_FORM_ID_alter()
 * Alter form id node_admin_content at node.admin.inc
 * url: admin/content
 */
function node_delete_form_node_admin_content_alter(&$form, &$form_state) {
  $form['#submit'] = array('node_delete_form_node_multiple_delete_confirm_submit');
}

/**
 * Update status node when delete to "unpublished" and set node_delete_deleted is 1
 * @param array $form
 * @param array $form_state
 */
function node_delete_form_node_delete_confirm_submit(&$form, &$form_state) {
  // Check confirm value
  global $user;
  if ($form_state['values']['confirm']) {
    $node = node_load($form_state['values']['nid']);
    db_update('node')
        ->fields(array('status' => 0))
        ->condition('nid', $node->nid)
        ->execute();
    db_update('node_revision')
        ->fields(array('status' => 0))
        ->condition('nid', $node->nid)
        ->execute();
    db_update('node_delete')
        ->fields(array(
          'node_delete_deleted' => 1,
          'uid' => $user->uid,
          'last_updated_time' => REQUEST_TIME
        ))
        ->condition('nid', $node->nid)
        ->execute();
  }

  // Clear cache
  entity_get_controller('node')->resetCache(array($node->nid));

  $form_state['redirect'] = 'admin/content';
}

/**
 * Update status node when delete to "unpublished" and set node_delete_deleted is 1
 * @param array $form
 * @param array $form_state
 */
function node_delete_form_node_multiple_delete_confirm_submit(&$form, &$form_state) {
  // Check confirm value
  global $user;

  if ($form_state['values']['operation'] === 'delete') {
    foreach ($form_state['values']['nodes'] as $nid) {
      db_update('node')
          ->fields(array('status' => 0))
          ->condition('nid', $nid)
          ->execute();
      db_update('node_revision')
          ->fields(array('status' => 0))
          ->condition('nid', $nid)
          ->execute();
      db_update('node_delete')
          ->fields(array(
            'node_delete_deleted' => 1,
            'uid' => $user->uid,
            'last_updated_time' => REQUEST_TIME
          ))
          ->condition('nid', $nid)
          ->execute();
    }
    // Clear cache
    entity_get_controller('node')->resetCache(array($nid));
  }

  $form_state['redirect'] = 'admin/content';
}

/**
 * Implements hook_node_update().
 * 
 * @param object $node
 */
function node_delete_node_update($node) {
  // If node status is 1 set node delete status to 0.
  if ($node->status === 1) {
    global $user;
    db_update('node_delete')
        ->fields(array(
          'node_delete_deleted' => 0,
          'uid' => $user->uid,
          'last_updated_time' => $node->changed
        ))
        ->condition('nid', $node->nid)
        ->execute();
  }
}

/**
 * Implements hook_views_api().
 *
 */
function node_delete_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'node_delete') . '/views',
  );
}
