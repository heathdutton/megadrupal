<?php

/**
 * @file
 * Module implementation for Views S3 Actions
 */

/**
 * Implements hook_views_api().
 */
function views_s3_actions_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_menu().
 */
function views_s3_actions_menu() {
  $items['views-s3-actions/%/delete/%'] = array(
    'title' => 'Delete S3 item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_s3_actions_delete_item_form', 1, 3),
    'access arguments' => array('administer S3 content'),
    'type' => MENU_CALLBACK,
  );
  $items['views-s3-actions/%/copy/%'] = array(
    'title' => 'Copy S3 item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_s3_actions_copy_item_form', 1, 3),
    'access arguments' => array('administer S3 content'),
    'type' => MENU_CALLBACK,
  );
  $items['views-s3-actions/%/storage/%'] = array(
    'title' => 'Change storage type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_s3_actions_storage_item_form', 1, 3),
    'access arguments' => array('administer S3 content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function views_s3_actions_permission() {
  return array(
    'administer S3 content' =>  array(
      'title' => t('Administer S3 content'),
      'description' => t('Administer content in Amazon bucket.'),
      'warning' => t('Users with this permission will be able to modify your files hosted in Amazon S3, these changes cannot be undone.')
    ),
  );
}

/**
 * Implements hook_theme().
 */
function views_s3_actions_theme($existing, $type, $theme, $path) {
  return array(
    'views_s3_actions_list' => array(
      'variables' => array('actions' => array()),
      'file' => 'views_s3_actions.theme.inc',
    ),
    'views_s3_actions_default_action' => array(
      'variables' => array('action' => array(), 'values' => array()),
      'file' => 'views_s3_actions.theme.inc',
    ),
  );
}

/**
 * Implements hook_views_s3_actions().
 */
function views_s3_actions_views_s3_actions_info() {
  return array(
    'delete' => array(
      '#title' => t('Delete'),
      '#description' => t('Deletes a file from the bucket.'),
      '#href' => 'views-s3-actions/%key/delete/%bucket',
      '#perm' => 'administer S3 content',
    ),
    'copy' => array(
      '#title' => t('Copy'),
      '#description' => t('Copies a file from the bucket to another location in the bucket.'),
      '#href' => 'views-s3-actions/%key/copy/%bucket',
      '#perm' => 'administer S3 content',
    ),
    'storage' => array(
      '#title' => t('Change storage'),
      '#description' => t('Change storage type to STANDARD or REDUCED_REDUNDANCY.'),
      '#href' => 'views-s3-actions/%key/storage/%bucket',
      '#perm' => 'administer S3 content',
    ),
  );
}

/**
 * FAPI form building
 */
function views_s3_actions_delete_item_form($form, &$form_state, $key, $bucket) {
  $key = urldecode($key);
  $form['key'] = array(
    '#type' => 'hidden',
    '#value' => $key,
  );
  $form['bucket'] = array(
    '#type' => 'hidden',
    '#value' => $bucket,
  );
  $question = t('Delete file with path %path from bucket %bucket', array('%path' => $key, '%bucket' => $bucket));
  $description = t('If you hit accept the file will be deleted from the S3 permanently.');
  $path = '';
  return confirm_form($form, $question, $path, $description, t('Delete'));
}

/**
 * Submit callback for views_s3_actions_delete_item_form
 */
function views_s3_actions_delete_item_form_submit($form, &$form_state) {  
  // Instantiate the class
  $S3API = new S3APIRequest();
  $S3API->setParam('bucket_name', $form_state['values']['bucket']);

  if ($S3API->deleteObject($form_state['values']['key'])) {
    drupal_set_message(t('Object was deleted successfully.'));
    drupal_goto();
  }
  else {
    throw new Exception(t('Object could not be deleted.'));
  }

}

/**
 * FAPI form building
 */
function views_s3_actions_copy_item_form($form, &$form_state, $key, $bucket) {
  $key = urldecode($key);

  // Instantiate the class
  $S3API = new S3APIRequest();
  $S3API->setParam('bucket_name', $bucket);

  $object = $S3API->getObjectMetadata(array('Key' => $key));

  $form['source_markup'] = array(
    '#markup' => '<p><strong>' . t('Source bucket: ') . '</strong>' . $bucket . '</p><p><strong>' . t('Source file: ') . '</strong>' . $object['Key'] . '</p>',
  );

  $form['source_prefix'] = array(
    '#type' => 'hidden',
    '#value' => $object['Key'],
  );
  $form['source_bucket'] = array(
    '#type' => 'hidden',
    '#value' => $bucket,
  );

  $form['dest_bucket'] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#title' => t('Destination bucket'),
    '#description' => t('Select the bucket you want to copy the file into.'),
    '#options' => _get_bucket_list(),
  );
  $form['dest_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Destination filename'),
    '#description' => t('Input the destination filename using the whole path. Ex: <em>folder1/folder2/filename.ext</em>.'),
    '#default_value' => $object['Key'],
    '#required' => TRUE,
  );
  $form['dest_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Copy'),
  );

  return $form;
}

/**
 * Submit callback for views_s3_actions_copy_item_form
 */
function views_s3_actions_copy_item_form_submit($form, &$form_state) {
  // Instantiate the class
  $S3API = new S3APIRequest();
  $S3API->setParam('bucket_name', $bucket);

  if ($S3API->copyObject(array(
    'bucket' => $form_state['values']['source_bucket'],
    'filename' => $form_state['values']['source_prefix'],
  ), array(
    'bucket' => $form_state['values']['dest_bucket'],
    'filename' => $form_state['values']['dest_prefix'],
  ))) {
    drupal_set_message(t('The object was successfully copied.'));
    drupal_goto();
  }
  else {
    throw new Exception(t('The object could not be copied.'));
  }
}

/**
 * FAPI form building
 */
function views_s3_actions_storage_item_form($form, &$form_state, $key, $bucket) {
  $key = urldecode($key);

  // Instantiate the class
  $S3API = new S3APIRequest();
  $S3API->setParam('bucket_name', $bucket);
  
  $object = $S3API->getObjectMetadata(array('Key' => $key));
  
  $form['source_markup'] = array(
    '#markup' => '<p><strong>' . t('Current storage: ') . '</strong>' . $object['StorageClass'] . '</p>',
  );

  $form['prefix'] = array(
    '#type' => 'hidden',
    '#value' => $object['Key'],
  );
  $form['bucket'] = array(
    '#type' => 'hidden',
    '#value' => $bucket,
  );

  $form['storage'] = array(
    '#type' => 'radios',
    '#title' => t('Storage'),
    '#description' => t('Select the final storage for the file.'),
    '#options' => array(
      AmazonS3::STORAGE_REDUCED => 'REDUCED_REDUNDANCY',
      AmazonS3::STORAGE_STANDARD => 'STANDARD',
    ),
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Change'),
  );
  
  return $form;
}

/**
 * Submit callback for views_s3_actions_copy_item_form
 */
function views_s3_actions_storage_item_form_submit($form, &$form_state) {
  // Instantiate the class
  $S3API = new S3APIRequest();
  $S3API->setParam('bucket_name', $form_state['values']['bucket']);

  if ($S3API->changeStorage(array(
    'filename' => $form_state['values']['prefix'],
    'storage' => $form_state['values']['storage'],
  ))) {
    drupal_set_message(t('The storage type was successfully changed.'));
    drupal_goto();
  }
  else {
    throw new Exception(t('The storage type could not be changed.'));
  }
}

/**
 * Helper function to get all the links
 * @return
 *   An structured array containing the information about the link
 */
function _get_views_s3_actions_info() {
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['cache'] = &drupal_static(__FUNCTION__);
  }
  $cache = &$drupal_static_fast['cache'];

  if (!isset($cache)) {
    if (!isset($cache['vs3l']) || !is_array($cache['vs3l'])) {
      // Add default values
      $cache['vs3l'] = array();
    }
    $cache['vs3l'] = module_invoke_all('views_s3_actions_info');
    drupal_alter('views_s3_actions_info_alter', $cache);
  }
  return isset($cache['vs3l']) ? $cache['vs3l'] : array();
}