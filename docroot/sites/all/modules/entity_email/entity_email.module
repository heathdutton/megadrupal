<?php

/**
 * @file
 * Entity Email Type / Entity Email module.
 */

/**
 * Define a couple of realm fields.
 */
define('ENTITY_EMAIL_FIELD_MAIL_BODY', 'entity_email_mail_body');
define('ENTITY_EMAIL_FIELD_MAIL_BODY_PLAIN', 'entity_email_mail_body_plain');
define('ENTITY_EMAIL_FIELD_MAIL_ATTACHEMENT', 'entity_email_mail_attachment');

/**
 * Implements hook_menu().
 */
function entity_email_menu() {
  $items['admin/structure/entity_email_type/autocomplete_tags'] = array(
    'title' => 'Entity Email tags autocomplete',
    'page callback' => 'entity_email_type_autocomplete_tags',
    'page arguments' => array(4),
    'access arguments' => array('manage entity email types'),
    'file' => 'includes/entity_email.ajax.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function entity_email_entity_info() {
  $items = array(
    'entity_email_type' => array(
      'label' => t('Email type'),
      'plural label' => t('Email types'),
      'description' => t('Create email type with token and rules support.'),
      'entity class' => 'EntityEmailType',
      'controller class' => 'EntityEmailTypeAPIControllerExportable',
      'base table' => 'entity_email_type',
      'module' => 'entity_email',
      'fieldable' => TRUE,
      // Only one bundle.
      'bundles' => array(
        'entity_email_type' => array(
          'label' => t('Entity Email Type'),
          // For now we only limit to the available fields (body, plain body and attachment).
          // 'admin' => array(
          // 'path' => 'admin/structure/entity_email_type/entity_email_type',
          // 'access arguments' => array('administer entity email types'),
          // ),
        ),
      ),
      'bundle of' => 'entity_email',
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'eid',
        'name' => 'name',
        'label' => 'label',
      ),
      'field cache' => FALSE,
      'uri callback' => 'entity_class_uri',
      'access callback' => 'entity_email_type_access',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/entity_email_type',
        'file' => 'includes/entity_email.admin.inc',
        'controller class' => 'EntityEmailTypeUIController',
      ),
    ),
  );
  $items['entity_email'] = array(
    'label' => t('Email'),
    'entity class' => 'EntityEmail',
    'controller class' => 'EntityAPIController',
    'views controler class' => 'EntityEmailViewsController',
    //'metadata controller class' => 'EntityEmailTypeMetadataController',
    'base table' => 'entity_email',
    'fieldable' => FALSE,
    'access callback' => 'entity_email_access',
    'entity keys' => array(
      'id' => 'eid',
      // The message has no label.
      'label' => 'subject',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'module' => 'entity_email',
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function entity_email_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'entity_email') .'/includes'
  );
}

/**
 * Implements hook_permission().
 */
function entity_email_permission() {
  $permissions = array(
    'administer entity email types' => array(
      'title' => t('Administer Entity Email Types'),
      'description' => t('Create, edit and delete Entity Email Types.'),
    ),
    'manage entity email types' => array(
      'title' => t('Manage Entity Email Types'),
      'description' => t('Edit Entity Email Types.'),
    ),
    'administer entity email' => array(
      'title' => t('Administer Entity Email'),
      'description' => t('Create, save and send Entity Email.'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_field_attach_form().
 *
 * Preprocess form.
 */
function entity_email_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if (!entity_email_type_has_mimemail()) {
    unset($form['entity_email_mail_body']);
    unset($form['entity_email_mail_attachment']);
  }
}

/**
 * Implementation of hook_mail().
 */
function entity_email_mail($key, &$message, $params) {

  switch ($key) {
    case 'entity_email':
      $message['headers'] += $params['headers'];
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];

      // Load content for each attachment.
      if (isset($message['params']['attachments'])) {
        foreach ($message['params']['attachments'] as $key => $value) {
          $message['params']['attachments'][$key]['filecontent'] = file_get_contents($message['params']['attachments'][$key]['uri']);
        }
      }

  }

  /* @todo: attach automatic generate pdf.
  module_load_include('inc', 'print_pdf', 'print_pdf.pages');
  $file_content = module_invoke('print_pdf', 'generate_path', 'blab-bla/');

  $attachment = array(
  'filecontent' => $file_content,
  'filename' => 'example-filename',
  'filemime' => 'application/pdf',
  );
  */
}

/**
 * Implements hook_theme().
 */
function entity_email_theme() {
  $path = drupal_get_path('module', 'entity_email');
  $info['entity_email'] = array(
    'path' => $path . '/theme',
    'file' => 'theme.inc',
    'render element' => 'elements',
    'template' => 'entity_email',
  );
  return $info;
}

/**
 * Access callback for the entity API.
 *
 * @see entity_email_entity_info()
 */
function entity_email_type_access($op, $type = NULL, $account = NULL) {
  // If admin access always return TRUE.
  if (user_access('administer entity email types', $account)) {
    return TRUE;
  }
  // If manage access only return TRUE for view and update access.
  if (($op === 'update' ||  $op === 'view') && user_access('manage entity email types', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback for the entity API.
 *
 * @see entity_email_entity_info()
 */
function entity_email_access($op, $type = NULL, $account = NULL) {
  return user_access('administer entity email', $account);
}

/**
 * Returns the Entity Email Type.
 *
 * @see entity_email_entity_property_info().
 */
function entity_email_type_options_list() {
  $list = NULL;
  $entity_email_types = entity_email_type_load();
  foreach ($entity_email_types as $key => $entity_email_type) {
    $list[$key] = $entity_email_type->label;
  }
  return $list;
}

/**
 * Create an entity_email_type object.
 */
function entity_email_type_create($values = array()) {
  // Make sure the identity doesn't already exist, to prevent duplicate key
  // error.
  if (entity_email_type_load($values['name'])) {
    throw new Exception('Entity Email' . check_plain($values['name']) . ' already exists.');
  }
  return entity_get_controller('entity_email_type')->create($values);
}

/**
 * Delete an entity email type.
 *
 * @param object $entity_email_type
 *   The identity object.
 */
function entity_email_type_delete(EntityEmailType $entity_email_type) {
  $entity_email_type->delete();
}

/**
 * Deletes multiple entity email type by ID.
 *
 * @param array $eids
 *   An array of entity email type IDs to delete.
 */
function entity_email_type_delete_multiple($eids) {
  return entity_get_controller('entity_email_type')->delete($eids);
}

/**
 * Entity Email Type loader.
 *
 * @param $name
 *   (optional) The name for this entity email type. If no type is given all existing
 *   types are returned.
 *
 * @return EntityEmailType
 *   Returns a fully-loaded entity email type definition if a type name is passed.
 *   Else an array containing all types is returned.
 */
function entity_email_type_load($name = NULL) {
  // Replace dashes with underscores so this can be used as menu argument
  // loader too.
  $types = entity_load_multiple_by_name('entity_email_type', isset($name) ? array(strtr($name, array('-' => '_'))) : FALSE);
  if (isset($name)) {
    return isset($types[$name]) ? $types[$name] : FALSE;
  }
  return $types;
}

/**
 * Loads multiple Entity Email Types by ID or based on a set of conditions.
 *
 * @see entity_load()
 *
 * @param $pids
 *   An array of Entity Email Type IDs.
 * @param $conditions
 *   An array of conditions on the {entity_email_type} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal Entity Email Type loading cache.
 *
 * @return
 *   An array of Entity Email Type objects indexed by pid.
 */
function entity_email_type_load_multiple($eids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('entity_email_type', $eids, $conditions, $reset);
}

/**
 * Helper to easily create an entity email.
 *
 * @param $type
 *   The entity_email type name.
 * @param $values
 *   Array with the following keys:
 *   - "arguments" - Array with arguments that should be replaced on run time in
 *     the entity_email type.
 *   - "timestamp" - The unix timestamp of the creation time of the entity_email. If
 *     empty the current time will be used.
 * @param $account
 *   Optional; The user object to associate the message with. If empty, the
 *   current user will be used.
 */
function entity_email_create($type, $values = array()) {
  global $user;

  if (!entity_email_type_load($type)) {
    watchdog('entity_email', 'Could not retrieve the email entity type', array(), WATCHDOG_ERROR);
    return NULL;
  }

  // Current user.
  $values['cuid'] = (int) $user->uid;

  // Entity type.
  $values['type'] = $type;

  // Get UID from user who is sending the email.
  $values['fuid'] = (isset($values['fuid'])) ? $values['fuid'] : NULL;

  // Get UID from user who is receiving the email.
  $values['tuid'] = (isset($values['tuid'])) ? $values['tuid'] : NULL;

  // Get mail to.
  $values['mail_to'] = (isset($values['mail_to'])) ? $values['mail_to'] : '';

  // Get mail from.
  $values['mail_from'] = (isset($values['mail_from'])) ? $values['mail_from'] : variable_get('site_mail', ini_get('sendmail_from'));

  // Get Mail Reply to. If empty use mail from.
  $values['mail_replyto'] = (isset($values['mail_replyto'])) ? $values['mail_replyto'] : $values['mail_from'];

  // Get BCC.
  $values['mail_bcc'] = (isset($values['mail_bcc'])) ? $values['mail_bcc'] : $values['mail_bcc'];

  // Get BCC.
  $values['mail_cc'] = (isset($values['mail_cc'])) ? $values['mail_cc'] : $values['mail_cc'];

  $values['dynamic'] = (isset($values['dynamic'])) ? $values['dynamic'] : NULL;

  $values['nid'] = (isset($values['nid'])) ? $values['nid'] : NULL;
  
  return entity_create('entity_email', $values);
}

/**
 * Send one email, with token substitution.
 *
 * This may be called directly from other modules.
 *
 * @param $entity_email_type
 *   The loaded Entity Email Type object to use for the email
 *     @see entity_email_type_load()
 * @param $params
 *   Array of parameters used when constructing the email.
 *   
 *   The $params array may also contain data passed in by other modules. One
 *    use of this is for token substitution.
 *
 */
function entity_email_send($entity_email_type, $values, $save = FALSE) {
  $entity = entity_email_create($entity_email_type, $values);

  // Entity could not be created (could be that the entity email type was not valid).
  if (!$entity) {
    watchdog('entity_email', 'Could not send the email entity as the entity email type was NULL', array(), WATCHDOG_ERROR);
    return NULL;
  }

  // If mailto is not valid.
  if (!valid_email_address($entity->mail_to)) {
    watchdog('entity_email', 'Could not send the email entity as the %mailto was not correct.', array('%mailto' => $entity->mail_to), WATCHDOG_ERROR);
    return NULL;
  }
  
  // Send the email.
  $entity->message = $entity->send();

  // If entity email needs to be saved.
  if ($save) {
    $entity->save();
  }

  return $entity;
}

/**
 * Entity Email loader.
 *
 * @param $name
 *   (optional) The name for this entity email type. If no type is given all existing
 *   types are returned.
 *
 * @return EntityEmail
 *   Returns a fully-loaded entity email definition if a type name is passed.
 *   Else an array containing all types is returned.
 */
function entity_email_load($eid = NULL) {
  $result = entity_email_load_multiple(array($eid));
  return $result ? reset($result) : FALSE;
}

/**
 * Loads multiple Entity Email by ID or based on a set of conditions.
 *
 * @see entity_load()
 *
 * @param $pids
 *   An array of Entity Email IDs.
 * @param $conditions
 *   An array of conditions on the {entity_email} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal Entity Email loading cache.
 *
 * @return
 *   An array of Entity Email Type objects indexed by pid.
 */
function entity_email_load_multiple($eids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('entity_email', $eids, $conditions, $reset);
}

/**
 * Helper.
 *
 * Check presence of mimemail.
 */
function entity_email_type_has_mimemail() {
  return module_exists('mimemail');
}

/**
 * Helper.
 *
 * Check the validity of a loaded entity_email_type entity.
 */
function entity_email_type_is_valid($entity_email_type) {
  return is_object($entity_email_type) && !empty($entity_email_type->name) && is_numeric($entity_email_type->eid);
}

/**
 * Helper.
 *
 * Load the token objects for token substitution.
 */
function entity_email_substitutions($params) {
  global $user;

  if (!empty($params['dynamic'])) {
    $substitutions['entity-email-dynamic'] = $params['dynamic'];
  }

  if (is_numeric($params['nid'])) {
    $substitutions['entity-email-node'] = node_load($params['nid']);
  }

  if (is_numeric($params['fuid'])) {
    $substitutions['entity-email-from'] = user_load($params['fuid']);
  }

  if (is_numeric($params['tuid'])) {
    $substitutions['entity-email-to'] = user_load($params['tuid']);
  }

  if (is_numeric($user->uid)) {
    $substitutions['current-user'] = user_load($user->uid);
  }

  return $substitutions;
}
