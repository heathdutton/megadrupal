<?php

/**
 * Abstract class for Entity Email testing.
 * All Entity Email tests should extend this
 * class.
 */
abstract class EntityEmailBaseTestCase extends DrupalWebTestCase {

  /**
   * Helper function to get different combinations of permission sets.
   *
   * @param $set
   *  Can be a single string (from the following) or can be an array containing
   *  multiple values that should be merged:
   *    'site admin': Admin permissions for Drupal core modules
   *    'store admin': All commerce "administer X" permissions
   */
  protected function permissionBuilder($sets) {
    if (is_string($sets)) {
      $sets = array($sets);
    }

    $admin_user = array(
      'administer entity email types',
      'administer entity email',
      'access content',
      'administer views',
      'access all views',
      'administer rules',
    );

    $editor_user = array(
      'manage entity email types',
      'administer entity email',
      'access content',
    );

    $web_user = array(
      'access content',
    );

    $final_permissions = array();

    foreach ($sets as $set) {
      switch ($set) {
        case 'admin user':
          $final_permissions = array_unique(array_merge($final_permissions, $admin_user));
          break;

        case 'editor user':
          $final_permissions = array_unique(array_merge($final_permissions, $editor_user));
          break;

        case 'web user':
          $final_permissions = array_unique(array_merge($final_permissions, $web_user));
          break;
      }
    }

    return $final_permissions;
  }

  /**
   * Helper function to determine which modules should be enabled. Should be
   * used in place of standard parent::setUp('moduleA', 'moduleB') call.
   *
   * @param $set
   *  Which set of modules to load. Can be one of:
   *    'all': (default) All Commerce modules, including UI and payment modules.
   *    'ui': All API and UI modules.
   *    'api': Just API modules (includes commerce_ui since checkout depends on it).
   *    'dependencies': Common dependencies required by many Commerce API and UI
   *      modules.
   * @param $other_modules
   *  Array of modules to include in addition to the sets loaded by $set
   */
  protected function setUpHelper($set = 'all', array $other_modules = array()) {

    ini_set('max_execution_time', 300);

    $dependencies = array(
      // API
      'entity',
      'views',
      'views_ui',
      'mimemail',
    );

    $base = array(
      'entity_email',
    );

    $rules = array(
      'rules',
      'rules_admin',
    );

    // Final module list.
    $modules = array();

    // Cascade down the list and add sets.
    switch ($set) {
      case 'rules':
        $modules = array_merge($rules, $modules);
        // No break as we always need to add base modules.
      case 'base':
        $modules = array_merge($base, $modules);
        // No break as we always need to add dependencies.
      case 'dependencies':
        $modules = array_merge($dependencies, $modules);
        break;
    }

    // Bring in modules specified by caller.
    $modules = array_merge($modules, $other_modules);

    return $modules;
  }

  /**
   * Create a user with a given set of permissions, name and password.
   *
   * @param array $permissions
   *   Array of permission names to assign to user. Note that the user always
   *   has the default permissions derived from the "authenticated users" role.
   *
   * @return object|false
   *   A fully loaded user object with pass_raw property, or FALSE if account
   *   creation fails.
   */
  public function drupalCreateUserWithNameAndPassword($name, $password, array $permissions = array()) {
    // Create a role with the given permission set, if any.
    $rid = FALSE;
    if ($permissions) {
      $rid = $this->drupalCreateRole($permissions);
      if (!$rid) {
        return FALSE;
      }
    }

    // Create a user assigned to that role.
    $edit = array();
    $edit['name']   = $name;
    $edit['mail']   = $edit['name'] . '@example.com';
    $edit['pass']   = $password;
    $edit['status'] = 1;
    if ($rid) {
      $edit['roles'] = array($rid => $rid);
    }

    $account = user_save(drupal_anonymous_user(), $edit);

    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    if (empty($account->uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    return $account;
  }

}

/**
 * Test the EntityEmail CRUD handling.
 */
class EntityEmailBasic extends EntityEmailBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity Email Basic',
      'description' => 'Test CRUD for Entity Email entities.',
      'group' => 'Entity Email',
    );
  }

  function setUp() {
    // Enable basic modules.
    $modules = parent::setUpHelper('base');
    parent::setUp($modules);

    // Create admin user.
    $permissions = $this->permissionBuilder('admin user');
    $this->admin_user = $this->drupalCreateUser($permissions);

    // Create editor user.
    $permissions = $this->permissionBuilder('editor user');
    $this->editor_user = $this->drupalCreateUser($permissions);

    // Create user 1.
    $permissions = $this->permissionBuilder('web user');
    $this->web_user1 = $this->drupalCreateUserWithNameAndPassword('user1', 'user1', $permissions);

    // Create user 1.
    $permissions = $this->permissionBuilder('web user');
    $this->web_user2 = $this->drupalCreateUserWithNameAndPassword('user2', 'user2', $permissions);
  }

  /**
   * Test CRUD of project entry entity.
   */
  function testEntityEmailCrud() {

    debug("testEntityEmailCrud");
    $this->drupalLogin($this->admin_user);

    // Create 10 templates.
    timer_start(__METHOD__);
    for ($compt = 1; $compt <= 10; $compt++) {
      $values = array('name' => 'name' . $compt);
      $entity = entity_email_type_create($values);
      $entity->save();
    }
    $time = timer_read(__METHOD__) / 1000;
    $this->assertTrue($time < 0.5, t('Create 10 Entity Email type (entity_email_type_create + save) - Request does not timed out (less than 0.5 seconde) (%time seconds).', array('%time' => $time)));

    // Make sure an exception is thrown if entity (entity email type) already exists.
    try {
      $values = array('name' => 'name1');
      $entity = entity_email_type_create($values);
      $entity->save();
      $this->fail("Creating the same email entity type hasn't created an exception.");
    }
    catch (Exception $e) {
      $this->pass("Exception was thrown: " . $e->getMessage());
    }

    // Load entity by name.
    $entity = entity_email_type_load('name1');
    $this->assertEqual($entity->eid, 1, 'Load entity (entity_email_type) by name (entity_email_type_load).');
    $this->assertEqual($entity->name, 'name1', 'Load entity (entity_email_type) by name (entity_email_type_load).');

    // Load entity by ID.
    $entity = entity_load('entity_email_type', array(1));
    $this->assertEqual($entity[1]->eid, 1, 'Load entity (entity_email_type) by id (entity_load).');
    $this->assertEqual($entity[1]->name, 'name1', 'Load template (entity_email_type) by id (entity_load).');

    // Load multiple entities.
    $entities = entity_email_type_load_multiple(array(1, 2, 3, 4));
    $count = count($entities);
    $this->assertEqual($count, 4, t('A subset of @count entity emai tyoe have been loaded (entity_email_type_load_multiple)', array('@count' => $count)));

    // Delete one entity email type.
    $entity = entity_email_type_load('name1');
    entity_email_type_delete($entity);
    $entity = entity_email_type_load('name1');
    $this->assertFalse($entity, t('Entity \'@name\' has been deleted (entity_email_type_delete).', array('@name' => 'name1')));

    // Delete a subset of entities.
    $list = array(2,3,4,5,6,7,8,9,10);
    entity_email_type_delete_multiple($list);
    $entities = entity_email_type_load_multiple($list);
    $this->assertEqual(count($entities), 0, 'A subset of entities have been deleted.');

    // Create one template.
    $values = array('name' => 'name1');
    $entity = entity_email_type_create($values);
    $entity->save();

    // Try to build/save/send an email if the Entity Email Type does not exist.
    debug('Test invalid Entity Email Template');
    $values = array();
    $entity_email = entity_email_create('namedoesnotexist', $values);
    $this->assertNull($entity_email, 'Could not create an entity email with no valid template');

    $entity_email = entity_email_send('namedoesnotexist', $values, FALSE);
    $this->assertNull($entity_email, 'Could not send an entity email with no valid template');
    $captured_emails = $this->drupalGetMails();
    $this->assertEqual(count($captured_emails), 0, t('No email have been sent'));

    $entity_email = entity_email_send('namedoesnotexist', $values, TRUE);
    $this->assertNull($entity_email, 'Could not send and save an entity email with no valid template');
    $captured_emails = $this->drupalGetMails();
    $this->assertEqual(count($captured_emails), 0, t('No email have been sent'));

    // Try to build/save/send an email if not params are provided.
    debug('Test empty Email parameters').
    $values = array();
    $entity_email = entity_email_create('name1', $values);
    $this->assertEqual($entity_email->mail_from, 'simpletest@example.com', 'Could create an empty entity email');
    $this->assertEqual($entity_email->mail_replyto, 'simpletest@example.com', 'Could create an empty entity email');
    $this->assertEqual($entity_email->mail_to, '', 'Could create an empty entity email');
    $this->assertEqual($entity_email->cuid, 1, 'Could create an empty entity email');

    $entity_email = entity_email_send('name1', $values, FALSE);
    $this->assertNull($entity_email, 'Could not send an entity email as no parameters have been provided');
    $captured_emails = $this->drupalGetMails();
    $this->assertEqual(count($captured_emails), 0, t('No email has been sent as no parameters have been provided'));

    $entity_email = entity_email_send('name1', $values, TRUE);
    $this->assertNull($entity_email, 'Could not send and save an entity email as no parameters have been provided');
    $captured_emails = $this->drupalGetMails();
    $this->assertEqual(count($captured_emails), 0, t('No email has been sent as no parameters have been provided'));

    // Try to build/save/send an email with a valid recipient.
    debug('Test valid Drupal recipient').
    $values = array(
      'tuid' => $this->web_user1->uid,
    );
    $entity_email = entity_email_create('name1', $values);
    $this->assertEqual($entity_email->mail_from, 'simpletest@example.com', 'Could create an entity email (valid mailfrom)');
    $this->assertEqual($entity_email->mail_replyto, 'simpletest@example.com', 'Could create an entity email (valid mailreplyto)');
    $this->assertEqual($entity_email->tuid, $this->web_user1->uid, 'Could create an entity email (valid tuid)');
    $this->assertEqual($entity_email->mail_to, 'user1@example.com', 'Could create an entity email (valid mailto)');
    $this->assertEqual($entity_email->cuid, 1, 'Could create an entity email (valid cuid)');

    $entity_email = entity_email_send('name1', $values, FALSE);
    $this->assertNotNull($entity_email, 'Could send an entity email for a valid drupal recipient');
    $captured_emails = $this->drupalGetMails(array('to' => 'user1@example.com', 'from' => 'simpletest@example.com'));
    $this->assertEqual(count($captured_emails), 1, t('One email has been sent'));
    variable_set('drupal_test_email_collector', array());
    
    $entity_email = entity_email_send('name1', $values, TRUE);
    $this->assertNotNull($entity_email, 'Could send and save an entity email for a valid drupal recipient');
    $captured_emails = $this->drupalGetMails(array('to' => 'user1@example.com', 'from' => 'simpletest@example.com'));
    $this->assertEqual(count($captured_emails), 1, t('One email has been sent'));
    variable_set('drupal_test_email_collector', array());

    // Load entity email by ID.
    $entity = entity_email_load($entity_email->eid);
    $this->assertEqual($entity->eid, 1, 'Load entity (entity_email) by ID (entity_email_load).');

    // Load multiple entities.
    $entities = entity_email_load_multiple(array(1));
    $count = count($entities);
    $this->assertEqual($count, 1, t('A subset of @count entity email have been loaded (entity_email_load_multiple)', array('@count' => $count)));

    // Try to build/save/send an email with a valid recipient but overide the mailto.
    debug('Test valid Drupal recipient but overide the mailto').
    $values = array(
      'tuid' => $this->web_user1->uid,
      'mail_to' => 'overidethe@mailto.com',
    );
    $entity_email = entity_email_create('name1', $values);
    $this->assertEqual($entity_email->mail_from, 'simpletest@example.com', 'Could create an entity email (valid mail_from)');
    $this->assertEqual($entity_email->mail_replyto, 'simpletest@example.com', 'Could create an entity email (valid mail_replyto)');
    $this->assertEqual($entity_email->tuid, $this->web_user1->uid, 'Could create an entity email (valid tuid)');
    $this->assertEqual($entity_email->mail_to, 'overidethe@mailto.com', 'Could create an entity email (valid mail_to)');

    $entity_email = entity_email_send('name1', $values, FALSE);
    $this->assertNotNull($entity_email, 'Could send an entity email for a valid drupal recipient (overide the mailto)');
    $captured_emails = $this->drupalGetMails(array('to' => 'overidethe@mailto.com', 'from' => 'simpletest@example.com'));
    $this->assertEqual(count($captured_emails), 1, t('One email has been sent'));
    variable_set('drupal_test_email_collector', array());

    $entity_email = entity_email_send('name1', $values, TRUE);
    $this->assertNotNull($entity_email, 'Could send and save an entity email for a valid drupal recipient (overide the mailto)');
    $captured_emails = $this->drupalGetMails(array('to' => 'overidethe@mailto.com', 'from' => 'simpletest@example.com'));
    $this->assertEqual(count($captured_emails), 1, t('One email has been sent'));
    variable_set('drupal_test_email_collector', array());

    // Try to build/save/send an email with a valid recipient and sender but overide the mailto/mailfrom/mailreply.
    debug('Test valid Drupal recipient and Drupal Sender (overide mailto/mailfrom/mailreply)').
    $values = array(
      'tuid' => $this->web_user1->uid,
      'fuid' => $this->web_user2->uid,
      'mail_to' => 'overidethe@mailto.com',
      'mail_from' => 'overidethe@mailfrom.com',
      'mail_replyto' => 'overidethe@mailreplyto.com',
    );
    $entity_email = entity_email_create('name1', $values);
    $this->assertEqual($entity_email->mail_from, 'overidethe@mailfrom.com', 'Could create an entity email (valid mail_from)');
    $this->assertEqual($entity_email->mail_replyto, 'overidethe@mailreplyto.com', 'Could create an entity email (valid mail_replyto)');
    $this->assertEqual($entity_email->tuid, $this->web_user1->uid, 'Could create an entity email ((valid tuid)');
    $this->assertEqual($entity_email->fuid, $this->web_user2->uid, 'Could create an entity email (valid fuid)');
    $this->assertEqual($entity_email->mail_to, 'overidethe@mailto.com', 'Could create an entity email (valid mail_to)');

    $entity_email = entity_email_send('name1', $values, FALSE);
    $this->assertNotNull($entity_email, 'Could send an entity email for a valid drupal recipient and sender (overide the mailto/mailfrom/mailreply)');
    $captured_emails = $this->drupalGetMails(array('to' => 'overidethe@mailto.com', 'from' => 'overidethe@mailfrom.com'));
    $this->assertEqual(count($captured_emails), 1, t('One email has been sent'));
    variable_set('drupal_test_email_collector', array());

    $this->drupalLogout();

  }

}

/**
 * Test the BMJIdentity Interface handling.
 */
class EntityEmailWebInterface extends EntityEmailBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity Email Interface',
      'description' => 'Test Interface for Entity Email entities.',
      'group' => 'Entity Email',
    );
  }

  function setUp() {
    // Enable basic modules.
    $modules = parent::setUpHelper('base');
    parent::setUp($modules);

    // Create admin user.
    $permissions = $this->permissionBuilder('admin user');
    $this->admin_user = $this->drupalCreateUser($permissions);

    // Create editor user.
    $permissions = $this->permissionBuilder('editor user');
    $this->editor_user = $this->drupalCreateUser($permissions);

    // Create web user.
    $permissions = $this->permissionBuilder('web user');
    $this->web_user = $this->drupalCreateUser($permissions);

    // Create user 1.
    $permissions = $this->permissionBuilder('web user');
    $this->web_user1 = $this->drupalCreateUserWithNameAndPassword('user1', 'user1', $permissions);

    // Create user 1.
    $permissions = $this->permissionBuilder('web user');
    $this->web_user2 = $this->drupalCreateUserWithNameAndPassword('user2', 'user2', $permissions);

    $type = $this->drupalCreateContentType();
    $this->node = $this->drupalCreateNode(array('type' => $type->type));
  }

  /**
   * Test Drupal Permissions.
   */
  function testEntityEmailPermissions() {

    debug('testEntityEmailPermissions for admin user');

    // Administration tasks.
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/structure/entity_email_type');
    $this->assertResponse(200, t('A admin user is able to access to "admin/structure/entity_email_type".'));
    $this->drupalGet('admin/structure/entity_email_type/add');
    $edit = array(
      'label' => 'label',
      'name' => 'name',
      'subject' => '[current-user:mail][entity-email-from:mail][entity-email-to:mail][entity-email-node:nid][site:name]',
      'mail[entity_email_mail_body_plain][und][0][value]' => '[current-user:mail][entity-email-from:mail][entity-email-to:mail][entity-email-node:nid][site:name]',
      'mail[entity_email_mail_body][und][0][value]' => '<b>[current-user:mail]</b><br/>[entity-email-from:mail]<br/>[entity-email-to:mail]<br/>[entity-email-node:nid]<br/>[site:name]',
    );
    $this->drupalPost(NULL, $edit, t('Save template'));
    $this->assertResponse(200, t('A admin user is able to access to "admin/structure/entity_email_type/add".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name');
    $this->assertResponse(200, t('A admin user is able to access to "admin/structure/entity_email_type/manage/name".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name/clone');
    $this->assertResponse(200, t('A admin user is able to access to "admin/structure/entity_email_type/manage/name/clone".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name/delete');
    $this->assertResponse(200, t('A admin user is able to access to "admin/structure/entity_email_type/manage/name/delete".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name/export');
    $this->assertResponse(200, t('A admin user is able to access to "admin/structure/entity_email_type/manage/name/export".'));
    $this->drupalGet('admin/structure/entity_email_type/import');
    $this->assertResponse(200, t('A admin user is able to access to "admin/structure/entity_email_type/import".'));
    $this->drupalLogout();

    debug('testEntityEmailPermissions for editor user');

    $this->drupalLogin($this->editor_user);
    $this->drupalGet('admin/structure/entity_email_type');
    $this->assertResponse(200, t('A editor user is able to access to "admin/structure/entity_email_type".'));
    $this->drupalGet('admin/structure/entity_email_type/add');
    $this->assertResponse(403, t('A editor user is not able to access to "admin/structure/entity_email_type/add".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name');
    $this->assertResponse(200, t('A editor user is able to access to "admin/structure/entity_email_type/manage/name".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name/clone');
    $this->assertResponse(403, t('A editor user is not able to access to "admin/structure/entity_email_type/manage/name/clone".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name/delete');
    $this->assertResponse(403, t('A editor user is not able to access to "admin/structure/entity_email_type/manage/name/delete".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name/export');
    $this->assertResponse(403, t('A editor user is not able to access to "admin/structure/entity_email_type/manage/name/export".'));
    $this->drupalGet('admin/structure/entity_email_type/import');
    $this->assertResponse(403, t('A editor user is not able to access to "admin/structure/entity_email_type/import".'));
    $this->drupalLogout();

    debug('testEntityEmailPermissions for web user');

    $this->drupalLogin($this->web_user);
    $this->drupalGet('admin/structure/entity_email_type');
    $this->assertResponse(403, t('A web user is able to access to "admin/structure/entity_email_type".'));
    $this->drupalGet('admin/structure/entity_email_type/add');
    $this->assertResponse(403, t('A web user is not able to access to "admin/structure/entity_email_type/add".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name');
    $this->assertResponse(403, t('A web user is able to access to "admin/structure/entity_email_type/manage/name".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name/clone');
    $this->assertResponse(403, t('A web user is not able to access to "admin/structure/entity_email_type/manage/name/clone".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name/delete');
    $this->assertResponse(403, t('A web user is not able to access to "admin/structure/entity_email_type/manage/name/delete".'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name/export');
    $this->assertResponse(403, t('A web user is not able to access to "admin/structure/entity_email_type/manage/name/export".'));
    $this->drupalGet('admin/structure/entity_email_type/import');
    $this->assertResponse(403, t('A web user is not able to access to "admin/structure/entity_email_type/import".'));
    $this->drupalLogout();

  }

  /**
   * Test Drupal Interface.
   */
  function testEntityEmailInterface() {

    debug('testEntityEmailInterface');

    // Log as a admin user.
    $this->drupalLogin($this->admin_user);

    // Create a template.
    $edit = array(
      'label' => 'label',
      'name' => 'name',
      'subject' => '[current-user:mail][entity-email-from:mail][entity-email-to:mail][entity-email-node:nid][site:name]',
      'mail[entity_email_mail_body_plain][und][0][value]' => '[current-user:mail][entity-email-from:mail][entity-email-to:mail][entity-email-node:nid][site:name]',
      'mail[entity_email_mail_body][und][0][value]' => '<b>[current-user:mail]</b><br/>[entity-email-from:mail]<br/>[entity-email-to:mail]<br/>[entity-email-node:nid]<br/>[site:name]',
    );
    $this->drupalPost('admin/structure/entity_email_type/add', $edit, t('Save template'));
    $this->drupalGet('admin/structure/entity_email_type/manage/name');
    $this->assertResponse(200, t('A web user is able to access to "admin/structure/entity_email_type".'));

    $values = array(
      'tuid' => $this->web_user1->uid,
      'fuid' => $this->web_user2->uid,
      'nid' => $this->node->nid,
    );
    $entity_email = entity_email_create('name', $values);
    $this->assertEqual($entity_email->tuid, $this->web_user1->uid, 'Could create an entity email ((valid tuid)');
    $this->assertEqual($entity_email->fuid, $this->web_user2->uid, 'Could create an entity email (valid fuid)');

    $entity_email = entity_email_send('name', $values, FALSE);
    $this->assertNotNull($entity_email, 'Could send an entity email for a valid drupal recipient and sender');
    $captured_emails = $this->drupalGetMails();

    // Check token.
    $this->assertMailString('subject', 'user1@example.com', 1);
    $this->assertMailString('subject', 'user2@example.com', 1);
    $this->assertMailString('subject', 'Drupal', 1);
    $this->assertMailString('subject', '1', 1);
    $this->assertMailString('body', 'user1@example.com', 1);
    $this->assertMailString('body', 'user2@example.com', 1);
    $this->assertMailString('body', 'Drupal', 1);
    $this->assertMailString('body', '1', 1);

    $this->assertEqual(count($captured_emails), 1, t('One email has been sent'));
    variable_set('drupal_test_email_collector', array());

    $this->drupalLogout();

  }

}

/**
 * Test the Rule Integration.
 */
class EntityEmailWebRules extends EntityEmailBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity Email Rules',
      'description' => 'Test Rules Integration for Entity Email entities.',
      'group' => 'Entity Email',
    );
  }

  function setUp() {
    // Enable basic modules.
    $modules = parent::setUpHelper('rules');
    parent::setUp($modules);

    // Create admin user.
    $permissions = $this->permissionBuilder('admin user');
    $this->admin_user = $this->drupalCreateUser($permissions);

    // Create editor user.
    $permissions = $this->permissionBuilder('editor user');
    $this->editor_user = $this->drupalCreateUser($permissions);

    // Create web user.
    $permissions = $this->permissionBuilder('web user');
    $this->web_user = $this->drupalCreateUser($permissions);

    // Create user 1.
    $permissions = $this->permissionBuilder('web user');
    $this->web_user1 = $this->drupalCreateUserWithNameAndPassword('user1', 'user1', $permissions);

    // Create user 1.
    $permissions = $this->permissionBuilder('web user');
    $this->web_user2 = $this->drupalCreateUserWithNameAndPassword('user2', 'user2', $permissions);

    $this->content_type = $this->drupalCreateContentType();
    $this->node = $this->drupalCreateNode(array('type' => $this->content_type->type));

  }

  /**
   * Test Rules Interface.
   */
  function testEntityEmailRules() {

    debug('testEntityEmailRules');

    // Log as a admin user.
    $this->drupalLogin($this->admin_user);

    // Create a template.
    $edit = array(
      'label' => 'label',
      'name' => 'name',
      'subject' => '[current-user:mail][entity-email-from:mail][entity-email-to:mail][entity-email-node:nid][site:name]',
      'mail[entity_email_mail_body_plain][und][0][value]' => '[current-user:mail][entity-email-from:mail][entity-email-to:mail][entity-email-node:nid][site:name]',
      'mail[entity_email_mail_body][und][0][value]' => '<b>[current-user:mail]</b><br/>[entity-email-from:mail]<br/>[entity-email-to:mail]<br/>[entity-email-node:nid]<br/>[site:name]',
    );
    $this->drupalPost('admin/structure/entity_email_type/add', $edit, t('Save template'));

    // Create a new rule.
    $edit = array(
      'settings[label]' => 'label',
      'settings[name]' => 'name',
      'settings[tags]' => 'tags',
      'event' => 'node_insert',
    );
    $this->drupalPost('admin/config/workflow/rules/reaction/add', $edit, t('Save'));

    // Send an email.
    $edit = array(
      'element_name' => 'entity_email_rules_send_message',
    );
    $this->drupalPost('admin/config/workflow/rules/reaction/manage/rules_name/add/1/action', $edit, t('Continue'));

    $edit = array(
      'parameter[entity_email_name][settings][entity_email_name]' => 'name',
      //'parameter[entity_email_from][settings][entity_email_from:select]' => 'site:current-user',
      //'parameter[entity_email_to][settings][entity_email_to:select]' => 'site:current-user',
      //'parameter[entity-email-node][settings][entity-email-node:select]' => $this->node->nid,
      'parameter[entity-email-mailto][settings][entity-email-mailto]' => 'email-not-saved@test.com',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalGet('admin/config/workflow/rules/reaction/manage/rules_name/edit/3');

    // Send and save an email.
    $edit = array(
      'element_name' => 'entity_email_rules_send_message',
    );
    $this->drupalPost('admin/config/workflow/rules/reaction/manage/rules_name/add/1/action', $edit, t('Continue'));
    $edit = array(
      'parameter[entity_email_name][settings][entity_email_name]' => 'name',
      'parameter[entity-email-mailto][settings][entity-email-mailto]' => 'email-saved@test.com',
      'parameter[entity-email-save][settings][entity-email-save]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalGet('admin/config/workflow/rules/reaction/manage/rules_name/edit/4');

    // Create a new node to trigger the rule action.
    $this->new_node = $this->drupalCreateNode(array('type' => $this->content_type->type));
    $captured_emails = $this->drupalGetMails(array('to' => 'email-not-saved@test.com', 'from' => 'simpletest@example.com'));
    $this->assertEqual(count($captured_emails), 1, t('One email has been sent to @mailto', array('@mailto' => 'email-not-saved@test.com')));
    $captured_emails = $this->drupalGetMails(array('to' => 'email-saved@test.com', 'from' => 'simpletest@example.com'));
    $this->assertEqual(count($captured_emails), 1, t('One email has been sent to @mailto', array('@mailto' => 'email-saved@test.com')));
    variable_set('drupal_test_email_collector', array());

    // Check to see if one email has been saved in DB.
    $result = db_query("SELECT mail_to FROM {entity_email} WHERE mail_to = :mail_to", array(':mail_to' => 'email-saved@test.com'));
    $this->assertEqual($result->fetchField(), 'email-saved@test.com', 'One email has been saved in DB');

    $this->drupalLogout();

  }

}

/**
 * Test the View Integration.
 */
class EntityEmailWebView extends EntityEmailBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity Email View',
      'description' => 'Test View Integration for Entity Email entities.',
      'group' => 'Entity Email',
    );
  }

  function setUp() {
    // Enable basic modules.
    $modules = parent::setUpHelper('base');
    parent::setUp($modules);

    // Create admin user.
    $permissions = $this->permissionBuilder('admin user');
    $this->admin_user = $this->drupalCreateUser($permissions);

    // Create editor user.
    $permissions = $this->permissionBuilder('editor user');
    $this->editor_user = $this->drupalCreateUser($permissions);

    // Create web user.
    $permissions = $this->permissionBuilder('web user');
    $this->web_user = $this->drupalCreateUser($permissions);

  }

  /**
   * Test Drupal View Integration.
   */
  function testEntityEmailView() {

    debug('testEntityEmailView');

    // Log as a admin user.
    $this->drupalLogin($this->admin_user);

    // Create a template.
    $edit = array(
      'label' => 'label',
      'name' => 'name',
      'subject' => '[current-user:mail][entity-email-from:mail][entity-email-to:mail][entity-email-node:nid][site:name]',
      'mail[entity_email_mail_body_plain][und][0][value]' => '[current-user:mail][entity-email-from:mail][entity-email-to:mail][entity-email-node:nid][site:name]',
      'mail[entity_email_mail_body][und][0][value]' => '<b>[current-user:mail]</b><br/>[entity-email-from:mail]<br/>[entity-email-to:mail]<br/>[entity-email-node:nid]<br/>[site:name]',
    );
    $this->drupalPost('admin/structure/entity_email_type/add', $edit, t('Save template'));

    $values = array(
      'tuid' => $this->admin_user->uid,
    );

    entity_email_send('name', $values, TRUE);
    entity_email_send('name', $values, TRUE);

    $this->drupalGet('admin/structure/views');
    $this->assertResponse(200, t('A admin user is able to access to "admin/structure/views".'));
    $this->assertText('Entity Email', 'Entity Email View has been enabled');

    $this->drupalGet('admin/structure/views/view/entity_email/edit');
    $this->assertResponse(200, t('A admin user is able to access to "admin/structure/views/view/entity_email/edit".'));

    $this->drupalLogout();

  }

}
