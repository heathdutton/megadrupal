<?php

/**
 * @file
 * Entity Email module install/schema/update hooks.
 */

/**
 * Implements hook_install().
 */
function entity_email_install() {
  $t = get_t();
  // Create the field holding the mail body.
  $field = array(
    'field_name' => ENTITY_EMAIL_FIELD_MAIL_BODY,
    'type' => 'text_long',
    'entity_types' => array('entity_email_type'),
    'cardinality' => 1,
    'translatable' => TRUE,
    'locked' => TRUE,
    'settings' => array(
      // Mark that this field can be rendered using EntityEmail::getMailBody().
      'entity_email_text' => TRUE,
    ),
  );
  field_create_field($field);

  // Create the field holding the mail body plain.
  $field = array(
    'field_name' => ENTITY_EMAIL_FIELD_MAIL_BODY_PLAIN,
    'type' => 'text_long',
    'entity_types' => array('entity_email_type'),
    'cardinality' => 1,
    'translatable' => TRUE,
    'locked' => TRUE,
    'settings' => array(
      // Mark that this field can be rendered using EntityEmail::getMailBodyPlain().
      'entity_email_text' => TRUE,
    ),
  );
  field_create_field($field);

  // Create the field holding the attachements.
  $field = array(
    'field_name' => ENTITY_EMAIL_FIELD_MAIL_ATTACHEMENT,
    'type' => 'file',
    'entity_types' => array('entity_email_type'),
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'translatable' => FALSE,
    'locked' => TRUE,
    'settings' => array(
      // Mark that this field can be rendered using EntityEmail::getAttachments().
      'entity_email_file' => TRUE,
    ),
  );
  field_create_field($field);

  // Create an instance of the mail body plain field.
  $instance = array(
    'field_name' => ENTITY_EMAIL_FIELD_MAIL_BODY_PLAIN,
    'bundle' => 'entity_email_type',
    'entity_type' => 'entity_email_type',
    'label' => $t('Mail plain body'),
    'description' => $t('The plain mail body line of the email template. May include tokens of any token type specified below.'),
    'required' => FALSE,
    'widget' => array(
      'type' => 'text_textarea',
    ),
  );
  field_create_instance($instance);

  // Create an instance of the mail body field.
  $instance = array(
    'field_name' => ENTITY_EMAIL_FIELD_MAIL_BODY,
    'bundle' => 'entity_email_type',
    'entity_type' => 'entity_email_type',
    'label' => $t('Mail body'),
    'description' => $t('The mail body of the email template. May include tokens of any token type specified below.'),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 1,
    ),
  );
  field_create_instance($instance);

  // Create an instance of the attachements field.
  $instance = array(
    'field_name' => ENTITY_EMAIL_FIELD_MAIL_ATTACHEMENT,
    'bundle' => 'entity_email_type',
    'entity_type' => 'entity_email_type',
    'label' => $t('Mail attachement'),
    'description' => $t('The attachements of the email template.'),
    'required' => FALSE,
    'settings' => array(
       'file_extensions' => ''
     )
  );
  field_create_instance($instance);
}

/**
 * Implements hook_uninstall().
 */
function entity_email_uninstall() {
  // Delete all instances.
  $instance = field_info_instance('entity_email_type', 'entity_email_mail_body', 'entity_email_type');
  field_delete_instance($instance);
  $instance = field_info_instance('entity_email_type', 'entity_email_mail_body_plain', 'entity_email_type');
  field_delete_instance($instance);
  $instance = field_info_instance('entity_email_type', 'entity_email_mail_attachment', 'entity_email_type');
  field_delete_instance($instance);
  // Delete all fields.
  field_delete_field('entity_email_mail_body');
  field_delete_field('entity_email_mail_body_plain');
  field_delete_field('entity_email_mail_attachment');
}

/**
 * Implementation of hook_schema().
 */
function entity_email_schema() {
  $schema = array();

  $schema['entity_email_type'] = array(
    'description' => 'Storage for user-defined email templates.',
    'fields' => array(
      'eid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'description' => 'The Unique ID of the email template.',
      ),
      'name' => array(
        'description' => 'The unified identifier for the email template.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'The human-readable name of the email template.',
        'type' => 'varchar',
        'length' => 255,
         'not null' => TRUE,
         'default' => '',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'tags' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The list of tags string associated with the entity email type',
      ),
      'subject' => array(
        'description' => 'The template email subject.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'cc' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
        'description' => 'Optional cc emails.',
      ),
      'bcc' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
        'description' => 'Optional bcc emails.',
      ),
      'created' => array(
        'description' => 'When the email template was created.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'When the email template was updated.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'name' => array('name'),
    ),
    'primary key' => array('eid'),
  );

  $schema['entity_email'] = array(
    'description' => 'An instance of an email type.',
    'fields' => array(
      'eid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'description' => 'The Unique ID of the email.',
      ),
      'type' => array(
        'description' => 'Reference to an email template.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_from' => array(
        'description' => '.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_to' => array(
        'description' => '.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_replyto' => array(
        'description' => '.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'cuid' => array(
        'description' => 'The user ID of the acting user.',
        'type' => 'int',
        'default value' => NULL,
        'unsigned' => TRUE,
      ),
      'fuid' => array(
        'description' => 'The user ID of whom sent the email.',
        'type' => 'int',
        'default value' => NULL,
        'unsigned' => TRUE,
      ),
      'tuid' => array(
        'description' => 'The user ID of whom receive the email.',
        'type' => 'int',
        'default value' => NULL,
        'unsigned' => TRUE,
      ),
      'subject' => array(
        'description' => 'The template email subject.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_body' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'The template email body.',
      ),
      'mail_body_plain' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'The template email body in plain text form.',
      ),
      'timestamp' => array(
        'description' => 'When the message instance was recorded.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'entity_email_type' => array(
        'table' => 'entity_email_type',
        'columns' => array('type' => 'name'),
      ),
      'from' => array(
        'table' => 'users',
        'columns' => array('from_uid' => 'uid'),
      ),
      'to' => array(
        'table' => 'users',
        'columns' => array('to_uid' => 'uid'),
      ),
    ),
    'primary key' => array('eid'),
    'indexes' => array(
      'type' => array('type'),
      'timestamp' => array('timestamp'),
    ),
  );

  $schema['entity_email_type_tags'] = array(
    'fields' => array(
      'eid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The primary identifier of the entity email type.',
      ),
      'tag' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The tag string associated with the entity email type',
      ),
    ),
    'primary key' => array('eid', 'tag'),
    'foreign keys' => array(
      'table' => 'entity_email_type',
      'columns' => array('eid' => 'eid'),
    ),
  );

  return $schema;
}

/**
 * Add extra fields for bcc and cc.
 */
function entity_email_update_7001() {
  db_add_field(
    'entity_email_type',
    'cc',
    array(
      'type' => 'text',
      'not null' => FALSE,
      'size' => 'medium',
      'description' => 'Optional cc emails.',
    )
  );
  db_add_field(
    'entity_email_type',
    'bcc',
    array(
      'type' => 'text',
      'not null' => FALSE,
      'size' => 'medium',
      'description' => 'Optional bcc emails.',
    )
  );
  db_add_field(
    'entity_email_type',
    'tags',
    array(
      'type' => 'varchar',
      'length' => '255',
      'not null' => TRUE,
      'description' => 'The list of tags string associated with the entity email type',
      'default' => '',
    )
  );
}

/**
 * Add tag tables.
 */
function entity_email_update_7002() {
  if (!db_table_exists('entity_email_type_tags')) {
    $schema = array(
      'fields' => array(
        'eid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The primary identifier of the entity email type.',
        ),
        'tag' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => TRUE,
          'description' => 'The tag string associated with the entity email type',
        ),
      ),
      'primary key' => array('eid', 'tag'),
      'foreign keys' => array(
        'table' => 'entity_email_type',
        'columns' => array('eid' => 'eid'),
      ),
    );
    db_create_table('entity_email_type_tags', $schema);
  }
}
