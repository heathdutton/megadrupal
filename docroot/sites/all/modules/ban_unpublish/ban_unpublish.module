<?php
/**
 * @file
 * Implements an operation to non-destructively ban users and unpublish their works.
 *
 * Various administrative lists of users provide access to operations such as blocking, adding
 * or removing roles, et cetera. This module adds a single option that will ban the user's
 * email address, block the account, kick the user off the system if active, and unpublish
 * any nodes and comments owned by the user. In a list it can be invoked on a set of users
 * at once. The operation is available to other modules such as advuser, as well as to
 * Views Bulk Operations. It is particularly useful in cleaning up after registered spammers.
 *
 * TODO: Implement the reverse operation.
 */

/**
 * Implements hook_permission().
 *
 */
function ban_unpublish_permission() {
  return array(
    'use ban_unpublish' => array(
      'title' => t('Ban users and unpublish content'),
      'description' => t('Operations on single and multiple users.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 * Confirmation page for banning users.
 */
function ban_unpublish_menu() {
  $items['admin/people/ban'] = array(
    'title' => 'Delete item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_ban_unpublish_ban', 3),
    'access arguments' => 'use ban_unpublish',
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * Confirm single operation, then ban and unpublish a single user
 */
function _ban_unpublish_ban($form, &$form_state, $uid=0) {
  if ($uid < 2) {
    drupal_set_message(t('You can not ban user # @uid', array('@uid' => $uid)), 'error');
    drupal_goto('admin/people');
  }
  $account = user_load($uid);
  $output = t('Confirm that you wish to ban user @uid : @user < @mail >', array('@uid' => $account->uid, '@user' => $account->name, '@mail' => $account->mail));
  $form = array();
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $uid,
  );
  return confirm_form(
    $form,
    $output, // confirmation message
    'admin/people', // cancel path
    t('This will block the user and unpublish content owned by the user.'),
    t('Ban'),
    t('Cancel')
  );
  return $form;
}

/**
 * Submit handler for the single-ban form
 *
 */
function _ban_unpublish_ban_submit(&$form, &$form_state) {
  $uid = $form_state['values']['uid'];
  _ban_unpublish_one($uid);
  drupal_set_message(t('UID @uid has been banned successfully.', array('uid' => $uid)));
  drupal_goto("admin/people");
}

/**
 * Implements hook_user_operations().
 * This is the bulk operation made available to VBO.
 */
function ban_unpublish_user_operations() {
  if (!user_access('use ban_unpublish')) return;
  $operations = array(
    'ban_unpublish' => array(
      'label' => t('Block, ban and unpublish all content by the selected users'),
      'callback' => 'ban_unpublish_user_execute',
    ),
  );
  return $operations;
}

/**
 * Callback function
 * For each user in the $ids array, block, ban and unpublish all content.
 *
 * @param $ids
 *   An array of user IDs to be processed.
 */
function ban_unpublish_user_execute($ids) {
  foreach ($ids as $target) {
    _ban_unpublish_one($target);
  }
}

/**
 * Ban and unpublish a single user
 * @param $target
 * The uid of a single user who is to be processed
 */
function _ban_unpublish_one($target) {
  if ($target < 2) {
    // don't mess with the anonymous or superuser accounts
    $message = t('Skipping UID @uid', array('@uid', $target));
  }
  else {
    $banned = ban_unpublish_ban_user($target);
    if ($banned) {
      $message = t('User name (mail) has been banned.', array(@name => check_plain($banned['name']), @mail => check_plain($banned['mail'])));
    }
    $nodes = ban_unpublish_nodes($target);
    $comments = ban_unpublish_comments($target);
    if ($nodes) $message .= format_plural($nodes, '1 node', '@count nodes');
    if ($nodes && $comments) $message .= ', ';
    if ($comments) $message .= format_plural($comments, '1 comment', '@count comments');
    if ($nodes || $comments) $message .= (' ' . t('unpublished.'));
  }
  drupal_set_message($message);
  watchdog('ban_unpublish', $message);
}

/**
 * Ban a user's email and username by marking the account as blocked.
 *
 * @param $uid
 *   The uid of a single user who is to be processed
 * @todo Consider integration with https://www.drupal.org/project/user_restrictions,
 *    as D7 has removed the user access table
 */
function ban_unpublish_ban_user($uid) {
  global $user; // so we can check against the current user
  $account = user_load($uid);
  if ($account !== FALSE && $account->status == 1 && $account->uid > 1 && $user->uid !== $account->uid) {
    drupal_session_destroy_uid($account->uid);
    user_save($account, array('status' => 0));
    return array('name' => $account->name, 'mail' => $account->mail);
  }
  else {
    drupal_set_message(t('User @name could not be banned.', array(@name => check_plain($account->name))));
    return array();
  }
}

/**
 * Unpublish all published nodes by a user.
 *
 * @param $uid
 *   A user id.
 *
 * @return
 *   The number of nodes that were removed.
 */
function ban_unpublish_nodes($uid) {
  $result = db_query("SELECT nid FROM {node} WHERE uid = :uid AND status = 1", array('uid' => $uid));
  $i = 0;
  foreach ($result as $row) {
    $node = node_load($row->nid);
    $node->status = NODE_NOT_PUBLISHED;
    node_save($node);
    $i++;
  }
  cache_clear_all();
  return $i;
}

/**
 * Unpublish all comments by a user
 *
 * @param $uid
 *   A user id.
 *
 * @return
 *   The number of comments that were removed.
 */
function ban_unpublish_comments($uid) {
  $result = db_query("SELECT cid FROM {comment} WHERE uid = :uid AND status = 1", array('uid' => $uid));
  $i = 0;
  foreach ($result as $row) {
    $comment = comment_load($row->cid);
    $comment->status = COMMENT_NOT_PUBLISHED;
    comment_save($comment);
    $i++;
  }
  cache_clear_all();
  return $i;
}

/**
 * Implements hook_comment_view_alter().
 * Adds a link to every comment offering to ban the user.
 */
function ban_unpublish_comment_view_alter(&$build) {
  if (!module_exists('comment')) return;
  if (!user_access('use ban_unpublish')) return;
  $uid = $build['comment_body']['#object']->uid;
  $title = t('ban user');
  $href = 'admin/people/ban/' . $uid;
  $build['links']['comment']['#links']['ban-unpublish'] = array('title' => $title, 'href' => $href, 'html' => TRUE);
}
