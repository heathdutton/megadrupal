<?php
/**
 * @file
 * Main file for the Background Audio Block module.
 */

/**
 * Implements hook_menu().
 */
function background_audio_block_menu() {
  $items = array();
  $items['admin/structure/block/manage/background_audio/background_audio/badelete/%file'] = array(
    'title' => 'Delete file from playlist',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('background_audio_block_file_badelete', 7),
    'access arguments' => array('administer blocks'),
    'file' => 'background_audio_block.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function background_audio_block_block_info() {
  $blocks['background_audio'] = array(
    'info' => t('Background audio'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function background_audio_block_block_configure($delta = '') {
  if ($delta == 'background_audio') {
    $form = array();

    $form['vtabs'] = array(
      '#type' => 'vertical_tabs',
    );

    $form['vtabs']['files'] = array(
      '#type' => 'fieldset',
      '#title' => t('Manual playlist'),
      '#theme' => 'background_audio_block_files_table',
      '#tree' => TRUE,
    );
    $files = variable_get('background_audio_files', array());
    $enabled_files = array_filter($files);
    if (!empty($files)) {
      $weight = -100;
      foreach ($files as $fid => $value) {
        $file = file_load($fid);
        $form['vtabs']['files'][$fid][$fid . '_enabled'] = array(
          '#type' => 'checkbox',
          '#title' => $file->filename,
          '#default_value' => array_key_exists($fid, $enabled_files),
        );
        $form['vtabs']['files'][$fid][$fid . '_uri'] = array(
          '#markup' => $file->uri,
        );
        $form['vtabs']['files'][$fid][$fid . '_weight'] = array(
          '#type' => 'weight',
          '#title' => t('Weight'),
          '#title_display' => 'invisible',
          '#delta' => 100,
          '#default_value' => $weight,
          '#attributes' => array('class' => array('background-audio-file-weight')),
        );
        $weight++;
        $form['vtabs']['files'][$fid][$fid . '_delete'] = array(
          '#markup' => l(t('Delete'), 'admin/structure/block/manage/background_audio/background_audio/badelete/' . $fid),
        );
      }
    }
    $form['vtabs']['files']['background_audio_file'] = array(
      '#type' => 'managed_file',
      '#title' => t('Add file to playlist'),
      '#description' => t('Only *.mp3 files are allowed.'),
      '#upload_location' => file_default_scheme() . '://background_audio/',
      '#upload_validators' => array(
        'file_validate_extensions' => array('mp3'),
      ),
    );
    if (module_exists('plupload')) {
      $form['vtabs']['files']['background_audio_file']['#type'] = 'plupload';
      unset($form['vtabs']['files']['background_audio_file']['#description']);
    }

    if (module_exists('views')) {
      $form['vtabs']['views'] = array(
        '#type' => 'fieldset',
        '#title' => t('View reference'),
        '#description' => t('View reference takes precedence over the manual playlist.'),
        '#tree' => TRUE,
      );

      $options = array('' => t('None')) + views_get_views_as_options(FALSE, 'all', NULL, TRUE);
      $form['vtabs']['views']['view'] = array(
        '#type' => 'select',
        '#title' => t('Select a view'),
        '#options' => $options,
        '#default_value' => variable_get('background_audio_block_view', ''),
      );
    }

    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function background_audio_block_block_save($delta = '', $edit = array()) {
  global $user;
  if ($delta == 'background_audio') {
    $files = variable_get('background_audio_files', array());

    // Process playlist files reorder and enable/disable flag.
    if (!empty($files)) {
      $file_weights = array();
      foreach ($files as $fid => $value) {
        $file_weights[$fid] = $edit['files'][$fid][$fid . '_weight'];
      }
      asort($file_weights);
      $files = array();
      foreach ($file_weights as $fid => $weight) {
        $files[$fid] = $edit['files'][$fid][$fid . '_enabled'];
      }
    }

    // Add new file/files to playlist.
    if (module_exists('plupload') && !empty($edit['files']['background_audio_file'])) {
      $directory = file_default_scheme() . '://background_audio/';
      if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
        watchdog('background_audio_block', 'Directory %directory could not be created.', array('%directory' => $directory), WATCHDOG_WARNING);
      }
      else {
        foreach ($edit['files']['background_audio_file'] as $tmp_file) {
          if ($tmp_file['status'] == 'done') {
            $uri = file_unmanaged_move($tmp_file['tmppath'], $directory . $tmp_file['name']);
            $file = new StdClass();
            $file->uid = $user->uid;
            $file->filename = basename($uri);
            $file->uri = $uri;
            $file->filemime = file_get_mimetype($uri);
            $file->status = FILE_STATUS_PERMANENT;
            file_save($file);
            file_usage_add($file, 'background_audio', 'block', 0);
            $files[$file->fid] = $file->fid;
          }
        }
      }
    }
    else {
      $new_fid = $edit['files']['background_audio_file'];
      if ($new_fid) {
        $file = file_load($new_fid);
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        file_usage_add($file, 'background_audio', 'block', 0);
        $files[$file->fid] = $file->fid;
      }
    }

    // Save modified playlist files.
    variable_set('background_audio_files', $files);

    // Save the chosen view.
    if (module_exists('views')) {
      variable_set('background_audio_block_view', $edit['views']['view']);
    }
  }
}

/**
 * Implements hook_block_view().
 */
/*function background_audio_block_block_view($delta = '') {
  if ($delta == 'background_audio') {
    $block = array();

    return $block;
  }
}*/

/**
 * Implements hook_theme().
 */
function background_audio_block_theme($existing, $type, $theme, $path) {
  return array(
    'background_audio_block_files_table' => array(
      'render element' => 'form',
      'file' => 'background_audio_block.theme.inc',
    ),
  );
}

/**
 * Implements hook_background_audio_items().
 */
function background_audio_block_background_audio_items() {
  // If background_audio block is present on the page - then return the required information.
  if (_background_audio_block_info()) {
    $enabled_files = array();
    if (module_exists('views') && $view = variable_get('background_audio_block_view', '')) {
      list($name, $display_id) = explode(':', $view);
      if ($result = views_get_view_result($name, $display_id)) {
        // A kind of ugly way to compose 'file_managed_field_data_field_file_fid'.
        $view = views_get_view($name);
        $display = $view->display[$display_id];
        $fields = $display->display_options['fields'];
        $field_names = array();
        foreach ($fields as $field) {
          if ($field['table'] == 'file_managed' && $field['field'] == 'fid') {
            if ($field['relationship'] != 'none') {
              $field_names[] = 'file_managed_field_data_' . $field['relationship'];
            }
            else {
              $field_names[] = 'fid';
            }
          }
        }

        foreach ($result as $item) {
          foreach ($field_names as $field_name) {
            if (isset($item->$field_name)) {
              $enabled_files[$item->$field_name] = $item->$field_name;
            }
          }
        }
      }
    }

    if (empty($enabled_files)) {
      $enabled_files = array_filter(variable_get('background_audio_files', array()));
    }

    if (!empty($enabled_files)) {
      $files = array();
      foreach ($enabled_files as $fid => $value) {
        $file = file_load($fid);
        $files[] = array(
          'src' => file_create_url($file->uri),
          'title' => drupal_substr($file->filename, 0, -4),
          'type' => 'audio/mpeg',
        );
      }
      return $files;
    }
  }

  return NULL;
}

/**
 * Implements hook_background_audio_settings_alter().
 */
function background_audio_block_background_audio_settings_alter(&$settings) {
  if ($block = _background_audio_block_info()) {
    $settings['region'] = $block->region;
  }
}

/**
 * Helper function to determine if block is shown on the page.
 */
function _background_audio_block_info() {
  static $block;
  if (isset($block)) {
    return $block;
  }

  global $theme_key;
  $debug = variable_get('background_audio_debug', 0);
  // block_load() function doesn't do what we need.
  //$block = block_load('background_audio', 'background_audio');
  $block = db_query('SELECT * FROM {block} WHERE module = :module AND delta = :delta AND theme = :theme AND status = 1',
    array(':module' => 'background_audio_block', ':delta' => 'background_audio', ':theme' => $theme_key))->fetchObject();
  if (!$block) {
    if ($debug) {
      watchdog('background_audio_block', 'Background Audio Block is not enabled in theme !theme.', array('!theme' => $theme_key), WATCHDOG_DEBUG);
    }
    return $block;
  }
  if ($debug) {
    watchdog('background_audio_block', 'Background Audio Block is enabled in theme !theme, block !block.', array('!theme' => $theme_key, '!block' => print_r($block, 1)), WATCHDOG_DEBUG);
  }

  $block_info = array(
    $block->bid => $block,
  );
  // Allow modules to modify the block list (visibility settings, etc.).
  drupal_alter('block_list', $block_info);
  if (isset($block_info[$block->bid])) {
    $block = $block_info[$block->bid];
    if ($debug) {
      watchdog('background_audio_block', 'Background Audio Block was not removed by hook_block_list_alter().', array(), WATCHDOG_DEBUG);
    }
  }
  else {
    $block = FALSE;
    if ($debug) {
      watchdog('background_audio_block', 'Background Audio Block was removed by hook_block_list_alter().', array(), WATCHDOG_DEBUG);
    }
  }

  return $block;
}
