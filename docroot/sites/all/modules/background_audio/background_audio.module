<?php
/**
 * @file
 * Main file for the Background Audio API module.
 */

/**
 * Implements hook_help().
 */
/*function background_audio_help($path, $arg) {
  switch ($path) {
    case 'admin/help#background_audio':
      $output = '';
      $output .= '<h3>' . t('Introduction') . '</h3>';
      $output .= '<p>' . t('Allows to play audio files on your site.') . '</p>';
      $output .= '<h3>' . t('Installation') . '</h3>';
      $output .= '<p>' . t('Install as any other Drupal module')) . '</p>';
      return $output;
  }
}*/

/**
 * Implements hook_menu().
 */
function background_audio_menu() {
  $items = array();
  $items['admin/config/media/background_audio'] = array(
    'title' => 'Background Audio',
    'description' => 'Configure Background Audio player settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('background_audio_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'background_audio.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function background_audio_theme($existing, $type, $theme, $path) {
  return array(
    'background_audio_controls_table' => array(
      'render element' => 'form',
      'file' => 'background_audio.theme.inc',
    ),
  );
}

function background_audio_get_items() {
  // Invoke hook_background_audio_items().
  return module_invoke_all('background_audio_items');
}

function background_audio_get_settings() {
  $settings = background_audio_settings_defaults();
  // Invoke hook_background_audio_settings_alter().
  drupal_alter('background_audio_settings', $settings);
  return $settings;
}

/**
 * Implements hook_page_build().
 */
function background_audio_page_build(&$page) {
  $debug = variable_get('background_audio_debug', 0);
  if ($debug) {
    watchdog('background_audio', 'Started background_audio_page_build().', array(), WATCHDOG_DEBUG);
  }
  if ($items = background_audio_get_items()) {
    if ($debug) {
      watchdog('background_audio', 'There are some background_audio items !items.', array('!items' => print_r($items, 1)), WATCHDOG_DEBUG);
    }
    $settings = background_audio_get_settings();
    $region = isset($settings['region']) ? $settings['region'] : array_shift(element_children($page));
    if ($debug) {
      watchdog('background_audio', 'Trying to render into region !region.', array('!region' => $region), WATCHDOG_DEBUG);
    }
    // Add mediaelement.js and jQuery.cookie libraries.
    $page[$region]['#attached']['library'][] = array('mediaelement', 'mediaelement');
    $page[$region]['#attached']['library'][] = array('system', 'jquery.cookie');

    $path = drupal_get_path('module', 'background_audio');
    $playlist_path = libraries_get_path('mep-feature-playlist');
    $page[$region]['#attached']['js'][$path . '/js/background_audio.js'] = array('scope' => 'footer');
    $page[$region]['#attached']['js'][$playlist_path . '/mep-feature-playlist.js'] = array('scope' => 'footer');
    $page[$region]['#attached']['js'][] = array(
      'data' => array(
        'background_audio' => array(
          'settings' => $settings,
          'files' => $items,
        ),
      ),
      'type' => 'setting',
    );

    $page[$region]['#attached']['css'][] = $path . '/css/background_audio.css';
    $page[$region]['#attached']['css'][] = $playlist_path . '/mep-feature-playlist.css';
  }
  elseif ($debug) {
    watchdog('background_audio', 'There were no background_audio items.', array(), WATCHDOG_DEBUG);
  }
}

function background_audio_mejs_options() {
  return array(
    'autoplay' => t('Enable autoplay'),
    'loop' => t('Turn repeat on'),
    'shuffle' => t('Turn shuffle on'),
    'playlist' => t('Show playlist'),
  );
}

function background_audio_mejs_options_defaults() {
  return array(
    'autoplay' => 'autoplay',
    'loop' => 'loop',
    'shuffle' => 'shuffle',
    'playlist' => 0,
  );
}

function background_audio_mejs_controls() {
  return array(
    'prevtrack' => t('Previous track'),
    'playpause' => t('Play/Pause'),
    'nexttrack' => t('Next track'),
    'shuffle' => t('Shuffle on/off'),
    'loop' => t('Repeat on/off'),
    'playlist' => t('Show/hide playlist'),
    'current' => t('Current time'),
    'progress' => t('Progress bar'),
    'duration' => t('Duration'),
    'volume' => t('Volume'),
  );
}

function background_audio_mejs_controls_defaults() {
  return array(
    'prevtrack' => 'prevtrack',
    'playpause' => 'playpause',
    'nexttrack' => 'nexttrack',
    'shuffle' => 0,
    'loop' => 'loop',
    'playlist' => 'playlist',
    'current' => 'current',
    'progress' => 'progress',
    'duration' => 'duration',
    'volume' => 'volume',
  );
}

function background_audio_settings_defaults() {
  $enabled_options = array_filter(variable_get('background_audio_options', background_audio_mejs_options_defaults()));
  $enabled_controls = array('playlistfeature' => 'playlistfeature') + array_filter(variable_get('background_audio_controls', background_audio_mejs_controls_defaults()));
  /*if (array_intersect(array('playlist', 'nexttrack', 'prevtrack', 'loop', 'shuffle'), $enabled_controls)) {
    $enabled_controls = array('playlistfeature' => 'playlistfeature') + $enabled_controls;
  }*/

  return array(
    'position' => variable_get('background_audio_position', 'bottomright'),
    'playlist_position' => variable_get('background_audio_playlist_position', 'top'),
    'width' => variable_get('background_audio_width', 400),
    'height' => variable_get('background_audio_height', 30),
    'volume' => variable_get('background_audio_volume', 0.8),
    'autoplay' => array_key_exists('autoplay', $enabled_options),
    'loop' => array_key_exists('loop', $enabled_options),
    'shuffle' => array_key_exists('shuffle', $enabled_options),
    'playlist' => array_key_exists('playlist', $enabled_options),
    'controls' => $enabled_controls,
  );
}
