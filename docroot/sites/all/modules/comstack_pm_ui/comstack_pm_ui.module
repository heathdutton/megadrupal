<?php

/**
 * @file
 * comstack_pm_ui.module
 */

/**
 * Implements hook_permission().
 */
function comstack_pm_ui_permission() {
  return array(
    'access ComstackPMApp' => array(
      'title' => t('Access the Comstack Private Messaging UI'),
      'description' => t('Allows users access to the Private Messaging UI which is an Angular App. For this to work permissions for Comstack Private Messaging must be configured properly.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function comstack_pm_ui_init() {
  drupal_add_js(drupal_get_path('module', 'comstack_pm_ui') . '/js/comstack_pm_ui.js', array('every_page' => TRUE));
}

/**
 * Implements hook_theme().
 */
function comstack_pm_ui_theme($existing, $type, $theme, $path) {
  return array(
    'comstack_pm_ui_message_button' => array(
      'variables' => array(
        'account' => NULL,
        'user' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function comstack_pm_ui_libraries_info() {
  $libraries = array();

  $libraries['ng-tags-input'] = array(
    'name' => 'ngTagsInput',
    'vendor url' => 'http://mbenford.github.io/ngTagsInput',
    'version arguments' => array(
      'file' => 'ng-tags-input.js',
      'pattern' => '/v([0-9.]+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array('ng-tags-input.js'),
      'css' => array(
        'ng-tags-input.css',
        'ng-tags-input.bootstrap.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array('ng-tags-input.min.js'),
          'css' => array(
            'ng-tags-input.min.css',
            'ng-tags-input.bootstrap.min.css',
          ),
        ),
      ),
    ),
    'dependencies' => array(
      'angularjs (>=1.3.0)',
    ),
  );

  $libraries['angularjs-scroll-glue'] = array(
    'name' => 'angularjs-scroll-glue',
    'vendor url' => 'https://github.com/Luegg/angularjs-scroll-glue',
    'version arguments' => array(
      'file' => 'scrollglue.js',
      'pattern' => '/version ([0-9.]+)/',
      'lines' => 5,
    ),
    'path' => 'src',
    'files' => array(
      'js' => array('scrollglue.js'),
    ),
    'dependencies' => array(
      'angularjs',
    ),
  );

  // This library is a pest with inconsistent naming hmph.
  $libraries['angular-bootstrap'] = array(
    'name' => 'Angular UI Bootstrap',
    'vendor url' => 'http://angular-ui.github.io/bootstrap/',
    'version arguments' => array(
      'file' => 'ui-bootstrap-tpls.js',
      'pattern' => '/Version: ([0-9.]+)/',
      'lines' => 6,
    ),
    'files' => array(
      'js' => array('ui-bootstrap-tpls.js'),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array('ui-bootstrap-tpls.min.js'),
        ),
      ),
    ),
    'dependencies' => array(
      'angularjs',
    ),
  );

  $libraries['angular-poller'] = array(
    'name' => 'angular-poller',
    'vendor url' => 'https://github.com/emmaguo/angular-poller/releases',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "([0-9.]+)",/',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array('angular-poller.js'),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array('angular-poller.min.js'),
        ),
      ),
    ),
    'dependencies' => array(
      'angularjs',
    ),
  );

  $libraries['ui-scroll'] = array(
    'name' => 'angular-ui-scroll',
    'vendor url' => 'https://github.com/angular-ui/ui-scroll/releases',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "([0-9.]+)",/',
      'lines' => 5,
    ),
    'path' => 'dist',
    'files' => array(
      'js' => array(
        'ui-scroll.js',
        'ui-scroll-jqlite.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'ui-scroll.min.js',
            'ui-scroll-jqlite.min.js',
          ),
        ),
      ),
    ),
    'dependencies' => array(
      'angularjs',
    ),
  );

  $libraries['isMobile'] = array(
    'name' => 'isMobile',
    'vendor url' => 'https://github.com/kaimallea/isMobile/releases',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "([0-9.]+)",/',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array(
        'isMobile.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'isMobile.min.js',
          ),
        ),
      ),
    ),
  );

  // The AngularJS library is defined by the comstack module (unless it's been)
  // told not to.
  $libraries['ComstackPMApp'] = array(
    'name' => 'ComstackPMApp',
    'vendor url' => 'https://github.com/lohi-io/ComstackPMApp/',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "([0-9.]+)",/',
      'lines' => 5,
    ),
    'path' => 'app',
    'files' => array(
      'js' => array('js/ComstackPMApp.js'),
      'css' => array('css/app.css'),
    ),
    'dependencies' => array(
      'angularjs (>=1.4.5)',
      'ui-router (>=0.2.15)',
      'angular-resource',
      'moment',
      'modernizr',
      'angularjs-scroll-glue',
      'ng-tags-input',
      'angular-bootstrap',
      'angular-poller',
      'ui-scroll',
      'isMobile',
    ),
  );

  return $libraries;
}

/**
* Implements hook_views_api().
*/
function comstack_pm_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'comstack_pm_ui'),
  );
}

/**
 * Implements hook_js_alter().
 */
function comstack_pm_ui_js_alter(&$javascript) {
  $ui_scroll_path = libraries_get_path('ui-scroll');

  if (isset($javascript["$ui_scroll_path/dist/ui-scroll.js"]) || isset($javascript["$ui_scroll_path/dist/ui-scroll.min.js"])) {
    $min = isset($javascript["$ui_scroll_path/dist/ui-scroll.min.js"]) ? '.min' : NULL;

    $javascript["$ui_scroll_path/dist/ui-scroll$min.js"]['group'] = -195;
    $javascript["$ui_scroll_path/dist/ui-scroll$min.js"]['weight'] = -195;

    $javascript["$ui_scroll_path/dist/ui-scroll-jqlite$min.js"]['group'] = -190;
    $javascript["$ui_scroll_path/dist/ui-scroll-jqlite$min.js"]['weight'] = -190;
  }

  $jquery_path = drupal_get_path('module', 'jquery_update');
  $jquery_version = variable_get('jquery_update_jquery_version', '1.10');

  if (isset($javascript["$jquery_path/replace/jquery/$jquery_version/jquery.js"]) || isset($javascript["$jquery_path/replace/jquery/$jquery_version/jquery.min.js"])) {
    $jq_min = isset($javascript["$jquery_path/replace/jquery/$jquery_version/jquery.min.js"]) ? '.min' : NULL;
    $javascript["$jquery_path/replace/jquery/$jquery_version/jquery$jq_min.js"]['group'] = -205;
    $javascript["$jquery_path/replace/jquery/$jquery_version/jquery$jq_min.js"]['weight'] = -205;
  }
}

/**
 * Implements hook_menu().
 */
function comstack_pm_ui_menu() {
  $items = array();

  $path = variable_get('comstack_pm_ui_app_path', 'messaging');
  $items[$path] = array(
    'title' => 'Private Messaging',
    'page callback' => 'comstack_pm_ui_page_callback',
    'access arguments' => array('access ComstackPMApp'),
  );

  return $items;
}

/**
 * Add the necessary settings and JavaScript to the page to pass to the app.
 */
function comstack_pm_ui_add_js() {
  // Not sure on the best way to do this...
  $settings = drupal_json_encode(comstack_pm_ui_app_get_settings());
  drupal_add_js("var Comstack = Comstack || {};Comstack.PMApp = {};Comstack.PMApp.Settings = $settings;", array(
    'type' => 'inline',
    'scope' => 'header',
  ));

  // Finally, add the library.
  libraries_load('ComstackPMApp');
}

/**
 * Page callback for the App.
 */
function comstack_pm_ui_page_callback() {
  comstack_pm_ui_add_js();

  return theme('comstack_angular', array(
    'app' => 'ComstackPMApp',
    'ui_view' => TRUE,
    'apply_scroll' => TRUE,
  ));
}

function comstack_pm_ui_app_get_settings() {
  // For now lets just do URL, and try for https if possible.
  // @todo
  // v1 shouldn't be there but we'll come back to this, the App should be
  // specifying the API version to use on its side.
  global $user;

  // Replacements.
  $account_url = url('user/', array('absolute' => TRUE, 'https' => TRUE)) . '@user_id@/account-settings';
  $friends_url = url('friends/', array('absolute' => TRUE, 'https' => TRUE)) . '@user_id@';

  $settings = array(
    'base_url' => rtrim(url('', array('absolute' => TRUE, 'https' => TRUE)), '/'),
    'api_url' => url('api/v1', array('absolute' => TRUE, 'https' => TRUE)),
    'friends_url' => $friends_url,
    'library_path' => url(libraries_get_path('ComstackPMApp'), array('absolute' => TRUE, 'https' => TRUE)),
    'csrf_token' => restful_csrf_session_token()['X-CSRF-Token'],
    'max_participants' => variable_get('comstack_pm_max_participants', 2),
    'strings' => array(
      'text__read_only' => t('You\'re currently opted out of private messaging, <a href="!account_url">click here</a> to go the the account settings form.', array('!account_url' => $account_url)),
      'text__no_conversations' => t('<p>You\'ve not been part of any conversations yet!</p><p>Make sure that you\'ve <a href="!friends_url">added your friends</a> then start a new conversation.</p>', array('!friends_url' => $friends_url)),
      'form__new_conversation__header' => t('You must be friends with a person before you can send them messages. <a href="!friends_url">Find and add friends</a>', array('!friends_url' => $friends_url)),
    ),
  );

  // Let other modules alter things.
  drupal_alter('comstack_pm_ui_settings', $settings);

  return $settings;
}

/**
 * Return the markup for a message button.
 */
function theme_comstack_pm_ui_message_button($variables) {
  extract($variables);

  if (!isset($user)) {
    global $user;
    $user = $user;
  }

  // No anon, no.
  if (!$user->uid) {
    return;
  }

  $preference_active = variable_get('comstack_pm_preferences__enabled__provide', FALSE) && module_exists('user_preferences');
  $show_button = TRUE;
  $disable_button = FALSE;
  $wrapper_attributes = array(
    'class' => array('cs-pm-ib', 'cs-pm-wrapper__button'),
  );
  $wrapper_tooltip = NULL;

  // Do basic access and preference checks.
  if (!user_access('access ComstackPMApp') || !user_preferences($account->uid, 'comstack_pm_enabled')) {
    $show_button = FALSE;
  }
  // Check the current user has opted in.
  if (!$preference_active || $preference_active && !user_preferences($user->uid, 'comstack_pm_enabled')) {
    $disable_button = TRUE;
    $wrapper_tooltip = t("You've not got private messaging enabled");
  }
  // Check that this user is available
  try {
    if (!comstack_pm_validate_recipients(array($account->uid), $user->uid)) {
      $disable_button = TRUE;
      $wrapper_tooltip = t('You must be friends before you can send this user a message');
    }
  }
  catch (\ComstackUnavailableUserException $e) {
    $disable_button = TRUE;
    $wrapper_tooltip = t('You must be friends before you can send this user a message');
  }

  if (!$show_button) {
    return;
  }

  if ($wrapper_tooltip) {
    $wrapper_attributes['data-toggle'] = 'tooltip';
    $wrapper_attributes['title'] = $wrapper_tooltip;
  }

  // Construct the markup. Reminder, all attributes will be run through
  // check_plain.
  $text = t('Message');
  $attributes = array(
    'class' => array('btn', 'btn-primary', 'cs-pm-message'),
    'data-uid' => $account->uid,
    'data-username' => $account->name,
    'data-action' => 'message',
  );

  // Conditional business.
  if (variable_get('comstack_pm_ui_button_include_icon', TRUE)) {
    $text = '<span class="icomoon icomoon-speech-bubble cs-pm-icon__message"></span> ' . $text;
  }
  if ($disable_button) {
    $attributes['class'][] = 'btn-disabled';
    $attributes['disabled'] = 'disabled';
  }
  else {
    $path = variable_get('comstack_pm_ui_app_path', 'messaging');
    $attributes['href'] = url($path, array('https' => TRUE, 'fragment' => '/message/' . $account->uid));
  }

  drupal_add_js(array('comstack_pm_ui' => array('tooltips' => TRUE)), 'setting');

  return '<span' . drupal_attributes($wrapper_attributes) . '><a' . drupal_attributes($attributes) . '>' . $text . '</a></span>';
}

/**
 * Implements hook_comstack_friends_buttons_alter().
 */
function comstack_pm_ui_comstack_friends_buttons_alter(&$buttons, $context) {
  // Setup vars.
  $account = $context['account'];

  $button = theme('comstack_pm_ui_message_button', array('account' => $account));

  // Add to the buttons array.
  if ($button) {
    $block = $buttons['block_button'];
    unset($buttons['block_button']);
    $buttons['message_button'] = $button;
    $buttons['block_button'] = $block;
  }
}
