<?php
/**
 * @file
 * Installation file for D2D Search.
 */

require_once 'includes/d2dsearch.constants.inc';

/**
 * Implements hook_install().
 */
function d2dsearch_install() {
  $result = db_query('SELECT id FROM {d2d_groups} WHERE name=:name',
            array(':name' => 'friends'));

  $row = $result->fetchAssoc();

  if ($row) {
    $group_id = $row['id'];
    $methods = array('d2dsearch_process_query', 'd2dsearch_process_result');
    foreach ($methods as $method_name) {
      // Try-catch to avoid problems with duplicates on re-installation.
      try {
        $m_id = db_insert('d2d_permissions')->fields(array(
          'group_id' => $group_id,
          'method' => $method_name,
        ))->execute();
      }
      catch (Exception $e) {
      }
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function d2dsearch_uninstall() {
  // Ready to be filled.
}

/**
 * Implements hook_schema().
 */
function d2dsearch_schema() {
  $schema = array();
  $schema['d2dsearch_query_cache'] = array(
    'description' => 'Stores information on queries being processed.',
    'fields' => array(
      'qid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'primary identifier (local id)',
      ),
      'query_id' => array(
        'type' => 'varchar',
        'length' => D2DSEARCH_QUERY_ID_LENGTH,
        'not null' => TRUE,
        'description' => 'global query id',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => D2DSEARCH_QUERY_TYPE_MAX_LENGTH,
        'not null' => TRUE,
        'description' => 'type of the query',
      ),
      'query' => array(
        'type' => 'varchar',
        'length' => D2DSEARCH_QUERY_MAX_LENGTH,
        'not null' => TRUE,
        'description' => 'the query itself',
      ),
      'instance_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'id of instance from which this query was received (last hop)',
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'time this query was inserted',
      ),
    ),
    'primary key' => array('qid'),
    'unique keys' => array('query_id' => array('query_id')),
  );
  $schema['d2dsearch_query_batch'] = array(
    'description' => 'Stores information on queries to be forwarded.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'primary identifier',
      ),
      'qid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'qid of the query (primary identifier in the d2dsearch_query_cache table)',
      ),
      'instance_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'id of instance to which this query will be forwarded',
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['d2dsearch_result_cache'] = array(
    'description' => 'Stores information on results of queries.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'primary identifier',
      ),
      'qid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'qid of the query (primary identifier in the d2dsearch_query_cache table)',
      ),
      'instance_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'id of instance from which this result was received (last hop)',
      ),
      'result' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'description' => 'the result itself',
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'time this query was inserted',
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}
