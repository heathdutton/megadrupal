<?php

/**
 * @file
 * Implements CyberSource Secure Acceptance Silent Order Post integration
 *   method for use with Drupal Commerce.
 */

/**
 * CyberSource server addresses.
 *
 *  Note:
 *
 *  1. If creating a subscription by itself (i.e. no payment or authorization),
 *     then use [url]/silent/token/create.
 *  2. If authorizing or paying, regardless of whether also creating a token,
 *     then use the [url]/silent/pay option.
 */
define('COMMERCE_CYBERSOURCE_SASOP_LIVE_TOKEN_SERVER', 'https://secureacceptance.cybersource.com/silent/token/create');
define('COMMERCE_CYBERSOURCE_SASOP_TEST_TOKEN_SERVER', 'https://testsecureacceptance.cybersource.com/silent/token/create');
define('COMMERCE_CYBERSOURCE_SASOP_LIVE_TRANSACTION_SERVER', 'https://secureacceptance.cybersource.com/silent/pay');
define('COMMERCE_CYBERSOURCE_SASOP_TEST_TRANSACTION_SERVER', 'https://testsecureacceptance.cybersource.com/silent/pay');

/**
 * CyberSource transaction types.
 */
define('COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_SALE', 'sale');
define('COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_AUTH', 'authorization');
define('COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_CREATE_TOKEN', 'create_payment_token');
define('COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_AUTH_CREATE_TOKEN', 'authorization,create_payment_token');
define('COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_SALE_CREATE_TOKEN', 'sale,create_payment_token');
define('COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_UPDATE_TOKEN', 'update_payment_token');
define('COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_AUTH_UPDATE_TOKEN', 'authorization,update_payment_token');
define('COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_SALE_UPDATE_TOKEN', 'sale,update_payment_token');

/**
 * CyberSource card types.
 */
define('COMMERCE_CYBERSOURCE_SASOP_CARD_VISA', '001');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_MASTERCARD', '002');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_AMERICAN_EXPRESS', '003');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_DISCOVER', '004');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_DINERS_CLUB', '005');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_CARTE_BLANCHE', '006');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_JCB', '007');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_ENROUTE', '014');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_JAL', '021');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_MAESTRO_UK_DOMESTIC', '024');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_DELTA', '031');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_VISA_ELECTRON', '033');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_DANKORT', '034');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_LASER', '035');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_CARTE_BLEUE', '036');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_CARTA_SI', '037');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_MAESTRO_INTERNATIONAL', '042');
define('COMMERCE_CYBERSOURCE_SASOP_CARD_GE_MONEY_UK_CARD', '043');

/**
 * Implements hook_menu().
 */
function commerce_cybersource_sasop_menu() {
  // Handle payment notification coming from CyberSource
  $items['commerce_cybersource_sasop/notification'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'commerce_cybersource_sasop_payment_notification'
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_cybersource_sasop_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_cybersource_sasop'] = array(
    'base' => 'commerce_cybersource_sasop',
    'title' => t('Credit Card via CyberSource'),
    'short_title' => t('CyberSource'),
    'description' => t('CyberSource Secure Acceptance Silent Order Post'),
    'display_title' => '<div class="payment-label">' . t('Credit Card via CyberSource') . '</div>' . '<div class="payment-description">' . t('Pay via Credit Card.') . '</div>',
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 * Implements CALLBACK_commerce_payment_method_settings_form().
 */
function commerce_cybersource_sasop_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'access_key' => '',
    'profile_id' => '',
    'security_key' => '',
    'transaction_mode' => 'test',
    'transaction_type' => COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_CREATE_TOKEN,
    'payment_method' => 'card',
    'currency' => commerce_default_currency(),
    'locale' => 'en-us',
    'checkout_button' => t('Complete Order'),
    'card_type' => array(COMMERCE_CYBERSOURCE_SASOP_CARD_VISA, COMMERCE_CYBERSOURCE_SASOP_CARD_MASTERCARD),
  );

  $form['access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Access key'),
    '#description' => t('Put the access key here. This is the first, shorter, 30 or 42 character component of the security key generated in your Secure Acceptance profile section, titled "Security Keys". The length of this field depends on when you opened your account.'),
    '#default_value' => $settings['access_key'],
    '#maxlength' => 42,
  );
  $form['security_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Security key'),
    '#description' => t('Second, longer, 256-character component of the security key generated in your Secure Acceptance profile section, titled "Security Keys".'),
    '#default_value' => $settings['security_key'],
    '#size' => 256,
    '#maxlength' => 256,
  );
  $form['profile_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Profile ID'),
    '#description' => t('CyberSource Secure Acceptance Profile ID from the "General Settings" section of your CyberSource Secure Acceptance profile. This will be in the format of XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX or XXXXXXX, depending on when you set up your account.'),
    '#default_value' => $settings['profile_id'],
    '#maxlength' => 36,
  );
  $form['transaction_mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction mode'),
    '#description' => t('Transaction mode used for processing orders.'),
    '#options' => array(
      'test' => t('Test mode'),
      'live' => t('Live mode'),
    ),
    '#multiple' => FALSE,
    '#default_value' => $settings['transaction_mode'],
  );
  $form['transaction_type'] = array(
    '#type' => 'select',
    '#title' => t('Transaction type'),
    '#options' => array(
      COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_SALE => t('Capture funds'),
      COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_AUTH => t('Authorize funds'),
      COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_CREATE_TOKEN => t('Create payment token'),
      COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_AUTH_CREATE_TOKEN => t('Authorize funds and create payment token'),
      COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_SALE_CREATE_TOKEN => t('Capture funds and create payment token'),
      COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_UPDATE_TOKEN => t('Update payment token'),
      COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_AUTH_UPDATE_TOKEN => t('Authorize funds and update payment token'),
      COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_SALE_UPDATE_TOKEN => t('Capture funds and update payment token'),
    ),
    '#multiple' => FALSE,
    '#default_value' => $settings['transaction_type'],
  );
  // Obtain list of currencies from Commerce.
  $commerce_currencies = commerce_currencies(TRUE);
  $currency_options = array();
  foreach ($commerce_currencies as $symbol => $details) {
    $currency_options[$symbol] = $details['name'];
  }
  $form['currency'] = array(
    '#type' => 'select',
    '#options' => $currency_options,
    '#title' => t('Currency Code'),
    '#description' => t('Currency code for transactions. Not all currency codes are supported for all processors. To select a currency not listed here, locate and activate it in the Commerce currency settings.'),
    '#default_value' => $settings['currency'],
  );
  $form['locale'] = array(
    '#type' => 'select',
    '#options' => _commerce_cybersource_sasop_get_locales(),
    '#title' => t('Locale'),
    '#default_value' => $settings['locale'],
  );
  $form['payment_method'] = array(
    '#type' => 'select',
    '#options' => array(
      'card' => t('Credit Card'),
      'echeck' => t('eCheck'),
    ),
    '#title' => t('Payment method'),
    '#default_value' => $settings['payment_method'],
  );
  $form['checkout_button'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment Submit Button Text'),
    '#description' => t('Specify the text for the payment form submit button.'),
    '#default_value' => $settings['checkout_button'],
  );
  $form['card_type'] = array(
    '#type' => 'select',
    '#title' => t('Credit card types to accept'),
    '#options' => commerce_cybersource_sasop_card_type_options(),
    '#multiple' => TRUE,
    '#default_value' => $settings['card_type'],
  );
  return $form;
}

/**
 * Payment method callback.
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 *
 * A wrapper around the module's general-use function for building
 * a CyberSource form.
 */
function commerce_cybersource_sasop_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['access_key']) || empty($payment_method['settings']['security_key'])) {
    drupal_set_message(t('This payment method is not configured for use. No account credentials have been specified.'), 'error');
    return array();
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  $amount = $order_wrapper->commerce_order_total->amount->value();
  // Allow other modules to alter the transaction amount.
  drupal_alter('commerce_cybersource_sasop_amount', $amount);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  if (empty($currency_code)) {
    $currency_code = empty($payment_method['settings']['currency']) ? commerce_default_currency() :
      $payment_method['settings']['currency'];
  }

  $cybersource_user_token = md5(microtime() . $order->order_id);
  $order->data['cybersource_sasop_user_token'] = $cybersource_user_token;
  commerce_order_save($order);

  $data = array(
    'access_key' => $payment_method['settings']['access_key'],
    'signed_date_time' => gmdate("Y-m-d\TH:i:s\Z"),
    'profile_id' => $payment_method['settings']['profile_id'],
    'transaction_type' => $payment_method['settings']['transaction_type'],
    'payment_method' => $payment_method['settings']['payment_method'],
    'locale' => $payment_method['settings']['locale'],
    'currency' => $currency_code,
    'reference_number' => $order->order_id,
    'transaction_uuid' => uniqid('', FALSE),
    'override_custom_receipt_page' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'signed_field_names' => '',
    'unsigned_field_names' => '',
  );

  // Add the existing payment token if this is a token update.
  $user = user_load($order->uid);
  if (strpos($payment_method['settings']['transaction_type'], 'update') !== FALSE && !empty($user->data['commerce_cybersource_sasop_payment_token'])) {
    $data['payment_token'] = $user->data['commerce_cybersource_sasop_payment_token'];
  }

  // Add the charge amount if this is an auth or sale transaction.
  if ($payment_method['settings']['transaction_type'] != COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_CREATE_TOKEN && $payment_method['settings']['transaction_type'] != COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_UPDATE_TOKEN) {
    $data['amount'] = number_format(commerce_currency_amount_to_decimal($amount, $currency_code), 2, '.', '');
  }

  // The substring is required because the CyberSource API only
  // accepts 15 characters for IP address; IPv6 addresses are
  // 45 characters in length.
  $data['customer_ip_address'] = substr(ip_address(), 0, 15);

  // Allow other modules an opportunity to add to or alter the transaction data.
  drupal_alter('commerce_cybersource_sasop_transaction_data', $data);

  // Build the payment form.
  $sasop_js = drupal_get_path('module', 'commerce_cybersource_sasop') . '/js/commerce_cybersource_sasop.js';
  $sasop_css = drupal_get_path('module', 'commerce_cybersource_sasop') . '/css/commerce_cybersource_sasop.css';
  drupal_add_js($sasop_js);
  drupal_add_css($sasop_css);

  $form['card_type'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#options' => commerce_cybersource_sasop_card_type_options($payment_method['settings']['card_type']),
    '#title' => t('Credit Card Type'),
    '#description' => t('Please select your credit card type'),
    '#attributes' => array('class' => array('card_type')),
  );
  $form['card_number'] = array(
    '#type' => 'textfield',
    '#size' => 20,
    '#maxlength' => 20,
    '#title' => t('Credit Card Number'),
    '#description' => t('Please enter your credit card number here'),
    '#attributes' => array('autocomplete' => 'off'),
  );

  if (strpos($payment_method['settings']['transaction_mode'], 'test') !== FALSE) {
    $form['card_number']['#description'] .= '<br /><span id="commerce-cybersource-sasop-test-text">' . '(' . t('Test Mode is enabled; the credit card will not be charged') . ')' . '</span>';
  }

  $form['card_expiry_date'] = array(
    '#type' => 'textfield',
    '#size' => 7,
    '#maxlength' => 7,
    '#title' => t('Expiration Date'),
  );
  $form['card_cvn'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#title' => t('CVV Code'),
    '#description' => t('Please enter the 3- or 4-digit card security code'),
    '#attributes' => array('autocomplete' => 'off'),
  );

  $form['bill_to_forename'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#default_value' => $billing_address['first_name'],
  );
  $form['bill_to_surname'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#default_value' => $billing_address['last_name'],
  );
  $form['bill_to_company_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Company name'),
    '#default_value' => $billing_address['organisation_name'],
  );
  $form['bill_to_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => $order->mail,
  );

  $form['bill_to_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
  );
  $form['bill_to_address_line1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#default_value' => $billing_address['thoroughfare'],
  );
  $form['bill_to_address_line2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 2'),
    '#title_display' => 'invisible',
    '#default_value' => $billing_address['premise'],
  );
  $form['bill_to_address_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => $billing_address['locality'],
  );
  $form['bill_to_address_state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#default_value' => $billing_address['administrative_area'],
    '#description' => t('Required.'),
  );
  $form['bill_to_address_country'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#title' => t('Country'),
    '#default_value' => $billing_address['country'],
    '#options' => country_get_list(),
    '#attributes' => array('class' => array('country')),
  );
  $form['bill_to_address_postal_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#default_value' => $billing_address['postal_code'],
  );

  // Collect the list of all signed and unsigned fields.
  $unsigned_field_names = array();
  $signed_field_names = array();
  // Interactive form fields will be unsigned.
  foreach ($form as $name => $element) {
    $unsigned_field_names[] = $name;
  }
  // Non interactive form fields will be signed.
  foreach ($data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
    $signed_field_names[] = $name;
  }

  $unsigned_field_names_list = implode(',', $unsigned_field_names);
  $signed_field_names_list = implode(',', $signed_field_names);

  $form['unsigned_field_names']['#value'] = $unsigned_field_names_list;
  $form['signed_field_names']['#value'] = $signed_field_names_list;

  $data['unsigned_field_names'] = $unsigned_field_names_list;
  $data['signed_field_names'] = $signed_field_names_list;

  // Add the signature field of signed name value pairs.
  $form['signature'] = array(
    '#type' => 'hidden',
    '#value' => commerce_cybersource_sasop_sign($data, $signed_field_names, $payment_method['settings']['security_key']),
  );

  // Set appropriate server path.
  if ($payment_method['settings']['transaction_type'] == COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_CREATE_TOKEN ||
    $payment_method['settings']['transaction_type'] == COMMERCE_CYBERSOURCE_SASOP_TRANSACTION_UPDATE_TOKEN) {
    $testing_url = COMMERCE_CYBERSOURCE_SASOP_TEST_TOKEN_SERVER;
    $live_url = COMMERCE_CYBERSOURCE_SASOP_LIVE_TOKEN_SERVER;
  }
  else {
    $testing_url = COMMERCE_CYBERSOURCE_SASOP_TEST_TRANSACTION_SERVER;
    $live_url = COMMERCE_CYBERSOURCE_SASOP_LIVE_TRANSACTION_SERVER;
  }

  // Set the form action to the appropriate CyberSource URL.
  switch ($payment_method['settings']['transaction_mode']) {
    case 'test':
      $url = $testing_url;
      break;

    case 'live':
      $url = $live_url;
      break;

    default:
      $url = $testing_url;
  }

  $form['#action'] = $url;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => empty($payment_method['settings']['checkout_button']) ? t('Submit Order') : check_plain($payment_method['settings']['checkout_button']),
    '#attributes' => array(
      'class' => array('complete_sasop_payment'),
    ),
  );

  $form['back-button'] = array(
    '#markup' => l(t("Go Back"), "checkout/{$order->order_id}/payment/back/" . $order->data['payment_redirect_key'],
      array(
        'attributes' => array(
          'class' => array('button grey wysiwyg-button'),
          'id' => 'cancel-sasop-payment',
        ),
      )
    ),
  );

  return $form;
}

/**
 * Validate user's arrival at the success page.
 *
 * If necessary, move the user back to the previous page.
 */
function commerce_cybersource_sasop_response_validate($data, $order, $payment_method) {
  // Validate the returned data against its signature.
  if (!commerce_cybersource_sasop_verify_callback($data, $payment_method)) {
    watchdog(
      'commerce_cybersource_sasop',
      'Order @order_number with remote id: @remote_id has failed signature validation.',
      array(
        '@order_number' => $order->order_id,
        '@remote_id' => $_POST['req_transaction_uuid'],
      )
    );
    return FALSE;
  }

  // This may be an unnecessary step, but if for some reason the user does end
  // up returning at the success URL with a Failed payment, go back.
  if (strtoupper($_POST['decision']) != 'ACCEPT') {
    // Created failed payment transaction before returning false.
    $transaction = commerce_payment_transaction_new('commerce_cybersource_sasop', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->remote_id = $_POST['req_transaction_uuid'];
    $transaction->amount = commerce_currency_decimal_to_amount($_POST['req_amount'], $_POST['req_currency']);
    $transaction->currency_code = strtoupper($_POST['req_currency']);
    $transaction->payload[REQUEST_TIME] = $_POST;
    $transaction->remote_status = $_POST['decision'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t("The payment has failed:") . $_POST['message'];

    commerce_payment_transaction_save($transaction);
    watchdog(
      'commerce_cybersource_sasop',
      'Order @order_number with remote id: @remote_id has failed with the following code @code:@code_message',
      array(
        '@order_number' => $order->order_id,
        '@remote_id' => $_POST['req_transaction_uuid'],
        '@code' => $_POST['decision'],
        '@code_message' => $_POST['message'] . (isset($_POST["invalid_fields"]) ? " - " . $_POST["invalid_fields"] : ""),
      )
    );

    // Returning FALSE sends error message to user and redirects back to
    // previous checkout page.
    return FALSE;
  }
}

/**
 * Payment method callback.
 * Implements CALLBACK_commerce_payment_method_redirect_form_submit().
 */
function commerce_cybersource_sasop_redirect_form_submit($order, $payment_method) {
  if (commerce_cybersource_sasop_response_validate($_POST, $order, $payment_method) !== FALSE) {
    // Perform any submit functions if necessary.
    commerce_cybersource_sasop_process_payment($_POST, $order, $payment_method);
    commerce_payment_redirect_pane_next_page($order);
  }
  else {
    // Otherwise display the failure message and send the customer back to
    // the order payment page.
    drupal_set_message(t('Payment failed at the payment server. Please review your information and try again. If issues persist please contact your issuing bank.'), 'error');
    commerce_payment_redirect_pane_previous_page($order);
  }
}

/**
 * Create a transaction record for a SASOP payment.
 */
function commerce_cybersource_sasop_process_payment($data, $order, $payment_method) {
  $transaction = commerce_payment_transaction_new('commerce_cybersource_sasop', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  if (!empty($data['transaction_id'])) {
    $transaction->remote_id = $data['transaction_id'];
    $transaction->amount = commerce_currency_decimal_to_amount($data['auth_amount'], $data['req_currency']);
  }
  else {
    $transaction->amount = commerce_currency_decimal_to_amount($data['req_amount'], $data['req_currency']);
  }
  $transaction->currency_code = $data['req_currency'];
  $transaction->payload[REQUEST_TIME] = $data;
  $transaction->remote_status = $data['decision'];

  switch (strtoupper($data['decision'])) {
    case 'ACCEPT':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');
      break;

    case 'REJECT':
    case 'ERROR':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t("The payment has failed.");
      break;
  }

  // Store the subscription ID provided by CyberSource into the field on the
  // user (if a subscription ID was returned).
  if (isset($data['payment_token'])) {
    // Ensure there are no invalid characters.
    $subscription_id = check_plain($data['payment_token']);

    watchdog(
      'commerce_cybersource_sasop',
      'Subscription ID saved: @subscription_id',
      array(
        '@subscription_id' => $subscription_id,
      )
    );

    // Load the user object, set the subscription ID field and save the user.
    $user = user_load($order->uid);
    user_save($user, array('data' => array('subscription_id' => $subscription_id)));

    // Allow other modules to consume the token.
    foreach (module_implements('cybersource_sasop_save_token') as $module) {
      $function = $module . '_cybersource_sasop_save_token';
      $function($user, $subscription_id);
    }
  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  watchdog(
    'commerce_cybersource_sasop',
    'Order @order_number with remote id: @remote_id has been processed with the following code @code:@code_message',
    array(
      '@order_number' => $order->order_id,
      '@remote_id' => $data['req_transaction_uuid'],
      '@code' => $data['decision'],
      '@code_message' => $data['message'] . (array_key_exists("invalid_fields", $data) ? " - " . $data["invalid_fields"] : ""),
    )
  );
}

/****************************************************************************
 * Payment specific module functions.                                       *
 ****************************************************************************/

/**
 * Returns an options array of credit card types.
 */
function commerce_cybersource_sasop_card_type_options($filter = NULL) {
  $options = array(
    COMMERCE_CYBERSOURCE_SASOP_CARD_VISA => t('VISA'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_MASTERCARD => t('MasterCard'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_AMERICAN_EXPRESS => t('American Express'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_DISCOVER => t('Discover'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_DINERS_CLUB => t('Diners Club'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_CARTE_BLANCHE => t('Carte Blanche'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_JCB => t('JCB'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_ENROUTE => t('EnRoute'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_JAL => t('JAL'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_MAESTRO_UK_DOMESTIC => t('Maestro UK Domestic'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_DELTA => t('Delta'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_VISA_ELECTRON => t('VISA Electron'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_DANKORT => t('Dankort'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_LASER => t('Laser'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_CARTE_BLEUE => t('Carte Bleue'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_CARTA_SI => t('Carta Si'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_MAESTRO_INTERNATIONAL => t('Maestro International'),
    COMMERCE_CYBERSOURCE_SASOP_CARD_GE_MONEY_UK_CARD => t('GE Money Card UK'),
  );
  if (!empty($filter) && is_array($filter)) {
    $filtered_options = array();
    foreach ($filter as $card_type) {
      if (isset($options[$card_type])) {
        $filtered_options[$card_type] = $options[$card_type];
      }
    }
    $options = $filtered_options;
  }
  return $options;
}

/**
 * Validate data returned from CyberSource.
 */
function commerce_cybersource_sasop_verify_callback($data, $payment_method) {
  $secret_key = $payment_method['settings']['security_key'];
  $fields = explode(',', $data["signed_field_names"]);
  $signed_string = commerce_cybersource_sasop_sign($data, $fields, $secret_key);
  return ($signed_string == $data["signature"]);
}

/**
 * Returns a signed string of parameters.
 */
function commerce_cybersource_sasop_sign($data, $fields, $secret_key) {
  $data_to_sign = array();
  foreach ($fields as $field) {
    $data_to_sign[] = $field . "=" . $data[$field];
  }
  $pairs = implode(',', $data_to_sign);
  return base64_encode(hash_hmac('sha256', $pairs, $secret_key, TRUE));
}

/**
 * Handles the postback from CyberSource. Each transaction that CyberSource
 * processes will send a postback to the configured URL in the account.
 *
 * This is required to ensure that every payment gets recorded properly.
 *
 * @see https://www.drupal.org/node/2345471
 */
function commerce_cybersource_sasop_payment_notification() {
  $data = $_POST;

  if (empty($data)) {
    watchdog('cybersource_sasop', 'Notification URL called with no data.', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  // In order to validate, we need to get the order number.
  $order_number = $data['req_reference_number'];

  $order = commerce_order_load($order_number);

  if ($order == FALSE) {
    watchdog('cybersource_sasop', 'Got a response for an unknown order number: @ref', array('@ref' => $order_number), WATCHDOG_WARNING);
    return FALSE;
  }

  $payment_method = $order->data['payment_method'];
  if (is_string($payment_method) && ($payment_method != "")) {
    $payment_method = commerce_payment_method_instance_load($payment_method);
  }

  // Validate the notification data.
  $result = commerce_cybersource_sasop_response_validate($data, $order, $payment_method);

  // watchdog('cybersource_sasop', 'Result was @res', array('@res' => var_dump($result, TRUE)), WATCHDOG_DEBUG);
  if ($result !== FALSE) {
    // Perform any submit functions if necessary.
    commerce_cybersource_sasop_redirect_form_submit($order, $payment_method);

    // Send the customer on to the next checkout page.
    // commerce_order_status_update($order, 'checkout_complete');
    commerce_payment_redirect_pane_next_page($order);
  }

  return FALSE;
}

/**
 * Helper function to create a list of locales supported by CyberSource.
 */
function _commerce_cybersource_sasop_get_locales() {
  return array(
    'ar-XN' => t('Arabic'),
    'km-KH' => t('Cambodia'),
    'zh-HK' => t('Chinese - Hong Kong'),
    'zh-MO' => t('Chinese - Maco'),
    'zh-CN' => t('Chinese - Mainland'),
    'zh-SG' => t('Chinese - Singapore'),
    'zh-TW' => t('Chinese - Taiwan'),
    'cz-CZ' => t('Czech'),
    'nl-nl' => t('Dutch'),
    'en-US' => t('English - American'),
    'en-AU' => t('English - Australia'),
    'en-GB' => t('English - Britain'),
    'en-CA' => t('English - Canada'),
    'en-IE' => t('English - Ireland'),
    'en-NZ' => t('English - New Zealand'),
    'fr-FR' => t('French'),
    'fr-CA' => t('French - Canada'),
    'de-DE' => t('German'),
    'de-AT' => t('German - Austria'),
    'hu-HU' => t('Hungary'),
    'id-ID' => t('Indonesian'),
    'it-IT' => t('Italian'),
    'ja-JP' => t('Japanese'),
    'ko-KR' => t('Korean'),
    'lo-LA' => t("Lao People's Democratic Replublic"),
    'ms-MY' => t('Malaysian Bahasa'),
    'tl-PH' => t('Philippines Tagalog'),
    'pl-PL' => t('Polish'),
    'pt-BR' => t('Portuguese - Brazil'),
    'ru-RU' => t('Russian'),
    'sk-SK' => t('Slovakian'),
    'es-ES' => t('Spanish'),
    'es-AR' => t('Spanish - Argentina'),
    'es-CL' => t('Spanish - Chile'),
    'es-CO' => t('Spanish - Colombia'),
    'es-MX' => t('Spanish - Mexico'),
    'es-PE' => t('Spanish - Peru'),
    'es-US' => t('Spanish - American'),
    'th-TH' => t('Thai'),
    'tr-TR' => t('Turkish'),
    'vi-VN' => t('Vietnamese'),
  );
}

