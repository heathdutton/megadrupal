<?php

define('COMMERCE_TRADEGECKO_APPID', 'a989041cf2606a471304b89205b1c89a4953eb020693f126daa9d0a77093eda9');


/**
 * Implements hook_menu().
 */
function commerce_tradegecko_menu() {
  $items = array();

  $items['admin/config/services/tradegecko'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_tradegecko_admin_form'),
    'access arguments' => array('configure tradegecko integration'),
    'title' => 'TradeGecko',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_tradegecko_permission() {
  return array(
    'configure tradegecko integration' => array('title' => 'Configure TradeGecko Integration'),
  );
}



/**
 * Administration form for TG integration
 */
function commerce_tradegecko_admin_form() {

  $form = array();

  $redirect_uri = 'urn:ietf:wg:oauth:2.0:oob';
  $uri = 'https://api.tradegecko.com/oauth/authorize?response_type=code&client_id=%s&redirect_uri=%s';

  $form['tradegecko_authcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorization Code'),
    '#default_value' => variable_get('tradegecko_authcode', ''),
    '#description' => l('Get an Authorization Code',
      sprintf($uri, COMMERCE_TRADEGECKO_APPID, $redirect_uri))
  );

  $form['tradegecko_accesstoken'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Token'),
    '#default_value' => variable_get('tradegecko_accesstoken', ''),
  );

  $form['tradegecko_authorize'] = array(
    '#type' => 'submit',
    '#value' => t('Get access token'),
    '#submit' => array('commerce_tradegecko_api_authorize'),
  );

  return system_settings_form($form);
}


/**
 * API: Get Auth token
 */
function commerce_tradegecko_api_authorize() {

  $data = array(
    'client_id' => 'a989041cf2606a471304b89205b1c89a4953eb020693f126daa9d0a77093eda9',
    'client_secret' => 'd16bff8a313a5de773fec90932e91840611bf1ad3e10c08a9210a14668a26aa1',
    'redirect_uri' => 'urn:ietf:wg:oauth:2.0:oob',
    'code' => variable_get('tradegecko_authcode', ''),
    'grant_type' => 'authorization_code',
  );

  $ret = drupal_http_request('http://api.tradegecko.com/oauth/token', array(
    'method' => 'POST',
    'data' => http_build_query($data),
  ));

  if ($ret->code === '200') {
    $data = json_decode($ret->data);
    variable_set('tradegecko_accesstoken', $data->access_token);
    drupal_set_message(t('Access token updated.'));
  } else {
    drupal_set_message(t('Unable to get an access token.'), 'warning');
    dpm($ret);
  }
}


/**
 * Get all product information
 */
function commerce_tradegecko_getproducts($sku = NULL) {
  $access_token = variable_get('tradegecko_accesstoken', '');
  $ret = drupal_http_request('http://api.tradegecko.com/variants?limit=500', array(
    'headers' => array('Authorization' => sprintf('Bearer %s', $access_token)),
  ));

  if ($ret->code === '200') {
    $data = array();
    $variants = json_decode($ret->data);
    foreach ($variants->variants as $variant) {
      $data[$variant->sku] = $variant;
    }

    if ($sku && isset($data[$sku])) {
      return $data[$sku];
    }
    return $data;
  }

  return FALSE;
}


/**
 * Implements hook_theme().
 */
function commerce_tradegecko_theme() {
  return array(
    'commerce_tradegecko_status' => array(
      'template' => 'commerce-tradegecko-status',
      'arguments' => array('product' => array()),
      'path' => drupal_get_path('module', 'commerce_tradegecko') . '/theme',
    ),
  );
}


/**
 * Implements hook_form_form_id_alter().
 *
 * Add TradeGecko status to commerce_product_ui_product_form
 */
function commerce_tradegecko_form_commerce_product_ui_product_form_alter(&$form, $form_state) {
  if (isset($form['#entity']->sku)) {
    $form['tradegecko'] = array(
      '#type' => 'fieldset',
      '#title' => t('TradeGecko'),
      '#weight' => 10,
    );

    $product = commerce_tradegecko_getproducts($form['#entity']->sku);
    $form['tradegecko']['markup'] = array(
      '#markup' => theme('commerce_tradegecko_status', array('product' => $product)),
    );
  }
}
