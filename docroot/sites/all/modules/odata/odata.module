<?php

require('odata_metadata.inc');

function odata_help($path, $arg) {
  if ($path == 'admin/structure/odata' && module_exists('views')) {
    return '<p>' . t('Each entry could have one or more corresponding views that is managed on the !view menu.', array('!view' => l(t('Views'), 'admin/structure/views'))) . '</p>';
  }
  elseif ($path == 'admin/structure/odata' && !module_exists('views')) {
    return '<p>' . t('It is recommended to install  !view', array('!view' => l(t('Views'), 'http://drupal.org/project/views'))) . '</p>';
  }
  elseif ($path == 'admin/structure/odata/create' ) {
    return '<p>' . t('Here you can create an oData endpoint entry.' ) . '</p>';
  }
  elseif ($path == 'admin/structure/odata/create/get-structure') {
    return '<p>' . t('Please select the collection that you want to work with.' ) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function odata_menu() {

  $items = array();

  $items['admin/structure/odata/create'] = array(
    'title'            => 'New oData endpoint',
    'description'      => 'Create a new endpoint for odata',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('odata_create_endpoints_form'),
    'file'             => 'odata.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/odata/create/get-structure'] = array(
    'title'            => 'oData get structure of endpoint',
    'description'      => 'oData get structure of endpoint',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('odata_get_structure_endpoints_form'),
    'file'             => 'odata.admin.inc',
    'type' => MENU_CALLBACK,
  );
  //todo: better url
  $items['admin/structure/odata/%/delete'] = array(
    'title'            => 'Delete oData endpoint',
    'description'      => 'Delete an existing endpoint for odata',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('odata_delete_endpoints_form'),
    'file'             => 'odata.admin.inc',
  );

  $items['admin/structure/odata'] = array(
    'title'            => 'oData endpoints',
    'description'      => 'List of oData endpoints.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'odata_get_endpoints_form',
    'file'             => 'odata.admin.inc',
  );

  $items['admin/structure/odata/list'] = array(
    'title' => 'List odata endpoints',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * API functions to manipulate odata Views resources.
 */
function odata_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'odata'),
  );
}

/**
 *  It runs a OData query with JSON reply
 */
function odata_request($request) {
  $reply = drupal_http_request($request, array('headers' => array('Accept' => 'application/json')));
  if (!empty($reply->status_message) && $reply->status_message != 'OK') {
    return array('error' => $reply->status_message, 'details' =>  $reply->error);
  }
  if (empty($reply->status_message) && !empty($reply->error) ) {
    return array('error' => 'unexpected_error', 'details' =>  $reply->error);
  }
  $json = drupal_json_decode($reply->data);
  return $json['d'];
}

/**
 *  Used from Complex Types
 */
function _odata_toreal($str) {
  $arr=explode(':', $str);
  return implode('/', $arr);
}
