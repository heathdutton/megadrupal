<?php

/**
 * @file
 * Module file of the translation management TMGMT moravia module.
 *
 * Url: http://www.moravia.com/
 */

// define("TMGMT_MORAVIA_STATE_DRAFT", 1);
// define("TMGMT_MORAVIA_STATE_ORDER", 3);
// define("TMGMT_MORAVIA_STATE_INPROGRESS", 4);
define("TMGMT_MORAVIA_STATE_COMPLETED", 5);

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_moravia_tmgmt_translator_plugin_info() {
  return array(
    'moravia' => array(
      'label' => t('Moravia translator'),
      'description' => t('Moravia translator service.'),
      'plugin controller class' => 'TMGMTMoraviaPluginController',
      'ui controller class' => 'TMGMTMoraviaTranslatorUIController',
      'auto create' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tmgmt_moravia_menu() {
  return array(
    'tmgmt_moravia_callback' => array(
      'title' => 'TMGMT Moravia Callback',
      'description' => '',
      'page callback' => 'tmgmt_moravia_callback',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Check periodically translation status, if there are any unfinished jobs.
 */
function tmgmt_moravia_cron() {
  return tmgmt_moravia_callback();
}

/**
 * Callback for Moravia requests on URL "/tmgmt_moravia_callback".
 */
function tmgmt_moravia_callback() {
  $ids = array();
  $query = new EntityFieldQuery();
  $moravia_pending_jobs = $query
  ->entityCondition('entity_type', 'tmgmt_job')
  ->propertyCondition('translator', 'moravia')
  // ->propertyCondition('state', '0') // spravny state.
  ->propertyCondition('translator', 'moravia')
  ->execute();

  foreach ($moravia_pending_jobs['tmgmt_job'] as $pj) {
    $ids[] = $pj->tjid;
  }

  if (count($ids) < 0) {
    return TRUE;
  }

  $controller = tmgmt_translator_plugin_controller("moravia");

  $jobs = entity_load('tmgmt_job', $ids);
  foreach ($jobs as $job) {
    // Only those jobs, whitch need translation.
    if ($job->state != 1) {
      continue;
    }

    $translator = $job->getTranslator();

    $task = $controller->jobToSymfonieTask($job);

    // We are only interested in completed tasks.
    if ($task->getStateId() == TMGMT_MORAVIA_STATE_COMPLETED) {
      $has_deliveries = FALSE;
      foreach ($task->attachments as $a) {

        if ($a->fileType == "Target") {
          $data = $a->downloadFile();
          $has_deliveries = TRUE;

          // Rucni overeni validniho xml, aby nasledne nenastal fatal error.
          $doc = simplexml_load_string($data);
          if ($doc) {
            $atr_name = 'target-language';
            $xliff_lang = ($doc->file[0]->attributes()->$atr_name);
            $xliff_lang = (reset($xliff_lang));
            
            $target_lang = $translator->settings['remote_languages_mappings'][$task->job->target_language];

            if ($xliff_lang != $target_lang) {
              $job->addMessage('Publish to Drupal was not successful. File is corrupted or wrong, upload correct file and complete the task again.');

              tmgmt_moravia_symfonie_api_call($translator, "/api/comments", "POST", json_encode((object) array(
                'comment' => (object) array(
                  'created_at' => NULL,
                  'creator_id' => NULL,
                  'updated_at' => NULL,
                  'message' => t("Publish to Drupal was not successful. File is corrupted or wrong, upload correct file and complete the task again."),
                  'task_id' => $task->job->reference,
                ),
              )));

              tmgmt_moravia_symfonie_api_call($translator, "/api/task/actions?id={$task->job->reference}&command=Reopen&description=", "POST", array());
              continue;
            }

            try {
              $translated_data = $controller->importXliff($data);
            }
            catch (Exception $e) {
              $job->addMessage('Publish to Drupal was not successful. File is corrupted or wrong, upload correct file and complete the task again.');

              tmgmt_moravia_symfonie_api_call($translator, "/api/comments", "POST", json_encode((object) array(
                'comment' => (object) array(
                  'created_at' => NULL,
                  'creator_id' => NULL,
                  'updated_at' => NULL,
                  'message' => t("Publish to Drupal was not successful. File is corrupted or wrong, upload correct file and complete the task again."),
                  'task_id' => $task->job->reference,
                ),
              )));

              tmgmt_moravia_symfonie_api_call($translator, "/api/task/actions?id={$task->job->reference}&command=Reopen&description=", "POST", array());
            }

            if ($translated_data) {
              $job->addMessage('The translation has been received.');
              $job->addTranslatedData($translated_data);

              tmgmt_moravia_symfonie_api_call($translator, "/api/comments", "POST", json_encode((object) array(
                'comment' => (object) array(
                  'created_at' => NULL,
                  'creator_id' => NULL,
                  'updated_at' => NULL,
                  'message' => t("Upload to Drupal has been successful"),
                  'task_id' => $task->job->reference,
                ),
              )));
              tmgmt_moravia_symfonie_api_call($translator, "/api/task/actions?id={$task->job->reference}&command=Approve&description=", "POST", array());

            }
            else {
              $job->addMessage('The translation import failed.');

              tmgmt_moravia_symfonie_api_call($translator, "/api/comments", "POST", json_encode((object) array(
                'comment' => (object) array(
                  'created_at' => NULL,
                  'creator_id' => NULL,
                  'updated_at' => NULL,
                  'message' => t("Upload to Drupal failed"),
                  'task_id' => $task->job->reference,
                ),
              )));
            }
          }
          else {
            $job->addMessage('Publish to Drupal was not successful. File is corrupted or wrong, upload correct file and complete the task again.');

            tmgmt_moravia_symfonie_api_call($translator, "/api/comments", "POST", json_encode((object) array(
              'comment' => (object) array(
                'created_at' => NULL,
                'creator_id' => NULL,
                'updated_at' => NULL,
                'message' => t("Publish to Drupal was not successful. File is corrupted or wrong, upload correct file and complete the task again."),
                'task_id' => $task->job->reference,
              ),
            )));

            tmgmt_moravia_symfonie_api_call($translator, "/api/task/actions?id={$task->job->reference}&command=Reopen&description=", "POST", array());
          }
        }
      }

      if (!$has_deliveries) {
        $job->addMessage('Publish to Drupal was not successful. File is corrupted or wrong, upload correct file and complete the task again.');

        tmgmt_moravia_symfonie_api_call($translator, "/api/comments", "POST", json_encode((object) array(
          'comment' => (object) array(
            'created_at' => NULL,
            'creator_id' => NULL,
            'updated_at' => NULL,
            'message' => t("Publish to Drupal was not successful. File is corrupted or wrong, upload correct file and complete the task again."),
            'task_id' => $task->job->reference,
          ),
        )));

        tmgmt_moravia_symfonie_api_call($translator, "/api/task/actions?id={$task->job->reference}&command=Reopen&description=", "POST", array());
      }
    }

  }
}
