<?php
/**
 * @file
 * agres_categories.module
 * Contains functions to manage categories: Users can create categories like:
 * Rooms, Houses, cars, Restauranttable and choose properties like ,hourly bookable, daily bookable,...
 * and assign these categories to a Unit type.
 */
require_once('./' . drupal_get_path('module', 'agreservations') . '/includes/agres_funcs.inc');
define('BOOKING_MODE_BY_HOURS', '1');
define('BOOKING_MODE_BY_DAYS', '2');
define('BOOKING_MODE_FIXED', '3');
define('CATEGORY_SEARCH_WIDGET_NO_TIMES', '0');
define('CATEGORY_SEARCH_WIDGET_TIMES', '1');
//

function agres_categories_init() {
  if (file_exists(drupal_get_path('module', 'agreservations') . '/js/agresdatechange.js')) {
    $path = drupal_get_path('module', 'agreservations');
    drupal_add_js($path . '/js/agresdatechange.js', array('weight' => 1));
  }
}
/**
 * Implements hook_uc_cart_item().
 */
function agres_categories_uc_cart_item($op, $item) {
    switch ($op) {
      case 'load':
//            drupal_set_message('<pre>agres_bookings_uc_cart_item '.print_r($item,true).'</pre>');
    }

}
function agres_categories_uc_update_cart_item($nid, $data = array(), $qty, $cid = NULL) {
  if (!$nid) {
    return NULL;
  }
  
  
  $cid = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();
  if ($qty < 1) {
    uc_cart_remove_item($nid, $cid, $data);
  }
  else {
    $items = uc_cart_get_contents($cid);
    foreach ($items as $kitem=>$item) {
      
    }
//    drupal_set_message('<pre>agres_categories_uc_update_cart_item '.print_r($items,true).'</pre>');
    db_update('uc_cart_products')
                ->fields(array(
      'qty' => $qty,
      'changed' => REQUEST_TIME,
    ))
                ->condition('nid', $nid)
                ->condition('cart_id', $cid)
                ->condition('data', serialize($data))
                ->execute();
  }
//  drupal_set_message('<pre>agres_categories_uc_update_cart_item '.print_r($nid,true).'</pre>');
  uc_cart_get_contents(NULL, 'rebuild');

}

//
//
function agres_categories_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'agres_categories'),
  );
}

function _agres_categories_unittype_has_cat($unittypenid, $categorynid) {
  if (isset($categorynid)){
    if (is_a($categorynid, 'stdClass')) {
      $categorynid = $categorynid->nid;
    }
  }
//  $query = db_select('node', 'n');
//  $query->fields('n', array('nid', 'title'));
//  $query->condition('n.type', 'agreservations_unittype');
//  $query->innerJoin('field_data_field_agres_ref_category', 'farc', 'farc.entity_id = n.nid');
//  $query->where('n.nid = :nidunittype AND farc.field_agres_ref_category_nid = :category', array(':nidunittype' => $unittypenid,':category' => $categorynid));
////  $query->where('farc.field_agres_ref_category_nid = :category', array(':category' => $categorynid));

  $query = db_select('field_data_field_agres_ref_category', 'farc');
  $query->fields('farc', array('bundle','entity_id', 'field_agres_ref_category_nid'));
  $query->condition('farc.bundle', 'agreservations_unittype');
  $query->where('farc.entity_id = :nidunittype AND farc.field_agres_ref_category_nid = :category', array(':nidunittype' => $unittypenid,':category' => $categorynid));
//  $query->where('farc.field_agres_ref_category_nid = :category', array(':category' => $categorynid));
  $res = $query->execute();

  $units = array();
  $retval = FALSE;
  while ($unititem = $res->fetchObject()) {
    $retval = TRUE;
    break;
  }
  return $retval;
}

//
///**
// *  _agres_categories_get_unitnodes_of_category
// *  Function to get the unitnodes that belong to a category:
// *  @author     Andreas Gill
// *  @param      $unittypenid
// *  @return     array of units
// *
// */
function _agres_categories_get_unitnodes_of_category($nidunittype = NULL, $category = NULL) {
  if (!$nidunittype) {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->condition('n.type', 'agreservations_unit');
    $query->innerJoin('field_data_field_agreservations_unitnumber', 'fau', 'n.nid = fau.entity_id');
    $query->innerJoin('field_data_field_agreservations_unittype', 'faut', 'faut.entity_id = fau.entity_id');
    $query->innerJoin('field_data_field_agres_ref_category', 'farc', 'farc.entity_id = faut.field_agreservations_unittype_nid');
    $query->where('farc.field_agres_ref_category_nid = :category', array(':category' => $category));
  }
  else {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->condition('n.type', 'agreservations_unit');
    $query->innerJoin('field_data_field_agreservations_unitnumber', 'fau', 'n.nid = fau.entity_id');
    $query->innerJoin('field_data_field_agreservations_unittype', 'faut', 'faut.entity_id = fau.entity_id');
    $query->innerJoin('field_data_field_agres_ref_category', 'farc', 'farc.entity_id = faut.field_agreservations_unittype_nid');
    $query->where('faut.field_agreservations_unittype_nid = :nidunittype', array(':nidunittype' => $nidunittype));
    $query->where('farc.field_agres_ref_category_nid = :category', array(':category' => $category));
  }

  $res = $query->execute();
//     drupal_set_message('<pre>' . print_r($xres, true) . '</pre>');
  $units = array();
  while ($unititem = $res->fetchObject()) {
    $units[$unititem->nid] = node_load($unititem->nid); //$unititem;
  }

  return $units;
}
//
///**
// *  Function to get the unittypes of a given category:
// *
// */
function _agres_categories_get_unittypenodes_of_category($catnid = NULL) {
  if (!isset($catnid)) {
    $res = db_query("SELECT n.nid, n.title AS title,fdfarc.entity_id,fdfarc.field_agres_ref_category_nid FROM
          {node} n INNER JOIN {field_data_field_agres_ref_category}
          fdfarc ON n.nid = fdfarc.entity_id WHERE n.status = 1 AND n.type = 'agreservations_unittype' ORDER BY n.title");
  }
  else {
    $res = db_query("SELECT n.nid, n.title AS title,fdfarc.entity_id,fdfarc.field_agres_ref_category_nid FROM
          {node} n INNER JOIN {field_data_field_agres_ref_category}
          fdfarc ON n.nid = fdfarc.entity_id WHERE n.status = 1 AND n.type = 'agreservations_unittype' AND
          fdfarc.field_agres_ref_category_nid = :catnid ORDER BY n.title",   array(':catnid' => $catnid));
  }

  $unittypes = array();

  foreach ($res as $unittype) {
    $unittypes[$unittype->nid] = node_load($unittype->nid);
  }

  return $unittypes;

}
//
///* _agres_categories_get_categories
// * just get all the categories as nidarray
// * return full nodes = $fullnodes = true
// */
//
function _agres_categories_get_categories($fullnodes) {

  $result = db_query("SELECT n.nid, n.title AS title FROM {node} n WHERE n.status = 1 AND n.type = 'agres_category' ORDER BY n.nid");
  $categories = array();

  foreach ($result as $category) {
    if ($fullnodes) {
      $categories[$category->nid] = node_load($category->nid);
    }
    else {
      $categories[$category->nid] = $category->title;
    }
  }


  return $categories;
}


//
function agres_categories_callback_title_function($title) {

  return t('@title', array('@title' => $title));
}
//
function agres_categories_menu() {
  $items['agreservationformcat/%node/%'] = array(
    'title' => t('Choose the Rooms you like.'),
    'title callback' => 'agres_categories_callback_title_function',
    'title arguments' => array(2),
    'page callback' => 'agres_categories_get_form',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'description' => t('unitsearch'),
    'type' => MENU_CALLBACK,
  );
  $items['agreservationformcaterror/%'] = array(
    'title' => t('An error occured.'),
    'page callback' => 'agres_categories_get_errform',
    'page arguments' => array(1),
    //            'access arguments' => array('access content'),
    'description' => t('errorpage'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*/
 *
 */
function agres_categories_get_form($category = null) {
  
//  if (!isset($category)) {
//    $category=node_load(1);
//  }
  if (isset($category)) {
    $langcode = field_language('node', $category, 'field_agres_titleresform' );
    $langcode = i18n_langcode();
    if (!isset($category->field_agres_titleresform[$langcode])) {
      $langcode = language_default('language');
      if (!isset($category->field_agres_titleresform[$langcode])) {
        $langcode = 'und';
      }
    }
    $langcode_caus = 'und';
    $langcode_caus =field_language('node',$category,'field_agres_unitselectionmethod');
//        $category->field_agres_titleresform[$langcode][0]['safe_value']
    if ($category->field_agres_unitselectionmethod[$langcode_caus][0]['value'] == '2') {
     if(!isset( $_SESSION['availableunittypes'])||!isset($_SESSION['agreservationuserrequest'])){
       drupal_goto();
     }
      
      $availableunittypes = $_SESSION['availableunittypes'];
      $userrequest = $_SESSION['agreservationuserrequest']; //unserialize($suserrequest);//
//      $productarray = array();
//    //////////////////////////////////////////////////////////////////////
      $resnodes = agreservations_get_reservable_items('agreservations_unit', $userrequest['checkintime'],$userrequest['checkintime'], $category->nid);
      $availableunittypes = _agreservations_get_reservable_unittypes($resnodes, FALSE);
/////////////////////////////////////////////////////////////////////////////
      $productarray=array();
      foreach ($availableunittypes as $availableunittype) {
        $productarray[] = $availableunittype['rtnode']->nid;
      }
      $_SESSION['agres_bookings_productsavailable'] = $productarray;
      $bookableproducts = '';
      $bookableproducts .= '<a class="Button" href="' . base_path() . '"><span class="btn">' . '&nbsp&nbsp' . t('back') . '&nbsp&nbsp' . '</span></a><br>';
      $items = uc_cart_get_contents(uc_cart_get_id());
      if (count($items) == 0) {
        $bookableproducts .= '<div><b>' . t('Booking From %checkin to %checkout', array('%checkin' => $userrequest['checkintime'], '%checkout' => $userrequest['checkouttime'])) . '</b></div>';
      }
      else {
        $cartinfoform = drupal_get_form('agres_bookings_cart_info_form');
        $bookableproducts .= drupal_render($cartinfoform);
        
        $cartviewform =drupal_get_form('uc_cart_view_form', $items);// drupal_get_form('agres_bookings_cart_view_form', $items);
        $bookableproducts .='<div id="ajxagrcartview">';
        $bookableproducts .= drupal_render($cartviewform);
        $bookableproducts .='</div>';   
        $bookableproducts .= '<div><h3>' . t('Choose items:') . '</h3></div>';
      }
      $build = array();
      if ($agrproductresult = views_get_view('agres_uc_catalog')) {
        // Force the breadcrumb path to this page.
        $agrproductresult->override_path = 'catalog';

        $build['products'] = array(
          '#markup' => $agrproductresult->execute_display('agres_uc_catalog'),
        );
      }
      $bookableproducts .= drupal_render($build['products']);
      $bookableproducts .= '<br><a class="Button" href="' . base_path() . '"><span class="btn">' . '&nbsp&nbsp' . t('back') . '&nbsp&nbsp' . '</span></a>';
      return $bookableproducts;
    }
    else {

      return drupal_get_form('_agres_categories_form_standard', $category);
    }
  } else {
    return array();
  }
}

//
function agres_categories_dv($setValue, $default = '') {
  return ($setValue === NULL) ? $default : $setValue;
}
//
///*
// * agres_categories_form
// * formbuilder function, no need to use hook_forms for this,
// * because only 1 at a time will be active of this form for each
// * categoy that exists on the drupalinstallaltion.
// */
//
function _agres_categories_form_standard($object, $form_state) {
  $form = array();
  if (isset($form_state['build_info']['args'][0])) {
    $category = $form_state['build_info']['args'][0];
  }
  else {
    drupal_set_message(t('no Category Object found!'));
    $form['err'] = array(
      '#type' => 'item',
      '#markup' => '<div><b>' . t('no Category Object found!') . '</b></div>',
    );
    return $form;
  }

         $langcode = 'und';
        $langcode = field_language('node', $category,'field_agres_titleresform'); 
        

  $breadcrumb = array();
  $breadcrumb[] = l('Home', '<front>');
  $breadcrumb[] = l( $category->field_agres_titleresform[$langcode][0]['safe_value'], 'agreservationformcat/' . $category->nid . '/' .  $category->field_agres_titleresform[$langcode][0]['safe_value']);
  // 

  if (isset($category)) {

    if (empty($form_state['build_info']['step'])) {
      // we are coming in without a step, so default to step 1
      $form_state['build_info']['step'] = 1;
    }
    $availableunittypes = $_SESSION['availableunittypes'];
    $userrequest = $_SESSION['agreservationuserrequest']; //unserialize($suserrequest);


    //
    $locoptions = array();
    foreach ($availableunittypes as $availableunittype) {
         $langcode_au = 'und';
        $langcode_au = field_language('node', $availableunittype['rtnode'],'field_agreservations_capacity');       
      if (!isset($availableunittype['rtnode']->field_agreservations_capacity[$langcode_au])) {
        $langcode_au = 'und';
      }

      $locoptions[$availableunittype['rtnode']->nid] = $availableunittype['rtnode']->title . ' ' . t('Capacity: ')
                 . $availableunittype['rtnode']->field_agreservations_capacity[$langcode_au][0]['value'];// . ' ' . t('Price: ') . uc_store_format_price_field_value($availableunittype['rtnode']->sell_price);
    }

//    //on Every Step: ,
    $form['timeinfo'] = array(
      '#type' => 'item',
      //    '#title' => t('From'),
      '#markup' => '<div><b>' . t('From %checkin to %checkout', array('%checkin' => $userrequest['checkintime'], '%checkout' => $userrequest['checkouttime'])) . '</b></div>',
    );
         $langcode_cn = 'und';
        $langcode_cn = field_language('node', $category,'field_agres_catname');    
         $langcode_ap = 'und';
        $langcode_ap = field_language('node', $category,'field_agres_askpersons');          
    switch ($form_state['build_info']['step']) {
      /*          * ******************************************************************** */
      /*          * ********************STEP 1.:**************************************** */
      case 1:
        $form['unitinfo'] = array(
          '#type' => 'fieldset',
          '#title' => $category->field_agres_catname[$langcode_cn][0]['value'] . ' ' . t('Informations:'),
          '#collapsible' => FALSE,
          '#tree' => TRUE,
        ); //$userrequest['requestedunits']

        for ($i = 1; $i <= $userrequest['requestedunits']; $i++) {
          $form['unitinfo'][$i] = array(
            '#type' => 'fieldset',
            '#title' => $category->field_agres_catname[$langcode_cn][0]['safe_value'] . ' ' . $i,
            '#collapsible' => FALSE,
            '#tree' => TRUE,
          );
          /*              * ************************************************************************************************ */
          $tmpagres_onlineformjelements = variable_get('agres_onlineformjelements', 'standard');
          $form_state['build_info']['values']=array();
          if (($category->field_agres_askpersons[$langcode_ap][0]['value'] == 1) || ($category->field_agres_askpersons[$langcode_ap][0]['value'] == 3)) {
            $form['unitinfo'][$i]['adults'] = array(
              '#prefix' => '<div>',
              '#type' => 'select',
              '#title' => t('Persons'),
              '#default_value' =>1,//agres_categories_dv($form_state['build_info']['values'][1]['unitinfo'][$i]['adults']),
              '#options' => array(
                1 => 1,
                2 => 2,
                3 => 3,
                4 => 4,
                5 => 5,
                6 => 6,
                7 => 7,
                8 => 8,
                9 => 9,
                10 => 10,
              ),
              '#suffix' => '</div>',
            );
          }
          /*              * *********************************************************************************************** */
          $selectedunitnid = key($locoptions); //agres_onlineformj_dv($form_state['storage']['values'][1]['unitinfo'][$i]['selectunittype']);

          $selectedunitnode = node_load($selectedunitnid, NULL, TRUE);
          $form['unitinfo'][$i]['selectunittype'] = array(
            '#type' => 'select',
            '#title' => t('Type of') . ' ' . $category->field_agres_catname[$langcode_cn][0]['safe_value'],
            //            '#default_value' => agres_categories_dv($form_state['build_info']['values'][1]['unitinfo'][$i]['selectunittype']), //variable_get('feed_item_length','teaser'),
            '#options' => $locoptions,
            '#description' => t('select the') . ' ' . $category->field_agres_catname[$langcode_cn][0]['safe_value'] . ' ' . t('type'),
            '#suffix' => '<div id="wrapper-' . $i . '"> </div>',
            '#ahah' => array(
              'event' => 'change',
              'path' => 'agres-categoriesformj-callback/' . $i,
              'wrapper' => 'wrapper-' . $i,
              'method' => 'replace',
            ),
          );
        }
        break;
      case 6:
        /*            * ********************************************************************************* */
        /*            * *********************************STEP 2.:**************************************** */
        $form['field2'] = array(
          '#type' => 'textfield',
          '#default_value' => agres_categories_dv($form_state['storage']['values'][2]['field2']),
          '#title' => t('Test Field 2'),
        );
        break;
      case 2:
        /*            * ******************************************************************** */
        /*            * ********************STEP 3.:Final Page Show summary***************** */
        $contentformsummary = '';
        foreach ($form_state['storage']['values'] as $fstep) {
          if (array_key_exists('unitinfo', $fstep)) {
            $iz = 0;

            foreach ($fstep['unitinfo'] as $rinfo) {
              $iz++;
              $contentformsummary =
                         $contentformsummary . t($iz . '.unit: ' . $locoptions[$rinfo['selectunittype']]) .
                         ', Persons: ' . $rinfo['adults'] . '<br>';
            }
          }
        }

        $form['contact_information'] = array(
          '#value' => '<b>' . t('Please check the data you provided before continuing: ') . '</b><br>' . $contentformsummary,
        );

        break;
      default:

        break;
    }

    //don't show back button on first tab
    

    if ($form_state['build_info']['step'] > 1) {
      $form['previous'] = array(
        '#type' => 'submit',
        '#value' => '<< Previous',
      );
    }

    $form['cancel'] = array(
      '#type' => 'submit',
      '#value' => 'cancel',
    );

    if ($form_state['build_info']['step'] < 2) {
      $form['next'] = array(
        '#type' => 'submit',
        '#value' => 'next',
      );
    }
    else {
      $form['tocheckout'] = array(
        '#type' => 'submit',
        '#value' => 'continue with booking',
      );
    }
  }
  else {
    $form['Error'] = array(
      '#type' => 'markup',
      '#value' => '<div>' . t('Error, no category set!') . '</div>',
      '#collapsible' => FALSE,
    );
  }
  return $form;
}
//
function _agres_categories_form_standard_validate($form, &$form_state) {
  $userrequest = $_SESSION['agreservationuserrequest'];
  //Only validate if not previous or cancel-button was clicked.
  if (isset($form_state['build_info']['args'][0])) {
    $category = $form_state['build_info']['args'][0];
  }
  if (($form_state['values']['op'] !== '<< Previous') && ($form_state['values']['op'] !== 'cancel')) {
    foreach ($form_state['values']['unitinfo'] as $unitinfo) {
      if ($unitinfo['selectunittype'] === '') {
        form_set_error('unitinfo[' . $key . ']', t('error while selecting, please try again.'));
      }
    }
    $resnodes = agreservations_get_reservable_items('agreservations_unit', $userrequest['checkintime'], $userrequest['checkouttime'], $category->nid);
    $availableunittypes = _agreservations_get_reservable_unittypes($resnodes, FALSE);
    $tmpcountselectedtypes = array();
    foreach ($form_state['values']['unitinfo'] as $key => $unitinfo) {
      if (isset($unitinfo['adults'])) {
        $lang = 'und';
        $lang = field_language('node', $availableunittypes[$unitinfo['selectunittype']]['rtnode'],'field_agreservations_capacity'); 
        if (intval($unitinfo['adults']) > intval($availableunittypes[$unitinfo['selectunittype']]['rtnode']->field_agreservations_capacity[$lang][0]['value'])) {
          form_set_error('unitinfo[' . $key . '][adults]', t('Too many persons for roomtype in room entry: ' . $key));
        }
      }
      if (array_key_exists($unitinfo['selectunittype'], $tmpcountselectedtypes)) {
        $tmpcountselectedtypes[$unitinfo['selectunittype']]['numberofselections'] += 1;
      } else {
        $tmpcountselectedtypes[$unitinfo['selectunittype']]['numberofselections'] = 1;
      }
    }

    foreach ($availableunittypes as $availableunittype) {

      if (array_key_exists($availableunittype['rtnode']->nid, $tmpcountselectedtypes)) {

        if ($tmpcountselectedtypes[$availableunittype['rtnode']->nid]['numberofselections'] > $availableunittype['count']) {

          form_set_error('unitinfo', t('Not enough free unit types of ' . $availableunittype['rtnode']->title));
        }
      }
    }
  }
}

function _agres_categories_form_standard_submit($form, $form_state) {
//       drupal_set_message('<pre>dfdfg'.print_r($form_state,true).'</pre>');
  if (isset($form_state['build_info']['args'][0])) {
    $category = $form_state['build_info']['args'][0];
  }
  else {
    drupal_set_message(t('no Category Object found!'));
    return;
  }
  $langcode ='und';
  $language = field_language('node', $category,'field_agres_titleresform');
  
//  $langcode = i18n_langcode();
//  if (!isset($category->field_agres_titleresform[$langcode])) {
//    $langcode = language_default('language');
//    if (!isset($category->field_agres_titleresform[$langcode])) {
//      $langcode = 'und';
//    }    
//  }

  $form_state['build_info']['values'][$form_state['build_info']['step']] = $form_state['values'];
  $form_state['rebuild'] = TRUE;
  if ($form_state['clicked_button']['#id'] == 'edit-cancel') {
    $form_state['rebuild'] = TRUE;
    unset($_SESSION['agreservationuserrequest']);
    unset($form_state['build_info']['values']);
    _agres_categories_formsubmitter();
  }
  elseif ($form_state['clicked_button']['#id'] == 'edit-previous') {
    $form_state['build_info']['step']--;
  }
  elseif ($form_state['clicked_button']['#id'] == 'edit-next') {
    $form_state['build_info']['step']++;
    /*        * ***********Here starts UBERCART************************* */
    $userrequest = $_SESSION['agreservationuserrequest'];
    $agreservations_request = array(
      $form_state['build_info']['values'][1]['unitinfo'],
      array(
        $userrequest['checkintime'],
        $userrequest['checkouttime'],
      ),
    );
//    drupal_set_message('<pre>dfdfg'.print_r($category,true).'</pre>');
    _agres_bookings_reserve_and_fillcart(null,null,$userrequest,$category->nid,0,$form_state['build_info']['values'][1]['unitinfo'],'cart',$form_state);

  }
}

function _agres_categories_formsubmitter($destination = '') {
  drupal_goto($destination);
}

///**
// * Implementation of hook_cart_display().
// ...move this to agres_bookings??
// */
function agres_categories_uc_cart_display($item) {
//drupal_set_message('<pre>agres_categories_uc_cart_display'.print_r($item,true).'</pre>');

  $node = node_load($item->nid);

  $element = array();
  $element['nid'] = array('#type' => 'value', '#value' => $node->nid);
  $element['module'] = array('#type' => 'value', '#value' => 'uc_product');
//  $element['remove'] = array('#type' => 'submit', '#value' => t('Remove'));

///////////////////////////////////////////agreservations/////////////////////////////
  $tmeasuringunit =  $item->data['measuringunit'];
  $itemtitle='';
  $itemtitle = node_access('view', $node) ? l($item->title, 'node/' . $node->nid) : check_plain($item->title);  
  $title = $item->qty / $item->data['times']; //$item->data['agres_diffproducts'];
  $title .= ' X '.$itemtitle;
  $loptions = array(
    'attributes' => array(),
    'html' => TRUE,
  );

//  drupal_set_message('<pre>agres_categories_uc_cart_display '.print_r($item,true).'</pre>');
  if (isset($item->data['agres_singletimes'])) {
//    drupal_set_message('<pre>agres_singletimes'.print_r($item->data['agres_singletimes'],true).'</pre>');
    if (count($item->data['agres_singletimes']) > 1) {
//           drupal_set_message('<pre>agres_singletimes'.print_r($item->data['agres_singletimes'],true).'</pre>');
      if (strpos($title, $item->data['agres_singletimes'][0] . '<br>' . t('Until:') . end($item->data['agres_singletimes']) . ' (' . t('included') . ')' . ' = ' . $tmeasuringunit . ' count: ' . count($item->data['agres_singletimes']), 0) == false) {
        $title .= '<br>' . t('From:') . $item->data['agres_singletimes'][0] . '<br>' . t('Until:') . end($item->data['agres_singletimes']) . ' (' . t('included') . ')' . ' = ' . $tmeasuringunit . ' count: ' . count($item->data['agres_singletimes']);
      }
    }
    else {
      // if (strpos($title, $item->data['agres_singletimes'][0].', '.end($item->data['agres_singletimes']).' = '.$tmeasuringunit.' count: '.count($item->data['agres_singletimes']),0)==false){
      if (strpos($title, $item->data['agres_singletimes'][0], 0) == false) {
        $title .=  '<br>' . $item->data['agres_singletimes'][0];
      }
    }
  }
  else {
    $title .= ( $item->data['times'] > 1) ? '' . ' ' . $item->data['times'] . ' <-> ' . $tmeasuringunit . ' count' : ' ' . $item->data['times'] . $tmeasuringunit . ' countss';
  }
//////////////////////////////////////////////////////////////////////////////////////
  
  
  $element['title'] = array(
    '#markup' => $title,
  );
  $item_price = $item->price * 1;
//  
  if(module_exists('uc_taxes')) {
    
  
  list($amount, $suffixes) = uc_taxes_get_included_tax($item);
//  drupal_set_message('<pre>agres_singletimes'.print_r($suffixes,true).'</pre>');
  $item_price += $amount;
  }
      $element['unit_price'] = array(
    '#markup' =>theme('uc_price', array('price' => $item_price)),        
  );
  $element['#total'] = $item->price * $item->qty;
//  $element['unit_price'] = $item->price;
  $element['#suffixes'] = array();
  $element['data'] = array('#type' => 'hidden', '#value' => serialize($item->data));
  $element['qty'] = array(
    '#type' => 'uc_quantity',
    '#title' => t('Quantity'),
    '#title_display' => 'invisible',
    '#default_value' => $item->qty,
    '#allow_zero' => TRUE,
  );

  $element['description'] = array('#markup' => '');
  if ($description = uc_product_get_description($item)) {
    $element['description']['#markup'] = $description;
  }

  return $element;  
}
//
//
// search form for entering searchcriteria for bookable units:
// search form for entering searchcriteria for bookable units:
function agres_categories_searchwidget_form($form_state, $args) {
//  drupal_set_message('<pre>agres_categories_form'.print_r($userrequest,true).'</pre>');
  $cat = $args['build_info']['args'][0];
  
        $lang = 'und';
        $lang = field_language('node', $cat,'field_agres_datelabel1');   
//  if (!isset($cat->field_agres_showtime[$langcode]) || !isset($cat->field_agres_datelabel1[$langcode])) {
//    $language_default = language_default();
//    $langcode = $language_default->language;
//      if (!isset($cat->field_agres_showtime[$langcode])) {
//        $langcode = 'und';
//      }    
//  }

//  $datform = date_default_format('date_popup');
  $datform = 'Y-m-d H:i';
  $datform = str_replace('H:i','', $datform);
  $datform = str_replace('H:i:s','', $datform);


//$datform .= ' H:i';
//  drupal_set_message('<pre>ffff  '.print_r($cat->field_agres_unitslabel,true).'</pre>');
//    &&isset($cat->field_agres_showtime[$langcode])
  $form['unitsearch']['checkin'] = array(
//    '#prefix' => '<div>',
    '#type' => 'date_popup',
//    '#theme' => 'table',
    '#title' => $cat->field_agres_datelabel1[$lang][0]['safe_value'],
    '#required' => TRUE,
    '#size' => 13,
    '#date_type' => 'datetime',
    '#date_timezone' => date_default_timezone(), //Y-m-d H:i
    '#date_format' => $datform,
    '#default_value' =>'',
    '#date_year_range' => '-0:+1',
//    '#suffix' => '</div>',
    '#weight' =>100,
  );
  $timeoptions = _agres_categories_create_options_servicehours(0,$cat);
        $lang = 'und';
        $lang = field_language('node', $cat,'field_agres_showtime');
  if ($cat->field_agres_showtime[$lang][0]['value'] > 0) {
    //
        $form['unitsearch']['checkin']['checkintime'] = array(
//      '#prefix' => '<div>',
      '#type' => 'select',
      '#title' =>'time', //$category->title . ' ' . t('count'), //t('Units'),
         
      '#default_value' =>  reset($timeoptions),
      '#options' => $timeoptions,
//      '#suffix' => '</div>',
      '#weight' =>150,
    );
//    $datform .= ' H:i';
  }  
        $lang = 'und';
        $lang = field_language('node', $cat,'field_agres_datelabel2');
  if (isset($cat->field_agres_datelabel2[$lang][0]['safe_value'])) {
    $form['unitsearch']['checkout'] = array(
//      '#prefix' => '<div>',
      '#type' => 'date_popup',
      '#title' => $cat->field_agres_datelabel2[$lang][0]['safe_value'],
      //      '#default_value' =>
      '#required' => TRUE,
      '#size' => 13,
      '#date_type' => 'datetime',
      '#date_timezone' => date_default_timezone(),
      '#date_format' => $datform,
      '#default_value' =>'',
      '#date_year_range' => '-0:+1',
//      '#suffix' => '</div>',
      '#weight' =>200,
    );
  }
  $timeoptions1 = _agres_categories_create_options_servicehours(0,$cat);
        $lang = 'und';
        $lang = field_language('node', $cat,'field_agres_showtime');  
  if ($cat->field_agres_showtime[$lang][0]['value'] > 0) {
    //
        $form['unitsearch']['checkout']['checkouttime'] = array(
//      '#prefix' => '<div>',
      '#type' => 'select',
      '#title' =>'time', //$category->title . ' ' . t('count'), //t('Units'),
      '#default_value' => reset($timeoptions1),
      '#options' => $timeoptions1,
//      '#suffix' => '</div>',
      '#weight' =>250,
    );
    $datform .= ' H:i';
  }  
        $langnu = 'und';
        $langnu = field_language('node', $cat,'field_agres_shownumberunits');    
  if ($cat->field_agres_shownumberunits[$lang][0]['value'] == 1) {
        $lang = 'und';
        $lang = field_language('node', $cat,'field_agres_unitslabel');     
    if (isset($cat->field_agres_unitslabel[$lang])) {
      $title = $cat->field_agres_unitslabel[$lang][0]['safe_value'];
    } else {
      $title = t('units');
    }
        $lang = 'und';
        $lang = field_language('node', $cat,'field_agres_shownumberunits');   
    $form['unitsearch']['units'] = array(
//      '#prefix' => '<div>',
      '#type' => 'select',
      '#title' => $title, //$category->title . ' ' . t('count'), //t('Units'),
      '#default_value' => $cat->field_agres_numberunits[$lang][0]['value'],
      '#options' => array(
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
      ),
//      '#suffix' => '</div>',
      '#weight' =>300,
    );
  }

  $form['unitsearch']['submit'] = array(
//    '#prefix' => '<div>',
    '#type' => 'submit',
    '#title' => 'Search',
    '#value' => 'Book',
    // '#submit' => array('agres_categories_searchwidget_form_submit'),
//    '#suffix' => '</div>',
    '#weight' =>500,
  );

  return $form;
}//
///**
// * Implementation of hook validate():
// */
function agres_categories_searchwidget_form_validate($form, &$form_state) {
    if (module_exists('uc_cart')) {
//      drupal_set_message('<pre>'.print_r());
        $items = uc_cart_get_contents(uc_cart_get_id());
        // Now delete the reservations. In case where not allowed to delete,
        // follow the suggestion posted here:http://drupal.org/node/218104
        foreach ($items as $productunit) {
          if (isset($productunit->data['agreservations_resid'])) {
            if (intval($productunit->data['agreservations_resid']) > 0) {
              global $user;
              $original_user = $user;
              drupal_save_session(FALSE);
              $user = user_load(1);
              node_delete(intval($productunit->data['agreservations_resid']));
              // Restore original user
              $user = $original_user;
              drupal_save_session(TRUE);
            }
          }
        }
      uc_cart_empty(uc_cart_get_id());
      if(isset( $_SESSION['availableunittypes'])){
        unset($_SESSION['availableunittypes']);
      }
      if(isset( $_SESSION['agreservationuserrequest'])){
        unset($_SESSION['agreservationuserrequest']);
      }
   

    }

  $datform = 'Y-m-d H:i:s'; //:s
  if (isset($form_state['build_info']['args'][0])) {
    $cat = $form_state['build_info']['args'][0];
        $lang = 'und';
        $lang = field_language('node', $cat,'field_agres_showtime'); 
        $langd = 'und';
        $langd = field_language('node', $cat,'field_agres_datelabel1');          

    
    if (!isset($form_state['values']['units'])) {
      $form_state['values']['units'] = 1;
    }
    $requestedunits = $form_state['values']['units'];
    if (!isset($form_state['input']['checkin']['date'])) {
      form_set_error('unitinfo', t('First Date has to be entered.'));
      return;
    }
    if (!isset($form_state['input']['checkin']['checkintime'])&&($cat->field_agres_showtime[$lang][0]['value'] == 1)) {
      form_set_error('unitinfo', t('Time for first Date has to be entered.'));
      return;
    }  
    $form_state['values']['checkin'] = $form_state['input']['checkin']['date'];
    if(isset($form_state['input']['checkin']['checkintime'])) {
      $form_state['values']['checkin'] .=' '.$form_state['input']['checkin']['checkintime'];
    }      
    $tmpDateCheckin = date_create($form_state['values']['checkin']);

    if (!isset($form_state['input']['checkout']['date'])) {
      form_set_error('unitinfo', t('Second Date has to be entered.'));
      return;
    }
    if (!isset($form_state['input']['checkout']['checkouttime'])&&($cat->field_agres_showtime[$lang][0]['value'] == 1)) {
      form_set_error('unitinfo', t('Time for second Date has to be entered.'));
      return;
    }    
    $form_state['values']['checkout'] = $form_state['input']['checkout']['date'];
    if(isset($form_state['input']['checkin']['checkintime'])) {
      $form_state['values']['checkout'] .= ' '.$form_state['input']['checkout']['checkouttime'];
    }
    $tmpDateCheckout = date_create($form_state['values']['checkout']);    
    //days a reservation has to be in the future:
        $langdia = 'und';
        $langdia = field_language('node', $cat,'field_agres_mindaysadvance');     
    if (isset($cat->field_agres_mindaysadvance[$lang])) {
      $mindaysinadvance = $cat->field_agres_mindaysadvance[$lang][0]['value'];
      $tmptodayplus     = date_create();
      date_modify($tmptodayplus,'+'.$mindaysinadvance.' days');
       if (!is_a($tmpDateCheckin, 'DateTime')) {
//         drupal_set_message('<pre> allet nict juut '.print_r($mindaysinadvance,true).'</pre>');
         form_set_error('unitinfo', t('Please enter valid dates only!').$mindaysinadvance.t(' days in advance'));
       } else {
//         drupal_set_message('<pre> allet juut '.print_r($mindaysinadvance,true).'</pre>');
      if ($tmptodayplus->format('Y-m-d') > $tmpDateCheckin->format('Y-m-d')) {
        form_set_error('unitinfo', t('Checkin-time has to be at least ').$mindaysinadvance.t(' days in advance'));
      }         
       }
    }
        $langsnu = 'und';
        $langsnu = field_language('node', $cat,'field_agres_shownumberunits');      
        $langnu = 'und';
        $langnu = field_language('node', $cat,'field_agres_numberunits');            
    if (($cat->field_agres_shownumberunits[$langsnu][0]['value'] !== 1) && (isset($cat->field_agres_numberunits[$langnu][0]['value']))) {
      $form_state['values']['units'] = $cat->field_agres_numberunits[$langnu][0]['value'];
    }

       if (!is_a($tmpDateCheckout, 'DateTime')) {
         form_set_error('unitinfo', t('Please enter valid dates only!').$mindaysinadvance.t(' days in advance'));
       } else {
    //check restrictions if modules is enabled:
    if (module_exists('agres_restriction') && (variable_get('agr_checkglobalrestriction_swidget', 'yes') == 'yes')) {
      $message = agres_timeframe_api('check_restrictions', array(
        'start_date' => $form_state['values']['checkin'],
        'end_date' => $form_state['values']['checkout'],
      ));
    }
            $langdcit = 'und';
        $langdcit = field_language('node', $cat,'field_agres_defaultcheckintime'); 
            $langdcot = 'und';
        $langdcot = field_language('node', $cat,'field_agres_defaultcheckouttime');         
    if (($cat->field_agres_showtime[$lang][0]['value'] <> 1) && (isset($cat->field_agres_defaultcheckintime[$langdcit][0]['value']))) {
      
      date_modify($tmpDateCheckin, $cat->field_agres_defaultcheckintime[$langdcit][0]['value']);      
      $form_state['values']['checkin'] = $tmpDateCheckin->format($datform);
      date_modify($tmpDateCheckout, $cat->field_agres_defaultcheckouttime[$langdcot][0]['value']);
      $form_state['values']['checkout'] = $tmpDateCheckout->format($datform);

    }

    /*         * *******************check servicehours!****************************************************************** */
    
    $checkinisinrange = _agres_categories_check_servicehours($tmpDateCheckin, $cat);
    $checkoutisinrange = _agres_categories_check_servicehours($tmpDateCheckout, $cat);
    if ($checkinisinrange === FALSE) {
      form_set_error('unitinfo', t('Checkin-time has to be within service hours '));
    }
    if ($checkoutisinrange === FALSE) {
      form_set_error('unitinfo', t('Checkout-time has to be within service hours '));
    }

    if ($tmpDateCheckin >= $tmpDateCheckout) {
      form_set_error('unitinfo', t('Checkin has to be before Checkout '));
    }
    if ($tmpDateCheckin <= new DateTime()) {
      form_set_error('unitinfo', t('Checkin is has to be in the future !!! '));
    }
//    $checkintime = date_format($tmpDateCheckin, 'Y-m-d H:i:s');
//    $checkouttime = date_format($tmpDateCheckout, 'Y-m-d H:i:s');

    /* get reservable units: */
    $resnodes = agreservations_get_reservable_items('agreservations_unit', date_format($tmpDateCheckin, 'Y-m-d H:i'), date_format($tmpDateCheckout, 'Y-m-d H:i'), $cat);
     
    $foundunits = count($resnodes);
    if ($requestedunits > 0) {
      if ($requestedunits > $foundunits) {
        form_set_error('unitinfo', t('Not enough free units found.'));
      }
    }
    elseif ($requestedunits == 0) {
             $langsnu = 'und';
        $langsnu = field_language('node', $cat,'field_agres_shownumberunits');
             $langsm = 'und';
        $langsm = field_language('node', $cat,'field_agres_unitselectionmethod');              
      if (!($cat->field_agres_shownumberunits[$langsnu][0]['value'] == 2 && $cat->field_agres_unitselectionmethod[$langsm][0]['value'] == 2) ) {
        form_set_error('unitinfo', t('Number of units has to be > 0'));
      }
    }
//    $tmpagres_onlineformjelements = variable_get('agres_onlineformjelements', 'standard');
       }
  }
  else {
    form_set_error('unitinfo', t('agres_category not set! Please try again'));
  }

}
//

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function agres_categories_block_info() {
  static $cats;
  $blocks = array();
  if (is_null($cats)) {
    $cats = _agres_categories_get_categories(TRUE);
  }

  foreach ($cats as $category) {
    $blocks[$category->nid] = array(
      'info' => t(' category search form for:') . $category->title,
    );
  }
  return $blocks;

}

function agres_categories_block_view($delta = '') {  
  static $cats;
  if (is_null($cats)) {
    $cats = _agres_categories_get_categories(TRUE);
  }
  $block = array();

  ////////////////////////////
  $lang = 'und';
  $lang = field_language('node',$cats[$delta],'field_agres_titleresform');
  if (!isset($cats[$delta]->field_agres_titleresform[$lang])) {
    $lang_default = language_default();    
    $langcode = $lang_default->language;
      if (!isset($cats[$delta]->field_agres_titleresform[$lang])) {
        $langcode = 'und';
      }     
    $block = array(
      'subject' => $cats[$delta]->field_agres_titleresform[$lang][0]['safe_value'], //_agres_categories_callfilter(1, $category->body, $cache_id = FALSE),
      'content' => drupal_get_form('agres_categories_searchwidget_form_' . $delta, $cats[$delta]),
    );
  } else {
    $block = array(
      'subject' => $cats[$delta]->field_agres_titleresform[$lang][0]['safe_value'], //_agres_categories_callfilter(1, $category->body, $cache_id = FALSE),
      'content' => drupal_get_form('agres_categories_searchwidget_form_' . $delta, $cats[$delta]),
    );
  }

  return $block;
  ///////////////////////////////////////
}
////*when anonymous users clicks search on the searchform:*/
//
function agres_categories_searchwidget_form_submit($form, $form_state) {
//    
  if (isset($form_state['build_info']['args'][0])) {
    $cat = $form_state['build_info']['args'][0];
  $lang = 'und';
  $lang = field_language('node',$cat,'field_agres_showtime');


    $preselectedunit = 0;
    if (isset($_SESSION['agres_current_page_nid'])){
      $currently_viewed_producttype = null;
      $currently_viewed_producttype = node_load($_SESSION['agres_current_page_nid']);
      if (_agres_categories_unittype_has_cat($_SESSION['agres_current_page_nid'],$cat->nid)) {
         $preselectedunit = $_SESSION['agres_current_page_nid'];
      }
    }
    if (isset($form_state['build_info']['args'][0])) {
      if (isset($form_state['values']['adults'])) {
        $adults = $form_state['values']['adults'];
      }

      if (isset($form_state['values']['children'])) {
        $children = $form_state['values']['children'];
      }

      if (isset($form_state['values']['units'])) {
        $requestedunits = $form_state['values']['units'];
      }
      if (isset($form_state['values']['checkin'])) {
        $tmpDateCheckin = date_create($form_state['values']['checkin']);
      }

      if (isset($form_state['values']['checkout'])) {
        $tmpDateCheckout = date_create($form_state['values']['checkout']);
      }

      $checkintime = date_format($tmpDateCheckin, 'Y-m-d H:i:s');
      $checkouttime = date_format($tmpDateCheckout, 'Y-m-d H:i:s');
      
//    /* get reservable units: */
      if (isset($form_state['build_info']['args'][0])) {
        $categorynid = $form_state['build_info']['args'][0]->nid;
        $resnodes = agreservations_get_reservable_items('agreservations_unit', date_format($tmpDateCheckin, 'Y-m-d H:i:s'), date_format($tmpDateCheckout, 'Y-m-d H:i:s'), $categorynid);
      }
      else {
//        $resnodes = agreservations_get_reservable_items('agreservations_unit', date_format($tmpDateCheckin, 'Y-m-d H:i:s'), date_format($tmpDateCheckout, 'Y-m-d H:i:s'));
      }
      $availableunittypes = _agreservations_get_reservable_unittypes($resnodes, FALSE);

       
//    //Filter types:
      $_SESSION['availableunittypes'] = $availableunittypes;
     
      $userrequest['checkintime'] = $checkintime;
      $userrequest['checkouttime'] = $checkouttime;
      if (isset($adults)) {
        $userrequest['adults'] = $adults;
      }
      if (isset($children)) {
        $userrequest['children'] = $children;
      }

      if (isset($requestedunits)) {
        $userrequest['requestedunits'] = $requestedunits;
      }
      else {
        $userrequest['requestedunits'] = 1;
        $requestedunits = 1;
      }
      $datstr =  date_format($tmpDateCheckin, 'YmdHis') . date_format($tmpDateCheckout, 'YmdHis') . $requestedunits;
      $cat = $form_state['build_info']['args'][0];
      $form_state['rebuild'] = true;
      unset($form_state['values']);
      
      $availableunittypenids = array_keys($availableunittypes);
      if ( in_array($preselectedunit,$availableunittypenids)) {
         $userrequest['preselectedunit'] = $preselectedunit;
          $_SESSION['agreservationuserrequest'] = $userrequest;
          $_SESSION['agreservationcategory'] = $cat->nid;
          _agres_bookings_reserve_and_fillcart(null,null,$userrequest,$cat->nid,$preselectedunit,array(),'cart',$form_state);

      }else {
        agres_categories_search_result($userrequest, $cat, $datstr);
      }      
     
      

    }
    else {
      $content = '<div>' . t('Category not set') . '</div>';
      $content = $content . '<br><a href="' . base_path() . '">' . t('back') . '<a>';
      print theme('page', $content);
    }
  }
  else {
    drupal_set_message('Category not set!');
  }
}


function agres_categories_search_result($userrequest, $category, $datstr) {
  
//    $_SESSION['availableunittypes'] = $availableunittypes;
  if(is_numeric($category)) {
    $category = node_load($category);
  }
  
  if (isset($category)) {
    $categorynid = $category->nid;
    $langcode = i18n_langcode();
    if (!isset($category->field_agres_titleresform[$langcode])) {      
      $langcode =language_default('language');
      if (!isset($category->field_agres_titleresform[$langcode])){
        $langcode = 'und';
      }        
    }
    $langcode_cat = 'und';
    $langcode_cat =field_language('node',$category,'field_agres_titleresform');
    unset($_SESSION['agreservationuserrequest']);
    $_SESSION['agreservationuserrequest'] = $userrequest;
    $_SESSION['agreservationcategory'] = $categorynid;

    drupal_goto('agreservationformcat/' . $category->nid . '/' . $category->field_agres_titleresform[$langcode_cat][0]['safe_value'] . '/' . $datstr);
  }
  else {
    drupal_goto("agreservationformcaterror/" . t('error'));
  }
}

function agres_categories_forms($form_id, $args) {
  //Check if the form_id passed to drupal_get_form() contains the string 'mymodule_form'

  if (strpos($form_id, 'agres_categories_searchwidget_form') !== FALSE) {
    //Lets attach mymodule_form to $forms[$form_id].  This effectively allows you to use the same form builder function to build a form with any form_id of your choice.

    $forms[$form_id] = array(
      'callback' => 'agres_categories_searchwidget_form',
    );

    return $forms;
  }
}



//
/**
 * Implementation of hook_form_alter().
 *
 */
function agres_categories_form_alter(&$form, $form_state, $form_id) {

}
//
/* _agres_categories_check_servicehours: returns BOOLEAN.
 *
 * @author     Andreas Gill
 * @param      $timetocheck time to check as datetimeobjects.
 * @param      $cat -the category with the servicehours defined.
 * @return     TRUE if in or FALSE if not within servicehours of category
 */
function _agres_categories_check_servicehours($timetocheck, $cat) {
  $langcode = i18n_langcode();
  if (!isset($cat->field_agres_servicehours[$langcode])) {
    $language_default = language_default('language');
    $langcode = $language_default;
     if (!isset($cat->field_agres_servicehours[$langcode])){
       $langcode = 'und';
     }
  }
  $langcode = field_language('node',$cat,'field_agres_servicehours');
  $datform = 'Y-m-d H:i';
  $strtimetocheck = $timetocheck->format($datform);
  $checkwday = date('N', strtotime($strtimetocheck)); //strtotime($date));

  $checktime = date('H:i', strtotime($strtimetocheck));
  $checktimeinrange = FALSE;
  //check date:

  foreach ($cat->field_agres_servicehours[$langcode] as $wday => $shours) {
    if ($wday == ($checkwday - 1)) {
      $hoursofday = explode(",", $shours['value']);
      foreach ($hoursofday as $timerange) {
        if ($timerange == 'x') {
          return FALSE;
        }
        else {
          $startend = explode("-", $timerange);
          $checktimeinrange = _is_time_in_range($strtimetocheck, $startend[0], $startend[1]);
          if ($checktimeinrange) {
            break;
          }
        }
      }
    }
  }

  return $checktimeinrange;
}

function agres_categories_node_validate($node, $form) {
  if ($node->type == 'agres_category') {
    $langcode = i18n_langcode();
    if (!isset($node->field_agres_servicehours[$langcode])) {
      
      $langcode = language_default('language');
      if (!isset($node->field_agres_servicehours[$langcode])) {
        $langcode = 'und';
      }
    }
    $langcode = field_language('node',$node,'field_agres_servicehours');
//     drupal_set_message('<pre>agres_categories_node_validate'.print_r($node,true).'</pre>');
    foreach ($node->field_agres_servicehours[$langcode] as $daynum => $servicetimes) {
      $times = array();
      $times = explode(',', $servicetimes['value']);
      if (count($times) > 0) {
        foreach ($times as $tkey => $time) {
          if (!preg_match("/^[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}$/", $time)) {
            if ($time !== 'x') {
              form_set_error('field_agres_servicehours', t('One of the servicehour entries does not match pattern hh:mm-hh:mm'));
            }
          }
          else {
            $fromtotimes = array();
            $fromtotimes = explode('-', $time);
            if (count($fromtotimes) > 0) {
              foreach ($fromtotimes as $fromto_key => $fromtotime) {
                $hoursminutes = array();
                $hoursminutes = explode(':', $fromtotime);
                if (count($hoursminutes) == 2) {
                  if ($hoursminutes[0] > 23) {
                    form_set_error('field_agres_servicehours', t('One of the sericehourentries has a problem: hours value of more than 23'));
                  }
                  elseif ($hoursminutes[0] < 0) {
                    form_set_error('field_agres_servicehours', t('One of the sericehourentries has a problem: negative value is not allowed'));
                  }
                  if ($hoursminutes[1] > 59) {
                    form_set_error('field_agres_servicehours', t('One of the sericehourentries has a problem: minutes value of more than 59'));
                  }
                  elseif ($hoursminutes[1] < 0) {
                    form_set_error('field_agres_servicehours', t('One of the sericehourentries has a problem: negative value is not allowed'));
                  }
                }
              }
              if (strtotime($fromtotimes[0]) > strtotime($fromtotimes[1])) {
                form_set_error('field_agres_servicehours', t('One of the servicehour entries has a bigger from time than To time.'));
              }
            }
          }
        }
      }
      elseif (count($times) == 0) {

      }
      else {
        form_set_error('field-agres-servicehours', t('no valid time format!'));
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function agres_categories_node_view($node, $view_mode, $langcode) {

  if ($node->type == 'agreservation') {
    $lang = 'und';
    $lang = field_language('node', $node, 'field_agres_rdate');
    $tmpdatewarg = new DateTime($node->field_agres_rdate[$lang][0]['value']);
//        date_modify($tmpdatewarg, '+1 week'); //+1week due to missbehavior of date modules,when fixed:remove this line.
    ////
    ////

    $weekarg = date_format($tmpdatewarg, "Y-\WW");
    $node->content['bookingcalendarlink'] = array(
      '#prefix' => '<div>',
      '#markup' => l('Booking Calendar', 'agres_view/week/' . $weekarg),
      '#suffix' => '</div>',
      '#weight' => -1,
    );
  }
  if ($node->type == 'agres_category') {
    $langcode = i18n_langcode();
    //get category of this unit type:
    $output1 = '';
     if (user_access('access agres_bookings')) {
    if (module_exists('agres_availability')) {
      $agres_availabilitycal = null;
      $outputavail = '';
      $agres_availabilitycal = views_get_view('agres_availability');
      $outputavail = $agres_availabilitycal->preview('block_1', array('agrcategory_nid' => $node->nid));
      $node->content['agrunittypeavailability'] = array(
        '#prefix' => '<div margin-top:0px;float:left;">',
        '#markup' => $outputavail,
        '#suffix' => '</div>',
        '#weight' => 33,
      );
    }
      $agres_categories_availsettings_form = drupal_get_form('agres_categories_availsettings_form', $node->nid);
      $output1 .= drupal_render($agres_categories_availsettings_form);
      $node->content['agrcatavailsetform'] = array(
        '#prefix' => '<div style="display:inline;margin-top:0px;float:left;">',
        '#title' => 'Set availability',
        '#markup' => $output1,
        '#suffix' => '</div>',
        '#weight' => 34,
      );
     }
  }
}

function agres_categories_availsettings_form($form_state, $args) {
  $catnid = $args['build_info']['args'][0];
//  $unittypenid = $args['build_info']['args'][1];
//  drupal_set_message('<pre>ffff'.print_r($args,true).'</pre>');
  $cat = node_load($catnid);

  $datform_default = date_default_format('date_popup');
  $datform = str_replace(':s', '', $datform_default);
//  $tmpdate = date($datform);
  $form = array();

  $form['availsettings'] = array(
     '#prefix' => '<div style="width:auto;clear:both;display:inline-block;vertical-align:top;">',
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#suffix' => '</div>',
    '#title' => t('Set availability for whole category'),
    '#description' => 'reservations with order ids have priority and won´t get touched using this tool.',
  );
  $form['availsettings']['checkin'] = array(
    '#prefix' => '<div style="width:auto;display:inline-block;vertical-align:top;">',
    '#type' => 'date_popup',
    '#tree' => TRUE,
    '#title' => t('From'),
    '#required' => TRUE,
    '#date_label_position' => 'within',
    '#size' => 10,
    '#default_value' => date($datform),
    '#description' => t(''),
    '#date_type' => 'datetime',
    '#date_timezone' => date_default_timezone(), //Y-m-d H:i
    '#date_format' => $datform,
    '#date_year_range' => '-0:+1',
    '#suffix' => '</div>',
  );
    $form['availsettings']['checkout'] = array(
      '#prefix' =>'<div style="width:auto;display:inline-block;vertical-align:top;">',
      '#type' => 'date_popup',
      '#tree' => TRUE,
      '#title' => t('To'),
      //      '#default_value' =>
      '#required' => TRUE,
      '#date_label_position' => 'within',
      '#size' => 10,
      '#default_value' => date($datform),
      '#date_type' => 'datetime',
      '#date_timezone' => date_default_timezone(),
      '#date_format' => $datform,
      '#date_year_range' => '-0:+1',
      '#suffix' => '</div>',
    );

  $form['availsettings']['datform'] = array('#type' => 'value', '#value' => $datform);
  $form['availsettings']['btn']['submit'] = array(

    '#prefix' => '<div style="clear:both; position:relative;top:0px;margin-top:-40px;width:auto;float:right;vertical-align:top;">',
    '#weight'=>900,
    '#tree' => TRUE,
    '#type' => 'submit',
    '#title' => 'block',
    '#value' => 'block',
    '#submit' => array('agres_categories_availsettings_form_submit1'),
    '#validate'=> array('agres_categories_availsettings_form_validate1'),
    '#suffix' => '</div>',
  );
    $form['availsettings']['btn']['submit2'] = array(
    '#prefix' =>'<div style="clear:both; position:relative;top:0px;margin-top:-5px;width:auto;float:right;vertical-align:bottom;">',
    '#tree' => TRUE,
    '#weight'=>999,
    '#type' => 'submit',
    '#title' => 'unblock',
    '#value' => 'unblock',
    '#submit' => array('agres_categories_availsettings_form_submit2'),
    '#validate'=> array('agres_categories_availsettings_form_validate2'),
    '#suffix' => '</div>',
  );

  return $form;
}

function agres_categories_availsettings_form_submit2($form, $form_state) {
//  drupal_set_message('<pre>blockblockblock' . print_r($form_state['values'], TRUE) . '</pre>');
    if ($form_state['values']['op'] == 'unblock') {
//1. Which Resources to unblock?...first all:
       if (isset($form_state['build_info']['args'][0])) {
         $units_to_unblock  = array();
         $categorynid = $form_state['build_info']['args'][0];
         $conflictnids = array();
         $dateTimezone1 = new DateTimeZone(date_default_timezone());
         
         $entblock_begindateobj = new DateTime($form_state['values']['availsettings']['checkin'], $dateTimezone1);   
         $offset = $entblock_begindateobj->getOffset();
         $offset = $offset * -1;
         $entblock_begindateobj->modify($offset . 'seconds');
         $entblock_org_begindateobj = date_create($form_state['values']['availsettings']['checkin']);
         
         $entblock_enddateobj = new DateTime($form_state['values']['availsettings']['checkout'], $dateTimezone1); 
         $offset = $entblock_enddateobj->getOffset();
         $offset = $offset * -1;   
         $entblock_enddateobj->modify($offset . 'seconds');
         $entblock_org_enddateobj = date_create($form_state['values']['availsettings']['checkout']);
         
         $entblockbegin = $entblock_org_begindateobj->format('Y-m-d H:i');
         $entblockende  = $entblock_org_enddateobj->format('Y-m-d H:i');
         $entblockbeginm = $entblock_begindateobj->format('Y-m-d H:i');
         $entblockendem  = $entblock_enddateobj->format('Y-m-d H:i');         
         $conflictnids = _agres_rconflict_get_overlaps(date_create($form_state['values']['availsettings']['checkin']), date_create($form_state['values']['availsettings']['checkout']));
         foreach($conflictnids as $kconflict=> $conflictnid) {
           $conflictres = node_load($conflictnid); 
//2. u. 3.: For each blockreservation:  
       $lang = 'und';
       $lang = field_language('node', $conflictres,'field_agres_status');
//           drupal_set_message('<pre>resssss' . print_r($conflictres, TRUE) . '</pre>');
           if(isset($conflictres->field_agres_status[$lang])&&$conflictres->field_agres_status[$lang][0]['value'] == AGRES_STATUS_AVAILABILITY_BLOCK) {
//4.so this is a blocking reservations which is in the way of the unblocking time range, now act accordingly:
//             if ($entblockbegin <)    
        $lang = 'und';
       $lang = field_language('node', $conflictres,'field_agres_rdate');            
                 $tmpcheck_anfang = new DateTime($conflictres->field_agres_rdate[$lang][0]['value'], $dateTimezone1);
    $offset = $tmpcheck_anfang->getOffset();
    $offset = $offset * 1;
    $tmpcheck_anfang->modify($offset . 'seconds');                 
    $tmpcheck_anfang_str = $tmpcheck_anfang->format('Y-m-d H:i');
                 $tmpcheck_ende = new DateTime($conflictres->field_agres_rdate[$lang][0]['value2'], $dateTimezone1);
    $offset = $tmpcheck_ende->getOffset();
    $offset = $offset * 1;
    $tmpcheck_ende->modify($offset . 'seconds');                 
    $tmpcheck_ende_str = $tmpcheck_ende->format('Y-m-d H:i');    
    
                 if (($entblockbegin < $tmpcheck_anfang_str)&&($entblockende > $tmpcheck_ende_str)) {
                    node_delete($conflictnid);
                 }
                 if (($entblockbegin > $tmpcheck_anfang_str)&&($entblockende > $tmpcheck_ende_str)) {
                   _agreservations_update_Reservation($conflictnid, null, $tmpcheck_anfang_str, $entblockbegin);
                 }   
                 if (($entblockbegin > $tmpcheck_anfang_str)&&($entblockende < $tmpcheck_ende_str)) {
                   _agreservations_update_Reservation($conflictnid, null, $tmpcheck_anfang_str, $entblockbegin);
                   $tmpunits = array();
                   $tmpunits = _agreservations_get_unitn_for_reservation_node($conflictnid);                   
                   $resnid = _agreservations_create_blockReservation($tmpunits, $entblockende,$tmpcheck_ende_str, NULL, 0, AGRES_STATUS_AVAILABILITY_BLOCK,t('block reservation'));                   
                 }        
                 if (($entblockbegin < $tmpcheck_anfang_str)&&($entblockende < $tmpcheck_ende_str)&&($entblockende > $tmpcheck_anfang_str)) {
                   _agreservations_update_Reservation($conflictnid, null, $entblockende, $tmpcheck_ende_str);
                 }                   
//                drupal_set_message('<pre>unlbock conflicts ' . print_r($entblockende.'<--->'.$tmpcheckindtstr, TRUE) . '</pre>');
           
           }
         }

       }
    }
    elseif ($form_state['values']['op'] == 'free') {
    }
}

////*when anonymous users clicks search on the searchform:*/
//
function agres_categories_availsettings_form_submit1($form, $form_state) {
  if (isset($form_state['build_info']['args'][0])) {
    $catid = $form_state['build_info']['args'][0];
    if ($form_state['values']['op'] == 'block') {
      $resnodes = _agres_categories_get_unitnodes_of_category(null,$catid);
      $resnid = _agreservations_create_blockReservation($resnodes, $form_state['values']['availsettings']['checkin'],$form_state['values']['availsettings']['checkout'], NULL, 0, AGRES_STATUS_AVAILABILITY_BLOCK,t('block reservation'));     
      
    }
    elseif ($form_state['values']['op'] == 'free') {
    }
  }
}
function agres_categories_availsettings_form_validate1($form, &$form_state) {
  if (isset($form_state['build_info']['args'][0])) {
    $catnid = $form_state['build_info']['args'][0];
    $cat = node_load($catnid);

    if (isset($form_state['values']['availsettings']['datform'])) {
      $datform = $form_state['values']['availsettings']['datform'];
    } else {
      $datform = 'Y-m-d H:i';
    }

    if (!isset($form_state['values']['availsettings']['units'])) {
      $form_state['values']['availsettings']['units'] = 1;
    }
    $requestedunits = $form_state['values']['availsettings']['units'];
//    drupal_set_message('<pre>hierhierhier'.print_r($requestedunits,true).'</pre>');
    if (!isset($form_state['values']['availsettings']['checkin']) || ($form_state['values']['availsettings']['checkin'] == '')) {
      form_set_error('unitinfo', t('Checkout-time has to be entered'));
      return;
    }
    else {
      if (!is_array($form_state['values']['availsettings']['checkin'])) {
         $tmpDateCheckin = date_create($form_state['values']['availsettings']['checkin']);
      }
      else {
        $tmpDateCheckin = date_create($form_state['values']['availsettings']['checkin']['date'].' '.$form_state['values']['availsettings']['checkin']['time']);
      }
    }
//
        $lang = 'und';
       $lang = field_language('node', $cat,'field_agres_shownumberunits');     
       $langd = 'und';
       $langd = field_language('node', $cat,'field_agres_numberunits');
    if (($cat->field_agres_shownumberunits[$langcode][0]['value'] !== 1) && (isset($cat->field_agres_numberunits[$langd][0]['value']))) {
      $form_state['values']['availsettings']['units'] = $cat->field_agres_numberunits[$langd][0]['value'];
    }
    if (!isset($cat->field_agres_datelabel2[$langcode][0]['value'])) {
      if (!isset($form_state['values']['availsettings']['checkout'])) {
        form_set_error('availsettings', t('Checkout-time has to be entered'));
      }
      $tmpDateCheckout = date_create($form_state['values']['availsettings']['checkin']);
      if (!isset($form_state['values']['availsettings']['checkin']['time'])) {
         $tmpDateCheckout = date_create($form_state['values']['availsettings']['checkin']);
      }
      else {
        $tmpDateCheckout = date_create($form_state['values']['availsettings']['checkin']['date'].' '.$form_state['values']['availsettings']['checkin']['time']);
      }
    }
    else {
      if (!isset($form_state['values']['availsettings']['checkout']) || ($form_state['values']['availsettings']['checkout'] == '')) {
        form_set_error('availsettings', t('Checkout-time has to be entered'));
        return;
      }
      if (!is_array($form_state['values']['availsettings']['checkout'])) {
         $tmpDateCheckout = date_create($form_state['values']['availsettings']['checkout']);
      }
      else {

        $tmpDateCheckout = date_create($form_state['values']['availsettings']['checkout']['date'].' '.$form_state['values']['availsettings']['checkout']['time']);
      }


    }

    if ($tmpDateCheckin >= $tmpDateCheckout) {
      form_set_error('availsettings', t('Checkin has to be before Checkout '));
    }
    /* get reservable units: */

    $resnodes = agreservations_get_reservable_items('agreservations_unit', date_format($tmpDateCheckin, 'Y-m-d H:i'), date_format($tmpDateCheckout, 'Y-m-d H:i'), $cat);

    $foundunits = count($resnodes);
    if ($requestedunits > 0) {
      if ($requestedunits > $foundunits) {
        //look which are the conflicting reservations:
        $conflictresnids = _agres_rconflict_get_overlaps($tmpDateCheckin, $tmpDateCheckout);
          $availblocks=0;
          $nonavailblocks=0;        
        foreach($conflictresnids as $keyconflict=>$conflictnid) {
          $conflictres = node_load($conflictnid);
//          drupal_set_message('<pre>conflicts:****'.print_r($conflictres,TRUE).'</pre>');
        $lang = 'und';
        $lang = field_language('node', $conflictres,'field_agres_status');             
          if(isset($conflictres->field_agres_status[$lang])&&$conflictres->field_agres_status[$lang][0]['value'] == AGRES_STATUS_AVAILABILITY_BLOCK) {
             $availblocks+=1;
//             break;
          } else {
            $nonavailblocks +=1;
          }

        }
        if ($availblocks == 0) {
            form_set_error('unitinfo', t('Conflicting Reservations don´t contain changeable availability block.'));
         }

      }
    }
    elseif ($requestedunits == 0) {
        $lang = 'und';
        $lang = field_language('node', $cat,'field_agres_shownumberunits');     
        $langs = 'und';
        $langs = field_language('node', $cat,'field_agres_unitselectionmethod');            
      if (!($cat->field_agres_shownumberunits[$lang][0]['value'] == 2 && $cat->field_agres_unitselectionmethod[$langs][0]['value'] == 2) ) {
        form_set_error('availsettings', t('Number of units has to be > 0'));
      }
    }
  }
  else {
    form_set_error('availsettings', t('agres_category not set! Please try again'));
  }
}
///**
// * Implementation of hook validate():
// */
function agres_categories_availsettings_form_validate2($form, $form_state) {   
    if ($form_state['values']['availsettings']['checkin'] >= $form_state['values']['availsettings']['checkout']) {
      form_set_error('unitinfo', t('Start Date has to be smaller than End Date.'));
    }
}

function _agres_categories_create_options_servicehours($daynumber, $cat) {
        $lang = 'und';
        $lang = field_language('node', $cat,'field_agres_servicehours');    
  $datform = 'Y-m-d H:i';
  $shours = $cat->field_agres_servicehours[$lang][$daynumber]['value'];
  $hoursofday = explode(",", $shours);
  $stimearray = array();
//  $i = 0;
  foreach ($hoursofday as $x => $startend) {
    $startendarray = explode("-", $startend);
    $start = $startendarray[0];
    $end = $startendarray[1];
    $prepend = array('00', '01', '02', '03', '04', '05', '06', '07', '08', '09');
    $prependmin = array('00',);
    $hours = array_merge($prepend, range(10, 23));
    $minutes = array_merge($prependmin, range(15, 59,15));      
    foreach ($hours as $h => $hour) {
      foreach ($minutes as $minute) {
        $stime = $hour . ':' . $minute;
        
        if (($stime <= $end) && ($stime >= $start)) {
          $stimearray[$stime] = $stime;
        }
//        $i++;
      }
    }
  }
  
  return $stimearray;
}