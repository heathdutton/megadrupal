<?php

/**
 * @file
 * The Agreservations Resource Conflict module takes over the job of Resource 
 * Conflict in the Drupal 7 Version of agreservations, until there is a version 
 * of Resource Conflict ready for Drupal 7. This substitute module is basically 
 * a stripped version of Resource Conflict (Resource Conflict was written by 
 * Drupal.org User deviantintegral)
 */

/**
 * Implements hook_node_validate().
 */
function agres_rconflict_node_validate($node, $form) {
  $type = $node->type;
  if (!($type == 'agreservation')) {
    // Conflict handling is not enabled for this node.
    return;
  }
  // Find the date field to use for time overlapping_node_ids detection.
  $date_field = 'field_agres_rdate';
  $overlapping_node_ids = array();
  if (strpos($date_field, 'field_', 0) === 0) {
    $tlangs1 = array();
    $alllangs = array();
    $tlangs1 = language_list();
    $alllangs = array_merge($tlangs1, array('und' => ''));
    $alllangs = array_keys($alllangs);
    foreach ($alllangs as $lang) {
      
      if (!isset($node->{$date_field}[$lang])) {
        continue;
      }

      // Get the start and end Date of the current node
      $start = $node->{$date_field}[$lang][0]['value'];
      $end = $node->{$date_field}[$lang][0]['value2'];

      // Get all conflicting Date nodes
      if (!empty($start) && !empty($end)) {
        $overlapping_node_ids = _agres_rconflict_overlaps_from_date($start, $end);
      }
      else {
        // If we got here, someone broke the requirements, so turn off resource 
        // conflict for this type and notify an admin.
      }
    }
  }
  if (!empty($node->event_start)) {
    // Get all overlapping events
    $tmp = _agres_rconflict_overlaps_from_event($node->event_start, $node->event_end);
    $overlapping_node_ids = array_unique(array_merge($overlapping_node_ids, $tmp));
  }

  // Load conflicting nodes
  $conflicting_nodes = array();
  foreach ($overlapping_node_ids as $nid) {
    // Don't have the node conflict with itself
    if ($nid != $node->nid) {
      $conflicting_nodes[$nid] = node_load($nid);
    }
  }
  // Display conflict errors
  _agres_rconflict_display_conflict_errors($node, $conflicting_nodes);
}

/**
 * Compare our demand to the demand of overlapping nodes
 * and display errors for the intersections
 *
 * @param $node the currently validating node
 * @param $conflicting_nodes array of nodes that overlap with this node
 */
function _agres_rconflict_display_conflict_errors($node, $conflicting_nodes) {
  $our_demands = _agres_rconflict_get_node_resource_demand($node);

  // Enable different language checks
  foreach ($conflicting_nodes as $conflicting_node) {
    $other_demands = _agres_rconflict_get_node_resource_demand($conflicting_node);

    // Select the resources that both this node and the other node demands
    $conflicting_resources = array();
    foreach ($our_demands as $our_demand => $dummy) {
      if (isset($other_demands[$our_demand])) {
        $conflicting_resources[$our_demand] = node_load($our_demand);
      }
    }
    $tmplangs = language_list();
    // Display the error for each conflict
    foreach ($conflicting_resources as $conflicting_resource) {
      $date_field = 'field_agres_rdate';
      $type = DATE_ISO;
      $tlangs1 = array();
      $alllangs = array();
      $tlangs1 = language_list();
      $alllangs = array_merge($tlangs1, array('und' => ''));
      $alllangs = array_keys($alllangs);
      foreach ($alllangs as $lang) {
        if (isset($conflicting_node->{$date_field}[$lang])) {
          $startobj = new DateObject($conflicting_node->{$date_field}[$lang][0]['value']);
          $start = $startobj->format('Y-m-d H:i');
          $endobj = new DateObject($conflicting_node->{$date_field}[$lang][0]['value2']);
          $end = $endobj->format('Y-m-d H:i');

          $error = t('There is a resource conflict: <a href="@resource-url">%resource</a> is currently booked for <a href="@booker-url">%booker</a> from %start to %end. Please choose a different time or a different resource.', array(
            '@booker-url' => url('node/' . $conflicting_node->nid),
            '%booker' => $conflicting_node->title,
            '@resource-url' => url('node/' . $conflicting_resource->nid),
            '%resource' => $conflicting_resource->title,
            '%start' => $start,
            '%end' => $end,
            )
          );

          // This is a bit of a hack, but there's no way with FAPI to have
          // multiple form errors on the same field.  So, we just pass in
          // a bogus (but unique) ID for each error message, to ensure
          // that all conflicts are reported simultaneously.  We use the
          // nid of the conflicting resource (thing) appended with the nid
          // of the conflicting node (reservation event).
          $conflict_id = $conflicting_resource->nid . '_' . $conflicting_node->nid;
          form_set_error($conflict_id, $error);
        }
      }
    }
  }
}

/**
 * Get a conflict enabled node's resource demand
 *
 * @param $node
 *   The node which resurce demand will be returned
 * @return
 *   An array with keys of the node ID's, values of true
 */
function _agres_rconflict_get_node_resource_demand($node) {
  $type = $node->type;
  $reference_fields = variable_get('rc_reference_fields_' . $type, array());
  $demand = array();
  $reference_field = 'field_agres_ref_unit';
  $tlangs1 = array();
  $alllangs = array();
  $tlangs1 = language_list();
  $alllangs = array_merge($tlangs1, array('und' => ''));
  $alllangs = array_keys($alllangs);
  foreach ($alllangs as $lang) {
    if (isset($node->{$reference_field}[$lang])) {
      $references = $node->{$reference_field}[$lang];
      foreach ($references as $key => $reference) {
        /**
         * Check to see if any referencable resources exist. If they don't, file
         * an error. This only matters when the nodereference field is set to
         * required, otherwise this code doesn't get called at all. We have to
         * file the error against the fake 'no_resources' element as CCK files
         * it's own "Illegal choice" error before we get called.
         */
        if (is_numeric($reference['nid'])) {
          $demand[$reference['nid']] = TRUE;
        }
        else {
          form_set_error('no_resources', t('No bookable resources have been created. Please create resources to book before attempting to create a resource booking.'));
        }
      }
    }
  }
  return $demand;
}

/**
 * Determine if any nodes conflict between the specified dates using Date API.
 *
 * @param $date_start
 *   The start date of the date to check
 * @param $date_end
 *   The end date of the date to check.
 * @return
 *   An array of node ID's
 */
function _agres_rconflict_overlaps_from_date($date_start, $date_end) {
  // Make the default type to DATE_ISO.
  $type = DATE_ISO;
  $date_startobj = New DateObject($date_start, 'GMT');
  $date_endobj = New DateObject($date_end, 'GMT');

  return _agres_rconflict_get_overlaps($date_startobj, $date_endobj);
}

/**
 * Determine if any nodes conflict between the specified dates using Event.
 *
 * @param $event_start
 *   The start date of the event to check
 * @param $event_end
 *   The end date of the event to check.
 * @return
 *   An array of node ID's
 */
function _agres_rconflict_overlaps_from_event($event_start, $event_end) {
  $start = date_make_date($event_start, 'GMT', DATE_UNIX);
  $end = date_make_date($event_end, 'GMT', DATE_UNIX);
  return _agres_rconflict_get_overlaps($start, $end);
}

/**
 * Determine if any conflict enabled nodes overlap the specified times
 *
 * 1. $start is within the event time
 * 2. $end end is within the event time
 * 3. The event encompasses $start and $end
 * 4. Allow the end of one event to occur at the start of the next
 *
 * @param $start
 *  The start time of events to search as dateAPI object
 * @param $end
 *   The end time of events to search as dateAPI object
 * @return
 *   An array of node ID's
 */
function _agres_rconflict_get_overlaps($start, $end) {
  $date_start = $start->format(DATE_FORMAT_DATETIME);
  $date_end = $end->format(DATE_FORMAT_DATETIME);
  
            $dateTimezone1 = new DateTimeZone(date_default_timezone());
           $date_start_timezone = new DateTime($date_start, $dateTimezone1);
           $offset = $date_start_timezone->getOffset();
           $offset = $offset * -1;
           $date_start_timezone->modify($offset . 'seconds');
  $date_start =  $date_start_timezone->format(DATE_FORMAT_DATETIME);     
           $date_end_timezone = new DateTime($date_end, $dateTimezone1);
           $offset = $date_end_timezone->getOffset();
           $offset = $offset * -1;
           $date_end_timezone->modify($offset . 'seconds');
  $date_end =  $date_end_timezone->format(DATE_FORMAT_DATETIME);    
//  drupal_set_message('<pre>_agres_rconflict_get_overlaps conflicts ' . print_r($date_end, TRUE) . '</pre>');
  $rows = array();
  $type = 'agreservation';
  $date_field = 'field_agres_rdate';
  if (strpos($date_field, 'field_', 0) === 0) {
    $date_table = '{' . 'field_data_' . $date_field . '}';
    $start_field_name = $date_field . '_value';
    $end_field_name = $date_field . '_value2';
    $query = "SELECT DISTINCT {node}.nid FROM {node} INNER JOIN $date_table date_table ON {node}.vid = date_table.revision_id
       WHERE(:date_start >= date_table.$start_field_name AND :date_start < date_table.$end_field_name)
       OR(:date_end > date_table.$start_field_name AND :date_end <= date_table.$end_field_name)
       OR(:date_start <= date_table.$start_field_name AND :date_end >= date_table.$end_field_name)";
    $result = db_query($query, array(':date_start' => $date_start, ':date_end' => $date_end));

    // Create an array of all of the results
    while ($row = $result->fetchAssoc()) {
      $rows[] = $row['nid'];
    }
  }
  return array_unique($rows);
}

if (!function_exists('date_show_value')) {

  /**
   *  A function to display the database value for the date object
   *
   *  @param $date - the date object
   *  @param $format - DATE_UNIX or DATE_ISO, the type of value to display
   *  @param $type - 'db' or 'local', the date value to display
   */
  function date_show_value($date, $type = 'db', $format = DATE_ISO) {
    if ($format == DATE_UNIX) {
      return $date->$type->timestamp;
    }
    else {
      return $date->$type->iso;
    }
  }

}