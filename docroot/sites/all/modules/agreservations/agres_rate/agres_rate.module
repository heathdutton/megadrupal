<?php

/**
 * @file
 *  Implements Rates
 */
function agres_rate_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'agres_rate'),
  );
}

/**
 * _agres_get_product_for_reservation
 * This functions checks if the unittype has a rate attached and
 * if the reservation is partly/totally within the timeframe attached to the rate
 * and returns an array including each day date of the reservation and the rates/products of the booked unittype
 * that apply.
 * @author     Andreas Gill
 * @param      $unittypenid unittype
 * @param      $data   all info about the booking are here.($unittypenid, &$data)
 */
function _agres_get_products_for_reservation($unittypenid, $data, $arraypop=true) {
  //First check if unittype has rates:
  $rates = array();
  $unitnode = node_load($unittypenid);
  $tmpcheckin = new DateObject($data['checkintime']);
  $tmpcheckout = new DateObject($data['checkouttime']);
  if ($data['bookingmode'] == BOOKING_MODE_BY_DAYS) {
    $resdates = _agreservations_create_date_range(date_format($tmpcheckin, 'Y-m-d H:i:s'), date_format($tmpcheckout, 'Y-m-d H:i:s')); //createDateRangeArray($data['checkintime'], $data['checkouttime']);
  } 
  elseif ($data['bookingmode'] == BOOKING_MODE_BY_HOURS){
    $resdates = _agreservations_create_datehour_range(date_format($tmpcheckin, 'Y-m-d H:i:s'), date_format($tmpcheckout, 'Y-m-d H:i:s'));
  }
  if($arraypop) {
    array_pop($resdates);
  }
  $retarray = $resdates;
  $retarray = array_flip($retarray);
  foreach ($retarray as $rtkey => $retarrayitem) {
    $retarray[$rtkey] = $unittypenid;
  }
         $lang = 'und';
        $lang = field_language('node', $unitnode,'field_agres_ref_rate');    
  if (isset($unitnode->field_agres_ref_rate[$lang][0]['nid']) && (count($unitnode->field_agres_ref_rate[$lang]) > 0)) {
    foreach ($unitnode->field_agres_ref_rate[$lang] as $key => $rate) {      
      $ratenode = node_load($rate['nid']);
      $timeframes = array();
         $lang = 'und';
        $lang = field_language('node', $ratenode,'field_agres_ref_timeframe');        
      foreach ($ratenode->field_agres_ref_timeframe[$lang] as $tkey => $timeframe) {

        $timeframes['timeframes'][] = $timeframe['nid'];
        $rates['rates'][$rate['nid']] = $timeframes;
      }
    }
    
    if (($data['module'] == 'agres_categories' ) && ($data['bookingmode'] == BOOKING_MODE_BY_DAYS)) {
      foreach ($resdates as $time) {
        // Now for each time night or hour or whatever, check which price/rate
        // applies, if no rate aplies, use the nid of the unittype
        foreach ($rates['rates'] as $rkey => $rate) {
          // Rates should NOT overlap! The first rate that has a timeframe that
          // gets hit by a date of this booking is taken
          foreach ($rate['timeframes'] as $timeframenid) {
            $tframe = node_load($timeframenid);
            //just in case repeating dates are set(like every weekend inside the timeframe:
         $lang = 'und';
        $lang = field_language('node', $tframe,'field_agres_timeframe_period');              
            if (isset($tframe->field_agres_timeframe_period[$lang][0]['rrule'])) {
              $ditem = array('value' => $tframe->field_agres_timeframe_period[$lang][0]['value'], 'value2' => $tframe->field_agres_timeframe_period[$lang][0]['value2'], 'timezone' => $tframe->field_agres_timeframe_period[$tframe->language][0]['timezone']);
              $fieldinfo = field_info_field('field_agres_timeframe_period');
              $rrule = $tframe->field_agres_timeframe_period[$lang][0]['rrule'];
              $dates = date_repeat_build_dates($rrule, null, $fieldinfo, $ditem);      
              foreach ($dates as $tfdate) {                
                if (_is_date_in_range($time, $tfdate['value'], $tfdate['value2']) == true) {
                  $retarray[$time] = $rkey;
                }
              }           
            } 
            else {
//            field_agres_timeframe_period
              if (_is_date_in_range($time, $tframe->field_agres_timeframe_period[$lang][0]['value'], $tframe->field_agres_timeframe_period[$lang][0]['value2']) == true) {
                $retarray[$time] = $rkey;
              }
            }
          }
        }
      }
    }
    elseif ($data['bookingmode']== BOOKING_MODE_BY_HOURS) {
//      drupal_set_message('<pre>hourhour' . print_r($ratesntypes, true) . '</pre>');
    }
  }
//  drupal_set_message('<pre>hourhour' . print_r($retarray, true) . '</pre>');
  $data['agres_singletimes'] = $retarray;
  return $retarray;
}


/**
 * Implements hook_permission().
 */
function agres_rate_permission() {
  return array(
    'create agres_rate' => array(
      'title' => t('create agres_rate'),
      'description' => t('TODO Add a description for \'create agres_rate\''),
    ),
    'view agres_rate' => array(
      'title' => t('view agres_rate'),
      'description' => t('TODO Add a description for \'view agres_rate\''),
    ),
    'administer agres_rate' => array(
      'title' => t('administer agres_rate'),
      'description' => t('TODO Add a description for \'administer agres_rate\''),
    ),
  );
}