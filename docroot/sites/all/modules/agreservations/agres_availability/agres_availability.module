<?php
/**
 * @file
 * agres_availability.module additional preprocessors and views for agres_availability
 * based on the calendar module by KarenS
 */


function agres_availability_init() {
//     if (substr($_GET['q'], 0, 24) == 'admin/build/modules/list') {
//       return;
//     }
  drupal_add_css(drupal_get_path('module', 'agres_availability') . '/agres_availability.css');
  require_once('./' . drupal_get_path('module', 'agres_availability') . '/theme/theme.inc');
}

function agres_availability_theme() {
  $path = drupal_get_path('module', 'agres_availability');
  require_once "./$path/theme/theme.inc";

  $base = array(
    'file' => 'theme.inc',
    'path' => "$path/theme",
  );
  return array(
    'agres_availability_item' => $base + array(
      'template' => 'agres-availability-item',
      'variables' => array('view' => NULL, 'rendered_fields' => NULL, 'item' => NULL),
    ),
    'agres_availability_datebox' => $base + array(
      'template' => 'agres-availability-datebox',
      'variables' => array(
        'date' => NULL,
        'view' => NULL,
        'items' => NULL,
        'selected' => NULL,
      ),
    ),
    'agres_availability_empty_day' => $base + array(
      'variables' => array('curday' => NULL, 'view' => NULL),
    ),
    'agres_availability_stripe_legend' => $base + array(
      'variables' => array('stripe_labels' => NULL),
    ),
    'agres_availability_stripe_stripe' => $base + array(
      'variables' => array('node' => NULL),
    ),
    'agres_availability_time_row_heading' => $base + array(
      'variables' => array('start_time' => NULL, 'next_start_time' => NULL, 'curday_date' => NULL),
    ),
    'agres_availability_month_col' => $base + array(
      'template' => 'agres-availability-month-col',
      'variables' => array('item' => NULL),
    ),
    'agres_availability_month_row' => $base + array(
      'template' => 'agres-availability-month-row',
      'variables' => array('inner' => NULL, 'class' => NULL, 'iehint' => NULL),
    ),
  );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
define('agres_availability_SHOW_ALL', 0);
define('agres_availability_HIDE_ALL', -1);
/**
 * @file
 * Adds agres_availability filtering and displays to Views.
 */

/**
 * Implements hook_views_api().
 */
function agres_availability_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'agres_availability') . '/includes',
  );
}

/**
 * agres_availability display types.
 */
function agres_availability_display_types() {
  return array('year' => t('Year'), 'month' => t('Month'), 'day' => t('Day'), 'week' => t('Week'));
}

/**
 * Implementation of hook_help().
 */
function agres_availability_help($section, $arg) {
  switch ($section) {
    case 'admin/help#agres_availability':
      return t("<p>View complete documentation at !link.</p>", array('!link' => 'http://drupal.org/node/120710'));
  }
}


/**
 * Implements hook_node_view().
 *
 * Add link to agres_availability to nodes, formerly hook_link().
 * Controlled by value of 'agres_availability_date_link' in the view.
 */
function agres_availability_node_view($node, $view_mode, $langcode) {
  $path = variable_get('agres_availability_date_link_' . $node->type);
  if (!empty($path)) {
    $links['agres_availability_link'] = array(
      'title' => t('agres_availability'),
      'href' => $path,
      'attributes' => array('title' => t('View the agres_availability.')),
    );
    $node->content['links']['agres_availability'] = array(
      '#theme' => 'links__node__caledar',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Formats the weekday information into table header format
 *
 * @ingroup event_support
 * @return array with weekday table header data
 */
function agres_availability_week_header($view) {
  $len = isset($view->date_info->style_name_size) ? $view->date_info->style_name_size : (!empty($view->date_info->mini) ? 1 : 3);
  $with_week = !empty($view->date_info->style_with_weekno);

  // create week header
  $untranslated_days = agres_availability_untranslated_days();
  if ($len == 99) {
    $translated_days = date_week_days_ordered(date_week_days(TRUE));
  }
  else {
    $translated_days = date_week_days_ordered(date_week_days_abbr(TRUE));
  }
  if ($with_week) {
    $row[] = array(
      'header' => TRUE,
      'class' => "days week",
      'data' => '&nbsp;',
    );
  }
  foreach ($untranslated_days as $delta => $day) {
    $label = $len < 3 ? drupal_substr($translated_days[$delta], 0, $len) : $translated_days[$delta];
    $row[] = array(
      'header' => TRUE,
      'class' => "days " . $day,
      'data' => $label,
    );
  }
  return $row;
}

/**
 * Array of untranslated day name abbreviations, forced to lowercase
 * and ordered appropriately for the site setting for the first day of week.
 *
 * The untranslated day abbreviation is used in css classes.
 */
function agres_availability_untranslated_days() {
  $untranslated_days = date_week_days_ordered(date_week_days_untranslated());
  foreach ($untranslated_days as $delta => $day) {
    $untranslated_days[$delta] = strtolower(substr($day, 0, 3));
  }
  return $untranslated_days;
}

/**
 * Default settings array for agres_availability time grouping.
 */
function agres_availability_groupby_times($type = '') {
  $times = array();
  switch ($type) {
    case 'hour':
      for ($i = 0; $i <= 23; $i++) {
        $times[] = date_pad($i) . ':00:00';
      }
      break;
    case 'half':
      for ($i = 0; $i <= 23; $i++) {
        $times[] = date_pad($i) . ':00:00';
        $times[] = date_pad($i) . ':30:00';
      }
      break;
    default:
      break;
  }
  return $times;
}

/**
 *  Implementation of hook_block_info()
 */
function agres_availability_block_info() {
  $blocks['agres_availability_legend'] = array(
    'info' => t('agres_availability Legend'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 *  Implementation of hook_block_view().
 */
function agres_availability_block_view($delta = '') {
  switch ($delta) {
    case 'agres_availability_legend':
      $block['subject'] = t('agres_availability Legend');
      $block['content'] = array(
        '#theme' => 'agres_availability_stripe_legend',
      );
      return $block;
  }
}

/**
 * Find the path for the agres_availability display that has a specific granularity.
 */
function agres_availability_granularity_path(&$view, $granularity) {
  foreach ($view->display as $id => $display) {
//    drupal_set_message('<pre>tttttt '.print_r($display->display_options,true).'</pre>');
    if (isset($display->display_options['style_plugin'])&&$display->display_options['style_plugin']== 'agres_availability_style' && !empty($display->display_options['path'])) {
      // @TODO Why is this sometimes empty for a style that uses the default value?
      $type = !empty($display->display_options['style_options']['agres_availability_type']) ? $display->display_options['style_options']['agres_availability_type'] : 'month';
      if ($type == $granularity) {
        return $display->display_options['path'];
      }
    }
  }
}

/**
 * Callback to remove a default agres_availability from the system.
 */
function agres_availability_remove($view_name) {
  // Remove any variable that creates a default view with this name.
  $agres_availability_options = variable_get('agres_availability_default_view_options', array());
  if (array_key_exists($view_name, $agres_availability_options)) {
    unset($agres_availability_options[$view_name]);
  }
  variable_set('agres_availability_default_view_options', $agres_availability_options);
  // Delete it from the database, if stored there.
  if ($view = views_get_view($view_name)) {
    $view->delete();
  }
  views_invalidate_cache();
}


/**
 *
 * 
 *
 * Takes the calendar links created in calendar_preprocess_date_views_pager()
 * and reconfigures them as action items and tabs. The links can be altered
 * before they are displayed using hook_calendar_links_alter().
 *
 * We do this with an alter rather than in hook_menu() because the
 * specific path we want to go to will vary depending on the page we
 * are looking at at the time.
 */
//function agres_availability_menu_local_tasks_alter(&$data, $router_item, $root_path) {
////    drupal_set_message('<pre>agres_availability_menu_local_tasks_alter'.print_r($data,true).'</pre>');
//  if (!empty($_SESSION['agres_availability_links']) && array_key_exists($root_path, $_SESSION['agres_availability_links'])) {
//    $agres_availability_data = $_SESSION['agres_availability_links'][$root_path];
//    if (!empty($agres_availability_data['actions'])) {
//      foreach ($agres_availability_data['actions'] as $action) {
//        $item = menu_get_item($action['path']);
//        $item['title'] = $action['title'];
//        // The add new content page would redirect to the new event
//        // if we did not override that here. This way they will
//        // redirect back to the agres_availability.
//        $item['localized_options'] += array('query' => array());
//        $item['localized_options']['query'] += drupal_get_destination();
//        if ($item['access']) {
//          $data['actions']['output'][] = array(
//            '#theme' => 'menu_local_action',
//            '#link' => $item,
//          );
//        }
//      }
//    }
//    if (!empty($agres_availability_data['tabs'])) {
//
//      $delta = !empty($data['tabs'][0]['count']) ? $data['tabs'][0]['count'] - 1 : 0;
//      foreach ($agres_availability_data['tabs'] as $tab) {
//        $item = menu_get_item($tab['path']);
//        $item['title'] = $tab['title'];
//        // If we have moved off the default page for the agres_availability, the
//        // links to the other views will have been adjusted to keep information
//        // about the right year/month/week/day to go to.
//        $item['href'] = $tab['path'];
//        if ($item['access']) {
//          $data['tabs'][0]['output'][$delta] = array(
//            '#theme' => 'menu_local_task',
//            '#link' => $item,
//          );
//          if (strpos($tab['path'], $root_path) === 0) {
//            $data['tabs'][0]['output'][$delta]['#active'] = TRUE;
//          }
//          $delta++;
//        }
//      }
//      $data['tabs'][0]['count'] = $delta + 1;
//    }
//  }
//  return;
//}

/**
 * Implements hook_permission().
 */
function agres_availability_permission() {
  return array(
    'view agreservations availability calendar' => array(
      'title' => t('view agreservations availability calendar'),
      'description' => t('can view the availability calendar'),
    ),
  );
}
