<?php

/**
 * @file
 * Implements the agres_timeframe content type.
 * This module was created by Amazeelabs and given to me as a contribution.
 * Thanks amazee labs!
 *
 * I changed the module a bit to make it fit in to the module collection of
 * agreservations and make maintaining for me easier.
 */

/**
 * @todo Documentation
 */
function agres_timeframe_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'agres_timeframe'),
  );
}

/**
 * Entry point for some api functions of the agres_timeframe module.
 *
 * @param string $op
 * 	The operation to be performed. Currently available: "check_restriction"
 *
 * @param array $data
 * 	An array with arguments data. This depends on the $op parameter.
 *  @todo document each of the available $op.
 */
function agres_timeframe_api($op, $data) {
  static $loaded_api;
  if (!isset($loaded_api)) {
    $loaded_api = TRUE;
    module_load_include('inc', 'agres_timeframe', 'agres_timeframe.api');
  }
  if (function_exists('agres_timeframe_api_' . $op)) {
    $message = call_user_func_array('agres_timeframe_api_' . $op, array($data));
    return $message;
  }
  return FALSE;
}

/**
 * @todo Documentation
 */
function agres_timeframe_node_info() {
  return array(
    'agres_timeframe' => array(
      'name' => 'Timeframe',
      'base' => 'agres_timeframe',
      'description' => t('The Timeframe content type'),
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'has_body' => FALSE,
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function agres_timeframe_menu() {
  $items['admin/config/agres_timeframe'] = array(
    'title' => 'Timeframes Settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('agres_timeframe_settings_form'),
    'file' => 'agres_timeframe.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function agres_timeframe_permission() {
  return array(
    'create agres_timeframe' => array(
      'title' => t('create agres_timeframe'),
      'description' => t('TODO Add a description for \'create agres_timeframe\''),
    ),
    'view agres_timeframes' => array(
      'title' => t('view agres_timeframes'),
      'description' => t('TODO Add a description for \'view agres_timeframes\''),
    ),
    'administer agres_timeframes' => array(
      'title' => t('administer agres_timeframes'),
      'description' => t('TODO Add a description for \'administer agres_timeframes\''),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function agres_timeframe_node_access($node, $op, $account) {
  switch ($op) {
    case 'create':
      return user_access('create agres_timeframe') || user_access('administer agres_timeframes');

    case 'view':
      return user_access('view agres_timeframes') || user_access('create agres_timeframe') || user_access('administer agres_timeframes');

    case 'update':
    case 'delete':
      return user_access('administer agres_timeframes');
  }
}