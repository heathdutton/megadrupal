<?php

/**
 * @file
 * agres_bookings.module
 * Contains the ubercarthooks...needs research and work
 */


//function agres_bookings_entity_info_alter(&$entity_info) {
//  // Set the controller class for nodes to an alternate implementation of the
//  // DrupalEntityController interface.
////  drupal_set_message('<pre>agres_categories_search_result' . print_r($entity_info, true) . '</pre>');
//  $entity_info['uc_cart_item']['controller class'] = 'AgresBookingsCartItemController';
//}

/**
 * To allow for emptying the cart
 *
 * This code was written by 'dinorastoder' and extended by me see:
 *  http://www.ubercart.org/forum/module_support/5725/add_empty_cart_button
 */
function agres_bookings_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

/**
 * @todo Documentation
 */
function agres_bookings_cart_view_form_submit($form, &$form_state) {
  if (isset($form_state['values']['op'])) {
    switch ($form_state['values']['op']) {
      case t('Empty Cart'):
        // First read the Agreservation ID:
        $items = uc_cart_get_contents(uc_cart_get_id());
        // Now delete the reservations. In case where not allowed to delete,
        // follow the suggestion posted here:http://drupal.org/node/218104
        foreach ($items as $productunit) {
          if (isset($productunit->data['agreservations_resid'])) {
            if (intval($productunit->data['agreservations_resid']) > 0) {
              global $user;
              $original_user = $user;
              drupal_save_session(FALSE);
              $user = user_load(1);
              node_delete(intval($productunit->data['agreservations_resid']));
              // Restore original user
              $user = $original_user;
              drupal_save_session(TRUE);
            }
          }
        }
        uc_cart_empty(uc_cart_get_id());
        drupal_set_message(t('Cart is now empty...'));
        break;
    }
  }
}

/**
 * @todo Documentation
 */
function agres_bookings_uc_checkout_pane() {
  $panes['agres_cart_contents'] = array(
    'callback' => 'agres_bookings_agres_cart_contents',
    'title' => t('AGreservations cart contents'),
    'desc' => t("Display the contents of a customer's shopping cart."),
    'weight' => 1,
    'process' => FALSE,
    'collapsible' => FALSE,
  );

  return $panes;
}

/**
 * Displays the cart contents for review during checkout.
 */
function agres_bookings_agres_cart_contents($op, $order, $form = NULL, &$form_state = NULL) {

  switch ($op) {
    case 'view':
      $contents['agres_bookings_cart_review_table'] = array(
        '#theme' => 'agres_bookings_cart_review_table',
        '#items' => $order->products,
        '#weight' => variable_get('uc_pane_cart_field_cart_weight', 2),
      );
      return array('contents' => $contents, 'next-button' => FALSE);

    case 'review':
      $review[] = theme('agres_bookings_pane_cart_review', array('order' => $order));
      return $review;
  }
}

/**
 * Theme cart items on the checkout review order page.
 *
 * @param $items
 *   Cart items.
 * @return
 *   A string of HTML for the page contents.
 * @ingroup themeable
 */
function theme_agres_bookings_pane_cart_review($porder) {
  $order = $porder['order'];
  $items = $order->products;

  $output = '<table>';
  reset($items);
  $firstitem = current($items);
  $output = $output . '<td>' . t("From: ") . $firstitem->data['agres']['agreservations_request'][1][0] .
      t(" To: ") . $firstitem->data['agres']['agreservations_request'][1][1] . '</td>';
  $context = array(
    'revision' => 'themed',
    'type' => 'cart_item',
    'subject' => array(),
  );
  foreach ($items as $item) {
    $desc = check_plain($item->title) . uc_product_get_description($item);

    $price_info = array(
      'price' => $item->price,
      'qty' => $item->qty,
    );
    $context['subject'] = array(
      'cart' => $items,
      'cart_item' => $item,
      'node' => node_load($item->nid),
    );
    $tmptimesqty = 0;
    $timesdesc = '';
    if (module_exists('agres_categories')) {
      $tmeasuringunit = $item->data['measuringunit'];
    } else {
      $tmeasuringunit = $item->data['measuringunit'];
    }

    if (module_exists('agres_categories') && $item->data['module'] == 'agres_categories') {
      $tmeasuringunit = $item->data['measuringunit'];

      $timesdesc = $tmeasuringunit;
      $tmptimesqty = $item->data['times'];
      $output .= '<tr valign="top"><td nowrap="nowrap">' . count($item->data['agres_singletimes']) . ' ' . $tmeasuringunit . ' x ' . $item->data['agres_diffproducts'] . ' ' . $desc . ' </td>' .
          '</td><td nowrap="nowrap">' . theme('uc_price', array('price' => $item->price * $item->qty)) . '</td></tr>';
    } else {
      $timesdesc = t('nights');
      $tmptimesqty = $item->data['times'];
      $output .= '<tr valign="top"><td nowrap="nowrap">' . $item->data['times'] . $tmeasuringunit . ' x ' . $item->qty / $item->data['times'] . ' ' . $desc . ' </td>' .
          '</td><td nowrap="nowrap">' . theme('uc_price', array('price' => $item->price * $item->qty)) . '</td></tr>';
    }
  }
  //
  if ($order->payment_method == 'credit') {
    $ordertotaldepositmultiplikator = variable_get('agres_uc_credit_deposit', '1');
    $deposit = $order->order_total * floatval($ordertotaldepositmultiplikator);

    $agres_info = t('%charged % of the total will be charged: ', array('%charged' => floatval($ordertotaldepositmultiplikator) * 100));
    $agres_info .= '<tr valign="top"><td nowrap="nowrap"><b> Sum that will be charged: ' . theme('uc_price', array('price' => $deposit)) . '</b></tr>';

    if ($ordertotaldepositmultiplikator !== '1') {
      $output .= '<tr valign="top"><td nowrap="nowrap">' . $agres_info . '</tr>';
    }
  }
  $output .= '</table>';

  return $output;
}

/**
 * @todo Documentation
 */
function agres_bookings_theme() {
  return array(
    'agres_bookings_cart_review_table' => array(
      'variables' => array('items' => array(), 'show_subtotal' => TRUE),
    ),
    'agres_bookings_pane_cart_review' => array(
      'variables' => array('order' => array()),
    ),
    'agres_bookings_uc_catalog_products' => array(
      'variables' => array('products' => NULL),
    ),
  );
}


/**
 * List the products in the cart in a TAPIr table adapted for agreservations.
 */
//function agres_bookings_cart_view_table($table) {
//  $table['#attributes'] = array('width' => '100%');
//  $table['#columns'] = array(
//    'image' => array(
//      'cell' => '',
//      'weight' => 1,
//    ),
//    'agrdesc' => array(
//      'cell' => 'Description',
//      'weight' => 2,
//    ),
//    'unit_price' => array(
//      'cell' => t('Unit Price'),
//      'weight' => 3,
//    ),
//    'qty' => array(
//      'cell' => '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . t('Qty.'),
//      'weight' => 5,
//    ),
//    'total' => array(
//      'cell' => t('Total'),
//      'weight' => 6,
//    ),
//  );
//  $subtotal = 0;
//  foreach (element_children($table) as $i) {
//    $subtotal += $table[$i]['#total'];
//
//
//    $table[$i]['image']['#cell_attributes'] = array('class' => 'image');
//    $table[$i]['agrdesc']['#cell_attributes'] = array('class' => 'agrdesc');
//    $table[$i]['unit_price']['#cell_attributes'] = array('class' => 'unit_price');
//    $table[$i]['qty']['#cell_attributes'] = array('class' => 'qty');
//    $table[$i]['total']['#cell_attributes'] = array(
//      'align' => 'left',
//      'class' => 'price',
//    );
//    $table[$i]['#attributes'] = array('valign' => 'top');
//  }
//
//  $context = array(
//    'revision' => 'themed-original',
//    'type' => 'amount',
//  );
//  $table[] = array(
//    'total' => array(
//      '#theme' => 'uc_price',
//      '#prefix' => '<span id="subtotal-title">' . t('Subtotal:') . '</span> ',
//      '#price' => $subtotal,
//      '#cell_attributes' => array(
//        'colspan' => 'full',
//        'class' => array('subtotal'),
//      ),
//    ),
//  );
//
//  return $table;
//}
/**
 * Implements hook_tapir_table_alter().
 */
function agres_bookings_tapir_table_alter(&$table, $table_id) {
  // Modify the display of the cart table.
  
  if ($table_id == 'uc_cart_view_table') {
  $table['#columns'] = array(
//    'remove' => array(
//      'cell' => t('Remove'),
//      'weight' => 0,
//    ),
    'image' => array(
      'cell' => t('Products'),
      'weight' => 1,
    ),
    'desc' => array(
      'cell' => '',
      'weight' => 2,
    ),
    'qty' => array(
      'cell' => theme('uc_qty_label'),
      'weight' => 3,
    ),
    'unit_price' => array(
      'cell' => t('Unit Price'),
      'weight' => 5,
    ),    
    'total' => array(
      'cell' => t('Total'),
      'weight' => 6,
    ),
  );

  $subtotal = 0;
  foreach (element_children($table) as $i) {
    if(isset($table[$i]['#total'])) {
       $subtotal += $table[$i]['#total'];
    }
    if (isset($table[$i]['total'])){
     if (isset($table[$i]['total']['#prefix'])){
       if(isset($table[$i]['total']['#prefix']['#cell_attributes'])){
//         $table[$i]['total']['#prefix']['#cell_attributes']['colspan'] = 'full';
         unset($table[$i]);
//         if(isset($table[$i]['total']['#prefix']['#cell_attributes']['class'][0])&&$table[$i]['total']['#prefix']['#cell_attributes']['class'][0]=='subtotal') {
//           drupal_set_message('<pre> element_children element_children ::: '.print_r($table[$i]['total']['#cell_attributes'],true).'</pre>');
//         }
         
       }
//       drupal_set_message('<pre> element_children element_children ::: '.print_r($table[$i],true).'</pre>');
     }
//      unset($table[$i]['total']);
    }   
    
//    $table[$i]['remove']['#cell_attributes'] = array('class' => array('remove'));
    $table[$i]['image']['#cell_attributes'] = array('class' => array('image'));
    $table[$i]['desc']['#cell_attributes'] = array('class' => array('desc'));
    $table[$i]['qty']['#cell_attributes'] = array('class' => array('qty'));
    $table[$i]['unit_price']['#cell_attributes'] = array('class' => array('price'));
    $table[$i]['total']['#cell_attributes'] = array('class' => array('price'));
  }

  $table[] = array(
    'total' => array(
      '#theme' => 'uc_price',
      '#prefix' => '<span id="subtotal-title">' . t('Subtotal:') . '</span> ',
      '#price' => $subtotal,
      '#cell_attributes' => array(
        'colspan' => 'full',
        'class' => array('subtotal'),
      ),
    ),
  );
  }
}
/**
 * Implements hook_init().
 */
function agres_bookings_init() {
  drupal_add_css(drupal_get_path('module', 'agres_bookings') . '/agres_bookings.css');
}

/**
 * Formats the cart contents table on the checkout page.
 *
 * @param $show_subtotal
 *   TRUE or FALSE indicating if you want a subtotal row displayed in the table.
 *
 * @return
 *   The HTML output for the cart review table.
 *
 * @ingroup themeable
 */
function theme_agres_bookings_cart_review_table($variables) {

//  $items = $variables['items'];
//  $show_subtotal = $variables['show_subtotal'];
//
//  $subtotal = 0;
//
//  // Set up table header.
//  $header = array(
//    array(
//      'data' => t('booked Units'),
//      'class' => 'qty',
//    ),
//    array(
//      'data' => t('Rate / Unit type'),
//      'class' => 'rateunittype',
//    ),
//    array(
//      'data' => t('Time info'),
//      'class' => 'products',
//    ),
//    array(
//      'data' => t('Price'),
//      'class' => 'price',
//    ),
//  );
//
//  $timeinfo = '';
//  // Set up table rows.
//  foreach ($items as $item) {
//
//    if (module_exists('agres_categories') && module_exists('agres_rates') && $item->data['module'] == 'agres_categories') {
//      $tmeasuringunit = _agres_categories_callfilter(1, $item->data['measuringunit']);
//      if (isset($item->data['agres_singletimes'])) {
//
//        $timeinfo .= ' ' . $item->data['agres_singletimes'][0] . ' <-> ' . end($item->data['agres_singletimes']) . ' = ' . $tmeasuringunit . ' count: ' . count($item->data['agres_singletimes']);
//      }
//    } else {
//      $bookingmode = $item->data['bookingmode'];
//      $tmpcheckin = new DateObject($item->data['checkintime'], null, 'Y-m-d H:i:s');
//      $tmpcheckout = new DateObject($item->data['checkouttime'], null, 'Y-m-d H:i:s');
//
//      if ($bookingmode == BOOKING_MODE_BY_DAYS) {
//        $times = $tmpcheckin->difference($tmpcheckout, 'days');
//      } elseif ($bookingmode == BOOKING_MODE_BY_HOURS) {
//        $times = ceil($tmpcheckin->difference($tmpcheckout, 'hours'));
//      }
//
//      $tmeasuringunit = $item->data['measuringunit'];
//      $timeinfo .= ' ' . $item->data['checkintime'] . '|--->' . $item->data['checkouttime'] . ' => ' . $tmeasuringunit . '(s): ' . $times;
//    }
//    $total = $item->price * $item->qty;
//    $subtotal += $total;
//
//    $description = check_plain($item->title) . uc_product_get_description($item);
//
//    // Remove node from context to prevent the price from being altered.
//    $rows[] = array(
//      array(
//        'data' => t('@qty', array('@qty' => $item->qty / $item->data['times'])),
//        'class' => 'qty',
//      ),
//      array(
//        'data' => $description,
//        'class' => array('rateunittype'),
//      ),
//      array(
//        'data' => $timeinfo,
//        'align' => 'left',
//        'class' => array('products'),
//      ),
//      array(
//        'data' => array(
//          '#theme' => 'uc_price',
//          '#price' => $total,
//        ),
//        'class' => array('price'),
//      ),
//    );
//  }
//
//  // Add the subtotal as the final row.
//  if ($show_subtotal) {
//    $rows[] = array(
//      'data' => array(
//        // One cell
//        array(
//          'data' => array(
//            '#theme' => 'uc_price',
//            '#prefix' => '<span id="subtotal-title">' . t('Subtotal:') . '</span> ',
//            '#price' => $subtotal,
//          ),
//          // Cell attributes
//          'colspan' => 4,
//          'class' => array('subtotal'),
//        ),
//      ),
//      // Row attributes
//      'class' => array('subtotal'),
//    );
//  }
//
//  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('cart-review'))));
  $items = $variables['items'];
  $show_subtotal = $variables['show_subtotal'];

  $subtotal = 0;

  // Set up table header.
  $header = array(
    array('data' => theme('uc_qty_label'), 'class' => array('qty')),
    array('data' => t('Products'), 'class' => array('products')),
    array('data' => t('Price'), 'class' => array('price')),
  );

  // Set up table rows.
  $display_items = entity_view('uc_order_product', $items, 'cart');
  if (!empty($display_items['uc_order_product'])) {
    foreach (element_children($display_items['uc_order_product']) as $key) {
      $display_item = $display_items['uc_order_product'][$key];
      if (count(element_children($display_item))) {
        $total = $display_item['#total'];
        $subtotal += $total;
        $description = $display_item['title']['#markup'];
        if (!empty($display_item['description']['#markup'])) {
          $description .= $display_item['description']['#markup'];
        }
        $qty = $display_item['qty']['#default_value'];
        $suffix = !empty($display_item['#suffixes']) ? implode(' ', $display_item['#suffixes']) : '';

        $rows[] = array(
          array('data' => array('#theme' => 'uc_qty', '#qty' => $qty), 'class' => array('qty')),
          array('data' => $description, 'class' => array('products')),
          array('data' => array('#theme' => 'uc_price', '#price' => $total, '#suffix' => $suffix), 'class' => array('price')),
        );
      }
    }
  }

  // Add the subtotal as the final row.
  if ($show_subtotal) {
    $rows[] = array(
      'data' => array(
        // One cell
        array(
          'data' => array(
            '#theme' => 'uc_price',
            '#prefix' => '<span id="subtotal-title">' . t('Subtotal:') . '</span> ',
            '#price' => $subtotal,
          ),
          // Cell attributes
          'colspan' => 3,
          'class' => array('subtotal'),
        ),
      ),
      // Row attributes
      'class' => array('subtotal'),
    );
  }

  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('cart-review'))));  
}

/**
 * @todo Documentation
 */
function agres_bookings_uc_cart_pane($items) {
  $panes['agres_time_info'] = array(
    'title' => t('AGreservations Dates Info Pane'),
    'enabled' => TRUE,
    'weight' => -4,
    'body' => !is_null($items) ? drupal_get_form('agres_bookings_cart_info_form', $items) : '',
  );
  $panes['agres_booking_cart'] = array(
    'title' => t('Agreservations cart contents'),
    'enabled' => TRUE,
    'weight' => -3,
    'body' => !is_null($items) ? drupal_get_form('agres_bookings_cart_view_form', $items) : '',
  );
  return $panes;
}

/**
 * Displaying info of booking like chekin and chekoutdate
 */
function agres_bookings_cart_info_form($form, &$form_state, $items = NULL) {
  $items = uc_cart_get_contents();
  reset($items);
  $lang = 'und';
  $firstitem = current($items);
  if (isset($firstitem->data['agreservations_resid'])) {
    if ($firstitem->data['module'] == 'agres_categories') {
      $tmpcat = node_load($firstitem->data['agres_category_nid']);
      $tmeasuringunit = $firstitem->data['measuringunit'];
      $bookingmode = $firstitem->data['bookingmode'];
      $tmpcheckin = new DateObject($firstitem->data['checkintime']);
      $tmpcheckout = new DateObject($firstitem->data['checkouttime']);
      $times = 0;
      if ($bookingmode == BOOKING_MODE_BY_DAYS) {
        $times = $tmpcheckin->difference($tmpcheckout, 'days');
      } elseif ($bookingmode == BOOKING_MODE_BY_HOURS) {
        $times = ceil($tmpcheckin->difference($tmpcheckout, 'hours'));
      } 
      
      $lang = field_language('node',$tmpcat,'field_agres_count_last_dh');
      $agres_singletimes = _agreservations_create_date_range($tmpcheckin->format('Y-m-d H:i:s'), $tmpcheckout->format('Y-m-d H:i:s'));
      if (!isset($tmpcat->field_agres_count_last_dh[$lang]) || ($tmpcat->field_agres_count_last_dh[$lang][0]['value'] == 2)) {      
           array_pop($agres_singletimes); //!!!
      }
      $times = count($agres_singletimes);
      $form['agres_info'] = array(
        '#markup' => '<div><b>' . t('Booking from: %checkin to %checkout = %measuringunit : %times', array(
          '%checkin' => $tmpcheckin->format(variable_get('date_format_short', 'Y-m-d H:i')),
          '%measuringunit' => $tmeasuringunit,
          '%checkout' => $tmpcheckout->format(variable_get('date_format_short', 'Y-m-d H:i')),
          '%times' => $times,
        ))
        . '</b></div>',
        '#weight' => -15,
      );
     unset($tmpcat);
      return $form;
    } else {
      $form['agres_info'] = array(
        '#markup' => '<div><b>' . t('Category not set!'),
      );
      return $form;
    }
  }
}
function agres_bookings_cart_view_form_ajax($form, &$form_state, $items = NULL) {
//  drupal_set_message('<pre>agres_categories_uc_cart_display '.print_r($form_state,false).'</pre>');
// $form['actions']['update'] = array(
//    '#type' => 'submit',
//    '#name' => 'update-cart',
//    '#value' => t('Update cart'),
//  ); 
//     foreach ($cart->items as $item) {
//      module_invoke($item['module'], 'uc_update_cart_item', $item['nid'], unserialize($item['data']), $item['qty']);
//    }
//
//    // Rebuild the cached cart items.
//    uc_cart_get_contents(NULL, 'rebuild');
  if ($items == NULL) {
    $items = uc_cart_get_contents(uc_cart_get_id());
  }
//  drupal_set_message('<pre>agres_categories_uc_cart_display '.print_r($form_state,false).'</pre>');
  $form['#attached']['css'][] = drupal_get_path('module', 'uc_cart') . '/uc_cart.css';

  $form['items'] = array(
    '#type' => 'tapir_table',
    '#tree' => TRUE,
  );
//
  $i = 0;
  foreach ($items as $item) {
    module_invoke_all('uc_cart_item', 'view', $item);
    $display_item = module_invoke($item->module, 'uc_cart_display', $item);
    if (!empty($display_item)) {
      $form['items'][$i] = $display_item;
      $form['items'][$i]['image'] = uc_product_get_picture($display_item['nid']['#value'], 'uc_cart');

      $description = $display_item['title']['#markup'] . $display_item['description']['#markup'];
      $form['items'][$i]['agrdesc']['#markup'] = $description;
       
      $form['items'][$i]['cart_item_id'] = array(
        '#type' => 'hidden',
        '#value' => $item->cart_item_id,
      );
      $form['items'][$i]['unit_price'] = array(
        '#price' => $display_item['#unit_price'],
        '#theme' => 'uc_price',
      );

      $form['items'][$i]['title']['#type'] = 'value';
      $form['items'][$i]['description']['#type'] = 'value';


      if (empty($display_item['qty'])) {
        $form['items'][$i]['qty'] = array(
          '#type' => 'hidden',
          '#value' => 0,
        );
      }

      $form['items'][$i]['total'] = array(
        '#theme' => 'uc_price',
        '#price' => $display_item['#total'],
      );
      $i++;
    }
  }
//  
  $form['items'] = tapir_get_table('agres_bookings_cart_view_table', $form['items']);
   uc_attributes_in_cart_ag_form_alter($form, $form_state,'agres_bookings_cart_view_form_ajax');
//  $form['actionss'] = array('#type' => 'actions');
////  // If the continue shopping element is enabled...
//  if (($cs_type = variable_get('uc_continue_shopping_type', 'link')) !== 'none') {
//    // Setup the text used for the element.
//    $cs_text = variable_get('uc_continue_shopping_text', '') ? variable_get('uc_continue_shopping_text', '') : t('Continue shopping');
//
//    // Add the element to the form based on the element type.
//    if (variable_get('uc_continue_shopping_type', 'link') == 'link') {
//      $form['continue_shopping'] = array(
//        '#markup' => l($cs_text, uc_cart_continue_shopping_url()),
//      );
//    } elseif (variable_get('uc_continue_shopping_type', 'link') == 'button') {
//      $form['actionss']['continue_shopping'] = array(
//        '#type' => 'submit',
//        '#value' => $cs_text,
//        '#submit' => array('uc_cart_view_form_submit', 'uc_cart_view_form_continue_shopping'),
//      );
//    }
//  }
//
//  // Add the control buttons for updating and proceeding to checkout.
//  $form['actionss']['update'] = array(
//    '#type' => 'submit',
//    '#name' => 'update-cart',
//    '#value' => t('Update cart'),
//  );
//  if (variable_get('uc_checkout_enabled', TRUE)) {
//    $form['actionss']['checkout'] = array(
//      '#type' => 'submit',
//      '#value' => t('Checkout'),
//      '#submit' => array('uc_cart_view_form_submit', 'uc_cart_view_form_checkout'),
//    );
//  }
// drupal_set_message('<pre>agres_bookings_cart_view_form  '.print_r($form,true).'</pre>');
  return $form;
}
function agres_bookings_cart_view_form($form, &$form_state, $items = NULL) {
//  if ($items == NULL) {
//    $items = uc_cart_get_contents(uc_cart_get_id());
//  }
//  $form['#attached']['css'][] = drupal_get_path('module', 'uc_cart') . '/uc_cart.css';
//
//  $form['items'] = array(
//    '#type' => 'tapir_table',
//    '#tree' => TRUE,
//  );
////drupal_set_message('<pre>agres_categories_uc_cart_display '.print_r($form_state,true).'</pre>');
//  $i = 0;
//  foreach ($items as $item) {
//    module_invoke_all('uc_cart_item', 'view', $item);
//    $display_item = module_invoke($item->module, 'uc_cart_display', $item);
//    if (!empty($display_item)) {
//      $form['items'][$i] = $display_item;
//      $form['items'][$i]['image'] = uc_product_get_picture($display_item['nid']['#value'], 'uc_cart');
//
//      $description = $display_item['title']['#markup'] . $display_item['description']['#markup'];
//      $form['items'][$i]['agrdesc']['#markup'] = $description;
//       
//      $form['items'][$i]['cart_item_id'] = array(
//        '#type' => 'hidden',
//        '#value' => $item->cart_item_id,
//      );
//      $form['items'][$i]['unit_price'] = array(
//        '#price' => $display_item['#unit_price'],
//        '#theme' => 'uc_price',
//      );
//
//      $form['items'][$i]['title']['#type'] = 'value';
//      $form['items'][$i]['description']['#type'] = 'value';
//
//
//      if (empty($display_item['qty'])) {
//        $form['items'][$i]['qty'] = array(
//          '#type' => 'hidden',
//          '#value' => 0,
//        );
//      }
//
//      $form['items'][$i]['total'] = array(
//        '#theme' => 'uc_price',
//        '#price' => $display_item['#total'],
//      );
//      $i++;
//    }
//  }
//  
//  $form['items'] = tapir_get_table('agres_bookings_cart_view_table', $form['items']);
//  $form['actions'] = array('#type' => 'actions');
//  // If the continue shopping element is enabled...
//  if (($cs_type = variable_get('uc_continue_shopping_type', 'link')) !== 'none') {
//    // Setup the text used for the element.
//    $cs_text = variable_get('uc_continue_shopping_text', '') ? variable_get('uc_continue_shopping_text', '') : t('Continue shopping');
//
//    // Add the element to the form based on the element type.
//    if (variable_get('uc_continue_shopping_type', 'link') == 'link') {
//      $form['continue_shopping'] = array(
//        '#markup' => l($cs_text, uc_cart_continue_shopping_url()),
//      );
//    } elseif (variable_get('uc_continue_shopping_type', 'link') == 'button') {
//      $form['actions']['continue_shopping'] = array(
//        '#type' => 'submit',
//        '#value' => $cs_text,
//        '#submit' => array('uc_cart_view_form_submit', 'uc_cart_view_form_continue_shopping'),
//      );
//    }
//  }
//
//  // Add the control buttons for updating and proceeding to checkout.
//  $form['actions']['update'] = array(
//    '#type' => 'submit',
//    '#name' => 'update-cart',
//    '#value' => t('Update cart'),
//  );
//  if (variable_get('uc_checkout_enabled', TRUE)) {
//    $form['actions']['checkout'] = array(
//      '#type' => 'submit',
//      '#value' => t('Checkout'),
//      '#submit' => array('uc_cart_view_form_submit', 'uc_cart_view_form_checkout'),
//    );
//  }
//// drupal_set_message('<pre>agres_bookings_cart_view_form  '.print_r($form,true).'</pre>');
//  return $form;

    $form['#attached']['css'][] = drupal_get_path('module', 'uc_cart') . '/uc_cart.css';

  $form['items'] = array(
    '#type' => 'tapir_table',
    '#tree' => TRUE,
  );

  $i = 0;
  $display_items = entity_view('uc_cart_item', $items, 'cart');
  foreach (element_children($display_items['uc_cart_item']) as $key) {
    $display_item = $display_items['uc_cart_item'][$key];
    if (count(element_children($display_item))) {
      $form['items'][$i] = $display_item;
      $form['items'][$i]['image'] = uc_product_get_picture($display_item['nid']['#value'], 'uc_cart');

      $description = $display_item['title']['#markup'] . $display_item['description']['#markup'];
      $form['items'][$i]['desc']['#markup'] = $description;

      if (isset($form['items'][$i]['remove'])) {
        // Backward compatibility with old checkbox method.
        if ($form['items'][$i]['remove']['#type'] == 'checkbox') {
          $form['items'][$i]['remove'] = array('#type' => 'submit', '#value' => t('Remove'));
        }

        $form['items'][$i]['remove']['#name'] = 'remove-' . $i;
      }

      $form['items'][$i]['title']['#type'] = 'value';
      $form['items'][$i]['description']['#type'] = 'value';

      if (empty($display_item['qty'])) {
        $form['items'][$i]['qty'] = array(
          '#type' => 'hidden',
          '#value' => 0,
        );
      }

      $form['items'][$i]['total'] = array(
        '#theme' => 'uc_price',
        '#price' => $display_item['#total'],
      );
      if (!empty($display_item['#suffixes'])) {
        $form['items'][$i]['total']['#suffixes'] = $display_item['#suffixes'];
      }
    }
    $i++;
  }

  $form['items'] = tapir_get_table('uc_cart_view_table', $form['items']);

  $form['actions'] = array('#type' => 'actions');

  // If the continue shopping element is enabled...
  if (($cs_type = variable_get('uc_continue_shopping_type', 'link')) !== 'none') {
    // Setup the text used for the element.
    $cs_text = variable_get('uc_continue_shopping_text', '') ? variable_get('uc_continue_shopping_text', '') : t('Continue shopping');

    // Add the element to the form based on the element type.
    if (variable_get('uc_continue_shopping_type', 'link') == 'link') {
      $form['actions']['continue_shopping'] = array(
        '#markup' => l($cs_text, uc_cart_continue_shopping_url()),
      );
    }
    elseif (variable_get('uc_continue_shopping_type', 'link') == 'button') {
      $form['actions']['continue_shopping'] = array(
        '#type' => 'submit',
        '#value' => $cs_text,
        '#submit' => array('uc_cart_view_form_submit', 'uc_cart_view_form_continue_shopping'),
      );
    }
  }

  // Add the control buttons for updating and proceeding to checkout.
  $form['actions']['update'] = array(
    '#type' => 'submit',
    '#name' => 'update-cart',
    '#value' => t('Update cart'),
  );
  $form['actions']['checkout'] = array(
    '#theme' => 'uc_cart_checkout_buttons',
  );
  if (variable_get('uc_checkout_enabled', TRUE)) {
    $form['actions']['checkout']['checkout'] = array(
      '#type' => 'submit',
      '#value' => t('Checkout'),
      '#submit' => array('uc_cart_view_form_submit', 'uc_cart_view_form_checkout'),
    );
  }

  return $form;
}

/**
 * Display a page allowing the customer to view the contents of his or her cart.
 *
 * ...taken and adjusted from the function uc_cart_view_form from the uc_cart.module.
 * i don´t know if this is the best way to change the display of the cart...
 */
function agres_bookings_cart_view_form_old($form, $form_state, $items = NULL) {

  $form['items'] = array(
    '#type' => 'tapir_table',
    '#tree' => TRUE,
  );

  $context = array(
    'revision' => 'themed-original',
    'type' => 'amount',
  );
  $i = 0;
  foreach ($items as $item) {
    $display_item = module_invoke($item->module, 'cart_display', $item);
    if (!empty($display_item)) {
      $form['items'][$i] = $display_item;
      $form['items'][$i]['image']['#value'] = uc_product_get_picture($display_item['nid']['#value'], 'cart');

      $description = $display_item['title']['#value'] . $display_item['description']['#value'];
      $form['items'][$i]['agrdesc']['#value'] = $description;

      $form['items'][$i]['title']['#type'] = 'value';
      $form['items'][$i]['description']['#type'] = 'value';

      $form['items'][$i]['unit_price'] = array(
        '#value' => theme('uc_price', array('price' => $display_item['#unit_price'])),
        '#theme' => 'uc_cart_view_price',
      );
      if (empty($display_item['qty'])) {
        $form['items'][$i]['qty'] = array(
          '#value' => '',
        );
      }

      $form['items'][$i]['total'] = array(
        '#value' => theme('uc_price', array('price' => $display_item['#total'])),
        '#theme' => 'uc_cart_view_price',
      );
      $i++;
    }
  }

  $form['items'] = tapir_get_table('agres_bookings_cart_view_table', $form['items']);

  // If the continue shopping element is enabled...
  if (($cs_type = variable_get('uc_continue_shopping_type', 'link')) !== 'none') {

    // Setup the text used for the element.
    $cs_text = variable_get('uc_continue_shopping_text', '') ? variable_get('uc_continue_shopping_text', '') : t('Continue shopping');

    // Add the element to the form based on the element type.
    if (variable_get('uc_continue_shopping_type', 'link') == 'link') {
      $form['continue_shopping'] = array(
        '#value' => l($cs_text, uc_cart_continue_shopping_url()),
      );
    } elseif (variable_get('uc_continue_shopping_type', 'link') == 'button') {
      $form['continue_shopping'] = array(
        '#type' => 'submit',
        '#value' => $cs_text,
        '#submit' => array('uc_cart_view_form_submit'),
      );
      $form['continue_shopping_text'] = array(
        '#type' => 'hidden',
        '#value' => $cs_text,
      );
    }
  }

  // Add the control buttons for updating and proceeding to checkout.
  $form['update'] = array(
    '#type' => 'submit',
    '#value' => t('Update cart'),
    '#submit' => array('uc_cart_view_form_submit'),
  );
  if (variable_get('uc_checkout_enabled', TRUE)) {
    $form['checkout'] = array(
      '#type' => 'submit',
      '#value' => t('Checkout'),
      '#submit' => array('uc_cart_view_form_submit'),
    );
  }
  return $form;
}

/**
 * Implements hook_node_view().
 */
function agres_bookings_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'agreservation') {
    if (user_access('access agres_bookings')) {
      $lang = 'und';
      $lang = field_language('node', $node,'field_agres_orderid');
//      drupal_set_message('<pre>agres_bookings_node_view' . print_r($node, true) . '</pre>');
      if (!isset($node->field_agres_orderid[$lang][0]['value']) || (empty($node->field_agres_orderid[$lang][0]['value']))) {
        $node->content['agres_createorder'] = array(
          '#markup' => '<a class="Button" href="' . base_path() . 'agres_bookings/' . $node->nid . '"><span class="btn">' . '&nbsp;&nbsp;' . t('CREATE ORDER') . '&nbsp;&nbsp;' . '</span></a><br><br>',
          '#weight' => -50,
        );
      }
    }
  }
}

/**
 * Simulate the pane contents for processing.
 *
 * This would change a lot depending on how your data is structured. Here we are
 * pulling info out of various storage arrays. The important things are that the
 * pane values get populated and $_POST gets the payment info it needs. If you
 * are using modules that create their own panes, they will have to be added;
 * this is a pretty vanilla UC install.
 *
 * @param type $account
 * @return string
 */
function _agres_bookings_fill_checkout_pane_values($account) {
  $pane_values['customer'] = array(
    'primary_email' => $account->mail,
  );
  $pane_values['billing'] = array(
    'billing_address_select' => '',
    'billing_first_name' => $account->first_name,
    'billing_last_name' => $account->last_name,
    'billing_company' => $account->company,
    'billing_street1' => $account->street1,
    'billing_street2' => $account->street2,
    'billing_city' => $account->city,
    // 840 is the US
    'billing_country' => $account->country,
    // state #
    'billing_zone' => $account->zone,
    'billing_postal_code' => $account->postal_code,
    'billing_phone' => $account->phone,
  );

  $pane_values['payment'] = array(
    'current_total' => NULL,
    'payment_method' => 'other',
  );

  $pane_values['comments'] = array(
    'comments' => 'created through bookingcalendar/agreservation form',
  );

  return $pane_values;
}

function _agres_bookings_create_order($account) {
  $error = FALSE;
  // A cart id (cid) is just the uid for existing accounts. You could add any
  // number of items to a cart
  // uc_cart_add_item(ITEM_NID, 1, NULL, $account->uid, FALSE, FALSE, TRUE);

  $cart_form_state['values']['op'] = t('Pending');
  /*
   * uc_cart_update_item_object is the important part of
   * uc_cart_view_form_submit(), the rest is redirection and sessions.
   * A user would then go off to cart/checkout where they could enter payment
   * info via uc_cart_checkout_form().
   *
   * We don't even have to do this because all the modifications would do is
   * change cart quantities and we're beyond that.
   *
   * uc_cart_checkout_form() handily checks the referer so it is impossible to
   * call it programmatically. there is a lot of display stuff going on in there,
   * but CC info is also being gathered. In our case, we already have the CC info
   * in storage.
   */

  $order = uc_order_new($account->uid);
  $order->products = uc_cart_get_contents($account->uid);

  // This bit is clipped from uc_cart_checkout_form_validate()
  $context = array(
    'revision' => 'original',
    'type' => 'order_product',
  );
  foreach ($order->products as $key => $item) {
    $price_info = array(
      'price' => $item->price,
      'qty' => $item->qty,
    );
    $context['subject'] = array(
      'order' => $order,
      'product' => $item,
      'node' => node_load($item->nid),
    );

    // Get the altered price per unit, as ordered products have a locked-in
    // price. Price altering rules may change over time, but the amount paid
    // by the customer does not after the fact.
    $price = $item->sell_price / $item->qty;
    if ($order->products[$key]->price != $price) {
      $order->products[$key]->data['altered_price'] = $price;
    }
  }

  $order->order_total = uc_order_get_total($order, TRUE);


  $order->line_items = uc_order_load_line_items($order, TRUE);
  uc_order_save($order);

  /*
   * Next onto /cart/checkout/review which is mostly about displaying review
   * info. uc_cart_checkout_review_form_submit() is the finalize button on this
   * page. It does some invocations for UC 'submit', then redirects the user to
   * cart/checkout/complete
   */

  // Clipped from uc_cart_checkout_review_form_submit()
  // Invoke it on a per-module basis instead of all at once.
  foreach (module_list() as $module) {
    $function = $module . '_order';
    if (function_exists($function)) {
      // $order must be passed by reference.
      $result = $function('submit', $order, NULL);

      $msg_type = 'status';
    
      if ($result[0]['pass'] === FALSE) {
        $error = $function;
        break;
      }
    }
  }

  uc_cart_complete_sale($order, FALSE);

  return $order;
}
   function agres_bookings_uc_checkout_complete($order, $account) {
//     drupal_set_message('<pre>pppppppppppppppp  '.print_r($account,true).'</pre>');
//     _agreservations_update_Reservation($resnid, $units, $checkin, $checkout, $userid, $orderid, $agresstatus);
//     $field = content_fields('field_agres_userref');
//     $db_info = content_database_info($field);
//
//     $fieldname = $db_info['columns']['uid']['column'];
//
//     $tablename = $db_info['table'];
//
//     db_query("UPDATE {" . $tablename . "} SET $fieldname = %d WHERE nid = %d", $account->uid, $order->products[0]->data['agreservations_resid']);
//
//     content_clear_type_cache();
//     uc_cart_empty(uc_cart_get_id());
   }

function agres_bookings_uc_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'new':
//      drupal_set_message('<pre>newnew '.print_r($arg1,true).'</pre>');
      break;
    case 'submit':
      $pass = TRUE;
      if (module_exists('uc_credit') && $arg1->payment_method == 'credit') {
        $ordertotaldepositmultiplikator = variable_get('agres_uc_credit_deposit', '1');
        $arg1->order_total = $arg1->order_total * floatval($ordertotaldepositmultiplikator);
      }
      break;
    case 'presave':      
      foreach ($arg1->products as $product) {
        if (isset($product->data['agreservations_resid'])) {
          //for now, just 1 attachable associated reservation per order in index 0:
          $arg1->field_agr_associated_res['und'][0]['nid'] = $product->data['agreservations_resid'];
        }      
      }
//      drupal_set_message('<pre>presave: '.print_r($arg1,true).'</pre>');
      break;
    case 'save':
      foreach ($arg1->products as $product) {
        if (isset($product->data['agreservations_resid'])) {
           _agreservations_update_Reservation($product->data['agreservations_resid'],null,null ,null , $arg1->uid,$arg1->order_id, AGRES_STATUS_ONLINE_ORDER_CREATED);
        }
      }
      break;

    case 'load':

      if (isset($_SESSION['agres_bookings_checkintime']) && isset($_SESSION['agres_bookings_checkouttime'])) {
        unset($_SESSION['agres_bookings_checkintime']);
        unset($_SESSION['agres_bookings_checkouttime']);
        $_SESSION['agres_bookings_bookedunits'] = 0;
        $_SESSION['agres_bookings_step'] = 1;
      }
      break;

    case 'delete':
      if (isset($arg1->products[0]->data['agreservations_resid'])) {
        $resnode = NULL;
        $resnode = node_load($arg1->products[0]->data['agreservations_resid'], NULL, TRUE);
        if (isset($resnode)) {
          node_delete($resnode);
        }
      }

      break;
  }
}

/**
 * Implements hook_order_pane().
 *
 * This will introduce the callbackfunction agres_bookings_pane_reservation
 * which lets the admin/receptionist make a unitreservation/add the unittypes as
 * products to the order by using a similar multistepform like in the anonymous
 * onlinebooking
 */
function agres_bookings_uc_order_pane() {

  $panes['agres_bookingsunitsearch'] = array(
    'callback' => 'agres_bookings_pane_reservation',
    'title' => t('Unit reservation'),
    'desc' => t('Define Checkin and Checkout Dates and Unit types'),
    'class' => 'pos-top',
    'weight' => -1,
    'show' => array('view', 'edit', 'customer'),
  );

  return $panes;
}

/**
 * Handle the "agres_bookings" order pane.
 */
function _agres_bookings_show_dates($res) {
  $dateTimezone1 = new DateTimeZone(date_default_timezone());
  $lang = 'und';
  $lang = field_language('node', $res,'field_agres_rdate');
  $dateTime1 = new DateTime($res->field_agres_rdate[$lang][0]['value'], $dateTimezone1);
  $dateTime2 = new DateTime($res->field_agres_rdate[$lang][0]['value2'], $dateTimezone1);
  $offset = $dateTime1->getOffset();
  $offset = $offset * 1;
  $dateTime1->modify($offset . 'seconds');
  $dateTime2->modify($offset . 'seconds');
  $displayreservation = l(t('checkin:') . $dateTime1->format('Y-m-d H:i:s') . '  ' . t('checkout:') . $dateTime2->format('Y-m-d H:i:s'), 'node/' . $res->nid);
  return $displayreservation;
}

/**
 * @todo Documentation
 */
function agres_bookings_pane_reservation($op, $order, &$form = NULL, &$form_state = NULL) { //($op, $arg1) {
  switch ($op) {
    case 'view':
      $reservations = _agres_bookings_get_reservation_by_orderid($order->order_id);
      $res = node_load($reservations[0]->nid);
      $displayreservation = _agres_bookings_show_dates($res);
      $form['view_reservation'] = array(
        '#markup' => $displayreservation,
      );
      return $form;
    case 'customer':
      $reservations = _agres_bookings_get_reservation_by_orderid($order->order_id);
      $res = node_load($reservations[0]->nid);
      $displayreservation = _agres_bookings_show_dates($res);
      $form['view_reservation'] = array(
        '#markup' => $displayreservation,
      );
      return $form;
    case 'edit-form':
      $reservations = array();
      $reservations = _agres_bookings_get_reservation_by_orderid($order->order_id);
      if (count($reservations)>0) {
         $res = node_load($reservations[0]->nid);
         $displayreservation = _agres_bookings_show_dates($res);    
         $form['view_reservation'] = array(
           '#markup' => $displayreservation,
         );
      }
      return $form;

    case 'edit-title':
      // Has to return something.
      return '';
    case 'edit-theme':
      return drupal_render($form['view_reservation']);
  }
}

/**
 * Get agreservations by orderid
 */
function _agres_bookings_get_reservation_by_orderid($orderid) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('type', 'agreservation');
  $query->innerJoin('field_data_field_agres_orderid', 'fao', 'n.nid = fao.entity_id', array());
  $query->addField('fao', 'field_agres_orderid_value');
  $query->where('fao.field_agres_orderid_value = :orderid', array(':orderid' => $orderid));
  $res = $query->execute();

  $reservations = array();

  while ($reservation = $res->fetchObject()) {
    $reservations[] = node_load($reservation->nid);
  }
  return $reservations;
}

/**
 * @todo Documentation
 */
function agres_bookings_multi_form_submit($form, &$form_state) {

  if (empty($_SESSION['agres_bookings_step'])) {
    // We are coming in without a step, so default to step 1
    $_SESSION['agres_bookings_step'] = 1;
  }
  $form_state['storage']['values'][$form_state['storage']['step']] = $form_state['values'];

  // Check the button that was clicked and action the step change
  $form_state['rebuild'] = TRUE;
  if ($form_state['clicked_button']['#id'] == 'edit-search') {
    _agres_bookings_search_action($form, $form_state);
    $_SESSION['agres_bookings_step']++;
  } elseif ($form_state['clicked_button']['#id'] == 'edit-previous') {
    $_SESSION['agres_bookings_step']--;
  } elseif ($form_state['clicked_button']['#id'] == 'edit-reservation') {
    _agres_bookings_reserve_action($form_state);
  }
}

/**
 * @todo Documentation
 */
function agres_bookings_menu() {
  $access = array('create_order_for_other');
  $items['agres_bookings/%'] = array(
    'title' => 'Agreservations',
    'page callback' => 'agres_bookings_create_res_order',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => $access,
    'description' => t('Create Order for Reservation'),
    'type' => MENU_CALLBACK,
  ); 
  return $items;
}


/**
 * _agres_bookings_reserve_and_fillcart
 * @author     Andreas Gill
 * @param      $resnid nid of existing reservation.
 * @param      $uid user id.
 * @param      $puserrequest array which holds the userrequest.
 * @param      $categorynid category node id of requested unit type to reserve.
 * @param      $pselectunittype the selected unit type to add to cart.
 * @param      $goto the target where to go after function is done.
 */

function _agres_bookings_reserve_and_fillcart($resnid = null, $uid = null, $puserrequest = array(), $categorynid = 0, $pselectunittype = 0, $userrequestunit = array(), $goto = '',&$form_state) {
  if ($resnid <> null) {
    $uid = $uid ? $uid : uc_cart_get_id();
    $resnode = node_load($resnid);
    $dateTimezone1 = new DateTimeZone(date_default_timezone());
    $lang = 'und';
    $lang = field_language('node', $resnode,'field_agres_rdate');    
    $tmpcheckindt = new DateTime($resnode->field_agres_rdate[$lang][0]['value'], $dateTimezone1);
    $tmpcheckoutdt = new DateTime($resnode->field_agres_rdate[$lang][0]['value2'], $dateTimezone1);
    $offset = $tmpcheckindt->getOffset();
    $offset = $offset * 1;
    $tmpcheckindt->modify($offset . 'seconds');
    $tmpcheckoutdt->modify($offset . 'seconds');
    $tmpcheckin = new DateObject($tmpcheckindt->format('Y-m-d H:i:s'));
    $tmpcheckout = new DateObject($tmpcheckoutdt->format('Y-m-d H:i:s'));
    $unitsToBook = array();
    $lang = 'und';
    $lang = field_language('node', $resnode,'field_agres_ref_unit');     
    foreach ($resnode->field_agres_ref_unit[$lang] as $key => $refunit) {
      $tmpunit = node_load($refunit['nid']);
      $lang = 'und';
      $lang = field_language('node', $tmpunit,'field_agreservations_unittype'); 
      $tmpunittype = $tmpunit->field_agreservations_unittype[$lang][0]['nid'];
      $unitsToBookAll[$tmpunittype][] = $tmpunit;
    }
    foreach ($unitsToBookAll as $kutba => $unitsToBook) {
      $tmpunittype2 = node_load($kutba);
      // Should be only one
      $lang = 'und';
      $lang = field_language('node', $tmpunittype2,'field_agres_ref_category');       
      $tmpunittype2->field_agres_ref_category;
      if (module_exists('agres_categories')) {
        $tmpcat = node_load($tmpunittype2->field_agres_ref_category[$lang][0]['nid']);
        $lang = 'und';
        $lang = field_language('node', $tmpcat,'field_agres_bookingmode');           
        $bookmode = $tmpcat->field_agres_bookingmode[$lang][0]['value'];
        $lang = field_language('node', $tmpcat,'field_agres_measuringunit'); 
        $measureingunit = $tmpcat->field_agres_measuringunit[$lang][0]['value'];
      } else {
        $bookmode = 2;
        $measureingunit = t('nights');
      }
      if ($bookmode == BOOKING_MODE_BY_DAYS) {
        $times = $tmpcheckin->difference($tmpcheckout, 'days');
      } elseif ($bookmode == BOOKING_MODE_BY_HOURS) {
        $times = ceil($tmpcheckin->difference($tmpcheckout, 'hours'));
      }      
      $agres_singletimes = _agreservations_create_date_range($tmpcheckin->format('Y-m-d H:i:s'), $tmpcheckout->format('Y-m-d H:i:s'));
      $lang = 'und';
      $lang = field_language('node', $tmpcat,'field_agres_count_last_dh');        
      if (!isset($tmpcat->field_agres_count_last_dh[$lang]) || ($tmpcat->field_agres_count_last_dh[$lang][0]['value'] == 2)) {

        array_pop($agres_singletimes); //!!!
      }

      $times = count($agres_singletimes);
      $data = array(
        'agres' => array('agreservations_request' => ''),
        'agres_category_nid'=>$tmpcat->nid,
        'agreservations_resid' => $resnid,
        'module' => 'agres_categories',
        'times' => $times,
        'agres_singletimes' => $agres_singletimes,
        'agres_diffproducts' => '',
        'measuringunit' => $measureingunit,
        'bookingmode' => $bookmode,
        'checkintime' => $tmpcheckin->format('Y-m-d H:i:s'),
        'checkouttime' => $tmpcheckout->format('Y-m-d H:i:s'),
      );
      $_SESSION['agres_bookings_checkintime'] = $tmpcheckin->format(variable_get('date_format_short', 'Y-m-d H:i:s'));
      $_SESSION['agres_bookings_checkouttime'] = $tmpcheckout->format(variable_get('date_format_short', 'Y-m-d H:i:s'));
      $_SESSION['agres_bookings_times'] = $times;
      $_SESSION['agres_bookings_measuringunit'] = $measureingunit;
      foreach ($unitsToBook as $unittobook) {
      $lang = 'und';
      $lang = field_language('node', $unittobook,'field_agreservations_unittype');          
        $unittyporrateesums[$unittobook->field_agreservations_unittype[$lang][0]['nid']][] = $unittobook->nid;
      }
      foreach ($unittyporrateesums as $key => $unittyporrateesum) {
        $unittyporrateesums[$key] = count($unittyporrateesum);
      }
      foreach ($unitsToBook as $unittobook) {
        // Rates are activated
        if (module_exists('agres_rate')) {
          $lang = 'und';
          $lang = field_language('node', $unittobook,'field_agreservations_unittype');           
          $ratesntypes = _agres_get_products_for_reservation($unittobook->field_agreservations_unittype[$lang][0]['nid'], $data);
          $ratesntypessums = array_count_values($ratesntypes);
          foreach ($ratesntypessums as $rot => $rateortypesum) {
            $data['times'] = $rateortypesum;
            $data['agres_singletimes'] = array_keys($ratesntypes, $rot);
            $data['agres_diffproducts'] = $data['times'] / (count($data['agres_singletimes']));
          if(module_exists('agres_enable_attributes')&&(module_exists('uc_attribute'))) {
            _agres_enable_attributes_set_attributes($data,$form_state);
          }            
            uc_cart_add_item($rot, $rateortypesum, module_invoke_all('uc_add_to_cart_data', $data), $uid);
          }
        } else {
          $lang = 'und';
          $lang = field_language('node', $unittobook,'field_agreservations_unittype');             
          $data['times'] = $times * $unittyporrateesums[$unittobook->field_agreservations_unittype[$lang][0]['nid']];
          if(module_exists('agres_enable_attributes')&&(module_exists('uc_attribute'))) {
            _agres_enable_attributes_set_attributes($data,$form_state);
          }
          uc_cart_add_item($unittobook->field_agreservations_unittype[$lang][0]['nid'], 1 * $times, module_invoke_all('uc_add_to_cart_data', $data) , $uid); //*$nights
        }
      }
    }
    drupal_set_message(t('items added to cart of user.'));
    return;
  }
  /////////////////////////////////////
  //There is no existent reservation://
  /////////////////////////////////////
  else {
    if (count($puserrequest) > 0 and $categorynid > 0) {
      $category = node_load($categorynid);
      $userrequest = $puserrequest;
      $lang = 'und';
      $lang = field_language('node', $category,'field_agres_titleresform'); 
      if (!isset($category->field_agres_titleresform[$lang])) {
        $langcode = language_default('language');
        if (!isset($category->field_agres_titleresform[$lang])) {
          $langcode = 'und';
        }
      }
      $agreservations_request = array(
        '',
        array(
          $userrequest['checkintime'],
          $userrequest['checkouttime'],
        ),
      );
      $productnid = 0;
      if ($pselectunittype > 0) {
        $productnid = $pselectunittype;
      } else {
        if (isset($userrequest['preselectedunit'])) {
          $productnid = $userrequest['preselectedunit'];
        }
      }
      $tmpprodnode = null;
      if ($productnid > 0) {
        $tmpprodnode = node_load($productnid);
      }
      //if the $tmpprodnode( the produc which is only set in 1 item buys) is set and it is a rate or unit type the proceed, or $tmpprodnode is still null):
      if ((isset($tmpprodnode) && (($tmpprodnode->type == 'agres_rate') || ($tmpprodnode->type == 'agreservations_unittype')||($tmpprodnode->type == 'agres_service'))) || ($productnid == 0)) {
        if (count($userrequestunit) > 0) {
          
        } else {
          $userrequestunit[]['selectunittype'] = $productnid;
        }
        $unitsToBook = array();
        if (isset($tmpprodnode)&&($tmpprodnode->type <> 'agres_service')||(!isset($tmpprodnode))) {
          $unitsToBook = _agreservations_find_units_for_user_request($userrequestunit, $userrequest['checkintime'], $userrequest['checkouttime'], $category);
        }else{
          $unitsToBook = false;
        }
        if (isset($category)) {
          $lang = 'und';
          $lang = field_language('node', $category,'field_agres_bookingmode');           
          $bookmode = $category->field_agres_bookingmode[$lang][0]['value'];
          $lang = field_language('node', $category,'field_agres_measuringunit'); 
          $measureingunit = $category->field_agres_measuringunit[$lang][0]['value'];
        }
        $tmpcheckin = new DateObject($userrequest['checkintime']);
        $tmpcheckout = new DateObject($userrequest['checkouttime']);
        if ($bookmode == BOOKING_MODE_BY_DAYS) {

          $times = $tmpcheckin->difference($tmpcheckout, 'days');
          $agres_singletimes = _agreservations_create_date_range(date_format($tmpcheckin, 'Y-m-d H:i:s'), date_format($tmpcheckout, 'Y-m-d H:i:s'));
        } elseif ($bookmode == BOOKING_MODE_BY_HOURS) {
          $times = ceil($tmpcheckin->difference($tmpcheckout, 'hours'));
          $agres_singletimes = _agreservations_create_datehour_range(date_format($tmpcheckin, 'Y-m-d H:i:s'), date_format($tmpcheckout, 'Y-m-d H:i:s'));
        }
         $lang = 'und';
        if (isset($category)) {
           $lang = 'und';
           $lang = field_language('node', $category,'field_agres_count_last_dh');
        }
        if (!isset($category->field_agres_count_last_dh[$lang])||($category->field_agres_count_last_dh[$lang][0]['value']==2)) {
          array_pop($agres_singletimes); //!!!        
        }             
        $times = count($agres_singletimes);        
        if (!$unitsToBook) {
          if (isst($tmpprodnode)&&($tmpprodnode->type <> 'agres_service')||(!isset($tmpprodnode))) {
          form_set_error('unitinfo', t('Booking not possible anymore. Not enough free units, try another selection please.'));

            $node = node_load($productnid);
            return;            
          } else {//this is a service product, add to cart according to unittype
            $data = array(
              'agres' => array('agreservations_request' => $agreservations_request),              
//              'agreservations_resid' => $resnid,
              'module' => 'agres_categories',
              'times' => $times,
              'shippable' => false,
              'agres_singletimes' => $agres_singletimes,
              'measuringunit' => $measureingunit,
              'bookingmode' => $bookmode,
              'checkintime' => date_format($tmpcheckin, 'Y-m-d H:i:s'),
              'checkouttime' => date_format($tmpcheckout, 'Y-m-d H:i:s'),
              'agres_category_nid' => $categorynid,
            );            
             uc_cart_add_item($tmpprodnode->nid, $times, $data); //*$nights$productnid
            return;
          }

        } else {
          $_SESSION['agres_res_info'] = '';
          unset($_SESSION['agres_res_info']);
          $resnid = NULL;
          $resnid = 0;
          // Check if there are already items in the cart!
          $items = uc_cart_get_contents(uc_cart_get_id());
        
          if (count($items) > 0) {
            reset($items);
            $firstitem = current($items);
            //check if item in cart has same booking date as new item:
            if (isset($firstitem->data['agreservations_resid'])) {
              $resnid = $firstitem->data['agreservations_resid'];
              $resnid = _agreservations_update_Reservation($resnid, $unitsToBook, $userrequest['checkintime'], $userrequest['checkouttime'], NULL, NULL, AGRES_STATUS_ONLINE_NO_ORDER_YET);              
            } else {
              $resnid = _agreservations_create_Reservation($unitsToBook, $userrequest['checkintime'], $userrequest['checkouttime'], NULL, NULL, AGRES_STATUS_ONLINE_NO_ORDER_YET, t('Reservation'));              
            }
          } else {
            $resnid = _agreservations_create_Reservation($unitsToBook, $userrequest['checkintime'], $userrequest['checkouttime'], NULL, NULL, AGRES_STATUS_ONLINE_NO_ORDER_YET, t('Reservation'));

          }
          if ($resnid > 0) {
            $times = 0;
            $bookmode = BOOKING_MODE_BY_DAYS;
            $measureingunit = t('night');
            $lang = 'und';
            if (isset($category)) {
              $lang = 'und';
              $lang = field_language('node', $category,'field_agres_bookingmode');              
              $bookmode = $category->field_agres_bookingmode[$lang][0]['value'];
              $lang = field_language('node', $category,'field_agres_measuringunit'); 
              $measureingunit = $category->field_agres_measuringunit[$lang][0]['value'];
              $lang = field_language('node', $category,'field_agres_count_last_dh');
            }
            $agres_singletimes = array();
            if ($bookmode == BOOKING_MODE_BY_DAYS) {
              $times = $tmpcheckin->difference($tmpcheckout, 'days');
              $agres_singletimes = _agreservations_create_date_range(date_format($tmpcheckin, 'Y-m-d H:i:s'), date_format($tmpcheckout, 'Y-m-d H:i:s'));
            } elseif ($bookmode == BOOKING_MODE_BY_HOURS) {
              $times = ceil($tmpcheckin->difference($tmpcheckout, 'hours'));

              $agres_singletimes = _agreservations_create_datehour_range(date_format($tmpcheckin, 'Y-m-d H:i:s'), date_format($tmpcheckout, 'Y-m-d H:i:s'));
            }
            
      if (!isset($category->field_agres_count_last_dh[$lang])||($category->field_agres_count_last_dh[$lang][0]['value']==2)) {
        array_pop($agres_singletimes); //!!!        
      }         
           $times = count($agres_singletimes);
            $data = array(
              'agres' => array('agreservations_request' => $agreservations_request),              
              'agreservations_resid' => $resnid,
              'module' => 'agres_categories',
              'times' => $times,
              'shippable' => false,
              'agres_singletimes' => $agres_singletimes,
              'measuringunit' => $measureingunit,
              'bookingmode' => $bookmode,
              'checkintime' => date_format($tmpcheckin, 'Y-m-d H:i:s'),
              'checkouttime' => date_format($tmpcheckout, 'Y-m-d H:i:s'),
              'agres_category_nid' => $categorynid,
            );

            foreach ($unitsToBook as $unittobook) {
             $lang = 'und';
             $lang = field_language('node', $unittobook,'field_agreservations_unittype');                  
              $unittyporrateesums[$unittobook->field_agreservations_unittype[$lang][0]['nid']][] = $unittobook->nid;
            }
            foreach ($unittyporrateesums as $key => $unittyporrateesum) {
              $unittyporrateesums[$key] = count($unittyporrateesum);
            }
            foreach ($unitsToBook as $unittobook) {
              if (module_exists('agres_rate')) {
//                
      if (!isset($category->field_agres_count_last_dh[$lang])||$category->field_agres_count_last_dh[$lang][0]['value']==2) {
         $lang = 'und';
         $lang = field_language('node', $unittobook,'field_agreservations_unittype');          
         $ratesntypes = _agres_get_products_for_reservation($unittobook->field_agreservations_unittype[$lang][0]['nid'],$data, true);
      } 
         $lang = 'und';
         $lang = field_language('node', $category,'field_agres_count_last_dh');       
      if (isset($category->field_agres_count_last_dh[$lang])&&$category->field_agres_count_last_dh[$lang][0]['value']==1) {
         $lang = 'und';
         $lang = field_language('node', $unittobook,'field_agreservations_unittype');        
         $ratesntypes = _agres_get_products_for_reservation($unittobook->field_agreservations_unittype[$lang][0]['nid'], $data,false);
      }       
//                $ratesntypes = _agres_get_products_for_reservation($unittobook->field_agreservations_unittype[$unittobook->language][0]['nid'], $data);
                   $lang = 'und';
                   $lang = field_language('node', $unittobook,'field_agreservations_unittype');     
                $ratesntypessums = array_count_values($ratesntypes);
                foreach ($ratesntypes as $rot => $rateortype) {
              
                  $data['times'] = $ratesntypessums[$rateortype] * $unittyporrateesums[$unittobook->field_agreservations_unittype[$lang][0]['nid']];
                  $data['agres_singletimes'] = array_keys($ratesntypes, $rateortype);
                  $data['agres_diffproducts'] = $data['times'] / (count($data['agres_singletimes']));
                  if(module_exists('agres_enable_attributes')&&(module_exists('uc_attribute'))) {
                    _agres_enable_attributes_set_attributes($data,$form_state);
                  }
                     uc_cart_add_item($rateortype, 1, $data);
                }//uc_cart_add_item($rot, $rateortypesum, module_invoke_all('uc_add_to_cart_data', $data), $uid);
              } else {
                $data['times'] = $times * count($unittyporrateesums[$unittobook->field_agreservations_unittype[$lang][0]['nid']]);
                $data['agres_diffproducts'] = $data['times'] / (count($data['agres_singletimes']));
               if(module_exists('agres_enable_attributes')&&(module_exists('uc_attribute'))) {
                    _agres_enable_attributes_set_attributes($data,$form_state);
               }
                uc_cart_add_item($unittobook->field_agreservations_unittype[$lang][0]['nid'], $unittyporrateesums[$unittobook->field_agreservations_unittype[$lang][0]['nid']] * $times, $data); //*$nights
              }
            }
          }
        }
      } else {
        $data = array('agres' => array('agreservations_request' => $agreservations_request),
          'agreservations_resid' => $resnid,
          'module' => 'agres_categories',
          'times' => 1,
          'agr_nottimebased' => 1,
////         'agr_lasttimefree' => $agr_lasttimefree,
////         'agr_altprice' => $agr_altprice,
          'agres_singletimes' => 1,
//           'measuringunit' => $measureingunit,
//           'bookingmode' => $bookmode,
//           'checkintime' => date_format($tmpcheckin, variable_get('date_format_short', 'Y-m-d H:i:s')),
//           'checkouttime' => date_format($tmpcheckout, variable_get('date_format_short', 'Y-m-d H:i:s')));  
        );
        if(module_exists('agres_enable_attributes')&&(module_exists('uc_attribute'))) {
           _agres_enable_attributes_set_attributes($data,$form_state);
        }
        uc_cart_add_item($productnid, 1, $data); //*$nights$productnid
      }
      drupal_set_message(t('items added to cart of user.'));
      if ($goto <> '') {
        drupal_goto($goto);
      }
      return;
    }
  }
}
/**
 * ...in future use this in place of the now different functions to fill a cart with
 * unit type and rate products...
 * add to cart automatically given an agreservation, and a user
 * Y-m-d H:i:s is the format for the dateparameters dateto and datefrom
 */
function _agres_bookings_fillcart($resnid = null, $uid = null) {
  if ($resnid<>null) {
  $uid = $uid ? $uid : uc_cart_get_id();
  $resnode = node_load($resnid);

  $dateTimezone1 = new DateTimeZone(date_default_timezone());
  $tmpcheckindt = new DateTime($resnode->field_agres_rdate[$resnode->language][0]['value'], $dateTimezone1);
  $tmpcheckoutdt = new DateTime($resnode->field_agres_rdate[$resnode->language][0]['value2'], $dateTimezone1);
  $offset = $tmpcheckindt->getOffset();
  $offset = $offset * 1;
  $tmpcheckindt->modify($offset . 'seconds');
  $tmpcheckoutdt->modify($offset . 'seconds');

  $tmpcheckin = new DateObject($tmpcheckindt->format('Y-m-d H:i:s'));
  $tmpcheckout = new DateObject($tmpcheckoutdt->format('Y-m-d H:i:s'));
  $unitsToBook = array();
  foreach ($resnode->field_agres_ref_unit[$resnode->language] as $key => $refunit) {
    $tmpunit = node_load($refunit['nid']);

    $tmpunittype = $tmpunit->field_agreservations_unittype[$tmpunit->language][0]['nid'];
    $unitsToBookAll[$tmpunittype][] = $tmpunit;
  }
  foreach ($unitsToBookAll as $kutba => $unitsToBook) {
    $tmpunittype2 = node_load($kutba);
    // Should be only one
    $tmpunittype2->field_agres_ref_category;
    if (module_exists('agres_categories')) {
      $tmpcat = node_load($tmpunittype2->field_agres_ref_category[$tmpunittype2->language][0]['nid']);
      $bookmode = $tmpcat->field_agres_bookingmode[$tmpcat->language][0]['value'];
      $measureingunit = $tmpcat->field_agres_measuringunit[$tmpcat->language][0]['value'];
    } else {
      $bookmode = 2;
      $measureingunit = t('nights');
    }
    if ($bookmode == BOOKING_MODE_BY_DAYS) {

      $times = $tmpcheckin->difference($tmpcheckout, 'days');
    } elseif ($bookmode == BOOKING_MODE_BY_HOURS) {
      $times = ceil($tmpcheckin->difference($tmpcheckout, 'hours'));
    }
    $agres_singletimes = _agreservations_create_date_range($tmpcheckin->format('Y-m-d H:i:s'), $tmpcheckout->format('Y-m-d H:i:s'));

    array_pop($agres_singletimes); //!!!
    $data = array(
      'agres' => array('agreservations_request' => ''),
      'agreservations_resid' => $resnid,
      'module' => 'agres_categories',
      'times' => $times,
      'agres_singletimes' => $agres_singletimes,
      'agres_diffproducts' => '',
      'measuringunit' => $measureingunit,
      'bookingmode' => $bookmode,
      'checkintime' => $tmpcheckin->format('Y-m-d H:i:s'),
      'checkouttime' => $tmpcheckout->format('Y-m-d H:i:s'),
    );
    $_SESSION['agres_bookings_checkintime'] = $tmpcheckin->format(variable_get('date_format_short', 'Y-m-d H:i:s'));
    $_SESSION['agres_bookings_checkouttime'] = $tmpcheckout->format(variable_get('date_format_short', 'Y-m-d H:i:s'));
    $_SESSION['agres_bookings_times'] = $times;
    $_SESSION['agres_bookings_measuringunit'] = $measureingunit;
    foreach ($unitsToBook as $unittobook) {
      $unittyporrateesums[$unittobook->field_agreservations_unittype[$unittobook->language][0]['nid']][] = $unittobook->nid;
    }
    foreach ($unittyporrateesums as $key => $unittyporrateesum) {
      $unittyporrateesums[$key] = count($unittyporrateesum);
    }
    foreach ($unitsToBook as $unittobook) {
      // Rates are activated
      if (module_exists('agres_rate')) {
        $ratesntypes = _agres_get_products_for_reservation($unittobook->field_agreservations_unittype[$unittobook->language][0]['nid'], $data);
        $ratesntypessums = array_count_values($ratesntypes);
        foreach ($ratesntypessums as $rot => $rateortypesum) {

          $data['times'] = $rateortypesum;
          $data['agres_singletimes'] = array_keys($ratesntypes, $rot);
          $data['agres_diffproducts'] = $data['times'] / (count($data['agres_singletimes']));

          uc_cart_add_item($rot, $rateortypesum, $data, $uid);
        }
      } else {
        $data['times'] = $times * $unittyporrateesums[$unittobook->field_agreservations_unittype[$unittobook->language][0]['nid']];
        uc_cart_add_item($unittobook->field_agreservations_unittype[$unittobook->language][0]['nid'], 1 * $times, $data, $uid); //*$nights
      }
    }
  }
  drupal_set_message(t('items added to cart of user.'));
  return;
  }
  
  else {  
//    drupal_set_message('<pre>_agres_bookings_fillcart****'.print_r($_SESSION['agreservationuserrequest'],TRUE).'</pre>');
  $categorynid = $_SESSION['agreservationcategory'];
  $category = node_load($categorynid);
  
  $langcode = 'und';   
  $langcode = i18n_langcode();

  $userrequest = $_SESSION['agreservationuserrequest'];
  $agreservations_request = array(
    '',
    array(
      $userrequest['checkintime'],
      $userrequest['checkouttime'],
    ),
  );
  $productnid = $userrequest['preselectedunit'];
  $tmpprodnode = node_load($productnid);
  if (($tmpprodnode->type=='agres_rate') || (($tmpprodnode->type=='agreservations_unittype'))) {

  $userrequestunit[]['selectunittype'] = $productnid;
  $unitsToBook = _agreservations_find_units_for_user_request($userrequestunit, $userrequest['checkintime'], $userrequest['checkouttime'], $category);
  
  if (isset($category)) {
    $langcode_cab = 'und';
   $langcode_cab = field_language('node',$category,'field_agres_bookingmode');
   $langcode_cam = 'und';
   $langcode_cam = field_language('node',$category,'field_agres_measuringunit');
    $bookmode = $category->field_agres_bookingmode[$langcode_cab][0]['value'];
    $measureingunit = $category->field_agres_measuringunit[$langcode_cam][0]['value'];
  }
  $tmpcheckin = new DateObject($userrequest['checkintime']);
  $tmpcheckout = new DateObject($userrequest['checkouttime']);
  if ($bookmode == BOOKING_MODE_BY_DAYS) {

    $times = $tmpcheckin->difference($tmpcheckout, 'days');
  } elseif ($bookmode == BOOKING_MODE_BY_HOURS) {
    $times = ceil($tmpcheckin->difference($tmpcheckout, 'hours'));
  }
  if (!$unitsToBook) {
    
    form_set_error('unitinfo', t('Booking not possible anymore. Not enough free units, try another selection please.'));
    $data = array(
      'agres' => array('agreservations_request' => $agreservations_request),
      'agreservations_resid' => 0,
      'module' => 'agres_categories',
      'times' => $times,
      'measuringunit' => $measureingunit,
    );
    $node = node_load($productnid);
    return $data;
  } else {    
    $_SESSION['agres_res_info'] = '';
    unset($_SESSION['agres_res_info']);    
    $resnid = NULL;
    $resnid = 0;
    // Check if there are already items in the cart!
    $items = uc_cart_get_contents(uc_cart_get_id());
    if (count($items) > 0) {
      reset($items);
      $firstitem = current($items);
      //check if item in cart has same booking date as new item:
//      
      $resnid = $firstitem->data['agreservations_resid'];
      $resnid = _agreservations_update_Reservation($resnid, $unitsToBook, $userrequest['checkintime'], $userrequest['checkouttime'], NULL, NULL, AGRES_STATUS_ONLINE_NO_ORDER_YET);
//      drupal_set_message('<pre>444444   ' . print_r($order, true) . '</pre>');
    } else {
//      $order = uc_order_load(uc_cart_get_id()) ;
//      drupal_set_message('<pre>444444   ' . print_r($order, true) . '</pre>');
//      _agres_order_save($order);
      $resnid = _agreservations_create_Reservation($unitsToBook, $userrequest['checkintime'], $userrequest['checkouttime'], NULL, NULL, AGRES_STATUS_ONLINE_NO_ORDER_YET,t('Reservation'));
    }
    if ($resnid > 0) {
      
      $times = 0;
      $bookmode = BOOKING_MODE_BY_DAYS;
      $measureingunit = t('night');
      if (isset($category)) {
       $langcode_cab = 'und';
       $langcode_cab = field_language('node',$category,'field_agres_bookingmode');        
       $langcode_cam = 'und';
       $langcode_cam = field_language('node',$category,'field_agres_measuringunit');
        $bookmode = $category->field_agres_bookingmode[$langcode_cab][0]['value'];
        $measureingunit = $category->field_agres_measuringunit[$langcode_cam][0]['value'];
      }
      $agres_singletimes = array();
      if ($bookmode == BOOKING_MODE_BY_DAYS) {
        $times = $tmpcheckin->difference($tmpcheckout, 'days');
        $agres_singletimes = _agreservations_create_date_range(date_format($tmpcheckin, 'Y-m-d H:i:s'), date_format($tmpcheckout, 'Y-m-d H:i:s'));
      } elseif ($bookmode == BOOKING_MODE_BY_HOURS) {
        $times = ceil($tmpcheckin->difference($tmpcheckout, 'hours'));
        
        $agres_singletimes = _agreservations_create_datehour_range(date_format($tmpcheckin, 'Y-m-d H:i:s'), date_format($tmpcheckout, 'Y-m-d H:i:s'));
      }
      
      array_pop($agres_singletimes);
      $data = array(
        'agres' => array('agreservations_request' => $agreservations_request),
        'agreservations_resid' => $resnid,
        'module' => 'agres_categories',
        'times' => $times,
        'shippable' => false,
        'agres_singletimes' => $agres_singletimes,
        'measuringunit' => $measureingunit,
        'bookingmode' => $bookmode,
        'checkintime' => date_format($tmpcheckin, 'Y-m-d H:i:s'),
        'checkouttime' => date_format($tmpcheckout, 'Y-m-d H:i:s'),
        'agres_category_nid' => $categorynid,
      );

      foreach ($unitsToBook as $unittobook) {
       $langcode_uau = 'und';
       $langcode_uau = field_language('node',$unittobook,'field_agreservations_unittype');        
        $unittyporrateesums[$unittobook->field_agreservations_unittype[$langcode_uau][0]['nid']][] = $unittobook->nid;
      }
      foreach ($unittyporrateesums as $key => $unittyporrateesum) {
        $unittyporrateesums[$key] = count($unittyporrateesum);
      }
      foreach ($unitsToBook as $unittobook) {
        if (module_exists('agres_rate')) {
          $langcode_uau = 'und';
          $langcode_uau = field_language('node',$unittobook,'field_agreservations_unittype');               
          $ratesntypes = _agres_get_products_for_reservation($unittobook->field_agreservations_unittype[$langcode_uau][0]['nid'], $data);
          
          $ratesntypessums = array_count_values($ratesntypes);
          foreach ($ratesntypes as $rot => $rateortype) {
            $data['times'] = $ratesntypessums[$rateortype] * $unittyporrateesums[$unittobook->field_agreservations_unittype[$unittobook->language][0]['nid']];
            $data['agres_singletimes'] = array_keys($ratesntypes, $rateortype);
            $data['agres_diffproducts'] = $data['times'] / (count($data['agres_singletimes']));
            uc_cart_add_item($rateortype, 1, $data);
          }
        } else {
          $data['times'] = $times * count($unittyporrateesums[$unittobook->field_agreservations_unittype[$unittobook->language][0]['nid']]);
          $data['agres_diffproducts'] = $data['times'] / (count($data['agres_singletimes']));
          
          uc_cart_add_item($unittobook->field_agreservations_unittype[$unittobook->language][0]['nid'], $unittyporrateesums[$unittobook->field_agreservations_unittype[$unittobook->language][0]['nid']] * $times, $data); //*$nights
        }
      }
    }
  }
       }
     else {
       $data = array('agres' => array('agreservations_request' => $agreservations_request),
           'agreservations_resid' => $resnid,
           'module' => 'agres_categories',
           'times' => 1,
           'agr_nottimebased'=>1,
////         'agr_lasttimefree' => $agr_lasttimefree,
////         'agr_altprice' => $agr_altprice,
           'agres_singletimes' => 1,
//           'measuringunit' => $measureingunit,
//           'bookingmode' => $bookmode,
//           'checkintime' => date_format($tmpcheckin, variable_get('date_format_short', 'Y-m-d H:i:s')),
//           'checkouttime' => date_format($tmpcheckout, variable_get('date_format_short', 'Y-m-d H:i:s')));  
         );
       uc_cart_add_item($productnid, 1,$data ); //*$nights$productnid
     }
     drupal_goto('cart');
  }
}

/**
 * Form submission handler for uc_catalog_buy_it_now_form().
 *
 * @see uc_catalog_buy_it_now_form()
 * @see uc_catalog_buy_it_now_form_validate()
 */
function agres_bookings_buy_it_now_form_submit($form, &$form_state) {   
  $categorynid = $_SESSION['agreservationcategory'];
  $category = node_load($categorynid);
  $langcode = i18n_langcode();
  if (!isset($category->field_agres_titleresform[$langcode])) {
    $langcode = language_default('language');
    if (!isset($category->field_agres_titleresform[$langcode])){
      $langcode = 'und';
    }    
  }
  $langcode = field_language('node',$category,'field_agres_titleresform');
  $userrequest = $_SESSION['agreservationuserrequest'];
  
  $agreservations_request = array(
    '',
    array(
      $userrequest['checkintime'],
      $userrequest['checkouttime'],
    ),
  );
  
  _agres_bookings_reserve_and_fillcart(null,null, $userrequest, $categorynid,$form_state['values']['nid'],null,'',$form_state);
  //($resnid = null, $uid = null, $puserrequest = array(), $categorynid = 0, $pselectunittype = 0, $userrequestunit = array(), $goto = '',$form_state = array()) {
}

/**
 * @todo Documentation
 */
function agres_bookings_create_res_order($resid) {
  $resnode = null;
  $resnode = node_load($resid);
  if (!empty($resnode)) {
        $lang = 'und';
        $lang = field_language('node', $resnode,'field_agres_userref');       
    if (empty($resnode->field_agres_userref[$lang][0]['uid'])) {
      global $user;
//     @outdated: _agres_bookings_fillcart($resnode->nid, $user->uid);
      _agres_bookings_reserve_and_fillcart($resnode->nid, $user->uid,array(), 0,0,array(),'');
      drupal_goto('node/' . $resnode->nid);
    } else {
      if (user_access('create_order_for_other')) {
        uc_cart_empty($resnode->field_agres_userref[$lang][0]['uid']);
//       @outdated: _agres_bookings_fillcart($resnode->nid, $resnode->field_agres_userref[$resnode->language][0]['uid']);
        _agres_bookings_reserve_and_fillcart($resnode->nid, $resnode->field_agres_userref[$lang][0]['uid'],array(), 0,0,array(),'') ;       
        $account = user_load($resnode->field_agres_userref[$lang][0]['uid']);
        $order = _agres_bookings_create_order($account);
        //write order-id to reservation:
        $lang = field_language('node', $resnode,'field_agres_orderid'); 
        $resnode->field_agres_orderid[$lang][0]['value'] = $order->order_id;
        $resnode->title = $account->last_name . ', ' . $account->first_name;
        node_save($resnode);
        drupal_goto('admin/store/orders/' . $order->order_id . '/edit');
      }
    }
  }
}

/**
 * @todo Documentation
 */
function agres_bookings_views_query_alter(&$view, &$query) {
  if (($view->name == 'agres_uc_catalog') && isset($_SESSION['agres_bookings_productsavailable'])) {
    
    $agres_bookings_products_available = $_SESSION['agres_bookings_productsavailable'];
    $wheretoadd = array('field' => 'node.nid', 'value' => array_values($agres_bookings_products_available), 'operator' => 'in');
    $query->add_where(0, 'node.nid', array_values($agres_bookings_products_available), 'in');
//    drupal_set_message('<pre>test agres_bookings_views_query_alter:  '.print_r($query,true).'</pre>');
  }
}

/**
 * @todo Documentation
 */
function agres_bookings_uc_invoice_templates() {
  return array('agradmin', 'agrcustomer');
}

/**
 * Preprocesses a formatted invoice with an order's data.
 *
 * @see uc_order--admin.tpl.php
 * @see uc_order--customer.tpl.php
 */
function agres_bookings_preprocess_uc_order(&$variables) {
  $order = &$variables['order'];

  switch ($variables['op']) {
    case 'checkout-mail':
      $variables['thank_you_message'] = TRUE;
    case 'admin-mail':
      $variables['help_text'] = TRUE;
      $variables['email_text'] = TRUE;
      $variables['store_footer'] = TRUE;
    case 'view':
    case 'print':
      $variables['business_header'] = TRUE;
      $variables['shipping_method'] = TRUE;
      break;
  }

  $reservations = _agres_bookings_get_reservation_by_orderid($order->order_id);
  $res = node_load($reservations[0]->nid);
  $variables['agrdate1'] = _agreservations_show_date1($res); //$res->field_agres_rdate[$res->language][0]['value'];
  $variables['agrdate2'] = _agreservations_show_date2($res);//$res->field_agres_rdate[$res->language][0]['value2'];
  $variables['shippable'] = uc_order_is_shippable($order);
  $variables['products'] = $order->products;
  foreach ($variables['products'] as $prdkey => &$product) {
    if (isset($product->data['agres_category_nid'])) {
      $agres_category = node_load($product->data['agres_category_nid']);
      if (count($product->data['agres_singletimes']) > 1) {
        $lang = 'und';
        $lang = field_language('node', $agres_category,'field_agres_pluralmeasure');
        $product->agrmesunit = $agres_category->field_agres_pluralmeasure[$lang][0]['safe_value'];
        $variables['agrmeasuringunit'] = array($prdkey => t('units'),);
      } else {
        $lang = 'und';
        $lang = field_language('node', $agres_category,'field_agres_measuringunit');        
        $variables['agrmeasuringunit'] = array($prdkey => t('unit'),);
        $product->agrmesunit = $agres_category->field_agres_measuringunit[$lang][0]['safe_value'];
      }
    } else {
      // Category not set, use standard category
      if (count($product->data['agres_singletimes']) > 1) {
        $product->agrmesunit = t('days');
        $variables['agrmeasuringunit'] = array($prdkey => t('units'),);
      } else {
        $variables['agrmeasuringunit'] = array($prdkey => t('unit'),);
        $product->agrmesunit = t('day');
      }
    }

    $product->total_price = uc_currency_format($product->price * $product->qty);
    if ($product->qty > 1) {
      $product->individual_price = t('(!price each)', array('!price' => uc_currency_format($product->price)));
    } else {
      $product->individual_price = '';
    }

    $product->details = '';
    if (!empty($product->data['attributes'])) {
      foreach ($product->data['attributes'] as $attribute => $option) {
        $attributes[] = t('@attribute: @options', array('@attribute' => $attribute, '@options' => implode(', ', (array) $option)));
      }
      $product->details .= theme('item_list', array('items' => $attributes));
    }
  }

  $variables['line_items'] = uc_order_load_line_items_display($variables['order']);

  // Generate tokens to use as template variables.
  $types = array(
    'uc_order' => $order,
  );

  $token_info = token_info();

  $replacements = array();
  foreach (array('site', 'store', 'uc_order') as $type) {
    $replacements[$type] = token_generate($type, drupal_map_assoc(array_keys($token_info['tokens'][$type])), $types);
  }

  foreach ($replacements as $type => $tokens) {
    foreach ($tokens as $token => $value) {
      $key = str_replace('-', '_', $type . '_' . $token);
      $key = str_replace('uc_', '', $key);
      $variables[$key] = $value;
    }
  }
  // Add hook suggestions, default to customer template.
  $variables['theme_hook_suggestions'] = array(
    'uc_order__customer',
    'agres_bookings_uc_order__' . $variables['template'],
  );
}

/**
 * Implements hook_theme_registry_alter()
 *
 * This is from http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry
 * Thanks!
 */
function agres_bookings_theme_registry_alter(&$theme_registry) {
  global $theme;
  $mod_path = drupal_get_path('module', 'agres_bookings');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', $theme, $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('uc_order', 'uc_order__agrcustomer', 'uc_order__admin');
  foreach ($hooks as $h) {
    if (!isset($theme_registry[$h]['theme paths'])) {
      _agres_bookings_insert_new_element($theme_registry[$h], 'theme paths', $mod_path);
    } else {
      _agres_bookings_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
    }
  }
//  $theme_registry['cart_review_table']['function'] = 'agres_bookings_cart_review_table';
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
 *
 * This is from http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry
 * Thanks!
 */
function _agres_bookings_insert_after_first_element(&$a, $element) {
  if (is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/**
 * @todo Documentation
 */
function _agres_bookings_insert_new_element(&$a, $emlemname, $element) {
  if (is_array($a)) {
    $newelem = array($emlemname => array($element));
    $a += $newelem;
  }
}

/**
 * @todo Documentation
 */
function agres_bookings_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_form') {
    if (isset($form['panes']['payment'])) {
      foreach ($form['panes']['payment']['payment_method']['#options'] as $key => $value) {
        if ($key == 'credit') {
          $ordertotaldepositmultiplikator = variable_get('agres_uc_credit_deposit', '1');
          $form['panes']['payment']['payment_method']['#options'][$key] .= '<div class="description" style="padding-left: 2.5em;">' . t(' with credit cart payment ' . (floatval($ordertotaldepositmultiplikator) * 100) . '% of the total will be charged, the rest on arrival.') . '</div>';
        }
      }
    }
  }

  if (($form_id == 'uc_cart_view_form') || ($form_id == 'agres_bookings_cart_view_form')) {


    $form['empty'] = array(
      '#type' => 'submit',
      '#value' => t('Empty Cart'),
      '#weight' => 0,
    );
    $form['#submit'][] = 'agres_bookings_cart_view_form_submit';
    foreach ($form['items'] as $k => $item) {
      if (is_array($item) && isset($item['qty'])) {
        //$form['items'][$k]['qty']['#attributes']['disabled'] = "disabled";
        $form['items'][$k]['qty']['#attributes']['readonly'] = "readonly";
      }
    }
  }

  if ((strpos($form_id, 'uc_catalog_buy_it_now_form') === 0)||(strpos($form_id, 'uc_product_add_to_cart_form') === 0)) {    
    $lpos = strrpos ($form_id, '_');
    $strnid = substr($form_id,$lpos+1);
    $nid = intval($strnid);   
    $tmpprodnod = node_load($nid);
    if($tmpprodnod->type == 'agres_service'||$tmpprodnod->type == 'agres_rate'||$tmpprodnod->type == 'agreservations_unittype')  {
       unset($form['#submit']);
       $form['#submit'][] = 'agres_bookings_buy_it_now_form_submit';       
    }    
  }
  if ($form_id == 'uc_order_edit_form') {
   
  }
  
//(strpos($form_id,'uc_product_add_to_cart_form')===0)
 //Submithandler needs to be implemented for this
 
//  if (isset($form['type']['#value'])) {
//    if ($form['type']['#value'] == 'agreservation') {
//      $node = node_load($form['nid']['#value']);
//      // Checkbox: Create order on submit
//      $form['createorder'] = array(
//        '#type' => 'checkbox',
//        '#title' => t('Create Order'),
//      );
//    }
//  }
}

/**
 * Implementation of hook_cron().
 */
function agres_bookings_cron() {
  //delete order which are in checkout for longer than x
  // where x is determined by the admin...well  this is a ToDo
  //right now we use 1 hour.
  //$orderstatus2 = 'in_checkout';
  $orderstatus1 = 'abandoned';
  $query = db_select('uc_orders', 'uco');
  $query->fields('uco', array('order_id', 'uid', 'order_status', 'modified'));
  $query->where('uco.order_status = :orderstatus1', array(':orderstatus1' => $orderstatus1));
  $res = $query->execute();
  $orders = array();
  while ($order = $res->fetchObject()) {
//        $orders[] = node_load($order->nid);
    if ($order->modified < (time() - (60 * 60))) {
      $orderobj = uc_order_load($order->order_id);
//         drupal_set_message('<pre>$orderobj$orderobj'.print_r($orderobj,true).'</pre>');
      if (is_array($orderobj->products)) {
        foreach ($orderobj->products as $key => $product) {
          $resnode = node_load($product->data['agreservations_resid'], NULL, TRUE);
          if (isset($resnode)) {

            $resnode = node_delete($product->data['agreservations_resid']);
          }
        }
      }
      uc_order_delete($order->order_id);
    }
  }
  $tdiff = (time() - (60 * 60));
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'changed', 'type'));
  $query->condition('n.type', 'agreservation');
  $query->innerJoin('field_data_field_agres_status', 'fas', 'n.nid = fas.entity_id');
  $query->where('n.status = 1 AND n.changed < :tdifference', array(':tdifference' => $tdiff));
  $res = $query->execute();
  $reservations = array();
  while ($reservation = $res->fetchObject()) {
    $resnode = node_load($reservation->nid, NULL, TRUE);
    reset($resnode->field_agres_status);
    $statusagr = current($resnode->field_agres_status);
    if ($statusagr[0]['value'] == AGRES_STATUS_ONLINE_NO_ORDER_YET) {
      $resnode = node_delete($resnode->nid);
    }
  }
}
//own order save without hook invokation to avoid endless loop:
function _agres_order_save($order) {
//  $transaction = db_transaction();
//
//  try {
//    if (is_null($order->order_id) || intval($order->order_id) == 0) {
//      return FALSE;
//    }
//
//    $order->order_total = uc_order_get_total($order);
//    $order->product_count = uc_order_get_product_count($order);
//    if (is_null($order->delivery_country) || $order->delivery_country == 0) {
//      $order->delivery_country = variable_get('uc_store_country', 840);
//    }
//    if (is_null($order->billing_country) || $order->billing_country == 0) {
//      $order->billing_country = variable_get('uc_store_country', 840);
//    }
//    $order->host = ip_address();
//    $order->modified = REQUEST_TIME;
//
//    uc_order_module_invoke('presave', $order, NULL);
//    entity_save('uc_order', $order);
//    drupal_write_record('uc_orders', $order, 'order_id');

//    if (is_array($order->products)) {
//      foreach ($order->products as $product) {
//        drupal_alter('uc_order_product', $product, $order);
//        uc_order_product_save($order->order_id, $product);
//      }
//    }

//    field_attach_update('uc_order', $order);

//    uc_order_module_invoke('save', $order, NULL);
//    $order->order_total = uc_order_get_total($order);
//  }
//  catch (Exception $e) {
//    $transaction->rollback('uc_order');
//    watchdog_exception('uc_order', $e);
//    throw $e;
//  }
}