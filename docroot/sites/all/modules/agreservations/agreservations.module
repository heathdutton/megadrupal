<?php

/**
 * @file
 * agreservations.module in simple words: using calendar
 * module to show a bookingcalendar (weekview of calendar) AND prepare
 * for making onlinebookings of resources
 *
 * @author Andreas Gill <andreas.gill@agreservations.com>
 */
require_once('./' . drupal_get_path('module', 'agreservations') . '/includes/agres_funcs.inc');

// agreservations status options.
define('AGRES_STATUS_ONLINE_NO_ORDER_YET', 1);
define('AGRES_STATUS_ONLINE_ORDER_CREATED', 2);
define('AGRES_STATUS_NO_ORDER', 3);
define('AGRES_STATUS_ADMIN_ORDER', 4);
define('AGRES_STATUS_AVAILABILITY_BLOCK', 5);

/**
 * Implement hook_views_api().
 */
function agreservations_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_init().
 */
function agreservations_init() {
  drupal_add_css(drupal_get_path('module', 'agreservations') . '/agreservations.css');
//   module_load_include('inc', 'node', 'node.pages');
}

/**
 * Implements hook_permission().
 */
function agreservations_permission() {
  return array(
    'configure agreservations' => array(
      'title' => t('configure agreservations'),
      'description' => t('TODO Add a description for \'configure agreservations\''),
    ),
    'view agreservations Resources' => array(
      'title' => t('view agreservations Resources'),
      'description' => t('Allow viewing the Resources'),
    ),
    'view agresbookings search results' => array(
      'title' => t('view agres_bookings search results'),
      'description' => t('TODO Add a description for \'view agres_bookings search results\''),
    ),
  );
}

/**
 * Return an array of nids of reserved rooms/units from a single reservation:
 */
function _agreservations_get_unitn_for_reservation_node($paramnid) {
  $bookedunitnids = array();
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title', 'status'));
//      $query->condition('type', 'agreservation');
  $query->innerJoin('field_data_field_agres_ref_unit', 'faru', 'n.nid = faru.entity_id', array());
  $query->leftJoin('node', 'n2', 'n2.nid = faru.field_agres_ref_unit_nid', array());
  $query->addField('faru', 'field_agres_ref_unit_nid', 'refunitid');

  $query->where('n.nid = :pnid', array(':pnid' => $paramnid));
  $query->orderBy('field_agres_ref_unit_nid', 'ASC');
  $res = $query->execute();

  while ($bookedunit = $res->fetchObject()) {
    $bookedunitnids[] = $bookedunit->refunitid; //$unititem;
  }

  return $bookedunitnids;
}

/**
 * Return an array of nids of reserved unit types from a single reservation:
 */
function _agreservations_get_unittypes_for_rnode($paramnid) {
  $bookedunitnids = array();
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title', 'status'));
//      $query->condition('type', 'agreservation');
  $query->innerJoin('field_data_field_agres_ref_unit', 'faru', 'n.nid = faru.entity_id', array());
  $query->leftJoin('node', 'n2', 'n2.nid = faru.field_agres_ref_unit_nid', array());
  $query->addField('faru', 'field_agres_ref_unit_nid', 'refunitid');

  $query->where('n.nid = :pnid', array(':pnid' => $paramnid));
  $query->orderBy('field_agres_ref_unit_nid', 'ASC');
  $res = $query->execute();

  while ($bookedunit = $res->fetchObject()) {
    $bookedunitnids[] = $bookedunit->refunitid; //$unititem;
  }

  return $bookedunitnids;
}

/**
 *  Function to get the unitnames:
 *
 */
function _agreservations_get_unitnodes($nidunittype = NULL) {
//  $info = field_info_field_by_id('field_agreservations_unitnumber');
  if (!$nidunittype) {
    // TODO Please convert this statement to the D7 database API syntax.
//  $res = db_query("SELECT n.nid AS unitnid, n.title AS title,ctau.entity_id ,ctau.field_agreservations_unitnumber_value, ctaut.field_agreservations_unittype_nid FROM {node} n INNER JOIN {field_data_field_agreservations_unitnumber} ctau ON n.nid = ctau.entity_id INNER JOIN {field_data_field_agreservations_unittype} ctaut ON ctaut.entity_id =  ctau.entity_id WHERE n.status = 1 AND n.type = 'agreservations_unit' ORDER BY ctau.field_agreservations_unitnumber_value");
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->condition('type', 'agreservations_unit');
    $query->innerJoin('field_data_field_agreservations_unitnumber', 'fau', 'n.nid = fau.entity_id', array());
    $query->addField('fau', 'field_agreservations_unitnumber_value');
    $query->orderBy('field_agreservations_unitnumber_value', 'ASC');
    $res = $query->execute();
  }
  else {
    // TODO Please convert this statement to the D7 database API syntax.
//    $res = db_query(db_rewrite_sql("SELECT n.nid AS unitnid, n.title AS title,ctau.nid ,ctau.$fieldname_field_agreservations_unitnumber, ctaut.$fieldname_field_agreservations_unittype FROM {node} n INNER JOIN {" . $tablename_field_agreservations_unitnumber . "} ctau ON n.nid= ctau.nid INNER JOIN {" . $tablename_field_agreservations_unittype . "} ctaut ON ctaut.nid =  ctau.nid WHERE n.status = 1 and n.type = 'agreservations_unit' AND ctaut.$fieldname_field_agreservations_unittype = %d ORDER BY ctau.$fieldname_field_agreservations_unitnumber"), $nidunittype);    
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->condition('type', 'agreservations_unit');
    $query->innerJoin('field_data_field_agreservations_unittype', 'faut', 'n.nid = faut.entity_id', array());
    $query->where('faut.field_agreservations_unittype_nid = :unittype', array(':unittype' => $nidunittype));
    $res = $query->execute();
  }
  $units = array();

  while ($unititem = $res->fetchObject()) {
    $units[$unititem->nid] = node_load($unititem->nid); //$unititem;
  //
  }

  return $units;
}

/**
 *  Function to get the unittypes:
 *
 */
function _agreservations_get_unittypenodes() {

  $unittypes = array();

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('type', 'agreservations_unittype');
  $query->innerJoin('field_data_field_agreservations_capacity', 'faut', 'n.nid = faut.entity_id', array());
  $query->addField('faut', 'field_agreservations_capacity_value');
  $query->orderBy('field_agreservations_capacity_value', 'ASC');
  $res = $query->execute();

  while ($unittypeitem = $res->fetchObject()) {
    $unittypes[$unittypeitem->nid] = $unittypeitem; //node_load($unittypeitem->nid); //$unititem;
  }

  return $unittypes;
}

/**
 * Implements hook_views_pre_view().
 */
function agreservations_views_pre_view(&$view, &$display_id, &$args) {
  $output = '';
  switch ($view->name) {
    case 'units':
      $output = l(t('Add Unit'), 'node/add/agreservations-unit');
      break;
    case 'unit_types':
      $output = l(t('Add Unit Type'), 'node/add/agreservations-unittype');
      break;
    case 'categories':
      $output = l(t('Add Category'), 'node/add/agres-category');
      break;
    case 'agres_timeframe':
      $output = l(t('Add Timeframe'), 'node/add/agres-timeframe');
      break;
    case 'agres_rate':
      $output = l(t('Add Rate'), 'node/add/agres-rate');
      break;
  }

  $view->attachment_after = $output;
}



/**
 * Implements hook_node_validate().
 */
function agreservations_node_validate($node, $form, $form_state) {
  if ($node->type == 'agreservation') {
    $tlangs1 = array();
    $alllangs = array();
    $tlangs1 = language_list();
    $alllangs = array_merge($tlangs1, array('und' => ''));
    $alllangs = array_keys($alllangs);
    foreach ($alllangs as $lang) {
      if (isset($node->field_agres_rdate[$lang])) {
        $strtmpdat1 = $node->field_agres_rdate[$lang][0]['value'];
        $strtmpdat2 = $node->field_agres_rdate[$lang][0]['value2'];
        $objtmpdat1 = new DateTime($strtmpdat1);
        $objtmpdat2 = new DateTime($strtmpdat2);
        if (($objtmpdat1 > $objtmpdat2) || ($objtmpdat1 == $objtmpdat2)) {
          $error = t('Date To (%start): has to be after Date From (%end)', array(
            '%start' => $strtmpdat1,
            '%end' => $strtmpdat2,
            )
          );
          form_set_error('field_agres_rdate', $error);
        }
      }
    }
  }
}

/**
 * Implements hook_nodeapi().
 */
//function agreservations_nodeapi_OLD(&$node, $op, $a3 = NULL, $a4 = NULL) {
//  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
//  if ($node->type == 'agreservation') {
//    switch ($op) {
//      case 'view':
//        $tmpdatewarg = date_create($node->field_agres_checkinout[0]['value']);
//        date_modify($tmpdatewarg, '+1 week'); //+1week due to missbehavior of date modules,when fixed:remove this line.
//
//
//        $weekarg = date_format($tmpdatewarg, "Y-\WW");
//        $node->content['agres_calendarlink'] = array(
//          '#value' => l('Booking Calendar', 'agreservations/bookingcalendar2/' . $weekarg),
//          '#weight' => -101,
//        );
//        break;
//      case 'delete':
//
//        $tmpagres_unitinfosetting = variable_get('agres_createunitinfo', 'manualunitinfo');
//
//        if ($tmpagres_unitinfosetting == 'autounitinfo') {
//
//          foreach ($node->field_agres_ref_unit as $key => $refunit) {
//            $tmpunitinfos = array();
//            $tmpunitinfos = _agreservations_find_agreservationinfo($node->nid, $refunit['nid']);
//
//            if (count($tmpunitinfos) > 0) {
//
//              foreach ($tmpunitinfos as $tmpunitinfo) {
//
//                node_delete($tmpunitinfo->nid);
//              }
//            }
//          }
//        }
//        break;
//      case 'prepare':
//        unset($_SESSION['agres_res_info']);
//
//        $tmpdate = $_REQUEST['default_agres_date'];
//        if (isset($_REQUEST['default_agres_date'])) {
//          $tmpdefaultdate1 = date_create($_REQUEST['default_agres_date']);
//          $tmpdefaultdate2 = date_create($_REQUEST['default_agres_date']);
//          date_modify($tmpdefaultdate2, '+1 day');
//          date_modify($tmpdefaultdate2, '-1 hour');
//          $node->field_agres_checkinout[0]['value'] = date_format($tmpdefaultdate1, "Y-m-d H:i:s");
//          $node->field_agres_checkinout[0]['value2'] = date_format($tmpdefaultdate2, "Y-m-d H:i:s"); //"Y-m-d H:i:s");
//
//
//        }
//        break;
//      case 'validate':
//        variable_set('rc_date_field_' . 'agreservation', 'field_agres_checkinout');
//        $reference_fields = variable_get('rc_reference_fields_' . 'agreservation', array());
//        $searchrcref = array_search("field_agres_ref_unit", $reference_fields);
//        if ($searchrcref < 1) {
//          $reference_fields[] = 'field_agres_ref_unit';
//        }
//        variable_set("agrc_reference_fields_" . 'agreservation', $reference_fields);
//
//        $conflict_types = variable_get("rc_types", array(1 => 'agreservation'));
//        $searchrctype = array_search("agreservation", $conflict_types);
//        if ($searchrctype < 1) {
//          $conflict_types[] = 'agreservation';
//        }
//        variable_set("rc_types", $conflict_types);
//        variable_set('rc_type_' . 'agreservation', 1);
//      case 'insert':
//        $tmpagres_unitinfosetting = variable_get('agres_createunitinfo', 'manualunitinfo');
//        if ($tmpagres_unitinfosetting == 'autounitinfo') {
//          $tmparr = $_SESSION['agres_res_info'];
//          if (isset($_SESSION['agres_res_info'])) {
//            foreach ($_SESSION['agres_res_info'] as $resinfo) {
//              $tmpnid = _agreservations_create_ResInfo($node->nid, $resinfo['unitnid'], $resinfo['adults']);
//            }
//          }
//          else {
//            $tmpagres_unitinfosetting = variable_get('agres_createunitinfo', 'manualunitinfo');
//
//            foreach ($node->field_agres_ref_unit as $key => $refunit) {
//              $tmpunitinfos = array();
//              $tmpunitinfos = _agreservations_find_agreservationinfo($node->nid, $refunit['nid']);
//              if (count($tmpunitinfos) < 1) {
//
//                $tmpnid = _agreservations_create_ResInfo($node->nid, $refunit['nid']);
//              }
//            }
//
//          }
//        }
//        break;
//    }
//  }
//  if ($node->type == 'agres_category') {
//    switch ($op) {
//      case 'validate':
//        foreach ($node->field_agres_servicehours as $daynum => $servicetimes) {
//          $times = array();
//          $times = explode(',', $servicetimes['value']);
//          if (count($times) > 0) {
//            foreach ($times as $tkey => $time) {
//              if (!preg_match("/^[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}$/", $time)) {
//                if ($time !== 'x') {
//                  form_set_error('field_agres_servicehours', t('One of the servicehour entries does not match pattern hh:mm-hh:mm'));
//                }
//              }
//              else {
//                $fromtotimes = array();
//                $fromtotimes = explode('-', $time);
//                if (count($fromtotimes) > 0) {
//                  foreach ($fromtotimes as $fromto_key => $fromtotime) {
//                    $hoursminutes = array();
//                    $hoursminutes = explode(':', $fromtotime);
//                    if (count($hoursminutes) == 2) {
//                      if ($hoursminutes[0] > 23) {
//                        form_set_error('field_agres_servicehours', t('One of the sericehourentries has a problem: hours value of more than 23'));
//                      }
//                      elseif ($hoursminutes[0] < 0) {
//                        form_set_error('field_agres_servicehours', t('One of the sericehourentries has a problem: negative value is not allowed'));
//                      }
//                      if ($hoursminutes[1] > 59) {
//                        form_set_error('field_agres_servicehours', t('One of the sericehourentries has a problem: minutes value of more than 59'));
//                      }
//                      elseif ($hoursminutes[1] < 0) {
//                        form_set_error('field_agres_servicehours', t('One of the sericehourentries has a problem: negative value is not allowed'));
//                      }
//                    }
//                  }
//                  if (strtotime($fromtotimes[0]) > strtotime($fromtotimes[1])) {
//                    form_set_error('field_agres_servicehours', t('One of the servicehour entries has a bigger from time than To time.'));
//                  }
//                }
//              }
//            }
//          }
//          elseif (count($times) == 0) {
//
//          }
//          else {
//            form_set_error('field-agres-servicehours', t('no valid time format!'));
//          }
//        }
//    }
//  }
//  else {
//
//  }
//}

function _agreservations_find_agreservationinfo($nid, $unitnid) {
  $field = content_fields('field_agres_ref_agreservation');
  $db_info = content_database_info($field);
  $fieldname_agres_ref_agreservation = $db_info['columns']['nid']['column'];
  $tablename_agres_ref_agreservation = $db_info['table'];
  $field = content_fields('field_agres_refsingle_unit');
  $db_info = content_database_info($field);
  $fieldname_agres_refsingle_unit = $db_info['columns']['nid']['column'];
  $tablename_agres_refsingle_unit = $db_info['table'];
//                drupal_set_message('<pre>'.print_r($db_info,TRUE).'</pre>');
//                drupal_set_message('<pre>'.print_r(db_rewrite_sql("SELECT n.nid, n.title AS title,ctau.nid ,ctau.$fieldname_field_agreservations_unitnumber, ctaut.$fieldname_field_agreservations_unittype FROM {node} n INNER JOIN {".$tablename_field_agreservations_unitnumber."} ctau ON n.nid = ctau.nid INNER JOIN {".$tablename_field_agreservations_unitnumber."} ctaut ON ctaut.nid =  ctaut.nid WHERE (n.status = 1 and n.type = 'agreservations_unit') order by ctau.$fieldname_field_agreservations_unitnumber"),TRUE).'</pre>');
  // TODO Please convert this statement to the D7 database API syntax.
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->fields('ctauira', array($fieldname_agres_ref_agreservation))
    ->fields('ctauiru', array($fieldname_agres_refsingle_unit))
    ->join($tablename_agres_ref_agreservation, 'ctauira', 'n.nid = ctauira.nid')
    ->join($tablename_agres_refsingle_unit, 'ctauiru', 'ctauira.nid = ctauiru.nid')
    ->condition('n.status', 1)
    ->condition('n.type', 'agreservation_unit_info')
    ->condition('ctauira.' . $fieldname_agres_ref_agreservation, $nid)
    ->condition('ctauiru.' . $fieldname_agres_refsingle_unit, $unitnid)
    ->orderBy('ctauiru.' . $fieldname_agres_refsingle_unit, 'asc')
    ->execute();
  //$res = db_query("SELECT n.nid, ctauira.$fieldname_agres_ref_agreservation, ctauiru.$fieldname_agres_refsingle_unit FROM {node} n INNER JOIN {" . $tablename_agres_ref_agreservation . "} ctauira ON n.nid = ctauira.nid INNER JOIN {" . $tablename_agres_refsingle_unit . "} ctauiru ON ctauira.nid =  ctauiru.nid WHERE n.status = 1 AND n.type = 'agreservation_unit_info' AND ctauira.$fieldname_agres_ref_agreservation = %d AND ctauiru.$fieldname_agres_refsingle_unit = %d order by ctauiru.$fieldname_agres_refsingle_unit", $nid, $unitnid);

  $unitinfos = array();
  foreach ($query as $unitinfo) {
    $unitinfos[$unitinfo->nid] = $unitinfo;
  }
  return $unitinfos;
}

/**
 * Implements hook_user().
 *       switch ($op){
  case 'insert':
  $five = time()+300; // 5 minutes in the future.
  setcookie("PopupRefNid", $node->nid, $five, '/');
  //      setcookie("PopupRefTitle", $node->title, $five, '/');
  setrawcookie("PopupRefTitle", rawurlencode($node->title), $five, '/');

  }
 */

/**
 * Implements hook_form_alter().
 */
function agreservations_form_alter(&$form, &$form_state, $form_id) {
  
     if (isset($form['type']['#value'])) {
       if ($form['type']['#value'] == 'agreservation') {
         if (isset($_REQUEST['default_agres_date'])) {
           $tmpdate = $_REQUEST['default_agres_date'];
           $dateTimezone1 = new DateTimeZone(date_default_timezone());
           $dateTime1 = new DateTime($tmpdate, $dateTimezone1);
           $offset = $dateTime1->getOffset();
           $offset = $offset * -1;
           $dateTime1->modify($offset . 'seconds');
           $form['field_agres_rdate'][$form['field_agres_rdate']['#language']][0]['#default_value'] = array(
               'value' => $dateTime1->format('Y-m-d H:i:s'),
               'value2' => $dateTime1->format('Y-m-d H:i:s'),
           );
         }
         if (isset($_REQUEST['agres_sel_unit'])) {
           $tmpselunit = $_REQUEST['agres_sel_unit'];
           $form['field_agres_ref_unit'][$form['field_agres_ref_unit']['#language']]['#default_value'] = $_REQUEST['agres_sel_unit'];
         }
         if (isset($_REQUEST['default_agres_title'])) {
           $tmpselunit = $_REQUEST['default_agres_title'];
           $form['title']['#default_value'] = $_REQUEST['default_agres_title'];
         }
       }       
     }
   }

   /**
 * agreservations_get_reservable_items: returns array of reservable unit nodes.
 *
 * @author     Andreas Gill
 * @param      $content_type normally this is agreservations_unit.
 * @param      $start   start time
 * @param      $end    end time
 * @param      $cat category to filter, if categories submodule is enabled.
 * @return     TRUE oder FALSE
 */
function agreservations_get_reservable_items($content_type, $start, $end, $cat = NULL) {  
  $conflict_types = variable_get("rc_types", array(1 => 'agreservation'));
  $searchrctype = array_search("agreservation", $conflict_types);
  if ($searchrctype < 1) {
    $conflict_types[] = 'agreservation';
  }
  $field = 'field_agres_rdate';
  $conflictnids = _agres_rconflict_get_overlaps(date_create($start), date_create($end));
  $unreservableunits = array();
  if (count($conflictnids) > 0) {
//        drupal_set_message('<pre>agreservations_get_reservable_items called'.print_r($reservable_units,true).'</pre>'); 
    foreach ($conflictnids as $key => $conflictnid) {
      $tmpnode = node_load($conflictnid, NULL, TRUE);
      $unresunitsofreservation[$conflictnid] = _agreservations_get_unitn_for_reservation_node($conflictnid);
      foreach ($unresunitsofreservation[$conflictnid] as $unreservableunit) {
        $unreservableunits[$unreservableunit] = $unreservableunit;
      }
    }
    if (count($unreservableunits) == 0) {
//    $res = db_query(db_rewrite_sql("SELECT n.nid AS unitnid, n.title AS title,ctau.nid ,ctau.$fieldname_field_agreservations_unitnumber, ctaut.$fieldname_field_agreservations_unittype FROM {node} n INNER JOIN {" . $tablename_field_agreservations_unitnumber . "} ctau ON n.nid= ctau.nid INNER JOIN {" . $tablename_field_agreservations_unittype . "} ctaut ON ctaut.nid =  ctau.nid WHERE n.status = 1 and n.type = 'agreservations_unit' AND ctaut.$fieldname_field_agreservations_unittype = %d ORDER BY ctau.$fieldname_field_agreservations_unitnumber"), $nidunittype);    
      $query = db_select('node', 'n');
      $query->fields('n', array('nid', 'title'));
      $query->condition('type', 'agreservations_unit');
      $query->innerJoin('field_data_field_agreservations_unitnumber', 'faun', 'n.nid = faun.entity_id', array());
      $query->innerJoin('field_data_field_agreservations_unittype', 'faut', 'n.nid = faut.entity_id', array());
      $query->addField('faun', 'field_agreservations_unitnumber_value');
      $query->addField('faut', 'field_agreservations_unittype_nid');
      $query->addTag('node_access');
      $query->where('n.status = 1');
      $query->orderBy('n.title', 'ASC');
      $res = $query->execute();
    }
    else {
      $comma_separated_unreservableunits = implode(",", $unreservableunits);
      $query = db_select('node', 'n');
      $query->fields('n', array('nid', 'title'));
      $query->condition('type', 'agreservations_unit');
      $query->innerJoin('field_data_field_agreservations_unitnumber', 'faun', 'n.nid = faun.entity_id', array());
      $query->innerJoin('field_data_field_agreservations_unittype', 'faut', 'n.nid = faut.entity_id', array());
      $query->addField('faun', 'field_agreservations_unitnumber_value');
      $query->addField('faut', 'field_agreservations_unittype_nid');
      $query->where("n.nid NOT IN ($comma_separated_unreservableunits) AND n.status = 1");
      $query->orderBy('n.title', 'ASC');
      $query->addTag('node_access');
      $res = $query->execute();
    }
  }
  else {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    $query->condition('type', 'agreservations_unit');
    $query->innerJoin('field_data_field_agreservations_unitnumber', 'faun', 'n.nid = faun.entity_id', array());
    $query->innerJoin('field_data_field_agreservations_unittype', 'faut', 'n.nid = faut.entity_id', array());
    $query->addField('faun', 'field_agreservations_unitnumber_value');
    $query->addField('faut', 'field_agreservations_unittype_nid');
    $query->addTag('node_access');
    $query->where('n.status = 1');
    $query->orderBy('n.title', 'ASC');
    $res = $query->execute();
  }
  $availableunits = array();

  if (module_exists('agres_categories') && isset($cat)) {
    while ($unititem = $res->fetchObject()) {      
       if (_agres_categories_unittype_has_cat($unititem->field_agreservations_unittype_nid, $cat)) {       
         $unode = node_load($unititem->nid);
         $availableunits[] = $unode; //$unititem;
       }
      
    }
  }
  else {

   while ($unititem = $res->fetchObject()) { 
      $node = node_load($unititem->nid);
      $availableunits[] = $node;
    }
  }
  return $availableunits;
}

/* * This function returns an array of reservable unittypes in the */

/**
 *
 */
function _agreservations_get_reservable_unittypes($nodesarray, $simple) {
  $availableunittypes = array();
  $availableunittypesnids = array();
  if ($simple == TRUE) {
    foreach ($nodesarray as $tmpnode) {
      foreach ($tmpnode->field_agreservations_unittype as $langunittype) {
        if (!array_key_exists($langunittype[0]['nid'], $availableunittypesnids)) {
          $availableunittypesnids[$langunittype[0]['nid']] = 1;
        }
        else {
          $availableunittypesnids[$langunittype[0]['nid']] += 1;
        }
      }
    }
    return $availableunittypesnids;
  }
  else {
    foreach ($nodesarray as $tmpnode) {
      //@TODO nochmal nachschauen...
      foreach ($tmpnode->field_agreservations_unittype as $langunittype) {
        if (!in_array($langunittype[0]['nid'], $availableunittypesnids)) {
          $availableunittypesnids[] = $langunittype[0]['nid'];
          $rtnode = node_load($langunittype[0]['nid']);
          $availableunittypes[$langunittype[0]['nid']]['rtnode'] = $rtnode;
          $availableunittypes[$langunittype[0]['nid']]['count'] = 1;
        }
        else {
          $availableunittypes[$langunittype[0]['nid']]['count'] += 1;
        }
      }
    }
    return $availableunittypes;
  }
}

/**
 * Finds the concrete units for the userrequest used for filling out a 
 * reservationnode programmatically.
 */
function _agreservations_find_units_for_user_request($userrequestunits, $checkin, $checkout, $category) {
  //1.:get all reservable items:

  $check = FALSE;
  $resarray = array();
  $reservable_units = agreservations_get_reservable_items('agreservations_unit', $checkin, $checkout, $category);

  foreach ($userrequestunits as $userrequestunit) {
    $check = FALSE;
    foreach ($reservable_units as $key => $reservable_unit) {
      $langcode_unit = i18n_langcode();
      if (!isset($reservable_unit->field_agreservations_unittype[$langcode_unit])) {
        $langcode_unit = language_default('language');
        if (!isset($reservable_unit->field_agreservations_unittype[$langcode_unit])) {
          $langcode_unit = 'und';
        }
      }
      $langcode_unit = field_language('node',$reservable_unit,'field_agreservations_unittype');
      if ($reservable_unit->field_agreservations_unittype[$langcode_unit][0]['nid'] == $userrequestunit['selectunittype']) {
        //unittype fits ok so put it into resultarray:


        $check = TRUE;
        unset($reservable_units[$key]);
        $resarray[] = $reservable_unit;
        break;
      }
    }
    //if no fitting room was found anymore, the booking has to be stopped!
    if ($check === FALSE) {
//             drupal_set_message('<pre>_agreservations_findunitsForUserRequest errr</pre>');
      return FALSE;
    }
  }
  return $resarray;
}

/**
 * Programmatically creates a Reservationsinfo
 * 
 * reservation/resource/Persons/...
 */
function _agreservations_create_ResInfo($agresnid, $unitid, $pers = 0) {
  $node = new stdClass();
  $node->is_new = 1;
  $tmpnodeunit = node_load($unitid, NULL, TRUE);
  $node->title = t('Info of Reservation: @resid and Unit: @unit', array('@resid' => $agresnid, '@unit' => $tmpnodeunit->title));
//  $node->body = "";


  $node->type = "agreservation_unit_info";
  $node->uid = 1;
  $node->teaser = "";
  $node->filter = 1;
  $node->status = 1;
  $node->comment = 2;
  $node->created = REQUEST_TIME;
  $node->changed = REQUEST_TIME;
  $node->field_agres_ref_agreservation[0]['nid'] = $agresnid; //'2009-07-28 00:00:00'


  $node->field_agres_refsingle_unit[0]['nid'] = $unitid;
  $node->field_agres_unit_persons[0]['value'] = $pers;


  node_save_action($node);
  return $node->nid;
}

/**
 * Programmatically updates a Reservationnode
 */
function _agreservations_update_Reservation($resnid, $units = NULL, $checkin = NULL, $checkout = NULL, $userid = NULL, $orderid = NULL, $agresstatus = NULL) {  
  $node = node_load($resnid);
  $langcode_unit = i18n_langcode();
  $ik = count($node->field_agres_ref_unit[$node->language]);
    $langcode_orderid = i18n_langcode();
    if (!isset($node->field_agres_orderid[$langcode_orderid])) {      
      $langcode_orderid =language_default('language');
      if (!isset($node->field_agres_titleresform[$langcode_orderid])){
        $langcode_orderid = 'und';
      }        
    }

    
//
    if (isset($checkin)&&isset($checkout)) {
  // Date and timezone handling
  $dateTimezone1 = new DateTimeZone(date_default_timezone());
  $dateTime1 = new DateTime($checkin, $dateTimezone1);
  $dateTime2 = new DateTime($checkout, $dateTimezone1);
  $offset = $dateTime1->getOffset();
  $offset = $offset * -1;
  $dateTime1->modify($offset . 'seconds');
  $dateTime2->modify($offset . 'seconds');
  $langcode_ad = 'und';
  $langcode_ad = field_language('node',$node,'field_agres_rdate');
  $node->field_agres_rdate[$langcode_ad][0]['value'] = $dateTime1->format('Y-m-d H:i:s'); //'2009-07-28 00:00:00' 
  $node->field_agres_rdate[$langcode_ad][0]['value2'] = $dateTime2->format('Y-m-d H:i:s');
  $node->field_agres_rdate[$langcode_ad][0]['timezone'] = date_default_timezone();
  $node->field_agres_rdate[$langcode_ad][0]['timezone_db'] = 'UTC';
  $node->field_agres_rdate[$langcode_ad][0]['date_type'] = 'datetime';      
    }
    
//  $node->choice = array();
  if (isset($units)) {
    foreach ($units as $rnode) {
      $langcode_aru = 'und';
      $langcode_aru = field_language('node',$node,'field_agres_ref_unit');      
      $node->field_agres_ref_unit[$langcode_aru][$ik]['nid'] = $rnode->nid;
      $ik++;
    }
  }
  if (isset($userid)){
      $langcode_aur = 'und';
      $langcode_aur = field_language('node',$node,'field_agres_userref');     
    $node->field_agres_userref[$langcode_aur][0]['uid'] = $userid;
  }
  if (isset($orderid)){
      $langcode_oi = 'und';
      $langcode_oi = field_language('node',$node,'field_agres_orderid');        
    $node->field_agres_orderid[$langcode_oi][0]['value'] = $orderid;
  }  
  if (isset($agresstatus)){
      $langcode_as = 'und';
      $langcode_as = field_language('node',$node,'field_agres_status');     
    $node->field_agres_status[$langcode_as][0]['value'] = $agresstatus;
  }  
  if (module_exists('agres_bookings')) {
    if (isset($orderid)) {
//      $order = uc_order_load($orderid);
//      $order->field_agr_associated_res['und'][0]['nid'] = $resnid;
////      drupal_set_message('<pre>dddd'.print_r($order,true).'</pre>');
//      _agres_order_save($order);
    }
  }

  node_save($node); //Actually save the node
  $retval = $node->nid;
  return $retval;
}
/**
 * Programmatically creates a Reservationnode
 */
function _agreservations_create_blockReservation($units, $checkin, $checkout, $userid = NULL, $orderid = NULL, $agresstatus = NULL,$title = 'Block Reservation') {
//    module_load_include('inc', 'node', 'node.pages');  
  $langcode_unit = i18n_langcode();
  $retval = NULL;
  $node = new stdClass();
  $node->is_new = 1;
  $node->title = $title;
  $node->body = "";
  $node->type = "agreservation";
  $node->uid = 1;
  $node->teaser = "";
  $node->filter = 1;
  $node->status = 1;
  $node->comment = 2;
  $node->created = REQUEST_TIME;
  $node->changed = REQUEST_TIME;
  $node->language = $langcode_unit;
  
  // Date and timezone handling
  $dateTimezone1 = new DateTimeZone(date_default_timezone());
  $dateTime1 = new DateTime($checkin, $dateTimezone1);
  $dateTime2 = new DateTime($checkout, $dateTimezone1);
  $offset = $dateTime1->getOffset();
  $offset = $offset * -1;
  $dateTime1->modify($offset . 'seconds');
  $dateTime2->modify($offset . 'seconds');
  $node->field_agres_rdate[$langcode_unit][0]['value'] = $dateTime1->format('Y-m-d H:i:s'); //'2009-07-28 00:00:00'  

  $node->field_agres_rdate[$langcode_unit][0]['value2'] = $dateTime2->format('Y-m-d H:i:s');
  $node->field_agres_rdate[$langcode_unit][0]['timezone'] = date_default_timezone();
  $node->field_agres_rdate[$langcode_unit][0]['timezone_db'] = 'UTC';
  $node->field_agres_rdate[$langcode_unit][0]['date_type'] = 'datetime';
  $node->validated = 0;
  $ik = 0;
  $node->choice = array();
  
  foreach ($units as $rnode) {
    if(is_numeric($rnode)) {
      $node->field_agres_ref_unit[$langcode_unit][$ik]['nid'] = $rnode;
    } else {
      $node->field_agres_ref_unit[$langcode_unit][$ik]['nid'] = $rnode->nid;
    }
    $ik++;
  }
  $node->field_agres_status[$langcode_unit][0]['value'] = $agresstatus;

  $node->field_agres_orderid[$langcode_unit][0]['value'] = $orderid;

  $node->field_agres_userref[$langcode_unit][0]['uid'] = $userid;
  $form_state = array();
  $form = array();
  $node->validated = TRUE;

//  drupal_set_message('<pre>valide'.print_r($node->validated,true).'</pre>');
  $retval = 0;
  if ($node->validated) {
    //Actually save the node
    node_save($node);
    $retval = $node->nid;
    $node->title = $title.'('.$node->nid.')';
    node_save($node);
  }
  return $retval;
}
/**
 * Programmatically creates a Reservationnode
 */
function _agreservations_create_Reservation($units, $checkin, $checkout, $userid = NULL, $orderid = NULL, $agresstatus = NULL,$title = 'Reservation') {
//    module_load_include('inc', 'node', 'node.pages');  
  $langcode_unit = i18n_langcode();
  $retval = NULL;
  $node = new stdClass();
  $node->is_new = 1;
  $node->title = $title;
  $node->body = "";
  $node->type = "agreservation";
  $node->uid = 1;
  $node->teaser = "";
  $node->filter = 1;
  $node->status = 1;
  $node->comment = 2;
  $node->created = REQUEST_TIME;
  $node->changed = REQUEST_TIME;
  $node->language = $langcode_unit;
  
  // Date and timezone handling
  $dateTimezone1 = new DateTimeZone(date_default_timezone());
  $dateTime1 = new DateTime($checkin, $dateTimezone1);
  $dateTime2 = new DateTime($checkout, $dateTimezone1);
  $offset = $dateTime1->getOffset();
  $offset = $offset * -1;
  $dateTime1->modify($offset . 'seconds');
  $dateTime2->modify($offset . 'seconds');
  $node->field_agres_rdate[$langcode_unit][0]['value'] = $dateTime1->format('Y-m-d H:i:s'); //'2009-07-28 00:00:00'  

  $node->field_agres_rdate[$langcode_unit][0]['value2'] = $dateTime2->format('Y-m-d H:i:s');
  $node->field_agres_rdate[$langcode_unit][0]['timezone'] = date_default_timezone();
  $node->field_agres_rdate[$langcode_unit][0]['timezone_db'] = 'UTC';
  $node->field_agres_rdate[$langcode_unit][0]['date_type'] = 'datetime';
  $node->validated = 0;
  $ik = 0;
  $node->choice = array();
  foreach ($units as $rnode) {
    $node->field_agres_ref_unit[$langcode_unit][$ik]['nid'] = $rnode->nid;
    $ik++;
  }
  $node->field_agres_status[$langcode_unit][0]['value'] = $agresstatus;

  $node->field_agres_orderid[$langcode_unit][0]['value'] = $orderid;

  $node->field_agres_userref[$langcode_unit][0]['uid'] = $userid;
  $form_state = array();
  $form = array();
  $node->validated = TRUE;
  
  if (module_exists('agres_restriction')) {
    $node->validated = _agres_restriction_node_validate($node);
  }
  
//  drupal_set_message('<pre>valide'.print_r($node->validated,true).'</pre>');
  $retval = 0;
  if ($node->validated) {
    //Actually save the node
    node_save($node);
    $retval = $node->nid;
    $node->title = $title.'('.$node->nid.')';
    node_save($node);
  }
  return $retval;
}

///**
// * @todo Please document this function.
// * @see http://drupal.org/node/1354
// */
//function agreservations_views_api() {
//  return array(
//    'api' => 2,
//    'path' => drupal_get_path('module', 'agreservations'),
//  );
//}

/**
 * Implements hook_menu().
 */
function agreservations_menu() {

  $admin = array('configure agreservations');

  // Administration settings.
  $items['admin/config/system/agreservations'] = array(
    'title' => 'Agreservations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('agreservations_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'description' => 'Configure Agreservations.',
  );


  return $items;
}

/**
 * Settings page callback.
 */
function agreservations_admin_settings($form, &$form_state) {
  $form = array();
  $form['agreservations_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('View settings'),
    '#description' => t('Agreservations settings.'),
  );

  $form['agreservations_config']['agres_createunitinfo'] = array(
    '#type' => 'select',
    '#title' => t('Unitinfo'),
    '#default_value' => variable_get('agres_createunitinfo', 'manualunitinfo'),
    '#options' => array(
      'autounitinfo' => t('autounitinfo = Autocreation of unitinforecords per booked unit. see noderelationships and editable fields...'),
      'manualunitinfo' => t('manualunitinfo = no automatic creation of unitinfo.'),
    ),
    '#description' => t('select if you want related info per reserved unit autocreated.'),
  );

  if (module_exists('agres_onlineform') || module_exists('agres_onlineformj')) {
    $form['agreservations_config']['agres_onlineformelements'] = array(
      '#type' => 'select',
      '#title' => t('Form entries for the searchwidget + multisteform for overnightbookings.'),
      '#default_value' => variable_get('agres_onlineformelements', 'standard'),
      '#options' => array(
        'standard' => t('standard = checkin date,checkout date,number of units'),
        'hotel1' => t('hotel1 = checkin date,checkout date,Number of Persons'),
      ),
      '#description' => t('select the fields to fill in in the onlinesearchwidget for sitevisitors.'),
    );
  }
  
  if (module_exists('agres_categories')){
    $form['agreservations_config']['agres_bookonunittypeview'] = array(
      '#type' => 'select',
      '#title' => t('Book On Unit Type Node View'),
      '#default_value' => variable_get('agres_bookonunittypeview', 'no'),
      '#options' => array(
        'yes' => t('yes'),
        'no' => t('no'),
      ),
      '#description' => t('select if you want to allow booking on the unit type node view.'),
    );

     $form['agreservations_config']['agres_bookonunittypeview_ubercart'] = array(
      '#type' => 'select',
      '#title' => t('If book On Unit Type Node View enabled...use Ubercart?'),
      '#default_value' => variable_get('agres_bookonunittypeview_ubercart', 'yes'),
      '#options' => array(
        'yes' => t('yes'),
        'no' => t('no'),
      ),
      '#description' => t('Select if use ubercart on book Unit Type Node View if book on unit type enabled.'),
    );
  }
  
  if (module_exists('agres_bookings') && module_exists('uc_credit')) {
    $form['agreservations_config']['agres_uc_credit_deposit'] = array(
      '#type' => 'select',
      '#title' => t('depositmultiplikator'),
      '#default_value' => variable_get('agres_uc_credit_deposit', '1'),
      '#options' => array(
        '0.05' => t('5% of the order total will be paid in advance.'),
        '0.1' => t('10% of the order total will be paid in advance.'),
        '0.2' => t('20% of the order total will be paid in advance.'),
        '0.3' => t('30% of the order total will be paid in advance.'),
        '1' => t('100% of the order total will be paid in advance.'),
      ),
      '#description' => t('select the multiplikator determining the amount of order total to be paid in advance before checkin/arrival.'),
    );
  }
  if (module_exists('agres_categories') && (module_exists('agres_restriction'))) {
    $form['agreservations_config']['agr_checkglobalrestriction_swidget'] = array(
      '#type' => 'select',
      '#title' => t('Check global restrictions on searchwidget submit?'),
      '#default_value' => variable_get('agr_checkglobalrestriction_swidget', 'yes'),
      '#options' => array(
        'no' => t('Do NOT check global Restrictions in the searchwidget'),
        'yes' => t('Check global Restrictions in the searchwidget'),
      ),
      '#description' => t('Decide wether global restrictions should be checked for anonymus unitsearch in the searchwidget'),
    );
  }
  //@todo this should be adjusted to consider the categories 
  //measurement unit/ and booking mode: days/hours /in advance:
  $form['agreservations_config']['agr_days_in_advance'] = array(
    '#type' => 'select',
    '#title' => t('How far an online reservation has to be in the future:'),
    '#options' => array(
      '0' => t('Same day allowed'),
      '1' => t('1 day in advance'),
      '2' => t('2 days in advance'),
      '3' => t('3 days in advance'),
      '4' => t('4 days in advance'),
      '5' => t('5 days in advance'),
      '6' => t('6 days in advance'),
      '7' => t('7 days in advance'),
    ),
    '#default_value' => variable_get('agr_days_in_advance', 1),
  );
  $form['agreservations_config']['agr_hours_in_advance'] = array(
    '#type' => 'select',
    '#title' => t('How far an online reservation has to be in the future:'),
    '#options' => array(
      '0' => t('Same hour allowed'),
      '1' => t('1 hours in advance'),
      '2' => t('2 hours in advance'),
      '3' => t('3 hours in advance'),
      '4' => t('4 hours in advance'),
      '5' => t('5 hours in advance'),
      '6' => t('6 hours in advance'),
      '7' => t('7 hours in advance'),
    ),
    '#default_value' => variable_get('agr_hours_in_advance', 1),
  );
  return system_settings_form($form);
}

function agreservations_page_build(&$page) {
//  rupal_set_message('<pre>pagebuild:  '.print_r($page,true).'</pre>');
  if (menu_get_object('node', 1)) {
    $node = menu_get_object('node', 1);
    if ($node->type=='agreservations_unittype') {
      $_SESSION['agres_current_page_nid'] = $node->nid; 
    } else {
      if (isset($_SESSION['agres_current_page_nid'])){
        unset($_SESSION['agres_current_page_nid']);
      }      
    }   
  } else {
     if (isset($_SESSION['agres_current_page_nid'])){
       unset($_SESSION['agres_current_page_nid']);
     }    
  }
}
/**
 * Implements hook_node_view().
 */
function agreservations_node_view($node, $view_mode, $langcode) {
  
  if ($node->type == 'agreservation') {
    $tmpdatewarg = new DateTime($node->field_agres_rdate[$node->language][0]['value']);
//        date_modify($tmpdatewarg, '+1 week'); //+1week due to missbehavior of date modules,when fixed:remove this line.
    ////
    ////
    
    $weekarg = date_format($tmpdatewarg, "Y-\WW");
    $node->content['bookingcalendarlink'] = array(
      '#prefix' => '<div>',
      '#markup' => l('Booking Calendar', 'agres_view/week/' . $weekarg),
      '#suffix' => '</div>',
      '#weight' => -1,
    );
     
  }
  if ($node->type == 'agreservations_unittype') {
    $agres_bookonunittypeview = variable_get('agres_bookonunittypeview', 'no');
    if (module_exists('agres_categories') && $agres_bookonunittypeview=='yes') {
      $langcode = i18n_langcode();
      //get category of this unit type:
      $output1 = '';
      if (module_exists('agres_availability')){
        $agres_availabilitycal= null;
        $outputavail = '';
        $agres_availabilitycal = views_get_view('agres_availability');
        $outputavail = $agres_availabilitycal->preview('block_3');
        $node->content['agrunittypeavailability'] = array(
      '#prefix' => '<div margin-top:0px;float:left;">',
      '#markup' => $outputavail,
      '#suffix' => '</div>',
      '#weight' => -1,
    );        
      }      
      
      $agreservations_unittype_form = drupal_get_form('agreservations_unittype_form',$node->field_agres_ref_category[$langcode][0]['nid'],$node->nid);
      $output1 .= drupal_render($agreservations_unittype_form);
        $node->content['agrunittypebookform'] = array(
      '#prefix' => '<div style="clear:both;margin-top:0px;float:right;">',
      '#markup' => $output1,
      '#suffix' => '</div>',
      '#weight' => 8,
    ); 
    }
        
       
  }//////$bookableproducts .= drupal_render($cartviewform);  
}

function agreservations_unittype_form($form_state, $args) {  
  $catnid = $args['build_info']['args'][0];
  $unittypenid = $args['build_info']['args'][1];
//  drupal_set_message('<pre>agreservations_unittype_formcat '.print_r($catnid,true).'</pre>');
  $cat = node_load($catnid);
  $langcode = i18n_langcode();
  if (!isset($cat->field_agres_showtime[$langcode]) || !isset($cat->field_agres_datelabel1[$langcode])) {
    $langcode = language_default('language');
    if (!isset($cat->field_agres_showtime[$langcode]) || !isset($cat->field_agres_datelabel1[$langcode])) {
       $langcode = 'und';
    }
       
  }
  $datform = 'd.m.Y';
  if (intval(BOOKING_MODE_BY_HOURS) == $cat->field_agres_showtime[$langcode][0]['value']) {
    //
    $datform = 'd.m.Y H:i';
  }
  if (isset($cat->field_agres_showtime[$langcode]) && ($cat->field_agres_showtime[$langcode][0]['value'] > 0)) {
    $datform = 'd.m.Y H:i';
    // drupal_set_message('<pre>ffff'.print_r($cat->field_agres_showtime,true).'</pre>');
  }
//    &&isset($cat->field_agres_showtime[$langcode])
  $form['unittypebook'] = array(
    '#type' => 'fieldset', 
    '#tree' => TRUE,
//    '#title' => t('Name'),
  );
  $form['unittypebook']['checkin'] = array(
//    '#prefix' => '<div>',
    '#type' => 'date_popup',
    '#tree' => TRUE,
    '#title' => $cat->field_agres_datelabel1[$langcode][0]['safe_value'],
    '#required' => TRUE,
    '#date_label_position' => 'within',
    '#size' => 10,
    '#description' => t(''),
    '#date_type' => 'datetime',
    '#date_timezone' => date_default_timezone(), //Y-m-d H:i
    '#date_format' => $datform,
    '#date_year_range' => '-0:+1',
//    '#suffix' => '</div>',
  );
  if (isset($cat->field_agres_datelabel2[$langcode][0]['safe_value'])) {
    $form['unittypebook']['checkout'] = array(
//      '#prefix' => '<div>',
      '#type' => 'date_popup',
      '#tree' => TRUE,
      '#title' => $cat->field_agres_datelabel2[$langcode][0]['safe_value'],
      //      '#default_value' =>
      '#required' => TRUE,
      '#date_label_position' => 'within',
      '#size' => 10,
      '#date_type' => 'datetime',
      '#date_timezone' => date_default_timezone(),
      '#date_format' => $datform,
      '#date_year_range' => '-0:+1',
//      '#suffix' => '</div>',
    );
  }
//  if ($cat->field_agres_shownumberunits[$langcode][0]['value'] == 1) {
    $form['unittypebook']['units'] = array(
      '#prefix' => '<div>',
      '#type' => 'select',
      '#title' => t('units'), //$category->title . ' ' . t('count'), //t('Units'),
      '#default_value' => $cat->field_agres_numberunits[$langcode][0]['value'],
      '#options' => array(
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
      ),
      '#suffix' => '</div>',
    );
//  }
  $form['unittype'] = array('#type' => 'value', '#value' => $unittypenid);
  
  $form['unittypebook']['submit'] = array(
    
    '#prefix' => '<div>',
    '#tree' => TRUE,
    '#type' => 'submit',
    '#title' => 'Book',
    '#value' => 'Book',
    // '#submit' => array('agres_categories_searchwidget_form_submit'),
    '#suffix' => '</div>',
  );

  return $form;
}

////*when anonymous users clicks search on the searchform:*/
//
function agreservations_unittype_form_submit($form, $form_state) {
  if (module_exists('uc_cart')){
    drupal_set_message('<pre>UBERCART BUY IT NOW!' . print_r($form_state, TRUE) . '</pre>');
//  drupal_set_message('<pre>agreservations_unittype_form_submit' . print_r($form_state, TRUE) . '</pre>');
  _agreservations_create_Reservation($unitsToBook, $userrequest['checkintime'], $userrequest['checkouttime'], NULL, NULL, AGRES_STATUS_ONLINE_NO_ORDER_YET);
  if (isset($form_state['build_info']['args'][0])) {
    $cat = $form_state['build_info']['args'][0];
    $langcode = i18n_langcode();
    if (!isset($cat->field_agres_showtime[$langcode]) || !isset($cat->field_agres_datelabel1[$langcode])) {
      $langcode = 'und';
    }
    if (module_exists('uc_cart')) {
      uc_cart_empty(uc_cart_get_id());
    }

//  drupal_set_message('<pre>agres_categories_searchwidget_form_submit' . print_r($form_state, TRUE) . '</pre>');
    if (isset($form_state['build_info']['args'][0])) {
      $cat = $form_state['build_info']['args'][0];
      if (isset($form_state['values']['adults'])) {
        $adults = $form_state['values']['adults'];
      }

      if (isset($form_state['values']['children'])) {
        $children = $form_state['values']['children'];
      }

      if (isset($form_state['values']['units'])) {
        $requestedunits = $form_state['values']['units'];
      }

      if (isset($form_state['values']['checkin'])) {
        $tmpDateCheckin = date_create($form_state['values']['checkin']);
      }

      if (isset($form_state['values']['checkout'])) {
        $tmpDateCheckout = date_create($form_state['values']['checkout']);
      }
      if (($cat->field_agres_showtime[$langcode][0]['value'] !== 1) && (isset($cat->field_agres_defaultcheckintime[$langcode][0]['value']))) {
        date_modify($tmpDateCheckin, $cat->field_agres_defaultcheckintime[$langcode][0]['value']);
        date_modify($tmpDateCheckout, $cat->field_agres_defaultcheckouttime[$langcode][0]['value']);
      }
      $checkintime = date_format($tmpDateCheckin, 'Y-m-d H:i:s');
      $checkouttime = date_format($tmpDateCheckout, 'Y-m-d H:i:s');

//    /* get reservable units: */
      if (isset($form_state['build_info']['args'][0])) {
        $categorynid = $form_state['build_info']['args'][0]->nid;
        $resnodes = agreservations_get_reservable_items('agreservations_unit', date_format($tmpDateCheckin, 'Y-m-d H:i:s'), date_format($tmpDateCheckout, 'Y-m-d H:i:s'), $categorynid);      
      }
      else {
//        $resnodes = agreservations_get_reservable_items('agreservations_unit', date_format($tmpDateCheckin, 'Y-m-d H:i:s'), date_format($tmpDateCheckout, 'Y-m-d H:i:s'));
      }
      $availableunittypes = _agreservations_get_reservable_unittypes($resnodes, FALSE);
//    //Filter types:
      $_SESSION['availableunittypes'] = $availableunittypes;
      $foundunits = count($resnodes);
      $userrequest['checkintime'] = $checkintime;
      $userrequest['checkouttime'] = $checkouttime;
      if (isset($adults)) {
        $userrequest['adults'] = $adults;
      }
      if (isset($children)) {
        $userrequest['children'] = $children;
      }

      if (isset($requestedunits)) {
        $userrequest['requestedunits'] = $requestedunits;
      }
      else {
        $userrequest['requestedunits'] = 1;
        $requestedunits = 1;
      }
      $datstr =  date_format($tmpDateCheckin, 'YmdHis') . date_format($tmpDateCheckout, 'YmdHis') . $requestedunits;
      $cat = $form_state['build_info']['args'][0];
      $form_state['rebuild'] = true;
      unset($form_state['values']);
      agres_categories_search_result($userrequest, $cat, $datstr);

    }
    else {
      $content = '<div>' . t('Category not set') . '</div>';
      $content = $content . '<br><a href="' . base_path() . '">' . t('back') . '<a>';
      print theme('page', $content);
    }
  }
  else {
    drupal_set_message('Category not set!');
  }    
  } 
  else {
//    drupal_set_message('<pre>nicht ubercart' . print_r($form_state, TRUE) . '</pre>');
  }

}

///**
// * Implementation of hook validate():
// */
function agreservations_unittype_form_validate($form, $form_state) {
      
//       drupal_set_message('<pre>submit****'.print_r($form_state['build_info']['args']).'</pre>');
  $datform = 'Y-m-d H:i:s'; //:s
  if (isset($form_state['build_info']['args'][0])) {
    $catnid = $form_state['build_info']['args'][0];
    $cat = node_load($catnid);
    $langcode = 'und';
    $langcode = i18n_langcode();
//    if (!isset($cat->field_agres_showtime[$langcode]) || !isset($cat->field_agres_datelabel1[$langcode])) {
      
//    }
//    drupal_set_message('<pre>cat****'.print_r($cat,true).'</pre>');
    if (!isset($form_state['values']['unittypebook']['units'])) {
      $form_state['values']['unittypebook']['units'] = 1;
    }
    $requestedunits = $form_state['values']['unittypebook']['units'];
    if (!isset($form_state['values']['unittypebook']['checkin']['date']) || ($form_state['values']['unittypebook']['checkin']['date'] == '')) {
      form_set_error('unitinfo', t('Checkout-time has to be entered'));
//      drupal_set_message('<pre>agreservations_unittype_form_validate****'.print_r($form_state,TRUE).'</pre>');
      return;
    }
    else {
      $tmpDateCheckin = date_create($form_state['values']['unittypebook']['checkin']);
    }
    $langcode_csu = 'und';
    $langcode_csu = field_language('node', $cat,'field_agres_shownumberunits');
    $langcode_cnu = 'und';
    $langcode_cnu = field_language('node', $cat,'field_agres_numberunits');    
    if (($cat->field_agres_shownumberunits[$langcode_csu][0]['value'] !== 1) && (isset($cat->field_agres_numberunits[$langcode_cnu][0]['value']))) {
      $form_state['values']['unittypebook']['units'] = $cat->field_agres_numberunits[$langcode_cnu][0]['value'];
    }
    $langcode_cdl2 = 'und';
    $langcode_cdl2 = field_language('node', $cat,'field_agres_datelabel2');        
    if (!isset($cat->field_agres_datelabel2[$langcode_cdl2][0]['value'])) {
//      drupal_set_message('<pre>hier</pre>');
      if (!isset($form_state['values']['unittypebook']['checkout'])) {
        form_set_error('unitinfo', t('Checkout-time has to be entered'));
      }
      $tmpDateCheckout = date_create($form_state['values']['unittypebook']['checkin']);
    }
    else {
      if (!isset($form_state['values']['unittypebook']['checkout']) || ($form_state['values']['unittypebook']['checkout']['date'] == '')) {
        form_set_error('unitinfo', t('Checkout-time has to be entered'));
        return;
      }
      $tmpDateCheckout = date_create($form_state['values']['unittypebook']['checkout']);


    }

    //check restrictions if modules is enabled:
    if (module_exists('agres_restriction') && (variable_get('agr_checkglobalrestriction_swidget', 'yes') == 'yes')) {
      $message = agres_timeframe_api('check_restrictions', array(
        'start_date' => $form_state['values']['unittypebook']['checkin'],
        'end_date' => $form_state['values']['unittypebook']['checkout'],
      ));
    }
        $langcode_cst = 'und';
    $langcode_cst = field_language('node', $cat,'field_agres_showtime');  
        $langcode_cdc = 'und';
    $langcode_cdc = field_language('node', $cat,'field_agres_defaultcheckintime');     
        $langcode_cdco = 'und';
    $langcode_cdco = field_language('node', $cat,'field_agres_defaultcheckouttime');      
//           drupal_set_message('<pre>agres_categories_searchwidget_form_validate****'.print_r($cat->field_agres_defaultcheckintime,TRUE).'</pre>');
    if (($cat->field_agres_showtime[$langcode_cst][0]['value'] !== 1) && (isset($cat->field_agres_defaultcheckintime[$langcode_cdc][0]['value']))) {

      date_modify($tmpDateCheckin, $cat->field_agres_defaultcheckintime[$langcode_cdc][0]['value']);
      $form_state['values']['unittypebook']['checkin'] = $tmpDateCheckin->format($datform);
      date_modify($tmpDateCheckout, $cat->field_agres_defaultcheckouttime[$langcode_cdco][0]['value']);
      $form_state['values']['unittypebook']['checkout'] = $tmpDateCheckout->format($datform);

    }
        $langcode_cdur = 'und';
    $langcode_cdur = field_language('node', $cat,'field_agres_duration');      
    //apply duration if set and only from: date is askedfor/entered by user:
    if (isset($cat->field_agres_duration[$langcode_cdur])) {
      if (($cat->field_agres_duration[$langcode_cdur][0]['approx_seconds'] > 0) && (!isset($cat->field_agres_datelabel2[$langcode_cdl2][0]['value']))) {
        $tmpDateCheckout = date_create($form_state['values']['unittypebook']['checkin']);
        date_modify($tmpDateCheckout, '+' . $cat->field_agres_duration[$langcode_cdur][0]['approx_seconds'] . ' second');
        //write back to form_state:

        $form_state['values']['unittypebook']['checkout'] = $tmpDateCheckout->format($datform);
      }
    }
    /*         * *******************check servicehours!****************************************************************** */
    $checkinisinrange = _agres_categories_check_servicehours($tmpDateCheckin, $cat);
    $checkoutisinrange = _agres_categories_check_servicehours($tmpDateCheckout, $cat);
    if ($checkinisinrange === FALSE) {
      form_set_error('unitinfo', t('Checkin-time has to be within service hours '));
    }
    if ($checkoutisinrange === FALSE) {
      form_set_error('unitinfo', t('Checkout-time has to be within service hours '));
    }

    if ($tmpDateCheckin >= $tmpDateCheckout) {
      form_set_error('unitinfo', t('Checkin has to be before Checkout '));
    }
    if ($tmpDateCheckin <= new DateTime()) {
      form_set_error('unitinfo', t('Checkin is has to be in the future !!! '));
    }
    $checkintime = date_format($tmpDateCheckin, 'Y-m-d H:i:s');
    $checkouttime = date_format($tmpDateCheckout, 'Y-m-d H:i:s');

    /* get reservable units: */
    $resnodes = agreservations_get_reservable_items('agreservations_unit', date_format($tmpDateCheckin, 'Y-m-d H:i'), date_format($tmpDateCheckout, 'Y-m-d H:i'), $cat);

    $foundunits = count($resnodes);
    if ($requestedunits > 0) {
      if ($requestedunits > $foundunits) {
        form_set_error('unitinfo', t('Not enough free units found.'));
      }
    }
    elseif ($requestedunits == 0) {
    $langcode_cusel = 'und';
    $langcode_cusel = field_language('node', $cat,'field_agres_unitselectionmethod');      
      if (!($cat->field_agres_shownumberunits[$langcode_csu][0]['value'] == 2 && $cat->field_agres_unitselectionmethod[$langcode_cusel][0]['value'] == 2) ) {
        form_set_error('unitinfo', t('Number of units has to be > 0'));
      }
    }
    $tmpagres_onlineformjelements = variable_get('agres_onlineformjelements', 'standard');
  }
  else {
    form_set_error('unitinfo', t('agres_category not set! Please try again'));
  }
}

/**
 *return date based on reservation node object.
 */
function _agreservations_show_date1($res,$format = 'Y-m-d H:i:s') {
      $langcode_rdate = 'und';
    $langcode_rdate = field_language('node', $res,'field_agres_rdate'); 
  $dateTimezone1 = new DateTimeZone(date_default_timezone());
  $dateTime1 = new DateTime($res->field_agres_rdate[$langcode_rdate][0]['value'], $dateTimezone1);
  $dateTime2 = new DateTime($res->field_agres_rdate[$langcode_rdate][0]['value2'], $dateTimezone1);
  $offset = $dateTime1->getOffset();
  $offset = $offset * 1;
  $dateTime1->modify($offset . 'seconds');
  $dateTime2->modify($offset . 'seconds');
  $retstrdate = $dateTime1->format($format);
  return $retstrdate;
}

/**
 *return date based on reservation node object.
 */
function _agreservations_show_date2($res,$format = 'Y-m-d H:i:s') {
  $langcode_rdate = 'und';
  $langcode_rdate = field_language('node', $res,'field_agres_rdate');   
  $dateTimezone1 = new DateTimeZone(date_default_timezone());
  $dateTime1 = new DateTime($res->field_agres_rdate[$langcode_rdate][0]['value'], $dateTimezone1);
  $dateTime2 = new DateTime($res->field_agres_rdate[$langcode_rdate][0]['value2'], $dateTimezone1);
  $offset = $dateTime1->getOffset();
  $offset = $offset * 1;
  $dateTime1->modify($offset . 'seconds');
  $dateTime2->modify($offset . 'seconds');
  $retstrdate = $dateTime2->format($format);
  return $retstrdate;
}