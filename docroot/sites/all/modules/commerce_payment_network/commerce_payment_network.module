<?php
/**
 * @file
 * Implements Payment Network payment services for use in Drupal Commerce.
 */

/**
 * Privide the Payment Network name/title.
 */
define('COMMERCE_PAYMENT_NETWORK_NAME', 'Payment Network');

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the payment_network payment method.
 */
function commerce_payment_network_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['payment_network'] = array(
    'base' => 'commerce_payment_network',
    'title' => t('!payment_network', array('!payment_network' => COMMERCE_PAYMENT_NETWORK_NAME)),
    'short_title' => t('!payment_network', array('!payment_network' => COMMERCE_PAYMENT_NETWORK_NAME)),
    'display_title' => t('!payment_network', array('!payment_network' => COMMERCE_PAYMENT_NETWORK_NAME)),
    'description' => t('Integrates !payment_network payment system.', array('!payment_network' => COMMERCE_PAYMENT_NETWORK_NAME)),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'file' => 'includes/commerce_payment_network.ophooks.inc'
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * Alter the payment method display title.
 */
function commerce_payment_network_commerce_payment_method_info_alter(&$payment_methods) {
  $rules_config = rules_config_load('commerce_payment_payment_network');

  if (!$rules_config) {
    return;
  }

  if ($rules_config) {
    $icons = commerce_payment_network_icons();
    $sofortbanking = t('sofortbanking');

    drupal_add_css(drupal_get_path('module', 'commerce_payment_network') . '/theme/commerce_payment_network.checkout.css');

    // Get settings of the payment method
    // to get the value for the checkout inform image:
    // - TRUE: Hide the image.
    // - FALSE: Display the image.
    // Prepare any values to use for the display of the checkout content.
    if ($rules_config->active) {
      $payment_method = commerce_payment_method_instance_load('payment_network|commerce_payment_payment_network');
      $payment_method_settings = $payment_method['settings'];

      if ($payment_method_settings['checkout_inform_image'] == TRUE) {
        $icons['sofort'] = '';

        $payment_network_languages = commerce_payment_network_languages();
        $payment_network_language = _commerce_payment_network_get_payment_network_language($payment_network_languages);

        $sofortbanking = l(t('sofortbanking'), _commerce_payment_network_get_payment_network_url($payment_network_language), array('attributes' => array('title' => COMMERCE_PAYMENT_NETWORK_NAME, 'target' => '_blank')));
      }
    }

    // Configure the checkout content.
    $display_title = COMMERCE_PAYMENT_NETWORK_NAME;
    $display_title .= '<div class="commerce-payment-network-method-info clearfix">' . "\n";
    $display_title .= '<div class="commerce-payment-network-info">';
    $display_title .= t('With !sofortbanking you can pay without registering convenient and easy with your online banking account. You will need your login details for your online banking with your bank (PIN/TAN).', array('!sofortbanking' => $sofortbanking));
    $display_title .= '</div>' . "\n";
    $display_title .= '<div class="commerce-payment-network-icons">' . $icons['sofort'] . '</div>' . "\n";
    $display_title .= '</div>' . "\n";

    $payment_methods['payment_network']['display_title'] = $display_title;
  }
}

/**
 * Implements hook_menu().
 */
function commerce_payment_network_menu() {
  $items = array();

  // Define an always accessible path to receive HTTP(s) notifications.
  $items['commerce_payment_network/notification'] = array(
    'page callback' => 'commerce_payment_network_notification',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback.
 *
 * Process incoming HTTP notifications.
 *
 * @see commerce_payment_network_menu()
 *
 * @todo Handle incoming notifications when having a SofortBank Account.
 */
function commerce_payment_network_notification() {
  // Look for incoming notifications.
  if (isset($_POST['order_id']) && isset($_POST['status']) || isset($_POST['hash'])) {
    watchdog('Commerce Payment Network', 'Received: ' . check_plain($_POST['order_id']), array(), WATCHDOG_INFO);
  }

  return FALSE;
}


/**
 * Returns an array of Payment Network payment method icon img elements.
 *
 * @return
 *   An associative array of themed payment method icons keyed by name: sofort
 *
 * @see commerce_payment_network_commerce_payment_method_info_alter()
 */
function commerce_payment_network_icons() {
  global $language_content;

  $icons = array();
  $payment_network_languages = commerce_payment_network_languages();

  // Image languages.
  // Currently (06/2012) supported two languages by Payment Networg AG.
  // de, en
  $img_lang = 'en';

  if ($language_content->language == 'de') {
    $img_lang = 'de';
  }

  // Interface languages.
  // See commerce_payment_network_languages() for currently (06/2012)
  // supported languages by Payment Networg AG.
  // Example language strings: sue_de, deb_com_en, deb_com_es
  $payment_network_language = _commerce_payment_network_get_payment_network_language($payment_network_languages);

  $payment_methods = array(
    'sofort' => array(
      // Website URL.
      'url' => _commerce_payment_network_get_payment_network_url($payment_network_language),
      // Image.
      'path' => drupal_get_path('module', 'commerce_payment_network') . '/images/' . $img_lang . '/sofortbanking.png',
      'alt' => COMMERCE_PAYMENT_NETWORK_NAME
    )
  );

  foreach ($payment_methods as $name => $content) {
    $variables = array(
      'path' => $content['path'],
      'alt' => $content['alt'],
      'attributes' => array(
        'class' => array('commerce-payment-network-icon')
      )
    );

    $image = theme('image', $variables);
    $link = l($image, $content['url'], array('html' => TRUE, 'attributes' => array('title' => COMMERCE_PAYMENT_NETWORK_NAME, 'target' => '_blank')));

    $icons[$name] = $link;
  }

  return $icons;
}

/**
 * Helper function for the redirect_form callback.
 *
 * Builds an payment network payment form from an order object.
 *
 * @see commerce_payment_network_redirect_form()
 */
function commerce_payment_network_build_redirect_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get financial info.
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  // Build the data array that will be translated into hidden form values.
  // NOTE: Keys should be uppercase for the SHA-1 security string.
  $data = array(
    // General parameters:
    // User ID.
    'user_id' => $settings['userid'],
    // Project ID.
    'project_id' => $settings['projectid'],
    // Sender holder.
    'sender_holder' => '',
    // Sender account number.
    'sender_account_number' => '',
    // Sender bank code.
    'sender_bank_code' => '',
    // Sender country ID.
    'sender_country_id' => '',
    // Order amount.
    'amount' => round(commerce_currency_amount_to_decimal($amount, $currency_code), 2),
    // Currency ID.
    'currency_id' => $currency_code,
    // Payment reason line 1.
    'reason_1' => t('Order @order_number', array('@order_number' => $order->order_number)),
    // Payment reason line 2.
    'reason_2' => '',
    // Custom user variables, we use these variables for the order id.
    'user_variable_0' => $order->order_number,
    'user_variable_1' => $order->data['payment_redirect_key'],
    'user_variable_2' => '',
    'user_variable_3' => '',
    'user_variable_4' => '',
    'user_variable_5' => ''
  );

  // Allow modules to add or alter the data sent to Payment Network AG.
  drupal_alter('commerce_payment_network_data', $data, $order, $settings);

  // Redirect to Payment Network AG.
  $form['#action'] = $settings['soforturl'];

  // Data array for hash generation.
  $hashdata = array(
    $data['user_id'],
    $data['project_id'],
    $data['sender_holder'],
    $data['sender_account_number'],
    $data['sender_bank_code'],
    $data['sender_country_id'],
    $data['amount'],
    $data['currency_id'],
    $data['reason_1'],
    $data['reason_2'],
    $data['user_variable_0'],
    $data['user_variable_1'],
    $data['user_variable_2'],
    $data['user_variable_3'],
    $data['user_variable_4'],
    $data['user_variable_5'],
    $settings['project_pass']
  );

  // Generate SHA-1 security string & add hidden parameters to form.
  $hash = '';

  // Generate a string, seperated with | for SHA1 generation.
  $data_implode = implode('|', $hashdata);
  $hash = sha1($data_implode);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $value = trim($value);
      // Add the value as a hidden form element.
      $form[$name] = array(
        '#type' => 'hidden',
        '#value' => $value
      );
    }
  }

  // Add the calculated SHA-1 string.
  $form['hash'] = array(
    '#type' => 'hidden',
    '#value' => $hash
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed with payment')
  );

  return $form;
}

/**
 * Implements hook_redirect_form_validate().
 */
function commerce_payment_network_redirect_form_validate($order, $payment_method) {
  // Prepare $_GET values that are being sent by Payment Network AG for processing.
  $feedback = array(
    'status' => $_GET['status'],
    'transaction_id' => $_GET['transaction'],
  );

  $hash = $_GET['hash'];
  $hashcheck = sha1($order->order_id . $payment_method['settings']['project_pass']);

  // Check if the SHA-1 string genrerated from Order ID and Password is valid.
  if ($hash != $hashcheck) {
    watchdog('Commerce Payment Network', "SHA signature doesn't match.", array(), WATCHDOG_ERROR);

    return FALSE;
  }
  else {
    watchdog('Commerce Payment Network', 'SHA signature match.', array(), WATCHDOG_INFO);
    // Process the transaction based on the Payment Network parameters received.
    commerce_payment_network_process_transaction($order, $payment_method, $feedback);

    return TRUE;
  }
}

/**
 * Process the payment transaction with the info received from Payment Network.
 *
 * @param $order
 *   An array containing the loaded order that is being processed.
 * @param $payment_method
 *   An array containing the payment method settings.
 * @param $feedback
 *   An array containing parameters received from Payment Network
 *   regarding the payment.
 *
 * @see commerce_payment_network_redirect_form_validate()
 */
function commerce_payment_network_process_transaction($order, $payment_method, $feedback) {
  $transaction = commerce_payment_transaction_new('payment_network', $order->order_id);
  $payment_status = commerce_payment_network_feedback_status($feedback['status']);

  // Identifying data.
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $feedback['transaction_id'];
  // Payment amount details.
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  // Payment status.
  $transaction->remote_status = $feedback['status'];
  $transaction->status = $payment_status['code'];
  $transaction->message = $payment_status['message'];

  commerce_payment_transaction_save($transaction);
}

/**
 * Get a payment status and message based on payment network status.
 *
 * @param $status
 *   Possible received payment network status:
 *   - pending: not_credited_yet (money not received)
 *   - loss: not_credited (money not received)
 *   - refunded: refunded (money sended back)
 *   - received: credited (money received)
 *   - received: consumer_protection (money received on a escrow account)
 *   - loss: complaint (buyer protection used)
 *   - refunded: compensation (money sended back from escrow account)
 *
 * @return
 *   An associative array containing:
 *   - code: The commerce status.
 *   - message: A textual representation of the payment network status.
 *
 * @see commerce_payment_network_process_transaction()
 */
function commerce_payment_network_feedback_status($status) {
  switch ($status) {
    case 'received':
      // Success.
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Payment received.');
      break;

    case 'pending':
      // Pending.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authorization waiting.');
      break;

    case 'loss':
      // Failure.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment is expected in the period not received.');
      break;
  }

  return array(
    'code' => $st,
    'message' => $msg,
  );
}

/**
 * Helper function to provide available Payment Network AG languages.
 *
 * @return
 *   The associative array contains language IDs.
 *
 * @see commerce_payment_network_icons()
 */
function commerce_payment_network_languages() {
  return array(
    'sofort' => array(
      'de' => 'sue_de',
      'en' => 'deb_com_en',
      'fr' => 'deb_com_fr',
      'nl' => 'deb_com_nl',
      'it' => 'deb_com_it',
      'es' => 'deb_com_es',
      'pl' => 'deb_com_pl'
    )
  );
}

/**
 * Helper function to get a Payment Network AG website language.
 *
 * @return
 *   A string contains a language identifier. As examples: sue_de, deb_com_en
 *
 * @see commerce_payment_network_icons()
 */
function _commerce_payment_network_get_payment_network_language($payment_network_languages) {
  global $language_content;

  $flip = array_flip($payment_network_languages['sofort']);
  $payment_network_language = $payment_network_languages['sofort']['en'];

  if (in_array($language_content->language, $flip)) {
    $payment_network_language = $payment_network_languages['sofort'][$language_content->language];
  }

  return $payment_network_language;
}

/**
 * Helper function to get the Payment Network AG URL.
 *
 * @param $payment_network_language
 *   A string contains a language identifier.
 *
 * @return
 *   The raw language dependent Payment Network AG URL.
 *
 * @see commerce_payment_network_commerce_payment_method_info_alter()
 * @see commerce_payment_network_icons()
 */
function _commerce_payment_network_get_payment_network_url($payment_network_language) {
  return 'http://www.payment-network.com/' . $payment_network_language;
}
