<?php

/**
 * @file
 * Provides functionality for embedding external resources inside local content.
 */

/**
 * Implements hook_ctools_plugin_type().
 */
function embed_external_ctools_plugin_type() {
  $plugins = array(
    'embeddable' => array(),
  );
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function embed_external_ctools_plugin_directory($module, $type) {
  if ($module == 'embed_external' && $type == 'embeddable') {
    return 'plugins/embeddable';
  }
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }

  return NULL;
}

/**
 * Retrieve plugin information for all embeddable plugins.
 *
 * @param string $plugin
 *   (optional) The machine name of the plugin to retrieve info for. If
 *   supplied, this function will only return data for the specified plugin.
 *
 * @return mixed
 *   An array keyed by plugin machine names of plugin information.
 */
function embed_external_get_embeddables($plugin = '') {
  ctools_include('plugins');
  if ($plugin == '') {
    return ctools_get_plugins('embed_external', 'embeddable');
  }
  else {
    return ctools_get_plugins('embed_external', 'embeddable', $plugin);
  }
}

/**
 * Retrieve plugin information for a specfic embeddable plugin.
 *
 * @param $plugin
 *   The machine name of the plugin to retrieve info for.
 *
 * @return mixed
 *   A single-element array keyed by $plugin where the value is an array of
 *   plugin information.
 */
function embed_external_get_embeddable($plugin) {
  return embed_external_get_embeddables($plugin);
}

/**
 * Retrieve plugin info by pluginset.
 *
 * Returns info about enabled plugins in a pluginset keyed by machine name.
 */
function embed_external_get_embeddables_from_pluginset($pluginset) {
  $enabled_plugins = drupal_map_assoc(unserialize($pluginset->enabled_plugins));

  foreach ($enabled_plugins as $machine_name => $plugin) {
    // @todo What if a plugin is removed? Add error checking.
    $enabled_plugins[$machine_name] = (object) embed_external_get_embeddable($machine_name);
  }

  return $enabled_plugins;
}

/**
 * Implements hook_permission().
 */
function embed_external_permission() {
  return array(
    'administer embeddable services' => array(
      'title' => 'Administer embeddable services',
    ),
    'use embeddable services' => array(
      'title' => 'Use embeddable services',
    ),
  );
}

/**
 * Load a single pluginset.
 *
 * @param $pid
 *   The machine name of the pluginset to load.
 *
 * @return mixed
 *   An object representing the pluginset.
 */
function embed_external_pluginset_load($pid) {
  ctools_include('export');
  $result = ctools_export_load_object('embed_external_pluginset', 'names', array($pid));
  if (isset($result[$pid])) {
    return $result[$pid];
  }
}

/**
 * Export a single pluginset.
 *
 * @param $obj
 *   The pluginset to export, as returned by embed_external_pluginset_load().
 * @param string $indent
 *   (optional) A string containing arbitrary characters to indent each line of
 *   the export with.
 *
 * @return string
 *   PHP code for the exported pluginset.
 */
function embed_external_pluginset_export($obj, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('embed_external_pluginset', $obj, $indent);
  return $output;
}

/**
 * Implements hook_wysiwyg_include_directory().
 */
function embed_external_wysiwyg_include_directory($type) {
  if ($type == 'plugins') {
    return 'plugins/wysiwyg';
  }
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function embed_external_wysiwyg_plugin($editor, $version) {
  if ($version > 4 && $editor == 'ckeditor') {
    return array(
      'embed_external_widget' => array(
        'url' => 'https://www.drupal.org/project/embed_external',
        'path' => drupal_get_path('module', 'embed_external') . '/plugins/wysiwyg/embed_external',
        'filename' => 'embed_external_widget.js',
        'buttons' => array(
          'embed_external_widget' => t('Embed External Widget'),
        ),
        'load' => TRUE,
        'internal' => FALSE,
      ),
    );
  }
}

/**
 * Implements hook_filter_info().
 */
function embed_external_filter_info() {
  $filters = array();

  $filters['embed_external'] = array(
    'title' => t('Embed external'),
    'description' => t("Replaces &lt;iframe&gt; elements with the appropriate embed markup."),
    'process callback' => 'embed_external_filter_process',
    'tips callback' => 'embed_external_filter_tips',
    'cache' => FALSE,
  );

  return $filters;
}

/**
 * Process callback for embed_external.
 *
 * @param $text
 *   The text to filter.
 * @param $filter
 *   Information about the current filter.
 *
 * @return string
 *   Returns the filtered text.
 *
 * @see embed_external_filter_info()
 * @see embed_external_plugin_preview()
 */
function embed_external_filter_process($text, $filter) {
  $html_dom = html5_tools_filter_dom_load($text);
  $embeds = $html_dom->getElementsByTagName('iframe');

  // Modifications to the DOMDocument resets the iteration, so we avoid
  // that by looping from last to first.
  $last_index = $embeds->length - 1;

  while ($last_index >= 0) {
    $embed = $embeds->item($last_index);
    // Gather the attributes of the iframe element to pass to
    // the plugin's render callback.
    $attributes = array();
    foreach ($embed->attributes as $attribute) {
      $nodeName = preg_replace('/^data-/', '', $attribute->nodeName);
      // Convert dashes back to underscores.
      $nodeName = str_replace('-', '_', $nodeName);
      $attributes[$nodeName] = $attribute->nodeValue;
    }

    // Check to make sure that we care about this node.
    if (!isset($attributes['class']) || strpos($attributes['class'], 'embed-external') === FALSE) {
      continue;
    }

    $plugin = embed_external_get_embeddable($attributes['plugin']);

    $embed_element = call_user_func_array($plugin['render_callback'], array(
      $html_dom,
      $attributes,
    ));

    try {
      $embed->parentNode->replaceChild($embed_element, $embed);
    }
    catch (Exception $e) {
      $embed->parentNode->removeChild($embed);
    }

    $last_index--;
  }

  // @todo Switch to html5_tools_filter_dom_serialize(). The serializer doesn't
  // behave like filter_dom_serialize() right now, so falling back to the built
  // in serializer in PHP. There shouldn't be any harm in this, but if we notice
  // weird XHTML-ish output, this would likely be a good starting point.
  $text = filter_dom_serialize($html_dom);

  return $text;
}

/**
 * Implements hook_menu().
 */
function embed_external_menu() {
  $items['embed_external/%/%/%ctools_js/form'] = array(
    'title' => 'Embed external media',
    'page callback' => 'embed_external_plugin_select_form',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('use embeddable services'),
    'type' => MENU_CALLBACK,
  );

  $items['embed_external/preview/%'] = array(
    'title' => 'Embed external preview',
    'page callback' => 'embed_external_plugin_preview',
    'page arguments' => array(2),
    'access arguments' => array('use embeddable services'),
    'delivery callback' => 'embed_external_deliver_preview',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function embed_external_admin_paths() {
  $paths = array(
    'embed_external/*' => TRUE,
  );
  return $paths;
}

/**
 * Plugin preview callback.
 *
 * @param $plugin
 *   The machine name of the plugin to generate a preview for.
 *
 * @return string|void
 *   Markup for the plugin preview, or drupal_not_found().
 */
function embed_external_plugin_preview($plugin) {
  $plugin = embed_external_get_embeddable($plugin);

  if (!$plugin) {
    return drupal_not_found();
  }

  $query_params = drupal_get_query_parameters();

  $configuration = array(
    'plugin' => $plugin['name'],
  );
  foreach ($plugin['arguments']['required'] as $key) {
    if (isset($query_params[$key])) {
      $configuration[$key] = $query_params[$key];
    }
  }
  foreach ($plugin['arguments']['optional'] as $key) {
    if (isset($query_params[$key])) {
      $configuration[$key] = $query_params[$key];
    }
  }

  $embed_markup = embed_external_generate_embed_snippet($configuration);
  $rendered_embed = embed_external_filter_process($embed_markup, '');

  return $rendered_embed;
}

/**
 * Plugin preview delivery callback.
 *
 * @param $page_callback_result
 *   The result of the page callback, usually embed_external_plugin_preview().
 *
 * @return
 */
function embed_external_deliver_preview($page_callback_result) {
  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {
    return drupal_deliver_html_page($page_callback_result);
  }

  // If we got a render array, render it.
  if (is_array($page_callback_result)) {
    $page_callback_result = drupal_render($page_callback_result);
  }

  // Add the iframe resizer script so that the preview size will update
  // automagically.
  drupal_add_js(drupal_get_path('module', 'embed_external') . '/js/iframeResizer.contentWindow.min.js');

  // Get page styles and JavaScript.
  $styles = drupal_get_css();
  $scripts = drupal_get_js();

  global $language;
  drupal_add_http_header('Content-Language', $language->language);
  drupal_add_http_header('Content-Type', 'text/html; charset=utf8');


  $content = <<<EOL
<!DOCTYPE html>
<html lang="$language->language">
  <head>
    <title></title>
    $styles
    $scripts
  </head>
  <body class="embed-external-preview">
    $page_callback_result
  </body>
</html>
EOL;

  print $content;

  // Perform end-of-request tasks.
  drupal_page_footer();
}

/**
 * CTools multistep form for selecting the plugin to embed.
 *
 * @param $pluginset
 *   The machine name of the current pluginset.
 * @param $return_id
 *   The wysiwyg instance ID to insert rendered content into.
 * @param null $js
 *   (optional) Whether or not this is an ajax request or not (either "nojs" or
 *   "ajax").
 * @param null $step
 *   (optional) Which step of the form we're on.
 *
 * @return array
 *   Ajax commands to run on the client.
 */
function embed_external_plugin_select_form($pluginset, $return_id, $js = NULL, $step = NULL) {
  global $user;

  if (!$pluginset) {
    drupal_not_found();
    return NULL;
  }
  else {
    // @todo It's probably better to use a ctools context plugin to pass this
    // in, but this works for now.
    $pluginset = embed_external_pluginset_load($pluginset);
  }

  if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
  }

  $form_info = array(
    'id' => 'embed_external_plugin_select',
    'path' => 'embed_external/' . $pluginset->name . '/' . $return_id . '/' . ($js ? 'ajax' : 'nojs') . "/form/%step",
    'show trail' => FALSE,
    'show back' => TRUE,
    'show cancel' => TRUE,
    'show return' => FALSE,
    'next callback' => 'embed_external_plugin_select_form_next',
    'finish callback' => 'embed_external_plugin_select_form_finish',
    'cancel callback' => 'embed_external_plugin_select_form_cancel',
    'order' => array(
      'plugin_select' => t('Select service'),
      'plugin_configure' => t('Configure service'),
      'plugin_preview' => t('Preview embedded media'),
    ),
    'forms' => array(
      'plugin_select' => array(
        'form id' => 'embed_external_plugin_select_select',
      ),
      'plugin_configure' => array(
        'form id' => 'embed_external_plugin_select_configure',
      ),
      'plugin_preview' => array(
        'form id' => 'embed_external_plugin_select_preview',
      ),
    ),
  );

  // @todo This is probably not the best object ID. Find some other unique identifier.
  $object_id = 'embed_external_plugin_select-' . $user->uid;

  if (empty($step)) {
    embed_external_plugin_select_cache_clear($object_id);
    $step = 'plugin_select';
  }

  $object = embed_external_plugin_select_cache_get($object_id);

  // If we're editing already existing content, pull its values into the
  // $form_state->configuration object.
  if (!empty($_REQUEST['embed_external_edit'])) {
    foreach ($_REQUEST['embed_external_edit'] as $key => $value) {
      // Change dashes back to underscores.
      $key = str_replace('-', '_', check_plain($key));
      $object->{$key} = check_plain($value);
    }
    // The cache set is needed otherwise $object is overridden with new values
    // on the first form step submission.
    embed_external_plugin_select_cache_set($object_id, $object);
  }

  $form_state = array(
    'ajax' => $js,
    'pluginset' => $pluginset,
    'object_id' => $object_id,
    'configuration' => &$object,
  );

  ctools_include('wizard');
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);
  $output = drupal_render($form);

  if ($js) {
    $commands = array();

    if ($output === FALSE || !empty($form_state['complete'])) {
      $form_result = embed_external_plugin_select_get_result($form_state);
      $commands[] = embed_external_wysiwyg_command('complete', $return_id, embed_external_generate_embed_snippet($form_result));
      $commands[] = ctools_modal_command_dismiss();
    }
    elseif (!empty($form_state['cancel'])) {
      $commands[] = embed_external_wysiwyg_command('cancel', $return_id, embed_external_generate_embed_snippet($form_result));
      $commands[] = ctools_modal_command_dismiss();
    }
    else {
      $commands = ctools_modal_form_render($form_state, $output);
    }
    print ajax_render($commands);
  }
  else {
    // We don't care about non-JavaScript uses of this form because
    // WYSIWYG won't work without it anyway.
    drupal_not_found();
  }
}

/**
 * Clears the wizard cache.
 *
 * @param $cid
 *   The cache ID to clear.
 */
function embed_external_plugin_select_cache_clear($cid) {
  ctools_include('object-cache');
  ctools_object_cache_clear('embed_external', $cid);
}

/**
 * Store form data in the object cache.
 *
 * @param $cid
 *   The cache ID in which object data will be stored.
 * @param $object
 *   The object to store.
 */
function embed_external_plugin_select_cache_set($cid, $object) {
  if (is_array($object)) {
    $object = (object) $object;
  }

  ctools_include('object-cache');
  ctools_object_cache_set('embed_external', $cid, $object);
}

/**
 * Get the current object from the cache, or default.
 *
 * @param $cid
 *   The cache ID to retrieve object data from.
 *
 * @return null|stdClass
 *   Either an empty stdClass object or data from the cache.
 */
function embed_external_plugin_select_cache_get($cid) {
  ctools_include('object-cache');
  $object = ctools_object_cache_get('embed_external', $cid);
  if (!$object) {
    $object = new stdClass();
  }

  return $object;
}

/**
 * Handles the 'Next' click on the form wizard.
 *
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 */
function embed_external_plugin_select_form_next(&$form_state) {
  // Note that ctools handles advancing to the next form in the series,
  // so don't try to do that here because you'll screw things up. All we need
  // to do here is shove data into the object cache.
  embed_external_plugin_select_cache_set($form_state['object_id'], $form_state['configuration']);
}

/**
 * Handles the 'Finish' click on the form wizard.
 *
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 */
function embed_external_plugin_select_form_finish(&$form_state) {
  $form_state['complete'] = TRUE;
}

/**
 * Handles the 'Cancel' click on the form wizard.
 *
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 */
function embed_external_plugin_select_form_cancel(&$form_state) {
  $form_state['cancel'] = TRUE;
}

/**
 * Step 1: Plugin selector form.
 *
 * @param $form
 *   The form array generated by ctools.
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 *
 * @return mixed
 *   Any additions that should be made to $form.
 */
function embed_external_plugin_select_select($form, &$form_state) {
  $pluginset = $form_state['pluginset'];
  $enabled_plugins = embed_external_get_embeddables_from_pluginset($pluginset);

  // @todo Group plugins by category in a nice way.
  $options = array();
  foreach ($enabled_plugins as $machine_name => $plugin) {
    $options[$machine_name] = $plugin->title;
  }

  $form['plugin'] = array(
    '#type' => 'radios',
    '#title' => t('Embed type'),
    '#default_value' => isset($form_state['configuration']->plugin) ? $form_state['configuration']->plugin : NULL,
    '#options' => $options,
    '#description' => t('Choose which service you would like to embed content from.'),
  );

  return $form;
}

/**
 * Step 1: Plugin selector form -- Validation
 *
 * @param $form
 *   The form array generated by ctools.
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 */
function embed_external_plugin_select_select_validate($form, &$form_state) {
  $selected_plugin = $form_state['values']['plugin'];

  // Validate that the selected plugin exists and is available in the current
  // pluginset.
  $embeddable = embed_external_get_embeddable($selected_plugin);
  $enabled_plugins = unserialize($form_state['pluginset']->enabled_plugins);
  if (empty($embeddable) || !in_array($selected_plugin, $enabled_plugins)) {
    form_set_error('plugin', t('Invalid selection!'));
  }
}

/**
 * Step 1: Plugin selector form -- Submit
 *
 * @param $form
 *   The form array generated by ctools.
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 */
function embed_external_plugin_select_select_submit($form, &$form_state) {
  $form_state['configuration']->plugin = $form_state['values']['plugin'];
}

/**
 * Step 2: Plugin configuration form.
 *
 * @param $form
 *   The form array generated by ctools.
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 *
 * @return mixed
 *   Any additions that should be made to $form.
 */
function embed_external_plugin_select_configure($form, &$form_state) {
  $plugin = (object) embed_external_get_embeddable($form_state['configuration']->plugin);
  $configure_form_function = $plugin->configure_form;

  $configure_form = call_user_func($configure_form_function, $form_state);
  return array_merge($form, $configure_form);
}

/**
 * Step 2: Plugin configuration form -- Validation
 *
 * @param $form
 *   The form array generated by ctools.
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 */
function embed_external_plugin_select_configure_validate($form, &$form_state) {
  $plugin = embed_external_get_embeddable($form_state['configuration']->plugin);
  if (isset($plugin['configure_form_validate'])) {
    $configure_form_validation_function = $plugin['configure_form_validate'];
    call_user_func($configure_form_validation_function, $form_state, $form);
  }
}

/**
 * Step 2: Plugin configuration form -- Submit
 *
 * @param $form
 *   The form array generated by ctools.
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 */
function embed_external_plugin_select_configure_submit($form, &$form_state) {
  $plugin_machine_name = $form_state['configuration']->plugin;
  foreach ($form_state['values'] as $form_key => $value) {
    if (strpos($form_key, $plugin_machine_name) === 0) {
      $key = str_replace($plugin_machine_name . '_', '', $form_key);
      $form_state['configuration']->{$key} = $value;
    }
  }
}

/**
 * Step 3: Plugin preview
 *
 * @param $form
 *   The form array generated by ctools.
 * @param $form_state
 *   An array of state data for the ctools multistep form.
 *
 * @return mixed
 *   Any additions that should be made to $form.
 */
function embed_external_plugin_select_preview($form, &$form_state) {
  $form['preview']  = array(
    '#markup' => embed_external_generate_embed_snippet((array) $form_state['configuration']),
  );

  return $form;
}

/**
 * Get multistep result.
 *
 * @param $form_state
 *   State data from the multistep form.
 *
 * @return mixed
 *   The contents of $form_state['configuration']
 */
function embed_external_plugin_select_get_result($form_state) {
  return $form_state['configuration'];
}

/**
 * Build an embed snippet based on supplied configuration.
 *
 * @param $configuration
 *   The contents of $form_state['configuration'] (or other user-generated
 *   plugin configuration which should be used to render a plugin snippet).
 *
 * @return string
 *   Markup for the plugin embed snippet.
 */
function embed_external_generate_embed_snippet($configuration) {
  $configuration = (array) $configuration;
  // We have to wrap the iframe with a div because otherwise CKEditor won't
  // recognize it as a block-level element and it will nest it inside <p> tags.
  $output = "<div class='embed-external-wrapper'><iframe class='embed-external' ";
  foreach ($configuration as $key => $value) {
    $output .= "data-" . str_replace('_', '-', $key) . "='" . $value . "' ";
  }

  // Add the appropriate preview URL.
  $url = url('embed_external/preview/' . $configuration['plugin'], array('query' => $configuration));
  $output .= "src='" . $url . "' ";

  $output .= " scrolling='no' frameborder='0'></iframe></div>";

  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function embed_external_form_wysiwyg_profile_form_alter(&$form, &$form_state) {

  // We can't use #states to hide a vertical tab. :(
  $form['embed_external'] = array(
    '#type' => 'fieldset',
    '#title' => 'Embed external',
    '#collabsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'advanced',
  );

  // Form key is descriptive so that it's easily identifiable in the wysiwyg
  // profile.
  $pluginsets = ctools_export_crud_load_all('embed_external_pluginset');
  $options = array();
  foreach ($pluginsets as $machine_name => $info) {
    $options[$machine_name] = $info->admin_title;
  }

  $form['embed_external']['embed_external_pluginset'] = array(
    '#type' => 'select',
    '#title' => t('Plugin set'),
    '#options' => $options,
    '#default_value' => isset($form_state['wysiwyg_profile']->settings['embed_external_pluginset']) ? $form_state['wysiwyg_profile']->settings['embed_external_pluginset'] : NULL,
    '#description' => t('Select which pluginset should be used for this WYSIWYG profile.'),
    '#states' => array(
      'visible' => array(
        ':input[name="buttons[drupal][embed_external]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['embed_external']['embed_external_pluginset_not_enabled'] = array(
    '#type' => 'item',
    '#title' => t('Not enabled'),
    '#markup' => t('Embed external is not enabled.'),
    '#states' => array(
      'invisible' => array(
        ':input[name="buttons[drupal][embed_external]"]' => array('checked' => TRUE),
      ),
    ),
  );
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function embed_external_wysiwyg_editor_settings_alter(&$settings, $context) {
  if (isset($context['profile']->settings['buttons']['drupal']['embed_external'])) {
    ctools_include('modal');
    ctools_modal_add_js();
    drupal_add_js(drupal_get_path('module', 'embed_external') . '/js/iframeResizer.min.js');
    drupal_add_js(drupal_get_path('module', 'embed_external') . '/js/embed_external_preview.js');
    $settings['embed_external_pluginset'] = $context['profile']->settings['embed_external_pluginset'];
    $settings['iframeresizer_location'] = url(drupal_get_path('module', 'embed_external') . '/js/iframeResizer.min.js', array('absolute' => TRUE));
    $settings['previewscript_location'] = url(drupal_get_path('module', 'embed_external') . '/js/embed_external_preview.js', array('absolute' => TRUE));
  }
}

/**
 * Ajax command to insert content into a WYSIWYG editor.
 *
 * @param $action
 * @param $instance_id
 *   The WYSIWYG instance ID to insert content into.
 * @param string $content
 *   (optional) The content to insert.
 *
 * @return array
 *   An Ajax command, which will be executed on the client.
 */
function embed_external_wysiwyg_command($action, $instance_id, $content = '') {

  switch ($action) {
    case 'complete':
      // If we get a render array for whatever reason, render it first.
      if (is_array($content)) {
        $content = drupal_render($content);
      }

      return array(
        'command' => 'wysiwygAppendMarkup',
        'instanceId' => $instance_id,
        'content' => $content,
      );

    case 'cancel':
      return array(
        'command' => 'wysiwygCancel',
        'instanceId' => $instance_id,
      );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function embed_external_form_html5_tools_admin_settings_alter(&$form, $form_state) {
  $form['html5_tools_overrides']['html5_tools_replace_filters']['#default_value'] = 1;
  $form['html5_tools_overrides']['html5_tools_replace_filters']['#disabled'] = TRUE;
  $form['html5_tools_overrides']['html5_tools_replace_filters']['#description'] .= ' ' . t('This option is required when embed_external is enabled.');
}


// @todo
// - Write a story to add a UI for creating new embeddable thingies (is this
//   really needed?)
