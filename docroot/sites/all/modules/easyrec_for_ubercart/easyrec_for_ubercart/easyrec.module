<?php
// $Id: googleanalytics.module,v 1.64 2010/10/09 21:46:12 hass Exp $

/*
 * @file
 * Drupal Module: easyrec
 * Adds the required Javascript to the bottom of all your Drupal pages
 * to allow tracking by the easyrec package.
 *
 * @author: David Mann <http://drupal.org/user/CCC>
 */

/**
 * Implements hook_help().
 */
function easyrec_help($path, $arg)
{
    switch ($path) {
        case 'admin/config/services/easyrec':
            return t('<a href="@easyrec_url">easyrec</a> is a free (registration required) recommender service. Configure the required parameters to get started.', array('@easyrec_url' => 'http://easyrec.org/'));
    }
}

/**
 * Implements hook_permission().
 */
function easyrec_permission()
{
    return array(
        'administer easyrec' => array(
            'title' => t('Administer easyrec'),
            'description' => t('Perform maintenance tasks for easyrec.'),
            'restrict access' => true
        ),
    );
}

/**
 * Implements hook_menu().
 */
function easyrec_menu()
{
    $items['admin/config/services/easyrec'] = array(
        'title' => 'easyrec',
        'description' => 'Configure easyrec settings.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('easyrec_admin_settings_form'),
        'access arguments' => array('administer easyrec'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'easyrec.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_page_alter(). to insert JavaScript to the appropriate scope/region of the page.
 */
function easyrec_page_alter(&$page)
{
    global $user;
    $apiKey = variable_get('easyrec_apiKey', '');
    if (!empty($apiKey)) {
        drupal_add_js(variable_get('easyrec_url', '') . '/api-js/easyrec.js');
        $script = 'var apiKey      = "' . $apiKey . '";';
        $script .= 'var tenantId    = "' . variable_get('easyrec_tenantId', '') . '";';


        if ($node = menu_get_object()) {

            if (uc_product_is_product($node)) {
                $userId = "null";
                if ($user->uid != 0) {
                    $userId = "'" . $user->uid . "'";
                }

                $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
                $link = url($path, array('absolute' => TRUE));
                $imagePath = "";

                if (count($node->uc_product_image) != 0 && $node->uc_product_image['und'][0]['filename'] != "") {
                    $imagePath = "/sites/default/files/" . $node->uc_product_image['und'][0]['filename'];
                }

                $script .= 'easyrec_sendAction("view",{userId:' . $userId . ',' .
                           'itemId:"' . $node->nid . '",' .
                           'itemUrl:"' . $link . '",' .
                           'itemImageUrl:"' . $imagePath . '",' .
                           'itemDescription:"' . $node->title . '"});';
            }
        }


        if (_easyrec_display()) {
            // If so, then if we can load the order...
            if (!empty($_SESSION['easyrec_order_id']) && $order = uc_order_load($_SESSION['easyrec_order_id'])) {
                $script .= _easyrec_create_buy_actions($order);

            }
            // Clean out the session variable.
            unset($_SESSION['easyrec_order_id']);
        }

        $script .= variable_get('easyrec_drawDrupalCustom', '');

        drupal_add_js($script, array('scope' => 'header', 'type' => 'inline'));
    }
}


/**
 * Implements hook_block_info().
 */
function easyrec_block_info()
{
    $blocks['otherUsersAlsoViewed'] = array(
        'info' => t('easyrec: other users also viewed'),
        'cache' => DRUPAL_NO_CACHE
    );

    $blocks['otherUsersAlsoBought'] = array(
        'info' => t('easyrec: other users also bought'),
        'cache' => DRUPAL_NO_CACHE
    );

    $blocks['recommendationsForUser'] = array(
        'info' => t('easyrec: recommendations for user'),
        'cache' => DRUPAL_NO_CACHE
    );

    $blocks['mostViewedItems'] = array(
        'info' => t('easyrec: most viewed items'),
        'cache' => DRUPAL_NO_CACHE
    );

    $blocks['mostBoughtItems'] = array(
        'info' => t('easyrec: most bought items'),
        'cache' => DRUPAL_NO_CACHE
    );

    return $blocks;
}

/**
 * Implements easyrec_get_drawing_callback_name().
 */
function easyrec_easyrec_get_drawing_callback_name(){
   return array('drawRecommendationList', 'drawRecommendationListWithPictures', 'drawDrupalCustom');
}

/**
 * Implements hook_block_configure().
 */
function easyrec_block_configure($delta = '')
{
    $callbacks  = module_invoke_all('easyrec_get_drawing_callback_name');

    $form['blockconfig'] = array(
        '#type' => 'fieldset',
        '#title' => t('easyerec block settings:' . $delta),
        '#description' => t('Here you can change block specific settings')
    );

    $form['blockconfig']['easyrec_block_' . $delta . '_drawingCallback'] = array(
        '#type' => 'select',
        '#title' => t('Drawing Callback'),
        '#default_value' => variable_get('easyrec_block_' . $delta . '_drawingCallback', 'drawRecommendationList'),
        '#options' => drupal_map_assoc($callbacks),
        '#description' => t('Select which javascript method should render the JSON request. You can define the "drawDrupalCustom" in <a href="@settings">the settings</a>.', array('@settings' => '/admin/config/services/easyrec'))
    );

    if ($delta == "otherUsersAlsoViewed" ||
        $delta == "otherUsersAlsoBought"
    ) {

        $form['blockconfig']['easyrec_block_' . $delta . '_filterUser'] = array(
            '#type' => 'checkbox',
            '#title' => t('filter items user already knows'),
            '#default_value' => variable_get('easyrec_block_' . $delta . '_filterUser', ''),
            '#description' => 'When checked easyrec will never recommend items which the user already knows.',
        );

    }
    else {
        $form['blockconfig']['easyrec_block_' . $delta . '_numberOfResults'] = array(
            '#type' => 'textfield',
            '#title' => t('numberOfResults'),
            '#default_value' => variable_get('easyrec_block_' . $delta . '_numberOfResults', '10'),
            '#size' => 45,
            '#maxlength' => 45,
            '#description' => t('A parameter to determine the number of results returned.'),
        );

        $form['blockconfig']['easyrec_block_' . $delta . '_timeRange'] = array(
            '#type' => 'select',
            '#title' => t('timeRange'),
            '#default_value' => variable_get('easyrec_block_' . $delta . '_timeRange', 'ALL'),
            '#options' => drupal_map_assoc(array('ALL', 'MONTH', 'WEEK', 'DAY')),
            '#description' => t('A parameter to determine the time range.'),
        );

    }

    return $form;

}

/**
 * Implements hook_block_save().
 */
function easyrec_block_save($delta = '', $edit = array())
{
    variable_set('easyrec_block_' . $delta . '_drawingCallback', $edit['easyrec_block_' . $delta . '_drawingCallback']);

    if ($delta == "otherUsersAlsoViewed" ||
        $delta == "otherUsersAlsoBought"
    ) {
        variable_set('easyrec_block_' . $delta . '_filterUser', $edit['easyrec_block_' . $delta . '_filterUser']);
    }
    else {
        variable_set('easyrec_block_' . $delta . '_numberOfResults', $edit['easyrec_block_' . $delta . '_numberOfResults']);
        variable_set('easyrec_block_' . $delta . '_timeRange', $edit['easyrec_block_' . $delta . '_timeRange']);
    }

}

/**
 * Implements hook_block_view().
 */
function easyrec_block_view($delta = '')
{
    global $user;
    $drawingCallbackFunction = variable_get('easyrec_block_' . $delta . '_drawingCallback', 'drawRecommendationList');

    if ($delta == "otherUsersAlsoViewed" ||
        $delta == "otherUsersAlsoBought" ||
        $delta == "recommendationsForUser"
    ) {

        if ($node = menu_get_object()) {

            if (uc_product_is_product($node) || $delta == "recommendationsForUser") {


                $userId = "null";
                if (variable_get('easyrec_block_' . $delta . '_filterUser', '') == 1 && $user->uid != 0) {
                    $userId = "'" . $user->uid . "'";
                }

                $blockContent = "<div id='recommender_" . $delta . "'> </div>";
                $blockContent .= "<script>";
                $blockContent .= _easyrec_generate_unique_callback($drawingCallbackFunction, $delta);
                $blockContent .= "easyrec_getRecommendations('" . strtolower($delta) . "',{userId:" . $userId . "," .
                                 "itemId:'" . $node->nid . "'," .
                                 " drawingCallback:'easyrec_" . $drawingCallbackFunction . "_" . $delta . "'});";
                $blockContent .= "</script>";
                $block = array();
                $block['subject'] = t('Recommendations');
                $block['content'] = $blockContent;

                return $block;
            }
        }


    }
    else { // Community Rankings
        $blockContent = "<div id='recommender_" . $delta . "'> </div>";
        $blockContent .= "<script>";
        $blockContent .= _easyrec_generate_unique_callback($drawingCallbackFunction, $delta);
        $blockContent .= "easyrec_getRankings('" . strtolower($delta) . "',{numberOfResults:" . variable_get('easyrec_block_' . $delta . '_numberOfResults', '10') . "," .
                         "timeRange:'" . variable_get('easyrec_block_' . $delta . '_timeRange', 'ALL') . "'," .
                         " drawingCallback:'easyrec_" . $drawingCallbackFunction . "_" . $delta . "'});";
        $blockContent .= "</script>";
        $block = array();
        $block['subject'] = t('Recommendations');
        $block['content'] = $blockContent;

        return $block;

    }
}

/**
 * Implements hook_uc_order().
 */
function easyrec_uc_order($op, &$order, $arg2)
{
    // If a new order is created during the checkout process...
    if ($op == 'new' && arg(0) == 'cart') {
        // Store the order ID for later use.
        $_SESSION['easyrec_order_id'] = $order->order_id;
    }
}


/**
 * Determine whether or not to send buy actions to the easyrec service
 *
 * @return
 *   TRUE or FALSE indicating whether or not to display the easyrec JS.
 */
function _easyrec_display()
{
    // Display the easyrec JS if the URL is complete...
    if (arg(2) == 'complete') {
        return TRUE;
    }

    // Or if the URL is the custom completion page.
    $completion_page = variable_get('uc_cart_checkout_complete_page', '');

    if (!empty($completion_page) && $completion_page == $_GET['q']) {
        return TRUE;
    }

    // Otherwise return FALSE.
    return FALSE;
}

/**
 * Create a unique Callback alias function for Easyrec
 *
 * @return
 *   String containing a Drawback alias.
 */
function _easyrec_generate_unique_callback($drawingCallbackFunction, $delta)
{
    $returnString = "function easyrec_" . $drawingCallbackFunction . "_" . $delta . "(json){" .
                    "if (json.recommendeditems!=null){" .
                    $drawingCallbackFunction . "ToDiv(json,'recommender_" . $delta . "');" .
                    "}else{" .
                    "document.getElementById('block-easyrec-" . strtolower($delta) . "').style.display='none';" .
                    "}" .
                    "}";

    return $returnString;
}

/**
 * This function returns a Javascript string which sends a buy action to
 * the easyrec server.
 * @param  $order
 *   the order object to get the product information.
 * @return
 *   the easyrec javascript which sends a buy action.
 */
function _easyrec_create_buy_actions($order)
{
    $script = '';
    foreach ($order->products as $product) {
        for ($i = 1; $i <= $product->qty; $i++) {
            $script .= 'easyrec_sendAction("buy",{userId:' . $order->uid . ',' .
                       'itemId:"' . $product->nid . '",' .
                       'itemDescription:"' . $product->title . '",' .
                       'itemUrl:"",' .
                       'itemImageUrl:""});';
        }
    }

    return $script;
}