<?php

/**
 * @file
 * The netFORUM xWeb Secure module
 *
 *  Provides a foundation for issuing requests and reading responses from xWeb
 *
 */


/**
 * Implements hook_menu().
 */
function netforum_menu() {
  $items = array();

  $items['admin/config/netforum'] = array(
    'title' => 'Netforum',
    'description' => 'Set the connection characteristics for the netFORUM database',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/netforum/connection'] = array(
    'title' => 'xWeb settings',
    'description' => 'Set the connection characteristics for the netFORUM database',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('netforum_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/netforum/xwebtest'] = array(
    'title' => 'xWeb testing',
    'description' => 'Test xWeb queries to the database',
    'page callback' => 'netforum_test_page',
    'access arguments' => array('administer site configuration'),
    'weight' => 5,
  );
  $items['admin/config/netforum/xwebtest/params_for/%'] = array(
    'title' => 'xWeb testing - parameters as JSON',
    'page callback' => 'netforum_test_page_params',
    'page arguments' => array(5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/netforum/object-info'] = array(
    'title' => 'Object information',
    'description' => 'View, fetch and delete cached object information',
    'page callback' => 'netforum_objects_page',
    'access arguments' => array('administer site configuration'),
    'weight' => 6,
  );

  $items['admin/config/netforum/object-names-refresh'] = array(
    'title' => 'Refresh object names',
    'page callback' => 'netforum_objects_refresh_names',
    'description' => 'Contact netFORUM and re-populate the list of available objects',
    'access arguments' => array('administer site configuration'),
    'weight' => 6,
  );

  $items['admin/config/netforum/object-autocomplete'] = array(
    'title' => 'Netforum object name autocomplete',
    'page callback' => 'netforum_objects_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}


/**
 * Looks for a function name and returns the parameters as JSON.  Used via AJAX
 *
 * ...
 * @ingroup pages
 */
function netforum_test_page_params($fname) {
  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
  print drupal_json_encode(netforum_xweb_function_struct_parameters($fname));
  exit;
}

/**
 * Provides a testing page for xWeb requests, useful for examining output
 *
 * ...
 * @ingroup pages
 * @see netforum_test_form($form_state)
 */
function netforum_test_page() {
  $request_code = '';
  $response = NULL;

  //first, get the functions as an array with function names as keys
  //and an array of function parameters as the value
  $xweb_functions = array();
  $function_list = _netforum_xweb_soap_functions();
  foreach (array_keys($function_list) as $function_name) {
    $xweb_functions[$function_name] = netforum_xweb_function_parameters($function_name);
  }

  if (isset($_POST['netforum_request'])) {
    if (isset($_POST['netforum_params']) && is_array($_POST['netforum_params'])) {
      $request_parameters = array_filter_recursive($_POST['netforum_params']);
    }
    else {
      $request_parameters = array();
    }


    $request_code .= "\$arguments = " . var_export($request_parameters, TRUE) . ";\n";
    $request_code .= "\$response = netforum_xweb_request('" . $_POST['netforum_request'] . "', \$arguments); ";

    $response = netforum_xweb_request($_POST['netforum_request'], $request_parameters);

    $form_defaults = array();
    $form_defaults[$_POST['netforum_request']] = $request_parameters;
    drupal_add_js(" var form_defaults = " . drupal_json_encode($form_defaults) . ";", 'inline');

    //Overwrite the existing set of parameters (that did shallow inspection) with a deep inspection of the current function
    $xweb_functions[$_POST['netforum_request']] = netforum_xweb_function_struct_parameters($_POST['netforum_request']);

  }
  //Turn our array of functions and parameters to json for later use

  drupal_add_js("var xweb_functions = " . drupal_json_encode($xweb_functions) . ";", 'inline');
  //this is the later use referenced above.  The js here will adjust the form fields
  //and labels based on the selected function
  drupal_add_js(drupal_get_path('module', 'netforum') . '/jquery.netforum.js', array('type' => 'file', 'scope' => 'footer'));
  drupal_add_js('misc/collapse.js', 'file');

  return drupal_get_form('netforum_test_form', $response, $request_code);
}

/**
 * The form for the xWeb testing page
 *
 * ...
 * @ingroup forms
 * @see netforum_test_page()
 */
function netforum_test_form($form, &$form_state, $response, $request_code = '') {
  $form_state['no_cache'] = true; # Do not cache this form, some of the vars may include unserializable data

  $request_options = netforum_xweb_functions();
  if (count($request_options) == 0) {
    drupal_set_message("No netFORUM xWeb functions found, perhaps xWeb is currently unavailable?", 'error');
  }
  $request_log = '';
  $request_soap_log = '';

  $request_log = netforum_request_log();
  $request_soap_log = netforum_soap_log();
  
  $form['description'] = array(
    '#markup' => t('Test a request here by selecting the function from the drop down list and filling in the parameters below.  The result of the request and debugging information will be shown below.'),
  );

  $form['netforum_xweb_request'] = array(
    '#title' => 'xWeb Request',
    '#type' => 'fieldset',
    '#description' => 'Construct the xWeb request',
  );

  $form['netforum_xweb_request']['netforum_request'] = array(
    '#type' => 'select',
    '#title' => t('netFORUM xWeb Function'),
    '#description' => t('The name of the function to call'),
    '#default_value' => array_key_exists('netforum_request', $form_state['input']) ? $form_state['input']['netforum_request'] : 'GetQuery',
    '#options' => $request_options,
  );

  $form['netforum_xweb_request']['parameters'] = array(
    '#type' => 'fieldset',
    '#attributes' => array('id' => 'parameters'),
    '#description' => 'Parameters for this method',
    '#title' => 'Parameters',
  );

  /*
   * Normally, there would be inputs for the function here, but
   * we're relying on some JS and AJAX to build the right form
   * for the right function
   */

  $form['netforum_xweb_request']['submit'] = array(
    '#type' => 'button',
    '#value' => 'submit',
    '#name' => 'clickbutton',
  );

  $form['netforum_xweb_results'] = array(
    '#title' => 'xWeb Results',
    '#type' => 'fieldset',
    '#description' => 'Response from xWeb',
  );

  $form['netforum_xweb_results']['code'] = array(
    '#title' => 'PHP Code',
    '#type' => 'item',
    '#description' => "<pre>" . htmlspecialchars($request_code) . "</pre>",
  );

  $form['netforum_xweb_results']['response'] = array(
    '#title' => 'Response',
    '#type' => 'item',
    '#description' => "<pre>" . htmlspecialchars(print_r($response, TRUE)) . "</pre>",
  );

  $form['netforum_xweb_results']['soap_log'] = array(
    '#title' => 'SOAP Log',
    '#type' => 'item',
    '#description' => "<pre>" . htmlspecialchars($request_soap_log) . "</pre>",
  );

  $form['netforum_xweb_results']['request_log'] = array(
    '#title' => 'xWebSecureClient Class Log',
    '#type' => 'item',
    '#description' => "<pre>" . htmlspecialchars($request_log) . "</pre>",
  );

  $form['#submit'] = array(
    'netforum_test_page' => array(),
  );

  //  $form_state['#redirect'] = FALSE;

  return $form;
}

/**
 * The Objects page provides a way to search for objects available for queries and view the columns
 *
 * ...
 * @ingroup pages
 * @see netforum_objects_form($form_state)
 */
function netforum_objects_page() {

  $object_details = array();
  $obj = new stdClass();
  $obj->obj_key = $obj->obj_defaultcolumns = $obj->obj_defaultorderby = $obj->obj_name = '';

  if (isset($_POST['netforum_object_name'])) {
    $name = trim($_POST['netforum_object_name']);
    $res = db_query("SELECT obj_key, obj_defaultcolumns, obj_defaultorderby, obj_name FROM {netforum_object_cache} WHERE obj_name = :obj_name ", array(':obj_name' => $name));
    if ($res && $res->rowCount() > 0 && $obj = $res->fetchObject()) {
      db_update('netforum_object_cache')->fields(
      array(
        'data' => '', 
      ))->condition('obj_name', $name)->execute();
      $object_details = netforum_object_fields($name);
    }
    else {
      drupal_set_message(t('Object name not found in the cache, perhaps you need to refresh the object names?'), 'error');
    }
  }
  //TODO:  The form doesn't get the new values on refresh, it may need a change
  return drupal_get_form('netforum_objects_form', $object_details, $obj);
}

/**
 * The form for the objects page
 *
 * ...
 * @ingroup forms
 * @see netforum_objects_page()
 */
function netforum_objects_form($form, &$form_state, $object_details = array(), $obj) {

  $search_on = module_invoke_all('netforum_node_obj_search_on', $obj->obj_name);
  $order_by = module_invoke_all('netforum_node_obj_order_by', $obj->obj_name);

  if (count($search_on) == 0) {
    //If the default columns are * or empty, try setting it to the default order by
    if ( ! isset($obj->obj_defaultcolumns) || $obj->obj_defaultcolumns == "*" || trim($obj->obj_defaultcolumns) == '' ) {
      $search_on = $obj->obj_defaultorderby;
    }
    else {
      $search_on = $obj->obj_defaultcolumns;
    }
  }
  else {
    $search_on = implode(",", array_keys($search_on));
  }

  if (count($order_by) == 0) {
    $order_by = $obj->obj_defaultorderby;
  }
  else {
    $order_by = implode(",", $order_by);
  }
  
  $form['description'] = array(
    '#markup' => t('Use this page to view columns and column details for netFORUM objects.  Each request clears the cache for that object and fetches the details from xWeb.  If the object is not found, try ') . l(t('refreshing the object names'), 'admin/config/netforum/object-names-refresh') . '.',
  );

  $form['netforum_object_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Object Name'),
    '#size' => 50,
    '#autocomplete_path' => 'admin/config/netforum/object-autocomplete',
  );

  $form['submit'] = array(
    '#type' => 'button',
    '#value' => 'Fetch / refresh object details',
    '#name' => 'clickbutton',
  );


  $form['netforum_object_details'] = array(
    '#title' => 'Object details',
    '#type' => 'fieldset',
    '#description' => 'Refreshed object details from xWeb',
  );

  $form['netforum_object_details']['key'] = array(
    '#title' => 'Object Key',
    '#type' => 'item',
    '#description' => $obj->obj_key,
  );

  $form['netforum_object_details']['searchcolumns'] = array(
    '#title' => 'Object Search Columns',
    '#type' => 'item',
    '#description' => $search_on,
  );

  $form['netforum_object_details']['orderby'] = array(
    '#title' => 'Object Order By',
    '#type' => 'item',
    '#description' => $order_by,
  );

  $form['netforum_object_details']['keyfield'] = array(
    '#title' => 'Key Field',
    '#type' => 'item',
    '#description' => netforum_object_key_field($obj->obj_name),
  );

  $form['netforum_object_details']['response'] = array(
    '#title' => 'Object Fields',
    '#type' => 'item',
    '#description' => "<pre>" . htmlspecialchars(print_r($object_details, TRUE)) . "</pre>",
  );

  return $form;
}


/**
 * An autocomplete responder for netforum object names
 */
function netforum_objects_autocomplete($search = "") {
  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
  $obj_names = array();
  if ($search != "") {
    $results = db_query("SELECT obj_name FROM {netforum_object_cache} WHERE obj_name like :obj_name OR obj_prefix like :obj_prefix ORDER BY obj_name", array(':obj_name' => "$search%", ':obj_prefix' => "$search%"));
    foreach($results as $obj) {
      $obj_names[$obj->obj_name] = check_plain($obj->obj_name);
    }
  }
  print drupal_json_encode($obj_names);
  exit;
}

/**
 *  Technically a page, this will refresh the cached list of objects and redirect the user to
 *  the object info page
 *
 * ...
 * @ingroup pages
 */
function netforum_objects_refresh_names() {
  netforum_refresh_object_names();
  drupal_set_message(t('netFORUM object names refreshed'));
  drupal_goto('admin/config/netforum/object-info');
}


/**
 * The settings form for netFORUM Secure
 *
 * @ingroup forms
 * @see netforum_admin_settings_validate
 */
function netforum_admin_settings($form, &$form_state) {

  $form['xWeb'] = array(
    '#title' => "xWeb connection",
    '#type' => 'fieldset',
  );

  $form['xWeb']['netforum_wsdl_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Netforum WSDL URL'),
    '#description' => t('xWeb endpoint, commonly https://example.com/xweb/Secure/netFORUMXML.asmx?WSDL'),
    '#default_value' => variable_get('netforum_wsdl_url', 'https://'),
    '#required' => TRUE,
    '#size' => 50,
  );

  $form['xWeb']['netforum_xweb_username'] = array(
    '#type' => 'textfield',
    '#title' => t('xWeb User Name'),
    '#description' => t('This is the username that is used to authenticate with netFORUM and gain access'),
    '#default_value' => variable_get('netforum_xweb_username', ''),
    '#size' => 16,
  );

  $form['xWeb']['netforum_xweb_password'] = array(
    '#type' => 'password',
    '#title' => t('xWeb User Password'),
    '#description' => t('The password to go with the xweb user, commonly requires manually setting usr_pwd in fw_user'),
    '#default_value' => variable_get('netforum_xweb_password', ''),
    '#size' => 16,
  );

  $form['xWeb']['netforum_hide_error_messages'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide connection error messages'),
    '#description' => t('Should regular visitors be able to see when the connection to netFORUM is not available?  Site administrators will always see connection errors.'),
    '#default_value' => variable_get('netforum_hide_error_messages', 0),
  );

  $form['cache'] = array(
    '#title' => "xWeb caching",
    '#type' => 'fieldset',
  );

  $form['cache']['netforum_cache_default'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache Length'),
    '#description' => t('How long should a response be used before fetching new values from xWeb'),
    '#default_value' => variable_get('netforum_cache_default', '1 hour'),
    '#size' => 16,
  );

  $form['cache']['netforum_cache_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum Cache Length'),
    '#description' => t('If the first request fails how far back in the cache should we search before returning empty data?'),
    '#default_value' => variable_get('netforum_cache_max', '4 days'),
    '#size' => 16,
  );

  $form['availability'] = array(
    '#title' => "xWeb availability",
    '#type' => 'fieldset',
  );

  $form['availability']['netforum_slow_query_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Slow query limit'),
    '#description' => t('Any xWeb requests over this time limit are marked with warnings in the system logs.'),
    '#after_field' => t('seconds'),
    '#default_value' => variable_get('netforum_slow_query_limit', '1.5'),
    '#field_suffix' => t('seconds'),
    '#size' => 4,
  );


  $form['availability']['netforum_verify_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('xWeb timeout'),
    '#description' => t('If netFORUM cannot be contacted in this time it is logged as an error'),
    '#field_suffix' => t('seconds'),
    '#default_value' => variable_get('netforum_verify_timeout', 5),
    '#size' => 4,
  );

  $form['availability']['netforum_verify_availability'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verify xWeb availability before requests'),
    '#description' => t('Verify that netFORUM is available before issuing requests by trying to open a connection to the server.'),
    '#default_value' => variable_get('netforum_verify_availability', 1),
  );

  $form['availability']['netforum_verify_length'] = array(
    '#type' => 'textfield',
    '#title' => t('xWeb verification length'),
    '#description' => t('This sets how frequently netFORUM should be checked for availability.  Think of it as the time between verification checks.  There is overhead associated with this, so anything less than 2 minutes might not be efficient.  Enter zero to disable and check before every request.'),
    '#field_suffix' => t('minutes'),
    '#default_value' => variable_get('netforum_verify_length', 3),
    '#size' => 4,
  );


  return system_settings_form($form);
}

/**
 * Validating the system settings form
 *
 * @see netforum_admin_settings
 */
function netforum_admin_settings_validate($form, &$form_state) {

  $clear_to_connect = TRUE;

  if ( ! valid_url($form_state['values']['netforum_wsdl_url'], TRUE)) {
    form_set_error('netforum_wsdl_url', t('Please enter a valid wsdl url for access'));
    $clear_to_connect = FALSE;
  }

  if ( !isset($form_state['values']['netforum_xweb_username']) || trim($form_state['values']['netforum_xweb_username']) == '') {
    form_set_error('netforum_xweb_username', t('Please enter a username'));
    $clear_to_connect = FALSE;
  }

  if ( !isset($form_state['values']['netforum_xweb_password']) || trim($form_state['values']['netforum_xweb_password']) == '') {
    $old_password = variable_get('netforum_xweb_password', FALSE);
    if ($old_password) {
      form_set_value($form['xWeb']['netforum_xweb_password'], $old_password, $form_state);
      $form_state['values']['netforum_xweb_password'] = $old_password;
    }
    else {
      form_set_error('netforum_xweb_password', t('Please enter a password'));
      $clear_to_connect = FALSE;
    }
  }

  if (isset($form_state['values']['netforum_cache_default'])) {
    if (substr(trim($form_state['values']['netforum_cache_default']), 0, 1) == '-') {
      form_set_error('netforum_cache_default', t('The default cache cannot be a negative amount of time.'));
    }
    elseif (strtotime($form_state['values']['netforum_cache_default']) === FALSE || strtotime($form_state['values']['netforum_cache_default']) == -1 ) {
      form_set_error('netforum_cache_default', t('The time format was not recognized, please enter something in the format of 4 days or 1 hour'));
    }
  }

  if (isset($form_state['values']['netforum_cache_max'])) {
    if (substr(trim($form_state['values']['netforum_cache_max']), 0, 1) == '-') {
      form_set_error('netforum_cache_max', t('The default cache cannot be a negative amount of time.'));
    }
    elseif (strtotime($form_state['values']['netforum_cache_max']) === FALSE || strtotime($form_state['values']['netforum_cache_max']) == -1 ) {
      form_set_error('netforum_cache_max', t('The time format was not recognized, please enter something in the format of 4 days or 1 hour'));
    }
  }

  if (isset($form_state['values']['netforum_wsdl_url']) && stristr($form_state['values']['netforum_wsdl_url'], 'netForumXMLOnDemand.asmx')) {
    variable_set('netforum_xweb_od', 1);
  }
  else {
    variable_set('netforum_xweb_od', 0);
  }

  if ($clear_to_connect === TRUE) {
    if ($form_state['values']['netforum_verify_availability'] == 1 && netforum_is_available() === FALSE) {
      drupal_set_message(t('Could not contact netFORUM server'), 'error');
      return;
    }
    _netforum_include_xweb();
    try {
      $error_level = error_reporting(0); //ignore the errors, only catch exceptions
      $verify_timeout = $form_state['values']['netforum_verify_timeout'];
      if ($verify_length != 0) {
        ini_set('default_socket_timeout', $verify_timeout);
      }
      
      $client_init_vars =   array(
        'trace' => TRUE,
        'exceptions' => TRUE,
        'cache_wsdl' => TRUE,
        'xwebUserName' => $form_state['values']['netforum_xweb_username'],
        'xwebUserPass' => $form_state['values']['netforum_xweb_password'],
      );
      
      if (netforum_is_enterprise()) {
        $nfh = new xwebSecureClient($form_state['values']['netforum_wsdl_url'], $client_init_vars);
      }
      else {
        $nfh = new xwebSecureODClient($form_state['values']['netforum_wsdl_url'], $client_init_vars);    
      }
      $response = $nfh->GetFacadeXMLSchema(array('szObjectName' => 'Customer'));
      if ($response) {
        drupal_set_message(t('Successfully connected to netFORUM server and retreived data'), "status");
      }
      error_reporting($error_level);
    }
    catch (Exception $exception) {
      form_set_error('form_token', t('Could not connect to netFORUM server with specified parameters.<br> @exception_message .', array('@exception_message' => $exception->getMessage())) );
      $wsdl_url_guess = _netforum_guess_xweb_url($form_state['values']['netforum_wsdl_url']);
      if (strtolower($form_state['values']['netforum_wsdl_url']) != strtolower($wsdl_url_guess)) {
        drupal_set_message(t('Perhaps the following WSDL endpoint would work better:<br> @wsdl_url_guess', array('@wsdl_url_guess' => $wsdl_url_guess)), "status");
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function netforum_cron() {
  $cutoffdate = strftime("%Y-%m-%d %H:%M", strtotime("-" . variable_get('netforum_cache_max', '10 days')));
  db_delete('netforum_request_cache')
  ->condition('add_date', array($cutoffdate), '<=')
  ->execute();
}

/**
 * Verify that netforum is aailable for queries.
 *
 * This stores the result in a global varaible to prevent repetitive checks in the same request.
 * If the admin setting verify availability is unchecked then this always returns true
 *
 * @return
 *    Boolean true or false
 */
function netforum_is_available() {
  global $_netforum_is_available;

  if (variable_get('netforum_verify_availability', 1) == 0) {
    return TRUE;
  }

  if (isset($_netforum_is_available)) {
    return $_netforum_is_available;
  }

  $verify_length = variable_get('netforum_verify_length', 3);
  if ($verify_length != 0) {
    $cutoff = strtotime("-" . $verify_length . " minutes");
    $last_result = variable_get('netforum_netforum_is_available', array(NULL, NULL));
    if ( is_null($last_result[0]) === FALSE && $last_result[1] >= $cutoff ) {
      return $last_result[0];
    }
  }
  //close down all warnings, because if it does fail we don't want it to show
  $error_level = error_reporting(0);

  $address = variable_get('netforum_wsdl_url', NULL);
  if ($address == NULL) {
    $_netforum_is_available = FALSE;
  }
  else {
    $opts = array(
      'http' => array('timeout' => variable_get('netforum_verify_timeout', 5)),
      'https' => array('timeout' => variable_get('netforum_verify_timeout', 5)),
    );
    $address_parts = explode('/', $address);
    $server = $address_parts[2];
    $fp = fsockopen($server, 80, $errno, $errstr, variable_get('netforum_verify_timeout', 5));
    if ($fp) {
      $_netforum_is_available = TRUE;
    }
    else {
      $_netforum_is_available = FALSE;
      watchdog('netforum',
        "Could not connect to netFORUM server %server - %error",
        array('%server' => $server, '%error' => $errstr),
        WATCHDOG_ERROR, l(t('settings'), 'admin/config/netforum/connection'));
    }
  }

  //restore the error reporting level
  error_reporting($error_level);

  if ($verify_length != 0) {
    variable_set('netforum_netforum_is_available', array($_netforum_is_available, REQUEST_TIME));
  }

  return $_netforum_is_available;
}

/**
 * Checks to see if it is netFORUM Enterprise
 *
 * @return
 *    Boolean true if enterprise, false otherwise
 */
function netforum_is_enterprise() {
  return (variable_get('netforum_xweb_od', 0) == 0);
}

/**
 * Checks to see if it is netFORUM Team or Pro
 *
 * @return
 *    Boolean true if Team or Pro, false otherwise
 */
function netforum_is_team() {
  return (variable_get('netforum_xweb_od', 0) == 1);
}

function _netforum_include_xweb() {
  $path = drupal_get_path('module', 'netforum');
  if (netforum_is_enterprise()) {
    module_load_include('class.inc', 'netforum', 'xwebSecureClient');
  }
  else {
    module_load_include('class.inc', 'netforum', 'xwebSecureOD');
  }
}

/**
 * Connect to xWeb and return a copy of the global SoapClient handler.
 * If the server is not available set it to only check the local cache.
 */
function netforum_connect_xweb() {

  _netforum_include_xweb();
  global $_netforum_xweb_handler;
  if (!isset($_netforum_xweb_handler)) {
    try {
      $error_level = error_reporting(0); //ignore the errors, only catch exceptions
      $verify_timeout = variable_get('netforum_verify_timeout', 5);
      if ($verify_timeout != 0) {
        ini_set('default_socket_timeout', $verify_timeout);
      }
      $client_init_vars =   array(
        'trace' => TRUE,
        'exceptions' => TRUE,
        'cache_wsdl' => TRUE,
        'xwebUserName' => variable_get('netforum_xweb_username', NULL),
        'xwebUserPass' => variable_get('netforum_xweb_password', NULL),
      );
      
      if (netforum_is_enterprise()) {
        $_netforum_xweb_handler = new xwebSecureClient(variable_get('netforum_wsdl_url', NULL), $client_init_vars);
      }
      else {
        $_netforum_xweb_handler = new xwebSecureODClient(variable_get('netforum_wsdl_url', NULL), $client_init_vars);        
      }
      
      
      $_netforum_xweb_handler->setCaching(variable_get('netforum_cache_default', NULL));
      error_reporting($error_level);
    }
    catch (Exception $exception) {
      if (variable_get('netforum_hide_error_messages', 0) == 0 || user_access('administer site configuration')) {
        drupal_set_message(t('Could not connect to netFORUM server, please verify connection settings'), 'error');
      }
    }
  }

  if ( isset($_netforum_xweb_handler) ) {
    if (netforum_is_available() === FALSE) {
      $_netforum_xweb_handler->enableOfflineMode();
    }
    else {
      $_netforum_xweb_handler->disableOfflineMode();
    }
  }

  return $_netforum_xweb_handler;
}

/**
 *  Issue a request to xWeb and return the result, if any
 *
 *  If $cache_max is not set, it recurses with $cache_max set to the admin set option.  If $cache_max is set it only makes one attempt.
 *
 * @param $fname
 *    A string containing the name of the xWeb function such as GetQuery or InsertFacadeObject; case sensitive
 * @param $arguments
 *    An array with keys set to parameter names and values set to the data.  For example, Array('szObjectName'=>'Individual').
 * @param $cache_max
 *    A string parseable to a time that indicates how far back in the cache to search.  For example, '1 day'.  To disable caching
 *    completely pass FALSE and the request will not check the cache nor store the response
 * @return
 *    Bare results, a SimpleXML Object, or null if no results are found
 *
 * @see netforum_xweb_functions
 * @see netforum_xweb_function_parameters
 * @see netforum_xweb_function_struct_parameters
 * @see netforum_request_log
 * @see netforum_soap_log
 * @see netforum_ind_info_parameters
 * @see netforum_org_info_parameters
 * @see netforum_facade_object_parameters
 */
function netforum_xweb_request($fname, $arguments = array(), $cache_max = NULL) {
  $start_time = microtime();
  $nfh = netforum_connect_xweb();

  if ( ! $nfh) {
    watchdog('netforum', "Received xWeb request for !fname but could not connect to xWeb", array('!fname' => $fname), WATCHDOG_ERROR);
    return NULL;
  }

  $xml_object = NULL;
  $results = NULL;

  if (isset($cache_max)) {
    // Setting to FALSE explicitly means no caching.
    if ($cache_max === FALSE) {
      $nfh->disableCaching();
    }
    else {
      $nfh->setCaching($cache_max);
    }
  }

  //we're going to turn off errors for a moment here.  If there is an SSL error the first time, I don't
  //want to display it.  We can throw our own thank you.
  $error_level = error_reporting(0);
  try {
    $results = $nfh->{$fname}($arguments);
    if ( !isset($results)) {
      throw new Exception('No results returned from xWeb Query');
    }
  }
  catch (Exception $e) {
    if (isset($cache_max)) { //this implies that we went even further back in the cache and could not connect, so call it quits
      if (variable_get('netforum_hide_error_messages', 0) == 0 || user_access('administer site configuration')) {
        drupal_set_message(t('Could not retreive data from server or cache.'), 'error');
      }
      $nfh->setCaching(variable_get('netforum_cache_default', '4 hours'));
      if ($fname == 'GetQuery') {
        watchdog('netforum', "Could not get response to !fname request for !columns from !object: @fault", array('!fname' => $fname, '@fault' => $e->faultstring, '!columns' => $arguments['szColumnList'], '!object' => $arguments['szObjectName']), WATCHDOG_ERROR);
      }
      else {
        watchdog('netforum', "Could not get response to !fname request: @fault", array('!fname' => $fname, '@fault' => $e->faultstring), WATCHDOG_ERROR);
      }
    }
    else {
      //recurse if we hit one snag and try it one more time
      watchdog('netforum', "First xWeb request for !fname did not return any arguments", array('!fname' => $fname), WATCHDOG_WARNING);
      $results = netforum_xweb_request($fname, $arguments, variable_get('netforum_cache_max', '4 days'));
    }
  }

  if (isset($results)) {
    $fname_result = $fname . "Result";
    //the following is a test for a response containing yet more xml.  If it is a simple request, like WebLogin then the result
    //is workable as a simpleobject and does not need to be parsed further.
    if (isset($results->{$fname_result}->any) && $fname != "GetFacadeXMLSchema") {
      $results = simplexml_load_string($results->{$fname_result}->any, "SimpleXMLElement", LIBXML_NOERROR + LIBXML_NOWARNING);
    }

    if ($nfh->cachedLastResponse() == 1) {
      $source = t("from database cache");
    }
    else {
      $source = t("directly from xWeb");
    }
    $elapsed_time = microtime() -$start_time;
    $max_time = (float) variable_get('netforum_slow_query_limit', '1.5');
    if ($max_time != 0 && $elapsed_time > $max_time) {
      watchdog('netforum', "Slow returning response to xWeb query !fname !source in !elapsed_time seconds, parameters: <br> @arguments", array('!fname' => $fname, '!source' => $source, '!elapsed_time' => $elapsed_time, '@arguments' => print_r($arguments, TRUE)), WATCHDOG_WARNING);
    }
  }

  //restore the error reporting level
  error_reporting($error_level);

  return $results;

}

/**
 * Find out if the last request came from the database
 *
 * @return
 *    TRUE if the last xWeb request came from the local database cache, FALSE otherwise
 */
function netforum_response_from_cache() {
  $nfh = netforum_connect_xweb();
  if (!$nfh) {
    return;
  }
  return $nfh->lastResponseFromCache();
}

/**
 *  Return a list of fields for a given object
 *
 * By default this will return the cached object info.  If the object info does not exist or is empty, then it will issue a request to
 * xWeb, parse, store, and return the results.  The object name must exist in the database in order to return the fields.
 *
 * @param $obj_name
 *    A string representing the object name.  For example, Individual or EventsRegistrant
 * @return
 *    A hashed array with the keys set to the column names and the values set to the column description
 */
function netforum_object_fields($obj_name) {
  static $seen_objects = array();
  $obj_fields = array();

  if ( !isset($obj_name) || $obj_name == '') {
    return $obj_fields;
  }

  if (isset($seen_objects[$obj_name])) {
    return $seen_objects[$obj_name];
  }

  $cached_result = db_query("SELECT data, obj_prefix, obj_defaultcolumns, obj_defaultorderby FROM {netforum_object_cache} WHERE obj_name = :obj_name ", array(':obj_name' => $obj_name));
  if ($cached_result && $cached_result->rowCount() > 0 && $cached_obj = $cached_result->fetchObject()) {
    if ($cached_obj->data != '') {
      $obj_fields = unserialize($cached_obj->data);
      $seen_objects[$obj_name] = $obj_fields;
      return $obj_fields;
    }
  }
  else {
    watchdog('netforum', 'Could not find object %objectname in list of netFORUM objects, perhaps the the list of objects needs to be refreshed?', array('%objectname' => $obj_name), WATCHDOG_WARNING, l(t('refresh object list'), 'admin/config/netforum/object-names-refresh'));
    return $obj_fields;
  }

  drupal_set_time_limit(90);
  $updated_object_data = array();
  if (netforum_is_enterprise() ) {
    $arguments = array(
      'szObjectName' => "Object",
      'szColumnList' => "obj_prefix, obj_defaultcolumns, obj_defaultorderby",
      'szWhereClause' => "obj_name = '$obj_name'",
      'szOrderBy' => "",
    );
    $response = netforum_xweb_request('GetQuery', $arguments);
    if ($response) {
      $obj = $response->ObjectObject;
      $updated_object_data['obj_prefix'] = strval($obj->obj_prefix);
      $updated_object_data['obj_defaultcolumns'] = strval($obj->obj_defaultcolumns);
      $updated_object_data['obj_defaultorderby'] = strval($obj->obj_defaultorderby);
    }
  }

  $response = netforum_xweb_request('GetFacadeXMLSchema', array('szObjectName' => $obj_name));
  if (is_null($response)) {
    return $obj_fields;
  }

  // so this is not the greatest way to parse out the object descriptions, but it's a way, and it works.  At least it only goes through each node once,
  // even if it does wade through several thousand of them for the large objects.
  $p = xml_parser_create();
  xml_parser_set_option($p, XML_OPTION_CASE_FOLDING, 0);
  xml_parser_set_option($p, XML_OPTION_SKIP_WHITE, 1);
  xml_parse_into_struct($p, $response->GetFacadeXMLSchemaResult->any, $vals);
  xml_parser_free($p);

  foreach ($vals as $node) {
    if (isset($node['tag']) && $node['tag'] == 'xsd:group' && $node['type'] == 'open') {
      $category = $node['attributes']['name'];
      $level = $node['level'];
      $found_close = FALSE;
      while ($found_close === FALSE) {
        $node = next($vals);
        if ($node['tag'] && $node['tag'] == 'xsd:element' && $node['type'] != 'close' && isset($node['attributes']['ref'])) {
          $col = $node['attributes']['ref'];
          if (stristr($col, '_')) {
            $obj_fields[$col] = $category . "::";
          }
          else {
            continue;
          }
        }
        elseif ($node['tag'] && $node['tag'] == 'xsd:group' && $node['type'] == 'close' && $node['level'] == $level) {
          $found_close = TRUE;
        }
      }
    }
    if (isset($node['tag']) && $node['tag'] == 'xsd:element' && $node['type'] == 'open' && isset($node['attributes']) && isset($node['attributes']['name'])) {
      $col = $node['attributes']['name'];
      if (array_key_exists($col, $obj_fields) === FALSE) {
        continue;
      }
      $level = $node['level'];
      $found_close = FALSE;
      while ($found_close === FALSE) {
        $node = next($vals);
        if ($node['tag'] && $node['tag'] == 'xsd:documentation') {
          $obj_fields[$col] .= trim($node['value'], '.');
        }
        elseif ($node['tag'] && $node['tag'] == 'xsd:element' && $node['type'] == 'close' && $node['level'] == $level) {
          $found_close = TRUE;
        }
      }
    }
  }

  
  $updated_object_data['data'] = serialize($obj_fields);
  db_update('netforum_object_cache')->fields($updated_object_data)->condition('obj_name', $obj_name)->execute();
  

  $seen_objects[$obj_name] = $obj_fields;

  return $obj_fields;
}

/**
 * Fetch a list of Objects from netForum and stores any new object names and keys in the cache
 *
 * netFORUM OnDemand doesn't have many of the features needed, so the names for on demand are loaded from a static file
 */
function netforum_refresh_object_names() {

  if (netforum_is_team()) {
    //Individual, Organization, Address, and Customer are the only allowed objects for us, calling GetFacadeXMLSchema on anything else is a nogo.
    $id = db_insert('netforum_object_cache')
  ->fields(array(
    'obj_name' => 'Individual', 
    'obj_key' => 'f41b6e06-299b-4022-be6f-0641ba87de59', 
    'obj_prefix' => 'ind', 
    'obj_defaultcolumns' => 'ind_last_name,ind_first_name', 
    'obj_defaultorderby' => 'ind_last_name,ind_first_name', 
    'data' => NULL, 
    'obj_key_field' => NULL
    )) 
  ->execute();
  
    $id = db_insert('netforum_object_cache')
  ->fields(array(
    'obj_name' => 'Organization', 
    'obj_key' => '9c0100ce-f6c2-4b42-aff2-1c065f3734d9', 
    'obj_prefix' => 'org', 
    'obj_defaultcolumns' => 'org_name, org_acronym', 
    'obj_defaultorderby' => 'org_name', 
    'data' => NULL, 
    'obj_key_field' => NULL
    )) 
  ->execute();
  
    $id = db_insert('netforum_object_cache')
  ->fields(array(
      'obj_name' => 'Address',
      'obj_key' => '0574b4d5-853b-48a9-8b64-8b424b6658bd',
      'obj_prefix' => 'adr',
      'obj_defaultcolumns' => '*',
      'obj_defaultorderby' => 'adr_city',
      'data' => NULL,
      'obj_key_field' => NULL,
    ))
  ->execute();

    $id = db_insert('netforum_object_cache')
  ->fields(array(
    'obj_name' => 'Customer', 
    'obj_key' => '65f0eb73-0df7-4196-b2ff-11b61f10e532', 
    'obj_prefix' => 'cst', 
    'obj_defaultcolumns' => 'cst_type,cst_name_cp', 
    'obj_defaultorderby' => 'cst_sort_name_dn', 
    'data' => NULL, 
    'obj_key_field' => NULL
    ))
  ->execute();
    return;
  }

  $empty_obj_struct = array(
    'obj_key' => '',
    'obj_name' => '',
    'obj_prefix' => '',
    'obj_defaultcolumns' => '',
    'obj_defaultorderby' => '',
  );
  $columns = array_keys($empty_obj_struct);

  $arguments = array(
    'szObjectName' => "Object @TOP -1",
    'szColumnList' => implode(", ", $columns),
    'szWhereClause' => "obj_prefix is not null and obj_delete_flag = 0",
    'szOrderBy' => "",
  );
  $response = netforum_xweb_request('GetQuery', $arguments);

  $partial_data = FALSE;
  if (is_null($response) || $response->attributes()->recordReturn < 400) {
    // If we can't use the @TOP directive to override the maximum records returned in the query limit, try it the slow way.
    // according to the avectra wiki, @TOP was added in 2006.01 build
    $response = netforum_xweb_request('GetFacadeObjectList');
    $partial_data = TRUE;
  }
  if ($response) {
    $db_objects = array();
    $to_add = array();
    $to_update = array();
    $db_result = db_query("SELECT " . implode(", ", $columns) . " FROM {netforum_object_cache}");
    foreach($db_result as $obj) {
      $db_objects[(string) $obj->obj_key] = $obj;
    }
    if ($partial_data) {
      foreach ($response->ObjectObject as $obj) {
        $object_name = (string) $obj->obj_name;
        $object_key = (string) $obj->obj_key;
        if (array_key_exists($object_key, $db_objects)) {
          if ($db_objects[$object_key]->obj_name != $object_name) {
            $to_update[$object_key] = $empty_obj_struct;
            $to_update[$object_key]['obj_name'] = $object_name;
          }
        }
        else {
          $to_add[$object_key] = $empty_obj_struct;
          $to_add[$object_key]['obj_name'] = $object_name;
          $to_add[$object_key]['obj_key'] = $object_key;
        }
      }
    }
    else { //if we got all the data we want, do the same logic but with more data!
      foreach ($response->ObjectObject as $obj) {
        $object_key = (string) $obj->obj_key;
        if (array_key_exists($object_key, $db_objects)) {
          foreach ($columns as $obj_col) {
            $obj_val = (string) $obj->{$obj_col};
            if ($db_objects[$object_key]->{$obj_col} != $obj_val) {
              if (!isset($to_update[$object_key])) {
                $to_update[$object_key] = array();
              }
              $to_update[$object_key][$obj_col] = $obj_val;
            }
          }
        }
        else {
          $to_add[$object_key] = $empty_obj_struct;
          foreach ($columns as $obj_col) {
            $obj_val = (string) $obj->{$obj_col};
            $to_add[$object_key][$obj_col] = $obj_val;
          }
        }
      }
    }

    foreach ($to_add as $obj_key => $obj) {
      $id = db_insert('netforum_object_cache')
      ->fields($obj) 
      ->execute();
      
    }

    foreach ($to_update as $obj_key => $obj) {
      db_update('netforum_object_cache')->fields($obj)->condition('obj_key', $obj_key)->execute();
    }
  }
}

/**
 *  Find the name of an object when given the key
 *
 * @param $obj_key
 *    String with the object key
 * @return
 *    String with the object name if found, empty string otherwise
 */
function netforum_object_name($obj_key) {
  static $name_cache = array();
  $obj_key = (string) $obj_key;
  if ( netforum_is_valid_guid($obj_key) == FALSE ) {
    return '';
  }
  if (array_key_exists($obj_key, $name_cache)) {
    return $name_cache[$obj_key];
  }
  else {
    $res = db_query("SELECT obj_name FROM {netforum_object_cache} WHERE obj_key = :obj_key ", array(':obj_key' => $obj_key));
    if ($res && $res->rowCount() > 0 && $obj = $res->fetchObject()) {
      $name_cache[$obj_key] = $obj->obj_name;
      return $obj->obj_name;
    }
    else {
      return '';
    }
  }
}

/**
 *  Find the key of an object when given the name
 *
 * @param $obj_name
 *    String with the object name
 * @return
 *    String with the object key if found, false otherwise
 */
function netforum_object_key($obj_name) {
  static $key_cache = array();

  if (netforum_is_valid_guid($obj_name)) {
    return $obj_name;
  }

  if ( array_key_exists($obj_name, $key_cache)) {
    return $key_cache[$obj_name];
  }
  else {
    $res = db_query("SELECT obj_key FROM {netforum_object_cache} WHERE obj_name = :obj_name ", array(':obj_name' => $obj_name));
    if ($res && $res->rowCount() > 0 && $obj = $res->fetchObject()) {
      $key_cache[$obj_name] = $obj->obj_key;
      return $obj->obj_key;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Get the object key field
 *
 * @param $object_identifier
 *    A string, either the object key or the object name
 * @return
 *    A string with the best guess for the object key
 */
function netforum_object_key_field($obj_identifier) {
  $obj_type_key = netforum_object_key($obj_identifier);
  $obj_key_field = '';
  if ($obj_type_key === FALSE) {
    return "key";
  }

  static $obj_guesses = array();

  if (isset($obj_guesses[$obj_type_key])) {
    return $obj_guesses[$obj_type_key];
  }

  $obj_info = db_query("SELECT obj_key_field, obj_prefix FROM {netforum_object_cache} WHERE obj_key = :obj_key", array(':obj_key' => $obj_type_key))->fetchObject();
  if ($obj_info && trim($obj_info->obj_key_field) != "") {
    $obj_key_field = $obj_info->obj_key_field;
  }
  else {
    if (netforum_is_enterprise()) { //The following only works in NF Enterprise
      $arguments = array(
        'szObjectName' => "Object Data",
        'szColumnList' => "obd_key_field, obd_description",
        'szWhereClause' => "obd_obj_key = '" . $obj_type_key . "' ",
        'szOrderBy' => "obd_order",
      );
      $response = netforum_xweb_request('GetQuery', $arguments);
      if ($response && $response->attributes()->recordReturn > 0) {
        $obd = $response->ObjectDataObject[0];
        $obj_key_field = (string) $obd->obd_key_field;
        if ($obj_key_field != '') {
          db_update('netforum_object_cache')->fields(array(
            'obj_key_field' => $obj_key_field,
          ))->condition('obj_key', $obj_type_key)->execute();
        }
      }
    }
    else { //We're using NF OD
      //find the prefix
      static $prefix_cache = array();

      if (array_key_exists($obj_type_key, $prefix_cache)) {
        $obj_prefix = $prefix_cache[$obj_type_key];
      }
      else {
        $obj_prefix = db_query("SELECT obj_prefix FROM {netforum_object_cache} WHERE obj_key = :obj_key", array(':obj_key' => $obj_type_key))->fetchField();
        $prefix_cache[$obj_type_key] = $obj_prefix;
      }

      //fetch the object fields as a numerically indexed array
      $object_fields = netforum_object_fields(netforum_object_name($obj_type_key));
      $object_fields = array_keys($object_fields);

      //possible things to append to the prefix to find the field
      $guesses = array(
        "_key",
        "_cst_key",
        "_prd_key",
      );

      //The object fields come in order, so sort through the guesses and the object to find the first match
      $min_index = 10000000;
      foreach ($guesses as $stem) {
        $field = $obj_prefix . $stem;
        foreach ($object_fields as $k => $v) {
          if ($v == $field && (int) $k < $min_index) {
            $min_index = $k;
            $obj_key_field = $v;
          }
        }
      }
    }
  }

  if ($obj_key_field != '') {
    $obj_guesses[$obj_key] = $obj_key_field;
    return $obj_key_field;
  }
  else {
    return "key";
  }

}

/**
 * Verify that the key is a valid GUID
 *
 * @param $key
 *    A string, the key to be verified as valid
 * @return
 *    TRUE if valid GUID, FALSE if empty or invalid
 */
function netforum_is_valid_guid($key = '') {

  if (trim($key) == '' ) {
    return FALSE;
  }
  $key = strtolower($key);

  return preg_match("/[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}/", $key);
}

/**
 * Verify that the key is a valid GUID and is not the empty GUID (all zeroes)
 *
 * @param $key
 *    A string, the key to be verified as valid
 * @return
 *    TRUE if valid GUID, FALSE if empty, invalid, or all zeroes
 */
function netforum_is_empty_guid($key = '') {
  if ($key == '00000000-0000-0000-0000-000000000000' || netforum_is_valid_guid($key) == FALSE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Get the object name without trailing spaces or @ directives
 *
 * For requests that set the object name based on user input this
 * function will look for any @ signs, remove them, and trim the output.
 * Very useful for reading results from requests
 *
 * @param $obj_type_name
 *    A string, the name of the object - Individual @TOP 100 for example
 * @return
 *    The plain object name as a string.
 */
function netforum_clean_object_name($obj_type_name) {
  //NOTE:  If this is insufficient, we could check against the database to ensure we return
  // a valid object
  if (stristr($obj_type_name, "@")) {
    $parts = explode("@", $obj_type_name);
    return trim($parts[0]);
  }
  else {
    return trim($obj_type_name);
  }
}

/**
 * Fetch and return the log from the SoapClient for the last request
 *
 * @return
 *    A plaintext string with the latest results
 */
function netforum_request_log() {
  $nfh = netforum_connect_xweb();
  if (!$nfh) {
    return;
  }
  return $nfh->log;
}

/**
 * Fetch and return the headers and request for the last xWeb request
 *
 * @return
 *    A plaintext string with the headers from the last request
 */
function netforum_soap_log() {
  $nfh = netforum_connect_xweb();
  if (!$nfh) {
    return "";
  }
  $output = "";
  $output .= t("Last Request Headers:") . "\n";
  $output .= print_r($nfh->__getLastRequestHeaders(), TRUE);
  $output .=  "\n" . t("Last Request :") . "\n";
  $output .= print_r($nfh->__getLastRequest(), TRUE);
  $output .=  "\n" . t("Last Response Headers :") . "\n";
  $output .= print_r($nfh->__getLastResponseHeaders(), TRUE);
  $output .=  "\n" . t("Last Response :") . "\n";
  $output .= print_r($nfh->__getLastResponse(), TRUE);
  $output .=  "\n";
  return $output;
}

/**
 * Return a list of the xWeb functions and their parameters.
 *
 * For speed reasons, this does not insepect the custom SOAP types
 *
 * @return
 *    An array, with function names as the keys and a string of parameters as the value
 */
function netforum_xweb_functions() {
  static $xweb_functions = array();

  if (count($xweb_functions) == 0) {
    $function_list = _netforum_xweb_soap_functions();
    foreach (array_keys($function_list) as $function_name) {
      $parameters = netforum_xweb_function_parameters($function_name);
      $xweb_functions[$function_name] = $function_name . "(" . implode(', ', $parameters) . ")";
    }
    asort($xweb_functions);
  }

  return $xweb_functions;
}

/**
 * Return a list of the xWeb functions from the SOAP class
 *
 * @return
 *    An array with function names and signatures
 */
function _netforum_xweb_soap_functions() {
  static $xweb_functions = array();

  if (count($xweb_functions) == 0) {
    $nfh = netforum_connect_xweb();
    if (!$nfh) {
      return array();
    }
    $function_list = $nfh->__getFunctions();
    foreach ($function_list as $function) {
      $start = strpos($function, ' ');
      $end = strpos($function, '(');
      $function_name = trim(substr($function, $start, ($end - $start)));
      $function_display = trim(substr($function, $start));
      //Try to present and display functions that take discrete items, instead of custom structs where possible
      if (isset($xweb_functions[$function_name]) == false || (stristr($xweb_functions[$function_name], '$parameters') && stristr($function_display, '$'))) {
        $xweb_functions[$function_name] = $function_display;
      }
    }
    asort($xweb_functions);
  }

  return $xweb_functions;
}

/**
 * Return the individual parameters for an xWeb function
 *
 * @param $fname
 *    A string representing the name of the xWeb function, such as GetIndividualInformation
 * @return
 *    An array of parameter names
 */
function netforum_xweb_function_parameters($fname) {
  if (netforum_is_enterprise()) {
    return _netforum_xweb_soap_function_parameters($fname);
  }
  else {
    return _netforum_xweb_od_function_parameters($fname);
  }
}

/**
 * Return the individual parameters for an xWeb function, looking in custom SOAP types as needed
 *
 * @param $fname
 *    A string representing the name of the xWeb function, such as GetIndividualInformation
 * @return
 *    An array of parameter names, including the type if it is a custom SOAP parmeter
 */
function netforum_xweb_function_struct_parameters($fname) {
  if (netforum_is_enterprise()) {
    return _netforum_xweb_soap_function_parameters($fname, true);
  }
  else {
    return _netforum_xweb_od_function_parameters($fname, true);
  }
}

/**
 * Return the individual parameters for an xWeb function by checking the soap definition
 *
 * If needed it will recurse into the WSDL custom type definitions, but beware that it is
 * an expensive operation and best used for just one function per request.  Fetching the full
 * information for every function
 *
 * @param $fname
 *    A string representing the name of the xWeb function, such as GetIndividualInformation
 * @param $inspect_structs
 *    A boolean value, passing true will look at the custom variable types defined in the WSDL.
 * @return
 *    An array of parameter names
 */
function _netforum_xweb_soap_function_parameters($fname, $inspect_structs = false) {
  static $function_parameters = array();
  $parameter_names = array();

  if (isset($function_parameters[$fname])) {
    return $function_parameters[$fname];
  }

  if (! isset($fname) || $fname == '') {
    return $parameter_names;
  }

  $functions = _netforum_xweb_soap_functions();
  $long_desc = $functions[$fname];
  $start = strpos($long_desc, '(');
  $end = strpos($long_desc, ')');
  $parameter_list = substr($long_desc, $start + 1, ($end -$start -1));
  $parameters = explode(',', $parameter_list);

  $parameter_names = array();
  foreach ($parameters as $p) {
    $p = trim($p);
    if ($p == '') {
      continue;
    }
    $ptype = substr($p, 0, strpos($p, '$') -1);
    $pname = substr($p, strpos($p, '$') + 1);
    if (!empty($pname) ) {
      if ($ptype == "string") {
        $parameter_names[] = $pname;
      }
      else {
        if ($inspect_structs) {
          $parameter_names = array_merge($parameter_names, netforum_xweb_struct_params($ptype, $pname));
        }
        else {
          $parameter_names[] = $pname;
        }
      }
    }
  }

  $function_parameters[$fname] = $parameter_names;

  return $parameter_names;
}

/**
 * Return the individual parameters for an xWeb on demand function by checking a static list
 *
 * @param $fname
 *    A string representing the name of the xWeb function, such as GetIndividualInformation
 * @return
 *    An array of parameter names
 */
function _netforum_xweb_od_function_parameters($fname, $inspect_structs = false) {

  if (! isset($fname) || $fname == '') {
    return array();
  }
  $functions = array();
  $functions['Authenticate'] = array('userName', 'password');
  $functions['CheckEWebUser'] = array('szEmail', 'szPassword');
  $functions['GetCommitteeByCode'] = array('szCode');
  $functions['GetCommitteeByKey'] = array('szKey');
  $functions['GetCommitteeListByCode'] = array('szCode', 'szActiveInactiveType', 'szRecordDate');
  $functions['GetCommitteeListByCstId'] = array('szCstId');
  $functions['GetCustomerBalance'] = array('szCstKey');
  $functions['GetCustomerByCityState'] = array('szState', 'szCity', 'bIncludeIndividuals', 'bIncludeOrganizations', 'szRecordDate');
  $functions['GetCustomerById'] = array('szCstId');
  $functions['GetCustomerByName'] = array('szName');
  $functions['GetCustomerByRecordDate'] = array('szRecordDate', 'bMembersOnly', 'bIncludeOrganizations', 'bIncludeIndividuals');
  $functions['GetCustomerByZip'] = array('bIncludeIndividuals', 'bIncludeOrganizations', 'zip1', 'zip2', 'zip3', 'zip4', 'zip5', 'zip6', 'zip7', 'zip8', 'zip9');
  $functions['GetCustomerEvent'] = array('szCstKey', 'szRecordDate');
  $functions['GetCustomerMembership'] = array('szCstKey');
  $functions['GetCustomerSession'] = array('szCstKey', 'szRecordDate');
  $functions['GetEventByKey'] = array('szKey');
  $functions['GetEventCustomerList'] = array('szEventKey', 'szRecordDate');
  $functions['GetEventListByName'] = array('szName', 'szRecordDate');
  $functions['GetFacadeObject'] = array('szObjectName', 'szObjectKey');
  $functions['GetFacadeXMLSchema'] = array('szObjectName');
  $functions['GetProductBalances'] = array('szCstKey', 'szPrdKey', 'szRecordDate');
  $functions['GetQuery'] = array('szObjectName', 'szColumnList', 'szWhereClause', 'szOrderBy');
  $functions['GetSessionByKey'] = array('szKey');
  $functions['GetSessionCustomerList'] = array('szSessionKey', 'szSessionKey');
  $functions['GetSessionListByEvent'] = array('szEventKey', 'szRecordDate');
  $functions['GetSessionListByName'] = array('szName', 'szRecordDate');

  if (isset($functions[$fname])) {
    return $functions[$fname];
  }
  else {
    return _netforum_xweb_soap_function_parameters($fname, $inspect_structs);
  }

}

/**
 * Return the individual parameters for an xWeb function by checking the contents of the custom structs
 *
 * Many of the functions defined by netFORUM accept custom data structs.  This function examines the
 * output of SOAP's __getTypes() function for a struct of the given type and expands it to a list
 * of parameters.  If one of the types is also a struct, it will expand that struct too.  Note that
 * any data types not defined as structs are returned as strings.
 *
 * @param $fname
 *    A string representing the name of the xWeb function, such as GetIndividualInformation
 * @return
 *    An array of parameter names or arrays containing parameter names
 */
function netforum_xweb_struct_params($ptype, $pname) {
  $nfh = netforum_connect_xweb();
  $ptype = trim($ptype);
  $pname = trim($pname);

  // The types array will start holding the string definitions, and as the definitions are
  // parsed the strings will be replaced with arrays of parameter names
  static $types = array();
  if (count($types) == 0) {
    foreach ($nfh->__getTypes() as $type_def) {
      $matches = array();
      preg_match('/^struct (.*)\{(.*)\}/s', $type_def, $matches);
      if (count($matches) > 0) {
        // Skip anything that has Response or Result in it - those aren't used as function parameters
        if (!strpos($matches[1], "Response") && !stripos($matches[1], "Result")) {
          $elements = trim($matches[2]);
          $elements = empty($elements) ? array() : $elements;
          $types[trim($matches[1])] = $elements;
        }
      }
    }
  }

  //Look for the type in the array
  if (array_key_exists($ptype, $types) && is_array($types[$ptype])) { //If it is an array we have already parsed it
    return $types[$ptype];
  }
  else if (array_key_exists($ptype, $types) && is_string($types[$ptype])) { //If it is a string, we need to parse it
    static $call_stack = array();
    if (in_array($ptype, $call_stack)) {
      $types[$ptype] = array(); // Some of the definitions are recursive, so we make sure not to go too deep
    }
    else {
      $call_stack[] = $ptype;
      if ($ptype == "<anyXML>") {
        $types[$ptype] = array("xml"); // A special type
      }
      else {
        $struct = $types[$ptype];
        if ($struct != "") {
          $names = array();
          $struct_elements = explode(";", $struct);
          foreach ($struct_elements as $param) {
            $param = trim($param);
            if ($param == '') {
              continue;
            }
            $tmp = explode(" ", $param);
            $etype = trim($tmp[0]);
            $ename = trim($tmp[1]);
            $param_name = netforum_xweb_struct_params($etype, $ename);
            if (is_array($param_name)) {
              $names[$ename] = $param_name;
            }
            else {
              $names[] = $param_name;
            }
          }
          if (count($names) == 0) {
            $names = array();
          }
          $types[$ptype] = $names;
        }
      }
      array_pop($call_stack);
    }
    return $types[$ptype];
  }
  else {
    //If it is not an array or string (ie, not set) then it is not in
    // the list of structs and we treat it like a string type parameter
    return $pname;
  }
}

/**
 * Turn an array into an XML snippet for xWeb individual information requests
 *
 * This function will take a hashed array of parameters or an array of hashed arrays and return a soap variable with
 * the proper xml for use with the xWeb method SetIndividualInformation or NewIndividualInformation
 * For example:
 * $data_node = netforum_ind_info_parameters(array('ind_first_name'=>'John', 'ind_last_name'=>'smith'));
 * netforum_xweb_request('SetIndividualInformation',array('IndividualKey'=>'c4f5372a-477a-486c-9c21-1dd8624d6f5e', 'oUpdateNode'=>$data_node));
 *
 * Or, to add multiple new individuals:
 * $ind_params = array(
 *  array('ind_first_name'=>'John', 'ind_last_name'=>'smith'),
 *  array('ind_first_name'=>'Alfred', 'ind_last_name'=>'jones')
 * );
 * $data_node = netforum_ind_info_parameters($ind_params);
 * netforum_xweb_request('NewIndividualInformation',array('oNode'=>$data_node));
 *
 * @param $ind_objects
 *    A hashed array of columns and values for the individual information, optionally multidimensional for multiple inserts
 * @return
 *    A string of XML for use as an oNode parameter in netforum_xweb_request()
 *
 * @see netforum_xweb_request
 * @see netforum_facade_object_parameters
 * @see netforum_org_info_parameters
 */
function netforum_ind_info_parameters($ind_objects = array()) {
  $xml = "<IndividualObjects>";
  // if it is not an array of hashed arrays, make it one.
  if ( isset($ind_objects[0]) === FALSE || is_array($ind_objects[0]) === FALSE) {
    $ind_objects = array($ind_objects);
  }

  foreach ($ind_objects as $ind_fields) {
    $xml .= "<IndividualObject>";
    foreach ($ind_fields as $col_name => $data) {
      $xml .= "<$col_name>$data</$col_name>";
    }
    $xml .= "</IndividualObject>";
  }
  $xml .= "</IndividualObjects>";
  $oUpdateNode = new SoapParam("this", "doesntmatter");
  $oUpdateNode->any = $xml;
  return $oUpdateNode;
}

/**
 *
 * Turn an array into an XML snippet for xWeb organization information requests
 *
 * This function will take a hashed array of parameters or an array of hashed arrays and return a soap variable with
 * the proper xml for use with the xWeb method SetOrganizationInformation or NewOrganizationInformation
 * For example:
 * $data_node = netforum_org_info_parameters(array('org_name'=>'Xpress Organization Restructuring', 'org_acronym'=>'XOR'));
 * netforum_xweb_request('SetOrganizationInformation',array('OrganizationKey'=>'c4f5372a-477a-486c-9c21-1dd8624d6f5e', 'oUpdateNode'=>$data_node));
 *
 * Or, to add multiple new organization:
 * $org_params = array(
 *  array('org_name'=>'Xpress Organization Restructuring', 'org_acronym'=>'XOR'),
 *  array('org_name'=>'Avectra3', 'org_acronym'=>'AV', 'url_code'=>'http://www.avectra.com')
 * );
 * $data_node = netforum_org_info_parameters($org_params);
 * netforum_xweb_request('NewOrganizationInformation',array('oNode'=>$data_node));
 *
 * @param $org_objects
 *    A hashed array of columns and values for the individual information, optionally multidimensional for multiple inserts
 * @return
 *    A string of XML for use as an oNode parameter in netforum_xweb_request()
 *
 * @see netforum_xweb_request
 * @see netforum_facade_object_parameters
 * @see netforum_ind_info_parameters
 */
function netforum_org_info_parameters($org_objects = array()) {
  $xml = "<OrganizationObjects>";
  // if it is not an array of hashed arrays, make it one.
  if ( isset($org_objects[0]) === FALSE || is_array($org_objects[0]) === FALSE) {
    $org_objects = array($org_objects);
  }

  foreach ($org_objects as $org_fields) {
    $xml .= "<OrganizationObject>";
    foreach ($org_fields as $col_name => $data) {
      $xml .= "<$col_name>$data</$col_name>";
    }
    $xml .= "</OrganizationObject>";
  }
  $xml .= "</OrganizationObjects>";
  $oUpdateNode = new SoapParam("this", "doesntmatter");
  $oUpdateNode->any = $xml;
  return $oUpdateNode;
}

/**
 *
 * Return an XML snippet suitable for use in InsertFacadeObject or UpdateFacade Object requests
 *
 * This function will take an object name and a  hashed array of parameters or an array of hashed arrays and return a soap variable with
 * the proper xml for use with the xWeb method UpdateFacadeObject or InsertFacadeObject
 *
 * NOTE: the object name must be singular, even if you are adding multiple objects.
 *
 * For example:
 * $data_node = netforum_facade_object_parameters('CourseParticipant', array('cup_score'=>'90', 'cup_grade'=>'A', 'cup_success_flag'=>1));
 * netforum_xweb_request('UpdateFacadeObject',array('szObjectName'=>'CourseParticipant', 'szObjectKey', => 'c2e78f52-ff3b-4412-813e-c8f8d8e25e1c', 'oNode'=>$data_node));
 *
 * Or, to add multiple new emails:
 * $eml_params = array(
 *  array('eml_address'=>'jroos200@insp.com', 'eml_cst_key'=>'128ac39e-57ae-4bcd-b9c6-07b40405eee7'),
 *  array('eml_address'=>'jroos999@insp.com', 'eml_cst_key'=>'128ac39e-57ae-4bcd-b9c6-07b40405eee7')
 * );
 * $data_node = netforum_facade_object_parameters('IndividualEmail', $eml_params);
 * netforum_xweb_request('InsertFacadeObject',array('szObjectName'=>'IndividualEmail', 'oNode'=>$data_node));
 *
 * @param $fcd_obj_name
 *    A string for the name of the facade object.  This must be singular, even when working with multiple objects
 * @param $fcd_objects
 *    A hashed array of columns and values for the individual information, optionally multidimensional for multiple inserts
 * @return
 *    A string of XML for use as an oNode parameter in netforum_xweb_request()
 *
 * @see netforum_xweb_request
 * @see netforum_org_info_parameters
 * @see netforum_ind_info_parameters
 */
function netforum_facade_object_parameters($fcd_obj_name, $fcd_objects = array()) {
  if (isset($fcd_obj_name) === FALSE) {
    return;
  }
  $xml = "<" . $fcd_obj_name . "s>";
  // if it is not an array of hashed arrays, make it one.
  if ( isset($fcd_objects[0]) === FALSE || is_array($fcd_objects[0]) === FALSE) {
    $fcd_objects = array($fcd_objects);
  }

  foreach ($fcd_objects as $fcd_fields) {
    $xml .= "<$fcd_obj_name>";
    foreach ($fcd_fields as $col_name => $data) {
      $xml .= "<$col_name>$data</$col_name>";
    }
    $xml .= "</$fcd_obj_name>";
  }
  $xml .=  "</" . $fcd_obj_name . "s>";
  $oUpdateNode = new SoapParam("this", "doesntmatter");
  $oUpdateNode->any = $xml;
  return $oUpdateNode;
}


/**
 * Guess the xWeb endpoint based on the input
 *
 * @return
 *  A string with the best guess for a valid xWeb url
 *
 */
function _netforum_guess_xweb_url($url) {
  $guess = $url;
  $xweb_dir = "/xWeb/Secure/netFORUMXML.asmx?WSDL";

  $od_servers = array('66.28.41.163', 'netforum.avectra.com', 'www.netforumondemand.com');
  $od_cert_server = 'www.netforumondemand.com';

  $parts = parse_url($url);
  if (!isset($parts['scheme'])) {
    $guess = 'http://' . $url;
  }

  $parts = parse_url($guess);

  if (!isset($parts['path'])) { //If it is just a host entry
    $guess = $guess . $xweb_dir;
  }
  else { //if they copied and pasted a URL from some other part of netforum
    $sites = array('iweb', 'aweb', 'eweb', 'mweb');
    foreach ($sites as $s) {
      $sitepos = stripos($parts['path'], "/" . $s);
      if ($sitepos !== FALSE) {
        $new_path = substr($parts['path'], 0, $sitepos);
        $new_path .= $xweb_dir;
        $guess = $parts['scheme'] . "://" . $parts['host'] . $new_path;
      }
    }
  }

  //If they copied part, but didn't put the xWeb bit on the end
  if (! stristr($guess, 'xweb')) {
    $guess = rtrim($guess, '/'); //removing trailing slash since we add our own
    $guess = $guess . $xweb_dir;
  }
  else { //If they included xWeb, but not the netFORUMXML.asmx bit
    $guess = rtrim($guess, '/'); //removing trailing slash since we add our own
    if (strtolower(substr($guess, -4)) == 'xweb') {
      $guess = $guess . "/Secure/netFORUMXML.asmx?WSDL";
    }
    else if (strtolower(substr($guess, -6)) == 'secure') {
      $guess = $guess . "/netFORUMXML.asmx?WSDL";
    }
  }

  //If they are not using xWeb secure
  if (stristr($guess, 'xweb/netFORUMXML.asmx')) {
    $guess = str_ireplace('xweb/netforumxml.asmx', 'xweb/secure/netFORUMXML.asmx', $guess);
  }

  //If they forgot the ?WSDL on the end
  if (strtolower(substr($guess, -4)) == 'asmx') {
    $guess = $guess . "?WSDL";
  }

  foreach ($od_servers as $server) {
    if (stristr($guess, $server)) { //If they are using netFORUM OD
      //Remove the /secure/ folder since OD doesn't use it, and change the name of the web service page
      $guess = str_ireplace('secure/netFORUMXML.asmx?WSDL', 'netForumXMLOnDemand.asmx?WSDL', $guess);

      if (stristr($guess, 'netforumODSandBox') === FALSE) { //if it is a live server
        if (strtolower(substr($guess, 0, 5)) != 'https') {
          $guess = 'https' . substr($guess, 4); //make sure they are using https
        }
        if ($server != $od_cert_server) {
          $guess = str_ireplace($server, $od_cert_server, $guess);
        }
      }

    }
  }

  return $guess;
}

/**
 * Implements hook_help().
 */
function netforum_help($path, $arg) {
  switch ($path) {
    //case 'admin/help/netforum':
    case 'admin/help#netforum':
      $output = t('
<p>
This module provides the base platform for issuing xWeb requests.  During setup the module will verify that it can reach and retreive information from xWeb.
Once you have !set_up xWeb visit the !xweb_testing page to view the request and the response from netFORUM
</p>

<p>
If you are having problems, be sure to check the !log_page to see more information.
</p>
', array('!log_page' => l(t('log page'), 'admin/reports/watchdog'), '!set_up' => l(t('set up'), 'admin/config/netforum/connection'), '!xweb_testing' => l(t('xWeb testing page'), 'admin/config/netforum/xwebtest')));
      return $output;
  }
}

/**
 * Implements hook_requirements().
 */
function netforum_requirements($phase) {

  $php_major_version = substr(phpversion(), 0, 1);
  $has_soap = class_exists("SoapClient");
  $has_simple_xml = class_exists("SimpleXMLElement");

  // Ensure translations don't break at install time
  $t = get_t();

  $requirements = array();
  if ((int) $php_major_version < 5) {
    $requirements['php5'] = array(
      'title' => $t('PHP'),
      'value' => $php_major_version,
      'description' => $t('Your PHP installation is too old.  PHP version 5 or greater is required for netFORUM'),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  $requirements['SoapClient'] = array(
    'title' => $t('Soap'),
    'value' => $has_soap ? $t('Enabled') : $t('Not Found'),
    'description' => $t('netFORUM requires the SoapClient class to be enabled.  Check php.ini or ask your hosting provider'),
    'severity' => $has_soap ? REQUIREMENT_OK : REQUIREMENT_ERROR,
  );

  if ($has_soap) {
    $requirements['SoapClient']['description'] = '';
  }

  $requirements['SimpleXML'] = array(
    'title' => $t('SimpleXML'),
    'description' => $t('netFORUM requires the SimpleXML class to be enabled.  Check php.ini or ask your hosting provider'),
    'value' => $has_simple_xml ? $t('Enabled') : $t('Not Found'),
    'severity' => $has_simple_xml ? REQUIREMENT_OK : REQUIREMENT_ERROR,
  );

  if ($has_simple_xml) {
    $requirements['SimpleXML']['description'] = '';
  }

  return $requirements;
}

/**
 * Encrypts a string using a given base64 encoded key and IV, and returns
 * a base64 encoded string as a result.
 *
 * @param $plaintext
 *    The string of text to encode
 * @param $key
 *    The AES key, Base64 encoded
 * @param $iv
 *    The AES initialization vector, Base64 encoded
 * @return
 *    A Base64 encoded string representing the encrypted text
 *
 */
function netforum_aes_encrypt($plaintext, $key, $iv) {

  $cipher = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');

  $key = base64_decode($key);
  $iv = base64_decode($iv);

  $plaintext = mb_convert_encoding($plaintext, 'UTF-16LE'); #Convert to the same encoding used by netFORUM
  $plaintext = _netforum_pkcs7_pad($plaintext, mcrypt_enc_get_block_size($cipher)); #Pad using the default .NET Rijndael padding scheme

  if (mcrypt_generic_init($cipher, $key, $iv) != -1) {
    $cipherText = mcrypt_generic($cipher, $plaintext);
    mcrypt_generic_deinit($cipher);
    return base64_encode($cipherText);
  }
  else {
    return false;
  }
}

/**
 * Pads a string to the specified block size using the method
 * defined in PKCS7, aka RFC 2315
 *
 * See http://tools.ietf.org/html/rfc2315 for more details
 *
 * @param $text
 *    The string of text to pad
 * @param $block_size
 *    The block size to pad to
 * @return
 *    A string where length mod blocksize == 0
 *
 */
function _netforum_pkcs7_pad($text, $block_size) {
  $length = mb_strlen($text);

  $padding = ($block_size - ($length % $block_size));

  return $text . str_repeat(chr($padding), $padding);
}

/**
 * Trims a string based on the specified block size using the method
 * defined in PKCS7, aka RFC 2315
 *
 * See http://tools.ietf.org/html/rfc2315 for more details
 *
 * Here for completeness
 *
 * @param $text
 *    The string of text to trim
 * @param $block_size
 *    The block size used to pad
 * @return
 *    A string with trailing padding removed
 *
 */
function _netforum_pkcs7_trim($text, $block_size) {
  $packing = ord($text{strlen($text) - 1});
  if ($packing and ($packing < $block_size)) {
    for ($P = strlen($text) - 1; $P >= strlen($text) - $packing; $P--) {
      if (ord($text{$P}) != $packing) {
        $packing = 0;
      }
    }
  }
  return substr($text, 0, strlen($text) - $packing);
}

/**
 * Acts like PHP's built in array_filter, but it does it recursively
 *
 * @param $input
 *    The array to filter
 * @return
 *    An array with values evaluating to false removed
 */
function array_filter_recursive($input) {
  foreach ($input as &$value) {
    if (is_array($value)) {
      $value = array_filter_recursive($value);
    }
  }

  return array_filter($input);
}

/**
 * Clear netforum cache tables.
 */
function netforum_invalidate_cache() {
  if (db_table_exists('netforum_object_cache')) {
    db_truncate('netforum_object_cache')->execute();
  }
  if (db_table_exists('netforum_request_cache')) {
    db_truncate('netforum_request_cache')->execute();
  }
  netforum_refresh_object_names();
}
