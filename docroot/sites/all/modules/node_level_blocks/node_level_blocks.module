<?php

/**
 * @file
 * Allows node editors to assign blocks to regions on a node base.
 *
 * @name Node-level Blocks
 * @author skilip
 */

/**
 * Implements hook_permission().
 */
function node_level_blocks_permission() {
  return array(
    'administer node_level_blocks' => array(
      'title' => t('Administer Node-level Blocks'),
      'description' => t('Administer Node-level Blocks'),
    ),
    'edit node_level_blocks' => array(
      'title' => t('Edit Node-level Blocks'),
      'description' => t('Edit Node-level Blocks'),
    ),
    'edit all node_level_blocks' => array(
      'title' => t('Edit ALL Node-level Blocks'),
      'description' => t('Edit even those blocks that require extra permission to move across regions.'),
    ),
  );
}

/**
 * Implements hook_node_load().
 */
function node_level_blocks_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $nodes[$node->nid]->node_level_blocks = array(
      'blocks' => node_level_blocks_node_load_blocks(!empty($node->nid) ? $node->nid : 0),
      'settings' => node_level_blocks_node_type_settings($node->type),
    );
  }
}

/**
 * Implements hook_node_update().
 */
function node_level_blocks_node_update($node) {
  if ($node->node_level_blocks && !empty($node->node_level_blocks['blocks'])) {
    node_level_blocks_node_save_blocks($node);
  }
}

/**
 * Implements hook_node_insert().
 */
function node_level_blocks_node_insert($node) {
  if (isset($node->node_level_blocks) && !empty($node->node_level_blocks['blocks'])) {
    node_level_blocks_node_save_blocks($node);
  }
}

/**
 * Implements hook_theme().
 * @link http://api.drupal.org/api/function/hook_theme/6
 */
function node_level_blocks_theme() {
  return array(
    'node_level_blocks_fieldset' => array(
      'template' => 'node_level_blocks-fieldset',
      'file' => 'node_level_blocks.admin.inc',
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function node_level_blocks_form_node_form_alter(&$form, &$form_state) {
  // Add a fieldset to the node type form in which admins can enable or disable node_level_blocks per content type.
  form_load_include($form_state, 'inc', 'node_level_blocks', 'node_level_blocks.admin');
  node_level_blocks_fieldset_node_edit_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function node_level_blocks_form_node_type_form_alter(&$form, &$form_state) {
  // Add a fieldset to the node type form in which admins can enable or disable node_level_blocks per content type.
  form_load_include($form_state, 'inc', 'node_level_blocks', 'node_level_blocks.admin');
  node_level_blocks_node_type_form($form, $form_state);
}

/**
 * Saves block - region relations for a given node page.
 */
function node_level_blocks_node_save_blocks($node) {
  $blocks = $node->node_level_blocks['blocks'];

  // Delete old entries for this node.
  db_delete('node_level_blocks')
    ->condition('nid', $node->nid)
    ->execute();

  foreach ($blocks as $block) {
    $block = (object) $block;
    if ($block->region != BLOCK_REGION_NONE) {
      db_insert('node_level_blocks')
        ->fields(array(
          'nid' => $node->nid,
          'bid' => $block->bid,
          'region' => $block->region,
          'weight' => $block->weight,
        ))
        ->execute();
    }
  }
}

/**
 * Loads all blocks associated with the node of the given nid.
 */
function node_level_blocks_node_load_blocks($nid) {
  $blocks = &drupal_static(__FUNCTION__);

  if (empty($blocks) || !isset($blocks[$nid])) {
    $query = db_select('node_level_blocks', 'nlb');
    $query->fields('nlb', array('bid', 'region', 'weight'));
    $query->join('block', 'b', 'nlb.bid = b.bid');
    $query->fields('b', array('module', 'delta', 'cache', 'title'));
    $query->condition('nlb.nid', $nid);
    $query->orderBy('nlb.weight');

    $blocks[$nid] = $query->execute()->fetchAllAssoc('bid');
  }
  return $blocks[$nid];
}

/**
 * Implements hook_block_list_alter().
 */
function node_level_blocks_block_list_alter(&$block_list) {
  if (($node = menu_get_object()) && isset($node->node_level_blocks)) {
    $settings = isset($node->node_level_blocks['settings']) ? $node->node_level_blocks['settings'] : node_level_blocks_node_type_settings($node->type);
    $node_edit = arg(0) == 'node' && arg(2) == 'edit';
    if ((!$node_edit || $settings->display_node_edit)) {
      $blocks = $node->node_level_blocks['blocks'];
      if (!empty($settings->nodeblock)) {
        foreach ($blocks as $block) {
          if ($block->module == 'nodeblock') {
            $nodeblock = nodeblock_load_nodeblock($block->delta);
            if ($nodeblock && $nodeblock->node_level_blocks['blocks']) {
              $blocks = array_merge($blocks, $nodeblock->node_level_blocks['blocks']);
            }
          }
        }
      }

      _node_level_blocks_set_blocks($block_list, $blocks, $settings);
    }
  }
}

/**
 * Helper function to assign blocks to the block_list.
 */
function _node_level_blocks_set_blocks(&$block_list, $blocks, $settings) {
  foreach ($blocks as $bid => $block) {
    if (isset($block->region) && $block->region != -1) {
      // Check if the block is already present in the block list.
      if (isset($block_list[$bid])) {
        // If settings tell us to allow us to repeat blocks, we'll create a
        // duplicate only if the regions differ.
        if (isset($settings->multi) && $settings->multi) {
          if ($block_list[$bid]->region !== $block->region) {
            $block_list[$bid . '-' . $block->region] = $block;
          }
          continue;
        }
      }
      // If the settings tell us not to duplicate blocks, we'll use the node
      // level block as leading.
      $block_list[$bid] = $block;
    }
  }
}

/**
 * Helper function for getting the snipets configuration settings for a node type.
 */
function node_level_blocks_node_type_settings($node_type) {
  $defaults = (object) array(
    'enabled' => FALSE,
    'display_node_edit' => FALSE,
    'multi' => FALSE,
    'modules' => array('block', 'nodeblock'),
    'regions' => array('content'),
  );

  if (module_exists('nodeblock') && nodeblock_type_enabled($node_type)) {
    $defaults->nodeblock = FALSE;
  }

  return variable_get('node_level_blocks_enabled_' . $node_type, $defaults);
}

/**
 * Helper function to return the blocks overview.
 */
function node_level_blocks_block_overview(&$form, $node_blocks, $settings, $context) {
  // set default theme for retrieving regions and blocks
  $theme_key = variable_get('theme_default', 'garland');

  // Fetch and sort blocks
  $blocks = _block_rehash($theme_key);

  // Loop through the blocks array to do some last cleanup stuff.
  foreach ($blocks as $i => $block) {
    // If the blocks for the current block's module has been disabled, unset it.
    if (is_array($settings->modules) && !in_array($block['module'], $settings->modules)) {
      unset($blocks[$i]);
    }
    // If the block has been selected and region is not disabled.
    elseif (isset($node_blocks[$block['bid']]) && in_array($node_blocks[$block['bid']]->region, $settings->regions)) {
      // Overwrite the block weights here to make sure the list is ordered correctly.
      $blocks[$i]['weight'] = $node_blocks[$block['bid']]->weight;
    }
    else {
      // The block isn't assigned to a snippet region.
      // Set the weight parameter to a fixed value in order to force sorting by info.
      $blocks[$i]['weight'] = -10;
    }
  }

  usort($blocks, '_node_level_blocks_compare');

  // Allow modules to override the blocks.
  drupal_alter('node_level_blocks', $blocks, $context);

  $system_regions = system_region_list($theme_key);
  $block_regions = array(BLOCK_REGION_NONE => '<' . t('none') . '>');

  // Remove unused regions for this node type.
  foreach ($settings->regions as $key) {
    if (isset($system_regions[$key])) {
      $block_regions[$key] = $system_regions[$key];
    }
  }

  // Allow modules to override the visible regions.
  drupal_alter('node_level_blocks_regions', $block_regions, $context);

  // Weights range from -delta to +delta, so delta should be at least half
  // of the amount of blocks present. This makes sure all blocks in the same
  // region get an unique weight.
  $weight_delta = round(count($blocks) / 2);

  $form['blocks'] = array(
    '#theme' => 'node_level_blocks_fieldset',
    '#settings' => $settings,
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'block') . '/block.css',
      ),
      'js' => array(
        'misc/tableheader.js',
        drupal_get_path('module', 'block') . '/block.js',
        drupal_get_path('module', 'node_level_blocks') . '/js/node_level_blocks.js',
      ),
    ),
  );

  foreach ($block_regions as $region => $title) {
    drupal_add_tabledrag('blocks', 'match', 'sibling', 'block-region-select', 'block-region-' . $region, NULL, FALSE);
    drupal_add_tabledrag('blocks', 'order', 'sibling', 'block-weight', 'block-weight-' . $region);
  }

  foreach ($blocks as $i => $block) {
    $key = $block['module'] . '_' . $block['delta'];
    $form['blocks'][$key]['module'] = array(
      '#type' => 'value',
      '#value' => $block['module'],
    );
    $form['blocks'][$key]['bid'] = array(
      '#type' => 'value',
      '#value' => $block['bid'],
    );
    $form['blocks'][$key]['delta'] = array(
      '#type' => 'value',
      '#value' => $block['delta'],
    );
    $form['blocks'][$key]['info'] = array(
      '#markup' => check_plain($block['info']),
    );
    $form['blocks'][$key]['theme'] = array(
      '#type' => 'hidden',
      '#value' => $theme_key,
    );
    $form['blocks'][$key]['weight'] = array(
      '#type' => 'weight',
      '#default_value' => $block['weight'],
      '#delta' => $weight_delta,
    );
    $form['blocks'][$key]['region'] = array(
      '#type' => 'select',
      '#default_value' => (isset($node_blocks[$block['bid']]) ? $node_blocks[$block['bid']]->region : BLOCK_REGION_NONE),
      '#options' => $block_regions,
    );

    if (!empty($block['nlb_force_region'])) {
      if (!user_access('edit all node_level_blocks')) {
        $region = is_string($block['nlb_force_region']) && isset($block_regions[$block['nlb_force_region']]) ?
            $block['nlb_force_region'] :
            $form['blocks'][$key]['region']['#default_value'];

        // Force this region here.
        $form['blocks'][$key]['region']['#options'] = array_intersect_key($block_regions, array($region => 1));
        $form['blocks'][$key]['region']['#value'] = $form['blocks'][$key]['region']['#default_value'] = $region;

        // Hide the dropdown and add explanation.
        $form['blocks'][$key]['region']['#attributes']['style'] = 'display: none';
        $form['blocks'][$key]['region']['#suffix'] = t('Fixed in region %region', array('%region' => $block_regions[$region]));
      }
    }
  }
}

/**
 * Helper function for sorting blocks on admin/build/block.
 *
 * Active blocks are sorted by region, then by weight.
 * Disabled blocks are sorted by name.
 */
function _node_level_blocks_compare($a, $b) {
  // Sort by weight.
  if ($a['weight'] != $b['weight']) {
    return $a['weight'] - $b['weight'];
  }
  // Sort by title.
  return strcmp($a['info'], $b['info']);
}
