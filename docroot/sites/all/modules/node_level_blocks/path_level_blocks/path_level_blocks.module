<?php

/**
 * @file
 * Allows site maintainers to assign blocks to regions on a path base.
 *
 * @name Path-level Blocks
 */

/**
 * Implements hook_menu().
 */
function path_level_blocks_menu() {
  $items = array();
  $items['admin/structure/path-level-blocks'] = array(
    'title' => 'Path level blocks',
    'description' => 'Assign blocks to regions on a path base',
    'page callback' => 'path_level_blocks_overview',
    'file' => 'includes/path_level_blocks.admin.inc',
    'access arguments' => array('administer path level blocks'),
  );
  $items['admin/structure/path-level-blocks/add'] = array(
    'title' => 'Add a new path level block',
    'description' => 'Add a new path level block setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_level_blocks_form', 'add'),
    'file' => 'includes/path_level_blocks.admin.inc',
    'access arguments' => array('administer path level blocks'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/structure/path-level-blocks/edit/%'] = array(
    'title' => 'Modify a path level block',
    'description' => 'Modify a path level block setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_level_blocks_form', 'edit', 4),
    'file' => 'includes/path_level_blocks.admin.inc',
    'access arguments' => array('administer path level blocks'),
  );
  $items['admin/structure/path-level-blocks/delete/%'] = array(
    'title' => 'Delete a path level block',
    'description' => 'Delete a path level block setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_level_blocks_delete_form', 4),
    'file' => 'includes/path_level_blocks.admin.inc',
    'access arguments' => array('administer path level blocks'),
  );

  $items['admin/config/administration/path-level-blocks'] = array(
    'title' => 'Path-level blocks settings',
    'description' => 'Settings for the path-level blocks module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_level_blocks_settings_form'),
    'file' => 'includes/path_level_blocks.admin.inc',
    'access arguments' => array('administer path level blocks configuration'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function path_level_blocks_permission() {
  return array(
    'administer path level blocks' => array(
      'title' => t('Administer path level blocks'),
      'description' => t('Allows a user to assign blocks to regions on a path base.'),
    ),
    'administer path level configuration' => array(
      'title' => t('Administer path level blocks configuration'),
      'description' => t('Allows a user to change the path level blocks configuration.'),
    ),
  );
}

/**
 * Implements hook_block_list_alter().
 */
function path_level_blocks_block_list_alter(&$block_list) {
  global $theme;

  $default_theme = variable_get('theme_default', 'garland');
  if ($default_theme != $theme) {
    return;
  }

  $plbs = _path_level_blocks_settings();
  foreach ($plbs as $plb) {
    $plb->multi = variable_get('path_level_blocks_multi', FALSE);

    // Match paths for the set patterns.
    $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
    $page_match = drupal_match_path($path, $plb->paths);
    if ($path != $_GET['q']) {
      $page_match = $page_match || drupal_match_path($_GET['q'], $plb->paths);
    }
    if ($page_match) {
      $blocks = _path_level_blocks_blocks($plb->plbid);
      _node_level_blocks_set_blocks($block_list, $blocks, $plb);
    }
  }
}

/**
 * Helper function to return all path level block settings.
 */
function _path_level_blocks_settings() {
  $plbs = &drupal_static(__FUNCTION__, NULL);
  if (!$plbs) {
    $plbs = db_select('path_level_blocks_settings', 'plbs')
      ->fields('plbs')
      ->execute()->fetchAllAssoc('plbid');
  }
  return $plbs;
}

/**
 * Helper function to return all path level block settings.
 */
function _path_level_blocks_blocks($plbid) {
  $plbs = &drupal_static(__FUNCTION__, NULL);
  if (!isset($plbs[$plbid])) {
    $query = db_select('path_level_blocks', 'plb')
      ->fields('plb', array('bid', 'region', 'weight'))
      ->condition('plbid', $plbid);
    $query->join('block', 'b', 'plb.bid = b.bid');
    $query->fields('b', array('module', 'delta', 'cache', 'title'));

    $plbs[$plbid] = $query->execute()->fetchAllAssoc('bid');
  }
  return $plbs[$plbid];
}
