<?php

/**
 * @file
 * Test for query_coder module.
 */

class QueryCoderTestCase extends DrupalWebTestCase {
  /**
   * Set up test case.
   */
  public function setUp() {
    parent::setUp('query_coder');
  }
}

/**
 * Query coder test.
 */
class QueryCoderSelectQueriesTestCase extends QueryCoderTestCase {
  /**
   * Get info method implementation.
   */
  public static function getInfo() {
    return array(
      'name' => 'Query coder SELECT queries test',
      'description' => 'Test set for SELECT queries.',
      'group' => 'Query coder',
    );
  }

  public $queries = array(
    array(
      'title' => 'Simple query with one WHERE condition',
      'query' => 'SELECT * FROM node n WHERE n.nid > 10',
      'expected_strings' => array(
        '$query = db_select(\'node\', \'n\');',
        '$query->fields(\'n\');',
        '$query->condition(\'n.nid\', 10, \'>\');',
        '$result = $query->execute();',
      ),
    ),
    array(
      'title' => 'Simple query with LIKE condition, multiple fields, multiple conditions',
      'query' => 'SELECT n.title, n.status FROM node n WHERE n.nid > 10 AND n.title LIKE \'Query test%\'',
      'expected_strings' => array(
        '$query = db_select(\'node\', \'n\');',
        '$query->fields(\'n\', array(\'title\', \'status\'));',
        '$query->condition(\'n.nid\', 10, \'>\');',
        '$query->condition(\'n.title\', \'Query test%\', \'LIKE\');',
        '$result = $query->execute();',
      ),
    ),
    array(
      'title' => 'Simple query with inner join, OR condition',
      'query' => 'SELECT n.title FROM node n INNER JOIN users u ON u.uid = n.uid WHERE n.uid = 1 OR n.uid = 2',
      'expected_strings' => array(
        '$query = db_select(\'node\', \'n\');',
        '$query->fields(\'n\', array(\'title\'));',
        '$query->innerJoin(\'users\', \'u\', \'u.uid = n.uid\');',
        '$or = db_or();',
        '$or->condition(\'n.uid\', 1);',
        '$or->condition(\'n.uid\', 2);',
        '$query->condition($or);',
        '$result = $query->execute();',
      ),
    ),
    array(
      'title' => 'Simple query with inner join and subquery',
      'query' => 'SELECT n.title FROM node n INNER JOIN users u ON u.uid = n.uid WHERE n.uid IN (SELECT ur.uid FROM users_roles ur WHERE ur.rid IN (1, 2))',
      'expected_strings' => array(
        '$query = db_select(\'node\', \'n\');',
        '$query->fields(\'n\', array(\'title\'));',
        '$query->innerJoin(\'users\', \'u\', \'u.uid = n.uid\');',
        '$subquery = db_select(\'users_roles\', \'ur\');',
        '$subquery->fields(\'ur\', array(\'uid\'));',
        '$subquery->condition(\'ur.rid\', array(1, 2), \'IN\');',
        '$query->condition(\'n.uid\', $subquery, \'IN\');',
        '$result = $query->execute();',
      ),
    ),
    array(
      'title' => 'Complex query with BETWEEN statemant',
      'query' => 'SELECT n.nid FROM node n LEFT JOIN field_data_field_video_id fp ON fp.entity_id = n.nid INNER JOIN nodequeue_nodes nn ON nn.nid = n.nid INNER JOIN field_data_field_top_queue fq ON fq.field_top_queue_value = nn.qid WHERE fp.field_video_id_value BETWEEN $min AND $max AND fq.entity_id = $nid ORDER BY nn.position LIMIT 1',
      'expected_strings' => array(
        '$placeholder_1 = array($min, $max);',
        '$query = db_select(\'node\', \'n\');',
        '$query->fields(\'n\', array(\'nid\'));',
        '$query->leftJoin(\'field_data_field_video_id\', \'fp\', \'fp.entity_id = n.nid\');',
        '$query->innerJoin(\'nodequeue_nodes\', \'nn\', \'nn.nid = n.nid\');',
        '$query->innerJoin(\'field_data_field_top_queue\', \'fq\', \'fq.field_top_queue_value = nn.qid\');',
        '$query->condition(\'fp.field_video_id_value\', $placeholder_1, \'BETWEEN\');',
        '$query->condition(\'fq.entity_id\', $nid);',
        '$query->orderBy(\'nn.position\', \'ASC\');',
        '$query->range(0, 1);',
        '$result = $query->execute();',
      ),
    ),
    array(
      'title' => 'INSERT query',
      'query' => 'INSERT INTO node (title, uid) VALUES (\'Title of new node\', 1)',
      'expected_strings' => array(
        'db_insert(\'node\')',
        '->fields(array(',
        '\'title\' => \'Title of new node\',',
        '\'uid\' => 1,',
        '))',
        '->execute();',
      ),
    ),
    array(
      'title' => 'UPDATE query',
      'query' => 'UPDATE node SET title = \'Updated title\', changed = 123 WHERE uid = 5',
      'expected_strings' => array(
        '$query = db_update(\'node\');',
        '$query->fields(array(',
        '\'title\' => \'Updated title\',',
        '\'changed\' => 123,',
        '));',
        '$query->condition(\'uid\', 5);',
        '$num_updated = $query->execute();',
      ),
    ),
    array(
      'title' => 'UPDATE query with complex condition',
      'query' => 'UPDATE users SET u.name = \'Updated\' WHERE uid = 10 OR name = \'current user\' AND uid = 2 OR uid = 50',
      'expected_strings' => array(
        '$query = db_update(\'users\');',
        '$query->fields(array(',
        '\'u.name\' => \'Updated\',',
        '));',
        '$or = db_or();',
        '$or->condition(\'uid\', 10);',
        '$or->condition(\'name\', \'current user\');',
        '$query->condition($or);',
        '$or_1 = db_or();',
        '$or_1->condition(\'uid\', 2);',
        '$or_1->condition(\'uid\', 50);',
        '$or->condition($or_1);',
        '$num_updated = $query->execute();',
      ),
    ),
    array(
      'title' => 'DELETE query',
      'query' => 'DELETE FROM node WHERE uid = 5 AND nid > 10',
      'expected_strings' => array(
        '$query = db_delete(\'node\');',
        '$query->condition(\'uid\', 5);',
        '$query->condition(\'nid\', 10, \'>\');',
        '$num_deleted = $query->execute();',
      ),
    ),
    array(
      'title' => 'DELETE query with complex conditions',
      'query' => 'DELETE FROM node WHERE (nid > 50 AND nid <> 55 AND nid <> 60) OR (title LIKE \'Need delete\')',
      'expected_strings' => array(
        '$query = db_delete(\'node\');',
        '$or = db_or();',
        '$or->condition(\'nid\', 50, \'>\');',
        '$or->condition(\'nid\', 55, \'<>\');',
        '$or->condition(\'nid\', 60, \'<>\');',
        '$or->condition(\'title\', \'Need delete\', \'LIKE\');',
        '$query->condition($or);',
        '$num_deleted = $query->execute();',
      ),
    ),
  );

  /**
   * Test queries.
   */
  public function testQueries() {
    $i = 1;
    foreach ($this->queries as $cur_query) {
      $query = $cur_query['query'];
      $this->pass('--- ' . $cur_query['title'] . ' ---', 'Query ' . $i);
      $this->pass('Start testing query: "' . $query . '"', 'Query ' . $i);
      $output = query_coder_parse_query($query);
      $expected_strings = $cur_query['expected_strings'];
      foreach ($expected_strings as $expected_string) {
        $this->assertTrue(strpos($output, $expected_string), 'Expected string: ' . $expected_string, 'Query ' . $i);
      }
      $i++;
    }
  }
}
