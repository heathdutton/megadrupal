<?php
/**
 * @file
 * This module creates a numeric interval field.
 *
 *
 * @author Kálmán Hosszu http://drupal.org/user/267481
 */

// Module constants.
define('NUMERIC_INTERVAL_DEFAULT_FIELD_SIZE', 10);
define('NUMERIC_INTERVAL_DEFAULT_START_LABEL', 'Start');
define('NUMERIC_INTERVAL_DEFAULT_END_LABEL', 'End');

/* ====================== */
/* ==== DRUPAL HOOKS ==== */
/* ====================== */


/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function numeric_interval_field_info() {
  return array(
    'numeric_interval' => array(
      'label' => t('Numeric interval'),
      'description' => t('Handling numeric intervals.'),
      'default_widget' => 'numeric_interval_textfields',
      'default_formatter' => 'numeric_interval_hyphen',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function numeric_interval_field_formatter_info() {
  return array(
    'numeric_interval_hyphen' => array(
      'label' => t('Hypen between the numbers'),
      'field types' => array('numeric_interval'),
    ),
    'numeric_interval_brackets' => array(
      'label' => t('Show numbers like above mathematical brackets'),
      'field types' => array('numeric_interval'),
    ),
    'numeric_interval_custom' => array(
      'label' => t('Show numbers with custom format'),
      'field types' => array('numeric_interval'),
      'settings' => array(
        'prefix' => '',
        'between' => '-',
        'suffix' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Creates custom formatter settings form.
 */
function numeric_interval_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'numeric_interval_custom') {
    $form['prefix'] = array(
      '#type' => 'textfield',
      '#title' => t('Prefix'),
      '#default_value' => $settings['prefix'],
    );
    $form['between'] = array(
      '#type' => 'textfield',
      '#title' => t('Between'),
      '#default_value' => $settings['between'],
    );
    $form['suffix'] = array(
      '#type' => 'textfield',
      '#title' => t('Suffix'),
      '#default_value' => $settings['suffix'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Shows custom formatter's settings.
 */
function numeric_interval_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();
  if ($display['type'] == 'numeric_interval_custom') {
    if ($settings['prefix']) {
      $summary[] = t("The field's prefix is: @prefix", array('@prefix' => $settings['prefix']));
    }
    if ($settings['between']) {
      $summary[] = t('This will show between the two values: @between', array('@between' => $settings['between']));
    }
    if ($settings['suffix']) {
      $summary[] = t("The field's suffix is: @suffix", array('@suffix' => $settings['suffix']));
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_widget_info().
 *
 * Two widgets are provided.
 * - A 2-textfield widget that gathers from and to.
 * - JavaScript slider widget what creates a fancy ui to add interval.
 */
function numeric_interval_field_widget_info() {
  return array(
    'numeric_interval_textfields' => array(
      'label' => t('Textfields'),
      'field types' => array('numeric_interval'),
    ),
    'numeric_interval_slider' => array(
      'label' => t('Slider'),
      'field types' => array('numeric_interval'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function numeric_interval_field_settings_form($field, $instance, $has_data) {
  $form = array();

  $form['min'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimul value'),
    '#description' => t('The minim value of the interval.'),
    '#default_value' => isset($field['settings']['min']) ? $field['settings']['min'] : NULL,
  );
  $form['max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum value'),
    '#description' => t('The maximum value of the interval.'),
    '#default_value' => isset($field['settings']['max']) ? $field['settings']['max'] : NULL,
  );

  $form['start_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Start label'),
    '#description' => t('The label of the first input field.'),
    '#default_value' => isset($field['settings']['start_label']) ?
      $field['settings']['start_label'] : NUMERIC_INTERVAL_DEFAULT_START_LABEL,
  );
  $form['end_label'] = array(
    '#type' => 'textfield',
    '#title' => t('End label'),
    '#description' => t('The label of the second input field.'),
    '#default_value' => isset($field['settings']['end_label']) ?
      $field['settings']['end_label'] : NUMERIC_INTERVAL_DEFAULT_END_LABEL,
  );

  $form['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size'),
    '#description' => t('The size of the field in the admin interface.'),
    '#default_value' => isset($field['settings']['size']) ?
      $field['settings']['size'] : NUMERIC_INTERVAL_DEFAULT_FIELD_SIZE,
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function numeric_interval_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value1 = isset($items[$delta]['val1']) ? $items[$delta]['val1'] : '';
  $value2 = isset($items[$delta]['val2']) ? $items[$delta]['val2'] : '';

  $element += array(
    '#type' => 'fieldset',
    '#element_validate' => array('numeric_interval_field_element_validate'),
    '#delta' => $delta,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'numeric_interval') . '/numeric_interval.css'),
    ),
  );

  if ($instance['widget']['type'] == 'numeric_interval_slider') {
    // Add slider library.
    $element['#attached']['library'] = array(
      array('system', 'ui.slider'),
    );
    // Add javascript to trigger the slider.
    $element['#attached']['js'] = array(drupal_get_path('module', 'numeric_interval') . '/numeric_interval.js');
  }

  $element['val1'] = array(
    '#type' => 'textfield',
    '#default_value' => $value1,
    '#title' => isset($field['settings']['start_label']) ?
      $field['settings']['start_label'] : NUMERIC_INTERVAL_DEFAULT_START_LABEL,
    '#size' => isset($field['settings']['size']) ?
      $field['settings']['size'] : NUMERIC_INTERVAL_DEFAULT_FIELD_SIZE,
    '#attributes' => array('class' => array('edit-field-numeric-interval')),
  );
  $element['val2'] = array(
    '#type' => 'textfield',
    '#default_value' => $value2,
    '#title' => isset($field['settings']['end_label']) ?
      $field['settings']['end_label'] : NUMERIC_INTERVAL_DEFAULT_END_LABEL,
    '#size' => isset($field['settings']['size']) ?
      $field['settings']['size'] : NUMERIC_INTERVAL_DEFAULT_FIELD_SIZE,
    '#attributes' => array('class' => array('edit-field-numeric-interval')),
  );

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function numeric_interval_field_is_empty($item, $field) {
  return ((empty($item['val1']) && $item['val1'] != '0') && (empty($item['val2']) && $item['val2'] != '0'));
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - numeric_interval_hyphen
 * - numeric_interval_brackets
 */
function numeric_interval_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'numeric_interval_hyphen':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = $item['val1'] . '-' . $item['val2'];
      }
      break;

    case 'numeric_interval_brackets':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = '[' . $item['val1'] . ',' . $item['val2'] . ']';
      }
      break;

    case 'numeric_interval_custom':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'numeric_interval_custom_formatter',
          '#pre' => $display['settings']['prefix'],
          '#between' => $display['settings']['between'],
          '#suff' => $display['settings']['suffix'],
          '#val1' => $item['val1'],
          '#val2' => $item['val2'],
        );
      }
      break;
  }

  return $element;
}

/**
 * Implementation of hook_theme().
 *
 * @see numeric_interval-custom-formatter.tpl.php
 */
function numeric_interval_theme($existing, $type, $theme, $path) {
  return array(
    'numeric_interval_custom_formatter' => array(
      'variables' => array(
        'pre' => '',
        'between' => '',
        'suff' => '',
        'val1' => 0,
        'val2' => 0,
      ),
      'template' => 'numeric_interval-custom-formatter',
    ),
  );
}

/* ====================== */
/* == MODULE FUNCTIONS == */
/* ====================== */

/**
 * Element validate function for the individual fields.
 * @todo Loose element title in unlimited fields.
 */
function numeric_interval_field_element_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];

  $first_field_empty = (empty($form_state['values'][$field_name][$element['#language']][$delta]['val1']) && ($form_state['values'][$field_name][$element['#language']][$delta]['val1'] !== '0'));
  $second_field_empty = (empty($form_state['values'][$field_name][$element['#language']][$delta]['val2']) && ($form_state['values'][$field_name][$element['#language']][$delta]['val2'] != '0'));

  if (($first_field_empty && !$second_field_empty) || (!$first_field_empty && $second_field_empty)) {
    form_error($element, t('Both field must be filled in field "@field_name".', array('@field_name' => $element['#title'])));
  }

  if (!$first_field_empty && !$second_field_empty) {
    if (!is_numeric($form_state['values'][$field_name][$element['#language']][$delta]['val1']) || !is_numeric($form_state['values'][$field_name][$element['#language']][$delta]['val2'])) {
      if (!is_numeric($form_state['values'][$field_name][$element['#language']][$delta]['val1'])) {
        form_error($element['val1'], t('Both field must be a number in field "@field_name".', array('@field_name' => $element['#title'])));
      }
      if (!is_numeric($form_state['values'][$field_name][$element['#language']][$delta]['val2'])) {
        form_error($element['val2'], t('Both field must be a number in field "@field_name".', array('@field_name' => $element['#title'])));
      }
    }
    elseif ($form_state['values'][$field_name][$element['#language']][$delta]['val1'] > $form_state['values'][$field_name][$element['#language']][$delta]['val2']) {
      form_error($element, t('Second field must be bigger than the first in field "@field_name".', array('@field_name' => $element['#title'])));
    }
    elseif ($field['settings']['min'] && $form_state['values'][$field_name][$element['#language']][$delta]['val1'] < $field['settings']['min']) {
      form_error($element['val1'], t('The minimum value of "@field_name" must be greater than @min!', array('@field_name' => $element['#title'], '@min' => $field['settings']['min'])));
    }
    elseif ($field['settings']['max'] && $form_state['values'][$field_name][$element['#language']][$delta]['val2'] > $field['settings']['max']) {
      form_error($element['val2'], t('The minimum value of "@field_name" must be less than @max!', array('@field_name' => $element['#title'], '@max' => $field['settings']['max'])));
    }
  }
}