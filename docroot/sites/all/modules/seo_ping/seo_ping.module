<?php
/**
 * Implements hook_action_info().
 *
 * @see hook_action_info()
 */

function seo_ping_action_info() {
  return array(
    'seo_ping_node_ping' => array(
      'type' => 'node',
      'label' => t('Ping Services') ,
      'configurable' => TRUE,
      'behavior' => array(
        'changes_property'
      ) ,
      'triggers' => array(
        'node_presave',
        'node_insert',
        'node_update'
      ) ,
    ) ,
  );
}
/**
 * Generates an array with node type machine name as key and the human
 * readable name as value
 *
 * @return array
 *   Node types options array.
 *
 * @see node_type_get_types()
 */

function _node_types_options() {
  $node_types = node_type_get_types();
  $nodes = array();
  
  foreach ($node_types as $type => $value) {
    $nodes[$type] = $value->name;
  }
  return $nodes;
}
/**
 * Generates settings form for seo_ping_node_ping().
 *
 * @param array $context
 *   An array of options of this action (in case it is being edited)
 *
 * @return array
 *   Settings form as Form API array.
 *
 * @see seo_ping_action_info()
 */

function seo_ping_node_ping_form($context) {
  $form['node_type'] = array(
    '#title' => t('Content Type') ,
    '#type' => 'select',
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#options' => _node_types_options() ,
    '#description' => t('Node type that will be pinged') ,
    '#default_value' => isset($context['node_type']) ? $context['node_type'] : '',
  );
  $form['ping_service'] = array(
    '#title' => t('Ping service url') ,
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 60,
    '#description' => t('The RPC url of the remote service, http included') ,
    '#default_value' => isset($context['ping_service']) ? $context['ping_service'] : '',
  );
  $form['ping_port'] = array(
    '#title' => t('Ping service port') ,
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 6,
    '#description' => t('The RPC server port') ,
    '#default_value' => isset($context['ping_port']) ? $context['ping_port'] : 80,
  );
  $form['ping_method'] = array(
    '#title' => t('Ping service url') ,
    '#type' => 'textfield',
    '#required' => TRUE,
    '#description' => t('Write the RPC data method. Usualy : weblogUpdates.ping') ,
    '#default_value' => isset($context['ping_method']) ? $context['ping_method'] : 'weblogUpdates.ping',
  );
  $form['ping_parameters'] = array(
    '#type' => 'textarea',
    '#title' => t('Parameters') ,
    '#description' => t('Write the list of parameters you want to send. Each line is a parameter, format : label=parameter value.<br /> Please consult your ping service instructions in order to choose the right fields') ,
    '#token_insert' => TRUE,
    '#default_value' => isset($context['ping_parameters']) ? _format_text_parameters($context['ping_parameters']) : '',
  );
  
  if (module_exists('token')) {
    $form['token_help'] = array(
      '#theme' => 'token_tree_link',
      '#token_types' => array(
        'node'
      ) ,
    );
  }
  return $form;
}
/**
 * Validates settings form for seo_ping_node_ping_form().
 *
 */

function seo_ping_node_ping_validate($form, $form_state) {
  
  if ($form_state['values']['ping_port'] != '' && !is_numeric($form_state['values']['ping_port'])) {
    form_set_error('ping_port', t('Ping Port must be a number.'));
  }
  
  if (valid_url($form_state['values']['ping_service'], TRUE) != TRUE) {
    form_set_error('ping_service', t('Ping Service must be a valid URL.'));
  }
}
/**
 * Submit handler for seo_ping_node_ping.
 *
 * Returns an associative array of values which will be available in the
 * $context when an action is executed.
 */

function seo_ping_node_ping_submit($form, $form_state) {
  return array(
    'node_type' => $form_state['values']['node_type'],
    'ping_service' => $form_state['values']['ping_service'],
    'ping_method' => $form_state['values']['ping_method'],
    'ping_port' => $form_state['values']['ping_port'],
    'ping_parameters' => _format_array_parameters($form_state['values']['ping_parameters']) ,
  );
}
/**
 * Action function for seo_ping_node_ping.
 * @param object $node
 *   A node object provided by the associated trigger.
 * @param array $context
 *   Array with the following elements:
 *   - 'author': username of the author's content this function will promote and
 *     set as sticky.
 */

function seo_ping_node_ping($node, $context) {
  
  if (in_array($node->type, array_keys($context['node_type']))) {
    $parameters = array();
    
    if ($context['ping_parameters']) {
      
      foreach ($context['ping_parameters'] as $key => $value) {
        $parameters[$key] = token_replace($value, array(
          'node' => $node
        ));
      }
    }
    $call = xmlrpc($context['ping_service'] . ':' . $context['ping_port'], array(
      $context['ping_method'] => $parameters
    ));
    
    if ($call['flerror'] != 'false') {
      drupal_set_message(t('@node successfully sent to @service', array(
        '@node' => $node->title,
        '@service' => $context['ping_service']
      )) , 'status');
      drupal_set_message($call['message'], 'status');
    }
    else {
      drupal_set_message(t('@node Could not sent to @service', array(
        '@node' => $node->title,
        '@service' => $context['ping_service']
      )) , 'warning');
      drupal_set_message($call['message'], 'warning');
    }
  }
}
/**
 * Formatter function that explodes the parameters from
 * textarea field.
 *
 * @param string $parameters
 *   String from texarea field.
 *
 * Returns an associative array of parameters values
 */

function _format_array_parameters($parameters) {
  $parameters = explode("\n", $parameters);
  $result = array();
  
  foreach ($parameters as $parameter) {
    $parameter = preg_replace('/\s+/', '', $parameter);
    preg_match_all("/([^,= ]+)=([^,= ]+)/", $parameter, $r);
    $result+= array_combine($r[1], $r[2]);
  }
  return $result;
}
/**
 * Formatter function that implodes the parameters from
 * textarea field.(the opposite of _format_array_parameters()).
 *
 * @param array $parameters
 *   array with parameters.
 *
 * Returns a string splited with new lines and in acceptable
 * as defined at form.
 * see @ seo_ping_node_ping_form ().
 */

function _format_text_parameters($parameters) {
  $result = implode("\n", array_map(
  function ($v, $k) {
    return sprintf("%s=%s", $k, $v);
  }
  , $parameters, array_keys($parameters)));
  return $result;
}
