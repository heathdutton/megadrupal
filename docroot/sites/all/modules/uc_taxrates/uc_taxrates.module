<?php

/**
 * @file
 * Calculate Sales Tax using TaxRates service from TaxRates.com
 *
 * Copyright (C) Alexander Bischoff, adTumbler.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 */

/**
 * Implements hook_permission().
 */
function uc_taxrates_permission() {
  return array(
    'administer taxrates' => array(
      'title' => t('Administer TaxRates'),
      'description' => t('Allows users to configure TaxRates'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Calculate sales using hook_taxrates_uc_calculate_tax.
 */
function uc_taxrates_uc_calculate_tax($order) {
  if (!isset($_SESSION)) session_start();

  // block duplicate hook_uc_calculate_tax calls during checkout ajax requests
  $url_components = explode('/', request_uri());
  if  ($url_components[2] == 'ajax') {
    if (isset($_SESSION['tax_data'])) {
      if ((microtime(TRUE) - $_SESSION['microtime']) <= 48) {
        $tax_data = $_SESSION['tax_data'];
        $uc_tax_ret = uc_taxrates_result($tax_data);
        return $uc_tax_ret;
      }
    }
  }

  // block duplicate hook_uc_calculate_tax calls during checkout
  if  ($url_components[1] == 'cart') {
    if (isset($_SESSION['tax_data'])) {
      if ((microtime(TRUE) - $_SESSION['microtime']) <= 48) {
        $tax_data = $_SESSION['tax_data'];
        $uc_tax_ret = uc_taxrates_result($tax_data);
        return $uc_tax_ret;
      }
    }
  }

  // block duplicate hook_uc_calculate_tax calls during edit order
  if (arg(0) == 'admin' && arg(1) == 'store' && arg(2) == 'orders' && is_numeric(arg(3)) && arg(4) == 'edit' ) {
    if (isset($_SESSION['tax_data'])) {
      if ((microtime(TRUE) - $_SESSION['microtime']) <= 48) {
        $tax_data = $_SESSION['tax_data'];
        $uc_tax_ret = uc_taxrates_result($tax_data);
        return $uc_tax_ret;
      }
    }
  }

  // block duplicate hook_uc_calculate_tax calls when updating order status
  if (arg(0) == 'admin' && arg(1) == 'store' && arg(2) == 'orders' && is_numeric(arg(3)) && arg(4) != 'edit' ) {
    return array();
  }

  // Retrieve tax if there is a complete address with valid state 
  if (uc_taxrates_check_address($order)) {
    $_SESSION['microtime'] = microtime(TRUE);
    $tax_data = uc_taxrates_retrieve_sales_tax($order);
    $_SESSION['tax_data'] = $tax_data;
  }
  else {
    return array();
  }
  
  // If we have a sales tax amount.
  if ($tax_data) {
    // Return sales tax calculated as zero
    if ($tax_data['tax_amount'] == 0) {
      $taxrates_show_zero = variable_get('uc_taxrates_show_zero', '');
      if($taxrates_show_zero == 1) {
        $uc_tax_ret = uc_taxrates_result($tax_data);
        return $uc_tax_ret;
      }
      else {
        return array();
      }
    }
    // Construct and return sales tax array
    else {
      $uc_tax_ret = uc_taxrates_result($tax_data);
      return $uc_tax_ret;      
    }
  }
  else {
    drupal_set_message(t('TaxRates did not calculate sales tax'), 'error');
    return array();
  }
}

/**
 * TaxRates service: returns the sales tax amount as an array.
 *
 * @param object $order
 *   The order object on which sales tax is to be calculated.
 *
 * @return array
 *   The TaxRates sales tax values as an array.
 */
function uc_taxrates_retrieve_sales_tax($order, $commit = FALSE) {
  global $user;

  if (is_numeric($order)) {
    $order = uc_order_load($order);
  }

  if (!is_object($order)) {
    return array();
  }

  // Get delivery info out
  $tax_address_profile = variable_get('uc_taxrates_tax_address', '');
  if ($tax_address_profile == 'Billing') {
    $street1 = $order->billing_street1;
    $street2 = $order->billing_street2;
    $city = $order->billing_city;
    $zone = $order->billing_zone;
    $country_code = $order->billing_country;
    $zip = $order->billing_postal_code;
  }
  elseif ($tax_address_profile == 'Shipping') {
    $street1 = $order->delivery_street1;
    $street2 = $order->delivery_street2;
    $city = $order->delivery_city;
    $zone = $order->delivery_zone;
    $country_code = $order->delivery_country;
    $zip = $order->delivery_postal_code;
  }

  // Convert State Code to State Abbreviation
  $state = uc_get_zone_code($zone);

  if (!variable_get('uc_taxrates_select_states', array())) {
    drupal_set_message(t('Please select at least one state in which to calculate sales tax!'), 'error');
  }

  // Construct tax table date
  $tax_table_year = variable_get('uc_taxrates_tax_table_year', '');
  $tax_table_month = variable_get('uc_taxrates_tax_table_month', '');

  $tax_table_date = t('' . $tax_table_year . '' . $tax_table_month . '');

  $module_dir = dirname(__FILE__);

  // Construct arguments for TaxRates functions
  $ava_args = compact('tax_table_date', 'module_dir', 'street1', 'street2', 'city', 'state', 'country', 'zip');

  module_load_include('inc', 'uc_taxrates', 'includes/uc_taxrates_calc');

  // Get sales tax from TaxRates tables
  $tax_data = uc_taxrates_get_tax($order, $ava_args);

  // Check that there was a response from TaxRates
  if (!$tax_data) {
    return FALSE;
  }
  else {
    $tax_data['city'] = $city;
    return $tax_data;
  }
}

/**
 * Determine whether we should calculate tax for this order or not.
 */
function uc_taxrates_check_address($order) {
  $tax_address_profile = variable_get('uc_taxrates_tax_address', '');
  // Get delivery info out
  if ($tax_address_profile == 'Billing') {
    $street1 = $order->billing_street1;
    $street2 = $order->billing_street2;
    $city = $order->billing_city;
    $zone = $order->billing_zone;
    $country_code = $order->billing_country;
    $zip = $order->billing_postal_code;
  }
  elseif ($tax_address_profile == 'Shipping') {
    $street1 = $order->delivery_street1;
    $street2 = $order->delivery_street2;
    $city = $order->delivery_city;
    $zone = $order->delivery_zone;
    $country_code = $order->delivery_country;
    $zip = $order->delivery_postal_code;
  }

  // exit if address is incomplete
  if ( !$street1 || !$city || !$zone || !$zip ) {
    return FALSE;
  }

  // Convert State Code to State Abbreviation
  $state = uc_get_zone_code($zone);

  // Exit if delivery address state is not in list of active states.
  $taxrates_states = variable_get('uc_taxrates_select_states', array());
  if (!empty($taxrates_states) && !in_array($state, $taxrates_states)) {
    return FALSE;
  }
  return TRUE;
}

// Construct sales tax return for uc_tax
function uc_taxrates_result($tax_data){
  // Populate sales tax return defaults
  $taxrates = array();
  $tax_title = (variable_get('uc_taxrates_tax_description', ''));
  $namesuf = '';                                          
  $loccode = '';
                                                          
  // Initialize sales tax return array
  $ret = array();                                         
  $ret = (object) array(                                  
    'id' => uc_taxrates_get_safe_id(),                  
    'name' => t(''  . $tax_title . '') . $namesuf,        
    'amount' => $tax_data['tax_amount'],                  
    'weight' => 0,                                        
    'summed' => 1,                                        
    );                                                    
                                                          
  // Calculate tax rate based on tax and taxable amount
  if ($tax_data['taxable_amount'] == 0) {
    $tax_rate = 0;
  }
  else {
    $tax_rate = round(($tax_data['tax_amount'] / $tax_data['taxable_amount']), 4);
  }

  $loccode = $tax_data['city'];
  if ($loccode && variable_get('uc_taxrates_show_loc', '')) {
    $namesuf = ' (' . $loccode . ')';
  }

  $ret = (object) array(
    'id' => uc_taxrates_get_safe_id(),
    'name' => t(''  . $tax_title . '') . $namesuf,
    'amount' => $tax_data['tax_amount'],
    'weight' => 0,
    'summed' => 1,
    );

  $ret->data = array(
    'tax_id' => $ret->id,
    'tax_rate' => $tax_rate,
    'taxable_amount' => $tax_data['taxable_amount'],
    'tax_jurisdiction' => $loccode,
    );

  $taxrates[$ret->id] = $ret;
  return $taxrates;
}

/**
 * Returns a safe ID number to use for tax (larger than any in the tax module).
 *
 * Have to have a numeric ID for some of the preview stuff to work. Trust me.
 * Comes from some stuff in uc_taxes.js, interacting with some stuff in
 * uc_payment.js. Specifically, set_line_item() takes a key, which the tax
 * module sets to "tax_" . id value. Then the serializeOrder function sets the
 * line item type to be the part of key up to the _, but only if the part after
 * the _ is numeric. And the line item type does need to be set to 'tax' for
 * the preview part to work, because that's how the line item code knows it
 * is a tax.
 */
function uc_taxrates_get_safe_id() {
  $maxid = 1;
  $rates = uc_taxes_rate_load();
  foreach ($rates as $id => $info) {
    if ($id >= $maxid) {
      $maxid = $id;
    }
  }

  return $maxid + 99;
}
