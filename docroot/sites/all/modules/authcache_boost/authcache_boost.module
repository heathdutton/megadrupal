<?php
/**
 * @file
 * Authcache cache backend module for boost. EXPERIMENTAL!
 */

/**
 * Implements hook_module_implements_alter().
 */
function authcache_boost_module_implements_alter(&$implementations, $hook) {
  // No need for boosts init-hook, disable it.
  if ($hook === 'init') {
    unset($implementations['boost']);
  }

  // No need for boosts exit-hook, disable it. We call it later from
  // authcache_boost_cache_save
  if ($hook === 'exit') {
    unset($implementations['boost']);
  }

  // Turn off cache-exclusion of authenticated users. This is implemented in
  // boosts own implementation of hook_boost_is_cacheable.
  // see:
  // - boost_boost_is_cacheable().
  // - authcache_boost_is_cacheable().
  if ($hook === 'boost_is_cacheable') {
    unset($implementations['boost']);
  }

  // Turn off hook_expire_cache for boost.
  // see:
  // - boost_expire_cache().
  // - authcache_boost_expire_cache().
  if ($hook === 'expire_cache') {
    unset($implementations['boost']);
  }
}

/**
 * Implements hook_boot().
 */
function authcache_boost_boot() {
  if (isset($_COOKIE['authcache'])) {
    $initial_key = $_COOKIE['authcache'];
  }
  else {
    $initial_key = authcache_backend_anonymous_key();
  }

  $vary_header = variable_get('authcache_boost_vary', 'Cookie');
  authcache_backend_init('authcache_boost', $vary_header, $initial_key);
}

/**
 * Implements hook_init().
 */
function authcache_boost_init() {
  global $conf, $_boost;

  // Force boost_normal_dir.
  $authcache_key = authcache_key();
  $conf['boost_normal_dir'] = authcache_is_default_key($authcache_key) ? BOOST_NORMAL_DIR : $authcache_key;

  // Enforce addition of a vary-cookie directive into the .htaccess file within
  // the boost cache directory.
  $conf['boost_apache_vary_cookie'] = 1;

  if (authcache_page_is_cacheable()) {
    $_boost = boost_transform_url();
  }
  else {
    $_boost['cache_this'] = FALSE;
  }
}

/**
 * Implements hook_boost_is_cacheable().
 *
 * TODO remember reason using hook_authcache_excluded and
 * hook_authcache_canceled.
 */
function authcache_boost_is_cacheable($parts) {
  $parts['is_cacheable'] = authcache_page_is_cacheable();
  if (!$parts['is_cacheable']) {
    $parts['is_cacheable_reason'] = t('Disabled by authcache rules');
  }

  return $parts;
}

/**
 * Implements hook_authcache_backend_cache_save().
 */
function authcache_boost_authcache_backend_cache_save($body, $headers, $page_compressed) {
  // Cache and output.
  drupal_page_is_cacheable(TRUE);
  boost_exit();
  drupal_page_is_cacheable(FALSE);
}


/**
 * Implements hook_authcache_backend_key_set().
 */
function authcache_boost_authcache_backend_key_set($key, $lifetime, $has_session) {
  authcache_add_cookie(array(
    'authcache' => array(
      'present' => $has_session,
      'httponly' => TRUE,
      'value' => $key,
      'lifetime' => $lifetime,
    ),
  ));
}


/**
 * Return a list of cache directories based on authcache key variations.
 */
function authcache_boost_cache_dirs() {
  global $base_root;

  // Authcache keys for authenticated users.
  $cache_dirs = array_keys(authcache_enum_user_keys());

  // Authcache keys for anonymous users.
  $anonymous_keys = authcache_enum_anonymous_keys();
  $anonymous_keys_customized = ($anonymous_keys !== array($base_root));

  if (!$anonymous_keys_customized) {
    $cache_dirs[] = BOOST_NORMAL_DIR;
  }
  else {
    $cache_dirs = array_merge($cache_dirs, $anonymous_keys);
  }

  return $cache_dirs;
}


/**
 * Implements hook_expire_cache().
 */
function authcache_boost_expire_cache($urls) {
  global $conf;

  foreach (authcache_boost_cache_dirs() as $dir) {
    $conf['boost_normal_dir'] = $dir;
    boost_expire_cache($urls);
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function authcache_boost_form_boost_admin_filesystem_settings_alter(&$form, &$form_state) {
  $form['boost_normal_dir']['#disabled'] = TRUE;
  $form['boost_normal_dir']['#default_value'] = BOOST_NORMAL_DIR;
  $form['boost_normal_dir']['#description'] = t('Authcache Boost chooses the appropriate cache-directory based on the authcache-key currently in use. The following directories may be used: %keys',
    array('%keys' => implode(', ', authcache_boost_cache_dirs())));
}

/**
 * Implements hook_form_FORMI_ID_alter().
 *
 * Inject our own htaccess generator into the boost admin UI.
 */
function authcache_boost_form_boost_admin_htaccess_generation_alter(&$form, &$form_state) {
  $form['boost_generated']['#default_value'] = authcache_boost_admin_htaccess_generate_htaccess();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enforce vary-cookie
 */
function authcache_boost_form_boost_admin_htaccess_settings_alter(&$form, &$form_state) {
  $form['htaccess']['boost_apache_vary_cookie']['#disabled'] = TRUE;
  $form['htaccess']['boost_apache_vary_cookie']['#default_value'] = 1;
  $form['htaccess']['boost_apache_vary_cookie']['#description'] .= ' ' . t('The value of this setting is enforced by Authcache Boost');
}

/**
 * Implements hook_form_alter().
 *
 * Replace boost_form_submit_handler with authcache_boost_form_submit_handler
 */
function authcache_boost_form_alter(&$form, &$form_state) {
  $key = array_search('boost_form_submit_handler', $form['#submit']);
  if ($key !== FALSE) {
    $form['#submit'][$key] = 'authcache_boost_form_submit_handler';
  }
}

/**
 * Always run these functions after a form submit from boost.
 */
function authcache_boost_form_submit_handler() {
  register_shutdown_function('authcache_boost_htaccess_cache_dir_put');
}

/**
 * Overwrite old htaccess rules with new ones.
 */
function authcache_boost_htaccess_cache_dir_put() {
  global $conf, $_boost;

  foreach (authcache_boost_cache_dirs() as $dir) {
    unset($_boost['base_dir']);
    $conf['boost_normal_dir'] = $dir;
    boost_htaccess_cache_dir_put();
  }
}

/**
 * Generate htaccess code.
 *
 * http://www.askapache.com/htaccess/mod_rewrite-variables-cheatsheet.html
 *
 * @see: boost_admin_htaccess_generate_htaccess
 *
 * @return string
 *   htaccess code
 */
function authcache_boost_admin_htaccess_generate_htaccess() {
  global $base_path, $base_root;
  $server_name = variable_get('boost_server_name_http_host', BOOST_SERVER_NAME_HTTP_HOST);
  $document_root = variable_get('boost_document_root', BOOST_DOCUMENT_ROOT);

  // Various dir's.
  $cache_dir = variable_get('boost_root_cache_dir', BOOST_ROOT_CACHE_DIR);
  $char = variable_get('boost_char', BOOST_CHAR);

  // Go through every storage type getting the extesion and if it supports gzip.
  $enabled_file_extensions = array();
  $types = boost_get_storage_types();
  foreach ($types as $content_types) {
    foreach ($content_types as $type => $values) {
      if ($values['enabled']) {
        $enabled_file_extensions[$values['extension']]['gzip'] = $values['gzip'];
        if (empty($enabled_file_extensions[$values['extension']]['content_type'])) {
          $enabled_file_extensions[$values['extension']]['content_type'] = $type;
        }
      }
    }
  }

  $output = array('gzip' => '', 'normal' => '');
  $gzip_count = 0;
  $normal_count = 0;
  foreach ($enabled_file_extensions as $extension => $values) {
    $type = $values['content_type'];
    if ($values['gzip']) {
      $output['gzip'] .= "  RewriteCond $document_root$base_path$cache_dir/%{ENV:boostpath}/$server_name%{REQUEST_URI}$char%{QUERY_STRING}\.$extension\.gz -s\n";
      $output['gzip'] .= "  RewriteRule .* $cache_dir/%{ENV:boostpath}/$server_name%{REQUEST_URI}$char%{QUERY_STRING}\.$extension\.gz [L,T=$type,E=no-gzip:1]\n";
      $gzip_count++;
    }
    $output['normal'] .= "  RewriteCond $document_root$base_path$cache_dir/%{ENV:boostpath}/$server_name%{REQUEST_URI}$char%{QUERY_STRING}\.$extension -s\n";
    $output['normal'] .= "  RewriteRule .* $cache_dir/%{ENV:boostpath}/$server_name%{REQUEST_URI}$char%{QUERY_STRING}\.$extension [L,T=$type]\n";
    $normal_count++;
  }

  // Authcache keys for authenticated users.
  $authcache_keys = array_keys(authcache_enum_user_keys());

  // Authcache keys for anonymous users.
  $anonymous_keys = authcache_enum_anonymous_keys();
  $anonymous_keys_customized = (authcache_enum_anonymous_keys() !== array($base_root));

  $skip_to_handler = count($authcache_keys) + count($anonymous_keys) + 1;
  $skip_to_end = $skip_to_handler + (!empty($gzip_count) ? $normal_count + $gzip_count + 1 : $normal_count);

  // Generate the rules.
  $string  = "  ### AUTHCACHE BOOST START ###\n";

  $session_name = session_name();
  if (!empty($output)) {
    $string .= "\n";
    $string .= "  # Skip boost IF not get request" . (variable_get('boost_ssl_bypass', BOOST_SSL_BYPASS) ? " OR https request" : "") . "\n";
    $string .= "  RewriteCond %{REQUEST_METHOD} !^(GET|HEAD)$ [OR]\n";
    if (variable_get('boost_ssl_bypass', BOOST_SSL_BYPASS)) {
      $string .= "  RewriteCond %{HTTPS} on [OR]\n";
    }
    $string .= "  RewriteCond %{ENV:REDIRECT_STATUS} 200\n";
    $string .= "  RewriteRule .* - [S=$skip_to_end]\n";
    $string .= "\n";

    if ($anonymous_keys_customized) {
      foreach ($authcache_keys as $key) {
        $skip_to_end--;
        $skip_to_handler--;
        $string .= "  # Anonymous user with key=$key\n";
        $string .= "  RewriteCond %{HTTP_COOKIE} !$session_name\n";
        $string .= "  # Put custom RewriteCond here to differentiate this request from other anonymous requests\n";
        $string .= "  RewriteRule .* - [S=$skip_to_handler,E=boostpath:$key]\n";
        $string .= "\n";
      }
    }
    else {
      $skip_to_end--;
      $skip_to_handler--;
      $string .= "  # Anonymous users\n";
      $string .= "  RewriteCond %{HTTP_COOKIE} !$session_name\n";
      $string .= "  RewriteCond %{HTTP_COOKIE} !authcache\n";
      $string .= "  RewriteRule .* - [S=$skip_to_handler,E=boostpath:normal]\n";
      $string .= "\n";
    }

    foreach ($authcache_keys as $key) {
      $skip_to_end--;
      $skip_to_handler--;
      $string .= "  # Authenticated user with authcache cookie=$key\n";
      $string .= "  RewriteCond %{HTTP_COOKIE} $session_name\n";
      $string .= "  RewriteCond %{HTTP_COOKIE} authcache=$key\n";
      $string .= "  RewriteRule .* - [S=$skip_to_handler,E=boostpath:$key]\n";
      $string .= "\n";
    }

    $skip_to_end--;
    $skip_to_handler--;
    $string .= "  # No match in previous conditions, skip delivery from cache\n";
    $string .= "  RewriteRule .* - [S=$skip_to_end]\n";
    $string .= "\n";

    $string .= "  # GZIP\n";
    $string .= "  RewriteCond %{HTTP:Accept-encoding} !gzip\n";
    $string .= "  RewriteRule .* - [S=$gzip_count]\n";
    $string .= $output['gzip'];
    $string .= "\n";
    $string .= "  # NORMAL\n";
    $string .= $output['normal'];
  }
  $string .= "\n";
  $string .= "  ### AUTHCACHE BOOST END ###\n";

  return $string;
}
