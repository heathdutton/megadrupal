<?php

/**
 * @file
 * Administrative user interface for protected dowload module.
 */

/**
 * Implements hook_menu().
 */
function protected_download_admin_menu() {
  $items['admin/config/media/protected-download'] = array(
    'title' => 'Protected Download',
    'description' => 'Settings for HMAC protected files',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('protected_download_admin_system_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => -10,
  );

  return $items;
}

/**
 * Protected download settings form.
 */
function protected_download_admin_system_settings($form, &$form_state) {
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $wrapper) {
    $settings = protected_download_settings($scheme);

    $form[$scheme] = array(
      '#type' => 'fieldset',
      '#title' => $wrapper['name'],
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    if ($scheme === 'public') {
      $form[$scheme]['#collapsed'] = TRUE;
      $form[$scheme]['#weight'] = 99;
    }

    $form[$scheme]['protected_download_cache_control_' . $scheme] = array(
      '#type' => 'radios',
      '#title' => t('Cache mode'),
      '#options' => array(
        'public' => t('Public'),
        'private' => t('Private'),
      ),
      '#default_value' => $settings['cache_control'],
      '#description' =>
      '<p>' . t('Choose <em>public</em> if links generated for files in the protected file system should be the same for all users. This allows intermediate proxies to cache the result.') . '</p>' .
      '<p>' . t('Choose <em>private</em> to ensure that protected files are only cacheable in the users browser.') . '</p>',
    );

    $form[$scheme]['protected_download_ttl_mode_' . $scheme] = array(
      '#type' => 'radios',
      '#title' => t('Expire mode'),
      '#options' => array(
        'aligned' => t('Aligned'),
        'exact' => t('Exact'),
      ),
      '#default_value' => $settings['ttl_mode'],
    );

    $form[$scheme]['protected_download_ttl_mode_' . $scheme . '_aligned'] = array(
      '#type' => 'fieldset',
      '#states' => array(
        'visible' => array(
          ':input[name="protected_download_ttl_mode_' . $scheme . '"]' => array('value' => 'aligned'),
        ),
      ),
      '#title' => t('Aligned expire mode'),
      '#description' => t('The time to live for a link is calculated in a way, such that all links generated for a particular file within a certain time frame are equal. The bigger the difference between Minimum TTL and Maximum TTL, the better the cache hit ratio, but also the longer potentially leaked URLs are accessible to anyone.'),
    );

    $form[$scheme]['protected_download_ttl_mode_' . $scheme . '_aligned']['protected_download_aligned_min_ttl_' . $scheme] = array(
      '#type' => 'textfield',
      '#title' => t('Minimum TTL'),
      '#default_value' => $settings['aligned_min_ttl'],
      '#maxlength' => 12,
      '#description' => t('The minimum amount of time in seconds the generated link should remain valid.'),
    );
    $form[$scheme]['protected_download_ttl_mode_' . $scheme . '_aligned']['protected_download_aligned_max_ttl_' . $scheme] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum TTL'),
      '#default_value' => $settings['aligned_max_ttl'],
      '#maxlength' => 12,
      '#description' => t('The maximum amount of time in seconds the generated link should remain valid.'),
    );

    $form[$scheme]['protected_download_ttl_mode_' . $scheme . '_exact'] = array(
      '#type' => 'fieldset',
      '#states' => array(
        'visible' => array(
          ':input[name="protected_download_ttl_mode_' . $scheme . '"]' => array('value' => 'exact'),
        ),
      ),
      '#title' => t('Exact expire mode'),
    );

    $form[$scheme]['protected_download_ttl_mode_' . $scheme . '_exact']['protected_download_exact_ttl_' . $scheme] = array(
      '#type' => 'textfield',
      '#title' => t('Exact TTL'),
      '#default_value' => $settings['exact_ttl'],
      '#maxlength' => 12,
      '#description' => t('The time in seconds the generated link should remain valid.'),
    );
  }

  return system_settings_form($form);

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function protected_download_admin_form_system_file_system_settings_alter(&$form, &$form_state) {
  $form['protected_download_file_path_protected'] = array(
    '#type' => 'textfield',
    '#title' => t('File system path for HMAC protected files'),
    '#default_value' => variable_get('protected_download_file_path_protected', ''),
    '#maxlength' => 255,
    '#description' => t('An existing local file system path for storing protected files. It should be writable by Drupal and not accessible over the web. See the online handbook for <a href="@handbook">more information about securing private files</a>.', array('@handbook' => 'http://drupal.org/documentation/modules/file')),
    '#after_build' => array('system_check_directory'),
  );

  $current_weight = !empty($form['file_default_scheme']['#weight']) ? $form['file_default_scheme']['#weight'] : 0;
  $form['file_default_scheme']['#weight'] = max($current_weight, 90);
}
