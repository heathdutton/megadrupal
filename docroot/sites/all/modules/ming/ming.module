<?php
/**
 * @file
 * The Ming package
 */

/**
 * Error levels for Ming
 */
const MING_ERROR_NONE     = 0;
const MING_ERROR_LOG      = 2;
const MING_ERROR_NORMAL   = 4;
const MING_ERROR_VERBOSE  = 6;

/**
 * Instantiate a ming db workspace
 *
 * If passing the $alias parameter, ming will instantiate another Mongo connection.
 * This allows you to run concurrent Mongo connections simultaneously. To switch
 * connections within a connection connection, use \Ming\Core\Database::setDatabase() instead.
 *
 * Note that when calling \Ming\Core\Item::Save, the default connection is
 * always used.
 *
 * @param string $alias
 *  The database to access. If none is provided, returns that provided in config
 * @param array $override_settings
 *  An optional array of database settings. If provided, other connection settings
 *  are ignored.
 *
 * @return \Ming\Core\Database
 */
function ming_db($alias = '_default', $override_settings = array()) {
  // Use the Ming connection
  require_once('Ming/Core/Database.php');
  static $ming = array();

  if(isset($ming[$alias])) {
    return $ming[$alias];
  }
  else {
    $use_drupal = variable_get('ming_use_mongodb_module', FALSE);
    if ($use_drupal == TRUE) {
      // Use the connection provided by the mongodb module
      $m = mongodb($alias);

      // mongodb assigns the connection to a non-existent property on the MongoDB
      // so we fix that by reassigning it within our own DB object
      $connection = $m->connection;
      unset($m->connection);

      $db = new \Ming\Core\Database($m);
      $db->setConnection($connection);
    }
    else {
      // Use the Ming connection
      require_once('Ming/Core/Connection.php');

      // Use local settings, or collect from hooks
      if (empty($override_settings)) {
        $settings = ming_get_settings($alias);
      }
      else {
        $settings = $override_settings;
      }

      // Instantiate a connection object, pass it to our DB object
      $connection = new \Ming\Core\Connection($settings);
      $m = $connection->useDB($settings['mongo_db']);

      $db = new \Ming\Core\Database($m);
      $db->connection = $connection->connection;
    }

    $ming[$alias] = $db;
  }

  return $ming[$alias];
}

/**
 * Load the ming connection settings
 *
 * @param string $alias
 *  The connection alias to use.
 *
 * @return array|bool
 */
function ming_get_settings($alias = '_default') {
  static $settings = array();
  static $loaded;

  if (isset($loaded) && $loaded == TRUE) {
    if (isset($settings[$alias])) {
      return $settings[$alias];
    }
  }
  else {
    // Load defaults
    $settings = module_invoke_all('ming_settings');

    // Load local settings
    $locals = variable_get('ming_settings', array());
    if (!empty($locals)) {
      $settings = $settings + $locals;
    }

    $loaded = TRUE;
  }

  // Return requested settings
  if (isset($settings[$alias])) {
    return $settings[$alias];
  }

  return FALSE;
}

/**
 * Implements hook_ming_settings()
 *
 * @return array
 *  A configuration array.
 */
function ming_ming_settings() {

  $settings['_default'] = array(
    'mongo_host' => 'localhost',
    'mongo_db' => 'ming',
  );

  return $settings;
}

/**
 * Error handling
 *
 * @param $message
 *  The error message to set
 * @param $type
 *  The type of message (corresponds to Drupals default types)
 * @param $args
 *  Any arguments to substitute
 */
function ming_error($message, $type, $args = array()) {
  $e_level = variable_get('ming_error_handling', MING_ERROR_VERBOSE);

  // Log only
  if ($e_level == MING_ERROR_LOG) {
    if (in_array($type, array('warning', 'error'))) {
      watchdog('ming', $message, $args);
    }
  }

  // Default errors
  if ($e_level == MING_ERROR_NORMAL) {
    if (in_array($type, array('warning', 'error'))) {
      watchdog('ming', $message, $args);
      drupal_set_message($message, $type);
    }
  }

  // Verbose errors
  if($e_level == MING_ERROR_VERBOSE) {
    watchdog('ming', $message, $args);
    drupal_set_message($message, $type);
  }
}
