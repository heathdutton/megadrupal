<?php
/**
 * @file
 * Sans Druplicon module
 */

/**
 * Path to the sans_druplicon configuration page.
 */
define('SANS_DRUPLICON_ADMIN_PATH', 'admin/appearance/sans_druplicon');

/**
 * URL for the sans_druplicon images directory.
 */
define('SANS_DRUPLICON_IMAGE_DIR', $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'sans_druplicon') . '/images');

/**
 * Default imageset.
 */
define('SANS_DRUPLICON_DEFAULT_IMAGESET', 'gears-cc0-nounproject-1063-blue');

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function sans_druplicon_form_system_theme_settings_alter(&$form, &$form_state) {

  $sd_bypass = variable_get('sans_druplicon_bypass');
  $sd_ignore_logo = variable_get('sans_druplicon_ignore_logo');
  $sd_ignore_favicon = variable_get('sans_druplicon_ignore_favicon');

  // We won't show a message if this module is bypassed.
  if (!$sd_bypass) {
    // We'll also skip it if either ignore setting is false.
    if (!$sd_ignore_logo || !$sd_ignore_favicon) {
      $form['sans_druplicon_notice'] = array(
        '#weight' => -40,
        '#prefix' => '<p><em>',
        '#suffix' => '</em></p>',
        '#markup' => t('Please note that the Sans Druplicon module is enabled and <strong>may be overriding display of the logo or favicon</strong>. If this is not desired, you can <a href="@alter_href">alter its configuration</a> or simply disable it on <a href="@disable_href">modules page</a>.', array('@alter_href' => url(SANS_DRUPLICON_ADMIN_PATH), '@disable_href' => url('admin/modules')))
      );
    }
  }

}


/**
 * Implemnets hook_admin_menu_output_alter().
 */
function sans_druplicon_admin_menu_output_alter(&$content) {

  $sd_bypass = variable_get('sans_druplicon_bypass');
  $sd_ignore_favicon = variable_get('sans_druplicon_ignore_favicon');

  if (!$sd_bypass && !$sd_ignore_favicon) {
    $sd_favicon = _sans_druplicon_image('favicon-light', variable_get('sans_druplicon_current_imageset', SANS_DRUPLICON_DEFAULT_IMAGESET));
    $content['icon']['icon']['#title'] = theme('image', array(
      'path' => $sd_favicon,
      'width' => 16,
      'height' => 16,
      'alt' => 'Home',
      'attributes' => array(),
    ));
  }
}

/**
 * Implements hook_menu().
 */
function sans_druplicon_menu() {
  $items = array();

  $items[SANS_DRUPLICON_ADMIN_PATH] = array(
    'title' => 'Sans Druplicon',
    'description' => 'Druplicon removal tool.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sans_druplicon_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('configure sans_druplicon'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );
  return $items;
}

/**
 * Sans Druplicon administration form.
 */
function sans_druplicon_admin_settings() {
  $form = array();

  $images = _sans_druplicon_whitelist();
  $img_options = array();
  foreach ($images as $key => $info) {
    $img_options[$key] = $info['name'];
  }

  $form['sans_druplicon_style'] = array(
    '#type' => 'fieldset',
    '#title' => t('Style'),
    '#weight' => 5,
  );

  $form['sans_druplicon_style']['sans_druplicon_current_imageset'] = array(
    '#type' => 'select',
    '#title' => t('Image'),
    '#options' => $img_options,
    '#default_value' => variable_get(
      'sans_druplicon_current_imageset',
      SANS_DRUPLICON_DEFAULT_IMAGESET
    ),
    '#description' => t('Select the image you would like to use.'),
  );

  $form['sans_druplicon_usage'] = array(
    '#type' => 'fieldset',
    '#title' => t('Usage'),
    '#weight' => 10,
  );

  $form['sans_druplicon_usage']['sans_druplicon_ignore_favicon'] = array(
    '#title' => t('Ignore favicon'),
    '#description' => t('Prevent this module from modifying the favicon.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('sans_druplicon_ignore_favicon', 0),
  );

  $form['sans_druplicon_usage']['sans_druplicon_ignore_logo'] = array(
    '#title' => t('Ignore logo'),
    '#description' => t(
      'Prevent this module from modifying the logo shown in the header.'
    ),
    '#type' => 'checkbox',
    '#default_value' => variable_get('sans_druplicon_ignore_logo', 0),
  );

  $form['sans_druplicon_usage']['sans_druplicon_bypass'] = array(
    '#title' => t('Bypass Sans Druplicon'),
    '#description' => t('Bypass the Sans Druplicon functionality entirely.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('sans_druplicon_bypass', 0),
  );

  return system_settings_form($form);
}

/**
 * Sans Druplicon administration form validation.
 */
function sans_druplicon_admin_settings_validate($form, &$form_state) {
  $current_image = $form_state['values']['sans_druplicon_current_imageset'];
  $whitelist = _sans_druplicon_whitelist();
  if (!array_key_exists($current_image, $whitelist)) {
    form_set_error('sans_druplicon_current_imageset',
                    t('Invalid image selection'));
  }
}

/**
 * Implements hook_help().
 */
function sans_druplicon_help($path, $arg) {
  if ($path == 'admin/help#sans_druplicon') {
    return t('This module provides a no-hassle means to remove the most visible instances of the Druplicon from a site, replacing them with a less intrusive alternative. The goal is to reduce the amount of boilerplate configuration (or theming) sitebuilders must do at the beginning of a project to make it presentable to clients.');
  }
}

/**
 * Implements hook_permission().
 */
function sans_druplicon_permission() {
  return array(
    'configure sans_druplicon' => array(
      'description' => t('Allows configuration of the Sans Druplicon module.'),
      'title' => t('Configure Sans Druplicon'),
      'restrict access' => FALSE,
    ),
  );
}

/**
 * Implements hook_process().
 */
function sans_druplicon_process(&$variables, $hook) {
  $sans_druplicon_bypass = variable_get('sans_druplicon_bypass');
  $sans_druplicon_ignore_logo = variable_get('sans_druplicon_ignore_logo');
  if ($sans_druplicon_bypass || $sans_druplicon_ignore_logo) {
    return;
  }
  else {
    // Only look for/adjust the logo if it's enabled.
    $themevar_toggle_logo = theme_get_setting('toggle_logo');
    if ($themevar_toggle_logo) {
      $variables['logo'] = _sans_druplicon_image('logo', variable_get('sans_druplicon_current_imageset', SANS_DRUPLICON_DEFAULT_IMAGESET));
    }
  }
}

/**
 * Implements hook_html_head_alter().
 */
function sans_druplicon_html_head_alter(&$head_elements) {

  if (variable_get('sans_druplicon_bypass')
      || variable_get('sans_druplicon_ignore_favicon')) {
    return;
  }

  // Only look for/adjust the favicon if it's enabled.
  $themevar_toggle_favicon = theme_get_setting('toggle_favicon');
  if ($themevar_toggle_favicon) {
    foreach ($head_elements as $key => $element) {
      if (isset($element['#attributes']['rel'])
          && $element['#attributes']['rel'] == 'shortcut icon') {
        $head_elements[$key]['#attributes']['href']
          = _sans_druplicon_image('favicon-dark', variable_get('sans_druplicon_current_imageset', SANS_DRUPLICON_DEFAULT_IMAGESET));
      }
    }
  }

}

/**
 * Retrieve URL for a sans_druplicon image.
 *
 * The image must be whitelisted by sans_druplicon.
 *
 * @param string $type
 *   Valid arguments are "logo" and "favicon".
 * @param string $imageset
 *   (optional) Name of imageset to retrieve.
 *
 * @return string
 *   Absolute URL for chosen image or FALSE if not valid
 *
 * @see _sans_druplicon_whitelist()
 */
function _sans_druplicon_image($type, $imageset = FALSE) {

  if ($type != 'favicon-dark' && $type != 'favicon-light' && $type != 'logo') {
    return FALSE;
  }

  // Set filename w/extension based on $type requested.
  $file = ($type == 'logo') ? 'logo.png' : $type . '.ico';

  if (!$imageset) {
    return SANS_DRUPLICON_IMAGE_DIR . '/' . SANS_DRUPLICON_DEFAULT_IMAGESET . '/' . $file;
  }
  else {
    $list = _sans_druplicon_whitelist();
    if (array_key_exists($imageset, $list)) {
      return SANS_DRUPLICON_IMAGE_DIR . '/' . $imageset . '/' . $file;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Provides array of whitelisted imagesets.
 *
 * Returned array contains the imagesets and information
 * about images available for selection by user.
 *
 * Ex: 'd7-blue' for images/d7-blue.
 *
 * @return array
 *   Returns associative array of imageset info keyed by imageset name.
 */
function _sans_druplicon_whitelist() {
  return array(
    'd7-blue' => array('name' => t('D7 (blue)')),
    'd7-white' => array('name' => t('D7 (white)')),
    'd7-black' => array('name' => t('D7 (black)')),
    'gear-cc0-nounproject-1241-blue' => array('name' => t('Gear (blue)')),
    'gear-cc0-nounproject-1241-white' => array('name' => t('Gear (white)')),
    'gear-cc0-nounproject-1241-black' => array('name' => t('Gear (black)')),
    'gears-cc0-nounproject-1063-blue' => array('name' => t('Gear System (blue)')),
    'gears-cc0-nounproject-1063-white' => array('name' => t('Gear System (white)')),
    'gears-cc0-nounproject-1063-black' => array('name' => t('Gear System (black)')),
  );
}
