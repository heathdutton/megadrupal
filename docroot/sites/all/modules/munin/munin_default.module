<?php
/**
 * @file
 * Default munin plugin configurations
 *
 * This file adds default stats as a plugin for the munin api
 * module
 */

/**
 * Implementation of hook_muninplugin().
 */
function munin_default_muninplugin() {
  $plugins = array();

  // Set the category. There will be a munin element for each category.
  $plugins['user'] = array(
    '#title' => t('User information'),
    '#description' => t('Information about the users on your site.'),
    '#vlabel' => t('Number'),
  );
  // Add the data that fits into that category.
  $plugins['user']['curuser'] = array(
    '#label' => t('Currently logged in user'),
    '#description' => t('This item shows the number of currently logged in users.'),
    '#statement' => 'SELECT COUNT(uid) FROM {users} WHERE UNIX_TIMESTAMP() - access < (60*5)',
  );
  $plugins['user']['newuser'] = array(
    '#label' => t('New users'),
    '#description' => t('This item shows the number of users that have been created.'),
    '#statement' => 'SELECT COUNT(uid) FROM {users} WHERE UNIX_TIMESTAMP() - created < (60*5)',
  );

  $plugins['content'] = array(
    '#title' => t('Content statistics'),
    '#description' => t('Information about existing and new content like nodes and comments.'),
    '#vlabel' => t('Amount'),
  );
  $plugins['content']['curnodes'] = array(
    '#label' => t('Existing nodes'),
    '#description' => t('Number of existing nodes on this site.'),
    '#statement' => 'SELECT COUNT(nid) FROM {node}',
  );
  $plugins['content']['curcmnt'] = array(
    '#label' => t('Existing comments'),
    '#description' => t('Number of existing comments on this site.'),
    '#statement' => 'SELECT COUNT(cid) FROM {comment}',
  );
  $plugins['content']['newnodes'] = array(
    '#label' => t('New nodes'),
    '#description' => t('Number of new nodes on this site.'),
    '#statement' => 'SELECT COUNT(nid) FROM {node} WHERE UNIX_TIMESTAMP() - created < (60*5)',
  );
  $plugins['content']['newcmnt'] = array(
    '#label' => t('New Comments'),
    '#description' => t('Number of new comments on this site.'),
    '#statement' => 'SELECT COUNT(cid) FROM {comment} WHERE UNIX_TIMESTAMP() - created < (60*5)',
  );

  $watchdog_severity_levels = watchdog_severity_levels();

  $plugins['errors'] = array(
    '#title' => t('Error information'),
    '#description' => t('Information about Drupal errors.'),
    '#vlabel' => t('Number'),
  );

  foreach ($watchdog_severity_levels as $id => $severity) {
    $plugins['errors'][$severity] = array(
      '#label' => t('!severity', array('!severity' => ucfirst($severity))),
      '#description' => t('Number errors of !severity severity.'),
      '#config' => array(
        'type' => 'DERIVE',
        'min' => 0,
        'draw' => 'LINE1'
      ),
      '#statement' => 'SELECT COUNT(wid) FROM {watchdog} WHERE severity = ' . $id . ';',
    );
  }

  $plugins['timers'] = array(
    '#title' => t('Timers information'),
    '#description' => t('Information about Drupal various timers.'),
    '#vlabel' => t('Milliseconds'),
  );

  $plugins['timers']['pageload'] = array(
    '#label' => t('Page Load'),
    '#description' => t('Last page-load as recorded by Drupal $timers.'),
    '#callback' => '_munin_default_read_pageload_timer',
    '#callback_arguments' => array(),
    '#config' => array(
      'draw' => 'AREASTACK',
      'warning' => ':1000',
      'critical' => ':1500',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_muninplugin_alter().
 */
function munin_default_muninplugin_alter($plugins) {
  // This hook is used to alter existing plugins.
}

/**
 * Implements hook_boot().
 */
function munin_default_boot() {
  timer_start('munin');
}

/**
 * Reads from cache the loading time of the last page-load .
 *
 * @return float
 */
function _munin_default_read_pageload_timer() {
  $time = cache_get('munin:default_pageload');

  return $time->data;
}

/**
 * Implements hook_exit().
 */
function munin_default_exit($destination = NULL) {
  $page_counter = timer_stop('munin');
  
  cache_set('munin:default_pageload', $page_counter['time']);
}
