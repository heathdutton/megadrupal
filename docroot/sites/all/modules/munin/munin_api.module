<?php
/**
 * @file
 * The munin module API.
 *
 * This module is the API for generating own munin plugins. Other module may
 * use the hooks this module delivers to register own information for the munin
 * server. See README.txt for details.
 */

/**
 * Variable name that holds the drush path.
 */
define('MUNIN_API_VAR_DRUSH_PATH', 'munin_drush_path');
/**
 * Variable name that holds the drush root.
 */
define('MUNIN_API_VAR_DRUSH_ROOT', 'munin_drush_root');
/**
 * Variable name that holds the drush uri.
 */
define('MUNIN_API_VAR_DRUSH_URI', 'munin_drush_uri');
/**
 * Variable name that holds plugin definitions.
 */
define('MUNIN_API_VAR_PLUGINS', 'munin_plugins');

/**
 * Implements hook_permission().
 */
function munin_api_permission() {
  return array(
    'generate munin plugin' => array(
      'title' => t('Generate Munin plugin'),
      'description' => t('Generate the Munin plugin script contents.')
    ),
    'configure munin plugin' => array(
      'title' => t('Configure Munin plugin'),
      'description' => t('Enable or disable plugins.')
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function munin_api_menu() {
  $items = array();
  $items['admin/config/development/munin'] = array(
    'title' => 'Munin Plugin',
    'description' => "Generate a munin plugin shell script with this gui.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('munin_settings_form'),
    'access arguments' => array('generate munin plugin'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/development/munin/plugins'] = array(
    'title' => 'Plugins',
    'access arguments' => array('generate munin plugin'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/development/munin/script'] = array(
    'title' => 'Script',
    'page callback' => 'munin_api_script',
    'access arguments' => array('configure munin plugin'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function munin_api_perm() {
  return array(
    'configure munin plugin' => array(
      'title' => t('Configure Munin plugin'),
    )
  );
}

/**
 * Load the plugin definitions.
 *
 * @param boolean $only_active
 *  If TRUE, remove inactive plugins.
 *
 * @return array
 *  Array of plugin definitions.
 */
function _munin_plugin_definitions($only_active = FALSE) {
  $plugins = module_invoke_all('muninplugin');
  // Let other modules alter the definition.
  drupal_alter('muninplugin', $plugins);

  if ($only_active) {
    $plugin_defaults = variable_get(MUNIN_API_VAR_PLUGINS, array());

    foreach ($plugin_defaults as $key => $value) {
      foreach ($value as $name => $active) {
        // Remove if inactive.
        if ($active != 1) {
          unset($plugins[$key][$name]);
        }
      }
      // Remove group if none left.
      if (count($plugins[$key]) == 0) {
        unset($plugins[$key]);
      }
    }
  }

  return $plugins;
}

/**
 * Settings form.
 *
 * @return array
 *  System settings form array.
 */
function munin_settings_form() {
  $form = array();

  // Helper.
  $form['help'] = array(
    '#value' => '<p>' . t('Save this form, then go to the !scripts tab to copy the shell script code.', 
        array('!scripts' => l('Scripts', 'admin/settings/munin/scripts'))) . '</p>',
  );

  // Saved plugin configs [on/off].
  $plugin_defaults = variable_get(MUNIN_API_VAR_PLUGINS, array());
  // Full plugin definitions.
  $plugins = _munin_plugin_definitions();

  if (count($plugins) == 0) {
    $form['message'] = array(
      '#type' => 'markup',
      '#value' => t('There are currently no munin plugin definitions available. Please enable a module that defines some munin plugin configurations.'),
    );
  }
  else {
    $form['munin_plugins'] = array('#tree' => TRUE);
    foreach($plugins as $category => $definition) {
      // There are some meta elements describing the category All remaining
      // elements are definitions.
      $form['munin_plugins'][$category] = array(
        '#type' => 'fieldset',
        '#title' => $definition['#title'],
        '#description' => $definition['#description'],
        '#collabsible' => TRUE,
        '#collapsed' => TRUE,
      );
      foreach ($definition as $key => $value) {
        // Each plugin may define multiple stats in their category. Each of
        // them represents an item in the munin graph element. Let the user
        // choose.
        if (drupal_substr($key, 0 ,1) != '#') {
          $form['munin_plugins'][$category][$key] = array(
            '#type' => 'checkbox',
            '#title' => $value['#label'],
            '#description' => $value['#description'],
            '#default_value' => isset($plugin_defaults[$category][$key])?
              $plugin_defaults[$category][$key]:'',
          );
        }
      }
    }
  }

  // Drush settings.
  $form['drush'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drush'),
  );
  $form['drush'][MUNIN_API_VAR_DRUSH_PATH] = array(
    '#type' => 'textfield',
    '#title' => t('Path to Drush executable'),
    '#default_value' => variable_get(MUNIN_API_VAR_DRUSH_PATH, 'drush'),
    '#required' => TRUE,
  );
  $form['drush'][MUNIN_API_VAR_DRUSH_ROOT] = array(
    '#type' => 'textfield',
    '#title' => t('Drush root'),
    '#default_value' => variable_get(MUNIN_API_VAR_DRUSH_ROOT,
        (isset($_SERVER['DOCUMENT_ROOT']) ? $_SERVER['DOCUMENT_ROOT'] : '')),
    '#required' => TRUE,
    '#description' => t('As passed to <strong>--root<strong> parameter'),
  );
  $form['drush'][MUNIN_API_VAR_DRUSH_URI] = array(
    '#type' => 'textfield',
    '#title' => t('Drush URI'),
    '#default_value' => variable_get(MUNIN_API_VAR_DRUSH_URI, 'default'),
    '#required' => TRUE,
    '#description' => t('As passed to <strong>--uri<strong> parameter'),
  );


  // Go to the scripts after saving.
  $form['#redirect'] = 'admin/settings/munin/scripts';

  // Save settings automatically.
  return system_settings_form($form);
}

/**
 * Build the drush command for the scripts.
 */
function _munin_api_drush_cmd() {
  $cmd = variable_get(MUNIN_API_VAR_DRUSH_PATH, 'drush');
  $root = variable_get(MUNIN_API_VAR_DRUSH_ROOT,
      (isset($_SERVER['DOCUMENT_ROOT']) ? $_SERVER['DOCUMENT_ROOT'] : ''));
  $uri = variable_get(MUNIN_API_VAR_DRUSH_URI, 'default');

  return $cmd . ' --root=' . $root . ' --uri=' . $uri . ' munin-run $NAME';
}

/**
 * Page callback of rendered script.
 */
function munin_api_script() {
  $css_path = drupal_get_path('module', 'munin_api') . '/munin.css';
  drupal_add_css($css_path, 'module');

  $output = '<h4>Copy the bellow code into a new bash script and save it as <code>/etc/munin/plugins/drupal</code> and make it executable (<code>chmod +x drupal</code>).</h4>';
  $output .=  '<div class="munin_script"><pre>
#!/bin/bash
# Drupal munin plugin - This script was generated by the munin Drupal module.

# Variables
NAME=`basename $0`
DRUSH="' . _munin_api_drush_cmd() . '"

# Config settings
case $1 in
  config)
    DRUSH=$DRUSH" --get-config"
esac

$DRUSH
</pre></div>';

  return $output;
}
