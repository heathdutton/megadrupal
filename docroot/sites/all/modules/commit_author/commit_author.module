<?php
/**
 * @file
 * Base functionality module commit_author.
 */

/**
 * Implements hook_help().
 */
function commit_author_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commit_author':
      $output = '';
      $output .= '<p>' . t("This module shows author's name of current commit as notice message.") . '</p>';
      $output .= '<p>' . t('It will help QA to identify the person who has pushed invalid code.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function commit_author_menu() {
  $items = array();

  $items['admin/config/development/commit-author'] = array(
    'title' => 'Commit author module settings',
    'description' => 'Settings which are connected with Commit author module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commit_author_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'commit_author.admin.inc',
  );

  return $items;
}

/**
 * Check show of author in notice by type: contrib, custom, theme.
 *
 * @param string $path
 *   Path to file with notice.
 *
 * @return bool
 *   If TRUE then show, if FALSE then hide.
 */
function _commit_author_check_show_by_notice_type($path) {
  $path = str_replace(DRUPAL_ROOT, '', $path);

  switch (TRUE) {
    case strpos($path, '/modules/') === 0:
      $show = variable_get('commit_author_show_core', TRUE);
      break;

    case strpos($path, 'themes'):
      $show = variable_get('commit_author_show_theme', TRUE);
      break;

    case strpos($path, 'modules/custom'):
      $show = variable_get('commit_author_show_custom', TRUE);
      break;

    default:
      $show = variable_get('commit_author_show_contrib', TRUE);
  }

  return $show;
}

/**
 * Check git existing.
 *
 * @return bool
 *   If TRUE then Git exists,  if FALSE then Git doesn't exist.
 */
function _commit_author_git_existing_check() {
  $project_path = DRUPAL_ROOT;
  if (function_exists('exec')) {
    exec("cd $project_path; git status", $output);
  }
  else {
    // If function exec doesn't exist.
    $output = FALSE;
  }

  return $output ? TRUE : FALSE;
}

/**
 * Get commit author by file path and number line.
 *
 * @param string $path
 *   Path to file with notice.
 * @param int $line
 *   Number line in file with notice.
 *
 * @return bool|string
 *   If FALSE then author is empty or else author name.
 */
function _commit_author_get_author($path, $line) {
  exec("git annotate -L $line,$line $path --incremental", $output);
  $author = explode(' ', $output[1]);
  unset($author[0]);
  $author = implode(' ', $author);

  return !empty($author) ? $author : FALSE;
}

/**
 * Provides custom PHP error handling.
 *
 * @param int $error_level
 *   The level of the error raised.
 * @param string $message
 *   The error message.
 * @param string $filename
 *   The filename that the error was raised in.
 * @param int $line
 *   The line number the error was raised at.
 */
function _commit_author_error_handler($error_level, $message, $filename, $line) {
  $author = _commit_author_get_author($filename, $line);
  $show = $author && _commit_author_check_show_by_notice_type($filename);

  if ($show && variable_get('commit_author_not_author', FALSE) && $author == 'Not Committed Yet') {
    $show = FALSE;
  }

  if ($show) {
    $message = t('Author') . ": \"$author\", $message";
  }

  if ($error_level && error_reporting()) {
    // Copy from function _drupal_error_handler_real().
    $types = drupal_error_levels();
    list($severity_msg, $severity_level) = $types[$error_level];
    $caller = _drupal_get_last_caller(debug_backtrace());

    if (!function_exists('filter_xss_admin')) {
      require_once DRUPAL_ROOT . '/includes/common.inc';
    }

    // We treat recoverable errors as fatal.
    _drupal_log_error(array(
      '%type' => isset($types[$error_level]) ? $severity_msg : 'Unknown error',
      // The standard PHP error handler considers that the error messages
      // are HTML. We mimick this behavior here.
      '!message' => filter_xss_admin($message),
      '%function' => $caller['function'],
      '%file' => $caller['file'],
      '%line' => $caller['line'],
      'severity_level' => $severity_level,
    ), $error_level == E_RECOVERABLE_ERROR);
  }
}

/**
 * Implements hook_init().
 */
function commit_author_init() {
  if (_commit_author_git_existing_check()) {
    // Set custom error handler, if the Git exists.
    set_error_handler('_commit_author_error_handler');
  }
}
