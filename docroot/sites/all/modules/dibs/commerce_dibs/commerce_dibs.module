<?php
/**
 * @file
 * Integrate DIBS payment gateway with Drupal Commerce
 */

/**
 * Implementation of hook_dibsapi().
 */
function commerce_dibs_dibsapi($op = 'info', $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'info':
      $info['commerce_dibs'] = array('info' => t('Commerce dibs'));
      if (!empty($delta)) {
        return isset($info[$delta]) ? $info[$delta] : NULL;
      }
      else {
        return $info;
      }
      break;
    case 'transaction_cancel':
      $commerce_transactions = commerce_payment_transaction_load_multiple(FALSE, array('remote_id' => $transaction['tid']));
      $order = commerce_order_load($transaction['params']['commerce_order_id']);

      if ($order && $commerce_transactions) {
        drupal_set_message(t('You have canceled your payment at DIBS'), 'warning');
        // Update transaction(s).
        foreach ($commerce_transactions as $commerce_transaction) {
          $commerce_transaction->message = 'Declined payment';
          $commerce_transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
          commerce_payment_transaction_save($commerce_transaction);
        }
        drupal_goto('checkout/' . $order->order_id . '/payment/back/' . $transaction['params']['payment_redirect_key']);
      }
      else {
        // TODO: Set error message.
      }
      break;
    case 'transaction_accept':
      // Since DIBS sometimes is a bit slow, we try check several times with some wait time.
      $tries = 0;
      while ($tries < 6) {
        $commerce_transactions = commerce_payment_transaction_load_multiple(FALSE, array('remote_id' => $transaction['tid']), TRUE);
        $order = commerce_order_load($transaction['params']['commerce_order_id']);
        $fail = FALSE;
        if ($order && $commerce_transactions) {
          foreach ($commerce_transactions as $commerce_transaction) {
            if ($commerce_transaction->payment_method == 'commerce_dibs' &&
                !in_array($commerce_transaction->status,
                         array(
                           COMMERCE_CREDIT_AUTH_ONLY,
                           COMMERCE_PAYMENT_STATUS_SUCCESS,
                         ))) {
              $fail = TRUE;
            }
          }
          if ($fail) {
            $tries += 1;
            $sleep_time = (int) variable_get('commerce_dibs_sleep_time', 1000);
            if ($sleep_time > 0) {
              usleep($sleep_time);
            }
          }
          else {
            drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $transaction['params']['payment_redirect_key']);
          }
        }
      }
      drupal_set_message(t('Unable to verify your payment, please try again.'), 'error');
      drupal_goto('checkout/' . $order->order_id . '/payment/back/' . $transaction['params']['payment_redirect_key']);
      break;
    case 'transaction_callback':
      $settings = dibs_load_settings($transaction['api_module'], $delta);
      $status = COMMERCE_CREDIT_AUTH_ONLY;

      if (isset($settings['advanced']['capturenow']) &&
          $settings['advanced']['capturenow']) {
        $status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      }

      $commerce_transactions = commerce_payment_transaction_load_multiple(FALSE, array('remote_id' => $transaction['tid']));
      // Update transaction(s).
      if ($commerce_transactions) {
        if ($transaction['split_payments'] == 1) {
          $commerce_transaction = array_shift($commerce_transactions);
          $commerce_transaction->message = 'Payment completed at DIBS';
          $commerce_transaction->status = $status;
          $commerce_transaction->payload['dibs_id'] = $transaction['payment_transaction_id'];
          commerce_payment_transaction_save($commerce_transaction);
        }
        else {
          foreach ($commerce_transactions as $commerce_transaction) {
            $delta = $commerce_transaction->payload['delta'];
            $commerce_transaction->message = 'Payment completed at DIBS';
            $commerce_transaction->status = $status;
            $commerce_transaction->payload['dibs_id'] = $transaction['dibs_split_payments'][$delta];
            commerce_payment_transaction_save($commerce_transaction);
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_dibs_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_dibs'] = array(
    'title' => t('DIBS'),
    'description' => t('Payment using the DIBS provider.'),
    'display_title' => t('Credit card'),
    'offsite' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_transaction_status_info().
 */
function commerce_dibs_commerce_payment_transaction_status_info() {
  // Since we use COMMERCE_CREDIT_AUTH_ONLY for decerning that a payment has
  // been autorized. We need to add that for the payment listing at orders.
  return array(
    COMMERCE_CREDIT_AUTH_ONLY => array(
      'status' => COMMERCE_PAYMENT_STATUS_PENDING,
      'title' => t('Authorize'),
      'icon' => drupal_get_path('module', 'commerce_dibs') . '/auth-icon.png',
      'total' => FALSE,
    ),
  );
}

/**
 * Returns the default settings for the commerce_dibs payment method.
 */

function commerce_dibs_default_settings() {
  return array(
    'split' => '',
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_dibs_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings with stored ones.
  $settings = $settings + commerce_dibs_default_settings();

  $form['info']['#markup'] = l(t('Setup commerce dibs'), 'admin/config/payment/dibs/edit/commerce_dibs/commerce_dibs');

  $form['split'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use split payments'),
    '#default_value' => $settings['split'],
    '#description' => t('Split each line item into a seperate transaction using split payments. Only works with flex window.'),
  );

  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_dibs_redirect_form($form, &$form_state, $order, $payment_method) {
  $use_split = !empty($payment_method['settings']['split']);
  // Save the transaction, so we know that it has been made in the commerce UI.
  $order = commerce_order_load($order->order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  if ($use_split && count($order_wrapper->commerce_line_items->value()) > 1) {
    $count = 1;
    $split_payments = array();
    $commerce_transactions = array();
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      $transaction = commerce_payment_transaction_new('commerce_dibs', $order->order_id);
      $transaction->instance_id = $payment_method['instance_id'];
      $transaction->amount = $line_item_wrapper->commerce_total->amount->value();
      $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->payload = array('delta' => $count, 'commerce_line_item_id' => $line_item_wrapper->line_item_id->value());
      commerce_payment_transaction_save($transaction);
      $split_payments[] = commerce_currency_amount_to_decimal($transaction->amount, $transaction->currency_code);
      $commerce_transactions[] = $transaction;
      $count += 1;
    }
  }
  else {
    $use_split = FALSE;
    $transaction = commerce_payment_transaction_new('commerce_dibs', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $order_wrapper->commerce_order_total->amount->value();
    $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    commerce_payment_transaction_save($transaction);
  }

  /**
  * Specifying array with payment info.
  *
  * The following info are required:
  * - api_module
  * - api_delta
  * - payment_price (should be integer or float)
  *
  * Optional info with no fall back
  * - order_info_short (string)
  * - order_info_long (should be an array)
  *
  * Optional info with fall back on logged in user data
  * - customer_uid (integer)
  * - customer_name
  * - customer_address
  * - customer_address2
  * - customer_city
  * - customer_zipcode
  * - customer_country
  * - customer_email
  * - customer_phone
  *
  * All info without type specified should be strings.
  */

  $currency_info = commerce_currency_load($transaction->currency_code);

  $data = array(
    'api_module'          => 'commerce_dibs',
    'api_delta'           => 'commerce_dibs',
    'payment_price'       => commerce_currency_amount_to_decimal($order_wrapper->commerce_order_total->amount->value(), $order_wrapper->commerce_order_total->currency_code->value()),
    'payment_currency'    => $currency_info['numeric_code'],
    'payment_order_id'    => '',
    'params'              => array(
                                   'commerce_order_id' => $order->order_id,
                                   'payment_redirect_key' => $order->data['payment_redirect_key'],
                                   ),
  );

  if ($use_split) {
    $data['params']['split_payment_price'] = $split_payments;
    $data['split_payments'] = count($split_payments);
  }

  // Prepare the DIBS payment
  $hash = dibs_payment_prepare($data, FALSE);
  $dibs_transaction = dibs_transaction_hash_load($hash);

  // Update the commerce transaction with the dibs tid.
  if ($use_split) {
    foreach ($commerce_transactions as $transaction) {
      $transaction->remote_id = $dibs_transaction['tid'];
      commerce_payment_transaction_save($transaction);
    }
  }
  else {
    $transaction->remote_id = $dibs_transaction['tid'];
    commerce_payment_transaction_save($transaction);
  }
  $settings = dibs_load_settings('commerce_dibs', 'commerce_dibs');
  $settings['auto_submit'] = 1;

  module_load_include('inc', 'dibs', 'dibs.frontend');

  return drupal_get_form('dibs_frontend_redirect_form', $settings, $dibs_transaction);
}
