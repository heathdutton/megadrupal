<?php
/**
 * @file
 * Install file for DIBS.
 */

/**
 * Implementation of hook_install().
 */
function dibs_install() {
  // Create tables.

  // Inserting default order id setting
  $db_id = db_insert('dibs_order_id_settings')
    ->fields(array(
      'api_module' => 'dibs',
      'api_delta' => 'dibs',
      'order_id' => 10000,
      'order_id_prefix' => '',
      'order_id_suffix' => '',
    ))
    ->execute();
}

/**
 * Implementation of hook_uninstall().
 */
function dibs_uninstall() {
  // Delete menu links.
  $deleted = db_delete('menu_links')
    ->condition('module', 'dibs')
    ->execute();
  menu_cache_clear_all();
}

/**
 * Implementation of hook_schema().
 */
function dibs_schema() {
  $schema['dibs_transactions'] = array(
    'description' => t('Stores dibs transactions'),
    'fields' => array(
      'tid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Transaction ID.'),
      ),
      'api_module' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API module name'),
      ),
      'api_delta' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API delta value'),
      ),
      'api_hash' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API hash value. Used in payment process'),
      ),
      'order_info_short' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order info short'),
      ),
      'order_info_long' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Order info long. Serialized',
      ),
      'order_price_info' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => t('Order price info. Serialized'),
      ),
      'payment_time' => array(
        'type' => 'datetime', // empty 'type' generates PHP notice
        // 'mysql_type', 'pgsql_type', 'sqlite_type', etc.: If you need to use a record type not included in the officially supported list of types above, you can specify a type for each database backend. In this case, you can leave out the type parameter, but be advised that your schema will fail to load on backends that do not have a type specified.
        // jfr. http://api.drupal.org/api/drupal/includes--database--schema.inc/group/schemaapi/7
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp',
        'description' => t('Payment time'),
        'not null' => FALSE,
      ),
      'payment_order_id' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order id'),
      ),
      'payment_retry_count' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Payment retry count that can be used to suffix order number'),
      ),
      'payment_status' => array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => t('0 = payment not recieved, 1 = payment recieved'),
      ),
      'payment_currency' => array(
        'type' => 'varchar',
        'length' => 5,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Currency code for the payment'),
      ),
      'payment_price' => array(
        'type' => 'float',
        'description' => t('The price paid'),
      ),
      'payment_type' => array(
        'type' => 'varchar',
        'length' => 10,
        'description' => t('The payment type the user choose in the payment window.'),
      ),
      'payment_fee' => array(
        'type' => 'float',
        'description' => t('The fee for the transaction'),
      ),
      'payment_transaction_type' => array(
        'type' => 'varchar',
        'length' => 10,
        'description' => t('For later use.'),
      ),
      'payment_transaction_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 10,
        'description' => t('Transaction id from DIBS.'),
      ),
      'split_payments' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 1,
        'description' => t('The number of payments the transaction is splited into, 1 for default usage (no splits).'),
      ),
      'customer_uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 10,
        'description' => t('User ID'),
      ),
      'customer_name' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers name'),
      ),
      'customer_address' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers address'),
      ),
      'customer_address_2' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers address 2'),
      ),
      'customer_city' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers city'),
      ),
      'customer_zipcode' => array(
        'type' => 'varchar',
        'length' => 10,
        'description' => t('The customers zipcode'),
      ),
      'customer_country' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers country'),
      ),
      'customer_email' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers email'),
      ),
      'customer_phone' => array(
        'type' => 'varchar',
        'length' => 14,
        'description' => t('The customers phone'),
      ),
      'params' => array(
        'type' => 'text',
        'description' => t('Storage of extra parameters from the module which implements the DIBS API. The data is stored serialized.'),  
      ),      
    ),
    'indexes' => array(
      'payment_time' => array('payment_time'),
      'payment_status' => array('payment_status'),
      'payment_order_id' => array('payment_order_id'),
      'payment_type' => array('payment_type'),
      'payment_transaction_id' => array('payment_transaction_id'),
      'customer_uid' => array('customer_uid'),
      'api_idx' => array('api_module', 'api_delta'),
      'api_hash' => array('api_hash'),
    ),
    'primary key' => array('tid'),
  );

  $schema['dibs_transactions_log'] = array(
    'description' => t('Logs different events related to a transaction'),
    'fields' => array(
      'tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Transaction ID.'),
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 10,
        'description' => t('Log record type'),
      ),
      'subtype' => array(
        'type' => 'varchar',
        'length' => 20,
        'description' => t('Log record subtype. Used to thme a certain log line. Not required'),
      ),
      'log_text' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => t('Log text.'),
      ),
      'log_value' => array(
        'type' => 'varchar',
        'length' => 32,
        'description' => t('Log value. Used in combination with subtype.'),
      ),
      'time' => array(
        'type' => 'datetime', // empty 'type' generates PHP notice
        // 'mysql_type', 'pgsql_type', 'sqlite_type', etc.: If you need to use a record type not included in the officially supported list of types above, you can specify a type for each database backend. In this case, you can leave out the type parameter, but be advised that your schema will fail to load on backends that do not have a type specified.
        // jfr. http://api.drupal.org/api/drupal/includes--database--schema.inc/group/schemaapi/7
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp',
        'description' => t('Log time'),
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'tid' => array('tid'),
      'time' => array('time'),
      'type' => array('type'),
      'subtype' => array('subtype'),
    ),
  );

  $schema['dibs_order_id_settings'] = array(
    'description' => t('Used to store order id settings for each dibs implementation'),
    'fields' => array(
      'api_module' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API module name'),
      ),
      'api_delta' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API delta value'),
      ),
      'order_id' => array(
        'type' => 'int',
        'length' => 10,
        'default' => 0,
        'description' => t('Order id counter'),
      ),
      'order_id_prefix' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order id prefix'),
      ),
      'order_id_suffix' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order id suffix'),
      ),
    ),
    'indexes' => array(
      'api_idx' => array('api_module', 'api_delta'),
      'order_id' => array('order_id'),
    ),
    'primary key' => array('api_module', 'api_delta'),
  );

  $schema['dibs_split_payments'] = array(
    'description' => t('Used to store split payment transaction ids'),
    'fields' => array(
      'tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('Transaction ID.'),
      ),
      'payment_transaction_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'description' => t('Transaction id from DIBS.'),
      ),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'description' => t('The transaction delta.'),
      ),
    ),
    'primary key' => array('tid', 'payment_transaction_id'),
  );

  return $schema;
}

function dibs_update_6001() {
  $ret = array();

  db_add_field($ret, 'dibs_transactions', 'payment_retry_count', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => t('Payment retry count that can be used to suffix order number'),
  ));

  return $ret;
}

function dibs_update_6002() {
  $ret = array();

  db_add_field($ret, 'dibs_transactions', 'params', array(
    'type' => 'text',
    'not null' => TRUE,
    // 'default' => '',
    // BLOB/TEXT column 'params' can't have a default value
    'description' => t('Storage of extra parameters from the module which implements the DIBS API. The data is stored serialized.'),  
  ));

  return $ret;
}

/**
 * Allow NULLs in payment_type.
 *
 * This fixes an issue with less forgiving versions of MySQL.
 */
function dibs_update_6003() {
  $ret = array();

  db_change_field($ret, 'dibs_transactions', 'payment_type', 'payment_type', array(
    'type' => 'varchar',
    'length' => 10,
    'not null' => FALSE,
  ));

  return $ret;
}

/**
 * Allow NULLs in payment_transaction_id and customer_uid.
 *
 * This fixes an issue with less forgiving versions of MySQL.
 */
function dibs_update_6004() {
  $ret = array();

  db_change_field($ret, 'dibs_transactions', 'payment_transaction_id', 'payment_transaction_id', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'length' => 10,
  ));

  db_change_field($ret, 'dibs_transactions', 'customer_uid', 'customer_uid', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'length' => 10,
  ));

  return $ret;
}

/**
 * Add database suport for split payments.
 */
function dibs_update_7000(&$sandbox) {
  // Add field for storing number of split payments.
  db_add_field('dibs_transactions', 'split_payments', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'default' => 1,
    'description' => t('The number of payments the transaction is splited into, 1 for default usage (no splits).'),
  ));
  db_create_table('dibs_split_payments', array(
    'description' => t('Used to store split payment transaction ids'),
    'fields' => array(
      'tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Transaction ID.'),
      ),
      'payment_transaction_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 10,
        'description' => t('Transaction id from DIBS.'),
      ),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'description' => t('The transaction delta.'),
      ),
    ),
    'primary key' => array('tid', 'payment_transaction_id'),
  ));
}

/**
 * Add column for storing the payment fee.
 */
function dibs_update_7001(&$sandbox) {
  db_add_field('dibs_transactions', 'payment_fee', array(
    'type' => 'float',
    'description' => t('The fee for the transaction'),
  ));
}
