<?php
/**
 * @file
 */


/**
 * Add the JS and CSS needed to trigger the jQuery auto-pager plugin.
 * This function look for settings for this url. If none is found,
 * nothing is done (Unless a specific settings name has been given)
 *
 * This function is called by default in hook_preprocess_pager, when a default drupal pager is built,
 * but can be called anywhere.
 *
 * You can apply you own logic in code and call this function with a settings machine name.
 * That will bypass the url check and the settings is added. Beware, that one settings are admit by page,
 * and your call can conflict with another one.
 *
 * @param string name
 *  (Optional) A settings name, if specified, and exists, it will be added without any check.
 */
function gd_infinite_scroll_add_unique_settings($name = NULL) {
  $settings_processed = &drupal_static(__FUNCTION__, FALSE);
  // Limit to one auto-pager by page.
  if ($settings_processed) {
    return;
  }

  // Specific settings ? called elsewhere in code and force the settings to load :
  if (!empty($name)) {
    $gd_settings = gd_infinite_scroll_settings_load($name);
  }
  else {
    // Try to load gd_settings for this url:
    $gd_settings = gd_infinite_scroll_settings_load_by_url();
    if (empty($gd_settings)) {
      return;
    }
  }

  $settings_infinite_scroll = reset($gd_settings);

  // Need something to continue.
  if (empty($settings_infinite_scroll)) {
    return;
  }
  // Get the module path for later inclusion and the ajax_loader img url.
  $module_path = drupal_get_path('module', 'gd_infinite_scroll');
  $img_path = file_create_url($module_path . '/images/ajax-loader.gif');

  if (!empty($settings_infinite_scroll['load_more_markup'])) {
    $settings_infinite_scroll['load_more_markup'] = str_replace('@label', t('Load more'), $settings_infinite_scroll['load_more_markup']);
  }

  // Set the jQuery auto-pager settings.
  $settings = array(
    'gd_infinite_scroll' => array(
      'img_path' => $img_path,
      'name' => key($gd_settings),
    )
    + $settings_infinite_scroll,
  );

  // Add required files and javascript settings:
  drupal_add_css($module_path . '/css/gd_infinite_scroll.css');
  drupal_add_js($settings, array('type' => 'setting', 'scope' => JS_DEFAULT));

  if (module_exists('libraries') &&
      file_exists(libraries_get_path('autopager') . '/jquery.autopager-1.0.0.js')) {
    drupal_add_js(libraries_get_path('autopager') . '/jquery.autopager-1.0.0.js');
  }
  else {
    drupal_add_js($module_path . '/js/jquery.autopager-1.0.0.js');
  }

  drupal_add_js($module_path . '/js/gd_infinite_scroll.js');

  // Set the static flag.
  $settings_processed = TRUE;
}

/**
 * Implements hook_menu().
 */
function gd_infinite_scroll_menu() {

  $infinite_scroll_menu = array(
    'file' => 'includes/gd_infinite_scroll.admin.inc',
    'file path' => drupal_get_path('module', 'infinite_scroll'),
    'access arguments' => array('edit gd infinite scroll settings'),
    'menu' => 'management',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/user-interface/gd-infinite-scroll'] = array(
    'title' => 'GD Infinite scroll settings',
    'page callback' => 'gd_infinite_scroll_admin_page',
  ) + $infinite_scroll_menu;

  $items['admin/config/user-interface/gd-infinite-scroll/add'] = array(
    'title' => 'Add GD Infinite scroll',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gd_infinite_scroll_form', 4),
  ) + $infinite_scroll_menu;

  $items['admin/config/user-interface/gd-infinite-scroll/edit/%gd_infinite_scroll_settings'] = array(
    'title' => 'Edit GD Infinite scroll',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gd_infinite_scroll_form', 4, 5),
    'type' => MENU_CALLBACK,
  ) + $infinite_scroll_menu;

  $items['admin/config/user-interface/gd-infinite-scroll/delete/%gd_infinite_scroll_settings'] = array(
    'title' => 'Delete GD Infinite scroll',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gd_infinite_scroll_confirm_delete', 5),
    'type' => MENU_CALLBACK,
  ) + $infinite_scroll_menu;

  return $items;
}

/**
 * Implements hook_permission().
 */
function gd_infinite_scroll_permission() {
  return array(
    'edit gd infinite scroll settings' => array(
      'title' => t('Edit gd infinite scroll settings'),
      'description' => t('Edit gd infinite scroll settings.'),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gd_infinite_scroll_preprocess_page(&$variables) {
  gd_infinite_scroll_add_unique_settings();
}

/**
 * Return all the raw value unserialized from the db.
 * @param string $name
 * @return array
 *   array($name => $settings)
 */
function gd_infinite_scroll_settings() {
  // First check the static cache for a gd_infinite_scroll_settings array.
  $infinite_scroll_settings = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($infinite_scroll_settings)) {
    $infinite_scroll_settings = array();


    // Find gd infinite scroll settings defined by hook_gd_infinite_scroll_settings_info().
    foreach (module_implements('gd_infinite_scroll_settings_info') as $module) {
      foreach (module_invoke($module, 'gd_infinite_scroll_settings_info') as $name => $settings) {
        // Initialize gd infinite scroll settings properties if necessary.
        $defaults = array(
          'exported' => TRUE,
        );
        $infinite_scroll_settings[$name] = array_merge($defaults, $settings);
      }
    }

    // Loaded definition from the db override default values.
    $values = db_query('SELECT name, url, value FROM {gd_infinite_scroll}')->fetchAllAssoc('name', PDO::FETCH_ASSOC);
    foreach ($values as $value) {
      if (!isset($infinite_scroll_settings[$value['name']])) {
        $infinite_scroll_settings[$value['name']] = array();
      }
      $infinite_scroll_settings[$value['name']] = array_merge($infinite_scroll_settings[$value['name']], unserialize($value['value']));
      $infinite_scroll_settings[$value['name']]['database_override'] = TRUE;
      $infinite_scroll_settings[$value['name']]['url'] = $value['url'];
    }

    // Last allow the info to be altered by other modules.
    drupal_alter('gd_infinite_scroll_settings_info', $infinite_scroll_settings);
  }

  return $infinite_scroll_settings;
}

/**
 * Return the raw value unserialized from the db.
 * @param string $name
 * @return array
 *   array($name => $settings)
 */
function gd_infinite_scroll_settings_load($name) {
  $settings = gd_infinite_scroll_settings();
  return isset($settings[$name]) ? array($name => $settings[$name]) : array();
}

/**
 * Return the raw value unserialized from the db.
 *
 *  Url pattern check, allow for only one /* at the end of the url.
 *  example for current_path() == catalogue/cat1/5/cat2/9
 *    path that will be checked :
 *     - catalogue/cat1/5/cat2/9
 *     - catalogue/cat1/5/cat2/*
 *     - catalogue/cat1/5/*
 *     - catalogue/cat1/*
 *     - catalogue/*
 *
 * @return array
 *   array($name => $settings)
 */
function gd_infinite_scroll_settings_load_by_url() {
  $url = arg();
  $settings = gd_infinite_scroll_settings();
  // Check for exact url settings
  $urltocheck = current_path();
  foreach ($settings as $name => $value) {
    if ($value['url'] == $urltocheck) {
      return array($name => $value);
    }
  }

  // Check for pattern urls, with /* at the end
  for ($i = count($url); $i>0; $i--) {
    unset($url[$i]);
    $urltocheck = implode('/', $url) . '/*';
    foreach ($settings as $name => $value) {
      if ($value['url'] == $urltocheck) {
        return array($name => $value);
      }
    }
  }

  // Check after with path alias too.
  $url = explode('/', request_path());
  // Check for exact url settings
  $urltocheck = request_path();
  foreach ($settings as $name => $value) {
    if ($value['url'] == $urltocheck) {
      return array($name => $value);
    }
  }

  // Check for pattern urls, with /* at the end
  for ($i = count($url); $i>0; $i--) {
    unset($url[$i]);
    $urltocheck = implode('/', $url) . '/*';
    foreach ($settings as $name => $value) {
      if ($value['url'] == $urltocheck) {
        return array($name => $value);
      }
    }
  }

  return FALSE;
}

/**
 * Save a raw value to the db.
 * @param string $name
 *   Name of the string to save.
 * @param array $value
 *   The value to save.
 */
function gd_infinite_scroll_settings_save($name, $url, $settings) {
  db_merge('gd_infinite_scroll')->key(array('name' => $name))->fields(array('url' => $url, 'value' => serialize($settings)))->execute();
}

/**
 * Form API: Confirmation step for deleting a infinite scroll settings.
 */
function gd_infinite_scroll_confirm_delete($form, &$form_state, $settings) {
  $name = key($settings);
  $form['name'] = array(
    '#type' => 'value',
    '#value' => $name,
  );
  return confirm_form($form, t('Are you sure you want to delete the infinite scroll settings %name?', array('%name' => $name)), 'admin/config/user-interface/gd-infinite-scroll');
}

/**
 * Form API: Handle submit and deleting an infinite scroll settings.
 */
function gd_infinite_scroll_confirm_delete_submit($form, &$form_state) {
  db_delete('gd_infinite_scroll')->condition('name', $form_state['values']['name'])->execute();
  drupal_set_message(t('The infinite scroll %name have been deleted.', array('%name' => $form_state['values']['name'])));
  watchdog('gd_infinite_scroll', 'Infinite scroll settings: deleted %name.', array('%name' => $form_state['values']['name']));
}

/**
 * Implements hook_features_api().
 */
function gd_infinite_scroll_features_api() {
  $features = array();

  $features['gd_infinite_scroll'] = array(
    'name' => t('GD infinite scroll'),
    'feature_source' => TRUE,
    'default_hook' => 'gd_infinite_scroll_settings_info',
    'file' => drupal_get_path('module', 'gd_infinite_scroll') . '/gd_infinite_scroll.features.inc',
  );

  return $features;
}

/**
 * Implements hook_hook_info().
 */
function gd_infinite_scroll_hook_info() {
  $hooks = array(
    'gd_infinite_scroll_settings_info' => array(
      'group' => 'gd_infinite_scroll',
    ),
    'gd_infinite_scroll_settings_info_alter' => array(
      'group' => 'gd_infinite_scroll',
    ),
  );

  return $hooks;
}
