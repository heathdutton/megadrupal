<?php

/**
 * @file
 * Provides hook implementations for Stop Spam Registrations module.
 */

/**
 * Implements hook_menu().
 */
function stop_spam_regs_menu() {

  $items['admin/config/people/stop_spam_regs'] = array(
    'title' => 'Stop Spam Registrations',
    'description' => t('Configure list of spam email domains.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stop_spam_regs_settings_form'),
    'access arguments' => array('edit spam email domains'),
    'file' => 'stop_spam_regs.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function stop_spam_regs_permission() {
  return array(
    'edit spam email domains' => array(
      'title' => t('Edit spam email domains'),
      'description' => t('Allow user to change list of spam email domains.')
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stop_spam_regs_form_user_register_form_alter(&$form) {

  // Add one more validation callback for user registration.
  $form['#validate'][] = 'stop_spam_regs_registration_validate';
}

/**
 * Validate user register form.
 * Check if submitted email domain matches anyone from our spam list.
 */
function stop_spam_regs_registration_validate($form, &$form_state) {

  // Check if user mail is presents in form.
  // Some contrib modules may remove it.
  if (!empty($form_state['values']['mail'])) {
    $email = $form_state['values']['mail'];

    // Search for email domain.
    $full_domain = drupal_substr($email, strrpos($email, '@') + 1);
    $domain_bits = explode('.', $full_domain);

    // If domain name is incorrect - then it will be handled by drupal core.
    if (count($domain_bits) < 2) {
      return;
    }

    // Also block registration from subdomains of blacklisted domains.
    $base_domain[] = array_pop($domain_bits);
    $base_domain[] = array_pop($domain_bits);
    $email_domain = $base_domain[1] . '.' . $base_domain[0];

    // Get list of blacklisted domains.
    stop_spam_regs_include('blacklist');
    $spam_list = variable_get('stop_spam_regs_spam_list', _stop_spam_regs_blacklist());

    // If current email domain is in the blacklist - throw an error.
    if (in_array($email_domain, $spam_list)) {
      form_set_error('mail', t('E-mail domain %domain in our black list. Please, use another to register.',
        array('%domain' => $email_domain)));
    }
  }
}

/**
 * Includes php file.
 */
function stop_spam_regs_include($filename) {
  module_load_include('inc', 'stop_spam_regs', 'includes/' . $filename);
}
