<?php

/**
 * @file
 * Enables users to save their current exposed filter settings for views.
 */

/**
 * Implements hook_menu().
 */
function views_save_menu() {
  $items['admin/structure/views_save'] = array(
    'title' => 'Views Save types',
    'page callback' => 'views_save_overview',
    'access arguments' => array('administer views_save'),
    'file' => 'views_save.admin.inc',
  );
  $items['admin/structure/views_save/add'] = array(
    'title' => 'Add type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_save_bundle_edit'),
    'access arguments' => array('administer views_save'),
    'file' => 'views_save.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/structure/views_save/%'] = array(
    'title' => 'Views Save types',
    'title callback' => 'views_save_bundle_get_name',
    'title arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_save_bundle_edit', 3),
    'access callback' => 'views_save_bundle_access',
    'access arguments' => array(3),
    'file' => 'views_save.admin.inc',
  );
  $items['admin/structure/views_save/%/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/views_save/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_save_bundle_delete_confirm', 3),
    'access callback' => 'views_save_bundle_access',
    'access arguments' => array(3),
    'file' => 'views_save.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  $items['views-save/%views_save'] = array(
    'title' => 'Saved views',
    'access callback' => FALSE,
  );

  return $items;
}

/**
 * Implements hook_url_inbound_alter().
 */
function views_save_url_inbound_alter(&$path) {
  if (substr($path, 0, 11) == 'views-save/') {
    if (is_numeric($id = substr($path, 11)) && (float) $id == (int) $id) {
      $id = (int) $id;
      $save = views_save_load($id);
      if ($save && views_save_display_access($save)) {
        $path = $save->view_path['path'];
        if (!empty($save->view_path['options']['query'])) {
          $_GET = $save->view_path['options']['query'] + $_GET;
        }
        $_GET['views_save'] = $id;
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function views_save_theme() {
  $theme['views_save_modal'] = array(
    'variables' => array(),
  );

  return $theme;
}

/**
 * Implements hook_permission().
 */
function views_save_permission() {
  $perms = array(
    'administer views_save' => array(
      'title' => t('Administer Views Save'),
      'description' => t('Administer settings and fields for saved views.'),
    ),
    'create views_save' => array(
      'title' => t('Use Views Save'),
      'description' => t('Save exposed filter settings for views. Anonymous users have to log in in any case, but without the permission no button will be displayed.'),
    ),
    'access views_save' => array(
      'title' => t('View published saved views'),
    ),
    'view own unpublished views_save' => array(
      'title' => t('View own unpublished saved views'),
    ),
  );



  return $perms;
}

/**
 * Implements hook_entity_info().
 */
function views_save_entity_info() {
  $types['views_save'] = array(
    'label' => t('Saved view'),
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'entity class' => 'Entity',
    'base table' => 'views_save',
    'uri callback' => 'views_save_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'bundle',
      'label' => 'title',
    ),
    'bundles' => array(),
    'module' => 'views_save',
  );

  foreach (views_save_get_bundles() as $bundle => $name) {
    $types['views_save']['bundles'][$bundle] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/views_save/%',
        'real path' => 'admin/structure/views_save/' . $bundle,
        'bundle argument' => 3,
        'access callback' => 'views_save_bundle_access',
        'access arguments' => array(3),
      ),
    );
  }

  return $types;
}

/**
 * Implements hook_entity_property_info().
 */
function views_save_entity_property_info() {
  $info['views_save']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a saved view.'),
      'schema field' => 'id',
      'validation callback' => 'entity_metadata_validate_integer_positive',
    ),
    'bundle' => array(
      'label' => t('Bundle'),
      'type' => 'token',
      'description' => t('The view this save is based on.'),
      'schema field' => 'bundle',
      'options list' => 'views_save_get_bundles',
      'required' => TRUE,
    ),
    'title' => array(
      'label' => t('Title'),
      'type' => 'text',
      'description' => t('The title of the saved view.'),
      'schema field' => 'title',
      'required' => TRUE,
    ),
    'status' => array(
      'label' => t('Status'),
      'type' => 'boolean',
      'description' => t('Whether the saved view is published or not.'),
      'schema field' => 'status',
      'options list' => 'views_save_status_options_list',
    ),
    'user' => array(
      'label' => t('User'),
      'type' => 'user',
      'description' => t('The user who created this saved view.'),
      'schema field' => 'uid',
    ),
    'created' => array(
      'label' => t('Date created'),
      'type' => 'date',
      'description' => t('The date the saved view was created.'),
      'schema field' => 'created',
    ),
    'changed' => array(
      'label' => t('Date changed'),
      'type' => 'date',
      'description' => t('The date the saved view was last changed.'),
      'schema field' => 'changed',
    ),
    'view_path' => array(
      'label' => t('Path'),
      'type' => t('text'),
      'description' => t('The path to the saved view.'),
    ),
  );

  return $info;
}

/**
 * Implements hook_user_insert().
 */
function views_save_user_insert(&$edit, $account) {
  views_save_user_add_saves($account);
}

/**
 * Implements hook_user_login().
 */
function views_save_user_login(&$edit, $account) {
  views_save_user_add_saves($account);
}

/**
 * Adds saved views to a recently created or logged-in account.
 *
 * This will associate all saved views that the anonymous user previously
 * created (in this session) with that account.
 *
 * @param $account
 *   The account of the previously anonymous user.
 */
function views_save_user_add_saves($account) {
  if (!empty($_SESSION['views_save'])) {
    $sql = "SELECT CONCAT(bundle, ' ', title), id FROM {views_save} WHERE uid = :uid";
    $existing = db_query($sql, array(':uid' => $account->uid))->fetchAllKeyed();
    $saves = views_save_load_multiple($_SESSION['views_save']);
    $keys = array_flip($_SESSION['views_save']);
    unset($_SESSION['views_save']);
    if ($saves) {
      foreach ($saves as $id => $save) {
        // If the user already has a saved view with the same bundle/title
        // combination, we want to overwrite it. In that case, we have to
        // manually delete the old saved view afterwards.
        if (isset($existing[$keys[$id]])) {
          $save->id = $existing[$keys[$id]];
        }
        list(, $title) = explode(' ', $keys[$id], 2);
        $save->uid = $account->uid;
        $save->title = $title;
        $save->save();
        if (isset($existing[$keys[$id]])) {
          entity_delete('views_save', $id);
        }
        if (!isset($redirect)) {
          $redirect = TRUE;
          if (views_save_display_access($save)) {
            $_GET['destination'] = 'views-save/' . $save->id;
          }
          else {
            $_GET['destination'] = $save->view_path['path'];
            if (!empty($save->view_path['options']['query'])) {
              $_GET['destination'] .= '?' . drupal_http_build_query($save->view_path['options']['query']);
            }
          }
        }
      }
      drupal_set_message(format_plural(count($saves), 'The saved view was added to this account.', '@count saved views were added to this account.'));
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Purge views saved by anonymous users that are older than a week.
 */
function views_save_cron() {
  $sql = 'SELECT id FROM {views_save} WHERE uid = 0 AND created < :lastweek';
  $vars[':lastweek'] = REQUEST_TIME - 7 * 86400;
  $ids = db_query($sql, $vars)->fetchCol();
  if ($ids) {
    entity_delete_multiple('views_save', $ids);
  }
}

// Pathauto integration
// Implement CRUD hooks on behalf of the pathauto module, so they will only fire
// if both this module and Pathauto are enabled.

/**
 * Implements hook_views_save_insert().
 */
function pathauto_views_save_insert(Entity $save) {
  views_save_update_alias($save, 'insert');
}

/**
 * Implements hook_views_save_update().
 */
function pathauto_views_save_update(Entity $save) {
  views_save_update_alias($save, 'update');
}

/**
 * Implements hook_views_save_delete().
 */
function pathauto_views_save_delete(Entity $save) {
  pathauto_entity_path_delete_all('views_save', $save, "views-save/{$save->id}");
}

/**
 * Update the URL aliases for an individual saved view.
 *
 * @param Entity $save
 *   A views_save object.
 * @param string $op
 *   Operation being performed on the saved view ('insert', 'update' or
 *   'bulkupdate').
 *
 * @return string
 *   The created alias.
 */
function views_save_update_alias(Entity $save, $op) {
  if (!module_exists('pathauto')) {
    return NULL;
  }
  // Skip processing if the user has disabled pathauto for the saved view.
  if (isset($save->path['pathauto']) && empty($save->path['pathauto'])) {
    return NULL;
  }

  // Skip processing if the saved view has no pattern.
  if (!pathauto_pattern_load_by_entity('views_save', $save->bundle, LANGUAGE_NONE)) {
    return NULL;
  }

  module_load_include('inc', 'pathauto');
  return pathauto_create_alias('views_save', $op,'views-save/' . $save->id, array('views_save' => $save), $save->bundle);
}

/**
 * Implements hook_views_api().
 */
function views_save_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'views_save') . '/views',
  );
}

/**
 * Retrieves a list of all bundles for saved views.
 *
 * @return array
 *   An array of bundles for the Saved View entity, mapping bundle IDs to their
 *   human-readable names.
 *
 * @see views_save_entity_info()
 */
function views_save_get_bundles() {
  $sql = 'SELECT id, label FROM {views_save_bundle}';
  return db_query($sql)->fetchAllKeyed();
}

/**
 * Retrieves a bundle's name.
 *
 * @param string $bundle
 *   The ID of the bundle whose name should be returned.
 *
 * @return string|null
 *   The bundle's name, if the bundle exists. NULL otherwise.
 */
function views_save_bundle_get_name($bundle) {
  $sql = 'SELECT label FROM {views_save_bundle} WHERE id = :id';
  $name = db_query($sql, array(':id' => $bundle))->fetchField();
  return $name ? $name : NULL;
}

/**
 * Saves a saved view type.
 *
 * @param object $bundle
 *   The bundle to save, with "id" and "label" set.
 * @param bool $is_new
 *   TRUE if this is a new bundle, FALSE otherwise.
 *
 * @return bool
 *   TRUE if the bundle was successfully saved, FALSE otherwise.
 */
function views_save_bundle_save($bundle, $is_new = FALSE) {
  if ($is_new) {
    db_insert('views_save_bundle')
      ->fields((array) $bundle)
      ->execute();
    field_attach_create_bundle('views_save', $bundle->id);
  }
  else {
    db_update('views_save_bundle')
      ->fields(array(
        'label' => $bundle->label,
      ))
      ->condition('id', $bundle->id)
      ->execute();
  }

  return TRUE;
}

/**
 * Deletes a saved view type.
 *
 * @param $id
 *   The bundle's ID.
 *
 * @return bool
 *   TRUE if the bundle was successfully deleted, FALSE otherwise.
 */
function views_save_bundle_delete($id) {
  $success = (bool) db_delete('views_save_bundle')
      ->condition('id', $id)
      ->execute();
  if ($success) {
    field_attach_delete_bundle('views_save', $id);
  }
  return $success;
}

/**
 * Access callback for all bundle management pages.
 */
function views_save_bundle_access($id) {
  return user_access('administer views_save') && views_save_bundle_get_name($id);
}

/**
 * Loads a single saved view.
 *
 * @param int $id
 *   The saved view's ID.
 * @param bool $reset
 *   Whether to reset the internal cache for saved views.
 *
 * @return Entity|null
 *   The loaded saved view, if it exists. NULL otherwise.
 *
 * @see entity_load()
 */
function views_save_load($id, $reset = FALSE) {
  $save = entity_load('views_save', array($id), array(), $reset);
  return $save ? reset($save) : NULL;
}

/**
 * Loads multiple saved views at once.
 *
 * @param array|false $ids
 *   The IDs of the saved views to load, or FALSE to load all saved views.
 * @param array $conditions
 *   Conditions to filter the returned saved views by.
 * @param bool $reset
 *   Whether to reset the internal cache for saved views.
 *
 * @return array
 *   An array of saved view objects indexed by their IDs. When no results are
 *   found, an empty array is returned.
 *
 * @see entity_load()
 */
function views_save_load_multiple($ids = FALSE, array $conditions = array(), $reset = FALSE) {
  return entity_load('views_save', $ids, $conditions, $reset);
}

/**
 * URI callback for the saved view entity.
 *
 * @param Entity $save
 *   The saved view whose URI should be returned.
 *
 * @return array
 *   The URI of the saved view, as an array containing "path" and "options".
 */
function views_save_uri(Entity $save) {
  $uri['path'] = 'views-save/' . $save->id;
  $uri['options'] = array();
  return $uri;
}

/**
 * Property callback which retrieves the path to a saved view as a string.
 *
 * @param Entity $save
 *   The saved view.
 *
 * @return string
 *   The path to the saved view, as a string.
 */
function views_save_path(Entity $save) {
  return 'views-save/' . $save->id;
}

/**
 * Access callback for displaying a saved view.
 *
 * @param Entity $save
 *   The saved view to display.
 * @param object $account
 *   The account for which access should be checked. Defaults to the currently
 *   logged-in user.
 *
 * @return bool
 *   Whether the user should be allowed to access the saved view.
 */
function views_save_display_access(Entity $save, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  if (user_access('administer views_save', $account)) {
    return TRUE;
  }
  if ($save->status && user_access('access views_save', $account)) {
    return TRUE;
  }
  if ($account->uid && $save->uid == $account->uid && user_access('view own unpublished views_save', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Options list callback for the "status" field of saved views.
 *
 * @return array
 *   An array of options, mapped to their labels.
 *
 * @see views_save_entity_property_info()
 */
function views_save_status_options_list() {
  return array(
    0 => t('Unpublished'),
    1 => t('Published'),
  );
}

/**
 * Implements hook_query_TAG_alter().
 *
 * This is the hook_query_alter() for queries tagged with 'views_save_access'.
 * It adds access checks for the user account given by the 'account' meta-data
 * (or global $user if not provided), for an operation given by the 'op'
 * meta-data (or 'view' if not provided; other possible values are 'update' and
 * 'delete').
 */
function views_save_query_views_save_access_alter(QueryAlterableInterface $query) {
  _views_save_query_views_save_access_alter($query, 'views_save');
}

/**
 * Implements hook_query_TAG_alter().
 *
 * This function implements the same functionality as
 * views_save_query_views_save_access_alter() for the SQL field storage engine.
 * Access conditions are added for field values belonging to saved views only.
 */
function views_save_query_entity_field_access_alter(QueryAlterableInterface $query) {
  _views_save_query_views_save_access_alter($query, 'entity');
}

/**
 * Helper for access functions.
 *
 * @param QueryAlterableInterface $query
 *   The query to add conditions to.
 * @param string $type
 *   Either 'views_save' or 'entity' depending on what sort of query it is. See
 *   views_save_query_views_save_access_alter() and
 *   views_save_query_entity_field_access_alter() for more information.
 *
 * @throws Exception
 *   If the query doesn't contain the necessary columns.
 */
// Stolen from _node_query_node_access_alter().
function _views_save_query_views_save_access_alter(QueryAlterableInterface $query, $type) {
  global $user;

  // Read meta-data from query, if provided.
  if (!($account = $query->getMetaData('account'))) {
    $account = $user;
  }

  if (user_access('administer views_save', $account)) {
    return;
  }
  if (!user_access('access views_save', $account)) {
    $query->where('0 = 1');
    return;
  }

  $tables = $query->getTables();
  $base_table = $query->getMetaData('base_table');
  $join_field = '';
  foreach ($tables as $table_info) {
    $table = $table_info['table'];
    if (!($table instanceof SelectQueryInterface)) {
      // If the views_save table is in the query, it wins immediately.
      if ($table == 'views_save') {
        $base_table = $table;
        break;
      }
      // Check whether the table has a foreign key to views_save.id. If it
      // does, do not run this check again as we found a base table and only
      // views_save can trump that.
      if (!$base_table) {
        // The schema is cached.
        $schema = drupal_get_schema($table);
        if (isset($schema['foreign keys'])) {
          foreach ($schema['foreign keys'] as $relation) {
            if ($relation['table'] === 'views_save' && count($relation['columns']) == 1 && reset($relation['columns']) == 'id') {
              $base_table = $table;
              $join_field = key($relation['columns']);
            }
          }
        }
      }
    }
  }
  // If we found nothing, fail with an exception.
  if (!$base_table) {
    throw new Exception(t('Query tagged for saved view access but there is no saved view id. Add foreign keys to views_save.id in schema to fix.'));
  }

  // Find all instances of the base table being joined -- could appear more than
  // once in the query, and could be aliased.

  $filter = ($type == 'entity') ? db_and() : $query;
  foreach ($tables as $alias => $tableinfo) {
    $table = $tableinfo['table'];
    if (!($table instanceof SelectQueryInterface) && $table == $base_table) {
      $sub = $filter;
      if ($type == 'entity') {
        // Set a common alias for entities.
        $base_alias = $alias;
        $join_field = 'entity_id';
      }
      if ($table != 'views_save') {
        $sub = db_select('views_save', 'vs')
          ->fields('vs', array('id'))
          ->where("$alias.$join_field = vs.id");
        $alias = 'vs';
      }

      if (!$account->uid || !user_access('view own unpublished views_save')) {
        $sub->condition("$alias.status", 1);
      }
      else {
        $or = db_or();
        $or->condition("$alias.status", 1);
        $or->condition("$alias.uid", $account->uid);
        $sub->condition($or);
      }

      if ($table != 'views_save') {
        $filter->exists($sub);
      }
    }
  }

  if ($type == 'entity') {
    // All the access conditions are only for field values belonging to saved
    // views.
    $filter->condition("$base_alias.entity_type", 'views_save');
    $or = db_or();
    $or->condition($filter);
    // If the field value belongs to a non-node entity type then this function
    // does not do anything with it.
    $or->condition("$base_alias.entity_type", 'views_save', '<>');
    // Add the compiled set of rules to the query.
    $query->condition($or);
  }
}

/**
 * Form constructor for the "Save view" form.
 *
 * @param view $view
 *   The view which would be saved.
 * @param array $options
 *   The options as set in the area handler.
 * @param Entity $save
 *   If editing an existing saved view, the saved view to edit. NULL otherwise.
 *
 * @see views_save_form_validate()
 * @see views_save_form_submit()
 *
 * @ingroup forms
 */
function views_save_form(array $form, array &$form_state, view $view, array $options) {
  // Don't show the form if the user has no access.
  if (!user_access('create views_save')) {
    return array();
  }
  global $user;
  // Also hide it for anonymous users, if the area handler was configured this
  // way.
  if (!$user->uid && $options['anonymous'] == 'hide') {
    return array();
  }

  // Save arguments in the form state.
  $form_state['view'] = $view;
  $form_state['options'] = $options;

  // Attach necessary scripts (and style) to the form for the popup.
  $form['#attached']['css'][] = drupal_get_path('module', 'views_save') . '/views_save.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'views_save') . '/views_save.js';
  $form['#attributes']['class'][] = 'views-save-form';
  $js_settings['views_save']['modal_title'] = t('Save view');
  $js_settings['views_save']['modal_settings'] = array(
    'modalSize' => array(
      'type' => 'fixed',
      'width' => 250,
      'height' => 170,
    ),
    'modalOptions' => array(
      'opacity' => 0.85,
      'background' => '#000',
    ),
    'animation' => 'fadeIn',
    'modalTheme' => 'ViewsSavePopup',
    'closeText' => t('Close'),
  );
  $js_settings['views_save']['modal_theme'] = theme('views_save_modal');
  $form['#attached']['js'][] = array(
    'data' => $js_settings,
    'type' => 'setting',
  );
  $form['#pre_render'][] = 'views_save_include_ctools_modal';


  // Set up the path/query combination that identifies this view.
  $query = drupal_get_query_parameters($_GET, array('q', 'page', 'views_save'));
  ksort($query);
  $uri['path'] = current_path();
  $uri['options'] = array();
  if ($query) {
    $uri['options']['query'] = $query;
  }

  // If we got here from an existing saved view, we want to edit it only if it
  // was created by the current user, or if the current user is an admin. (It
  // could also be a published view from another user.)
  if (!empty($_GET['views_save'])) {
    $save = views_save_load($_GET['views_save']);
    if (!$save || ($save->uid != $user->uid && !user_access('administer views_save'))) {
      $save = NULL;
    }
  }
  if (empty($save)) {
    $properties = array(
      'uid' => $user->uid,
      'bundle' => $options['bundle'],
      'view_path' => $uri,
      'title' => '',
      'status' => 0,
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
    );
    $save = entity_create('views_save', $properties);
  }
  $form_state['entity'] = $save;

  if (!empty($options['help_text'])) {
    $form['help'] = array(
      '#markup' => $options['help_text'],
      '#prefix' => '<div class="views-save-help">',
      '#suffix' => '</div>',
    );
  }
  $form['title'] = array(
    '#type' => 'textfield',
    '#size' => 28,
    '#default_value' => $save->title,
  );

  if (module_exists('path')) {
    $path = array();
    if (!empty($save->id)) {
      $conditions = array('source' => 'views-save/' . $save->id);
      $path = path_load($conditions);
      if ($path === FALSE) {
        $path = array();
      }
    }
    $path += array(
      'pid' => NULL,
      'source' => isset($save->id) ? 'views-save/' . $save->id : NULL,
      'alias' => '',
      'language' => LANGUAGE_NONE,
    );

    $form['path'] = array(
      '#type' => 'fieldset',
      '#title' => t('URL path settings'),
      '#collapsible' => TRUE,
      '#collapsed' => empty($path['alias']),
      '#attributes' => array(
        'class' => array('path-form', 'element-invisible'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'path') . '/path.js'),
      ),
      '#access' => user_access('create url aliases') || user_access('administer url aliases'),
      '#weight' => 30,
      '#tree' => TRUE,
      '#element_validate' => array('path_form_element_validate'),
    );
    $form['path']['alias'] = array(
      '#type' => 'textfield',
      '#title' => t('URL alias'),
      '#default_value' => $path['alias'],
      '#maxlength' => 255,
      '#description' => t("Optionally specify an alternative URL by which this saved view can be accessed. Use a relative path and don't add a trailing slash or the URL alias won't work."),
    );
    $form['path']['pid'] = array('#type' => 'value', '#value' => $path['pid']);
    $form['path']['source'] = array('#type' => 'value', '#value' => $path['source']);
    $form['path']['language'] = array('#type' => 'value', '#value' => $path['language']);
  }

  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields'),
    '#attributes' => array(
      'class' => array('element-invisible'),
    ),
  );
  field_attach_form('views_save', $save, $form['fields'], $form_state);

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('OK'),
    '#attributes' => array('class' => array('views-save-button-submit')),
    '#ajax' => array(
      'callback' => 'views_save_form_ajax_callback',
      'wrapper' => 'views-save-form',
    ),
  );
  $uri['options']['entity_type'] = 'views_save';
  $uri['options']['entity'] = $save;
  $uri['options']['attributes']['class'][] = 'views-save-cancel';
  $form['actions']['cancel']['#markup'] = l(t('Cancel'), $uri['path'], $uri['options']);

  if (empty($options['button_text'])) {
    $options['button_text'] = t('Save');
  }
  $form['save'] = array(
    '#type' => 'button',
    '#value' => $options['button_text'],
    '#attributes' => array('class' => array('element-invisible', 'views-save-button-save')),
  );

  return $form;
}

/**
 * Form validation handler for views_save_form().
 *
 * @see views_save_form_submit()
 */
function views_save_form_validate($form, &$form_state) {
  field_attach_form_validate('views_save', $form_state['entity'], $form['fields'], $form_state);
}

/**
 * Form submission handler for views_save_form().
 *
 * @see views_save_form_validate()
 */
function views_save_form_submit($form, &$form_state) {
  // Handle re-saves of the same view with a new title. (Code will also be
  // triggered by a normal create, but unsetting the ID won't have an effect.)
  $save = $form_state['entity'];
  if ($save->title != $form_state['values']['title']) {
    $save->title = $form_state['values']['title'];
    unset($save->id);
  }

  // Key under which the view will be filed for an anonymous user. This serves
  // two purposes at once: it prevents single anonymous users from creating
  // saved views that would violate the (uid, bundle, title) unique constraint;
  // and it allows us to easily revert to the old title if we have to change it
  // due to that same constraint (see below).
  $session_key = $save->bundle . ' ' . $save->title;

  // Check the unique constraint and overwrite old saved view if applicable.
  if (empty($save->id)) {
    $sql = 'SELECT id, created FROM {views_save} WHERE uid = :uid AND bundle = :bundle AND title = :title';
    $variables = array(
      ':uid' => $save->uid,
      ':bundle' => $save->bundle,
      ':title' => $save->title,
    );
    $old = db_query($sql, $variables)->fetchAssoc();
    if ($old) {
      // For anonymous users, we can only overwrite the previous saved view if
      // it was created by the same user.
      if ($save->uid || (!empty($_SESSION['views_save'][$session_key]) && $_SESSION['views_save'][$session_key] == $old)) {
        $save->id = $old['id'];
        $save->created = $old['created'];
      }
      else {
        // Since the old save was created by a different anonymous users, this
        // should conceptually be possible, but we're restricted by anonymous
        // users not having UIDs. So, as a workaround we make the title unique.
        // When associating the saved view with the new user (if they later
        // register), we remove that suffix again.
        // @see views_save_user_insert()
        $i = 0;
        $variables[':title'] = $save->title . ' --' . (++$i);
        while (db_query($sql, $variables)->fetchField()) {
          $variables[':title'] = $save->title . ' --' . (++$i);
        }
        $save->title = $variables[':title'];
      }
    }
  }

  field_attach_submit('views_save', $form_state['entity'], $form['fields'], $form_state);

  // Save the view. The entity is only new if we didn't set an ID at some point.
  unset($save->is_new);
  $ret = $save->save();

  if (!empty($form_state['values']['path'])) {
    $path = $form_state['values']['path'];
    $path['alias'] = trim($path['alias']);
    // Delete old alias if user erased it.
    if (!empty($path['pid']) && empty($path['alias'])) {
      path_delete($path['pid']);
    }
    elseif (!empty($path['alias'])) {
      // Ensure fields for programmatic executions.
      $path['source'] = 'views-save/' . $save->id;
      $path['language'] = LANGUAGE_NONE;
      path_save($path);
    }
  }

  // For anonymous users, show the popup configured in the options.
  if ($save->uid == 0) {
    $_SESSION['views_save'][$session_key] = $save->id;

    $options = $form_state['options'];
    // Copied from views_handler_area_text::render().
    $format = isset($options['format']) ? $options['format'] : filter_default_format();
    $value = $options['content'];
    if ($options['tokenize']) {
      $value = $form_state['view']->style_plugin->tokenize_value($value, 0);
    }
    if ($value) {
      $message = check_markup($value, $format, '', FALSE);
    }
    else {
      $vars = array(
        '@login-url' => url('user/login'),
        '@register-url' => url('user/register'),
      );
      $message = t('You need an account to save views. <a href="@login-url">Login</a> or <a href="@register-url">register</a> now to save this view permanently.', $vars);
    }

    drupal_set_message($message, 'warning');
    return;
  }

  // Otherwise, show a message and stay on the page.
  if ($ret) {
    drupal_set_message(t('The view was successfully saved.'));
  }
  else {
    drupal_set_message(t('The view could not be saved.', 'error'));
  }
}

/**
 * AJAX callback for views_save_form().
 */
function views_save_form_ajax_callback(array $form, array &$form_state) {
  return form_get_errors() ? $form : array('#theme' => 'status_messages');
}

/**
 * Function for including CTools' modal library.
 */
function views_save_include_ctools_modal(array $form) {
  ctools_include('modal');
  ctools_modal_add_js();

  return $form;
}

/**
 * Returns HTML for the modal "Save view" popup.
 */
function theme_views_save_modal() {
  $html =
'<div id="ctools-modal" class="popups-box">
  <div class="ctools-modal-content views-save-modal-content">
    <div class="popups-container">
      <div class="modal-header popups-title">
        <span id="modal-title" class="modal-title"></span>
        <span class="popups-close close">' . t('Close') . '</span>
        <div class="clear-block"></div>
      </div>
      <div class="modal-scroll"><div id="modal-content" class="modal-content popups-body"></div></div>
    </div>
  </div>
</div>';

  return $html;
}

/**
 * Implements hook_action_info().
 */
function views_save_action_info() {
  return array(
    'views_save_publish' => array(
      'type' => 'views_save',
      'label' => t('Publish'),
      'configurable' => FALSE,
      'triggers' => array('any'),
      'behavior' => array('changes_property'),
    ),
    'views_save_unpublish' => array(
      'type' => 'views_save',
      'label' => t('Unpublish'),
      'configurable' => FALSE,
      'triggers' => array('any'),
      'behavior' => array('changes_property'),
    ),
  );
}

/**
 * Publishes the given saved view.
 *
 * Action callback used in views_save_action_info().
 *
 * @param $object
 *   The saved view to publish.
 *
 * @see actions_do()
 */
function views_save_publish($object) {
  $object->status = 1;
}

/**
 * Unpublishes the given saved view.
 *
 * Action callback used in views_save_action_info().
 *
 * @param $object
 *   The saved view to unpublish.
 *
 * @see actions_do()
 */
function views_save_unpublish($object) {
  $object->status = 0;
}
