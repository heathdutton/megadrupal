<?php

/**
 * @file
 * UC CCK Access Tests
 */

class UcCckAccessTestCase extends UbercartTestHelper {

  /** Test field **/
  protected $field;

  /** Test field instance **/
  protected $instance;

  /** Test field value **/
  protected $field_value;

  /** Test node **/
  protected $node;

  public static function getInfo() {
    return array(
      'name' => 'UC CCK Access',
      'description' => 'Ensure that the UC CCK Access functions properly.',
      'group' => 'Ubercart',
    );
  }

  /**
   * Create a test field and set it up for content access.
   */
  public function createField($node_type) {

    $field_name = drupal_strtolower('field_' . $this->randomName());
    $this->field = array(
      'field_name' => $field_name,
      'type' => 'text',
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'node',
      'bundle' => $node_type,
    );
    field_create_instance($this->instance);

    // Shortcut for enabling "per content node access control settings" on admin/structure/types/manage/{$node_type}/access
    $settings = variable_get('content_access_' . $node_type, array());
    $settings['per_node'] = TRUE;
    variable_set('content_access_' . $node_type, $settings);
  }

  /**
   * Overrides DrupalWebTestCase::setUp().
   */
  public function setUp() {
    $modules = array('field', 'text', 'uc_cck_access', 'uc_cck_access_acl', 'acl', 'content_access', 'uc_payment');
    $admin_permissions = array('administer nodes', 'administer content types', 'administer permissions', 'bypass node access', 'grant content access');
    parent::setUp($modules, $admin_permissions);

    $this->drupalLogin($this->adminUser);

    $node_type = 'page';
    $this->createField($node_type);


    // Create a test node of $node_type type.
    $langcode = LANGUAGE_NONE;
    $field_data = array();
    $this->field_value = $field_data[$langcode][0]['value'] = $this->randomName();
    $this->node = $this->drupalCreateNode(array($this->field['field_name'] => $field_data));

    //variable_set('rules_debug', 1);
    //variable_set('rules_debug_log', 1);
  }

  /**
   * Helper function to create product feature (some test). Opens product features page.
   */
  public function uccaCreateProductFeature($product_nid, $entity_fields, $fields = array(), $mode = 'js') {
// @todo: Selenium implementation
//if (!class_exists('DrupalSeleniumWebTestCase')) {
//  drupal_set_message(t('Selenium tests are not displayed because the selenium module is not enabled.'), 'warning', FALSE);
//  return;
//}
// class ... extends DrupalSeleniumWebTestCase ...
//    $this->driver->getElement('css=#edit-field-image-und-0-upload')->sendKeys($image_file_path);
//    $this->driver->getElement('css=#edit-field-image-und-0-upload-button')->click();
    $path = "node/{$product_nid}/edit/features/cck_access/add";
    $edit = array(
      'ucca_default_handler' => 'uc_cck_access_acl_universal_access',
      'delay_type' => 'immediate',
      'duration_type' => 'unlimited',
    );
    foreach ($fields as $key => $value) {
      $edit[$key] = $value;
    }
    if ($mode == 'js') {
      // Javascript enabled
      $this->drupalPostAJAX($path, $edit, 'ucca_default_handler'); // , NULL, array(), array(), NULL, NULL);
      $this->assertText(t('Node id'));
      $edit['handler_form[access_nid]'] = $this->node->nid;
      $this->drupalPostAJAX(NULL, $edit, 'handler_form[access_nid]'); // , NULL, array(), array(), NULL, NULL);
    }
    else { // 'nojs'
      // Javascript disabled
      $this->drupalPost($path, $edit, t('Use handler (update form)'));
      $this->assertText(t('Node id'));
      $edit['handler_form[access_nid]'] = $this->node->nid;
      $this->drupalPost(NULL, $edit, t('Use node id (update fields list)'));
    }
    foreach($entity_fields as $entity_field) {
      $this->assertText($entity_field);
      $edit["handler_form[fields][fields_list][{$entity_field}]"] = $entity_field;
    }
    $this->drupalPost(NULL, $edit, t('Save feature'));

    // Verify that feature is present
    $path = "node/{$product_nid}/edit/features";
    $this->drupalGet($path);
    $this->assertText('Grant access to ', 'The saved CCK access feature is visible.');
  }

  /**
   *
   */
  public function testSettingsPage() {
    // Log in as the administrator and check the controls are present.
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/store/settings/products');
    $this->assertText(t('Default access type'), 'The "Default access type" configuration field is visible to an administrator.');
    $this->assertText(t('Display date format'), 'The "Display date format" configuration field is visible to an administrator.');
    $this->assertText(t('Node item page weight'), 'The "Node item page weight" configuration field is visible to an administrator.');

    // Confirm that posting new values save the variables.
    $date_setting = 'M j Y - H:i';
    $edit = array(
      'ucca_default_handler' => 'uc_cck_access_acl_universal_access',
      'ucca_date_format' => $date_setting,
      'ucca_node_weight' => -11,
    );
    $this->drupalPost(NULL, $edit, t('Save configuration'));

    $this->assertEqual(variable_get('ucca_default_handler', 'UNSET'), 'uc_cck_access_acl_universal_access', t('"Default access type" changed.'));
    $this->assertEqual(variable_get('ucca_date_format', 'UNSET'), $date_setting, t('"Display date format" changed.'));
    $this->assertEqual(variable_get('ucca_node_weight', 'UNSET'), -11, t('"Node item page weight" of recent blog posts changed.'));

    $path = "node/{$this->product->nid}/edit/features/cck_access/add";
    $this->drupalGet($path);
    $this->assertFieldChecked('edit-ucca-default-handler-uc-cck-access-acl-universal-access', 'The default handler is selected.');

    // Check the behavior when '(none)' is selected for the default handler - radio should not be checked
    $edit['ucca_default_handler'] = 0;
    $this->drupalPost('admin/store/settings/products', $edit, t('Save configuration'));
    $this->drupalGet($path);
    $this->assertNoFieldChecked('edit-ucca-default-handler-uc-cck-access-acl-universal-access', 'The handler is not selected.');
  }

  /**
   *
   */
  public function testFieldAccess() {
    // Log in as the administrator and confirm that the field value is present.
    $this->drupalLogin($this->adminUser);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertText($this->field_value, 'The saved field value is visible to an administrator.');

    // Log in as the customer and confirm that the field value is present.
    $this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertText($this->field_value, 'The saved field value is visible to a customer.');

    // Log in as the administrator and create product feature
    $this->drupalLogin($this->adminUser);

    $this->uccaCreateProductFeature($this->product->nid, array($this->field['field_name']), array(), 'js');
    $this->assertText($this->field['field_name'], 'The field is present in the CCK access feature.');

    // Confirm that the field value is present for an administrator.
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertText($this->field_value, 'The saved field value is visible to an administrator.');

    // Log in as the customer and confirm that the field value is NOT present.
    $this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertNoText($this->field_value, 'The saved field value is NOT visible to a customer.');

  }

  /**
   *
   */
  public function testFieldAccessNojsAndDelete() {
    // Log in as the administrator and confirm that the field value is present.
    $this->drupalLogin($this->adminUser);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertText($this->field_value, 'The saved field value is visible to an administrator.');

    // ... and create product feature
    $this->uccaCreateProductFeature($this->product->nid, array($this->field['field_name']), array(), 'nojs');
    $this->assertText($this->field['field_name'], 'The field is present in the CCK access feature.');

    // Test that we can delete the product feature
    $this->clickLink(t('delete'));
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->drupalGet("node/{$this->product->nid}/edit/features");
    //$this->assertNoText('Grant access to ', 'The CCK access feature is deleted.');
    $this->assertText(t('No features found for this product.'), 'The CCK access feature is deleted.');

    // Log in as the customer and confirm that the field value is present...
    $this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertText($this->field_value, 'The saved field value is visible to a customer.');

    // ... and the ACL record is deleted.
    $this->drupalLogin($this->adminUser);
    $acl_id = 2; // @todo - hardcoded... depends on pe-history (DB autoincrement) need to retrieve actual id to be not brittle.
    $this->drupalGet("node/{$this->node->nid}/access");
    $this->assertNoFieldByName("uc_cck_access_acl[view][{$acl_id}][delete_all]", NULL, 'ACL record is not present.');
  }

  /**
   * Creates a new order.
   */
  function createOrder($fields = array()) {
    $order = uc_order_new();
    foreach ($fields as $key => $value) {
      $order->$key = $value;
    }

    if (empty($order->primary_email)) {
      $order->primary_email = $this->randomString() . '@example.org';
    }

    if (!isset($fields['products'])) {
      $item = clone $this->product;
      $item->qty = 1;
      $item->price = $item->sell_price;
      $item->data = array();
      $order->products = array($item);
    }

    $order->order_total = uc_order_get_total($order, TRUE);
    $order->line_items = uc_order_load_line_items($order, TRUE);
    uc_order_save($order);

    return $order;
  }

  public function enableModules($modules) {
    $success = module_enable($modules);
    $this->assertTrue($success, t('Enabled modules: %modules', array('%modules' => implode(', ', $modules))));
    $this->resetAll();

    // Run cron once in that environment, as install.php does at the end of
    // the installation process.
    drupal_cron_run();
  }

  public function checkEmail($min_emails) {
    $mails = $this->drupalGetMails();
    $this->assert(count($mails) >= $min_emails, count($mails) . ' e-mail(s) was sent.');
    if (count($mails) > $min_emails) {
      foreach ($mails as $n => $mail) {
        debug('Email ' . ($n + 1) . ' Subject: ' . $mail['subject'] . ' module: '. $mail['module']);
      }
    }
    variable_del('drupal_test_email_collector');
  }

  public function testCheckout() {
    // Log in as the administrator and create product feature.
    $this->drupalLogin($this->adminUser);
    $this->uccaCreateProductFeature($this->product->nid, array($this->field['field_name']), array(), 'nojs');

    // Log in as the customer and confirm that the field value is NOT present.
    $this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertNoText($this->field_value, 'The saved field value is NOT visible to a customer.');

    // Create order for the customer
    $order_data = array('primary_email' => 'simpletest@ubercart.org', 'uid' => $this->customer->uid);
    $order = $this->createOrder($order_data);
    $receipt_id = uc_payment_enter($order->order_id, 'SimpleTest', $order->order_total);
    //$output = uc_cart_complete_sale($order);
    //$order = uc_order_load($order->order_id);
    //$this->assertEqual($order->order_status, 'payment_received', 'Order was set to payment received.');

    // e-mails: 1. admin order notification, 2. customer invoice
    $this->checkEmail(1);

    // Check that access is granted to the customer (confirm that the field value is present).
    //$this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertText($this->field_value, 'The saved field value is visible to a customer.');

    // Check that customer can see premium content on account page tab (confirm that the node name is present).
    $this->drupalGet("user/{$this->customer->uid}/content_orders");
    $this->assertText($this->node->title, 'The node title is visible to a customer.');
    $this->assertText(t('(access granted)'), 'The node grant is visible to a customer.');
    $this->assertText(t('(unlimited time)'), 'The node grant is visible to a customer.');
  }

  /**
   * A worker code for few tests. Verifies delayed grant and expiration timer.
   */
  public function verifyDelayAndExpiration($min_emails = 1) {
    // Log in as the administrator and create product feature with delay and expiration.
    $this->drupalLogin($this->adminUser);
    $this->uccaCreateProductFeature($this->product->nid, array($this->field['field_name']), array(
        'delay_type' => 'period',
        'delay_period_value' => 2,
        'delay_period_unit' => 'seconds',
        'duration_type' => 'period',
        'duration_period_value' => 2,
        'duration_period_unit' => 'seconds',
      ), 'nojs');

    // Create order for the customer
    $order_data = array('primary_email' => 'simpletest@ubercart.org', 'uid' => $this->customer->uid);
    $order = $this->createOrder($order_data);
    $receipt_id = uc_payment_enter($order->order_id, 'SimpleTest', $order->order_total);
    //$output = uc_cart_complete_sale($order);
    //$order = uc_order_load($order->order_id);
    //$this->assertEqual($order->order_status, 'payment_received', 'Order was set to payment received.');

    // Check e-mails
    $this->checkEmail($min_emails);

    // Check that access is NOT YET granted to the customer (confirm that the field value is NOT present).
    $this->cronRun();
    $this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertNoText($this->field_value, 'The saved field value is NOT visible to a customer.');

    // Check that customer can see premium content and access schedule on account page tab.
    $this->drupalGet("user/{$this->customer->uid}/content_orders");
    $this->assertText($this->node->title, 'The node title is visible to a customer.');
    $this->assertNoText(t('(access granted)'), 'The node grant is visible to a customer.');
    $this->assertNoText(t('(unlimited time)'), 'The node grant is visible to a customer.');

    // Check that access is granted to the customer after delay (confirm that the field value is present).
    sleep(3);
    $this->cronRun();
    $this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertText($this->field_value, 'The saved field value is visible to a customer.');

    // Check that customer can see premium content and access schedule on account page tab.
    $this->drupalGet("user/{$this->customer->uid}/content_orders");
    $this->assertText($this->node->title, 'The node title is visible to a customer.');
    $this->assertText(t('(access granted)'), 'The node grant is visible to a customer.');
    $this->assertNoText(t('(unlimited time)'), 'The node grant is visible to a customer.');

    // Check that access is revoked from the customer after another delay (confirm that the field value is NOT present).
    sleep(2);
    $this->cronRun();
    $this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertNoText($this->field_value, 'The saved field value is NOT visible to a customer.');

    // Check that customer can NOT see premium content that has expired.
    $this->drupalGet("user/{$this->customer->uid}/content_orders");
    $this->assertNoText($this->node->title, 'The node title is visible to a customer.');
    $this->assertText(t('You have no premium items.'), 'The node grant is visible to a customer.');
    // @todo: Bad UX. We should show the item to the user and say 'expired'. Our data model does not support it, so the feature will need big work.
  }

  public function testCron() {
    $this->verifyDelayAndExpiration();
  }

  public function testDateApi() {
    $this->enableModules(array('date_api'));
    $this->verifyDelayAndExpiration();
  }

  public function testDateApiPopup() {
    $this->enableModules(array('date_api', 'date_popup'));
    $this->verifyDelayAndExpiration();
  }

  public function testFieldOnProduct() {
    $node_type = $this->product->type;
    $this->createField($node_type);

    // Create a test field on the product.
    $langcode = LANGUAGE_NONE;
    $field_data = array();
    $this->field_value = $field_data[$langcode][0]['value'] = $this->randomName();
    $this->product->{$this->field['field_name']} = $field_data;
    node_save($this->product);
    $this->node = $this->product = node_load($this->product->nid);

    // Log in as the administrator and create product feature
    $this->drupalLogin($this->adminUser);

    $this->uccaCreateProductFeature($this->product->nid, array($this->field['field_name']), array(), 'nojs');
    $this->assertText($this->field['field_name'], 'The field is present in the CCK access feature.');

    // Confirm that the field value is present for an administrator.
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertText($this->field_value, 'The saved field value is visible to an administrator.');

    // Log in as the customer and confirm that the field value is NOT present.
    $this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertNoText($this->field_value, 'The saved field value is NOT visible to a customer.');

    // Create order for the customer
    $order_data = array('primary_email' => 'simpletest@ubercart.org', 'uid' => $this->customer->uid);
    $order = $this->createOrder($order_data);
    $receipt_id = uc_payment_enter($order->order_id, 'SimpleTest', $order->order_total);
    //$output = uc_cart_complete_sale($order);
    //$order = uc_order_load($order->order_id);
    //$this->assertEqual($order->order_status, 'payment_received', 'Order was set to payment received.');

    // 1 e-mail: customer invoice
    $this->checkEmail(1);

    // Check that access is granted to the customer (confirm that the field value is present).
    //$this->drupalLogin($this->customer);
    $this->drupalGet("node/{$this->node->nid}");
    $this->assertText($this->field_value, 'The saved field value is visible to a customer.');
  }

}
