<?php

/**
 * @file
 * Module to implement share counts and callbacks functionality.
 */

/**
 * Implements hook_help().
 */
function social_share_statistics_help($path, $arg) {
  switch ($path) {
    case 'admin/help#social_share_statistics':
      $output = file_get_contents(drupal_get_path('module', 'social_share_statistics') . '/README.txt');
      return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $output)) : '<pre>' . check_plain($output) . '</pre>';
  }
}

/**
 * Implements hook_block_info().
 */
function social_share_statistics_block_info() {
  $blocks = array();

  $blocks['social_share_statistics_buttons'] = array(
    'info' => t('Social Share Statistics Buttons'),
    'properties' => array(
      'administrative' => FALSE,
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function social_share_statistics_block_view($delta = '') {
  $node = menu_get_object();
  if (node_is_page($node) && isset($node->entity_view_prepared)) {
    $block = array();
    $items = social_share_statistics_buttons_content();
    switch ($delta) {
      case 'social_share_statistics_buttons':
        $block['subject'] = '';
        $block['content'] = array(

          '#theme' => 'social_share_statistics_custom_block',
          '#items' => $items,
          '#attached' => array(
            'css' => array(
              drupal_get_path('module', 'social_share_statistics') . '/social_share_statistics.css',
            ),
            'js' => array(
              array(
                'data' => array(
                  'api' => variable_get("social_share_statistics_fbapi"),
                  'token' => drupal_get_token('social_share_statistics_token'),
                ),
                'type' => 'setting',
              ),
              array(
                'type' => 'file',
                'scope' => 'footer',
                'weight' => '4',
                'data' => drupal_get_path('module', 'social_share_statistics') . '/js/social_share_statistics_callback.js',
              ),
              array(
                'type' => 'file',
                'scope' => 'footer',
                'weight' => '5',
                'data' => drupal_get_path('module', 'social_share_statistics') . '/js/twitter.js',
              ),
              array(
                'type' => 'file',
                'scope' => 'footer',
                'weight' => '6',
                'data' => drupal_get_path('module', 'social_share_statistics') . '/js/fb.js',
              ),
            ),
          ),
        );
        break;
    }
    return $block;
  }
}

/**
 * Function to initialize variables inside the block.
 */
function social_share_statistics_buttons_content() {

  $nid = social_share_statistics_get_nid();
  $items = array();
  $fb_count = $twt_count = 0;

  $fb_count = db_query('SELECT SUM ( fb ) FROM {social_share_statistics} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
  $twt_count = db_query('SELECT SUM ( twitter ) FROM {social_share_statistics} WHERE nid = :nid', array(':nid' => $nid))->fetchField();

  $items['fb_count'] = number_format($fb_count);
  $items['twitter_count'] = number_format($twt_count);

  $items['total_shares'] = number_format($fb_count + $twt_count);

  $via = variable_get('social_share_statistics_twtname');
  $items['total_shares_display'] = variable_get('social_share_statistics_shares');
  $items['count_text'] = check_plain(variable_get('social_share_statistics_text'));
  $items['api'] = variable_get("social_share_count_fbapi");

  $items['fb_imagepath'] = '<img style="cursor:pointer;" alt="share this page" src="' . url('sites/all/modules/social_share_statistics/facebook-icon.png', array('absolute' => TRUE)) . '" onclick="fb_callout();">';

  $items['twitter_share'] = l(t('Tweet'), 'https://twitter.com/share', array(
    'attributes' => array(
      'class' => 'twitter-share-button',
      'data-url' => url(NULL, array('absolute' => TRUE)),
      'data-via' => $via,
      'data-text' => drupal_get_title(),
      'data-count' => 'none',
    ),
    )
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function social_share_statistics_theme($existing, $type, $theme, $path) {
  return array(
    'social_share_statistics_custom_block' => array(
      'template' => 'social-share-statistics-block',
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * Get the Node Id.
 */
function social_share_statistics_get_nid() {
  $node = menu_get_object();
  return $node->nid;
}

/**
 * Implements hook_menu().
 */
function social_share_statistics_menu() {
  $items = array();

  $items['admin/config/social_share_statistics'] = array(
    'title' => 'Social Share Statistics',
    'description' => 'Configuration for Facebook API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_share_statistics_engine_settings_form'),
    'file' => 'social_share_statistics.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%/twitter/success/%'] = array(
    'page callback' => 'social_share_statistics_csrf_token_check',
    'page arguments' => array('twitter',1,4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['node/%/fb/success/%'] = array(
    'page callback' => 'social_share_statistics_csrf_token_check',
    'page arguments' => array('fb',1,4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements CSRF Token validation.
 */
function social_share_statistics_csrf_token_check($args, $nodeid, $token) {
  $valid = drupal_valid_token($token, 'social_share_statistics_token');
  if ($valid) {
    social_share_statistics_update($args, $nodeid);
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Implements hook_node_delete().
 */
function social_share_statistics_node_delete($node) {
  db_delete('social_share_statistics')->condition('nid', $node->nid)->execute();
}

/**
 * Function to update count on database.
 */
function social_share_statistics_update($args, $nid) {

  global $user;
  $db_name = 'social_share_statistics';

  $result = db_select('social_share_statistics', 's')
  ->fields('s')
  ->condition('nid', $nid, '=')
  ->condition('uid', $user->uid, '=')
  ->execute()
  ->fetchAssoc();
  $share_count = $result[$args];

  if ($result) {
    db_update('social_share_statistics')
    ->fields(array(
    $args => $share_count + 1,
    ))
    ->condition('nid', $nid, '=')
    ->condition('uid', $user->uid, '=')
    ->execute();

    drupal_goto('node/' . $nid);
  }

  if (!$result) {
    switch ($args) {
      case "fb":
        $data = array(
          'uid' => $user->uid,
          'nid' => $nid,
          'timestamp' => REQUEST_TIME,
          'fb' => '1',
          'twitter' => '0',
          'gplus' => '0',
        );
        break;

      case "twitter":
        $data = array(
          'uid' => $user->uid,
          'nid' => $nid,
          'timestamp' => REQUEST_TIME,
          'fb' => '0',
          'twitter' => '1',
          'gplus' => '0',
        );
        break;
    }

    try {
      drupal_write_record($db_name, $data);
      drupal_goto('node/' . $nid);
    }
    catch (PDOException $pe) {
      watchdog('social_share_statistics', 'Error inserting data to database', NULL, WATCHDOG_ERROR, NULL);
    }
  }
  drupal_set_message(t('Thank You! You have shared successfully'));
}
