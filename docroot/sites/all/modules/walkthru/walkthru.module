<?php
/**
 * Implements hook_init().
 */
function walkthru_init() {
  $guider_library = libraries_get_path('guiders-redndahead');
  if (!empty($guider_library)) {
    // Load the guider library
    drupal_add_js($guider_library . '/guiders.js');
    drupal_add_css($guider_library . '/guiders.css');

    // Load the walkthru javascript
    $path = drupal_get_path('module', 'walkthru');
    drupal_add_js($path . '/walkthru.js', array('weight' => 20));

    // Load our settings from the session variable.
    $settings = array(
      'walkthru' => array(
        'continue' => FALSE,
        'name' => NULL,
        'minimized' => FALSE,
        'loading' => FALSE,
      ),
    );

    if (isset($_SESSION['walkthru'])) {
      $settings['walkthru']['continue'] = TRUE;
      $settings['walkthru']['name'] = $_SESSION['walkthru']['name'];
      $settings['walkthru']['minimized'] = (isset($_SESSION['walkthru']['minimized']) && $_SESSION['walkthru']['minimized']) ? TRUE : FALSE;
      $settings['walkthru']['step_name'] = $_SESSION['walkthru']['step_name'];
    }

    drupal_add_js($settings, 'setting');
  }
}

/**
 * Implements hook_permission().
 */
function walkthru_permission() {
  return array(
    'administer walkthru' => array(
      'title' => t('Administer Walkthru'),
      'description' => t('Perform administration tasks for Walkthrus'),
    ),
    'access walkthru' => array(
      'title' => t('Access Walkthru'),
      'description' => t('Can see walkthrus in action'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function walkthru_menu() {
  $items = array();

  $items['admin/structure/walkthru'] = array(
    'title' => 'Walkthrus',
    'description' => 'Manage walkthrus.',
    'page callback' => 'walkthru_list',
    'file' => 'walkthru.admin.inc',
    'access arguments' => array('administer walkthru'),
  );

  $items['admin/structure/walkthru/list'] = array(
    'title' => 'List',
    'description' => 'Manage walkthrus',
    'page callback' => 'walkthru_list',
    'file' => 'walkthru.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer walkthru'),
    'weight' => -11,
  );

  $items['admin/structure/walkthru/add'] = array(
    'title' => 'Add',
    'description' => 'Add a walkthru.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkthru_add_form'),
    'file' => 'walkthru.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer walkthru'),
    'weight' => -10,
  );

  $items['admin/structure/walkthru/edit/%walkthru'] = array(
    'title' => 'Walkthrus',
    'description' => 'Edit a walkthru.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkthru_add_form', 4),
    'file' => 'walkthru.admin.inc',
    'access arguments' => array('administer walkthru'),
  );

  $items['admin/structure/walkthru/delete/%walkthru'] = array(
    'title' => 'Delete a Walkthru',
    'description' => 'Delete a walkthru.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkthru_delete_confirm_form', 4),
    'file' => 'walkthru.admin.inc',
    'access arguments' => array('administer walkthru'),
  );

  $items['admin/structure/walkthru/%walkthru'] = array(
    'title' => 'Manage steps',
    'description' => 'Manage steps.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkthru_steps_manage_form', 3),
    'file' => 'walkthru.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer walkthru'),
  );

  $items['admin/structure/walkthru/%walkthru/add'] = array(
    'title' => 'Add',
    'description' => 'Add a step to a walkthru.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkthru_step_add_form', 3),
    'file' => 'walkthru.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer walkthru'),
  );

  $items['admin/structure/walkthru/%walkthru/edit/%walkthru_step'] = array(
    'title' => 'Edit a step',
    'description' => 'Edit a step within a walkthru',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkthru_step_add_form', 3, 5),
    'file' => 'walkthru.admin.inc',
    'access arguments' => array('administer walkthru'),
  );

  $items['admin/structure/walkthru/%walkthru/delete/%walkthru_step'] = array(
    'title' => 'Delete Walkthru Step',
    'description' => 'Delete a walkthru step.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkthru_step_delete_confirm_form', 3, 5),
    'file' => 'walkthru.admin.inc',
    'access arguments' => array('administer walkthru'),
  );

  $items['walkthru/ajax/current/%'] = array(
    'title' => 'Walkthru ajax current',
    'description' => 'Save the current step id.',
    'page arguments' => array(3),
    'page callback' => 'walkthru_ajax_current',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['walkthru/ajax/load'] = array(
    'title' => 'Walkthru ajax load',
    'description' => 'Load a walkthru.',
    'page callback' => 'walkthru_ajax_load',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['walkthru/ajax/load/%'] = array(
    'title' => 'Walkthru ajax load',
    'description' => 'Load a walkthru.',
    'page arguments' => array(3),
    'page callback' => 'walkthru_ajax_load',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['walkthru/ajax/close'] = array(
    'title' => 'Walkthru',
    'description' => 'Remove walkthru from session variable.',
    'page callback' => 'walkthru_ajax_close',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['walkthru/ajax/minimize/%'] = array(
    'title' => 'Walkthru ajax minimize',
    'description' => 'Determine if a walkthru is minimized or not.',
    'page arguments' => array(3),
    'page callback' => 'walkthru_ajax_minimize',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function walkthru_theme() {
  $items['walkthru_steps_manage_form'] = array(
    'render element' => 'form',
    'file' => 'walkthru.admin.inc',
  );

  return $items;
}

/**
 * Load a walkthru by name
 */
function walkthru_load($walkthru_name) {
  return db_select('walkthru', 'w')
    ->fields('w')
    ->condition('name', $walkthru_name)
    ->execute()
    ->fetchObject();
}

/**
 * Load a walkthru step by name
 */
function walkthru_step_load($walkthru_step_name) {
  return db_select('walkthru_steps', 'ws')
    ->fields('ws')
    ->condition('name', $walkthru_step_name)
    ->execute()
    ->fetchObject();
}

/**
 * Set the session variable of what the current step is.
 */
function walkthru_ajax_current($walkthru_step_name) {
  $_SESSION['walkthru']['step_name'] = $walkthru_step_name;
  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
  print drupal_json_encode(array(
    'status' => TRUE,
  ));

  // Let's call drupal_page_footer(), so even page cache can work.
  drupal_page_footer();

  exit();
}

/**
 * Load a walkthru
 */
function walkthru_ajax_load($walkthru_name = NULL) {
  // Use the last walkthru name if one is not defined.
  if (is_null($walkthru_name) && !empty($_SESSION['walkthru']['name'])) {
    $walkthru_name = $_SESSION['walkthru']['name'];
  }

  $total = '';
  $walkthru = '';
  if (!empty($walkthru_name)) {
    // Set cache id
    $cid = 'walkthru-' . $walkthru_name;
    // Checking if the data exists in the cache
    $cached_walkthru = cache_get($cid, 'cache_walkthru');

    $walkthru = array();
    // Creating the walkthru step array because we couldn't find the cached version
    $cached_walkthru = '';
    if (empty($cached_walkthru)) {
      // Load steps
      $results = db_select('walkthru_steps', 'ws')
        ->fields('ws')
        ->condition('walkthru_name', $walkthru_name, '=')
        ->orderBy('weight', 'ASC')
        ->execute();

      // Creating the js and attaching the library
      $total = $results->rowCount();
      if ($total > 0) {
        // Easier if we put our data into an array.
        $steps = array();
        foreach($results as $step) {
         $steps[] = $step;
        }

        for($i=0; $i < $total; $i++) {
          $data = unserialize($steps[$i]->data);

          // Add some defaults
          $data += array(
            'button_minimize_text' => 'Minimize',
            'button_previous_text' => 'Previous',
            'button_next_text' => 'Next',
            'button_close_text' => 'Close',
          );

          $desc = check_markup($data['desc']['value'], $data['desc']['format']);

          // Making the desc field be one liner
          $desc = preg_replace("/\r?\n/", "<br />", $desc);
          $walkthru[$data['machine_name']] = array(
            'id' => $data['machine_name'],
            'title' => check_plain($data['title']),
            'description' => $desc,
          );

          // attachTo
          if (!empty($data['attach'])) {
            $walkthru[$data['machine_name']]['attachTo'] = $data['attach'];
          }

          // Position
          if (!empty($data['attach']) && !empty($data['position'])) {
            $walkthru[$data['machine_name']]['position'] = intval($data['position']);
          }

          // Overlay
          if (!empty($data['overlay'])) {
            $walkthru[$data['machine_name']]['overlay'] = $data['overlay'];
          }

          // Width
          if (!empty($data['width'])) {
            $walkthru[$data['machine_name']]['width'] = $data['width'];
          }

          $walkthru[$data['machine_name']]['buttons'][] = array(
            'name' => check_plain($data['button_minimize_text']),
            'onclick' => "Drupal.walkthru.minimize('{$data['machine_name']['next']}');",
          );

          if ($i !== 0) {
            $walkthru[$data['machine_name']]['buttons'][] = array(
              'name' => check_plain($data['button_previous_text']),
              'onclick' => "Drupal.walkthru.show('" . $steps[$i-1]->name . "');",
            );
            $walkthru[$data['machine_name']]['previous'] = $steps[$i-1]->name;
          }

          if ($i < $total -1) {
            $walkthru[$data['machine_name']]['buttons'][] = array(
              'name' => check_plain($data['button_next_text']),
              'onclick' => "Drupal.walkthru.show('" . $steps[$i+1]->name . "');",
            );
            $walkthru[$data['machine_name']]['next'] = $steps[$i+1]->name;
          }

          $walkthru[$data['machine_name']]['buttons'][] = array(
            'name' => check_plain($data['button_close_text']),
            'onclick' => 'Drupal.walkthru.hide();',
          );

          if (!empty($data['force_url'])) {
            $walkthru[$data['machine_name']]['force_url'] = str_replace('\\', '\\/', $data['force_url']);

            $force_url_error_message = check_markup($data['force_url_error_message']['value'], $data['force_url_error_message']['format']);

            // Making the force url error message field be one liner
            $force_url_error_message = preg_replace("/\r?\n/", "<br />", $force_url_error_message);
            $walkthru[$data['machine_name']]['force_url_error_message'] = $force_url_error_message;
          }

        }

        // Setting the data to the cache
        cache_set($cid, $walkthru, 'cache_walkthru', CACHE_TEMPORARY);
      }
    }
    else {
      // Getting the walkthru steps from the cached data
      $walkthru = $cached_walkthru->data;
    }
  }

  // Nothing to send back if there is no walkthru name or there are no steps.
  if (empty($walkthru)) {
    $walkthru = array(
      'status' => FALSE,
    );
  }
  else {
    $_SESSION['walkthru']['name'] = $walkthru_name;
  }

  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');

  print drupal_json_encode($walkthru);

  // Let's call drupal_page_footer(), so even page cache can work.
  drupal_page_footer();

  exit();
}

function walkthru_ajax_close() {
  unset($_SESSION['walkthru']);

  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');

  // Let's call drupal_page_footer(), so even page cache can work.
  drupal_page_footer();

  exit();
}

/**
 * Set the session variable if the walkthru is minimized.
 */
function walkthru_ajax_minimize($minimized) {
  if ($minimized == 'true') {
    $_SESSION['walkthru']['minimized'] = TRUE;
  }
  else {
    $_SESSION['walkthru']['minimized'] = FALSE;
  }

  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
  print drupal_json_encode(array(
    'status' => TRUE,
  ));

  // Let's call drupal_page_footer(), so even page cache can work.
  drupal_page_footer();

  exit();
}

/**
 * Implements hook_views_api().
 */
function walkthru_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'walkthru') . '/views',
  );
}
