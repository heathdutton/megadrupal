<?php

/**
 * @file
 * Enable order permission for uc_order module based on order status.
 */

/**
 * Implements hook_menu().
 */
function uc_order_access_menu() {
  $items['admin/store/settings/orders/access'] = array(
    'title' => 'Permissions',
    'description' => 'Modify and configure order permissions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_order_access_perm_form'),
    'access arguments' => array('administer order permissions'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
    'file' => 'uc_order_access.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function uc_order_access_menu_alter(&$items) {
  foreach ($items as $path => &$item) {
    switch ($path) {
      // @TODO I think that this is a bug of the core, users with access to
      // create or edit orders should also have access to select addresses not
      // only the ones with edit orders.
      case 'admin/store/orders/address_book':
        $item['access callback'] = 'uc_order_access_select_address';
        $item['access arguments'] = array();
        break;
      case 'admin/store/orders':
        $item['access callback'] = 'uc_order_access_view_orders';
        $item['access arguments'] = array();
        break;

      case 'admin/store/orders/%uc_order':
      case 'admin/store/orders/%uc_order/invoice':
      case 'admin/store/orders/%uc_order/invoice/print':
      case 'admin/store/orders/%uc_order/invoice/mail':
      case 'admin/store/orders/%uc_order/log':
        $item['access callback'] = 'uc_order_access_check_access';
        $item['access arguments'] = array(3, 'view order');
        break;

      case 'admin/store/orders/%uc_order/edit':
      case 'admin/store/orders/%uc_order/add_line_item/%':
        $item['access callback'] = 'uc_order_access_check_access';
        $item['access arguments'] = array(3, 'edit order');
        break;

      case 'admin/store/orders/%uc_order/delete':
        $item['access callback'] = 'uc_order_access_check_access';
        $item['access arguments'] = array(3, 'delete order');
        break;
    }
  }
}

/**
 * Access callback for select addresses.
 *
 * @TODO Should be removed when core is fixed.
 */
function uc_order_access_select_address() {
  return user_access('edit orders') || user_access('create orders');
}

/**
 * Check if user has access to view any orders.
 */
function uc_order_access_view_orders() {
  return user_access('view all orders') || user_access('view orders');
}

/**
 * Implements hook_permission().
 */
function uc_order_access_permission() {
  return array(
    'view orders' => array(
      'title' => t('View orders'),
      'description' => t('View orders restricted by status and roles. You can change order access settings <a href="@url">here</a>.', array('@url' => url('admin/store/settings/orders/access'))),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function uc_order_access_theme() {
  return array(
    'uc_order_access_perm_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Helpper function that checks our permissions to standard order permissions.
 */
function _uc_orders_access_overriden_permission_check($string, $account = NULL) {
  $permission_map = array(
    'view order' => array('view all orders'),
    'edit order' => array('edit orders'),
    'delete order' => array('delete orders', 'unconditionally delete orders'),
  );
  if (isset($permission_map[$string])) {
    foreach ($permission_map[$string] as $permission) {
      if (user_access($permission, $account)) {
        return TRUE;
      }
    }
  }
}

/**
 * Determine whether the user has access to order.
 *
 * @param object $order
 *   The order object.
 * @param string $string
 *   The permission, such as "view order", being checked for.
 * @param object $account
 *   (optional) The account to check, if not given use currently logged in user.
 *
 * @return bool
 *   Boolean TRUE if the current user has requested access to the order.
 *
 * @see user_access()
 */
function uc_order_access_check_access($order, $string, $account = NULL) {
  global $user;

  // If no account is provided, get currently logged in user.
  if (!isset($account)) {
    $account = $user;
  }

  // If permission is overriden by default order permission, user has access to
  // order so return immediately.
  // UID 1 has overriden access by default in standard order permissions but not
  // in our custom permission so we need to check it here in case the $string is
  // just one of our own.
  if ($account->uid == 1 || _uc_orders_access_overriden_permission_check($string)) {
    return TRUE;
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  $status = array('id' => $order->order_status);
  if (!isset($perm[$order->order_status][$account->uid])) {
    $permissions = uc_order_access_get_permissions(array($status), $account->roles);

    $perms = array();
    foreach ($permissions[$order->order_status] as $one_role) {
      $perms += $one_role;
    }
    $perm[$order->order_status][$account->uid] = $perms;
  }

  return isset($perm[$order->order_status][$account->uid][$string]);
}

/**
 * Determine the permissions for one or more statuses and roles.
 *
 * @param array $statuses
 *   An array of order statuses like the one returned by uc_order_status_list().
 *
 * @param array $roles
 *   An array whose keys are the role IDs of interest, such as $user->roles.
 *
 * @return array
 *   An array indexed by status ID. Each value is an array whose keys
 *   are the role ID and the value an array with permission as key and
 *   boolean if acccess is granted.
 *
 * @see uc_order_status_list()
 * @see user_role_permissions()
 */
function uc_order_access_get_permissions($statuses = array(), $roles = array()) {
  $cache = &drupal_static(__FUNCTION__, array());

  $role_permissions = $fetch = array();

  if ($statuses) {
    foreach ($statuses as $status) {
      $status_id = $status['id'];
      if ($roles) {
        foreach ($roles as $rid => $name) {
          if (isset($cache[$status_id][$rid])) {
            $role_permissions[$status_id][$rid] = $cache[$status_id][$rid];
          }
          else {
            // Add this rid to the list of those needing to be fetched.
            $fetch[$status_id][] = $rid;
            // Prepare in case no permissions are returned.
            $cache[$status_id][$rid] = array();
          }
        }

        if ($fetch) {
          // Get from the database permissions that were not in the static
          // variable. Only role IDs with at least one permission assigned
          // will return rows.
          //
          // @todo - Find a way to extract all permission in one query.
          //       - Should we use db_query instead of db_select for speed?
          $result = db_select('uc_order_access_permission', 'p')
            ->fields('p', array('order_status_id', 'rid', 'permission'))
            ->condition('order_status_id', $status_id)
            ->condition('rid', $fetch[$status_id])
            ->execute();
          foreach ($result as $row) {
            $cache[$status_id][$row->rid][$row->permission] = TRUE;
          }
          foreach ($fetch[$status_id] as $rid) {
            // For every rid, we know we at least assigned an empty array.
            $role_permissions[$status_id][$rid] = $cache[$status_id][$rid];
          }
        }
      }
    }
  }

  return $role_permissions;
}

/**
 * Change permissions to order in a status for a user role.
 *
 * This function may be used to grant and revoke multiple permissions at once.
 * For example, when a form exposes checkboxes to configure permissions for a
 * role, the form submit handler may directly pass the submitted values for the
 * checkboxes form element to this function.
 *
 * @param string $status_id
 *   The ID of order status.
 * @param int $rid
 *   The ID of a user role to alter.
 * @param array $permissions
 *   An associative array, where the key holds the permission name and the value
 *   determines whether to grant or revoke that permission. Any value that
 *   evaluates to TRUE will cause the permission to be granted. Any value that
 *   evaluates to FALSE will cause the permission to be revoked.
 *   @code
 *     array(
 *       'view order' => 0,                // Revoke 'view order'
 *       'edit order' => FALSE,            // Revoke 'edit order'
 *       'delete order' => 1,              // Grant 'delete order'
 *       'delete order' => TRUE,           // Grant 'delete order'
 *       'delete order' => 'delete order', // Grant 'delete order'
 *     )
 *   @endcode
 *   Existing permissions are not changed, unless specified in $permissions.
 *
 * @see user_role_change_permissions()
 * @see uc_order_access_grant_permissions()
 * @see uc_order_access_revoke_permissions()
 */
function uc_order_access_change_permissions($status_id, $rid, array $permissions = array()) {
  // Grant new permissions for the role.
  $grant = array_filter($permissions);
  if (!empty($grant)) {
    uc_order_access_grant_permissions($status_id, $rid, array_keys($grant));
  }
  // Revoke permissions for the role.
  $revoke = array_diff_assoc($permissions, $grant);
  if (!empty($revoke)) {
    uc_order_access_revoke_permissions($status_id, $rid, array_keys($revoke));
  }
}

/**
 * Grant permissions to order in a status to a user role.
 *
 * @param string $status_id
 *   The ID of order status.
 * @param int $rid
 *   The ID of a user role to alter.
 * @param array $permissions
 *   A list of permission names to grant.
 *
 * @see user_role_grant_permissions()
 * @see uc_order_access_change_permissions()
 * @see uc_order_access_revoke_permissions()
 */
function uc_order_access_grant_permissions($status_id, $rid, array $permissions = array()) {
  // Grant new permissions for the role.
  foreach ($permissions as $name) {
    db_merge('uc_order_access_permission')
      ->key(array(
        'order_status_id' => $status_id,
        'rid' => $rid,
        'permission' => $name,
      ))
      ->fields(array(
        'permission' => $name,
      ))
      ->execute();
  }

  // Clear the user access cache.
  drupal_static_reset('uc_order_access_check_access');
  drupal_static_reset('uc_order_access_get_permissions');
}

/**
 * Revoke permissions to order in a status from a user role.
 *
 * @param string $status_id
 *   The ID of order status.
 * @param int $rid
 *   The ID of a user role to alter.
 * @param array $permissions
 *   A list of permission names to revoke.
 *
 * @see user_role_revoke_permissions()
 * @see uc_order_access_change_permissions()
 * @see uc_order_access_grant_permissions()
 */
function uc_order_access_revoke_permissions($status_id, $rid, array $permissions = array()) {
  // Revoke permissions for the role.
  db_delete('uc_order_access_permission')
    ->condition('order_status_id', $status_id)
    ->condition('rid', $rid)
    ->condition('permission', $permissions, 'IN')
    ->execute();

  // Clear the user access cache.
  drupal_static_reset('uc_order_access_check_access');
  drupal_static_reset('uc_order_access_get_permissions');
}

/**
 * Helpper function that only gets order status ids that user with currently
 * assigned roles has access to.
 *
 * @param string $op
 *   Permission to check for access.
 *
 * @return array
 *   Array of status id's like returned from uc_order_status_list() with sql set tot TRUE.
 *
 * @see uc_order_status_list()
 */
function uc_order_access_get_perms_statuses($op = 'view order', $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  $statuses = array();

  // Check if standard permissions overrides our order permissions.
  $overriden = _uc_orders_access_overriden_permission_check($op);

  // If it is user #1 that has all privileges or the permission is overriden by
  // a standard permission return all statuses.
  if ($account->uid == 1 || $overriden) {
    return uc_order_status_list('all', TRUE);
  }

  $rids = array_keys($account->roles);
  $permissions = uc_order_access_get_permissions(uc_order_status_list(), $account->roles);

  foreach ($permissions as $status => $role_perms) {
    foreach ($role_perms as $rid => $perms) {
      if (isset($perms[$op])) {
        $statuses[] = $status;
      }
    }
  }

  return $statuses;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * This is the hook_query_alter() for queries tagged with 'order_access'. It adds
 * order access checks for the user account given by the 'account' meta-data (or
 * global $user if not provided), for an operation given by the 'op' meta-data
 * (or 'view order' if not provided; other possible values are @TODO).
 *
 * @see node_query_node_access_alter()
 */
function uc_order_access_query_uc_order_access_order_access_alter(QueryAlterableInterface $query) {
  global $user;

  // Read meta-data from query, if provided.
  if (!$account = $query->getMetaData('account')) {
    $account = $user;
  }
  if (!$op = $query->getMetaData('op')) {
    $op = 'view order';
  }

  // If current op si overrien permission, call regular
  // uc_order_query_uc_order_access_alter().
  // @see uc_order_access_check_access().
  if (_uc_orders_access_overriden_permission_check($op)) {
    drupal_alter('query_uc_order_access', $query);
    return;
  }

  foreach ($query->getTables() as $table) {
    if ($table['table'] === 'uc_orders') {
      $or = db_or();

      // Grant access to users with permission to view own orders.
      if (user_access('view own orders', $account)) {
        $or->condition($table['alias'] . '.uid', $account->uid);
      }

      // Or with permission to view any other orders.
      $rids = array_keys($account->roles);
      // @todo move directly into $subquery for speed.
      $statuses = uc_order_access_get_perms_statuses($op, $account);
      if (!empty($statuses)) {
        $subquery = db_select('uc_order_access_permission', 'op')
          ->fields('op', array('order_status_id', 'rid', 'permission'))
          ->condition(
            db_and()
              ->condition($table['alias'] . '.order_status', $statuses)
              ->condition('op.rid', $rids)
              ->condition('op.permission', $op)
          );
        $or->exists($subquery);
      }

      $query->condition($or);

      // Pass the query to other modules that may want to alter the
      // uc_order_access query tag except uc_order_query_uc_order_access_alter().
      $hook = 'query_uc_order_access_alter';
      $modules = module_implements($hook);
      foreach ($modules as $module) {
        if ($module == 'uc_order') {
          continue;
        }
        $function = $module . '_' . $hook;
        $function($query, $type);
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * This function implements the same functionality as
 * uc_order_access_query_order_access_alter() for the SQL field storage engine.
 * Node access conditions are added for field values belonging to orders only.
 *
 *  @see node_query_entity_field_access_alter()
 */
/*
function uc_order_access_query_entity_field_access_alter(QueryAlterableInterface $query) {
  // @TODO Fix it for uc_order entity fields.
  //_uc_order_access_query_order_access_alter($query, 'entity');
}
*/


/**
 * Implements hook_form_FORM_ID_alter() for uc_order_view_update_form().
 */
function uc_order_access_form_uc_order_view_update_form_alter(&$form, &$form_state) {
  // Load the order object.
  $order = uc_order_load($form['order_id']['#value']);

  // If does not have access to change this order from this status disable the
  // status form.
  if (!uc_order_access_check_access($order, 'change status from')) {
    $form['controls']['status']['#disabled'] = TRUE;
  }
  else {
    // Get all statuses.
    $form_statuses = $form['controls']['status']['#options'];
    // Get current status ID.
    $current_status = $form['controls']['status']['#default_value'];

    // Find out what statuses user has access to change the order to and save
    // them for display.
    foreach ($form_statuses as $status_id => $status_title) {
      // Because uc_order_access_check_access() require order argument as it's
      // first argument, we create a copy of the order with the status we want
      // to check if user has access to change the order to that status.
      $order_copy = clone $order;
      $order_copy->order_status = $status_id;

      // If the user has access to change to this status or this is the status
      // of the order show the status as option.
      if (uc_order_access_check_access($order_copy, 'change status to') ||
      $status_id == $current_status) {
        $new_statuses[$status_id] = $status_title;
      }
    }

    // Overwrite the default statuses.
    $form['controls']['status']['#options'] = $new_statuses;
  }
}

// @todo After https://www.drupal.org/node/2352957 is commited, this should be
// replaced with hook_uc_order_actions_alter().
function uc_order_access_order_actions($order, $icon_html = FALSE) {
  global $user;

  $state = uc_order_status_data($order->order_status, 'state');
  $order_id = array('@order_id' => $order->order_id);
  $actions = array();

  if (user_access('view all orders') || uc_order_access_check_access($order, 'view order')) {
    $alt = t('View order @order_id.', $order_id);
    $actions[] = array(
      'name' => t('View'),
      'url' => 'admin/store/orders/' . $order->order_id,
      'icon' => theme('image', array('path' => drupal_get_path('module', 'uc_store') . '/images/order_view.gif', 'alt' => $alt)),
      'title' => $alt,
    );

    $alt = t('Print order @order_id.', $order_id);
    $actions[] = array(
      'name' => t('Print'),
      'url' => 'admin/store/orders/' . $order->order_id . '/invoice/print',
      'icon' => theme('image', array('path' => drupal_get_path('module', 'uc_store') . '/images/print.gif', 'alt' => $alt)),
      'title' => $alt,
    );
  }
  elseif (user_access('view own orders') && $order->uid == $user->uid) {
    $alt = t('View order @order_id.', $order_id);
    $actions[] = array(
      'name' => t('View'),
      'url' => 'user/' . $user->uid . '/orders/' . $order->order_id,
      'icon' => theme('image', array('path' => drupal_get_path('module', 'uc_store') . '/images/order_view.gif', 'alt' => $alt)),
      'title' => $alt,
    );

    if (variable_get('uc_cust_view_order_invoices', TRUE)) {
      $alt = t('Print order @order_id.', $order_id);
      $actions[] = array(
        'name' => t('Print'),
        'url' => 'user/' . $user->uid . '/orders/' . $order->order_id . '/print',
        'icon' => theme('image', array('path' => drupal_get_path('module', 'uc_store') . '/images/print.gif', 'alt' => $alt)),
        'title' => $alt,
      );
    }
  }

  if (user_access('edit orders') || uc_order_access_check_access($order, 'edit order')) {
    $alt = t('Edit order @order_id.', $order_id);
    $actions[] = array(
      'name' => t('Edit'),
      'url' => 'admin/store/orders/' . $order->order_id . '/edit',
      'icon' => theme('image', array('path' => drupal_get_path('module', 'uc_store') . '/images/order_edit.gif', 'alt' => $alt)),
      'title' => $alt,
    );
  }

  if (uc_order_can_delete($order) || uc_order_access_check_access($order, 'delete order')) {
    $alt = t('Delete order @order_id.', $order_id);
    $actions[] = array(
      'name' => t('Delete'),
      'url' => 'admin/store/orders/' . $order->order_id . '/delete',
      'icon' => theme('image', array('path' => drupal_get_path('module', 'uc_store') . '/images/order_delete.gif', 'alt' => $alt)),
      'title' => $alt,
    );
  }

  // @see https://www.drupal.org/node/2352957#comment-9242759
  $our_hooks = array('uc_shipping');
  $hooks = array_diff(module_implements('uc_order_actions'), $our_hooks);
  $hooks_alter = module_implements('uc_order_actions_alter');
  if (!empty($hooks) || !empty($hooks_alter)) {
    $order = uc_order_load($order_id);
  }
  $extra = module_invoke_all('uc_order_actions', $order);
  if (count($extra)) {
    $actions = array_merge($actions, $extra);
  }
  drupal_alter('uc_order_actions', $actions, $order);

  if ($icon_html) {
    $output = '';
    foreach ($actions as $action) {
      $action['classes'][] = 'uc-order-action';
      if (empty($action['attributes'])) {
        $action['attributes'] = array();
      }
      $action['attributes']['title'] = $action['title'];
      $action['attributes']['class'] = implode(' ', $action['classes']);

      $output .= l($action['icon'], $action['url'], array(
        'attributes' => $action['attributes'],
        'html' => TRUE,
      ));
    }
    return $output;
  }
  else {
    return $actions;
  }
}

/**
 * Implements hook_views_api().
 */
function uc_order_access_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'uc_order_access') . '/views',
  );
}
