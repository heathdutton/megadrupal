<?php

require_once 'tbl.constants.inc';


/**
 * Implements hook_menu().
 */

function tbl_menu() {
  $items[TBL_PATH_CONFIG] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Taxonomy blocks (rsm project)',
    'description' => 'Configure Taxonomy blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tbl_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'tbl.admin.inc',
  );
  return $items;
}


/**
 * Implements hook_theme
 */

function tbl_theme() {
  return array(
    'tbl_tree' => array(
      'variables' => array('flat_tree'),
    ),
    'tbl_tree_levels_recursive' => array(
      'variables' => array('tree'),
    ),
  );
}


/**
 * Implements hook_block_info
 * Implements hook_block_configure
 * Implements hook_block_save
 * Implements hook_block_view
 */

function tbl_block_info() {
  $blocks = array();
  for ($i = 1; $i <= variable_get('tbl_block_num', TBL_BLOCK_DEFAULT_NUM); $i++) {
    $source = variable_get("tbl_block_source_$i");
    $description = '';
    if ($source) {
      list($source_type, $source_id) = explode(':', $source);
      switch ($source_type) {
        case 'v':
          $v_obj = taxonomy_vocabulary_load($source_id);
          if ($v_obj) {
            $description = t('Vocabulary: !v_name', array('!v_name' => $v_obj->name));
          }
          break;
        case 't':
          $t_obj = taxonomy_term_load($source_id);
          if ($t_obj) {
            $v_obj = taxonomy_vocabulary_load($t_obj->vid);
            $description = t('Vocabulary: !v_name; Term: !t_name', array('!v_name' => $v_obj->name, '!t_name' => $t_obj->name));
          }
          break;
      }
    }
    $blocks["tbl_$i"]['cache'] = DRUPAL_NO_CACHE;
    $blocks["tbl_$i"]['info'] = $description ? t('Taxonomy block #!num (!description)', array('!num' => $i, '!description' => $description)) :
                                               t('Taxonomy block #!num', array('!num' => $i));
  }
  return $blocks; 
}


function tbl_block_configure($full_id) {
  list($block_type, $block_id) = explode('_', $full_id);
  $form['tbl_block_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Taxonomy block settings'),
  );
  switch ($block_type) {
    case 'tbl':
      $form['tbl_block_settings']['tbl_block_source'] = array(
        '#type' => 'select', 
        '#title' => t('Root item'),
        '#options' => array('' => t('- no -')) + _tbl_get_sources(),
        '#default_value' => variable_get("tbl_block_source_$block_id"),
      );
      break;
  }
  return $form;
}


function tbl_block_save($full_id, $edit) {
  list($block_type, $block_id) = explode('_', $full_id);
  switch ($block_type) {
    case 'tbl':
      variable_set("tbl_block_source_$block_id", $edit['tbl_block_source']);
      break;
  }
}


function tbl_block_view($full_id) {
  $output = '';
  list($block_type, $block_id) = explode('_', $full_id);
  if ($block_id <= variable_get('tbl_block_num', TBL_BLOCK_DEFAULT_NUM)) {
    switch ($block_type) {
      case 'tbl':
        $source = variable_get("tbl_block_source_$block_id");
        if ($source) {
          list($source_type, $source_id) = explode(':', $source);
          switch ($source_type) {
            case 'v':
              $v_obj = taxonomy_vocabulary_load($source_id);
              if ($v_obj) {
                $terms = taxonomy_get_tree($v_obj->vid);
              }
              break;
            case 't':
              $t_obj = taxonomy_term_load($source_id);
              if ($t_obj) {
                $v_obj = taxonomy_vocabulary_load($t_obj->vid);
                $terms = taxonomy_get_tree($v_obj->vid, $t_obj->tid);
              }
              break;
          }
          if (isset($terms)) {
            $output = theme('tbl_tree', array('flat_tree' => $terms));
          }
        }
        break;
    }
  }
  $block['subject'] = '';
  $block['content'] = $output;
  return $block;
}


/**
 * _tbl_get_sources
 * _tbl_flat_to_tree
 */

function _tbl_get_sources() {
  $sources = array();
  $vocs = taxonomy_get_vocabularies();
  foreach ($vocs as $c_voc) {
    $sources["v:$c_voc->vid"] = "<$c_voc->name>";
    $terms = taxonomy_get_tree($c_voc->vid);
    foreach ($terms as $c_term) {
      $sources["t:$c_term->tid"] = str_repeat('--', $c_term->depth + 1)." $c_term->name"; 
    }
  }
  return $sources;
}


function _tbl_flat_to_tree($items) {
  $tree = array();
  foreach ($items as $c_item) {
    $c_item = clone $c_item;
    $c_item->children = array();
    if ($c_item->depth == 0) {$tree[$c_item->tid] = $c_item; $p0 = &$c_item->children;}
    if ($c_item->depth >= 1) {${'p'.($c_item->depth-1)}[$c_item->tid] = $c_item; ${'p'.$c_item->depth} = &$c_item->children;}
  }
  return $tree;
}


/**
 * theme_tbl_tree
 * theme_tbl_tree_levels_recursive
 */

function theme_tbl_tree($vars) {
  extract($vars);
  return theme('tbl_tree_levels_recursive', array('tree' => _tbl_flat_to_tree($flat_tree)));
}


function theme_tbl_tree_levels_recursive($vars) {
  extract($vars);
  $output = '';
  if (count($tree)) {
    $output.= '<ul>';
    foreach ($tree as $c_item) {
      $class = array();
      if ($c_item == reset($tree)) $class[] = 'first';
      if ($c_item == end($tree)) $class[] = 'last';
      if (count($tree) == 1) $class[] = 'single';
      $output.= '<li'.(count($class) ? ' class="'.implode(' ', $class).'"' : '').'>'.
                  l($c_item->name, "taxonomy/term/$c_item->tid").
                  (count($c_item->children) ? theme_tbl_tree_levels_recursive(array('tree' => $c_item->children)) : '').
                '</li>';
    }
    $output.= '</ul>';
  }
  return $output;
}

