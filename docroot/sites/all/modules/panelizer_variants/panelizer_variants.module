<?php

/**
 * @file
 * Panelizer Variant Module File.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function panelizer_variants_form_panelizer_default_context_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['panelizer']->title)) {
    if ($form_state['panelizer']->title != "Default") {
      $form['right']['variant'] = array(
        '#weight' => -1,
      );

      $form['right']['variant']['use_variant'] = array(
        '#markup' => '<p><strong>' . t('NOTE: You Must Select a Context') . '</strong></p>',
        '#prefix' => '<div id="' . drupal_html_id('ctools-variant-table') . '"><table id="' . drupal_html_id('variant-table') . '"><thead><tr><th class="title">' . t('Variant Info') . '</th></tr></thead><tbody><tr><td>',
        '#suffix' => '</td></tr></tbody></table></div>',
      );

      // Remove all but Taxonomy term for now from select list.
      $form['right']['contexts_table']['buttons']['context']['item']['#options'] = array(
        'entity:taxonomy_term' => t('Taxonomy term'),
        'entity:taxonomy_vocabulary' => t('Taxonomy vocabulary'),
      );

      $form['#validate'][] = '_panelizer_variants_validate_handler';
      $form['#submit'][] = '_panelizer_variants_submit_handler';
    }
  }
}

/**
 * Validator Submit handler for context form.
 */
function _panelizer_variants_validate_handler($form, &$form_state) {
  if (!isset($form_state['panelizer']->contexts[0])) {
    form_set_error('right][variant',
      t('You must select a context when using a Variant View Mode.'));
  }
}

/**
 * Submit handler for context form.
 */
function _panelizer_variants_submit_handler($form, &$form_state) {

  $did = $form_state['panelizer']->did;
  $name = $form_state['panelizer']->name;
  $pnid = $form_state['panelizer']->pnid;
  $pipeline = $form_state['panelizer']->pipeline;

  // Write to panelizer_variants so we can manipulate the entity_load
  $values = array();
  foreach ($form_state['panelizer']->contexts as $key) {
    $values[] = array(
      'name' => $key['keyword'],
      'entity_id' => $key['entity_id'],
    );
  }
  $data_var = array(
    'pnid' => $pnid,
    'name' => $name,
    'context' => $values,
    'did' => $did,
    'pipeline' => $pipeline,
    'view_mode' => 'page_manager',
  );
  $exist_var = db_query('SELECT pnid FROM {panelizer_variants} WHERE pnid = :pnid', array(':pnid' => $pnid))->rowCount();
  if ($exist_var > 0) {
    drupal_write_record('panelizer_variants', $data_var, 'name');
  }
  else {
    drupal_write_record('panelizer_variants', $data_var);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function panelizer_variants_form_panels_ipe_edit_control_form_alter(&$form, &$form_state, $form_id) {
  array_unshift($form['buttons']['submit']['#submit'], '_panelizer_variants_ipe_submit_handler');
}

/**
 * Submit handler for panelizer IPE save.
 *
 * This is needed due to the fact panels_save_display removes the
 * old display and panes.  This keeps things intact and now we can
 * have variants with overrides on the variant overrides.
 */
function _panelizer_variants_ipe_submit_handler($form, &$form_state) {
  // Grab the Max DID so we can create a new panel display.
  $did = db_query('SELECT MAX(did) FROM {panels_display}')->fetchField() + 1;
  $old_did = $form_state['display']->did;
  // Grab the old Panels Layout before save.
  $old_panes = db_query('SELECT * FROM {panels_pane} WHERE did = :did', array(':did' => $old_did))->fetchAll();

  // Sets up the new panels_pane stuff that gets called later.
  $form_state['display']->did = $did;
  foreach ($form_state['display']->content as $display) {
    $display->did = $did;
  }

  // Writes the old panes back to the DB with new pids.
  $pid = db_query('SELECT MAX(pid) FROM {panels_pane}')->fetchField() + 1;
  foreach ($old_panes as $old_pane) {
    $old_pane->pid = $pid;
    $old_pane->uuid = ctools_uuid_generate();
    ++$pid;
    // Need to unseralize the data because it store is wrong.
    $old_pane->access = unserialize($old_pane->access);
    $old_pane->configuration = unserialize($old_pane->configuration);
    $old_pane->cache = unserialize($old_pane->cache);
    $old_pane->style = unserialize($old_pane->style);
    $old_pane->css = unserialize($old_pane->css);
    $old_pane->extras = unserialize($old_pane->extras);
    $old_pane->locks = unserialize($old_pane->locks);
    drupal_write_record('panels_pane', $old_pane);
  }

  // Duplicates the old panels_display so we don't get render errors.
  $old = db_query('SELECT * FROM {panels_display} WHERE did = :did', array(':did' => $old_did))->fetch();
  $old->did = $did;
  $old->uuid = ctools_uuid_generate();
  drupal_write_record('panels_display', $old);

  // Need to do this because the UUID was still wrong.
  $form_state['display']->uuid = $old->uuid;
}

/**
 * Implements hook_entity_load().
 */
function panelizer_variants_entity_load(&$entities, $entity_type) {
  if ($entity_type == 'node') {
    // Quick check for Panelizer so are not going trhough all this.
    // If the entity is not a panelizer one.
    foreach ($entities as $check) {
      $is_panelized = isset($check->panelizer) ? TRUE : FALSE;
    }
    if ($is_panelized) {
      $entity_get = _panelizer_variants_entity_render($entities);
      foreach ($entities as $entity) {
        if (isset($entity->panelizer) && (count($entity_get) > 0)) {
          foreach ($entity->panelizer['page_manager'] as $key => $value) {
            if (isset($value) && isset($entity_get[$key]) && $key != 'display') {
              $entity->panelizer['page_manager']->$key = $entity_get[$key];
            }
          }

          // We need to unset the display object so we don't.
          // Have any residual data left in it.
          ctools_include('plugins', 'panels');
          panels_clear_cached_content($entity->panelizer['page_manager']->display);
          unset($entity->panelizer['page_manager']->display);
          $entity->panelizer['page_manager']->display = $entity_get['display'];
        }
      }
    }
  }
}

/**
 * For rendering the panel based on Context selections from the node / panel.
 *
 * @param object $node
 *   Is the node entity from hook_entity_load().
 *
 * @return array
 *   Entity with proper panelizer attributes attached to display or FALSE.
 */
function _panelizer_variants_entity_render($node) {
  $entity = array();
  $entity_display = array();
  $check = array();
  // The NID from the array key.
  $nodekey = (key($node));

  if (isset($node[$nodekey]->panelizer)) {
    foreach ($node[$nodekey] as $context => $value) {
      // If a field then check for context.
      if (strpos($context, 'field_') !== FALSE) {
        // Also should look into panels_panel_context_render at some point.
        // Get entity target type.
        $entity_type = _panelizer_variants_entity_types($node[$nodekey], $context);
        // Check for context of said entity type.
        $check[] = array($entity_type => _panelizer_variants_check_contexts('target_id', $node[$nodekey]->$context));
        $check[] = array($entity_type => _panelizer_variants_check_contexts('tid', $node[$nodekey]->$context));
      }
    }

    // Grab all the set variants in the DB to check, then apply the entity.
    $variants = db_query('SELECT * FROM {panelizer_variants}')->fetchAll();
    foreach ($variants as $variant) {
      $datas = unserialize($variant->context);
      $match = _panelizer_variants_find_match($datas, $check);
      if ($match) {
        $args = array(':eid' => $nodekey);
        $entities = db_query('SELECT * FROM {panelizer_entity} WHERE entity_id = :eid', $args)->fetch();
        // If in entity table.
        if ($entities) {
          // If this is not overridden, did should be 0.
          // Use panelizer_variant table.
          if ($entities->did == 0) {
            foreach ($variant as $key => $value) {
              $entity[$key] = $value;
            }
            $displays = panels_load_displays(array($variant->did));
            foreach ($displays as $display) {
              $entity_display['display'] = $display;
            }
            $entity = array_merge($entity, $entity_display);
          }
          // Overridden default panelizer variant.
          // Use panelizer_entity table.
          else {
            foreach ($entities as $key => $value) {
              $entity[$key] = $value;
            }
            $displays = panels_load_displays(array($entities->did));
            foreach ($displays as $display) {
              $entity_display['display'] = $display;
            }
            $entity = array_merge($entity, $entity_display);
          }
        }
      }
    }

    return $entity;
  }
  else {
    return FALSE;
  }
}

/**
 * Getting the entity type of the contexts.
 *
 * @param object $node
 *   Is the node in question.
 * @param string $field
 *   Is the field we are checking.
 *
 * @return string
 *   Returns the entity type.
 */
function _panelizer_variants_entity_types($node, $field) {
  $wrapper = entity_metadata_wrapper('node', $node);
  foreach ($wrapper->getPropertyInfo() as $key => $value) {
    if ($key == $field) {
      return $value['type'];
    }
  }
}

/**
 * For checking for specific context within drupal field arrays.
 *
 * @param string $needle
 *   Is context field search item.
 * @param object $haystack
 *   Is the object we are looking in.
 *
 * @return string
 *   Is the return value of the search.
 */
function _panelizer_variants_check_contexts($needle, $haystack) {
  foreach ($haystack as $item) {
    if (is_array($item)) {
      return _panelizer_variants_check_contexts($needle, $item);
    }
    elseif (key($haystack) == $needle) {
      return $item;
    }
  }
}

/**
 * For matching contexts on the variant.
 *
 * @param object $datas
 *   Is the variant context.
 * @param object $check
 *   Is the node context.
 *
 * @return bool
 *   If it matches, return TRUE.
 */
function _panelizer_variants_find_match($datas, $check) {
  // We are going to set a counter to match results.
  $count = 0;
  foreach ($check as $key => $value) {
    $contexts = key($value);
    foreach ($datas as $data) {
      // If the $data matches the entity name and the value id.
      if ($data['name'] == $contexts && $data['entity_id'] == $value[$contexts]) {
        ++$count;
      }
    }
  }
  // If counts match up, return TRUE.
  return ($count == count($datas)) ? TRUE : FALSE;
}
