<?php
/**
 * @file
 * Primary functionality for api search sku forwarding.
 */

module_load_include('inc', 'commerce_search_api_sku_forward', 'includes/commerce_search_api_sku_forward.admin');

/**
 * Implements hook_menu().
 *
 * Purpose: Establish administrative page.
 */
function commerce_search_api_sku_forward_menu() {
  $items = array();
  // Administrative page for amazon fulfillment.
  $items['admin/config/search/commerce-search-api-sku-forward'] = array(
    'title' => 'Commerce Search API SKU forward',
    'description' => 'Administer Commerce Search API SKU forward settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_search_api_sku_forward_admin'),
    'access arguments' => array('Configure store settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_search_api_query_alter().
 */
function commerce_search_api_sku_forward_search_api_query_alter($query) {
  // Gets the searched terms.
  $searched_text = $query->getOriginalKeys();
  // Checks if a value was submitted.
  if (strlen($searched_text) > 0) {
    // Load allowed indexes and current index.
    $allowed_indexes = variable_get('commerce_search_api_sku_forward_indexes', FALSE);
    $index = $query->getIndex();

    // Check that current index is one we should be targeting.
    if (in_array($index->machine_name, $allowed_indexes)) {
      // See if SKU matches up with a product and a single product display.
      if ($matching_product = commerce_search_api_sku_forward_sku_check($searched_text)) {
        drupal_goto($matching_product);
      }
      else {
        // No matching SKU or multiple SKU matches, proceed.
        return;
      }
    }
    else {
      // Not a search index we should be targeting.
      return;
    }
  }
  else {
    // No value was searched, no need to compare for forwarding at all.
    return;
  }
}

/**
 * Helper function for checking a string for matching SKU value.
 *
 * @param string $searched_text
 *   String that you want to check if it has a single matching SKU.
 *
 * @return Mixed
 *   Returns node URL succeeds. Returns false if no SKU.
 */
function commerce_search_api_sku_forward_sku_check($searched_text){
  // Check if the ISBN/SKU has a product associated with it.
  if ($product = commerce_product_load_by_sku($searched_text)) {
    // Get Product.
    $product_id = $product->product_id;

    // Load allowed nodes and fields for performing check.
    $nodes = variable_get('commerce_search_api_sku_forward_nodes', FALSE);
    $field_machine_name = variable_get('commerce_search_api_sku_forward_field_machine_name', FALSE);
    $field_db_column = variable_get('commerce_search_api_sku_forward_db_column', FALSE);

    // Check that correct elements have been entered in the admin interface.
    if ($nodes && $field_machine_name && $field_db_column) {


      // Query to see if anything references the product id.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node');

      // Add nodes to search.
      $query->entityCondition('bundle', $nodes, 'IN');

      // Query the corresponding field.
      $query->fieldCondition($field_machine_name, $field_db_column, $product_id, '=');

      $result = $query->execute();

      // Check if there is only one match returned, as we can link to one match!
      if (isset($result['node']) && count($result['node']) == 1) {
        // Get NID from results.
        $node_id = array_values($result['node'])[0]->nid;
        // Get URL from node id.
        $url = url('node/' . $node_id);
        // Return URL.
        return $url;
      }
      else {
        // There were either multiple matches, or no matches. This can be caused
        // by a variety of situations, which warrant taking user to full search.
        return FALSE;
      }
    }
    else {
      // Administrative items were not all entered.
      watchdog('commerce_search_api_sku_forward',
        'SKU Forwarding is enabled, but admin values have not been filled out.');
      return FALSE;
    }
  }
  else {
    // No matching SKU.
    return FALSE;
  }
}
