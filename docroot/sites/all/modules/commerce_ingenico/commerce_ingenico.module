<?php
/**
 * @file
 * Implements Ingenico payment services for use in Drupal Commerce.
 */

define('COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED', 'CAPTURED');
define('COMMERCE_INGENICO_PAYMENT_STATUS_REFUND', 'REFUNDED');
define('COMMERCE_INGENICO_PAYMENT_STATUS_CANCELLED', 'CANCELLED');

/**
 * Implements hook_views_api().
 */
function commerce_ingenico_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_ingenico') . '/include/views',
  );
}


/**
 * Implements hook_libraries_info().
 */
function commerce_ingenico_libraries_info() {
  $libraries['ogone'] = array(
    'name' => 'Ogone',
    'vendor url' => 'http://www.marlon.be/',
    'download url' => 'https://github.com/marlon-be/marlon-ogone/archive/master.zip',
    'path' => 'lib',
    'version arguments' => array(
      'file' => 'VERSION',
      'pattern' => '@([a-z0-9\.-]+)@',
      'lines' => 1,
      'cols' => 10,
    ),
    'files' => array(
      'php' => array(
        'Ogone/ShaComposer/ShaComposer.php',
        'Ogone/HashAlgorithm.php',
        'Ogone/ShaComposer/AllParametersShaComposer.php',
        'Ogone/Passphrase.php',
        'Ogone/ParameterFilter/ParameterFilter.php',
        'Ogone/ParameterFilter/GeneralParameterFilter.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the Ingenico payment method
 */
function commerce_ingenico_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['ingenico_offsite'] = array(
    'base' => 'commerce_ingenico',
    'title' => t('Ingenico online gateway'),
    'short_title' => t('Ingenico online gateway'),
    'display_title' => t('Ingenico online gateway'),
    'description' => t('Integrates Ingenico online gateway.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'active' => FALSE,
    'file' => 'include/commerce_ingenico_direct.inc',
  );

  $payment_methods['ingenico_direct'] = array(
    'base' => 'commerce_ingenico',
    'title' => t('Ingenico direct gateway'),
    'short_title' => t('Ingenico direct gateway'),
    'display_title' => t('Ingenico direct gateway'),
    'description' => t('Integrates Ingenico direct gateway.'),
    'terminal' => FALSE,
    'offsite' => FALSE,
    'offsite_autoredirect' => FALSE,
    'active' => FALSE,
    'callback' => array(),
    'file' => 'include/commerce_ingenico_direct.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_ingenico_menu() {
  $items = array();

  $items['commerce_ingenico/callback'] = array(
    'page callback' => 'commerce_ingenico_callback',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    // 'file' => 'commerce_ingenico.module',
  );

  // Add a menu item for capturing.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/ingenico-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ingenico_capture_form', 3, 5),
    'access callback' => 'commerce_opgone_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'include/commerce_ingenico.admin.inc',
    'weight' => 1,
  );

  // Add a menu item for refund.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/ingenico-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ingenico_refund_form', 3, 5),
    'access callback' => 'commerce_ingenico_refund_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'include/commerce_ingenico.admin.inc',
    'weight' => 2,
  );

  // Add a menu item for cancel.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ingenico_cancel_form', 3, 5),
    'access callback' => 'commerce_ingenico_cancel_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'include/commerce_ingenico.admin.inc',
    'weight' => 2,
  );

  // Add a menu item for deletion.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_payment_payment_transaction_delete_form_validate', 3, 5),
    'access callback' => 'commerce_ingenico_delete_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'include/commerce_ingenico.admin.inc',
    'weight' => -100,
  );

  // Add a menu item for update.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/update'] = array(
    'title' => 'Update',
    'page callback' => 'commerce_ingenico_update_redirect',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_ingenico_update_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'include/commerce_ingenico.admin.inc',
    'weight' => 2,
  );

  // Define a path to start the authorization process.
  $items['commerce_ingenico/3d_secure'] = array(
    'page callback' => 'commerce_ingenico_3d_secure',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Define a path to receive 3D Secure callback.
  $items['commerce_ingenico/3ds/callback'] = array(
    'page callback' => 'commerce_ingenico_3d_secure_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Menu item for the batch process.
  $items['admin/commerce/orders/batch'] = array(
    'title' => 'Ingenico capture',
    'description' => 'Capture all pending transactions with batch process',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ingenico_batch_form'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  // Define a callback for the callback after the transaction has been proccess
  // with the offsite method, when the cards were preselected.
  $items['commerce_ingenico/redirect'] = array(
    'page callback' => 'commerce_ingenico_cards_redirect_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Process the transaction after the redirection for preselected card types.
 */
function commerce_ingenico_cards_redirect_callback() {
  global $user, $base_root;

  if (empty($_POST['orderID'])) {
    $order_id = $_GET['orderID'];
  }
  else {
    $order_id = check_plain($_POST['orderID']);
  }
  $order = explode('-', $order_id);

  $order = commerce_order_load($order[0]);
  $order->status = 'pending';
  commerce_order_save($order);
  $feedback = commerce_ingenico_get_feedback();
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

  $api = commerce_ingenico_api_object($payment_method['settings'], $order->data['payment_method']);
  $api->logRequest(array(
    '@type' => 'Response',
    '@operation' => 'redirect',
    '%value' => $feedback,
  ));

  if (!empty($_GET['ACCEPTANCE']) and isset($_GET['NCERROR']) and $_GET['NCERROR'] == 0) {
    // Store the transaction.
    if (!empty($order_id)) {
      $transaction = commerce_payment_transaction_new('ingenico_offsite', $order->order_id);
      $transaction->uid = $user->uid;
      $transaction->order_id = $order->order_id;
      $transaction->payment_method = 'ingenico_offsite';
      $transaction->instance_id = $order->data['payment_method'];
      $transaction->remote_id = !empty($_GET['PAYID']) ? $_GET['PAYID'] : '';
      $transaction->message = commerce_ingenico_status_messages($feedback['STATUS']);
      $transaction->amount = $order->commerce_order_total['und'][0]['amount'];
      $transaction->currency_code = $order->commerce_order_total['und'][0]['currency_code'];
      $transaction->status = ($payment_method['settings']['transaction_type_process'] == 'capture_manual') ? COMMERCE_PAYMENT_STATUS_PENDING : COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED;
      $transaction->remote_status = $_GET['STATUS'];
      $transaction->created = $order->created;
      $transaction->payload = $feedback;

      if (!empty($user->uid)) {
        commerce_payment_transaction_save($transaction);
      }
    }
    // If successeful operation go to checkout complete.
    return drupal_goto(t('checkout/@order/complete', array('@order' => $order->order_id)));
  }
  else {
    drupal_set_message(t('The order# @order was cancelled.', array('@order' => $order->order_id)), 'error');
    $transaction = commerce_payment_transaction_new('ingenico_offsite', $order->order_id);
    $transaction->uid = $user->uid;
    $transaction->order_id = $order->order_id;
    $transaction->payment_method = 'ingenico_offsite';
    $transaction->instance_id = $order->data['payment_method'];
    $transaction->remote_id = !empty($_GET['PAYID']) ? $_GET['PAYID'] : '';
    $transaction->message = commerce_ingenico_status_messages($_GET['STATUS']);
    $transaction->amount = $order->commerce_order_total['und'][0]['amount'];
    $transaction->currency_code = $order->commerce_order_total['und'][0]['currency_code'];
    $transaction->status = COMMERCE_INGENICO_PAYMENT_STATUS_CANCELLED;
    $transaction->remote_status = $_GET['STATUS'];
    $transaction->created = $order->created;
    $transaction->payload = (!empty($feedback)) ? $feedback : $_GET;
    if (!empty($user->uid)) {
      commerce_payment_transaction_save($transaction);
    }
    if ($payment_method['settings']['logs'] == 0) {
      watchdog('commerce_ingenico', "The order# @order was cancelled.", array('@order' => $order->order_id), WATCHDOG_ERROR);
    }
    return drupal_goto($base_root);
  }
}

/**
 * Implements hook_menu_alter().
 */
function commerce_ingenico_menu_alter(&$items) {
  // Create the path to the file to modify.
  $path = drupal_get_path('module', 'commerce_ingenico');
  $file_path = $path . '/include/commerce_ingenico.admin.inc';
  require_once $file_path;
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ingenico_transaction_delete_form', 3, 5),
    'access callback' => 'commerce_ingenico_delete_access',
    // 'access callback' => TRUE,
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => $file_path,
    'weight' => 10,
  );
}

/**
 * Alter the redirect form for the offsite payment method.
 */
function commerce_ingenico_redirect_alter_form($form, &$form_state, $order) {
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

  $order->data['payment_redirect_key'] = drupal_hash_base64($order->changed);
  $settings = array(
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'payment_method' => $payment_method['instance_id'],
  );
  commerce_payment_redirect_pane_next_page($order);
  return commerce_ingenico_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Mimic batch trigger so it can be triggered when cron runs.
 */
function commerce_ingenico_batch_rule($date) {
  $_SESSION['http_request_count'] = 0;
  $form_state = array();
  $form_state['values']['hidden_value'] = 1;
  $form_state['values']['op'] = 'Capture';
  $form_state['values']['submit'] = 'Capture';
  $form_state['values']['date'] = $date;
  drupal_form_submit('commerce_ingenico_batch_form', $form_state);
}

/**
 * Form for the batch process.
 */
function commerce_ingenico_batch_form($form, &$form_state) {
  $form['capture_fieldset'] = array(
    '#type' => 'fieldset',
    '#description' => 'Capture all pending transactions',
    '#title' => 'Capture',
  );

  $form['date'] = array(
    '#type' => 'textfield',
    '#description' => 'Enter date (like: 16 June 2013), time stamp or days in the past (by giving negative values) like -1 day, -2 days, -3 days … (this will capture all pending transactions from the previous day, 2 days before today or 3 days before today) or just use “now” to capture all pending transactions from this moment. May use the following format as well: YYYY-MM-DD HH:MM:SS',
    '#title' => 'Chose a date from which to start capturing transactions.',
    '#default_value' => 'now',
    '#required' => TRUE,
  );

  $form['hidden_value'] = array(
    '#type' => 'hidden',
    '#value' => 1,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#description' => 'Capture all pending transactions',
    '#value' => 'Capture',
  );

  return $form;
}

/**
 * If the form is submited start the batch process.
 */
function commerce_ingenico_batch_form_submit($form, &$form_state) {
  $date = $form_state['values']['date'];
  if (is_numeric($form_state['values']['date']) != TRUE) {
    $date = strtotime($date);
  }

  if ($form_state['values']['hidden_value'] == 1) {
    $_SESSION['http_request_count'] = 0;
    $batch = commerce_ingenico_batch_process($date);
    batch_set($batch);
  }
}

/**
 * Batch process.
 */
function commerce_ingenico_batch_process($date = '') {
  if (!empty($date)) {
    $all_transactions = commerce_ingenico_load_all_pending_transactions($date);
  }
  else {
    $all_transactions = commerce_ingenico_load_all_pending_transactions();
  }
  $operations = array();
  foreach ($all_transactions as $key => $value) {
    $transaction_id = $value->transaction_id;

    $operations[] = array(
      'commerce_ingenico_batch_operation',
      array(
        $transaction_id,
        t('(Operation @operation)', array('@operation' => $key)),
      ),
    );
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'commerce_ingenico_batchs_finished',
  );

  return $batch;
}

/**
 * Batch operation process.
 */
function commerce_ingenico_batch_operation($transaction_id, $operation_details, &$context) {
  $transaction = commerce_ingenico_load_all_pending_transactions('', $transaction_id);
  $transaction = reset($transaction);
  $order = commerce_order_load($transaction->order_id);

  $context['message'] = t('Process transactions "@title"', array('@title' => $transaction->payment_method)) . ' ' . $operation_details;
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  $api = commerce_ingenico_api_object($payment_method['settings'], $transaction->instance_id);
  $result = $api->crossPayment($order, $transaction, $type = 'SAS', $operation = 'capture');
  $context['results'][] = $result;
  $_SESSION['http_request_count']++;
}

/**
 * Batch 'finished' callback.
 */
function commerce_ingenico_batchs_finished($success, $results, $operations) {
  if ($success) {
    // Update database.
    foreach ($results as $key => $value) {
      $result = $value;
  
      $data = response_data($result->data);		  
      $order_ids = $data['orderID'];
      $order_id = explode('-', $order_ids);
	  $order = commerce_order_load($order_id[0]);

      $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);	 	  
	  $api = commerce_ingenico_api_object($payment_method['settings'], $order->data['payment_method']);
      $transaction = commerce_ingenico_load_all_pending_transactions('', $transaction_id = '', $order_id[0]);
      $transaction = reset($transaction);
      if ($result->status_message == 'OK' and $result->code == 200 and $data['NCERROR'] == 0) {
        $transaction->remote_id = !empty($data['PAYIDSUB']) ? $data['PAYID'] . '/' . $data['PAYIDSUB'] : $data['PAYID'];
        $transaction->status = COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED;
        $transaction->message .= '<br />' . t('Captured: @date', array('@date' => format_date(REQUEST_TIME, 'short')));
        commerce_payment_transaction_save($transaction);
      }
      elseif ($data['NCERROR'] == '50001127') {
        $transaction->remote_id = !empty($data['PAYIDSUB']) ? $data['PAYID'] . '/' . $data['PAYIDSUB'] : $data['PAYID'];
        $transaction->status = COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED;
        $transaction->message .= '<br />' . t('Captured: @date', array('@date' => format_date(REQUEST_TIME, 'short')));
        commerce_payment_transaction_save($transaction);
        drupal_set_message(t('This order has been captured previously.'));
      }
      else {
        drupal_set_message(t('The operation was not successful.'), 'error');
      }
    }

  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}

/**
 * Get the response data.
 */
function response_data($result_data) {
    $xml = simplexml_load_string($result_data);
    if (!empty($xml)) {
      foreach ($xml->attributes() as $key => $value) {
        $data[$key] = (string) $value;
      }
    }
    return $data;
  }

/**
 * Loads transactions by date, transaction_id or order_id.
 */
function commerce_ingenico_load_all_pending_transactions($date = '', $transaction_id = '', $order_id = '') {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('payment_method', array('ingenico_offsite', 'ingenico_direct'), 'IN')
    ->propertyCondition('status', COMMERCE_PAYMENT_STATUS_PENDING);
  if (!empty($transaction_id)) {
    $query->propertyCondition('transaction_id', $transaction_id);
  }
  elseif (!empty($order_id)) {
    $query->propertyCondition('order_id', $order_id);
  }
  elseif (!empty($date)) {
    $query->propertyCondition('created', $date, '<=');
  }
  $query->propertyOrderBy('transaction_id', 'DESC');
  $return = array();
  $result = $query->execute();
  if (!empty($result['commerce_payment_transaction'])) {
    $return = entity_load('commerce_payment_transaction', array_keys($result['commerce_payment_transaction']));
  }
  return $return;
}

/**
 * Begin the 3d authorization procedure.
 */
function commerce_ingenico_3d_secure() {
  $form_redirect = $_GET['result'];
  $decode_page = base64_decode($form_redirect);
  if (strstr($decode_page, '&#58;') != FALSE) {
    $form_redirect = str_replace('&#58;', ':', $decode_page);
  }

  return $form_redirect;
}

/**
 * Callback from the 3d secure procedure.
 */
function commerce_ingenico_3d_secure_callback() {
  global $user, $base_root;
  if (empty($_POST['ORDERID'])) {
    $order_id = $_GET['ORDERID'];
  }
  else {
    $order_id = check_plain($_POST['ORDERID']);
  }

  $order = commerce_order_load($order_id);
  $order->status = 'pending';
  commerce_order_save($order);
  $feedback = commerce_ingenico_get_feedback();

  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  // Store the transaction.
  if (!empty($order_id)) {
    $transaction = commerce_payment_transaction_new('ingenico_direct', $order->order_id);
    $transaction->uid = $user->uid;
    $transaction->order_id = $order->order_id;
    $transaction->payment_method = 'ingenico_direct';
    $transaction->instance_id = 'ingenico_direct|commerce_payment_ingenico_direct';
    $transaction->remote_id = !empty($_GET['PAYID']) ? $_GET['PAYID'] : check_plain($_POST['PAYID']);
    $transaction->message = commerce_ingenico_status_messages($feedback['STATUS']);
    $transaction->amount = $order->commerce_order_total['und'][0]['amount'];
    $transaction->currency_code = $order->commerce_order_total['und'][0]['currency_code'];
    $transaction->status = ($payment_method['settings']['transaction_type_process'] == 'capture_manual') ? COMMERCE_PAYMENT_STATUS_PENDING : COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED;
    $transaction->remote_status = $feedback['STATUS'];
    $transaction->created = $order->created;
    $transaction->payload = $feedback;
    commerce_payment_transaction_save($transaction);
  }

  // If successeful operation go to checkout complete.
  return drupal_goto(t('checkout/@order/complete', array('@order' => $order->order_id)));
}

/**
 * Determine whether the user has permissions to perform capture.
 */
function commerce_opgone_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Ingenico or isn't
  // awaiting capture.
  if (($transaction->payment_method !== 'ingenico_direct' and $transaction->payment_method !== 'ingenico_offsite') || empty($transaction->remote_id) || $transaction->status !== COMMERCE_PAYMENT_STATUS_PENDING) {
    return FALSE;
  }
  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to perform refund.
 */
function commerce_ingenico_refund_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Ingenico or isn't
  // awaiting capture.
  if (($transaction->payment_method !== 'ingenico_direct' and $transaction->payment_method !== 'ingenico_offsite') || empty($transaction->remote_id) || $transaction->status !== COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED) {
    return FALSE;
  }
  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to perform cancel.
 */
function commerce_ingenico_cancel_access($order, $transaction) {
  if (($transaction->payment_method !== 'ingenico_direct' and $transaction->payment_method !== 'ingenico_offsite') || empty($transaction->remote_id) || $transaction->status !== COMMERCE_PAYMENT_STATUS_PENDING) {
    return FALSE;
  }
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to perform update.
 */
function commerce_ingenico_update_access($order, $transaction) {
  if (($transaction->payment_method !== 'ingenico_direct' and $transaction->payment_method !== 'ingenico_offsite')) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Determine whether the user has permissions to perform deletion.
 */
function commerce_ingenico_delete_access($order, $transaction) {
  if (($transaction->payment_method !== 'ingenico_direct' and $transaction->payment_method !== 'ingenico_offsite') || empty($transaction->remote_id) || $transaction->status !== COMMERCE_PAYMENT_STATUS_PENDING) {
    return FALSE;
  }
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Creates api object.
 */
function commerce_ingenico_api_object($settings = '', $payment_method) {
  if (empty($settings)) {
	$instance = commerce_payment_method_instance_load('ingenico_direct|commerce_payment_ingenico_direct');
	return new IngenicoApi($instance['settings'], 'ingenico_direct|commerce_payment_ingenico_direct');
  }
  else {
	return new IngenicoApi($settings, $payment_method);
  }


}

/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules
 */
function commerce_ingenico_settings_form($settings = NULL) {
  $form = array();
  $language_codes = _commerce_ingenico_get_language_code_list();

  $settings = (array) $settings + array(
    'account' => 'test',
    'pspid' => '',
    'currency' => variable_get('commerce_default_currency', 'USD'),
    'language' => '',
    'sha_in' => '',
    'sha_out' => '',
    'alias_manager' => array(
      'enable_alias_manager' => 0,
      'alias_manager_usage' => 'Do you want your payment details to be saved?',
    ),
    'language_list' => array(),
    'api_logs' => array(),
  );

  // BASIC settings.
  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('Ingenico account'),
    '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'account')),
    '#options' => array(
      'test' => ('Test account - for testing purposes only'),
      'prod' => ('Production account - use for processing real transactions'),
    ),
    '#default_value' => $settings['account'],
  );
  $form['pspid'] = array(
    '#type' => 'textfield',
    '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'pspid')),
    '#title' => t('PSPID'),
    '#description' => t('Your Ingenico PSPID login username'),
    '#default_value' => $settings['pspid'],
    '#required' => TRUE,
  );

  $form['userid'] = array(
    '#type' => 'textfield',
    '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'userid')),
    '#title' => t('USERID'),
    '#description' => t('Your API username.'),
    '#default_value' => !empty($settings['userid']) ? $settings['userid'] : '',
    '#required' => TRUE,
  );

  $form['password'] = array(
    '#type' => 'textfield',
    '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'password')),
    '#title' => t('PSWD'),
    '#description' => t('Your API password.'),
    '#default_value' => !empty($settings['password']) ? $settings['password'] : '',
    '#required' => TRUE,
  );

  // SECURITY settings.
  $form['sha_algorithm'] = array(
    '#type' => 'select',
    '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'selectsha')),
    '#title' => t('Select SHA algorithm type.'),
    '#description' => t('You can choose from SHA-1, SHA-256 and SHA-512 algorithm types to hash your data.'),
    '#options' => array(
      'SHA-1' => 'SHA-1',
      'SHA-256' => 'SHA-256',
      'SHA-512' => 'SHA-512',
    ),
    '#default_value' => !empty($settings['sha_algorithm']) ? $settings['sha_algorithm'] : '',
    '#required' => TRUE,
  );

  $form['sha_in'] = array(
    '#type' => 'textfield',
    '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'shain')),
    '#title' => t('SHA-IN Pass phrase.'),
    '#description' => t('The SHA-IN Pass phrase as entered in Ingenico technical settings - "Data and origin verification" tab.'),
    '#default_value' => $settings['sha_in'],
    '#required' => TRUE,
  );

  $form['sha_out'] = array(
    '#type' => 'textfield',
    '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'shaout')),
    '#title' => t('SHA-OUT Pass phrase.'),
    '#description' => t('The SHA-OUT Pass phrase as entered in Ingenico technical settings - "Transaction feedback" tab.'),
    '#default_value' => $settings['sha_out'],
    '#required' => TRUE,
  );

  if (strstr(current_path(), 'ingenico_direct')) {
    $form['3d_secure'] = array(
      '#type' => 'radios',
      '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => '3d-secure')),
      '#title' => t('3D Secure security check of customers cards.'),
      '#default_value' => !empty($settings['3d_secure']) ? $settings['3d_secure'] : '0',
      '#options' => array(
        '0' => t('Request 3-D Secure authentication when available.'),
        '1' => t('No 3-D Secure authentication required.'),

      ),
    );
  }

  $form['transaction_type_process'] = array(
    '#type' => 'radios',
    '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'transaction')),
    '#title' => t('Transaction capture method'),
    '#default_value' => empty($settings['transaction_type_process']) ? 'sale' : $settings['transaction_type_process'],
    '#options' => array(
      'sale' => t('Automatic'),
      'capture_manual' => t('Manual'),
    ),
  );

  if (strstr(current_path(), 'ingenico_offsite') !== FALSE) {
    $form['modify_card_types'] = array(
      '#type' => 'checkbox',
      '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'cardpreselect')),
      '#title' => t('Preselect payment type.'),
      '#description' => t('Allows customers to preselect payment type before the actual payment.'),
      '#default_value' => !empty($settings['modify_card_types']) ? $settings['modify_card_types'] : '',
    );

    foreach (commerce_ingenico_payment_methods() as $key => $value) {
      $options[$key] = $value['BRAND'];
      $default_value[$key] = $key;
    }
    $form['payment_method_types'] = array(
      '#type' => 'checkboxes',
      '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'methodtypes')),
      '#title' => 'Payment method types',
      '#description' => t('Select payment methods that will be available.'),
      '#options' => $options,
      '#default_value' => !empty($settings['payment_method_types']) ? $settings['payment_method_types'] : $default_value,
      '#states' => array(
        'visible' => array(
          'input[name*="modify_card_types"]' => array('checked' => TRUE),
        ),
      ),
    );

    $form['alias_manager'] = array(
      '#type' => 'fieldset',
      '#title' => t('Alias Manager') . theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'aliasmanager')),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $form['alias_manager']['enable_alias_manager'] = array(
      '#type' => 'checkbox',
      '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'enablealiasmanager')),
      '#title' => t('Enable Alias Manager'),
      '#description' => t('Enabling the <a href="@alias_guide_url">Alias Manager</a> will display an additional tick box on the secure payment page that the customer can enable/disable to approve/refuse the storage of his financial profile.', array(
        '@alias_guide_url' => url('http://payment-services.ingenico.com/int/en/ogone/support/guides/integration%20guides/alias'),
      )),
      '#default_value' => !empty($settings['alias_manager']['enable_alias_manager']),
    );

    $form['alias_manager']['alias_manager_usage'] = array(
      '#type' => 'textfield',
      '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'aliasmanagerusage')),
      '#title' => t('A text explaining the reason for the Alias registration'),
      '#default_value' => $settings['alias_manager']['alias_manager_usage'],
      '#states' => array(
        'visible' => array(
          'input[name*="enable_alias_manager"]' => array('checked' => TRUE),
        ),
      ),
    );
  }

  $form['language_list'] = array(
    '#type' => 'fieldset',
    '#title' => t('Language codes') . theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'languages')),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $default_language_code = (isset($settings['language_list']['default_language'])) ? $settings['language_list']['default_language'] : 'en_US';

  $form['language_list']['default_language'] = array(
    '#type' => 'select',
    '#title' => 'Default',
    '#options' => $language_codes,
    '#default_value' => $default_language_code,
    '#description' => t('Language code. For instance: en_US, nl_NL, fr_FR, ...'),
  );

  $form['logs'] = array(
    '#type' => 'select',
    '#title' => t('Logs an issue'),
    '#prefix' => theme('advanced_help_topic', array('module' => 'commerce_ingenico', 'topic' => 'logs')),
    '#options' => array(
      '0' => 'Always log an issue',
      '1' => 'Never log issues',
    ),
    '#default_value' => $default_language_code,
  );

  $form['api_logs'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['api_logs'],
  );

  // Hidden form element for initial validation.
  $form['validate'] = array(
    '#type' => 'hidden',
    '#title' => t('validate'),
    '#description' => t('validate'),
    '#element_validate' => array('validate_element'),
  );

  $form['#submit'][] = 'commerce_ingenico_settings_form_submit';

  return $form;
}

/**
 * Validate the merchant credentials.
 *
 * (Compare them with the ones entered on ingenico site.)
 */
function validate_element($element, $form, &$form_state) {
  // Test the entered credentials.
  $transaction = commerce_payment_transaction_new('ingenico', 0);
  $transaction->instance_id = 'ingenico_direct|commerce_payment_ingenico_direct';

  $api = new IngenicoApi($form['values']['parameter']['payment_method']['settings']['payment_method']['settings']);
  $result = $api->query($transaction, $pay_id = 1, $sub_id = '', $order = '');

  $data = $api->getResponseData($result->data);

  if ($data['NCERRORPLUS'] === 'The data you entered is not correct. Please retry.' and $form['values']['parameter']['payment_method']['settings']['payment_method']['settings']['logs'] == 0) {
    form_error($element, t('Your API credentials are wrong! Visit Ingenico site and verify your credentials. You should enter the same PSPID, USERID, PSWD, SHA-IN Pass phrase, SHA-IN Pass phrase, as those on the Ingenico site (USERID is the id of the ‘special’ API user).'));
    watchdog('commerce_ingenico', "Your API credentials are wrong! Visit Ingenico site and verify your credentials. You should enter the same PSPID, USERID, PSWD, SHA-IN Pass phrase, SHA-IN Pass phrase, as those on the Ingenico site (USERID is the id of the ‘special’ API user.", array(), WATCHDOG_ERROR);
  }

  // Sync the main credential settings for both of the methods
  // offsite and direct.
  // Change the settings for the direct payment if the offsite was set.
  if (strstr(current_path(), 'commerce_payment_ingenico_offsite') != FALSE) {
    // Load the configuration for the direct payment.
    $rule = rules_config_load('commerce_payment_ingenico_direct');

    // Loop through all elements of the rule.
    foreach ($rule->actions() as $action) {
      if ($action->getElementName() == 'commerce_payment_enable_' . 'ingenico_direct') {
        if (is_array($action->settings['payment_method']) && !empty($action->settings['payment_method']['settings'])) {
          $payment_method['settings'] = $action->settings['payment_method']['settings'];
        }
      }
      if (empty($action->settings['payment_method']['settings'])) {
        $action->settings['payment_method'] = array(
          'settings' => array(
            // Url account.
            'account' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['account']['#value'],
            // PSPID.
            'pspid' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['pspid']['#value'],
            // Userid.
            'userid' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['userid']['#value'],
            // Password.
            'password' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['password']['#value'],
            // Sha algorithm.
            'sha_algorithm' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_algorithm']['#value'],
            // Sha-in.
            'sha_in' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_in']['#value'],
            // Sha-out.
            'sha_out' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_out']['#value'],
            // Transaction type process.
            'transaction_type_process' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['transaction_type_process']['#value'],
            // Language.
            'language_list' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['language_list']['#value'],
            // Logs.
            'logs' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['logs']['#value'],
            // API logs.
            'api_logs' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['api_logs']['#value'],
          ),
        );
        // Save the settings for the direct payment method.
        $action->save();
      }
      else {
        // Url account.
        $action->settings['payment_method']['settings']['account'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['account']['#value'];
        // PSPID.
        $action->settings['payment_method']['settings']['pspid'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['pspid']['#value'];
        // Userid.
        $action->settings['payment_method']['settings']['userid'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['userid']['#value'];
        // Password.
        $action->settings['payment_method']['settings']['password'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['password']['#value'];
        // Sha algorithm.
        $action->settings['payment_method']['settings']['sha_algorithm'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_algorithm']['#value'];
        // Sha-in.
        $action->settings['payment_method']['settings']['sha_in'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_in']['#value'];
        // Sha-out.
        $action->settings['payment_method']['settings']['sha_out'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_out']['#value'];
        // Transaction type process.
        $action->settings['payment_method']['settings']['transaction_type_process'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['transaction_type_process']['#value'];
        // Language.
        $action->settings['payment_method']['settings']['language_list'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['language_list']['#value'];
        // Logs.
        $action->settings['payment_method']['settings']['logs'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['logs']['#value'];
        // API logs.
        $action->settings['payment_method']['settings']['api_logs'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['api_logs']['#value'];
        // Save the settings for the direct payment method.
        $action->save();
      }
    }
  }
  // If we've selected the direct payment method.
  elseif (strstr(current_path(), 'commerce_payment_ingenico_direct') != FALSE) {
    // Load the configuration for the direct payment.
    $rule = rules_config_load('commerce_payment_ingenico_offsite');

    // Loop through all elements of the rule.
    foreach ($rule->actions() as $action) {
      if ($action->getElementName() == 'commerce_payment_enable_' . 'ingenico_offsite') {
        if (is_array($action->settings['payment_method']) && !empty($action->settings['payment_method']['settings'])) {
          $payment_method['settings'] = $action->settings['payment_method']['settings'];
        }
      }
      if (empty($action->settings['payment_method']['settings'])) {
        $action->settings['payment_method'] = array(
          'settings' => array(
            // Url account.
            'account' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['account']['#value'],
            // PSPID.
            'pspid' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['pspid']['#value'],
            // Userid.
            'userid' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['userid']['#value'],
            // Password.
            'password' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['password']['#value'],
            // Sha algorithm.
            'sha_algorithm' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_algorithm']['#value'],
            // Sha-in.
            'sha_in' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_in']['#value'],
            // Sha-out.
            'sha_out' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_out']['#value'],
            // Transaction type process.
            'transaction_type_process' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['transaction_type_process']['#value'],
            // Language.
            'language_list' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['language_list']['#value'],
            // Logs.
            'logs' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['logs']['#value'],
            // API logs.
            'api_logs' => $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['api_logs']['#value'],
          ),
        );
        // Save the settings for the direct payment method.
        $action->save();
      }
      else {
        // Url account.
        $action->settings['payment_method']['settings']['account'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['account']['#value'];
        // PSPID.
        $action->settings['payment_method']['settings']['pspid'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['pspid']['#value'];
        // Userid.
        $action->settings['payment_method']['settings']['userid'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['userid']['#value'];
        // Password.
        $action->settings['payment_method']['settings']['password'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['password']['#value'];
        // Sha algorithm.
        $action->settings['payment_method']['settings']['sha_algorithm'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_algorithm']['#value'];
        // Sha-in.
        $action->settings['payment_method']['settings']['sha_in'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_in']['#value'];
        // Sha-out.
        $action->settings['payment_method']['settings']['sha_out'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['sha_out']['#value'];
        // Transaction type process.
        $action->settings['payment_method']['settings']['transaction_type_process'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['transaction_type_process']['#value'];
        // Language.
        $action->settings['payment_method']['settings']['language_list'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['language_list']['#value'];
        // Logs.
        $action->settings['payment_method']['settings']['logs'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['logs']['#value'];
        // API logs.
        $action->settings['payment_method']['settings']['api_logs'] = $form_state['parameter']['payment_method']['settings']['payment_method']['settings']['api_logs']['#value'];
        // Save the settings for the direct payment method.
        $action->save();
      }
    }
  }

  return TRUE;
}

/**
 * Payment method callback: redirect form.
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function commerce_ingenico_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['pspid'])) {
    drupal_set_message(t('Ingenico is not configured for use. No Ingenico PSPID has been specified.'), 'error');
    return array();
  }

  // Set feedback URLs.
  $settings = array(
    // Return to the previous page when payment is cancelled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_ingenico_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Helper function for the redirect_form callback.
 *
 * Builds an Ingenico payment form from an order object.
 */
function commerce_ingenico_build_redirect_form($form, &$form_state, $order, $settings) {
  global $user, $base_root;
  $customer_profile = commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get financial info.
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $customer_name = $wrapper->commerce_customer_billing->commerce_customer_address->name_line->value();
  // Get the device.
  if (strstr($_SERVER['HTTP_USER_AGENT'], 'Android') != FALSE) {
    $device = 'mobile';
  }
  elseif (strstr($_SERVER['HTTP_USER_AGENT'], 'Macintosh') != FALSE) {
    $device = 'Macintosh';
  }
  elseif (strstr($_SERVER['HTTP_USER_AGENT'], 'Linux') != FALSE) {
    $device = 'Linux';
  }
  elseif (strstr($_SERVER['HTTP_USER_AGENT'], 'Windows') != FALSE) {
    $device = 'Windows';
  }
  else {
    $device = 'mobile';
  }
  // Build the data array that will be translated into hidden form values.
  // NOTE: keys should be uppercase for the SHA security string.
  $data = array(
    // General parameters.
    'PSPID' => $settings['pspid'],
    'ORDERID' => $order->order_id . '-' . time(),
    'AMOUNT' => $amount,
    'CURRENCY' => $currency_code,
    'LANGUAGE' => _commerce_ingenico_get_language_code($settings),
    'CN' => $customer_name,
    'ORIG' => 'OGDC140415',
    'EMAIL' => $order->mail,
    // Layout.
    'TITLE' => t('Order @order_number at @store', array(
      '@order_number' => $order->order_number,
      '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))),
    )),
    // Feedback URLs.
    'ACCEPTURL' => $settings['return'],
    'DECLINEURL' => $settings['return'],
    'EXCEPTIONURL' => $settings['return'],
    'CANCELURL' => $settings['cancel_return'],
    'DEVICE' => $device,
    'OWNERADDRESS' => trim($customer_profile->commerce_customer_address['und'][0]['thoroughfare']),
    'OWNERZIP' => trim($customer_profile->commerce_customer_address['und'][0]['postal_code']),
    'OWNERTOWN' => trim($customer_profile->commerce_customer_address['und'][0]['dependent_locality']),
    'OWNERCTY' => trim($customer_profile->commerce_customer_address['und'][0]['country']),
  );

  // Adds Bill to information.
  $data['ECOM_BILLTO_POSTAL_CITY'] = trim($customer_profile->commerce_customer_address['und'][0]['locality']);
  $data['ECOM_BILLTO_POSTAL_COUNTRYCODE'] = trim($customer_profile->commerce_customer_address['und'][0]['country']);
  $data['ECOM_BILLTO_POSTAL_NAME_FIRST'] = trim($customer_profile->commerce_customer_address['und'][0]['first_name']);
  $data['ECOM_BILLTO_POSTAL_NAME_LAST'] = trim($customer_profile->commerce_customer_address['und'][0]['last_name']);
  $data['ECOM_BILLTO_POSTAL_POSTALCODE'] = trim($customer_profile->commerce_customer_address['und'][0]['postal_code']);
  $data['ECOM_BILLTO_POSTAL_STREET_LINE1'] = trim($customer_profile->commerce_customer_address['und'][0]['thoroughfare']);
  $data['ECOM_BILLTO_POSTAL_STREET_LINE2'] = trim($customer_profile->commerce_customer_address['und'][0]['premise']);

  if (module_exists('commerce_shipping')) {
    $customer_profile = commerce_customer_profile_load($order->commerce_customer_shipping['und'][0]['profile_id']);
    $data['ECOM_SHIPTO_COMPANY'] = trim($customer_profile->commerce_customer_address['und'][0]['organisation_name']);
    $data['ECOM_SHIPTO_ONLINE_EMAIL'] = trim($order->mail);
    $data['ECOM_SHIPTO_POSTAL_CITY'] = trim($customer_profile->commerce_customer_address['und'][0]['locality']);
    $data['ECOM_SHIPTO_POSTAL_COUNTRYCODE'] = trim($customer_profile->commerce_customer_address['und'][0]['country']);
    $data['ECOM_SHIPTO_POSTAL_NAME_FIRST'] = trim($customer_profile->commerce_customer_address['und'][0]['first_name']);
    $data['ECOM_SHIPTO_POSTAL_NAME_LAST'] = trim($customer_profile->commerce_customer_address['und'][0]['last_name']);
    $data['ECOM_SHIPTO_POSTAL_POSTALCODE'] = trim($customer_profile->commerce_customer_address['und'][0]['postal_code']);
    $data['ECOM_SHIPTO_POSTAL_STREET_LINE1'] = trim($customer_profile->commerce_customer_address['und'][0]['thoroughfare']);
    $data['ECOM_SHIPTO_POSTAL_STREET_LINE2'] = trim($customer_profile->commerce_customer_address['und'][0]['premise']);
  }
  else {
    $data['ECOM_SHIPTO_COMPANY'] = trim($customer_profile->commerce_customer_address['und'][0]['organisation_name']);
    $data['ECOM_SHIPTO_ONLINE_EMAIL'] = trim($order->mail);
    $data['ECOM_SHIPTO_POSTAL_CITY'] = trim($customer_profile->commerce_customer_address['und'][0]['locality']);
    $data['ECOM_SHIPTO_POSTAL_COUNTRYCODE'] = trim($customer_profile->commerce_customer_address['und'][0]['country']);
    $data['ECOM_SHIPTO_POSTAL_NAME_FIRST'] = trim($customer_profile->commerce_customer_address['und'][0]['first_name']);
    $data['ECOM_SHIPTO_POSTAL_NAME_LAST'] = trim($customer_profile->commerce_customer_address['und'][0]['last_name']);
    $data['ECOM_SHIPTO_POSTAL_POSTALCODE'] = trim($customer_profile->commerce_customer_address['und'][0]['postal_code']);
    $data['ECOM_SHIPTO_POSTAL_STREET_LINE1'] = trim($customer_profile->commerce_customer_address['und'][0]['thoroughfare']);
    $data['ECOM_SHIPTO_POSTAL_STREET_LINE2'] = trim($customer_profile->commerce_customer_address['und'][0]['premise']);
  }

  if (!empty($form_state['value']['PM']) and !empty($form_state['value']['type']) and $form_state['value']['type'] != 'other') {
    $data['PM'] = !empty($form_state['value']['PM']) ? $form_state['value']['PM'] : '';
    $data['BRAND'] = !empty($form_state['value']['type']) ? $form_state['value']['type'] : '';
  }
  if (!empty($settings['3d_secure']) and $settings['3d_secure'] == 0) {
    $data['WIN3DS'] = 'MAINW';
    $data['FLAG3D'] = 'Y';
  }

  if ($settings['transaction_type_process'] == 'sale') {
    $data['OPERATION'] = 'VEN';
  }
  elseif ($settings['transaction_type_process'] == 'capture_manual') {
    $data['OPERATION'] = 'RES';
  }

  if (!empty($settings['modify_card_types']) and $settings['modify_card_types'] == 1) {
    $data['ACCEPTURL'] = $base_root . '/commerce_ingenico/redirect';
    $data['DECLINEURL'] = $base_root . '/commerce_ingenico/redirect';
    $data['EXCEPTIONURL'] = $base_root . '/commerce_ingenico/redirect';
    $data['CANCELURL'] = $base_root . '/commerce_ingenico/redirect';
  }
  else {
    $data['ACCEPTURL'] = $base_root . '/commerce_ingenico/redirect';
    $data['DECLINEURL'] = $base_root . '/commerce_ingenico/redirect';
    $data['EXCEPTIONURL'] = $base_root . '/commerce_ingenico/redirect';
    $data['CANCELURL'] = $base_root . '/commerce_ingenico/redirect';
  }

  if (!empty($settings['alias_manager']['enable_alias_manager'])) {
    $data['ALIAS'] = $user->uid;
    $data['ALIASUSAGE'] = $settings['alias_manager']['alias_manager_usage'];
  }

  // Allow modules to add or alter the data sent to Ingenico before signing.
  drupal_alter('commerce_ingenico_data', $data, $order, $settings);

  // NOTE: data should be ordered alphabetically for the SHA string.
  ksort($data);

  // Build the Ingenico redirection URL.
  $url = variable_get('commerce_ingenico_provider_url', 'https://secure.ogone.com/ncol/');
  $url .= $settings['account'] . '/orderstandard_utf8.asp';
  $form['#action'] = $url;

  $api = commerce_ingenico_api_object($settings, $settings['payment_method']);
  // Get the hash algorithm.
  $sha_composer = $api->preparePhraseToHash('sha_in', $settings['sha_algorithm']);
  // Hash the sha phrace with the billing data.
  $shasign = $sha_composer->compose($data);

  // Generate SHA security string & add hidden parameters to form.
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $value = trim($value);
      // Add the value as a hidden form element.
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  // Add the calculated SHA string.
  $form['SHASign'] = array('#type' => 'hidden', '#value' => $shasign);

  $api->logRequest(array(
    '@type' => 'Request',
    '@operation' => 'redirect',
    '%value' => $data + array('SHASign' => $shasign),
  ));

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed with payment'),
  );

  foreach ($form as $key => $value) {
    if ($key == '#action' || $key == 'ACCEPTURL' || $key == 'ALIAS' || $key == 'ALIASUSAGE' || $key == 'AMOUNT' || $key == 'BRAND' || $key == 'CANCELURL' || $key == 'CN' || $key == 'CURRENCY' || $key == 'DECLINEURL' || $key == 'DEVICE' ||
      $key == 'EMAIL' || $key == 'EXCEPTIONURL' || $key == 'LANGUAGE' || $key == 'OPERATION' || $key == 'ORDERID' || $key == 'ORIG' || $key == 'PM' || $key == 'PSPID' || $key == 'TITLE' ||
      $key == 'OWNERADDRESS' || $key == 'OWNERZIP' || $key == 'OWNERTOWN' || $key == 'OWNERCTY' ||
      $key == 'ECOM_BILLTO_POSTAL_CITY' || $key == 'ECOM_BILLTO_POSTAL_COUNTRYCODE' || $key == 'ECOM_BILLTO_POSTAL_NAME_FIRST' || $key == 'ECOM_BILLTO_POSTAL_NAME_LAST' ||
      $key == 'ECOM_BILLTO_POSTAL_POSTALCODE' || $key == 'ECOM_BILLTO_POSTAL_STREET_LINE1' || $key == 'ECOM_BILLTO_POSTAL_STREET_LINE2' || $key == 'SHASign'
      || $key == 'ECOM_SHIPTO_COMPANY' || $key == 'ECOM_SHIPTO_ONLINE_EMAIL' || $key == 'ECOM_SHIPTO_POSTAL_CITY' || $key == 'ECOM_SHIPTO_POSTAL_COUNTRYCODE'
      || $key == 'ECOM_SHIPTO_POSTAL_NAME_FIRST' || $key == 'ECOM_SHIPTO_POSTAL_NAME_LAST' || $key == 'ECOM_SHIPTO_POSTAL_POSTALCODE' || $key == 'ECOM_SHIPTO_POSTAL_STREET_LINE1'
      || $key == 'ECOM_SHIPTO_POSTAL_STREET_LINE2' || $key == 'submit'
    ) {
      $new_form[$key] = $value;
    }
  }
  ksort($new_form);
  $form = $new_form;
  $order->data['payment_method'] = $settings['payment_method'];
  commerce_order_save($order);

  return $form;
}


/**
 * Implements hook_redirect_form_validate().
 */
function commerce_ingenico_redirect_form_validate($order, $payment_method) {
  return commerce_ingenico_process_callback($order, $payment_method);
}

/**
 * Gets the Ingenico feedback from GET / POST parameters.
 *
 * @return array
 *   An associative array containing the Ingenico feedback taken from the $_GET
 *   and $_POST superglobals, excluding 'q'
 *   and with the parameter keys uppercased.
 *   Returns FALSE if the SHASIGN parameter is missing (indicating missing or
 *   invalid Ingenico feedback).
 */
function commerce_ingenico_get_feedback() {
  $feedback = FALSE;
  if (isset($_REQUEST['SHASIGN'])) {
    // Prepare the feedback values sent by ingenico for processing. We don't use
    // $_REQUEST since this includes the $_SESSION variables.
    $feedback = $_GET + $_POST;
    unset($feedback['q']);
    $feedback = array_change_key_case($feedback, CASE_UPPER);
  }
  return $feedback;
}

/**
 * Check if SHA in callback feedback is valid.
 */
function commerce_ingenico_valid_sha_callback($order, $payment_method, $feedback) {
  module_load_include('inc', 'commerce_ingenico', 'commerce_ingenico.sha');
  // Check if the received SHA string is valid.
  // $sha_out = $payment_method['settings']['sha_out'];
  if (empty($payment_method)) {
    $payment_method = commerce_payment_method_instance_load('ingenico_offsite|commerce_payment_ingenico_offsite');
  }
  if (!commerce_ingenico_feedback_valid_sha($feedback)) {
    if ($payment_method['settings']['logs'] == 0) {
      watchdog('commerce_ingenico', "SHA signature doesn't match", array(), WATCHDOG_ERROR);
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Menu callback handler for Ingenico Direct HTTP server-to-server request.
 */
function commerce_ingenico_callback() {
  // Load order and payment_method objects.
  if ($feedback = commerce_ingenico_get_feedback()) {
    $order = commerce_order_load_by_number($feedback['ORDERID']);
    if ($order) {
      // Load the payment method, since it won't be available
      // if no $order object was passed in as argument.
      $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
      if (!$payment_method || $payment_method['method_id'] != 'ingenico') {
        return FALSE;
      }
      if (commerce_ingenico_valid_sha_callback($order, $payment_method, $feedback)) {
        commerce_ingenico_process_transaction($order, $payment_method, $feedback);
      }
    }
  }
  return FALSE;
}

/**
 * Process callback information from Ingenico.
 *
 * This can either be through a redirect after payment,
 * or a Direct HTTP server-to-server request
 */
function commerce_ingenico_process_callback($order, $payment_method) {
  if ($feedback = commerce_ingenico_get_feedback()) {
    if (commerce_ingenico_valid_sha_callback($order, $payment_method, $feedback)) {
      // Process the transaction based on the Ingenico parameters received.
      commerce_ingenico_process_transaction($order, $payment_method, $feedback);
      return TRUE;
    }
  }
}

/**
 * Get transaction with a specific Ingenico PAYID.
 */
function commerce_ingenico_get_payment_transaction($feedback) {
  $feedback_remote_id = $feedback['PAYID'];
  $query = new EntityFieldQuery();

  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('payment_method', 'ingenico')
    ->propertyCondition('remote_id', $feedback_remote_id)
    ->execute();
  if (isset($result['commerce_payment_transaction']) && count($result['commerce_payment_transaction']) > 0) {
    $transaction = array_pop($result['commerce_payment_transaction']);
    return $transaction->transaction_id;
  }
  return FALSE;
}

/**
 * Process the payment transaction with the info received from Ingenico.
 *
 * @param object $order
 *   The loaded order that is being processed
 * @param array $payment_method
 *   The payment method settings
 * @param array $feedback
 *   The parameters received from Ingenico regarding the payment
 * @param bool $redirect
 *   Specifies whether to call redirect functions or not
 */
function commerce_ingenico_process_transaction($order, $payment_method, $feedback, $redirect = TRUE) {
  $transaction_id = commerce_ingenico_get_payment_transaction($feedback);
  if (!$transaction_id) {
    $transaction = commerce_payment_transaction_new('ingenico', $order->order_id);
  }
  else {
    $transaction = commerce_payment_transaction_load($transaction_id);
  }

  $payment_status = commerce_ingenico_feedback_status($feedback['STATUS']);

  // Identifying data.
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $feedback['PAYID'];
  // Payment amount details.
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  // Payment status.
  $transaction->payment_method = 'ingenico_offsite';
  $transaction->remote_status = $feedback['STATUS'];
  $transaction->status = ($payment_method['settings']['transaction_type_process'] == 'capture_manual') ? COMMERCE_PAYMENT_STATUS_PENDING : COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED;
  $transaction->message = commerce_ingenico_status_messages($feedback['STATUS']);
  $transaction->payload = $feedback;
  commerce_payment_transaction_save($transaction);
  if ($redirect) {
    if ($payment_status['code'] == COMMERCE_PAYMENT_STATUS_FAILURE) {
      commerce_payment_redirect_pane_previous_page($order);
    }
    else {
      commerce_payment_redirect_pane_next_page($order);
    }
  }
}

/**
 * Get a list of enabled currencies.
 *
 * @TODO: figure out which currencies Ingenico actually supports
 */
function commerce_ingenico_currencies() {
  // Build a currency options list from all enabled currencies.
  $options = array();

  foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
    $options[$currency_code] = t('@code - !name', array(
      '@code' => $currency['code'],
      '@symbol' => $currency['symbol'],
      '!name' => $currency['name'],
    ));

    if (!empty($currency['symbol'])) {
      $options[$currency_code] .= ' - ' . check_plain($currency['symbol']);
    }
  }

  return $options;
}

/**
 * Get a payment status and message based on Ingenico status ID.
 *
 * @param int $status
 *   received ingenico status ID
 *
 * @return array
 *   key 'code' contains the commerce status
 *   key 'message' contains a textual representation of the ingenico status ID
 */
function commerce_ingenico_feedback_status($status) {
  switch ($status) {
    // Success.
    case 4:
      // Order stored.
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Order stored');
      break;

    case 5:
      // Authorized.
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Authorized');
      break;

    case 8:
      // Refund.
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Refund');
      break;

    case 85:
      // Refund processed by merchant.
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Refund processed by merchant');
      break;

    case 9:
      // Payment requested.
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Payment requested');
      break;

    case 95:
      // Payment processed by merchant.
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Payment processed by merchant');
      break;

    // Pending.
    case 40:
      // Stored waiting external result.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Stored waiting external result');
      break;

    case 41:
      // Waiting client payment.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Waiting client payment');
      break;

    case 50:
      // Authorized waiting external result.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authorized waiting external result');
      break;

    case 51:
      // Authorization waiting.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authorization waiting');
      break;

    case 55:
      // Stand-by.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Stand-by');
      break;

    case 56:
      // OK with scheduled payments.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('OK with scheduled payments');
      break;

    case 59:
      // Authoriz. to get manually.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authoriz. to get manually');
      break;

    case 81:
      // Refund pending.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Refund pending');
      break;

    case 82:
      // Refund uncertain.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Refund uncertain');
      break;

    case 91:
      // Payment processing.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Payment processing');
      break;

    case 92:
      // Payment uncertain.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Payment uncertain');
      break;

    case 99:
      // Being processed.
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Being processed');
      break;

    // Failure.
    case 0:
      // Incomplete or invalid.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Incomplete or invalid');
      break;

    case 1:
      // Cancelled by client.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Cancelled by client');
      break;

    case 2:
      // Authorization refused.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorization refused');
      break;

    case 52:
      // Authorization not known.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorization not known');
      break;

    case 57:
      // Error in scheduled payments.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Error in scheduled payments');
      break;

    case 6:
      // Authorized and cancelled.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorized and cancelled');
      break;

    case 61:
      // Author. deletion waiting.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Author. deletion waiting');
      break;

    case 62:
      // Author. deletion uncertain.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Author. deletion uncertain');
      break;

    case 63:
      // Author. deletion refused.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Author. deletion refused');
      break;

    case 64:
      // Authorized and cancelled.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorized and cancelled');
      break;

    case 7:
      // Payment deleted.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deleted');
      break;

    case 71:
      // Payment deletion pending.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deletion pending');
      break;

    case 72:
      // Payment deletion uncertain.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deletion uncertain');
      break;

    case 73:
      // Payment deletion refused.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deletion refused');
      break;

    case 74:
      // Payment deleted.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deleted');
      break;

    case 75:
      // Deletion processed by merchant.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Deletion processed by merchant');
      break;

    case 83:
      // Refund refused.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Refund refused');
      break;

    case 84:
      // Payment declined by the acquirer.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment declined by the acquirer');
      break;

    case 93:
      // Payment refused.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment refused');
      break;

    case 94:
      // Refund declined by the acquirer.
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Refund declined by the acquirer');
      break;

    default:
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Unknown feedback status');
      break;
  }
  return array(
    'code' => $st,
    'message' => $msg,
  );
}


/**
 * Looks up the language code of a enabled language.
 *
 * @param array $settings
 *   Received settings
 *
 * @return string
 *   Language code.
 */
function _commerce_ingenico_get_language_code($settings) {
  global $language;
  $ingenico_language_codes = _commerce_ingenico_get_language_code_list();
  if (isset($settings['language_list'][$language->language])) {
    $langcode = $settings['language_list'][$language->language];
  }
  else {
    $default_prefix_code = explode('-', $language->prefix);
    $default_prefix_code = $default_prefix_code[0] . '_' . drupal_strtoupper($default_prefix_code[0]);
    if (isset($ingenico_language_codes[$default_prefix_code])) {
      $langcode = $default_prefix_code;
    }
    else {
      $langcode = $settings['language_list']['default_language'];
    }
  }
  return $langcode;
}

/**
 * Returns a list of supported ingenico language codes.
 *
 * @return array
 *   Language codes,
 */
function _commerce_ingenico_get_language_code_list() {
  $language_codes = array(
    'ar_AR' => t('Arabic'),
    'cs_CZ' => t('Czech'),
    'zh_CN' => t('Chinese'),
    'da_DK' => t('Danish'),
    'nl_BE' => t('Dutch (Belgium)'),
    'nl_NL' => t('Dutch'),
    'en_GB' => t('English (UK)'),
    'en_US' => t('English (US)'),
    'fr_FR' => t('French'),
    'de_DE' => t('German'),
    'el_GR' => t('Greek'),
    'hu_HU' => t('Hungarian'),
    'it_IT' => t('Italian'),
    'ja_JP' => t('Japanese'),
    'no_NO' => t('Norwegian'),
    'pl_PL' => t('Polish'),
    'pt_PT' => t('Portuguese'),
    'ru_RU' => t('Russian'),
    'sk_SK' => t('Slovak'),
    'es_ES' => t('Spanish'),
    'se_SE' => t('Swedish'),
    'tr_TR' => t('Turkish'),
  );
  return $language_codes;
}

/**
 * Loads transactions by transaction id.
 */
function commerce_ingenico_transaction_load($transaction_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('transaction_id', $transaction_id)
    ->propertyOrderBy('transaction_id', 'DESC');
  $return = array();
  $result = $query->execute();
  if (!empty($result['commerce_payment_transaction'])) {
    foreach ($result['commerce_payment_transaction'] as $transaction_id) {
      $return[] = entity_load_single('commerce_payment_transaction', $transaction_id->transaction_id);
    }
  }
  return $return;
}

/**
 * Implements hool_commerce_payment_transaction_status_info().
 */
function commerce_ingenico_commerce_payment_transaction_status_info() {
  $statuses = array();

  $statuses[COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED] = array(
    'status' => COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED,
    'title' => t('Captured'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  $statuses[COMMERCE_INGENICO_PAYMENT_STATUS_REFUND] = array(
    'status' => COMMERCE_INGENICO_PAYMENT_STATUS_REFUND,
    'title' => t('Refund'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => FALSE,
  );

  $statuses[COMMERCE_INGENICO_PAYMENT_STATUS_CANCELLED] = array(
    'status' => COMMERCE_INGENICO_PAYMENT_STATUS_CANCELLED,
    'title' => t('Cancelled'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-failure.png',
    'total' => FALSE,
  );

  return $statuses;
}

/**
 * Capture function to be implemented with rules.
 */
function commerce_ingenico_capture($transaction, $amount, $order, $payment_method) {
  $order = commerce_order_load($transaction->order_id);
  $payment_methods = commerce_payment_method_instance_load($transaction->instance_id);
  $transaction_method = explode('|', $transaction->instance_id);
  $transaction_method = $transaction_method[0];
  $transaction->amount = $amount;
  $description = t('Authorization capture for order #@order_id at @site_name', array(
    '@order_id' => $order->order_id,
    '@site_name' => variable_get('site_name', ''),
  ));
  $api = commerce_ingenico_api_object();
  $result = $api->crossPayment($order, $transaction, $type = 'SAS', $operation = 'capture');
  $data = $api->getResponseData($result->data);
  if ($result->status_message == 'OK' and $result->code == 200 and $data['NCERROR'] == 0) {
    $transaction->amount = commerce_currency_decimal_to_amount($amount, $transaction->currency_code);
    $transaction->remote_id = !empty($data['PAYIDSUB']) ? $data['PAYID'] . '/' . $data['PAYIDSUB'] : $data['PAYID'];
    $transaction->status = COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED;
    $transaction->message .= '<br />' . t('Captured: @date', array('@date' => format_date(REQUEST_TIME, 'short')));
    commerce_payment_transaction_save($transaction);
    return TRUE;
  }
  elseif ($data['NCERROR'] == '50001127') {
    $transaction->remote_id = !empty($data['PAYIDSUB']) ? $data['PAYID'] . '/' . $data['PAYIDSUB'] : $data['PAYID'];
    $transaction->status = COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED;
    $transaction->message .= '<br />' . t('Captured: @date', array('@date' => format_date(REQUEST_TIME, 'short')));
    commerce_payment_transaction_save($transaction);
    drupal_set_message(t('This order has been captured previously.'));
  }
  else {
    drupal_set_message(t('The operation was not successful.'), 'error');
    if ($payment_method['settings']['logs'] == 0) {
      watchdog('commerce_ingenico', "The operation was not successful. Transaction with id: %id was not captured.", array('%id' => $transaction->transaction_id), WATCHDOG_ERROR);
    }
    return FALSE;
  }
}

/**
 * Update the status of all captured transactions outside of Drupal.
 */
function commerce_ingenico_query_update($transaction, $manual = '') {
  $instance = commerce_payment_method_instance_load($transaction->instance_id);
  $api = commerce_ingenico_api_object($instance['settings'], $transaction->instance_id);
  $pay_id = explode('/', $transaction->remote_id);
  $sub_id = !empty($pay_id[1]) ? $pay_id[1] : '';
  $result = $api->query($transaction, $pay_id[0], $sub_id, $sub_id);

  $data = $api->getResponseData($result->data);
  switch ($data['STATUS']) {
    case '91':
      $transaction->status = COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED;
      $transaction->message = commerce_ingenico_status_messages($data['STATUS']);
      commerce_payment_transaction_save($transaction);
      if ($manual == 1) {
        return TRUE;
      }
      break;

    case '9':
      $transaction->status = COMMERCE_INGENICO_PAYMENT_STATUS_CAPTURED;
      $transaction->message = commerce_ingenico_status_messages($data['STATUS']);
      commerce_payment_transaction_save($transaction);
      if ($manual == 1) {
        return TRUE;
      }
      break;

    case '61':
      $transaction->status = COMMERCE_INGENICO_PAYMENT_STATUS_CANCELLED;
      $transaction->message = commerce_ingenico_status_messages($data['STATUS']);
      commerce_payment_transaction_save($transaction);
      if ($manual == 1) {
        return TRUE;
      }
      break;
  }

  if ($manual == 1) {
    return FALSE;
  }
}

/**
 * Returns status code messages.
 */
function commerce_ingenico_status_messages($status) {
  $codes = array(
    '0' => t('Incomplete or invalid.'),
    '1' => t('Cancelled by client.'),
    '2' => t('Authorisation refused.'),
    '4' => t('Order stored.'),
    '41' => t('Waiting client payment.'),
    '5' => t('Authorised.'),
    '51' => t('Authorisation waiting.'),
    '52' => t('Authorisation not known.'),
    '59' => t('Author. to get manually.'),
    '6' => t('Authorised and cancelled.'),
    '61' => t('Author. deletion waiting.'),
    '62' => t('Author. deletion uncertain.'),
    '63' => t('Author. deletion refused.'),
    '7' => t('Payment deleted.'),
    '71' => t('Payment deletion pending.'),
    '72' => t('Payment deletion uncertain.'),
    '73' => t('Payment deletion refused.'),
    '74' => t('Payment deleted (not accepted).'),
    '75' => t('Deletion processed by merchant.'),
    '8' => t('Refund.'),
    '81' => t('Refund pending.'),
    '82' => t('Refund uncertain.'),
    '83' => t('Refund refused.'),
    '84' => t('Payment declined by the acquirer (will be debited).'),
    '85' => t('Refund processed by merchant.'),
    '9' => t('Payment requested.'),
    '91' => t('Payment processing.'),
    '92' => t('Payment uncertain.'),
    '93' => t('Payment refused.'),
    '94' => t('Refund declined by the acquirer.'),
    '95' => t('Payment processed by merchant.'),
    '97' => t('Being processed (intermediate technical status).'),
    '98' => t('Being processed (intermediate technical status).'),
    '99' => t('Being processed (intermediate technical status).'),
  );

  if (!empty($codes[$status])) {
    return $codes[$status];
  }

}

/**
 * Return all payment methods.
 */
function commerce_ingenico_payment_methods() {
  return array(
    'paypal' => array(
      'PM' => 'PAYPAL',
      'BRAND' => t('PAYPAL'),
    ),
    'visa' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('Visa'),
    ),
    'mastercard' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('MasterCard'),
    ),
    'amex' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('American Express'),
    ),
    'maestro' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('Maestro'),
    ),
    'maestrouk' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('MaestroUK'),
    ),
    'bcmc' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('BCMC'),
    ),
    'dc' => array(
      'PM' => 'CreditCard',
      'BRAND' => t("Diners Club"),
    ),
    'jcb' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('JCB'),
    ),
    'postfinancecard' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('PostFinance Card'),
    ),
    '3xcb' => array(
      'PM' => '3XCB',
      'BRAND' => t('3XCB'),
    ),
    'cofinoga' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('Cofinoga'),
    ),
    'dankort' => array(
      'PM' => 'CreditCard',
      'BRAND' => t('Dankort'),
    ),
    'airplus' => array(
      'PM' => 'PostFinance Card',
      'BRAND' => t('AIRPLUS'),
    ),
    /* Web banking */
    'ideal' => array(
      'PM' => 'iDEAL',
      'BRAND' => t('iDEAL'),
    ),
    'amazoncheckout' => array(
      'PM' => 'Amazon Checkout',
      'BRAND' => t('Amazon Checkout'),
    ),
    'belfiusdirectnet' => array(
      'PM' => 'Belfius Direct Net',
      'BRAND' => t('Belfius Direct Net'),
    ),
    'cbconline' => array(
      'PM' => 'CBC Online',
      'BRAND' => t('CBC Online'),
    ),
    'kbc' => array(
      'PM' => 'KBC Online',
      'BRAND' => t('KBC Online'),
    ),
    'ing' => array(
      'PM' => 'ING HomePay',
      'BRAND' => t('ING HomePay'),
    ),
    'postfinance_e_finance' => array(
      'PM' => 'PostFinance e-finance',
      'BRAND' => t('PostFinance e-finance'),
    ),
    'edankort' => array(
      'PM' => 'eDankort',
      'BRAND' => t('eDankort'),
    ),
    'giropay' => array(
      'PM' => 'giropay',
      'BRAND' => t('giropay'),
    ),
    'paysafecard' => array(
      'PM' => 'paysafecard',
      'BRAND' => t('paysafecard'),
    ),
    'directebanking' => array(
      'PM' => 'DirectEbanking',
      'BRAND' => t('Sofort Uberweisung'),
    ),
    'directebankingat' => array(
      'PM' => 'DirectEbankingAT',
      'BRAND' => t('DirectEbankingAT'),
    ),
    'directebankingbe' => array(
      'PM' => 'DirectEbankingBE',
      'BRAND' => t('DirectEbankingBE'),
    ),
    'directebankingch' => array(
      'PM' => 'DirectEbankingCH',
      'BRAND' => t('DirectEbankingCH'),
    ),
    'directebankingde' => array(
      'PM' => 'DirectEbankingDE',
      'BRAND' => t('DirectEbankingDE'),
    ),
    'directebankingfr' => array(
      'PM' => 'DirectEbankingFR',
      'BRAND' => t('DirectEbankingFR'),
    ),
    'directebankinggb' => array(
      'PM' => 'DirectEbankingGB',
      'BRAND' => t('DirectEbankingGB'),
    ),
    'directebankingit' => array(
      'PM' => 'DirectEbankingIT',
      'BRAND' => t('DirectEbankingIT'),
    ),
    'directebankingnl' => array(
      'PM' => 'DirectEbankingNL',
      'BRAND' => t('DirectEbankingNL'),
    ),
    /* Direct Debits */
    'directdebitsat' => array(
      'PM' => 'Direct Debits AT',
      'BRAND' => t('Direct Debits AT'),
    ),
    'directdebitsde' => array(
      'PM' => 'Direct Debits DE',
      'BRAND' => t('Direct Debits DE'),
    ),
    'directdebitsnl' => array(
      'PM' => 'Direct Debits NL',
      'BRAND' => t('Direct Debits NL'),
    ),
    /* Offline payment */
    'banktransfer' => array(
      'PM' => 'Bank transfer',
      'BRAND' => t('Bank transfer'),
    ),
    'openinvoicede' => array(
      'PM' => 'Open Invoice DE',
      'BRAND' => t('Open Invoice DE'),
    ),
    'openinvoicenl' => array(
      'PM' => 'Open Invoice NL',
      'BRAND' => t('Open Invoice NL'),
    ),
    /* Gift Cards */
    'intersolve' => array(
      'PM' => 'InterSolve',
      'BRAND' => t('InterSolve'),
    ),
    /* Others */
    'cashex' => array(
      'PM' => 'cashEX',
      'BRAND' => t('cashEX'),
    ),
    'cashu' => array(
      'PM' => 'cashU',
      'BRAND' => t('cashU'),
    ),
    'cashudirect' => array(
      'PM' => 'cashU Direct',
      'BRAND' => t('cashU Direct'),
    ),
  );

}
