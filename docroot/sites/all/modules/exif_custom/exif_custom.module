<?php

/**
 * Implements hook_menu()
 * 
 * @return $items
 * A menu array
 */
function exif_custom_menu(){
  $items['admin/config/content/exif_custom'] = array(
    'title' => 'Custom Exif Mappings',
    'page callback' => 'exif_custom_mappings',
    'access arguments' => array(
      'view image metadata'
    ),
    'description' => t('Customise mappings of EXIF data'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/content/exif_custom/maps'] = array(
    'title' => 'Custom Exif Mappings',
    'page callback' => 'exif_custom_mappings',
    'access arguments' => array(
      'view image metadata'
    ),
    'description' => t('Customise mappings of EXIF data'),
    'access callback' => 'user_access',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/config/content/exif_custom/new_map'] = array(
    'title' => 'New Exif Mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'exif_custom_new_map_form'
    ),
    'access arguments' => array(
      'administer image metadata'
    ),
    'description' => t('Customise mappings of EXIF data'),
    'access callback' => 'user_access',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/config/content/exif_custom/map/%'] = array(
    'title' => 'Edit mapping',
    //TODO: title callback?
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'exif_custom_map_edit_form'
    ),
    'access arguments' => array(
      'administer image metadata'
    ),
    'description' => t('Customise mappings of EXIF data'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/content/exif_custom/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'exif_custom_settings_form'
    ),
    'access arguments' => array(
      'administer image metadata'
    ),
    'description' => t('Customise general settings for EXIF import'),
    'access callback' => 'user_access',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/config/content/exif_custom/user'] = array(
    'title' => 'User Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'exif_custom_settings_form_user'
    ),
    'access arguments' => array(
      'have default image metadata profile'
    ),
    'description' => t('Customise general settings for EXIF import'),
    'access callback' => 'user_access',
    'type' => MENU_LOCAL_TASK
  );
  return $items;
}

function exif_custom_permission(){
  return array(
    'have default image metadata profile' => array(
      'title' => t('Have default image metadata profile'),
      'description' => t('Allow users to override teh site default image metadata profile.')
    ),
    'view image metadata' => array(
      'title' => t('View iamge metadata'),
      'description' => t('See what image metdata import profiles have been created.')
    ),
    'administer image metadata' => array(
      'title' => 'Administer image metadata',
      'description' => 'Administer image metadata import profiles'
    )
  );
}

/**
 * 
 * General settings page for exif_custom module
 */
function exif_custom_settings_form(){
  $options = array(
    'auto-import' => 'Automatically save metadata using the default mapping'
  );
  $form['auto-import-options'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Automatic import',
    '#options' => $options,
    '#description' => t('Each user may set their own default mapping, in addition a site default may be set.'),
    '#default_value' => variable_get('exif_custom_checks', array())
  );
  $mappings = _exif_custom_get_maps();
  $options = array();
  $options['none'] = '';
  while($result = $mappings->fetchObject()){
    $options[$result->mid] = $result->name;
  }
  $form['site-default'] = array(
    '#type' => 'select',
    '#title' => 'Site default mapping',
    '#default_value' => exif_custom_get_mid(variable_get('exif_custom_default', '')),
    '#options' => $options,
    '#description' => 'Individual users may override the site default.'
  );
  $form['#submit'][] = 'exif_custom_settings_form_submit';
  return system_settings_form($form);
}

function exif_custom_settings_form_user(){
  $mappings = _exif_custom_get_maps();
  $options = array();
  $options['none'] = '';
  while($result = $mappings->fetchObject()){
    $options[$result->mid] = $result->name;
  }
  $form['user-default'] = array(
    '#type' => 'select',
    '#title' => 'Personal default mapping',
    '#default_value' => exif_custom_get_user_default(),
    '#options' => $options
  );
  $form['#submit'][] = 'exif_custom_settings_form_user_submit';
  return system_settings_form($form);
}

function exif_custom_get_user_default(){
  global $user;
  $sql = 'SELECT mid FROM {exif_custom_users} WHERE uid = :uid';
  $mid = db_query($sql, array(
    ':uid' => $user->uid
  ))->fetchField();
  if(is_int((int)$mid)){
    return $mid;
  }else{
    return '';
  }
}

function exif_custom_settings_form_submit($form, $form_state){
  variable_set('exif_custom_checks', $form_state['values']['auto-import-options']);
  variable_set('exif_custom_default', exif_custom_get_name($form_state['values']['site-default']));
  global $user;
  if(isset($form_state['values']['user-default'])){
    $sql = "DELETE FROM {exif_custom_users} WHERE uid = :uid";
    db_query($sql, array(
      ':uid' => $user->uid
    ));
    $sql = 'INSERT INTO {exif_custom_users}(uid, mid) VALUES(:uid, :mid)';
    db_query($sql, array(
      ':uid' => $user->uid,
      ':mid' => (int)$form_state['values']['user-default']
    ));
  }
}

function exif_custom_map_edit_form(){
  //Let's get the mid
  $mid = arg(5);
  //Load mappings
  $sql = 'SELECT * FROM {exif_custom_mapped_fields} WHERE mid = :mid';
  $results = db_query($sql, array(
    ':mid' => $mid
  ));
  //Load fields possible to map to
  $fields = field_info_instances('file', 'image');
  $select_fields = array();
  //Allow mapping to title field
  $select_fields['filename'] = 'File name';
  //Allow no field to be selected
  $select_fields['none'] = 'none';
  foreach($fields as $field => $field_data){
    $select_fields[$field] = $field_data['label'];
  }
  $form['mappings-table-start'] = array(
    '#markup' => '<table><thead><tr><td><strong>EXIF field</strong></td><td><strong>Example</strong></td><td><strong>Mapped to</strong></td></tr></thead>'
  );
  while($result = $results->fetchObject()){
    $form[$result->exif_field] = array(
      '#markup' => $result->exif_field,
      '#prefix' => '<tr><td>',
      '#suffix' => '</td>'
    );
    $form['example:' . $result->exif_field] = array(
      '#markup' => $result->exif_example,
      '#prefix' => '<td>',
      '#suffix' => '</td>'
    );
    $form['img_field:' . $result->exif_field] = array(
      '#type' => 'select',
      '#default_value' => $result->img_field,
      '#options' => $select_fields,
      '#prefix' => '<td>',
      '#suffix' => '</td></tr>'
    );
  }
  $form['mappings-table-end'] = array(
    '#markup' => '</table>'
  );
  $form['delete'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Delete',
    '#options' => array(
      'delete' => t('Delete this mapping')
    )
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save'
  );
  $form['#validate'][] = 'exif_custom_map_edit_validate';
  $form['#submit'][] = 'exif_custom_map_edit_submit';
  return $form;
}

function exif_custom_map_edit_validate($form, &$form_state){
  //TODO: check for no duplicates
}

function exif_custom_map_edit_submit($form, $form_state){
  $mid = arg(5);
  $test = (string)$form_state['values']['delete']['delete'];
  if($test == 'delete'){
    $sql = "DELETE FROM {exif_custom_mapped_fields} WHERE mid = :mid";
    db_query($sql, array(
      ':mid' => $mid
    ));
    $sql = "DELETE FROM {exif_custom_maps} WHERE mid = :mid";
    db_query($sql, array(
      ':mid' => $mid
    ));
    $sql = "DELETE FROM {exif_custom_users} WHERE mid = :mid";
    db_query($sql, array(
      ':mid' => $mid
    ));
    drupal_goto('admin/config/content/exif_custom/maps');
    return;
  }
  foreach($form_state['values'] as $field => $value){
    if(substr($field, 0, 10) != 'img_field:'){
      break;
    }
    $field = substr($field, 10);
    $sql = "UPDATE {exif_custom_mapped_fields} SET img_field = :img_field WHERE mid = :mid AND exif_field = :exif_field";
    db_query($sql, array(
      ':img_field' => $value,
      ':mid' => $mid,
      ':exif_field' => $field
    ));
  }
}

function exif_custom_mappings(){
	$output = '';
  $mappings = _exif_custom_get_maps();
  if($mappings == false){
    $output .= '<p>You have not yet created any mappings.</p>';
  } else {
    $site_default_mid = exif_custom_get_mid(variable_get('exif_custom_default', ''));
    $output .= '<table>';
    while($result = $mappings->fetchObject()){
      if(exif_custom_get_user_default() == $result->mid){
        $default = '<strong>User Default</strong>';
      }else if($site_default_mid == $result->mid){
        $default = 'Site Default';
      }else{
        $default = '';
      }
      $output .= '<tr><td>' . $result->name . '</td><td>' . l('edit', 'admin/config/content/exif_custom/map/' . $result->mid) . '</td><td>' . $default . '</tr>';
    }
    $output .= '</table>';
  }
  return $output;
}

function exif_custom_new_map_form(){
  $form['name'] = array(
    '#title' => t('Mapping name'),
    '#type' => 'textfield',
    '#description' => t('The name for this mapping (e.g. Jeremy\'s camera')
  );
  $form['file'] = array(
    '#title' => t("Example file"),
    '#type' => 'file',
    '#description' => t('A file with the EXIF fields you would like to map.')
  );
  $form['submit'] = array(
    '#value' => 'Save',
    '#type' => 'submit'
  );
  $form['#validate'][] = 'exif_custom_new_map_validate';
  $form['#submit'][] = 'exif_custom_new_map_submit';
  return $form;
}

function exif_custom_new_map_validate($form, &$form_state){
  //check that the name is unique
  $sql = 'SELECT name FROM {exif_custom_maps} WHERE name = :name';
  $result = db_query($sql, array(
    ':name' => $form_state['values']['name']
  ))->rowCount();
  if($result > 0){
    form_set_error('name', t('The name must be unique'));
  }
  //TODO: check image is an allowed type
}

function exif_custom_new_map_submit($form, $form_state){
  //handle file uploading
  $validators = array(
    'file_validate_is_image' => array(
      ''
    )
  );
  //save file as temporary
  $file = file_save_upload('file', $validators);
  $fields = exif_custom_get_exif_fields($file->uri);
  //Add the mapping to the database
  $sql = 'INSERT INTO {exif_custom_maps}(name) VALUES (:name)';
  db_query($sql, array(
    ':name' => $form_state['values']['name']
  ));
  //Retrieve the mid
  $sql = 'SELECT mid FROM {exif_custom_maps} WHERE name = :name';
  $mid = db_query($sql, array(
    ':name' => $form_state['values']['name']
  ))->fetchField();
  foreach($fields as $key => $value){
    $sql = "INSERT INTO {exif_custom_mapped_fields}(mid, exif_field, exif_example, img_field) VALUES(:mid, :exif_field, :exif_example, :img_field)";
    db_query($sql, array(
      ':mid' => $mid,
      ':exif_field' => $key,
      ':exif_example' => $value,
      ':img_field' => 'none'
    ));
  }
  drupal_set_message('New EXIF mapping has been saved: ' . $form_state['values']['name'], 'status');
}

function _exif_custom_get_maps(){
  $sql = "SELECT mid, name FROM {exif_custom_maps};";
  $results = db_query($sql);
  if ($results->rowCount() > 0) {
    return $results;
  } else {
  	return FALSE;
  }
}

function exif_custom_entity_presave($file){
  if(in_array('auto-import', variable_get('exif_custom_checks', array()))){
    $file = exif_custom_process_entity($file);
  }
  return $file;
}

function exif_custom_process_entity(&$file){
  //$file = file_load($file->fid);
  if(!isset($file->type) || !isset($file->uri)){return;}
  if($file->type != 'image'){return;}
  if(!($file->filemime == 'image/jpeg' || $file->filemime == 'image/tiff')){return;}
  if(arg(3) == 'exif_custom'){return;}
  if(arg(2) == 'edit'){return;}
  $mappings = exif_custom_get_mapping();
  $data = exif_custom_get_exif_fields($file->uri, TRUE);
  if($data == FALSE){return;}
  foreach($mappings as $field => $values){
    //File name is special case
    if($field == 'filename'){
      $file->filename = $data[$values->exif_field];
      continue;
    }
    $array = array();
    $field_info = field_info_field($field);
    $instance_info = field_info_instance('file', $field, 'image');
    switch($field_info['type']){
      case 'taxonomy_term_reference':
        $vids = array();
        foreach($field_info['settings']['allowed_values'] as $allowed_value){
          $vocabulary = taxonomy_vocabulary_machine_name_load($allowed_value['vocabulary']);
          if($allowed_value['vocabulary'] === 0){
            break;
          }
          $vids[$vocabulary->vid] = $vocabulary;
        } 
        $element = array();
        $element['#value'] = $data[$values->exif_field];
        $form_state = array();
        $array = array();
        $array['und'] = _exif_custom_taxonomy_autocomplete_validate($element, $vids);
        break;
      case 'country':
        $countries = array_flip(countries_get_countries('name'));
        if(isset($countries[$data[$values->exif_field]])){
          $array['und'][0]['iso2'] = ($countries[$data[$values->exif_field]]);
        }
        break;
      case 'creative_commons':
      	module_load_include('module', 'creative_commons');
      	$licence_by_id = array(
      	    'CC_NONE' => 1,
            'CC_BY' => 2,
            'CC_BY_SA' => 3,
            'CC_BY_ND' => 4,
            'CC_BY_NC' => 5,
            'CC_BY_NC_SA' => 6,
            'CC_BY_NC_ND' => 7,
            'CC_0' => 8,
            'CC_PD' => 9,
      	);
      	  
      	$licence_by_id = array_merge($licence_by_id, array_flip(creative_commons_get_licence_types()));
      	if (isset($licence_by_id[$data[$values->exif_field]])) {

      	  $array['und']['0']['licence'] = $licence_by_id[$data[$values->exif_field]];
      	}
      	break;
      case 'date':
      	$array['und']['0']['value'] = strtotime($data[$values->exif_field]);
      	break;
      default:
        if(isset($data[$values->exif_field])){
          if ($field_info['settings']) {
           // If this field has been configured to use plain text formatting then strip all tags and run the check_plain filter.
           if (empty($instance_info['settings']['text_processing'])) {
              $data[$values->exif_field] = check_plain(strip_tags($data[$values->exif_field]));
           }
           $array['und']['0']['value'] = truncate_utf8($data[$values->exif_field], $field_info['settings']['max_length'], TRUE);
          }
          else {
            $array['und']['0']['value'] = $data[$values->exif_field];
          }
        }
        else {
          $array['und']['0']['value'] = NULL;	
        }
     }
     
    $file->$field = $array;
  }

}

function exif_custom_get_mapping(){
  //First try and get users default
  $mid = exif_custom_get_user_default();
  //Else use site default or item 0
  if($mid === FALSE){
    $mid = exif_custom_get_mid(variable_get('exif_custom_default', ''));
  }
  $sql = "SELECT * FROM {exif_custom_mapped_fields} WHERE mid = :mid AND img_field != 'none'";
  $return = db_query($sql, array(
    ':mid' => $mid
  ))->fetchAllAssoc('img_field');
  return $return;
}

function exif_custom_get_exif_fields($uri, $concatenate_arrays = TRUE){
  $fields = array();
  //Get all of the EXIF tags
  $exif = exif_read_data(drupal_realpath($uri), NULL, TRUE);
  if(is_array($exif)){
    foreach($exif as $name => $section){
      foreach($section as $key => $value){
        if($concatenate_arrays && is_array($value)){
          $value = implode(', ', $value);
        }
        $fields['EXIF:' . $name . ':' . $key] = exif_custom_check_plain($value);
      }
    }
  }
  //XMP - test
 $fields =  array_merge($fields, exif_custom_get_xmp(drupal_realpath($uri)));
  
  
  //Look for IPTC data
  $size = getimagesize(drupal_realpath($uri), $info);
  if(is_array($info)){
  foreach ($info as $block){
    $iptc = iptcparse($block);
  
  if($iptc){
    //IPTC:2#254 can contain name=value pairs
    if(isset($iptc['2#254']) && is_array($iptc['2#254'])){
      $i = 0;
      foreach($iptc['2#254'] as $iptc_field){
        $subfields = explode('=', $iptc_field);
        $iptc['2#254.' . $subfields[0]] = $subfields[1];
      }
      unset($iptc['2#254']);
    }
    foreach($iptc as $key => $value){
      if($concatenate_arrays && is_array($value)){
        $value = implode(', ', $value);
      }
      $fields['IPTC:' . $key] = exif_custom_check_plain($value);
    }
  }
  }
  }
  if(!is_array($exif) && !isset($iptc)){return FALSE;}
  return $fields;
}

function _exif_custom_taxonomy_autocomplete_validate(&$element, $vocabularies){
  // Autocomplete widgets do not send their tids in the form, so we must detect
  // them here and process them independently.
  $items = array();
  if($tags = $element['#value']){
    // Translate term names into actual terms.
    $typed_terms = drupal_explode_tags($tags);
    foreach($typed_terms as $typed_term){
      // See if the term exists in the chosen vocabulary and return the tid;
      // otherwise, create a new 'autocreate' term for insert/update.
      if($possibilities = taxonomy_term_load_multiple(array(), array(
        'name' => trim($typed_term),
        'vid' => array_keys($vocabularies)
      ))){
        $term = array_pop($possibilities);
      }else{
        $vocabulary = reset($vocabularies);
        $term = array(
          'tid' => 'autocreate',
          'vid' => $vocabulary->vid,
          'name' => $typed_term,
          'vocabulary_machine_name' => $vocabulary->machine_name
        );
      }
      $items[] = (array)$term;
    }
  }
  foreach($items as $delta => $item){
    if($item['tid'] == 'autocreate'){
      $term = (object)$item;
      unset($term->tid);
      taxonomy_term_save($term);
      $items[$delta]['tid'] = $term->tid;
    }
  }
  return $items;
}

function exif_custom_check_plain($text){
  if (is_null($text)) {
    $text = "";
  }
  if(!mb_detect_encoding($text, 'UTF-8', true)){
    $text = str_replace("&lt;br /&gt;","\n",
      str_replace("<","&lt;",
        str_replace(">","&gt;",
          mb_convert_encoding(html_entity_decode($text),"UTF-8","ISO-8859-1"))));
  }

  // return htmlspecialchars($text, ENT_QUOTES, 'UTF-8'); -- removed as stops italics in descriptions
  return $text;
}


function exif_custom_get_xmp($image) {
  $content = file_get_contents($image);
  $xmp_data_start = strpos($content, '<x:xmpmeta');
  $xmp_data_end   = strpos($content, '</x:xmpmeta>');
  if ($xmp_data_start === FALSE || $xmp_data_end === FALSE) {
    return array();
  }
  $xmp_length     = $xmp_data_end - $xmp_data_start;
  $xmp_data       = substr($content, $xmp_data_start, $xmp_length + 12);
  unset($content);
  $xmp            = simplexml_load_string($xmp_data);
  if ($xmp === FALSE) {
    return array();
  }
/*  $namespaces = $xmp->getDocNamespaces(true);
    $fields = array();
  foreach ($namespaces as $namespace){
  	$fields[] = exif_custom_xml_recursion($xmp->children($namespace));
  }*/
  
  $field_data = array();
  exif_custom_xml_recursion($xmp, $field_data, 'XMP');
  
  return $field_data;
}

  
function exif_custom_xml_recursion($obj, &$fields, $name){
   $namespace = $obj->getDocNamespaces(true);
        $namespace[NULL] = NULL;
       
        $children = array();
        $attributes = array();
        $name = $name.':'.strtolower((string)$obj->getName());
       
        $text = trim((string)$obj);
        if( strlen($text) <= 0 ) {
            $text = NULL;
        }
       
        // get info for all namespaces
        if(is_object($obj)) {
            foreach( $namespace as $ns=>$nsUrl ) {
                // atributes
                $objAttributes = $obj->attributes($ns, true);
                foreach( $objAttributes as $attributeName => $attributeValue ) {
                    $attribName = strtolower(trim((string)$attributeName));
                    $attribVal = trim((string)$attributeValue);
                    if (!empty($ns)) {
                        $attribName = $ns . ':' . $attribName;
                    }
                    $attributes[$attribName] = $attribVal;
                }
               
                // children
                $objChildren = $obj->children($ns, true);
                foreach( $objChildren as $childName=>$child ) {
                    $childName = strtolower((string)$childName);
                    if( !empty($ns) ) {
                        $childName = $ns.':'.$childName;
                    }
                    $children[$childName][] = exif_custom_xml_recursion($child, $fields, $name);
                   
                }
            }
        }
        if (!is_null($text)){
          $fields[$name] = $text;
        }
       
        return array(
            'name'=>$name,
            'text'=> html_entity_decode($text),
            'attributes'=>$attributes,
            'children'=>$children
        );
    }
    
function  exif_custom_get_name($mid) {
  $name = db_select('exif_custom_maps','m')
    ->fields('m',array('name'))
    ->condition('m.mid',$mid)
    ->execute()
    ->fetchField();
  if ($name) {
    return $name;
  }
  return '';
}

function  exif_custom_get_mid($name) {
  $mid = db_select('exif_custom_maps','m')
    ->fields('m',array('mid'))
    ->condition('m.name',$name)
    ->execute()
    ->fetchField();

    if (is_int((int)$mid)) {
    return $mid;
  }
  return -1;
}
