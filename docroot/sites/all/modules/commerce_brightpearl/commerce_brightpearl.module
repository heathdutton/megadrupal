<?php
/**
 * @file
 * Brightpearl integration.
 */

define('BRIGHTPEARL_PROCESS_ORDER_OK', 1);
define('BRIGHTPEARL_PROCESS_ORDER_INCOMPLETE', 2);
define('BRIGHTPEARL_PROCESS_ORDER_FAILED', 0);

/**
 * Implements hook_menu().
 */
function commerce_brightpearl_menu() {

  $items['admin/commerce/config/brightpearl'] = array(
    'title' => 'Brightpearl',
    'description' => 'Brightpearl configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_brightpearl_overview_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'file' => 'includes/commerce_brightpearl.admin.inc',
  );

  $items['admin/commerce/config/brightpearl/overview'] = array(
    'title' => 'Brightpearl overview',
    'description' => 'An overview of the Brightpearl configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_brightpearl_overview_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/commerce_brightpearl.admin.inc',
  );

  $items['admin/commerce/config/brightpearl/connect'] = array(
    'title' => 'Brightpearl Connection',
    'description' => 'Brightpearl Authentication setting.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_brightpearl_connect_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'includes/commerce_brightpearl.admin.inc',
  );

  $items['admin/commerce/config/brightpearl/config'] = array(
    'title' => 'Brightpearl settings',
    'description' => 'Configure Brightpearl.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_brightpearl_config_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'file' => 'includes/commerce_brightpearl.admin.inc',
  );

  $items['admin/commerce/config/brightpearl/orders'] = array(
    'title' => 'Brightpearl orders',
    'description' => 'Configure the Brightpear order integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_brightpearl_orders_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'file' => 'includes/commerce_brightpearl.admin.inc',
  );

  $items['admin/commerce/config/brightpearl/stock'] = array(
    'title' => 'Brightpearl stock',
    'description' => 'Configure the Brightpear stock integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_brightpearl_stock_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
    'file' => 'includes/commerce_brightpearl.admin.inc',
  );
  $items['admin/commerce/config/brightpearl/admin'] = array(
    'title' => 'Brightpearl Admin & Alerts',
    'description' => 'Brightpearl.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_brightpearl_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
    'file' => 'includes/commerce_brightpearl.admin.inc',
  );

  $items['brightpearl/event'] = array(
    'title' => 'Brightpearl stock update hook',
    'page callback' => 'commerce_brightpearl_callback_event',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_cron().
 */
function commerce_brightpearl_cron() {
  $brightpearl = commerce_brightpearl_get_object();
  if (!$brightpearl) {
    return;
  }
  // If the order integration is enabled.
  if (variable_get('commerce_brightpearl_order_integration_state', 1)) {
    // Process orders.
    commerce_brightpearl_process_orders($brightpearl);
  }
  // Get info about stock update mode.
  $cron = (variable_get('commerce_brightpearl_stock_update_type') == 'cron');
  $stock_init = variable_get('brightpearl_init_stock', FALSE);
  // If stock update is set to cron or stock initialisation was requested.
  if ($cron || $stock_init) {
    // Run a full update - all stock enabled products.
    $updated_count = commerce_brightpearl_stock_full_process($brightpearl);
    // If zero records updated and we are using cron update mode.
    if (($updated_count == 0) && $cron) {
      // Call again so it starts from the top.
      commerce_brightpearl_stock_full_process($brightpearl);
    }
  }
}

/**
 * Process all unreported orders.
 */
function commerce_brightpearl_process_orders($brightpearl) {
  // Make sure integration is enabled.
  $instance = field_info_instance('commerce_order', 'brightpearl_processed', 'commerce_order');
  if (empty($instance)) {
    watchdog('brightpearl', 'Brightpearl integration not enabled - orders not processed.', array(), WATCHDOG_WARNING);
    return;
  }
  // Make sure configuration variables have been set.
  $channel_id = variable_get('commerce_brightpearl_channel_id');
  if (is_null($channel_id)) {
    watchdog('brightpearl', 'Brightpearl configuration not set - orders not processed.', array(), WATCHDOG_WARNING);
    return;
  }

  // Get all orders that are completed and are not yet processed.
  $completed_state = variable_get('commerce_brightpearl_order_state', 'pending');
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order', '=');
  $query->propertyCondition('status', array_keys(commerce_order_statuses(array('name' => $completed_state))), 'IN');
  $query->fieldCondition('brightpearl_processed', 'value', 0, '=');
  $result = $query->execute();

  if (!empty($result['commerce_order'])) {
    // Load the orders.
    foreach (commerce_order_load_multiple(array_keys($result['commerce_order'])) as $order) {
      $bporder_id = NULL;
      $transaction_response = commerce_brightpearl_process_order($brightpearl, $order, $bporder_id);
      // If the creation of the order did not fail.
      if ($transaction_response != BRIGHTPEARL_PROCESS_ORDER_FAILED) {
        // Update the last reported date so order is not reported again.
        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
        $order_wrapper->brightpearl_processed = time();
        $order_wrapper->save();
      }
      // If the order was created but we had problems.
      if ($transaction_response == BRIGHTPEARL_PROCESS_ORDER_INCOMPLETE) {
        // Report it.
        _commerce_brightpearl_report_on_incomplete_order($order, $bporder_id);
      }
      // If Error.
      if ($transaction_response == BRIGHTPEARL_PROCESS_ORDER_FAILED) {
        //  call reporting function.
        _commerce_brightpearl_report_on_failed_order($order);
      }

    }
  }
}


/**
 * Process stock for all enabled products.
 */
function commerce_brightpearl_stock_full_process($brightpearl) {
  if (!module_exists('commerce_ss')) {
    watchdog('brightpearl', 'Commerce simple Stock is not enabled - Stock checking skipped.');
    return;
  }
  watchdog('brightpearl', 'Stock update run started');
  $skus = array();
  $pids = array();
  $skus = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_product');
  $query->propertyCondition('status', 1);
  // Start from the last updated product.
  $query->propertyCondition('product_id', variable_get('brightpearl_last_updated_pid', 0), '>');
  // Set the range using the batch size.
  $query->range(0, variable_get('brightpearl_stock_update_batch_size', 100));
  $result = $query->execute();
  if (!empty($result['commerce_product'])) {
    // Load the orders.
    $prod_ids = array_keys($result['commerce_product']);
    $products = commerce_product_load_multiple($prod_ids);
    foreach ($products as $key => $product) {
      // Make sure product has stock enabled.
      if (!commerce_ss_product_enabled($product)) {
        continue;
      }
      // Check if stock checking is disabled.
      $wrapper = entity_metadata_wrapper('commerce_product', $product);
      if (($wrapper->__isset('commerce_stock_override'))) {
        if ($wrapper->commerce_stock_override->value()) {
          continue;
        }
      }
      // Find brightpearl id.
      $pid = _commerce_brightpearl_find_product_id($brightpearl, $product->sku);
      if ($pid) {
        // Add the product id to the list of products to check stock for.
        $pids[] = $pid;
        // Make sure we can easily find the sku to update.
        $product_index[$pid] = $key;
      }
      else {
        watchdog('brightpearl', 'SKU not found: %sku and stock not updated', array('%sku' => $product->sku), WATCHDOG_WARNING);
      }
    }
    $stock_levels = $brightpearl->getProductsStockOnHand($pids);
    if ($stock_levels) {
      foreach ($stock_levels as $pid => $stock_level) {
        $update_product = $products[$product_index[$pid]];
        _commerce_brightpearl_update_product_stock($update_product, $stock_level);
      }
    }
    // Update the last updated product id.
    variable_set('brightpearl_last_updated_pid', $key);
    // If we where in initilazation mode.
    if (variable_get('brightpearl_init_stock', FALSE)) {
      // Update the updated count.
      $count = variable_get('brightpearl_updated_count', 0) + count($prod_ids);
      variable_set('brightpearl_updated_count', $count);
    }

    // Add to watchdog.
    watchdog('brightpearl', 'Stock update run complete');
    // Return the number of products processed.
    return count($prod_ids);
  }
  // No records returned.
  else {
    // If we where in initilazation mode.
    if (variable_get('brightpearl_init_stock', FALSE)) {
       // We should close it.
      $update_log = variable_get('brightpearl_full_stock_update_log', array());
      $update_log[] = t('Completed on !start_time', array('!start_time' => date('l jS \of F Y h:i:s A')));
      if (count($update_log) > 6) {
        array_shift($update_log);
      }
      variable_set('brightpearl_full_stock_update_log', $update_log);
      variable_set('brightpearl_init_stock', FALSE);
    }
    // We need to reset the batch.
    variable_set('brightpearl_last_updated_pid', 0);
    variable_set('brightpearl_updated_count', 0);

    // Add to log.
    watchdog('brightpearl', 'Stock initialisation complete. records updated: ' .  variable_get('brightpearl_updated_count', 0));
    // Let the calling function know 0 records where updated.
    return 0;
  }

}

/**
 * Find the brightpearl product ID for the given sku.
 */
function _commerce_brightpearl_find_product_id($brightpearl, $sku) {
  // Static cache to hold sku = product id.
  $prd_ids = &drupal_static(__FUNCTION__, array());
  // Have we got it in static cache.
  if (isset($prd_ids[$sku])) {
    return $prd_ids[$sku];
  }
  // Check if we have it in the Drupal cache.
  elseif ($cache = cache_get('commerce_brightpearl_product_id_' . $sku)) {
    $prd_ids[$sku] = $cache->data;
  }
  // Otherwise get it from the brightpearl system.
  else {
    $prd_ids[$sku] = $brightpearl->findProduct($sku);
    // Cache skus for {MINIMUM CACHE DAYS} + a random 1 min to 6 Hrs
    // this is to stop products from expiring at the same time.
    $min_days = variable_get('commerce_brightpearl_product_minimum_cache_days', '1');
    $time_to_cache = REQUEST_TIME + 60 * 60 * 24 * $min_days + rand(1, 600) * 60;
    cache_set('commerce_brightpearl_product_id_' . $sku, $prd_ids[$sku], 'cache', $time_to_cache);
    cache_set('commerce_brightpearl_product_sku_' . $prd_ids[$sku], $sku, 'cache', $time_to_cache);
  }
  return $prd_ids[$sku];
}

/**
 * Find the sku from a Brightpearl product id.
 */
function _commerce_brightpearl_find_product_sku_from_bpid($brightpearl, $bpid) {
  // Static cache to hold sku = product id.
  $prd_ids = &drupal_static(__FUNCTION__, array());
  // Have we got it in static cache.
  if ($sku = array_search($bpid, $prd_ids)) {
    return $sku;
  }
  // Check if we have it in the Drupal cache.
  elseif ($cache = cache_get('commerce_brightpearl_product_sku_' . $bpid)) {
    $sku = $cache->data;
    $prd_ids[$sku] = $bpid;
    return $sku;
  }
  // Otherwise get it from the brightpearl system.
  else {
    $sku = $brightpearl->getProductSku($bpid);
    if ($sku) {
      $prd_ids[$sku] = $bpid;
      // Cache skus for {MINIMUM CACHE DAYS} + a random 1 min to 6 Hrs
      // this is to stop products from expiring at the same time.
      $min_days = variable_get('commerce_brightpearl_product_minimum_cache_days', '1');
      $time_to_cache = REQUEST_TIME + 60 * 60 * 24 * $min_days + rand(1, 600) * 60;
      cache_set('commerce_brightpearl_product_id_' . $sku, $bpid, 'cache', $time_to_cache);
      cache_set('commerce_brightpearl_product_sku_' . $bpid, $sku, 'cache', $time_to_cache);
      return $sku;
    }

  }
  return FALSE;
}

/**
 * Update a product's stock level.
 */
function _commerce_brightpearl_update_product_stock($product, $new_stock) {
  $wrapper = entity_metadata_wrapper('commerce_product', $product);
  $stock = $wrapper->commerce_stock->value();
  if ($stock != $new_stock) {
    $wrapper->commerce_stock->set($new_stock);
    $result = $wrapper->save();
  }
}

function _commerce_brightpearl_report_on_incomplete_order($order, $bporder_id) {
  // Add to notifications.
  $notifications = variable_get('commerce_brightpearl_order_notifications', array());
  $msg = t('Incomplete transaction: Order ID: !oid, Brightpearl ID: !bpoid', array('!oid' => $order->order_id, '!bpoid' => $bporder_id));
  array_unshift($notifications , $msg);
  // We will keep a maximum of 50 entries.
  if (count($notifications) > 50) {
    array_pop($notifications);
  }
  variable_set('commerce_brightpearl_order_notifications', $notifications);

  // Send email.
  $module = 'commerce_brightpearl';
  $key = 'commerce_brightpearl_simple';
  $to = variable_get('commerce_brightpearl_notify_email', '');
  // If no email setup.
  if (empty($to)) {
    // Return without sending the email.
    return;
  }
  $params['subject'] = t('Incomplete order !bpoid', array('!bpoid' => $bporder_id));
  $params['message'] = t('The order !oid was exported to brightpearl as ID !bpoid but one or more errors occured during the process.', array('!oid' => $order->order_id, '!bpoid' => $bporder_id));
  $params['message'] .= t('!lb!lbPlease review order.', array('!lb' => "\r\n"));
  drupal_mail($module, $key, $to, language_default(), $params);
}


function _commerce_brightpearl_report_on_failed_order($order) {
  $order_id = $order->order_id;

  // Find out how many times the error ocured.
  $failed_orders = variable_get('brightpearl_failed_orders', array());
  if (isset($failed_orders[$order_id])) {
    // This order errord before.
    $count = $failed_orders[$order_id] + 1;
  }
  else {
    // First time we get this error.
    $count = 1;
  }

  // Update the variable.
  $failed_orders[$order_id] = $count;
  variable_set('brightpearl_failed_orders', $failed_orders);

  // After 5 atempts we will inform the user.
  if ($count == 5) {
    // Add to notifications.
    $notifications = variable_get('commerce_brightpearl_order_notifications', array());
    $msg = t('Order ID !oid failed to export.', array('!oid' => $order->order_id));
    array_unshift($notifications , $msg);
    // We will keep a maximum of 50 entries.
    if (count($notifications) > 50) {
      array_pop($notifications);
    }
    variable_set('commerce_brightpearl_order_notifications', $notifications);

    // Send email.
    $module = 'commerce_brightpearl';
    $key = 'commerce_brightpearl_simple';
    $to = variable_get('commerce_brightpearl_notify_email', '');
    // If no email setup.
    if (empty($to)) {
      // Return without sending the email.
      return;
    }
    // Order ID !oid failed to export. We have tried 5 times and will keep on trying.
    $params['subject'] = t('Order ID !oid failed to export', array('!oid' => $order->order_id));
    $params['message'] = t('The order !oid failed to export. We have tried 5 times and will keep on trying.', array('!oid' => $order->order_id, '!bpoid' => $bporder_id));
    $params['message'] .= t('!lb!lbIt is probably a good idea to check the logs and try and resolve this issue.', array('!lb' => "\r\n"));
    $params['message'] .= t('!lb!lbNote: To stop the system from retrying you can set the order to a different state.', array('!lb' => "\r\n"));
    drupal_mail($module, $key, $to, language_default(), $params);
  }
}




/**
 * Implements hook_mail().
 */
function commerce_brightpearl_mail($key, &$message, $params) {
  switch ($key) {
    // Send a simple message.
    case 'commerce_brightpearl_simple':
      $message['subject'] = t('@site-name @subject ', array('@site-name' => variable_get('site_name', 'Drupal'), '@subject' => $params['subject']));
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Get an array of the active product sku's.
 */
function commerce_brightpearl_get_active_product_ids() {
  $skus = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_product')
     ->propertyCondition('status', 1);
  $result = $query->execute();
  if (!empty($result['commerce_product'])) {
    // Load the orders.
    $prod_ids = array_keys($result['commerce_product']);
    foreach (commerce_product_load_multiple($prod_ids) as $product) {
      // @todo - add code to check if product should be checked, so we can skip
      // always in stock if aplicable.
      $skus[] = $product->sku;
    }
  }
  return $skus;
}

/**
 * Process an order.
 */
function commerce_brightpearl_process_order($brightpearl, $order, &$bporder_id) {
  // Set the $transaction_response to ok, it will be set to incomplete if any
  // issues are encountered.
  $transaction_response = BRIGHTPEARL_PROCESS_ORDER_OK;

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get order details.
  $email = $order->mail;
  $order_total = $order_wrapper->commerce_order_total->value();
  $currency_code = $order_total['currency_code'];
  $reference = $order_wrapper->order_id->value();

  // Get address info.
  $shipping_address = NULL;
  if (module_exists('commerce_shipping')) {
    if (($order_wrapper->__isset('commerce_customer_shipping'))) {
      $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
    }
  }
  if (!isset($shipping_address)) {
    $shipping_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  }
  if (empty($shipping_address['name_line'])) {
    $first_name = $shipping_address['first_name'];
    $last_name = $shipping_address['last_name'];
    $full_name = $first_name . ' ' . $last_name;
  }
  else {
    $full_name = $shipping_address['name_line'];
    $names = explode(" ", $full_name, 2);
    $first_name = $names[0];
    if (count($names) > 1) {
      $last_name = $names[1];
    }
    else {
      $last_name = '';
    }
  }
  $organisation_name = '';
  if (isset($shipping_address['organisation_name'])) {
    $organisation_name = $shipping_address['organisation_name'];
  }

  // @todo - needs work commented out
  // $phone =  $order_wrapper->field_order_phone_number->value();
  $phone = '';
  $mobile = '';

  $l1_street = $shipping_address['thoroughfare'];
  $l2_suburb = $shipping_address['premise'];
  $l3_city = $shipping_address['locality'];
  $l4_state = $shipping_address['administrative_area'];
  $post_code = $shipping_address['postal_code'];
  $country_iso_code = $shipping_address['country'];

  // Hook to alow changing of details.
  $contact_details = array(
    'order' => &$order,
    'phone' => &$phone,
    'mobile' => &$mobile,
    'add_street' => &$l1_street,
    'add_suburb' => &$l2_suburb,
    'add_city' => &$l3_city,
    'add_state' => &$l4_state,
    'add_post_code' => &$post_code,
    'add_country_iso' => &$country_iso_code,
  );
  drupal_alter('brightpearl_contact_details', $contact_details);

  // Get the contact.
  $contact_id = $brightpearl->findContact($email);
  if (!$contact_id) {
    // Create address.
    $address_id = $brightpearl->createAddress($l1_street, $l2_suburb, $l3_city, $l4_state,
          $post_code, $country_iso_code);
    if (!$address_id) {
      // @todo - log error?.
      return BRIGHTPEARL_PROCESS_ORDER_FAILED;
    }
    // Create the contact.
    $contact_id = $brightpearl->AddContact($first_name, $last_name, $address_id, $address_id, $email);
  }
  if (!$contact_id) {
    // @todo - log error?.
    return BRIGHTPEARL_PROCESS_ORDER_FAILED;
  }
  // Create the order.
  $bporder_id = $brightpearl->createOrder($contact_id, $currency_code, $reference,
          $full_name, $organisation_name,
          $l1_street, $l2_suburb, $l3_city, $l4_state, $post_code,
          $country_iso_code,
          $phone, $mobile, $email, variable_get('commerce_brightpearl_new_order_status_id'));
  if (!$bporder_id) {
        watchdog('brightpearl',
                'Failed to create brightpearl order id @oid with error: @error',
                array(
                  '@oid' => $bporder_id,
                  '@error' => $brightpearl->getLastlastResponseError(),
                ),
                WATCHDOG_ERROR);
    watchdog('brightpearl', 'Failed to create brightpearl order id ' . $bporder_id . ' for drupal order id ' . $reference);
    return BRIGHTPEARL_PROCESS_ORDER_FAILED;
  }
  // @todo - fixup watchdog to use proper format.
  watchdog('brightpearl', 'created brightpearl order id ' . $bporder_id . ' for drupal order id ' . $reference);

  $shipping_vat = 0;
  $shipping_ex_vat = 0;
  $shipping_found = FALSE;
  // Cycle all the line items and add as products.
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    // If the current line item is a shipping line item, track its amount value
    // without taxes separately from products.
    $line_item_type = $line_item_wrapper->getBundle();
    if (module_exists('commerce_shipping') && $line_item_type == 'shipping') {
      // Found a shipping line item.
      $shipping_found = TRUE;
      // Incase we have more then one shipping line item we will total those.
      $price = commerce_brightpearl_get_line_item_price($line_item_wrapper, $currency_code);
      $shipping_vat += $price['vat'];
      $shipping_ex_vat += $price['ex_vat'];
      // Unlikely to have more then one shipping line so we will get its title.
      $shipping_title = $line_item_wrapper->line_item_label->value();
    }
    elseif (in_array($line_item_type, commerce_product_line_item_types())) {
      $price = commerce_brightpearl_get_line_item_price($line_item_wrapper, $currency_code);
      $sku = $line_item_wrapper->commerce_product->sku->value();
      $qty = $line_item_wrapper->quantity->value();
      $ok = commerce_brightpearl_add_product_to_order($brightpearl, $bporder_id, $sku, $qty, $price['ex_vat'], $price['vat']);
      if (!$ok) {
        $transaction_response = BRIGHTPEARL_PROCESS_ORDER_INCOMPLETE;
      }
    }
  }
  // Add shipping if we have a shipping line item.
  if ($shipping_found) {
    $shipping_line_item = commerce_brightpearl_add_free_text_line_item_to_order($brightpearl, $bporder_id, $shipping_title, 1, $shipping_ex_vat, $shipping_vat);
    if (!$shipping_line_item) {
      $transaction_response = BRIGHTPEARL_PROCESS_ORDER_INCOMPLETE;
    }
  }
  // All the products where added to the reserve stock list by
  // commerce_brightpearl_add_product_to_order() so we only need to call the
  // reserve_stock function.
  $brightpearl->reserveStock($bporder_id, variable_get('commerce_brightpearl_warehouse_id'));
  $brightpearl->clearReserveStockList();

  // Get all details needed for the payment / sales receipt.
  $bank_account = variable_get('commerce_brightpearl_bank_account_nominal_code');
  $reference = $order_wrapper->order_id->value();
  $description = t('Payment added by the minirigs Drupal site');
  $date = date_iso8601(time());
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $total = $order_wrapper->commerce_order_total->amount->value();
  $balance = commerce_payment_order_balance($order);
  if ($balance) {
    $amount = ($total - $balance['amount']);
  }
  else {
    $amount = $total;
  }
  $amount = commerce_currency_amount_to_decimal($amount, $currency_code);
  // Create a payment / sales receipt.
  $response = $brightpearl->createSalesReceipt($bporder_id, $currency_code, $amount, $bank_account, $date, $reference, $description);
  if (!$response) {
    $transaction_response = BRIGHTPEARL_PROCESS_ORDER_INCOMPLETE;
  }
  return $transaction_response;
}


/**
 * Get the line item price.
 */
function commerce_brightpearl_get_line_item_price($line_item_wrapper, $currency_code) {
  $tax_amount = 0;
  $base_price = 0;
  $unit_price = 0;

  $line_item_total = $line_item_wrapper->commerce_total->value();
  $line_item_total_price = $line_item_total['amount'];
  // Calculate included tax amount on base amount.
  foreach ($line_item_total['data']['components'] as $component) {
    if (!empty($component['included']) && !empty($component['price']['data']['tax_rate'])) {
      $tax_name = $component['name'];
      $tax_amount = commerce_price_component_total($line_item_total , $tax_name);
      $tax_amount = $tax_amount['amount'];
      break;
    }
  }
  // Get the base price same as ex_vat if no other components.
  $base_price_component = commerce_price_component_total($line_item_total, 'base_price');
  if ($base_price_component) {
    $base_price = $base_price_component['amount'];
  }
  return array(
    'inc_vat'  => commerce_currency_amount_to_decimal($line_item_total_price, $currency_code),
    'ex_vat'  => commerce_currency_amount_to_decimal($line_item_total_price - $tax_amount, $currency_code),
    'vat'  => commerce_currency_amount_to_decimal($tax_amount, $currency_code),
    'base_price'  => commerce_currency_amount_to_decimal($base_price, $currency_code),
  );
}

/**
 * Create a product line item in the brightpearl order.
 *
 *  $qty = 2;
 *  $row_net = 12.21;
 *  $row_vat = 2.44;
 */
function commerce_brightpearl_add_product_to_order($brightpearl, $bporder_id, $sku, $qty, $row_net, $row_vat) {
  // Search product by SKU.
  $pid = _commerce_brightpearl_find_product_id($brightpearl, $sku);
  if ($pid) {
    $tax_code = variable_get('commerce_brightpearl_tax_code');
    // Add row.
    $row_id = $brightpearl->addRowToOrder($bporder_id, $pid, $qty, $row_net, $row_vat, $tax_code);
    if ($row_id) {
      // Reserve stock.
      $brightpearl->addToReserveStockList($pid, $row_id, $qty);
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Add a line item of type free text to a brightpearl order.
 */
function commerce_brightpearl_add_free_text_line_item_to_order($brightpearl, $bporder_id, $text, $qty, $row_net, $row_vat) {
  $tax_code = variable_get('commerce_brightpearl_tax_code');
  $row_id = $brightpearl->addFreeTextRowToOrder($bporder_id, $text, $qty, $row_net, $row_vat, $tax_code, variable_get('commerce_brightpearl_shipping_nominal_code'));
  return $row_id;
}


/**
 * Initialize Brightpearl.
 *
 * @param bool $test
 *   should the connection be tested before returning (not tested if object
 *   already exists).
 *
 * @return brightPearl
 *   returns the brightPearl object or FALSE if failed.
 */
function commerce_brightpearl_get_object($test = TRUE) {
  // Cache the object.
  $brightpearl = &drupal_static('commerce_brightpearl_object');
  if (!is_null($brightpearl)) {
    return $brightpearl;
  }

  include_once 'brightPearl.class.php';
  if (!variable_get('commerce_brightpearl_signed_account_token')) {
    return FALSE;
  }
  // Create and initialize the brightPearl object.
  $brightpearl = new BrightPearl();
  $brightpearl->setAccountCode(variable_get('commerce_brightpearl_customer_account_code'));
  $brightpearl->setSignedToken(variable_get('commerce_brightpearl_signed_account_token'));
  $brightpearl->setDatacentre(variable_get('commerce_brightpearl_datacentre'));
  $brightpearl->setChannelId(variable_get('commerce_brightpearl_channel_id'));
  $brightpearl->setLogAllRequests(variable_get('commerce_brightpearl_log_all_requests', FALSE));
  // Set the warehouse to be used for stock updates.
  if (variable_get('commerce_brightpearl_warehouse_stock_check_all')) {
    $brightpearl->setStockCheckWarehouseId(FALSE);
  }
  else {
    $brightpearl->setStockCheckWarehouseId(variable_get('commerce_brightpearl_warehouse_id'));
  }
  // Do we need to test the connection.
  if ($test) {
    if ($brightpearl->testConnection()) {
      return $brightpearl;
    }
    else {
      return FALSE;
    }
  }
  else {
    return $brightpearl;
  }
}
/**
 * Implements hook_field_widget_info().
 */
function commerce_brightpearl_field_widget_info() {
  return array(
    'brightpearl_processed' => array(
      'label' => t('brightpearl Processed'),
      'field types' => array('number_integer'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function commerce_brightpearl_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $widget_type = $instance['widget']['type'];

  if ($widget_type == 'brightpearl_processed') {
    if (empty($items)) {
      return array('#markup' => t('Brightpearl Not set'));
    }
    else {
      $value = $items[$delta]['value'];
      if ($value == 0) {
        return array('#markup' => t('Not processed by brightpearl'));
      }
      else {
        return array('#markup' => t('Exported to brightpearl on&nbsp') . date('D M j Y G:i:s', $value));
      }
    }
    return array('#markup' => t('Not defined'));
  }
}


/**
 * Process an incoming http post (web-hook) from brightpearl.
 */
function commerce_brightpearl_callback_event() {
  if (variable_get('commerce_brightpearl_stock_update_type') == 'webhook') {
    $request_body = file_get_contents("php://input");
    $brightpearl = commerce_brightpearl_get_object(FALSE);
    if ($brightpearl) {
      // Register all callback functions.
      $brightpearl->stockUpdateFunc = 'commerce_brightpearl_stock_update_callback';
      // Process the webhook.
      $communication_token = commerce_brightpearl_get_user_communication_token();
      $brightpearl->processWebhook($request_body, $communication_token);
    }
  }
}

/**
 * Callback function for stock update.
 *
 * Will be called from the brightpearl class as a result of the
 * commerce_brightpearl_callback_event() above.
 */
function commerce_brightpearl_stock_update_callback($brightpearl, $stock_levels) {
  if ($stock_levels) {
    foreach ($stock_levels as $bp_product_id => $stock_level) {
      // Find the SKU.
      $sku = _commerce_brightpearl_find_product_sku_from_bpid($brightpearl, $bp_product_id);
      if ($sku) {
        // Update stock.
        $update_product = commerce_product_load_by_sku(array($sku));
        if ($update_product) {
          _commerce_brightpearl_update_product_stock($update_product, $stock_level);
        }
      }
    }
  }
}

/**
 * A token used for validating brightpearl callbacks.
 */
function commerce_brightpearl_get_user_communication_token() {
  $communication_token = variable_get('commerce_brightpearl_user_communication_token');
  if (!$communication_token) {
    $account_token = variable_get('commerce_brightpearl_signed_account_token');
    $communication_token = md5($account_token);
    variable_set('commerce_brightpearl_user_communication_token', $communication_token);
  }
  return $communication_token;
}


/**
 * Implements hook_field_formatter_info().
 */
function commerce_brightpearl_field_formatter_info() {
  return array(
    'commerce_brightpearl_timestamp_formatter' => array(
      'label' => t('Brightpearl Unix Timestamp Formatter'),
      'field types' => array('number_integer'),
      'settings'  => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function commerce_brightpearl_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  // @todo allow user to set the format.
  return array();
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function commerce_brightpearl_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = t('Format as a Unix timestamp');
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_brightpearl_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $value = $item['value'];
    if ($value == 0) {
      $display = t('Not yet processed');
    }
    else {
      $display = date('D M j Y G:i:s', $value);
    }
    $element[$delta] = array(
      '#markup' => $display,
    );
  }
  return $element;
}
