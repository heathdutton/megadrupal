<?php

function ladder_schema() {
  $schema['tournament_ladder_participants'] = array(
    'description' => 'Stores details on tournament participants for the ladder module.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: Unique tournament node ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'id' => array(
        'description' => 'Unique participant entity ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rank' => array(
        'description' => 'The participants rank.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'small',
        'default' => 0,
      ),
      'level' => array(
        'description' => 'The participants level.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 1,
      ),
      'exp' => array(
        'description' => 'The participants experience points.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'small',
        'default' => 0,
      ),
      'win' => array(
        'description' => 'The number of times participant has won.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'loss' => array(
        'description' => 'The number of times participant has lost.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'previous' => array(
        'description' => t('The participants rank set at their latest match.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'streak' => array(
        'description' => 'The count of matches won in a row without loosing.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'small',
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'id'),
    'indexes' => array(
      'exp' => array('exp'),
    ),
  );

  $schema['tournament_ladder'] = array(
    'description' => 'Stores details on ladder type tournaments.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: Unique tournament node ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'calculation' => array(
        'description' => 'The calculation system used for ladder rankings.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'size' => 'tiny',
      ),
      'duration' => array(
        'description' => 'The duration of the ladder tournament in seconds.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'end_date' => array(
        'description' => 'The unix timestamp of the ladder tournament end date.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_challenges' => array(
        'description' => 'The maximum amount of challenges allowed per day.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'size' => 'tiny',
      ),
      'force_crown' => array(
        'description' => 'Whether to force the highest ranked participant to accept challenges.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'size' => 'tiny',
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'duration' => array('duration'),
    ),
  );

  $schema['tournament_ladder_matches'] = array(
    'description' => 'Stores ladder match data.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: Unique match node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'id' => array(
        'description' => 'The participant unique entity ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'exp' => array(
        'description' => 'Exp received',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'unsigned' => FALSE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'id'),
  );

  return $schema;
}

/**
 * Implements hook_enable().
 */
function ladder_enable() {
  // Ensure the tournament node type is available.
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['ladder']);
}
