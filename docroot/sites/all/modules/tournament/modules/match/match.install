<?php

/**
 * Implements hook_schema().
 */
function match_schema() {
  $schema['matches'] = array(
    'description' => 'Stores match data.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: Unique node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'Unique tournament node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'match_date' => array(
        'description' => 'The Unix timestamp of when a match is to be played.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'request' => array(
        'description' => 'The Unix timestamp of when a match was requested to be played.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'request_id' => array(
        'description' => 'The requester unique entity ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'score_access' => array(
        'description' => 'Determines access for match score entry.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'match_status' => array(
        'description' => 'The match status.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_type' => array(
        'description' => 'Entity type of participants, e.g. user/team.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'winner' => array(
        'description' => 'Participant entity ID of match winner.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'challenge' => array(
        'description' => 'Determine whether this match was created via a match challenge.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'tid' => array('tid'),
      'request' => array('request'),
      'match_status' => array('match_status'),
      'match_date' => array('match_date'),
      'winner' => array('winner'),
      'challenge' => array('challenge'),
    ),
  );

  $schema['matches_participants'] = array(
    'description' => 'Stores match participants data.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: Unique node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'id' => array(
        'description' => 'The participant unique entity ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'score' => array(
        'description' => 'The score result',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'confirm' => array(
        'description' => 'The current match confirmation status.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'Determines the order of participants in the match.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'id'),
  );

  $schema['matches_log'] = array(
    'description' => 'Stores match changes history.',
    'fields' => array(
      'lid' => array(
        'description' => 'Primary Key: Unique log ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Primary Key: Unique node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'delta' => array(
        'description' => 'Identifies the log type',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'match_status' => array(
        'description' => 'The new match status.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'variables' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'serialize' => TRUE,
        'description' => 'Stores serialized data regarding this log message.',
      ),
      'request_id' => array(
        'description' => 'The requester unique entity ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The user ID responsible for the log event.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'hostname' => array(
        'description' => 'Hostname of the user who triggered the event.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp of when this event was created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('lid'),
    'indexes' => array(
      'nid' => array('nid'),
      'delta' => array('delta'),
      'created' => array('created'),
      'hostname' => array('hostname'),
    ),
  );

  $schema['matches_challenges'] = array(
    'description' => 'Stores match challenge comments.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: Unique node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'comment' => array(
        'description' => 'Comment from the challenger.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function match_uninstall() {
  variable_del('match_entity_types');
  variable_del('match_mail_user');
  variable_del('match_user_challenging');
  variable_del('match_user_picture');
}

