<?php

/**
 * Implements hook_permission().
 */
function tournament_userpoints_permission() {
  return array(
    'admin tournament userpoints' => array(
      'title' => t('Admin tournament userpoints'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tournament_userpoints_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  if (tournament_supported_type($node->type)) {
    if (user_access('admin tournament userpoints')) {
      $form['signup']['settings']['userpoints'] = array(
        '#type' => 'textfield',
        '#title' => t('Userpoints'),
        '#element_validate' => array('element_validate_integer'),
        '#description' => t('Enter the integer number of userpoints required to signup to this tournament. After registration, userpoints are automatically deleted.'),
        '#size' => 5,
        '#weight' => 20,
        '#default_value' => !empty($node->userpoints) ? $node->userpoints : '',
      ); 
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function tournament_userpoints_node_insert($node) {
  if (tournament_supported_type($node->type) && !empty($node->userpoints)) {
    db_insert('tournament_userpoints')
      ->fields(array(
        'nid' => $node->nid,
        'userpoints' => $node->userpoints,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function tournament_userpoints_node_update($node) {
  if (tournament_supported_type($node->type)) {
    if (empty($node->userpoints)) {
      tournament_userpoints_node_delete($node);
    }
    else {
      db_merge('tournament_userpoints')
        ->key(array(
          'nid' => $node->nid,
        ))
        ->fields(array(
          'userpoints' => $node->userpoints,
        ))
        ->execute();
    }
  }
}

/**
 * Deletes tournament node details.
 */
function tournament_userpoints_node_delete($node) {
  if (tournament_supported_type($node->type)) {
    db_delete('tournament_userpoints')->condition('nid', $node->nid);
  }
}

/**
 * Implements hook_node_load().
 */
function tournament_userpoints_node_load($nodes, $types) {
  $tournament_type = FALSE;

  // We use $types to check for this to keep the function as
  // light as we can.
  foreach ($types as $type) {
    if (tournament_supported_type($type)) {
      $tournament_type = TRUE;
    }
  }
  // There is no node types that we care about here so return.
  if (!$tournament_type) {
    return;
  }

  $result = db_select('tournament_userpoints', 'tu')
    ->fields('tu')
    ->condition('nid', array_keys($nodes))
    ->execute();

  foreach ($result as $record) {
    $nodes[$record->nid]->userpoints = $record->userpoints;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tournament_userpoints_form_tournament_signup_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['node'])) {
    $node = $form_state['node'];
    if (!empty($node->userpoints)) {
      $name = variable_get(USERPOINTS_TRANS_LCPOINTS, 'points');
      $form['description']['#markup'] .= '<br/>' . t('<strong>!points @name</strong> are required to sign up for this tournament.', array('@name' => $name, '!points' => $node->userpoints));
      
      // Add our custom form handlers
      $form['#validate'][] = 'tournament_userpoints_tournament_signup_form_validate';
      $form['#submit'][] = 'tournament_userpoints_tournament_signup_form_submit';
    }
  }
}

/**
 * Validate handler for the tournament sign up form.
 *
 * @see tournament_form()
 */
function tournament_userpoints_tournament_signup_form_validate($form, &$form_state) {
  $node = $form_state['node'];
  
  // Ensure all users have the required credits
  if (!empty($node->userpoints)) {
    $name = variable_get(USERPOINTS_TRANS_LCPOINTS, 'points');
    
    if ($node->entity_type == 'user') {
      if ($node->userpoints > userpoints_get_current_points($form_state['values']['id'])) {
        form_set_error('id', t('You do not have the required @name to join this tournament. <strong>!points @name are required</strong>.', array('!points' => $node->userpoints, '@name' => $name)));
      }
    }
    elseif ($node->entity_type == 'team') {
      $team = team_load($form_state['values']['id']);

      if (!empty($node->member_select)) {
        $members = $form_state['values']['members'];
        foreach ($members as $uid => $status) {
          if (!$status) {
            unset($members[$uid]);
          }
        }
      }
      else {
        $members = _team_members_active($team);
      }

      if (!empty($members)) {
        $uids = array_keys($members);
        foreach ($uids as $uid) {
          if ($node->userpoints > userpoints_get_current_points($uid)) {
            $account = user_load($uid);
            form_set_error('id', t('%account does not have the required @name to join this tournamnet. <strong>!points %name are required</strong>.', array('%account' => $account->name, '!points' => $node->userpoints, '@name' => $name)));
          }
        }
      }
    }
  }
}

/**
 * Validate handler for the tournament sign up form.
 *
 * @see tournament_form()
 */
function tournament_userpoints_tournament_signup_form_submit($form, &$form_state) {
  $node = $form_state['node'];
  
  if (!empty($node->userpoints)) {
    $id = $form_state['values']['id'];  
    
    $params = array(
      'points' => -$node->userpoints,
      'description' => t('Signed up to tournament @name', array('@name' => $node->title)),
    );
    
    if ($node->entity_type == 'user') {
      $params['uid'] = $id;
      userpoints_userpointsapi($params);
    }
    elseif ($node->entity_type == 'team') {
      $members = $form_state['values']['members'];
      foreach ($members as $uid => $status) {
        $params['uid'] = $uid;
        userpoints_userpointsapi($params);
      }      
    }
  }  
}