<?php


/**
 * Group points
 */
define('ROUND_ROBIN_LOSS_DEFAULT', 0);
define('ROUND_ROBIN_DRAW_DEFAULT', 1);
define('ROUND_ROBIN_WIN_DEFAULT', 3);

/**
 * Group sizes
 */
define('ROUND_ROBIN_MIN_GROUP_SIZE', 3);

/**
 * Implements hook_node_info().
 */
function round_robin_node_info() {
  return array(
    'round_robin' => array(
      'name' => t('Round robin'),
      'base' => 'tournament',
      'description' => t('A round-robin tournament (or all-play-all tournament) is a competition in which each participants meets all others in turn over the period of a given schedule.'),
      'title_label' => t('Tournament title'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function round_robin_theme() {
  return array(
    'round_robin' => array(
      'variables' => array(
        'node' => NULL,
        'participants' => NULL,
      ),
      'file' => 'round_robin.pages.inc',
    ),
  );
}

/**
 * Implements hook_load().
 */
function round_robin_node_load($nodes, $types) {
  if (in_array('round_robin', $types)) {
    // Gather a list of node ids to work with
    foreach ($nodes as $node) {
      if ($node->type == 'round_robin') {
        $nids[] = $node->nid;
      }
    }

    $result = db_select('tournament_rr', 'rr')
      ->fields('rr')
      ->condition('nid', $nids, 'IN')
      ->execute();

    foreach ($result as $field) {
      $nodes[$field->nid]->win_points = $field->win_points;
      $nodes[$field->nid]->draw_points = $field->draw_points;
      $nodes[$field->nid]->loss_points = $field->loss_points;
      $nodes[$field->nid]->multiplier = $field->multiplier;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function round_robin_form_round_robin_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['node'];

  $form['module'] = array(
    '#title' => t('Round robin settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'settings',
    '#weight' => 5,
    '#description' => t('Participants in a round robin group are ranked by their points. Points are awarded on the outcome of matches.'),
  );

  // Hide these settings after a tournament has started
  if (!empty($node->tournament_status) && $node->tournament_status != TOURNAMENT_STATUS_ACTIVE) {
    $form['module']['#disabled'] = TRUE;
    $form['module']['#description'] = t('You cannot edit these settings after a tournament has started.');
  }

  $form['module']['win_points'] = array(
    '#type' => 'textfield',
    '#title' => t('Win points'),
    '#size' => 5,
    '#maxlength' => 5,
    '#element_validate' => array('element_validate_integer'),
    '#default_value' => isset($node->win_points) ? $node->win_points : ROUND_ROBIN_WIN_DEFAULT,
  );
  $form['module']['draw_points'] = array(
    '#type' => 'textfield',
    '#title' => t('Draw points'),
    '#size' => 5,
    '#maxlength' => 5,
    '#element_validate' => array('element_validate_integer'),
    '#default_value' => isset($node->draw_points) ? $node->draw_points : ROUND_ROBIN_DRAW_DEFAULT,
  );
  $form['module']['loss_points'] = array(
    '#type' => 'textfield',
    '#title' => t('Loss points'),
    '#size' => 5,
    '#maxlength' => 5,
    '#element_validate' => array('element_validate_integer'),
    '#default_value' => isset($node->loss_points) ? $node->loss_points : ROUND_ROBIN_LOSS_DEFAULT,
  );
  $form['module']['multiplier'] = array(
    '#type' => 'textfield',
    '#title' => t('Score multiplier'),
    '#size' => 5,
    '#maxlength' => 5,
    '#element_validate' => array('element_validate_integer'),
    '#default_value' => isset($node->multiplier) ? $node->multiplier : 0,
    '#description' => t('Optional. Multiply the score of the match by this value to determine points awarded to each participant.'),
  );
}

/**
 * Implements hook_node_insert().
 */
function round_robin_node_insert($node) {
  if ($node->type == 'round_robin') {
    drupal_write_record('tournament_rr', $node);
  }
}

/**
 * Implements hook_node_update().
 */
function round_robin_node_update($node) {
  if ($node->type == 'round_robin') {
    drupal_write_record('tournament_rr', $node, array('nid'));
  }
  elseif ($node->type == 'match') {
    if ($node->original->match_status == MATCH_STATUS_FINISHED && $node->original->match_status != $node->match_status) {
      // In the rare case that a match is re-opened, refresh the tournament to reflect updated data.
      if (!empty($node->tid)) {
        $node->tournament_node = node_load($node->tid);
        if ($node->tournament_node->type == 'round_robin') {
          round_robin_refresh($node->tournament_node);
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function round_robin_node_delete($node) {
  if ($node->type == 'round_robin') {
    db_delete('tournament_rr_participants')->condition('nid', $node->nid)->execute();
    db_delete('tournament_rr')->condition('nid', $node->nid)->execute();
  }
}

/**
 * Implements hook_menu().
 */
function round_robin_menu() {
  $items['node/%node/groups'] = array(
    'title' => 'Group table',
    'page callback' => 'round_robin_table',
    'page arguments' => array(1),
    'access callback' => '_round_robin_table_callback_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback for full screen knockout brackets
 */
function _round_robin_table_callback_access($node) {
  if ($node->type != 'round_robin') {
    return;
  }

  return $node->tournament_status >= TOURNAMENT_STATUS_STARTED;
}

/**
 * Implements hook_node_view().
 */
function round_robin_table($node) {
  $query = db_select('tournament_rr_participants', 'rr');
  $query->join('tournament_participants', 't', 'rr.id = t.id AND rr.nid = t.nid');
  $query->addExpression('rr.rf - rr.ra', 'diff');
  $query->addExpression('rr.win + rr.draw + rr.loss', 'pld');

  $participants = $query
    ->fields('rr')
    ->fields('t', array('status'))
    ->condition('rr.nid', $node->nid)
    ->orderBy('rr.gid')
    ->orderBy('rr.points', 'DESC')
    ->orderBy('diff', 'DESC')
    ->orderBy('rr.rf', 'DESC')
    ->execute()
    ->fetchAllAssoc('id');

  // Add participant names
  tournament_participants_populate_names($node, $participants);

  return array(
    '#prefix' => '<div id="tournament-round-robin" class="tournament-module-rankings">',
    '#suffix' => '</div>',
    '#theme' => 'round_robin',
    '#node' => $node,
    '#participants' => $participants,
    '#weight' => -10,
  );
}

/**
 * Implements hook_match_finish().
 */
function round_robin_match_finish($node) {
  if (isset($node->tournament_node) && $node->tournament_node->type == 'round_robin') {
    round_robin_match_process($node, $node->tournament_node);
  }
}

/**
 * Implements hook_tournament_participant_replace().
 */
function round_robin_tournament_participant_replace($node, $new, $old) {
  db_update('tournament_rr_participants')
    ->fields(array(
      'id' => $new,
    ))
    ->condition('id', $old)
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_tournament_access_leave().
 */
function round_robin_tournament_access_leave($node) {
  return $node->tournament_status == TOURNAMENT_STATUS_ACTIVE;
}

/**
 * Implements hook_tournament_finish().
 */
function round_robin_tournament_finish($node) {
  if ($node->type == 'round_robin') {
    $query = db_select('tournament_rr_participants', 'rr');
    $query->addExpression('rr.rf - rr.ra', 'diff');

    $result = $query->fields('rr', array('gid', 'id'))
      ->condition('nid', $node->nid)
      ->orderBy('rr.gid')
      ->orderBy('rr.points', 'DESC')
      ->orderBy('diff', 'DESC')
      ->orderBy('rr.rf', 'DESC')
      ->execute();

    foreach ($result as $record) {
      $groups[$record->gid][] = $record->id;
    }

    foreach ($groups as $gid => $ids) {
      $rank = 1;

      foreach ($ids as $id) {
        db_update('tournament_participants')
          ->fields(array(
            'rank' => $gid . '-' . $rank
          ))
          ->condition('nid', $node->nid)
          ->condition('id', $id)
          ->execute();

        $rank++;
      }
    }
  }
}

/**
 * Refreshes a round robin tournament
 *
 * @param $node
 *   A round robin tournament node object
 */
function round_robin_refresh($node) {
  // Clear round robin tournament data
  db_update('tournament_rr_participants')
    ->fields(array(
      'points' => 0,
      'win' => 0,
      'draw' => 0,
      'loss' => 0,
      'rf' => 0,
      'ra' => 0,
      'streak' => 0,
    ))
    ->condition('nid', $node->nid)
    ->execute();

  // Process every match for this tournament
  $nids = db_select('matches')
    ->fields('matches', array('nid'))
    ->condition('tid', $node->nid)
    ->condition('match_status', MATCH_STATUS_FINISHED)
    ->execute()
    ->fetchCol();

  $matches = entity_load('node', $nids);

  foreach ($matches as $match) {
    round_robin_match_process($match, $node);
  }
}

/**
 * Processes a match node result and updates the
 * relative round robin data.
 *
 * @param @node
 *   A match node object
 * @param $tournament
 *   A round robin tournament node object
 */
function round_robin_match_process($node, $tournament) {
  // TODO Clean up the queries here, they are a bit too long?
  $ids = array_keys($node->participants);

  $a = $node->participants[$ids[0]];
  $b = $node->participants[$ids[1]];

  if (!empty($tournament->multiplier)) {
    $points_a = $a['score'] * $tournament->multiplier;
    $points_b = $b['score'] * $tournament->multiplier;
  }

  $query_a = db_update('tournament_rr_participants')
    ->expression('rf', 'rf + :rf', array(':rf' => $a['score']))
    ->expression('ra', 'ra + :ra', array(':ra' => $b['score']))
    ->condition('nid', $tournament->nid)
    ->condition('id', $ids[0]);

  $query_b = db_update('tournament_rr_participants')
    ->expression('rf', 'rf + :rf', array(':rf' => $b['score']))
    ->expression('ra', 'ra + :ra', array(':ra' => $a['score']))
    ->condition('nid', $tournament->nid)
    ->condition('id', $ids[1]);

  if ($a['score'] > $b['score']) {
    $query_a->expression('win', 'win + :win', array(':win' => 1))
      ->expression('points', 'points + :points', array(':points' => isset($points_a) ? $points_a : $tournament->win_points))
      ->expression('streak', 'streak + :streak', array(':streak' => 1))
      ->execute();

    $query_b->expression('loss', 'loss + :loss', array(':loss' => 1))
      ->expression('points', 'points + :points', array(':points' => isset($points_b) ? $points_b : $tournament->loss_points))
      ->fields(array('streak' => 0))
      ->execute();
  }
  elseif ($b['score'] > $a['score']) {
    $query_b->expression('win', 'win + :win', array(':win' => 1))
      ->expression('points', 'points + :points', array(':points' => isset($points_b) ? $points_b : $tournament->win_points))
      ->expression('streak', 'streak + :streak', array(':streak' => 1))
      ->execute();

    $query_a->expression('loss', 'loss + :loss', array(':loss' => 1))
      ->expression('points', 'points + :points', array(':points' => isset($points_a) ? $points_a : $tournament->loss_points))
      ->fields(array('streak' => 0))
      ->execute();
  }
  else {
    $query_a->expression('draw', 'draw + :draw', array(':draw' => 1))
      ->expression('points', 'points + :points', array(':points' => isset($points_a) ? $points_a : $tournament->draw_points))
      ->fields(array('streak' => 0))
      ->execute();

    $query_b->expression('draw', 'draw + :draw', array(':draw' => 1))
      ->expression('points', 'points + :points', array(':points' => isset($points_a) ? $points_a : $tournament->draw_points))
      ->fields(array('streak' => 0))
      ->execute();
  }
}

/**
 * Implements hook_tournament_participant_rank().
 */
function round_robin_tournament_participant_rank($rank) {
  list($gid, $num) = explode('-', $rank);
  return t('Group @gid - @rank', array('@gid' => $gid, '@rank' => tournament_ordinal_suffix($num)));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function round_robin_form_tournament_start_form_alter(&$form, &$form_state, $form_id) {
  // TODO Tidy up this form and add tabledrag for group participants.

  $node = $form_state['node'];

  // Only alter for round robin tournaments
  if ($node->type != 'round_robin') {
    return;
  }

  // Do all necessary math here and store it. This prevents
  // #ajax calls from triggering re-calculation.
  if (!isset($form_state['storage'])) {
    $ids = db_select('tournament_participants', 'tp')
      ->fields('tp', array('id'))
      ->condition('nid', $node->nid)
      ->condition('status', 1)
      ->execute()
      ->fetchCol();

    // Signed up participant count
    $count = count($ids);

    // Round robin tournaments cannot start with less than a single group
    if ($count < ROUND_ROBIN_MIN_GROUP_SIZE) {
      // Remove the default form elements
      unset($form['warning']);
      unset($form['actions']);

      $form['error'] = array(
        '#markup' => t('There are not enough participants signed up to start this tournament. At least @count participants are required.', array('@count' => ROUND_ROBIN_MIN_GROUP_SIZE)),
      );

      return $form;
    }

    // The maximum allowed number of groups
    $max_groups = floor($count / ROUND_ROBIN_MIN_GROUP_SIZE);

    for ($i=1;$i<=$max_groups;$i++) {
      $groups[$i] = t('Group @group', array('@group' => $i));
    }

    // Prepare all participant entities
    $entities = entity_load($node->entity_type, $ids);
    foreach ($entities as $id => $entity) {
      $participants[$id] = entity_label($node->entity_type, $entity);
    }

    $form_state['storage']['groups'] = $groups;
    $form_state['storage']['participants'] = $participants;
  }
  else {
    $participants = $form_state['storage']['participants'];
    $groups = $form_state['storage']['groups'];
    $count = count($participants);
  }

  $group_count = isset($form_state['values']['group_count']) ? $form_state['values']['group_count'] : 1;
  $group_size = ceil($count / $group_count);

  // Store this value for use in form handlers
  $form['group_size'] = array('#type' => 'value', '#value' => $group_size);

  // Custom form handlers
  $form['#validate'][] = 'round_robin_form_tournament_start_form_validate';
  $form['#submit'][] = 'round_robin_form_tournament_start_form_submit';

  $form['group_count'] = array(
    '#type' => 'select',
    '#title' => t('Number of groups'),
    '#options' => drupal_map_assoc(array_keys($groups)),
    '#ajax' => array(
      'callback' => 'round_robin_group_count_callback',
      'wrapper' => 'tournament-round-robin',
    ),
    '#default_value' => $group_count,
  );
  $form['round_robin'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="tournament-round-robin">',
    '#suffix' => '</div>',
  );
  $form['round_robin']['groups'] = array(
    '#type' => 'fieldset',
    '#title' => t('Group Layout'),
    '#description' => t('Maximum of @count participants per group', array('@count' => $group_size)),
  );
  $form['round_robin']['groups']['participants'] = array(
    '#tree' => TRUE,
  );

  // Form an up-to-date list of group
  for ($i=1;$i<=$group_count;$i++) {
    $options[$i] = $groups[$i];
  }

  foreach ($participants as $id => $participant) {
    $form['round_robin']['groups']['participants'][$id] = array(
      '#type' => 'select',
      '#title' => $participant,
      '#default_value' => 1,
      '#options' => $options,
    );
  }

  // Match schedule
  $double = isset($form_state['values']['double']) ? $form_state['values']['double'] : 0;
  $frequency = isset($form_state['values']['frequency']) ? $form_state['values']['frequency'] : 1;

  $form['round_robin']['schedule'] = array(
    '#type' => t('fieldset'),
    '#title' => t('Match schedule'),
  );
  $form['round_robin']['schedule']['double'] = array(
    '#type' => 'checkbox',
    '#title' => t('Each participant plays all others twice'),
    '#ajax' => array(
      'callback' => 'round_robin_match_schedule_callback',
      'wrapper' => 'tournament-match-schedule',
    ),
    '#default_value' => $double,
  );
  $form['round_robin']['schedule']['frequency'] = array(
    '#title' => t('Match frequency'),
    '#type' => 'select',
    '#options' => array(
      1 => t('Every hour'),
      24 => t('Every day'),
      168 => t('Every week'),
      'custom' => t('Custom..'),
    ),
    '#default_value' => $frequency,
    '#ajax' => array(
      'callback' => 'round_robin_match_schedule_callback',
      'wrapper' => 'tournament-match-schedule',
    ),
  );
  $form['round_robin']['schedule']['rounds'] = array(
    '#tree' => TRUE,
    '#type' => 'container',
    '#prefix' => '<div id="tournament-match-schedule">',
    '#suffix' => '</div>',
  );
  $form['round_robin']['schedule']['rounds']['sub'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="tournament-match-sub-schedule">',
    '#suffix' => '</div>',
    '#weight' => 10,
  );

  $match_date = isset($form_state['values']['rounds'][1]) ? match_date_convert($form_state['values']['rounds'][1]) : REQUEST_TIME;

  // Determine the number of rounds
  if ($group_size % 2) {
    $rounds = $group_size;
  }
  else {
    $rounds = $group_size - 1;
  }

  if ($double) {
    $rounds *= 2;
  }

  for ($i=1;$i<=$rounds;$i++) {
    if ($frequency == 'custom' || $i == 1) {
      $form['round_robin']['schedule']['rounds'][$i] = array(
        '#title' => t('Round @round', array('@round' => $i)),
        '#type' => 'match_date',
        '#size' => 10,
        '#time_increment' => 10,
        '#default_value' => $match_date,
      );
    }
    else {
      $form['round_robin']['schedule']['rounds']['sub'][$i] = array(
        '#type' => 'value',
        '#value' => $match_date,
      );
      $form['round_robin']['schedule']['rounds']['sub'][$i]['markup'] = array(
        '#title' => t('Round @round', array('@round' => $i)),
        '#type' => 'item',
        '#markup' => format_date($match_date),
      );
    }

    if ($i < $rounds) {
      if (is_numeric($frequency)) {
        $hour = $frequency;
      }
      elseif (isset($form_state['storage']['frequency'])) {
        $hour = $form_state['storage']['frequency'];
      }

      if (!empty($hour)) {
        $match_date += $hour * 3600;
        $match_date = match_date_round($match_date, 10);
      }
    }
  }

  if ($frequency != 'custom') {
    $form['round_robin']['schedule']['rounds'][1]['#ajax'] = array(
      'callback' => 'round_robin_match_sub_schedule_callback',
      'wrapper' => 'tournament-match-sub-schedule',
      'event' => 'change',
    );
  }

  // Store the currently selected frequency as we may need this when
  // switching to a custom frequency.
  $form_state['storage']['frequency'] = $frequency;
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function round_robin_group_count_callback($form, $form_state) {
  return $form['round_robin'];
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function round_robin_match_schedule_callback($form, $form_state) {
  return $form['round_robin']['schedule']['rounds'];
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function round_robin_match_sub_schedule_callback($form, $form_state) {
  return $form['round_robin']['schedule']['rounds']['sub'];
}

/**
 * Validate handler for the round robin tournament start form.
 *
 * @see round_robin_form_tournament_start_form_alter()
 */
function round_robin_form_tournament_start_form_validate($form, &$form_state) {
  $participants = $form_state['values']['participants'];
  $group_count = $form_state['values']['group_count'];
  $group_size = $form_state['values']['group_size'];

  // Ensure that groups have a balanced participant count
  for ($i=1;$i<=$group_count;$i++) {
    $keys = array_keys($participants, $i);
    if (count($keys) > $group_size) {
      form_set_error('participants', t('There can not be more than @group_size participants in each group.', array('@group_size' => $group_size)));
    }
  }
}

/**
 * Submit handler for the round robin tournament start form.
 * Uses algorithm explained at http://en.wikipedia.org/wiki/Round-robin_tournament
 *
 * @see round_robin_form_tournament_start_form_alter()
 */
function round_robin_form_tournament_start_form_submit($form, &$form_state) {
  $node = $form_state['node'];
  $participants = $form_state['values']['participants'];

  // Merge first round date with all others
  if (isset($form_state['values']['rounds']['sub'])) {
    $rounds = array_merge($form_state['values']['rounds'], $form_state['values']['rounds']['sub']);
    unset($rounds['sub']);
  }
  else {
    // Custom round dates come in a single array
    $rounds = $form_state['values']['rounds'];
  }

  foreach ($rounds as $round => $date) {
    if (is_array($date)) {
      $rounds[$round] = match_date_convert($date);
    }
  }

  // Set up the round robin tournament
  round_robin_init_participants($node, $participants);
  round_robin_create_matches($node, $participants, $rounds);
}

/**
 * Creates all matches for a round robin tournament
 *
 * @param $node
 *   A tournament round robin node
 * @param $participants
 *   An associative array of participant group IDs keyed by
 *   participant entity ID.
 * @param $rounds
 *   As associative array of round dates as unix timestamps,
 *   keyed by round number.
 */
function round_robin_create_matches($node, $participants, $rounds) {
  // Split participants into groups
  foreach ($participants as $id => $group) {
    $groups[$group][] = $id;
  }

  // Deal with each group individually
  foreach ($groups as $group => $ids) {
    $count = count($ids);
    // We must add a dummy participant for odd groups
    if ($count % 2) {
      $ids[] = 0;
      $count++;
    }

    // There are n/2 matches per round
    $match_count = $count / 2;

    // Create matches for each round
    foreach ($rounds as $round => $date) {
      if (is_array($date)) {
        $date = match_date_convert($date);
      }

      $temp_ids = $ids;
      for ($i=0;$i<$match_count;$i++) {
        // Pick 2 competitors
        $a = array_shift($temp_ids);
        $b = array_pop($temp_ids);

        // Only create matches without dummy participants
        if ($a && $b) {
          // Initialize the match
          $match = array(
            'match_date' => $date,
            'participants' => array(
              $a => array('score' => 0, 'weight' => 0),
              $b => array('score' => 0, 'weight' => 1),
            ),
          );

          // Reverse participants on odd rounds to ensure home/away fairness
          if ($round % 2) {
            $match['participants'] = array_reverse($match['participants'], TRUE);
          }

          $matches[] = (object) $match;
        }
      }

      // Move the last id from participants after the first
      $id = array_pop($ids);
      array_splice($ids, 1, 0, $id);
    }
  }

  foreach ($matches as $match) {
    match_create_match($match, $node);
  }
}

/**
 * Inserts default participant data into {tournament_rr_participants}
 *
 * @param $node
 *   A tournament round robin node
 * @param $participants
 *   An associative array of participant group IDs keyed by
 *   participant entity ID.
 */
function round_robin_init_participants($node, $participants) {
  foreach ($participants as $id => $gid) {
    $values[] = array(
      'nid' => $node->nid,
      'id' => $id,
      'gid' => $gid,
    );
  }

  // Multi-insert participant data
  $query = db_insert('tournament_rr_participants')->fields(array('nid', 'id', 'gid'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
}
