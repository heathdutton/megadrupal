<?php

/**
 * @file
 * Allows to send messages to all participants of a tournament.
 */

/**
 * Implements hook_permission().
 */
function tournament_privatemsg_permission() {
  return array(
    'write privatemsg to all tournaments' => array(
      'title' => t('Write private messages to all tournaments participants'),
    ),
    'write privatemsg to own tournaments' => array(
      'title' => t('Write private messages to own tournaments participants'),
    ),
    'view tournament recipients' => array(
      'title' => t('View tournament recipients'),
      'description' => t('Ability to view tournaments recipients and the title of these tournaments.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tournament_privatemsg_menu() {
  $items['node/%node/edit/participants/message'] = array(
    'title' => 'Message participants',
    'page callback' => 'tournament_privatemsg_participant_message',
    'page arguments' => array(1),
    'access callback' => 'tournament_privatemsg_participant_message_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'tournament_privatemsg.pages.inc',
  );

  return $items;
}

/**
 * Access callback for messaging tournament participants
 */
function tournament_privatemsg_participant_message_access($node) {
  $recipient = array(
    'nid' => $node->nid,
  );

  $recipient = (object) $recipient;

  return tournament_privatemsg_write_access($recipient);
}

/**
 * Implements hook_theme().
 */
function tournament_privatemsg_theme() {
  return array(
    'tournament_privatemsg_format' => array(
      'variables' => array('recipient' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Implements hook_privatemsg_recipient_types_info().
 */
function tournament_privatemsg_privatemsg_recipient_type_info() {
  return array(
    'tournament' => array(
      'name' => t('Tournament'),
      'description' => t('Enter the title of a tournament to write a message to all of its active participants.'),
      'load' => 'tournament_privatemsg_load_multiple',
      'format' => 'tournament_privatemsg_format',
      'autocomplete' => 'tournament_privatemsg_autocomplete',
      'generate recipients' => 'tournament_privatemsg_load_recipients',
      'count' => 'tournament_privatemsg_count_recipients',
      'write callback' => 'tournament_privatemsg_write_access',
      'view access' => 'view tournament recipients',
    ),
  );
}

/**
 * Write permission check for tournament recipients.
 */
function tournament_privatemsg_write_access($recipient) {
  // Check if user has permission to write to all roles.
  if (user_access('write privatemsg to all tournaments')) {
    return TRUE;
  }

  if (!empty($recipient)) {
    $nid = isset($recipient->recipient) ? $recipient->recipient : $recipient->nid;

    if (empty($recipient->title)) {
      $recipient = reset(tournament_privatemsg_load_multiple(array($nid)));
    }

    $node = node_load($nid);

    if (!empty($node)) {
      // Check permission for this recipient.
      return user_access('write privatemsg to own tournaments') && tournament_update_access($node);
    }
  }

  // No permission, return FALSE.
  return FALSE;
}

/**
 * Load a number of tournaments based on their nid.
 */
function tournament_privatemsg_load_multiple($nids) {
  $query = db_select('tournament', 't');
  $query->join('node', 'n', 't.nid = n.nid');
  $query->addField('n', 'nid', 'recipient');
  $query->addField('n', 'title');

  $result = $query->condition('n.nid', $nids)
    ->condition('n.status', 1)
    ->execute();

  $tournaments = array();
  foreach ($result as $tournament) {
    $tournament->type = 'tournament';
    $tournaments[privatemsg_recipient_key($tournament)] = $tournament;
  }

  return $tournaments;
}

/**
 * Format a tournament to be displayed as a recipient.
 */
function theme_tournament_privatemsg_format($variables) {
  $tournament = $variables['recipient'];
  $options = $variables['options'];

  if (!empty($options['plain'])) {
    $title = $tournament->title;

    if (!empty($options['unique'])) {
      $title .= ' [tournament]';
    }

    return $title;
  }

  return t('%tournament (Tournament participants)', array('%tournament' => $tournament->title));
}

/**
 * Loads recipients from participants of a tournament.
 */
function tournament_privatemsg_load_recipients($recipient, $limit, $offset) {
  $nid = isset($recipient->recipient) ? $recipient->recipient : $recipient->nid;

  $node = node_load($nid);
  $ids = tournament_participants_load($node, $limit, $offset);

  if (empty($ids) || $node->entity_type == 'user') {
    return $ids;
  }

  // Extract participants uids
  $entities = entity_load($node->entity_type, $ids);

  $uids = array();

  if (!empty($entities)) {
    foreach ($entities as $entity) {
      $return = module_invoke_all('match_participants_extract', $node->entity_type, $entity);
      $uids = array_merge($uids, $return);
    }
  }

  return $uids;
}

/**
 * Return the number of participants which are in the tournament.
 */
function tournament_privatemsg_count_recipients($recipient) {
  $nid = isset($recipient->recipient) ? $recipient->recipient : $recipient->nid;

  $node = node_load($nid);
  $ids = tournament_participants_load($node);

  if (empty($ids) || $node->entity_type == 'user') {
    return count($ids);
  }

  // We can expect, e.g. team module, a single return for participant counts
  $count = module_invoke_all('tournament_participants_count', $node->entity_type, $ids);
  $count = current($count);

  if (!empty($count) && is_numeric($count)) {
    return $count;
  }
}

/**
 * Provides autocomplete suggestions for tournaments.
 */
function tournament_privatemsg_autocomplete($fragment, $names, $limit) {
  $result = _privatemsg_assemble_query(array('autocomplete_tournaments', 'tournament_privatemsg'), $fragment, $names)
    ->range(0, $limit)
    ->execute();

  $tournaments = array();
  foreach ($result as $tournament) {
    $tournament->type = 'tournament';
    $tournament->recipient = $tournament->nid;
    $tournaments[privatemsg_recipient_key($tournament)] = $tournament;
  }

  return $tournaments;
}

/**
 * Implements hook_privatemsg_name_lookup().
 */
function tournament_privatemsg_privatemsg_name_lookup($string) {
  // Remove optional tournament specifier.
  $string = str_replace(t('[tournament]'), '', $string);

  if ($node = tournament_load_by_name(trim($string))) {
    $tournament = array(
      'type' => 'tournament',
      'recipient' => $node->nid,
      'title' => $node->title,
    );

    $tournament = (object) $tournament;

    return array(privatemsg_recipient_key($tournament) => $tournament);
  }
}

/**
 * Query definition to search for tournament autocomplete suggestions.
 *
 * @param $fragments
 *   Query fragments array.
 * @param $search
 *   Which search string is currently searched for.
 * @param $names
 *   Array of names not to be used as suggestions.
 */
function tournament_privatemsg_sql_autocomplete_tournaments($search, $names) {
  $types = tournament_supported_type();

  $query = db_select('node')
    ->fields('node', array('nid', 'title'))
    ->condition('title', $search . '%', 'LIKE')
    ->condition('type', array_keys($types))
    ->condition('status', 1)
    ->orderBy('title');

  if (!empty($names)) {
    $query->condition('title', $names, 'NOT IN');
  }

  return $query;
}
