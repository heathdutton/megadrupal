<?php

/**
 * Bracket types
 */
define('KNOCKOUT_BRACKET_SINGLE', 1);
define('KNOCKOUT_BRACKET_DOUBLE', 2);
define('KNOCKOUT_MINIMUM_PARTICIPANTS', 3);

/**
 * Implements hook_menu().
 */
function knockout_menu() {
  $items['node/%node/bracket'] = array(
    'title' => 'Bracket',
    'page callback' => 'knockout_bracket_callback',
    'page arguments' => array(1),
    'access callback' => '_knockout_bracket_callback_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'knockout.pages.inc',
  );
  $items['admin/config/competition/knockout'] = array(
    'title' => 'Knockout tournaments',
    'description' => 'Configure knockout tournament settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('knockout_tournament_admin_settings'),
    'access arguments' => array('access administration pages'),
    'file' => 'knockout.admin.inc',
  );

  return $items;
}

/**
 * Access callback for full screen knockout brackets
 */
function _knockout_bracket_callback_access($node) {
  if ($node->type != 'knockout') {
    return;
  }

  return $node->tournament_status >= TOURNAMENT_STATUS_STARTED;
}

/**
 * Implements hook_node_info().
 */
function knockout_node_info() {
  return array(
    'knockout' => array(
      'name' => t('Knockout'),
      'base' => 'tournament',
      'description' => t('Also known as a Tournament Bracket or Cup, a knockout tournament is divided into successive rounds. The winner of each match progresses to the next round. Both single and double elimination are supported.'),
      'title_label' => t('Tournament title'),
    ),
  );
}

/**
 * Implements hook_load().
 */
function knockout_node_load($nodes, $types) {
  if (in_array('knockout', $types)) {
    // Gather a list of node ids to work with
    foreach ($nodes as $node) {
      if ($node->type == 'knockout') {
        $nids[] = $node->nid;
      }
    }

    $result = db_select('tournament_knockout', 'k')
      ->fields('k')
      ->condition('nid', $nids)
      ->execute();

    foreach ($result as $field) {
      $nodes[$field->nid]->format = $field->format;
      $nodes[$field->nid]->third_place = $field->third_place;
      $nodes[$field->nid]->two_round_final = $field->two_round_final;
    }
  }
  elseif (in_array('match', $types)) {
    // Add position to match object if it's a knockout match
    $result = db_select('tournament_knockout_match', 'k')
      ->fields('k')
      ->condition('nid', array_keys($nodes))
      ->execute();

    foreach ($result as $field) {
      $nodes[$field->nid]->position = $field->position;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function knockout_form_knockout_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['node'];

  // From 4 to 1024
  for ($n=4;$n<=1024;$n*=2) {
    $options[] = $n;
  }

  // Sizes can only be certain numbers for brackets
  $form['general']['size']['#size'] = 1;
  $form['general']['size']['#type'] = 'select';
  $form['general']['size']['#options'] = drupal_map_assoc($options);
  $form['general']['size']['#description'] = t('The number of participants in this tournament. Once this limit has been reached, new sign ups will be automatically added to a waiting list.');

  $form['module'] = array(
    '#title' => t('Knockout settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'settings',
    '#weight' => 5,
  );

  // Hide these settings after a tournament has started
  if (!empty($node->tournament_status) && $node->tournament_status != TOURNAMENT_STATUS_ACTIVE) {
    $form['module']['#disabled'] = TRUE;
    $form['module']['#description'] = t('You cannot edit these settings after a tournament has started.');
  }

  $form['module']['format'] = array(
    '#type' => 'radios',
    '#title' => t('Bracket format'),
    '#options' => array(
      KNOCKOUT_BRACKET_SINGLE => t('Single elimination'),
      KNOCKOUT_BRACKET_DOUBLE => t('Double elimination'),
    ),
    '#default_value' => isset($node->format) ? $node->format : KNOCKOUT_BRACKET_SINGLE,
  );

  $form['module']['third_place'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include third place playoff match'),
    '#default_value' => isset($node->third_place) ? $node->third_place : 1,
    '#states' => array(
      'visible' => array(
        ':input[name="format"]' => array('value' => KNOCKOUT_BRACKET_SINGLE),
      ),
      'invisible' => array(
        ':input[name="format"]' => array('value' => KNOCKOUT_BRACKET_DOUBLE),
      )
    )
  );

  $form['module']['two_round_final'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include two round final'),
    '#default_value' => isset($node->two_round_final) ? $node->two_round_final : 1,
    '#states' => array(
      'visible' => array(
        ':input[name="format"]' => array('value' => KNOCKOUT_BRACKET_DOUBLE),
      ),
      'invisible' => array(
        ':input[name="format"]' => array('value' => KNOCKOUT_BRACKET_SINGLE),
      )
    )
  );
}

/**
 * Implements hook_node_insert().
 */
function knockout_node_insert($node) {
  if ($node->type == 'knockout') {
    knockout_save($node);
  }
}

/**
 * Implements hook_node_update().
 */
function knockout_node_update($node) {
  if ($node->type == 'knockout') {
    knockout_save($node, TRUE);
  }
}

/**
 * Saves a knockout node.
 */
function knockout_save($node, $update = FALSE) {
  $primary_keys = $update ? 'nid' : array();

  // Ensure custom variables are correct
  if ($node->format == KNOCKOUT_BRACKET_SINGLE) {
    $node->two_round_final = 0;
  }

  elseif ($node->format == KNOCKOUT_BRACKET_DOUBLE) {
    $node->third_place = 0;
  }

  drupal_write_record('tournament_knockout', $node, $primary_keys);
}

/**
 * Implements hook_tournament_access_leave().
 */
function knockout_tournament_access_leave($node) {
  return $node->tournament_status == TOURNAMENT_STATUS_ACTIVE;
}

/**
 * Implements hook_node_delete().
 */
function knockout_node_delete($node) {
  if ($node->type == 'knockout') {
    db_delete('tournament_knockout_match')->condition('tid', $node->nid)->execute();
    db_delete('tournament_knockout_participants')->condition('nid', $node->nid)->execute();
    db_delete('tournament_knockout')->condition('nid', $node->nid)->execute();
  }
  elseif ($node->type == 'match') {
    db_delete('tournament_knockout_match')->condition('nid', $node->nid)->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function knockout_form_tournament_start_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['node'];

  if ($node->type != 'knockout') {
    return;
  }

  $form['#prefix'] = '<div id="knockout-form-wrapper">';
  $form['#suffix'] = '</div>';

  if (empty($form_state['step'])) {
    $form_state['step'] = 1;
    $form_state['storage']['participants'] = array();

    $ids = db_select('tournament_participants', 'tp')
      ->fields('tp', array('id'))
      ->condition('nid', $node->nid)
      ->condition('status', 1)
      ->execute()
      ->fetchCol();

    if (!empty($ids)) {
      // Prepare all participant entities
      $entities = entity_load($node->entity_type, $ids);
      foreach ($entities as $id => $entity) {
        $participants[$id] = entity_label($node->entity_type, $entity);
      }

      $form_state['storage']['participants'] = $participants;
    }
  }

  $count = count($form_state['storage']['participants']);

  if ($count < KNOCKOUT_MINIMUM_PARTICIPANTS) {
    // Remove the default form elements
    unset($form['warning']);
    unset($form['actions']);

    $form['error'] = array(
      '#markup' => t('There are not enough participants signed up to start this tournament. At least @count participants are required.', array('@count' => KNOCKOUT_MINIMUM_PARTICIPANTS)),
    );

    return $form;
  }
  else {
    $size = $node->size;

    // Resize the bracket to match the participant count
    if ($count * 2 <= $size) {
      while ($size >= $count * 2) {
        $size /= 2;
      }

      // Save for later
      $node->size = $form_state['node']->size = $size;

      // Let the user know why we changed the size
      $size .= ' (' . t('automatically adjusted') . ')';
    }
  }

  if ($form_state['step'] == 1) {
    // Remove the default form elements
    unset($form['warning']);

    $form['review'] = array(
      '#type' => 'fieldset',
      '#title' => t('Review settings'),
    );
    $form['review']['size'] = array(
      '#type' => 'item',
      '#title' => t('Size'),
      '#markup' => $size,
    );
    $form['review']['format'] = array(
      '#type' => 'item',
      '#title' => t('Bracket format'),
      '#markup' => $node->format == KNOCKOUT_BRACKET_SINGLE ? t('Single elimination') : t('Double elimination')
    );

    if ($node->format == KNOCKOUT_BRACKET_SINGLE) {
      $form['review']['third_place'] = array(
        '#type' => 'item',
        '#title' => t('Include third place playoff match'),
        '#markup' => !empty($node->third_place) ? t('Yes') : t('No'),
      );
      
      // If there is not enough participants, do not allow a third place match.
      if ($count < 4) {
        $node->third_place = 0;
        $form['review']['third_place']['#markup'] = t('No') . ' (' . t('automatically adjusted') . ')';
      }      
    }
    elseif ($node->format == KNOCKOUT_BRACKET_DOUBLE) {
      $form['review']['third_place'] = array(
        '#type' => 'item',
        '#title' => t('Include two round final'),
        '#markup' => !empty($node->two_round_final) ? t('Yes') : t('No'),
      );
    }

    $form['review']['link'] = array(
      '#markup' => l(t('Edit tournament'), 'node/' . $node->nid . '/edit'),
    );

    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#ajax' => array(
        'callback' => 'knockout_form_tournament_start_form_callback',
        'wrapper' => 'knockout-form-wrapper',
      ),
      '#submit' => array('knockout_form_tournament_start_form_next'),
    );
  }
  elseif ($form_state['step'] == 2) {
    unset($form['warning']);

    if (isset($form_state['storage']['values']['first_round_date'])) {
      $match_date = match_date_convert($form_state['storage']['values']['first_round_date']);
    }
    else {
      $match_date = REQUEST_TIME;
    }

    $form['first_round_date'] = array(
      '#title' => t('First round date'),
      '#type' => 'match_date',
      '#size' => 10,
      '#time_increment' => 10,
      '#default_value' => $match_date,
    );

    $form['method'] = array(
      '#type' => 'select',
      '#title' => t('Seeding method'),
      '#default_value' => !empty($form_state['storage']['values']['method']) ? $form_state['storage']['values']['method'] : 'random',
      '#options' => array(
        'random' => t('Random'),
        'rank' => t('Rank based'),
      ),
    );

    $form['participants'] = array(
      '#type' => 'container',
      '#theme' => 'knockout_tournament_start_form_participants',
      '#tree' => TRUE,
      '#states' => array(
        // Show this field only when the participant type is team
        'visible' => array(
          ':input[name="method"]' => array('value' => 'rank'),
        ),
      ),
    );

    $options = range(1, $count);
    $options = drupal_map_assoc($options);

    $seed = 1;
    foreach ($form_state['storage']['participants'] as $id => $name) {
      $form['participants'][$id]['id'] = array(
        '#type' => 'value',
        '#value' => $id,
      );
      $form['participants'][$id]['name'] = array(
        '#type' => 'value',
        '#value' => $name,
      );

      // For display only
      $form['participants'][$id]['name_markup'] = array(
        '#markup' => $name,
      );

      if (isset($form_state['storage']['values']['participants'][$id]['seed'])) {
        $default = $form_state['storage']['values']['participants'][$id]['seed'];
      }
      else {
        $default = $seed;
      }

      $form['participants'][$id]['seed'] = array(
        '#type' => 'select',
        '#default_value' => $default,
        '#options' => $options,
        '#title_display' => 'invisible',
        '#title' => t('Seed for @name', array('@name' => $name)),
      );

      $seed++;
    }

    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Preview'),
      '#ajax' => array(
        'callback' => 'knockout_form_tournament_start_form_callback',
        'wrapper' => 'knockout-form-wrapper',
      ),
      '#submit' => array('knockout_form_tournament_start_form_preview'),
    );
  }
  else {
    // Required for knockout logic
    module_load_include('inc', 'knockout', 'knockout.bracket');

    $form['#submit'][] = 'knockout_form_tournament_start_form_submit';

    $node->first_round_date = match_date_convert($form_state['values']['first_round_date']);

    // Create preview matches from the participants and their rank
    $matches = knockout_create_matches($node, $form_state['values']['participants']);

    // Stored for use in submission
    $form_state['storage']['matches'] = $matches;

    $build = knockout_bracket_build($node, $matches);
    $form['bracket'] = knockout_bracket_view($node, $build);

    // Only add css as a form element for preview since inline css is not addable in ajax_render().
    if ($form_state['values']['submit'] == t("Preview")) {
      $css = array_keys(($form['bracket']['#attached']['css']));
      $form['computed_css'] = array(
        '#weight' => -2,
        '#markup' => '<style type="text/css" media="all">' . $css[1] . '</style>'
      );
    }
  }

  if ($form_state['step'] > 1) {
    $form['actions']['back'] = array(
      '#type' => 'submit',
      '#value' => t('Back'),
      '#ajax' => array(
        'callback' => 'knockout_form_tournament_start_form_callback',
        'wrapper' => 'knockout-form-wrapper',
      ),
      '#limit_validation_errors' => array(),
      '#submit' => array('knockout_form_tournament_start_form_back'),
      '#weight' => -10,
    );
  }
}

function knockout_form_tournament_start_form_callback($form, $form_state) {
  return $form;
}

function knockout_form_tournament_start_form_back($form, &$form_state) {
  $form_state['step']--;
  $form_state['rebuild'] = TRUE;
}

function knockout_form_tournament_start_form_next($form, &$form_state) {
  $form_state['storage']['values'] = $form_state['values'];
  $form_state['step']++;
  $form_state['rebuild'] = TRUE;
}

function knockout_form_tournament_start_form_preview($form, &$form_state) {
  if ($form_state['values']['method'] == 'random') {
    // Shuffle the participants
    knockout_shuffle_participants($form_state['values']['participants']);
  }
  else {
    // Order by given seed
    uasort($form_state['values']['participants'], 'knockout_sort_participants');
  }

  $form_state['storage']['values'] = array_merge($form_state['storage']['values'], $form_state['values']);
  $form_state['step']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for knockout tournament start form. Create the bracket map
 * in the database here.
 */
function knockout_form_tournament_start_form_submit($form, &$form_state) {
  // Required for knockout logic
  module_load_include('inc', 'knockout', 'knockout.bracket');

  $node = $form_state['node'];

  // Save the tournament again as we may have changed it's size
  node_save($node);

  // Use our stored data to insert bracket matches and participant seeds
  $matches = $form_state['storage']['matches'];
  $participants = $form_state['storage']['values']['participants'];

  // Insert bracket data into the DB
  knockout_bracket_insert($node, $matches, $participants);

  $form_state['redirect'] = 'node/' . $node->nid;
}

/**
 * Sort participants by their seed.
 */
function knockout_sort_participants($a, $b) {
  return ($a['seed'] < $b['seed']) ? -1 : 1;
}

/**
 * Shuffle participants, removes array keys.
 */
function knockout_shuffle_participants(&$participants) {
  shuffle($participants);

  // Re-seed from top down
  $seed = 1;
  foreach ($participants as &$participant) {
    $participant['seed'] = $seed;
    $seed++;
  }
}

// TODO needs work
function knockout_bracket_view($node, $rounds, $fullscreen = FALSE) {
  $computed_css = knockout_get_tournament_css($node, $rounds);

  $path = drupal_get_path('module', 'knockout');

  $build = array(
    '#prefix' => '<div id="tournament-knockout" class="tournament-module-rankings">',
    '#suffix' => '</div>',
    '#attached' => array(
      'js' => array(
        $path . '/js/knockout-bracket.js' => array(),
        $path . '/js/dragscrollable.js' => array(),
      ),
      'css' => array(
        $path . '/css/knockout-bracket.css' => array(),
        $computed_css => array(
          'type'  => 'inline'
        ),
      )
    )
  );

  // Bracket actions when not in preview
  if ($node->tournament_status >= TOURNAMENT_STATUS_STARTED) {
    $build['header'] = array(
      '#prefix' => '<div id="knockout-bracket-header">',
      '#suffix' => '</div>',
      'actions' => array(
        '#prefix' => '<div id="knockout-bracket-actions">',
        '#suffix' => '</div>',
        '#theme' => 'links',
        '#attributes' => array(
          'class' => array('links', 'inline'),
        ),
        '#links' => array(
          'bracket-link' => array(
            'title' => t('Share'),
            'href' => '',
            'fragment' => 'link',
          ),
        ),
      ),
    );

    $build['bracket-link'] = array(
      '#prefix' => '<div id="knockout-bracket-link" class="knockout-bracket-overlay">',
      '#suffix' => '</div>',
      'share' => array(
        '#type' => 'textfield',
        '#title' => t('Share link to bracket'),
        '#value' => url('node/' . $node->nid . '/bracket', array('absolute' => TRUE)),
      ),
      'embed' => array(
        '#type' => 'textfield',
        '#title' => t('Paste HTML to embed in website'),
        '#value' => _knockout_bracket_iframe($node),
      ),
    );

    // Show final rankings for finished tournaments
    if ($node->tournament_status == TOURNAMENT_STATUS_FINISHED && empty($node->skip_rankings)) {
      $build['rankings'] = array(
        '#prefix' => '<div id="knockout-rankings" class="knockout-bracket-overlay">',
        '#suffix' => '</div>',
        '#markup' => theme('knockout_rankings', array('node' => $node)),
      );
    }

    // Fullscreen occurs on embed and node/%/bracket callbacks
    if ($fullscreen) {
      $build['header']['actions']['#links']['back'] = array(
        'title' => t('Tournament page'),
        'href' => 'node/' . $node->nid,
        'attributes' => array(
          'target' => '_blank',
        ),
      );
    }
    else {
      $build['header']['actions']['#links']['fullscreen'] = array(
        'title' => t('Full screen'),
        'href' => 'node/' . $node->nid . '/bracket',
      );
    }
  }

  $build['header']['#prefix'] = '<div id="knockout-bracket-header">';
  $build['header']['#suffix'] = '</div>';

  // If third place match is in effect, let's extract it so it doesn't show in the main bracket, and show it separately.
  // TODO Implement graceful degradation without JS
  // TODO Implement logic where tournament cannot be third_place and double elimination
  if ($node->third_place == 1 || $node->format == KNOCKOUT_BRACKET_DOUBLE) {
    // Only build tabs if there is a third round or it's a double elimination bracket
    $build['header']['tabs'] = array(
      '#prefix' => '<div id="knockout-bracket-tabs">',
      '#suffix' => '</div>',
      '#theme' => 'links',
      '#attributes' => array('class' => array('links', 'inline')),
      '#links' => array(
        'main' => array(
          'title' => t('Main Bracket'),
          'href' => $_GET['q'],
          'fragment' => 'main',
          'attributes' => array(
            'class' => array(
              'active-pane'
            ),
            'location' => 'main',
          )
        ),
        'other' => array(
          'title' => t('Third Place Match'),
          'href' => $_GET['q'],
          'fragment' => 'other',
          'attributes' => array(
            'location' => 'other',
          ),
        ),
      ),
      '#weight' => -1, // Raise it to the top
    );
  }

  $build['footer'] = array(
    '#prefix' => '<div id="knockout-bracket-refresh-note">',
    '#suffix' => '</div>',
    '#markup' => t('Bracket refreshes every minute'),
    '#weight' => 25,
  );

  $build['bracket'] = array(
    '#prefix' => '<div id="knockout-bracket-wrapper">',
    '#suffix' => '</div>',
    '#weight' => 10, // Ensure it's rendered at the bottom
    'panes' => array(
      '#prefix' => '<div id="knockout-bracket">',
      '#suffix' => '</div>',
    ),
  );

  if ($node->format == KNOCKOUT_BRACKET_DOUBLE) {
    // Add final tab
    $build['header']['tabs']['#links']['other']['title'] = t('Losers Bracket');
    $build['header']['tabs']['#links']['final'] = array(
      'title' => t('Final'),
      'href' => '',
      'fragment' => 'final',
      'attributes' => array(
        'location' => 'final',
      ),
    );
    // Also add final wrapper
    $build['bracket']['panes']['final']['#prefix'] = '<div class="knockout-bracket-pane final">';
  }

  // Create main round panel
  $build['bracket']['panes']['main']['#prefix'] = '<div class="knockout-bracket-pane main active-pane">';

  // If there is another panel, i.e. a third place or losers bracket panel, set up container
  if (count($rounds) > 1) {
    $extra = ($node->third_place == 1) ? ' third_place' : '';
    $build['bracket']['panes']['other']['#prefix'] = '<div class="knockout-bracket-pane other' . $extra . '">';
  }

  // Loop through each round and theme it as its own round
  foreach ($rounds as $round_type => $round_data) {
    $build['bracket']['panes'][$round_type]['#suffix'] = '</div>';
    foreach ($round_data as $rid => $round) {
      $build['bracket']['panes'][$round_type][] = array(
        '#round' => array($rid => $round),
        '#type' => $round_type,
        '#theme' => 'knockout_round',
      );
    }
  }

  // Identify last round for each round type
  foreach (element_children($build['bracket']['panes']) as $type) {
    $build['bracket']['panes'][$type][count(element_children($build['bracket']['panes'][$type])) -1 ]['#last_round'] = TRUE;
  }

  return $build;
}

/**
 * Builds HTML to embed knockout brackets in an iframe externally
 */
function _knockout_bracket_iframe($node) {
  $src = url('node/' . $node->nid . '/bracket', array('absolute' => TRUE, 'query' => array('embed' => 1)));
  $href = url('node/' . $node->nid, array('absolute' => TRUE));

  $output = '';
  $output .= '<iframe width="640" height="535" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="' . $src . '"></iframe>';
  $output .= '<br /><small><a href="' . $href . '" style="color:#0071B3;text-align:left">' . $node->title . '</a> - ' . t('Bracket refreshes every minute') . '</small>';

  return $output;
}

/**
 * Implements hook_theme().
 */
function knockout_theme() {
  return array(
    'knockout_tournament_start_form_participants' => array(
      'render element' => 'element',
    ),
    'knockout_round' => array(
      'variables' => array('round' => NULL, 'type' => NULL, 'last_round' => NULL),
      'template' => 'templates/knockout-round',
      'file' => 'knockout.pages.inc',
    ),
    'knockout_match' => array(
      'variables' => array('rid' => NULL, 'match' => NULL),
      'template' => 'templates/knockout-match',
      'file' => 'knockout.pages.inc',
    ),
    'knockout_connectors' => array(
      'variables' => array('rid' => NULL),
      'template' => 'templates/knockout-connectors',
      'file' => 'knockout.pages.inc',
    ),
    'knockout_rankings' => array(
      'variables' => array('node' => NULL),
      'template' => 'templates/knockout-rankings',
      'file' => 'knockout.pages.inc',
    ),
    'page__node__bracket' => array(
      'render element' => 'page',
    ),
  );
}

/**
 * Returns HTML for a knockout bracket in fullscreen.
 * This is used in node/%/bracket callbacks and iframe embeds.
 */
function theme_page__node__bracket($variables) {
  if (!is_null(variable_get('knockout_background_image_path'))) {
    $image_path = file_create_url(variable_get('knockout_background_image_path'));
    $image = theme('image', array('path' => $image_path));
    $variables['page']['content']['system_main']['bracket']['background-image'] = array(
      '#prefix' => '<div id="knockout-embed-background-image">',
      '#suffix' => '</div>',
      '#markup' => $image,
      '#weight' => -5,
    );
  }

  if (empty($_GET['embed'])) {
    return '<div id="knockout-bracket-full">' . render($variables['page']['content']['system_main']) . '</div>';
  }

  return '<div id="knockout-bracket-embed">' . render($variables['page']['content']['system_main']) . '</div>';
}

/**
 * Returns HTML for the menu overview form into a table.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_knockout_tournament_start_form_participants($variables) {
  $element = $variables['element'];

  drupal_add_tabledrag('knockout', 'order', 'sibling', 'knockout-seed', NULL, NULL, FALSE);

  $header = array(
    t('Name'),
    t('Seed'),
  );

  $rows = array();
  foreach (element_children($element) as $id) {
    // Add special classes to be used for tabledrag.js.
    $element[$id]['seed']['#attributes']['class'] = array('knockout-seed');

    $rows[] = array(
      'data' => array(
        drupal_render($element[$id]['name_markup']),
        drupal_render($element[$id]['seed']),
      ),
      'class' => array('draggable')
    );
  }

  $output = '';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'knockout')));

  return $output;
}

/*
 * Advances participant to next match
 * Implements hook_match_finish().
 */
function knockout_match_finish($node) {
  if (isset($node->tournament_node) && $node->tournament_node->type == "knockout") {
    module_load_include('inc', 'knockout', 'knockout.bracket');
    knockout_bracket_match_finish($node);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function knockout_form_match_action_form_alter(&$form, &$form_state, $form_id) {
  $op = $form_state['op'];
  $node = $form_state['node'];

  if (!empty($node->tid)) {
    $tournament = node_load($node->tid);
    if ($tournament->type == 'knockout' && $op == 'result_enter') {
      // Add a custom validation handler
      $form['#validate'][] = 'knockout_form_match_action_form_validate_score';
    }
  }
}

/**
 * Validate handler for the match action form.
 *
 * @see ladder_form_match_action_form_alter()
 */
function knockout_form_match_action_form_validate_score($form, &$form_state) {
  foreach ($form_state['values']['participants'] as $id => $participant) {
    $scores[] = $participant['score'];
  }

  if ($scores[0] == $scores[1]) {
    form_set_error('', t('Matches in knockout tournaments cannot be drawn.'));
  }
}

/**
 * Implements hook_tournament_finish().
 */
function knockout_tournament_finish($node) {
  if ($node->type == 'knockout') {
    // Order the participants by position.  The further she made it, the higher her rank
    $query = db_select('tournament_knockout_match', 'tkm');
    $query->join('matches_participants', 'mp', 'tkm.nid = mp.nid');
    $result = $query->fields('mp', array('id'))
      ->condition('tkm.tid', $node->nid)
      ->orderBy('tkm.position', 'DESC')
      ->orderBy('mp.score', 'DESC')
      ->execute()
      ->fetchAllKeyed(0, 0);

    // Collect matches per round to determine rank ranges
    $round_count = ($node->format == KNOCKOUT_BRACKET_SINGLE) ? log($node->size, 2) - 1 : 2 * (log($node->size, 2) -1);
    for ($i=1; $i <= $round_count; $i++) {
      $exponent = ($node->format == KNOCKOUT_BRACKET_SINGLE) ? $i : ceil($i/2) + 1;
      $match_count = $node->size / pow(2, $exponent);
      $rounds[$i] = $match_count;
    }

    $placements = array("1", "2");
    $rounds = array_reverse($rounds);
    // Create rank strings for all participants
    foreach ($rounds as $round => $match_count) {
      $first_rank = count($placements)  + 1;
      $last_rank = min($first_rank + $match_count - 1, count($result));
      $rank = ($first_rank == $last_rank) ? $last_rank : $first_rank . "-" . $last_rank;
      $round_ranks = explode(' ', trim(str_repeat($rank . " ", $match_count)));
      $placements = array_merge($placements, $round_ranks);
    }

    // Account for third place match in a single elimination bracket
    if ($node->format == KNOCKOUT_BRACKET_SINGLE && $node->third_place) {
      $first_and_second = array_splice($result, 2, 2);
      $result = array_merge($first_and_second, $result);
      $placements[2] = "3";
      $placements[3] = "4";
    }

    // Run db updates to set rank
    foreach ($result as $id) {
      db_update('tournament_participants')
        ->fields(array('rank' => array_shift($placements)))
        ->condition('nid', $node->nid)
        ->condition('id', $id)
        ->execute();
    }
  }
}

/**
 * Implements hook_tournament_participant_replace().
 */
function knockout_tournament_participant_replace($node, $new, $old) {
  db_delete('tournament_knockout_participants')
    ->condition('id', $new)
    ->condition('nid', $node->nid)
    ->execute();

  db_update('tournament_knockout_participants')
    ->fields(array(
      'id' => $new,
    ))
    ->condition('id', $old)
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_tournament_participant_rank().
 */
function knockout_tournament_participant_rank($rank) {
  if (strpos($rank, '-') !== FALSE) {
    list($high, $low) = explode('-', $rank);
    return t('@high - @low', array('@high' => tournament_ordinal_suffix($high), '@low' => tournament_ordinal_suffix($low)));
  }
  else {
    return t('@rank', array('@rank' => tournament_ordinal_suffix($rank)));
  }
}

/**
 * Returns an array of the winning participants for a given knockout tournament.
 *
 * @param $node
 *   A tournament node object.
 */
function knockout_tournament_participant_ranks($node) {
  $result = db_select('tournament_participants', 'tp')
    ->fields('tp', array('id', 'rank'))
    ->condition('nid', $node->nid)
    ->condition('rank', array('1', '2', '3'))
    ->orderBy('rank')
    ->execute()
    ->fetchAllAssoc('id', PDO::FETCH_ASSOC);

  return $result;
}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function knockout_form_match_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['node'];
  if (!empty($node->tid)) {
    $tournament = node_load($node->tid);
    if ($tournament->type == 'knockout') {
      // Ensure both weights are available for knockout tournaments
      if (count($node->participants) == 1) {
        $participant = reset($node->participants);
        $form['participants_wrapper']['participants'][$participant['id']]['weight']['#options'] = array(
          0 => 0,
          1 => 1,
        );
      }
    }
  }
}