<?php

/**
 * Implements hook_schema().
 */
function tournament_schema() {
  $schema['tournament'] = array(
    'description' => 'Stores information about tournament node types.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: Unique node ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_type' => array(
        'description' => 'Particiapnt entity type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'size' => array(
        'description' => 'Maximum number of participants that can sign up.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'start' => array(
        'description' => 'The Unix timestamp of when the tournament should start.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'signup_access' => array(
        'description' => 'Determines if signing up to this tournament is allowed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'signup_role' => array(
        'description' => 'Role required to sign up to this tournament. (Unique Role ID)',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'signup_pass' => array(
        'description' => 'Password required to sign up to this tournament. (hashed)',
        'type' => 'varchar',
        'length' => 128,
      ),
      'signup_deadline' => array(
        'description' => 'The deadline for participant signups.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'score_access' => array(
        'description' => 'Determines access for match score entry.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'list_participants' => array(
        'description' => 'Determine whether participants should be displayed or not.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'new_match_dates' => array(
        'description' => 'Determine whether participants may request new match dates.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'penalty_points' => array(
        'description' => 'Determines if penalty points will be used in this tournament.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tournament_status' => array(
        'description' => 'The current status of the tournament (e.g. started, finished etc).',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'start' => array('start'),
      'tournament_status' => array('tournament_status'),
    ),
  );

  $schema['tournament_participants'] = array(
    'description' => 'Stores details about participants in tournaments.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: Unique node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'id' => array(
        'description' => 'Unique participant entity ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Whether the participant is waiting(2), active(1) or removed(0).',
      ),
      'registered' => array(
        'description' => 'Unix timestamp of when the participant registered',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The user that registered the entity to the tournament.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rank' => array(
        'description' => 'The final participants rank. Allows for custom strings. (e.g. nested ranks)',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nid', 'id'),
    'indexes' => array(
      'status' => array('status'),
    ),
  );

  $schema['tournament_admins'] = array(
    'description' => 'Stores details about admins in tournaments.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: Unique node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'Unique admin user ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'Unix timestamp of when the admin was created',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'uid'),
  );

  return $schema;
}

/**
 * Implements hook_enable().
 */
function tournament_enable() {
  // Ensure the tournament node type is available.
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['tournament']);
}

/**
 * Implements hook_uninstall().
 */
function tournament_uninstall() {
  variable_del('tournament_title_lock');
  variable_del('tournament_user_picture');
}

/**
 * Add {tournament}.new_match_dates field
 */
function tournament_update_7001() {

  db_add_field('tournament', 'new_match_dates', array(
    'description' => 'Determine whether participants may request new match dates.',
    'type' => 'int',
    'unsigned' => TRUE,
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 1,
    )
  );
}