<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */

// Make sure alter ego is loaded
drupal_load('module', 'entity');
drupal_load('module', 'alter_ego');

/**
 * Implements hook_install().
 */
function wowguild_install() {
  $t = get_t();

  drupal_load('module', 'alter_ego');

  /*
  // Create Feed Item Types
  if (!wowtoon_feed_item_get_types('toon_feed')) {
    $feeditem = new WoWToonFeedItemType();
    $feeditem->label = "WoW Toon Feed Item";
    $feeditem->type = "toon_feed";
    $feeditem->module = "wowguild";
    wowtoon_feed_item_type_save($feeditem);
  }
  if (!wowtoon_feed_item_get_types('guild_feed')) {
    $feeditem = new WoWToonFeedItemType();
    $feeditem->label = "WoW Guild Feed Item";
    $feeditem->type = "guild_feed";
    $feeditem->module = "wowguild";
    wowtoon_feed_item_type_save($feeditem);
  }
  */

  // Create WOWToon type
  if (!avatar_get_types('wowtoon')) {
    $wowtype = new AvatarType();
    $wowtype->label = "World of Warcraft Toon";
    $wowtype->type = "wowtoon";
    $wowtype->module = "wowguild";
    avatar_type_save($wowtype);
  }
  // Create automatic fields
  $fields = wowguild_install_fields();
  foreach ($fields as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }

  // attach fields to WOWToon type
  $instances = wowguild_install_instances();
  foreach ($instances as $instance) {
    if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }

  // Duplicate 'field_wowtoon_realm' for wowguild entity type as well.
  $instance = $instances['field_wowtoon_realm'];
  $instance['entity_type'] = 'wowguild';
  $instance['bundle'] = 'wowguild';
  if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
    field_create_instance($instance);
  }


  // Add body field to guild_applications
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['guild_application'], $t('Other Information'));

  // Set defaults to published (status), but not promoted.
  variable_set('node_options_guild_application', array('status'));

  // Set default pathauto settings
  variable_set('pathauto_avatar_wowtoon_pattern', 'toon/[avatar:field-wowtoon-realm]/[avatar:name]');


}

function wowguild_uninstall() {

  $query = db_select('avatar', 't');
  $query->fields('t', array('aid'));
  $query->condition('type', 'wowtoon');
  $aids = $query->execute()->fetchCol();
  avatar_delete_multiple($aids);

  $query = db_select('wowguild_entity', 'g');
  $query->fields('g', array('gid'));
  $gids = $query->execute()->fetchCol();
  wowguild_delete_multiple($gids);

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('type', 'guild_application');
  $nids = $query->execute()->fetchCol();
  node_delete_multiple($nids);

  $instances = field_info_instances('avatar', 'wowtoon');
  foreach ($instances as $instance) {
    field_delete_instance($instance, TRUE);
  }

  $instances = field_info_instances('avatar', 'wowguild');
  foreach ($instances as $instance) {
    field_delete_instance($instance, TRUE);
  }
  $instances = field_info_instances('node', 'guild_applcation');
  foreach ($instances as $instance) {
    field_delete_instance($instance, TRUE);
  }

  $fields = wowguild_install_fields();
  foreach ($fields as $key => $value) {
    field_delete_field($key);
  }
}

/**
* EXPORT:
* $instance = field_info_instances('avatar', 'wowtoon');
* $a = array();
* foreach ($instance as $key => $value) {
*   $a[$key] = field_info_field($key);
* }
* var_export($a, true);
*
* @return array()
*/
function wowguild_install_fields() {
  $return = array (
  'field_wowtoon_realm' =>
  array (
    'translatable' => '0',
    'entity_types' =>
    array (
    ),
    'settings' =>
    array (
      'allowed_values' =>
      array (
      ),
      'allowed_values_function' => '',
    ),
    'storage' =>
    array (
      'type' => 'field_sql_storage',
      'settings' =>
      array (
      ),
      'module' => 'field_sql_storage',
      'active' => '1',
      'details' =>
      array (
        'sql' =>
        array (
          'FIELD_LOAD_CURRENT' =>
          array (
            'field_data_field_wowtoon_realm' =>
            array (
              'value' => 'field_wowtoon_realm_value',
            ),
          ),
          'FIELD_LOAD_REVISION' =>
          array (
            'field_revision_field_wowtoon_realm' =>
            array (
              'value' => 'field_wowtoon_realm_value',
            ),
          ),
        ),
      ),
    ),
    'foreign keys' =>
    array (
    ),
    'indexes' =>
    array (
      'value' =>
      array (
        0 => 'value',
      ),
    ),
    'id' => '6',
    'field_name' => 'field_wowtoon_realm',
    'type' => 'list_text',
    'module' => 'list',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
    'deleted' => '0',
    'columns' =>
    array (
      'value' =>
      array (
        'type' => 'varchar',
        'length' => 255,
        'not null' => false,
      ),
    ),
    'bundles' =>
    array (
      'avatar' =>
      array (
        0 => 'wowtoon',
      ),
  		'wowguild' =>
      array (
        0 => 'wowguild',
      ),
    ),
  ),

  // Guild Application Fields
  'application_status' => array(
  	'field_name' => 'application_status',
    'type' => 'list_text',
    'settings' => array(
      'allowed_values' => drupal_map_assoc(array('new', 'under review', 'accepted', 'rejected'))
    ),
    'locked' => TRUE,
  ),
  'application_email' => array('field_name' => 'application_email', 'type' => 'text'),
  'application_references' => array('field_name' => 'application_references', 'type' => 'text'),
  'application_want_to_raid' => array('field_name' => 'application_want_to_raid', 'type' => 'list_boolean'),
  'application_raid_experience' => array('field_name' => 'application_raid_experience', 'type' => 'text'),
  'application_raid_availablity' => array('field_name' => 'application_raid_availablity', 'type' => 'text'),

);
  $const_realms_list = array(
      "Aegwynn-US", "Aerie Peak-US", "Agamaggan-US", "Aggramar-US", "Akama-US", "Alexstrasza-US", "Alleria-US", "Altar of Storms-US", "Alterac Mountains-US", "Aman'thul-US", "Andorhal-US", "Anetheron-US", "Antonidas-US", "Anub'arak-US", "Anvilmar-US", "Arathor-US", "Archimonde-US", "Area 52-US", "Argent Dawn-US", "Arthas-US", "Arygos-US", "Auchindoun-US", "Azgalor-US", "Azjol-Nerub-US", "Azshara-US", "Azuremyst-US", "Baelgun-US", "Balnazzar-US", "Barthilas-US", "Black Dragonflight-US", "Blackhand-US", "Blackrock-US", "Blackwater Raiders-US", "Blackwing Lair-US", "Blade's Edge-US", "Bladefist-US", "Bleeding Hollow-US", "Blood Furnace-US", "Bloodhoof-US", "Bloodscalp-US", "Bonechewer-US", "Borean Tundra-US", "Boulderfist-US", "Bronzebeard-US", "Burning Blade-US", "Burning Legion-US", "Caelestrasz-US", "Cairne-US", "Cenarion Circle-US", "Cenarius-US", "Cho'gall-US", "Chromaggus-US", "Coilfang-US", "Crushridge-US", "Daggerspine-US", "Dalaran-US", "Dalvengyr-US", "Dark Iron-US", "Darkspear-US", "Darrowmere-US", "Dath'Remar-US", "Dawnbringer-US", "Deathwing-US", "Demon Soul-US", "Dentarg-US", "Destromath-US", "Dethecus-US", "Detheroc-US", "Doomhammer-US", "Draenor-US", "Dragonblight-US", "Dragonmaw-US", "Drak'Tharon-US", "Drak'thul-US", "Draka-US", "Drakkari-US", "Dreadmaul-US", "Drenden-US", "Dunemaul-US", "Durotan-US", "Duskwood-US", "Earthen Ring-US", "Echo Isles-US", "Eitrigg-US", "Eldre'Thalas-US", "Elune-US", "Emerald Dream-US", "Eonar-US", "Eredar-US", "Executus-US", "Exodar-US", "Farstriders-US", "Feathermoon-US", "Fenris-US", "Firetree-US", "Fizzcrank-US", "Frostmane-US", "Frostmourne-US", "Frostwolf-US", "Galakrond-US", "Garithos-US", "Garona-US", "Garrosh-US", "Ghostlands-US", "Gilneas-US", "Gnomeregan-US", "Gorefiend-US", "Gorgonnash-US", "Greymane-US", "Grizzly Hills-US", "Gul'dan-US", "Gundrak-US", "Gurubashi-US", "Hakkar-US", "Haomarush-US", "Hellscream-US", "Hydraxis-US", "Hyjal-US", "Icecrown-US", "Illidan-US", "Jaedenar-US", "Jubei'Thos-US", "Kael'Thas-US", "Kalecgos-US", "Kargath-US", "Kel'Thuzad-US", "Khadgar-US", "Khaz Modan-US", "Khaz'goroth-US", "Kil'Jaeden-US", "Kilrogg-US", "Kirin Tor-US", "Korgath-US", "Korialstrasz-US", "Kul Tiras-US", "Laughing Skull-US", "Lethon-US", "Lightbringer-US", "Lightning's Blade-US", "Lightninghoof-US", "Llane-US", "Lothar-US", "Madoran-US", "Maelstrom-US", "Magtheridon-US", "Maiev-US", "Mal'Ganis-US", "Malfurion-US", "Malorne-US", "Malygos-US", "Mannoroth-US", "Medivh-US", "Misha-US", "Mok'Nathal-US", "Moon Guard-US", "Moonrunner-US", "Mug'thol-US", "Muradin-US", "Nagrand-US", "Nathrezim-US", "Nazgrel-US", "Nazjatar-US", "Ner'zhul-US", "Nesingwary-US", "Nordrassil-US", "Norgannon-US", "Onyxia-US", "Perenolde-US", "Proudmoore-US", "Quel'dorei-US", "Quel'Thalas-US", "Ragnaros-US", "Ravencrest-US", "Ravenholdt-US", "Rexxar-US", "Rivendare-US", "Runetotem-US", "Sargeras-US", "Saurfang-US", "Scarlet Crusade-US", "Scilla-US", "Sen'jin-US", "Sentinels-US", "Shadow Council-US", "Shadowmoon-US", "Shadowsong-US", "Shandris-US", "Shattered Halls-US", "Shattered Hand-US", "Shu'halo-US", "Silver Hand-US", "Silvermoon-US", "Sisters of Elune-US", "Skullcrusher-US", "Skywall-US", "Smolderthorn-US", "Spinebreaker-US", "Spirestone-US", "Staghelm-US", "Steamwheedle Cartel-US", "Stonemaul-US", "Stormrage-US", "Stormreaver-US", "Stormscale-US", "Suramar-US", "Tanaris-US", "Terenas-US", "Terokkar-US", "Thaurissan-US", "The Forgotten Coast-US", "The Scryers-US", "The Underbog-US", "The Venture Co-US", "Thorium Brotherhood-US", "Thrall-US", "Thunderhorn-US", "Thunderlord-US", "Tichondrius-US", "Tortheldrin-US", "Trollbane-US", "Turalyon-US", "Twisting Nether-US", "Uldaman-US", "Uldum-US", "Undermine-US", "Ursin-US", "Uther-US", "Vashj-US", "Vek'nilash-US", "Velen-US", "Warsong-US", "Whisperwind-US", "Wildhammer-US", "Windrunner-US", "Winterhoof-US", "Wyrmrest Accord-US", "Ysera-US", "Ysondre-US", "Zangarmarsh-US", "Zul'jin-US", "Zuluhed-US",
      "Aegwynn-EU", "Aerie Peak-EU", "Agamaggan-EU", "Aggramar-EU", "Ahn'Qiraj-EU", "Al'Akir-EU", "Alexstrasza-EU", "Alleria-EU", "Alonsus-EU", "Aman'Thul-EU", "Ambossar-EU", "Anachronos-EU", "Anetheron-EU", "Antonidas-EU", "Anub'arak-EU", "Arak-arahm-EU", "Arathi-EU", "Arathor-EU", "Archimonde-EU", "Area 52-EU", "Argent Dawn-EU", "Arthas-EU", "Arygos-EU", "Aszune-EU", "Auchindoun-EU", "Azjol-Nerub-EU", "Azshara-EU", "Azuremyst-EU", "Baelgun-EU", "Balnazzar-EU", "Blackhand-EU", "Blackmoore-EU", "Blackrock-EU", "Blade's Edge-EU", "Bladefist-EU", "Bloodfeather-EU", "Bloodhoof-EU", "Bloodscalp-EU", "Blutkessel-EU", "Boulderfist-EU", "Bronze Dragonflight-EU", "Bronzebeard-EU", "Burning Blade-EU", "Burning Legion-EU", "Burning Steppes-EU", "C'thun-EU", "Chamber of Aspects-EU", "Chants éternels-EU", "Cho'gall-EU", "Chromaggus-EU", "Colinas Pardas-EU", "Confrérie du Thorium-EU", "Conseil des Ombres-EU", "Crushridge-EU", "Culte de la Rive Noire-EU", "Daggerspine-EU", "Dalaran-EU", "Dalvengyr-EU", "Darkmoon Faire-EU", "Darksorrow-EU", "Darkspear-EU", "Das Konsortium-EU", "Das Syndikat-EU", "Deathwing-EU", "Defias Brotherhood-EU", "Dentarg-EU", "Der abyssische Rat-EU", "Der Mithrilorden-EU", "Der Rat von Dalaran-EU", "Destromath-EU", "Dethecus-EU", "Die Aldor-EU", "Die Arguswacht-EU", "Die ewige Wacht-EU", "Die Nachtwache-EU", "Die Silberne Hand-EU", "Die Todeskrallen-EU", "Doomhammer-EU", "Draenor-EU", "Dragonblight-EU", "Dragonmaw-EU", "Drak'thul-EU", "Drek'Thar-EU", "Dun Modr-EU", "Dun Morogh-EU", "Dunemaul-EU", "Durotan-EU", "Earthen Ring-EU", "Echsenkessel-EU", "Eitrigg-EU", "Eldre'thalas-EU", "Elune-EU", "Emerald Dream-EU", "Emeriss-EU", "Eonar-EU", "Eredar-EU", "Executus-EU", "Exodar-EU", "Festung der Stürme-EU", "Forscherliga-EU", "Frostmane-EU", "Frostmourne-EU", "Frostwhisper-EU", "Frostwolf-EU", "Garona-EU", "Garrosh-EU", "Genjuros-EU", "Ghostlands-EU", "Gilneas-EU", "Gorgonnash-EU", "Grim Batol-EU", "Gul'dan-EU", "Hakkar-EU", "Haomarush-EU", "Hellfire-EU", "Hellscream-EU", "Hyjal-EU", "Illidan-EU", "Jaedenar-EU", "Kael'Thas-EU", "Karazhan-EU", "Kargath-EU", "Kazzak-EU", "Kel'Thuzad-EU", "Khadgar-EU", "Khaz Modan-EU", "Khaz'goroth-EU", "Kil'Jaeden-EU", "Kilrogg-EU", "Kirin Tor-EU", "Kor'gall-EU", "Krag'jin-EU", "Krasus-EU", "Kul Tiras-EU", "Kult der Verdammten-EU", "La Croisade écarlate-EU", "Laughing Skull-EU", "Les Clairvoyants-EU", "Les Sentinelles-EU", "Lightbringer-EU", "Lightning's Blade-EU", "Lordaeron-EU", "Los Errantes-EU", "Lothar-EU", "Madmortem-EU", "Magtheridon-EU", "Mal'Ganis-EU", "Malfurion-EU", "Malorne-EU", "Malygos-EU", "Mannoroth-EU", "Marécage de Zangar-EU", "Mazrigos-EU", "Medivh-EU", "Minahonda-EU", "Molten Core-EU", "Moonglade-EU", "Mug'thol-EU", "Nagrand-EU", "Nathrezim-EU", "Naxxramas-EU", "Nazjatar-EU", "Nefarian-EU", "Neptulon-EU", "Ner'zhul-EU", "Nera'thor-EU", "Nethersturm-EU", "Nordrassil-EU", "Norgannon-EU", "Nozdormu-EU", "Onyxia-EU", "Outland-EU", "Perenolde-EU", "Proudmoore-EU", "Quel'Thalas-EU", "Ragnaros-EU", "Rajaxx-EU", "Rashgarroth-EU", "Ravencrest-EU", "Ravenholdt-EU", "Rexxar-EU", "Runetotem-EU", "Sanguino-EU", "Sargeras-EU", "Saurfang-EU", "Scarshield Legion-EU", "Sen'jin-EU", "Shadowmoon-EU", "Shadowsong-EU", "Shattered Halls-EU", "Shattered Hand-EU", "Shattrath-EU", "Shen'dralar-EU", "Silvermoon-EU", "Sinstralis-EU", "Skullcrusher-EU", "Spinebreaker-EU", "Sporeggar-EU", "Steamwheedle Cartel-EU", "Stonemaul-EU", "Stormrage-EU", "Stormreaver-EU", "Stormscale-EU", "Sunstrider-EU", "Suramar-EU", "Sylvanas-EU", "Taerar-EU", "Talnivarr-EU", "Tarren Mill-EU", "Teldrassil-EU", "Temple noir-EU", "Terenas-EU", "Terokkar-EU", "Terrordar-EU", "The Maelstrom-EU", "The Sha'tar-EU", "The Venture Co-EU", "Theradras-EU", "Thrall-EU", "Throk'Feroth-EU", "Thunderhorn-EU", "Tichondrius-EU", "Tirion-EU", "Todeswache-EU", "Trollbane-EU", "Turalyon-EU", "Twilight's Hammer-EU", "Twisting Nether-EU", "Tyrande-EU", "Uldaman-EU", "Ulduar-EU", "Uldum-EU", "Un'Goro-EU", "Varimathras-EU", "Vashj-EU", "Vek'lor-EU", "Vek'nilash-EU", "Vol'jin-EU", "Warsong-EU", "Wildhammer-EU", "Wrathbringer-EU", "Xavius-EU", "Ysera-EU", "Ysondre-EU", "Zenedar-EU", "Zirkel des Cenarius-EU", "Zul'jin-EU", "Zuluhed-EU",
      "Азурегос-EU", "Борейская тундра-EU", "Вечная Песня-EU", "Галакронд-EU", "Голдринн-EU", "Гордунни-EU", "Гром-EU", "Дракономор-EU","Король-лич-EU", "Пиратская бухта-EU", "Подземье-EU", "Разувий-EU","Ревущий фьорд-EU", "Свежеватель Душ-EU", "Седогрив-EU", "Страж Смерти-EU", "Термоштепсель-EU", "Ткач Смерти-EU", "Черный Шрам-EU", "Ясеневый лес-EU"
  );
  $return['field_wowtoon_realm']['settings']['allowed_values'] = drupal_map_assoc($const_realms_list);

  return $return;
}

/**
 * EXPORT: var_export(field_info_instances('avatar', 'wowtoon'));
 */
function wowguild_install_instances() {
  return array (
  'field_wowtoon_realm' =>
  array (
    'label' => 'Realm',
    'widget' =>
    array (
      'weight' => '1',
      'type' => 'options_select',
      'module' => 'options',
      'active' => 1,
      'settings' =>
      array (
      ),
    ),
    'settings' =>
    array (
      'user_register_form' => false,
    ),
    'display' =>
    array (
      'default' =>
      array (
        'label' => 'above',
        'type' => 'list_default',
        'settings' =>
        array (
        ),
        'module' => 'list',
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_wowtoon_realm',
    'entity_type' => 'avatar',
    'bundle' => 'wowtoon',
    'deleted' => '0',
  ),

  // Guild Application
  'application_status' => array(
    'field_name' => 'application_status',
    'label' => 'Application Status',
    'default_value' => array(0 => array('value' => 'new')),
    'entity_type' => 'node',
  	'bundle' => 'guild_application',
    'widget' => array(
      'type' => 'object_select',
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
      ),
    ),
  ),
  'application_email' => array(
  	'field_name' => 'application_email',
      'label' => 'Your EMail',
      'required' => TRUE,
  		'entity_type' => 'node',
  		'bundle' => 'guild_application',
      'widget' => array(
        'type' => 'text_textfield',
        'weight' => -1,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
        ),
      ),
    ),
    'application_references' => array(
  		'field_name' => 'application_references',
      'label' => 'How did you hear about us?',
      'required' => TRUE,
      'description' => 'You can also include current members who you know in the guild.',
      'settings' => array('text_processing' => 1),
  		'entity_type' => 'node',
  		'bundle' => 'guild_application',
      'widget' => array(
        'type' => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
        ),
      ),
    ),
    'application_want_to_raid' => array(
  		'field_name' => 'application_want_to_raid',
      'label' => 'Are you interested in Raiding with us?',
      'description' => 'A spot in our raid team is not guaranteed even if you are accepted into the guild.',
  		'entity_type' => 'node',
  		'bundle' => 'guild_application',
      'widget' => array(
        'type' => 'options_onoff',
        'settings' => array('display_label' => 1)
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'list_default'
        ),
      ),
    ),
    'application_raid_experience' => array(
  		'field_name' => 'application_raid_experience',
      'label' => 'What is your past raid experience?',
      'description' => '',
      'settings' => array('text_processing' => 1),
  		'entity_type' => 'node',
  		'bundle' => 'guild_application',
      'widget' => array(
        'weight' => 5,
        'type' => 'text_textarea',
        'settings' => array('rows' => 5)
      ),
      'display' => array(
        'default' => array(
          'label' => 'above', // 'type' => 'hidden',
        ),
      ),
    ),
    'application_raid_availablity' => array(
  		'field_name' => 'application_raid_availablity',
      'label' => 'Raid Availablity',
      'description' => 'When are you available to raid?',
      'settings' => array('text_processing' => 1),
  		'entity_type' => 'node',
      'bundle' => 'guild_application',
      'widget' => array(
        'weight' => 6,
        'type' => 'text_textarea',
        'settings' => array('rows' => 7)
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
        ),
      ),
      'default_value' => array(0 => array('value' => t("Monday:\nTuesday:\nWednesday:\nThursday:\nFriday:\nSaturday:\nSunday:")))
    ),
  );
}

/**
 * Implements hook_schema().
 */
function wowguild_schema() {
  $schema = array();
  $schema['wowtoon_cached_data'] = array(
    'description' => 'Cached character data from armory.  Can be shared across drupal websites.',
    'fields' => array(
      'toon_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'url' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'update_status' => array('type' => 'int', 'default' => 0),

      'loaded_name' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'zone' => array('type' => 'varchar', 'length' => 5, 'default' => ''),
      'realm' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

      'fullname' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'battlegroup' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

      'level' => array('type' => 'int'),
      'avg_ilevel' => array('type' => 'int'),
      'avg_ilevel_best' => array('type' => 'int'),
      'achievement_points' => array('type' => 'int'),

      'guild_name' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'guild_lifetime' => array('type' => 'int'),
      'guild_weekly' => array('type' => 'int'),
      'guild_rank' => array('type' => 'int'),

      'raceId' => array('type' => 'int'),
      'race' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

      'genderId' => array('type' => 'int'),
      'gender' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

      'classId' => array('type' => 'int'),
      'class' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

      'factionId' => array('type' => 'int'),
      'faction' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

      'armory_render' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

      'lifetimehonorablekills' => array('type' => 'int'),

      'professions' => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big','serialize' => TRUE),
      'audit' => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big','serialize' => TRUE),
      'progression' => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big','serialize' => TRUE),

      'added_to_database' => array(
        'type' => 'int',
        'default' => 0,
        'description' => t('Timestamp when the this toon first scanned.'),
      ),
      'updated_on_armory' => array('type' => 'int', 'description' => t('Timestamp (to the day) of the "Last Updated" string from armory.')),
      'updated' => array(
        'type' => 'int',
        'default' => 0,
        'description' => t('Timestamp of last successful update.  Used when updating for if-modified-since header.'),
      ),
      'update_attempted' => array(
        'type' => 'int',
        'default' => 0,
        'description' => t('Timestamp of last update call.  Used if an invalid toon is returned so we don\'t continue attempting to update.'),
      ),
      ),
    'primary key' => array('toon_key'),
  );

  $schema['wowtoon_cached_sets'] = array(
    'description' => t('World of Warcraft Talent and Items Sets'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'toon_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'set_id' => array('type' => 'int'),
      'active' => array('type' => 'int'),
      'spec' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'icon' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'background' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),

      'stats' => array('type' => 'blob', 'serialize' => TRUE),
      'allstats' => array('type' => 'blob', 'serialize' => TRUE),
      'items' => array('type' => 'blob', 'serialize' => TRUE),
    ),
    'primary key' => array('id'),
    'indexes' => array('toon_key' => array('toon_key')),
  );


  $schema['wowguild_entity'] = array(
    'description' => t('World of Warcraft Guilds'),
    'fields' => array(
      'gid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique wowguild ID.',
      ),
      'guild_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'name' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
    ),
    'primary key' => array('gid'),
    'indexes' => array('guild_key' => array('guild_key')),
  );
  $schema['wowguild_cached_data'] = array(
      'description' => t('Cached guild data from armory.  Can be shared across drupal websites.'),
      'fields' => array(
        'guild_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
        'url' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),

        'faction' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
        'factionId' => array('type' => 'int'),

        'loaded_name' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
        'zone' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
        'realm' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
        'battlegroup' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
        'level' => array('type' => 'int'),
        'update_status' => array('type' => 'int', 'default' => 0),

        'achievementPoints' => array('type' => 'int'),

        'raid_progression' => array('type' => 'blob', 'serialize' => TRUE),
        'tabard' => array('type' => 'blob', 'serialize' => TRUE),
        'members' => array('type' => 'blob', 'size' => 'big', 'serialize' => TRUE),

        'added_to_database' => array(
          'type' => 'int',
          'default' => 0,
          'description' => t('Timestamp when the this toon first scanned.'),
  ),
        'updated' => array(
          'type' => 'int',
          'default' => 0,
          'description' => t('Timestamp when the this toon was last updated.'),
  ),
        'update_attempted' => array(
          'type' => 'int',
          'default' => 0,
          'description' => t('Timestamp when update was last attempted.'),
  ),
  ),
      'primary key' => array('guild_key'),

  );

  /*** Achevements ***/
  $schema['wowtoon_feed_item'] = array(
    'description' => t('List of recent achievements attached to toons'),
    'fields' => array(
      'achid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'keyid' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'type' => array(
        'description' => 'The {wowtoon_feed_item_type}.type of this avatar.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'feed_item_type' => array('type' => 'int', 'default' => 0, 'description' => t('< 100 - Toon Achievement, >=100 - Guild Achievement.')),
      'dateCompleted' => array('type' => 'int'),
      'id' => array('type' => 'int', 'default' => 0),

      'points' => array('type' => 'int', 'default' => 0),
      'description' => array('type' => 'text'),
      'icon' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),

    ),
    'primary key' => array('achid'),
    'indexes' => array('keyid' => array('keyid')),
  );
  $schema['wowtoon_feed_item_type'] = array(
      'description' => 'Stores information about defined feed item types.',
      'fields' => array(
        'id' => array(
          'type' => 'serial',
          'not null' => TRUE,
          'description' => 'Primary Key: Unique feed item type identifier.',
  ),
        'type' => array(
          'description' => 'The machine-readable name of this feed item type.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
  ),
        'label' => array(
          'description' => 'The human-readable name of this feed item type.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
  ),
        'weight' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
          'description' => 'The weight of this feed item type in relation to others.',
  ),
        'data' => array(
          'type' => 'text',
          'not null' => FALSE,
          'size' => 'big',
          'serialize' => TRUE,
          'description' => 'A serialized array of additional data related to this feed item type.',
  ),
  ) + entity_exportable_schema_fields(),
      'primary key' => array('id'),
      'unique keys' => array(
        'type' => array('type'),
  ),
  );

  $schema['wowtoon_owners'] = array(
      'description' => t('Save data on who owns toons.'),
      'fields' => array(
        'aid' => array('type' => 'int'),
        'toon_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
        'uid' => array('type' => 'int'),
        'homesite' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
        'settings' => array('type' => 'text'),
        'private_key' => array('type' => 'varchar', 'length' => 32),
        'public_key' => array('type' => 'varchar', 'length' => 32),
  ),
      'primary key' => array('aid'),
      'indexes' => array('uid' => array('uid'), 'toon_key' => array('toon_key')),
  );

  $schema['wowtoon_armory_log'] = array(
      'description' => t('Log of armory requests.'),
      'fields' => array(
        'id' => array(
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
  ),
        'timestamp' => array('type' => 'int'),
        'url' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
        'success' => array('type' => 'int', 'default' => 0),
        'text' => array('type' => 'text'),
        'variables' => array('type' => 'text', 'serialize' => TRUE),
  ),
      'primary key' => array('id'),
      'indexes' => array(),
  );


  return $schema;
}



/**
 * Implements hook_requirements.
 */
function wowguild_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  switch ($phase) {
    case 'install':
      break;
    case 'update':
      if (!module_exists('alter_ego')) {
        $requirements['wowguild'] = array(
          'title' => $t('WoWGuild'),
          'description' => $t('The module !alter_ego is required.  Install and/or enable it to continue.', array('!alter_ego' => l('alter_ego', 'http://drupal.org/project/alter_ego'))),
          'severity' => REQUIREMENT_ERROR
        );
      }
      break;
  }
  return $requirements;
}

/**
 * Implements hook_update_dependencies().
 */
function wowguild_update_dependencies() {
  // wowguild_update_7400() requires the entity and alter ego module.
  $dependencies['wowguild'][7400] = array(
    'entity' => 7000,
    'alter_ego' => 7000,
  );

  return $dependencies;
}

/**
 * Add EMail field to guild applications for anonymous users.
 */
function wowguild_update_7000() {
  $fields = _wowguild_get_default_fields();
  $value = $fields['application_email'];
  $value['field_name'] = 'application_email';
  $value['cardinality'] = 1;
  field_create_field($value);

  $instances = _wowguild_application_instance();
  $value = $instances['application_email'];
  $value['entity_type'] = 'node';
  $value['field_name'] = 'application_email';
  $value['bundle'] = 'guild_application';
  field_create_instance($value);
}

/**
 * Database update from 7.x-2.x and 7.x-3.x to 7.x-4.x branch.
 */
function wowguild_update_7400(&$sandbox) {

  // Make sure API functions are available.
  drupal_load('module', 'alter_ego');
  // Classes aren't bootstrapped in update.php
  require_once('classes/WoWGuild.class.inc');
  require_once('classes/WoWGuildController.class.inc');
  require_once('classes/WoWToon.class.inc');

  // Inital Setup
  if (!isset($sandbox['progress'])) {

    $sandbox['progress'] = 0;
    $sandbox['do_entity_types'] = 1;
    $sandbox['tids'] = db_query('SELECT tid, toon_key FROM {wowtoon_entity}')->fetchAll();
    $sandbox['gids'] = db_query('SELECT gid, guild_key FROM {wowguild_entity}')->fetchAll();
    $sandbox['owners'] = db_query('SELECT * FROM {wowtoon_owners}')->fetchAll();
    $sandbox['max'] = count($sandbox['tids']) + count($sandbox['gids']);

    if (module_exists('wowtoon')) {
      module_disable(array('wowtoon'));
    }

    // Delete old wowguild_entity table so we can create new schema.
    if (db_table_exists('wowguild_entity')) {
      db_drop_table('wowguild_entity');
    }
    if (db_table_exists('wowtoon_owners')) {
      db_drop_table('wowtoon_owners');
    }

    // Add new schema
    $schema = array();
    $schema['wowtoon_cached_data'] = array(
        'description' => 'Cached character data from armory.  Can be shared across drupal websites.',
        'fields' => array(
          'toon_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'url' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'update_status' => array('type' => 'int', 'default' => 0),

          'loaded_name' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
          'zone' => array('type' => 'varchar', 'length' => 5, 'default' => ''),
          'realm' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

          'fullname' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
          'battlegroup' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

          'level' => array('type' => 'int'),
          'avg_ilevel' => array('type' => 'int'),
          'avg_ilevel_best' => array('type' => 'int'),
          'achievement_points' => array('type' => 'int'),

          'guild_name' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
          'guild_lifetime' => array('type' => 'int'),
          'guild_weekly' => array('type' => 'int'),
          'guild_rank' => array('type' => 'int'),

          'raceId' => array('type' => 'int'),
          'race' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

          'genderId' => array('type' => 'int'),
          'gender' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

          'classId' => array('type' => 'int'),
          'class' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

          'factionId' => array('type' => 'int'),
          'faction' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

          'armory_render' => array('type' => 'varchar', 'length' => 255, 'default' => ''),

          'lifetimehonorablekills' => array('type' => 'int'),

          'professions' => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big','serialize' => TRUE),
          'audit' => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big','serialize' => TRUE),
          'progression' => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big','serialize' => TRUE),

          'added_to_database' => array(
            'type' => 'int',
            'default' => 0,
            'description' => t('Timestamp when the this toon first scanned.'),
    ),
          'updated_on_armory' => array('type' => 'int', 'description' => t('Timestamp (to the day) of the "Last Updated" string from armory.')),
          'updated' => array(
            'type' => 'int',
            'default' => 0,
            'description' => t('Timestamp of last successful update.  Used when updating for if-modified-since header.'),
    ),
          'update_attempted' => array(
            'type' => 'int',
            'default' => 0,
            'description' => t('Timestamp of last update call.  Used if an invalid toon is returned so we don\'t continue attempting to update.'),
    ),
    ),
        'primary key' => array('toon_key'),
    );

    $schema['wowtoon_cached_sets'] = array(
        'description' => t('World of Warcraft Talent and Items Sets'),
        'fields' => array(
          'id' => array(
            'type' => 'serial',
            'unsigned' => TRUE,
            'not null' => TRUE,
    ),
          'toon_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'set_id' => array('type' => 'int'),
          'active' => array('type' => 'int'),
          'spec' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'icon' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'background' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'description' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),

          'stats' => array('type' => 'blob', 'serialize' => TRUE),
          'allstats' => array('type' => 'blob', 'serialize' => TRUE),
          'items' => array('type' => 'blob', 'serialize' => TRUE),
    ),
        'primary key' => array('id'),
        'indexes' => array('toon_key' => array('toon_key')),
    );


    $schema['wowguild_entity'] = array(
        'description' => t('World of Warcraft Guilds'),
        'fields' => array(
          'gid' => array(
            'type' => 'serial',
            'not null' => TRUE,
            'description' => 'Primary Key: Unique wowguild ID.',
    ),
          'guild_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'name' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
    ),
        'primary key' => array('gid'),
        'indexes' => array('guild_key' => array('guild_key')),
    );
    $schema['wowguild_cached_data'] = array(
          'description' => t('Cached guild data from armory.  Can be shared across drupal websites.'),
          'fields' => array(
            'guild_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
            'url' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),

            'faction' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
            'factionId' => array('type' => 'int'),

            'loaded_name' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
            'zone' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
            'realm' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
            'battlegroup' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
            'level' => array('type' => 'int'),
            'update_status' => array('type' => 'int', 'default' => 0),

            'achievementPoints' => array('type' => 'int'),

            'raid_progression' => array('type' => 'blob', 'serialize' => TRUE),
            'tabard' => array('type' => 'blob', 'serialize' => TRUE),
            'members' => array('type' => 'blob', 'size' => 'big', 'serialize' => TRUE),

            'added_to_database' => array(
              'type' => 'int',
              'default' => 0,
              'description' => t('Timestamp when the this toon first scanned.'),
    ),
            'updated' => array(
              'type' => 'int',
              'default' => 0,
              'description' => t('Timestamp when the this toon was last updated.'),
    ),
            'update_attempted' => array(
              'type' => 'int',
              'default' => 0,
              'description' => t('Timestamp when update was last attempted.'),
    ),
    ),
          'primary key' => array('guild_key'),

    );

    /*** Achevements ***/
    $schema['wowtoon_feed_item'] = array(
        'description' => t('List of recent achievements attached to toons'),
        'fields' => array(
          'achid' => array(
            'type' => 'serial',
            'unsigned' => TRUE,
            'not null' => TRUE,
    ),
          'keyid' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
          'type' => array(
            'description' => 'The {wowtoon_feed_item_type}.type of this avatar.',
            'type' => 'varchar',
            'length' => 255,
            'not null' => TRUE,
            'default' => '',
    ),
          'feed_item_type' => array('type' => 'int', 'default' => 0, 'description' => t('< 100 - Toon Achievement, >=100 - Guild Achievement.')),
          'dateCompleted' => array('type' => 'int'),
          'id' => array('type' => 'int', 'default' => 0),

          'points' => array('type' => 'int', 'default' => 0),
          'description' => array('type' => 'text'),
          'icon' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),

    ),
        'primary key' => array('achid'),
        'indexes' => array('keyid' => array('keyid')),
    );
    $schema['wowtoon_feed_item_type'] = array(
          'description' => 'Stores information about defined feed item types.',
          'fields' => array(
            'id' => array(
              'type' => 'serial',
              'not null' => TRUE,
              'description' => 'Primary Key: Unique feed item type identifier.',
    ),
            'type' => array(
              'description' => 'The machine-readable name of this feed item type.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
    ),
            'label' => array(
              'description' => 'The human-readable name of this feed item type.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
              'default' => '',
    ),
            'weight' => array(
              'type' => 'int',
              'not null' => TRUE,
              'default' => 0,
              'size' => 'tiny',
              'description' => 'The weight of this feed item type in relation to others.',
    ),
            'data' => array(
              'type' => 'text',
              'not null' => FALSE,
              'size' => 'big',
              'serialize' => TRUE,
              'description' => 'A serialized array of additional data related to this feed item type.',
    ),
    ) + entity_exportable_schema_fields(),
          'primary key' => array('id'),
          'unique keys' => array(
            'type' => array('type'),
    ),
    );
    $schema['wowtoon_owners'] = array(
          'description' => t('Save data on who owns toons.'),
          'fields' => array(
            'aid' => array('type' => 'int'),
            'toon_key' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
            'uid' => array('type' => 'int'),
            'homesite' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
            'settings' => array('type' => 'text'),
            'private_key' => array('type' => 'varchar', 'length' => 32),
            'public_key' => array('type' => 'varchar', 'length' => 32),
          ),
          'primary key' => array('aid'),
          'indexes' => array('uid' => array('uid'), 'toon_key' => array('toon_key')),
        );

    $schema['wowtoon_armory_log'] = array(
      'description' => t('Log of armory requests.'),
      'fields' => array(
        'id' => array(
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'timestamp' => array('type' => 'int'),
        'url' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
        'success' => array('type' => 'int', 'default' => 0),
        'text' => array('type' => 'text'),
        'variables' => array('type' => 'text', 'serialize' => TRUE),
      ),
      'primary key' => array('id'),
      'indexes' => array(),
    );
    // Add new tables
    foreach ($schema as $key => $table) {
      db_create_table($key, $table);
    }



    // BEGIN: wowguild_install()
    if (!avatar_get_types('wowtoon')) {
      $wowtype = new AvatarType();
      $wowtype->label = "World of Warcraft Toon";
      $wowtype->type = "wowtoon";
      $wowtype->module = "wowguild";
      avatar_type_save($wowtype);
    }
    // Create automatic fields
    $fields = wowguild_install_fields();
    foreach ($fields as $field) {
      if (!field_info_field($field['field_name'])) {
        field_create_field($field);
      }
    }

    // attach fields to WOWToon type
    $instances = wowguild_install_instances();
    foreach ($instances as $instance) {
      if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
        field_create_instance($instance);
      }
    }

    // Duplicate 'field_wowtoon_realm' for wowguild entity type as well.
    $instance = $instances['field_wowtoon_realm'];
    $instance['entity_type'] = 'wowguild';
    $instance['bundle'] = 'wowguild';
    if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
    // END: wowguild_install()

  }
  // 7.x-2.x and 7.x-3.x - {wowtoon_entity} to {wowtoon_cached_data} and {avatar} tables
  if (count($sandbox['tids'])) {
    $source_tid = array_pop($sandbox['tids']);

    list($realm, $name) = explode('_', utf8_decode($source_tid->toon_key));

    $avatar = avatar_create(array('type' => 'wowtoon'));
    $avatar->name = $name;
    $avatar->toon_key = $source_tid->toon_key;
    $avatar->field_wowtoon_realm[LANGUAGE_NONE][0]['value'] = wowguild_is_valid_realm($realm);

    // Loop over old owners
    foreach ($sandbox['owners'] as $owner) {
      if ($owner->toon_key == $source_tid->toon_key) {
        $avatar->uid = $owner->uid;
        if ($owner->weight == 0) {
          $avatar->is_main = 1;
        }
      }
    }

    avatar_save($avatar);
    $sandbox['progress']++;

  }
  elseif (count($sandbox['gids'])) {
    $source_gid = array_pop($sandbox['gids']);

    // Make sure API functions are available.
    drupal_load('module', 'alter_ego');
    drupal_load('module', 'wowguild');

    list($realm, $name) = explode('_', utf8_decode($source_gid->guild_key));
    $guild = wowguild_create();
    $guild->name = $name;
    $guild->guild_key = $source_gid->guild_key;
    $guild->field_wowtoon_realm[LANGUAGE_NONE][0]['value'] = wowguild_is_valid_realm($realm);
    wowguild_save($guild);

    // If this is the current
    if ($source_gid->gid == variable_get('wowguild_guild_gid', 0)) {
      variable_set('wowguild_guild_gid', $guild->gid * -1);  // Inverse the GID so we don't accidentally overwrite again.
    }
    $sandbox['progress']++;
  }


  // Finished?  Do final cleanup.
  if ($sandbox['progress'] == $sandbox['max']) {
    // Drop unneeded tables.
    if (db_table_exists('wowachievement_entity')) {
      db_drop_table('wowachievement_entity');
    }
    if (db_table_exists('wowachievement_entity')) {
      db_drop_table('wowachievement_entity');
    }
    if (db_table_exists('wowachievement_entity')) {
      db_drop_table('wowachievement_entity');
    }


    // Update Guild Menu Link
    $gid = variable_get('wowguild_guild_gid', 0);
    // GID will be negitive if we've set it.  Make it positive again.
    if ($gid < 0) {
      $gid = $gid * -1;
      variable_set('wowguild_guild_gid', $gid);
    }

    if ($gid) {
      $guild = wowguild_load($gid);
      // Save menu link id.
      $mlid = variable_get('wowguild_guild_mlid', 0);
      if ($mlid) {
        $ml = menu_link_load($mlid);
        $ml['link_path'] = 'guild/' . $guild->gid;
        $ml['router_path'] = 'guild/%';
        $ml['link_title'] = t('Guild Roster');
        $ml['menu_name'] = 'main-menu';
        $ml['module'] = 'wowguild';
      }
      else {
        $ml = array(
          'menu_name' => 'main-menu',
          'module' => 'wowguild',
          'link_path' => 'guild/' . $guild->gid,
          'router_path' => 'guild/%',
          'link_title' => t('Guild Roster'),
          'weight' => 5,
        );
      }
      menu_link_save($ml);
      variable_set('wowguild_guild_mlid', $ml['mlid']);
    }
  }

  // Check to see if we are finished.
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  return t('Database update complete.');
  // In case of an error, simply throw an exception with an error message.
  throw new DrupalUpdateException('Something went wrong; a clean install is recommended.  Drop all old database tables and reinstall.');
}


/**
 * Database update for Patch 5.0.4.
 */
function wowguild_update_7401() {
  db_add_field("wowtoon_cached_sets", "description", array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));
}
/**
 * Remove non-owned cached data for cross-realm guilds update.
 */
function wowguild_update_7402() {
  db_delete('wowtoon_cached_data')
    ->execute();
  db_delete('wowtoon_owners')
    ->condition('uid', 0)
    ->execute();
  db_delete('avatar')
    ->condition('uid', 0)
    ->condition('type', 'wowtoon')
    ->execute();
}
