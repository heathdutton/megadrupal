<?php

/**
 * @file
 * Module for the Avatar Entity - a starting point to create your own Entity
 * and associated administration interface
 */

define('WOWTOON_WOWHEAD_BASE_URL', 'http://' . variable_get('wowguild_default_language', 'en') . '.wowhead.com');
define('WOWTOON_WOWHEAD_SEARCH_ID', 'item=');

define('WOWTOON_MAXIMUM_TOON_LEVEL', 100);

// $toon->status options
define('WOWTOON_STATUS_DISABLED', 0);
define('WOWTOON_STATUS_ENABLED', 1);
define('WOWTOON_STATUS_VALIDATED', 2);

define('WOWTOON_UPDATE_CHARACTER_NOT_AVAILABLE', 1);
define('WOWTOON_UPDATE_ARMORY_DOWN', 2);
define('WOWTOON_UPDATE_INVALID_PAGE', 3);
define('WOWTOON_UPDATE_CHARACTER_TOO_LOW', 5);
define('WOWTOON_UPDATE_INVALID_REALM', 6);
define('WOWTOON_UPDATE_CHARACTER_AVAILABLE', 100);
define('WOWTOON_UPDATE_CHARACTER_NOT_MODIFIED', 9);
define('WOWTOON_UPDATE_TOO_MANY_REQUESTS', 10);
define('WOWTOON_UPDATE_UNKNOWN_ERROR', 11);

define('WOWTOON_FEED_GUILD_ACHIEVEMENT', 100);
define('WOWTOON_FEED_GUILD_ITEM_CRAFTED', 101);
define('WOWTOON_FEED_GUILD_ITEM_LOOTED', 102);
define('WOWTOON_FEED_GUILD_ITEM_PURCHASED', 103);
define('WOWTOON_FEED_GUILD_PLAYER_ACHIEVEMENT', 104);
define('WOWTOON_FEED_GUILD_LEVEL_UP', 105);
define('WOWTOON_FEED_GUILD_CREATED', 106);

define('WOWTOON_FEED_ACHIEVEMENT', 1);
define('WOWTOON_FEED_BOSS_KILL', 2);
define('WOWTOON_FEED_CRITERIA', 3);
define('WOWTOON_FEED_OTHER', 0);


//require_once('wowtoon_feed_item.entity.inc');
//require_once('wowtoon.entity.inc');
//require_once('wowguild.entity.inc');

module_load_include('inc', 'wowguild', 'includes/wowtoon.entity');
module_load_include('inc', 'wowguild', 'includes/wowguild.entity');
module_load_include('inc', 'wowguild', 'includes/wowtoon_feed_item.entity');

/**
 * Implements hook_views_api().
 */
function wowguild_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'wowguild') . '/views',
  );
}

function wowguild_init() {
  // Validate Dependancies!
  if (!module_exists('alter_ego')) {
    drupal_set_message(t('Error!  The module !alter_ego must be enabled to use wowguild.  WoWGuild has been disabled!', array('!alter_ego' => l('alter_ego', 'http://drupal.org/project/alter_ego'))), 'error');
    module_disable(array('wowguild'), TRUE);
    cache_clear_all();
  }
  drupal_add_js('http://static.wowhead.com/widgets/power.js', 'external');
}


/**
 * Implementation hook_permission().
 */
function wowguild_permission() {
  $perms = array(
    'administer roster' => array(
      'title' => t('Administrate Guild Roster'),
      'restrict access' => TRUE,
    ),
    'view guild applications' => array(
      'title' => t('View Guild Applications'),
    )
  );
  return $perms;
}


/**
 * Implements hook_node_grants().
 *
 * Tell the node access system what grant IDs the account belongs to for each
 * realm.
 *
 * Here we are providing two realms:
 * - The node_access_example_author realm grants access to a user for their
 *   own content (nodes that they created). The user's grant ID is their UID.
 * - The node_access_example realm grants override access to users with specific
 *   traditional permissions so that they can edit others content. This has just
 *   one grant id, 1: the user is either a member or not based on the
 *   permissions 'access any private content' and 'edit any private content'.
 */
function wowguild_node_grants($account, $op) {
  // First grant a grant to the author for own content.
  $grants['wowguild_application_author'] = array($account->uid);

  if ($op == 'view' && user_access('view guild applications', $account)) {
    $grants['wowguild_application_view'] = array(1);
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 *
 * All node access modules must implement this hook. If the module is
 * interested in the privacy of the node passed in, return a list
 * of node access values for each grant ID we offer. Since this
 * example module only offers 1 grant ID, we will only ever be
 * returning one record.
 */
function wowguild_node_access_records($node) {
  if ($node->type == 'guild_application') {
    $grants = array();
    $grants[] = array(
      'realm' => 'wowguild_application_view',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    if (!empty($node->uid)) {
      // If the node is owned, give the node owner author permission.
      $grants[] = array(
        'realm' => 'wowguild_application_author',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 0,
      );
    }
    return $grants;
  }
}

function wowguild_entity_info() {
  $return = array();
  $return['wowguild'] = array(
        'label' => t('WoW Guild'),
        // The entity class and controller class extend the classes provided by the
        // Entity API
        'entity class' => 'WoWGuild',
        'controller class' => 'WoWGuildController',
        'base table' => 'wowguild_entity',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'gid',
        ),
        'bundles' => array(
          'wowguild' => array(
            'label' => t('WoW Guild'),
            'admin' => array(
              'path' => 'admin/content/wowguild',
              'access arguments' => array('administer roster'),
            ),
          ),
        ),
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
  			'creation callback' => 'wowguild_create',
        'access callback' => 'user_access',
        'access parameters' => array('access content'),
        'module' => 'wowguild',
        // The information below is used by the AvatarUIController (which extends the EntityDefaultUIController)
        'view modes' => array(
          'full' => array(
            'label' => t('Full content'),
            'custom settings' => FALSE,
          ),
          'teaser' => array(
            'label' => t('Teaser'),
            'custom settings' => TRUE,
          ),
      		'rss' => array(
            'label' => t('RSS'),
            'custom settings' => FALSE,
          ),
        ),
      );
  $return['wowtoon_feed_item'] = array(
      'label' => t('Activity Feed Item'),
      // The entity class and controller class extend the classes provided by the
      // Entity API
      'entity class' => 'WoWToonFeedItem',
      'controller class' => 'WoWToonFeedItemController',
      'base table' => 'wowtoon_feed_item',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'achid',
      ),
      // Bundles are defined by the avatar types below
      'bundles' => array(
  			'toon_feed' => array(
          'label' => t('WoW Toon Feed Item'),
          'admin' => array(
            'path' => 'admin/structure/wowtoon_feed_item_types/manage/%wowtoon_feed_item',
            'access arguments' => array('administer roster'),
          ),
        ),
  			'guild_feed' => array(
          'label' => t('WoW Guild Feed Item'),
          'admin' => array(
            'path' => 'admin/structure/wowtoon_feed_item_types/manage/%wowtoon_feed_item',
            'access arguments' => array('administer roster'),
          ),
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'creation callback' => 'wowtoon_feed_item_create',
      'access callback' => 'user_access',
      'access parameters' => array('access content'),
      'module' => 'wowguild',
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
    		'rss' => array(
          'label' => t('RSS'),
          'custom settings' => FALSE,
        ),
      ),
  );

  return $return;
}

/*
 * Implement hook_entity_info_alter()
 * Add a custom field to avatar entity to tell it to use WoWToon Class (autoloaded from wowguild.info) for wowtoon entities.
 */
function wowguild_entity_info_alter(&$entity_info) {
  $entity_info['avatar']['custom entity class']['wowtoon'] = 'WoWToon'; // extends Avatar
}
/**
 * Implements hook_entity_property_info() provided by Entity API.
 *
 */
function wowguild_entity_property_info_alter(&$info) {
  // Tell the Wrapper not to Sanitize the Descripotion Field of Feed Item.
  $info['wowtoon_feed_item']['properties']['description']['sanitized'] = TRUE;
}

/**
* Implementation of hook_node_info().
*
* Create the guild_application node type.
*/
function wowguild_node_info() {
  return array(
    'guild_application' => array(
      'type' => 'guild_application',
      'name' => t('Guild Application'),
      'base' => 'node_content',
      'description' => t("Allow users who have claimed toons to apply to the guild."),
      'title_label' => t('Toon Name and Realm'),
      'locked' => FALSE,
  ),
  );
}
/**
* User is trying to add/edit a guild application.
* Limit the user to a single guild application.
*/
function wowguild_node_prepare($node) {
  if ($node->type == 'guild_application') {
    global $user;
    if (empty($node->nid)) {
      // Attempting to create new applicaiton.  Not using tag(node_access) because it is possible that a user created an application, but does not have access to it.
      if (!empty($user->uid)) {
        $query = db_select('node', 'n');
        $query->addField('n', 'nid');
        $query->condition('type', 'guild_application');
        $query->condition('uid', $node->uid);
        $existing_app = $query->execute()->fetchObject();
      }
      if (!empty($existing_app->nid)) {
        drupal_set_message(t('You may only apply once to the guild.'));
        drupal_goto('node/' . $existing_app->nid);
      }
      // Set default title to current toon's name.
      $aid = alter_ego_get_current_aid();
      if ($aid) {
        $toon = avatar_load($aid);
        if ($toon) {
          $node->title = $toon->nameatrealm;
        }
      }
      // If user is logged in, automatically fill in e-mail.
      if (!empty($user->uid)) {
        $node->application_email[LANGUAGE_NONE][0]['value'] = $user->mail;
      }
    }
  }
}
/**
 * Alter default edit node form for guild_applications.
 *
 * @param $form
 * @param $form_state
 */
function wowguild_form_guild_application_node_form_alter(&$form, &$form_state) {
  global $user;
  // Don't recall what this JS did.  Something about anonymous users.
  //drupal_add_js(drupal_get_path('module', 'wowguild') . '/js/wowguild.guild-application.js');
  // Only display application status to users with 'view guild applications' permission
  if (!user_access('view guild applications')) {
    unset($form['application_status']);
  }

  if (empty($form['#node']->nid)) {
    // Creating new application.
    if (!empty($user->uid)) {
      // If user is logged in, then we have their e-mail, don't change it.
      $form['application_email']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implementation hook_menu().
 */
function wowguild_menu() {

  $items['guild/%wowguild'] = array(
      'title callback' => 'wowguild_page_title',
      'title arguments' => array(1),
      'page callback' => 'wowguild_view_page',
      'page arguments' => array(1),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
  );

  $items['guild/%wowguild/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );

  $items['guild/%wowguild/edit'] = array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wowguild_wowguild_edit_form', 1),
      'access callback' => 'user_access',
      'access arguments' => array('administer roster'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/wowguild.pages.inc',
  );
  $items['guild/%wowguild/update'] = array(
  			'title' => 'Update',
        'page callback' => 'wowguild_wowguild_force_update',
        'page arguments' => array(1),
        'access callback' => 'user_access',
        'access arguments' => array('administer roster'),
        'type' => MENU_LOCAL_ACTION,
  );
  if (module_exists('devel')) {
    $items['guild/%wowguild/devel'] = array(
        'title' => 'Devel',
        'page callback' => 'devel_load_object',
        'page arguments' => array('wowguild', 1),
        'access arguments' => array('access devel information'),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'file' => 'devel.pages.inc',
        'file path' => drupal_get_path('module', 'devel'),
        'weight' => 100,
      );
  }



  // Guild Application Admin
  $items['admin/content/guild_applications'] = array(
      'title' => 'Guild Applications',
      'description' => 'Display and manage Guild Applications.',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'wowguild_applications_view',
      'access arguments' => array('view guild applications'),
      'file' => 'includes/wowguild.pages.inc',
      'weight' => 1,
  );
  $items['admin/content/guild_applications/update/%node/%'] = array(
      'type' => MENU_CALLBACK,
      'page callback' => 'wowguild_update_application_status',
      'page arguments' => array(2, 3),
      'access arguments' => array('view guild applications'),
      'file' => 'includes/wowguild.pages.inc',
  );

  $items['admin/config/system/wowguild'] = array(
      'title' => 'WoW Guild',
      'description' =>  'Manage how WoW toons are attached to user accounts.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wowguild_admin_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/wowguild.admin.inc',
  );

  $items['admin/reports/wowguild/armory_hits'] = array(
        'title' => 'Armory Hits Log',
        'description' =>  'Display Armory API hits stats.',
        'page callback' => 'wowguild_armory_hit_report',
        'access arguments' => array('administer site configuration'),
        'file' => 'includes/wowguild.pages.inc',
  );
  return $items;
}

/**
 * Used by wowguild_menu() to determine visibility of $menu['node/add/guild-application']
 */
function wowguild_can_apply_to_guild() {
  global $user;
  if (variable_get('wowguild_recruitment_show_apply_link', 1)) {
    foreach ($user->roles as $rid => $role) {
      if (variable_get('wowguild_hide_apps_for_role_rid' . $rid, 0) == 1) return FALSE;
    }
    return node_access('create', 'guild_application');
  }
  else {
    // Block setting
    return FALSE;
  }
}



/**
 * Implements hook_menu_alter.
 *
 * Add menu items that are not conditional.
 *
 * @param array $items
 */
function wowguild_menu_alter(&$items) {

  $items['avatar/%avatar/update'] = array(
    'title' => 'Update',
    'description' =>  'Update character from Armory.',
    'page callback' => 'wowguild_wowtoon_force_update',
    'page arguments' => array(1),
    'access callback' => 'wowguild_wowtoon_menu_access',
    'access arguments' => array(1, 'owner', TRUE),
    'type' => MENU_LOCAL_ACTION,
    'module' => 'wowguild'
  );

  $items['avatar/%avatar/validate'] = array(
    'title' => 'Validate',
    'description' =>  'Update character from Armory.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wowguild_wowtoon_validate_form', 1),
    'access callback' => 'wowguild_wowtoon_menu_access',
    'access arguments' => array(1, 'validate', TRUE),
    'type' => MENU_CALLBACK,
		'module' => 'wowguild',
		'file' => 'includes/wowguild.pages.inc',
  );


  // Add access permission to create guild application
  if (!empty($items['node/add/guild-application'])) {
    $items['node/add/guild-application']['access callback'] = 'wowguild_can_apply_to_guild';
    $items['node/add/guild-application']['access arguments'] = array();
  }
  // Add Tabs to Guild Applications
  $field = field_info_field('application_status');
  $i=1;
  foreach ($field['settings']['allowed_values'] as $key => $value) {
    $items['admin/content/guild_applications/' . check_plain($value)] = array(
        'title' => check_plain($value),
        'description' => 'View ' . check_plain($value) . ' Applications',
        'page callback' => 'wowguild_applications_view',
        'page arguments' => array(check_plain($value)),
        'access arguments' => array('view guild applications'),
        'file' => drupal_get_path('module', 'wowguild') . '/includes/wowguild.pages.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => $i++,
    );
  }
}

/**
* Check permissions for a menu item.
*
* @param wowtoon $toon
* @param string $permission
* @param bool $allow_admin - Allow admins to override?
*
* @return
*   TRUE if user is allowed.
*/
function wowguild_wowtoon_menu_access($toon, $permission, $allow_admin = FALSE) {
  global $user;
  if ($toon->type != 'wowtoon') {
    return FALSE;
  }
  if (!$user->uid) {
    return FALSE;
  }
  if ($allow_admin && user_access('administer site configuration')) {
    return TRUE;
  }
  switch ($permission) {
    case 'owner':
      return $toon->uid == $user->uid;
      break;
    case 'validate':
      // The only time we cannot validate is if we own the validated toon.
      return !($toon->uid == $user->uid && $toon->status == WOWTOON_STATUS_VALIDATED);
  }
}

/**
* Add local tasks to wowtoons: view on armory.
*/
function wowguild_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  if ($router_item['path'] == 'avatar/%') {
    if ($router_item['page_arguments'][0]->type == 'wowtoon') {


      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array(
          'title' => t('View on WoW Armory'),
          'href' => $router_item['page_arguments'][0]->url,
          'localized_options' => array(
            'attributes' => array(
              'title' => t('View on WoW Armory'),
            ),
          ),
        ),
      );

      /* validate link is handled by image.
      if ($user->uid == $router_item['page_arguments'][0]->uid && $router_item['page_arguments'][0]->status < WOWTOON_STATUS_VALIDATED) {
        $path = avatar_uri($router_item['page_arguments'][0]);
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'title' => t('Validate'),
            'href' => $path['path'] . '/validate',
            'localized_options' => array(
              'attributes' => array(
                'title' => t('View on WoW Armory'),
              ),
            ),
          ),
        );
      }
      */

      if (user_access('access user profiles')) {
        if (!empty($router_item['page_arguments'][0]->uid)) {
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_task',
            '#link' => array(
              'title' => t('User profile'),
              'href' => 'user/' . $router_item['page_arguments'][0]->uid,
              'localized_options' => array(
                'attributes' => array(
                  'title' => t('View this user\'s profile.'),
                ),
              ),
            ),
          );
        }
      }

    }
  }

  if ($router_item['path'] == 'guild/%') {
    //kpr($router_item['page_arguments'][0]);
    //if ($router_item['page_arguments'][0]->type == 'wowguild') {
      $data['actions']['output'][] = array(
            '#theme' => 'menu_local_task',
            '#link' => array(
              'title' => t('View on WoW Armory'),
              'href' => $router_item['page_arguments'][0]->url,
              'localized_options' => array(
                'attributes' => array(
                  'title' => t('View on WoW Armory'),
                ),
              ),
            ),
          );
    //}
  }
  if ($router_item['path'] == 'user/%/avatars') {
    if (!empty($router_item['page_arguments'][0]->uid)) {
      if ($router_item['page_arguments'][0]->uid == $user->uid && user_access('create wowtoon')) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'title' => t('Add character to your account'),
            'href' => 'avatar/add',
            'localized_options' => array(
              'attributes' => array(),
            ),
          ),
        );
      }
    }
  }
}


function wowguild_block_info() {
  $blocks = array();
  $blocks['wowguild_avatar_progression'] = array(
    'info' => t('Character Progression'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'region' => 'sidebar_second',
    'weight' => 5,
    'status' => 1,
		'visibility' => BLOCK_VISIBILITY_LISTED,
		'pages' => 'avatar/*' //array('avatar/*')
  );
  $blocks['wowguild_guild_progression'] = array(
    'info' => t('Guild Progression'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'region' => 'sidebar_second',
    'weight' => 5,
    'status' => 1,
		'visibility' => BLOCK_VISIBILITY_LISTED,
		'pages' => "guild/*\n<front>" //array('guild/*', '<front>')
  );
  $blocks['wowguild_recruitment'] = array(
    'info' => t('Recruitment Needs'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'region' => 'sidebar_second',
    'status' => 1,
		'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>' //array('<front>')
  );
  return $blocks;
}

/**
 * Implements hook_block_info_alter().
 *
 * Change the default settings for blocks provided by views.
 *
 * @see wowguild_views_default_views()
 *
 * @param array $blocks
 * @param string $theme
 * @param string $code_blocks
 */
function wowguild_block_info_alter(&$blocks, $theme, $code_blocks) {
  if (!empty($blocks['views']['activity_feed-guild_feed_block']) && $blocks['views']['activity_feed-guild_feed_block']['theme'] == 'bartik') {
    $blocks['views']['activity_feed-guild_feed_block']['cache'] = DRUPAL_CACHE_PER_PAGE;
    $blocks['views']['activity_feed-guild_feed_block']['theme'] = 'bartik';
    $blocks['views']['activity_feed-guild_feed_block']['region'] = 'sidebar_second';
    $blocks['views']['activity_feed-guild_feed_block']['status'] = 1;
    $blocks['views']['activity_feed-guild_feed_block']['visibility'] = BLOCK_VISIBILITY_LISTED;
    $blocks['views']['activity_feed-guild_feed_block']['pages'] = 'guild/*';
  }
  if (!empty($blocks['views']['activity_feed-toon_feed_block']) && $blocks['views']['activity_feed-toon_feed_block']['theme'] == 'bartik') {
    $blocks['views']['activity_feed-toon_feed_block']['cache'] = DRUPAL_CACHE_PER_PAGE;
    $blocks['views']['activity_feed-toon_feed_block']['theme'] = 'bartik';
    $blocks['views']['activity_feed-toon_feed_block']['region'] = 'sidebar_second';
    $blocks['views']['activity_feed-toon_feed_block']['status'] = 1;
    $blocks['views']['activity_feed-toon_feed_block']['visibility'] = BLOCK_VISIBILITY_LISTED;
    $blocks['views']['activity_feed-toon_feed_block']['pages'] = 'avatar/*';
  }
}

/**
 * Implementation of hook_block_configure().
 */
function wowguild_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'wowguild_guild_progression':
      $form['wowguild_progression_header'] = array(
        '#title' => t('Header Text'),
        '#type' => 'textarea',
        '#default_value' => variable_get('wowguild_progression_header', ''),
        '#description' => t('This text will appear at the top of the block.  All HTML is valid.')
      );
      $form['wowguild_progression_choose_block'] = array(
        '#title' => t('Choose the type of progression block you want'),
        '#type' => 'radios',
        '#options' => array(0 => 'Automatic', 1 => 'Manual', 2 => 'Custom'),
        '#default_value' => variable_get('wowguild_progression_choose_block', 0),
        '#description' => t('Automatic: progression data is pulled from Armory. Manual: you have to manually set the progression below. Custom: enter your own HTML in the body field.')
      );
      $form['wowguild_progression_manual'] = array(
        '#title' => t('Manual content'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#theme' =>'wowguild_progression_block_manual_form'
      );
      $raids = wowguild_get_progression_raids();
      $progression_variables = variable_get('wowguild_progression_manual_block',array());
      foreach ($raids as $raid) {
        $raid_key = wowguild_get_safe_role($raid['name']);
        if (!array_key_exists($raid_key,$progression_variables) && !isset($progression_variables[$raid_key])) {
          $progression_variables[$raid_key] = array();
          $progression_variables[$raid_key]['display_options'] = array('e', 0);
        }
        $form['wowguild_progression_manual'][$raid_key] = array(
          '#title' => t($raid['name']),
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#tree' => TRUE
        );
        foreach ($raid['encounters'] as $encounter) {
          $encounter_key = wowguild_get_safe_role($encounter['name']);
          if (!array_key_exists($encounter_key,$progression_variables[$raid_key]) && !isset($progression_variables[$raid_key][$encounter_key])) {
            $progression_variables[$raid_key][$encounter_key] = array();
            $progression_variables[$raid_key][$encounter_key]['enable'] = 1;
            $progression_variables[$raid_key][$encounter_key]['modes'] = array(0,0);
          }
          $form['wowguild_progression_manual'][$raid_key]['display_options'] = array(
            '#title' => t('Raid display options'),
            '#type' => 'checkboxes',
            '#title_display' => 'before',
            '#options' => array('e' => t('Show this raid'), 's' => t('Show numeric summary along raid name')),
            '#default_value' => $progression_variables[$raid_key]['display_options']
          );
          $form['wowguild_progression_manual'][$raid_key][$encounter_key] = array(
            '#title' => t($encounter['name']),
            '#type' => 'item',
            '#title_display' => 'before'
          );
          $form['wowguild_progression_manual'][$raid_key][$encounter_key]['enable'] = array(
            '#title' => t('Show this encounter'),
            '#type' => 'checkbox',
            '#title_display' => 'after',
            '#default_value' => $progression_variables[$raid_key][$encounter_key]['enable']
          );
          $form['wowguild_progression_manual'][$raid_key][$encounter_key]['modes'] = array(
            '#title' => t('Modes'),
            '#type' => 'checkboxes',
            '#options' => $encounter['modes'],
            '#default_value' => $progression_variables[$raid_key][$encounter_key]['modes']
          );
        }
      }

      $form['wowguild_progression_custom'] = array(
        '#title' => t('Custom content'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE
      );
      $form['wowguild_progression_custom']['wowguild_progression_body'] = array(
        '#title' => t('Body Text'),
        '#type' => 'textarea',
        '#default_value' => variable_get('wowguild_progression_body', ''),
        '#description' => t('This text will appear as the block if you choose the "Custom" progression block type.  All HTML is valid.')
      );
      $form['wowguild_progression_footer'] = array(
        '#title' => t('Footer Text'),
        '#type' => 'textarea',
        '#default_value' => variable_get('wowguild_progression_footer', ''),
        '#description' => t('This text will appear at the bottom of the block.  All HTML is valid.')
      );
      break;
    case 'wowguild_recruitment':
      /* Recruitment Block: #block-wowguild-wowguild-recruitment */
      $form['theme_info'] = array('#markup' => t('See file %template and %css to override this block.', array(
        '%template' => drupal_get_path('module', 'wowguild') . '/wowguild-recruitment-block.tpl.php',
        '%css' => drupal_get_path('module', 'wowguild') . '/css/wowguild.css',
      )));
      $form['wowguild_recruitment_header'] = array(
        '#title' => t('Header Text'),
        '#type' => 'textarea',
        '#default_value' => variable_get('wowguild_recruitment_header', ''),
        '#description' => t('This text will appear at the top of the block.  All HTML is valid.')
      );

      $roles = wowguild_get_recruitment_roles();
      $options = array(5 => 'Open', 4 => 'High', 3 => 'Medium', 2 => 'Low', 1 => 'Closed', 0 => 'Hidden');
      foreach ($roles as $role) {
        $saferole=$role['name'];
        //Each role is an item
        $form['recruitment'][$saferole] = array(
          '#title' => $role['role'],
          '#type' => 'item',
          '#title_display' => 'before'
        );
        //Each role has needs and spec.
        //Needs are the same for each role.
        $form['recruitment'][$saferole][$saferole . "_need"] = array(
          '#title' => "${saferole}_need",
          '#title_display' => 'attribute',
          '#type' => 'radios',
          '#options' => $options,
          '#default_value' => variable_get('wowguild_recruitment_' . $saferole, 1),
          '#attributes' => array('class' => array('role-element'))
        );
        //Spec are specific to each role, see wowguild_get_recruitment_roles() function for correspondances.
        $form['recruitment'][$saferole]["${saferole}_spec"] = array(
          '#title' => "${saferole}_spec",
          '#title_display' => 'attribute',
          '#type' => 'checkboxes',
          '#options' => $role['specs'],
          '#default_value' => variable_get('wowguild_recruitment_' . $saferole . '_spec', array()),
        );
      }
      $form['recruitment']['#theme'] = 'wowguild_recruitment_block_form_roles';

      $form['wowguild_recruitment_footer'] = array(
        '#title' => t('Footer Text'),
        '#type' => 'textarea',
        '#default_value' => variable_get('wowguild_recruitment_footer', ''),
        '#description' => t('This text will appear at the bottom of the block.  All HTML is valid.')
      );
      $form['wowguild_recruitment_show_apply_link'] = array(
        '#title' => t('Show Application Link?'),
        '#type' => 'checkbox',
        '#default_value' => variable_get('wowguild_recruitment_show_apply_link', 1),
        '#description' => t('Disable this checkbox if you are not recruiting to hide the application link.')
      );
      $form['#theme'] = 'wowguild_recruitment_block_form';
      break;
  }
  return $form;
}

/**
* Save block configurations.
*/
function wowguild_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'wowguild_guild_progression':
      variable_set('wowguild_progression_header', $edit['wowguild_progression_header']);
      variable_set('wowguild_progression_choose_block', $edit['wowguild_progression_choose_block']);
      variable_set('wowguild_progression_body', $edit['wowguild_progression_body']);
      variable_set('wowguild_progression_footer', $edit['wowguild_progression_footer']);
      $raids = wowguild_get_progression_raids();
      $progression_variables = array();
      foreach ($raids as $raid) {
        $raid_key = wowguild_get_safe_role($raid['name']);
        $progression_variables[$raid_key] = array();
        $progression_variables[$raid_key]['display_options'] = $edit[$raid_key]['display_options'];
        foreach($raid['encounters'] as $encounter) {
          $encounter_key = wowguild_get_safe_role($encounter['name']);
          $progression_variables[$raid_key][$encounter_key]['enable'] = $edit[$raid_key][$encounter_key]['enable'];
          $progression_variables[$raid_key][$encounter_key]['modes'] = $edit[$raid_key][$encounter_key]['modes'];
        }
      }
      variable_set('wowguild_progression_manual_block',$progression_variables);
      break;
    case 'wowguild_recruitment':
      $roles = wowguild_get_recruitment_roles();
      foreach ($roles as $role) {
        $saferole = $role['name'];
        variable_set('wowguild_recruitment_' . $saferole, $edit["${saferole}_need"]);
        variable_set('wowguild_recruitment_' . $saferole . '_spec', $edit["${saferole}_spec"]);
      }
      variable_set('wowguild_recruitment_header', $edit['wowguild_recruitment_header']);
      variable_set('wowguild_recruitment_footer', $edit['wowguild_recruitment_footer']);
      variable_set('wowguild_recruitment_show_apply_link', $edit['wowguild_recruitment_show_apply_link']);
      break;
  }
}
/**
* Implementation of hook_block_view.
*/
function wowguild_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'wowguild_avatar_progression':
      $arg2 = arg(2);
      $block = array();
      $progression = array();
      if (arg(0) == 'avatar' && is_numeric(arg(1)) && empty($arg2)) {
        $toon = avatar_load(arg(1));
        if ($toon->type == 'wowtoon') {
          // Only show maximum level toons.
          if (!empty($toon->progression) && $toon->level == WOWTOON_MAXIMUM_TOON_LEVEL) {
            $block['subject'] = 'Progression';

            $output = '';
            foreach ($toon->progression as $raid) {
              $output .= sprintf('<img src="http://%s.media.blizzard.com/wow/icons/18/%s.jpg" /> ', $toon->zone, $raid['icon']);
              $output .= $raid['name'];
              $output .= '<ul>';



              if (!empty($raid['flex_max'])) {
                if ($raid['flex_kills'] == $raid['flex_max']) {
                  $class = 'completed';
                }
                else if ($raid['flex_kills'] > 0) {
                  $class = 'inprogress';
                }
                else {
                  $class = 'notstarted';
                }
                $output .= '<li class="' . $class . '">';
                $text = t('Flex [@kills/@max]', array('@kills' => $raid['normal_kills'], '@max' => $raid['normal_max']));
                $output .= $text;
                $output .= '</li>';
              }

              if ($raid['normal_kills'] == $raid['normal_max']) {
                $class = 'completed';
              }
              else if ($raid['normal_kills'] > 0) {
                $class = 'inprogress';
              }
              else {
                $class = 'notstarted';
              }
              $output .= '<li class="' . $class . '">';
              $text = t('Normal [@kills/@max]', array('@kills' => $raid['normal_kills'], '@max' => $raid['normal_max']));
              if (!empty($raid['toon_achid'])) {
                $output .= l($text, WOWTOON_WOWHEAD_BASE_URL . '?achievement=' . $raid['toon_achid']);
              }
              else {
                $output .= $text;
              }
              $output .= '</li>';
              if (!empty($raid['heroic_max'])) {
                if ($raid['heroic_kills'] == $raid['heroic_max']) {
                  $class = 'completed';
                }
                else if ($raid['heroic_kills'] > 0) {
                  $class = 'inprogress';
                }
                else {
                  $class = 'notstarted';
                }
                $output .= '<li class="' . $class . '">';
                $output .= t('Heroic [@kills/@max]', array('@kills' => $raid['heroic_kills'], '@max' => $raid['heroic_max'])) . '<br />';
                $output .= '</li>';
              }
              if (!empty($raid['mythic_max'])) {
                if ($raid['mythic_kills'] == $raid['mythic_max']) {
                  $class = 'completed';
                }
                else if ($raid['mythic_kills'] > 0) {
                  $class = 'inprogress';
                }
                else {
                  $class = 'notstarted';
                }
                $output .= '<li class="' . $class . '">';
                $output .= t('Mythic [@kills/@max]', array('@kills' => $raid['mythic_kills'], '@max' => $raid['mythic_max'])) . '<br />';
                $output .= '</li>';
              }
              $output .= '</ul>';
            }

            $block['content'] = $output;
          }
        }
      }
      break;
    case 'wowguild_guild_progression':
      $block = array();

      if (arg(0) == 'guild' && is_numeric(arg(1))) {
        $guild = wowguild_load(arg(1));
      }
      else {
        $guild = wowguild_get_guild();
      }

      if (isset($guild->gid)) {
        $header = filter_xss(variable_get('wowguild_progression_header', ''));
        $block_type = variable_get('wowguild_progression_choose_block', 0);
        $body = '';
        $footer = filter_xss(variable_get('wowguild_progression_footer', ''));
        $block['subject'] = t('Guild Progression');
        $block_type = variable_get('wowguild_progression_choose_block', 0);

        // If we are viewing our guild, we can use manual settings.
        if ($guild->gid == variable_get('wowguild_guild_gid', 0)) {
          switch($block_type) {
            case 0: // Automatic
              $body = theme('wowguild_progression_block_automatic', array('guild' => $guild));
              break;
            case 1: // Manual
              $body = theme('wowguild_progression_block_manual', array());
              break;
            case 2: // Custom
              $body = '<div>' . filter_xss(variable_get('wowguild_progression_body', '')) . '</div>';
              break;
          }
        }
        else {
          // We are viewing a guild that is not the one set in settings.  Use automatic settings.
          $body = theme('wowguild_progression_block_automatic', array('guild' => $guild));
        }

        if (!empty($body)) {
          $block['content'] = $header . $body . $footer;
        }

        return $block;
      }
      break;
    case 'wowguild_recruitment':
      $block['subject'] = t('Recruitment');
      $block['content'] = theme('wowguild_recruitment_block');
      break;
  }
  return $block;
}

/**
 * Implement hook_theme().
 */
function wowguild_theme($existing, $type, $theme, $path) {
  return array(
    // Use automatic theme hinting avatar__[avatar_type]
    'avatar__wowtoon' => array(
      'render element' => 'elements',
      'template' => 'templates/avatar--wowtoon',
    ),
    // Use automatic theme hinting avatar__[avatar_type]__[view_mode]
    'avatar__wowtoon__teaser' => array(
      'render element' => 'elements',
      'template' => 'templates/avatar--wowtoon--teaser',
    ),
    // Use automatic theme hinting avatar__[avatar_type]__[view_mode]
    'avatar__wowtoon__popup' => array(
      'render element' => 'elements',
      'template' => 'templates/avatar--wowtoon--popup',
    ),
    'avatar__wowtoon__select_block' => array(
      'render element' => 'elements',
      'template' => 'templates/avatar--wowtoon--select-block',
    ),
    'avatar__wowtoon__select_block_pulldown' => array(
      'render element' => 'elements',
      'template' => 'templates/avatar--wowtoon--select-block-pulldown',
    ),
    'wowtoon_validated_img' => array(
      'variables' => array('status' => NULL),
      'function' => 'theme_wowtoon_validated_img',
      'file' => 'includes/wowguild.theme.inc'
    ),
    'wowtoon_stats' => array(
      'variables' => array('avatar' => NULL, 'set' => NULL),
      'template' => 'templates/wowtoon-stats',
      'file' => 'includes/wowguild.theme.inc'
    ),
    'wowtoon_items' => array(
        'variables' => array('avatar' => NULL, 'set' => NULL, 'details' => FALSE),
        'template' => 'templates/wowtoon-items',
  			'file' => 'includes/wowguild.theme.inc'
    ),
      'wowtoon_item_image' => array(
        'template' => 'templates/wowtoon-item-image',
        'arguments' => array('item' => NULL, 'slot' => 0),
  			'file' => 'includes/wowguild.theme.inc'
    ),
      'wowtoon_left_item' => array(
        'template' => 'templates/wowtoon-left-item',
        'arguments' => array('item' => NULL, 'details' => FALSE),
  			'file' => 'includes/wowguild.theme.inc'
    ),
      'wowtoon_right_item' => array(
        'template' => 'templates/wowtoon-right-item',
        'arguments' => array('item' => NULL, 'details' => FALSE),
  			'file' => 'includes/wowguild.theme.inc'
    ),
    'wowtoon_select_toon_block' => array(
        'variables' => array('avatars' => NULL, 'selected_aid' => NULL, 'add_toon_url' => 'avatar/add'),
        'template' => 'templates/wowtoon-select-toon-block',
    ),
  	'wowguild' => array(
        'render element' => 'elements',
        'template' => 'templates/wowguild',
    ),
    'wowtoon_feed_item' => array(
        'render element' => 'elements',
        'template' => 'templates/wowtoon-feed-item',
    ),
    'wowtoon_feed_item__teaser' => array(
        'render element' => 'elements',
        'template' => 'templates/wowtoon-feed-item--teaser',
    ),
    'wowtoon_feed_item__stream' => array(
      'render element' => 'elements',
      'template' => 'templates/wowtoon-feed-item--stream',
    ),

    // BLOCKS
  	'wowguild_recruitment_block_form' => array(
      'render element' => 'form',
      'file' => 'includes/wowguild.blocks.theme.inc'
    ),
    'wowguild_recruitment_block' => array(
  		//'render element' => 'elements',
      'variables' => array('contents' => array()),
      'template' => 'templates/wowguild-recruitment-block',
  		'file' => 'includes/wowguild.blocks.theme.inc'
    ),


    'wowguild_progression_block_manual_form' => array(
      'render element' => 'form'
    ),
    'wowguild_progression_block_manual' => array(
      'variables' => array('raids' => NULL, 'progression' => NULL),
      'template' => 'templates/wowguild-progression-block-manual',
      'function' => 'theme_wowguild_progression_block_manual',  // Same as automatically derived function.
  		'file' => 'includes/wowguild.blocks.theme.inc'
    ),
  	'wowguild_progression_block_automatic' => array(
      'variables' => array('raids' => NULL, 'progression' => NULL),
      //'template' => 'wowguild-progression-block-automatic',
      'function' => 'theme_wowguild_progression_block_automatic', // Same as automatically derived function.
  		'file' => 'includes/wowguild.blocks.theme.inc'
    ),
  );
}


/**
* Implements hook_preprocess_username().
*
* Add class color to username.
*
* @param array $variables
*/
function wowguild_preprocess_username(&$variables) {
  if (!empty($variables['uid'])) {
    $aid = alter_ego_get_main_aid($variables['uid']);
    if ($aid) {
      $toon = avatar_load($aid);
      if ($toon->type == 'wowtoon') {
        // Apply Class color to username
        $variables['attributes_array']['class'][] = 'color-c' . $toon->classId;
        $variables['attributes_array']['class'][] = 'shadow';
      }
    }
  }
}

/**
 * Implement hook_avatar_picture_url().
 *
 * @param WoWToon $avatar
 */
function wowguild_avatar_picture_url($avatar) {
  if ($avatar->type == 'wowtoon') {
    return $avatar->render['avatar'];
  }
}

/**
* Replace user's picture with their toons picture.
*
* @param array $variables
function wowguild_preprocess_user_picture(&$variables) {
  $account = $variables['account'];
  if ($account->uid) {
    $aid = alter_ego_get_main_aid($account->uid);
    if ($aid) {
      $toon = avatar_load($aid);
      if ($toon->type == 'wowtoon') {
        $filepath = $toon->render['avatar'];
        $alt = t("@user's avatar", array('@user' => $toon->name));

        if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
          $variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
        }
        else {
          $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
        }
      }
    }
  }
}
*/

/** AUTHOR_PANE HOOKS **/

/**
 * Author Pane template.
function wowguild_preprocess_author_pane(&$variables) {
  $temp = array(
    'account' => $variables['account']
  );
  wowguild_preprocess_user_picture($temp);
  if (!empty($temp['user_picture'])) {
    $variables['picture'] = $temp['user_picture'];
  }
}
 */

/**
 * Implements hook_preprocess_entity().
 *
 * Note: For some reason, theme_hook_suggestions matches don't call template_preprocess_THEMENAME().
 * so template_preprocess_avatar__wowtoon() is not called, so need to call a higher hook.
 *
 * @param array $variables
 */
function wowguild_preprocess_entity(&$variables) {
  //print_r($variables['theme_hook_suggestions']);
  if ($variables['entity_type'] == 'avatar') {
    if ($variables['elements']['#entity']->type == 'wowtoon') {

      global $user;

      $toon = $variables['avatar'];

      $variables['name']   = check_plain($toon->name);
      $variables['realm']   = check_plain($toon->realm);
      $variables['fullrealm']   = check_plain($toon->fullrealm);
      $variables['fullname']   = check_plain($toon->fullname);
      $variables['level']   = (integer)($toon->level);
      $variables['achievement_points']   = (integer)($toon->achievement_points);
      $variables['avg_ilevel']   = (integer)($toon->avg_ilevel);
      $variables['avg_ilevel_best']   = (integer)($toon->avg_ilevel_best);

      $variables['render'] = $toon->render;

      $variables['guild_name'] = check_plain($toon->guild_name);


      $variables['faction_class'] = check_plain(strtolower($toon->faction));
      $variables['classId']   = (integer)$toon->classId;
      $variables['class']   = check_plain($toon->class);
      $variables['class_color']   = 'color-c' . $toon->classId;

      $variables['toon_link'] = url('avatar/' . $variables['avatar']->aid);

      $avatar_type = avatar_get_types('wowtoon');
      $usepopup = (is_array($avatar_type->data) && array_key_exists('use_popup', $avatar_type->data))?$avatar_type->data['use_popup']:1;

      $options = array(array('attributes' => array('rel' => $variables['avatar']->aid)));
      if ($usepopup && !in_array($variables['view_mode'], array('full', 'select_block', 'select_block_pulldown'))) {
        $options['attributes']['class'] = array('avatar-popup');
      }
      $variables['name_link']   = l($toon->name, 'avatar/' . $variables['avatar']->aid, $options);
      $variables['fullname_link']   = l($toon->fullname, 'avatar/' . $variables['avatar']->aid, $options);

      $variables['raceId']   = (integer)$toon->raceId;
      $variables['race']   = check_plain($toon->race);

      $variables['validated_img'] = theme('wowtoon_validated_img', array('status' => $toon->status));

      if ($variables['validated_img']) {
        if ($toon->status != WOWTOON_STATUS_VALIDATED && $user->uid == $toon->uid) {
          $path = avatar_uri($toon);
          $variables['validated_img'] = l($variables['validated_img'], $path['path'] . '/validate', array('html' => TRUE));
        }
      }


      if ($variables['elements']['#view_mode'] == 'select_block') {

      }

      $variables['updated_interval'] = t('Updated @interval ago', array('@interval' => format_interval(REQUEST_TIME - $toon->updated, 1)));

    }
  }
  // template_preprocess_wowtoon_feed_item does not get called properly.
  elseif ($variables['entity_type'] == 'wowtoon_feed_item') {
    $variables['theme_hook_suggestions'][] = $variables['entity_type'] . '__' . $variables['view_mode'];
    //kpr($variables);

    $feed = $variables['wowtoon_feed_item'];

    $variables['datecompleted'] = (integer)$feed->datecompleted;
    $variables['datecompleted_formatted'] = format_date($feed->datecompleted);
    $variables['description'] = filter_xss($feed->description, array('a'));
    $variables['icon'] = empty($feed->icon)?'':sprintf('<img src="%s" />', $feed->icon);


    if ($feed->type == 'toon_feed') {
      $avatar = avatar_load($feed->keyid);
      $variables['user_picture'] = sprintf('<img src="%s" />', $avatar->render['avatar']);

    }
    elseif ($feed->type == 'guild_feed') {
      $guild = wowguild_load($feed->keyid);
      $variables['user_picture'] = sprintf('<img src="%s" />', $guild->getTabardUrl());
    }

  }
  // template_preprocess_wowguild does not get called properly.
  elseif ($variables['entity_type'] == 'wowguild') {
    //kpr($variables);

    $guild = $variables['wowguild'];
    $variables['name']   = check_plain($guild->name);
    $variables['realm']   = check_plain($guild->realm);
    $variables['fullrealm']   = check_plain($guild->field_wowtoon_realm[LANGUAGE_NONE][0]['value']);
    $variables['level']   = (integer)($guild->level);
    $variables['achievement_points']   = t('@points Achievement Points', array('@points' => $guild->achievementPoints));

    $variables['faction_class'] = check_plain(strtolower($guild->faction));

    $variables['guild_substring'] = t('Level <strong>@level</strong> @faction Guild, @realm.  @count members.',
    array(
      '@level' => $guild->level,
    	'@faction' => $guild->faction,
    	'@realm' => $guild->field_wowtoon_realm[LANGUAGE_NONE][0]['value'],
    	'@count' => count($guild->members),
    ));

    $path = wowguild_uri($guild);

    $variables['guild_link'] = url($path['path']);
    $variables['name_link']  = l($guild->name, $path['path']);

    $variables['view_mode'] = $variables['elements']['#view_mode'];

    $variables['updated_interval'] = t('Updated @interval ago', array('@interval' => format_interval(REQUEST_TIME - $guild->updated, 1)));

    $variables['tabard_url'] = $guild->getTabardUrl();

    if ($variables['elements']['#view_mode'] == 'full') {
      //$view = views_get_view('wowtoon_views');
      $variables['roster'] = views_embed_view('wowtoon_views', 'page', $guild->gid);// $view->build('page');
    }
  }
}

/*
 * DOES NOT GET CALLED PROPERLY
 *
 * @see wowguild_preprocess_entity()
 */
function wowguild_preprocess_avatar__wowtoon(&$variables) {
  die('asdasdasd');
}

function wowguild_preprocess_wowguild(&$variables) {
  die('ddd');
}






/**
 * Submit the Block Form
 */
function wowguild_recruitment_block_form_submit($form, &$form_state) {
  $values = (object) $form_state['values'];
  $roles = array('Tanks', 'Healers', 'Ranged DPS', 'Melee DPS', 'Death Knights', 'Hunters', 'Mages', 'Shaman', 'Druids', 'Priests', 'Warriors', 'Rogues', 'Warlocks', 'Palladins');
  $options = array(5 => 'Open', 4 => 'High', 3 => 'Medium', 2 => 'Low', 1 => 'Closed', 0 => 'Hidden');
}



/**
 *
 * Customize edit form for wowtoons.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function wowguild_form_avatar_edit_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $wowtoon = $form_state['avatar'];
  if ($wowtoon->type == 'wowtoon') {

    // Wowtoon avatars cannot be deleted.  Instead, 'unown' this character.
    if (isset($form['actions']['delete'])) {
      $form['actions']['delete']['#value'] = t("Unclaim this avatar");
      $form['actions']['delete']['#submit'] = array('wowguild_unclaim_avatar');
    }


    if (user_access('administer roster')) {
      if (!empty($wowtoon->uid)) {
        $owner = user_load($wowtoon->uid);
      }
      else {
        if (isset($wowtoon->is_new) && $wowtoon->is_new) {
          $owner = $user;
        }
        else {
          $owner = FALSE;
        }
      }

      $form['user'] = array(
        '#title' => 'Character owned by',
        '#type' => 'textfield',
        '#default_value' => ($owner === FALSE)?'':$owner->name,
        '#description' => t('Name of user who owns this character.  Leave blank for unclaimed'),
        '#weight' => -10,
        '#autocomplete_path' => 'user/autocomplete'
      );
    }


    $form['name']['#title'] = "Character Name";
    // Character Loaded.  Lock the fields.
    if (isset($wowtoon->toon_key)) {
      if (!empty($wowtoon->name)) {
        $form['name']['#disabled'] = TRUE;
      }
      if (!empty($wowtoon->field_wowtoon_realm[LANGUAGE_NONE][0]['value'])) {
        $form['field_wowtoon_realm']['#disabled'] = TRUE;
      }
    }
    if (isset($_SESSION['wowguild_saved_realm']['#value']) && empty($form['field_wowtoon_realm'][LANGUAGE_NONE]['#default_value'])) {
      $form['field_wowtoon_realm'][LANGUAGE_NONE]['#default_value'] = $_SESSION['wowguild_saved_realm']['#value'];
    }


    array_unshift($form['#validate'], 'wowguild_avatar_edit_form_validate');
    array_unshift($form['#submit'], 'wowguild_avatar_edit_form_submit'); // Doesn't get called anyways!
  }
}

/**
 * Validate wowtoon edit form.
 */
function wowguild_avatar_edit_form_validate(&$form, &$form_state) {
  global $user;

  $values = $form_state['values'];

  // If user can change avatar owner, validate they have entered a valid username.
  if (user_access('administer roster')) {
    if (!empty($values['user'])) {
      $owner = user_load_by_name($values['user']);
      if ($owner === FALSE) {
        form_set_error('user', 'Invalid Username');
      }
      else {
        $form_state['values']['uid'] = $owner->uid;
        $values['uid'] = $owner->uid;
      }
    }
  }

  $valid_realms = wowguild_get_realms();
  // Replace realm with a valid realm if it matches.  (Forces match in case).
  $name = $values['name'];
  $valid_realm = wowguild_is_valid_realm($values['field_wowtoon_realm'][LANGUAGE_NONE][0]['value']);
  if ($valid_realm === FALSE) {
    form_set_error('field_wowtoon_realm', 'Invalid Realm');
  }
  else {
    $form_state['values']['field_wowtoon_realm'][LANGUAGE_NONE][0]['value'] = $valid_realm;
    $avatar = $form_state['avatar'];

    // Save last valid realm as a cookie.
    $_SESSION['wowguild_saved_realm'] = array();
    $_SESSION['wowguild_saved_realm']['#value'] = $valid_realm;

    $avatar->name = $values['name'];
    $avatar->field_wowtoon_realm = $values['field_wowtoon_realm'];

    // Make sure we are not duplicating.
    $wowtoon = wowtoon_load_by_realm_name($valid_realm, $values['name']);

    // Check to see if toon exists in database.
    if (!empty($wowtoon->aid)) {
      if (empty($wowtoon->uid)) {
        // Not owned.
        if (!empty($user->uid)) {
          $wowtoon->uid = empty($values['uid'])?$user->uid:$values['uid'];
          avatar_save($wowtoon);
          drupal_set_message(t("Saved @name.", array('@name' => $wowtoon->name)));
          $path = avatar_uri($wowtoon);
          drupal_goto($path['path']);
        }
        else {
          // Anonymous is trying to claim anonyomus.  Don't change anything.
          $path = avatar_uri($wowtoon);
          drupal_goto($path['path']);
        }
      }
      else {
        // Toon has been claimed.  See if we own it.

        if (!user_access('administer roster')) {
          if (!empty($values['uid']) || !empty($user->uid)) {
            $uid = empty($values['uid'])?$user->uid:$values['uid'];
            if ($uid != $wowtoon->uid) {
              form_set_error('name', t('Someone else has claimed this character.  If you own this character, !validate it now.', array('!validate' => l('validate', 'avatar/' . $wowtoon->aid . '/validate'))));
            }
            else {
              // Can't create duplicate wowtoons.
              if (empty($avatar->aid)) {
                form_set_error('name', t('You already own this character.'));
              }
            }
          }
          else {
            // We are anonymous, so we can't do anything.
            form_set_error('name', 'Someone else has claimed this character.');
          }
        }
        else {
          // User can reassign toons.  No further checks necessary.
        }
      }
    }
    else {
      // Toon is not in the database.  Check the Armory
      $validate = $avatar->validateToon();
      switch ($validate) {
        case WOWTOON_UPDATE_INVALID_PAGE:
          form_set_error('name', 'Armory returned invalid page.');
          break;
        case WOWTOON_UPDATE_UNKNOWN_ERROR:
          form_set_error('name', 'Armory returned an unexpected error.');
          break;
        case WOWTOON_UPDATE_ARMORY_DOWN:
          form_set_error('name', 'Armory appears to be down.');
          break;
        case WOWTOON_UPDATE_TOO_MANY_REQUESTS:
          form_set_error('name', 'This webpage has made too many requests to the Armory.');
          break;
        case WOWTOON_UPDATE_CHARACTER_NOT_AVAILABLE:
          form_set_error('name', 'This character is not available, or is less than level 10.');
          break;
        case WOWTOON_UPDATE_CHARACTER_NOT_MODIFIED:
        case WOWTOON_UPDATE_CHARACTER_AVAILABLE:
          $form_state['values']['name'] = $avatar->loaded_name;
          break;
      }
    }
  }
}


/**
* Validate wowtoon edit form.  THIS DOESN'T GET CALLED FOR SOME REASON.
*/
function wowguild_avatar_edit_form_submit(&$form, &$form_state) {
  die('fail: this is not called!');
  $avatar = $form_state['avatar'];
  if (!empty($avatar->loaded_name)) {
    $form_state['values']['name'] = $avatar->loaded_name;
  }
}

/**
 * This is called when the user clicks Unclaim this avatar.  It sets this avatar's uid to 0.
 *
 */
function wowguild_unclaim_avatar(&$form, &$form_state) {
  $avatar = $form_state['avatar'];
  $avatar->uid = 0;
  avatar_save($avatar);
  drupal_set_message(t("@name has been removed from your account.", array('@name' => $avatar->name)));
  drupal_goto('<front>');
}

/**
 * This form is called when the user click the direct delete link from a menu.
 *
 * Override the submit to unlink this character instead of deleting.
 *
 */
function wowguild_form_avatar_delete_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  $wowtoon = $form_state['avatar'];
  if ($wowtoon->type == 'wowtoon') {
    // Wowtoon avatars cannot be deleted.  Instead, 'unown' this character.
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#value'] = t("Unclaim this avatar");
      $form['actions']['submit']['#submit'] = array('wowguild_unclaim_avatar');
    }
  }
}



/**
 * Implements hook_menu_local_tasks_alter().
function wowguild_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/swortoons/add' on 'admin/structure/swortoons'.
  if ($root_path == 'admin/content/wowtoons') {
    $item = menu_get_item('admin/content/swortoons/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}
 */

/**
 * Add wowtoon particular items.
 *
 * @param unknown_type $toons
 */
function wowguild_avatar_load($toons) {
  $toon_keys = array();
  foreach ($toons as $aid => $toon) {
    if ($toon->type == 'wowtoon') {
      $toons[$aid]->loadToon();
      // Load data from armory for the first time.
      if (empty($toons[$aid]->updated) && !empty($toons[$aid]->name) && !empty($toons[$aid]->field_wowtoon_realm[LANGUAGE_NONE][0]['value'])) {
        $results = $toons[$aid]->loadFromArmory();
        if ($results == WOWTOON_UPDATE_CHARACTER_AVAILABLE) {
          $toons[$aid]->loadToon();
          //$toons[$aid]->reloadActivityFeed();
        }
      }
    }
  }
}
/**
 * Attach toon_key
 *
 * @param Avatar $avatar
 */
function wowguild_avatar_presave($avatar) {
  if ($avatar->type == 'wowtoon') {
    // If this is the first save, $avatar->toon is not loaded.
    if (!empty($avatar->loaded_name)) {
      $avatar->name = $avatar->loaded_name;
    }
  }
}
function wowguild_avatar_update($avatar) {
  if ($avatar->type == 'wowtoon') {
    $query = db_select('wowtoon_owners', 'o');
    $query->fields('o');
    $query->condition('o.aid', $avatar->aid);
    $result = $query->execute()->fetchObject();

    if (empty($avatar->uid) || $avatar->uid != $result->uid) {
      db_delete('wowtoon_owners')
        ->condition('aid', $avatar->aid)
        ->execute();
      db_insert('wowtoon_owners')
        ->fields(array('aid' => $avatar->aid, 'uid' => $avatar->uid, 'toon_key' => $avatar->toon_key))
        ->execute();
    }
    else {
      // Does this do anything?
      db_update('wowtoon_owners')
        ->fields(array('uid' => $avatar->uid))
        ->condition('aid', $avatar->aid)
        ->execute();
    }
  }
}

/**
 * Save Owner field
 */
function wowguild_avatar_insert($avatar) {
  if ($avatar->type == 'wowtoon') {
    db_insert('wowtoon_owners')
      ->fields(array('aid' => $avatar->aid, 'uid' => $avatar->uid, 'toon_key' => $avatar->toon_key))
      ->execute();
  }
}


/**
 * Implements hook_avatar_view()
 *
 * @param Avatar $avatar
 * @param string $view_mode
 */
function wowguild_avatar_view($avatar, $view_mode = 'full') {
  if ($avatar->type == 'wowtoon') {
    // Build wowtoon specific items.

    if ($view_mode == 'full') {
      $avatar->content['items'] = array(
                  '#theme' => 'wowtoon_items',
                  '#avatar' => $avatar
      );

      $avatar->content['stats'] = array(
              '#theme' => 'wowtoon_stats',
              '#avatar' => $avatar
      );
      if (isset($_GET['spec'])) {
        $avatar->content['stats']['#set'] = $avatar->sets[(integer)$_GET['spec']];
        $avatar->content['items']['#set'] = $avatar->sets[(integer)$_GET['spec']];
      }
      else {
        $avatar->content['stats']['#set'] = $avatar->active_set;
        $avatar->content['items']['#set'] = $avatar->active_set;
      }

    }
    elseif ($view_mode == 'validate') {
      $avatar->content['items'] = array(
        '#theme' => 'wowtoon_items',
        '#avatar' => $avatar,
        '#set' => $avatar->active_set
      );
    }
  }
}


/**
* Implemention of hook_cron()
*
* Searchs for XX toons that have not been updated in XX hours, and does an armory request for them.
*
* {wowtoon}.update_attempted is ALWAYS updated to REQUEST_TIME, so that if armory errors out or toon does not exist anymore, we will not continue to try and update nonexistant toons.
*
*/
function wowguild_cron() {
  if (variable_get('wowguild_cronupdate', 1)) {
    $date = REQUEST_TIME - (((int)variable_get('wowguild_updatedelta', '12')) * 60 * 60);
    $query = db_select('wowtoon_cached_data', 't');
    $query->fields('t', array('toon_key'));
    $query->join('wowtoon_owners', 'o', 't.toon_key = o.toon_key');
    $query->fields('o', array('aid'));
    $query->join('avatar', 'm', 'm.aid = o.aid');
    $query->fields('m', array('name'));
    $query->condition('t.update_attempted', $date, '<');

    $query->condition(
      db_or()
        ->condition('o.uid', 0, '>')
        ->condition('m.gid', wowguild_get_guild_gid())
    );
    $query->orderBy('update_attempted', 'ASC')
    ->range(0, (int)variable_get('wowtoon_updatecount', '20'));
    $toons = $query->execute()->fetchAll();


    $output['content'] = array();

    $updated = array();
    foreach ($toons as $toon) {
      $loaded_toon = avatar_load($toon->aid);
      $validate = $loaded_toon->loadFromArmory(TRUE);
      switch ($validate) {
        case WOWTOON_UPDATE_INVALID_PAGE:
          watchdog('cron', 'Invalid Page Error on update of !toon', array('!toon' => l($loaded_toon->nameatrealm, 'avatar/' . $loaded_toon->aid)));
          break;
        case WOWTOON_UPDATE_ARMORY_DOWN:
          watchdog('cron', 'Armory Down Error on update of !toon', array('!toon' => l($loaded_toon->nameatrealm, 'avatar/' . $loaded_toon->aid)));
          break;
        case WOWTOON_UPDATE_TOO_MANY_REQUESTS:
          watchdog('cron', 'Too Many Requests Error on update of !toon', array('!toon' => l($loaded_toon->nameatrealm, 'avatar/' . $loaded_toon->aid)));
          break;
        case WOWTOON_UPDATE_CHARACTER_NOT_AVAILABLE:
          watchdog('cron', 'Character Not Available Error on update of !toon', array('!toon' => l($loaded_toon->nameatrealm, 'avatar/' . $loaded_toon->aid)));
          break;
        case WOWTOON_UPDATE_CHARACTER_AVAILABLE:
          avatar_save($loaded_toon);
        case WOWTOON_UPDATE_CHARACTER_NOT_MODIFIED:
          //$loaded_toon->reloadActivityFeed();
          $updated[] = l($loaded_toon->nameatrealm, 'avatar/' . $loaded_toon->aid);
          break;
      }
    }
    if ($updated) {
      watchdog('cron', 'Updated %count toons: !toons', array('%count' => count($updated), '!toons' => implode(', ', $updated)));
    }

    // Check to see if guild needs update.
    $guild = wowguild_get_guild();
    if ($guild !== false) {
      if ($guild->updated < $date) {
        $guild->loadFromArmory();
        $guild->reloadMembers();
        wowguild_save($guild);
        //$guild->reloadActivityFeed();
        watchdog('cron', 'Updated guild and guild members and activity feed.');
      }
    }
  }
}


/**
 * Update this toon from the armory.
 *
 * @param Avatar $avatar
 */
function wowguild_wowtoon_force_update($avatar) {
  if ($avatar->type == 'wowtoon') {
    $validate = $avatar->loadFromArmory(TRUE);
    switch ($validate) {
      case WOWTOON_UPDATE_INVALID_PAGE:
        drupal_set_message(t('Armory Returned Invalid Page.'));
        break;
      case WOWTOON_UPDATE_ARMORY_DOWN:
        drupal_set_message(t('Armory Appears to be down.'));
        break;
      case WOWTOON_UPDATE_TOO_MANY_REQUESTS:
        drupal_set_message(t('This webpage has made too many requests to the Armory.'));
        break;
      case WOWTOON_UPDATE_CHARACTER_NOT_AVAILABLE:
        drupal_set_message(t('This character is not available, or is less than level 10.'));
        break;
      case WOWTOON_UPDATE_CHARACTER_NOT_MODIFIED:
        if (user_access('administer roster')) {
          $path = avatar_uri($avatar);
          $force = ' [' . l('force update', $path['path'] . '/update', array('query' => array('force' => 1))) . ']';
        } else {
          $force = "";
        }
        drupal_set_message(t('This character has not been modified since last update.!force', array('!force' => $force)));
        //$avatar->reloadActivityFeed();
        break;
      case WOWTOON_UPDATE_CHARACTER_AVAILABLE:
        //$avatar->reloadActivityFeed();
        //avatar_save($avatar);
        drupal_set_message(t('Character updated.'));
        break;
    }
    $path = avatar_uri($avatar);
    drupal_goto($path['path']);
  }
}

/**
 * Update this guild from the armory.
 *
 * @param Guild $guild
 */
function wowguild_wowguild_force_update($guild = '') {
  if (empty($guild)) {
    $guild = wowguild_get_guild();
    if (is_numeric($guild)) {
      switch ($guild) {
        case WOWTOON_UPDATE_INVALID_PAGE:
          drupal_set_message(t('Armory Returned Invalid Page.'));
          break;
        case WOWTOON_UPDATE_ARMORY_DOWN:
          drupal_set_message(t('Armory Appears to be down.'));
          break;
        case WOWTOON_UPDATE_TOO_MANY_REQUESTS:
          drupal_set_message(t('This webpage has made too many requests to the Armory.'));
          break;
        case WOWTOON_UPDATE_CHARACTER_NOT_MODIFIED:
          if (user_access('administer roster')) {
            $force = ' [' . l('force update', 'guild/' . $guild->gid . '/update', array('query' => array('force' => 1))) . ']';
          }
          else {
            $force = "";
          }

          drupal_set_message(t('This guild has not been modified since last update.!force', array('!force' => $force)));
          //$guild->reloadActivityFeed();
          break;
      }
      drupal_goto();
    }
  }

  $validate = $guild->loadFromArmory();
  switch ($validate) {
    case WOWTOON_UPDATE_INVALID_PAGE:
      drupal_set_message(t('Armory Returned Invalid Page.'));
      break;
    case WOWTOON_UPDATE_ARMORY_DOWN:
      drupal_set_message(t('Armory Appears to be down.'));
      break;
    case WOWTOON_UPDATE_TOO_MANY_REQUESTS:
      drupal_set_message(t('This webpage has made too many requests to the Armory.'));
      break;
    case WOWTOON_UPDATE_CHARACTER_NOT_AVAILABLE:
      drupal_set_message(t('This guild is not available, or is less than level 10.'));
      break;
    case WOWTOON_UPDATE_CHARACTER_NOT_MODIFIED:
      if (user_access('administer roster')) {
        $force = ' [' . l('force update', 'guild/' . $guild->gid . '/update', array('query' => array('force' => 1))) . ']';
      }
      else {
        $force = "";
      }

      drupal_set_message(t('This guild has not been modified since last update.!force', array('!force' => $force)));
      //$avatar->reloadActivityFeed();
      break;
    case WOWTOON_UPDATE_CHARACTER_AVAILABLE:
        $guild->reloadMembers();
        wowguild_save($guild);
        drupal_set_message(t('Guild updated.'));
      break;
  }
  $path = wowguild_uri($guild);
  drupal_goto($path['path']);
}





/**
 * Implements hook_user_stream_items()
 *
 * @param User $user
 */
function wowguild_user_stream_items($user) {
  $select = db_select('wowtoon_feed_item', 'f');
  $select->addField('f', 'achid', 'id');
  $select->addField('f', 'dateCompleted', 'date');
  $select->addExpression("'wowtoon_feed_item'", 'entity_type');
  $select->addExpression("'achid'", 'entity_key');

  $aids = alter_ego_get_user_aids($user->uid, 'wowtoon');
  $select->condition('type', 'toon_feed')->condition('keyid', $aids, 'IN');
  $select->orderBy('date', 'DESC');
  $aids = $select->execute()->fetchAll();


  return array('social_circles' => $aids);
}


/**
 * Implement hook_my_stream_items() from Social Circles Module.
 * @param User $user
 */
function wowguild_my_stream_items($user) {

  $select = db_select('wowtoon_feed_item', 'f');
  $select->addField('f', 'achid', 'id');
  $select->addField('f', 'dateCompleted', 'date');
  //$select->addField('n', 'entity_type', NULL, array('node'));
  $select->addExpression("'wowtoon_feed_item'", 'entity_type');
  $select->addExpression("'achid'", 'entity_key');


  if (1 == 2) {
    $toon_and = db_and()->condition('type', 'toon_feed')->condition('keyid', array(2, 5), 'IN');
    $guild_and = db_and()->condition('type', 'guild_feed')->condition('keyid', 1);
    $or = db_or()->condition($toon_and)->condition($guild_and);
    $select->condition($or);
  }
  else {
    $select->condition('type', 'guild_feed')->condition('keyid', 1);
  }

  $select->orderBy('date', 'DESC');

  $aids = $select->execute()->fetchAll();


  return array('wowguild' => $aids);
}

/**
 * Load currently saved guild GID.
 * Enter description here ...
 */
function wowguild_get_guild_gid() {
  return variable_get('wowguild_guild_gid', 0);
}
/**
 * Load the current guild entity.
 */
function wowguild_get_guild() {
  $gid = wowguild_get_guild_gid();
  if ($gid) {
    return wowguild_load($gid);
  }
  else {
    return FALSE;
  }
}


/**
* Use this function to get the unique key for a character.
*
* @param string $realm
* @param string $name
*/
function wowguild_getkey($realm, $name) {
  return utf8_encode(strtolower($realm . '_' . $name));
}


function wowguild_is_valid_realm($text) {
  $valid_realms = wowguild_get_realms();
  $valid_realm = FALSE;
  foreach ($valid_realms as $realm) {
    if (strtolower($realm) == strtolower($text)) {
      $valid_realm = $realm;
    }
  }
  return $valid_realm;
}

/**
 * Returns all known data on all World of Warcraft Realms.  Modified by LOCALE, so will be translated.
 * Source: http://blizzard.github.com/api-wow-docs/#id3381933
 *
 * @return
 *   array(
 *     'all' => array(all fullrealms)
 *     short zone name => array(
 *       fullrealm => array(
 *        {
            "type":"pve",
            "queue":false,
            "status":true,
            "population":"high",
            "name":"Lightbringer",
            "slug":"lightbringer"
          }
 *       )
 *     )
 *   )
 */
function wowguild_get_all_realms() {
$all_realm_data = &drupal_static(__FUNCTION__);
  if (empty($all_realm_data)) {
    // All WoW Servers.  Source: http://blizzard.github.com/api-wow-docs/#id3379605
    $regions = array(
        'us' => 'us.battle.net',
        'eu' => 'eu.battle.net',
        'kr' => 'kr.battle.net',
        'tw' => 'tw.battle.net',
        'cn' => 'battlenet.com.cn'
    );
    $update_date = REQUEST_TIME - 24 * 60 * 60;
    $last_update = variable_get('wowguild_all_realms_last_update', 0);
    // Check variable cache for all realms.
    $all_realm_data = variable_get('wowguild_all_realms', array());
    $language = variable_get('wowguild_default_language', 'en');
    if (empty($all_realm_data) || $last_update < $update_date) {
      $all_realm_data = array();
      foreach ($regions as $zone => $server) {
        $locale = '';
        if ($zone == 'eu') {
          switch ($language) {
            case 'es': $locale = 'es_ES'; break;
            case 'fr': $locale = 'fr_FR'; break;
            case 'ru': $locale = 'ru_RU'; break;
            case 'de': $locale = 'de_DE'; break;
            default:
            case 'en': $locale = 'en_GB'; break;
          }
        }
        elseif($zone == 'us') {
          switch ($language) {
            case 'es': $locale = 'es_MX'; break;
            default:
            case 'en': $locale = 'en_US'; break;
          }
        }
        $url = sprintf('http://%s/api/wow/realm/status%s', $server, empty($locale)?'':'?locale=' . $locale);
        $results = _wowguild_fetch_json($url);

        _wowguild_armory_hit(array(
          'url' => $url,
          'success' => $results['success'],
          'text' => sprintf('Realm Load: %d', $item_id)
        ));

        foreach ($results['data']['realms'] as $value) {
          $fullrealm = $value['name'] . '-' . strtoupper($zone);
          $all_realm_data[$fullrealm] = $value;
          $all_realm_data[$fullrealm]['zone'] = $zone;
          $all_realm_data[$fullrealm]['server'] = $server;
        }
      }

      // Update field_wowtoon_realm allowed values.
      $field = field_read_field('field_wowtoon_realm');
      $field['settings']['allowed_values'] = drupal_map_assoc(array_keys($all_realm_data));
      field_update_field($field);

      variable_set('wowguild_all_realms', $all_realm_data);
      variable_set('wowguild_all_realms_last_update', REQUEST_TIME);
      drupal_set_message(t('Retreived realm data from armory server.'));
      drupal_static_reset('wowguild_get_all_realms');
    }
  }
  return $all_realm_data;
}



function wowdebug() {

  // See if Vocabulary Exists
  $vocab = taxonomy_vocabulary_machine_name_load('wow_realms');
  if (empty($vocab)) {
    $new_vocab = (object) array(
      'name' => 'WoW Realms',
      'description' => 'List of available World of Warcraft Realms',
      'machine_name' => 'wow_realms',
    );

    taxonomy_vocabulary_save($new_vocab);
    $vocab = taxonomy_vocabulary_machine_name_load('wow_realms');
  }


$all_realm_data = variable_get('wowguild_all_realms', array());
  print_r(array_keys($all_realm_data));

  // $term1 = (object) array(
  //    'name' => 'Term 1',
  //    'description' => 'This is term 1',
  //    'vid' => $vocab->vid,
  // );

  // taxonomy_term_save($term1);


}


/**
* Returns all known valid realms.  Cyrillic letters may need to be encoded to save properly.
* @param bool $keyed - Return a keyed array?
*
* @return
*   Array of realms.
*/
function wowguild_get_realms($keyed = FALSE) {

  $all_realm_data = wowguild_get_all_realms();
  $const_realms_list = array_keys($all_realm_data);
  if ($keyed) {
    return drupal_map_assoc($const_realms_list);
  }
  else {
    return $const_realms_list;
  }
}




/**
 * Grab data lookup from blizzard API: http://blizzard.github.com/api-wow-docs/#id3745414
 * Return a cached variable if available.
 * Currently works for:
 *   /api/wow/data/character/races
 *   /api/wow/data/character/classes
 *
 * @param string $url - full url (http://us.battle.net/api/wow/data/character/races)
 * @paran string $locale - blizard locale to pass. (ref: http://us.battle.net/wow/en/forum/topic/2878487920)
 *
 */
function _wowguild_get_blizzard_data_resource_lookup($url, $locale = 'en_US') {
  $url = strtolower($url);
  if (!empty($locale)) {
    $locale_param = '?locale=' . $locale;
  }
  else {
    $locale_param = '';
  }

  $lookup = variable_get('wowtoon_data_resource_' . $locale . '_' . urlencode($url), array());
  if (empty($lookup)) {
    watchdog('wowguild', "Caching armory resource: $url?local=$locale.");

    // TODO: Apply headers to return if-modified cache.
    $result = drupal_http_request($url . $locale_param);
    _wowguild_armory_hit(array(
          'url' => $url . $locale_param,
          'text' => sprintf("Loading Armory Resource: $url . $locale_param")
    ));
    if (!empty($result->data)) {
      // TODO: Check $result->error
      $alldata = drupal_json_decode($result->data);
      // Grab the first element.
      $alldata = array_pop($alldata);
      if ($alldata) {
        $lookup = array();
        foreach ($alldata as $ele) {
          $lookup[$ele['id']] = $ele;
        }
      }
      variable_set('wowtoon_data_resource_' . $locale . '_' . urlencode($url), $lookup);
    }
    else {
      // Error loading data
      return array();
    }
  }
  return $lookup;
}

/**
 * Loads JSON data from the armory.
 *
 * @param string $url
 * @param array $headers
 *
 * @see drupal_http_request()
 *
 * @return array(
 *   'success' => numeric code if successful
 *   'data' => decoded JSON data
 *   'raw' => results of drupal_http_request
 * );
 *
 */
function _wowguild_fetch_json($url, $headers = array()) {
  if (!array_key_exists('headers', $headers)) {
    $headers['headers'] = $headers;
  }
  // See if we are signing our request.
  $pubkey = variable_get('wowguild_armory_public_key', '');
  $privkey = variable_get('wowguild_armory_private_key', '');

  if (!empty($pubkey) && !empty($privkey)) {
    $url = preg_replace('/^http/', 'https', $url);
    $urlparts = parse_url($url);
    $date = date('D, d M Y G:i:s T', time());
    $stringtosign = "GET\n" . $date . "\n" . $urlparts['path'] . "\n";
    $signature = base64_encode(hash_hmac('sha1', $stringtosign, $privkey, true));

    $headers['headers']['Host'] = $urlparts['host'];
    $headers['headers']['Date'] = $date;
    $headers['headers']['Authorization'] = "BNET " . $pubkey . ":" . $signature;
  }

  $result = drupal_http_request($url, $headers);
  $data = drupal_json_decode($result->data);
  $return = array(
    'success' => WOWTOON_UPDATE_CHARACTER_AVAILABLE,
    'data' => $data,
    'raw' => $result
  );

  switch ($result->code) {
    case 304: // Page not modified
      $return['success'] = WOWTOON_UPDATE_CHARACTER_NOT_MODIFIED;
      break;
    case 500: // Error with Armory
    case 404: // Page not found error
    case 200: // Everythings OK!
    default:  // unknown?
      // See http://blizzard.github.com/api-wow-docs/#id3380043 for error handling.
      if (!empty($data['status']) && $data['status'] == 'nok') {
        if ( // The following reason need ADMIN attention
        ($data['reason'] == 'Invalid Application') ||
        ($data['reason'] == 'Access denied, please contact api-support@blizzard.com') ||
        ($data['reason'] == 'Invalid authentication header.') ||
        ($data['reason'] == 'Invalid application permissions.') ||
        ($data['reason'] == 'Invalid application signature.')
        ) {
          $return['success'] = WOWTOON_UPDATE_INVALID_PAGE;
          watchdog('wowguild', "Armory Error " . $data['reason'] . ": [$url]");
        }
        elseif ($data['reason'] == "If at first you don't succeed, blow it up again. (too many requests)") {
          // Code 500
          $return['success'] = WOWTOON_UPDATE_TOO_MANY_REQUESTS;
        }
        elseif ($data['reason'] == "Character not found." || $data['reason'] == "Guild not found.") {
          // Also applies to Characters under level 10.
          $return['success'] = WOWTOON_UPDATE_CHARACTER_NOT_AVAILABLE;
        }
        else {
          // Known errors
          // $data['reason'] == 'When in doubt, blow it up. (page not found)'
          // $data['reason'] == 'Have you not been through enough? Will you continue to fight what you cannot defeat? (something unexpected happened)'
          $return['success'] = WOWTOON_UPDATE_UNKNOWN_ERROR;
        }
      }
  }
  return $return;
}
/**
 * Add an armory hit to the database.
 *
 * @param stdClass $record
 *   array(
 *      'timestamp'
 *      'url'
 *      'success'
 *      'text'
 *      'variables'
 *   )
 *
 */
function _wowguild_armory_hit($record) {
  if (variable_get('wowguild_log_armory_hits', 1)) {
    if (empty($record['timestamp'])) {
      $record['timestamp'] = REQUEST_TIME;
    }
    drupal_write_record('wowtoon_armory_log', $record);
  }
}

/**
 * Grabs item information from the armory.
 *
 * TODO: Cache items.
 *
 * @param int $item_id
 */
function wowguild_fetch_item($item_id, $context = '', $zone = '', $server = '') {

  if ($zone == '') {
    $guild = wowguild_get_guild();
    $zone = $guild->zone;
    $server = $guild->field_wowtoon_realm[LANGUAGE_NONE][0]['value'];
  }

  $language = variable_get('wowguild_default_language', 'en');
  if ($zone == 'us' && ($language == 'fr' || $language == 'de' || $language == 'ru')) {
    $language = 'en';
  }

  if ($zone == 'eu') {
    switch ($language) {
      case 'es': $locale = 'es_ES'; break;
      case 'fr': $locale = 'fr_FR'; break;
      case 'ru': $locale = 'ru_RU'; break;
      case 'de': $locale = 'de_DE'; break;
      default:
      case 'en': $locale = 'en_GB'; break;
    }
  }
  elseif($zone == 'us') {
    switch ($language) {
      case 'es': $locale = 'es_MX'; break;
      default:
      case 'en': $locale = 'en_US'; break;
    }
  }

  if (empty($server)) {
    return array();
  }
  $all_realms = wowguild_get_all_realms();
  $realm_data = $all_realms[$server];

  if (empty($context)) {
    $itemurl = sprintf('http://%s/api/wow/item/%d?%s', $realm_data['server'], $item_id, empty($locale)?'':'&locale=' . $locale);
    $itemresults = _wowguild_fetch_json($itemurl);
    _wowguild_armory_hit(array(
      'url' => $itemurl,
      'success' => $itemresults['success'],
      'text' => sprintf('Item Lookup: %d', $item_id)
    ));

    if ($itemresults['success'] == WOWTOON_UPDATE_CHARACTER_AVAILABLE) {
      if (!empty($itemresults['data']['name'])) {
        // This Item does not need a context.
        return $itemresults['data'];
      }
      if (!empty($itemresults['data']['availableContexts'])) {
        // Grab the first context.
        $context = $itemresults['data']['availableContexts'][0];
      }
    } else {
      return array();
    }
  }

  if (!empty($context)) {
    $itemurl = sprintf('http://%s/api/wow/item/%d/%s?%s', $realm_data['server'], $item_id, $context, empty($locale)?'':'&locale=' . $locale);
    $itemresults = _wowguild_fetch_json($itemurl);
    _wowguild_armory_hit(array(
      'url' => $itemurl,
      'success' => $itemresults['success'],
      'text' => sprintf('Item Lookup: %d (%s)', $item_id, $context)
    ));

    if ($itemresults['success'] == WOWTOON_UPDATE_CHARACTER_AVAILABLE) {
      return $itemresults['data'];
    } else {
      return array();
    }
  } else {
    // Context is Required but Not Given or has no Default
    return array();
  }
}

/**
* Transforms the given string into a valid identifier.
*/
function wowguild_get_safe_role($role) {
  return str_replace(array(' ',"'"), '-', strtolower($role));
}

/**
 * Provides the roles/classes/specs array used in several places.
 *
 * @see wowguild-recruitment-block.tpl.php
 * @see template_preprocess_wowguild_recruitment_block
 */
function wowguild_get_recruitment_roles() {
  return $roles = array(
  1000 => array('name' => wowguild_get_safe_role('Tanks'),
    'role' => 'Tanks',
    'specs' => array(wowguild_get_safe_role('Death Knight') => 'Death Knight', wowguild_get_safe_role('Druid') => 'Druid', wowguild_get_safe_role('Monk') => 'Monk', wowguild_get_safe_role('Paladin') => 'Paladin', wowguild_get_safe_role('Warrior') => 'Warrior'),
    'specs_icons' => array(wowguild_get_safe_role('Death Knight') => '/wow/icons/18/class_6.jpg', wowguild_get_safe_role('Druid') => '/wow/icons/18/class_11.jpg', wowguild_get_safe_role('Monk') => '/wow/icons/18/class_10.jpg', wowguild_get_safe_role('Paladin') => '/wow/icons/18/class_2.jpg', wowguild_get_safe_role('Warrior') => '/wow/icons/18/class_1.jpg')
  ),
  1001 => array('name' => wowguild_get_safe_role('Healers'),
    'role' => 'Healers',
    'specs' => array(wowguild_get_safe_role('Druid') => 'Druid', wowguild_get_safe_role('Monk') => 'Monk', wowguild_get_safe_role('Paladin') => 'Paladin', wowguild_get_safe_role('Priest') => 'Priest', wowguild_get_safe_role('Shaman') => 'Shaman'),
    'specs_icons' => array(wowguild_get_safe_role('Druid') => '/wow/icons/18/class_11.jpg', wowguild_get_safe_role('Monk') => '/wow/icons/18/class_10.jpg', wowguild_get_safe_role('Paladin') => '/wow/icons/18/class_2.jpg', wowguild_get_safe_role('Priest') => '/wow/icons/18/class_5.jpg', wowguild_get_safe_role('Shaman') => '/wow/icons/18/class_7.jpg')
  ),
  1002 => array('name' => wowguild_get_safe_role('Ranged DPS'),
    'role' => 'Ranged DPS',
    'specs' => array(wowguild_get_safe_role('Druid') => 'Druid', wowguild_get_safe_role('Hunter') => 'Hunter', wowguild_get_safe_role('Mage') => 'Mage', wowguild_get_safe_role('Priest') => 'Priest', wowguild_get_safe_role('Shaman') => 'Shaman', wowguild_get_safe_role('Warlock') => 'Warlock'),
    'specs_icons' => array(wowguild_get_safe_role('Druid') => '/wow/icons/18/class_11.jpg', wowguild_get_safe_role('Hunter') => '/wow/icons/18/class_3.jpg', wowguild_get_safe_role('Mage') => '/wow/icons/18/class_8.jpg', wowguild_get_safe_role('Priest') => '/wow/icons/18/class_5.jpg', wowguild_get_safe_role('Shaman') => '/wow/icons/18/class_7.jpg', wowguild_get_safe_role('Warlock') => '/wow/icons/18/class_9.jpg')
  ),
  1003 => array('name' => wowguild_get_safe_role('Melee DPS'),
    'role' => 'Melee DPS',
    'specs' => array(wowguild_get_safe_role('Death Knight') => 'Death Knight', wowguild_get_safe_role('Druid') => 'Druid', wowguild_get_safe_role('Monk') => 'Monk', wowguild_get_safe_role('Paladin') => 'Paladin', wowguild_get_safe_role('Rogue') => 'Rogue', wowguild_get_safe_role('Shaman') => 'Shaman', wowguild_get_safe_role('Warrior') => 'Warrior'),
    'specs_icons' => array(wowguild_get_safe_role('Death Knight') => '/wow/icons/18/class_6.jpg', wowguild_get_safe_role('Druid') => '/wow/icons/18/class_11.jpg', wowguild_get_safe_role('Monk') => '/wow/icons/18/class_10.jpg', wowguild_get_safe_role('Paladin') => '/wow/icons/18/class_2.jpg', wowguild_get_safe_role('Rogue') => '/wow/icons/18/class_4.jpg', wowguild_get_safe_role('Shaman') => '/wow/icons/18/class_7.jpg', wowguild_get_safe_role('Warrior') => '/wow/icons/18/class_1.jpg')
  ),
  6 => array('name' => wowguild_get_safe_role('Death Knights'),
    'role' => 'Death Knights',
    'specs' => array(wowguild_get_safe_role('Blood') => 'Blood', wowguild_get_safe_role('Frost') => 'Frost', wowguild_get_safe_role('Unholy') => 'Unholy'),
    'specs_icons' => array(wowguild_get_safe_role('Blood') => '/wow/icons/18/spell_deathknight_bloodpresence.jpg', wowguild_get_safe_role('Frost') => '/wow/icons/18/spell_deathknight_frostpresence.jpg', wowguild_get_safe_role('Unholy') => '/wow/icons/18/spell_deathknight_unholypresence.jpg')
  ),
  3 => array('name' => wowguild_get_safe_role('Hunters'),
    'role' => 'Hunters',
    'specs' => array(wowguild_get_safe_role('Beast Mastery') => 'Beast Mastery', wowguild_get_safe_role('Markmanship') => 'Markmanship', wowguild_get_safe_role('Survival') => 'Survival'),
    'specs_icons' => array(wowguild_get_safe_role('Beast Mastery') => '/wow/icons/18/ability_hunter_bestialdiscipline.jpg', wowguild_get_safe_role('Markmanship') => '/wow/icons/18/ability_hunter_focusedaim.jpg', wowguild_get_safe_role('Survival') => '/wow/icons/18/ability_hunter_camouflage.jpg')
  ),
  10 => array('name' => wowguild_get_safe_role('Monks'),
    'role' => 'Monks',
    'specs' => array(wowguild_get_safe_role('Brewmaster') => 'Brewmaster', wowguild_get_safe_role('Mistweaver') => 'Mistweaver', wowguild_get_safe_role('Windwalker') => 'Windwalker'),
    'specs_icons' => array(wowguild_get_safe_role('Brewmaster') => '/wow/icons/18/spell_monk_brewmaster_spec.jpg', wowguild_get_safe_role('Mistweaver') => '/wow/icons/18/spell_monk_mistweaver_spec.jpg', wowguild_get_safe_role('Windwalker') => '/wow/icons/18/spell_monk_windwalker_spec.jpg')
  ),
  8 => array('name' => wowguild_get_safe_role('Mages'),
    'role' => 'Mages',
    'specs' => array(wowguild_get_safe_role('Arcane') => 'Arcane', wowguild_get_safe_role('Fire') => 'Fire', wowguild_get_safe_role('Frost') => 'Frost'),
    'specs_icons' => array(wowguild_get_safe_role('Arcane') => '/wow/icons/18/spell_holy_magicalsentry.jpg', wowguild_get_safe_role('Fire') => '/wow/icons/18/spell_fire_firebolt02.jpg', wowguild_get_safe_role('Frost') => '/wow/icons/18/spell_frost_frostbolt02.jpg')
  ),
    7 => array('name' => wowguild_get_safe_role('Shamans'),
    'role' => 'Shamans',
    'specs' => array(wowguild_get_safe_role('Elemental') => 'Elemental', wowguild_get_safe_role('Enhancement') => 'Enhancement', wowguild_get_safe_role('Restoration') => 'Restoration'),
    'specs_icons' => array(wowguild_get_safe_role('Elemental') => '/wow/icons/18/spell_nature_lightning.jpg', wowguild_get_safe_role('Enhancement') => '/wow/icons/18/spell_nature_lightningshield.jpg', wowguild_get_safe_role('Restoration') => '/wow/icons/18/spell_nature_magicimmunity.jpg')
  ),
  11 => array('name' => wowguild_get_safe_role('Druids'),
    'role' => 'Druids',
    'specs' => array(wowguild_get_safe_role('Balance') => 'Balance', wowguild_get_safe_role('Feral Cat') => 'Feral Cat', wowguild_get_safe_role('Feral Bear') => 'Feral Bear', wowguild_get_safe_role('Restoration') => 'Restoration'),
    'specs_icons' => array(wowguild_get_safe_role('Balance') => '/wow/icons/18/spell_nature_starfall.jpg', wowguild_get_safe_role('Feral Cat') => '/wow/icons/18/ability_druid_catform.jpg', wowguild_get_safe_role('Feral Bear') => '/wow/icons/18/ability_racial_bearform.jpg', wowguild_get_safe_role('Restoration') => '/wow/icons/18/spell_nature_healingtouch.jpg')
  ),
  5 => array('name' => wowguild_get_safe_role('Priests'),
    'role' => 'Priests',
    'specs' => array(wowguild_get_safe_role('Discipline') => 'Discipline', wowguild_get_safe_role('Holy') => 'Holy', wowguild_get_safe_role('Shadow') => 'Shadow'),
    'specs_icons' => array(wowguild_get_safe_role('Discipline') => '/wow/icons/18/spell_holy_powerwordshield.jpg', wowguild_get_safe_role('Holy') => '/wow/icons/18/spell_holy_guardianspirit.jpg', wowguild_get_safe_role('Shadow') => '/wow/icons/18/spell_shadow_shadowwordpain.jpg')
  ),
  1 => array('name' => wowguild_get_safe_role('Warriors'),
    'role' => 'Warriors',
    'specs' => array(wowguild_get_safe_role('Arms') => 'Arms', wowguild_get_safe_role('Fury') => 'Fury', wowguild_get_safe_role('Protection') => 'Protection'),
    'specs_icons' => array(wowguild_get_safe_role('Arms') => '/wow/icons/18/ability_warrior_savageblow.jpg', wowguild_get_safe_role('Fury') => '/wow/icons/18/ability_warrior_innerrage.jpg', wowguild_get_safe_role('Protection') => '/wow/icons/18/ability_warrior_defensivestance.jpg')
  ),
  4 => array('name' => wowguild_get_safe_role('Rogues'),
    'role' => 'Rogues',
    'specs' => array(wowguild_get_safe_role('Assassination') => 'Assassination', wowguild_get_safe_role('Combat') => 'Combat', wowguild_get_safe_role('Subtlety') => 'Subtlety'),
    'specs_icons' => array(wowguild_get_safe_role('Assassination') => '/wow/icons/18/ability_rogue_eviscerate.jpg', wowguild_get_safe_role('Combat') => '/wow/icons/18/ability_backstab.jpg', wowguild_get_safe_role('Subtlety') => '/wow/icons/18/ability_stealth.jpg')
  ),
  9 => array('name' => wowguild_get_safe_role('Warlocks'),
    'role' => 'Warlocks',
    'specs' => array(wowguild_get_safe_role('Affliction') => 'Affliction', wowguild_get_safe_role('Demonology') => 'Demonology', wowguild_get_safe_role('Destruction') => 'Destruction'),
    'specs_icons' => array(wowguild_get_safe_role('Affliction') => '/wow/icons/18/spell_shadow_deathcoil.jpg', wowguild_get_safe_role('Demonology') => '/wow/icons/18/spell_shadow_metamorphosis.jpg', wowguild_get_safe_role('Destruction') => '/wow/icons/18/spell_shadow_rainoffire.jpg')
  ),
  2 => array('name' => wowguild_get_safe_role('Paladins'),
    'role' => 'Paladins',
    'specs' => array(wowguild_get_safe_role('Holy') => 'Holy', wowguild_get_safe_role('Protection') => 'Protection', wowguild_get_safe_role('Retribution') => 'Retribution'),
    'specs_icons' => array(wowguild_get_safe_role('Holy') => '/wow/icons/18/spell_holy_holybolt.jpg', wowguild_get_safe_role('Protection') => '/wow/icons/18/ability_paladin_shieldofthetemplar.jpg', wowguild_get_safe_role('Retribution') => '/wow/icons/18/spell_holy_auraoflight.jpg')
  )
  );

}

/**
 * Provides the current raid content progression admins to enable / disable on the progression block.
 *
 * @see wowguild-progression-block-manual.tpl.php
 * @see template_preprocess_wowguild_progression_block_manual
 */
function wowguild_get_icon_path($zone, $icon, $size) {

  // Support '/wow/renders/npcs/portrait/creature60583.jpg' => 'http://us.media.blizzard.com/wow/renders/npcs/portrait/creature60583.jpg'
  if (strtolower(substr($icon, strlen($icon) - 4)) == '.jpg') {
    return 'http://' . $zone . '.media.blizzard.com/' . $icon;
  } else {
    return 'http://' . $zone . '.media.blizzard.com/wow/icons/' . $size . '/' . $icon . '.jpg';
  }
}

/**
 * Hardcoded current raid info.
 *
 *
 *
 *
 */

function wowguild_get_progression_raids() {
  return array(
    array('name' => 'Highmaul',
          'icon' => 'achievement_boss_highmaul_king',
          'id' => 6996, // ZONEID
      		//'toon_achid' => 0,
          //'toon_heroic_achid' => 0,
      		'guild_achid' => 9416,
      		'guild_mythic_achid' => 9420,
          'encounters' => array(
            array('name' => 'Kargath Bladefist',
                  'icon' => '/wow/renders/npcs/portrait/creature87444.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 87444,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'The Butcher',
                  'icon' => '/wow/renders/npcs/portrait/creature87447.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 87447,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Brackenspore',
                  'icon' => '/wow/renders/npcs/portrait/creature87441.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 87441,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Tectus',
                  'icon' => '/wow/renders/npcs/portrait/creature87446.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 87446,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Twin Ogron',
                  'icon' => '/wow/renders/npcs/portrait/creature87449.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 87449,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Ko\'ragh',
                  'icon' => '/wow/renders/npcs/portrait/creature87445.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 87445,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Imperator Mar\'gok',
                  'icon' => '/wow/renders/npcs/portrait/creature87818.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 87818,
                  //'guild_criteriaid' => 0,
            )
        )
    ),
    array('name' => 'Blackrock Foundry',
          'icon' => 'achievement_boss_blackhand',
          'id' => 6967,
  				//'toon_achid' => 0,
          //'toon_heroic_achid' => 0,
  				'guild_achid' => 9417,
  				'guild_mythic_achid' => 9421,
          'encounters' => array(
            array('name' => 'Oregorger',
                  'icon' => '/wow/renders/npcs/portrait/creature77182.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 77182,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Gruul',
                  'icon' => '/wow/renders/npcs/portrait/creature76877.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 76877,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'The Blast Furnace',
                  'icon' => '/wow/renders/npcs/portrait/creature76809.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 76809,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Hans\'gar and Franzok',
                  'icon' => '/wow/renders/npcs/portrait/creature76974.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 76974,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Flamebender Ka\'graz',
                  'icon' => '/wow/renders/npcs/portrait/creature76814.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 76814,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Kromog',
                  'icon' => '/wow/renders/npcs/portrait/creature77692.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 77692,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Beastlord Darmac',
                  'icon' => '/wow/renders/npcs/portrait/creature76865.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 76865,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Operator Thogar',
                  'icon' => '/wow/renders/npcs/portrait/creature76906.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 76906,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'The Iron Maidens',
                  'icon' => '/wow/renders/npcs/portrait/creature77557.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 77557,
                  //'guild_criteriaid' => 0,
            ),
            array('name' => 'Blackhand',
                  'icon' => '/wow/renders/npcs/portrait/creature87420.jpg',
                  'modes' => array('L' => 'LFR', 'N' => 'Normal', 'H' => 'Heroic', 'M' => 'Mythic'),
                  'id' => 87420,
                  //'guild_criteriaid' => 0,
            )
          )
    )
  );
}
