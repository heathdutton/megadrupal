<?php

/**
 * @file
 * Install, update and uninstall functions for the Evanced Events Importer module.
 */

/**
 * Implementation of hook_schema().
 *
 * Defines the schema of the Evanced Events Importer database tables.
 */
function evanced_events_importer_schema() {

  $schema['evanced_events_importer'] = array(
    'description' => 'This Evanced Events Importer table contains the main configuration data.',
    'fields' => array(
      'evanced_events_importer_id' => array(
        'description' => 'The unique id of the current database table row.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'exml_feed_url' => array(
        'description' => 'The URL of the EXML/XML feed that is being imported.',
        'type' => 'text',
        'not null' => TRUE),
      'content_type_name' => array(
        'description' => 'The machine-readable name of the content type.',
        'type' => 'varchar',
        'length' => 25,
        'not null' => TRUE,
        'default' => ''),
      'relative_links_domain' => array(
        'description' => 'The domain that should be transformed into relative links within node descriptions.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => ''),
      'input_format' => array(
        'description' => 'The input format that should be applied to the description of all imported events.',
        'type' => 'varchar',
        'length' => 25,
        'not null' => TRUE,
        'default' => ''),
      'publisher_uid' => array(
        'description' => 'The ID of the user that should be associated with all published content.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '1'),
      'striplinks_flag' => array(
        'description' => 'A flag signifying whether all HTML links should be stripped from the description of each imported event.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => '0'),
      'last_updated' => array(
        'description' => 'The last time this data was revised in this database table.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0'),
      ),
    'primary key' => array('evanced_events_importer_id'),
  );

  $schema['evanced_events_importer_xmlmapper'] = array(
    'description' => 'This Evanced Events Importer table contains data, which associates XML elements with content type fields.',
    'fields' => array(
      'evanced_events_importer_xmlmapper_id' => array(
        'description' => 'The unique id of the current database table row.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'xml_elements' => array(
        'description' => 'The names of specific xml elements that are being mapped to a content type field.',
        'type' => 'varchar',
        'length' => 250,
        'not null' => TRUE,
        'default' => ''),
      'node_field_label' => array(
        'description' => 'The descriptive label of a content type field, to which one or more xml elements are being mapped.',
        'type' => 'varchar',
        'length' => 150,
        'not null' => TRUE,
        'default' => ''),
      'node_field_name' => array(
        'description' => 'The name of a content type field, to which one or more xml elements are being mapped.',
        'type' => 'varchar',
        'length' => 150,
        'not null' => TRUE,
        'default' => ''),
      'node_field_name_alias' => array(
        'description' => 'An alternate field name to be used on the configuration page (this is sometimes necessary if a content type field needs to be broken into several smaller fields in order to make mapping easier).',
        'type' => 'varchar',
        'length' => 150,
        'not null' => TRUE,
        'default' => ''),
      'node_field_type' => array(
        'description' => 'What type of content type field is this? Text? Date? Taxonomy? etc.',
        'type' => 'varchar',
        'length' => 150,
        'not null' => TRUE,
        'default' => ''),
      'last_updated' => array(
        'description' => 'The last time this data was revised in this database table.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0'),
      ),
    'primary key' => array('evanced_events_importer_xmlmapper_id'),
  );

  return $schema;

}


/**
 * Implementation of hook_install().
 *
 * Creates the Evanced Events Importer database tables.
 */
function evanced_events_importer_install() {
  $confirmation_msg = st('After <a href="@url-enabling-permissions">enabling permissions</a> for this module, you should then <a href="@url-configuration-page">configure the Evanced Events Importer module</a> before you run cron.', array('@url-enabling-permissions' => url('admin/people/permissions') . '#module-evanced_events_importer', '@url-configuration-page' => url('admin/config/development/evanced-events-importer')));
  drupal_set_message($confirmation_msg, 'status');
}
