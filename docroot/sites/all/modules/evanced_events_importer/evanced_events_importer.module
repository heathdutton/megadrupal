<?php

/** 
 * @file
 * Hooks and functions shared by all the Evanced Events Importer include files.
 *
 * General module hooks are defined here, as are
 * functions shared by more than one include file. One
 * such function retrieves module configuration settings.
 */

/**
 * Implementation of hook_permission().
 */
function evanced_events_importer_permission() {
  return array('administer Evanced Events Importer' => array(
      'title' => t('Administer Evanced Events Importer'),
      'description' => t('Configure EXML feed and mapping for Evanced Events Importer'),
    ),
  );
}


/**
 * Implementation of hook_menu().
 *
 * Specifies that a configuration page should
 * appear in the admin menu; and that tabs that
 * should exist on the configuration screen.
 */
function evanced_events_importer_menu() {
  $items = array();
  $items['admin/config/development/evanced-events-importer'] = array(
    'title' => 'Evanced Events Importer',
    'description' => "Settings for importing Evanced data into Drupal.",
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evanced_events_importer_admin_settings'),
    'file' => 'evanced_events_importer.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/development/evanced-events-importer/main-configuration'] = array(
    'title' => 'Main configuration',
    'description' => 'Specify the URL of the EXML feed that will be imported, as well as general settings for the event nodes that will be created.',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/development/evanced-events-importer/xmlmapper'] = array(
    'title' => 'XML Mapper',
    'description' => "Maps one or more XML elements to a content type field.",
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evanced_events_importer_admin_settings_xmlmapper'),
    'file' => 'evanced_events_importer.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  return $items;
}


/**
 * Implementation of hook_cron().
 */
function evanced_events_importer_cron() {

  // Include code that parses the EXML feed and either
  // adds, edits or deletes event nodes in drupal.
  require_once(drupal_get_path('module', 'evanced_events_importer') . '/evanced_events_importer.xml2node.inc');

  // Execute the following function whenever cron is run.
  evanced_events_importer_parse_xml();

}


/**
 * Retrieves configuration settings for this module.
 *
 * @param $db_table_name
 *   The name of the database table that
 *   contains the desired configuration settings.
 *
 * @param $field_type
 *   (optional) The kind of content type field that
 *   the settings data should be limited to (example:
 *   text, date, taxonomy, etc). Defaults to NULL.
 *
 * @return
 *   An array containing the requested configuration settings.
 */
function evanced_events_importer_load_configuration($db_table_name, $field_type = NULL) {

  $config_settings = array();

  // Define the sql query based on data passed to this function.
  $sql = "SELECT * FROM {" . $db_table_name . "}";

  // Determine if settings for a specific type of field have been requested.
  if (trim($field_type) != '') {
    // Append the sql query.
    $sql .= " WHERE SUBSTRING(node_field_type, 1, :field_type_string_length) = :field_type ";
    // Execute the sql query.
    $result = db_query($sql, array(':field_type_string_length' => strlen(trim($field_type)),
                                   ':field_type' => trim($field_type)));
  }
  else {
    // Otherwise, grab all the data from this table.
    $result = db_query($sql);
  }

  // Loop through the recordset.
  foreach ($result as $db_table_row) {
    // Update an array with the value.
    $config_settings[] = $db_table_row;
  }

  return $config_settings;

}


/**
 * Populates an array with the unique XML tag names found in the EXML feed.
 *
 * @param $root_element
 *   An object containing all the XML data,
 *   starting at the root element of the feed.
 *
 * @param $secondary_node_name
 *   The name of the tag located the next tier
 *   down from the root element in the XML feed.
 *
 * @return
 *   An array containing the unique XML tag names found in the EXML feed.
 */
function evanced_events_importer_xml_tag_names($root_element, &$secondary_node_name) {

  $xml_nodes_string = '';

  // Retrieve all secondary elements in the XML and set them as an object.
  $secondary_elements = $root_element->item(0)->getElementsByTagName("*");

  // Loop through each secondary element in the object.
  foreach ($secondary_elements as $secondary_element) {

    // Set the tag name of secondary element as a variable.
    $secondary_node_name = $secondary_element->nodeName;

    // Retrieve all third-level elements in
    // the XML file and set them as an object.
    $items = $secondary_element->getElementsByTagName("*");

    // Make a loop for each XML element in the object.
    foreach ($items as $item) {
      // Ensure a valid XML tag name
      // exists before continuing.
      if (trim($item->nodeName) != '') {
        // Append a variable with the tag
        // name of the current element.
        $xml_nodes_string .= $item->nodeName . ',';
      }
    }

    break;

  }

  // Remove the last occurrence of a comma in the string.
  $xml_nodes_string = rtrim(trim($xml_nodes_string), ',');

  // Split the string of tag names into an
  // array, using the comma as a delimiter.
  $xml_nodes_array = explode(',', $xml_nodes_string);

  return $xml_nodes_array;

}
