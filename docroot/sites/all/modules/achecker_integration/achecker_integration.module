<?php

/**
 * @file
 * Achecker module hook implementations.
 */

/**
 * Implements hook_help().
 */
function achecker_integration_help($path, $arg) {

  switch ($path) {

    // Main module help for the AChecker integration module.
    case 'admin/help#achecker_integration':
      return check_markup(file_get_contents(drupal_get_path('module', 'achecker_integration') . '/README.txt'));

    // Overall Scans reporting page help.
    case 'admin/reports/achecker':
      return t('This page lists all AChecker scans and the resulting errors, likely problems and potential problems.  The title link leads to the node view, whilst using the inspect link will allow problems and potential problems to be reviewed and any human decisions updated accordingly.');

    // Individual scan report page and decision form help.
    case 'admin/reports/achecker/%':
      return t('This pages shows the result of an individual AChecker scan. Use the form inside the Likely and Potential problems fieldsets to  make a human decision for each flagged problem.  Problems with a pass decision are listed unser Passes fieldset (where a decision can be reversed).');
  }
}

/**
 * Implements hook_menu().
 */
function achecker_integration_menu() {

  $items['admin/config/content/achecker'] = array(
    'access arguments' => array('administer achecker integration'),
    'description'      => 'Configure the applied accessibility guidlelines, and AChecker webservice details.',
    'file'             => 'achecker_integration.admin.inc',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('achecker_integration_admin_settings_form'),
    'title'            => 'AChecker integration',
  );
  $items['admin/reports/achecker/%'] = array(
    'access arguments' => array('access achecker integration reports'),
    'description'      => 'Shows a list of results for a scanned nodes.',
    'file'             => 'achecker_integration.pages.inc',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('achecker_integration_admin_report_page_vid', 3),
    'title'            => 'AChecker integration result',
    'type'             => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/reports/achecker'] = array(
    'access arguments' => array('access achecker integration report'),
    'description'      => 'Shows a list of scanned nodes.',
    'file'             => 'achecker_integration.pages.inc',
    'page callback'    => 'achecker_integration_admin_report_page',
    'title'            => 'AChecker integration',
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_node_delete().
 */
function achecker_integration_node_delete($node) {

  // Delete any scans of node to be deleted, and any associated results.
  db_delete('achecker_integration_scan')
    ->condition('nid', $node->nid)->execute();
  db_delete('achecker_integration_scan_result')
    ->condition('nid', $node->nid)->execute();
}

/**
 * Implements hook_node_operations().
 */
function achecker_integration_node_operations() {
  $operations = array(
    'scan' => array(
      'label'    => t('Perform AChecker integration scan'),
      'callback' => 'achecker_integration_scan',
    ),
  );
  return $operations;
}

/**
 * Implements hook_node_revision_delete().
 */
function achecker_integration_node_revision_delete($node) {

  // Delete any scans of node to be deleted, and any associated results.
  db_delete('achecker_integration_scan')
    ->condition('vid', $node->vid)->execute();
  db_delete('achecker_integration_scan_result')
    ->condition('vid', $node->vid)->execute();
}

/**
 * Implements hook_permission().
 */
function achecker_integration_permission() {
  return array(
    'administer achecker integration' => array(
      'title'       => t('Administer AChecker'),
      'description' => t('Allows users to achecker integration settings.'),
    ),
    'access achecker integration reports' => array(
      'title'       => t('Access AChecker integration reports'),
      'description' => t('Allows users to inspect the scan results of AChecker integration.'),
    ),
  );
}

/**
 * Perform a scan of supplied nids.
 *
 * @param string $session
 *   The Achecker session_id. This is required for rescans only.
 *   When an error is encountered, data is recorded as 'NULL' in the database.
 *   However in the case of rescans the session_id must be maintained. It
 *   cannot be retrieved from the response of an error so has to passed as a
 *   parameter.
 */
function achecker_integration_scan($nids, $session = NULL) {

  $webservice_url = parse_url(variable_get('achecker_integration_webservice_url', 'http://achecker.ca') . '/checkacc.php');

  $all_guides = variable_get('achecker_integration_guides');
  $guides = array();

  foreach (variable_get('achecker_integration_scan_guides', array()) as $guide => $enabled) {
    if ($enabled) {
      array_push($guides, $all_guides[$guide]);
    }
  }

  $query_string = array(
    'guide'  => implode(',', $guides),
    'id'     => variable_get('achecker_integration_webservice_id', ''),
    'output' => 'rest',
  );

  // Foreach node to be scanned...
  $scans = array(
    'ok'    => 0,
    'error' => 0,
  );
  foreach ($nids as $nid) {

    // Keep a tally of errors encountered.
    $error = 0;

    // Load node to obtain current vid and its timestamp.
    $node = node_load($nid);

    // Contruct url required for the REST webservice (uri GET parameter changes
    // for each node being scanned).
    $query_string['uri'] = url('/node/' . $node->nid, array('absolute' => TRUE));
    $url = $webservice_url['scheme']
      . '://' . $webservice_url['host']
      . $webservice_url['path']
      . '?'
      . http_build_query($query_string);

    // Perform scan.
    $result = drupal_http_request($url);

    // If http errors are encountered handle them.
    if ($result->code != 200) {
      $error++;
      db_merge('achecker_integration_scan')->key(array('vid' => $node->vid))
        ->fields(array(
          'nid'                => $node->nid,
          'vid'                => $node->vid,
          'http_code'          => $result->code,
          'error_code'         => NULL,
          'status'             => NULL,
          'session'            => $session,
          'likely_qty'         => NULL,
          'potential_qty'      => NULL,
          'changed'            => $node->changed,
          'scanned'            => time(),
      ))->execute();
      watchdog(
        'AChecker Integration',
        'Could not contact AChecker service at @url, code @code (@error).',
        array(
          '@code'  => $result->code,
          '@error' => $result->error,
          '@url'   => $url,
        ),
        WATCHDOG_ERROR,
        l(t('settings'), 'admin/config/content/achecker')
      );
      drupal_set_message(
        t('Could not contact AChecker service, check logs for details.'),
        'error'
      );
    }

    // No http errors, process result.
    else {

      $dom = new DOMDocument();

      // If XML can be loaded.
      if ($dom->loadXML($result->data)) {

        // Check for AChecker validation error response.
        $errors = $dom->getElementsByTagName('errors')->item(0);
        if ($errors) {
          $error++;
          db_merge('achecker_integration_scan')->key(array('vid' => $node->vid))->fields(array(
            'nid'                => $node->nid,
            'vid'                => $node->vid,
            'http_code'          => $result->code,
            'error_code'         => $errors->getElementsByTagName('error')->item(0)->getAttribute('code'),
            'status'             => NULL,
            'session'            => $session,
            'likely_qty'         => NULL,
            'potential_qty'      => NULL,
            'scanned'            => $node->changed,
          ))->execute();
        }

        // No AChecker errors, store scan data.
        else {
          $resultset = $dom->getElementsByTagName('resultset')->item(0);

          // Store overall scan data.
          if ($resultset) {
            db_merge('achecker_integration_scan')->key(array('vid' => $node->vid))->fields(array(
              'nid'                => $node->nid,
              'vid'                => $node->vid,
              'http_code'          => $result->code,
              'error_code'         => NULL,
              'status'             => trim($resultset->getElementsByTagName('status')->item(0)->nodeValue),
              'session'            => trim($resultset->getElementsByTagName('sessionID')->item(0)->nodeValue),
              'error_qty'          => $resultset->getElementsByTagName('NumOfErrors')->item(0)->nodeValue,
              'likely_qty'         => $resultset->getElementsByTagName('NumOfLikelyProblems')->item(0)->nodeValue,
              'potential_qty'      => $resultset->getElementsByTagName('NumOfPotentialProblems')->item(0)->nodeValue,
              'scanned'            => $node->changed,

            ))->execute();

            // Store individual results.
            db_delete('achecker_integration_scan_result')->condition('vid', $node->vid)->execute();

            $results = $resultset->getElementsByTagName('result');
            if ($results) {
              foreach ($results as $result) {
                $type = $result->getElementsByTagName('resultType')->item(0)->nodeValue;

                // Errors do not permit human decisions.
                if ($type == 'Error') {
                  $repair = $result->getElementsByTagName('repair')->item(0)->nodeValue;
                  $decision_pass = $decision_fail = $sequence_id = $decision_made = $decision_made_date = NULL;
                }

                // Likely / Potential problems permit human decisions.
                else {
                  $repair = NULL;
                  $decision_pass      = $result->getElementsByTagName('decisionPass')->item(0)->nodeValue;
                  $decision_fail      = $result->getElementsByTagName('decisionFail')->item(0)->nodeValue;
                  $sequence_id        = $result->getElementsByTagName('sequenceID')->item(0)->nodeValue;
                  if ($result->getElementsByTagName('decisionMade')->item(0)) {
                    $decision_made      = $result->getElementsByTagName('decisionMade')->item(0)->nodeValue;
                    $decision_made_date = $result->getElementsByTagName('decisionMadeDate')->item(0)->nodeValue;
                  }
                  else {
                    $decision_made      = NULL;
                    $decision_made_date = NULL;
                  }
                }

                $message = $result->getElementsByTagName('errorMsg')->item(0)->nodeValue;
                preg_match('/suggestion\.php\?id=(\d+)/', $message, $matches);
                $suggestion_id = $matches[1];
                db_insert('achecker_integration_scan_result')->fields(array(
                  'nid'                => $node->nid,
                  'vid'                => $node->vid,
                  'type'               => $type,
                  'line'               => $result->getElementsByTagName('lineNum')->item(0)->nodeValue,
                  'col'                => $result->getElementsByTagName('columnNum')->item(0)->nodeValue,
                  'message'            => strip_tags($message),
                  'suggestion_id'      => $suggestion_id,
                  'source'             => $result->getElementsByTagName('errorSourceCode')->item(0)->nodeValue,
                  'repair'             => $repair,
                  'sequence_id'        => $sequence_id,
                  'decision_pass'      => $decision_pass,
                  'decision_fail'      => $decision_fail,
                  'decision_made'      => $decision_made,
                  'decision_made_date' => $decision_made_date,
                ))->execute();
              }
            }
          }
        }
      }

      // If XML cannot be loaded.
      else {
        $error++;
        watchdog(
          'AChecker Integration',
          'Could not interpret AChecker service response, XML may be invalid.',
          array(),
          WATCHDOG_ERROR
        );
        drupal_set_message(
          t('Could not interpret AChecker service response, XML may be invalid.'),
          'error'
        );
      }
    }

    // Update error/ok count.
    if ($error) {
      $scans['error']++;
    }
    else {
      $scans['ok']++;
    }
  }

  // Set feedback message type.
  if ($scans['error']) {
    $type = 'warning';
  }
  else {
    $type = 'status';
  }

  // Set feedback message.
  if (user_access('access achecker integration reports')) {
    drupal_set_message(
      t('Scanned @qty nodes encountering @qty_error error(s). Results are listed on the <a href="@url_reports">report pages</a>.', array(
          '@qty'         => array_sum($scans),
          '@qty_error'   => $scans['error'],
          '@url_reports' => '/admin/reports/achecker',
      )),
      $type
    );
  }
  else {
    drupal_set_message(
      t('Scanned nodes, you do not have permission to view results.', array(
          '@qty'         => array_sum($scans),
          '@qty_error'   => $scans['error'],
          '@url_reports' => '/admin/reports/achecker',
      )),
      $type
    );
  }
}
