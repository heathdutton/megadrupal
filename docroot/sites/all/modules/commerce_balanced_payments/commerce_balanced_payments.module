<?php

/**
 * @file
 * Integrates Balanced Payments with Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_balanced_payments_menu() {
  $items = array();

  $items['user/%user/bank-accounts'] = array(
    'title' => 'Stored Bank Accounts',
    'page callback' => 'commerce_balanced_payments_bank_accounts',
    'page arguments' => array(1),
    'access callback' => 'commerce_balanced_payments_bank_accounts_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/bank-account/%/verify'] = array(
    'title' => 'Verify your Bank Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_balanced_payments_verify_bank_account', 1, 3),
    'access callback' => 'commerce_balanced_payments_bank_accounts_access',
    'access arguments' => array(1),
  );

  $items['user/%user/bank-account/%/delete'] = array(
    'title' => 'Delete a Bank Account',
    'page callback' => 'commerce_balanced_payments_verify_bank_account_delete',
    'page arguments' => array(3),
    'access callback' => 'commerce_balanced_payments_bank_accounts_access',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Bank Accounts Permissions Callback.
 */
function commerce_balanced_payments_bank_accounts_access($user_page) {
  global $user;

  if ($user_page->uid != $user->uid) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Bank Account Listing Page.
 */
function commerce_balanced_payments_bank_accounts($user) {
  drupal_add_library('system', 'drupal.ajax');

  // Get the bank accounts related to the user.
  $balanced_commerce = new BalancedCommerce();
  $accounts = $balanced_commerce->getBankAccountsByUser($user->uid);

  // If no accounts on file display a message.
  if (empty($accounts)) {
    drupal_set_message(t('You currently have no bank accounts on file.'));
    return '';
  }

  // Create a table.
  $header = array(t('Bank Name'), t('Account'), t('Status'), t('Remaining Attempts'), t('Operations'));

  $rows = array();

  foreach ($accounts as $account) {
    if (isset($account->verification_uri)) {
      $verification = $balanced_commerce->getVerification($account->verification_uri);
      $status = $verification->state;
      $status = str_replace('_', ' ', $status);
      $status = strtoupper($status);
    }
    else {
      $status = t('VERIFICATION NOT INITIALIZED');
    }

    $operations = array();

    if (!in_array($status, array('FAILED', 'VERIFIED'))) {
      $operations[] = array('data' => l(t('Verify'), 'user/' . $user->uid . '/bank-account/' . $account->id . '/verify'));
    }

    $operations[] = array(
      'data' => l(
        t('Delete'),
        'user/' . $user->uid . '/bank-account/' . $account->id . '/delete',
        array(
          'attributes' => array(
            'class' => 'use-ajax',
          ),
        )
      ),
    );

    // Operation links.
    $links = theme('item_list', array('items' => $operations));

    $rows[] = array(
      'data' => array(
        $account->bank_name,
        $account->account_number,
        $status,
        $verification->remaining_attempts,
        $links,
      ),
      'class' => array($account->id),
    );
  }

  // Format the output.
  $description = '<p>Once an account is verified, any pending transactions linked to that account will be processed.</p>';
  $table = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => array('bank-accounts-table'))));
  $html = $description . $table;

  return $html;
}

/**
 * AJAX callback to delete a bank account.
 *
 * @param string $aid
 *   The Bank Account ID.
 */
function commerce_balanced_payments_verify_bank_account_delete($aid) {
  $balanced_commerce = new BalancedCommerce();
  $delete = $balanced_commerce->deleteBankAccount($aid);

  $commands = array();

  if (isset($delete->status_code)) {
    drupal_set_message($delete->description, 'error');
    $commands[] = ajax_command_before('table[id^=bank-accounts-table]', theme_status_messages());
  }
  else {
    $commands[] = ajax_command_remove('tr.' . $aid);
  }

  ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
}

/**
 * Bank Account Verification Form.
 */
function commerce_balanced_payments_verify_bank_account($form, &$form_state, $user, $bank_account) {
  $balanced_commerce = new BalancedCommerce();
  $account = $balanced_commerce->getBankAccountById($bank_account);

  if (isset($account->status_code)) {
    drupal_set_message($account->response->body->description, 'error');
  }
  else {
    if ($form_state['rebuild'] == TRUE) {
      $form = array();

      if (isset($form_state['confirm'])) {
        $form['messages'] = array(
          '#markup' => theme_status_messages(),
        );
      }
      else {
        $verification = $balanced_commerce->getVerification($account->verification_uri);

        $form['messages'] = array(
          '#markup' => theme_status_messages(),
        );

        $form['description'] = array(
          '#markup' => t('Bank Account Ending In: %account', array('%account' => $account->account_number)),
          '#prefix' => '<h1>',
          '#suffix' => '</h1>',
        );

        $form['attempts'] = array(
          '#markup' => t('You have %attempts attempts left.', array('%attempts' => $verification->remaining_attempts)),
          '#prefix' => '<h2>',
          '#suffix' => '</h2>',
        );

        $form['verify_1'] = array(
          '#type' => 'textfield',
          '#title' => t('Verify the first amount'),
          '#required' => TRUE,
        );

        $form['verify_2'] = array(
          '#type' => 'textfield',
          '#title' => t('Verify the second amount'),
          '#required' => TRUE,
        );

        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Verify'),
          '#submit' => array('commerce_balanced_payments_verify_bank_account_submit'),
          '#ajax' => array(
            'callback' => 'commerce_balanced_payments_verify_bank_account_ajax',
            'wrapper' => '[id^=commerce-balanced-payments-verify-bank-account]',
          ),
        );

        $form['warning'] = array(
          '#markup' => t('If the deposits are not received after five business days, the transactions may have failed because of incorrect bank account information.'),
          '#prefix' => '<p>',
          '#suffix' => '</p>',
        );
      }
    }
    elseif ($account->can_debit == FALSE) {
      if ($account->verification_uri) {
        $verification = $balanced_commerce->getVerification($account->verification_uri);
      }
      else {
        $verification = $balanced_commerce->initiateVerification($account);
      }

      $form = array();

      $form['description'] = array(
        '#markup' => t('Bank Account Ending In: %account', array('%account' => $account->account_number)),
        '#prefix' => '<h1>',
        '#suffix' => '</h1>',
      );

      $form['attempts'] = array(
        '#markup' => t('You have %attempts attempts left.', array('%attempts' => $verification->remaining_attempts)),
        '#prefix' => '<h2>',
        '#suffix' => '</h2>',
      );

      $form['verify_1'] = array(
        '#type' => 'textfield',
        '#title' => t('Verify the first amount'),
        '#required' => TRUE,
      );

      $form['verify_2'] = array(
        '#type' => 'textfield',
        '#title' => t('Verify the second amount'),
        '#required' => TRUE,
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Verify'),
        '#submit' => array('commerce_balanced_payments_verify_bank_account_submit'),
        '#ajax' => array(
          'callback' => 'commerce_balanced_payments_verify_bank_account_ajax',
          'wrapper' => '[id^=commerce-balanced-payments-verify-bank-account]',
        ),
      );

      $form['warning'] = array(
        '#markup' => t('If the deposits are not received after five business days, the transactions may have failed because of incorrect bank account information.'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
      );
    }
    else {
      // Account is already verified.
      drupal_set_message(t('This account is already verified.'));
    }
  }

  return $form;
}

/**
 * Bank Account Verification Form Submit Callback.
 */
function commerce_balanced_payments_verify_bank_account_submit($form, &$form_state) {
  // Get the user account.
  $user = user_load($form_state['build_info']['args'][0]->uid);

  // Rebuild the form.
  $form_state['rebuild'] = TRUE;

  // Get submitted amounts.
  $amount1 = $form_state['values']['verify_1'];
  $amount2 = $form_state['values']['verify_2'];

  // Get the bank account.
  $balanced_commerce = new BalancedCommerce();
  $account = $balanced_commerce->getBankAccountById($form_state['build_info']['args'][1]);

  // Confirm the verification.
  $verification = $balanced_commerce->getVerification($account->verification_uri);
  $confirm = $balanced_commerce->confirmVerification($verification, $amount1, $amount2);

  // If there was an error with verification display a message.
  if (isset($confirm->status_code)) {
    drupal_set_message($confirm->description, 'error');
  }
  elseif (isset($confirm->state)) {
    // If the account is now verified.
    if ($confirm->state == 'verified') {
      $form_state['confirm'] = $confirm;
      drupal_set_message(t('Your Bank Account ending in %account is now verified', array('%account' => $account->account_number)));

      // Process all pending transactions linked to the Bank Account and User.
      $transactions = commerce_payment_transaction_load_multiple(array(), array('uid' => $user->uid, 'remote_id' => $account->id, 'status' => array('pending', 'failure')));

      $processes = array();

      // Loop through the transactions and make new ones along with debiting the bank account.
      foreach ($transactions as $transaction) {
        $charge = $transaction->amount;
        $customer = $balanced_commerce->customerExists($user->uid);

        // Debit the customer for this order.
        $debit = $balanced_commerce->debitBankAccount($customer, $account->id, $charge);

        if (isset($debit->status_code)) {
          // Failed.
          drupal_set_message($debit->description, 'error');
        }
        else {
          // Success, save a new transaction.
          $transaction_new = commerce_payment_transaction_new('balancedpayments', $transaction->order_id);
          $transaction_new->instance_id = $transaction->instance_id;
          $transaction_new->remote_id = $debit->id;
          $transaction_new->amount = $charge;
          $transaction_new->currency_code = 'USD';
          $transaction_new->payload[REQUEST_TIME] = $debit;
          $transaction_new->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
          $transaction_new->remote_status = $debit->status;
          $transaction_new->message = t('SUCCESS: The transaction went through.');

          commerce_payment_transaction_save($transaction_new);

          $processes[] = array('transaction' => $transaction_new, 'debit' => $debit);
        }
      }

      // Get the results of the loop so we can display a summary to the user.
      if (!empty($processes)) {
        $list = array();

        foreach ($processes as $process) {
          $list[] = array(
            'data' => t('Order Number !order for %charge - Transaction Number: %transaction_num',
              array(
                '!order' => l($process['transaction']->order_id, 'user/' . $process['transaction']->uid . '/orders/' . $process['transaction']->order_id),
                '%charge' => commerce_currency_format($process['debit']->amount, 'USD'),
                '%transaction_num' => $process['debit']->transaction_number,
              )
            ),
          );
        }

        drupal_set_message(t('The following transactions have been processed successfully: !list', array('!list' => theme('item_list', array('items' => $list)))));
      }
    }
  }
}

/**
 * Bank Account Verification Form AJAX Callback.
 */
function commerce_balanced_payments_verify_bank_account_ajax($form, &$form_state) {
  return $form;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_balanced_payments_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['balancedpayments'] = array(
    'base' => 'commerce_balanced_payments',
    'title' => t('Balanced Payments Credit Card'),
    'description' => t('Integrates Authorize.Net Advanced Integration Method for card not present CC transactions.'),
    'cardonfile' => array(
      'charge callback' => 'commerce_balanced_payments_cardonfile_charge',
      'update callback' => 'commerce_balanced_payments_cardonfile_update',
      'delete callback' => 'commerce_balanced_payments_cardonfile_delete',
    ),
    'file' => 'includes/commerce_balanced_payments.cc.inc',
  );

  $payment_methods['balancedpayments_bank'] = array(
    'base' => 'commerce_balanced_payments_ba',
    'title' => t('Balanced Payments Bank Account'),
    'description' => t('Integrates Authorize.Net Advanced Integration Method for Bank Account transactions.'),
    'file' => 'includes/commerce_balanced_payments.bank.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_libraries_info().
 */
function commerce_balanced_payments_libraries_info() {
  $libraries = array();

  $libraries['balanced-php-master'] = array(
    'name' => 'Balanced Payments',
    'vendor url' => 'https://github.com/balanced/balanced-php',
    'download url' => 'https://github.com/balanced/balanced-php',
    'version arguments' => array(
      'file' => 'LICENSE',
      'pattern' => '/\(c\)\s+(\d+)/',
      'lines' => 5,
      'cols' => 50,
    ),
    'files' => array(
      'php' => array(
        'vendor/autoload.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_balanced_payments_form_commerce_checkout_form_complete_alter(&$form, &$form_state, $form_id) {
  // Load the order.
  $order = commerce_order_load(arg(1));

  // Load the transactions related to this order.
  $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));

  // Reverse the transaction array in case there are more than 1, get the most recent.
  rsort($transactions);
  $transaction = array_shift($transactions);

  // Change order completion message if the order is pending and waiting on
  // Bank Account verification.
  if ($transaction->status == 'pending' && $transaction->instance_id == 'balancedpayments_bank|commerce_payment_balancedpayments_bank') {
    $current_message = $form['checkout_completion_message']['message']['#markup'];

    // Get the message from the payment method settings.
    $rule = rules_config_load('commerce_payment_balancedpayments_bank');
    foreach ($rule->actions() as $action) {
      if (is_array($action->settings['payment_method']['settings'])) {
        $vars = $action->settings['payment_method']['settings'];
      }
    }

    // Replace the tokens in the message.
    $message = token_replace($vars['completion_message']['value'], array('commerce-order' => $order), array('clear' => TRUE));

    // Update the message.
    $form['checkout_completion_message']['message']['#markup'] = $message . $current_message;
  }
}
