<?php

/**
 * @file
 * Module SimpleTest tests.
 */

class CSRemindMessageTestCase extends DrupalWebTestCase {
  /**
   * User for use in tests.
   */
  protected $user;

  /**
   * Provide test information.
   */
  public static function getInfo() {
    return array(
      'name' => 'Contact Save Remind Message tests',
      'description' => 'Testing the csremind_message module.',
      'group' => 'Contact Save',
    );
  }

  /**
   * Set up test prerequisites.
   */
  public function setUp() {
    // Enable module dependencies
    parent::setUp(array(
      'contact',
      'contact_save',
      'csremind',
      'csremind_message',
    ));

    // Make sure no messages from contact_save pollute the screen
    variable_set('contact_save_unread_message_status_at_login', 0);

    // Create/log in a user to test with
    $this->user = $this->drupalCreateUser(array('administer contact forms'));
    $this->drupalLogin($this->user);

    // Update the frequency of all users reminders so a reminder will be
    // triggered every time. Record is created by the user logging in.
    $result = db_update('csremind')
      ->fields(array(
        'frequency' => 0
      ))
      ->execute();

    // Mock up a saved unread contact form message so that conditions are
    // correct for reminders to fire. The result of this is the same as filling
    // in and submitting the site contact form.
    $this->contact_save_id = db_insert('contact_save')
      ->fields(array(
        'uid' => $this->user->uid,
        'name' => 'John Smith',
        'mail' => 'john.smith@example.org',
        'subject' => 'Test message subject',
        'message' => 'Test message body',
        'created' => time(),
        '`read`' => 0,
      ))
      ->execute();
  }

  /**
   * Get the users added reminder record ID.
   *
   * @param int $user_id
   *   The user ID we want the reminder ID for.
   *
   * @return int
   *   A reminder ID.
   */
  protected function userTestReminderId($user_id) {
    $query = 'SELECT id
      FROM {csremind}
      WHERE uid = :uid
      LIMIT 1';

    return db_query($query, array(':uid' => $user_id))->fetchField();
  }

  /**
   * Test reminder message shows and content of message as is as expected.
   */
  public function testReminderMessage() {
    // Visit a page that isn't on the exclude list
    $this->drupalGet('');
    // Assert that you see the relevant message text
    $this->assertText(t('There are 1 unread saved site contact form messages'), 'Expected reminder message is visible');
    // Assert that you see the AJAX links
    $this->assertText(t('(Deactivate)'), "Expected 'deactivate' link is visible");
    $this->assertText(t('(Suppress)'), "Expected 'suppress' link is visible");
  }

  /**
   * Test reminder suppress link works and status message is shown as expected.
   */
  public function testReminderMessageSuppressionLink() {
    // Visit a page that isn't on the exclude list
    $this->drupalGet('');
    // Assert that you see the AJAX 'suppress' link
    $this->assertText(t('(Suppress)'), 'Expected "(Suppress)" link is visible');

    // The internal browser doesn't support AJAX. So here test the reminder
    // message AJAX link functionality by replicating what the HTTP request
    // that's issued when a user clicks the 'Suppress' link in the message and
    // verify that the response contains the AJAX framework commands that are
    // expected.
    //
    // Don't think it's possible to use drupalPostAJAX() methods as they're
    // resident within a class that won't give us the ability to navigate the
    // site with the browser.
    //
    // This isn't ideal, especially as the request is actually a POST, but it's
    // better than nothing.
    $user_id = $this->user->uid;
    $reminder_id = $this->userTestReminderId($user_id);
    $this->drupalGet('user/' . $user_id . '/reminder/' . $reminder_id . '/suppress/ajax/');
    $this->assertText('{"command":"remove","selector":".suppress-link-wrapper"}', 'AJAX framework command to hide reminder "(Suppress)" link is present');
    $this->assertText('{"command":"insert","method":"replaceWith","selector":".reminder-status-wrapper","data":"\u003Cdiv class=\u0022reminder-status-wrapper\u0022\u003EReminders have been suppressed for the remainder of your current\n    session. If you wish to re-enable the reminder, visit your \u003Ca href=\u0022\/user\/' . $user_id . '\/reminders\u0022\u003Ereminder config page\u003C\/a\u003E.\u003C\/div\u003E","settings":null}', 'AJAX framework command to display suppress success message is present');

    // Verify that the database record suppress value is updated to 1
    $reminder = csremind_load(2);
    $this->assertEqual((int) $reminder['suppress'], 1, 'Reminder suppression succeeded in database');
  }

  /**
   * Test reminder deactivate link works and status message is shown as expected.
   */
  public function testReminderMessageDeactivateLink() {
    // Visit a page that isn't on the exclude list
    $this->drupalGet('');
    // Assert that you see the AJAX 'deactivate' link
    $this->assertText(t('(Deactivate)'), 'Expected "(Deactivate)" link is visible');

    // Same issues with testing AJAX links mentioned in
    // testReminderMessageSuppressionLink() also apply here.
    $user_id = $this->user->uid;
    $reminder_id = $this->userTestReminderId($user_id);
    $this->drupalGet('user/' . $user_id . '/reminder/' . $reminder_id . '/deactivate/ajax/');
    $this->assertText('{"command":"remove","selector":".deactivate-link-wrapper"}', 'AJAX framework command to hide reminder "(Deactivate)" link is present');
    $this->assertText('{"command":"remove","selector":".suppress-link-wrapper"}', 'AJAX framework command to hide reminder "(Suppress)" link is present');
    $this->assertText('{"command":"insert","method":"replaceWith","selector":".reminder-status-wrapper","data":"\u003Cdiv class=\u0022reminder-status-wrapper\u0022\u003EReminder has been permanently deactivated. If you wish to reactivate\n    the reminder, visit your \u003Ca href=\u0022\/user\/' . $user_id . '\/reminders\u0022\u003Ereminder config page\u003C\/a\u003E.\u003C\/div\u003E","settings":null}', 'AJAX framework command to display deactivate success message is present');

    // Verify that the database record active value is updated to 0
    $reminder = csremind_load(2);
    $this->assertEqual((int) $reminder['active'], 0, 'Reminder deactivation succeeded in database');
  }
}