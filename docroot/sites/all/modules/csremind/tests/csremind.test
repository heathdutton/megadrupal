<?php

/**
 * @file
 * Module SimpleTest tests.
 */

class CSRemindTestCase extends DrupalWebTestCase {
  /**
   * User for use in tests.
   */
  protected $user;

  /**
   * Provide test information.
   */
  public static function getInfo() {
    return array(
      'name' => 'Contact Save Remind tests',
      'description' => 'Testing the csremind module.',
      'group' => 'Contact Save',
    );
  }

  /**
   * Set up test prerequisites.
   */
  public function setUp() {
    // Enable module dependencies
    parent::setUp(array(
      'contact',
      'contact_save',
      'csremind',
      'csremind_test_helper',
    ));

    // Make sure no messages from contact_save pollute the screen during tests
    variable_set('contact_save_unread_message_status_at_login', 0);

    $this->user = $this->drupalCreateUser(array('administer contact forms'));
    $this->drupalLogin($this->user);
    $this->createSiteContactSaveRecord();
  }

  /**
   * Create a saved unread site contact form message.
   *
   * This ensures that conditions are correct for reminders to fire. The result
   * of this is the same as filling in and submitting the site contact form.
   */
  protected function createSiteContactSaveRecord() {
    $query = db_insert('contact_save')
      ->fields(array(
        'uid' => $this->user->uid,
        'name' => 'John Smith',
        'mail' => 'john.smith@example.org',
        'subject' => 'Test message subject',
        'message' => 'Test message body',
        'created' => time(),
        '`read`' => 0,
      ))
      ->execute();
  }

  /**
   * Update the frequency of all users reminders.
   *
   * A frequency of 0 means a reminder will be triggered every time a page is
   * visited (and the user has an active, unsupressed reminder record). Record
   * is created by the user logging in.
   *
   * @param int $frequency
   *  Frequency of reminder in seconds.
   */
  protected function setUsersReminderFrequency($frequency = 1) {
    $result = db_update('csremind')
      ->fields(array(
        'frequency' => $frequency
      ))
      ->execute();
  }

  /**
   * Suppress all reminders in the database.
   */
  protected function suppressReminders() {
    $result = db_update('csremind')
      ->fields(array(
        'suppress' => 1
      ))
      ->execute();
  }

  /**
   * Deactivate all reminders in the database.
   */
  protected function deactivateReminders() {
    $result = db_update('csremind')
      ->fields(array(
        'active' => 0
      ))
      ->execute();
  }

  /**
   * Filter out known user role ID from an array.
   *
   * Used as a callback with array_filter().
   *
   * @param string $role_name
   *   A Drupal permission string.
   *
   * @return bool
   *   TRUE, unless $role_name is 'authenticated user'.
   */
  protected function findTestRoleId($role_name) {
    if ($role_name == 'authenticated user') {
      return FALSE;
    }

    return TRUE;
  }

  /**
   * Test when a user with 'administer contact forms' permission logs in, a row
   * is added to the 'csremind' database table.
   */
  public function testReminderCreationOnLogin() {
    // Verify that a record is created in the csremind table.
    $select = db_select('csremind', 'c')
      ->fields('c', array('id'))
      ->condition('c.uid', $this->user->uid, '=');

    $count = $select->countQuery()->execute()->fetchField();
    $this->assertEqual($count, 1, 'Reminder database record created on user login');
  }

  /**
   * Test when a user without 'administer contact forms' permissions logs in,
   * they do not have a row added to the 'csremind' database table.
   */
  public function testReminderNotCreatedForUnprivilegedUser() {
    $unprivileged_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($unprivileged_user);

    // Verify that a record is not created in the csremind table.
    $select = db_select('csremind', 'c')
      ->fields('c', array('id'))
      ->condition('c.uid', $unprivileged_user->uid, '=');

    $count = $select->countQuery()->execute()->fetchField();
    $this->assertEqual($count, 0, 'Reminder database record NOT created for unprivileged user on login');
  }

  /**
   * Test when user with 'administer contact forms' permission has logged in,
   * has that permission removed, then logs out, a row is removed from the
   * 'csremind' database table.
   */
  public function testReminderRemovalAfterUserPermissionsChange() {
    // Update user permissions, removing 'administer contact forms'.
    // There are two roles assigned to the user, the known 'authenticated user'
    // and an unknown, seemingly random integer that is assigned when the user's
    // created with a permission array, in setUp(). By filtering out the known
    // role we're left with the dynamically assigned one. There's got to be an
    // easier way to do this (that I don't currently know!).
    $role_ids = array_filter($this->user->roles, array($this, 'findTestRoleId'));
    // Remove the permission from the user role, so that they can no longer
    // administer contact forms, and therefore should not have a reminder to
    // view any unread messages.
    user_role_change_permissions(array_pop($role_ids), array('administer contact forms' => FALSE));
    // Log user out
    $this->drupalLogout();
    // Log user back in
    $this->drupalLogin($this->user);
    $reminders = csremind_all_user_reminders($this->user->uid);
    $this->assertEqual(count($reminders), 0, 'User no longer has reminder records after user permission change and log out/log in, as expected');
  }

  /**
   * Test when user with 'administer contact forms' permission logs in, and
   * suppresses a reminder, it is suppressed.
   */
  public function testReminderSuppression() {
    // Suppress all reminders
    $this->suppressReminders();
    // Verify that the reminder is not shown
    $this->setUsersReminderFrequency(0);
    $this->drupalGet('');
    $this->assertNoText(t('There are @count unread saved site contact form messages', array('@count' => 1)), 'Reminder message not show because of suppression, as expected');
  }

  /**
   * Test when user with 'administer contact forms' permission logs in and
   * deactivates a reminder, it is deactivated.
   */
  public function testReminderDeactivation() {
    // Deactivate all reminders
    $this->deactivateReminders();
    // Verify that the reminder is not shown
    $this->setUsersReminderFrequency(0);
    $this->drupalGet('');
    $this->assertNoText(t('There are @count unread saved site contact form messages', array('@count' => 1)), 'Reminder message not show because of deactivation, as expected');
  }

  /**
   * Test when user with 'administer contact forms' permission logs in,
   * suppresses a reminder and then logs out, the reminder is unsupressed after
   * logging out.
   */
  public function testReminderSuppressionReversalOnLogout() {
    // Suppress all reminders
    $this->suppressReminders();
    // Log the user out
    $this->drupalLogout();
    // Verify that the reminder is no longer suppressed
    $reminders = csremind_all_user_reminders($this->user->uid);
    $this->assertEqual($reminders[0]['suppress'], 0, 'Reminder is unsuppressed after user log out');
  }

  /**
   * Test when user with 'administer contact forms' permission logs in and
   * deactivates a reminder, that it is persisted to be deactivated after
   * log out/log in.
   */
  public function testReminderDeactivationIsPermanent() {
    // Deactivate all reminders
    $this->deactivateReminders();
    // Log user out
    $this->drupalLogout();
    // Log user back in
    $this->drupalLogin($this->user);
    // Verify that the reminder is still deactivated
    $reminders = csremind_all_user_reminders($this->user->uid);
    $this->assertEqual($reminders[0]['active'], 0, 'Reminder remains deactivated after user log out/log in');
  }

 /**
   * Test module hook(s) is/are fired.
   */
  public function testHooks() {
    $this->setUsersReminderFrequency(0);
    $this->createSiteContactSaveRecord();
    $this->drupalGet('');
    // Message(s) shown by "hidden" csremind_test_helper.module.
    $this->assertText(t('hook_csremind_remind_user was fired and implemented'), 'Hook csremind_remind_user() was triggered as expected');
    $reminders = csremind_all_user_reminders($this->user->uid);
    $this->assertText(t('Reminder with ID @reminder_id received for user with ID @uid', array('@reminder_id' => $reminders[0]['id'], '@uid' => $this->user->uid)), 'Hook "reminder" parameter is populated for the correct user');
    $this->assertText(t('There is 1 saved, unread message'), 'Hook "unread_message_count" parameter is correct for the user');
  }

  /**
   * Test /admin config form exists with expected content, for user with
   * 'administer contact forms' permissions.
   */
  public function testConfigFormExists() {
    // Go to the config form URL
    $this->drupalGet('/admin/structure/contact/csremind');
    // Verify that expected controls are visible
    $this->assertText(t('Default reminder frequency'), 'Module config form exists');
    $this->assertText(t('Pages to exclude reminders triggering on'), 'Module config form controls exist as expected');
  }

  /**
   * Test user reminder tab/form exists with expected content.
   */
  public function testUserReminderTab() {
    // Go the user profile page
    $this->drupalGet('/user');
    // Verify that the 'Reminders' tab/link is there
    $this->assertLink('Reminders', 0, 'Reminder tab/link exists on the user profile page');
    // Click link
    $this->clickLink('Reminders');
    // Verify that there are the expected controls visible
    $this->assertText(t('Reminder active state for unread site contact form messages'), 'Reminder active state control present on page');
    $this->assertText(t('Reminder suppression state for unread site contact form messages'), 'Reminder suppression state control present on page');
    $this->assertText(t('Frequency of reminder'), 'Reminder frequency control present on page');
  }

  /**
   * Test that reminder is not fired for pages that are on the exclude list.
   */
  public function testReminderExcludedPages() {
    $this->setUsersReminderFrequency(0);
    $this->drupalGet('user/' . $this->user->uid . '/reminders');
    $this->assertNoText(t('hook_csremind_remind_user was fired and implemented'), 'No reminder triggered on excluded page, as expected');
  }
}