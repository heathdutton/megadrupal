<?php

/**
 * @file
 * Main entry point for Fast Cache module.
 */

/**
 * Implements hook_boot().
 *
 * Should be executed the latest.
 */
function fast_cache_boot() {

  // Simply register shutdown function which will perform commit of aggregated
  // "set" and "delete" cache queries.
  drupal_register_shutdown_function('fast_cache_shutdown');
}

/**
 * Fake shutdown function.
 * Registers another shutdown function to make sure that
 * cache commit happens at the REALLY end of php request.
 */
function fast_cache_shutdown() {
  drupal_register_shutdown_function('fast_cache_commit_cache');
}

/**
 * Commits aggregated "set" and "delete"
 * queries to the cache backend.
 */
function fast_cache_commit_cache() {

  // Get list of all "set" and "delete" requests from static cache.
  // @see FastCache class if you want to know how it appears here.
  $fast_cache = &drupal_static('fast_cache', array());

  // Get variable that shows whether we use lazy cache feature or not.
  // If lazy cache feature is disabled (by default) it means that cache already
  // has been commited to the cache backend during the current request.
  $lazy_cache = variable_get('fast_cache_lazy_cache', FALSE);

  // Perform all aggregated cache delete requests at once.
  if (!empty($fast_cache['delete']) && !empty($lazy_cache)) {
    foreach ($fast_cache['delete'] as $cache_bin => $cache_delete) {
      $cache_backend = fast_cache_bin_backend($cache_bin);
      foreach ($cache_delete as $cid => $wildcard) {
        $cache_backend->clear($cid, $wildcard);
      }
    }
  }

  // Perform all aggregated cache set requests at once.
  if (!empty($fast_cache['set']) && !empty($lazy_cache)) {

    foreach ($fast_cache['set'] as $cache_bin => $cache) {
      $cache_backend = fast_cache_bin_backend($cache_bin);

      // If caching backend has method "setMultiple" then we'd better invoke
      // it instead of single "set" request.
      if (method_exists($cache_backend, 'setMultiple') && !empty($cache)) {
        $cache_backend->setMultiple($cache);
      }
      else {
        // Well, if multiple set is not possible, just execute default set
        // method.
        foreach ($cache as $cache_id => $cache_object) {
          $cache_backend->set($cache_id, $cache_object->data, $cache_object->expire);
        }
      }
    }
  }

  // Add the flag to the static cache which indicates that all cache has been
  // commited to a cache backend. We need this to cover very rare case when
  // somehow some function will be executed after this one and will invoke any
  // cache requests. So to avoid cache loss we will commit such request
  // directly using default cache backend object, because this function will
  // not be executed anymore.
  $fast_cache['commited'] = TRUE;

  // Save to cache information about requested cache ids for the current page.
  if (!empty($fast_cache['get']) && !empty($fast_cache['url'])) {
    cache_set($fast_cache['url'], $fast_cache['get'], FAST_CACHE_BIN);
  }
}
