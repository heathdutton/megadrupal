<?php

class FastCacheTestCase extends DrupalWebTestCase {

  protected $cache_bin = 'cache_fast_cache';
  protected $cache_cid = 'fc_test';
  protected $cache_data;

  public static function getInfo() {
    return array(
      'name' => 'Fast Cache cache requests',
      'description' => 'Ensure that fast_cache module does not break cache functionality.',
      'group' => 'FastCache',
    );
  }

  public function setUp() {

    parent::setUp(array('fast_cache'));

    $cache_backends = array();
    $cache_backends[] = drupal_get_path('module', 'fast_cache') . '/backends/fast_cache.inc';
    variable_set('cache_backends', $cache_backends);
    variable_set('cache_default_class', 'FastCache');

    $this->resetCacheData();
  }

  public function testSimpleAssertations() {

    cache_set($this->cache_cid, $this->cache_data, $this->cache_bin);
    $cache = cache_get($this->cache_cid, $this->cache_bin);
    $this->assertEqual($this->cache_data, $cache->data, 'Cache item was fetched after it was set.');

    cache_clear_all($this->cache_cid, $this->cache_bin);
    $cache = cache_get($this->cache_cid, $this->cache_bin);
    $this->assertFalse($cache, 'Cache item is not available after deletion by cache id.');

    $this->resetCacheData();
    cache_set($this->cache_cid, $this->cache_data, $this->cache_bin);
    $cache = cache_get($this->cache_cid, $this->cache_bin);
    $this->assertEqual($this->cache_data, $cache->data, 'Cache item was fetched after it was set.');

    cache_clear_all('*', $this->cache_bin, TRUE);
    $cache = cache_get($this->cache_cid, $this->cache_bin);
    $this->assertFalse($cache, 'Cache item is not available after flushing cache bin.');
  }

  protected function resetCacheData() {
    $this->cache_data = rand();
  }

}
