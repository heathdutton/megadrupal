<?php


/**
 * Implements hook_i18n_object_info_alter().
 */
function block_i18n_config_i18n_object_info_alter(&$info) {
  $info['block']['class'] = 'block_i18n_config_object';

  $properties_info = block_i18n_config_info();
  $properties = array();
  foreach ($properties_info as $property_name => $data) {
    $properties += array(
      $property_name => $data['info'],
    );
  }
  $info['block']['string translation']['properties'] += $properties;
}


/**
 * Implements block hook_form_FORM_ID_alter().
 */
function block_i18n_config_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'block_i18n_config_form_block_admin_configure_submit';
}

/**
 * Submit handler.
 *
 * We are removing all translations for this block if i18n mode has been
 * disabled.
 */
function block_i18n_config_form_block_admin_configure_submit($form, &$form_state) {
  $block = $form_state['values'];
  $info = block_i18n_config_info();

  foreach ($info as $property_name => $data) {
    if ($block['i18n_mode']) {
      if (!empty($data['property parents'])) {
        $property = drupal_array_get_nested_value($block, $data['property parents']);
        if (!empty($property)) {
          block_i18n_config_source_translation_update($property_name, $block['delta'], $property);
        }
      }
    }
    else {
      i18n_string_remove(array('blocks', $data['module'], $block['delta'], $property_name));
    }
  }
}



/**
 * Helper function for getting translated block properties.
 *
 * @param $delta
 *   Delta of the block we are searching for properties of.
 *
 * @return array
 *   Array of values of properties registered for the given block.
 */
function block_i18n_config_get_properties($delta) {
  $info = block_i18n_config_info();
  $properties = array();
  foreach ($info as $property_name => $data) {
    if (in_array($delta, $data['blocks'])) {
      $properties[$property_name] = i18n_string(array('blocks', $data['module'], $delta, $property_name), $data['property getter']($property_name, $delta));
    }
  }
  return $properties;
}


/**
 * Helper function for getting translated block property.
 *
 * @param $property
 *   Name of the property, as registered in hook_block_i18n_config_info().
 * @param $delta
 *   Delta of the block this property belongs to.
 *
 * @return string|null
 *   Translated string or original string if translation wasn't found, or NULL
 *   if property we are searching for, wasn't found registered.
 */
function block_i18n_config_get_property($property, $delta) {
  $info = block_i18n_config_info();

  if (isset($info[$property])) {
    if (in_array($delta, $info[$property]['blocks'])) {
      return i18n_string(array('blocks', $info[$property]['module'], $delta, $property), $info[$property]['property getter']($property, $delta));
    }
  }
  return NULL;
}

/**
 * Function caching information from hook_block_i18n_config_info() hooks.
 */
function block_i18n_config_info() {
  $info = &drupal_static(__FUNCTION__);
  if (!$info) {
    $info = module_invoke_all('block_i18n_config_info');
  }
  return $info;
}

/**
 * Helper function for updating source translation.
 *
 * @param $property_name
 *   Name of the property.
 * @param $delta
 *   Delta of the block this property belongs to.
 * @param $value
 *   Value of the property. Can be a string or array, array is for properties
 *   that have associated format with them and should have two keys: "value"
 *   and "format".
 */
function block_i18n_config_source_translation_update($property_name, $delta, $value) {
  $info = block_i18n_config_info();
  if (!empty($info[$property_name]) && !empty($info[$property_name]['module'])) {

    $options = array();
    if (is_array($value)) {
      $options = array(
        'format' => $value['format'],
      );
      $value = $value['value'];
    }

    i18n_string_update(array('blocks', $info[$property_name]['module'], $delta, $property_name), $value, $options);
  }
}