<?php

/**
 * @file
 * Controls the output of image fields like a TouchTouch-gallery.
 */

/**
 * Implements hook_help().
 */
function touchtouch_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#touchtouch':
      $output = '<p>' . t("TouchTouch is a module that integrates the !plugin for Imagefields. It's a plugin that enables a popup, but with the difference that it supports responsive design, touch gestures and a bunch of other stuff. The markup provided is easier to theme and customize to what the site theme needs.", array(
            '!plugin' => l(t('jQuery-plugin by Martin Angelov'), 'http://tutorialzine.com/2012/04/mobile-touch-gallery/', array(
              'attributes' => array(
                'target' => '_blank',
              ),
                )
            ),
              )
          ) . '</p>';

      $output .= "<h2>" . t('Usage') . "</h2>";
      $output .= '<p>' . t('You can use this module as a !fieldformatter or a !viewsformatter.', array(
            '!fieldformatter' => l(t('field-formatter'), 'admin/help/touchtouch', array(
              'fragment' => 'field-formatter',
            )),
            '!viewsformatter' => l(t('views-formatter'), 'admin/help/touchtouch', array(
              'fragment' => 'views-formatter',
            )),
          )) . '</p>';

      // As field formatters.
      $output .= '<h3 id = "field-formatter">' . t('Add as field formatter') . "</h3>";
      $output .= "<ol>";
      $output .= "<li>" . t('Enable the module') . "</li>";
      $output .= "<li>" . t('Edit the content type which contains the field you want to show as the TouchTouch-gallery.') . "</li>";
      $output .= "<li>" . t('Manage the display of the content type (usually this is found under www.yoursite.com/admin/structure/types/manage/__your_content_type__/display)') . "</li>";
      $output .= "<li>" . t("Change the format of the Image-field you'd like. Change it to TouchTouch gallery") . "</li>";
      $output .= "<li>" . t('Select an image style for the clickable preview image') . "</li>";
      $output .= "<li>" . t('... and the big image (not required)') . "</li>";
      $output .= "<li>" . t('Save the settings') . "</li>";
      $output .= "<li>" . t("That's it!") . "</li>";
      $output .= "</ol>";

      // In views.
      $output .= '<h3 id="views-formatter">' . t('Use in Views') . "</h3>";
      $output .= "<ol>";
      $output .= "<li>" . t('Enable the module') . "</li>";
      $output .= "<li>" . t('Add the fields or render the entities and follow the steps under Add as field formatter') . "</li>";
      $output .= "<li>" . t('When selected as fields, set the formatter of the field to TouchTouch gallery') . "</li>";
      $output .= "<li>" . t('Select an image style for the clickable preview image') . "</li>";
      $output .= "<li>" . t('... and the big image (not required)') . "</li>";
      $output .= "<li>" . t('Save the view') . "</li>";
      $output .= "<li>" . t("That's it!") . "</li>";
      $output .= "</ol>";
      break;
  }

  return $output;
}

/**
 * Implements hook_masonry_fields_field_types().
 */
function touchtouch_masonry_fields_field_types() {
  return array(
    'image' => array(
      'touchtouch',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function touchtouch_field_formatter_info() {
  return array(
    'touchtouch' => array(
      'label' => t('TouchTouch gallery'),
      'field types' => array('image'),
      'settings' => array(
        'thumbnail_image_style' => 'default',
        'large_image_style' => 'default',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function touchtouch_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $form = array();

  if ($display['type'] == 'touchtouch') {
    $form['thumbnail_image_style'] = array(
      '#type' => 'select',
      '#options' => image_style_options(),
      '#title' => t('Image style for clickable image'),
      '#description' => t('The image style for the image that functions as the trigger for the gallery'),
      '#default_value' => $settings['thumbnail_image_style'],
    );

    $form['large_image_style'] = array(
      '#type' => 'select',
      '#options' => image_style_options(),
      '#title' => t('Image style for the big images in the gallery'),
      '#description' => t('The image style for the images shown in the gallery.'),
      '#default_value' => $settings['large_image_style'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function touchtouch_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'touchtouch') {
    $summary .= t('Small image style: @image_style', array('@image_style' => $settings['thumbnail_image_style'])) . '<br/>';
    $summary .= t('Large image style: @image_style', array('@image_style' => $settings['large_image_style']));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see addressfield_staticmap_clean_address()
 * @see _maister_maps_render_google_maps()
 */
function touchtouch_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if (count($items)) {
    libraries_load('touchtouch');
    drupal_add_js('jQuery(function ($) { $(".touchtouch").touchTouch(); });', 'inline');
  }

  foreach ($items as $delta => $item) {
    $big_image_style = $display['settings']['large_image_style'];

    // Check if the image style is set for the big image.
    if (empty($big_image_style)) {
      // If not, use the original image.
      $big_image = file_create_url($item['uri']);
    }
    else {
      // If it is set, use that image style.
      $big_image = image_style_url($big_image_style, $item['uri']);
    }

    $element[$delta] = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['thumbnail_image_style'],
      '#path' => array(
        'path' => $big_image,
        'options' => array(
          'attributes' => array(
            // Add class.
            'class' => array('touchtouch'),
          ),
        ),
      ),
    );
  }

  return $element;
}

/**
 * Implements hook_libraries_info().
 */
function touchtouch_libraries_info() {
  $libraries = array();
  $libraries['touchtouch'] = array(
    'name' => 'TouchTouch',
    'vendor url' => 'http://tutorialzine.com/2012/04/mobile-touch-gallery/',
    'download url' => 'https://github.com/martinaglv/touchTouch',
    'version callback' => 'touchtouch_version',
    'files' => array(
      'js' => array(
        'touchTouch.jquery.js',
      ),
      'css' => array(
        'touchTouch.css',
      ),
    ),
    'variants' => array(
      'uncompressed' => array(
        'files' => array(
          'js' => array(
            'touchTouch.jquery.js',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Allow any version.
 *
 * @see touchtouch_libraries_info()
 */
function touchtouch_version() {
  return TRUE;
}
