<?php
// $Id: join_role_with_password.module,v 2.0 2011/05/06 12:00 francoud Exp $
/**
 * @file
 * Allows users to join one role using a given password.
 */

/**
 * Implementation of hook_perm().
 */
function join_role_with_password_permission() {
  return array(
    'administer join_role_with_password' => array(
      'title' => t('Administer join_role_with_password'),
     ),
  'join a role' => array(
    'title' => t('May join a role using a password'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function join_role_with_password_menu() {
  global $user;
  $items = array();

  $items['admin/config/people/role_password'] = array(
    'title' => 'Manage role passwords',
    'description' => 'Manage role passwords',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('join_role_with_password_addform'),
    'access_callback' => 'user_access',	  
    'access arguments' => array('administer join_role_with_password'),
    );

  $items['admin/config/people/role_password/add'] = array(
    'title' => 'Add role password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('join_role_with_password_addform'),
    'access_callback' => 'user_access',	  
    'access arguments' => array('administer join_role_with_password'),
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    );

  $items['admin/config/people/role_password/remove'] = array(
    'title' => 'Remove role passwords',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('join_role_with_password_remove_form'),
    'access_callback' => 'user_access',	  
    'access arguments' => array('administer join_role_with_password'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    );

  $items['admin/config/people/role_password/changepwd'] = array(
    'title' => 'Change role passwords',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('join_role_with_password_changepwd_form'),
    'access_callback' => 'user_access',
    'access arguments' => array('administer join_role_with_password'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    );

  $items['admin/config/people/role_password/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('join_role_with_password_admin_settings'),
    'access_callback' => 'user_access',
    'access arguments' => array('administer join_role_with_password'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    );

  $items['user/%user/join_role'] = array(
    'title' => 'Join or leave a role',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('join_role_with_password_join_form'),
    'access callback' => '_join_a_role_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    );


  return $items;
}


/**
 * Access callback for people/%user/join_role.
 */
function _join_a_role_access($currentaccount) {
  $my_id = $GLOBALS['user']->uid;
  $id_to_test = $currentaccount->uid; 

  //drupal_set_message("My id: ".$my_id);
  //drupal_set_message("Id to test: ".$id_to_test);


  if (($my_id == $id_to_test) && (user_access('join a role'))) {
    return 1;
  }
  else {
      return 0;
  }

}


/**
 * Implementation of hook_form():  form to ADD a password for one role;
 *                                 called from admin/user/role_password/add
 */

function join_role_with_password_addform() {

  $form = array();

  join_role_with_password_check_garbage_collection(); 

  $form['roles'] = array(
    '#title' => t('Add password to an existing role'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

 /**
  *   query to select roles that have NO password defined in the roles_passwords table
  */
  $query = "SELECT rl.rid, rl.name FROM {roles_passwords} rp
              RIGHT JOIN {role} rl ON rp.rid = rl.rid
              WHERE rp.rid IS NULL AND rl.rid > :rid";
  $queryresult = db_query($query,array(":rid"=>2)); // 3 to exclude administrator role
  
  //print $queryresult->rowCount();

  if (!$queryresult) {
    drupal_set_message(t('Error from the query!'));
    return;
  }
  elseif ($queryresult->rowCount() ==0) {
    // drupal_set_message(t('There is no role you can add a password!'));
	$default_message = t('There is no role you can add a password!');
	$form['roles']['message'] = array(
      '#markup' => $default_message,
      '#prefix' => '<div id="jrwp-message">',
      '#suffix' => '</div>',
    );
  return $form;
  }  

 
  /**
    *  Building a form filter with all roles that have no password defined
    */
  
  foreach ($queryresult as $role) {
    $filter_roles[$role->rid] = $role->name;
	//print($role->name);
  }

 $form['role_options'] = array(
    '#type' => 'value',
    '#value' => $filter_roles,
 );

  
  /**
   *   implementation of the form; this will users able to join roles (giving a password) and 
   *   leave roles (no password required). 
   */

  $form['roles']['add_this_role'] = array(
    '#title' => t('Add a password to this role'),
    '#type' => 'select',
    '#description' => t('Authorized users will be able to join this role using a password'),
    '#options' => $form['role_options']['#value'],
   );
  
  $form['roles']['password'] = array(
    '#type' => 'password',
    '#title' => t('Insert a password'),
    '#description' => t('Give a password to this role')
  );
  
  $form['roles']['password2'] = array(
    '#type' => 'password',
    '#title' => t('Repeat the password'),
    '#description' => t('Repeat the password')
  );

  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Give a password to this role'),
  );

  
  return $form;
}


/**
 * Implementation of hook_form(): validating the addform form
 * 
 * @param $form_id     The form identification
 * @param $form_state  Values from the form
 * 
 */

function join_role_with_password_addform_validate($form, &$form_state) {

  $new_password  = $form_state['values']['password'];
  $new_password2 = $form_state['values']['password2'];



  if ($new_password != $new_password2) {

    form_set_error('password', t('Passwords mismatch'));
  }

  if  (!join_role_with_password_pass_is_good ($new_password)) {
    form_set_error('password', t('Invalid password')); 
  }
}


/**
 * Implementation of hook_form(): submitting the addform form
 * 
 * @param $form_id  The form identification
 * @param $form_state Values from the form
 * 
 */
function join_role_with_password_addform_submit($form, &$form_state) {

  $role_key      = $form_state['values']['add_this_role'];
  $role_to_add   = $form_state['values']['role_options'][$role_key];
  $new_password  = $form_state['values']['password'];
  $new_password2 = $form_state['values']['password2'];
  $crypt_pwd     = md5($new_password);
 
 
  if (user_access('administer join_role_with_password') && isset($role_key)) {
   /* that's old way - will no use any longer. 
    $query = "INSERT INTO {roles_passwords} (rid, pass) VALUES (:d, :s)";
     db_query($query, 
	 array(':d'=>$role_key,
	      ':s'=>$crypt_pwd)
     );
    */
  /* this is the D7 way */
    db_insert('roles_passwords') // Table name no longer needs {}
      ->fields(array(
        'rid' => $role_key,
        'pass' => $crypt_pwd,
       ))
      ->execute();
      drupal_set_message(t('Password added to role: %role', array('%role' => $role_to_add)));
  }
  else {
    drupal_set_message(t('Access denied'));
  }

}
 

/**
 * Implementation of hook_form():  form to REMOVE  a password for one role;
 *                                 
 */
function join_role_with_password_remove_form() {

  $form = array();
  join_role_with_password_check_garbage_collection(); 
  
  $form['usedroles'] = array(
    '#title' => t('Remove password from a role'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    #collapsed' => FALSE,
  );
   
  $query1 = "SELECT rp.rid,rp.pass,rl.name FROM {role} rl, {roles_passwords} rp WHERE rp.rid = rl.rid";
  $queryresult1 =  db_query($query1);
 
  if (!$queryresult1) {
    drupal_set_message(t('Error from the query!'));
  }
  elseif ($queryresult1->rowCount() ==0) {
	$default_remove_message=t('List of roles with password is empty');
	//drupal_set_message('ecco '.$default_remove_message);
	$form['usedroles']['message'] = array(
      '#markup' => $default_remove_message,
      #prefix' => '<div id="jrwp-message">',
      '#suffix' => '</div>',
     );
	 	 
    return $form;
  }  
   
  foreach ($queryresult1 as $usedrole) {
    $filter_used_roles[$usedrole->rid] = $usedrole->name;
  }
  
  $form['usedrole_options'] = array(
    '#type' => 'value',
    '#value' => $filter_used_roles
  );
  
  $form['usedroles']['role_to_remove'] = array(
    '#title' => t('Remove password from this role'),
    '#type' => 'select',
    '#description' => t('If you remove password from a role, users will be no more able to join it using a password'),
    '#options' => $form['usedrole_options']['#value'],
  );
  

  /*  this could be alternative to the next submit
    $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Remove password from this role',
     );
    return $form;
   */
   
  return confirm_form($form,
    t('Remove role password'),
    'admin/config/people/role_password/remove',
	t('This action cannot be undone.'),
    t('Remove password from this role'),
	t('Cancel')  
  );
   
}


/**
 * Implementation of hook_form(): validating the remove form
 * 
 * @param $form_id     The form identification
 * @param $form_state  Values from the form
 * 
 */
function join_role_with_password_remove_form_validate($form, &$form_state) {

  if (!user_access('administer join_role_with_password')) {
    drupal_set_message(t('Access denied'));
    return;
  }

  $role_key = $form_state['values']['role_to_remove']; 
  
  if (!isset($role_key)) {
    form_set_error('role_to_remove', t('Invalid role id'));
	return $form;
  }
  else {
    $role_is_in_table = join_role_with_password_check_has_password($role_key);
    if (!$role_is_in_table) {
      form_set_error('role_to_remove', t('Severe error: role is not in the table'));
      return $form;
    }
   }
}


/**
 * Implementation of hook_form(): submitting the remove form
 * 
 * @param $form_id    The form identification
 * @param $form_stats 	Values from the form
 * 
 */
function join_role_with_password_remove_form_submit($form, &$form_state) {

  $page_content   = '';
  $role_key       = $form_state['values']['role_to_remove']; 
  $role_to_remove = $form_state['values']['usedrole_options'][$role_key];
  
  // drupal_set_message('Removing '.$role_key.' - '.$role_to_add);
  if (user_access('administer join_role_with_password') && isset($role_key)) {
    $query = "DELETE FROM {roles_passwords} WHERE rid = :d ";
    $query_result = db_query($query, 
	                         array(':d'=>$role_key)
                            );
    if ($query_result) {
      $page_content .= t('Removed password from role: %role', array('%role' => $role_to_remove));
    }
	else {
      $page_content .= t('Error from query!');
    }
  }
  else { 
    $page_content .= t('Access denied');
  }
  drupal_set_message($page_content);

}


/**
 * Implementation of hook_form():  form to CHANGE  a password for one role;
 *
 */
function join_role_with_password_changepwd_form() {

  $form = array();
  join_role_with_password_check_garbage_collection(); 

  $form['usedroles'] = array(
    '#title' => t('Change password for a role'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $query1 = "SELECT rp.rid, rp.pass,rl.name FROM {role} rl,{roles_passwords} rp WHERE rp.rid = rl.rid";
  $queryresult1 =  db_query($query1);

  if (!$queryresult1) {
    drupal_set_message(t('Error from the query!'));
  }
  elseif ($queryresult1->rowCount() ==0) {
    // drupal_set_message(t('List of roles with password is empty'));
	$default_change_message=t('List of roles with password is empty');
	$form['usedroles']['message'] = array(
      '#markup' => $default_change_message,
      '#prefix' => '<div id="jrwp-message">',
       '#suffix' => '</div>',
    );
	 drupal_set_message($default_message);
    return $form;
  }    
  
  foreach ($queryresult1 as $usedrole) {
    /* $output .= $role->rid . ' ('.$role->name. ') <br/>'; */
    $filter_used_roles[$usedrole->rid] = $usedrole->name;
  }
 
  $form['usedrole_options'] = array(
    '#type' => 'value',
    '#value' => $filter_used_roles
  );
 
  $form['usedroles']['role_to_change'] = array(
    '#title' => t('Change password to this role'),
    '#type' => 'select',
    '#description' => t('Choose what role to change the password'),
    '#options' => $form['usedrole_options']['#value'],
  );
  
  /*
   * This could be optional, in the future...
  
    $form['usedroles']['old_password'] = array(
      '#title' => t('old_password'),
      '#type' => 'password',
      '#description' => t('Please enter old password - this is for security check')
     );
  */

  $form['usedroles']['new_password'] = array(
    '#title' => t('New password'),
    '#type' => 'password',
    '#description' => t('You may enter a new password for this role')
  );
 
  $form['usedroles']['new_password2'] = array(
    '#title' => t('New password again'),
    '#type' => 'password',
    '#description' => t('Enter new password again')
  );
  

    /* drupal_set_message(t($page_content));*/

    /* This could be alternative to the next
     $form['submit'] = array(
       '#type' => 'submit',
       '#value' => 'change password',
     );
     return $form; 
    */

  return confirm_form($form,
    t('Change role password'),
    'admin/config/people/role_password/changepwd', t('This action cannot be undone.'),
    t('Change password to this role'), t('Cancel')  );

}

/**
 * Implementation of hook_form(): validating the changepwd form
 * 
 * @param $form_id    The form identification
 * @param $form_state Values from the form
 * 
 */
function join_role_with_password_changepwd_form_validate($form, &$form_state) {

  $role_key       = $form_state['values']['role_to_change']; 
 
  $query          = "SELECT pass FROM {roles_passwords} WHERE rid = :d";
  $queryresult    =  db_query($query, array(':d'=>$role_key));
  //$previous_pwd = db_result($queryresult);
  $previous_pwd   = $queryresult->fetchField();
  
  /*$old_password = md5($form_state['values']['old_password']); */

  $new_password   = $form_state['values']['new_password'];
  $new_password2  = $form_state['values']['new_password2'];

  if ($new_password != $new_password2) {
    form_set_error('password', t('Passwords mismatch'));
  }

  if  (!join_role_with_password_pass_is_good ($new_password)) {
    form_set_error('password', t('Invalid password')); 
  }

  /* This could be an option in the future
       if ($old_password != $previous_pwd) {
        form_set_error('password', t('old password mismatch'));
       }
     */

}


 
/**
 * Implementation of hook_form(): submitting the changepwd form
 * 
 * @param $form_id    The form identification
 * @param $form_state Values from the form
 * 
 */ 
function join_role_with_password_changepwd_form_submit($form, &$form_state) {  

  $page_content   = '';
  $role_key       = $form_state['values']['role_to_change']; 
  $role_to_change = $form_state['values']['usedrole_options'][$role_key];
  $new_pwd        = $form_state['values']['new_password'];
  $crypt_pwd      = md5($new_pwd);

  /* drupal_set_message('changing '.$role_key.' - '.$role_to_change. ' - '.$new_pwd);  */
  if (user_access('administer join_role_with_password') && isset($role_key)) {
    $query_result = db_update('roles_passwords') // Table name no longer needs {}
      ->fields(array(
                'pass' => $crypt_pwd
              ))
      ->condition('rid', $role_key, '=')
      ->execute();
    if ($query_result < 1) {
      drupal_set_message(t('Error from the query!'));
    }
	else {
      $page_content .= t('Role %role updated - password changed!', array('%role' => $role_to_change));
    }
  }
  else { 
    $page_content .= t('Access denied');
  }
  drupal_set_message($page_content);
}


/**
  * Implementation of hook_form():  form to allow an user to Join or Leave a role;
  *                                 called from user/x/join_role
  */
  
function join_role_with_password_join_form() {

  global $user;
  if (!user_access('join a role')) {
    drupal_set_message(t('Access denied'));
    return;
  }
  $form = array();
  $query1 = "SELECT rp.rid,rp.pass,rl.name FROM {role} rl,{roles_passwords} rp WHERE rp.rid = rl.rid";
  $queryresult1 =  db_query($query1);

  if (!$queryresult1) {
     drupal_set_message(t('Error from the query!'));
  }
  elseif ($queryresult1->rowCount() ==0) {
      //drupal_set_message(t('List of roles with password is empty'));
	  $default_message=t('List of roles with password is empty');
	  $form['join_roles']['message'] = array(
        '#markup' => $default_message,
        '#prefix' => '<div id="jrwp-message">',
        '#suffix' => '</div>',
      );
    return $form;
  }  

  $filter_removable_roles[0] = '(none)';
  $filter_joinable_roles[0]  = '(none)';

  foreach ($queryresult1 as $usedrole) {
    $the_role = $usedrole->name;
    $rid = $usedrole->rid;

    if (!in_array($usedrole->name, $user->roles)) {
      $filter_joinable_roles[$usedrole->rid] = $usedrole->name;
    }
	else {
      $filter_removable_roles[$usedrole->rid] = $usedrole->name;
    }
  }
  
  $count_joinable  = count($filter_joinable_roles);
  $count_removable = count($filter_removable_roles);
//  drupal_set_message($count_joinable);
//  drupal_set_message($count_removable);
 
   /* uncomment for testing only
     $current_list_message = "List of your active roles:";
     foreach($user->roles as $removable_element) {
       $current_list_message.= " ".$removable_element.",";
    }
    drupal_set_message($current_list_message);
   */
 
  $form['joinable_options'] = array(
    '#type' => 'value',
    '#value' => $filter_joinable_roles,
    '#default_value' => 0,
  );
  
  $form['removable_options'] = array(
    '#type' => 'value',
    '#value' => $filter_removable_roles,
    '#default_value' => 0,
  );
  
  
  $form['join_roles'] = array(
    '#title' => t('Join a role'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  

  if ($count_joinable > 1) { 
    $form['join_roles']['role_to_join'] = array(
      '#title' => t('Join this role'),
      '#type' => 'select',
      '#description' => t('You can join one of these roles if you know the correct password'),
      '#options' => $form['joinable_options']['#value'],
    );
  
    $form['join_roles']['password_join'] = array(
      '#type' => 'password',
      '#title' => t('Insert a password'),
      '#description' => t('Enter the correct password to join this role')
    );
    }
	else {
      $form['join_roles']['role_to_join'] = array(
        '#title' => t('Join this role'),
        '#type' => 'hidden',
        '#value' => '0',
      );

      $default_message = '<p>' . t('There is no role that you can join') . '</p>';
      $form['join_roles']['message'] = array(
        '#markup' => $default_message,
        '#prefix' => '<div id="jrwp-message">',
        '#suffix' => '</div>',
      );

    }
  
  $leave_option = variable_get('jrwp_options_leave_role',1);
  // drupal_set_message($leave_option);
  if ($leave_option) {
    $form['leave_roles'] = array(
      '#title' => t('Leave a role'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    if ($count_removable > 1) { 
      $form['leave_roles']['role_to_leave'] = array(
        '#title' => t('Leave this role'),
        '#type' => 'select',
        '#description' => t('You can leave one of this roles; you dont need to know the password to leave it'),
        '#options' => $form['removable_options']['#value'],
    );
  
    /* this could  be a future option, something like "enforce using password to leave role"?
      $form['leave_roles']['password_leave'] = array(
        '#type' => 'password',
        '#title' => t('Insert a password'),
        '#description' => t('Enter the correct password to leave this role')
      ); 
    */ 
    }
	else {
      $form['leave_roles']['role_to_leave'] = array(
        '#title' => t('Leave this role'),
        '#type' => 'hidden',
        '#value' => '0',
      );
      $default_message = '<p>' . t('There is no role that you can leave') . '</p>';
      $form['leave_roles']['message'] = array(
        '#markup' => $default_message,
        '#prefix' => '<div id="jrwp-message">',
        '#suffix' => '</div>',
      );
    }
  
  }
  else {
    $form['leave_roles']['role_to_leave'] = array(
      '#title' => t('Leave this role'),
      '#type' => 'hidden',
      '#value' => '0',
    );
  
   /***
     enable this for a verbose message... 
     $default_message = '<p>' . t('The leave section has been disabled') . '</p>';
     $form['leave_roles']['message'] = array(
       '#markup' => $default_message,
       '#prefix' => '<div id="jrwp-message">',
       '#suffix' => '</div>',
      );
    drupal_set_message('leave option disabled');
   ***/

  }

  $form['submit'] = array(
    '#type' => 'submit',
     '#value' => t('Do it now'),
  );

  return $form;  
 
  /* this could be alternative to the previous simple submit form
    return confirm_form($form,
      t('Join this role'),
      'admin/user/role_password/remove', t('This action cannot be undone.'),
      t('Remove password from this role'), t('Cancel')  );
  */

}


/**
 * Implementation of hook_form(): submitting the Join form (validation built inside this function)
 * 
 * @param $form_id    The form identification
 * @param $form_state Values from the form
 * 
 */
function join_role_with_password_join_form_submit($form, &$form_state) {

  global $user;
  if (!user_access('join a role')) { 
    drupal_set_message(t('Access denied'));
    return 0;
  }
  $role_join_key = $form_state['values']['role_to_join']; 
  $role_to_join = $form_state['values']['joinable_options'][$role_join_key];
  $role_leave_key = $form_state['values']['role_to_leave']; 

  if ($role_join_key != 0) {
    $clear_password = $form_state['values']['password_join']; 
    //drupal_set_message($clear_password);

    if (!isset($clear_password))  {
      form_set_error('password_join', t('Missing password'));
      return $form;
    } 
    if  (!join_role_with_password_pass_is_good($clear_password,TRUE) || (trim($clear_password) == '')) {
      form_set_error('password_join', t('Invalid password')); 
      return $form;
    }

    /* *************************** */
    /* 
     * these checks should be unuseful now - we should get "an illegal choice has been detected"...
     * but i keep them; better be more safe! :) 
     */

    if (!join_role_with_password_check_exists($role_join_key)) {
      form_set_error('role_to_join', t('Sorry, that role does no more exists')); 
      return $form;
    }

    $role_join_key = $form_state['values']['role_to_join']; 

    $role_is_in_table = join_role_with_password_check_has_password($role_join_key);
    if (!$role_is_in_table) {
      form_set_error('role_to_remove', t('Severe error: role is not in the table'));
      return $form;
    }
	/* *************************** */
	
	
    $hashed_pwd = md5($clear_password);
    $query = "SELECT pass FROM {roles_passwords} WHERE rid = :d";
    $result = db_query($query, array(':d'=>$role_join_key));
    //$hashed_original_pwd = db_result($result, 0);
    $hashed_original_pwd = $result->fetchField();

    if ($hashed_pwd == $hashed_original_pwd) {
      $check=db_insert('users_roles') // Table name no longer needs {}
        ->fields(array(
                  'uid' => $user->uid,
                   'rid' => $role_join_key,
                 ))
        ->execute();
      //drupal_set_message($check);
	  drupal_set_message(t("You have joined the role: %role_name ", array('%role_name' => $role_to_join)));
    }
	else {
      form_set_error('password_join', t('Invalid password for role: %role_name', array('%role_name' => $role_to_join)));
      /*     return $form;*/
    } 
	
  }  /* end of if $role_join_key */
  
  
  
  if ($role_leave_key != 0) {
  //drupal_set_message('vuole lasciare: '.$role_leave_key);
  

  /* *************************** */
    /* 
     * this check should be unuseful now - we should get "an illegal choice has been detected"...
     * but i keep them; better be more safe! :) 
     */

  if (!join_role_with_password_check_exists($role_leave_key)) {
      form_set_error('role_to_join', t('Sorry, that role does no more exists')); 
      return $form;
    }

   /* ******************************** */
   
    $role_to_leave = $form_state['values']['removable_options'][$role_leave_key];
    $query = db_delete('users_roles');
    $query->condition(
      db_and()
        ->condition('rid', $role_leave_key, '=')
        ->condition('uid', $user->uid, '=')
     );
   $num_deleted = $query->execute();
    if ($num_deleted) {
      drupal_set_message(t('You have left role: %role', array('%role' => $role_to_leave)));
    }
	else {
      drupal_set_message(t('Error from the query!'),'error');
    }
		   
 
  } /* end of if $role_leave_key */
 
  return $form;
}


/* ******************************************** */

/**
 * Function to check if a given role is in the roles_passwords table
 * 
 * @param $role_id  The number of the role
 * 
 * @return $bool True or false
 * 
 */
function join_role_with_password_check_has_password($role_id) {

  if (!isset($role_id)) {
    drupal_set_message(t('Invalid call - $role_id does not exist'));
    return FALSE;
  }

  $query = "SELECT rid FROM {roles_passwords} WHERE rid = :d";
  $result_check = db_query($query, 
     array(':d' => $role_id)
   );

  if ($result_check) {
    return TRUE;
  }
  else {
    return FALSE;
  }

}


/**
 * Function to check if a given role is in the role table
 * (if not, maybe admin. deleted it while user is working?
 * 
 * @param $role_id  The number of the role
 * 
 * @return $bool True or false
 * 
 */
function join_role_with_password_check_exists($role_id) {

  if (!isset($role_id)) {
    drupal_set_message(t('Invalid call - $role_id does not exist'));
    return FALSE;
  }

  $query = "SELECT rid FROM {role} WHERE rid = :d";
  $result_check = db_query($query, array(':d'=>$role_id))->rowCount();
//  drupal_set_message('checkpoint'.$result_check);  
  if ($result_check > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }

}


/**
 * Function to check if a given password is well formed; also include a length check 
 * (this maybe should be an option in the future)
 * 
 * @param $password  A password
 * 
 * @return $bool True or false
 * 
 */
function join_role_with_password_pass_is_good($pass,$quiet=FALSE) {
 
  $good_password = TRUE;
  
  $minimum_password_length = variable_get('jrwp_minimum_password_length',6);
  if (($minimum_password_length > 0) && (strlen($pass) < $minimum_password_length )) {
    $good_password = FALSE;
   if (!$quiet) { drupal_set_message(t('Password too short'),'error');}
  }

  if (trim($pass) == "")  {
    $good_password = FALSE;
  if (!$quiet)  { drupal_set_message(t('Password is blank or empty'),'error');}
  }

  /** still must refuse passwords as "   something" **/
  
  
  return $good_password;

}




/**
 * Function to remove roles from roles_passwords that are no more
 * defined in the "role" table because administrator deleted them.
 *  
 */

function join_role_with_password_check_garbage_collection() {

  if (!user_access('administer join_role_with_password')) {
    return;
  }

  $query = "SELECT rp.rid FROM {roles_passwords} rp LEFT JOIN {role} rl ON rp.rid = rl.rid WHERE rl.rid IS NULL";
  
  $queryresult =  db_query($query);
  

  if (!$queryresult) {
    drupal_set_message(t('Error from the query!'));
    return;
  }
  
  /* for test purpose only:
  elseif ($queryresult->rowCount() ==0) {
    drupal_set_message(t('Nothing to clean up'));  
    return;
  } */ 
 
/**
 *  Deleting all roles in "roles_passwords" table that are no more present in the "role" table
 */
  foreach ($queryresult as $role) {

     /* drupal_set_message ('Must remove: '.$role->rid); */


  	  $query = db_delete('roles_passwords');
          $query->condition('rid', $role->rid, '=');
          $num_deleted=$query->execute();

	   if ($num_deleted) {
		drupal_set_message(t('Database cleanup: role %removed has been removed.', array('%removed' => $role->rid)));
		}
		  
		  
  }

}

/**
 * Implementation of hook_form():  form to provide administrative settings for the module;
 *                                 Needs more work... :)               
 */
function join_role_with_password_admin_settings() {
//drupal_set_message('niente');


  $form['jrwp_options_leave_role'] = array(
    '#title' => t('Manage the leave role section'),
	'#description' => t('If disabled, users will not be able to leave a role; they can only join.'),
    '#type' => 'select',
    '#options' => array(
	t('disabled'),
	t('enabled'),
	),
	'#default_value' => variable_get('jrwp_options_leave_role',1),
	);

	
	
  for ($i = 0; $i <= 10; $i++) {
   $length_options[] = $i;
  
}

  $form['jrwp_minimum_password_length'] = array(
    '#title' => t('Enforce minimum password length'),
	'#description' => t('Zero means no minimum length'),
    '#type' => 'select',
    '#options' => $length_options,
	'#default_value' => variable_get('jrwp_minimum_password_length',6),
	);

	
   return system_settings_form($form);
}
