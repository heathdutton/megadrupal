<?php

/**
 * @file
 * Implements KBC paypage payment services for use in Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the KBC paypage payment method
 */
function commerce_kbcpaypage_commerce_payment_method_info() {
  $payment_methods = array();

  $offsite = TRUE;

  $payment_methods['kbcpaypage'] = array(
    'base' => 'commerce_kbcpaypage',
    'title' => t('KBC Paypage'),
    'short_title' => t('KBC Paypage'),
    'display_title' => t('KBC Paypage'),
    'description' => t('Integrates KBC Paypage payment system'),
    'terminal' => FALSE,
    'offsite' => $offsite,
    'offsite_autoredirect' => $offsite,
    'callbacks' => array(
      'submit_form' => 'commerce_kbcpaypage_submit_form',
      'submit_form_submit' => 'commerce_kbcpaypage_submit_form_submit',
    ),
  );


  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_kbcpaypage_menu() {
  $items = array();

  $items['commerce-kbcpaypage/callback'] = $items['commerce_kbcpaypage/callback'] = array(
    'page callback' => 'commerce_kbcpaypage_callback',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_kbcpaypage_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if(!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a KBC Paypage option.
    foreach($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);
      //If we find KBC Paypage option.
      if($method_id == 'kbcpaypage') {
        $payment_settings = commerce_payment_method_instance_load('kbcpaypage|commerce_payment_kbcpaypage');
          // Prepare the replacement of radio button text with icons.
          $icons = commerce_kbcpaypage_icons();
          $value = t('!logo KBC Paypage', array('!logo' => $icons['kbc']));
          unset($icons['kbc']);
          // Only show include text when the user has enabled the icons.
          if(count($icons) > 1) {

            $value .= '<div class="commerce-kbcpaypage-icons"><span class="label">'. t('Includes:') . '</span>' . implode(' ', $icons) . '</div>';

            // Add the CSS.
            $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_kbcpaypage') . '/css/commerce_kbcpaypage.css';

        }
      }
    }
  }
}

/**
 * Returns the icons for the different payment methods
 */
function commerce_kbcpaypage_icons($all = FALSE) {
  $icons = array();
  // Add the KBC icon
  $path = drupal_get_path('module', 'commerce_kbcpaypage') . '/images/';
  $variables = array(
    'path' => $path . 'logo.png',
    'title' => 'Logo',
    'alt' => 'Logo',
    'attributes' => array(
      'class' => array('commerce-kbcpaypage-icon'),
    ),
  );

  $icons['kbc'] = theme('image', $variables);

  foreach(commerce_kbcpaypage_payment_methods($all) as $name => $title) {
    $variables = array(
      'path' => $path . $name . '.png',
      'title' => $title,
      'alt' => $title,
      'attributes' => array(
        'class' => array('commerce-kbcpaypage-icon',
        ),
      ),
    );
    $icons[$name] = theme('image', $variables);
  }
  return $icons;
}

/**
 * Returns all available payment options of the KBC paypage service
 */
function commerce_kbcpaypage_payment_methods($all) {
  $payment_settings = commerce_payment_method_instance_load('kbcpaypage|commerce_payment_kbcpaypage');
  $options = array(
    'kbconline' => 'KBC Online',
    'cbconline' => 'CBC Online',
    'bancontact' => 'Bancontact/Mister Cash',
    'visa' => 'Visa',
    'mastercard' => 'Mastercard',
    'americanexpress' => 'American Express',
    'dinersclub' => 'Diners Club',
    'belfiusdirectnet' => 'Belfius Direct Net',
    'giropay' => 'Giropay',
    'ideal' => 'iDEAL',
    'inghomepay' => 'ING HomePay',

    'banktransfer' => 'Bank transfer BE',
  );
  if(isset($payment_settings['settings']['payment_methods']['options']) && !($all)) {
    foreach($payment_settings['settings']['payment_methods']['options'] as $name => $value) {
      if(!$value) {
        unset($options[$name]);
      }
    }
  }
  return $options;
}

/**
 * Creates the different options including PM and BRAND values needed to submit to the end service.
 */
function commerce_kbcpaypage_payment_params() {
  $options = array(
    'KBC Online|KBC Online' => 'kbconline',
    'CBC Online|CBC Online' => 'cbconline',
    'CreditCard|BCMC' => 'bancontact',
    'CreditCard|VISA' => 'visa',
    'CreditCard|MasterCard' => 'mastercard',
    'CreditCard|American Express' => 'americanexpress',
    'CreditCard|Diners Club' => 'dinersclub',
    'Belfius Direct Net|Belfius Direct Net' => 'belfiusdirectnet',
    'giropay|giropay' => 'giropay',
    'iDEAL|iDEAL' => 'ideal',
    'ING HomePay|ING HomePay' => 'inghomepay',

    'Bank transfer BE|Bank transfer BE' => 'banktransfer',
  );
  $path = drupal_get_path('module', 'commerce_kbcpaypage') . '/images/';
  $payment_settings = commerce_payment_method_instance_load('kbcpaypage|commerce_payment_kbcpaypage');
  // Unset the options that are not chosen in this store.
  if (isset($payment_settings['settings']['payment_methods']['options'])) {
    foreach ($options as $key => $option) {
      if($payment_settings['settings']['payment_methods']['options'][$option] === 0) {
        unset($options[$key]);
      }
    }
  }
  foreach($options as &$option ){
    $variables = array(
      'path' => $path . $option . '-large.png',
      'title' => $option,
      'alt' => $option,
      'attributes' => array(
        'class' => array('commerce-kbcpaypage-large-icon',
        ),
      ),
    );
    $image = theme('image', $variables);
    $option = $image;
  }
  return $options;
}

/**
 * Creates select option for the available payment optiosn
 */
function _commerce_kbcpaypage_create_selectable_form() {
  $options = commerce_kbcpaypage_payment_methods(FALSE);
  $icons = commerce_kbcpaypage_icons();
  unset($icons['kbc']);
  $params = commerce_kbcpaypage_payment_params();
  $path = drupal_get_path('module', 'commerce_kbcpaypage') . '/css/';
  $form['payment_options'] = array(
    '#type' => 'radios',
    '#title' => t('Select your payment option'),
    '#options' => $params,
    '#required' => TRUE,
    '#attached' => array(
      'css' => array(
        $path . 'commerce_kbcpaypage_detail.css',
      )
    )
  );
  return $form;
}
/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules
 */
function commerce_kbcpaypage_settings_form($settings = NULL) {
  $form = array();
  $languages = language_list();
  $language_codes = _commerce_kbcpaypage_get_language_code_list();

  $settings = (array) $settings + array(
    'account' => 'test',
    'pspid' => '',
    'currency' => variable_get('commerce_default_currency', 'USD'),
    'language' => '',
    'sha_in' => '',
    'sha_out' => '',
    'language_list' => array(),
  );

  // BASIC settings
  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('KBC Paypage account'),
    '#options' => array(
      'test' => ('Test account - for testing purposes only'),
      'prod' => ('Production account - use for processing real transactions'),
    ),
    '#default_value' => $settings['account'],
  );
  $form['pspid'] = array(
    '#type' => 'textfield',
    '#title' => t('PSPID'),
    '#description' => t('Your KBC Paypage PSPID login username'),
    '#default_value' => $settings['pspid'],
  );
  $form['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => commerce_kbcpaypage_currencies(),
    '#default_value' => $settings['currency'],
  );
  $form['language_list'] = array(
    '#type' => 'fieldset',
    '#title' => t('Language codes'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $default_language_code = (isset($settings['language_list']['default_language'])) ? $settings['language_list']['default_language'] : 'en_US';
  foreach ($languages as $language) {
    // Attempt to provide an intelligent default based on the language prefix.
    // e.g. language prefix 'fr' would create the default KBC paypage language 'fr_FR'.
    $default_prefix_code = explode('-', $language->prefix);
    $default_prefix_code = $default_prefix_code[0] . '_' . drupal_strtoupper($default_prefix_code[0]);
    // Verify whether the intelligent default value is valid. If not, fall back to default language code
    $default_prefix_code = (in_array($default_prefix_code, array_keys($language_codes))) ? $default_prefix_code : $default_language_code;

    $form['language_list'][$language->language] = array(
      '#type' => 'select',
      '#title' => check_plain($language->name),
      '#options' => $language_codes,
      '#default_value' => (isset($settings['language_list'][$language->language])) ? $settings['language_list'][$language->language] : $default_prefix_code,
      '#description' => t('Language code. For instance: en_US, nl_NL, fr_FR, ...'),
    );
  }
  $form['language_list']['default_language'] = array(
    '#type' => 'select',
    '#title' => 'Default',
    '#options' => $language_codes,
    '#default_value' => $default_language_code,
    '#description' => t('Language code. For instance: en_US, nl_NL, fr_FR, ...'),
  );

  // SECURITY settings
  $form['sha_in'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-IN Pass phrase'),
    '#description' => t('The SHA-IN Pass phrase as entered in KBC paypage technical settings - "Data and origin verification" tab.'),
    '#default_value' => $settings['sha_in'],
  );
  $form['sha_out'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-1-OUT Pass phrase'),
    '#description' => t('The SHA-1-OUT Pass phrase as entered in KBC paypage technical settings - "Transaction feedback" tab.'),
    '#default_value' => $settings['sha_out'],
  );
  // Predefine the payment method on your site
  $form['predefined'] = array(
    '#type' => 'fieldset',
    '#title' => t('Predefine selection'),
    '#description' => t('Selecting this will allow users to select the payment option on your site'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['predefined']['setting'] = array(
    '#type' => 'checkbox',
    '#title' => t('Predefine the payment on your site'),
    '#default_value' => (isset($settings['predefined']['setting']) ? $settings['predefined']['setting'] : FALSE),
  );
  // Payment methods with icons
  $form['payment_methods'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment options'),
    '#description' => t('This is only a setting for the icons displayed on the checkout form'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  // Load icons and options, using TRUE so we get all methods without filtering.
  $options = commerce_kbcpaypage_payment_methods(TRUE);
  $icons = commerce_kbcpaypage_icons(TRUE);

  unset($icons['kbc']);
  // Prepend the name to the image tag
  foreach($icons as $name => &$icon) {
    $icon .= '<span class="commerce-kbcpaypage-icon-title">' . $options[$name] . '</span>';
  }

  $form['payment_methods']['options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Options'),
    '#description' => t('Select the payment methods you use.'),
    '#options' => $icons,
    '#default_value' => $settings['payment_methods']['options'],
  );

  // Let users use a dynamic template
  $form['payment_template'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dynamic template'),
    '#description' => t('Use the predefined dynamic template of KBC. You need to enable dynamic templates in the backoffice of the KBC paypage.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['payment_template']['setting'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use KBC Paypage dynamic template'),
    '#default_value' => (isset($settings['payment_template']['setting']) ? $settings['payment_template']['setting'] : FALSE),
  );
  $form['payment_template']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Dynamic template title'),
    '#default_value' => (isset($settings['payment_template']['title']) ? $settings['payment_template']['title'] : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="parameter[payment_method][settings][payment_method][settings][payment_template][setting]"]' => array(
          'checked' => TRUE
        ),
      ),
    ),
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function commerce_kbcpaypage_form_rules_ui_edit_element_alter(&$form, &$form_state) {
  if(isset($form['parameter']['payment_method'])) {
    $payment_method = $form['parameter']['payment_method'];
    if($payment_method['settings']['payment_method']['method_id']['#value'] == 'kbcpaypage') {
      $form['#validate'][] = 'commerce_kbcpaypage_settings_form_validate';
      $form['#submit'][] = 'commerce_kbcpaypage_settings_form_submit';
    }
  }
}

/**
 * Custom validate handler for the settings form
 */
function commerce_kbcpaypage_settings_form_validate($form, &$form_state) {
  if($form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['payment_template']['setting'] == 1) {
    if(empty($form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['payment_template']['title'])) {
      form_set_error('form', t('You need to define a title for your dynamic template'));
    }
  }
}

/**
 * Custom submit handler for the settings form
 */
function commerce_kbcpaypage_settings_form_submit($form, &$form_state) {
  if($form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['payment_template']['setting'] == 1) {
    $title = $form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['payment_template']['title'];

    $file = _commerce_kbcpaypage_create_template($title);
    if($file) {
      $location = file_create_url($file->uri);
      drupal_set_message(t('We have generated your file in this location: @location', array('@location' => $location)));
    }
    else {
      drupal_set_message(t('We could not generate your file. Please check the permissions of your public directory'), 'error');
    }
  }
}

/**
 * Payment method callback: redirect form
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function commerce_kbcpaypage_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['pspid'])) {
    drupal_set_message(t('KBC Paypage is not configured for use. No KBC Paypage PSPID has been specified.'), 'error');
    return array();
  }

  // Set feedback URLs
  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_kbcpaypage_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Helper function for the redirect_form callback.
 * Builds an KBC paypage payment form from an order object.
 */
function commerce_kbcpaypage_build_redirect_form($form, &$form_state, $order, $settings) {
  global $user;
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get financial info
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  if (!empty($wrapper->commerce_customer_billing->value()->commerce_customer_address)) {
    $customer_name = $wrapper->commerce_customer_billing->commerce_customer_address->name_line->value();
  }
  else {
    $customer_name = '';
  }

  // Build the data array that will be translated into hidden form values.
  // NOTE: keys should be uppercase for the SHA-1 security string
  global $base_url;
  $logo = $base_url . '/' . drupal_get_path('module', 'commerce_kbcpaypage') . '/images/logo-large.png';
  $data = array(
    // General parameters
    'PSPID' => $settings['pspid'],
    'ORDERID' => _commerce_kbcpaypage_get_unique_orderid($order),
    'AMOUNT' => $amount,
    'CURRENCY' => $currency_code,
    'LANGUAGE' => _commerce_kbcpaypage_get_language_code($settings),
    'CN' => $customer_name,
    'EMAIL' => $order->mail,
    'TXTCOLOR' => '#777777',

    // Layout
    'TITLE' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
    'FONTTYPE' => 'Verdana',
    'BUTTONBGCOLOR' => '#1aa0e1',
    'BUTTONTXTCOLOR' => '#FFFFFF',

    // Feedback URLs
    'ACCEPTURL' => $settings['return'],
    'DECLINEURL' => $settings['return'],
    'EXCEPTIONURL' => $settings['return'],
    'CANCELURL' => $settings['cancel_return'],
  );
  // Add the predefined settings when this has been enabled
  if (isset($settings['predefined']['setting']) && $settings['predefined']['setting'] == 1) {
    // Add the selected PM and BRAND to the data array
    if (isset($_SESSION['kbcpaypage_selected'])) {
      $data['PM'] = $_SESSION['kbcpaypage_selected']['PM'];
      $data['BRAND'] =  $_SESSION['kbcpaypage_selected']['BRAND'];
      unset($_SESSION['kbcpaypage_selected']);
    }
  }


  // Allow modules to add or alter the data sent to KBC paypage before signing.
  drupal_alter('commerce_kbcpaypage_data', $data, $order, $settings);

  // Add the dynamic template when this is enabled
  if (isset($settings['payment_template']['setting']) && $settings['payment_template']['setting'] == 1) {
    $template = 'public://kbc-dynamic-template.html';
    if(!file_exists($template)) {
      // Try to recreate the file
      _commerce_kbcpaypage_create_template($settings['payment_template']['title']);
    }
    $template = file_create_url($template);
    $data['TP'] = $template;
  }

  // NOTE: data should be ordered alphabetically for the SHA-1 string
  ksort($data);

  // Build the KBC paypage redirection URL.
  $url = variable_get('commerce_kbcpaypage_provider_url', 'https://secure.paypage.be/ncol/');
  $url .=  $settings['account'] . '/orderstandard_utf8.asp';
  $form['#action'] = $url;

  // Generate SHA-1 security string & add hidden parameters to form
  $sha1_sig = '';
  $sha1suffix = $settings['sha_in'];
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $value = trim($value);
      // Build the SHA-1 string from all filled in parameters
      $sha1_sig .= $name . '=' . $value . $sha1suffix;
      // Add the value as a hidden form element
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }
  // Add the calculated SHA-1 string
  $form['SHASign'] = array('#type' => 'hidden', '#value' => sha1($sha1_sig));

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed with payment'),
  );
  return $form;
}

/**
 * Payment method callback: redirect form back callback.
 */
function commerce_kbcpaypage_redirect_form_back($order, $payment_method) {
  // Display a message indicating the customer cancelled the payment
  drupal_set_message(t('You have cancelled the payment at KBC Paypage but may resume the checkout process when you are ready.'));

  // Remove the payment information from the order data array.
  unset($order->data['payment_method']);

  // Process callback information from KBC Paypage
  return commerce_kbcpaypage_process_callback($order, $payment_method);
}

/**
 * Returns unique ORDERID value for sending to KBC Paypage gateway.
 *
 * KBC Paypage will show an error if we send them a payment request with the ORDERID value
 * that was already sent before (regardless of whether it succeeded or failed). So if there
 * already exist any previously created transaction for this order, let's load them and modify
 * current ORDERID to make sure we send them a unique value.
 *
 * @param  object $order
 *   The loaded order that is being processed
 * @return  string
 *   Unique ORDERID value to be sent to the KBC Paypage gateway.
 */
function _commerce_kbcpaypage_get_unique_orderid($order) {
  // Very first payment request will have ORDERID without any modifications, ie 48.
  $unique_orderid = $order->order_number;
  // If any payment transaction already exist, it would neeed to be modified to be unique.
  if ($transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id))) {
    $existing_ids = array();
    foreach ($transactions as $transaction) {
      if (!empty($transaction->payload['ORDERID'])) {
        $existing_ids[] = $transaction->payload['ORDERID'];
      }
    }
    $modifier = 1;
    while (in_array($unique_orderid, $existing_ids)) {
      $modifier++;
      // We'll use values like 48#2, 48#3 etc.
      $unique_orderid = $order->order_number . '#' . $modifier;
    }
  }

  return $unique_orderid;
}

/**
 * Implements hook_redirect_form_validate().
 */
function commerce_kbcpaypage_redirect_form_validate($order, $payment_method) {
  return commerce_kbcpaypage_process_callback($order, $payment_method);
}

/**
 * Gets the KBC paypage feedback from GET / POST parameters.
 *
 * @return
 *   An associative array containing the KBC paypage feedback taken from the $_GET and
 *   $_POST superglobals, excluding 'q' and with the parameter keys uppercased.
 *   Returns FALSE if the SHASIGN parameter is missing (indicating missing or
 *   invalid KBC paypage feedback).
 */
function commerce_kbcpaypage_get_feedback() {
  $feedback = FALSE;
  if (isset($_REQUEST['SHASIGN'])) {
    // Prepare the feedback values sent by KBC paypage for processing. We don't use
    // $_REQUEST since this includes the $_SESSION variables.
    $feedback = $_GET + $_POST;
    unset($feedback['q']);
    $feedback = array_change_key_case($feedback, CASE_UPPER);
  }
  return $feedback;
}

/**
 * Check if SHA1 in callback feedback is valid
 */
function commerce_kbcpaypage_valid_sha1_callback($order, $payment_method, $feedback) {
  module_load_include('inc', 'commerce_kbcpaypage', 'commerce_kbcpaypage.sha1');
  // Check if the received SHA-1 string is valid
  $sha1out = $payment_method['settings']['sha_out'];
  if (!commerce_kbcpaypage_feedback_valid_sha1($feedback, $sha1out)) {
    watchdog('commerce_kbcpaypage', "SHA signature doesn't match", array(), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
 * Menu callback handler for KBC paypage Direct HTTP server-to-server request
 */
function commerce_kbcpaypage_callback() {
  // Load order and payment_method objects
  if ($feedback = commerce_kbcpaypage_get_feedback()) {
    $order = commerce_order_load_by_number($feedback['ORDERID']);
    if ($order) {
      // Load the payment method, since it won't be available if no $order object was passed in as argument
      $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
      if (!$payment_method || $payment_method['method_id'] != 'kbcpaypage') {
        return FALSE;
      }
      if (commerce_kbcpaypage_valid_sha1_callback($order, $payment_method, $feedback)) {
        commerce_kbcpaypage_process_transaction($order, $payment_method, $feedback);
      }
    }
  }
  return FALSE;
}

/**
 * Process callback information from KBC paypage
 * This can either be through a redirect after payment, or a Direct HTTP server-to-server request
 */
function commerce_kbcpaypage_process_callback($order, $payment_method) {
  if ($feedback = commerce_kbcpaypage_get_feedback()) {
    if (commerce_kbcpaypage_valid_sha1_callback($order, $payment_method, $feedback)) {
      // Process the transaction based on the KBC paypage parameters received
      commerce_kbcpaypage_process_transaction($order, $payment_method, $feedback);
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Get transaction with a specific KBC paypage PAYID.
 */
function commerce_kbcpaypage_get_payment_transaction($feedback) {
  $feedback_remote_id = $feedback['PAYID'];
  $query = new EntityFieldQuery;

  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('payment_method', 'kbcpaypage')
    ->propertyCondition('remote_id', $feedback_remote_id)
    ->execute();
  if (isset($result['commerce_payment_transaction']) && count($result['commerce_payment_transaction']) > 0) {
    $transaction = array_pop($result['commerce_payment_transaction']);
    return $transaction->transaction_id;
  }
  return FALSE;
}

/**
 * Process the payment transaction with the info received from KBC paypage
 *
 * @param $order
 *   The loaded order that is being processed
 * @param $payment_method
 *   The payment method settings
 * @param $feedback
 *   The parameters received from KBC paypage regarding the payment
 * @param $redirect
 *   Specifies whether to call redirect functions or not
 */
function commerce_kbcpaypage_process_transaction($order, $payment_method, $feedback, $redirect = TRUE) {
  $transaction_id = commerce_kbcpaypage_get_payment_transaction($feedback);
  if (!$transaction_id) {
    $transaction = commerce_payment_transaction_new('kbcpaypage', $order->order_id);
  }
  else {
    $transaction = commerce_payment_transaction_load($transaction_id);
  }

  $payment_status = commerce_kbcpaypage_feedback_status($feedback['STATUS']);

  // identifying data
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $feedback['PAYID'];
  // payment amount details
  $transaction->currency_code = $feedback['CURRENCY'];
  $transaction->amount = commerce_currency_decimal_to_amount($feedback['AMOUNT'], $feedback['CURRENCY']);
  // payment status
  $transaction->remote_status = $feedback['STATUS'];
  $transaction->status = $payment_status['code'];
  $transaction->message = $payment_status['message'];
  $transaction->payload = $feedback;
  commerce_payment_transaction_save($transaction);
  if ($redirect) {
    if ($payment_status['code'] == COMMERCE_PAYMENT_STATUS_FAILURE) {
      commerce_payment_redirect_pane_previous_page($order);
    }
    else {
      commerce_payment_redirect_pane_next_page($order);
    }
  }
}

/**
 * Get a list of enabled currencies
 *
 * @TODO: figure out which currencies KBC paypage actually supports
 */
function commerce_kbcpaypage_currencies() {
  // Build a currency options list from all enabled currencies.
  $options = array();

  foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
    $options[$currency_code] = t('@code - !name', array('@code' => $currency['code'], '@symbol' => $currency['symbol'], '!name' => $currency['name']));

    if (!empty($currency['symbol'])) {
      $options[$currency_code] .= ' - ' . check_plain($currency['symbol']);
    }
  }

  return $options;
}

/**
 * Get a payment status and message based on KBC paypage status ID
 * @param $status
 *   received KBC paypage status ID
 * @return array
 *   key 'code' contains the commerce status
 *   key 'message' contains a textual representation of the KBC paypage status ID
 */
function commerce_kbcpaypage_feedback_status($status) {
  switch ($status) {
    /** SUCCESS **/
    case 4:  // Order stored
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Order stored');
      break;
    case 5:  // Authorized
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Authorized');
      break;
    case 8:  // Refund
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Refund');
      break;
    case 85:  // Refund processed by merchant
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Refund processed by merchant');
      break;
    case 9:  // Payment requested
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Payment requested');
      break;
    case 95:  // Payment processed by merchant
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Payment processed by merchant');
      break;

    /** PENDING **/
    case 40: // Stored waiting external result
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Stored waiting external result');
      break;
    case 41: // Waiting client payment
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Waiting client payment');
      break;
    case 50: // Authorized waiting external result
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authorized waiting external result');
      break;
    case 51: // Authorization waiting
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authorization waiting');
      break;
    case 55: // Stand-by
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Stand-by');
      break;
    case 56: // OK with scheduled payments
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('OK with scheduled payments');
      break;
    case 59: // Authoriz. to get manually
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authoriz. to get manually');
      break;
    case 81: // Refund pending
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Refund pending');
      break;
    case 82: // Refund uncertain
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Refund uncertain');
      break;
    case 91: // Payment processing
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Payment processing');
      break;
    case 92: // Payment uncertain
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Payment uncertain');
      break;
    case 99: // Being processed
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Being processed');
      break;

    /** FAILURE **/
    case 0:  // Incomplete or invalid
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Incomplete or invalid');
      break;
    case 1:  // Cancelled by client
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Cancelled by client');
      break;
    case 2:  // Authorization refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorization refused');
      break;
    case 52: // Authorization not known
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorization not known');
      break;
    case 57: // Error in scheduled payments
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Error in scheduled payments');
      break;
    case 6:  // Authorized and cancelled
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorized and cancelled');
      break;
    case 61: // Author. deletion waiting
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Author. deletion waiting');
      break;
    case 62: // Author. deletion uncertain
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Author. deletion uncertain');
      break;
    case 63: // Author. deletion refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Author. deletion refused');
      break;
    case 64: // Authorized and cancelled
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorized and cancelled');
      break;
    case 7:  // Payment deleted
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deleted');
      break;
    case 71:  // Payment deletion pending
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deletion pending');
      break;
    case 72:  // Payment deletion uncertain
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deletion uncertain');
      break;
    case 73:  // Payment deletion refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deletion refused');
      break;
    case 74:  // Payment deleted
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deleted');
      break;
    case 75:  // Deletion processed by merchant
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Deletion processed by merchant');
      break;
    case 83:  // Refund refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Refund refused');
      break;
    case 84:  // Payment declined by the acquirer
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment declined by the acquirer');
      break;
    case 93:  // Payment refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment refused');
      break;
    case 94:  // Refund declined by the acquirer
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Refund declined by the acquirer');
      break;
    default:
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Unknown feedback status');
      break;
  }
  return array(
    'code' => $st,
    'message' => $msg,
  );
}


/**
 * Looks up the language code of a enabled language.
 * @param $settings
 *   Received settings
 * @return language code
 */
function _commerce_kbcpaypage_get_language_code($settings) {
  global $language;
  $kbc_language_codes = _commerce_kbcpaypage_get_language_code_list();
  if (isset($settings['language_list'][$language->language])) {
    $langcode = $settings['language_list'][$language->language];
  }
  else {
    $default_prefix_code = explode('-', $language->prefix);
    $default_prefix_code = $default_prefix_code[0] . '_' . drupal_strtoupper($default_prefix_code[0]);
    if (isset($kbc_language_codes[$default_prefix_code])) {
      $langcode = $default_prefix_code;
    }
    else {
      $langcode = $settings['language_list']['default_language'];
    }
  }
  return $langcode;
}

/**
 * Returns a list of supported KBC paypage language codes.
 * @return language codes
 */
function _commerce_kbcpaypage_get_language_code_list() {
  $language_codes = array(
    'ar_AR' => t('Arabic'),
    'cs_CZ' => t('Czech'),
    'zh_CN' => t('Chinese'),
    'da_DK' => t('Danish'),
    'nl_BE' => t('Dutch (Belgium)'),
    'nl_NL' => t('Dutch'),
    'en_GB' => t('English (UK)'),
    'en_US' => t('English (US)'),
    'fr_FR' => t('French'),
    'de_DE' => t('German'),
    'el_GR' => t('Greek'),
    'hu_HU' => t('Hungarian'),
    'it_IT' => t('Italian'),
    'ja_JP' => t('Japanese'),
    'no_NO' => t('Norwegian'),
    'pl_PL' => t('Polish'),
    'pt_PT' => t('Portuguese'),
    'ru_RU' => t('Russian'),
    'sk_SK' => t('Slovak'),
    'es_ES' => t('Spanish'),
    'se_SE' => t('Swedish'),
    'tr_TR' => t('Turkish'),
  );
  return $language_codes;
}

/**
 * Callback function commerce payment method submit form
 */
function commerce_kbcpaypage_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  if(isset($payment_method['settings']['predefined']['setting']) && $payment_method['settings']['predefined']['setting'] == 1) {
    $form = _commerce_kbcpaypage_create_selectable_form();
    return $form;
  }
}

/**
 * Callback submit handler for the commerce payment method submit form
 */
function commerce_kbcpaypage_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  $selected = explode('|', $pane_values['payment_options']);

  $_SESSION['kbcpaypage_selected'] = array(
    'PM' => $selected[0],
    'BRAND' => $selected[1],
  );
}

/**
 * Creates a template html file for the dynamic template
 */
function _commerce_kbcpaypage_create_template($title = '') {
  global $base_url;
  $path = drupal_get_path('module', 'commerce_kbcpaypage');

  $css_file = DRUPAL_ROOT . '/' . $path . '/css/commerce_kbcpaypage_template.css';

  $css_content = file_get_contents($css_file);

  $variables = array(
    'path' => $path . '/images/logo-large.png',
    'title' => 'Logo',
    'alt' => 'Logo',
    'attributes' => array(
      'class' => array('commerce-kbcpaypage-logo'),
    ),
  );
  $logo = theme('image', $variables);

  $output = theme('kbc_dynamic_template', array('title' => t($title), 'logo' => $logo, 'css' => $css_content));

  $file_path = '/' . $path . '/templates/kbc-dynamic-template.html';
  $res = file_save_data($output, 'public://kbc-dynamic-template.html', FILE_EXISTS_REPLACE);
  return $res;
}

/**
 * Implements hook_theme
 */
function commerce_kbcpaypage_theme() {
  $path = drupal_get_path('module', 'commerce_kbcpaypage') . '/templates';
  return array(
    'kbc_dynamic_template' => array(
      'template' => 'kbc-dynamic-template',
      'path' => $path,
      'variables' => array(
        'title' => NULL,
        'logo' => NULL,
        'css' => NULL,
      ),
    ),
  );
}
