<?php

/**
 * Implements hook_menu().
 */
function permission_sets_menu() {
  $items = array();

  $items['admin/people/permissions/permission_sets'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Apply Permission Set',
    'access arguments' => array('administer permissions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('permission_sets_apply_form'),
  );

  return $items;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function permission_sets_ctools_plugin_api($owner, $api) {
  if ($owner == 'permission_sets' && $api == 'default_permission_sets') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function permission_sets_ctools_plugin_directory($module, $type) {
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Form builder for the apply form.
 */
function permission_sets_apply_form($form, &$form_state) {
  ctools_include('export');

  if (isset($form_state['input']['op']) && $form_state['input']['op'] == t('Apply Permission Set(s)')) {
    return permission_sets_apply_form_confirm($form_state);
  }

  $sets = ctools_export_crud_load_all('permission_sets');
  $options = array(0 => t('- Do not change -'));
  foreach($sets as $permission_set_id => $permission_set) {
    $options[$permission_set_id] = $permission_set->name;
  }
  asort($options);

  $roles = user_roles();
  foreach ($roles as $rid => $role_name) {
    $form['permission_set_' . $rid] = array(
      '#title' => t('Role:') . ' ' . ucwords($role_name),
      '#type' => 'select',
      '#default_value' => 0,
      '#options' => $options,
      '#description' => t('Choose which permission set to use for %role_name', array('%role_name' => $role_name)),
    );
  }

  $form['apply'] = array(
    '#type' => 'submit',
    '#value' => t('Apply Permission Set(s)'),
  );
  $form['create'] = array(
    '#markup' => l(t('Manage permission sets'), 'admin/structure/permission_sets'),
  );

  return $form;
}

/**
 * Confirm form builder function for the permission_sets_apply_form().
 *
 * @permission_sets_apply_form
 */
function permission_sets_apply_form_confirm($form_state) {
  $form = array();
  // @todo: only set message if user will lose the 'Apply Permission Sets' perm
  drupal_set_message(t('WARNING: Applying a permission set may cause you to no longer have access to change user permissions. Make sure you know what you\'re doing.' ), 'warning', FALSE);

  $list = _permission_sets_role_list($form_state);
  $desc = 'Your selected permission set(s) will be applied to the following roles:' . drupal_render($list);

  // Add the values from the original form as hidden elements to the confirm
  // form so that they are available when the confirm form is submitted.
  $roles = user_roles();
  foreach ($roles as $rid => $role_name) {
    $form['permission_set_' . $rid] = array('#type' => 'hidden', '#value' => $form_state['input']['permission_set_' . $rid]);
  }

  // The "confirm button" value cannot be "Reset Permissions" so we use "Do it!".
  return confirm_form($form, t('Are you sure you want to apply this permission set?'), 'admin/people/permissions/default_perms', $desc, 'Do it!');
}

/**
 * Form submit function for permission_sets_apply_form().
 *
 * @see permission_sets_apply_form
 */
function permission_sets_apply_form_submit($form, &$form_state) {
  // If the user has confirmed, apply the permission set.
  if (isset($form_state['input']['op']) && $form_state['input']['op'] == 'Do it!') {
    $roles = user_roles();
    foreach ($roles as $rid => $role_name) {
      if (!empty($form_state['values']['permission_set_' . $rid])) {
        _permission_sets_set_apply($rid, $form_state['values']['permission_set_' . $rid]);
      }
    }

    $list = _permission_sets_role_list($form_state);
    $message = t('The selected permissions set(s) have been applied to the following roles:') . drupal_render($list);
    drupal_set_message($message);
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Applies the permission set based on the provided information.
 *
 * @param int $rid
 *   The role id for which the permissions should be changed.
 * @param string $permission_set
 *   The name of the permission set to use for the given role.
 */
function _permission_sets_set_apply($rid, $permission_set) {
  ctools_include('export');
  $permission_sets = ctools_export_crud_load_all('permission_sets');

  if (isset($permission_sets[$permission_set])) {
    $permissions = $permission_sets[$permission_set]->permissions;

    // Explicitly set all permissions to either "the name of the permission" or
    // FALSE so that permissions that should be revoked will be.
    $permissions_to_apply = array_fill_keys(_permission_sets_permissions_get_all(), FALSE);
    if (!empty($permissions)) {
      $permissions_to_apply = $permissions + $permissions_to_apply;
    }
    _permission_sets_set_filter($permissions_to_apply);
    user_role_change_permissions($rid, $permissions_to_apply);
  }
}

/**
 * Returns an array of all permissions that exist on the current site.
 *
 * @return array
 */
function _permission_sets_permissions_get_all() {
  $permissions = &drupal_static(__FUNCTION__, array());

  if (empty($permissions)) {
    $permissions = module_invoke_all('permission');
    $permissions = array_keys($permissions);
  }
  return $permissions;
}

/**
 * Remove any invalid permissions.
 *
 * @param $permissions
 */
function _permission_sets_set_filter(&$permissions) {
  $existing_permissions = _permission_sets_permissions_get_all();

  foreach($permissions as $permission => $grant) {
    if (!in_array($permission, $existing_permissions)) {
      unset($permissions[$permission]);
    }
  }
}

/**
 * Given a $form_state, return a render array of all the roles that will have
 * their permissions changed.
 */
function _permission_sets_role_list($form_state) {
  $values = !empty($form_state['values']) ? $form_state['values'] : $form_state['input'];

  $roles = user_roles();
  $roles_being_changed = array();
  foreach ($roles as $rid => $role_name) {
    if ($values['permission_set_' . $rid]) {
      $roles_being_changed[] = array('title' => $role_name);
    }
  }
  if (empty($roles_being_changed)) {
    $roles_being_changed[] = array('title' => t('No roles.'));
  }

  $list = array(
    '#theme' => 'links',
    '#links' => $roles_being_changed,
    '#attributes' => array(),
    '#header' => '',
  );

  return $list;
}


/**
 * Returns an array of permission_sets.
 */
function _permission_sets_get() {
  ctools_include('export');

  $permissions = &drupal_static(__FUNCTION__, array());

  if (empty($permissions)) {
    $permissions = ctools_export_crud_load_all('permission_sets');
  }

  return $permissions;
}
