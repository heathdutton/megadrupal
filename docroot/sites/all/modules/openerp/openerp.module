<?php

// $Id: openerp.install,v 1.3 2011/04/19 12:05:48 ZestyBeanz -LIPIN  Exp $

/**
 * @file
 * Provide interfaces to OpenERP via XML-RPC
 *
 * Copyright(c) 2010, Pinacono Co., Ltd.
 */

require_once('openerp_api.inc');

/**
 * Implementation of hook_perm().
 */
function openerp_permission(){
	$permissions['administer OpenERP interface'] = array(
		'title' => t('administer OpenERP interface.'),
    );
    $permissions['access OpenERP'] = array(
    	'title' => t('access OpenERP.'),
    );
    return $permissions;
}

	
	

/**
 * Implementation of hook_menu().
 */
function openerp_menu() {
  return array(
    'admin/config/openerp' => array(
      'title'            => t('OpenERP'),
      'description'      => t('Configuring OpenERP Interface.'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('openerp_settings_form'),
      'access arguments' => array('administer OpenERP interface'),
      'file'             => 'openerp_admin.inc',
    ),
  );
}

/**
 * Implementation of hook_help().
 */
function openerp_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/openerp':
      return '<p>'. t('Configuration options for OpenERP XML-RPC interface proxy.') .'</p>';
  }
}

// ----------------------------------------------------------------------------
// User-specific interfaces

/**
 * Load user's OpenERP account information
 *
 * @param int $uid - Drupal UID
 * @return object
 */
function openerp_loaduser($uid) {
  $u = new stdClass();
  if ( ($r = db_query("SELECT * FROM {openerp_users} WHERE uid = :uid", array(':uid' => $uid))) !== FALSE && ($u = $r->fetchObject()) !== FALSE ) {
    $u->passwd = OpenERPProxy::decrypt($u->passwd);
   
  }

  return $u;
}
/**
 * user load in drupal7 
 */

function openep_user_load( $users ) {
	global $user;
      if ( ($u = openerp_loaduser($account->uid)) !== FALSE ) {
       $account->openerp = $u;
  
      }
  
}

function openep_user_view( $account, $view_mode, $langcode ) {
	
	$u = openerp_loaduser($account->uid);
    $account->content['openerp'] = array(
    	'#type'       => 'user_profile_category',
        '#attributes' => array(
           'class' => 'user-member',
         ),
        '#weight' => 100,
        '#title'  => t('OpenERP Account'),
        'user' => array(
          '#type'  => 'user_profile_item',
          '#title' => t('OpenERP User ID'),
          '#value' => isset($u->user) ? $u->user : 'n/a',
        ),
        'db' => array(
          '#type'  => 'user_profile_item',
          '#title' => t('Selected OpenERP Database'),
          '#value' => isset($u->db) ? $u->db : 'n/a',
        ),
    );
}


function openep_user_delete( $account ) {
	db_delete('openerp_users')
  		->condition('uid', $account->uid)
  		->execute();
}

/**
 * Retrieve available databases on the server
 */
function _openerp_get_dbs() {
  static $dbs;
  static $DBs;
  if ( ! isset($dbs) && ($url = variable_get('openerp.url', NULL)) !== NULL ) {
    $proxy = OpenERPProxy::getProxy();
    if( $proxy->request('db', 'list',array()) == FALSE){
    	drupal_set_message(t(' Problems are observed to get the database names. Please check the  OpenERP XML-RPC Server URL or refresh the page'),'error');
    	$DBs =array();
    	return $DBs;
    	
    }
    else{
    	$dbs   = $proxy->request('db', 'list',array());
	      foreach($dbs as $databases){
		    	$DBs[$databases]=$databases;
		    }
       }
    
  }
 return $DBs;

}

/**
 * return list of available models
 */
function _openerp_get_models() {
  static $models;

  $proxy = OpenERPProxy::getProxy();
  if ( empty($models) && ($uid = variable_get('openerp.user', NULL)) !== NULL ) {
    $models = array();
    $ids = $proxy->search('ir.model', array());
   
    foreach ( (array) $proxy->read('ir.model',$ids, array('name', 'model')) as $d ) {
    	 $models[$d['model']] = "{$d['name']} ({$d['model']})";
     
    }
    asort($models);
    
   
  }
  return $models;
}


function openerp_form_alter(&$form ,$form_state ,$form_id){
	
	if(user_access($string='access OpenERP', $account = NULL)){
     if($form_id == 'user_profile_form'){
     	
     	$account = $form['#user'];
      	$uid = $account->uid;
    	$u = openerp_loaduser($account->uid);
        $dbs = _openerp_get_dbs();
        $form['openerp'] =array(
          '#type'        => 'fieldset',
          '#title'       => 'OpenERP User Configuration',
          '#collapsible' => TRUE,
          '#description' => t('OpenERP account information.')
          );
          

        $form['openerp']['erp-dbname']= array(
          '#type'  => 'select',
          '#title' => t('OpenERP Database'),
          '#default_value' => isset($u->db) ? $u->db : '',
          '#options'       => (array) $dbs,
          '#description'   => t('Specify the OpenERP database name.'),
         );
      

          $form['openerp']['erp-user']= array(
            '#type'  => 'textfield',
            '#title' => t('OpenERP User'),
            '#size'  => 30,
            '#maxlength'     => 256,
            '#default_value' => isset($u->user) ? $u->user : '',
            '#description'   => t('Specify the OpenERP user name.'),
          );

          $form['openerp']['erp-passwd']= array(
            '#type'  => 'password',
            '#title' => t('OpenERP Password'),
            '#size'  => 15,
            '#description' => t('Specify the password for the OpenERP user. Leave both fields blank to keep the old password.'),
          );

          $form['openerp']['erp-passwd-confirm']= array(
            '#type'  => 'password',
            '#title' => t('Confirm Password'),
            '#size'  => 15,
            '#description' => t('Please re-enter the password to confirm.'),
          );

          $form['#submit'][]='openerp_individual_submit';
           $form['#validate'][]='openerp_individual_validate';
      }
      
  }
		

}

function openerp_individual_submit(&$form ,$form_state ){
	$account = $form['#user'];
	$uid = $account->uid;
	$count =  db_query("SELECT * FROM {openerp_users} WHERE uid = :uid", array(':uid' => $uid))->fetchObject();
    if($count == NULL) {
  		$id = db_insert('openerp_users')
      	   ->fields(array(
    		'uid' =>  $account->uid,
    		'db' => $form_state['values']['erp-dbname'],
      	   'user' => $form_state['values']['erp-user'],
    		'passwd' => OpenERPProxy::encrypt($form_state['values']['erp-passwd']),
  		))
  		->execute();
  		drupal_set_message(t('OpenERP user information is successfully saved.'));
    }  
    else{
  		db_update('openerp_users')
				 ->fields(array('db' => $form_state['values']['erp-dbname'], 'user' =>  $form_state['values']['erp-user'],'passwd'=>OpenERPProxy::encrypt($form_state['values']['erp-passwd'])))
				 ->condition('uid', $account->uid)
				 ->execute();
    drupal_set_message(t('OpenERP user information is successfully updated.'));
    }	
}


/**
 * validate form
 *
 *
 */


function openerp_individual_validate(&$form ,$form_state){
	$account = $form['#user'];
	$uid = $account->uid;
	$proxy = OpenERPProxy::getProxy();
     if ( ! empty($form_state['values']['erp-passwd']) ) {
      if ( $form_state['values']['erp-passwd'] != $form_state['values']['erp-passwd-confirm'] ) {
        form_set_error('erp-password', 'Password confirmation is not match the password field');
         return;
       }
    }
	
	$connect  = $proxy->request('common', 'login',array($form_state['values']['erp-dbname'],$form_state['values']['erp-user'], $pwd = $form_state['values']['erp-passwd']));
	if($connect  === FALSE){
		form_set_error('erp-dbname','Openerp cannot authenticate user. Please check the databse, user name and password');
	}
	
}
