<?php
/**
 * @file
 * Makes it possible to login via UNI•Login
 * (http://www.uni-c.dk/produkter/support/uddannelse/uni-login/index.html)
 *
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */

/**
 * The watchdog type used for common unilogin entries.
 */
define('UNILOGIN_WD_ID', 'unilogin');

/**
 * Default settings: Login url.
 */
define('UNILOGIN_DEFSET_URL_LOGIN', 'https://sso.emu.dk/unilogin/login.cgi');

/**
 * Default settings: Ticket lifespan. How long should it be stored.
 */
define('UNILOGIN_DEFSET_TICKET_LIFESPAN', 1);

/**
 * Default settings: Timestamp expiration. How long is a timestamp valid?
 */
define('UNILOGIN_DEFSET_TIMESTAMP_EXPIRATION', 2);

/**
 * Include db related functions.
 */
require_once 'includes/unilogin.db.inc';

/**
 * Implements hook_help().
 */
function unilogin_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#unilogin':
      $output = t("<ul>
<strong>Install instructions:</strong>
<li>Read UNI•Login documentation (see README.txt).</li>
<li>Fill in settings provided by UNI•Login in the configuration form.</li>
<li>Activate UNI•Login block beneath the normal login form</li>
</ul>
<p>Read README.txt for more information.</p>");
      break;
  }

  return $output;
}

/**
 * Implements hook_menu().
 */
function unilogin_menu() {
  $path = drupal_get_path('module', 'unilogin');
  $items = array();

  $items['admin/config/services/unilogin'] = array(
    'title' => 'UNI•Login',
    'description' => 'Configure URLs and parameters for UNI•Login.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unilogin_configuration_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'unilogin.admin.inc',
    'file path' => $path . '/includes',
  );

  $items['unilogin'] = array(
    'title' => 'Log in with UNI•Login',
    'page callback' => 'unilogin_page_redirect',
    'access callback' => 'user_is_anonymous',
    'file' => 'unilogin.pages.inc',
    'file path' => $path . '/includes',
  );

  $items['unilogin/authcheck'] = array(
    'title' => 'Check UNI•Login authentication',
    'page callback' => 'unilogin_page_authcheck',
    // Disable access control for this URL.
    'access callback' => TRUE,
    'file' => 'unilogin.pages.inc',
    'file path' => $path . '/includes',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function unilogin_block_info() {
  return array(
    'login_link' => array(
      'info' => t('UNI•Login'),
      'cache' => DRUPAL_CACHE_PER_USER,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function unilogin_block_view($delta = '') {
  $block = array();


  if ($delta == 'login_link') {
    $varnames = array(
      'unilogin_active',
      'unilogin_id',
      'unilogin_url_login',
      'unilogin_url_return',
      'unilogin_secret',
    );

    // If user is logged in
    // or if one ore more variables are empty/undefined return empty block;
    if (user_is_logged_in() || !_unilogin_check_vars($varnames)) {
      return $block;
    }

    // Otherwise show a link to UNI•Login.
    $block['content'] = array(
      '#theme' => 'unilogin_link',
      '#variables' => array(),
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'unilogin') . '/css/unilogin.css',
        ),
      ),
    );
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function unilogin_theme($existing, $type, $theme, $path) {
  return array(
    'unilogin_link' => array(
      'template' => 'unilogin-link',
      'variables' => array('image_path' => NULL),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function unilogin_cron() {
  // Delete tickets older than x days.
  db_query('
    DELETE FROM {unilogin_tickets}
    WHERE FROM_UNIXTIME(created) < DATE_SUB(NOW(), INTERVAL :lifespan DAY)
  ', array(':lifespan' => variable_get('unilogin_ticket_lifespan', UNILOGIN_DEFSET_TICKET_LIFESPAN)));
}

/**
 * Return the UNI•Login URL, so we can redirect the user to it.
 */
function unilogin_get_url() {
  // Add the destination to the return URL plus a nonce making harder
  // to attack the secret key via the MD5 hash.
  $return_url_query = array_merge(drupal_get_destination(), array(
    'nonce' => mt_rand() * REQUEST_TIME,
  ));

  // Avoid having /unilogin as the destination, since that will give us
  // a redirect loop.
  if (strpos($return_url_query['destination'], 'unilogin') < 2) {
    unset($return_url_query['destination']);
  }

  $return_url = url('unilogin/authcheck', array('absolute' => TRUE));

  // Query parameters for the UNI•Login URL.
  $query = array(
    'id' => variable_get('unilogin_id', ''),
    'path' => base64_encode($return_url),
  );

  // MD5-based security token to authenticate request.
  $query['auth'] = md5($return_url . variable_get('unilogin_secret', ''));

  return url(variable_get('unilogin_url_login', ''), array('query' => $query));
}

/**
 * Preprocessor for theme_unilogin_link.
 *
 * @param array $vars
 *   Drupal theme variables.
 */
function template_preprocess_unilogin_link(&$vars) {
  $vars['login_url'] = url('unilogin');

  // Set the default image path if one is not set previously.
  if (empty($vars['image_path'])) {
    $vars['image_path'] = url(drupal_get_path('module', 'unilogin') . '/images/uni-login-16pt.png');
  }
}

/**
 * Helper function to check if variables are set.
 *
 * @param array $varnames
 *   The names of the variables to test.
 * @param string $mode
 *   Which testing mode are we using?
 *
 * @return boolean
 *   The test either passes or fails.
 */
function _unilogin_check_vars($varnames, $mode = 'all_set') {
  switch ($mode) {
    case 'all_set':
      foreach ($varnames as $varname) {
        if (!(bool) variable_get($varname, FALSE)) {
          return FALSE;
        }
      }
      break;
  }

  return TRUE;
}

/**
 * Implements hook_user_load().
 */
function unilogin_user_load($users) {
  $query = db_query('SELECT * FROM {authmap} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  $result = $query->fetchAllAssoc('uid');

  foreach ($users as $uid => $user) {
    $unilogin = new stdClass();
    if (!empty($result[$uid])) {
      $unilogin->id = _unilogin_id_from_authname($result[$uid]->authname);
    }
    else {
      $unilogin->id = NULL;
    }
    $users[$uid]->unilogin = $unilogin;
  }
}

/**
 * Extract UNI•Login id from authname string.
 *
 * @param string $authname
 *   Drupal authmap name.
 *
 * @return string
 *   UNI•Login id.
 */
function _unilogin_id_from_authname($authname) {
  return preg_replace("#^unilogin:(.*)#", "$1", $authname);
}

/**
 * Create authname string.
 *
 * @param string $unilogin_id
 *   UNI•Login id
 *
 * @return string
 *   Authname.
 */
function unilogin_authname($unilogin_id) {
  return "unilogin:$unilogin_id";
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 */
function unilogin_form_user_profile_form_alter(&$form, &$form_state) {
  $form['account']['unilogin_id'] = array(
    '#type' => 'textfield',
    '#title' => t('UNI Login id'),
    '#default_value' => $form['#user']->unilogin->id,
    '#size' => 12,
    '#maxlength' => 60,
    '#description' => t('The user UNI•Login id.'),
  );
  $form['#validate'][] = '_unilogin_form_user_edit_validate';
}

/**
 * User edit form validate function that validates UNI•Login related fields.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 */
function _unilogin_form_user_edit_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (!empty($values['unilogin_id'])) {
    unilogin_form_user_edit_validate_handler(
      $form['#user'],
      $values['unilogin_id'],
      'unilogin_id'
    );
  }
}

/**
 * Does the actual validation of UNI•Login id.
 *
 * @param object $user
 *   Drupa user object.
 * @param string $unilogin_id
 *   Unilogin id.
 * @param string $field
 *   Form field name in case of errors.
 */
function unilogin_form_user_edit_validate_handler($user, $unilogin_id, $field) {
  $account  = user_external_load(unilogin_authname($unilogin_id));
  // If another user saved a record with the same unilogin_id set an error.
  if ($account && $account->uid != $user->uid) {
    form_set_error(
      $field, t('Another user is already using the unilogin. Please pick another one.')
    );
  }
}

/**
 * Implements hook_user_presave().
 */
function unilogin_user_presave(&$edit, $account, $category) {
  if (in_array('unilogin_id', $edit) && !empty($edit['unilogin_id'])) {
    user_set_authmaps(
      $account,
      array('authname_unilogin' => unilogin_authname($edit['unilogin_id']))
    );
  }
}
