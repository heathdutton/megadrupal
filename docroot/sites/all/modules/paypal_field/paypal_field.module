<?php
/**
 * @file
 * paypal_field.module
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function paypal_field_field_info() {
  return array(
    'paypal_field' => array(
      'label' => t('Paypal Field'),
      'description' => t('Add Paypal information'),
      'default_widget' => 'paypal_field_widget',
      'default_formatter' => 'paypal_field_default',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function paypal_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if ($item['paypal_email'] != '' && !valid_email_address(trim($item['paypal_email']))) {
      $message = t('"%mail" is not a valid email address', array('%mail' => check_plain($item['paypal_email'])));
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'paypal_field_error',
        'message' => $message,
      );
    }
    if ($item['paypal_currency'] != '' && strlen(trim($item['paypal_currency'])) != 3) {
      $message = t('"%currency" is not a valid currency, you must use 3 characters. eg EUR, USD, ... ', array('%currency' => check_plain($item['paypal_currency'])));
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'paypal_field_error',
        'message' => $message,
      );
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function paypal_field_field_is_empty($item, $field) {
  return empty($item['paypal_email']) || empty($item['paypal_currency']);
}

/**
 * Implements hook_field_widget_error().
 */
function paypal_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'paypal_field_error':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function paypal_field_field_formatter_info() {
  return array(
    'paypal_field_default' => array(
      'label' => t('Simple Paypal Button'),
      'field types' => array('paypal_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function paypal_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('paypal_field_formatter_' . $display['type'], array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Implements hook_field_widget_info().
 */
function paypal_field_field_widget_info() {
  return array(
    'paypal_field_widget' => array(
      'label' => 'Paypal field',
      'field types' => array('paypal_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function paypal_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // $field_name is the name of the field instance. This is the
  // name that the administrator gives the field instance when
  // attaching it to an entity.
  $field_name = $instance['field_name'];

  // Is this field instance required?
  // We can use this $required value to make sub-elements of the
  // widget form required.
  $required = $element['#required'];

  // $item is where the current saved values are stored.
  $item =& $items[$delta];

  $element += array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $element['paypal_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#description' => t('An attractive small text. eg: "If you want to support my project, make a donation" or everything else.'),
    '#default_value' => isset($item['paypal_text']) ? $item['paypal_text'] : NULL,
    '#required' => $required,
  );

  $element['paypal_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email account'),
    '#description' => t('Your account paypal email to receive payment.'),
    '#default_value' => isset($item['paypal_email']) ? $item['paypal_email'] : NULL,
    '#required' => $required,
  );

  $element['paypal_currency'] = array(
    '#type' => 'textfield',
    '#description' => t('The currency of the transaction. eg: EUR, USD, ...'),
    '#title' => t('Currency'),
    '#default_value' => isset($item['paypal_currency']) ? $item['paypal_currency'] : NULL,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => $required,
  );

  $element['paypal_description'] = array(
    '#markup' => t('Both fields email and currency are required to be valid.'),
  );

  return $element;
}

/**
 * Implements hook_theme().
 */
function paypal_field_theme() {
  return array(
    // The theme function that our formatter uses:
    'paypal_field_formatter_paypal_field_default' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Theme function for 'default' formatter.
 */
function theme_paypal_field_formatter_paypal_field_default($vars) {
  $output = '<p>' . check_plain($vars['element']['paypal_text']) . '</p>
    <form action="https://www.paypal.com/cgi-bin/webscr" method="post">
        <input type="hidden" name="cmd" value="_donations">
        <input type="hidden" name="business" value="' . check_plain($vars['element']['paypal_email']) . '">
        <input type="hidden" name="item_name" value="Donation">
        <input type="hidden" name="currency_code" value="' . check_plain($vars['element']['paypal_currency']) . '">
        <input type="hidden" name="bn" value="PP-DonationsBF:btn_donateCC_LG.gif:NonHostedGuest">
        <input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
        <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">
    </form>';

  return $output;
}
