<?php

/**
 * @file
 * Allow to set role wise user default picture.
 */

/**
 * Implements hook_help().
 */
function per_role_picture_help($path, $arg) {

  switch ($path) {
    case 'admin/help#per_role_picture':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Per Role Picture module allows to set default user picture for each role. Site administrators can upload a picture using <a href="@url">role setting</a> page and set the order for a role in which priority picture will be display for multiple role user by <a href="@role_order_url">role order</a> .', array('@url' => url('admin/people/permissions/roles'), '@role_order_url' => url('admin/config/people/per-role-picture'))) . '</p>';
      return $output;

    case 'admin/config/people/per-role-picture':
      return '<p>' . t("This web page allows administrators to set the weight for a role in which priority picture will be display for multiple role user. Role with lesser weight will be the higher on priority to display the picture. If a role with high priority does not have image associated with it then next role will be consider in order to display the image.") . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function per_role_picture_menu() {
  $items['admin/people/permissions/roles/picture/%user_role'] = array(
    'title' => 'Edit Picture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('per_role_picture_form', 5),
    'access arguments' => array('administer users'),
    'file' => 'per_role_picture.admin.inc',
  );
  $items['admin/config/people/per-role-picture'] = array(
    'title' => 'Role picture order',
    'description' => 'Set order of role in which user picture will be display. If a user have multiple role then role with lesser weight will be on high priority for user picture.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('per_role_picture_role_order_settings'),
    'access callback' => 'per_role_picture_settings_access',
    'file' => 'per_role_picture.admin.inc',
    'weight' => -10,
  );
  return $items;
}

/**
 * Menu access callback for role order configuration form.
 */
function per_role_picture_settings_access() {
  // Prevent the settings form access if user picture option is disabled.
  $is_picture_enable = variable_get('user_pictures', 0);
  if (empty($is_picture_enable)) {
    return FALSE;
  }

  return user_access('administer users');
}

/**
 * Load picture object for a role.
 */
function per_role_picture_load($rid) {
  if (empty($rid)) {
    return;
  }
  return db_query('SELECT * FROM {per_role_picture} WHERE rid=:rid', array(':rid' => $rid))->fetchObject();
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * To override the user_admin_roles theme function provided by user module.
 *
 * @see theme_user_admin_roles
 */
function per_role_picture_preprocess_user_admin_roles(&$variables) {
  $variables['theme_hook_suggestions'][] = 'per_role_picture_admin_roles';
}

/**
 * Implements hook_theme().
 */
function per_role_picture_theme() {
  return array(
    'per_role_picture_admin_roles' => array(
      'render element' => 'form',
    ),
    'per_role_picture_role_order_settings' => array(
      'render element' => 'form',
      'file' => 'per_role_picture.admin.inc',
    ),
  );
}

/**
 * Returns HTML for the role order.
 */
function theme_per_role_picture_admin_roles($variables) {
  $form = $variables['form'];
  $colspan = 2;
  // Check if user picture upload functionality is enabled on accont setting
  // page.
  $is_picture_enable = variable_get('user_pictures', 0);
  if ($is_picture_enable) {
    $colspan = 3;
  }

  $header = array(
    t('Name'),
    t('Weight'),
    array(
      'data' => t('Operations'),
      'colspan' => $colspan,
    ),
  );
  foreach (element_children($form['roles']) as $rid) {
    $name = $form['roles'][$rid]['#role']->name;
    $row = array();
    if (in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      $row[] = t('@name <em>(locked)</em>', array('@name' => $name));
      $row[] = drupal_render($form['roles'][$rid]['weight']);
      $row[] = '';
      $row[] = l(t('edit permissions'), 'admin/people/permissions/' . $rid);
    }
    else {
      $row[] = check_plain($name);
      $row[] = drupal_render($form['roles'][$rid]['weight']);
      $row[] = l(t('edit role'), 'admin/people/permissions/roles/edit/' . $rid);
      $row[] = l(t('edit permissions'), 'admin/people/permissions/' . $rid);
    }
    // If user picture upload functionality is enable then only show
    // 'edit picture' link.
    if ($is_picture_enable) {
      // Do not show 'edit picture' link for anonymous role.
      if (in_array($rid, array(DRUPAL_ANONYMOUS_RID))) {
        $row[] = '';
      }
      else {
        $row[] = l(
          t('edit picture'), 'admin/people/permissions/roles/picture/' . $rid
        );
      }
    }
    $rows[] = array('data' => $row, 'class' => array('draggable'));
  }
  $rows[] = array(
    array(
      'data' => drupal_render($form['name']) . drupal_render($form['add']),
      'colspan' => 4,
      'class' => 'edit-name',
    ),
  );

  drupal_add_tabledrag('user-roles', 'order', 'sibling', 'role-weight');

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(
      'id' => 'user-roles',
    ),
    )
  );
  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Implements hook_user_role_delete().
 */
function per_role_picture_user_role_delete($role) {
  $role_order = variable_get('per_role_picture_role_order', NULL);
  if (isset($role_order)) {
    unset($role_order[$role->rid]);
    variable_set('per_role_picture_role_order', $role_order);
  }
  per_role_picture_role_delete($role->rid);
}

/**
 * Implements hook_user_role_insert().
 */
function per_role_picture_user_role_insert($role) {
  // Save weight for new inserted role.
  $role_order = variable_get('per_role_picture_role_order', NULL);
  $role_order[$role->rid] = max($role_order) + 1;
  variable_set('per_role_picture_role_order', $role_order);
}

/**
 * Delete picture object for a role.
 */
function per_role_picture_role_delete($rid) {
  db_delete('per_role_picture')
    ->condition('rid', $rid)
    ->execute();
}

/**
 * Get user picture fid.
 */
function per_role_picture_user_picture($uid) {
  $user_picture = db_query('SELECT picture FROM {users} WHERE uid=:uid', array(':uid' => $uid))->fetchObject();
  return $user_picture->picture;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * To override the template_preprocess_user_picture function provided by
 * user module.
 * Override 'user_picture' variable only IF user has been set a picture for
 * a role.
 * - $account: A user, node or comment object with 'name', 'uid' and 'picture'
 *   fields.
 *
 * @see template_preprocess_user_picture
 */
function per_role_picture_preprocess_user_picture(&$variables) {
  $filepath = NULL;
  $picture = NULL;
  // Check if user picture upload functionality is enabled
  // on accont setting page.
  $is_picture_enable = variable_get('user_pictures', 0);
  if ($is_picture_enable) {
    $role_order = variable_get('per_role_picture_role_order', NULL);
    $account = $variables['account'];
    // $account can be a user, node or comment. So for node, comment we
    // required user(node or comment author) object by it's user id.
    $user = user_load($account->uid);
    $uid = $user->uid;
    $roles = $user->roles;
    $is_user_picture = per_role_picture_user_picture($uid);
    // Check if user picture exist in {users} table then we do not need to
    // show default picture.
    if (empty($is_user_picture)) {
      // To get array of common roles between user roles and per_role_picture
      // role order setting array.
      $intersect_roles = array_intersect_key($role_order, $roles);
      if (!empty($intersect_roles)) {
        foreach ($intersect_roles as $rid => $weight) {
          $picture = per_role_picture_load($rid);
          // Iterate for each role by role priority, once picture found for
          // a role then break(doesn't required to traverse rest of roles).
          if ($picture) {
            break;
          }
        }
      }

      if (!empty($picture)) {
        $file = file_load($picture->fid);
        $filepath = $file->uri;
        if (isset($filepath)) {
          $alt = t("@user's picture", array(
            '@user' => format_username($user),
            )
          );
          // If the image does not have a valid Drupal scheme (for eg. HTTP),
          // don't load image styles.
          if (module_exists('image')
              && file_valid_uri($filepath)
              && $style = variable_get('user_picture_style', '')
          ) {
            $variables['user_picture'] = theme('image_style',
              array(
                'style_name' => $style,
                'path' => $filepath,
                'alt' => $alt,
                'title' => $alt,
              )
            );
          }
          else {
            $variables['user_picture'] = theme('image',
              array(
                'path' => $filepath,
                'alt' => $alt,
                'title' => $alt,
              )
            );
          }

          if (!empty($user->uid) && user_access('access user profiles')) {
            $attributes = array(
              'attributes' => array(
                'title' => t('View user profile.'),
              ),
              'html' => TRUE,
            );
            $variables['user_picture'] = l(
              $variables['user_picture'],
              "user/$user->uid",
              $attributes
              );
          }
        }
      }
    }
  }
}
