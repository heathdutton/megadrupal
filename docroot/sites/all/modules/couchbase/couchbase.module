<?php

/**
 * @file
 * Integrate Drupal and Couchbase using the php-ext-couchbase
 * php extension.
 * 
 * Copyright (c) 2011-2012 DOCOMO Innovations, Inc.
 */

define ('COUCHBASE_CONF', 'couchbase');

/**
 * Implements hook_menu(). 
 */
function couchbase_menu() {
  $items = array();
  $items['admin/reports/couchbase'] = array(
    'title' => 'Couchbase statistics',
    'description' => 'View statistics for all couchbase instances.',
    'page callback' => 'couchbase_statistics',
    'access arguments' => array('access couchbase statistics'),
    'file' => 'couchbase.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_permission(). 
 */
function couchbase_permission() {
  return array(
    'access couchbase statistics'
  );
}

/**
 * Instantiate a Couchbase object given the cluster.
 * The cluster is defined in settings.php.  If this function
 * is called without any parameters, it will return the 
 * Couchbase object for the default cluster
 * @param
 *   $cluster The cluster to instantiate. Defaults to the
 *   "default" cluster
 * @param
 *   $bucket The bucket the Couchbase object will connect to 
 * @return
 *   Couchbase object initialized with the cluster and bucket
 *   parameters
 * 
 */
function couchbase($cluster = 'default', $bucket = 'default') {
  $clusters = &drupal_static(__FUNCTION__);
  $connections = variable_get(COUCHBASE_CONF, array());
  $connection = $connections[$cluster];
  if (!isset($servers[$cluster][$bucket])) {
    // todo: need to check the connection, and the error returned isn't enough
    $cb = new Couchbase($connection['host'] . ':' . $connection['port'], $connection['user'], $connection['password'], $bucket);
    if ($cb->getStats() !== FALSE) {
      if (isset($connection['options']) && count($connection['options'])) {
        foreach ($connection['options'] as $key => $value) {
          $cb->setOption($key, $value);
        }
      }
      $clusters[$cluster][$bucket] = $cb;
    }
    else {
      // Log an error if the connection cannot be made
      watchdog('couchbase', t('Connection to Couchbase cluster @cluster cannot be made', array('@cluster' => $cluster)), WATCHDOG_ERROR);
      return FALSE;      
    }
  }
  return $clusters[$cluster][$bucket];
}

/**
 * Instantiate Couchbase Admin object.  The admin object is
 * used in conjunction with the Couchbase REST Management API.
 * @param
 *   $cluster The cluster to instantiate. Defaults to the
 *   "default" cluster
 * @return
 *   Fully instantiated CouchbaseAdmin object
 */
function couchbase_admin($cluster = 'default') {
  $clusters = &drupal_static(__FUNCTION__);
  $connections = variable_get(COUCHBASE_CONF, array());
  $connection = $connections[$cluster];
  if (!isset($clusters[$cluster])) {
    $cb_admin = new CouchbaseAdmin($connection['host'], $connection['port'], $connection['user'], $connection['password']);
    $clusters[$cluster] = $cb_admin;
  }
  return $clusters[$cluster];
}

/**
 * Instantiate Couchbase Rest object. The Couchbase Rest
 * object can be used to interact with the internal Couchdb API.
 * Use this object to fetch UUIDs, create/view design documents 
 * @param
 *   $cluster The cluster to instantiate. Defaults to the
 *   "default" cluster
 * @return
 *   Fully instantiated CouchbaseRest object
 */
function couchbase_rest($cluster = 'default') {
  $clusters = &drupal_static(__FUNCTION__);
  $connections = variable_get(COUCHBASE_CONF, array());
  $connection = $connections[$cluster];
  if (!isset($clusters[$cluster])) {
    $cb_admin = new CouchbaseRest($connection['host']);
    $clusters[$cluster] = $cb_admin;
  }
  return $clusters[$cluster];
}

  
