<?php

/**
 * Implementation of hook_views_api().
 */
function views_share_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'views_share') . '/views',
  );
}

/**
 * Implementation of hook_menu().
 */
function views_share_menu() {
  $items = array();

  $items['view/%/%/%ctools_js/share'] = array(
    'title' => 'Share this view',
    'page callback' => 'views_share_modal',
    'page arguments' => array(1, 2, 3),
    'access callback' => TRUE, // TODO
    'type' => MENU_CALLBACK,
  );
  $items['view/%/%/embed'] = array(
    'title' => 'Embed this view',
    'page callback' => 'views_share_embed',
    'page arguments' => array(1, 2),
    'access callback' => TRUE, // TODO
    'type' => MENU_CALLBACK,
  );
  $items['view/%/%/oembed'] = array(
    'title' => 'Embed this view with oEmbed',
    'page callback' => 'views_share_oembed',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['view/%/%/preview'] = array(
    'title' => 'Preview embedding',
    'page callback' => 'views_share_preview',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function views_share_theme() {
  $path = drupal_get_path('module', 'views_share') . '/theme';
  return array(
    'views_share_embed' => array(
      'variables' => array('title' => NULL, 'content' => NULL),
      'template' => 'views-share-embed',
      'path' => $path,
    ),
    'views_share_preview' => array(
      'variables' => array('view' => NULL),
      'template' => 'views-share-preview',
      'path' => $path,
    ),
  );
}

/**
 * Menu callback for `view/%/%/preview`.
 */
function views_share_preview($view_name, $display_id) {
  $view = views_get_view($view_name);
  $view->build($display_id);
  $args = func_get_args();
  array_shift($args);
  array_shift($args);
  $view->set_arguments($args);
  print theme('views_share_preview', array('view' => $view));
  drupal_exit();
}

/**
 * Template preprocessor for theme('views_share_preview').
 */
function template_preprocess_views_share_preview(&$variables) {
  global $base_url, $language;

  $view = $variables['view'];
  $variables['title']    = t('Customize and preview embedded !title', array(
    '!title' => $view->get_title(),
  ));
  $form = drupal_get_form('views_share_preview_form', $view);
  $variables['form']     = drupal_render($form);
  $variables['base_url'] = $base_url;
  $variables['language'] = $language;
  $variables['language_dir'] = $language->direction == LANGUAGE_RTL ? 'rtl' : 'ltr';
  $variables['head']     = drupal_get_html_head(); 
  $variables['styles']   = drupal_get_css();
  $variables['scripts']  = drupal_get_js();
}

/**
 * Form function for `views_share_preview_form`.
 */
function views_share_preview_form($form, &$form_state, $view) {
  $plugin = _views_share_find_plugin($view);
  $form['embed_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Embeddable frame width'),
    '#default_value' => $plugin->options['embed_width'],
    '#field_suffix' => 'px',
    '#size' => 10,
  );
  $form['embed_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Embeddable frame height'),
    '#default_value' => $plugin->options['embed_height'],
    '#field_suffix' => 'px',
    '#size' => 10,
  );
  $query = drupal_get_query_parameters($_GET, array('q'));
  $iframe = _views_share_embed_code(
    $view, 
    $query,
    $plugin->options['embed_width'],
    $plugin->options['embed_height'],
    $plugin->options['embed_style']
  );
  $form['embed_share'] = array(
    '#type' => 'textarea',
    '#title' => t('Embed code'),
    '#value' => $iframe,
    '#rows' => 3,
    '#description' => t('Paste HTML to embed in website.'),
    '#attributes' => array(
      'readonly' => 'readonly',
      'class' => array('views-share-embed'),
    ),
  );
  $form['embed_preview'] = array(
    '#type' => 'item',
    '#title' => t('Preview'),
    '#markup' => '<div class="views-share-preview-wrapper">' . $iframe . '</div>',
  );
  drupal_add_js(drupal_get_path('module', 'views_share') . '/theme/views-share.preview.js');
  drupal_add_js(array('viewsSharePreview' => array(
    'embedCode' => _views_share_embed_code($view, $query, '%width', '%height', $plugin->options['embed_style']),
  )), 'setting');
  drupal_add_css(drupal_get_path('module', 'views_share') . '/theme/views-share.preview.css');
  return $form;
}

/**
 * Callback function for rendering the form in ctools modal window.
 *
 * @param string $view_name
 *   View machine name to pass onto the modal window.
 *
 * @param string $display_id
 *   Display machine name to pass onto the modal window.
 *
 * @param string $js
 *   The argument to the page callback will be the result of ctools_js_load()
 *   which will return TRUE if 'ajax' was the string, and FALSE if anything else
 *   (i.e, nojs) is the string.
 */
function views_share_modal($view_name, $display_id, $js = NULL) {
  // Build view first.
  $view = views_get_view($view_name);
  $view->set_display($display_id);
  $args = func_get_args();
  array_shift($args);
  array_shift($args);
  array_shift($args);
  $view->set_arguments($args);

  // Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('views_share_form', $view);
  }

  ctools_include('modal');
  $form_state = array(
    'title' => t('Share !title', array('!title' => $view->get_title())),
    'ajax' => TRUE,
    'view' => $view,
  );
  $output = ctools_modal_form_wrapper('views_share_form', $form_state);

  print ajax_render($output);
  drupal_exit();
}

/**
 * View sharing form rendered in the modal window.
 */
function views_share_form($form, &$form_state, $view = NULL) {
  if (isset($form_state['view'])) {
    $view = $form_state['view'];
  }
  $view->build();
  $query = drupal_get_query_parameters($_GET, array('q'));
  list($url, $options) = _views_share_view_url($view, $query);
  $url = url($url, $options);

  // Attach the CSS and JS to the form.
  $form['#attached']['js'] = array(drupal_get_path('module', 'views_share') . '/theme/views-share.form.js');
  $form['#attached']['css'] = array(drupal_get_path('module', 'views_share') . '/theme/views-share.form.css');

  if (module_exists('shorten')) {
    $form['short_url'] = array(
      '#type' => 'checkbox',
      '#title' => t('Short URL'),
      '#default_value' => FALSE,
    );
    $form['#attached']['js'][] = array(
      'data' => array(
        'viewsShare' => array(
          'originalURL' => $url,
          'shortURL' => shorten_url($url),
        ),
      ),
      'type' => 'setting',
    );
  }

  $form['share_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Link'),
    '#title_display' => 'invisible',
    '#value' => $url,
    '#size' => 100,
    '#description' => t('Paste link in email or IM.'),
    '#attributes' => array(
      'readonly' => 'readonly',
      'class' => array('views-share-link'),
      'title' => $view->get_title(),
    ),
  );

  $plugin = _views_share_find_plugin($view);
  $iframe = _views_share_embed_code(
    $view, 
    $query, 
    $plugin->options['embed_width'], 
    $plugin->options['embed_height'],
    $plugin->options['embed_style']
  );
  $form['share_embed'] = array(
    '#type' => 'textfield',
    '#title' => t('Embed code'),
    '#title_display' => 'invisible',
    '#value' => $iframe,
    '#size' => 100,
    '#description' => t('Paste HTML to embed in website.'),
    '#attributes' => array(
      'readonly' => 'readonly',
      'class' => array('views-share-embed'),
    ),
  );
  $args = empty($view->args) ? '' : '/' . implode('/', $view->args);
  $form['share_preview'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Customize and preview embedded view'), "view/{$view->name}/{$view->current_display}/preview{$args}", array(
      'query' => $query,
      'attributes' => array(
        'class' => 'views-share-preview',
      ),
    )),
  );

  return $form;
}

/**
 * Helper function to get embed code.
 */
function _views_share_embed_code($view, $query, $width, $height, $style) {
  $iframe = '<iframe' .
    ' src="' . _views_share_embed_url($view, $query, TRUE) . '"' .
    ' class="views-share-iframe"' .
    ' seamless="seamless"' .
    ' style="width:' . $width . 'px;' .
    ' height:' . $height . 'px;' .
    ' ' . $style .'"></iframe>';
  return $iframe;
}

/**
 * Helper function to get embed URL.
 */
function _views_share_embed_url($view, $query = array(), $absolute = FALSE, $oembed = FALSE) {
  $embed = $oembed ? 'oembed' : 'embed';
  $args = empty($view->args) ? '' : '/' . implode('/', $view->args);
  $opts = array(
    'query' => $query, 
    'absolute' => $absolute,
  );
  return url("view/{$view->name}/{$view->current_display}/{$embed}{$args}", $opts);
}

/**
 * Helper function to get unique view hashtag.
 */
function _views_share_hashtag($view) {
  return drupal_clean_css_identifier($view->name . '--' . $view->current_display);
}

/**
 * Helper function to get view URL in a format usable by url() and l().
 */
function _views_share_view_url($view, $query) {
  $url = !empty($_GET['referer']) ? url($_GET['referer'], array('absolute' => TRUE)) : $view->get_url();
  $options = array(
    'query' => $query,
    'absolute' => TRUE,
  );
  if (is_a($view->display_handler, 'views_plugin_display_attachment')) {
    $options['fragment'] = _views_share_hashtag($view);
  }
  return array($url, $options);
}

/**
 * Callback function to render the view in a frame.
 */
function views_share_embed($view_name, $display_id) {
  $view = views_get_view($view_name);
  if (!$view || !$view->access($display_id)) {
    return drupal_not_found(); // TODO return an undecorated "not found" page
  }

  $view->is_embedding = TRUE; // signal that we're embedding the view
  $args = func_get_args();
  array_shift($args); // remove $view_name
  array_shift($args); // remove $display_id
  $view->set_arguments($args);
  $view->build($display_id);
  $view->pre_execute(); // avoid $dom_id undefined notice
  $content = $view->render();

  drupal_add_js(drupal_get_path('module', 'views_share') . '/theme/views-share.embed.js');
  $plugin = _views_share_find_plugin($view);
  drupal_add_js(array('viewsShareEmbed' => array(
    'rewriteLinks' => $plugin->options['rewrite_links'],
  )), 'setting');  

  print theme('views_share_embed', array(
    'title' => $view->get_title(),
    'content' => $content
  ));
  drupal_exit();
}

/**
 * Callback function to render an oEmbed structure for the view.
 */
function views_share_oembed($view_name, $display_id) {
  $view = views_get_view($view_name);
  if (!$view || !$view->access($display_id)) {
    return drupal_not_found();
  }

  $args = func_get_args();
  array_shift($args); // remove $view_name
  array_shift($args); // remove $display_id
  $view->set_arguments($args);
  $view->build($display_id);
  
  $query = drupal_get_query_parameters($_GET, array('q', 'format', 'maxwidth', 'maxheight')); 
  $plugin = _views_share_find_plugin($view);
  if (empty($plugin->options['oembed'])) {
    return drupal_access_denied();
  }

  // Generate the oEmbed structure.
  // @see http://oembed.com/#section2
  $width = $plugin->options['embed_width'];
  if (isset($_GET['maxwidth']) && is_numeric($_GET['maxwidth'])) {
    $width = min($width, $_GET['maxwidth']);
  }
  $height = $plugin->options['embed_height'];
  if (isset($_GET['maxheight']) && is_numeric($_GET['maxheight'])) {
    $height = min($height, $_GET['maxheight']);
  }
  $oembed = (object)array(
    'version' => '1.0',
    'type' => 'rich',
    'width' => $plugin->options['embed_width'],
    'height' => $plugin->options['embed_height'],
    'title' => $view->get_title(),
    'url' => _views_share_embed_url($view, $query, TRUE),
    'provider_name' => variable_get('site_name', 'Drupal'),
    'provider_url' => url('<front>', array('absolute' => TRUE)),
    'html' => _views_share_embed_code(
      $view, 
      $query,
      $width,
      $height,
      $plugin->options['embed_style']
    )
  );
  if (!empty($plugin->options['oembed_author_name'])) {
    $oembed->author_name = $plugin->options['oembed_author_name'];
  }
  if (!empty($plugin->options['oembed_author_url'])) {
    $oembed->author_url = $plugin->options['oembed_author_url'];
  }

  // Output oEmbed JSON or XML.
  $format = @$_GET['format'];
  if (empty($format) || $format === 'json') {
    drupal_json_output($oembed);
  }
  else if ($format === 'xml') {
    drupal_add_http_header('Content-Type', 'text/xml');
    echo (string)new ObjectToXML($oembed);
  }
  drupal_exit();
}

/**
 * Implementation of hook_views_pre_build().
 */
function views_share_views_pre_build(&$view) {
  $embed_url = _views_share_embed_url($view);
  if ($view->use_ajax && url($_GET['q']) === $embed_url) {
    $view->is_embedding = TRUE;
  }
}

/**
 * Implementation of hook_views_pre_render().
 */
function views_share_views_pre_render(&$view) {
  if (empty($view->is_embedding)) return;
  $plugin = _views_share_find_plugin($view);

  // Hide header/footer elements if needed.
  if (!empty($plugin) && !empty($plugin->options['hide_header_footer'])) {
    foreach (array('header', 'footer') as $area) {
      foreach ($view->$area as $id => $handler) {
        if ($handler instanceof views_share_handler_area_share) continue;
        unset($view->{$area}[$id]);
        unset($view->display_handler->handlers[$area][$id]);
      }
    }
  }

  // Hide attachments if needed.
  if (!empty($plugin) && !empty($plugin->options['hide_attachments'])) {
    $view->attachment_before = $view->attachment_after = '';
  }
}

/**
 * Process variables for views-share-embed.tpl.php.
 *
 * The $variables array contains the following elements:
 * - content
 *
 * @see views-share-embed.tpl.php
 */
function template_preprocess_views_share_embed(&$variables) {
  global $base_url, $language;

  $variables['base_url'] = $base_url;
  $variables['language'] = $language;
  $variables['language_dir'] = $language->direction == LANGUAGE_RTL ? 'rtl' : 'ltr';
  $variables['head']     = drupal_get_html_head();
  $variables['styles']   = drupal_get_css();
  $variables['scripts']  = drupal_get_js();
}

/**
 * Implementation of hook_form_FORM_ID_alter() for `views_exposed_form`.
 */
function views_share_form_views_exposed_form_alter(&$form, &$form_state) {
  $view = $form_state['view'];
  if (empty($view) || empty($view->is_embedding)) return;
  // Change the action of the exposed filter form to our embedding URL if we're embedding the view.
  $form['#action'] = _views_share_embed_url($view);
  // Hide exposed form filter if requested.
  $plugin = _views_share_find_plugin($view);
  if (!empty($plugin) && !empty($plugin->options['hide_exposed_filters'])) {
    $form['#attributes']['style'] = 'display:none';
  }
}

/**
 * Return sharing plugin given a view.
 */
function _views_share_find_plugin($view) {
  foreach (array('header', 'footer') as $area) {
    foreach ($view->$area as $plugin) {
      if ($plugin instanceof views_share_handler_area_share) {
        return $plugin;
      }
    }
  }
  return NULL;
}

// @see http://www.phpclasses.org/package/4657-PHP-Generate-XML-from-values-of-object-variables.html
if (!class_exists('ObjectToXML')) {
  class ObjectToXML {
     private $dom;

     public function __construct($obj) {
        $this->dom = new DOMDocument("1.0", "UTF8");
        $this->dom->xmlStandalone = true;
        $root = $this->dom->createElement(get_class($obj));
        foreach($obj as $key=>$value) {
          $node = $this->createNode($key, $value);
          if($node != NULL) $root->appendChild($node);
        }
        $this->dom->appendChild($root);
     }

    private function createNode($key, $value) {
        $node = NULL;
        if(is_string($value) || is_numeric($value) || is_bool($value) || $value == NULL) {
          if($value == NULL) $node = $this->dom->createElement($key);
        else $node = $this->dom->createElement($key, (string)$value);
        } else {
        $node = $this->dom->createElement($key);
        if($value != NULL) {
          foreach($value as $key=>$value) {
            $sub = $this->createNode($key, $value);
            if($sub != NULL)  $node->appendChild($sub);
          }
        }
        }
      return $node;
    }

    public function __toString() {
      return $this->dom->saveXML();
    }
  }
}
