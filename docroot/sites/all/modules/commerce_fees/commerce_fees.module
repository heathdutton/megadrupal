<?php

/**
 * @file
 * Defines a system for add custom fees to an order.
 */

/**
 * Implements hook_menu().
 */
function commerce_fees_menu() {
  $items = array();

  $items['admin/commerce/config/fees'] = array(
    'title' => 'Fee types',
    'description' => 'Manage fee types.',
    'page callback' => 'commerce_fees_overview',
    'access arguments' => array('administer fees'),
    'file' => 'commerce_fees.admin.inc',
  );

  $items['admin/commerce/config/fees/add'] = array(
    'title' => 'Add a fee type',
    'description' => 'Create a new fee type.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fees_form', commerce_fees_new()),
    'access arguments' => array('administer fees'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'commerce_fees.admin.inc',
  );

  $fee_types = commerce_fees_types();

  foreach ($fee_types as $name => $fee) {
    // Convert underscores to hyphens for the menu item argument.
    $name_arg = strtr($name, '_', '-');

    $items['admin/commerce/config/fees/' . $name_arg] = array(
      'title' => 'Edit',
      'description' => 'Edit the fee type.',
      'page callback' => 'commerce_fees_edit_page',
      'page arguments' => array($name),
      'access arguments' => array('administer fees'),
      'weight' => 0,
      'file' => 'commerce_fees.admin.inc',
    );

    $items['admin/commerce/config/fees/' . $name_arg . '/edit'] = array(
      'title' => 'Edit',
      'description' => 'Edit the fee type.',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
    );

    $items['admin/commerce/config/fees/' . $name_arg . '/delete'] = array(
      'title' => 'Delete',
      'description' => 'Delete the fee type.',
      'page callback' => 'commerce_fees_delete_page',
      'page arguments' => array($name),
      'access arguments' => array('administer fees'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 10,
      'file' => 'commerce_fees.admin.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_help().
 */
function commerce_fees_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_fees':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('You can configure rules to trigger a fee addition to a given order, examples of this are adding a shipping fee if the delivery is overseas or charge extra for cash on delivery payment method.') . '</p>';
      $output .= '<p>' . t('Commerce fees will add a new line item to the order with the arbitrary amount configured.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Go to <a href="@fee_types">fee types</a> and add a new type.', array('@fee_types' => url('admin/commerce/config/fees'))) . '</li>';
      $output .= '<li>' . t('Now you can add <a href="@rules">a rule</a>.', array('@rules' => url('admin/config/workflow/rules')));
      $output .= '<ul>';
      $output .= '<li>' . t('Event: "Apply a fee to a given order".') . '</li>';
      $output .= '<li>' . t('Set the conditions.') . '</li>';
      $output .= '<li>' . t('Action: "Apply a fee to an order".');
      $output .= '<ul>';
      $output .= '<li>' . t('Entity data selector: "commerce-order".') . '</li>';
      $output .= '<li>' . t('Fee: Your fee type.') . '</li>';
      $output .= '<li>' . t('Set amounts, currency and taxes as necessary.') . '</li>';
      $output .= '</li></ul>';
      $output .= '</li></ul>';
      $output .= '</ul>';

      return $output;
    case 'admin/commerce/config/fees':
      return '<p>' . t('Define your custom fees for add to the orders.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function commerce_fees_permission() {
  return array(
    'administer fees' => array(
      'title' => t('Administer types'),
      'description' => t('Allows users to administer fee types.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function commerce_fees_theme() {
  return array(
    'commerce_fees_admin_overview' => array(
      'variables' => array('fee_type' => NULL),
      'file' => 'commerce_fees.admin.inc',
    ),
  );
}

/**
 * Returns an array of fee types defined.
 *
 * @return array
 *   An associative array of fee type arrays keyed by the name.
 */
function commerce_fees_types() {
  $fee_types = &drupal_static(__FUNCTION__);

  // If the fee types haven't been defined yet, do so now.
  if (!isset($fee_types)) {
    $fee_types = array();

    // Look for fee types currently defined in the database.
    $fee_types = db_query('SELECT * FROM {commerce_fees}')->fetchAllAssoc('name', PDO::FETCH_ASSOC);
  }

  return $fee_types;
}

/**
 * Resets the cached list of fee types.
 */
function commerce_fees_reset() {
  $fee_types = &drupal_static('fee_types');
  $fee_types = NULL;
}

/**
 * Returns a single fee type array.
 *
 * @param string $name
 *   The machine-name of the fee type to return.
 *
 * @return mixed
 *   The specified fee type array or FALSE if it did not exist.
 */
function commerce_fees_load($name) {
  $fee_types = commerce_fees_types();

  return empty($fee_types[$name]) ? FALSE : $fee_types[$name];
}

/**
 * Returns an array of fee types defined.
 *
 * @return array
 *   An associative array of fee type arrays keyed by the name.
 */
function commerce_fees_get_types() {
  $fees = commerce_fees_types();

  $fee_types = array();
  foreach ($fees as $name => $fee) {
    $fee_types[$name] = $fee['display_title'];
  }

  return empty($fee_types) ? FALSE : $fee_types;
}

/**
 * Returns an initialized fee type array for forms.
 */
function commerce_fees_new() {
  return array(
    'name' => '',
    'title' => '',
    'display_title' => '',
    'description' => '',
    'is_new' => TRUE,
  );
}

/**
 * Saves a fee type to the database.
 *
 * @param array $fee
 *   The fee type to be saved to the database via drupal_write_record().
 * @param boolean $skip_reset
 *   Boolean indicating whether or not this save should result in fee types
 *   being reset and the menu being rebuilt; defaults to FALSE. This is
 *   useful when you intend to perform many saves at once, as menu rebuilding is
 *   very costly in terms of performance.
 *
 * @return mixed
 *   The return value of the call to drupal_write_record() to save the fee type;
 *   either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating
 *   the type of query performed to save the fee type.
 */
function commerce_fees_save($fee, $skip_reset = FALSE) {
  $op = drupal_write_record('commerce_fees', $fee, empty($fee['is_new']) ? 'name' : array());

  // Clear the necessary caches and rebuild the menu items.
  if (!$skip_reset) {
    commerce_fees_reset();
    menu_rebuild();
  }

  variable_set('menu_rebuild_needed', TRUE);

  return $op;
}

/**
 * Deletes a fee type.
 *
 * @param string $name
 *   The machine-name of the fee type.
 * @param boolean $skip_reset
 *   Boolean indicating whether or not this save should result in fee types
 *   being reset and the menu being rebuilt; defaults to FALSE. This is
 *   useful when you intend to perform many saves at once, as menu rebuilding is
 *   very costly in terms of performance.
 */
function commerce_fees_delete($name, $skip_reset = FALSE) {
  db_delete('commerce_fees')
    ->condition('name', $name)
    ->execute();

  // Clear the necessary caches and rebuild the menu items.
  if (!$skip_reset) {
    commerce_fees_reset();
    menu_rebuild();
  }

  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_fees_commerce_price_component_type_info() {
  $components = array();

  // Define a fee types price component type.
  foreach (commerce_fees_types() as $name => $fee) {
    $components[$name] = array(
      'title' => $fee['title'],
      'display_title' => $fee['display_title'],
      'fee_type' => $name,
      'weight' => 100,
    );
  }

  return $components;
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_fees_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['fee'] = array(
    'name' => t('Custom fee'),
    'description' => t('References a custom fee and displays the fee with the custom title.'),
    'add_form_submit_value' => t('Add custom fee'),
    'base' => 'commerce_fees_line_item',
  );

  return $line_item_types;
}

/**
 * Returns the title of a custom custom fee line item.
 */
function commerce_fees_line_item_title($line_item) {
  // Fallback to the line item label.
  return $line_item->line_item_label;
}

/**
 * Returns the elements necessaries to add a fee line item.
 */
function commerce_fees_line_item_add_form($form, &$form_state) {
  // Store the available fees in the form.
  $form = array();

  $form['fee'] = array(
    '#type' => 'select',
    '#title' => t('Fee'),
    '#description' => t('The fee to add.'),
    '#options' => commerce_fees_get_types(),
  );
  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#description' => t('Specify a numeric amount to add to the unit price.'),
    '#size' => 10,
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => commerce_currency_get_code(),
    '#default_value' => commerce_default_currency(),
  );

  // Add support for base rates including tax.
  if (module_exists('commerce_tax')) {
    $form['include_tax'] = array(
      '#type' => 'select',
      '#title' => t('Include tax in this rate'),
      '#description' => t('Saving a fee tax inclusive will bypass later calculations for the specified tax.'),
      '#options' => commerce_fees_get_tax_rate_options(),
    );
  }

  return $form;
}

/**
 * Adds the selected fee information to a new custom fee line item.
 *
 * @param object $line_item
 *   The newly created line item object.
 * @param array $element
 *   The array representing the widget form element.
 * @param array $form_state
 *   The present state of the form upon the latest submission.
 * @param array $form
 *   The actual form array.
 *
 * @return mixed
 *   NULL if all is well or an error message if something goes wrong.
 */
function commerce_fees_line_item_add_form_submit($line_item, $element, &$form_state, $form) {
  $order = $form_state['commerce_order'];
  $price_component_type = $element['actions']['fee']['#value'];

  // Built the unit_price.
  $base_rate = array(
    'amount' => $element['actions']['amount']['#value'],
    'currency_code' => $element['actions']['currency_code']['#value'],
    'data' => array(),
  );

  // If the data array specifies an included tax, include it now.
  if (module_exists('commerce_tax') && !empty($element['actions']['include_tax']['#value']) && $tax_rate = commerce_tax_rate_load($element['actions']['include_tax']['#value'])) {
    // Reverse apply the tax.
    $tax_amount = $base_rate['amount'] - ($base_rate['amount'] / (1 + $tax_rate['rate']));
    $tax_amount = commerce_tax_rate_round_amount($tax_rate, $tax_amount);

    // Add a base price to the data array.
    $component = array(
      'amount' => $base_rate['amount'] - $tax_amount,
      'currency_code' => $base_rate['currency_code'],
      'data' => array(),
    );

    $base_rate['data'] = commerce_price_component_add($base_rate, $price_component_type, $component, TRUE, FALSE);

    // Add the tax to the data array.
    $component['amount'] = $tax_amount;
    $component['data']['tax_rate'] = $tax_rate;

    $base_rate['data'] = commerce_price_component_add($base_rate, $tax_rate['price_component'], $component, TRUE);
  }
  else {
    $base_rate['data'] = commerce_price_component_add($base_rate, $price_component_type, $base_rate, TRUE, FALSE);
  }

  // Populates a custom fee line item with the specified values.
  commerce_fees_line_item_populate($line_item, $price_component_type, $base_rate);
}

/**
 * Creates a new custom fee line item populated with the proper fee values.
 *
 * @param string $fee
 *   The machine-name of the fee type.
 * @param array $unit_price
 *   A price array used to initialize the value of the line item's unit price.
 * @param integer $order_id
 *   The ID of the order the line item belongs to.
 * @param array $data
 *   An array value to initialize the line item's data array with.
 *
 * @return object
 *   The custom fee line item for the specified service initialized to the given
 *   unit price.
 */
function commerce_fees_line_item_new($fee, $unit_price, $order_id = 0, $data = array()) {
  // Create the new line item.
  $line_item = entity_create('commerce_line_item', array(
    'type' => 'fee',
    'order_id' => $order_id,
    'quantity' => 1,
    'data' => $data,
  ));

  // Populates a custom fee line item with the specified values.
  commerce_fees_line_item_populate($line_item, $fee, $unit_price);

  // Return the line item.
  return $line_item;
}

/**
 * Populates a custom fee line item with the specified values.
 *
 * @param object $line_item
 *   A custom fee line item that should be added to the order.
 * @param string $fee
 *   The machine-name of the custom fee the line item represents.
 * @param array $unit_price
 *   A price array used to initialize the value of the line item's unit price.
 */
function commerce_fees_line_item_populate($line_item, $fee, $unit_price) {
  // Load fee type.
  $fee_type = commerce_fees_load($fee);

  // Use the label to store the display title of the custom fee.
  $line_item->line_item_label = $fee_type['display_title'];

  // Populates a custom fee line item with the specified values.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->commerce_unit_price = $unit_price;

  // Ensure a quantity of 1.
  $line_item->quantity = 1;
}

/**
 * Deletes any existing custom fee line items with the same name from the order.
 *
 * @param object $order
 *   The order object to delete the custom fee line items from.
 * @param string $fee
 *   The machine-name of the fee type.
 * @param boolean $skip_save
 *   Boolean indicating whether or not to skip saving the order in this
 *   function.
 */
function commerce_fees_delete_fee_line_item($order, $fee, $skip_save = FALSE) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // When deleting more than one line item, metadata_wrapper will give problems
  // if deleting while looping through the line items. So first remove from
  // order and then delete the line items.
  $line_item_ids = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If this line item is a fee type line item...
    if ($line_item_wrapper->getBundle() == 'fee') {
      $price = $line_item_wrapper->commerce_unit_price->value();
      foreach ($price['data']['components'] as $component) {
        if ($line_item_wrapper->getBundle() == $fee) {
          // Store its ID for later deletion and remove the reference from the
          // line item reference field.
          $line_item_ids[] = $line_item_wrapper->line_item_id->value();
          $order_wrapper->commerce_line_items->offsetUnset($delta);
        }
      }
    }
  }

  // If we found any fee type line items...
  if (!empty($line_item_ids)) {
    // First save the order to update the line item reference field value.
    if (!$skip_save) {
      commerce_order_save($order);
    }

    // Then delete the line items.
    commerce_line_item_delete_multiple($line_item_ids);
  }
}

/**
 * Adds a custom fee line item to an order.
 *
 * @param object $line_item
 *   An unsaved custom fee line item that should be added to the order.
 * @param object $order
 *   The order to add the custom fee line item to.
 * @param boolean $skip_save
 *   Boolean indicating whether or not to skip saving the order in this
 *   function.
 *
 * @return mixed
 *   The saved custom fee line item object or FALSE on failure.
 */
function commerce_fees_add_fee_line_item($line_item, $order, $skip_save = FALSE) {
  // Do not proceed without a valid order.
  if (empty($order)) {
    return FALSE;
  }

  // Save the incoming line item now so we get its ID.
  commerce_line_item_save($line_item);

  // Add it to the order's line item reference value.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  $order_wrapper->commerce_line_items[] = $line_item;

  // Save the updated order.
  if (!$skip_save) {
    commerce_order_save($order);
  }
  // Otherwise, we still need to update the order total to take for account
  // added custom fee line item.
  else {
    commerce_order_calculate_total($order);
  }

  return $line_item;
}

/**
 * Implements hook_commerce_cart_order_refresh().
 *
 * Remove any existing commerce custom fee line item.
 */
function commerce_fees_commerce_cart_order_refresh($order_wrapper) {
  $line_item_ids = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If the line item is a fee remove it.
    if ($line_item_wrapper->getBundle() == 'fee') {
      // Delete the line item, and remove it from the order.
      $line_item_ids[] = $line_item_wrapper->line_item_id->value();
      $order_wrapper->commerce_line_items->offsetUnset($delta);
    }
  }

  // If we found any fee type line items...
  if (!empty($line_item_ids)) {
    // Then delete the line items.
    commerce_line_item_delete_multiple($line_item_ids);
  }

  rules_invoke_event('commerce_fees_order', $order_wrapper);
}

/**
 * Generate option list from tax rates.
 */
function commerce_fees_get_tax_rate_options() {
  if (module_exists('commerce_tax')) {
    // Build an array of tax types that are display inclusive.
    $inclusive_types = array();

    foreach (commerce_tax_types() as $name => $tax_type) {
      if ($tax_type['display_inclusive']) {
        $inclusive_types[$name] = $tax_type['title'];
      }
    }

    // Build an options array of tax rates of these types.
    $options = array(0 => t('None'));

    foreach (commerce_tax_rates() as $name => $tax_rate) {
      if (in_array($tax_rate['type'], array_keys($inclusive_types))) {
        $options[$inclusive_types[$tax_rate['type']]][$name] = t('Including @title', array('@title' => $tax_rate['title']));
      }
    }

    reset($options);
    return $options;
  }
}
