<?php

/**
 * @file
 * Provides Drupal integration to Acobot.
 */

// Remove Acobot from all administrative pages, @see http://drupal.org/node/34970.
define('ACOBOT_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_menu().
 */
function acobot_menu() {
  $items = array();

  $items['admin/config/services/acobot'] = array(
    'title' => 'Acobot',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('acobot_admin_settings_form'),
    'access arguments' => array('administer acobot'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'acobot.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function acobot_permission() {
  return array(
    'administer acobot' => array(
      'title' => t('Administer Acobot'),
      'description' => t('Configure Acobot settings and enter your installation key.'),
    ),
    'use PHP for Acobot visibility' => array(
      'title' => t('User PHP for Acobot visibility'),
      'description' => t('Enter PHP code for Acobot visibility.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_page_alter().
 *  Insert Acobot JavaScript into page regions.
 */
function acobot_page_alter(&$page) {
  global $user;
  $token = variable_get('acobot_token', '');

  if (!empty($token) && (_acobot_visibility_pages() && _acobot_visibility_user($user))) {
    drupal_add_js('http://js.acobot.com/' . check_plain($token) . '.js', 'external');
    $script = 'var _aco = _aco || [];';
    drupal_add_js($script, array('type' => 'inline', 'scope' => 'footer'));
    if ($user->uid) {
      $user_info = "_aco.push(['email', '" . check_plain($user->mail) . "']);";
      drupal_add_js($user_info, array('type' => 'inline', 'scope' => 'footer'));
    }
  }
}

/**
 * Determine if Acobot code should be added to this page.
 *
 * @return bool
 *    TRUE if the code should be added to the page, otherwise FALSE
 */
function _acobot_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('acobot_visibility_pages', 0);
    $setting_pages = variable_get('acobot_pages', ACOBOT_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the chat code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }

  return $page_match;
}

/**
 * Chat box visibility check for an user object.
 *
 * @param $account
 *   A user object to check.
 *
 * @return bool
 *   TRUE if the user should be shown the Acobot chat box, otherwise FALSE.
 */
function _acobot_visibility_user($account) {
  return _acobot_visibility_roles($account);
}

/**
 * Determine if Acobot code should be added for this user's role.
 *
 * @param $account
 *    A user with an array of roles to check.
 *
 * @return bool
 *    TRUE if the code should be added to the page, otherwise FALSE
 */
function _acobot_visibility_roles($account) {

  $visibility = variable_get('acobot_visibility_roles', 0);
  $enabled = $visibility;
  $roles = variable_get('acobot_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that should be shown/excluded from showing.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for visibility, therefore all roles should get chat.
    $enabled = TRUE;
  }

  return $enabled;
}
