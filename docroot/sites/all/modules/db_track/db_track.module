<?php

/**
 * @file
 * This module provide additional track for admin panel.
 */

/**
 * Implements hook_menu().
 */
function db_track_menu() {
  $items['admin/reports/db_track'] = array(
    'title' => 'DB Track',
    'description' => 'See the changes in admin',
    'page callback' => 'db_tracker_table',
    'access arguments' => array('access db track report'),
    'file' => 'includes/db_track_report.admin.inc',
  );

  $items['admin/config/development/db_track'] = array(
    'title' => 'DB Track',
    'description' => 'See the changes in admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('db_track_settings_form'),
    'access arguments' => array('access db track settings'),
    'file' => 'includes/db_track_settings.admin.inc',
  );

  $items['admin/reports/db_track/drop_track'] = array(
    'title' => 'DB Track Drop Report Table',
    'description' => 'Drop tracking table',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('db_track_drop_track'),
    'access arguments' => array('access db track report cleanup'),
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function db_track_form_alter(&$form, &$form_state, $form_id) {

  // Excluded urls.
  $excluded_urls = variable_get('db_track_excluded_url', '');
  // Add hardcoded urls.
  $excluded_urls .= '
admin/content
admin/modules
admin/people
admin/modules/list/confirm
admin/reports/db_track';

  $path = current_path();

  // Condition for detect administrator panel's forms on allowed urls.
  if ((!(drupal_match_path($path, $excluded_urls)))
    && (stripos(current_path(), 'admin/') === 0)) {
    $form['#submit'][] = 'db_track_handler';
  }
}

/**
 * Implements hook_permission().
 */
function db_track_permission() {
  return array(
    'access db track settings' => array(
      'title' => t('DB Track settings'),
      'description' => t('Access to DB Track settings'),
    ),
    'access db track report' => array(
      'title' => t('DB Track report'),
      'description' => t('Access to DB Track report'),
    ),
    'access db track report cleanup' => array(
      'title' => t('DB Track report cleanup'),
      'description' => t('Access to DB Track report cleanup'),
    ),
  );
}

/**
 * DB Track additional handler for allowed forms.
 */
function db_track_handler($form, &$form_state) {
  $start_values = array();
  $keys = array_keys($form_state['values']);

  $restricted_fields = array(
    'vertical_tabs',
    'item',
  );

  // Collect rendered values of form.
  $start_values = db_track_start_field_collector($form, $keys, $restricted_fields);

  // Compare changed values and write if true.
  $cur_path = current_path();
  global $user;

  if ((!(empty($start_values))) && (!(empty($form_state['values'])))) {
    foreach ($form_state['values'] as $field => $value) {
      if ((array_key_exists($field, $start_values))
      && (isset($start_values[$field]))
      && (!is_array($value))
      && ($form_state['values'][$field] != $start_values[$field])) {
        db_insert('db_track')->fields(array(
          'change_time' => REQUEST_TIME,
          'url' => $cur_path,
          'user' => $user->uid,
          'form_id' => $form['form_id']['#value'],
          'field_name' => $field,
          'start_value' => $start_values[$field],
          'end_value' => $form_state['values'][$field],
        ))->execute();
      }
    }
  }
}

/**
 * Function recursively go through $form and finds start values.
 *
 * @return array
 *   An array containing default rendered values from handled $form
 */
function db_track_start_field_collector($form, $keys, $restricted_fields) {
  $prepared_fields = array();

  if (is_array($form) && !empty($form)) {
    foreach ($form as $field_key => $field_value) {
      if (is_array($form[$field_key])) {
        if (in_array($field_key, $keys)
          && array_key_exists('#default_value', $form[$field_key])) {
          $prepared_fields[$field_key] = $form[$field_key]['#default_value'];
        }
        elseif (array_key_exists('#type', $form[$field_key])
          && (!(in_array($form[$field_key]['#type'], $restricted_fields)))) {
          $prepared_field = db_track_start_field_collector($form[$field_key], $keys, $restricted_fields);
          if (!empty($prepared_field)) {
            $prepared_fields += $prepared_field;
          }
        }
      }
    }

    if (!empty($prepared_fields) && is_array($prepared_fields)) {
      return $prepared_fields;
    }
  }
}

/**
 * Page callbak for Drop track table().
 */
function db_track_drop_track($form, $form_state) {
  return confirm_form($form,
  t('Are you sure want to drop DB Track table?'),
  'admin/reports/db_track');
}

/**
 * Submit callback for 'db_track_drop_track' form.
 */
function db_track_drop_track_submit($form, &$form_state) {
  db_truncate('db_track')->execute();
  drupal_set_message(t('Track Table cleared'));
  $form_state['redirect'] = 'admin/reports/db_track';
}
