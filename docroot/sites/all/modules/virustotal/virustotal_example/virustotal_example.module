<?php

/**
 * @file
 * Examples demonstrating the VirusTotal API.
 *
 * The VirusTotal API lets you upload and scan files, submit and scan URLs,
 * access finished scan reports and make automatic comments on URLs or samples
 * without the need of using the HTML website interface. In other words, it
 * allows you to build simple scripts to access any information of VT.
 *
 * The Drupal VirusTotal API module provides the following functions:
 * - scanFile() uploads a file to VirusTotal.
 * - getFileReport() retrieves the scan report.
 * - scanUrl() sends an URL to scan.
 * - getUrlReport() retrieves the URL report.
 * - makeComment() adds a comment to an existing report.
 *
 * This example demonstrates only basic API functionality, and will show you
 * how to use the VT API class in your modules.
 *
 * Notice that public API usage is limited to at most 4 requests of any nature
 * in a given 1 minutes time frame. If you run a honeyclient, honeypot or any
 * other automation that is going to provide resources to VirusTotal and not
 * only retrieve reports you are entitled to a special API with a higher request
 * rate quota, ask for it at contact@virustotal.com. The public API is a free
 * service, available for any web site or application that is free to consumers.
 * Note that you will only have a higher request rate quota when asking for
 * files or URLs that you previously sent to VirusTotal.
 *
 * The API must not be used in commercial products or services, it can not be
 * used as a substitute for antivirus products and it can not be integrated in
 * any project that may harm the antivirus industry directly or indirectly.
 * Noncompliance of these terms will result in inmediate permanent ban of the
 * infractor individual or organization. Please see the terms of service for
 * more information.
 * https://www.virustotal.com/about/terms-of-service/
 *
 * Further resources include the VT API documentation
 * https://www.virustotal.com/documentation/public-api/
 */

/**
 * Submit callback for sending a file.
 *
 * The VirusTotal API allows you to send files. Before performing your
 * submissions we encourage you to retrieve the latest report on the
 * files, if it is recent enough you might want to save time and bandwidth
 * by making use of it.
 *
 * Also see scanFile() function documentation in virustotal.class.php.
 */
function virustotal_example_form_submit_file($form, &$form_state) {

  // Rebuild the form directly so submitted values will be held.
  $form_state['rebuild'] = TRUE;

  // Save uploaded file temporary.
  $validators = array('file_validate_extensions' => array());
  $file = file_save_upload('upload', $validators);

  if ($file == FALSE) {
    drupal_set_message(t('File could not be saved.'), 'error');
    return;
  }

  // Submit the file for scanning.
  $vt = new VirusTotal();
  $response = $vt->scanFile($file);

  // Print permalink to report.
  if ($response['response_code'] == VIRUSTOTAL_RESULT_OK) {
    drupal_set_message(t('Report !permalink.', array('!permalink' => l(t('permalink'), $response['permalink']))));
  }
}

/**
 * Submit callback for sending a URL.
 *
 * URLs can also be submitted for scanning. Once again, before performing
 * your submission we encourage you to retrieve the latest report on the
 * URL, if it is recent enough you might want to save time and bandwidth
 * by making use of it.
 *
 * Also see scanUrl() function documentation in virustotal.class.php.
 */
function virustotal_example_form_submit_url($form, &$form_state) {

  // Rebuild the form directly so submitted values will be held.
  $form_state['rebuild'] = TRUE;

  // Submits the URL for scanning.
  $vt = new VirusTotal();
  $response = $vt->scanUrl($form_state['values']['url']);

  // Print permalink to report.
  if ($response['response_code'] == VIRUSTOTAL_RESULT_OK) {
    drupal_set_message(t('Report !permalink.', array('!permalink' => l(t('permalink'), $response['permalink']))));
  }
}

/**
 * Submit callback for requesting a file report.
 *
 * Also see getFileReport() and getUrlReport() functions documentation
 * in virustotal.class.php.
 */
function virustotal_example_form_submit_report_request($form, &$form_state) {

  // Rebuild the form directly so submitted values will be held.
  $form_state['rebuild'] = TRUE;

  // Request a file / URL report.
  $vt = new VirusTotal();
  switch ($form_state['values']['report_type']) {
    case 'file':
      $response = $vt->getFileReport($form_state['values']['report_resource']);
      break;
    case 'url':
      $response = $vt->getUrlReport($form_state['values']['report_resource']);
      break;
  }

  if ($response['response_code'] == VIRUSTOTAL_RESULT_OK) {
    // Create an array containig all AV results.
    $issues = array();
    foreach ($response['scans'] as $av => $result) {
      if ($result['detected']) {
        $issues[] = t('@av: @result', array('@av' => $av, '@result' => $result['result']));
      }
    }
    // Set a status message containig the reports date and an issue list.
    drupal_set_message(t('Report of @date has the following issues: !issues',
      array(
        '@date' => $response['scan_date'],
        '!issues' => theme('item_list', array('items' => $issues)),
      ))
    );
  }
}

/**
 * Submit callback for creating a comment on a reports page.
 *
 * Also see makeComment() function documentation in virustotal.class.php.
 */
function virustotal_example_form_submit_make_comment($form, &$form_state) {

  // Rebuild the form directly so submitted values will be held.
  $form_state['rebuild'] = TRUE;

  // Creates a comment on a file / URL report.
  $vt = new VirusTotal();
  $response = $vt->makeComment(
    $form_state['values']['comment_resource'],
    $form_state['values']['comment_body']
  );
}

/**
 * Implements hook_virustotal_query_alter().
 *
 * React and/or make changes on the request data before the query is fired.
 */
function virustotal_example_virustotal_query_alter(&$data, $function) {
  // Print a status message containing the requested report ressource ID.
  if ($function == VIRUSTOTAL_FUNC_GET_URL_REPORT || $function == VIRUSTOTAL_FUNC_GET_FILE_REPORT) {
    drupal_set_message(t('Requested resource: @resource', array('@resource' => $data['resource'])));
  }
}

/**
 * Implements hook_virustotal_result_alter().
 *
 * React and/or make changes on the result data before it is returned.
 */
function virustotal_example_virustotal_result_alter(&$data, $function) {
  // Print a status message of the response status code's meaning.
  drupal_set_message(t('Response code: @response_code, Verbose message: @verbose_msg', array(
    '@response_code' => $data['response_code'],
    '@verbose_msg' => $data['verbose_msg'])
  ));
}

/**
 * Implements hook_menu().
 */
function virustotal_example_menu() {
  $items = array();
  $items['virustotal_example'] = array(
    'title' => 'VirusTotal API Examples',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virustotal_example_form'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Page callback.
 *
 * Provides an interface to send files and URLs, request reports
 * or make comments.
 */
function virustotal_example_form($form, &$form_state) {

  // Vertical tabs.
  $form['examples'] = array(
    '#type' => 'vertical_tabs',
  );

  // Send an file for analysis.
  $form['examples']['send_file'] = array(
    '#type' => 'fieldset',
    '#title' => t('Send a file'),
  );
  $form['examples']['send_file']['upload'] = array(
    '#type' => 'file',
    '#title' => t('Choose a file'),
    '#description' => t("Before performing your submissions we encourage you to retrieve the latest report on the files, if it is recent enough you might want to save time and bandwidth by making use of it. Any kind of files can be uploaded, recommended maximum filesize is 32 MB."),
  );
  $form['examples']['send_file']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send file'),
    '#submit' => array('virustotal_example_form_submit_file'),
  );

  // Send an URL for analysis.
  $form['examples']['send_url'] = array(
    '#type' => 'fieldset',
    '#title' => t('Send an URL'),
  );
  $form['examples']['send_url']['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#description' => t("URLs can also be submitted for scanning. Once again, before performing your submission we encourage you to retrieve the latest report on the URL, if it is recent enough you might want to save time and bandwidth by making use of it."),
  );
  $form['examples']['send_url']['submit_'] = array(
    '#type' => 'submit',
    '#value' => t('Send URL'),
    '#submit' => array('virustotal_example_form_submit_url'),
  );

  // Request a file or URL report.
  $form['examples']['report_request'] = array(
    '#type' => 'fieldset',
    '#title' => t('Request a report'),
  );
  $form['examples']['report_request']['report_resource'] = array(
    '#type' => 'textfield',
    '#title' => t('Resource'),
    '#description' => t("A md5/sha1/sha256 hash will retrieve the most recent report on a given sample. A URL will retrieve the most recent report on the given URL. You may also specify a permalink identifier (sha256-timestamp (Scan ID) as returned by the file upload API) to access a specific report."),
  );
  $form['examples']['report_request']['report_type'] = array(
    '#type' => 'select',
    '#title' => t('Resource type'),
    '#options' => array(
      'file' => t('File'),
      'url' => t('URL'),
    ),
  );
  $form['examples']['report_request']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Get report'),
    '#submit' => array('virustotal_example_form_submit_report_request'),
  );

  // Create a comment on a report.
  $form['examples']['make_comment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create a comment'),
  );
  $form['examples']['make_comment']['comment_resource'] = array(
    '#type' => 'textfield',
    '#title' => t('Resource'),
    '#description' => t("Either a md5/sha1/sha256 hash of the file you want to review or the URL itself that you want to comment on."),
  );
  $form['examples']['make_comment']['comment_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Comment'),
    '#description' => t("The actual review, you can tag it using the '#' twitter-like syntax (e.g. #disinfection #zbot) and reference users using the '@' syntax (e.g. @EmilianoMartinez)."),
  );
  $form['examples']['make_comment']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create comment'),
    '#submit' => array('virustotal_example_form_submit_make_comment'),
  );

  return $form;
}
