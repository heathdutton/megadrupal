<?php
/**
 * Implement a multiple choice field for the Quizzler package.
 */

/**
 * Implement hook_field_info()
 */
function quizzler_multi_quizzler_field_info() {
  return array(
    'name' => t("Multiple choice question")
  );
}

/**
 * Implement hook_quizzler_user_element()
 */
function quizzler_multi_quizzler_user_element($field, $element) {
  if (!isset($field->multi) || !isset($field->multi['options'])) {
    return $element;
  }
  
  foreach ($field->multi['options'] as $option) {
    $element['quizzler_multi-' . $option->oid] = array(
      '#type'		=> 'checkbox',
      '#title'	=> $option->value
    );
  }
  
  return $element;
}

/**
 * Implement hook_quizzler_user_element_submit()
 */
function quizzler_multi_quizzler_user_element_submit($field, $form_state) {
  $answers = array();
  $correct = TRUE;
  foreach ($field->multi['options'] as $option) {
    if ($form_state['values']['quizzler_multi-' . $option->oid]) {
      $answers[] = $option->oid;
      if (!$option->correct) {
        $correct = FALSE;
      }
    }
  }
  
  quizzler_save_answer($field, join(",", $answers), $correct);
}

/**
 * Implement hook_quizzler_field_submit()
 */
function quizzler_multi_quizzler_field_submit($field, $form_data) {
  $options = quizzler_multi_collect_options($field, $form_data);
  $field->multi = array(
    'options' => $options
  );
}

/**
 * Implement hook_quizzler_field_validate()
 */
function quizzler_multi_quizzler_field_validate($field) {
  if (!isset($field->multi)) {
    return;
  }
  
  foreach ($field->multi['options'] as $option) {
    // written out for clarity :)
    $validate = FALSE;
    if ((int) $option->oid) {
      $validate = TRUE;
    }
    if ($option->correct) {
      $validate = TRUE;
    }
    if (isset($option->delete) && $option->delete) {
      $validate = FALSE;
    }
    
    if ($validate && !$option->value) {
      form_set_error('quizzler_multi_option_' . $option->delta . '_value', t("You must insert an answer in this field."));
    }
  }
}

/**
 * Implement hook_quizzler_field_save()
 */
function quizzler_multi_quizzler_field_save($field) {
  if (!isset($field->multi)) {
    return;
  }
  
  foreach ($field->multi['options'] as $option) {
    if ((int) $option->oid) {
      quizzler_multi_update_option($option);
    }
    else {
      // until we sort out the AJAX callback for new options,
      // we may see empty options here, so filter them out
      if ($option->value) {
        quizzler_multi_insert_option($option);
      } 
    }
  }
}

/**
 * 
 * Insert a new option in the database.
 * 
 * @param $option
 */
function quizzler_multi_insert_option($option) {
  if ($option->delete) {
    return;
  }

  $option->oid = db_insert('quizzler_multi_options')
    ->fields(array(
        'fid'	      => $option->fid,
        'delta'	    => $option->delta,
        'value'	    => $option->value,
        'correct'	  => $option->correct
      ))
    ->execute();
  }

/**
 * 
 * Update an existing option in the database.
 * 
 * @param $option
 */
function quizzler_multi_update_option($option) {
  if ($option->delete) {
    quizzler_delete_option($option);
    return;
  }

  db_update('quizzler_multi_options')
    ->fields(array(
      'oid'				=> $option->oid,
      'fid'	      => $option->fid,
      'delta'	    => $option->delta,
      'value'	    => $option->value,
      'correct'	  => $option->correct
      )
    )
    ->condition('oid', $option->oid, '=')
    ->execute();
}

/**
 * Implement hook_quizzler_field_element_alter
 */
function quizzler_multi_quizzler_field_element_alter($element, $form_state, $field = NULL) {
  $key     = 'quizzler_multi_' . $field->fid;
  $wrapper = 'quizzler_multi_' . $field->fid . '_options';

  // check to see if they've clicked the add option button  
  $add_option = (isset($form_state['clicked_button']) && $form_state['clicked_button']['#ajax']['wrapper'] == "quizzler_multi-" . $field->fid . "-wrapper");
   
  $element[$key] = array(
    '#type'	        => 'fieldset',
    '#title'	      => t("Options"),
    '#collapsible'	=> TRUE,
    '#collapsed'		=> (!$add_option && (int) $field->fid),
    '#weight'	      => 5,
    '#prefix'				=> "<div id='quizzler_multi-" . $field->fid . "-wrapper'>",
    '#suffix'				=> "</div>"
  );
  
  if ($add_option) {
    if (!$field->multi) {
      $field->multi = array('options' => array());
    }
    
    $delta = count($field->multi['options']);
    $option = (object) array(
      'oid'				=> 'new-' . $delta,
      'fid'	      => $field->fid,
      'delta'	    => $delta,
      'value'	    => "",
      'correct'	  => FALSE
    );
    $field->multi['options'][] = $option;
  }
  
  if (isset($field->multi)) {
    foreach ($field->multi['options'] as $option) {
      $element[$key][$key . '_option_' . $option->oid] = quizzler_multi_option_element($option);
    }
  }
  
  
  $element[$key][$key . '_add_option'] = array(
    '#type'		    => 'button',
    '#value'	    => t("Add an option for question !number", array('!number' => $field->delta + 1)),
    '#ajax'		=> array(
      'callback'	=> 'quizzler_ajax',
      'wrapper'	  => "quizzler_multi-" . $field->fid . "-wrapper"
    )
  );
  
  return $element;
}

/**
 * Implement hook_quizzler_ajax_callback()
 * 
 * This only gets called when our Add option button has been clicked, so just add a new option to our field.
 */
function quizzler_multi_quizzler_ajax_callback($form, $form_state) {
  $fid = str_replace("quizzler_multi-", "", str_replace("-wrapper", "", $form_state['clicked_button']['#ajax']['wrapper']));
  if (!$fid) {
    watchdog("quizzler_multi", "Error retrieving field id from input form data during AJAX callback.");
    return array('#markup' => "<div class='messages error'>" . t("There was an error handling this request.") . "</div>");
  }
  
  $field = NULL;
  if ((int) $fid) {
    $field = quizzler_field($fid);
    if (!$field) {
      watchdog("quizzler_multi", "Error retrieving field with id $fid during AJAX callback.");
      return array('#markup' => "<div class='messages error'>" . t("There was an error handling this request.") . "</div>");
    }
  }
  else {
    return array('#markup' => "<div class='messages warning'>" . t("Please save this form before adding options.") . "</div>");
  }  
  // shorten our key names
  $f = $field->fid;
  $d = $field->delta;
  $q = "quizzler";
  $m = "quizzler_multi";
  
  // this is our options element in the form
  return $form[$q]["${q}_form"]["${q}_fields"][$d]["${m}_${f}"];
}

/**
 * 
 * Implement hook_quizzler_field_load()
 */
function quizzler_multi_quizzler_field_load($field) {
  $options = array();
  
  if (isset($field->fid) && (int) $field->fid) {
    $data = db_query("SELECT * FROM {quizzler_multi_options} WHERE fid = :fid ORDER BY delta", array('fid' => $field->fid));
    if ($data) {
      $options = $data->fetchAllAssoc('oid');
    }
  }
  
  $field->multi = array(
    'options'	=> $options
  );
}

/**
 * 
 * Create the form element for a single option
 * 
 * @param $option
 * 
 * @return
 * A form element
 */
function quizzler_multi_option_element($option) {
  $key = 'quizzler_multi_option_' . $option->fid ."_" . $option->delta;
    
  return array(
    '#type'		      => 'fieldset',
    '#title'	      => $option->value,
    '#collapsed'	  => ((int) $option->oid),
    '#collapsible'	=> TRUE,
    $key . "_oid" => array(
      '#type'		=> 'hidden',
      '#value'	=> $option->oid
    ),
    $key . "_value" => array(
      '#type'		        => 'textarea',
      '#title'	        => t("Answer"),
      '#default_value'	=> $option->value
    ),
    $key . "_correct" => array(
      '#type'		        => 'checkbox',
      '#title'	        => t("Correct?"),
      '#default_value'	=> $option->correct,
      '#description'		=> t("Check this box to indicate that this is a correct answer.")
    ),
    $key . "_delta" => array(
      '#type'		        => 'weight',
      '#title'	        => t("Weight"),
      '#default_value'	=> $option->delta,
      '#description'		=> t('Optional. In the quiz form, the heavier items will sink and the lighter items will be positioned nearer the top.'),
      '#weight'					=> 3
    ),
    $key . '_delete' => array(
    '#type'		        => 'checkbox',
    '#title'	        => t("Delete"),
    '#default_value'	=> (isset($option->delete))? $option->delete : FALSE,
    '#description'		=> t('Check this box to delete this option when the form is saved.'),
    '#weight'					=> 4
    )
  ); 
}

/**
 * 
 * Collect form data regarding the options for this specific field.
 * 
 * @param $field
 * @param $form_data
 * 
 * @return
 * An array of option objects
 */
function quizzler_multi_collect_options($field, $form_data) {
  $options = array();
  
  $delta   = 0;
  while (TRUE) {
    $key = 'quizzler_multi_option_' . $field->fid ."_" . $delta;
    if (!isset($form_data['values'][$key . "_oid"])) {
      break;
    }
    
    $option = (object) array(
      'oid'	    => $form_data['values'][$key . "_oid"],
      'fid'	    => $field->fid,
      'value'	  => $form_data['values'][$key . "_value"],
      'correct'	=> $form_data['values'][$key . "_correct"],
      'delta'	  => $form_data['values'][$key . "_delta"],
      'delete'	=> $form_data['values'][$key . "_delete"],
    );
    
    $options[$delta] = $option;
    $delta++;
  }
//  watchdog('multi', '<pre>' . print_r($form_data['values'], TRUE) . '</pre>');
  
  return $options;
}