<?php

/**
 * @file
 * Histogram Module
 */

/**
 * Implements hook_menu().
 */
function histogram_menu() {
  $items['admin/config/media/histogram'] = array(
    'title' => 'Histogram',
    'page callback' => 'histogram_admin_settings',
    'access arguments' => array('Administer Image Histogram'),
    'description' => 'Display available fields',
    'access callback' => 'user_access',
    'file' => 'histogram.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/media/histogram/general'] = array(
    'title' => 'Histogram',
    'page callback' => 'histogram_admin_settings',
    'access arguments' => array('Administer Image Histogram'),
    'description' => 'Display available fields',
    'access callback' => 'user_access',
    'file' => 'histogram.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function histogram_help($path, $arg) {
  include_once drupal_get_path('module', 'histogram') . '/histogram.admin.inc';
  switch ($path) {
    case 'admin/help#histogram':
      return histogram_admin_settings();
  }
}

/**
 * Implements hook_permission().
 */
function histogram_permission() {
  return array(
    'administer image histogram' => array(
      'title' => t('Administer Image Histogram'),
    ),
  );
}

/**
 * Prepares parameters for passing to histogram_make_histogram function.
 *
 * Saves new histogram url and array of values to the $object variable.
 */
function _histogram_generate_histogram($object_type, $object) {
  $type = $object->type;

  // All fields on node.
  $fields = field_info_instances($object_type, $type);

  // Array of histogram fields on node,
  $histogram_fields = _histogram_get_histogram_fields($fields);

  // All image fields on node.
  $image_fields = _histogram_get_image_fields($object_type, $object, $fields);

  // Returns image_field uri and language.
  $image_fields_settings = _histogram_get_image_fields_settings($object_type, $object, $histogram_fields, $image_fields);

  foreach ($histogram_fields as $field_name => $field_value) {
    $histogram = NULL;
    if (property_exists($object, $field_name)) {
      $histogram = $object->$field_name;
    }
    $language = $field_value['language'];
    $image_uri = $image_fields_settings[$field_value['image_field']]['uri'];
    $bgcolor = $histogram[$language][0]['bgcolor'];
    $force_bw = $histogram[$language][0]['forcebw'];
    $hist_type = $histogram[$language][0]['histtype'];

    if (isset($image_uri)) {
      include_once drupal_get_path('module', 'histogram') . '/histogram.inc';
      // Generate Histogram.
      $histogram_path = _histogram_make_histogram($image_uri, $bgcolor, $force_bw, $hist_type);

      // _histogram_make_histogram returns empty array in case of error.
      if (!empty($histogram_path)) {
        $histogram[$language][0]['name'] = $histogram_path[0];
        $histogram[$language][0]['update'] = 0;
        $histogram[$language][0]['histovalues'] = serialize($histogram_path[1]);

        // Save values back to object.
        $object->$field_name = $histogram;
      }
    }
  }
}

/**
 * Implements hook_field_attach_presave().
 */
function histogram_field_attach_presave($object_type, $object) {
  if ($object_type == 'node' && (_histogram_check_for_processing($object_type, $object))) {
    _histogram_generate_histogram($object_type, $object);
  }
}

/**
 * Checks to see if this node has a field selected for histogram processing.
 */
function _histogram_check_for_processing($object_type, $object) {
  $node_type = $object->type;
  $fields = field_info_instances($object_type, $node_type);
  $histogram_fields = _histogram_get_histogram_fields($fields);
  if (!empty($histogram_fields)) {
    foreach ($histogram_fields as $field_name => $field_value) {
      $image_field_name = $field_value['image_field'];
      $field_image = $object->$image_field_name;
      $language = _histogram_get_image_language($object, $field_image);
      if ($language == FALSE) {
        return FALSE;
      }
      else {
        $histogram = NULL;
        if (property_exists($object, $field_name)) {
          $histogram = $object->$field_name;
        }
        $update = $histogram[$language][0]['update'];
        if ($update == 1) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Returns histogram settings from widget specifically the selected image field.
 */
function _histogram_get_histogram_fields($fields) {
  $result = array();
  foreach ($fields as $field_name => $field_value) {
    if ($field_value['widget']['type'] == 'histogram_widget') {
      $element = array();
      $element['image_field'] = $field_value['widget']['settings']['image_field'];
      $result[$field_name] = $element;
    }
  }
  return $result;
}

/**
 * Returns image fields on node.
 */
function _histogram_get_image_fields($object_type, $object, $fields) {
  $result = array();
  if ($object_type == 'node') {
    foreach ($fields as $field_name => $field_value) {
      if (is_array($field_value) && is_array($field_value['widget']) && $field_value['widget']['type'] == 'image_image') {
        $result[$field_name] = $field_value;
      }
    }
  }
  return $result;
}

/**
 * Filters out unneeded fields from image_fields array.
 */
function _histogram_get_image_fields_settings($object_type, $object, &$histogram_fields, $image_fields) {
  $result = array();
  if (empty($histogram_fields)) {
    return TRUE;
  }
  if (empty($image_fields)) {
    return FALSE;
  }
  foreach ($histogram_fields as $field_name => $image_field) {
    $image_field_name = $image_field['image_field'];
    if (empty($image_fields[$image_field_name])) {
      $result[$image_field_name] = array();
    }
    else {
      $image_descriptor = _histogram_get_file_uri_and_language($object, $image_field_name, $object_type);
      $result[$image_field_name] = $image_descriptor;
      $histogram_fields[$field_name]['language'] = $image_descriptor['language'];
    }
  }
  return $result;
}

/**
 * Returns image uri and language.
 */
function _histogram_get_file_uri_and_language($object, $image_field_name, $object_type) {
  if ($object_type == 'node') {
    $result = array();
    // Then check it is an array.
    if (!is_array($object->$image_field_name)) {
      return FALSE;
    }
    else {
      $field_image = $object->$image_field_name;
      $language = _histogram_get_image_language($object, $field_image);
      if ($language == FALSE) {
        return FALSE;
      }
      else {
        $fid = _histogram_get_image_fid($field_image, $language);
        if ($fid == FALSE) {
          return FALSE;
        }
        else {
          $file = file_load($fid);
          $result['uri'] = $file->uri;
          $result['language'] = $language;
        }
      }
    }
  }
  return $result;
}

/**
 * Returns language settings.
 */
function _histogram_get_image_language($object, $field) {
  if (property_exists($object, 'language')) {
    if (array_key_exists($object->language, $field)) {
      return $object->language;
    }
    else {
      if (array_key_exists('und', $field)) {
        return 'und';
      }
      else {
        return FALSE;
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Returns fid.
 */
function _histogram_get_image_fid($field, $language) {
  if (is_array($field[$language])) {
    if (!empty($field[$language]) && is_array($field[$language][0])) {
      $localized_field = $field[$language][0];
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
  $fid = $localized_field['fid'];
  return $fid;
}

/**
 * Implements hook_field_info().
 */
function histogram_field_info() {
  return array(
    'histogram' => array(
      'label' => t('Histogram'),
      'description' => t('Histogram field.'),
      'default_widget' => 'histogram_widget',
      'default_formatter' => 'histogram_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function histogram_field_widget_info() {
  return array(
    'histogram_widget' => array(
      'label' => t('Histogram widget'),
      'description' => t('field content is calculated from image field in the same content type (read only)'),
      'field types' => array('histogram'),
      'settings' => array(
        'image_field' => '',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function histogram_field_formatter_info() {
  return array(
    'histogram_formatter' => array(
      'label' => t('Default'),
      'field types' => array('histogram'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function histogram_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'histogram_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('histogram_formatter_default', $item);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function histogram_field_is_empty($item, $field) {
  if ($field['type'] == 'histogram') {

    if (empty($item['name']) && empty($item['histovalues']) && empty($item['histtype']) && empty($item['forcebw']) && empty($item['update']) && empty($item['bgcolor'])) {
      return TRUE;
    }

  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 */
function histogram_field_settings_form($field, $instance, $has_data) {
  if ($field['type'] == 'histogram') {
    $form = array();
    $form['#attached']['css'][] = drupal_get_path('module', 'histogram') . '/histogram-field-settings-form.css';
    return $form;
  }
}


/**
 * Implements hook_field_widget_form().
 */
function histogram_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $element['name'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['name']) ? $items[$delta]['name'] : NULL,
  );
  $element['histovalues'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['histovalues']) ? $items[$delta]['histovalues'] : NULL,
  );
  $element['update'] = array(
    '#type' => 'radios',
    '#title' => t('Generate Histogram'),
    '#options' => array(
      1 => t('Yes'),
      0 => t('No'),
    ),
    '#default_value' => isset($items[$delta]['update']) ? $items[$delta]['update'] : 1,
    '#description' => t('Select "Yes" to generate a histogram. This should be set to "Yes" the first time the node is saved or any time the options below are changed.'),
  );
  $element['histtype'] = array(
    '#type' => 'radios',
    '#title' => t('Histogram Type'),
    '#options' => array(
      0 => t('Stacked'),
      1 => t('Combined'),
    ),
    '#default_value' => isset($items[$delta]['histtype']) ? $items[$delta]['histtype'] : 0,
    '#description' => t('Generate a stacked histogram with three separate color channels or a merged combined histogram.'),
  );
  $element['forcebw'] = array(
    '#type' => 'radios',
    '#title' => t('Force Single Channel Histogram'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#default_value' => isset($items[$delta]['forcebw']) ? $items[$delta]['forcebw'] : 0,
    '#description' => t('Force generation of a single channel black and white histogram. Useful on an image by image basis in cases of tinted monochrome images where the automatic monochrome detection fails'),
  );
  $element['bgcolor'] = array(
    '#type' => 'textfield',
    '#title' => t('Histogram Background Color'),
    '#default_value' => isset($items[$delta]['bgcolor']) ? $items[$delta]['bgcolor'] : '000000',
    '#description' => t('Background color in hexadecimal numbers. Leave blank for transparent background.'),
    '#element_validate' => array('_histogram_hexadecimal_validate'),
  );
  return $element;
}

/**
 * Validation callback for a hexadecimal element.
 */
function _histogram_hexadecimal_validate($element, &$form_state, $form) {
  $value = $element['#value'];
  if (empty($value)) {
  }
  elseif ($value[0] != "#") {
    $value = "#" . $value;
    if (preg_match('/^#[a-f0-9]{6}$/i', $value)) {
    }
    else {
      form_error($element, t('Please enter a valid hexadecimal number'));
    }
  }
}

/**
 * Implements hook_theme().
 */
function histogram_theme($existing, $type, $theme, $path) {
  return array(
    'histogram_formatter_default' => array(
      'variables' => array('item' => NULL),
    ),
  );
}

/**
 * Histogram theme formatter.
 */
function theme_histogram_formatter_default($item) {
  $variables = array(
    'path' => url($item['name']),
    'alt' => 'Image Histogram',
    'attributes' => array('class' => 'histogram'),
  );
  return theme('image', $variables);
}

/**
 * Implements hook_widget_settings().
 */
function histogram_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  // $defaults = field_info_widget_settings($widget['type']);
  $form = array();
  if ($widget['type'] == 'histogram_widget') {
    if ($instance['entity_type'] == 'node') {
      $image_fields = _histogram_field_widget_retrieve_image_field_from_bundle($instance['entity_type'], $instance['bundle']);
      $default_image_value = _histogram_get_field_widget_retrieve_image_field_default_value($widget, $image_fields);
      $form['image_field'] = array(
        '#type' => 'radios',
        '#title' => t('Image Field'),
        '#description' => t('Select the image field to be used when generating the histogram'),
        '#options' => $image_fields,
        '#default_value' => $default_image_value,
        '#element_validate' => array('_histogram_field_widget_image_field_validate'),
      );
    }
  }
  return $form;
}

/**
 * Retrieve all image_field fields of the same content type (bundle).
 */
function _histogram_field_widget_retrieve_image_field_from_bundle($entity_type, $bundle_name) {
  $fields_of_bundle = field_info_instances($entity_type, $bundle_name);
  $result = array();
  foreach ($fields_of_bundle as $field_name => $field_value) {
    if (is_array($field_value) && is_array($field_value['widget']) && $field_value['widget']['type'] == 'image_image') {
      $result[$field_name] = $field_value['label'] . " (" . $field_name . ")";
    }
  }
  return $result;
}

/**
 * Calculate default value for image_field setting of widget.
 */
function _histogram_get_field_widget_retrieve_image_field_default_value($widget, $image_fields) {
  $result = $widget['settings']['image_field'];
  if (empty($result)) {
    $temp = array_keys($image_fields);
    if (!empty($temp) && is_array($temp)) {
      $result = $temp[0];
    }
  }
  return $result;
}

/**
 * Implements #element_validate FAPI Hook.
 */
function _histogram_field_widget_image_field_validate($element, &$form_state) {
  $image_field_settings = $form_state['values']['instance']['widget']['settings']['image_field'];
  if (empty($image_field_settings)) {
    form_error($element, t('you must choose at least one image field.'));
  }

}

/**
 * Implements hook_field_widget_error().
 */
function histogram_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Validation.
 */
function histogram_field_widget_validate($element, &$form_state) {
  // DO NOT CHANGE VALIDATION.
}
