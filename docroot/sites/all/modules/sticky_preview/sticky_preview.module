<?php

/**
 * @file
 * sticky_preview.module file.
 */

/**
 * Implements hook_theme().
 */
function sticky_preview_theme() {
  return array(
    'sticky_preview' => array(
      'template' => 'theme/sticky_preview',
      'variables' => array(
        'live_preview_title' => NULL,
        'live_preview_fields' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function sticky_preview_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'sticky_preview', 'includes/sticky_preview.common');

  $options = array();
  $node_type = $form['#node_type']->type;
  $fields = sticky_preview_field_info_instances('node', $node_type);

  foreach ($fields as $field_name => $field_info) {
    $options[$field_info['field_name']] = $field_info['label'];
  }

  $form['sticky_preview'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sticky preview settings'),
    '#group' => 'additional_settings',
    'sticky_preview' => array(
      '#type' => 'checkbox',
      '#title' => t('Enable sticky preview'),
      '#default_value' => variable_get('sticky_preview_' . $node_type, FALSE),
    ),
    'sticky_preview_selector' => array(
      '#title' => t('Css selector of placeholder for sticky preview'),
      '#description' => t('Sticky preview box will be prepended to element with this selector.'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => variable_get('sticky_preview_selector_' . $node_type, 'body'),
      '#states' => array(
        'visible' => array(
          'input[name="sticky_preview"]' => array(
            'checked' => TRUE,
          ),
        ),
      ),
    ),
    'sticky_preview_fields' =>  array(
      '#title' => t('Please include fields into sticky preview box'),
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => variable_get('sticky_preview_fields_' . $node_type, array()),
      '#states' => array(
        'visible' => array(
          'input[name="sticky_preview"]' => array(
            'checked' => TRUE,
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function sticky_preview_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node_type = $form['#node']->type;

  if (variable_get('sticky_preview_' . $node_type, FALSE)) {
    module_load_include('inc', 'sticky_preview', 'includes/sticky_preview.common');

    $sticky_preview_selector = variable_get('sticky_preview_selector_' . $node_type, 'body');
    $sticky_preview_fields = sticky_preview_get_fields_info(variable_get('sticky_preview_fields_' . $node_type, array()), $node_type);

    $form['#attached']['css'][] = drupal_get_path('module', 'sticky_preview') . '/css/sticky_preview.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'sticky_preview') . '/js/sticky_preview.js';
    $form['#attached']['js'][] = array(
      'data' => array(
        'sticky_preview' => array(
          'sticky_preview_selector' => $sticky_preview_selector,
          'sticky_preview_fields' => $sticky_preview_fields,
          'sticky_preview_box' => theme('sticky_preview', array(
            'live_preview_title' => sticky_preview_get_content_type_human_name($node_type),
            'live_preview_fields' => sticky_preview_sort_fields($sticky_preview_fields, $form),
          )),
        ),
      ),
      'type' => 'setting',
    );
  }
}

/**
 * Implements hook_field_delete_instance().
 */
function sticky_preview_field_delete_instance($instance) {
  // Remove deleted field from settings.
  $variable_name = 'sticky_preview_fields_' . $instance['bundle'];
  $fields = variable_get($variable_name, array());
  $key = array_search($instance['field_name'], $fields);

  if ($fields && $key !== FALSE && isset($fields[$key])) {
    unset($fields[$key]);
    variable_set($variable_name, array_values($fields));
  }
}
