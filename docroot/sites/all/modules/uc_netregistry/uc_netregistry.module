<?php
/**
 * @file
 * Adds Netregistry Payment Gateway to Ubercart.
 */

/**
 * Implements hook_form_uc_cart_checkout_form_alter().
 */
function uc_netregistry_form_uc_cart_checkout_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['panes']['payment']['payment_method']['#options']['credit']) && $form['panes']['payment']['payment_method']['#options']['credit'] != NULL) {
    $label = $form['panes']['payment']['payment_method']['#options']['credit'];
    $form['panes']['payment']['payment_method']['#options']['credit'] = $label;
  }
}

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_netregistry_uc_payment_gateway() {
  $gateways['netregistry'] = array(
    'title' => t('Netregistry'),
    'description' => t('Process credit card payments using Netregistry'),
    'settings' => 'uc_netregistry_settings_form',
    'credit' => 'uc_netregistry_charge',
  );
  return $gateways;
}

/**
 * Callback for payment gateway settings.
 */
function uc_netregistry_settings_form($form, &$form_state) {
  $form['netregistry_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Netregistry settings'),
  );
  $form['netregistry_settings']['uc_netregistry_mid'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => variable_get('uc_netregistry_mid', ''),
    '#description' => t('Your Merchant ID.'),
  );
  $form['netregistry_settings']['uc_netregistry_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('uc_netregistry_password', ''),
    '#description' => t('Your Password.'),
  );
  return $form;
}

/**
 * Callback for payment gateway charge.
 *
 * @param int $order_id
 *   Current order id.
 * @param int $amount
 *   Amount
 * @param array $data
 *   Data array
 *
 * @return array
 *   Response array.
 */
function uc_netregistry_charge($order_id, $amount, $data) {
  global $user, $response;
  $order = uc_order_load($order_id);
  $data = array(
    'Amount' => number_format($amount, 2, '.', ''),
    'CardNumber' => $order->payment_details['cc_number'],
    'CardExpiry' => date('m/y', mktime(0, 0, 0, $order->payment_details['cc_exp_month'], 1, $order->payment_details['cc_exp_year'])),
    'Comment' => t('Payment for order @order', array('@order' => $order_id)),
  );
  // Make request.
  $response = uc_netregistry_process_request($data);

  // Parse response.
  $result = array();
  foreach ($response as $r) {
    if (strpos($r, 'txn_ref') !== FALSE) {
      $txn_ref = str_replace('txn_ref=', '', $r);
      $result[] = t('Transaction Reference: @txn_ref', array('@txn_ref' => $txn_ref));
    }
    if (strpos($r, 'bank_ref') !== FALSE) {
      $bank_ref = str_replace('bank_ref=', '', $r);
      $result[] = t('Bank Reference: @bank_ref', array('@bank_ref' => $bank_ref));
    }
    if (strpos($r, 'response_text') !== FALSE) {
      $response_text = str_replace('response_text=', '', $r);
      $result[] = t('Bank Response: @response_text', array('@response_text' => $response_text));
    }
  }

  // If result is empty?
  if (count($result) == 0) {
    $result[] = t('Unable to retrieve Transaction Reference, Bank Reference & Bank Response');
  }

  // Approved/Declined?
  switch ($response[0]) {
    case 'approved':
      $result = array(
        'success' => TRUE,
        'comment' => t('Credit card payment processed successfully.') . ' ' . implode(', ', $result),
        'message' => t('Credit card payment processed successfully.') . ' ' . implode(', ', $result),
        'uid' => $user->uid,
        'data' => '',
      );
      uc_order_comment_save($order_id, $user->uid, $result['comment']);
      uc_order_comment_save($order_id, $user->uid, $result['comment'], 'order');
      break;

    default:
      $result = array(
        'success' => FALSE,
        'comment' => t('Credit card payment failed.') . ' ' . implode(', ', $result),
        'message' => t('Credit card payment failed.') . ' ' . implode(', ', $result),
        'uid' => $user->uid,
        'data' => '',
      );
      uc_order_comment_save($order_id, $user->uid, $result['comment']);
      break;
  }
  return $result;
}

/**
 * Send request to Netregistry Payment Gateway.
 *
 * @param array $data
 *   Data array
 *
 * @return array/bool
 *   Returns array if successful, false otherwise.
 */
function uc_netregistry_process_request($data) {
  $url = 'https://4tknox.au.com/cgi-bin/themerchant.au.com/ecom/external2.pl';
  $params = array();
  $params[] = 'COMMAND=purchase';
  $params[] = 'LOGIN=' . variable_get('uc_netregistry_mid', '') . '/' . variable_get('uc_netregistry_password', '');
  $params[] = 'AMOUNT=' . $data['Amount'];
  $params[] = 'CCNUM=' . $data['CardNumber'];
  $params[] = 'CCEXP=' . $data['CardExpiry'];
  $params[] = 'COMMENT=' . $data['Comment'];

  // Make request.
  $c = curl_init();
  curl_setopt($c, CURLOPT_URL, $url);
  curl_setopt($c, CURLOPT_POST, 1);
  curl_setopt($c, CURLOPT_POSTFIELDS, implode('&', $params));
  curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($c, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($c, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($c);

  // Check if error?
  if (curl_errno($c)) {
    drupal_set_message(t('CURL Error') . curl_errno($c) . '<br />' . curl_error($c), 'error');
    return FALSE;
  }
  else {
    curl_close($c);
    // Parse XML response.
    $response = explode("\n", $result);
    return $response;
  }
}
