<?php

/**
 * @file
 * Main module file for the field collection AJAX widget.
 */

// -------------------------------------------------------------------------
// Drupal core hooks

/**
 * Implements hook_field_widget_info().
 */
function field_collection_ajax_field_widget_info() {
  $widgets['field_collection_ajax'] = array(
    'label' => t('Field collection AJAX'),
    'description' => t('An advanced, AJAX widget to handle field collections.'),
    'field types' => array('field_collection'),
    'settings' => array(
      'type' => 'table',
      'view_mode' => 'default',
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_theme()
 */
function field_collection_ajax_theme() {
  $items = array();
  $items['field_collection_ajax_widget'] = array(
    'render element' => 'element',
  );

  return $items;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function field_collection_ajax_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'field_collection_ajax') {
    $element['type'] = array(
      '#type' => 'select',
      '#title' => t('Widget output type'),
      '#options' => array(
        'table' => t('Table'),
        'view' => t('Entity view')
      ),
      '#default_value' => $settings['type'],
    );

    $entity_info = entity_get_info('field_collection_item');
    $view_modes = array();
    foreach ($entity_info['view modes'] as $view_mode => $view_mode_info) {
      $view_modes[$view_mode] = $view_mode_info['label']; 
    }

    $element['view_mode'] = array(
      '#type' => 'select',
      '#title' => t('View mode'),
      '#options' => $view_modes,
      '#default_value' => $settings['view_mode'],
    );

    return $element;
  }
}

/**
 * Implements hook_field_widget_form().
 */
function field_collection_ajax_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field_name = $element['#field_name'];
  $identifier = implode('-', array_merge($element['#field_parents'], array($element['#field_name'])));
  $widget = $instance['widget'];

  $element_id = drupal_html_id('field-collection-ajax-' . $field_name);
  // We have to construct what will be put into #array_parents in #after_build phase
  // so that we can find our element later on.
  $element_address = array_merge($element['#field_parents'], array($element['#field_name'], $element['#language']));

  // Store $items in field_state unless they're already there, which indicates
  // they've been updated from somewhere else.

  // Items isn't a normal part of field_state, but we are using the field_state
  // mechanism to store this so we can properly use it later. The field_state
  // is stored in the form_state and can get cached during AJAX operations.
  // Using $field_state this way ensures that multiple instances of this widget
  // can co-exist safely.
  $field_state = field_collection_ajax_get_state($element, $form_state);
  if (!isset($field_state['items'])) {
    $field_state['items'] = $items;
    field_collection_ajax_set_state($element, $form_state, $field_state);
  }

  $data_identifier = drupal_clean_css_identifier(implode('-', $element_address));
  $element += array(
    '#type' => 'item',
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#title_display' => isset($element['#title_display']) ? $element['#title_display'] : 'before',
    '#prefix' => '<div data-fcajax="' . $data_identifier . '">',
    '#suffix' => '</div>',
    '#id' => $element_id,
    '#element_validate' => array('field_collection_ajax_element_validate'),
    // Construct a data identifier for our widget from the path using the element address.
    '#data_identifier' => $data_identifier,
  );

  // We use a 'container' type to get the normal, basic field structure for
  // our widget.
  $element['container'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('container')),
  );

  // The 'collection' area is where the table will be rendered.
  $element['container']['collection'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('collection'),
    ),
    '#id' => $element_id . '-collection',
  );

  // Render the items into the collection array -- this is abstracted because
  // it is re-used during AJAX operations.
  field_collection_ajax_build_item_table($element, $field_state);

  // The landing pad is where forms are put, for example to add a new itme.
  $element['container']['landing'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('landing-pad')
    ),
    '#id' => $element_id . '-landing-pad',
  );

  $element['container']['add'] = array(
    '#type' => 'submit',
    '#value' => t('Add an item'),
    '#ajax' => array(
      'callback' => 'field_collection_ajax_add_item_callback',
    ),
    '#attributes' => array('class' => array('field-collection-ajax-add-another')),
    // Pick a unique #name so that the right button is found by FAPI.
    '#name' => $identifier . '-add-another',
    // Do not submit to anything! We don't want to save this entity or anything.
    '#submit' => array(),
    '#limit_validation_errors' => array(),
    '#id' => $element_id . '-submit',
    '#element_address' => $element_address,
  );

  return $element;
}

// -------------------------------------------------------------------------
// Public API

/**
 * Get the field_state for our element.
 *
 * This is a shortcut to field_form_get_state just to ease the syntax a little bit.
 *
 * @param array $element
 *   The $element array from the form.
 * @param array $form_state
 *   The form state array.
 *
 * @return array|null
 *   The field state array.
 *
 * @see field_form_get_state()
 */
function field_collection_ajax_get_state($element, &$form_state) {
  return field_form_get_state($element['#field_parents'], $element['#field_name'], $element['#language'], $form_state);
}

/**
 * Set the field_state for our element.
 *
 * This is a shortcut to field_form_get_state just to ease the syntax a little bit.
 *
 * @param array $element
 *   The $element array from the form.
 * @param array $form_state
 *   The form state array.
 * @param array $field_state
 *   The field_state array.
 *
 * @see field_form_get_state()
 * @see field_form_set_state()
 */
function field_collection_ajax_set_state($element, &$form_state, $field_state) {
  field_form_set_state($element['#field_parents'], $element['#field_name'], $element['#language'], $form_state, $field_state);
}

/**
 * Calculate the correct identifier for javascript to use the element.
 *
 * @param array $element
 *   The element array from the form.
 * @param string $addition
 *   Optional. A string to append, typically this ought to be a class of an area within
 *   the widget.
 * @return string
 *   A jQuery identifier that can be used to find the resource on the page.
 */
function field_collection_ajax_identifier($element, $addition = NULL) {
  $identifier = 'div[data-fcajax="' . $element['#data_identifier'] . '"]';
  if ($addition) {
    $identifier .= ' ' . $addition;
  }

  return $identifier;
}

// -------------------------------------------------------------------------
// Field form widget

/**
 * Build the table that contains the list of items.
 *
 * @param array $element
 *   The element array from the form.
 * @param array $field_state
 *   The field state array from field_form_get_state().
 */
function field_collection_ajax_build_item_table(&$element, $field_state) {
  $items = $field_state['items'];
  $widget = $field_state['instance']['widget'];
  $identifier = implode('-', array_merge($element['#field_parents'], array($element['#field_name'])));

  // Create a list of fields that we will be rendering in the table.
  $table_fields = array();
  if ($widget['settings']['type'] == 'view') {
    // If we are just doing a view of the item, then all we have is the
    // special 'element' field.
    $table_fields = array('element' => '');
  }
  else {
    // Create a list of fields, displaying them from the chosen view mode.
    $instances = field_info_instances('field_collection_item', $element['#field_name']);
    $field_order = array();
    foreach ($instances as $name => $instance) {
      $display = field_get_display($instance, $widget['settings']['view_mode'], NULL);
      if ($display['type'] !== 'hidden') {
        $field_order[$name] = $display['weight'];
      }
    }

    asort($field_order);
    foreach ($field_order as $name => $weight) {
      $table_fields[$name] = $instances[$name]['label'];
    }
  }

  // And add the operations that will always exist.
  $table_fields['_operations'] = t('Operations');

  // Overwrite $widget because it may already exist and if items were removed we
  // want them to truly be removed.
  $element['container']['collection']['widget'] = array(
    '#theme' => 'field_collection_ajax_widget',
    '#field_name' => $element['#field_name'],
    '#id' => $element['#id'] . '-collection',
    // Let the theme know how to render the table.
    '#table_fields' => $table_fields,
    '#attached' => array(
      'js' => array(
        ctools_attach_js('field-collection-ajax', 'field_collection_ajax'),
      )
    )
  );

  $max = count($items);
  // Create an entry for each field in each row in the table.
  foreach ($items as $delta => $item) {
    $field_collection_item = field_collection_field_get_entity($item, $element['#field_name']);
    if (!$field_collection_item) {
      continue;
    }

    // Run the view and extract fields from the content.
    $content = $field_collection_item->view($widget['settings']['view_mode']);
    $content = $content['field_collection_item'][$field_collection_item->identifier()];
    if ($widget['settings']['type'] == 'view') {
      $element['container']['collection']['widget'][$delta]['element'] = $content;
    }
    else {
      foreach ($table_fields as $name => $label) {
        $field_content = isset($content[$name]) ? $content[$name] : array();
        $field_content['#label_display'] = 'hidden';
        $element['container']['collection']['widget'][$delta][$name] = $field_content;
      }
    }

    $element['container']['collection']['widget'][$delta]['_weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight for row @number', array('@number' => $delta + 1)),
      '#title_display' => 'invisible',
      // Note: this 'delta' is the FAPI 'weight' element's property.
      '#delta' => $max,
      '#default_value' => $delta,
      '#weight' => 100,
    );

    $element['container']['collection']['widget'][$delta]['_operations'] = array();

    $element['container']['collection']['widget'][$delta]['_operations']['edit'] = array(
      '#type' => 'submit',
      '#value' => t('Edit'),
      '#name' => $identifier . '-edit-' . $delta,
      '#id' => $element['#field_name'] . '-' . $element['#id'] . '-edit-' . $delta,
      '#attributes' => array('class' => array('field-collection-ajax-edit')),
      '#ajax' => array(
        'callback' => 'field_collection_ajax_edit_item_callback',
      ),
      // Store this delta here so that the callback knows which item to edit.
      '#delta' => $delta,
      // Make sure this doesn't save the data by submitting.
      '#submit' => array(),
      '#limit_validation_errors' => array(),
      '#element_address' => array_merge($element['#field_parents'], array($element['#field_name'], $element['#language'])),
    );

    $element['container']['collection']['widget'][$delta]['_operations']['remove'] = array(
      '#type' => 'submit',
      '#value' => t('Remove'),
      '#name' => $identifier . '-remove-' . $delta,
      '#id' => $element['#field_name'] . '-' . $element['#id'] . '-remove-' . $delta,
      '#attributes' => array('class' => array('field-collection-ajax-remove')),
      '#ajax' => array(
        'callback' => 'field_collection_ajax_remove_item_callback',
      ),
      // Store this delta here so that the callback knows which item to remove.
      '#delta' => $delta,
      '#submit' => array('field_collection_ajax_remove_item_submit'),
      '#limit_validation_errors' => array(),
      '#element_address' => array_merge($element['#field_parents'], array($element['#field_name'], $element['#language'])),
    );
  }

  // Allow modules and themes to change how this is rendered.
  drupal_alter(array('field_collection_ajax_widget', 'field_collection_ajax_widget__' . $element['#field_name']), $element);
}

/**
 * Form callback to validate our widget.
 */
function field_collection_ajax_element_validate(&$element, &$form_state) {
  // Get the items out of the field state
  $field_state = field_collection_ajax_get_state($element, $form_state);
  // Resort items by the _weight fields.
  $sort = array();
  foreach ($field_state['items'] as $delta => $item) {
    $sort[$delta] = $element['container']['collection']['widget'][$delta]['_weight']['#value'];
  }

  asort($sort);
  $items = array();
  $new_delta = 0;
  foreach ($sort as $delta => $weight) {
    $items[$new_delta] = $field_state['items'][$delta];
    // We have to update the form widgets or re-ordering the form will lead to
    // the edit and remove buttons editing the wrong thing.
    if ($delta != $new_delta) {
      $operations = &$element['container']['collection']['widget'][$delta]['_operations'];
      $operations['edit']['#delta'] = $new_delta;
      $operations['remove']['#delta'] = $new_delta;

      // And triggering element does not automatically update (not a proper reference?) so
      // we have to check it to see if we must also update IT. Use #name to ensure it's
      // the correct button as there can be many different triggering elements.
      if (isset($form_state['triggering_element']['#name']) &&
        ($form_state['triggering_element']['#name'] == $operations['edit']['#name'] ||
        $form_state['triggering_element']['#name'] == $operations['remove']['#name'])) {
        $form_state['triggering_element']['#delta'] = $new_delta;
      }
    }

    $new_delta++;
  }

  $field_state['items'] = $items;

  // Make sure the ordering gets saved for later rerenders via AJAX.
  field_collection_ajax_set_state($element, $form_state, $field_state);

  // And put them into the values.
  form_set_value($element, $field_state['items'], $form_state);
}

/**
 * AJAX form callback to render the add item form.
 */
function field_collection_ajax_add_item_callback($form, &$form_state) {
  $element = drupal_array_get_nested_value($form, $form_state['triggering_element']['#element_address']);

  $field_state = field_collection_ajax_get_state($element, $form_state);

  // Create a new item for the purposes of editing.
  $field_collection_item = entity_create('field_collection_item', array('field_name' => $element['#field_name']));

  // Set up a form_state for the add item form..
  $add_item_form_state = array(
    'element_address' => $element['#parents'],
    'original_form_id' => $form['#build_id'],
    'field_collection_item' => $field_collection_item,
    'delta' => $field_state['items'] ? max(array_keys($field_state['items'])) + 1 : 0,
    'language' => $element['#language'],
  );

  // Build the new form.
  $add_item_form = drupal_build_form('field_collection_ajax_edit_item_form', $add_item_form_state);

  // Render the form onto the landing pad.
  $commands[] = ajax_command_html(field_collection_ajax_identifier($element, '.landing-pad'), theme('status_messages') . drupal_render($add_item_form));
  $commands[] = array(
    'command' => 'fcajaxScrollTop',
    'selector' => field_collection_ajax_identifier($element, '.landing-pad'),
  );

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * AJAX form callback to render the add item form.
 */
function field_collection_ajax_edit_item_callback($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $element = drupal_array_get_nested_value($form, $button['#element_address']);

  $field_state = field_collection_ajax_get_state($element, $form_state);

  // Fetch the item based on the #delta stored in the button.
  $field_collection_item = field_collection_field_get_entity($field_state['items'][$button['#delta']], $element['#field_name']);

  // Set up a form_state for the add item form..
  $edit_item_form_state = array(
    'element_address' => $element['#parents'],
    'original_form_id' => $form['#build_id'],
    'field_collection_item' => $field_collection_item,
    'delta' => $button['#delta'],
    'language' => $element['#language'],
  );

  // Build the new form.
  $edit_item_form = drupal_build_form('field_collection_ajax_edit_item_form', $edit_item_form_state);

  // Render the form onto the landing pad.
  $commands[] = ajax_command_html(field_collection_ajax_identifier($element, '.landing-pad'), theme('status_messages') . drupal_render($edit_item_form));
  $commands[] = array(
    'command' => 'fcajaxScrollTop',
    'selector' => field_collection_ajax_identifier($element, '.landing-pad'),
  );
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Theme function to render the table that contains all of the items.
 */
function theme_field_collection_ajax_widget(&$vars) {
  $element = &$vars['element'];

  // Values needed for tabledrag.
  $table_id = $element['#id'] . '-values';
  $order_class = $element['#id'] . '-delta-order';

  $header = array('');
  foreach ($element['#table_fields'] as $name => $label) {
    $header[] = $label;
  }

  $header[] = array('data' => t('Order'), 'class' => 'delta-order');

  $rows = array();

  // Sort the items using field_multiple_value's code.
  $items = array();
  foreach (element_children($element) as $key) {
    $items[] = &$element[$key];
  }
  usort($items, '_field_sort_items_value_helper');

  if (empty($items)) {
    $rows[] = array(
      array(
        'colspan' => count($header),
        'data' => t('No items to display.'),
      ),
    );
  }

  // Add the items as table rows.
  foreach ($items as $item) {
    $item['_weight']['#attributes']['class'] = array($order_class);
    $cells = array(
      array('data' => '', 'class' => array('field-multiple-drag')),
    );

    foreach ($element['#table_fields'] as $name => $label) {
      $cells[] = drupal_render($item[$name]);
    }
    $cells[] = array('data' => drupal_render($item['_weight']), 'class' => array('delta-order'));
    $rows[] = array(
      'data' => $cells,
      'class' => array('draggable'),
    );
  }

  $output = '<div class="form-item">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-multiple-table'))));
  $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
  $output .= '</div>';

  drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);

  return $output;
}

/**
 * Form submit callback to remove the item from the list.
 */
function field_collection_ajax_remove_item_submit($form, &$form_state) {
  // Because we do a form rebuild, it will actually screw us on IDs generated
  // in this form, so clear all that crap out. If we don't, we will get all
  // our ids with --2 attached, which will make the AJAX commands absolutely
  // fail.
  drupal_static_reset('drupal_html_id');

  $button = $form_state['triggering_element'];
  $element = drupal_array_get_nested_value($form, $button['#element_address']);

  $field_state = field_collection_ajax_get_state($element, $form_state);

  // Remove the item from the field state.
  if (isset($field_state['items'][$button['#delta']])) {
    unset($field_state['items'][$button['#delta']]);
  }

  // Recalculate the deltas:
  $field_state['items'] = array_values($field_state['items']);
  
  // And cache the form to make sure changes are handled.
  field_collection_ajax_set_state($element, $form_state, $field_state);

  // Force a rebuild so the table rerenders.
  $form_state['rebuild'] = TRUE;
}

/**
 * AJAX callback to remove an item from the list.
 * 
 * The item was actually removed in the _submit handler, and ajax_form_callback
 * rebuilt the form for us, so all we have to do is rerender the part we need.
 */
function field_collection_ajax_remove_item_callback($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $element = drupal_array_get_nested_value($form, $button['#element_address']);

  $commands[] = ajax_command_html(field_collection_ajax_identifier($element, '.collection'), theme('status_messages') . drupal_render($element['container']['collection']['widget']));

  // Mark the table changed.
  $commands[] = array(
    'command' => 'markTableChanged',
    'selector' => $element['container']['collection']['widget']['#id'] . '-values',
  );

  return array('#type' => 'ajax', '#commands' => $commands);
}

// -------------------------------------------------------------------------
// Add form widget

/**
 * Form callback to create the edit item form.
 * 
 * This form edits a single field collection item in a list, and is used
 * to both add and edit items. It is AJAXed into place inside a larger form
 * but is actually a separate form. At the end, it modifies the cache for
 * the larger form.
 */
function field_collection_ajax_edit_item_form($form, &$form_state) {
  field_attach_form('field_collection_item', $form_state['field_collection_item'], $form, $form_state, $form_state['language']);

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save item to list'),
    '#ajax' => array(
      'callback' => 'field_collection_ajax_edit_item_form_callback',
    ),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#ajax' => array(
      'callback' => 'field_collection_ajax_edit_item_form_cancel',
    ),
    // Do not submit to anything or fail cancel due to validation errors.
    '#submit' => array(),
    '#limit_validation_errors' => array(),
  );

  return $form;
}

/**
 * Form submit callback for the edit item form.
 */
function field_collection_ajax_edit_item_form_submit($form, &$form_state) {
  field_attach_submit('field_collection_item', $form_state['field_collection_item'], $form, $form_state);
}

/**
 * AJAX callback to process the edit item form.
 * 
 * The edit item form is created and initially rendered as an AJAX callback
 * for the main entity form, but because the form is independent, it has
 * a separate AJAX callback.
 * 
 * This callback is called after the form is processed and submitted, and
 * its job is to save the updated data into the master form's cache.
 */
function field_collection_ajax_edit_item_form_callback($form, &$form_state) {
  // Fetch the original form.
  $original_form_state = form_state_defaults();
  $original_form = form_get_cache($form_state['original_form_id'], $original_form_state);

  // Extract the original $element from the form.
  $element = drupal_array_get_nested_value($original_form, $form_state['element_address']);

  if (form_get_errors()) {
    $commands[] = ajax_command_html(field_collection_ajax_identifier($element, '.landing-pad'), theme('status_messages') . drupal_render($form));
    $commands[] = array(
      'command' => 'fcajaxScrollTop',
      'selector' => field_collection_ajax_identifier($element, '.landing-pad'),
    );
  }
  else {
    $field_state = field_collection_ajax_get_state($element, $original_form_state);

    // Set the edited data into the field_state.
    $field_state['items'][$form_state['delta']]['entity'] = $form_state['field_collection_item'];

    // Store the updated field state.
    field_collection_ajax_set_state($element, $original_form_state, $field_state);

    // Reset the evil HTML ID cache that helpfully increments our IDs that we
    // need for javascript to work.
    // For some reason, drupal_static_reset() doesn't seem to reset this.
    $seen_id = &drupal_static('drupal_html_id');
    $seen_id = array();
    drupal_static_reset('drupal_html_id:init');
    if (isset($_POST['ajax_html_ids'])) {
      unset($_POST['ajax_html_ids']);
    }

    // Now that we have made our changes, build a new form. This is similar to
    // to drupal_rebuild_form() but is slightly different because there's no
    // build to rebuild.
    $new_form = drupal_retrieve_form($original_form['#form_id'], $original_form_state);

    // Make sure that a new build id is not generated.
    $new_form['#build_id'] = $original_form['#build_id'];
    // And make sure that validate failures don't make the new form take us
    // to /system/ajax.
    $new_form['#action'] = $original_form['#action'];

    drupal_prepare_form($original_form['#form_id'], $new_form, $original_form_state);
    form_set_cache($new_form['#build_id'], $new_form, $original_form_state);

    // Cache prior to form_builder so that things like #values don't get stuck.
    drupal_process_form($original_form['#form_id'], $new_form, $original_form_state);

    // Refetch the element from the new form for rendering.
    $element = drupal_array_get_nested_value($new_form, $form_state['element_address']);

    // Render the new data into the collection area.
    $commands[] = ajax_command_html(field_collection_ajax_identifier($element, '.collection'), drupal_render($element['container']['collection']['widget']));

    // Mark the table changed.
    $commands[] = array(
      'command' => 'markTableChanged',
      'selector' => $element['container']['collection']['widget']['#id'] . '-values',
    );
    // Clear the landing pad.
    $commands[] = ajax_command_html(field_collection_ajax_identifier($element, '.landing-pad'), theme('status_messages'));
    $commands[] = array(
      'command' => 'fcajaxScrollTop',
      'selector' => field_collection_ajax_identifier($element, '.collection'),
    );
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * AJAX callback to cancel the edit item form.
 */
function field_collection_ajax_edit_item_form_cancel($form, &$form_state) {
  // Fetch the original form.
  $original_form_state = form_state_defaults();
  $original_form = form_get_cache($form_state['original_form_id'], $original_form_state);

  // Extract the original $element from the form.
  $element = drupal_array_get_nested_value($original_form, $form_state['element_address']);

  // Clear the landing pad.
  $commands[] = ajax_command_html(field_collection_ajax_identifier($element, '.landing-pad'), theme('status_messages'));
  $commands[] = array(
    'command' => 'fcajaxScrollTop',
    'selector' => field_collection_ajax_identifier($element, '.collection'),
  );

  return array('#type' => 'ajax', '#commands' => $commands);
}
