<?php

/**
 * Implements hook_field_info().
 */
function uc_multiprice_field_field_info() {
  return array(
    'uc_multiprice' => array(
      'label' => t('Multiprice'),
      'description' => t('This field stores a number in the database in a fixed decimal format.'),
      'default_widget' => 'uc_multiprice_widget',
      'default_formatter' => 'uc_multiprice',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function uc_multiprice_field_field_schema($field) {
  $schema = array();
  $schema['columns']['id'] = array(
    'type' => 'int',
    'length' => 10,
    'not null' => FALSE
  );
  $schema['columns']['type'] = array(
    'type' => 'varchar',
    'length' => 32,
    'not null' => FALSE
  );
  $schema['columns']['list_price'] = array(
    'description' => 'Suggested retail price.',
    'type' => 'numeric',
    'precision' => 16,
    'scale' => 5,
    'not null' => TRUE,
    'default' => 0.0,
  );
  $schema['columns']['cost'] = array(
    'description' => 'The amount the store pays to sell the product.',
    'type' => 'numeric',
    'precision' => 16,
    'scale' => 5,
    'not null' => TRUE,
    'default' => 0.0,
  );
  $schema['columns']['sell_price'] = array(
    'description' => 'The amount the store pays to sell the product.',
    'type' => 'numeric',
    'precision' => 16,
    'scale' => 5,
    'not null' => TRUE,
    'default' => 0.0,
  );

  return $schema;
}

/**
 * Implements hook_field_presave().
 */
function uc_multiprice_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'uc_multiprice') {
    foreach ($items as $delta => $item) {
      if (isset($item) && !empty($item['type'])) {
        if ($item['id'] == uc_store_default_country() && $item['type'] == 'country') {
          $entity->list_price = $item['list_price'];
          $entity->cost = $item['cost'];
          $entity->sell_price = $item['sell_price'];
          unset($items[$delta]);
        }
        else {
          $items[$delta] = $item;
        }
      }
      else {
        unset($items[$delta]);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function uc_multiprice_field_field_formatter_info() {
  return array(
    'uc_multiprice' => array(
      'label' => t('Default'),
      'field types' => array('uc_multiprice'),
      'settings' => array(
        'thousand_separator' => ' ',
        'decimal_separator' => '.',
        'scale' => 2,
        'prefix_suffix' => TRUE,
        'country_or_role' => NULL,
      ),
    ),

  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function uc_multiprice_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'uc_multiprice') {
    $options = array(
      '' => t('<none>'),
      '.' => t('Decimal point'),
      ',' => t('Comma'),
      ' ' => t('Space'),
    );
    $list_of_prices = array(
      'sell_price' => t('Sell Price'),
      'cost' => t('Cost'),
      'list_price' => t('List Price'),
    );

    $country_or_role_options = _uc_multiprice_field_options_list();

    $element['thousand_separator'] = array(
      '#type' => 'select',
      '#title' => t('Thousand marker'),
      '#options' => $options,
      '#default_value' => $settings['thousand_separator'],
    );
    $element['decimal_separator'] = array(
      '#type' => 'select',
      '#title' => t('Decimal marker'),
      '#options' => array('.' => t('Decimal point'), ',' => t('Comma')),
      '#default_value' => $settings['decimal_separator'],
    );
    $element['scale'] = array(
      '#type' => 'select',
      '#title' => t('Scale'),
      '#options' => drupal_map_assoc(range(0, 10)),
      '#default_value' => $settings['scale'],
      '#description' => t('The number of digits to the right of the decimal.'),
    );
    $element['country_or_role'] = array(
        '#type' => 'select',
        '#title' => t('Country or Role'),
        '#options' =>  $country_or_role_options,
        '#default_value' => $settings['country_or_role'],
        '#description' => t('A role or a country for price masking'),
    );
    $element['type_of_price'] = array(
      '#type' => 'select',
      '#title' => t('Type of price'),
      '#options' =>  $list_of_prices,
      '#default_value' => $settings['type_of_price'],
    );
    $element['prefix_suffix'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display prefix and suffix.'),
      '#default_value' => $settings['prefix_suffix'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function uc_multiprice_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if ($display['type'] == 'uc_multiprice') {
    $summary[] = number_format(1234.1234567890, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator'], $settings['country_or_role'], $settings['type_of_price']);
    if ($settings['prefix_suffix']) {
      $summary[] = t('Display with prefix and suffix.');
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_widget_info().
 */
function uc_multiprice_field_field_widget_info() {
  return array(
    'uc_multiprice_widget' => array(
      'label' => t('Multiprice'),
      'field types' => array('uc_multiprice'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function uc_multiprice_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  //Initialize array for removed items
  if (!isset($form_state['multiprice']['removed'])) {
    $form_state['multiprice']['removed'] = array();
  }
  if (!empty($form_state['triggering_element'])) {
    $button = explode('_', $form_state['triggering_element']['#name']);
    if ($button[0] == 'delete') {
      if ($button[1] == $delta) {
        //Add item to 'removed' list
        $form_state['multiprice']['removed'][$delta] = TRUE;
      }
    }
    else {
      if ($button[0] == 'cancel') {
        if ($button[1] == $delta) {
          //Remove item from 'removed' list
          unset($form_state['multiprice']['removed'][$delta]);
        }
      }
    }
  }
  //Check if item removed
  if (isset($form_state['multiprice']['removed'][$delta])) {
    return array(
      '#type' => 'button',
      '#value' => t('Cancel'),
      '#name' => 'cancel_' . $delta,
      '#ajax' => array(
        'callback' => 'uc_multiprice_field_field_js',
      ),
    );
  }

  $element = array(
    '#type' => 'container',
    '#theme' => 'uc_multiprice_field_form',
    '#notify' => array(
      'notice' => array(),
      'error' => array(),
    ),
  );

  $default_country = array(
    'id' => uc_store_default_country(),
    'type' => 'country',
    'list_price' => isset($form['base']['prices']['list_price']['#default_value']) ? $form['base']['prices']['list_price']['#default_value'] : 0,
    'cost' => isset($form['base']['prices']['cost']['#default_value']) ? $form['base']['prices']['cost']['#default_value'] : 0,
    'sell_price' => isset($form['base']['prices']['sell_price']['#default_value']) ? $form['base']['prices']['sell_price']['#default_value'] : 0,
  );
  array_unshift($items, $default_country);
  if (isset($items[$delta])) {
    $value = $items[$delta]['type'] . '|' . $items[$delta]['id'];
  }
  else {
    if (module_exists('uc_store')) {
      $element['#notify']['notice'][] = t('You can manage countries !here.', array('!here' => l(t('here'), 'admin/store/settings/countries', array('attributes' => array('target' => '_blank')))));
    }
  }

  $multiple_field = (count($items) > 2);

  if ($delta != 0) {
    if ($multiple_field) {
      $element['#notify']['notice'][] = t('You can order price priority by row weight.');
    }
    if (!module_exists('uc_multiprice')) {
      $element['#notify']['error'][] = t('Wouldn\'t work without uc_multiprice module, please enable it.');
    }
    $exist = array();
    if (isset($form_state['values'][$field['field_name']][$langcode])) {
      foreach ($form_state['values'][$field['field_name']][$langcode] as $id => $item) {
        if ($id != $delta && isset($item['list']) && $item['list'] != '0') {
          $exist[] = $item['list'];
        }
      }
    }
    foreach ($items as $id => $item) {
      if ($id != $delta) {
        $exist[] = $item['type'] . '|' . $item['id'];
      }
    }

    $multiprices = _uc_multiprice_field_options_list($exist);

    $element['list'] = array(
      '#title' => t('Country/Role'),
      '#type' => 'select',
      '#description' => t("Select the country/region/role to add a price override."),
      '#default_value' => isset($items[$delta]) ? $value : 0,
      '#options' => $multiprices,
      '#attributes' => array('class' => array('chosen-widget')),
      '#ajax' => array(
        'callback' => 'uc_multiprice_field_field_js',
      ),
    );
  }
  else {
    $element['list'] = array(
      '#title' => t('Country/Role'),
      '#type' => 'select',
      '#description' => t("Select the country/region/role to add a price override."),
      '#options' => array(t('Default')),
      '#attributes' => array('class' => array('chosen-widget')),
      '#disabled' => TRUE,
    );
  }
  if (!empty($form_state['values'][$field['field_name']][$langcode][$delta]['list'])) {
    $list = $form_state['values'][$field['field_name']][$langcode][$delta]['list'];
    if ($list != '0') {
      list($type, $id) = explode('|', $list);
      $multiprice = (object) array(
        'id' => $id,
        'type' => $type,
        'list_price' => 0,
        'cost' => 0,
        'sell_price' => 0,
        'delta' => $delta,
        'data' => NULL,
      );
      $element += uc_multiprice_field_field_element($multiprice);
    }
  }
  elseif (isset($items[$delta])) {
    $multiprice = (object) array(
      'id' => $items[$delta]['id'],
      'type' => $items[$delta]['type'],
      'list_price' => $items[$delta]['list_price'],
      'cost' => $items[$delta]['cost'],
      'sell_price' => $items[$delta]['sell_price'],
      'delta' => $delta,
      'data' => NULL,
    );
    $element += uc_multiprice_field_field_element($multiprice);
  }

  // Remove default field from form
  $form['base']['prices']['#type'] = 'hidden';
  $form['base']['prices']['sell_price']['#required'] = FALSE;

  // Add prefix and suffix.
  if (!empty($instance['settings']['prefix'])) {
    $prefixes = explode('|', $instance['settings']['prefix']);
    $element['#field_prefix'] = field_filter_xss(array_pop($prefixes));
  }
  if (!empty($instance['settings']['suffix'])) {
    $suffixes = explode('|', $instance['settings']['suffix']);
    $element['#field_suffix'] = field_filter_xss(array_pop($suffixes));
  }

  $element['#element_validate'][] = 'uc_multiprice_field_field_widget_validate';

  return $element;
}

/**
 * @param $exist
 * @return array Countries and roles options list
 */
function _uc_multiprice_field_options_list($exist = NULL) {
  // Build countries dropdown
  $multiprices = array();
  $multiprices[0] = 'Select country or role';

  // load user roles
  $enabled_roles = array_filter(variable_get('uc_multiprice_roles', array()));
  $roles = user_roles();
  foreach ($enabled_roles as $k => $v) {
    if (!in_array('role|' . $k, $exist)) {
      $multiprices['Roles']['role|' . $k] = $roles[$k];
    }
  }

  // Load countries
  $result = db_select('uc_countries', 'c')
    ->fields('c', array('country_id', 'country_name'))
    ->condition('c.version', 0, '>')
    ->condition('c.country_id', uc_store_default_country(), '!=')
    ->orderBy('c.country_name')
    ->execute();
  foreach ($result as $country) {
    if (!in_array('country|' . $country->country_id, $exist)) {
      $multiprices['Countries']['country|' . $country->country_id] = $country->country_name;
    }
  }

  return $multiprices;
}

/**
 * Implements hook_field_widget_error().
 */
function uc_multiprice_field_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}

/**
 * Implements hook_field_validate().
 */
function uc_multiprice_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_is_empty().
 */
function uc_multiprice_field_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implements hook_field_formatter_view().
 */
function uc_multiprice_field_field_formatter_view($entity_type, &$entity, $field, $instance, $langcode, $items, $display) {
  $data = explode('|', $display['settings']['country_or_role']);

  // Default value
  $element = array();
  if (count($data) == 2) {
    foreach ($items as $item) {
      if ($item['type'] == $data[0] && $item['id'] == $data[1]) {
        $element[0] = array(
          '#theme' => 'uc_multiprice',
          '#currency_code' => ($data[0] == 'country' ? uc_multiprice_current_currency($data[1]) : NULL),
          '#price' => $item[$display['settings']['type_of_price']],
        );
      }
    }
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function uc_multiprice_field_theme() {
  return array(
    'uc_multiprice_field_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * AJAX callback to show a multiprice field
 */
function uc_multiprice_field_field_js($form, &$form_state) {
  // @todo: get field name
  $commands[] = ajax_command_insert('.field-name-multiprice', drupal_render($form['multiprice']));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * FormAPI validation of an individual number element.
 */
function uc_multiprice_field_field_widget_validate($element, &$form_state) {
  $regexp = '/[^0-9.]*/';
  $message = t('Only numbers allowed');
  foreach (array('list_price', 'cost', 'sell_price') as $price_type) {
    if (isset($element[$price_type])) {
      $value = $element[$price_type]['#value'];
      if (($value != preg_replace($regexp, '', $value)) || (substr_count($value, '.') > 1)) {
        form_error($element[$price_type], $message);
      }
    }
  }
}

/**
 * Create a field element.
 */
function uc_multiprice_field_field_element($multiprice) {
  if (!isset($multiprice->type) || $multiprice->type == 'country') {
    $default = variable_get('uc_multiprice_country_currency', array());
    $currency = $default[$multiprice->id];
  }
  else {
    $currency = array(
      'prec' => variable_get('uc_currency_prec'),
      'sign' => variable_get('uc_currency_sign'),
      'currency_code' => variable_get('uc_currency_code'),
    );
  }

  $field['id'] = array(
    '#type' => 'hidden',
    '#value' => $multiprice->id,
  );
  $field['type'] = array(
    '#type' => 'hidden',
    '#value' => isset($multiprice->type) ? $multiprice->type : 'country',
  );
  $field['list_price'] = array(
    '#type' => 'textfield',
    '#title' => t('List Price'),
    '#description' => $currency['currency_code'] . ' (' . $currency['sign'] . ')',
    '#required' => FALSE,
    '#default_value' => isset($multiprice->list_price) ? number_format($multiprice->list_price, $currency['prec'], '.', '') : number_format(0, $currency['prec']),
    '#size' => 20,
    '#maxlength' => 35,
    '#weight' => 1,
  );
  $field['cost'] = array(
    '#type' => 'textfield',
    '#title' => t('Cost'),
    '#description' => $currency['currency_code'] . ' (' . $currency['sign'] . ')',
    '#required' => FALSE,
    '#default_value' => isset($multiprice->cost) ? number_format($multiprice->cost, $currency['prec'], '.', '') : number_format(0, $currency['prec']),
    '#size' => 20,
    '#maxlength' => 35,
    '#weight' => 2,
  );
  $field['sell_price'] = array(
    '#type' => 'textfield',
    '#title' => t('Sell Price'),
    '#description' => $currency['currency_code'] . ' (' . $currency['sign'] . ')',
    '#required' => FALSE,
    '#default_value' => isset($multiprice->sell_price) ? number_format($multiprice->sell_price, $currency['prec'], '.', '') : number_format(0, $currency['prec']),
    '#size' => 20,
    '#maxlength' => 35,
    '#weight' => 3,
  );
  $field['actions']['delete'] = array(
    '#type' => 'button',
    '#value' => t('Delete'),
    '#name' => 'delete_' . $multiprice->delta,
    '#ajax' => array(
      'callback' => 'uc_multiprice_field_field_js',
    ),
    '#disabled' => ($multiprice->delta == 0),
  );

  return $field;
}

/**
 * Theme uc_multiprice field.
 */
function theme_uc_multiprice_field_form($form) {
  $rows = array();
  $form = array_shift($form);

  $rows[] = drupal_render($form['list']);
  $rows[] = drupal_render($form['list_price']);
  $rows[] = drupal_render($form['cost']);
  $rows[] = drupal_render($form['sell_price']);
  $rows[] = drupal_render($form['actions']);

  $table = array(
    'header' => array(),
    'rows' => array($rows),
    'attributes' => array(),
    'caption' => NULL,
    'colgroups' => NULL,
    'sticky' => TRUE,
    'empty' => NULL,
  );

  $output = theme_table($table);

  if (!empty($form['#notify'])) {
    $output .= '<ul class = "tips">';
    foreach ($form['#notify']['error'] as $item) {
      $output .= '<li class="error">' . $item . '</li>';
    }
    foreach ($form['#notify']['notice'] as $item) {
      $output .= '<li>' . $item . '</li>';
    }
    $output .= '</ul>';
  }

  return $output;
}
