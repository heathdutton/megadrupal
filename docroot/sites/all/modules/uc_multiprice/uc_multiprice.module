<?php

/**
 * Implements hook_init().
 */
function uc_multiprice_init() {
  if (!isset($_SESSION['uc_multiprice']) || empty($_SESSION['uc_multiprice']['currency_code'])) {
    uc_multiprice_country_id();
  }
  if (user_access('administer multiprice')) {
    $currencies = variable_get('uc_multiprice_country_currency', array());
    if (empty($currencies)) {
      drupal_set_message(t('Multiprice currencies are not configured yet. Please, fill in the settings <a href="@url">here</a>.'), array('@url' => url('admin/store/settings/countries/formats')));
    }
  }
}

/**
 * Implements hook_menu().
 */
function uc_multiprice_menu() {
  $items['admin/store/settings/multiprice'] = array(
    'title' => 'Multiprice Currencies',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multiprice_admin_currencies'),
    'access arguments' => array('administer multiprice'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_multiprice.admin.inc',
  );
  $items['admin/store/settings/multiprice/currencies'] = array(
    'title' => 'Multiprice Currencies',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multiprice_admin_currencies'),
    'access arguments' => array('administer multiprice'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_multiprice.admin.inc',
    'weight' => 1,
  );
  $items['admin/store/settings/multiprice/roles'] = array(
    'title' => 'Multiprice Roles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multiprice_admin_roles'),
    'access arguments' => array('administer multiprice roles'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_multiprice.admin.inc',
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function uc_multiprice_perm() {
  return array('administer multiprice', 'create & edit multiprices', 'administer multiprice roles');
}

/**
 * Implements hook_theme().
 */
function uc_multiprice_theme() {
  return array(
    'uc_multiprice' => array(
      'variables' => array(
        'currency_code' => NULL,
        'price' => NULL,
        'suffixes' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_block_info()
 */
function uc_multiprice_block_info() {
  $blocks['country_masquerade'] = array(
    'info' => t('UC Multiprice Country Masquerade')
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function uc_multiprice_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'country_masquerade':
      $block['content'] = drupal_get_form('uc_multiprice_country_masquerade_form');
      break;
  }

  return $block;
}

/**
 * Implements hook_element_info_alter()
 */
function uc_multiprice_element_info_alter(&$type) {
  $type['uc_price'] = array(
    '#input' => TRUE,
    '#size' => 15,
    '#maxlength' => 15,
    '#autocomplete_path' => FALSE,
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('uc_store_validate_number'),
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
    '#allow_negative' => FALSE,
    '#empty_zero' => TRUE,
  );
}

/**
 * Implements hook_views_api().
 */
function uc_multiprice_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'uc_multiprice') . '/views',
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function uc_multiprice_theme_registry_alter(&$theme_registry) {
  $theme_registry['uc_price']['variables']['currency_code'] = NULL;
  $theme_registry['uc_price']['file'] = 'uc_multiprice.module';
  $theme_registry['uc_price']['file'] = 'uc_multiprice.module';
  $theme_registry['uc_price']['theme path'] = drupal_get_path('module', 'uc_multiprice');
  $theme_registry['uc_price']['function'] = 'theme_uc_multiprice';
  $theme_registry['uc_price']['includes'] = array();
}

/**
 * Implements hook_uc_order_pane().
 */
function uc_multiprice_uc_order_pane_alter(&$panes) {
  $panes['line_items']['callback'] = 'uc_multiprice_pane_line_items';
  $panes['payment']['callback'] = 'uc_multiprice_pane_payment';
}

/**
 * Implements hook_views_data_alter().
 */
function uc_multiprice_views_data_alter(&$data) {
  $data['uc_orders']['order_total']['field']['handler'] = 'uc_multiprice_handler_field_money_amount';
}

/**
 * Implements hook_form_alter().
 */
function uc_multiprice_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'uc_order_edit_form') {
    // Append select box for country choosing
    $form['payment']['uc_multiprice_country'] = array(
      '#type' => 'select',
      '#title' => t('Multiprice country'),
      '#options' => uc_country_option_list(),
      '#empty_option' => t('-None-'),
      '#default_value' => isset($form['#order']->data['uc_multiprice_country']) ? $form['#order']->data['uc_multiprice_country'] : '',
    );
    // Build user roles selectbox
    if (isset($form['#order']->data['uc_multiprice_role'])) {
      $user_role_id = $form['#order']->data['uc_multiprice_role'];
    }
    else {
      $user_role_id = '';
    }
    $enabled_roles = array_filter(variable_get('uc_multiprice_roles', array()));
    $roles = user_roles();
    $user_roles = array();
    foreach ($enabled_roles as $k => $v) {
      $user_roles[$k] = $roles[$k];
    }
    $form['payment']['uc_multiprice_role'] = array(
      '#type' => 'select',
      '#title' => t('Multiprice user role'),
      '#options' => $user_roles,
      '#empty_option' => t('-None-'),
      '#default_value' => $user_role_id,
    );
    array_unshift($form['#submit'], 'uc_multiprice_save_country_to_order');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uc_multiprice_form_uc_country_formats_form_alter(&$form, &$form_state) {
  $variable = variable_get('uc_multiprice_country_currency', array());
  foreach (element_children($form['countries']) as $country_id) {
    $country = & $form['countries'][$country_id];

    $currency = isset($variable[$country_id]) ? $variable[$country_id] : array();

    if (empty($currency['sign'])) {
      $currency['sign'] = variable_get('uc_currency_sign', '$');
    }
    if (empty($currency['thou'])) {
      $currency['thou'] = variable_get('uc_currency_thou', ',');
    }
    if (empty($currency['dec'])) {
      $currency['dec'] = variable_get('uc_currency_dec', '.');
    }
    if (!isset($currency['prec'])) {
      $currency['prec'] = variable_get('uc_currency_prec', 2);
    }
    if (empty($currency['currency_code'])) {
      $currency['currency_code'] = variable_get('uc_currency_code', 'USD');
    }

    $country['currency'] = array(
      '#type' => 'fieldset',
      '#title' => t('Currency format'),
      '#summary callback' => 'summarize_form',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $country['currency']['currency_code'] = array(
      '#type' => 'textfield',
      '#title' => t('Default currency'),
      '#description' => t('While not used directly in formatting, the currency code is used by other modules as the primary currency for your site.  Enter here your three character <a href="!url">ISO 4217</a> currency code.', array('!url' => 'http://en.wikipedia.org/wiki/ISO_4217#Active_codes')),
      '#default_value' => $currency['currency_code'],
      '#maxlength' => 3,
      '#size' => 5,
    );
    $country['currency']['example'] = array(
      '#type' => 'textfield',
      '#title' => t('Current format'),
      '#value' => uc_currency_format(1000.1234, $currency['sign'], $currency['thou'], $currency['dec']),
      '#summary' => t('Currency format: @format', array('@format' => uc_currency_format(1000.1234))),
      '#disabled' => TRUE,
      '#size' => 10,
    );
    $country['currency']['sign'] = uc_textfield(t('Currency Sign'), '$', FALSE, NULL, 10, 10);
    $country['currency']['sign']['#default_value'] = $currency['sign'];
    $country['currency']['sign']['#summary callback'] = 'summarize_null';

    $country['currency']['thou'] = uc_textfield(t('Thousands Marker'), ',', FALSE, NULL, 10, 10);
    $country['currency']['thou']['#default_value'] = $currency['thou'];
    $country['currency']['thou']['#summary callback'] = 'summarize_null';

    $country['currency']['dec'] = uc_textfield(t('Decimal Marker'), '.', FALSE, NULL, 10, 10);
    $country['currency']['dec']['#default_value'] = $currency['dec'];
    $country['currency']['dec']['#summary callback'] = 'summarize_null';

    $country['currency']['prec'] = array(
      '#type' => 'select',
      '#title' => t('Number of decimal places'),
      '#options' => drupal_map_assoc(array(0, 1, 2)),
      '#summary callback' => 'summarize_null',
      '#default_value' => $currency['prec'],
    );
  }
  $form['#submit'][] = 'uc_multiprice_currencies_submit';
}

/**
 * Implements hook_preprocess_uc_order().
 */
function uc_multiprice_preprocess_uc_order(&$variables) {
  $order = $variables['order'];
  $currency_sign = uc_multiprice_get_currency_sign($order->currency);
  foreach ($order->line_items as $line_item) {
    $variables['order_' . $line_item['type']] = uc_currency_format($line_item['amount'], $currency_sign);
  }
  $variables['products'] = $order->products;
  foreach ($variables['products'] as &$product) {
    $product->total_price = theme('uc_price', array('price' => $product->price * $product->qty, 'currency_code' => $order->currency));
    if ($product->qty > 1) {
      $product->individual_price = t('(!price each)', array('!price' => theme('uc_price', array('price' => $product->price, 'currency_code' => $order->currency))));
    }
  }
  foreach ($variables['line_items'] as &$line_item) {
    $line_item['formatted_amount'] = uc_currency_format($line_item['amount'], $currency_sign);
  }
}

/**
 * Implements hook_node_load().
 */
function uc_multiprice_node_load($nodes, $types) {
  global $user;
  $roles = $user->roles;

  $country_code = NULL;
  if (isset($_SESSION) && isset($_SESSION['uc_multiprice'])) {
    $country_code = $_SESSION['uc_multiprice']['country_code'];
  }

  if (!(arg(0) == 'node' && arg(2) == 'edit')) {
    foreach ($nodes as &$node) {
      if ($node->type == 'product') {
        if (isset($node->multiprice[LANGUAGE_NONE])) {
          foreach (array_reverse($node->multiprice[LANGUAGE_NONE]) as $item) {
            if (($item['type'] == 'country' && $item['id'] == $country_code) || ($item['type'] == 'role' && isset($roles[$item['id']]))) {
              $node->default_price = array(
                'list_price' => $node->list_price,
                'cost' => $node->cost,
                'sell_price' => $node->sell_price,
                'price' => $node->price,
              );
              $node->multiprice_option = array(
                'id' => $item['id'],
                'type' => $item['type'],
              );
              $node->list_price = $item['list_price'];
              $node->cost = $item['cost'];
              $node->sell_price = $node->price = $item['sell_price'];
              break;
            }
          }
        }
      }
      elseif ($node->type == 'product_kit') {
        $list_price = 0;
        $cost = 0;
        $sell_price = 0;
        if (isset($node->products)) {
          foreach ($node->products as $product) {
            $list_price += $product->list_price;
            $cost += $product->cost;
            $sell_price += $product->sell_price;
          }
          $node->list_price = $list_price;
          $node->cost = $cost;
          $node->sell_price = $sell_price;
        }
      }
    }
  }
}

/**
 * Implements hook_uc_order()
 */
function uc_multiprice_uc_order($op, &$order, $arg2) {
  switch ($op) {
    case 'new':
      // Save current user country to order
      $order->currency = $_SESSION['uc_multiprice']['currency_code'];
      $order->data['uc_multiprice_country'] = $_SESSION['uc_multiprice']['country_code'];
      break;
  }
}

/**
 * Implements hook_tapir_table_alter().
 */
function uc_multiprice_tapir_table_alter(&$table, $table_id) {
  if ($table_id == 'uc_op_products_view_table') {
    foreach ($table['#rows'] as &$product_row) {
      $currency_code = $product_row['#entity']->order->currency;
      foreach (element_children($product_row) as $field_name) {
        if (isset($product_row[$field_name]['#theme']) && $product_row[$field_name]['#theme'] == 'uc_price') {
          $product_row[$field_name]['#currency_code'] = $currency_code;
        }
      }
    }
  }
}

/**
 * Sets or returns the country_id
 * Available for other modules
 */
function uc_multiprice_country_id($country_id = FALSE) {
  global $user;
  $currencies = variable_get('uc_multiprice_country_currency', array());
  if ($country_id) {
    if (!isset($currencies[$country_id])) {
      $country_id = variable_get('uc_store_country');
    }
  }
  elseif (!isset($_SESSION['uc_multiprice']) || !isset($_SESSION['uc_multiprice']['country_code'])) {
    if (module_exists('ip2country')) {
      if ($user->uid != 0) {
        $country_iso_code_2 = $user->data['country_iso_code_2'];
      }
      else {
        $country_iso_code_2 = ip2country_get_country(ip_address());
      }
      $country_id = db_select('uc_countries', 'c')
        ->fields('c', array('country_id'))
        ->condition('c.version', 0, '>')
        ->condition('c.country_iso_code_2', $country_iso_code_2)
        ->condition('c.country_id', uc_store_default_country(), '!=')
        ->execute()
        ->fetchField();
      if (empty($country_id) || !isset($currencies[$country_id])) {
        $country_id = variable_get('uc_store_country');
      }
    }
    else {
      $country_id = variable_get('uc_store_country');
    }
  }
  else {
    $country_id = $_SESSION['uc_multiprice']['country_code'];
  }

  if (!isset($_SESSION['uc_multiprice'])) {
    $_SESSION['uc_multiprice'] = array();
  }
  $_SESSION['uc_multiprice']['country_code'] = $country_id;
  $_SESSION['uc_multiprice']['currency_code'] = isset($currencies[$country_id]['currency_code']) ? $currencies[$country_id]['currency_code'] : variable_get('uc_currency_code');

  return $_SESSION['uc_multiprice'];
}

/**
 * Helper function for uc_multiprice module.
 *
 * @param $currency_code string
 * @return string currency sign.
 */
function uc_multiprice_get_currency_sign($currency_code) {
  $currencies = variable_get('uc_multiprice_country_currency', array());
  $currency_sign = NULL;
  foreach ($currencies as $currency) {
    if ($currency['currency_code'] == $currency_code) {
      $currency_sign = $currency['sign'];
      break;
    }
    else {
      $currency_sign = variable_get('uc_currency_sign', '$');
    }
  }

  return $currency_sign;
}

/**
 * Helper/API function - returns current visitor's currency ('USD', 'EUR' or 'GBP').
 * Relies on Ubercart Multiprice module,.
 */
function uc_multiprice_current_currency($country_id = NULL) {
  if ($country_id === NULL) {
    $country_id = uc_multiprice_country_id();
  }
  // Get configured countries list
  $currencies = variable_get('uc_multiprice_country_currency', array());

  // If country has configuration - pass it
  if (isset($currencies[$country_id])) {
    return $currencies[$country_id]['currency_code'];
  }

  // Otherwise - use a fallback
  switch (intval($country_id)) {
    case 724: // Spain
    case 620: // Portugal
    case 528: // Netherlands
    case 442: // Luxembourg
    case 380: // Italy
    case 372: // Ireland
    case 250: // France
    case 246: // Finland
    case 056: // Belgium
    case 040: // Austria
    case 276: // Germany
      return 'EUR';
    case 826: // United Kingdom
      return 'GBP';
    case 840: // United States
    default:
      return 'USD';
  }
}

/**
 * Show a price with a currency sign in mind.
 */
function theme_uc_multiprice($variables) {
  if (!empty($variables['currency_code'])) {
    $currency_sign = uc_multiprice_get_currency_sign($variables['currency_code']);
  }
  else {
    $currencies = variable_get('uc_multiprice_country_currency', array());
    if (isset($_SESSION['uc_multiprice']['country_code'])) {
      $country_code = $_SESSION['uc_multiprice']['country_code'];
    }
    else {
      $country_code = variable_get('uc_store_country');
    }
    $currency_sign = $currencies[$country_code]['sign'];
  }
  $output = '<span class="uc-price">' . uc_currency_format($variables['price'], $currency_sign) . '</span>';
  if (!empty($variables['suffixes'])) {
    $output .= '<span class="price-suffixes">' . implode(' ', $variables['suffixes']) . '</span>';
  }

  return $output;
}

/**
 * A submit callback for the uc_order_edit_form form.
 */
function uc_multiprice_save_country_to_order($form, &$form_state) {
  $currencies = variable_get('uc_multiprice_country_currency', array());
  $country_id = $form_state['values']['uc_multiprice_country'];
  $role_id = $form_state['values']['uc_multiprice_role'];
  if (isset($currencies[$country_id]['currency_code'])) {
    $currency_code = $currencies[$country_id]['currency_code'];
  }
  else {
    $currency_code = variable_get('uc_currency_code', 'USD');
  }

  if (isset($form_state['order']->data['fls_multiprice_role'])) {
    $order_multiprice_changed =
      $form_state['order']->data['fls_multiprice_country'] != $country_id
      || $form_state['order']->data['fls_multiprice_role'] != $role_id;
  }
  else {
    $order_multiprice_changed =
      $form_state['order']->data['fls_multiprice_country'] != $country_id;
  }

  $form_state['order']->currency = $currency_code;

  if ($order_multiprice_changed) {
    $form_state['order']->data['uc_multiprice_country'] = $country_id;
    $form_state['order']->data['uc_multiprice_role'] = $role_id;

    // Refresh order products
    $products = & $form_state['values']['products'];
    foreach ($products as $delta => $product) {
      $product_node = node_load($product['nid']);
      if (isset($product_node->multiprice[LANGUAGE_NONE])) {
        foreach (array_reverse($product_node->multiprice[LANGUAGE_NONE]) as $price) {
          // Search for value with this country id
          if ($price['type'] == 'country' && $price['id'] == $country_id) {
            $products[$delta]['price'] = $price['sell_price'];
            $products[$delta]['cost'] = $price['cost'];
            break;
          }
          elseif ($price['type'] = 'role' && $price['id'] == $role_id) {
            $products[$delta]['price'] = $price['sell_price'];
            $products[$delta]['cost'] = $price['cost'];
            break;
          }
          // If no value found, set default
          if (isset($product_node->default_price)) {
            $products[$delta]['price'] = $product_node->default_price['price'];
            $products[$delta]['cost'] = $product_node->default_price['cost'];
          }
          else {
            $products[$delta]['price'] = $product_node->price;
            $products[$delta]['cost'] = $product_node->cost;
          }
        }
      }
    }
  }
}

/**
 * A submit callback for the uc_country_formats_form form.
 */
function uc_multiprice_currencies_submit($form, &$form_state) {
  $variable = array();
  foreach ($form_state['values']['countries'] as $id => $country) {
    if (is_array($country)) {
      $variable[$id] = $country['currency'];
    }
  }
  variable_set('uc_multiprice_country_currency', $variable);
}

/**
 * Handles the "Line Items" order pane.
 */
function uc_multiprice_pane_line_items($op, $order, &$form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'view':
    case 'customer':
      $line_items = $order->line_items;
      $items = _uc_line_item_list();
      foreach ($items as $item) {
        if (isset($item['display_only']) && $item['display_only'] == TRUE) {
          $result = $item['callback']('display', $order);
          if (is_array($result)) {
            foreach ($result as $line) {
              $line_items[] = array(
                'title' => $line['title'],
                'amount' => $line['amount'],
                'weight' => $item['weight']
              );
            }
          }
        }
      }
      usort($line_items, 'uc_weight_sort');

      $build['line_items'] = array(
        '#prefix' => '<table class="line-item-table">',
        '#suffix' => '</table>',
      );
      foreach ($line_items as $item) {
        $table_row = array(
          '#prefix' => '<tr>',
          '#suffix' => '</tr>',
        );

        $table_row['title'] = array(
          '#markup' => check_plain($item['title']),
          '#prefix' => '<td class="li-title">',
          '#suffix' => '</td>',
        );
        $table_row['amount'] = array(
          '#theme' => 'uc_price',
          '#currency_code' => $order->currency,
          '#price' => $item['amount'],
          '#prefix' => '<td class="li-amount">',
          '#suffix' => '</td>',
        );

        $build['line_items'][] = $table_row;
      }

      return $build;

    case 'edit-form':
      $options = array();
      $items = _uc_line_item_list();
      $line_items = $order->line_items;
      foreach ($items as $item) {
        if (isset($item['add_list']) && $item['add_list'] === TRUE) {
          $options[$item['id']] = check_plain($item['title']);
        }
        if (isset($item['display_only']) && $item['display_only'] == TRUE) {
          $result = $item['callback']('display', $order);
          if (is_array($result)) {
            foreach ($result as $line) {
              $line_items[] = array(
                'line_item_id' => $line['id'],
                'title' => $line['title'],
                'amount' => $line['amount'],
                'weight' => $item['weight'],
              );
            }
          }
        }
      }
      usort($line_items, 'uc_weight_sort');

      $form['add_line_item'] = array('#type' => 'container');

      $form['add_line_item']['li_type_select'] = array(
        '#type' => 'select',
        '#title' => t('Add a line item'),
        '#options' => $options,
      );
      $form['add_line_item']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add line'),
        '#submit' => array('uc_order_pane_line_items_submit', 'uc_order_pane_line_items_add'),
        '#ajax' => array(
          'callback' => 'uc_order_pane_line_items_update',
        ),
      );
      $form['line_items'] = array(
        '#tree' => TRUE,
        '#theme' => 'uc_order_pane_line_items',
        '#prefix' => '<div id="order-line-items">',
        '#suffix' => '</div>',
      );

      foreach ($line_items as $item) {
        $form['line_items'][$item['line_item_id']]['li_id'] = array(
          '#type' => 'hidden',
          '#value' => $item['line_item_id'],
        );
        if (isset($item['type']) && _uc_line_item_data($item['type'], 'stored') == TRUE) {
          $form['line_items'][$item['line_item_id']]['remove'] = array(
            '#type' => 'image_button',
            '#title' => t('Remove line item.'),
            '#src' => drupal_get_path('module', 'uc_store') . '/images/error.gif',
            '#button_type' => 'remove',
            '#submit' => array('uc_order_pane_line_items_submit', 'uc_order_pane_line_items_remove'),
            '#ajax' => array(
              'callback' => 'uc_order_pane_line_items_update',
            ),
            '#return_value' => $item['line_item_id'],
          );
          $form['line_items'][$item['line_item_id']]['title'] = array(
            '#type' => 'textfield',
            '#title' => t('Title'),
            '#default_value' => $item['title'],
            '#size' => 40,
            '#maxlength' => 128,
          );
          $form['line_items'][$item['line_item_id']]['amount'] = array(
            '#type' => 'uc_price',
            '#currency_code' => $order->currency,
            '#title' => t('Amount'),
            '#default_value' => $item['amount'],
            '#size' => 6,
            '#allow_negative' => TRUE,
          );
        }
        else {
          $form['line_items'][$item['line_item_id']]['title'] = array(
            '#markup' => check_plain($item['title']),
          );
          $form['line_items'][$item['line_item_id']]['amount'] = array(
            '#theme' => 'uc_price',
            '#currency_code' => $order->currency,
            '#price' => $item['amount'],
          );
        }
      }

      return $form;

    case 'edit-theme':
      return drupal_render($form['add_line_item'])
      . drupal_render($form['line_items']);

    case 'edit-process':
      uc_order_pane_line_items_submit($form, $form_state);

      return;
  }
}

/**
 * Handles the Payment order pane.
 */
function uc_multiprice_pane_payment($op, $order, &$form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'view':

      $build['balance'] = array('#markup' => t('Balance: @balance', array('@balance' => uc_currency_format(uc_payment_balance($order), uc_multiprice_get_currency_sign($order->currency)))));

      if (user_access('view payments')) {
        $build['view_payments'] = array(
          '#markup' => ' (' . l(t('View'), 'admin/store/orders/' . $order->order_id . '/payments') . ')',
        );
      }

      $method_name = _uc_payment_method_data($order->payment_method, 'review');
      if (empty($method_name)) {
        $method_name = _uc_payment_method_data($order->payment_method, 'name');
      }
      $build['method'] = array(
        '#markup' => t('Method: @payment_method', array('@payment_method' => $method_name)),
        '#prefix' => '<br />',
      );
      $func = _uc_payment_method_data($order->payment_method, 'callback');
      if (function_exists($func)) {
        $method_output = $func('order-view', $order);
        if (!empty($method_output)) {
          if (is_array($method_output)) {
            $build['output'] = $method_output + array(
              '#prefix' => '<br />',
            );
          }
          else {
            $build['output'] = '<br />' . $method_output;
          }
        }
      }

      return $build;
  }
  return uc_order_pane_payment($op, $order, $form, $form_state);
}

/**
 * UC Multiprice Country Masquerade form callback
 */
function uc_multiprice_country_masquerade_form($form, &$form_state) {
  $form['uc_multiprice'] = array(
    '#type' => 'fieldset',
    '#title' => t('uc_multiprice'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['uc_multiprice']['uc_multiprice_country'] = array(
    '#type' => 'select',
    '#title' => t('Choose country to masquerade'),
    '#options' => uc_country_option_list(),
    '#default_value' => $_SESSION['uc_multiprice']['country_code'],
  );

  $form['uc_multiprice']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Apply country'),
  );

  return $form;
}

/**
 * A submit callback for the uc_multiprice_country_masquerade_form form.
 */
function uc_multiprice_country_masquerade_form_submit($form, &$form_state) {
  $country_code = $form_state['values']['uc_multiprice_country'];
  uc_multiprice_country_id($country_code);
  $countries = uc_country_option_list();
  drupal_set_message(t('UC Multiprice Country now is @country'), array('@country' => $countries[$country_code]));
}