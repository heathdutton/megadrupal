<?php
/**
 * @file
 * Code for the OG Importer module
 */

/**
 * Implements hook_menu
 */
function og_tag_importer_menu() {

  $items['admin/config/content/og_tag_importer'] = array(
    'title' => 'OG:Tag Importer',
    'description' => 'Manage configuration for open graph tag importer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_tag_importer_admin'),
    'access arguments' => array('administer og_tag_importer'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['node/add/og_tag_importer'] = array(
    'title' => 'OG:Tag content',
    'description' => 'Add content from OG:Tag importer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_tag_importer_import'),
    'access arguments' => array('import og_tag_importer'),
    'type' => MENU_NORMAL_ITEM,
  );


  return $items;
}

/**
 * Implements hook_permission
 */
function og_tag_importer_permission() {
  return array(
    'administer og_tag_importer' => array(
      'title' => t('Administer OG:Tag importer'),
      'description' => t('Perform administration tasks for OG:Tag importer'),
    ),
    'import og_tag_importer' => array(
      'title' => t('Import content from OpenGraph tags'),
    ),
  );
}

/**
 * Form builder callback
 */
function og_tag_importer_import($form, &$form_state) {
  
  $bundle = variable_get('og_tag_importer_bundle', 'page');
  $types = _node_types_build();
  
  $form['message'] = array(
    '#prefix' => '<div class="messages status">',
    '#suffix' => '</div>',
    '#markup' => t('Currently contents pulled in will be imported into %type, if you wish to change that setting, please ', array('%type' => $types->names[$bundle])) . l('click here', 'admin/config/content/og_tag_importer', array('query' => array('destination' => 'node/add/og_tag_importer'))),
  );

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('External url'),
    '#description' => t('Please enter the url of the article where you are attempting to pull OG tags from'),
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );

  return $form;
}

/**
 * Form validation handler
 */
function og_tag_importer_import_validate($form, &$form_state) {
  $v = $form_state['values'];
  
  // invalid url
  if (!valid_url($v['url'], true)) {
    form_set_error('url', t('Please enter an absolute url such as http://www.yahoo.com'));
  }
  
  // if the content does not have any og tags
  // perform the fetch here
  $result = og_tag_importer_fetch($v['url']);
  if ($result['error'] == 1) {
    form_set_error('url', $result['message']);
  }
  
  // store the fetched tags for submission handler
  $form_state['og_tags'] = (array_key_exists('data', $result)) ? $result['data'] : array();
}

/**
 * Form submission handler
 */
function og_tag_importer_import_submit($form, &$form_state) {
    if (array_key_exists('og_tags', $form_state)) {
      $tags = $form_state['og_tags'];
      $nid = og_tag_importer_import_tags($tags);
    }
    
    if (isset($nid)) {
      drupal_set_message('Your imported content has been created', 'status');
      $form_state['redirect'] = 'node/' . $nid;
    }
    else {
      drupal_set_message('A problem has occurred with importing this content.', 'error');
    }
}

/**
 * Using the mapping to import tags into a node
 */
function og_tag_importer_import_tags($og_tags) {
  $bundle = variable_get('og_tag_importer_bundle', 'page');

  $mapping = og_tag_importer_auto_map();
  $data = array();
  foreach ($og_tags as $tag_name => $value) {
    $map = variable_get('og_tag_importer_' . str_replace(':', '_', $tag_name), (array_key_exists($tag_name, $mapping)) ? $mapping[$tag_name] : '');

    if ($map != '') {
      $data[$map][] = $value;
    }
  }
  $node = new stdClass();
  $node->type = $bundle;
  node_object_prepare($node);
  
  $node->language = LANGUAGE_NONE;
  $node->status = 0;
  
  node_save($node);
  
  $wrapper = entity_metadata_wrapper('node', $node);
  foreach ($data as $field_name => $values) {
    if ($field_name == 'title') {
      $wrapper->title = $values[0];
    } 
    else {
      $field_info = field_info_field($field_name);
      switch($field_info['module']) {
        case 'link':
          $wrapper->{$field_name}->set(array('url' => $values[0]));
        break;
        case 'image':
          // we will need to save the image value first, assuming we are getting an image url
          $image = _og_tag_importer_image_import($values[0]);
          if (empty($image)) {
            return;
          }          
          if ($field_info['cardinality'] == 1) {
          	$input = $image;
          } else {
          	$input = array($image);	
          }          
          $wrapper->{$field_name}->set($input);
        break;
        default:
          if (array_key_exists('value', $field_info['columns'])) {
            $wrapper->{$field_name}->set(array('value' => implode("\n\n", $values)));
          }
        break;
      }
    }
  }
  
  // let other modules alter the wrapper before we save it
  drupal_alter('og_tag_importer_import', $wrapper, $data);
  $wrapper->save();
  return $node->nid;
}

/**
 * Creates an auto mapping of the content type with the og fields
 */
function og_tag_importer_auto_map() {
  $mapping = array(
    'og:title' => 'title',
  );
  $bundle = variable_get('og_tag_importer_bundle', 'page');
  $fields = field_info_instances('node', $bundle);
  foreach ($fields as $field_name => $instance) {
    // auto field mappings
    if ($instance['widget']['module'] == 'link') {
        $mapping['og:url'] = $field_name; 
    }
    if ($instance['widget']['module'] == 'image') {
      $mapping['og:image'] = $field_name;
    }
  }
  // we can't assume body field always exists
  if (array_key_exists('body', $fields)) {
    $mapping['og:description'] = 'body';
    // default setting for fields if no auto-mapping detected
    // they are going to be appended ot the body tag
    if (!array_key_exists('og:url', $mapping)) {
      $mapping['og:url'] = 'body';
    }
    if (!array_key_exists('og:image', $mapping)) {
      $mapping['og:image'] = 'body';
    }
    $mapping['og:site_name'] = 'body';  
  }
  return $mapping;
}


/**
 * function to fetch the OG tags from an external url
 *
 * @params
 * (string) $url        An valid url of an external article
 *
 * @return
 * (array)  $result     A result array with error, message, data elements, 
 *                      If error occurs, error = 1 and data element is not there 
 */
function og_tag_importer_fetch($url) {

  $error = '';
  $result = drupal_http_request($url);
  // error with fetching the url
  if ($result->code != '200') {
    $message = 'OG:Tag importer was unable to fetch the url with code: %code and error: %error';
    $variables = array(
      '%code' => $result->code,
      '%error' => $result->error,
    );
    watchdog('og_tag_importer', $message, $variables, WATCHDOG_WARNING, 'node/add/og_tag_importer');
    $error = t('Unable to fetch the url given, please check the logs for more details');
    return array(
      'error' => 1,
      'message' => $error,
    );
  }

  // let's parse the content
  libxml_use_internal_errors(true);
  $og_tags = array();
  $html = $result->data;
  $doc = new DomDocument();
  $doc->loadHTML($html);
  $xpath = new DOMXPath($doc);
  $query = '//*/meta[starts-with(@property, \'og:\')]';
  $metas = $xpath->query($query);
  foreach ($metas as $meta) {
    $property = $meta->getAttribute('property');
    $content = $meta->getAttribute('content');
    $og_tags[$property] = $content;
  }
  
  if (empty($og_tags)) {
    $error = t('The fetched url does not contain any OpenGraph tags');
    return array(
      'error' => 1,
      'message' => $error,
    );
  }
  
  return array(
    'data' => $og_tags,
    'error' => 0,
    'message' => 0,
  );  
}

/**
 * Configuration callback
 */
function og_tag_importer_admin($form, &$form_state) {

  $types = _node_types_build();
  
  $form['message'] = array(
    '#prefix' => '<div class="messages warning">',
    '#markup' => 'Please note changing the node type will cause mapping configuration to change, please verify the field mapping again',
    '#suffix' => '</div>',
  );
  
  $form['og_tag_importer_bundle'] = array(
    '#type' => 'select',
    '#title' => t('Please select the node type to import the contents into'),
    '#options' => $types->names,
    '#default_value' => variable_get('og_tag_importer_bundle', 'page'),    
  );
    
  $options = array(
    'link' => array('' => t('--select--')),
    'image' => array('' => t('--select--')),
    'text' => array('' => t('--select--')),
  );
    
  $bundle = variable_get('og_tag_importer_bundle', 'page');
  $fields = field_info_instances('node', $bundle);
  foreach ($fields as $field_name => $instance) {
    switch($instance['widget']['module']) {
      case 'link':
        $options['link'][$field_name] = $instance['label'];
      break;
      case 'image':
        $options['image'][$field_name] = $instance['label'];
      break;
      case 'media':
				if ($instance['widget']['settings']['allowed_types']['image'] == 'image') {
					$options['image'][$field_name] = $instance['label'];
				}      	
      break;
      case 'text':
        $options['text']['title'] = t('Title');
        $options['text'][$field_name] = $instance['label'];
      break;
    }
  }
  
  $auto_mapping_default = og_tag_importer_auto_map();
  
  $form['og'] = array(
    '#title' => 'mapping',
    '#description' => t('Override mapping configuration for OG:Tag import'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#type' => 'fieldset',
  );
  
  $default_title = variable_get('og_tag_importer_og_title', 'title');
  if ($default_title == '') {
    $default_title = $auto_mapping_default['og:title'];
  }
  $form['og']['og_tag_importer_og_title'] = array(
    '#title' => 'og:title',
    '#type' => 'select',
    '#options' => $options['text'],
    '#default_value' => $default_title,
  );
  
  $default_image = variable_get('og_tag_importer_og_image', '');
  if ($default_image == '') {
    $default_image = $auto_mapping_default['og:image'];
  }
  $form['og']['og_tag_importer_og_image'] = array(
    '#title' => 'og:image',
    '#type' => 'select',
    '#options' => $options['image'],
    '#default_value' => $default_image,
  );

  $default_url = variable_get('og_tag_importer_og_url', '');
  if ($default_url == '') {
    $default_url = $auto_mapping_default['og:url'];
  }  
  $form['og']['og_tag_importer_og_url'] = array(
    '#title' => 'og:url',
    '#type' => 'select',
    '#options' => $options['link'],
    '#default_value' => $default_url,
  );
 
  $default_description = variable_get('og_tag_importer_og_description', 'body');
  if ($default_description == '') {
    $default_description = $auto_mapping_default['og:description'];
  }   
  $form['og']['og_tag_importer_og_description'] = array(
    '#title' => 'og:description',
    '#type' => 'select',
    '#options' => $options['text'],
    '#default_value' => $default_description,
  );

  $default_site_name = variable_get('og_tag_importer_og_site_name', 'body');
  $form['og']['og_tag_importer_og_site_name'] = array(
    '#title' => 'og:site_name',
    '#type' => 'select',
    '#options' => $options['text'],
    '#default_value' => $default_site_name,
  );

  return system_settings_form($form);
}




/**
 * Import an url into an image
 *
 * @params 
 * (string) $url        A well formed url string of the image
 *
 * @returns
 * (array) $file        A file array for the field, contains elements such as 
 *                      fid, uri, filename, filemime, uid, status, width, height
 *
 */
function _og_tag_importer_image_import($url) {
  $file = new stdClass();
  $result = drupal_http_request($url);
  // error with fetching the url
  if ($result->code != '200') {
    return;
  }
  $file_name = '';
  $file_name = parse_url($url);
  if (array_key_exists('path', $file_name)) {
    $file_name = pathinfo($file_name['path']);
    $file_name = $file_name['basename'];
  }
  
  $file = file_save_data($result->data, 'public://' . $file_name);  
  if (!empty($file)) {
    $image_info = image_get_info(drupal_realpath($file->uri));
    if (!$image_info) {
      return;
    }
    $file->width = $image_info['width'];
    $file->height = $image_info['height'];
  }

  return (array) $file;
}