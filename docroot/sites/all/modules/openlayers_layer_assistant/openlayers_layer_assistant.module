<?php
module_load_include('inc', 'openlayers_layer_assistant', '/openlayers_layer_assistant.render_factory');
module_load_include('inc', 'openlayers_layer_assistant', '/openlayers_layer_assistant.html_fragment');

/**
 * Implements hook_menu.
 */
function openlayers_layer_assistant_menu(){
  $items['admin/structure/openlayers/layers/assistant'] = array(
    'title' => 'Add using assistant',
    'page callback' => 'openlayers_layer_assistant_intro',
    'access callback' => 'openlayers_layer_assistant_form_access',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/structure/openlayers/layers/assistant/form'] = array(
    'page callback' => 'openlayers_layer_assistant_form_wrapper',
    'access callback' => 'openlayers_layer_assistant_form_access',
    'type' => MENU_CALLBACK,
  );
  // AJAX callback which invokes a form render's callback method to acquire Drupal AJAX commands
  $items['admin/structure/openlayers/layers/assistant/render/callback'] = array(
    'page callback' => 'openlayer_layer_assistant_render_callback',
    'access callback' => 'openlayers_layer_assistant_form_access',
    'type' => MENU_CALLBACK,
  );
  // Search for layers using Open Search providers
  $items['admin/structure/openlayers/layers/assistant/open_search'] = array(
    'page callback' => 'openlayer_layer_assistant_open_search',
    'access callback' => 'openlayers_layer_assistant_form_access',
    'type' => MENU_CALLBACK,
  );
  
  t('Add using assistant');

  return $items;
}

/**
 * Adds styling and interactivity to assistant form.
 */
function openlayers_layer_assistant_include_css_js() {
  $moduleFolder = drupal_get_path('module', 'openlayers_layer_assistant');
  drupal_add_css($moduleFolder.'/openlayers_layer_assistant.css', 'file');
  drupal_add_js($moduleFolder.'/js/openlayers_layer_assistant.filter.js');
}

/**
 * Renders form with checkboxes and layer type list.
 */
function openlayers_layer_assistant_intro() {
  openlayers_layer_assistant_include_css_js();
  drupal_set_title(t("Add Layer Assistant"));
  ob_start();
  // Show form to guide user
  ?>
  <div id="openlayers_layer_assistant_intro">
    <h2><?php echo htmlspecialchars(t('Layer categories')) ?></h2>
    <ul style="list-style-type:none">
      <li>
        <label>
          <input type="checkbox" class="form-checkbox" checked="checked" name="raster">
          <?php echo htmlspecialchars(t('Raster graphics only')) ?>
        </label>
        <div class="description"><?php echo htmlspecialchars(t('Pixel based graphics such as orthophotos or renderings.')) ?></div>
        <ul style="list-style-type:none">
          <li>
            <label class="option">
              <input type="checkbox" class="form-checkbox" value="1" name="raster:untiled">
              <?php echo htmlspecialchars(t('Untiled only')) ?>
            </label>
            <div class="description"><?php echo htmlspecialchars(t('Layers transfered using one big image spanning the entire map.')) ?></div>
          </li>
          <li>
            <label class="option">
              <input type="checkbox" class="form-checkbox" value="1" checked="checked" name="raster:tiled">
              <?php echo htmlspecialchars(t('Tiled only')) ?>
            </label>
            <div class="description"><?php echo htmlspecialchars(t('Layers using small adjacent images to cover the map eventually.')) ?></div>
          </li>
        </ul>
      </li>
      <li>
        <label><input type="checkbox" class="form-checkbox" name="vector"> <?php echo htmlspecialchars(t('Vector graphics only')) ?></label>
        <div class="description"><?php echo htmlspecialchars(t('Vector data for flexible by the client.')) ?></div>
      </li>
    </ul>
    
    <div id="openlayers_layer_assistant_opensearch">
      <h2><?php echo htmlspecialchars(t('Search for publicly accessible layers')) ?></h2>
      <div class="description"><?php echo htmlspecialchars(t('External search providers are available for your selected layer types. You may type a query and take over the proposed layers by clicking their titles.')) ?></div>
      <?php
      $openlayer_layer_assistant_open_search_form = drupal_get_form('openlayer_layer_assistant_open_search_form');
      $openlayer_layer_assistant_open_search_form['openlayers_layer_assistant_opensearch_results'] = array(
        '#type' => 'markup',
        '#markup' => '<ul id="openlayers_layer_assistant_opensearch_results" style="display:none">
          <li><!-- Will be filled with search results by AJAX request --></li>
        </ul>'
      );
      echo drupal_render($openlayer_layer_assistant_open_search_form);
      ?>
      
    </div>
    
    <h2><?php echo htmlspecialchars(t('Add layer of typeâ€¦')) ?></h2>
    <p><?php echo htmlspecialchars(t('Choose one of the following layer types to add a layer. Only the layers matching your criteria are shown.')) ?></p>
    <ul class="admin-list">
      <?php
      $layerTypes = openlayers_layer_types();
      
      foreach($layerTypes as $layerTypeName => $layer){
        if($layerTypeName==="openlayers_layer_type_raw"){
          // Skip over layer that is not meant to be used with GUI
          continue;
        }
        if(method_exists($layerTypeName, 'getLayerCategories')){
          $layerType = openlayers_layer_type_load($layerTypeName);
          $tags = $layerType->getLayerCategories();
        } else {
          $layerTypeTags = array(
            "openlayers_layer_type_wms" => array("raster", "raster:untiled"),
            "openlayers_layer_type_osm" => array("raster", "raster:tiled"),
            "openlayers_layer_type_maptiler" => array("raster", "raster:tiled"),
            "openlayers_layer_type_google" => array("raster", "raster:tiled"),
            "openlayers_layer_type_virtualearth" => array("raster", "raster:tiled"),
            "openlayers_layer_type_xyz" => array("raster", "raster:tiled"),
            "openlayers_layer_type_tms" => array("raster", "raster:tiled"),
            "openlayers_layer_type_geojson" => array("vector"),
            "openlayers_layer_type_yahoo" => array("raster", "raster:tiled"),
            "openlayers_layer_type_cloudmade" => array("raster", "raster:tiled"),
            "openlayers_layer_type_kml" => array("raster", "raster:untiled", "raster:tiled", "vector"),
          );
          if(array_key_exists($layerTypeName, $layerTypeTags)){
            $tags = $layerTypeTags[$layerTypeName];
          } else {
            $tags = NULL;
          }
        }
        
        ?>
        <li class="<?php echo htmlspecialchars(($tags===NULL)?'tags-unknown':''); ?>">
          <?php echo l($layer['title'], 'admin/structure/openlayers/layers/assistant/form/'.rawurlencode($layerTypeName)) ?>
          <?php
          if($tags!==NULL){
            foreach($tags as $tag){
              ?><span class="tag"><?php echo htmlspecialchars($tag) ?></span><?php
            }
          }
          ?>
          <div class="description"><?php
            // Intentionally without escaping because description is allowed to contain HTML
            echo $layer['description'];
          ?></div>
        </li>
        <?php
      }
      ?>
    </ul>
  </div>
  <?php
  $content = ob_get_contents();
  ob_end_clean();
  return $content;
}

/**
 * Generates search form to query Open Search providers for layer definitions
 */
function openlayer_layer_assistant_open_search_form($form, &$form_state) {
  // Set URI to retrieve next search results page (Drupals API does not seem to offer a more elegant way)
  $form['#action'] = '?q='.rawurlencode('admin/structure/openlayers/layers/assistant/open_search/2');
  
  $form['search_keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('Keywords'),
    '#description' => t('Type in some keywords to query search providers.'),
    '#ajax' => array(
      'keypress' => TRUE,
      'event' => 'submit',
      'path' => 'admin/structure/openlayers/layers/assistant/open_search',
    )
  );
  $form['search_button'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#ajax' => array(
      'path' => 'admin/structure/openlayers/layers/assistant/open_search',
    )
  );
  return $form;
}

/**
 * Transforms URI structure to text
 * @param array $urlParts Structure as given by parse_url but query can be an array
 * @return String URI
 */
function openlayers_layer_assistant_build_url(array $urlParts) {
  $uri = '';
  if(array_key_exists('scheme', $urlParts)){
    $uri = $urlParts['scheme'];
  }
  $uri .= '://';
  if(array_key_exists('user', $urlParts)){
    $uri .= $urlParts['user'];
  }
  if(array_key_exists('pass', $urlParts)){
    $uri .= ':'.$urlParts['pass'];
  }
  if(array_key_exists('user', $urlParts)){
    $uri .= '@';
  }
  if(array_key_exists('host', $urlParts)){
    $uri .= $urlParts['host'];
  }
  if(array_key_exists('path', $urlParts)){
    $uri .= $urlParts['path'];
  }
  if(array_key_exists('query', $urlParts)){
    if(is_array($urlParts['query'])){
      $queryStringAccumulator = array();
      foreach($urlParts['query'] as $parameterName => $parameterValue) {
        $queryStringAccumulator[] = rawurlencode($parameterName).'='.rawurlencode($parameterValue);
      }
      $queryString = implode('&', $queryStringAccumulator);
    } else {
      $queryString = $urlParts['query'];
    }
    $uri .= '?'.$queryString;
  }
  return $uri;
}

/**
 * Queries search providers and renders search results
 */
function openlayer_layer_assistant_open_search($startPageDesired=1) {
  $open_search_providers = array('http://www.mapmatters.org/search?search={searchTerms}&bbox={geo:box?}&page={startPage?}&count={count?}&format=rss&projections={mapmatters:projections?}');
  list($form, $form_state) = ajax_get_form();
  
  // TODO Merge results of multiple search providers
  
  $providerURI = $open_search_providers[0];
  // Place users input in query template
  $providerURIParts = parse_url($providerURI);
  if(array_key_exists('query', $providerURIParts)){
    $queryParameters = array();
    parse_str($providerURIParts['query'], $queryParameters);
    foreach($queryParameters as $parameterName => $parameterValue) {
      if($parameterValue==='{searchTerms}'){
        // Past the value as entered by user
        $queryParameters[$parameterName] = $form_state['input']['search_keywords'];
      } else if(mb_ereg('^\{startPage\??\}$', $parameterValue)===1){
        $queryParameters[$parameterName] = $startPageDesired;
      } else if(mb_ereg('^\{mapmatters:projections\??\}$', $parameterValue)===1){
        // Restrict search to EPSG:900913 or EPSG:4326 because that are the only projections currently supported by the OpenLayers module
        $queryParameters[$parameterName] = 'EPSG:900913,EPSG:4326';
      } else if(mb_ereg('\?\}$', $parameterValue)===1){
        unset($queryParameters[$parameterName]);
      }
    }
  } else {
    $queryParameters = array();
  }
  $providerURIParts['query'] = $queryParameters;
  if(!array_key_exists('path', $providerURIParts)){
    $providerURIParts['path'] = '';
  }
  $providerQuery = openlayers_layer_assistant_build_url($providerURIParts);
  
  // Fetch results
  $searchResultDocument = new DomDocument();
  if(@$searchResultDocument->load($providerQuery)===FALSE){
    $libxmlError = libxml_get_last_error();
    throw new Exception(t("Cannot load search result from provider: !message", array(
      '!message' => $libxmlError->message
    )));
  }
  $searchResultXPath = new DomXPath($searchResultDocument);
  $searchResultXPath->registerNamespace('opensearch', 'http://a9.com/-/spec/opensearch/1.1/');
  
  // Transform search results to HTML
  $results = $searchResultXPath->query('/rss/channel/item');
  $searchResultsHtml = '';
  foreach($results as $item) {
    $searchResultsHtml .= openlayer_layer_assistant_open_search_format_result($item);
  }
  if($searchResultsHtml===''){
    $searchResultsHtml = '<li>'.htmlspecialchars(t('No layers have been found.')).'</li>';
  }
  
  // Add button to display more search results
  $totalResults = $searchResultXPath->evaluate('number(/rss/channel/opensearch:totalResults)');
  $itemsPerPage = $searchResultXPath->evaluate('number(/rss/channel/opensearch:itemsPerPage)');
  $startPage = $searchResultXPath->evaluate('number(/rss/channel/opensearch:Query/@startPage)');
  if($totalResults>($itemsPerPage*$startPage)){
    $nextPageLink = array(
      '#type' => 'submit',
      '#value' => t('Show next page'),
      '#attributes' => array(
        'class' => array('use-ajax-submit'),
      )
    );
    $searchResultsHtml .= '<li class="openlayers_layer_assistant_opensearch_results_next_page">'.drupal_render($nextPageLink).'</li>';
  }
  
  drupal_json_output(array(
    ajax_command_invoke('#openlayers_layer_assistant_opensearch_results', 'slideDown'),
    ajax_command_html('#openlayers_layer_assistant_opensearch_results', $searchResultsHtml),
    
    // Set form target for next page
    ajax_command_invoke('#openlayer-layer-assistant-open-search-form', 'attr', array('action', '?q='.rawurlencode('admin/structure/openlayers/layers/assistant/open_search/'.($startPageDesired+2)))),
    
    // Scroll search results into view
    array(
      'command' => 'eval',
      'code' => "jQuery('#openlayers_layer_assistant_opensearch').get(0).scrollIntoView();
        jQuery('html').get(0).scrollTop -= jQuery('#toolbar').height();"
    ),
  ));
}

/**
 * @param DomElement $item A single search result (entry in RSS file)
 * @return String HTML source that represents search result
 */
function openlayer_layer_assistant_open_search_format_result(DomElement $item){
  $searchResultXPath = new DomXPath($item->ownerDocument);
  $title = $searchResultXPath->evaluate('string(title)', $item);
  $server_url = $searchResultXPath->evaluate('string(link)', $item);
  $formDefaults = array(
    'server_url' => $server_url,
  );
  $serverUrlParts = parse_url($server_url);
  if(array_key_exists('query', $serverUrlParts)){
    $queryParameters = array();
    parse_str($serverUrlParts['query'], $queryParameters);
    if(array_key_exists('LAYERS', $queryParameters)){
      $formDefaults['layer_name'] = $queryParameters['LAYERS'];
    }
  }
  $description = $searchResultXPath->evaluate('string(description)', $item);
  
  $createLinkBase = 'admin/structure/openlayers/layers/assistant/form/openlayers_layer_type_wms';
  ob_start();
  ?>
  <li>
    <?php
    $sources = $item->getElementsByTagName('source');
    foreach($sources as $source) {
        // Add a button to open the search result's source
        echo l('More Info', $source->getAttribute('url'), array(
            'attributes' => array(
                'title' => t('Source: !source', array(
                    '!source' => $source->textContent
                )),
                'target' => '_blank',
                'class' => 'buttonLink'
            )
        ));
        // Enclose all images with link to source, too
        $descriptionDoc = new openlayers_layer_assistant_html_fragment($description);
        $images = $descriptionDoc->query('.//img[not(ancestor::a)]');
        foreach($images as $image){
            $imageLink = $image->ownerDocument->createElement('a');
            $imageLink->setAttribute('href', $source->getAttribute('url'));
            $imageLink->setAttribute('target', '_blank');
            $image->parentNode->replaceChild($imageLink, $image);
            $imageLink->appendChild($image);
        }
        $description = $descriptionDoc->getHtml();
    }
    echo l('Create Layer', $createLinkBase, array(
        'query' => $formDefaults,
        'attributes' => array(
            'class' => 'buttonLink'
        )
    ));
    echo l($title, $createLinkBase, array(
      'query' => $formDefaults
    ));
    ?>
    <div class="description"><?php echo $description ?></div>
  </li>
  <?php
  $rendered = ob_get_contents();
  ob_end_clean();
  return $rendered;
}

/**
 * Renders form to create layer.
 */
function openlayers_layer_assistant_form_wrapper($chosenLayerType=NULL) {
  if($chosenLayerType===NULL){
    throw new Exception(t('Layer type not given'));
  } else {
    try {
      $formRender = openlayers_layer_assistant_render_factory::getRender($chosenLayerType);
      
      drupal_set_title(t("Create !name layer", array(
        '!name' => $formRender->title
      )));
      
      ob_start();
      ?>
      <h2><?php echo htmlspecialchars(t('Create layer of type !name', array(
        '!name' => $formRender->title
      ))) ?></h2>
      <p class="description"><?php echo $formRender->description ?></p>
      <?php
      $preceeding = ob_get_contents();
      ob_end_clean();
      $form = drupal_get_form('openlayers_layer_assistant_form', $chosenLayerType, drupal_get_query_parameters());
      return $preceeding.drupal_render($form);
    } catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
}

/**
 * Builds form to create layer.
 * @param string $extra Name of layer type for which to show form
 */
function openlayers_layer_assistant_form($form, &$form_state, $extra, $formDefaults){
  $chosenLayerType = $extra;
  if($chosenLayerType===NULL){
    throw new Exception(t('Layer type not given'));
  } else {
    try {
      $formRender = openlayers_layer_assistant_render_factory::getRender($chosenLayerType);
      foreach($formDefaults as $parameterName => $parameterValue){
        $form[$parameterName]['#default_value'] = $parameterValue;
      }
      return $formRender->render($form);
    } catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
}

/**
 * Creates a new layer form the entries in the form.
 */
function openlayers_layer_assistant_form_submit($form, &$form_state) {
  openlayers_layer_assistant_include_css_js();
  $chosenLayerType = $form_state['build_info']['args'][0];
  
  $formRender = openlayers_layer_assistant_render_factory::getRender($chosenLayerType);
  $formRender->beforeSave($form_state);
  
  // Transform form data so that it maches what ctools expects
  $layerData = new stdClass();
  $layerData->name = $form_state['input']['name'];
  $layerData->title = $form_state['input']['title'];
  $layerData->description = $form_state['input']['description'];
  $layerData->data = $form_state['input'][$chosenLayerType];
  $layerData->data['isBaseLayer'] = $form_state['input']['isBaseLayer'];
  $layerData->data['projection'] = $form_state['input']['projection'];
  foreach ($form_state['input'][$chosenLayerType] as $key => $value) {
    $layerData->data[$key] = $value;
  }
  
  $layer_type = new $chosenLayerType($layerData);
  // Set export_type so that ctools does not crash. The is no useful constant but 0 work with the current implementation of ctools.
  ctools_include('export');
  $layer_type->export_type = 0;
  
  $saveResult = ctools_export_crud_save('openlayers_layers', $layer_type);
  
  if($saveResult===SAVED_NEW || $saveResult===SAVED_UPDATED){
    // Redirect to layer list
    drupal_goto('admin/structure/openlayers/layers/list/');
  } else {
    // Show form again
    $form['#submit'] = array('ctools_export_ui_edit_item_form_submit');
    $form_state['programmed'] =true;
    return ctools_export_ui_switcher_page('openlayers_layers_ctools_export_ui', 'add');
  }
}


function openlayers_layer_assistant_form_access(){
  return true;
}

/**
 * Redirects to callback methods of form renders.
 */
function openlayer_layer_assistant_render_callback() {
  $callbackArguments = func_get_args();
  list($form, $form_state) = ajax_get_form();
  $chosenLayerType = $form_state['build_info']['args'][0];
  $formRender = openlayers_layer_assistant_render_factory::getRender($chosenLayerType);
  drupal_json_output(
    $formRender->callback($form_state['input'], $callbackArguments)
  );
}