<?php

/**
 * @file
 * Main module file for custom sitemap module.
 */

/**
 * Implements hook_help().
 */
function custom_sitemap_help($path, $arg) {
  switch ($path) {
    case 'admin/help#custom_sitemap':
      $output = '<p>' . t('Custom sitemap allows you to upload .xml file to be used as your sitemap.') . '</p>';
      $output .= '<p>' . t('Setup custom sitemap <a href="@url">here</a>.', array('@url' => url('admin/config/search/custom-sitemap'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function custom_sitemap_permission() {
  $permissions['administer custom sitemap'] = array(
    'title' => t('Administer custom sitemap settings.'),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function custom_sitemap_menu() {
  $items['admin/config/search/custom-sitemap'] = array(
    'title' => 'Custom Sitemap',
    'description' => "Setup custom sitemap by uplofish eye crucibleading stiemap file and let search engines find and index pages of your website.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_sitemap_files_list_form'),
    'access arguments' => array('administer custom sitemap'),
    'file' => 'custom_sitemap.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/search/custom-sitemap/%/delete'] = array(
    'description' => "delete custom sitemap added",
    'page callback' => 'custom_sitemap_delete',
    'access arguments' => array('administer custom sitemap'),
    'file' => 'custom_sitemap.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/search/custom-sitemap/%/preview'] = array(
    'description' => "preview custom sitemap",
    'page callback' => 'custom_sitemap_preview',
    'access arguments' => array('administer custom sitemap'),
    'file' => 'custom_sitemap.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['sitemap.xml'] = array(
    'title' => 'Sitemap',
    'page callback' => 'custom_sitemap_display',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Checks if custom sitemaps file directory exists and is writable.
 *
 * @param class $sitemap
 *   A variable holding standard class, defaults to null.
 */
function custom_sitemap_check_folder(stdClass $sitemap = NULL) {
  $folder = custom_sitemap_get_folder($sitemap);
  $result = file_prepare_directory($folder, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  if (!$result) {
    watchdog('file system', 'The directory %folder does not exist or is not writable.', array('%folder' => $folder), WATCHDOG_ERROR);
  }
  return $result;
}

/**
 * Get the folder for custom sitemap files.
 */
function custom_sitemap_get_folder(stdClass $sitemap = NULL) {
  $folder = &drupal_static(__FUNCTION__);
  if (!isset($folder)) {
    $folder = 'custom_sitemap';
  }
  if (!empty($sitemap->smid)) {
    return file_build_uri($folder . '/' . $sitemap->smid);
  }
  else {
    return file_build_uri($folder);
  }
}

/**
 * Fetch all available domains and subdomains.
 *
 * @return domains
 *   Associative array listing all avaliable domains.
 *
 * @todo
 *   This code has to be made more robust to list all domains/subdomains
 * available.
 */
function _custom_sitemap_get_available_domains() {
  $domains = array();
  $default_sitename = trim(variable_get('site_name', 'localhost'));
  $i = 0;
  $exists = _custom_sitemap_if_sitemap_exists($default_sitename);
  if (!$exists) {
    $domains[$i++] = array('n' => $default_sitename);
  }
  $main_domains = _custom_sitemap_read_sites_folder();
  $sub_domains = _custom_sitemap_get_subdomains();
  foreach ($main_domains as $index => $domain) {
    $exists = _custom_sitemap_if_sitemap_exists($domain);
    if (!$exists) {
      $domains[$i++] = array('n' => $domain);
    }
  }
  if (is_array($sub_domains)) {
    foreach ($sub_domains as $key => $sub_domain) {
      $exists = _custom_sitemap_if_sitemap_exists($sub_domain, 'subdomain');
      if (!$exists) {
        $domains[$i++] = $sub_domain;
      }
    }
  }
  return $domains;
}

/**
 * Retrieves all domain folders within sites folder.
 *
 * @return list_domain
 *   Array listing all domain folder name within sites folder.
 */
function _custom_sitemap_read_sites_folder() {
  global $base_root;
  $list_domain = array();
  $dir = drupal_realpath(file_build_uri(''));
  $tmp = explode('/default', $dir);
  $dir = $tmp[0];
  if (is_dir($dir)) {
    if ($handler = opendir($dir)) {
      while (($sub = readdir($handler)) !== FALSE) {
        if ($sub != "." && $sub != ".." && $sub != "Thumb.db" && $sub != "Thumbs.db" && $sub != 'default' && $sub != 'all') {
          if (is_dir($dir . "/" . $sub)) {
            $list_domain[] = $sub;
          }
        }
      }
      closedir($handler);
    }
  }
  return $list_domain;
}

/**
 * Get sub-domains created in case of domain module.
 */
function _custom_sitemap_get_subdomains() {
  $default_sitename = trim(variable_get('site_name', ''));
  $sub_domain = array();
  $domain_used = db_query("SELECT COUNT(name) FROM {system} WHERE type = :module AND name = :name AND status = :status",
    array(
      ':module' => 'module',
      ':name' => 'domain',
      ':status' => 1,
    )
  )->fetchField();

  if ($domain_used) {
    $query = db_select('domain');
    $query->fields('domain', array('subdomain', 'sitename', 'domain_id'));
    $res = $query->execute();
    while ($row = $res->fetchObject()) {
      $tmp_domain = $row->subdomain;
      $tmp_sitename = $row->sitename;
      $domain_id = $row->domain_id;
      if ($tmp_sitename != $default_sitename) {
        $sub_domain[] = array($domain_id => $tmp_domain);
      }
    }
  }
  return $sub_domain;
}

/**
 * For custom sitemap operation link.
 */
function custom_sitemap_operation_link($url, $options = array()) {
  static $destination;
  if (!isset($destination)) {
    $destination = drupal_get_destination();
  }
  $link = array_merge(array('href' => $url), $options);
  if (!isset($link['title'])) {
    $item = menu_get_item($url);
    $link['title'] = $item['title'];
  }
  $link = array_merge($link, array('query' => $destination));
  return $link;
}

/**
 * Implements hook_modules_enabled().
 */
function custom_sitemap_modules_enabled(array $modules) {
  cache_clear_all('custom_sitemap:', 'cache', TRUE);
}

/**
 * Implements hook_modules_disabled().
 */
function custom_sitemap_modules_disabled(array $modules) {
  cache_clear_all('custom_sitemap:', 'cache', TRUE);
}

/**
 * Ascertain if sitemap added for a domain.
 */
function _custom_sitemap_if_sitemap_exists($domain, $check_for = 'sites') {
  $domain_name = $domain;
  $domain_key = 0;
  if (is_array($domain)) {
    $domain_name = $domain[key($domain)];
    $domain_key = key($domain);
  }
  if ($check_for == 'sites') {
    return $exists = db_query("SELECT count(*) FROM {custom_sitemap} WHERE domain = :domain", array(':domain' => $domain_name))->fetchField();
  }
  else {
    return $exists = db_query("SELECT count(*) FROM {custom_sitemap} WHERE domain = :domain AND subdomain_id = :dkey", array(':domain' => $domain_name, ':dkey' => $domain_key))->fetchField();
  }
}

/**
 * Display sitemap for current domain.
 */
function custom_sitemap_display() {
  global $base_root;
  $default_sitename = trim(variable_get('site_name', 'localhost'));
  if (strstr($base_root, $default_sitename) !== FALSE || strpos($base_root, 'localhost') !== FALSE) {
    $sitemap_exists = _custom_sitemap_if_sitemap_exists($default_sitename);
    if ($sitemap_exists) {
      $rs = db_select('custom_sitemap')
      ->fields('custom_sitemap', array('filename', 'domain'))
      ->condition('domain', "$default_sitename")
      ->execute();
      $res = $rs->fetchObject();
      $filename = $res->filename;
      $domain = $res->domain;
      $file_uri = drupal_realpath(file_build_uri('custom_sitemap') . '/' . $filename);
      header('Content-type: text/xml');
      echo file_get_contents($file_uri);
    }
    else {
      return t("Sitemap not available for this domain. <a href=@url> Click here to add one now</a>.", array('@url' => url('admin/config/search/custom-sitemap')));
    }
  }
  else {
    $rs = db_select('custom_sitemap')
    ->fields('custom_sitemap', array('filename', 'domain'))
    ->execute();
    $cs_display_file = '';
    while ($res = $rs->fetchObject()) {
      $filename = $res->filename;
      $domain = trim($res->domain);
      if (strpos($base_root, $domain) !== FALSE) {
        $cs_display_file = $filename;
        break;
      }
    }
    if ($cs_display_file != '') {
      $file_uri = drupal_realpath(file_build_uri('custom_sitemap') . '/' . $cs_display_file);
      header('Content-type: text/xml');
      echo file_get_contents($file_uri);
    }
    else {
      return t("Sitemap not available for this domain. <a href=@url> Click here to add one now</a>.", array('@url' => url('admin/config/search/custom-sitemap')));
    }
  }
}

/**
 * Checks if file or folder is writable.
 *
 * @param string $path
 *   File directory path as string.
 *
 * @return bool
 *   Returns boolean value (true/false).
 *
 * is_writable() function is not used as it has few known bugs
 */
function _custom_sitemap_drupal_is_writable($path) {
  if ($path{strlen($path) - 1} == '/') {
    return _custom_sitemap_drupal_is_writable($path . uniqid(mt_rand()) . '.tmp');
  }
  elseif (is_dir($path)) {
    return _custom_sitemap_drupal_is_writable($path . '/' . uniqid(mt_rand()) . '.tmp');
  }
  $rm = file_exists($path);
  $f = @fopen($path, 'a');
  if ($f === FALSE) {
    return FALSE;
  }
  fclose($f);
  if (!$rm) {
    drupal_unlink($path);
  }
  return TRUE;
}
