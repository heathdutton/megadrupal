<?php

/**
 * @file
 * Handles install and uninstall functions for custom sitemap module.
 */

/**
 * Implements hook_enable().
 */
function custom_sitemap_enable() {
  custom_sitemap_check_folder();
}

/**
 * Implements hook_schema().
 */
function custom_sitemap_schema() {
  $schema['custom_sitemap'] = array(
    'description' => 'The base table for custom sitemap files.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key; a unique id for the uploaded custom sitemap file.',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'domain' => array(
        'description' => 'Domain against which file is to be associated. Useful in case of multidomain setup',
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ),
      'filename' => array(
        'description' => 'filename as saved on to the server',
        'type' => 'varchar',
        'length' => 256,
        'default' => '',
      ),
      'relative_filename' => array(
        'description' => 'Filename shown to the user',
        'type' => 'varchar',
        'length' => 256,
        'default' => '',
      ),
      'uploaded_on' => array(
        'description' => 'File uploaded on this date',
        'type' => 'int',
        'length' => 11,
        'not_null' => TRUE,
      ),
      'subdomain_id' => array(
        'description' => 'Holds ID for mapping to domain table',
        'type' => 'int',
        'length' => 11,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function custom_sitemap_install() {
  drupal_load('module', 'custom_sitemap');
}

/**
 * Implements hook_uninstall().
 */
function custom_sitemap_uninstall() {
  custom_sitemap_clear_folder(NULL, TRUE);
}

/**
 * Removes all sitemap file and delete the folder.
 *
 * @param class $sitemap
 *   A variable holding standard class.
 *
 * @param bool $delete
 *   Variable indicating whether to delete folder permanently.
 */
function custom_sitemap_clear_folder(stdClass $sitemap = NULL, $delete = FALSE) {
  $folder = variable_get('custom_sitemap', 'custom_sitemap');
  return custom_sitemap_delete_recursive($folder, $delete);
}

/**
 * Deletes all files and directories in the specified filepath recursively.
 *
 * If the specified path is a file then it will be passed to
 * file_unmanaged_delete().
 *
 * Note that this only deletes visible files with write permission.
 *
 * @param string $folder_pth
 *   A string containing either an URI or a file or directory path.
 *
 * @param bool $delete_permanently
 *   A boolean value indicating wheteher to delete folder permanently or not.
 */
function custom_sitemap_delete_recursive($folder_pth, $delete_permanently = FALSE) {
  $folder_pth = drupal_realpath($folder_pth);
  if (is_dir($folder_pth)) {
    $dir = getdir($folder_pth);
    while (($cs_file = $dir->read()) !== FALSE) {
      $cs_file_path = $folder_pth . '/' . $cs_file;
      file_unmanaged_delete_recursive($cs_file_path, TRUE);
    }
    $dir->close();
    return $delete_permanently ? drupal_rmdir($folder_pth) : TRUE;
  }
}
