<?php

define('COMMERCE_FIRSTDATA_LIVESERVER', 'https://secure.linkpt.net:1129/');
define('COMMERCE_FIRSTDATA_TESTSERVER', 'https://staging.linkpt.net:1129/');
define('COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD', 'commerce_firstdata_billing_phone');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_firstdata_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['firstdata_cc'] = array(
    'title' => t('First Data - Credit Card'),
    'short_title' => t('First Data CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates First Data Global Gateway card not present CC transactions.'),
  );

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_firstdata_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/firstdata-cc-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_firstdata_cc_capture_form', 3, 5),
    'access callback' => 'commerce_firstdata_cc_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_firstdata.admin.inc',
  );
  
  // Add a menu item for voiding transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/firstdata-cc-void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_firstdata_cc_void_form', 3, 5),
    'access callback' => 'commerce_firstdata_cc_void_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_firstdata.admin.inc',
  );
  
  // Add a menu item for crediting funds from a transaction.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/firstdata-cc-credit'] = array(
    'title' => 'Credit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_firstdata_cc_credit_form', 3, 5),
    'access callback' => 'commerce_firstdata_cc_credit_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_firstdata.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form for First Data
 *   credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_firstdata_cc_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for First Data or isn't awaiting capture.
  if ($transaction->payment_method != 'firstdata_cc' || strtoupper($transaction->remote_status) != commerce_firstdata_transaction_map(COMMERCE_CREDIT_AUTH_ONLY)) {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determines access to the void form for First Data
 *   credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating void access.
 */
function commerce_firstdata_cc_void_access($order, $transaction) {
  // Return FALSE if the transaction isn't for First Data or can't be voided.
  if ($transaction->payment_method != 'firstdata_cc' || (strtoupper($transaction->remote_status) != commerce_firstdata_transaction_map(COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE) && $transaction->remote_status != commerce_firstdata_transaction_map(COMMERCE_CREDIT_AUTH_CAPTURE))) {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $order, $transaction);
}

/**
 * Determines access to the credit (return funds) form for First Data
 *   credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating void access.
 */
function commerce_firstdata_cc_credit_access($order, $transaction) {
  // list of remote statuses we won't accept
  $invalid_statuses = array(
    COMMERCE_CREDIT_AUTH_ONLY,
    COMMERCE_CREDIT_VOID,
  );
  $invalid_statuses = array_map('commerce_firstdata_transaction_map', $invalid_statuses);

  // Return FALSE if the transaction isn't for First Data or can't be credited.
  if ($transaction->payment_method != 'firstdata_cc' || in_array($transaction->remote_status,$invalid_statuses)) {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }
  
  // Return FALSE is there are no funds left to return
  if ($transaction->amount <= 0) {
    return FALSE;
  }

  // Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $order, $transaction);
}

/**
 * Implementation of hook_enable()
 **/
function commerce_firstdata_enable() {
  // add phone number field to billing profile type
  commerce_firstdata_add_phone_field();
  
  // tell user a new field has been added
  $message_text = 'Commerce First Data added a new field to your "billing" customer profile for a phone number. '.
                  'If you already have one enabled, you must !disablelink now to avoid customer '.
                  'confusion during checkout.';
  $message = t($message_text, array('!disablelink' => l('disable one', 'admin/commerce/customer-profiles/types/billing/fields')));
  drupal_set_message($message, 'warning');
}

/**
 * commerce_customer module creates a customer profile type called "billing".
 * This profile type only has the field "addressfield", which does not include
 * a phone number. First Data requires a phone number for transactions, so we
 * create our own.
 **/
function commerce_firstdata_add_phone_field() {
  // Look for or add a billing phone number field to add to billing customer profile
  $field = field_info_field(COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD);
  $instance = field_info_instance('commerce_customer_profile', COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD, 'billing');

  if (empty($field)) {
    $field = array(
      'field_name' => COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD,
      'type' => 'text',
      'cardinality' => 1,
      'entity_types' => array('commerce_customer_profile'),
      'translatable' => FALSE,
      'locked' => FALSE,
    );

    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD,
      'entity_type' => 'commerce_customer_profile',
      'bundle' => 'billing',
      'label' => t('Phone Number'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'settings' => array(),
      'display' => array(),
    );

    // Set the default display formatters for various view modes.
    foreach (array('default', 'customer', 'administrator') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'text_default',
        'weight' => -10,
      );
    }

    field_create_instance($instance);
  }
}


/**
 * Payment method callback: settings form.
 */
function firstdata_cc_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'store_number' => '',
    'pem_file' => '',
    'txn_mode' => 'PRODUCTION',
    'txn_server' => 'LIVE',
    'order_prefix' => '',
    'phone_field' => COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD,
  );
  
  // Define form
  $form['store_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Store Number'),
    '#description' => t('Enter your 10 digit Store Number assigned to you by Linkpoint.'),
    '#default_value' => $settings['store_number'],
    '#required' => TRUE,
  );
  $form['pem_file'] = array(
    '#type' => 'textfield',
    '#title' => t('PEM File'),
    '#description' => t('Enter the path to the PEM file you uploaded, relative to your web root. You must have this for the module to work. Get this by logging in to Linkpoint Central > Support > Download Center. <b>It is recommended to place this file outside of your web root to make it inaccessible by visitors.</b>'),
    '#default_value' => $settings['pem_file'],
    '#required' => TRUE,
    '#element_validate' => array('commerce_firstdata_validate_fileloc'),
  );
  $form['txn_mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction mode'),
    '#description' => t('Transaction mode used for processing orders. You can use these options to test certain responses from the live server.  If you need to do extensive testing you should create a test account at First Data and select the Test server below.'),
    '#options' => array(
      'LIVE' => t('Production Mode'),
      'GOOD' => t('Test Approved Response'),
      'DECLINE' => t('Test Decline Response'),
      'DUPLICATE' => t('Test Duplicate Response'),
    ),
    '#default_value' => $settings['txn_mode'],
  );
  $form['txn_server'] = array(
    '#type' => 'select',
    '#title' => t('Transaction server'),
    '#description' => t('Unless you have set up a test account at First Data and are doing extensive testing this should be Live.'),
    '#options' => array(
      'LIVE' => t('Live Server'),
      'TEST' => t('Test Server'),
    ),
    '#default_value' => $settings['txn_server'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );
  $form['order_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Order Prefix'),
    '#default_value' => $settings['order_prefix'],
    '#description' => t('Enter a prefix (numbers, letters, dashes and underscores) to prepend to the ordernumber before sending to First Data. Useful if you have multiple websites using the same merchant account, and need to pass in a unique order id to this store. The order ID in First Data\'s system will be rendered as <br/>[prefix][commerce order id]-[unix timestamp]. Keep in mind the order ID cannot exceed 100 characters.'),
  );
  
  // Collect fields that are currently part of billing field bundle
  $billing_fields = field_info_instances('commerce_customer_profile', 'billing');
  $phone_field_options = array();
  foreach ($billing_fields as $field_key => $field_info) {
    $phone_field_options[$field_key] = $field_info['label'];
  }
  $form['phone_field'] = array(
    '#type' => 'select',
    '#title' => t('Billing phone number field'),
    '#description' => t('First Data requires a billing phone number be collected and passed to them. Drupal Commerce does not come shipped with one by default, but this module does. You can add your own if you\'d like, or just use the one defined and added for you. You can manage the fields for the customer billing profile type !here.', array('!here' => l('here', 'admin/commerce/customer-profiles/types/billing/fields'))),
    '#default_value' => $settings['phone_field'],
    '#options' => $phone_field_options,
  );
    
  return $form;
}

/**
 * Small validate function to ensure that the PEM file exists
 **/
function commerce_firstdata_validate_fileloc($element, &$form_state, $form) {
  if (!empty($element['#value']) && !is_file($element['#value'])) {
    form_error($element, t('@pemfile is not a valid file or directory', array('@pemfile' => $element['#value'])));
  }
}

/**
 * Payment method callback: checkout form.
 */
function firstdata_cc_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Payment method callback: checkout form validation.
 */
function firstdata_cc_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function firstdata_cc_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Generate a unique order ID for this transaction - required by First Data
  $unique_oid = $payment_method['settings']['order_prefix'] . $order->order_number . '-' . time();

  // Build transaction and send to Linkpoint
  $transaction_xml = "<order>";
  $transaction_xml .= commerce_firstdata_xml_merchantinfo($payment_method);
  $transaction_xml .= commerce_firstdata_xml_transcationdetails($order, $unique_oid);
  $transaction_xml .= commerce_firstdata_xml_orderoptions($payment_method, $payment_method['settings']['txn_type']);
  $transaction_xml .= commerce_firstdata_xml_payment(commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']));
  // Only need this info if it is a first time authorization or authorization and capture
  if ($payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_ONLY || $payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_CAPTURE) {
    $transaction_xml .= commerce_firstdata_xml_billing($order, $payment_method);
    $transaction_xml .= commerce_firstdata_xml_creditcard($pane_values);
  }
  $transaction_xml .= "</order>";
  
  $transaction_xml = commerce_firstdata_clean_xml($transaction_xml);
  
  // Send the transcation to First Data
  $transaction_result = firstdata_commerce_send_transaction($transaction_xml, $payment_method);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('firstdata_cc', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $transaction_result['order_num'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $transaction_result['payload'];
  $transaction->remote_status = commerce_firstdata_transaction_map($payment_method['settings']['txn_type']);
  $transaction->message = commerce_firstdata_construct_log($transaction_result, $payment_method);
  if ($transaction_result['approved'] != 'APPROVED') {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  } else {
    switch ($payment_method['settings']['txn_type']) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;
      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }
  
  // Save transaction to database
  commerce_payment_transaction_save($transaction);

  // If the payment failed, tell the user why
  if ($transaction_result['approved'] != 'APPROVED') {
    // transaction did not pass due to cURL error
    if ($transaction_result['approved'] == 'ERROR') {
      drupal_set_message(t('Could not connect to payment gateway. Error: @error',array('@error' => $transaction_result['error'])));
    } else {
    // transcation did not pass for other reasons (card declined)
      drupal_set_message(t('Credit card payment declined: @text', array('@text' => $transaction_result['error'])));
    }
    return false;
  }
}

/**
 * Initiate a cURL session and send over the pre-built XML to First Data for processing
 **/
function firstdata_commerce_send_transaction($xml, $payment_method) {
  // Open the cURL session
  $ch = curl_init();

  // Set the cURL options
  // Determine the posting URL
  if ($payment_method['settings']['txn_server'] == 'TEST') {
    curl_setopt($ch, CURLOPT_URL, COMMERCE_FIRSTDATA_TESTSERVER);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); // test server does not support
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); // these two params
  } else {
    curl_setopt($ch, CURLOPT_URL, COMMERCE_FIRSTDATA_LIVESERVER);
  }
  curl_setopt($ch, CURLOPT_VERBOSE, 1);         // Present verbose error output, to standard error
  curl_setopt($ch, CURLOPT_POST, 1);            // POST Request
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);   // Data to send in the POST request
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  // Puts output to a returned string
  curl_setopt($ch, CURLOPT_SSLCERT, $payment_method['settings']['pem_file']);     // The public cert key generated by First Data

  // Execute the cURL session
  $result = curl_exec($ch);

  // There was a cURL error
  if ($result === false) {
    $response['approved'] = 'ERROR';
    $response['error'] = curl_error($ch);
    return $response;
  }

  // Close cURL session
  curl_close($ch);

  // No cURL error, format the output from XML into an array
  preg_match_all ("/<(.*?)>(.*?)\</", $result, $outarr, PREG_SET_ORDER);
  $n = 0;
  while (isset($outarr[$n])) {
    $retarr[$outarr[$n][1]] = strip_tags($outarr[$n][0]);
    $n++;
  }

  $response = array(
    'approved' => $retarr['r_approved'],
    'error' => $retarr['r_error'],
    'approvalcode' => $retarr['r_code'],
    'avs' => trim(substr($retarr['r_avs'], 0, 2)),
    'cvv' => trim(substr($retarr['r_avs'], -1)),
    'response_message' => $retarr['r_message'],
    'order_num' => $retarr['r_ordernum'],
    'payload' => $retarr,
  );

  return $response;
}

/**
 * Construct log message
 **/
function commerce_firstdata_construct_log($transaction_result, $payment_method) {
  $message = array();
  // Build log text and add to logs
  $message[] = t('Original transaction type: <b>@txn_type</b>', array('@txn_type' => commerce_firstdata_transaction_map($payment_method['settings']['txn_type'])));
  if (!empty($transaction_result['approved'])) {
    $message[] = t('Result: <b>@txn_result</b>', array('@txn_result' => $transaction_result['approved']));
  }
  if ($payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_ONLY || $payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_CAPTURE) {
    if (!empty($transaction_result['avs'])) {
      $message[] = t('AVS: @avs', array('@avs' => commerce_firstdata_avs_map($transaction_result['avs'])));
    }
    if (!empty($transaction_result['cvv'])) {
      $message[] = t('CVV: @cvv', array('@cvv' => commerce_firstdata_cvv_map($transaction_result['cvv'])));
    }
  }
  // Implode message into one string
  return implode('<br />', $message);
}

/**
 * Construct XML merchant information entity
 **/
function commerce_firstdata_xml_merchantinfo($payment_method) {
  // Which server to post to?
  if ($payment_method['settings']['txn_server'] == 'TEST') {
    $host = "staging.linkpt.net";
  } else {
    $host = "secure.linkpt.net";
  }

  $xml = '';
  $xml .="<merchantinfo>";
    $xml .="<configfile>" . $payment_method['settings']['store_number'] . "</configfile>";
    $xml .="<keyfile>" . $payment_method['settings']['pem_file'] . "</keyfile>";
    $xml .="<host>". $host ."</host>";
    $xml .="<port>1129</port>";
  $xml .="</merchantinfo>";
  return $xml;
}

/**
 * Construct XML transaction details entity
 **/
function commerce_firstdata_xml_transcationdetails($order, $unique_oid) {
  $xml = '';
  $xml .="<transactiondetails>";
    $xml .="<transactionorigin>ECI</transactionorigin>";
    $xml .="<oid>" . $unique_oid . "</oid>";
    $xml .="<invoice_number>" . $order->order_number . "</invoice_number>";
    $xml .="<ip>" . ip_address() . "</ip>";
  $xml .="</transactiondetails>";
  return $xml;
}

/**
 * Construct XML order options entity
 **/
function commerce_firstdata_xml_orderoptions($payment_method, $transaction_type) {
  $xml = '';
  $xml .="<orderoptions>";
    $xml .="<ordertype>" . commerce_firstdata_transaction_map($transaction_type) . "</ordertype>";
    $xml .="<result>" . $payment_method['settings']['txn_mode'] . "</result>";
  $xml .="</orderoptions>";
  return $xml;
}

/**
 * Construct XML payment entity
 **/
function commerce_firstdata_xml_payment($amount) {
  $xml = '';
  $xml .="<payment>";
    $xml .="<chargetotal>".$amount."</chargetotal>";
  $xml .="</payment>";
  return $xml;
}

/**
 * Construct XML billing entity
 **/
function commerce_firstdata_xml_billing($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Get billing address and phone number data entered
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  $billing_phone = $order_wrapper->commerce_customer_billing->$payment_method['settings']['phone_field']->value();
  
  $xml = '';
  $xml .="<billing>";
    if (empty($billing_address['first_name']) && empty($billing_address['last_name'])) {
      $billing_name = $billing_address['name_line'];
    } else {
      $billing_name = $billing_address['first_name'].$billing_address['last_name'];
    }
    $xml .="<name>" . substr($billing_name,0,96) . "</name>";
    $xml .="<company>" . substr($billing_address['organisation_name'], 0, 96) . "</company>";
    $xml .="<address1>" . substr($billing_address['thoroughfare'], 0, 96) . "</address1>";
    $xml .="<addrnum>" . substr($billing_address['thoroughfare'], 0, 96) . "</addrnum>";
    $xml .="<city>" . substr($billing_address['locality'], 0, 96) . "</city>";
    $xml .="<state>" . substr($billing_address['administrative_area'], 0, 96) . "</state>";
    $xml .="<zip>" . substr($billing_address['postal_code'],0,5) . "</zip>";
    $xml .="<country>" . $billing_address['country'] . "</country>";
    $xml .="<phone>". $billing_phone ."</phone>";
    $xml .="<email>" . substr($order->mail, 0, 64) . "</email>";
  $xml .="</billing>";
  return $xml;
}

/**
 * Construct XML credit card entity
 **/
function commerce_firstdata_xml_creditcard($pane_values) {
  $xml = '';
  $xml .="<creditcard>";
    $xml .="<cardnumber>" . substr($pane_values['credit_card']['number'],0,48) . "</cardnumber>";
    $xml .="<cardexpmonth>" . substr($pane_values['credit_card']['exp_month'],0,2) . "</cardexpmonth>";
    $xml .="<cardexpyear>" . substr($pane_values['credit_card']['exp_year'], 2, 2) . "</cardexpyear> ";
    if (!empty($order->payment_details['cc_cvv'])) {
      $xml .="<cvmvalue>" . substr($pane_values['credit_card']['code'], 0, 4) . "</cvmvalue>";
      $xml .="<cvmindicator>provided</cvmindicator>";
    }
  $xml .="</creditcard>";
  return $xml;
}

/**
 * Associate Commerce transaction types with their equivalents with First Data
 **/
function commerce_firstdata_transaction_map($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
      return 'PREAUTH';
    case COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'POSTAUTH';
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return 'SALE';
    case COMMERCE_CREDIT_REFERENCE_SET:
    case COMMERCE_CREDIT_REFERENCE_TXN:
    case COMMERCE_CREDIT_REFERENCE_REMOVE:
    case COMMERCE_CREDIT_REFERENCE_CREDIT:
      return NULL;
    case COMMERCE_CREDIT_CREDIT:
      return 'CREDIT';
    case COMMERCE_CREDIT_VOID:
      return 'VOID';
  }
}

/**
 * Make AVS codes readable
 **/
function commerce_firstdata_avs_map($code) {
  $text = '';
  switch($code) {
    case 'YY':
      $text = t('Address and ZIP Match (YY)');
      break;
    case 'NY':
      $text = t('Only zip matches (NY)');
      break;
    case 'YN':
      $text = t('Only address matches (YN)');
      break;
    case 'XX':
      $text = t('AVS requested, but not received (XX)');
      break;
    default:
      $text = t('Unknown');
  }
  return $text;
}

/**
 * Make CVV codes readable
 **/
function commerce_firstdata_cvv_map($code) {
  $text = '';
  switch ($code) {
    case 'M':
      $text = t('Card code matches (M)');
      break;
    case 'N':
      $text = t('Card code does not match (N)');
      break;
    case 'P':
      $text = t('Not Processed (P)');
      break;
    case 'S':
      $text = t('Not present on card (S)');
      break;
    case 'U':
      $text = t('Issuer unable to process request (U)');
      break;
    case 'X':
      $text = t('No response received from CC association (X)');
      break;
    default:
      $text = t('Unknown');
  }
  return $text;
}

/**
 * Clean up the XML
 **/
function commerce_firstdata_clean_xml($xml) {
  /* remove ampersand and appostrophes from text */
  $xml = str_replace("&", "and", $xml);
  $xml = str_replace("'", " ", $xml);
  return $xml;
}
