<?php
/**
 * @file
 * Module file for Responsive Dropdown Menus
 */

/**
 * Implements hook_page_build().
 *
 * Attach CSS/JS for module to the render array.
 *
 * This way we allow other developers to disable the module's CSS or JS via
 * hook_page_alter() and not css/js_alter or other black magic.
 */
function responsive_dropdown_menus_page_build(&$page) {

  // Initiate what will be our settings array.
  $js_settings = array('responsive_dropdown_menus' => array());

  // Populate JS settings with menu machine names and display names.
  $menus = menu_get_menus();
  foreach ($menus as $name => $title) {
    $js_settings['responsive_dropdown_menus'][$name] = $title;
  }

  // Check if the CSS was disabled before adding it to render array.
  if (!variable_get('responsive_dropdown_menus_disable_css', false)) {
    $page['content']['#attached']['css'][] = array(
      'data' => drupal_get_path('module', 'responsive_dropdown_menus') . '/theme/responsive-dropdown-menus.css',
    );
  }

  // Add JavaScript and settings.
  $page['content']['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'responsive_dropdown_menus') . '/theme/responsive-dropdown-menus.js',
  );
  $page['content']['#attached']['js'][] = array(
    'data' => $js_settings,
    'type' => 'setting',
  );
}

/**
 * Implements hook_block_info().
 */
function responsive_dropdown_menus_block_info() {
  $menus = menu_get_menus();

  $blocks = array();
  foreach ($menus as $name => $title) {
    $blocks[$name]['info'] = t('Responsive Menu') . ': ' . check_plain($title);
    $blocks[$name]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function responsive_dropdown_menus_block_configure($delta = '') {
  $form = array();

  $form['responsive_dropdown_menus'] = array(
    '#type' => 'fieldset',
    '#title' => t('Responsive Dropdown Menus'),
  );
  $form['responsive_dropdown_menus']['max_depth'] = array(
    '#type' => 'select',
    '#title' => t('Maximum depth'),
    '#description' => t('The maximum depth of menu item tiers to display.'),
    '#default_value' => variable_get('responsive_dropdown_menus_depth_' . $delta, 3),
    '#options' => array(
      2 => t('Two'),
      3 => t('Three'),
    ),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function responsive_dropdown_menus_block_save($delta = '', $edit = array()) {
  if (!empty($edit['max_depth'])) {
    variable_set('responsive_dropdown_menus_depth_' . $delta, $edit['max_depth']);
  }
}

/**
 * Implements hook_block_view().
 */
function responsive_dropdown_menus_block_view($delta = '') {
  $menus = menu_get_menus();
  $data['subject'] = check_plain($menus[$delta]);

  // Get tree data for menu. Depths depends on block settings (defaults to 3).
  $max_depth = variable_get('responsive_dropdown_menus_depth_' . $delta, 3);
  $menu = menu_tree_all_data($delta, NULL, $max_depth);

  // Return our HTML.
  $data['content']['#markup'] = responsive_dropdown_menus_theme_dropdown_menu($menu, $delta);

  // Add contextual links for this block.
  if (!empty($data['content'])) {
    $data['content']['#contextual_links']['menu'] = array('admin/structure/menu/manage', array($delta));
  }
  return $data;
}

/**
 * This function will render and return the output for the main menu.
 *
 * @param array $args
 *   Array of theme function parameters
 *   - $inline: If true, the class 'inline' will be added.
 */
function responsive_dropdown_menus_main_menu($args) {
  // It's not inline by default.
  $inline = isset($args['inline']) ? $args['inline'] : FALSE;

  // Get tree data for main menu, three tiers deep.
  $menu = menu_tree_all_data(variable_get('menu_main_links_source', 'main-menu'), 3);

  // Return our HTML.
  return responsive_dropdown_menus_theme_dropdown_menu($menu, 'main-menu', $inline);
}

/**
 * Builds cycles through the provided menu tree to create a maximum of three tiered dropdown menus.
 *
 * @param array $menu_tree
 *   The menu tree to be rendered
 * @param string $menu_delta
 *   Menu's delta, which is also applied as the main <ul>'s ID
 * @param bool $menu_inline
 *   If true, the class 'inline' will be added.
 *
 * @return string
 */
function responsive_dropdown_menus_theme_dropdown_menu($menu_tree, $menu_delta, $menu_inline = FALSE) {

  // Remove hidden links.
  responsive_dropdown_menus_remove_hidden($menu_tree);

  // These are the classes which will be assigned to the root <ul>.
  $menu_classes = array(
    $menu_delta,
    'responsive-menu',
    'links',
  );
  if ($menu_inline) {
    $menu_classes[] = 'inline';
  }

  $menu_tree_list = responsive_dropdown_menus_build_menu($menu_tree);

  $menu_tree_rendered = theme('item_list__responsive_dropdown_menu', array(
    'items' => $menu_tree_list,
    'attributes' => array(),
    'list_attributes' => array('id' => $menu_delta, 'class' => $menu_classes),
  ));
  return $menu_tree_rendered;
}

function responsive_dropdown_menus_build_menu($menu_tree_data, &$parent = null){
  $menu_tree_list = array();

  // Recurse trough the menu data tree
  foreach ($menu_tree_data as $menu_item_key => $link) {
    $attributes = isset($link['link']['options']) ? $link['link']['options'] : array();

    // Menu item classes
    $classes = array(
      'menu-item',
    );
    // Sub menu classes initiate
    $sub_menu_classes = array();

    if ($link['link']['href'] == $_GET['q']){
      $classes[] = 'active-trail';
      $classes[] = 'active';
      $parent['class'][] = 'active-trail';
    }

    if ($link['below']) {
      $classes[] = 'menu-parent';
      $sub_menu_classes[] = 'sub-menu';
    }

    if (!$link['link']['p2']) {
      $classes[] = 'menu-item-primary';
      $sub_menu_classes[] = 'tier-two';
    }
    elseif ($link['link']['p2'] && !$link['link']['p3']) {
      $classes[] = 'menu-item-secondary';
      $sub_menu_classes[] = 'tier-three';
    }
    else {
      $classes[] = 'menu-item-tertiary';
    }

    // Add the item to the list.
    $menu_tree_list[$menu_item_key] = array(
      'data' => l($link['link']['title'], $link['link']['href'], $attributes),
      'id' => 'menu-item-' . $link['link']['mlid'],
      'class' => $classes,
      'list_attributes' => array(
        'class' => $sub_menu_classes,
      ),
    );

    if ($link['below']) {
      $menu_tree_list[$menu_item_key]['children'] = responsive_dropdown_menus_build_menu($link['below'],$menu_tree_list[$menu_item_key]);
    }
  }

  return $menu_tree_list;
}

/**
 * Alters a menu tree array to remove any disabled menu items
 *
 * @param array $menu_tree
 *   Drupal menu tree array
 */
function responsive_dropdown_menus_remove_hidden(&$menu_tree_data) {
  foreach ($menu_tree_data as $menu_item_key => &$menu_item) {
    // If the top level link is disabled, remove it before digging deeper.
    if ($menu_item['link']['hidden']) {
      unset($menu_tree_data[$menu_item_key]);
      // We are done here.
      continue;
    }
    // Run disabled menu item check for all child items
    if ($menu_item['below']) {
      responsive_dropdown_menus_remove_hidden($menu_item['below']);
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function responsive_dropdown_menus_theme($existing, $type, $theme, $path) {
  return array(
    // Override the main menu theme.
    'links__system_main_menu' => array(
      'variables' => array('inline' => FALSE),
      'function' => 'responsive_dropdown_menus_main_menu',
    ),
    // Modules theme_item_list implementation
    'item_list__responsive_dropdown_menu' => array(
      'variables' => array(),
      'function' => 'responsive_dropdown_menus_theme_menu_item_list',
    ),
  );
}

/**
 * Responsive dropdown menu's implementation of theme_item_list
 * See @link https://drupal.org/node/2176949
 */
function responsive_dropdown_menus_theme_menu_item_list($variables) {
  $items = $variables['items'];
  $attributes = $variables['attributes'];
  $list_attributes = $variables['list_attributes'];
  $output = '';

  if (!empty($items)) {
    $output .= '<ul' . drupal_attributes($list_attributes) . '>';
    $num_items = count($items);
    $i = 0;
    foreach ($items as $item) {
      $attributes = array();
      $list_attributes = array();
      $children = array();
      $data = '';
      $i++;
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = $value;
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          elseif ($key == 'list_attributes') {
            $list_attributes = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        // Render nested list.
        $data .= responsive_dropdown_menus_theme_menu_item_list(array(
          'items' => $children,
          'title' => NULL,
          'attributes' => $attributes,
          'list_attributes' => $list_attributes
        ));
      }
      if ($i == 1) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items) {
        $attributes['class'][] = 'last';
      }
      $output .= '<li' . drupal_attributes($attributes) . '>' . $data . "</li>\n";
    }
    $output .= '</ul>';
  }
  return $output;
}
