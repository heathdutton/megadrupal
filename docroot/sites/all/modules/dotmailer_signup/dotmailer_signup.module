<?php

/**
 * @file
 * DotMailer signup form creation.
 */

/**
 * Implements hook_menu().
 */
function dotmailer_signup_menu() {
  $items = array();

  $items['newsletter_signup/thank-you'] = array(
    'page callback' => 'dotmailer_signup_thankyou_message',
    'access arguments' => array('access content'),
    'title' => 'Thank you - You are now subscribed',
    'type' => MENU_CALLBACK,
  );

  $items['newsletter/subscription-confirmed'] = array(
    'page callback' => 'dotmailer_signup_confirmation_message',
    'access arguments' => array('access content'),
    'title' => 'Subscription confirmed',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function dotmailer_signup_block_info() {
  $blocks = array();

  $blocks['dotmailer_signup_block'] = array(
    'info' => t('dotMailer Newsletter Signup'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dotmailer_signup_block_view($delta) {
  switch ($delta) {

    case 'dotmailer_signup_block':
      $block = array();
      $block['subject'] = t('Newsletter');

      $form = drupal_get_form('dotmailer_signup_form');
      $block['content'] = drupal_render($form);

      return $block;
  }
}

/**
 * Implements hook_block_configure().
 */
function dotmailer_signup_block_configure($delta = '') {

  $form = array();

  switch ($delta) {

    case 'dotmailer_signup_block':
      $dotmailer = dotmailer_integration_get_object();

      $form = array();

      if ($dotmailer === FALSE) {
        $form['dotmailer_signup_error'] = array(
          '#type' => 'markup',
          '#markup' => '<p class="error">' . t('An error occurred when getting dotMailer object, please check integration settings.') . '</p>',
        );
        return $form;
      }

      $address_book_objects = $dotmailer->ListAddressBooks();

      $address_books = array();

      if ($address_book_objects !== FALSE) {
        foreach ($address_book_objects as $address_book) {
          $address_books[$address_book->ID] = $address_book->Name;
        }
      }

      $form['dotmailer_signup_selected_addressbook'] = array(
        '#type' => 'radios',
        '#title' => t('Pick an address book:'),
        '#options' => $address_books,
        '#required' => TRUE,
        '#default_value' => variable_get('dotmailer_signup_selected_addressbook', 0),
      );

      $form['dotmailer_signup_audience_type'] = array(
        '#type' => 'select',
        '#title' => t('Select audience type:'),
        '#options' => array(
          'Unknown' => 'Unknown',
          'B2C' => 'Business to Consumer',
          'B2B' => 'Business to Business',
          'B2M' => 'Business to Manager',
        ),
        '#required' => TRUE,
        '#default_value' => variable_get('dotmailer_signup_audience_type', 'Unknown'),
      );

      $form['dotmailer_signup_optin_type'] = array(
        '#type' => 'select',
        '#title' => t('Select opt in type:'),
        '#options' => array(
          'Single' => 'Single',
          'Double' => 'Double'
        ),
        '#required' => TRUE,
        '#default_value' => variable_get('dotmailer_signup_optin_type', 'Single'),
        '#description' => 'When setting up double opt in dotMailer you can also 
          set the opt in redirect page to be "newsletter/subscription-confirmed"
          which is defined in this module.'
      );
      
      $form['dotmailer_signup_name'] = array(
        '#type' => 'fieldset',
        '#title' => t('Name field'),
      );

      $form['dotmailer_signup_name']['dotmailer_signup_name_include'] = array(
        '#type' => 'checkbox',
        '#title' => t('Include name field?'),
        '#default_value' => variable_get('dotmailer_signup_name_include', 0),
      );

      $form['dotmailer_signup_name']['dotmailer_signup_name_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Name field dotMailer id'),
        '#default_value' => variable_get('dotmailer_signup_name_field', ''),
      );

      break;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function dotmailer_signup_block_save($delta = '', $edit = array()) {
  switch ($delta) {

    case 'dotmailer_signup_block':
      variable_set('dotmailer_signup_selected_addressbook', $edit['dotmailer_signup_selected_addressbook']);
      variable_set('dotmailer_signup_optin_type', $edit['dotmailer_signup_optin_type']);
      variable_set('dotmailer_signup_audience_type', $edit['dotmailer_signup_audience_type']);
      variable_set('dotmailer_signup_name_include', $edit['dotmailer_signup_name_include']);
      variable_set('dotmailer_signup_name_field', $edit['dotmailer_signup_name_field']);

      break;
  }
}

/**
 * Create a signup form for dotMailer signups.
 *
 * @param array $form
 *   The form.
 * @param array $form_state
 *   The current form state.
 *
 * @return array
 *   The form.
 */
function dotmailer_signup_form($form, &$form_state) {

  if (variable_get('dotmailer_signup_name_include', 0) == 1) {
    // Only show the name field if previously selected.
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Your Name'),
      '#required' => TRUE,
      '#attributes' => array('placeholder' => 'Your Name'),
    );
  }

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#required' => TRUE,
    '#attributes' => array('placeholder' => 'Email Address'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
    '#attributes' => array('class' => array('btn', 'btn-red')),
  );

  return $form;
}

/**
 * Implements hook_FORM_ID_validate().
 */
function dotmailer_signup_form_validate($form, &$form_state) {

  // Ensure e-mail is valid.
  if (isset($form_state['values']['email']) && $form_state['values']['email'] != '' && !filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL)) {
    drupal_set_message("The email address you entered is not valid. Please check and try again.", 'error');
    return FALSE;
  }
}

/**
 * Implements hook_FORM_ID_submit().
 */
function dotmailer_signup_form_submit($form, &$form_state) {

  $dotmailer_api = dotmailer_integration_get_object();

  $form = array();

  if ($dotmailer_api === FALSE) {
    watchdog('dotMailer signup subscription error: no dotMailer object found', 'error');
    drupal_set_message('An error occurred whilst processing your signup request, please try again later.', 'error');
    return FALSE;
  }

  $address_book_id = variable_get('dotmailer_signup_selected_addressbook', 0);

  if ($address_book_id == 0) {
    watchdog('dotMailer signup subscription error: invalid address book ID', 'error');
    drupal_set_message('An error occurred whilst processing your signup request, please try again later.', 'error');
    return FALSE;
  }

  $name = FALSE;

  $fields = array();

  if (isset($form_state['values']['name']) && trim($form_state['values']['name']) != '' && variable_get('dotmailer_signup_name_include', 0) == 1) {
    $name = $form_state['values']['name'];
    $name_field = variable_get('dotmailer_signup_name_field', '');
    if ($name_field != '') {
      $fields = array(
        $name_field => $name,
      );
    }
  }

  $email = $form_state['values']['email'];

  $contact = array(
    'Email' => $email,
    'AudienceType' => variable_get('dotmailer_signup_audience_type', 'Unknown'),
    'OptInType' => variable_get('dotmailer_signup_optin_type', 'Single'),
    'EmailType' => 'Html',
  );

  // Check if user exists within dotMailer.
  $dotmailer_user_exists = $dotmailer_api->GetContactByEmail($email);

  $dotmailer_user_to_address_book = FALSE;

  // If user exists, check if they are aleady in the address book.
  if ($dotmailer_user_exists) {
    // Get address books that the contact is subscribed to.
    $dotmailer_contacts_address_books = $dotmailer_api->ListAddressBooksForContact($dotmailer_user_exists);

    // Check if the user is already apart of this address book.
    $already_subscribed = FALSE;
    if (gettype($dotmailer_contacts_address_books) == 'object') {
      $already_subscribed = TRUE;
    }
    elseif (gettype($dotmailer_contacts_address_books) == 'array') {
      foreach ($dotmailer_contacts_address_books as $address_book) {
        if ($address_book->ID == $dotmailer['addressbookid']) {
          $already_subscribed = TRUE;
          break;
        }
      }
    }

    if ($already_subscribed === FALSE) {
      // Subscribe the user to the address book in question.
      $dotmailer_user_to_address_book = $dotmailer_api->AddContactToAddressBook($contact, $fields, $address_book_id);
    }
  }
  else {
    $dotmailer_user_to_address_book = $dotmailer_api->AddContactToAddressBook($contact, $fields, $address_book_id);
  }

  // Ensure user has been subscribed to address book.
  if (!$dotmailer_user_to_address_book) {
    watchdog('dotMailer signup subscription error: %email not signed up to address book', 'error', array('%email' => $email));
  }
  // Redirect the user to
  drupal_goto('newsletter_signup/thank-you');
}

/**
 * Function to return body for newsletter thank you page.
 */
function dotmailer_signup_please_confirm_message() {
  $page_body = "<p>" . t("Thank you for registering your email address to receive updates from @site_name", array('@site_name' => variable_get('site_name', ''))) . ".</p>";
  $page_body .= "<p><strong>" . t("To complete your subscription you must confirm your email address.");
  $page_body .= ' ' . t("Please check your inbox for our confirmation email.") . "</strong></p>";
  $page_body .= "<p><a href=\"/\">" . t("Return to the home page &raquo;") . "</a></p>";

  return $page_body;
}

/**
 * Function to return body for newsletter thank you page.
 *
 * @return string
 *   The page content, customised for single or double sign ups.
 */
function dotmailer_signup_thankyou_message() {
  $page_body = '';

  switch (variable_get('dotmailer_signup_optin_type', 'Single')) {
    case 'Unknown':
    case 'Single':
      // Single opt in message.
      $page_body .= "<p>" . t("Thank you for registering to receive updates from @site_name", array('@site_name' => variable_get('site_name', ''))) . ".</p>";
      $page_body .= "<p><a href=\"/\">" . t("Return to the home page &raquo;") . "</a></p>";

      break;

    case 'Double':
      // Double opt in message.
      $page_body = "<p>" . t("Thank you for registering your email address to receive updates from @site_name", array('@site_name' => variable_get('site_name', ''))) . ".</p>";
      $page_body .= "<p><strong>" . t("To complete your subscription you must confirm your email address.");
      $page_body .= "<br />" . t("Please check your inbox for our confirmation email.") . "</strong></p>";
      $page_body .= "<p><a href=\"/\">" . t("Return to the home page &raquo;") . "</a></p>";

      break;
  }

  return $page_body;
}

/**
 * Implements hook_theme().
 */
function dotmailer_signup_theme($existing, $type, $theme, $path) {
  return array(
    'dotmailer_signup_confirmation_message' => array(
      'variables' => array('message' => ''),
    ),
  );
}

/**
 * Function to return body for newsletter signup confirmation page.
 *
 * @return string
 *   The page content.
 */
function dotmailer_signup_confirmation_message() {
  $message = t('Thank you, your subscription to @site_name newsletters has been confirmed.', array('@site_name' => variable_get('site_name', '')));
  return theme('dotmailer_signup_confirmation_message', array('message' => $message));
}

/**
 * Theme callback function.
 * 
 * @see dotmailer_signup_theme()
 */
function theme_dotmailer_signup_confirmation_message($vars) {
  return '<p>' . $vars['message'] . '</p>';
}
