<?php

/**
 * Implements hook_permission().
 */
function work_calendar_permission() {
  $perms = array();
  $perms['administer all work calendars'] = array(
    'title' => t('Administer all work calendars'),
    'description' => t('Perform all administration tasks for work calendars.'),
  );
  $perms['view work calendars'] = array(
    'title' => t('View work calendars'),
    'description' => t('View available work calendars.'),
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function work_calendar_menu() {
  $items = array();
  $items['admin/config/regional/work-calendar'] = array(
    'title' => 'Sitewide work calendar',
    'description' => "Site's default work calendar.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('work_calendar_sitewide_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'work_calendar.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function work_calendar_entity_info() {
  $info = array();
  $info['work_calendar'] = array(
    'module' => 'work_calendar',
    'base table' => 'work_calendar',
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
    ),
    'label' => t('Work calendar'),
    'plural label' => t('Work calendars'),
    'entity class' => 'WorkCalendar',
    'controller class' => 'EntityAPIControllerExportable',
    'exportable' => TRUE,
    'admin ui' => array(
      'path' => 'admin/structure/work-calendars',
      'file' => 'includes/entity.ui.inc',
    ),
    'access callback' => 'work_calendar_access',
  );
  return $info;
}

/**
 * @defgroup wc_entity_hooks Hooks and callbacks for work_calendar entity.
 * {@
 *
 * @see work_calendar_entity_info()
 */

/**
 * Implements access callback.
 */
function work_calendar_access($op, $entity = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return user_access('view work calendars');
      break;
    //case 'update':
    //case 'create':
    //case 'edit':
    case 'delete':
      $default = variable_get('work_calendar_default', NULL);
      if ($entity->name == $default) {
        drupal_set_message(t("This is the default work calendar and can't be deleted. Please change the default work calendar at <a href='!url'>admin/config/regional/work-calendar</a> if you want to delete this one.", array('!url' => url('admin/config/regional/work-calendar'))), 'error');
          return false;
      }
      break;
  }
  return user_access('administer all work calendars');
}

/**
 * @} End of "defgroup wc_entity_hooks".
 */

/**
 * @defgroup wc_helpers Helper functions.
 * {@
 */

/**
 * Returns all work calendars indexed by name, or just the one requested.
 *
 * Used by machine name existence check
 * also useful for menu path wildcard loader.
 */
function work_calendar_load($name = NULL) {
  $wc = entity_load_multiple_by_name('work_calendar', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($wc) : $wc;
}

/**
 * Returns a work calendar selection form element.
 *
 * @param boolean include_default wether to add "use site default" as an option.
 * @param integer default_value Id of the default work calendar.
 *
 * @return form element.
 */
function work_calendar_form_element($include_default = FALSE, $default_value = NULL) {
  $options = array();
  if ($include_default && variable_get('work_calendar_default', FALSE)) {
    $options[0] = t('-- use site default --');
  }
  $options += db_select('work_calendar', 'wc')
    ->fields('wc', array('name', 'label'))
    ->execute()
    ->fetchAllKeyed(0, 1);
  $element = array(
    '#type' => 'select',
    '#title' => t('Choose a Work Calendar'),
    '#default_value' => $default_value,
    '#options' => $options,
  );
  return $element;
}

/**
 * @} End of "defgroup wc_helpers".
 */

/**
 * @defgroup wc_api API functions to query calendars.
 * {@
 * All this functions accepts a work calendar name and a year number
 * as first and second parameters respectively. If omitted, sitewide calendar
 * and current year will be selected.
 */

/**
 * Load the requested calendar or site's default if none given.
 */
function work_calendar_instantiate($name = NULL) {
  if (empty($name)) {
    $name = variable_get('work_calendar_default');
    if (empty($name)) {
      throw new Exception('Default work calendar not configured.');
    }
  }
  $wc = entity_load_single('work_calendar', $name);
  if (!$wc) {
    throw new Exception($name . ' work calendar doesn\'t exist.');
  }
  return $wc;
}

/**
 * Complete empty date parts with today values.
 */
function work_calendar_complete_date($year, $month = NULL, $day = NULL) {
  $year = is_null($year)?date('Y'):$year;
  $month = is_null($month)?date('m'):$month;
  $day = is_null($day)?date('d'):$day;
  return array($year, $month, $day);
}

/**
 * Wrapper for WorkCalendar::openDays().
 */
function work_calendar_get_open_days_in_year($cal = NULL, $year = NULL) {
  $wc = work_calendar_instantiate($cal);
  list($year,,) = work_calendar_complete_date($year);
  return $wc->getOpenDays($year);
}

/**
 * Wrapper for WorkCalendar::openDays().
 */
function work_calendar_get_open_days_in_month($cal = NULL, $year = NULL, $month = NULL) {
  $wc = work_calendar_instantiate($cal);
  list($year, $month, ) = work_calendar_complete_date($year, $month);
  return $wc->getOpenDays($year, $month);
}

/**
 * Wrapper for WorkCalendar::openDaysInPeriod().
 */
function work_calendar_get_open_days_in_period($cal = NULL, $start, $end) {
  $wc = work_calendar_instantiate($cal);
  return $wc->getOpenDaysInPeriod($start, $end);
}

/**
 * Wrapper for WorkCalendar::isOpenDay().
 */
function work_calendar_day_is_open($cal = NULL, $year = NULL, $month = NULL, $day = NULL) {
  $wc = work_calendar_instantiate($cal);
  list($year, $month, $day) = work_calendar_complete_date($year, $month, $day);
  return $wc->isOpenDay($year, $month, $day);
}

/**
 * Wrapper for WorkCalendar::closedDays().
 */
function work_calendar_get_closed_days_in_year($cal = NULL, $year = NULL) {
  $wc = work_calendar_instantiate($cal);
  list($year,,) = work_calendar_complete_date($year);
  return $wc->getClosedDays($year);
}

/**
 * Wrapper for WorkCalendar::openDays().
 */
function work_calendar_get_closed_days_in_month($cal = NULL, $year = NULL, $month = NULL) {
  $wc = work_calendar_instantiate($cal);
  list($year, $month, ) = work_calendar_complete_date($year, $month);
  return $wc->getClosedDays($year, $month);
}

/**
 * Wrapper for WorkCalendar::openDaysInPeriod().
 */
function work_calendar_get_closed_days_in_period($cal = NULL, $start, $end) {
  $wc = work_calendar_instantiate($cal);
  return $wc->getClosedDaysInPeriod($start, $end);
}

/**
 * Wrapper for WorkCalendar::isClosedDay().
 */
function work_calendar_day_is_closed($cal = NULL, $year = NULL, $month = NULL, $day = NULL) {
  $wc = work_calendar_instantiate($cal);
  list($year, $month, $day) = work_calendar_complete_date($year, $month, $day);
  return $wc->isClosedDay($year, $month, $day);
}

/**
 * @} End of "defgroup wc_api".
 */

