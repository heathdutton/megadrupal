<?php
/**
 * @file
 * Test integration for the gamertags module.
 */

/**
 * Helper test class with some added functions to aid testing.
 */
class GamertagsTestBase extends DrupalWebTestCase {
  protected $profile = 'testing';
  protected $admin_user;
  protected $web_user;

  public function setUp($modules = array()) {
    $modules[] = 'gamertags';
    parent::setUp($modules);
    $this->admin_user = $this->drupalCreateUser(array('administer site configuration'));
    $this->web_user = $this->drupalCreateUser(array('access content'));
  }

  /**
   * Helper function for enabling a platform Gamertag.
   *
   * @param $class
   *   string the relevant platform class.
   */
  protected function enableGamertag($class) {
    variable_set("{$class}_collect", TRUE);
  }

  /**
   * Helper function for enabling all platform Gamertags.
   */
  protected function enableAllGamertags() {
    foreach (gamertags_return_all() as $class => $platform_info) {
      self::enableGamertag($class);
    }
  }

  /**
   * Helper function for setting the platform weights to a random number between -50 and +50.
   */
  protected function presetGamertagWeights() {
    // Cycle through each Platform.
    foreach (gamertags_return_all() as $class => $platform_info) {
      variable_set("{$class}_weight", rand(-50, 50));
    }
  }

  /**
   * Helper function for enabling a platform Gamertag.
   */
  protected function presetGamertags($account) {
    $edit = array();
    // Cycle through each Platform and set each platform Gamertag.
    foreach (gamertags_return_all() as $class => $platform_info) {
      // Fill in with a compatible test gamertag/ related info (eg. 'region').
      call_user_func_array(array($class, '_testContent'), array(&$edit));
    }
    // Save updated Gamertags via a form POST.
    $this->drupalPost("user/{$account->uid}/edit", $edit, t('Save'));
  }
}

/**
 * Basic Gamertags functionality tests.
 */
class GamertagsTestCase extends GamertagsTestBase {
  public static function getInfo() {
    return array(
      'name' => 'Gamertags basic unit tests',
      'description' => 'Test basic, low-level Gamertags functions.',
      'group' => 'Gamertags',
    );
  }

  /**
   * Tests that each individual gamertags_{platform}_collect settings disables
   * the corresponding url setting.
   */
  function testGamertagsAdminCollect() {
    // Log in as a regular web user.
    $this->drupalLogin($this->web_user);
    // Ensure we can't reach the admin settings page.
    $this->drupalGet('admin/config/people/gamertags');
    $this->assertResponse(403, t('Regular user cannot access the admin settings page.'));
    // Now log in as an administrative user.
    $this->drupalLogin($this->admin_user);
    // Ensure we can now reach the admin settings page.
    $this->drupalGet('admin/config/people/gamertags');
    $this->assertResponse(200, t('Admin user can access the admin settings page.'));

    // Cycle through each Platform.
    foreach (gamertags_return_all() as $class => $platform_info) {
      // Only test if this platform has an external path to be collected.
      if (!method_exists($class, 'returnPath')) {
        continue;
      }
      // Fetch the admin settings page.
      $this->drupalGet('admin/config/people/gamertags');
      $this->assertNoFieldByName("{$class}_url", t('@platform is correctly off.', array('@platform' => $platform_info['name'])));
      // Enable the platform collect setting via a form POST.
      $this->drupalPost('admin/config/people/gamertags', array("{$class}_collect" => TRUE), t('Save configuration'));
      // Test the corresponding URL is now present on the admin screen.
      $this->assertFieldByName("{$class}_url", variable_get("{$class}_url"), t('Platform URL settings for @platform are correctly showing.', array('@platform' => $platform_info['name'])));
    }
  }

  /**
   * Tests that each individual gamertags_{platform}_collect setting displays on
   * the user edit form when enabled.
   */
  function testGamertagsUserCollect() {
    // Log in as a regular web user.
    $this->drupalLogin($this->web_user);
    // Cycle through each Platform.
    foreach (gamertags_return_all() as $class => $platform_info) {
      // Fetch the user edit page.
      $this->drupalGet("user/{$this->web_user->uid}/edit");
      $this->assertNoFieldByName($class, t('@platform is correctly off and not displaying.', array('@platform' => $platform_info['name'])));
      // Enable the platform collect setting.
      parent::enableGamertag($class);
      // Fetch the same user edit page.
      $this->drupalGet("user/{$this->web_user->uid}/edit");
      // Test the URL is now present on the admin screen.
      $this->assertField($class, t('Platform entry field for @platform is correctly showing.', array('@platform' => $platform_info['name'])));
    }
  }

  /**
   * Tests that each individual gamertags_{platform}_collect setting displays on
   * the user edit form when enabled and is in the correct weighting order.
   */
  function testGamertagsUserEditWeights() {
    parent::enableAllGamertags();
    parent::presetGamertagWeights();
    // Log in as a regular web user.
    $this->drupalLogin($this->web_user);
    // Fetch the user view page and find the platforms in (their displayed) order.
    $page = $this->drupalGet("user/{$this->web_user->uid}/edit");
    $test = self::findPlatforms($page);
    // Ensure the order matches the weighting set in the admin screen.
    self::assertWeighting($test);
  }

  /**
   * Tests that each individual gamertags_{platform}_collect setting displays on
   * the user view form when enabled and is in the correct weighting order.
   */
  function testGamertagsUserViewWeights() {
    parent::enableAllGamertags();
    parent::presetGamertagWeights();
    // Log in as a regular web user.
    $this->drupalLogin($this->web_user);
    // Set all the Gamertags for this user.
    parent::presetGamertags($this->web_user);
    // Fetch the user view page and find the platforms in (their displayed) order.
    $page = $this->drupalGet("user/{$this->web_user->uid}");
    $test = self::findPlatforms($page);
    // Ensure the order matches the weighting set in the admin screen.
    self::assertWeighting($test);
  }

  /**
   * Helper function for checking/ finding the weighted platforms on a users page.
   *
   * @param $page
   *   HTML page as a string.
   *
   * @return
   *   array keyed by position on page with value being the found platform class.
   */
  private function findPlatforms($page) {
    // Cycle through each Platform.
    $test = array();
    // Count the total number of platforms.
    $count = 0;
    foreach (gamertags_return_all() as $class => $platform_info) {
      if ($found = strpos($page, $class)) {
        $test[$found] = $class;
      }
      $count++;
    }
    $missing = array_diff(array_keys(gamertags_return_all()), $test);
    $this->assertEqual(count($test), $count, t('Test for missing platforms on page: @missing', array('@missing' => implode(', ', ($missing ? $missing : array(t('none')))))));
    // Sort them by page weight.
    ksort($test, SORT_NUMERIC);
    return $test;
  }

  /**
   * Helper function for checking the position of platforms on a page matches
   * the expected layout for '#weight' given on the admin settings page.
   *
   * @param $test
   *   array keyed by position on page with value being the found platform class.
   */
  private function assertWeighting($test) {
    // Cycle through each Platform using its page weight.
    $a = $platform_a = $b = $platform_b = NULL;
    foreach ($test as $weight => $class) {
      $platform_a = $class;
      $a = (int) variable_get("{$class}_weight");
      // If this is the first pass then set the second variable and pass-through back to the beginning.
      if (!isset($b)) {
        $platform_b = $platform_a;
        $b = $a;
        continue;
      }
      // From second pass onwards, ensure weight is either greater than or equal to the previous platform.
      $this->assertTrue($a >= $b, t('Weight is correct between @platform_a(%a) and @platform_b(%b).', array('@platform_a' => $platform_a, '%a' => $a, '@platform_b' => $platform_b, '%b' => $b)));
      // Continue onwards setting the $b platform with the 'just processed' platform.
      $platform_b = $platform_a;
      $b = $a;
    }
  }
}

/**
 * Basic Gamertag Token functionality tests.
 */
class GamertagsTokenTestCase extends GamertagsTestBase {
  public static function getInfo() {
    return array(
      'name' => 'Gamertags token unit tests',
      'description' => 'Test basic, low-level Gamertags Token functions.',
      'group' => 'Gamertags',
    );
  }

  public function setUp($modules = array()) {
    $modules[] = 'token';
    parent::setUp($modules);
  }
}

/**
 * Basic Gamertag Views functionality tests.
 */
class GamertagsViewsTestCase extends GamertagsTestBase {
  public static function getInfo() {
    return array(
      'name' => 'Gamertags views unit tests',
      'description' => 'Test basic, low-level Gamertags Views functions.',
      'group' => 'Gamertags',
    );
  }

  public function setUp($modules = array()) {
    $modules[] = 'views';
    parent::setUp($modules);
  }
}
