<?php

/**
 * @file
 * Defines features and functions common to the
 * Commerce Abandoned Cart Notification module.
 */

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_notification_commerce_order_status_info() {
  $order_statuses = array();

  // Create a new status for orders whom already received a notification.
  $order_statuses['user_notified'] = array(
    'name' => 'user_notified',
    'title' => t('User notified'),
    'state' => 'cart',
    'weight' => 2,
    'cart' => TRUE,
  );

  return $order_statuses;
}

/**
 * Implements hook_views_api().
 */
function commerce_notification_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_notification') . '/includes/views',
  );
}

require_once dirname(__FILE__) . '/includes/commerce_notification.message.inc';

/**
 * Implements hook_entity_info().
 */
function commerce_notification_entity_info() {
  $data['commerce_notification'] = array(
    'label' => t('Commerce abandoned cart notification'),
    'plural label' => t('Commerce abandoned cart notifications'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'commerce_notification',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
    ),
    'bundles' => array(),
    'load hook' => 'commerce_notification_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Administrator'),
        'custom settings' => FALSE,
      ),
    ),
    // Use the default uri() callback.
    // @todo Previously non-existing callback was commerce_notification_uri.
    'uri callback' => 'entity_class_uri',
    // @todo Determine if we need this.
    // 'access callback' => 'commerce_notification_access',
    'token type' => 'commerce-abandoned-cart-notification-saved',
    'metadata controller class' => '',
    'permission labels' => array(
      'singular' => t('commerce abandoned cart notification account'),
      'plural' => t('commerce abandoned cart notification accounts'),
    ),
  );

  return $data;
}

/**
 * Loads notification by ID.
 */
function commerce_notification_load($id) {
  $notification = entity_load('commerce_notification', $id);
  return $notification ? reset($notification) : FALSE;
}

/**
 * Returns an initialized notification object.
 *
 * @return
 *   A notification object with all default fields initialized.
 */
function commerce_notification_new($user, $order) {
  return entity_get_controller('commerce_notification')->create(array(
    'uid' => $user->uid,
    'order_id' => $order->order_id,
    'order_vid' => $order->revision_id,
    'created' => time(),
    'data' => $order->data,
  ));
}

/**
 * Saves a Notification.
 *
 * @param $notification
 *   The full notification object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_notification_save($notification) {
  return entity_get_controller('commerce_notification')->save($notification);
}

/**
 * Loads notification by order and user details.
 *
 * @see entity_load()
 */
function commerce_notification_account_load_by_user($user, $order, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_notification', '=')
    ->propertyCondition('uid', $user->uid, '=')
    ->propertyCondition('order_id', $order->order_id, '=');
  if ($reset != FALSE) {
    $query->range($reset['start'], $reset['length']);
    $query->propertyOrderBy('id', $reset['order_by']);
  }
  $result = $query->execute();
  $account = array();
  $return = array();
  if (!empty($result['commerce_notification'])) {
    foreach ($result['commerce_notification'] as $account) {
      $return[] = entity_load_single('commerce_notification', $account->id);
    }
  }
  return $return ? reset($return) : FALSE;
}

/**
 * Create new notification.
 */
function commerce_notification_create($user, $order) {
  $notification = commerce_notification_account_load_by_user($user, $order);
  $notification = commerce_notification_new($user, $order);
  commerce_notification_save($notification);
}

/**
 * Performs date comparison for the rules been used.
 */
function commerce_notification_compare($user, $order, $comparison_param, $comparison_value) {
  $reset['start'] = 0;
  $reset['length'] = 1;
  $reset['order_by'] = 'desc';
  $notification = commerce_notification_account_load_by_user($user, $order, $reset);
  if (count($notification) === 1 and isset($notification)) {
    if (empty($notification->created)) {
      $created_date = 0;
    }
    else {
      $created_date = $notification->created;
    }
    $time_now = time();

    $comparison_value = strtotime($comparison_value, $created_date);
    switch ($comparison_param) {
      case 'less':
        if ($time_now < $comparison_value) {
          $result = TRUE;
        }
        else {
          $result = FALSE;
        }
        break;

      case 'less_equal':
        if ($time_now <= $comparison_value) {
          $result = TRUE;
        }
        else {
          $result = FALSE;
        }
        break;

      case 'equal':
        if ($time_now == $comparison_value) {
          $result = TRUE;
        }
        else {
          $result = FALSE;
        }
        break;

      case 'greater_equal':
        if ($time_now >= $comparison_value) {
          $result = TRUE;
        }
        else {
          $result = FALSE;
        }
        break;

      case 'greater':
        if ($time_now > $comparison_value) {
          $result = TRUE;
        }
        else {
          $result = FALSE;
        }
        break;
    }

    return $result;
  }
  else {
    // Create new entry.
    return TRUE;
  }

}

/**
 * Implements hook_message_presave().
 *
 * We cannot use a token to show the order-summary, since both Token and
 * Entity API modules invoke token_generate() which results with an array
 * instead of a string with the replacement text.
 *
 * Instead, upon saving the message for the first time we inject an
 * argument with a callback, that will return the order summary.
 *
 * @link http://drupal.org/node/1272560
 */
function commerce_notification_message_presave($message) {
  if (!empty($message->mid) || $message->type != 'abandoned_cart_message') {
    return;
  }

  $message->arguments['!shopping-cart'] = array(
    'callback' => 'commerce_notification_shopping_cart',
    'pass message' => TRUE,
  );
}

/**
 * Message callback; Shopping cart.
 *
 * @param $message
 *   The Message entity.
 */
function commerce_notification_shopping_cart(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = views_get_view('abandoned_cart_summary');
  $view->set_arguments(array($wrapper->field_abandoned_cart_order->getIdentifier()));
  $view->hide_admin_links = TRUE;
  return $view->preview();
}

/**
 * Implements hook_commerce_cart_order_is_cart_alter().
 */
function commerce_notification_commerce_cart_order_is_cart_alter(&$is_cart, $order) {
  $is_cart = in_array($order->status, array_keys(commerce_order_statuses(array('cart' => TRUE))));
  return $is_cart;
}

/**
 * Implements hook_flush_caches().
 */
function commerce_notification_flush_caches() {
  commerce_notification_message_field_refresh();
}

/**
 * Implements hook_multilingual_settings_changed().
 */
function commerce_notification_multilingual_settings_changed() {
  // Rebuild the message types after modifying the language settings.
  entity_defaults_rebuild(array('message_type'));
}
