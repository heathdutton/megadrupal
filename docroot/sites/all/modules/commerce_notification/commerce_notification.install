<?php

/**
 * @file
 * Install file for the Commerce Abandoned Cart Notification module.
 */

/**
 * Implements hook_schema().
 */
function commerce_notification_schema() {
  return array(
    'commerce_notification' => array(
      'description' => 'A record of an abandoned shopping cart notification sent to a user.',
      'fields' => array(
        'id' => array(
          'description' => 'Notification ID',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => 'User ID of the user to whom this notification was sent.',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'order_id' => array(
          'description' => 'Order ID of the order for which this notification was sent.',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'order_vid' => array(
          'description' => 'Order revision ID of the order revision that was current when this notification was sent.',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'created' => array(
          'description' => 'The Unix timestamp when this notification was created.',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'data' => array(
          'type' => 'blob',
          'not null' => FALSE,
          'size' => 'big',
          'serialize' => TRUE,
          'description' => 'A serialized array of name value pairs that are related to the notification.',
        ),
      ),
      'primary key' => array('id'),
      'indexes' => array(
        'order_id' => array('order_id', 'order_vid'),
        'notification_created' => array('created'),
        'uid' => array('uid'),
      ),
    ),
  );
}

/**
 * Create the {commerce_notification} table.
 */
function commerce_notification_update_7000() {
  db_create_table('commerce_notification', array(
    'description' => 'A record of an abandoned shopping cart notification sent to a user.',
    'fields' => array(
      'id' => array(
        'description' => 'Notification ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'User ID of the user to whom this notification was sent.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'Order ID of the order for which this notification was sent.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'order_vid' => array(
        'description' => 'Order revision ID of the order revision that was current when this notification was sent.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when this notification was created.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of name value pairs that are related to the notification.',
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'order_id' => array('order_id', 'order_vid'),
      'notification_created' => array('created'),
      'uid' => array('uid'),
    ),
  ));
}

/**
 * Implements hook_install().
 */
function commerce_notification_install() {
  // Create the message text field for our message type category.
  $instance = array(
    'field_name' => MESSAGE_FIELD_MESSAGE_TEXT,
    'bundle' => 'commerce_user_message',
    'entity_type' => 'message_type',
    'label' => st('Message text'),
    'description' => st('This is the text of all messages of this type.'),
    'required' => TRUE,
    'settings' => array(
      'text_processing' => 1,
      // Mark that this field can be rendered using Message::getText().
      'message_text' => TRUE,
    ),
  );
  if ($existing_instance = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
    field_update_instance($instance);
  }
  else {
    field_create_instance($instance);
  }

  // Add a display name field.
  $field = array(
    'field_name' => 'message_order_display_name',
    'type' => 'text',
    'module' => 'text',
    'cardinality' => '1',
    'translatable' => TRUE,
    'settings' => array(
      'max_length' => '255',
      // Mark that this field can be rendered using Message::getText().
      'message_text' => TRUE,
    ),
  );
  if (field_info_field($field['field_name'])) {
    field_update_field($field);
  }
  else {
    field_create_field($field);
  }
  $instance = array(
    'field_name' => $field['field_name'],
    'bundle' => 'commerce_user_message',
    'entity_type' => 'message_type',
    'label' => st('Display name'),
    'description' => st('The name of this message type as displayed in logs.'),
    'required' => TRUE,
    'settings' => array(
      'text_processing' => 0,
    ),
  );
  if ($existing_instance = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
    field_update_instance($instance);
  }
  else {
    field_create_instance($instance);
  }

  // Add text format if it doesn't exist.
  if (!filter_format_load('commerce_user_message')) {
    $format = (object) array(
      'format' => 'commerce_user_message',
      'name' => 'Commerce User Message',
      'weight' => 0,
      'filters' => array(
        // HTML filter.
        'filter_html' => array(
          'weight' => 1,
          'status' => 1,
        ),
      ),
    );
    filter_format_save($format);
  }
}
