<?php
/**
 * @file
 * Allows users to log in with an access code.
 */


/**
 * Implements hook_menu().
 */
function access_code_menu() {
  $items = array();

  $items['user/ac'] = array(
    'title' => 'Use access code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_code_login', TRUE),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'access_code.pages.inc',
  );

  $items['ac/%'] = array(
    'title' => 'Access code login',
    'page callback' => 'access_code_authenticate',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'access_code.pages.inc',
  );

  $items['admin/config/people/access_code'] = array(
    'title' => 'Access code settings',
    'description' => 'Configure settings for access codes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_code_admin_settings'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'access_code.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function access_code_permission() {
  return array(
    'change own access code' => array(
      'title' => t('Change own access code'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function access_code_form_user_login_block_alter(&$form, $form_state) {
  $items[] = l(t('Use access code'), 'user/ac', array('attributes' => array('title' => t('Log in using an access code.'))));
  $form['access_code_link'] = array('#markup' => theme('item_list', array('items' => $items)));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function access_code_form_user_register_form_alter(&$form, $form_state) {
  access_code_add_form_fields($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function access_code_form_user_profile_form_alter(&$form, $form_state) {
  access_code_add_form_fields($form);
}

/**
 * Adds access code fields to a form definition.
 *
 * @param $form
 *   Form array as reference.
 */
function access_code_add_form_fields(&$form) {
  global $user;

  $register = ($form['#user']->uid > 0 ? FALSE : TRUE);
  $access = (($user->uid == $form['#user']->uid && user_access('change own access code')) || user_access('administer users'));

  $form['account']['access_code_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Access code'),
    '#access' => $access,
    '#weight' => 100,
  );

  $form['account']['access_code_settings']['access_code'] = array(
    '#type' => 'textfield',
    '#title' => t('User\'s access code'),
    '#size' => 20,
    '#maxlength' => 20,
    '#description' => t("The access code this user can use to authenticate by entering the code at 'user/ac', or by visiting the access link url ('ac/[access code]'). The code is not case sensitive. If none given, the user cannot use this method to log in."),
    '#default_value' => (($register || empty($form['#user']->access_code)) ? '' : $form['#user']->access_code),
    '#access' => $access,
    '#weight' => 10,
    '#prefix' => '<div id="access_code-div">',
    '#suffix' => '</div>',
  );

  $form['account']['access_code_settings']['generate_code'] = array(
      '#type' => 'button',
      '#description' => t("Automatically generates a unique access code."),
      '#value' => t('Generate Access Code'),
      '#access' => $access,
      '#weight' => 11,
      '#limit_validation_errors' => array(),
      '#ajax' => array(
              'callback' => 'access_code_form_code_generate',
              'wrapper' => 'access_code-div',
              'method'  => 'replace'
          ),
  );

  if ($register || empty($form['#user']->access_code_expiration)) {
    $expiration_default = variable_get('access_code_expiration_default', '1 month');

    $date = new DateTime('now');
    $date->modify('+' . $expiration_default);
    $expires = array(
      'year' => $date->format('Y'),
      'month' => $date->format('n'),
      'day' => $date->format('j'),
    );
  }
  else {
    $expires = array(
      'year' => date('Y', $form['#user']->access_code_expiration),
      'month' => date('n', $form['#user']->access_code_expiration),
      'day' => date('j', $form['#user']->access_code_expiration),
    );
  }

  $form['account']['access_code_settings']['access_code_expiration'] = array(
    '#type' => 'date',
    '#title' => t('Expiration'),
    '#description' => t('Date after which the code cannot be used.'),
    '#default_value' => $expires,
    '#access' => $access,
    '#weight' => 20,
  );

  if (!$register && !empty($form['#user']->access_code)) {
    $form['account']['access_code_settings']['access_link'] = array(
      '#markup' => t('Current access link:') . ' ' . l(url('ac/' . $form['#user']->access_code, array('absolute' => TRUE)), 'ac/' . $form['#user']->access_code, array('absolute' => TRUE)),
      '#weight' => 30,
    );
  }

  $form['#validate'][] = 'access_code_user_profile_form_validate';
}

/**
 * Validation function for the user profile form.
 */
function access_code_user_profile_form_validate($form, &$form_state) {

  $invalid_chars = preg_replace('@[a-zA-Z0-9]@', '', $form_state['values']['access_code']);
  if ($invalid_chars) {
    form_set_error('access_code', t('The access code can contain alphanumerical characters only.'));
  }

  if (drupal_strlen($form_state['values']['access_code']) > 20) {
    form_set_error('access_code', t('The access code can not be longer than 20 characters.'));
  }

  if (!empty($form_state['values']['access_code']) && drupal_strlen($form_state['values']['access_code']) < 4) {
    form_set_error('access_code', t('Please choose an access code that is at least 4 characters long. A short access code poses security risk.'));
  }

  $form_state['values']['access_code_expiration'] = mktime(23, 59, 59, $form_state['values']['access_code_expiration']['month'], $form_state['values']['access_code_expiration']['day'], $form_state['values']['access_code_expiration']['year']);

  if (date('Y', $form_state['values']['access_code_expiration']) > 2037) {
    // Expiration is stored as a timestamp and dates beyond 2037 overflow when stored in the database.
    form_set_error('access_code_expiration', t('Expirations cannot be set beyond year 2037.'));
  }

  if (!empty($form_state['values']['access_code'])) {

    $check = _access_code_check_unique_code($form_state['values']['access_code'], isset($form_state['user']->uid) ? $form_state['user']->uid : NULL);

    if (!$check) {
      form_set_error('access_code', t('This access code has already been used. You cannot reuse access codes. Please enter a different code.'));
    }
  }

}

/**
 * Implements hook_block_info().
 */
function access_code_block_info() {
  $blocks = array();

  $blocks['access_code'] = array(
    'info' => t('Access code login'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function access_code_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
    case 'access_code':
      if (!$user->uid && !(arg(0) == 'user' && !is_numeric(arg(1)))) {
        module_load_include('inc', 'access_code', 'access_code.pages');

        $block['subject'] = t('Access code login');
        $block['content'] = drupal_get_form('access_code_login', FALSE);
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_user_load().
 */
function access_code_user_load($users) {
  $result = db_query('SELECT * FROM {access_code} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));

  foreach ($result as $row) {
    $users[$row->uid]->access_code = $row->code;
    $users[$row->uid]->access_code_expiration = $row->expiration;
  }
}

/**
 * Implements hook_user_update().
 */
function access_code_user_update(&$edit, $account, $category) {
  if (!empty($account->access_code)) {
    db_merge('access_code')
      ->key(array('uid' => $account->uid))
      ->fields(array(
          'code' => $account->access_code,
          'expiration' => $account->access_code_expiration,
      ))
      ->execute();
  }
  else {
    db_delete('access_code')
      ->condition('uid', $account->uid)
      ->execute();
  }
}

/**
 * Implements hook_user_insert().
 */
function access_code_user_insert(&$edit, $account, $category) {
  if (!empty($account->access_code)) {
    db_insert('access_code')
      ->fields(array(
        'uid' => $account->uid,
        'code' => $account->access_code,
        'expiration' => $account->access_code_expiration,
        )
      )
      ->execute();
  }
}

/**
 * Implements hook_user_delete().
 */
function access_code_user_delete($account) {
  db_delete('access_code')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Validates an access code.
 *
 * @param $code
 *   Access code.
 *
 * @return
 *   The corresponding user id, if the code is valid; FALSE otherwise.
 */
function access_code_validate_code($code) {
  $access = db_select('access_code')
    ->fields('access_code')
    ->condition('code', $code)
    ->execute()
    ->fetchAssoc();

  if (!empty($access) && $access['expiration'] > REQUEST_TIME) {
    $user_data = db_select('users')
      ->fields('users', array('uid'))
      ->condition('uid', $access['uid'])
      ->condition('status', 1)
      ->execute()
      ->fetchAssoc();
  }

  if (!empty($user_data['uid'])) {
    return $user_data['uid'];
  }
  else {
    return FALSE;
  }
}

/**
 * AJAX callback to return automatically generated code to use
 */
function access_code_form_code_generate($form, $form_state) {
  $access_code = _access_code_generate_random_code();
  $form['account']['access_code_settings']['access_code']['#value'] = $access_code;

  return $form['account']['access_code_settings']['access_code'];
}

/**
 * Check if a given access code is unique.
 *
 * @param $code
 *   Access code.
 * @param  $uid
 *   User id of the user for whom the code will be generated. The user's
 *   own access code will be excluded form the verification.
 *
 * @return
 *   FALSE if the access code is already assigned to a user; TRUE otherwise.
 */
function _access_code_check_unique_code($code, $uid = NULL) {

  if (isset($uid)) {
    $query = "SELECT * FROM {access_code} WHERE code = :code AND uid <> :uid";
    $result = db_query($query, array(':code' => $code, ':uid' => $uid ))->rowCount();
  }
  else {
    $query = "SELECT * FROM {access_code} WHERE code = :code";
    $result = db_query($query, array(':code' => $code))->rowCount();
  }

  if ($result === 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Generates a random access code.
 *
 * @return
 *   The generated code.
 */
function _access_code_generate_random_code() {

  $prefix = variable_get('access_code_auto_code_prefix', '');
  $format = variable_get('access_code_auto_code_format', 'alpha');
  $length = variable_get('access_code_auto_code_length', 8);

  // Length must be minimum of 4 characters.
  if ($length < 4) {
    $length = 4;
  }

  switch ($format) {
    case 'numbers':
      $chars = '0123456789';
      break;
    case 'letters':
      $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      break;
    case 'alpha':
    default:
      $chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      break;
  }

  $passes = 0;
  $success = FALSE;

  do {
    $passes++;
    $random = '';

    for ($i = 0; $i < $length; $i++) {
      $random .= substr(str_shuffle($chars), 0, 1);
    }

    $access_code = $prefix . $random;

    $success = _access_code_check_unique_code($access_code);

  } while (!$success && $passes < 10);

  if (!$success) {
    $link = l(t('Settings'), 'admin/config/access_code');
    watchdog('access_code', 'Unique could not be generated. Please check Access Code settings.', array(), WATCHDOG_ERROR, $link);
    return;
  }

  return $access_code;
}

/**
 * Implements hook_tokens().
 */
function access_code_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $sanitize = !empty($options['sanitize']);

  if ($type == 'user' && !empty($data['user'])) {
    $replacements = array();

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'access_code':
          $replacements[$original] = $sanitize ? check_plain($data['user']->access_code) : $data['user']->access_code;
          break;

        case 'access_code_expiration':
          $datetime = date('Y-m-d H:i:s', $data['user']->access_code_expiration);

          $date = new DateTime($datetime, new DateTimeZone('GMT'));
          $date->setTimezone(new DateTimeZone($data['user']->timezone));

          $replacements[$original] = $date->format('F jS, Y');
          break;

      }
    }

    return $replacements;
  }

}

/**
 * Implements hook_token_info().
 */
function access_code_token_info() {

  $info['tokens']['user']['access_code'] = array(
      'name' => t('Access Code'),
      'description' => t('Login access code.'),
  );
  $info['tokens']['user']['access_code_expiration'] = array(
      'name' => t('Access Code Expiration'),
      'description' => t('Date that the access code will stop working.'),
  );

  return $info;
}
