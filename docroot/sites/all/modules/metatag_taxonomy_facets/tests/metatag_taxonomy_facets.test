<?php

/**
 * @file
 * Tests for the Metatag Taxonomy Facets module.
 */

/**
 * Base class for all Metatag Taxonomy Facets test cases.
 */
class MetatagTaxonomyFacetsCase extends DrupalWebTestCase {

  /**
   * Overrides DrupalWebTestCase::setUp().
   */
  public function setUp() {
    $modules[] = 'entity';
    $modules[] = 'metatag';
    $modules[] = 'metatag_taxonomy_facets';
    parent::setUp($modules);
  }

  /**
   * Tests meta information.
   *
   * @return array
   *    meta information array.
   */
  public static function getInfo() {
    return array(
      'name' => 'Metatag Taxonomy Facets',
      'description' => 'Tests Metatag Taxonomy Facets combinations methods.',
      'group' => 'Metatag Taxonomy Facets',
    );
  }

  /**
   * Test facets combinations generation.
   *
   * @covers metatag_taxonomy_facets_get_combinations_info()
   */
  public function testMetatagTaxonomyFacetsGetCombinationsInfo() {
    $searcher = array(
      'name' => 's',
      'label' => 'l',
    );
    $selected_facets = array(
      'a' => array(
        'field' => '1',
        'label' => 'x',
      ),
      'c' => array(
        'field' => '3',
        'label' => 'z',
      ),
      'b' => array(
        'field' => '2',
        'label' => 'y',
      ),
    );
    $combinations = metatag_taxonomy_facets_get_combinations_info($searcher, $selected_facets);

    $expected_combinations = array(
      'taxonomy_facets:s+1+2+3' => array(
        'label' => 'l: x - y - z',
      ),
      'taxonomy_facets:s+2+3' => array(
        'label' => 'l: y - z',
      ),
      'taxonomy_facets:s+1+3' => array(
        'label' => 'l: x - z',
      ),
      'taxonomy_facets:s+1+2' => array(
        'label' => 'l: x - y',
      ),
    );
    $this->assertEqual(serialize($expected_combinations), serialize($combinations), 'Combinations');

    $selected_facets2 = array(
      'a' => array(
        'field' => '1',
        'label' => 'x',
      ),
    );
    $combinations2 = metatag_taxonomy_facets_get_combinations_info($searcher, $selected_facets2);
    $expected_combinations2 = array();
    $this->assertEqual(serialize($expected_combinations2), serialize($combinations2), 'No combinations expected');

    $combinations3 = metatag_taxonomy_facets_get_combinations_info($searcher, $selected_facets2, TRUE);
    $expected_combinations3 = array(
      'taxonomy_facets:s+1' => array(
        'label' => 'l: x',
      ),
    );
    $this->assertEqual(serialize($expected_combinations3), serialize($combinations3), 'Single combination expected');
  }
  
  /**
   * Test searcher's facets combinations saving.
   *
   * @covers metatag_taxonomy_facets_save_combinations()
   */
  public function testMetatagTaxonomyFacetsSaveCombinations() {
    $combinations1 = array(
      array(
        'searcher' => 's',
        'facets' => '1+2+3',
      ),
      array(
        'searcher' => 's',
        'facets' => '2+3',
      ),
      array(
        'searcher' => 's',
        'facets' => '1+3',
      ),
      array(
        'searcher' => 's',
        'facets' => '1+2',
      ),
    );
    
    _metatag_taxonomy_facets_save_combinations(array('s' => $combinations1));
    $this->assertFalse(metatag_taxonomy_facets_combinations_find('s', '2+2'), 'Combination not found');
    $this->assertNotEqual(metatag_taxonomy_facets_combinations_find('s', '1+2'), FALSE, 'Combination found');
    $this->assertNotEqual(metatag_taxonomy_facets_combinations_find('s', '1+3'), FALSE, 'Combination found');
    $this->assertNotEqual(metatag_taxonomy_facets_combinations_find('s', '2+3'), FALSE, 'Combination found');
    $this->assertNotEqual(metatag_taxonomy_facets_combinations_find('s', '1+2+3'), FALSE, 'Combination found');

    $combinations2 = array(
      array(
        'searcher' => 's',
        'facets' => '1+2+3',
      ),
      array(
        'searcher' => 's',
        'facets' => '1+3',
      ),
    );
    _metatag_taxonomy_facets_save_combinations(array('s' => $combinations2));
    $this->assertFalse(metatag_taxonomy_facets_combinations_find('s', '1+2'), 'Combination not found');
    $this->assertFalse(metatag_taxonomy_facets_combinations_find('s', '2+3'), 'Combination not found');
    $this->assertFalse(metatag_taxonomy_facets_combinations_find('s', '2+2'), 'Combination not found');
    $this->assertNotEqual(metatag_taxonomy_facets_combinations_find('s', '1+3'), FALSE, 'Combination found');
    $this->assertNotEqual(metatag_taxonomy_facets_combinations_find('s', '1+2+3'), FALSE, 'Combination found');
  }
}
