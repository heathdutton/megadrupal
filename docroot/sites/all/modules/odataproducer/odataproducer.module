<?php
/**
 * @file
 * ODataProducer module implementation.
 */

/*
 * Hook implementations.
 */

/**
 * Implements hook_boot().
 */
function odataproducer_boot() {
  // Register the ODataProducer class loader.
  spl_autoload_register('odataproducer_autoload_class');
}

/*
 * Module API functions.
 */

/**
 * Get a value indicating whether the ODataProducer library is installed.
 *
 * @return bool
 *   TRUE if the library is installed, otherwise FALSE.
 */
function odataproducer_is_installed() {
  // Get the installed libraries.
  $libraries = libraries_get_libraries();
  // Determine whether the ODataProducer library is installed.
  return isset($libraries['ODataProducer']);
}

/**
 * Get the path to the ODataProducer library.
 *
 * @return string
 *   A path to the ODataProducer library if installed, otherwise FALSE.
 */
function odataproducer_get_library_path() {
  // Get the ODataProducer library path.
  return libraries_get_path('ODataProducer');
}

/**
 * Load an ODataProducer class or interface.
 *
 * @param string $class
 *   The full namespace path of the class or interface.
 *
 * See ODataProducer\Common\ClassAutoLoader
 */
function odataproducer_autoload_class($class) {
  // Check if the class or interface namespace path starts with 'ODataProducer'.
  if (strpos($class, 'ODataProducer') === 0 && ($library_path = odataproducer_get_library_path())) {
    // Convert the class namespace to a path and remove 'ODataProducer/' from
    // the class path.
    $class = drupal_substr(str_replace('\\', '/', $class), 14);
    // Build the path to the requested class file.
    $class_path = DRUPAL_ROOT . "/{$library_path}/{$class}.php";
    // Check if the file exists.
    if (is_file($class_path)) {
      // Require the class file.
      require_once $class_path;
    }
  }
}
