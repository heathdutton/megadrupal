<?php
/**
 * @file
 * Feeds mapper for Atoms.
 */

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * @see FeedsNodeProcessor::getMappingTargets()
 */
function scald_feeds_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);

    if (in_array($info['type'], array('atom_reference'))) {
      $targets[$name] = array(
        'name' => check_plain($instance['label']),
        'callback' => 'scald_feeds_set_target',
        'description' => t('The @label field of the node.', array('@label' => $instance['label'])),
      );
    }
  }

}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * When the callback is invoked, $target contains the name of the field the
 * user has decided to map to and $value contains the value of the feed item
 * element the user has picked as a source.
 */
function scald_feeds_set_target($source, $entity, $target, $value) {
  if (empty($value)) {
    return;
  }

  // Make sure $value is an array of objects of type FeedsEnclosure.
  if (!is_array($value)) {
    $value = array($value);
  }
  foreach ($value as $k => $v) {
    if (!($v instanceof FeedsEnclosure)) {
      if (is_string($v)) {
        $value[$k] = new FeedsEnclosure($v, file_get_mimetype($v));
      }
      else {
        unset($value[$k]);
      }
    }
  }
  if (empty($value)) {
    return;
  }

  $entity_type = $source->importer->processor->entityType();

  // Determine file destination.
  // @todo This needs review and debugging.
  $instance_info = field_info_instance($entity_type, $target, $source->importer->processor->bundle());
  $info = field_info_field($target);
  $data = array();
  if (!empty($entity->uid)) {
    $data[$entity_type] = $entity;
  }

  $destination = 'public://';
  // Populate entity.
  $i = 0;
  $field = isset($entity->$target) ? $entity->$target : array();
  foreach ($value as $v) {
    try {
      $file = $v->getFile($destination);
    }
    catch (Exception $e) {
      watchdog_exception('Feeds', $e, nl2br(check_plain($e)));
    }
    if ($file) {
      $file = (array) $file;
      $sid = _scald_feeds_save_atom($file, $file['filename']);
      $field['und'][$i] = array(
        'sid' => $sid,
      );
      if ($info['cardinality'] == 1) {
        break;
      }
      $i++;
    }
  }
  $entity->{$target} = $field;
}

/**
 * Saves a Scald Atom programmatically from a file.
 */
function _scald_feeds_save_atom($file, $title = NULL) {
  if (is_numeric($file)) {
    $file = (array) file_load($file);
  }
  elseif (!is_object($file) && !is_array($file)) {
    return FALSE;
  }

  $file_array = (array) $file;
  if (!isset($file_array['filename'])) {
    $file = file_load($file_array['fid']);
    $file_array = (array) $file;
  }
  $type = _scald_feeds_get_provider_by_file($file_array);
  $atom = new ScaldAtom($type, 'scald_' . $type);
  $atom->base_id = $file_array['fid'];
  $atom->title = !empty($title) ? $title : $file_array['filename'];
  $file_array['display'] = TRUE;
  $target = '';
  switch ($type) {
    case 'file':
      $target = 'scald_file';
      break;

    case 'image':
    case 'video':
      $target = 'scald_thumbnail';
      break;
  }

  $atom->{$target} = array(
    LANGUAGE_NONE => array(
      0 => $file_array,
    ),
  );
  return scald_atom_save($atom);
}

/**
 * Suggests a Scald provider for the given file.
 *
 * Chooses from file, image and video.
 */
function _scald_feeds_get_provider_by_file($file) {
  $type = 'file';

  $fi = new finfo(FILEINFO_MIME);
  $mime = $fi->buffer(file_get_contents($file['uri']));

  if (strpos($mime, 'image/') === 0) {
    $type = 'image';
  }
  elseif (strpos($mime, 'video/') === 0) {
    $type = 'video';
  }

  return $type;
}
