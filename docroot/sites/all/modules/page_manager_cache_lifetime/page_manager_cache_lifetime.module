<?php
/**
 * @file
 * Allow page manager pages to override the cache_lifetime variable.
 */

/**
 * Implements hook_permission().
 */
function page_manager_cache_lifetime_permission() {
  return array(
    'administer page manager cache lifetime' => array(
      'title' => t('Administer page manager cache lifetime'),
      'description' => t('Override cache expiration variables on page manager pages.'),
    ),
  );
}

/**
 * Implements hook_page_manager_variant_operations_alter().
 */
function page_manager_cache_lifetime_page_manager_variant_operations_alter(&$operations, &$handler) {
  if (user_access('administer page manager cache lifetime')) {
    // Use this obnoxious construct to safely insert our item.
    reset($operations['children']);
    $children_operations = array();
    while (list($key, $value) = each($operations['children'])) {
      $children_operations[$key] = $value;
      if ($key == 'context') {
        $children_operations['cache_lifetime'] = array(
          'title' => t('Cache lifetime'),
          'description' => t('Override the cache lifetime and expiration settings. These are set globally on the !performance_link.', array('!performance_link' => l(t('Performance page'), 'admin/config/development/performance'))),
          'form' => 'page_manager_cache_lifetime_form',
        );
      }
    }
    $operations['children'] = $children_operations;
  }
}

/**
 * Settings form for page manager cache lifetime.
 */
function page_manager_cache_lifetime_form($form, $form_state) {
  $handler = $form_state['handler'];

  $period[-1] = '<' . t('use default') . '>';
  $period += drupal_map_assoc(array(0, 60, 180, 300, 600, 900, 1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400), 'format_interval');
  $period[0] = '<' . t('none') . '>';
  $form['cache_lifetime'] = array(
    '#type' => 'select',
    '#options' => $period,
    '#title' => t('Override the <em>Minimum cache lifetime</em> setting.'),
    '#default_value' => isset($handler->conf['cache_lifetime']['cache_lifetime']) ? $handler->conf['cache_lifetime']['cache_lifetime'] : -1,
  );
  $form['page_cache_maximum_age'] = array(
    '#type' => 'select',
    '#options' => $period,
    '#title' => t('Override the <em>Expiration of cached pages</em> setting.'),
    '#default_value' => isset($handler->conf['cache_lifetime']['page_cache_maximum_age']) ? $handler->conf['cache_lifetime']['page_cache_maximum_age'] : -1,
  );

  return $form;
}

/**
 * Submit callback for page_manager_cache_lifetime_form.
 */
function page_manager_cache_lifetime_form_submit($form, $form_state) {
  $conf = array(
    'cache_lifetime' => $form_state['values']['cache_lifetime'],
    'page_cache_maximum_age' => $form_state['values']['page_cache_maximum_age'],
  );
  $form_state['handler']->conf['cache_lifetime'] = $conf;
}

/**
 * Implements hook_ctools_render_alter().
 *
 * Checks if the current page has cache_lifetime overrides.
 * If so, overrides the cache_lifetime and/or page_cache_maximum_age variable.
 */
function page_manager_cache_lifetime_ctools_render_alter(&$info, &$page, &$context) {
  $handler = $context['handler'];
  if (isset($handler->conf['cache_lifetime'])) {
    // Legacy support for when we had an "enabled" variable.
    if (isset($handler->conf['cache_lifetime']['enabled']) && !$handler->conf['cache_lifetime']['enabled']) {
      return;
    }
    global $conf;
    if (isset($handler->conf['cache_lifetime']['cache_lifetime']) && $handler->conf['cache_lifetime']['cache_lifetime'] >= 0) {
      $conf['cache_lifetime'] = $handler->conf['cache_lifetime']['cache_lifetime'];
    }
    if (isset($handler->conf['cache_lifetime']['page_cache_maximum_age']) && $handler->conf['cache_lifetime']['page_cache_maximum_age'] >= 0) {
      $conf['page_cache_maximum_age'] = $handler->conf['cache_lifetime']['page_cache_maximum_age'];
    }
  }
}
