<?php
/**
 * @file
 * Provides a dashboard for easily adding and managing content.
 */

/**
 * Implements hook_views_api().
 */
function contentment_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function contentment_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function contentment_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'content_types') {
    return '.';
  }
}

/**
 * Implements hook_permission().
 */
function contentment_permission() {
  return array(
    'access contentment dashboard' => array(
      'title' => t('Access contentment dashboard'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function contentment_admin_paths() {
  $paths = array(
    'contentment' => TRUE,
    'contentment/*' => TRUE,
  );

  return $paths;
}

/**
 * Implements hook_menu().
 */
function contentment_menu() {
  $items = array();

  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);

    // Only create child menu items if parent menu item exists
    $menu_link = db_query("SELECT mlid FROM {menu_links} WHERE link_path = :path", array(
      ':path' => 'contentment/' . $type_url_str . '/manage',
    ))->fetchObject();
    if ($menu_link) {
      $items['contentment/' . $type_url_str . '/add'] = array(
        'title' => 'Add',
        'page callback' => 'node_add',
        'page arguments' => array($type->type),
        'access arguments' => array('create ' . $type_url_str . ' content'),
        'file' => 'node.pages.inc',
        'file path' => drupal_get_path('module', 'node'),
        'weight' => 0,
        'type' => MENU_LOCAL_TASK,
      );
      $items['contentment/' . $type_url_str . '/settings'] = array(
        'title' => 'Settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('node_type_form', $type),
        'access arguments' => array('administer content types'),
        'file' => 'content_types.inc',
        'file path' => drupal_get_path('module', 'node'),
        'weight' => 1,
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  return $items;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function contentment_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Only alter form when displayed in dashboard
  if (arg(0) == 'contentment') {
    $node = $form['#node'];

    // Set breadcrumb trail
    $type = node_type_get_type($node->type);
    $breadcrumb = contentment_get_breadcrumb($type);
    drupal_set_breadcrumb($breadcrumb);

    // Add custom submit function
    $form['actions']['submit']['#submit'][] = 'contentment_node_form_submit';
  }
}

/**
 * Form submission handler for contentment_form_node_form_alter().
 */
function contentment_node_form_submit($form, &$form_state) {
  $type = $form_state['values']['type'];
  $type_url_str = str_replace('_', '-', $type);

  // Redirect to Manage page on submission
  if (!empty($form_state['redirect'])) {
    $redirect = explode('/', $form_state['redirect']);

    // Only override redirect if it points to the newly-created node (all other redirects are left intact)
    if ($redirect[0] == 'node' && is_numeric($redirect[1]) && empty($redirect[2])) {
      $form_state['redirect'] = 'contentment/' . $type_url_str;
    }
  }
  else {
    $form_state['redirect'] = 'contentment/' . $type_url_str;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form.
 */
function contentment_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  // Only alter form when displayed in dashboard
  if (arg(0) == 'contentment') {
    $type = $form['#node_type'];

    // Set breadcrumb trail
    $breadcrumb = contentment_get_breadcrumb($type);
    drupal_set_breadcrumb($breadcrumb);

    // Set page title
    drupal_set_title(t('@type settings', array('@type' => $type->name)));

    // Add custom submit function
    $form['#submit'][] = 'contentment_node_type_form_submit';
  }
}

/**
 * Form submission handler for contentment_form_node_type_form_alter().
 */
function contentment_node_type_form_submit($form, &$form_state) {
  // Reload form on submission (unless deleting)
  if ($form_state['clicked_button']['#id'] == 'edit-submit') {
    $form_state['redirect'] = NULL;
  }
}

/**
 * Implements hook_page_alter().
 */
function contentment_page_alter(&$page) {
  // Add custom CSS to dashboard panel
  if (arg() == array('contentment') || arg() == array('contentment', 'dashboard')) {
    drupal_add_css(drupal_get_path('module', 'contentment') . '/contentment_dashboard.css');
  }
}

/**
 * Implements hook_views_pre_render().
 */
function contentment_views_pre_render(&$view) {
  // Set breadcrumb trail for content types manage views
  if ($view->name == 'contentment_manage') {
    $breadcrumb = contentment_get_breadcrumb();
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Create a breadcrumb trail for dashboard pages.
 *
 * @param $type
 *   A node type object.
 */
function contentment_get_breadcrumb($type = NULL) {
  $breadcrumb = array();

  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(t('Dashboard'), 'contentment');

  if ($type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $breadcrumb[] = l($type->name, 'contentment/' . $type_url_str);
  }

  return $breadcrumb;
}

/**
 * Create links to the node/add/* page for each content type.
 */
function contentment_node_add_links() {
  $links = array();

  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);

    $links[$type->type] = array(
      'title' => $type->name,
      'href' => 'contentment/' . $type_url_str . '/add',
    );
  }

  return theme('links', array('links' => $links));
}

