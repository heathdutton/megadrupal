<?php

/**
 * @file
 * URL replacement by implementing a Drupal filter and helper functions.
 */

$_link_replace_filter_setting_target_content_type = '';
$_link_replace_filter_setting_target_field_value = '';

/**
 * Implements hook_help().
 */
function link_replace_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#link_replace_filter':
      $output = '<p>' . t('To use the Link Replace Filter, simply enable the Link Replace Filter for one or more of your <a href="@text_formats">text formats</a>.', array('@text_formats' => url('admin/config/content/formats'))) . '</p><p>';
      $output .= t('If you also enable other filters that act on links make sure that the one that needs to take precedence is the last one called in the Filter processing order.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_filter_info().
 */
function link_replace_filter_filter_info() {
  $filters['link_replace_filter'] = array(
    'title' => t('Link Replace Filter'),
    'description' => t('Conditional replacement of URLs within anchors in free text.'),
    'process callback' => '_link_replace_filter_filter_process',
    'settings callback' => '_link_replace_filter_filter_settings',
    'default settings' => array(
      'link_replace_filter_display_tip' => 1,
      'link_replace_filter_target_content_type' => '',
    ),
    'tips callback' => '_link_replace_filter_filter_tips',
  );
  return $filters;
}

/**
 * Settings callback for the link_replace_filter filter.
 */
function _link_replace_filter_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['link_replace_filter_target_content_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine name of the target content type (e.g. "link").'),
    '#default_value' => $filter->settings['link_replace_filter_target_content_type'],
    '#maxlength' => 255,
    '#description' => t('Content time that has a field whose value we need.'),
  );

  $settings['link_replace_filter_target_field_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Select a replacement URL using the tokens below.'),
    '#default_value' => $filter->settings['link_replace_filter_target_field_value'],
    '#maxlength' => 255,
    '#description' => t('Select a replacement field value using the tokens below (e.g. [node:field_url]. [node:field_link] is also allowed for now -- see https://drupal.org/node/1111034).'),
  );
  $settings['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('node'), // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
    '#global_types' => TRUE, // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
    '#click_insert' => TRUE, // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
  );

  return $settings;
}


/**
 * Filter process callback for link_replace_filter filter.
 *
 * @param $text
 *   Text to be filtered. Regex pattern matches links to be processed.
 *
 * @return
 *   Filtered text with processed links including HTML title attributes.
 */
function _link_replace_filter_filter_process($text, $filter) {
  global $_link_replace_filter_setting_target_content_type;
  global $_link_replace_filter_setting_target_field_value;
  $_link_replace_filter_setting_target_content_type = $filter->settings['link_replace_filter_target_content_type'];
  $_link_replace_filter_setting_target_field_value = $filter->settings['link_replace_filter_target_field_value'];
  $pattern = '%<a([^>]*?href="([^"]+?)"[^>]*?)>%i';
  return preg_replace_callback($pattern, '_link_replace_filter_filter_text_process', $text);
}

/**
 * Callback for _link_replace_filter_filter_process().
 */
function _link_replace_filter_filter_text_process($matches) {
  global $_link_replace_filter_setting_target_content_type;
  global $_link_replace_filter_setting_target_field_value;
  global $is_https;

  //dpm('******************************************************************************************************************');
  //dpm($matches);
  /*
   * $matches contains something like:
   * 0 (String, 49 characters ) <a href="http://d7.local/sk/content/google-link">
   * 1 (String, 46 characters ) href="http://d7.local/sk/content/google-link"
   * 2 (String, 38 characters ) http://d7.local/sk/content/google-link
   */
  if (strpos(strtolower($matches[1]), 'href=') !== FALSE) {
    if (@$matches[2] <> ''){

      $protocol = 'http';
      if ($is_https) $protocol .= 's';
      $drupaldomain = $protocol . "://" . $_SERVER['HTTP_HOST'];
      //dpm($drupaldomain);
      // E.g. http://d7.local or  https://d7.local

      /*
       * If this is a relative URL, normalize it by adding the current domain to it.
       *
       * Cases considered:
       * full aliased local link http://d7.local/sk/content/google-link
       * full node local link http://d7.local/sk/node/6
       * doubleslash relative aliased local link //d7.local/sk/content/google-link
       * doubleslash relative node local link //d7.local/sk/node/6
       * relative aliased local link /sk/content/google-link
       * relative node local link /sk/node/6
       * noslash relative aliased local link sk/content/google-link
       * noslash relative node local link sk/node/6
       */
      $fullurl = $matches[2];
      if (substr($fullurl,0,2) == '//'){ // URLs like //d7.local/sk/content/test
        $fullurl = $protocol.':'.$fullurl;
        //dpm('x');
      }
      if (substr($fullurl,0,1) == '/'){ // Could still be a relative one like /sk/content/test
        $fullurl = $drupaldomain.$fullurl;
        //dpm('y');
      }
      if (substr($fullurl,0,4) <> 'http'){ // Could still be a relative one like sk/content/test
        $fullurl = $drupaldomain.'/'.$fullurl;
        //dpm('z');
      }
      //dpm('$fullurl: '.$fullurl);
      // So now we surely have an absolute URL, e.g. http://d7.local/sk/content/google-link or https://d7.local/sk/content/google-link

      // Throw out if not an URL on this domain (http or https)
      if (
        substr($fullurl,0,strlen($drupaldomain)) == $drupaldomain
        OR
        str_replace('https://', 'http://', substr($fullurl,0,strlen($drupaldomain)-1)) == str_replace('https://', 'http://', $drupaldomain )
      )
      {
        //dpm('URL FROM THIS WEBSITE');
      }
      else{
        //dpm('URL NOOOOOOOOOOOOOOOOOOOOOOOT FROM THIS WEBSITE');
        return $matches[0]; // Just return what there was.
      }

      /*
       * path (String, 22 characters ) sk/content/google-link
       * query (Array, 0 elements)
       * fragment (String, 0 characters )
       */
      $parsedurl = link_replace_filter_get_path_from_url($fullurl);
      //dpm($parsedurl);

      // Let's get clean relative link, e.g. content/google-link
      $alias = $parsedurl['path']; // "some/path/to/a/page"
      $languages = language_list('enabled'); // Languages enabled on this site.
      //dpm($languages);
      $splitlanguage = language_url_split_prefix($alias, $languages[1]);
      //dpm($splitlanguage);
      /*
       * 0 (Object) stdClass
       * 1 (String, 19 characters ) content/google-link
       */
      if ($splitlanguage[0] !== FALSE){ // If has language prefix, take the relative URL without the prefix.
        $aliasornodepath = $splitlanguage[1];
      }
      else { // If no language prefix.
        $aliasornodepath = $parsedurl['path'];
      }
      //dpm($aliasornodepath);

      // Let's get the nid.
      $node_path = explode('/', drupal_get_normal_path($aliasornodepath));
      $nid = $node_path[1];
      //dpm('NID: '.$nid);

      // Load the node the link refers to.
      $loadednode = node_load($nid);
      //dpm($loadednode);

      // Only continue if the node is of the specified content type.
      if ($_link_replace_filter_setting_target_content_type <> '' AND @$loadednode->type == $_link_replace_filter_setting_target_content_type){
        //dpm('working with: '.$loadednode->type);
        if ($_link_replace_filter_setting_target_field_value <> ''){

          /** [node:field_url] is in the list of tokens but does not work -- perhaps due to https://drupal.org/node/1111034
           * so let's allow using [node:field_link] which returns the whole HTML anchor such as: <a href="www.something.com">Click here</a>
           *
          */
          $fieldvalue = token_replace($_link_replace_filter_setting_target_field_value, array('node' => $loadednode));
          preg_match_all('/<a[^>]+href=([\'"])(.+?)\1[^>]*>/i', $fieldvalue, $geturl);
          if (!empty($geturl[2][0])){
            # Found a link.
            //dpm('goturl: '.$geturl[2][0]);
            $fieldurl = $geturl[2][0];
          }
          else
          {
            //dpm('usewhatwasentered:'.$fieldvalue);
            $fieldurl = $fieldvalue;
          }
        }
        return str_replace('"'.$matches[2].'"','"'.$fieldurl.'"',$matches[0]);
      }
      else{
        // Link to another content type!
        //dpm('Link to another content type!');
        return $matches[0]; // Just return what there was.
      }
    }
  }
  else {
    // Should not get here but if so, just replace by anchor that was there (no change).
    return $matches[0];
  }
}

/**
 * Finds a value by key
 * ADAPTED from http://stackoverflow.com/a/3975613/269383
 */
function link_replace_filter_array_search_key( $needle_key, $array ) {
  foreach($array AS $key=>$value){
    if($key == $needle_key) return $value;
    if(is_array($value)){
      if( ($result = link_replace_filter_array_search_key($needle_key,$value)) !== false)
        return $result[$needle_key];
    }
  }
  return false;
}

/**
 * Returns internal path, query and fragment from external URL
 * http://drupal.stackexchange.com/a/82483/196
 */
function link_replace_filter_get_path_from_url($url, $normal_path = TRUE) {
  global $base_path;
  // Get hostname
  preg_match("/^(https?:\/\/)?([^\/]+)/i", $url, $domain);
  // Format localhost + base_path (http://hostname/drupalbase)
  $base = (isset($domain[0]) ? $domain[0] : '') . $base_path;
  // If $url contains $base, remove the $base part
  if (strpos($url, $base) === 0) {
    $path = str_replace($base, '', $url);
  }
  // $url is presumed to be without $base part (internal path?)
  else {
    $path = $url;
  }
  // Parse the path (without $base)
  $result = drupal_parse_url($path);
  // Get normal path
  if ($normal_path) {
    $result['path'] = drupal_get_normal_path($result['path']);
  }

  return $result;
}

/**
 * Callback for $filters['link_replace_filter']['tips callback'] within
 * link_replace_filter_filter_info().
 */
function _link_replace_filter_filter_tips($filter, $format, $long = FALSE) {
  if ($filter->settings['link_replace_filter_display_tip']) {
    return t('Replaces URL in anchors by a given field value in a given content type.');
  }
}
