<?php

/**
 * @file
 * adds a formatter for text fields for display embedded Vines
 *
 */


/**
  * Implement hook_help()
  */
function vine_help($path, $arg) {
  switch ($path) {
    case 'admin/help#vine':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This modules allows you to embed Vine's posts easily.") . '<p>';
      $output .= '<p>' . t("After installing this module, and enabled it...") . '<br />';
      $output .= '<p>' . t("2-steps Configuration:") . '</p>';
      $output .= '<ol><li>' . t("In any content type use or add a") . ' <strong>' . t('Field') . '</strong> ' . t("of the type") . ' <strong>text</strong>.</li>';
      $output .= '<li>' . t("Then, set") . ' <strong>' . t("Embed Vine") . '</strong> ' . t("Format on Display settings for chosen field.") . '</li>';
      $output .= '</ol><p>' . t("Simply usage: Paste Vine\'s post URL on chosen field") . '<br />';
      $output .= t('e.g.') . ' <a href="https://vine.co/v/hmpvn259tjt" title="https://vine.co/v/hmpvn259tjt" rel="nofollow">https://vine.co/v/hmpvn259tjt</a></p>';
      $output .= '<p>' . t("Further information:") . '</p>';
      $output .= '<p>' . t("This module comes with standard formats suggested by Vine.") . '</p>';
      $output .= '<p>' . t("You can choose between two styles:") . ' <strong>Simple</strong> ' . t('and') . ' <strong>Postcard</strong>;' . '<br />';
      $output .= t("and between three sizes") . ': <strong>Large</strong> (600px), <strong>Medium</strong> (480px) and <strong>Small</strong> (320px)' . '</p>';
      $output .= '<p>' . t("Include Vines on your articles and get great social video impact on your websites") . '</p>';
      $output .= '<p>' . t("A little experience with Drupal was needed for developing this simple module.") . '<br />';
      $output .= "The base code was taken from this tutorial" . '<br /><a href="http://www.metaltoad.com/blog/drupal-7-tutorial-creating-custom-formatters" rel="nofollow">' . t("Drupal 7 Tutorial: Creating Custom Formatters with the Field API") . '</a> ' . t('by') . ' <a href="https://drupal.org/user/566584" rel="nofollow">Dann Linn</a></p>';
      return $output;
  }
}
 

/**
 * Implementation of hook_menu().
 */
function vine_menu() {
  // View help topic index.
  $items['admin/vine'] = array(
    'title' => 'Vine help',
    'page callback' => 'vine_index_page',
    'access arguments' => array('view advanced help index'),
    'weight' => 9,
  );
  return $items;
}


function vine_index_page() {
  $output = theme('advanced_help_topic', array(
    'module' => 'vine',
    'topic' => 'about-vine',
  ));
  $output .= '&nbsp;' . t('Click the help icon to view some help about Vine module');
  return $output;
}


/**
 * Implements hook_field_formatter_info().
 */
function vine_field_formatter_info() {
  return array(
    'vine_formatter' => array( //Machine name of the formatter
      'label' => t('Embedded Vine'),
      'field types' => array('text'), //This will only be available to text fields
      'settings'  => array( //Array of the settings we'll create
        'size' => '480px', //give a default value for when the form is first loaded
        'style' => 'simple', //give a default value for when the form is first loaded
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function vine_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  //Add your select box
  $element['size'] = array(
    '#type'           => 'select',                           // Use a select box widget
    '#title'          => t('Vine Size'),                   // Widget label
    '#description'    => t('Select the size for embedded Vine'), // Helper text
    '#default_value'  => $settings['size'],              // Get the value if it's already been set
    '#options'        => array(
      '320px'  => 'Small (320px)',
      '480px' => 'Medium (480px)',
      '600px'  => 'Large (600px)',
    ),
  );
  $element['style'] = array(
    '#type'           => 'select',                           // Use a select box widget
    '#title'          => t('Vine Style'),                   // Widget label
    '#description'    => t('Select the style for embedded Vine'), // Helper text
    '#default_value'  => $settings['style'],              // Get the value if it's already been set
    '#options'        => array(
      'simple'  => 'Simple',
      'postcard' => 'Postcard',
    ),
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function vine_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Use a @size embedded Vine with "@style" style', array(
    '@size'     => $settings['size'],
    '@style'  => $settings['style'],
  )); // we use t() for translation and placeholders to guard against attacks
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function vine_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); // Initialize the var
  $settings = $display['settings']; // get the settings
  $size = $settings['size']; // The Size setting selected in the settings form
  $style = $settings['style']; // The Style assigned in settings
  foreach ($items as $delta => $item) {
    $safe_value = $item['safe_value']; // Getting the actual value
  }
  if (isset($safe_value) ) {
    $element[0]['#markup'] = '<iframe class="vine-embed" src="' . $safe_value . '/embed/' . $style . '" width="' . $size . '" height="' . $size . '" frameborder="0"></iframe><script async src="//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>'; // Assign it to the #markup of the element
  }
  return $element;
}
