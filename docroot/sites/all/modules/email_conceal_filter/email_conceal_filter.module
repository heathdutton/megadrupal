<?php
/**
 * @file
 * A filter to conceal email addresses and transforms them to a link that will send to contact form.
 */

// Random string for encryption
define('EMAIL_CONCEAL_ENCRYPTION_KEY', '5AC43B83');

// Default fallback email
define('EMAIL_CONCEAL_DEFAULT_EMAIL', variable_get('site_mail', ''));

/**
 * Implements hook_menu().
 */
function email_conceal_filter_menu() {
  $items['contact/mail'] = array(
    'title' => 'Contact',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_conceal_filter_form'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Form constructor for the site-wide contact form.
 *
 * @see email_conceal_filter_form_validate()
 * @see email_conceal_filter_form_submit()
 */
function email_conceal_filter_form($form, &$form_state) {
  global $user;

  $contact_token = check_plain($_GET['contact_token']);
  // Now decrypt the contact_token email
  $recipient = rtrim(mcrypt_decrypt(MCRYPT_DES, EMAIL_CONCEAL_ENCRYPTION_KEY, base64_decode($contact_token), MCRYPT_MODE_ECB));
  
  // GU doesn't want to see this. Although it's more usable
  //$recipient_name = _email_conceal_filter_obfuscate($recipient);
  $recipient_name = '<b>' . t('Undisclosed recipient') . '</b>';

  if (!empty($_GET['contact_token']) && valid_email_address($recipient)) {
    if ($account = user_load_by_mail($recipient)) {
      $recipient = $account->mail;
      $recipient_name = theme('username', array('account' => $account));
    }
  }
  else {
    drupal_set_message(t('An error occured with the recipient address. You can still send a message using the form below, but not to the intended recipient; this message will be sent to the website\'s moderators.'), 'warning');
    $recipient = EMAIL_CONCEAL_DEFAULT_EMAIL;
  }

  $form['recipient'] = array(
    '#type' => 'value',
    '#value' => $recipient,
  );
  $form['to'] = array(
    '#type' => 'item',
    '#title' => t('To:'),
    '#markup' => '<b>' . $recipient_name . '</b>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your name'),
    '#maxlength' => 255,
    '#default_value' => $user->uid ? format_username($user) : '',
    '#required' => TRUE,
  );
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Your e-mail address'),
    '#maxlength' => 255,
    '#default_value' => $user->uid ? $user->mail : '',
    '#required' => TRUE,
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#maxlength' => 50,
    '#required' => TRUE,
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#rows' => 8,
    '#required' => TRUE,
  );
  // We do not allow anonymous users to send themselves a copy
  // because it can be abused to spam people.
  $form['copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send yourself a copy.'),
    '#access' => $user->uid,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send message'),
  );
  return $form;
}

/**
 * Form validation handler for email_conceal_filter_form().
 *
 * @see email_conceal_filter_form_submit()
 */
function email_conceal_filter_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('You must enter a valid e-mail address.'));
  }
}

/**
 * Form submission handler for email_conceal_filter_form().
 *
 * @see email_conceal_filter_form_validate()
 */
function email_conceal_filter_form_submit($form, &$form_state) {
  global $user, $language;

  $values = $form_state['values'];
  $values['sender'] = $user;
  $values['sender']->name = $values['name'];
  $values['sender']->mail = $values['mail'];

  // Save the anonymous user information to a cookie for reuse.
  if (!$user->uid) {
    user_cookie_save(array_intersect_key($values, array_flip(array('name', 'mail'))));
  }

  // Get the to and from e-mail addresses.
  $to = $values['recipient'];
  $from = $values['sender']->mail;

  // Send the e-mail in the requested user language.
  drupal_mail('email_conceal_filter', 'email_conceal_filter_mail', $to, $language, $values, $from);

  // Send a copy if requested, using current page language.
  if ($values['copy']) {
    drupal_mail('email_conceal_filter', 'email_conceal_filter_mail', $from, $language, $values, $from);
  }

  watchdog('mail', '%sender-name (@sender-from) sent %recipient-name an e-mail.', array('%sender-name' => $values['name'], '@sender-from' => $from, '%recipient-name' => $values['recipient']->name));

  // Jump to the contacted user's profile page.
  drupal_set_message(t('Your message has been sent.'));
  $form_state['redirect'] = user_access('access user profiles') ? 'user/' . $values['recipient']->uid : '';
}

/**
 * Implementation of hook_filter_info()
 */
function email_conceal_filter_filter_info () {
  $filters['email_conceal_filter_filter'] = array(
    'title' => t('Email conceal'),
    'description' => t('A filter to conceal email addresses and transforms them to a link that will send to a form to contact the intended email.<br /><b>This filter will not do its work unless an email is already linked. So always make sure it works after URL Filter.</b>'),
    'process callback' => '_email_conceal_filter',
    'settings callback' => '_email_conceal_filter_settings',
    //'tips callback'  => '_email_conceal_filter_filter_tips',
    'cache' => FALSE,
    'default settings' => array(
      'email_conceal_filter_domains',
    ),
    // Make this weight higher so it works after URL Filter.
    'weight' => 999,
  );
  return $filters;
}

/**
 * Implements hook_mail().
 */
function email_conceal_filter_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array(
    '!site-name' => variable_get('site_name', 'Drupal'),
    '!subject' => $params['subject'],
    '!form-url' => url($_GET['q'], array('absolute' => TRUE, 'language' => $language)),
    '!sender-name' => format_username($params['sender']),
    '!sender-url' => $params['sender']->uid ? url('user/' . $params['sender']->uid, array('absolute' => TRUE, 'language' => $language)) : $params['sender']->mail,
  );

  switch ($key) {
    case 'email_conceal_filter_mail':
      $variables += array(
        '!recipient-edit-url' => url('user/' . $params['recipient']->uid . '/edit', array('absolute' => TRUE, 'language' => $language)),
      );
      $message['subject'] .= t('[!site-name] !subject', $variables, array('langcode' => $language->language));
      $message['body'][] = t('Hello,', array(), array('langcode' => $language->language));
      $message['body'][] = t("!sender-name (!sender-url) has sent you a message via a contact form (!form-url) at !site-name.", $variables, array('langcode' => $language->language));
      $message['body'][] = t('Message:', array(), array('langcode' => $language->language));
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Settings form for the email_conceal_filter_filter_info() filter
 */
function _email_conceal_filter_settings($form, &$form_state, $filter) {
  $settings['email_conceal_filter_domains'] = array(
    '#type' => 'textfield',
    '#title' => t('Only conceal emails ending with domain'),
    '#default_value' => isset($filter->settings['email_conceal_filter_domains']) ? $filter->settings['email_conceal_filter_domains'] : '',
    '#weight' => 1,
    '#description' => t('Type in the domain name (that part after @ sign in an email) that you wish to conceal. You can add more than one by separating each with commas, or leave blank to conceal all email address.'),
    '#element_validate' => array('_email_conceal_filter_settings_validate'),
  );
  return $settings;
}

function _email_conceal_filter_settings_validate($form, &$form_state, $filter) {
  if ($form_state['values']['filters']['email_conceal_filter_filter']['status']) {
    $domains = $form_state['values']['filters']['email_conceal_filter_filter']['settings']['email_conceal_filter_domains'];

    if (!empty($domains)) {
      // Remove spaces
      $form_state['values']['filters']['email_conceal_filter_filter']['settings']['email_conceal_filter_domains'] = str_replace(' ', '', $form_state['values']['filters']['email_conceal_filter_filter']['settings']['email_conceal_filter_domains']);

      $domain_regex = '/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$/';
      $domains_array = explode(',', $domains);
      foreach ($domains_array as $domain) {
        if (!preg_match($domain_regex, trim($domain))) {
          form_set_error('filters][email_conceal_filter_filter][settings][email_conceal_filter_domains', t('Domain name %domain is invalid.', array('%domain' => $domain)));
        }
      }
    }
  }
}

/**
 * Filter callbacks.
 */
function _email_conceal_filter($text, $filter, $format) {
  // Match domain names if specified
  if (!empty($filter->settings['email_conceal_filter_domains'])) {
    $domains_array = explode(',', $filter->settings['email_conceal_filter_domains']);
    $domains = implode('|', $domains_array);
    $email_text = "([A-Za-z0-9._%-]+)\@(" . str_replace('.', '\.', $domains) . ")";
  }
  // Match all occurences if no domain name is specified 
  else {
    $email_text = "([A-Za-z0-9._%-]+)\@([A-Za-z0-9._%-]+)\.([A-Za z]{2,4})";
  }

  $email_mailto = "/\"mailto:$email_text(\??[^\"]*)\"/i";

  /**
   * @todo
   * This function was supposed to make the filter work without depending on URL Filter.
   * Unfortunatly this will take some time till midnight on a Friday. So we will just depend on URL Filter
   *   and make this filter work after URL Filter.
   */
  //$text = _email_conceal_filter_link_emails($text, $email_text);

  // Replace the mailto value with the link to the webform
  $text = preg_replace_callback($email_mailto, function($match) {
    $mail_to = $match[0];
    $email = substr($match[0], 8, -1);
    $email_encrypted = base64_encode(mcrypt_encrypt(MCRYPT_DES, EMAIL_CONCEAL_ENCRYPTION_KEY, $email, MCRYPT_MODE_ECB));
    return url("contact/mail", array("query" => array("contact_token" => $email_encrypted, "destination" => $_GET['q'])));
  }, $text);

  // Now replace the text inside the <a href="mailto:"> tag
  $text = preg_replace_callback('/' . $email_text . '/i', '_email_conceal_filter_obfuscate', $text);

  return $text;
}

function _email_conceal_filter_obfuscate($match) {
  $obfuscation_char = '.'; $obfuscation = '';

  if (!is_array($match)) {
    // Below needs refactoring for better array manipulation
    $match = array($match);
    $email_array = explode('@', $match[0]);
    $match[] = $email_array[0];
    $match[] = $email_array[1];
  }
  // Not working and therefore we're doing a workaround
  //$test = preg_replace('/([A-Za-z0-9._%+-])/g', '*', $match[1]);
  for ($i = 0; $i < strlen($match[1]) -2; $i++) $obfuscation .= $obfuscation_char;
  $email_obfuscated = substr($match[1], 0, 2) . $obfuscation . '[at]' . $match[2];
  $email_obfuscated .=  (!empty($match[3])) ? '.' . $match[3] : '';

  return $email_obfuscated;
}


/**
 * For some reason (possible token replacement) some fields do not get processed when they use the Filter formats
 * required to obfuscate emails.
 * For this reason, this is a workaround to preprocess fields and reapply the filter format again. 
 */
function email_conceal_filter_preprocess_field(&$variables) {
  // In the future, any field we want to obfuscate can be added to this array
  $custom_fields_to_obfuscate = array('contact_user');
  if (isset($variables['element']['#field_name']) && in_array($variables['element']['#field_name'], $custom_fields_to_obfuscate)) {
    $element = $variables['element'];
    $markup = $variables['items'][0]['#markup'];
    /** 
     * We will use the Filter callback function to process the HTML to use the filter settings.
     * This will require laoding the filter.
     */
    $filter = filter_list_format('raw_html');
    $variables['items'][0]['#markup'] = _email_conceal_filter($markup, $filter['email_conceal_filter_filter'], array());
  }
}

/**
 * Process emails that are not linked before we replace them
 * This function used same code chunks from filter.module _filter_url function. But only to process email address, not links.
 *   We leave the rest for _filter_url to process as we're only concerned with emails. 
 
function _email_conceal_filter_link_emails($text, $email_pattern) {
  // Tags to skip and not recurse into.
  $ignore_tags = 'a|script|style|code|pre';

  // HTML comments need to be handled separately, as they may contain HTML
  // markup, especially a '>'. Therefore, remove all comment contents and add
  // them back later.
  _filter_url_escape_comments('', TRUE);
  $text = preg_replace_callback('`<!--(.*?)-->`s', '_filter_url_escape_comments', $text);
  
  // Split at all tags; ensures that no tags or attributes are processed.
  $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
  // PHP ensures that the array consists of alternating delimiters and
  // literals, and begins and ends with a literal (inserting NULL as
  // required). Therefore, the first chunk is always text:
  $chunk_type = 'text';
  // If a tag of $ignore_tags is found, it is stored in $open_tag and only
  // removed when the closing tag is found. Until the closing tag is found,
  // no replacements are made.
  $open_tag = '';

  for ($i = 0; $i < count($chunks); $i++) {
    if ($chunk_type == 'text') {
      // Only process this text if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // If there is a match, inject a link into this chunk via the callback
        // function contained in $task.
        $chunks[$i] = preg_replace_callback($email_pattern, '_filter_url_parse_email_links', $chunks[$i]);
      }
      // Text chunk is done, so next chunk must be a tag.
      $chunk_type = 'tag';
    }
    else {
      // Only process this tag if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // Check whether this tag is contained in $ignore_tags.
        if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
          $open_tag = $matches[1];
        }
      }
      // Otherwise, check whether this is the closing tag for $open_tag.
      else {
        if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
          $open_tag = '';
        }
      }
      // Tag chunk is done, so next chunk must be text.
      $chunk_type = 'text';
    }
  }

  $text = implode($chunks);
  // Revert back to the original comment contents
  _filter_url_escape_comments('', FALSE);
  $text = preg_replace_callback('`<!--(.*?)-->`', '_filter_url_escape_comments', $text);

  return $text;
}
 */
