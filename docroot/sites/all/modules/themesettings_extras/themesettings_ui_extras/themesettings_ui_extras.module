<?php

/**
 * @file
 *
 * Improves the Logo and Shortcut icon theme settings UI.
 * Replaces 'Toggle display' and 'Use default' checkboxes with radio buttons,
 * and provides javascript behaviour to show/hide custom path and file upload
 * elements.
 *
 * Stored themesettings variables are unaffected by this module. Validation
 * functions ensure that theme_settings variables are stored in the same format
 * as used by Drupal core. The module can be enabled/disabled at will with no
 * loss of settings.
 *
 * @see system_theme_settings()
 */


/**
 * UI improvements for logo and shortcut icon theme settings
 *
 * Implements hook_form_alter().
 */
function themesettings_ui_extras_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'system_theme_settings':

      // we don't receive $key parameter like system_theme_settings()
      $key = _themesettings_ui_extras_get_theme_settings_key();

      $features = array('logo', 'favicon');

      // find out the features supported by the theme
      if (!empty($key)) {
        $themes = list_themes();
        $supported_features = $themes[$key]->info['features'];
      }

      foreach ($features as $feature) {
        if (!$key || in_array($feature, $supported_features)) {

          // remove default logo checkboxes provided by Drupal core
          unset($form['theme_settings']["toggle_{$feature}"]);
          unset($form[$feature]["default_{$feature}"]);

          // ensure we stay l10n-compatible with user-interface text for favicon.
          // machine-name is favicon, but english human-readable name is 'shortcut icon'. awkward!
          $feature_label = ($feature == 'favicon') ? 'shortcut icon' : 'logo';

          // replace the checkboxes with radio buttons
          $form[$feature]["{$feature}_display"] = array(
            '#type' => 'radios',
            '#title' => t('Display !feature', array('!feature' => $feature_label)),
            '#description' => t('Whether the !feature should be displayed.', array('!feature' => $feature_label)),
            '#weight' => -1,
            '#options' => array(
              'none' => t('No !feature', array('!feature' => $feature_label)),
              'default' => t('Default !feature', array('!feature' => $feature_label)),
              'custom' => t('Custom !feature', array('!feature' => $feature_label)),
            ),
            '#default_value' => _themesettings_ui_extras_get_radio_default($feature, $key),
            '#element_validate' => array('_themesettings_ui_extras_validate_radios'),
          );

          // modify settings container states
          $form[$feature]['settings']['#states']['visible'] = array(
            'input[name="' . $feature . '_display"]' => array('value' => 'custom'),
          );
        }
      }
  }
}

/**
 * Validation function to store theme_settings in Drupal core format.
 *
 * Checks which radio button was selected, then converts that to
 * checkbox values as used by Drupal core.
 */
function _themesettings_ui_extras_validate_radios($element, &$form_state) {

  list($feature) = explode("_display", $element['#name']);

  switch ($form_state['values']["{$feature}_display"]) {
    case 'none':
      $form_state['values']["toggle_{$feature}"] = 0;
      // best to set a default value, in case module disabled later...
      $form_state['values']["default_{$feature}"] = 1;
      break;
    case 'default':
      $form_state['values']["toggle_{$feature}"] = 1;
      $form_state['values']["default_{$feature}"] = 1;
      break;
    case 'custom':
      $form_state['values']["toggle_{$feature}"] = 1;
      $form_state['values']["default_{$feature}"] = 0;
      break;
  }
  // no need to store this
  unset($form_state['values']["{$feature}_display"]);
}


/**
 * Helper function for themesettings_ui_extras_form_alter()
 *
 * Deduce which radio button to treat as the #default_value
 * for the new radio buttons.
 *
 * @param $feature
 *   The name of the feature setting to be retrieved.
 *   Allowed values: logo|favicon
 *
 * @param $theme
 *   The machine name of a given theme; defaults to the current theme
 *
 * @return
 *   Default value for radio button set.
 *   Will be one of: none, default, custom.
 */
function _themesettings_ui_extras_get_radio_default($feature, $theme = NULL) {

  // validate feature parameter
  $allowed_features = array('logo', 'favicon');
  if (!in_array($feature, $allowed_features, TRUE)) {
    return;
  }

  // deduce radio button setting from core theme settings
  if (theme_get_setting("toggle_$feature", $theme) == 0) {
    return 'none';
  }
  elseif (theme_get_setting("default_$feature", $theme) == 1) {
    return 'default';
  }
  else {
    return 'custom';
  }
}


/**
 * helper function to get theme key for theme settings page.
 *
 * if we don't receive $key parameter like system_theme_settings()
 * we can get it from path, i.e. 'admin/appearance/settings/THEMENAME'
 *
 * NOTE: this is NOT the active theme being used to display the page; it is the
 * theme currently being configured on the theme settings form.
 *
 * @return
 *   machine name of the theme for which the theme settings page is
 *   being displayed. In case of the global settings, empty string is returned.
 */
function _themesettings_ui_extras_get_theme_settings_key() {
  $key = arg(3);
  if ($key == "global") { // undesirable side-effect of admin_menu.module
    $key = '';
  }
  return $key;
}
