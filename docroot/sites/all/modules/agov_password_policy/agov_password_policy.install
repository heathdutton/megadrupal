<?php
/**
 * @file
 * Install file for password policy.
 */

/**
 * Implements hook_install().
 */
function agov_password_policy_install() {

  // Stores the state of the policies.
  $policies_ready = 1;

  // Fetch policies.
  $policies = agov_password_policy_get_policies();

  // If an existing policy is present and in use (from the aGov installer),
  // don't enable other restrictions, just install them.
  $existing = _agov_password_policy_install_check_existing();
  if (!empty($existing)) {
    foreach ($existing as $row) {
      if ($row['name'] == 'Australian Government DSD Policy' && $row['enabled'] == 1) {

        // A valid and active policy is installed. Don't enable our new ones.
        drupal_set_message('An active ISM compatible password policy was found. New policies have not been enabled. You may wish to check these settings.');

        // We're going to indicate later that policies have NOT been configured
        // to standard.
        $policies_ready = 0;

        // Set new policies to disabled.
        foreach (array_keys($policies) as $index) {
          $policies[$index]['enabled'] = 0;
        }
      }
    }
  }

  // Insert the policy definition.
  foreach ($policies as $settings) {
    agov_password_policy_create_policy($settings);
  }

  // Show restrictions on password pages, to help users pick safer passwords.
  variable_set('password_policy_show_restrictions', 1);

  // Mark that we have setup password policies correctly.
  if ($policies_ready == 1) {
    agov_password_policy_warning_disable();
  }
  else {
    agov_password_policy_warning_enable();
  }
}


/**
 * Implements hook_uninstall().
 */
function agov_password_policy_uninstall() {

  drupal_set_message('To remove aGov Password Policy policies, please delete them manually.');
}

/**
 * Check if existing policies are present.
 *
 * @return DatabaseStatementInterface|null
 *   An iterator object containing any policies.
 */
function _agov_password_policy_install_check_existing() {

  $existing = db_select('password_policy', 'p', array(
    'fetch' => PDO::FETCH_ASSOC,
    'target' => 'slave',
  ))->fields('p', array(
      'pid',
      'name',
      'enabled',
      'description',
      'created',
      'weight',
    ))->orderBy('weight')->execute();

  return $existing;
}
