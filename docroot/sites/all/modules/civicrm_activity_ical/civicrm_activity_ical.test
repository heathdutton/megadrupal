<?php
/**
 * @file
 * Simpletest for civicrm_activity_ical module
 */

require_once drupal_get_path('module', 'civicrm_activity_ical') .'/tests/civicrm_activity_ical_web_test_case.php';

class CiviCRMActivityICalTestCase extends CiviCRMActivityICalTestWebTestCase {

  /**
   * User with rights to perform tested actions
   */
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'General Use Cases',
      'description' => 'Ensure that the CiviCRM activity feed module functions properly.',
      'group' => 'CiviCRM activity iCalendar feed',
    );
  }

  public function setUp() {
    parent::setUpCiviCRM();
    parent::setUp('civicrm', 'civicrm_activity_ical');

    parent::setUpData();
    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array('access CiviCRM activity iCalendar feed', 'access CiviCRM', 'access Contact Dashboard'));
    $this->drupalLogin($this->privileged_user);

    // clear any cached feed data (eg., from previous tests)
    require_once drupal_get_path('module', 'civicrm_activity_ical') .'/cache.php';
    CivicrmActivityIcalCache::clear(civicrm_activity_ical_get_id('contact_id'), TRUE);
  }

  public function tearDown() {
    parent::tearDownData();
    parent::tearDown();
  }

  /**
   * Tests if user can access feed info page
   */
  public function testUserCanAccessFeedInfoPage() {
    $this->drupalGet('civicrm_activity_ical/settings/user');
    $this->assertResponse(200, 'User can access feed info page');
  }

  /**
   * Tests if user can access feed info page
   */
  public function testUserCanViewFeed() {
    $this->drupalGet('civicrm_activity_ical/settings/user');
    $url = $this->getTextElementValue('civicrm_activity_ical_url');
    if ($this->assertTrue($url, 'Feed info page contains text element with ID "civicrm_activity_ical_url"')) {

      // logged in user can access feed
      $this->drupalGet($url);
      $this->assertResponse(200, 'User can access feed page while logged in');
      $this->assertText('BEGIN:VCALENDAR', 'Feed page for logged in user shows iCalendar syntax');

      // logged out user can access feed
      $this->drupalLogout();
      $this->drupalGet($url);
      $this->assertResponse(200, 'User can access feed page while logged out');
      $this->assertText('BEGIN:VCALENDAR', 'Feed page for logged out user shows iCalendar syntax');
    }
  }

  function testUserCanGetNewWorkingURL() {
    $this->drupalGet('civicrm_activity_ical/settings/user');
    $url = $this->getTextElementValue('civicrm_activity_ical_url');
    if ($this->assertTrue($url, "User can still get working feed link. ")) {
      $original_url = $url;
      $this->drupalPost(NULL, array(), 'Rebuild feed URL');
      $url = $this->getTextElementValue('civicrm_activity_ical_url');
      if ($this->assertTrue($url, "User can view feed link on 'rebuilt' info page")) {
        // new url is different from original url
        $this->assertTrue($original_url != $url, "Rebuilt URL is different from original URL");

        // logged in user can access feed
        $this->drupalGet($url);
        $this->assertResponse(200, 'User can access feed page with new URL while logged in');
        $this->assertText('BEGIN:VCALENDAR', 'Feed page for logged in user shows iCalendar syntax');

        // logged out user can access feed
        $this->drupalLogout();
        $this->drupalGet($url);
        $this->assertResponse(200, 'User can access feed page with new URL while logged out');
        $this->assertText('BEGIN:VCALENDAR', 'Feed page for logged out user shows iCalendar syntax');
      }
    }
  }

  function testOldURLNoLongerWorks() {
    $this->drupalGet('civicrm_activity_ical/settings/user');
    $url = $this->getTextElementValue('civicrm_activity_ical_url');
    if ($this->assertTrue($url, "User can still get working feed link. ")) {
      $original_url = $url;
      $this->drupalPost(NULL, array(), 'Rebuild feed URL');
      $url = $this->getTextElementValue('civicrm_activity_ical_url');
      if ($this->assertTrue($url, "User can still view feed link on 'rebuilt' info page")) {
        // new href is different from original href
        $this->assertTrue($original_url != $url, "Rebuilt URL is still different from original URL");

        // logged in user can access feed
        $this->drupalGet($original_url);
        $this->assertResponse(403, 'User cannot access feed page with old URL while logged in');

        // logged out user can access feed
        $this->drupalLogout();
        $this->drupalGet($original_url);
        $this->assertResponse(403, 'User cannot access feed page with old URL while logged out');
      }
    }
  }

  function testDefaultValuesAreCorrect() {
    $this->assertTrue(30 == variable_get('civicrm_activity_ical_cache_interval', 0), 'Default cache interval is set correctly');
  }

  function testFeedIsCachedAtConfiguredInterval() {
    $this->drupalGet('civicrm_activity_ical/settings/user');
    $url = $this->getTextElementValue('civicrm_activity_ical_url');
    // set cache interval to 0
    variable_set('civicrm_activity_ical_cache_interval', 0);
    // get feed, ensure Last-Modified is same as Date header
    $this->drupalGet($url);
    $http_last_modified = $this->drupalGetHeader('Last-Modified');
    $http_date = $this->drupalGetHeader('Date');
    $this->assertTrue($http_date == $http_last_modified, "When cache interval is 0, first feed data is fresh. ($http_date == $http_last_modified)");

    // sleep 2
    sleep(2);
    // get feed, ensure Last-Modified is same as Date header
    $this->drupalGet($url);
    $prev_http_last_modified = $http_last_modified;
    $http_last_modified = $this->drupalGetHeader('Last-Modified');
    $http_date = $this->drupalGetHeader('Date');
    $this->assertTrue($prev_http_last_modified != $http_last_modified, "When cache interval is 0, second feed data is still fresh. ($prev_http_last_modified != $http_last_modified)");

    // set cache interval to 1
    variable_set('civicrm_activity_ical_cache_interval', 1);
    // sleep 2
    sleep(2);
    // get feed, ensure Last-Modified is same as previous Last-Modified
    $this->drupalGet($url);
    $prev_http_last_modified = $http_last_modified;
    $http_last_modified = $this->drupalGetHeader('Last-Modified');
    $this->assertTrue($http_last_modified == $prev_http_last_modified, "When cache interval is 1, cached feed data is served after 2 seconds. ($http_last_modified == $prev_http_last_modified)");

    // sleep 60. feed cache should be expired now, so ensure Last-Modified is same as Date header
    sleep(60);
    $this->drupalGet($url);
    $prev_http_last_modified = $http_last_modified;
    $http_last_modified = $this->drupalGetHeader('Last-Modified');
    $http_date = $this->drupalGetHeader('Date');
    $this->assertTrue($http_last_modified != $prev_http_last_modified, "When cache interval is 1, after 62 seconds feed data is again fresh. ($http_last_modified != $prev_http_last_modified)");
  }

  function testFeedInfoLinkAppearsOnUserDashboard() {
    $this->drupalGet('civicrm/user', array('query' => 'reset=1'));
    $search_text = 'Assigned activities are now accessible as an iCalendar feed';
    if ($this->assertText('Your Assigned Activities', 'CiviCRM is showing activities on the user dashboard.')) {
      $this->assertText($search_text);
      $this->clickLink('Feed details...');
      $this->assertResponse(200, 'Working feed info link is present on user dashboard.');
    }
    else {
      $this->assertNoText($search_text, 'Feed info link is not shown on user dashboard.');
    }
  }
}

class CiviCRMActivityICalTestCase2 extends CiviCRMActivityICalTestWebTestCase {

  /**
   * User with rights to perform tested actions
   */
  protected $privileged_user;
  protected $new_activity_type_label;

  public static function getInfo() {
    return array(
      'name' => 'Activity types testing',
      'description' => 'Tests with a variety of activity types',
      'group' => 'CiviCRM activity iCalendar feed',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    parent::setUpCiviCRM();
    parent::setUp('civicrm', 'civicrm_activity_ical');
    parent::setUpData();

    $this->privileged_user = $this->drupalCreateUser(array('access CiviCRM activity iCalendar feed'));
    $this->drupalLogin($this->privileged_user);
    $this->pass("logged in uid: {$this->privileged_user->uid}");

    // clear any cached feed data (eg., from previous tests)
    require_once drupal_get_path('module', 'civicrm_activity_ical') .'/cache.php';
    CivicrmActivityIcalCache::clear(civicrm_activity_ical_get_id('contact_id'), TRUE);

    // create a custom activity type (API)
    // Initialize CiviCRM, including its dynamic include path.
    civicrm_initialize();
    // Require a file from CiviCRM's dynamic include path.
    require_once 'api/api.php';
    $this->new_activity_type_label = $this->randomName();
    $params = array(
      'version' => 3,
      'weight' => 2,
      'label' => $this->new_activity_type_label,
      'version' => 3,
      'is_active' => 1,
    );
    $result = civicrm_api('activity_type', 'create', $params);
    if ($result['is_error']) {
      $this->error("Error creating new activity type '{$this->new_activity_type_label}' in setUp().");
      $this->tearDown();
      return;
    }
    else {
      $this->pass("result id: {$result['id']}");
      $this->pass("result dump: ". var_export($result, 1));
      $new_activity_type_value = $result['values'][$result['id']]['value'];
    }

    $contact_id = civicrm_activity_ical_get_id('contact_id', $this->privileged_user->uid);

    // clear any cached feed data (eg., from previous tests)
    require_once drupal_get_path('module', 'civicrm_activity_ical') .'/cache.php';
    CivicrmActivityIcalCache::clear(civicrm_activity_ical_get_id('contact_id'), TRUE);

    // create new activity of custom type, with status 'scheduled', with new contact as assignee and target
    $params = array(
      'version' => 3,
      'source_contact_id' => $contact_id,
      'activity_type_id' => $new_activity_type_value,
      'subject' => "test activity: {$this->new_activity_type_label}",
      'details' => "details text here",
      'activity_date_time' => date("Y-m-d H:i:s", strtotime('+1 day')),
      'status_id' => 1,
      'assignee_contact_id' => array(
        $contact_id
      ),
    );
    $result = civicrm_api('activity', 'create', $params);
    if ($result['is_error']) {
      $this->error("Error creating new activity of type '{$this->new_activity_type_label}' in setUp(): {$result['error_message']}");
      $this->tearDown();
      return;
    }
    // create new activity of 'phone call' type, with status 'scheduled', with new contact as assignee and target
    $params = array(
      'version' => 3,
      'source_contact_id' => $contact_id,
      'activity_type_id' => 2,
      'subject' => "test activity: phone call",
      'details' => "details text here",
      'activity_date_time' => date("Y-m-d H:i:s", strtotime('+1 day')),
      'status_id' => 1,
      'assignee_contact_id' => array(
        $contact_id
      ),
    );
    $result = civicrm_api('activity', 'create', $params);
    if ($result['is_error']) {
      $this->error("Error creating new activity of type 'phone call' in setUp(): {$result['error_message']}");
      $this->tearDown();
      return;
    }
  }

  public function tearDown() {
    parent::tearDownData();
    parent::tearDown();
  }

  function testFeedIncludesAllTypesOfActivities() {

    // get feed, ensuring activities of type 'phone call' and custom type are listed.
    $this->drupalGet('civicrm_activity_ical/settings/user');
    $url = $this->getTextElementValue('civicrm_activity_ical_url');
    $this->drupalGet($url);
    $this->assertText('CATEGORIES:Phone Call', 'Feed includes activities of type: Phone Call');
    $this->assertText('CATEGORIES:'. $this->new_activity_type_label, 'Feed includes activities of type: '. $this->new_activity_type_label);

  }

}


class CiviCRMActivityICalTestCase3 extends CiviCRMActivityICalTestWebTestCase {

  /**
   * User with rights to perform tested actions
   */
  protected $privileged_user;
  protected $new_contact_first_name;

  public static function getInfo() {
    return array(
      'name' => 'Multiple assignees',
      'description' => 'Tests feed output for activities with multiple assignees',
      'group' => 'CiviCRM activity iCalendar feed',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    parent::setUpCiviCRM();
    parent::setUp('civicrm', 'civicrm_activity_ical');
    parent::setUpData();

    $this->privileged_user = $this->drupalCreateUser(array('access CiviCRM activity iCalendar feed'));
    $this->drupalLogin($this->privileged_user);

    // clear any cached feed data (eg., from previous tests)
    require_once drupal_get_path('module', 'civicrm_activity_ical') .'/cache.php';
    CivicrmActivityIcalCache::clear(civicrm_activity_ical_get_id('contact_id'), TRUE);

    // Create a new contact (API).
    // Initialize CiviCRM, including its dynamic include path.
    civicrm_initialize();
    // Require a file from CiviCRM's dynamic include path.
    require_once 'api/api.php';
    $last_name = $this->randomName();
    $this->new_contact_first_name = $this->randomName();
    $params = array(
      'first_name' => $this->new_contact_first_name,
      'last_name' => $last_name,
      'contact_type' => 'Individual',
      'email' => $this->randomName() . '@yahoo.com',
      'version' => 3,
    );
    $result = civicrm_api('contact', 'create', $params);
    if ($result['is_error']) {
      $this->error("Error creating new contact named '{$this->new_contact_last_name}' in setUp().");
      $this->tearDown();
      return;
    }
    else {
      $this->pass("result id: {$result['id']}");
      $this->pass("result dump: ". var_export($result, 1));
      $new_contact_id = $result['id'];
    }

    $contact_id = civicrm_activity_ical_get_id('contact_id', $this->privileged_user->uid);

    // take care not to change the length of the details string, as it will
    // affect word-wrapping, possibly causing a line break within the tested
    // DESCRIPTON string, thus causing the test to fail.
    $details = "details text here text here text here text here text";

    // create an activity with both current user/contact and new contact as assignees
    $params = array(
      'version' => 3,
      'source_contact_id' => $contact_id,
      'activity_type_id' => 2,
      'subject' => "test activity: multiple assignees",
      'details' => $details,
      'activity_date_time' => date("Y-m-d H:i:s", strtotime('+1 day')),
      'status_id' => 1,
      'assignee_contact_id' => array(
        $contact_id,
        $new_contact_id,
      ),
    );
    $result = civicrm_api('activity', 'create', $params);
    if ($result['is_error']) {
      $this->error("Error creating new activity with multiple assignees in setUp(): {$result['error_message']}");
      $this->tearDown();
      return;
    }
  }

  public function tearDown() {
    parent::tearDownData();
    parent::tearDown();
  }

  function testFeedIncludesAllAssigneesPerActivity() {
    // check feed for one contact, and ensure other contact is listed under "other assignees"
    // get feed, ensuring activities of type 'phone call' and custom type are listed.
    $this->drupalGet('civicrm_activity_ical/settings/user');
    $url = $this->getTextElementValue('civicrm_activity_ical_url');
    $this->drupalGet($url);
    $this->assertText("Other assignees: {$this->new_contact_first_name}", "Other contact (first name: {$this->new_contact_first_name}) shows up under \"other assignees\"");
  }
}

class CiviCRMActivityICalTestCase4 extends CiviCRMActivityICalTestWebTestCase {

  /**
   * User with rights to perform tested actions
   */
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Framework test',
      'description' => 'Ensure test framework is properly working',
      'group' => 'CiviCRM activity iCalendar feed',
    );
  }

  public function setUp() {
    parent::setUpCiviCRM();
    parent::setUp();
    parent::setUpData();
    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($this->privileged_user);
  }

  public function tearDown() {
    parent::tearDownData();
    parent::tearDown();
  }

  /**
   * Tests if user can access feed info page
   */
  public function testTest() {
    $this->drupalGet('<front>');
    $this->assertResponse(200, 'User can access front page');
  }
}

class CiviCRMActivityICalTestCase5 extends CiviCRMActivityICalTestWebTestCase {
  /**
   * User with rights to perform tested actions
   */
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Spot testing',
      'description' => 'Specific one-off tests for debugging',
      'group' => 'CiviCRM activity iCalendar feed',
    );
  }

  public function setUp() {
    parent::setUpCiviCRM();
    parent::setUp('civicrm', 'civicrm_activity_ical');
    parent::setUpData();
    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array('access CiviCRM activity iCalendar feed', 'access CiviCRM', 'access Contact Dashboard'));
    $this->drupalLogin($this->privileged_user);

    // clear any cached feed data (eg., from previous tests)
    require_once drupal_get_path('module', 'civicrm_activity_ical') .'/cache.php';
    CivicrmActivityIcalCache::clear(civicrm_activity_ical_get_id('contact_id'), TRUE);
  }

  public function tearDown() {
    parent::tearDownData();
    parent::tearDown();
  }
}