<?php

/**
 * @file
 * Hook implementations and API functions for db remote.
 */

/**
 * Executes an arbitrary query string against the remote database.
 *
 * @see db_query()
 */
function db_remote_query($query, array $args = array(), array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->query($query, $args, $options);
}

/**
 * Executes a query against the remote database, restricted to a range.
 *
 * @see db_query_range()
 */
function db_remote_query_range($query, $from, $count, array $args = array(), array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->queryRange($query, $from, $count, $args, $options);
}

/**
 * Executes a SELECT query string and saves the result set to a temporary table.
 *
 * The execution of the query string happens against the remote database.
 *
 * @see db_query_temporary()
 */
function db_remote_query_temporary($query, array $args = array(), array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->queryTemporary($query, $args, $options);
}

/**
 * Returns a new InsertQuery object for the remote database.
 *
 * @see db_insert()
 */
function db_remote_insert($table, array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->insert($table, $options);
}

/**
 * Returns a new MergeQuery object for the remote database.
 *
 * @see db_merge()
 */
function db_remote_merge($table, array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->merge($table, $options);
}

/**
 * Returns a new UpdateQuery object for the remote database.
 *
 * @see db_update()
 */
function db_remote_update($table, array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->update($table, $options);
}

/**
 * Returns a new DeleteQuery object for the remote database.
 *
 * @see db_delete()
 */
function db_remote_delete($table, array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->delete($table, $options);
}

/**
 * Returns a new TruncateQuery object for the remote database.
 *
 * @see db_truncate()
 */
function db_remote_truncate($table, array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->truncate($table, $options);
}

/**
 * Returns a new SelectQuery object for the remote database.
 *
 * @see db_select()
 */
function db_remote_select($table, $alias = NULL, array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->select($table, $alias, $options);
}

/**
 * Returns a new transaction object for the remote database.
 *
 * @see db_transaction()
 */
function db_remote_transaction($name = NULL, array $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection($options['target'], $key)->startTransaction($name);
}

/**
 * Creates a new table in the remote database from a Drupal table definition.
 *
 * @see db_create_table()
 */
function db_remote_create_table($name, $table, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->createTable($name, $table);
}

/**
 * Checks if an index exists in the given table in the remote database.
 *
 * @see db_index_exists()
 */
function db_remote_index_exists($table, $name, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->indexExists($table, $name);
}

/**
 * Checks if a table exist in the remote database.
 *
 * @see db_table_exists()
 */
function db_remote_table_exists($table, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->tableExists($table);
}

/**
 * Checks if a column exists in the given table in the remote database.
 *
 * @see db_field_exists()
 */
function db_remote_field_exists($table, $field, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->fieldExists($table, $field);
}

/**
 * Finds all tables that are like the specified base table name in the remote database.
 *
 * @see db_find_tables()
 */
function db_remote_find_tables($table_expression, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->findTables($table_expression);
}

/**
 * Renames a table in the remote database.
 *
 * @see db_rename_table()
 */
function db_remote_rename_table($table, $new_name, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->renameTable($table, $new_name);
}

/**
 * Drops a table in the remote database.
 *
 * @see db_drop_table()
 */
function db_remote_drop_table($table, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->dropTable($table);
}

/**
 * Adds a new field to a table in the remote database.
 *
 * @see db_add_field()
 */
function db_remote_add_field($table, $field, $spec, $keys_new = array(), $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->addField($table, $field, $spec, $keys_new);
}

/**
 * Drops a field in the remote database.
 *
 * @see db_drop_field()
 */
function db_remote_drop_field($table, $field, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->dropField($table, $field);
}

/**
 * Adds a primary key to a table in the remote database
 *
 * @see db_add_primary_key()
 */
function db_remote_add_primary_key($table, $fields, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->addPrimaryKey($table, $fields);
}

/**
 * Drops the primary key of a table in the remote database.
 *
 * @see db_drop_primary_key
 *
 */
function db_remote_drop_primary_key($table, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->dropPrimaryKey($table);
}

/**
 * Adds a unique key in the remote database.
 *
 * @see db_add_unique_key()
 */
function db_remote_add_unique_key($table, $name, $fields, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->addUniqueKey($table, $name, $fields);
}

/**
 * Drops a unique key in the remote database.
 *
 * @see db_drop_unique_key()
 */
function db_remote_drop_unique_key($table, $name, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->dropUniqueKey($table, $name);
}

/**
 * Adds an index in the remote database.
 *
 * @see db_add_index()
 */
function db_remote_add_index($table, $name, $fields, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->addIndex($table, $name, $fields);
}

/**
 * Drops an index in the remote database.
 *
 * @see db_drop_index()
 */
function db_remote_drop_index($table, $name, $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->dropIndex($table, $name);
}

/**
 * Changes a field definition in the remote database.
 *
 * @see db_change_field()
 */
function db_remote_change_field($table, $field, $field_new, $spec, $keys_new = array(), $options = array()) {
  $key = _db_remote_check_options($options);
  return Database::getConnection('default', $key)->schema()->changeField($table, $field, $field_new, $spec, $keys_new);
}

/**
 * Get the unprocessed remote schema for a module.
 */
function db_remote_get_schema_unprocessed($module, $table = NULL) {
  // Load the .install file to get hook_schema.
  module_load_install($module);
  $schema = module_invoke($module, 'db_remote_schema');

  if (isset($table) && isset($schema[$table])) {
    return $schema[$table];
  }
  elseif (!empty($schema)) {
    return $schema;
  }
  return array();
}

/**
 * Installs schema for a module in the remote database.
 *
 * @see drupal_install_schema()
 */
function db_remote_install_schema($module) {
  $schema = db_remote_get_schema_unprocessed($module);
  _drupal_schema_initialize($schema, $module, FALSE);

  foreach ($schema as $name => $table) {
    // Only create the table if it doesn't already exist. This allows drush
    // re-installs to work without error since it won't empty tables in the
    // remote table automatically.
    // @todo can we hook in to drush for this and remove the check?
    if (!db_remote_table_exists($name)) {
      db_remote_create_table($name, $table);
    }
  }
}

/**
 * Removes all tables defined in a module's hook_remote_schema().
 *
 * @see db_remote_uninstall_schema()
 */
function db_remote_uninstall_schema($module) {
  $schema = db_remote_get_schema_unprocessed($module);
  _drupal_schema_initialize($schema, $module, FALSE);

  foreach ($schema as $table) {
    if (db_remote_table_exists($table['name'])) {
      db_remote_drop_table($table['name']);
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function db_remote_modules_installed($modules) {
  foreach ($modules as $module) {
    db_remote_install_schema($module);
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function db_remote_modules_uninstalled($modules) {
  foreach ($modules as $module) {
    db_remote_uninstall_schema($module);
  }
}

/**
 * Helper to find key and set the target from $options.
 *
 * @return
 *   The key to be used with Database::getConnection().
 */
function _db_remote_check_options(&$options) {
  if (isset($options['key'])) {
    $key = $options['key'];
    unset($options['key']);
  }
  else {
    $key = variable_get('db_remote');
  }
  if (empty($options['target'])) {
    $options['target'] = 'default';
  }
  return $key;
}
