<?php

/**
 * @file
 *  Make comment thread maximum to two levels.
 */

/**
 * Implements hook_form_FORMID_alter().
 */
function tlcomment_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $tlcomment = array(
    '#type' => 'checkbox',
    '#title' => t('Enable TLcomment mode'),
    '#default_value' => variable_get('tlcomment_node_' . $form['#node_type']->type, FALSE),
    '#description' => t('In threaded mode, enable maximum two levels of comments.'),
    '#states' => array(
      'visible' => array(
        ':input[name=comment_default_mode]' => array('checked' => TRUE),
      ),
    ),
  );

  // We need to rearrange the form to make our checkbox just below the threaded
  // one. If we changed weight, it could change behaviors of other modules.
  $comment = array();
  foreach ($form['comment'] as $key => $element) {
    $comment[$key] = $element;
    if ($key == 'comment_default_mode') {
      $comment['tlcomment_node'] = $tlcomment;
    }
  }

  $form['comment'] = $comment;
}

/**
 * Implements hook_comment_presave().
 */
function tlcomment_comment_presave($comment) {
  $node_type = str_replace('comment_node_', '', $comment->node_type);
  $enabled = variable_get('comment_default_mode_' . $node_type, COMMENT_MODE_THREADED) == COMMENT_MODE_THREADED;
  $enabled = $enabled && variable_get('tlcomment_node_' . $node_type, FALSE);
  if (!$comment->cid && $enabled && $comment->pid) {
    $max_level = 2;
    $comment->real_pid = $comment->pid;

    $parent = comment_load($comment->pid);
    while (count(explode('.', $parent->thread)) > $max_level - 1) {
      $parent = comment_load($parent->pid);
    }
    $comment->pid = $parent->cid;
  }
}

/**
 * Implements hook_comment_insert().
 */
function tlcomment_comment_insert($comment) {
  if (empty($comment->real_pid)) {
    return;
  }
  db_insert('tlcomment')
  ->fields(array(
    'cid' => $comment->cid,
    'pid' => $comment->real_pid,
  ))
  ->execute();
}

/**
 * Implements hook_comment_delete().
 */
function tlcomment_comment_delete($comment) {
  db_delete('tlcomment')
  ->condition('cid', $comment->cid)
  ->execute();
}

/**
 * Implements hook_node_type_delete().
 */
function tlcomment_node_type_delete($info) {
  variable_del('tlcomment_node_' . $info->type);
}

