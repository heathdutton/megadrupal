<?php
/**
 * @file
 *  Provides logging for the Services module.
 */

/**
 * Implements hook_services_request_preprocess_alter().
 */
function services_log_services_request_preprocess_alter(&$controller, &$args) {
  if (variable_get('services_log_enable', 0)) {
    global $services_log_globals;
    $services_log_globals['controller'] = $controller;
    $services_log_globals['args'] = $args;
  }
}

/**
 * Implements hook_services_request_postprocess_alter().
 */
function services_log_services_request_postprocess_alter(&$controller, &$args, &$result) {
  if (variable_get('services_log_enable', 0)) {
    global $services_log_globals;
    $services_log_globals['result'] = $result;
  }
}

/**
 * Implements hook_rest_server_execute_errors_alter().
 */
function services_log_rest_server_execute_errors_alter($errors, $controller, $args) {
  if (variable_get('services_log_enable', 0)) {
    global $services_log_globals;
    $services_log_globals['errors'] = $errors;
  }
}

/**
 * implements hook_theme()
 */
function services_log_theme() {
  return array(
    'http_status' => array(
      'file' => 'services_log.admin.inc',
      'variables' => array('entry' => NULL),
    ),
    'services_log_uri' => array(
      'file' => 'services_log.admin.inc',
      'variables' => array('entry' => NULL),
    ),
  );
}



/**
 * Implements hook_menu().
 */
function services_log_menu() {
  $items = array();

  $items['admin/reports/services_log'] = array(
      'title' => 'Services log',
      'description' => t('Log of all Services requests'),
      'page callback' => 'services_log_overview',
      'type' => MENU_NORMAL_ITEM,
      'file' => 'services_log.admin.inc',
      'access arguments' => array('administer site configuration'),
  );
  $items['admin/reports/services_log/where_autocomplete'] = array(
      'title' => 'Services Log Where Autocomplete',
      'page callback' => 'services_log_where_autocomplete',
      'file' => 'services_log.admin.inc',
      'type' => MENU_CALLBACK,
      'access arguments' => array('administer site configuration'),
  );
  $items['admin/reports/services_log/%'] = array(
      'title' => 'Services Request Details',
      'page callback' => 'services_log_display_entry',
      'page arguments' => array(3),
      'file' => 'services_log.admin.inc',
      'type' => MENU_CALLBACK,
      'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/services_log'] = array(
      'title' => 'Services Log configuration',
      'description' => 'Configuration for Services logging.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('services_log_admin_form'),
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('administer site configuration'),
      'file' => 'services_log.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function services_log_init() {
  $args = arg();
  if (count($args) >= 3 && $args[0] == 'admin' && $args[1] == 'reports' && $args[2] == 'services_log') {
    // Add the CSS for this module
    drupal_add_css(drupal_get_path('module', 'services_log') .'/services-log.css');
  }
}



/**
 * Implements hook_menu_alter().
 */
function services_log_menu_alter(&$items) {
  // Override the service endpoint callbacks so that our logging function gets
  // called first, ensuring that every api request gets logged.
  $services_endpoints = array_keys(services_menu());
  $default_endpoint_cb = '';
  if (!empty($services_endpoints)) {
    foreach ($services_endpoints as $menu_path) {
      $default_endpoint_cb = $items[$menu_path]['page callback'];
      $items[$menu_path]['page callback'] = 'services_log_endpoint_callback';
    }
  }
  variable_set('services_log_default_endpoint_callback', $default_endpoint_cb);
}

/**
 * Override for the default services endpoint callback.
 *
 * @param $endpoint_name
 *   name of the services endpoint
 */
function services_log_endpoint_callback($endpoint_name) {
  global $services_log_globals, $user;
  if (variable_get('services_log_enable', 0)) {
    $services_log_globals['endpoint'] = $endpoint_name;
    $services_log_globals['cookies'] = unserialize(serialize($_COOKIE));
    $services_log_globals['uid'] = $user->uid;
    $services_log_globals['menu_cb_time'] = timer_read('page');

    register_shutdown_function('_services_log_shutdown_function');
  }
  $default_endpoint_cb = variable_get('services_log_default_endpoint_callback', 'services_endpoint_callback');
  if (function_exists($default_endpoint_cb)) {
    $default_endpoint_cb($endpoint_name);
  }
}

/**
 * Write log data to the services_log table.
 */
function _services_log_shutdown_function() {
  global $services_log_globals, $base_root;

  // Ensure we're in the correct working directory, since some web servers
  // (e.g. Apache) mess this up here.
  chdir(dirname($_SERVER['SCRIPT_FILENAME']));

  $record = new StdClass;
  $record->timing = serialize(array(
      'bootstrap' => $services_log_globals['menu_cb_time'],
      'total'     => timer_read('page'),
  ));
  $record->timestamp = time();
  $record->uid = $services_log_globals['uid'];

  $http_headers = drupal_get_http_header();
  list($http_status, $http_reason_phrase) = _services_log_get_http_status($http_headers);
  $record->http_headers = serialize($http_headers);
  $record->http_status = $http_status;
  $record->http_reason_phrase = $http_reason_phrase;
  $record->http_cookies = serialize($services_log_globals['cookies']);
  $record->http_payload = _services_log_get_payload();
  $record->http_method = _services_log_get_request_method();

  $record->request_content_type = isset($_SERVER['CONTENT_TYPE']) ?  $_SERVER['CONTENT_TYPE'] : '';
  $record->request_uri = $base_root . request_uri();
  $record->hostname = ip_address();

  $record->endpoint_name = $services_log_globals['endpoint'];
  $record->resource_callback = isset($services_log_globals['controller']['callback']) ? $services_log_globals['controller']['callback'] : '';
  $record->resource_args = serialize(isset($services_log_globals['args']) ? $services_log_globals['args'] : '');
  $record->resource_result = serialize(isset($services_log_globals['result']) ? $services_log_globals['result'] : '');
  $record->resource_errors = serialize(isset($services_log_globals['errors']) ? $services_log_globals['errors'] : '');

  $sanitize_settings = variable_get('services_log_sanitize', array());
  $record->is_sanitized = in_array('before_db', $sanitize_settings);

  try {
    drupal_write_record('services_log', $record);
  }
  catch (Exception $e) {
    watchdog('services log', "exception while logging: ".print_r($e, 1));
  }

  if ($record->http_status >= 400) {
    watchdog('services log', t("Services request failed."), array(), WATCHDOG_ERROR, l('details', "admin/reports/services_log/" . $record->entry_id));
  }
  else {
    watchdog('services log', t("Services request completed successfully."), array(), WATCHDOG_NOTICE, l('details', "admin/reports/services_log/" . $record->entry_id));
  }
}

/**
 * implementation of hook_cron()
 */
function services_log_cron() {

  // Clear out old log entries, if needed.
  $max_entries = variable_get('services_log_max_entries', -1);
  if ($max_entries > 0) {
    $max_id = db_query('SELECT MAX(entry_id) FROM {services_log}')->fetchField();
    $min_id = ($max_id - $max_entries) + 1;
    db_delete('services_log')
      ->condition('entry_id', $min_id, "<")
      ->execute();
  }

}

/**
 * Determine the http request method.
 *
 * @return
 *   GET, POST, etc...
 */
function _services_log_get_request_method() {
  // Determine the request method
  $method = $_SERVER['REQUEST_METHOD'];
  if ($method == 'POST' && isset($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'])) {
    $method = $_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'];
  }
  if ($method == 'POST' && (isset($_GET['_method']) && $_GET['_method'])) {
    $method = $_GET['_method'];
  }
  return $method;
}

/**
 * Return any data attached to current request.
 *
 * @return
 *   Returns the request body data if sent or empty string if the request
 *   method is GET, HEAD, DELETE or OPTIONS.
 */
function _services_log_get_payload() {
  // GET, HEAD, DELETE and OPTIONS requests have no post data attached.
  $http_method = _services_log_get_request_method();
  if (in_array($http_method, array('GET', 'HEAD', 'DELETE', 'OPTIONS'))) {
    return '';
  }

  $post_data = '';
  if (module_exists('inputstream')) {
    $post_data = file_get_contents("drupal://input");
  }
  else {
    $post_data = file_get_contents("php://input");
  }

  if (!$post_data && isset($HTTP_RAW_POST_DATA)) {
    $post_data = $HTTP_RAW_POST_DATA;
  }

  return $post_data;
}

/**
 * Try to figure out the http status of the current response.
 *
 * @return
 *   Returns an array containing HTTP status number and message.
 *     array(404, 'thing not found');
 */
function _services_log_get_http_status($http_headers) {
  if (isset($http_headers['status'])) {
    $status_header = $http_headers['status'];
    $matches = array();
    preg_match('#(\d\d\d) (.*)#', $status_header, $matches);
    return array($matches[1], $matches[2]);
  }

  # look for headers set by previous (pre-3.2) versions of Services
  foreach ($http_headers as $name => $value) {
    if (strpos($name, 'http/1.0 ') !== FALSE) {
      $matches = array();
      preg_match('#^http/1.0 (\d\d\d) (.*)$#', $name, $matches);
      $message = $matches[2] . ': ' . $value;
      return array($matches[1], $message);
    }
  }

  if (isset($_SERVER['REDIRECT_STATUS'])) {
    return array($_SERVER['REDIRECT_STATUS'], '');
  }

  return array(200, '');
}

/**
 * Try to sanitize potentially-sensitive user data before writing to the db.
 *
 * @param $input
 *   string containing data from the user
 * @return
 *   sanitized input from user
 */
function _services_log_sanitize_incoming_data($input) {
  $sanitize_settings = variable_get('services_log_sanitize', array());

  // Bail out if sanitizing isn't enabled.
  if (!in_array('before_db', $sanitize_settings)) {
    return $input;
  }

  $field_names = array( 'pass', 'password');
  $need_sanitization = array();

  foreach($field_names as $field_name => $field_count) {
    if (strstr($input, $field_name)){
      $need_sanitization[] = $field_name;
    }
  }

  foreach ($need_sanitization as $field_name) {
    # guess what kind of format the input is
    # grep through the object and find the values of the sensitive fields
    # for each sensitive field
      #


  }


}

# vim: expandtab shiftwidth=2 shiftwidth=2 ft=php:
