<?php
/**
 * @file taxonomypageoverride.module
 */

/**
 * Implementation of hook_help().
 */
function taxonomypageoverride_help($path, $arg) {
  switch ($path) {
  case 'admin/help#taxonomypageoverride':
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('The Taxonomy Page Override module provides a simple API for replacing standard taxonomy term pages on a per vocabulary or per term basis. This module does not expose any functionality by itself. Enable it only if other modules such as Taxonomy Page Override UI require it.');
    return $output;
  }
}


/**
 * Implementation of hook_menu().
 */
function taxonomypageoverride_menu() {
  taxonomypageoverride_cache_clear();
}


/**
 * Implementation of hook_taxonomy_vocabulary_update().
 */
function taxonomypageoverride_taxonomy_vocabulary_update($vocabulary) {
  taxonomypageoverride_cache_clear();
}


/**
 * Implementation of hook_taxonomy_vocabulary_delete().
 */
function taxonomypageoverride_taxonomy_vocabulary_delete($vocabulary) {
  taxonomypageoverride_cache_clear();
}


/**
 * Implementation of hook_taxonomy_term_update().
 */
function taxonomypageoverride_taxonomy_term_update($term) {
  taxonomypageoverride_cache_clear();
}


/**
 * Implementation of hook_taxonomy_term_delete().
 */
function taxonomypageoverride_taxonomy_term_delete($term) {
  taxonomypageoverride_cache_clear();
}


/**
 * Clear entries from cache
 */
function taxonomypageoverride_cache_clear() {
  cache_clear_all('taxonomypageoverride_overrides', 'cache');
}


/**
 * Build and return overrides configuration
 */
function taxonomypageoverride_get_overrides() {
  $cache = cache_get('taxonomypageoverride_overrides');
  if ($cache) {
    return $cache->data;
  }

  $overrides = module_invoke_all('taxonomypageoverride_info');
  cache_set('taxonomypageoverride_overrides', $overrides);

  return $overrides;
}


/**
 * Return list of defined flavours
 */
function taxonomypageoverride_get_flavours() {
  $overrides = taxonomypageoverride_get_overrides();
  $flavours = array();

  foreach ($overrides as $bundles) {
    foreach ($bundles as $override_definitions) {
      $flavours = array_unique(array_merge($flavours, 
        array_keys($override_definitions)));
    }
  }

  return $flavours;
}


/**
 * Implementation of hook_menu_alter().
 */
function taxonomypageoverride_menu_alter(&$items) {
  $prefix = 'taxonomy/term/%taxonomy_term';
  $pfxlen = strlen($prefix);

  // save access callbacks
  $accesscallbacks = array();
  $disabledflavours = array();

  foreach ($items as $path => $item) {
    if (substr($path, 0, $pfxlen) == $prefix) {
      $flavour = substr($path, $pfxlen + 1);
      if ($flavour == '') {
          $flavour = 'page';
      }

      // set sane defaults
      if (isset($item['access callback'])) {
        $callback = $item['access callback'];
      }
      else {
        $callback = 'user_access';
      }

      if (isset($item['access arguments'])) {
        $arguments = $item['access arguments'];
      }
      else if ($callback == 'user_access') {
        $arguments = array('access content');
      }
      else {
        $arguments = array(2);
      }

      // check if we can handle the combination
      if ($callback == 'user_access' || $arguments == array(2)) {
        $accesscallbacks[$flavour]['callback'] = $callback;
        $accesscallbacks[$flavour]['arguments'] = $arguments;
      }
      // otherwise disable the flavour
      else {
        $disabledflavours[] = $flavour;
        watchdog(WATCHDOG_WARNING, t('Cannot override taxonomy page at %path, because of unsupported access arguments', array('%path' => $path)));
      }
    }
  }

  variable_set('taxonomypageoverride_accesscallbacks', $accesscallbacks);

  // alter/add menu entries
  $flavours = taxonomypageoverride_get_flavours();

  foreach ($flavours as $flavour) {
    if (!in_array($flavour, $disabledflavours)) {
      $path = $prefix;
      if ($flavour != 'page') {
        $path = $path . '/' . $flavour;
      }

      $items[$path]['page callback'] = 'taxonomypageoverride_taxonomy_term_page';
      $items[$path]['page arguments'] = array(2, $flavour);
      $items[$path]['access callback'] = 'taxonomypageoverride_taxonomy_term_access';
      $items[$path]['access arguments'] = array(2, $flavour);
      $items[$path]['file'] = 'taxonomypageoverride.module';
      $items[$path]['module'] = 'taxonomypageoverride';
    }
  }
}

/**
 * If an override is defined for the given term or vocabulary, execute the
 * corresponding menu handler. Otherwise return rendered default taxonomy page.
 * @see user_page
 */
function taxonomypageoverride_taxonomy_term_access($term, $flavour) {
  $override = taxonomypageoverride_get_override_for_term($term, $flavour);

  if ($override && !empty($override['access callback']) && function_exists($override['access callback'])) {
    $args = func_get_args();
    return call_user_func_array($override['access callback'], $args);
  }

  $accesscallbacks = variable_get('taxonomypageoverride_accesscallbacks');
  $callback = $accesscallbacks[$flavour]['callback'];
  $arguments = $accesscallbacks[$flavour]['arguments'];

  if ($callback == 'user_access') {
    return user_access($arguments[0]);
  }
  else if ($arguments == array(2)) {
    return call_user_func($callback, $term);
  }
  else {
    return FALSE;
  }
}

/**
 * If an override is defined for the given term or vocabulary, check the
 * corresponding access callback. Otherwise use default access check
 * @see user_page
 */
function taxonomypageoverride_taxonomy_term_page($term, $flavour) {
  $override = taxonomypageoverride_get_override_for_term($term, $flavour);

  if ($override) {
    $defaults = array(
      'restore_title' => FALSE,
      'restore_breadcrumb' => FALSE,
    );
    $override += $defaults;

    $previous = array(
      'title' => drupal_get_title(),
      'breadcrumb' => drupal_get_breadcrumb(),
    );

    $path = taxonomypageoverride_get_override_path($override, $term);
    $content = menu_execute_active_handler($path, FALSE);

    if ($override['restore_title']) {
      drupal_set_title($previous['title']);
    }
    if ($override['restore_breadcrumb']) {
      drupal_set_breadcrumb($previous['breadcrumb']);
    }

    return $content;
  }
  else {
    module_load_include('inc', 'taxonomy', 'taxonomy.pages');
    switch($flavour) {
    case 'page':
      return taxonomy_term_page($term);
    case 'feed':
      return taxonomy_term_feed($term);
    default:
      watchdog('taxonomypageoverride', t('Cannot call default page for unknown flavour @flavour', array('@flavour' => $flavour)));
      drupal_not_found();
    }
  }
}


/**
 * Return best matching override for the given term.
 */
function taxonomypageoverride_get_override_for_term($term, $flavour) {
  $overrides = taxonomypageoverride_get_overrides();

  if (isset($overrides['term']) && count($overrides['term']) > 0) {
    // Return term-level override if possible
    if (isset($overrides['term'][$term->tid][$flavour])) {
      return $overrides['term'][$term->tid][$flavour];
    }

    // Return override of an anchestor if there is one with recures set to true
    foreach(taxonomy_get_parents_all($term->tid) as $ancestor) {
      if (isset($overrides['term'][$ancestor->tid][$flavour]['recurse']) && 
        $overrides['term'][$ancestor->tid][$flavour]['recurse'] == TRUE)
      {
        return $overrides['term'][$ancestor->tid][$flavour];
      }
    }
  }

  // Fallback to vocabulary override if no term-level override was found
  if (isset($overrides['vocabulary'][$term->vocabulary_machine_name][$flavour])) {
    return $overrides['vocabulary'][$term->vocabulary_machine_name][$flavour];
  }

  // Return null if no override at all was defined for this term/vocabulary
  return NULL;
}


/**
 * Return path for an override applied to a given term
 */
function taxonomypageoverride_get_override_path($override, $term) {
  return str_replace('%', $term->tid, $override['path']);
}
