<?php

/**
 * @file
 * Makes the TagCanvas Javascript Class available to Drupal with backend
 * functionality and create a simple TagCanvas block.
 */

/**
 * Implements hook_libraries_info().
 */
function simpletagcanvas_libraries_info() {
  $libraries['tagcanvas'] = array(
    'name' => 'TagCanvas Javascript Class',
    'vendor url' => 'http://www.goat1000.com/tagcanvas.php',
    'download url' => 'http://www.goat1000.com/tagcanvas.php#links',
    'version arguments' => array(
      'file' => 'jquery.tagcanvas.min.js',
      'pattern' => '/jQuery.tagcanvas ([0-9\.a-z]+)/',
    ),
    'files' => array(
      'js' => array(
        'jquery.tagcanvas.min.js',
      ),
    ),
    'source' => array(
      'files' => array(
        'js' => array(
          'jquery.tagcanvas.js',
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_block_info().
 * 
 * Info standard hook.
 */
function simpletagcanvas_block_info() {

  $blocks = array();
  $blocks['simpletagcanvas'] = array(
    'info' => 'SimpleTagCanvas Block',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function simpletagcanvas_block_view($delta = '') {

  static $added = FALSE;

  if ($delta == 'simpletagcanvas') {

    $block['subject'] = '';
    $block['content'] = simpletagcanvas_block_content();

    if (!$added && $lib = simpletagcanvas_get_library()) {

      $my_settings = array(
        'simpletagcanvas_shape' => variable_get('simpletagcanvas_shape'),
        'simpletagcanvas_mousewheelzoom' => variable_get('simpletagcanvas_mousewheelzoom'),
        'simpletagcanvas_lock' => variable_get('simpletagcanvas_lock'),
        'simpletagcanvas_minspeed' => variable_get('simpletagcanvas_minspeed'),
        'simpletagcanvas_maxspeed' => variable_get('simpletagcanvas_maxspeed'),
      );

      $block['content']['#attached']['js'][] = $lib;
      $block['content']['#attached']['js'][] = array('data' => array('simpletagcanvas' => $my_settings),'type' => 'setting');
      $block['content']['#attached']['js'][] = drupal_get_path('module', 'simpletagcanvas') . '/js/simpletagcanvas.js';
      $added = TRUE;
    }
    $block['content']['#attached']['css'][] = drupal_get_path('module', 'simpletagcanvas') . '/css/simpletagcanvas.css';
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function simpletagcanvas_block_content() {

  $items = variable_get('simpletagcanvas_storagearray', array());
  $markup_items = array();

  for ($i = 0; $i < count($items); $i++) {
    $settingvariable = $items[$i]['file']['file_managed_container']['file_managed_element'];
    if ($settingvariable != 0) {
      $image_file = file_load($settingvariable);
      $image_path = '';
      if (isset($image_file->uri)) {
        $image_path = file_create_url($image_file->uri);

        switch ($items[$i]['imagestyle']) {
          case "10":
            $image  = theme('image_style', array('style_name' => 'simpletagcanvas_10x10', 'path' => $image_file->uri));
            break;

          case "20":
            $image  = theme('image_style', array('style_name' => 'simpletagcanvas_20x20', 'path' => $image_file->uri));
            break;

          case "30":
            $image  = theme('image_style', array('style_name' => 'simpletagcanvas_30x30', 'path' => $image_file->uri));
            break;

          case "40":
            $image  = theme('image_style', array('style_name' => 'simpletagcanvas_40x40', 'path' => $image_file->uri));
            break;

          case "50":
            $image  = theme('image_style', array('style_name' => 'simpletagcanvas_50x50', 'path' => $image_file->uri));
            break;

          case "60":
            $image  = theme('image_style', array('style_name' => 'simpletagcanvas_60x60', 'path' => $image_file->uri));
            break;

          case "70":
            $image  = theme('image_style', array('style_name' => 'simpletagcanvas_70x70', 'path' => $image_file->uri));
            break;

          case "80":
            $image  = theme('image_style', array('style_name' => 'simpletagcanvas_80x80', 'path' => $image_file->uri));
            break;

          default:
            $image  = theme('image_style', array('style_name' => 'simpletagcanvas_40x40', 'path' => $image_file->uri));
        }

        $link = l($image, $items[$i]['url'], array('html' => TRUE, 'attributes' => array('target' => '_blank')));
        $markup_items[] = $link;
      }
    }
    else {
      $link = l(check_plain($items[$i]['linktext']), $items[$i]['url'], array('attributes' => array('class' => $items[$i]['linkcolor'], 'target' => '_blank')));
      $markup_items[] = $link;
    }
  }
  return array('#markup' => theme('simpletagcanvas', array('items' => $markup_items)));
}

/**
 * Implements hook_theme().
 */
function simpletagcanvas_theme($existing, $type, $theme, $path) {

  return array(
    'simpletagcanvas' => array(
      'template' => 'simpletagcanvas',
      'variables' => array(
        'items' => NULL,
        'height' => variable_get('simpletagcanvas_height', 200),
        'width' => variable_get('simpletagcanvas_width', 200),
      ),
    ),
  );
}

/**
 * The location of TagCanvas library, FALSE if the library isn't installed.
 */
function simpletagcanvas_get_library() {
  $path = FALSE;

  if (function_exists('libraries_get_path')) {
    $path = libraries_get_path('tagcanvas') . '/jquery.tagcanvas.min.js';
    if (!file_exists($path)) {
      $path = libraries_get_path('tagcanvas') . '/jquery.tagcanvas.js';
    }
    elseif (!file_exists($path)) {
      $path = FALSE;
    }
  }
  elseif (file_exists('sites/all/libraries/tagcanvas/jquery.tagcanvas.min.js')) {
    $path = 'sites/all/libraries/tagcanvas/jquery.tagcanvas.js';
  }
  elseif (file_exists('sites/all/libraries/tagcanvas/jquery.tagcanvas.min.js')) {
    $path = 'sites/all/libraries/tagcanvas/jquery.tagcanvas.js';
  }

  return $path;
}

/**
 * Implements hook_menu().
 */
function simpletagcanvas_menu() {

  $items['admin/config/content/simpletagcanvas'] = array(
    'title' => 'SimpleTagCanvas',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'SimpleTagCanvas Block Configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simpletagcanvas_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer simpletagcanvas'),
    'file' => 'simpletagcanvas.admin.inc',
  );

  $items['admin/config/content/simpletagcanvas/behavior'] = array(
    'title' => 'behavior',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/content/simpletagcanvas/linkmanagement'] = array(
    'title' => 'Link Management',
    'description' => 'Simple TagCanvas Text Links.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simpletagcanvas_link_form'),
    'access arguments' => array('administer simpletagcanvas'),
    'file' => 'simpletagcanvas.admin.link.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function simpletagcanvas_permission() {
  return array(
    'administer simpletagcanvas' => array(
      'title' => t('Administer SimpleTagCanvasItems'),
      'description' => t('Perform administration tasks for SimpleTagCanvas.'),
    ),
  );
}

/**
 * This function will validate a string to check proper url.
 */
function simpletagcanvas_validate_url($item_url) {

  if (valid_url($item_url, TRUE)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * This function will validate a float.
 */
function simpletagcanvas_validate_float($stringval, $minval, $maxval) {

  $floatval  = floatval($stringval);

  if (($floatval > (int) $maxval) || ($floatval < (int) $minval) || (!(strval($stringval) == strval($floatval)))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Checking whether at least one character is present.
 */
function simpletagcanvas_validate_string($stringval, $minval, $maxval) {

  $stringval  = strval($stringval);

  if ((strlen($stringval) < $minval) || (strlen($stringval) > $maxval) || (!preg_match('/^[A-Za-z0-9\_\.\ ]{1,}$/', $stringval))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
