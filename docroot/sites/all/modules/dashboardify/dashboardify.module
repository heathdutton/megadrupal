<?php

/**
 * @file
 * Dashboardify main module file
 */

/**
 * Implements hook_help().
 */
function dashboardify_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dashboardify':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Dashboardify module provides a dashboard page for users for organizing useful blocks in one place. Blocks are stored with arguments to provide exactly the same block user added. Blocks can be easily rearranged by drag&drop interface. User can add multiple instance of the same block to the dashboard.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function dashboardify_permission() {
  return array(
    'use own dashboard' => array(
      'title' => t('Use own dashboard'),
      'description' => t('User can view and edit her/his own dashboard.'),
    ),
    'view all dashboards' => array(
      'title' => t('View all dashboards'),
      'description' => t('User can view all dashboards.'),
    ),
    'administer dashboardify' => array(
      'title' => t('Administer dashboardify'),
      'description' => t('Administer dashboardify settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dashboardify_menu() {
  $items['user/%user/dashboard'] = array(
    'title' => 'Dashboard',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'dashboardify_dashboard',
    'page arguments' => array(1),
    'access callback' => 'dashboardify_check_dashboard_access',
    'access arguments' => array(1),
  );
  $items['dashboardify/add/%'] = array(
    'title' => 'Add to dashboard',
    'type' => MENU_LOCAL_ACTION | MENU_CALLBACK,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'dashboardify_add_block',
    'page arguments' => array(2),
    'access arguments' => array('use own dashboard'),
  );
  $items['dashboardify/delete/%'] = array(
    'title' => 'Delete from dashboard',
    'type' => MENU_LOCAL_ACTION | MENU_CALLBACK,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'dashboardify_delete_block',
    'page arguments' => array(2),
    'access arguments' => array('use own dashboard'),
  );
  $items['dashboardify/update/order'] = array(
    'title' => 'Update order of blocks',
    'type' => MENU_CALLBACK,
    'page callback' => 'dashboardify_update',
    'access arguments' => array('use own dashboard') ,
  );
  $items['admin/config/user-interface/dashboardify'] = array(
    'title' => 'Dashboardify settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dashboardify_settings_form'),
    'access arguments' => array('administer dashboardify'),
    'file' => 'dashboardify.admin.inc',
  );
  return $items;
}

/**
 * Check if user has access to specific dashboard.
 */
function dashboardify_check_dashboard_access($account) {
  global $user;
  $use_own = user_access('use own dashboard');
  $view_all = user_access('view all dashboards');
  return (($use_own && $user->uid == $account->uid) || $view_all);
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function dashboardify_contextual_links_view_alter(&$element, &$items) {
  // Make sure links are added only to blocks.
  if (isset($element['#element']['#block'])) {
    // If blocks are outside dashboard generate add option.
    if (!isset($element['#element']['#block']->dbid)) {
      $token = drupal_get_token('dashboardify_add_block');
      $bid = $element['#element']['#block']->bid;
      $element['#links']['dashboardify-add'] = array(
        'title' => t('Add to dashboard'),
        'href' => url('dashboardify/add/' . $bid, array('absolute' => TRUE)),
        'query' => array(
          drupal_get_destination(),
          'token' => $token,
        ),
      );
    }
    // If blocks are inside dashboard generate remove option.
    else {
      $token = drupal_get_token('dashboardify_delete_block');
      $dbid = $element['#element']['#block']->dbid;
      $element['#links']['dashboardify-delete'] = array(
        'title' => t('Remove from dashboard'),
        'href' => url('dashboardify/delete/' . $dbid, array('absolute' => TRUE)),
        'query' => array(
          drupal_get_destination(),
          'token' => $token,
        ),
      );
    }
  }
  $element['#attributes']['class'][] = 'dashboardify-contextual';
}

/**
 * Implements hook_element_info_alter().
 */
function dashboardify_element_info_alter(&$type) {
  $prefix = '<div class="contextual-links-js-disabled contextual-links-wrapper">';
  $prefix .= '<a class="contextual-links-trigger contextual-links-trigger-js-disabled" href="#">' . t('Configure') . '</a>';
  $type['contextual_links']['#prefix'] = $prefix;
  $type['contextual_links']['#suffix'] = '</div>';
}

/**
 * Main function for generating user dashboard.
 */
function dashboardify_dashboard($account) {
  global $user;
  $blocks = array();
  $build = array();
  $output = '';
  // Get all blocks added by acting user.
  $query = db_select('dashboardify_blocks', 'db');
  $query->innerJoin('block', 'b', 'b.bid = db.bid');
  $query->innerJoin('dashboardify_dashboards', 'd', 'd.did = db.did');
  $block = $query
    ->fields('b')
    ->fields('db', array('dbid', 'weight', 'arguments'))
    ->condition('d.uid', $account->uid)
    ->orderBy('db.weight')
    ->execute();
  // Generate renderable array for each one of blocks.
  foreach ($block as $block_object) {
    $blocks = array();
    // To render views blocks properly block must know what arguments to use.
    // Replace actual query string with the one stored in database.
    // Save actual query to restore it later.
    $orig = $_GET['q'];
    $_GET['q'] = $block_object->arguments;
    $block_object->enabled = $block_object->page_match = TRUE;
    // Add additional information to block object. It allows to check if object
    // was rendered inside or outside of dashboard canvas.
    $block_object->dashboardify_weight = $block_object->weight;
    $block_object->dbid = $block_object->dbid;
    $blocks[$block_object->module . "_" . $block_object->delta] = $block_object;
    $block_content = _block_render_blocks($blocks);
    $build[] = _block_get_renderable_array($block_content);
    $_GET['q'] = $orig;
  }
  $columns = variable_get('dashboardify_columns', 2);
  $cols = array();
  // Helper variable to set blocks without weight.
  $i = 0;
  // Build rendered block list.
  foreach ($build as $key => $block) {
    // Get first element of array.
    $block = reset($block);
    // If there is no weight (block has been added recently) place it
    // in defaults column.
    $no_weight = (isset($block['#block']->dashboardify_weight) ? FALSE : TRUE);
    $is_block = isset($block['#block']);
    $is_object = is_object($block['#block']);
    if ($is_block && $is_object && $no_weight) {
      if (is_array($block)) {
        $col = ($i % $cols) + 1;
        $cols[$col][$key] = drupal_render($block);
      }
      $i++;
    }
    // Otherwise place it in proper column.
    elseif ($is_block && $is_object) {
      $col = floor($block['#block']->dashboardify_weight / 100) + 1;
      $cols[$col][$key] = drupal_render($block);
    }
  }
  // Place all columns in dashboard page, even if they have no blocks.
  if (count($cols) < $columns) {
    $remaining = $columns - count($cols);
    while ($remaining--) {
      array_push($cols, array());
    }
  }
  // Render output.
  $content = '';
  $i = 1;
  foreach ($cols as $key => $col) {
    $width = check_plain(variable_get('dashboardify_width_' . $i, 50));
    $blocks = theme('item_list', array('items' => $col));
    $content .= theme('dashboardify-column', array('blocks' => $blocks, 'width' => $width));
    $i++;
  }
  $output = theme('dashboardify', array('content' => $content));
  return $output;
}

/**
 * Extend block's classes with class for AJAX callback.
 */
function dashboardify_preprocess_block(&$vars) {
  $class = array('dashboardify');
  if (isset($vars['block']->dbid)) {
    $class = array_merge($class, array('dashboardify-' . $vars['block']->dbid));
    $vars['classes_array'] = array_merge($vars['classes_array'], $class);
  }
}

/**
 * Function for adding chosen blocks to dashboard.
 */
function dashboardify_add_block($bid) {
  // Check the token to make sure we have a valid request.
  $token = (isset($_REQUEST['token']) ? $_REQUEST['token'] : '');
  if (drupal_valid_token($token, 'dashboardify_add_block')) {
    global $user;
    $arg = (isset($_GET['destination']) ? $_GET['destination'] : 'dashboard');
    // Check if user has (default) dashboard.
    $query = db_select('dashboardify_dashboards', 'd');
    $did = $query
      ->fields('d', array('did'))
      ->condition('d.uid', $user->uid)
      ->execute();
    $id = $did->fetchField();
    // If not create (default) dashboard for user.
    if (!$did->rowCount()) {
      $id = db_insert('dashboardify_dashboards')
        ->fields(array(
          'name' => t('Default'),
          'uid' => $user->uid,
        ))
        ->execute();
    }
    // Create block instance for a user.
    $dbid = db_insert('dashboardify_blocks')
      ->fields(array(
        'did' => $id,
        'bid' => $bid,
        'arguments' => $arg,
      ))
      ->execute();
    drupal_set_message(t('Block was added into your dashboard.'), 'status');
    drupal_goto($arg);
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Remove block instance from user dashboard.
 */
function dashboardify_delete_block($dbid) {
  // Check the token to make sure we have a valid request.
  $token = (isset($_REQUEST['token']) ? $_REQUEST['token'] : '');
  if (drupal_valid_token($token, 'dashboardify_delete_block')) {
    global $user;
    $arg = (isset($_GET['destination']) ? $_GET['destination'] : 'dashboard');
    $query = db_query('DELETE db FROM {dashboardify_blocks} db
      INNER JOIN {dashboardify_dashboards} d on d.did = db.did
      WHERE
        d.uid = :uid
        AND db.dbid = :dbid',
      array(
        ':uid' => $user->uid,
        ':dbid' => $dbid,
      )
    );
    $message = t('Block was successfully deleted from dashboard.');
    drupal_set_message($message, 'status');
    drupal_goto($arg);
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Sets the new weight of each block according to the drag-and-drop order.
 */
function dashboardify_update() {
  // Check the token to make sure we have a valid request.
  $token = (isset($_REQUEST['token']) ? $_REQUEST['token'] : '');
  if (drupal_valid_token($token, 'dashboardify_update_blocks')) {
    global $user;
    for ($i = 1; $i < 10; $i++) {
      $name = 'col' . $i;
      if (isset($_REQUEST[$name])) {
        $save[$i - 1] = $_REQUEST[$name];
      }
    }
    $index = 0;
    /*
     * For each region and for each block set weight and update block
     * information in database.
     */
    foreach ($save as $item) {
      $col = $save[$index];
      $i = 1;
      foreach ($col as $block) {
        $weight = ($index * 100) + $i;
        $query = db_query('UPDATE {dashboardify_blocks} db
          INNER JOIN {dashboardify_dashboards} d on d.did = db.did
          SET db.weight = :weight
          WHERE
            d.uid = :uid
            AND db.dbid = :dbid',
          array(
            ':weight' => $weight,
            ':uid' => $user->uid,
            ':dbid' => $block,
          )
        );
        $i++;
      }
      $index++;
    }
    // Send output to javascript function.
    drupal_json_output(array('return' => 'Success', 'user' => $block));
    drupal_exit();
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Implements hook_theme().
 */
function dashboardify_theme() {
  return array(
    'dashboardify' => array(
      'variables' => array('content' => NULL),
      'template' => 'dashboardify',
    ),
    'dashboardify-column' => array(
      'variables' => array('block' => NULL, 'width' => NULL),
      'template' => 'dashboardify-column',
    ),
  );
}

/**
 * Process variables for dashboardify.tpl.php.
 *
 * @see dashboardify.tpl.php
 */
function template_preprocess_dashboardify(&$variables) {
  global $user;
  $account = user_load(arg(1));
  if ($user->uid == $account->uid) {
    $js_settings = array(
      'updatePath' => url('dashboardify/update/order'),
      'formToken' => drupal_get_token('dashboardify_update_blocks'),
    );
    $js = drupal_get_path('module', 'dashboardify') . '/js/dashboardify.js';
    drupal_add_library('system', 'ui.sortable');
    drupal_add_js(array('dashboardify' => $js_settings), 'setting');
    drupal_add_js($js);
  }
  $variables['theme_hook_suggestions'][] = 'dashboardify__' . $account->uid;
}

/**
 * Process variables for dashboardify-column.tpl.php.
 *
 * @see dashboardify-column.tpl.php
 */
function template_preprocess_dashboardify_column(&$variables) {
  $variables['classes_array'][] = 'dashboard-element';
}

/**
 * Implements hook_cron().
 */
function dashboardify_cron() {
  // Delete absent blocks from dashboards.
  $query = "DELETE db FROM {dashboardify_blocks} db
    LEFT JOIN {block} b on b.bid = db.bid
    where b.bid is null";
  $result = db_query($query);
}

/**
 * Implements hook_user_login().
 */
function dashboardify_user_login(&$edit, $account) {
  if (variable_get('dashboardify_landing_page', FALSE)) {
    drupal_goto('user/' . $account->uid . '/dashboard');
  }
}
