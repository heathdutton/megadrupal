<?php

/**
 * Tests limited_views trigger are working
 * 
 * NOTE: You *cannot* test for user-agent/bot checking because
 * simpletest relies on the user-agent for handling db-prefixing
 */
class LimitedViewsTest extends DrupalWebTestCase {
  protected $admin_user;
  protected $admin_content_user;
  protected $test_type_name;
  protected $rid;
  protected $message;
  protected $nodes_bodies;
  protected $threshold;
    
  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Limited Views content tests',
      'description' => 'Ensure access to content is controlled',
      'group' => 'Limited Views',
    );
  }

  public function setUp() {        
    parent::setUp('limited_views','node');
    $this->initNodes();
  }
  
  function initNodes() {
    $this->message ="oh what a feeling";    
    $this->test_type_name = strtolower($this->randomName(8));
    $this->nodes_bodies = array();
    $this->threshold = 5;

    // create the content type
    $this->admin_user = $this->drupalCreateUser(array(
      'administer content types',
      'administer permissions',
      'access content'
      ));
    
    $this->drupalLogin($this->admin_user);
    // Find the new role ID - it must be the maximum.
    $all_rids = array_keys($this->admin_user->roles);
    sort($all_rids);
    $this->rid = array_pop($all_rids);
    
    // Create content type to test against    
    $edit = array();
    $edit['name'] = $this->test_type_name;    
    $edit['type'] = $this->test_type_name;    
    $this->drupalPost('admin/structure/types/add', $edit, t('Save content type'));
    $this->assertText(t('has been added'));    

    // try a submit of the form instead http://drupal.org/node/1492182
    $edit = array();
    $rid = $this->rid;
    $edit["{$rid}[create {$this->test_type_name} content]"] = true;
    $edit["{$rid}[edit any {$this->test_type_name} content]"] = true;
    $edit["{$rid}[".LIMITED_VIEWS_PERM_ADMIN."]"] = true;

    $this->drupalPost('admin/people/permissions', $edit, t('Save permissions'));
    drupal_static_reset('user_access');
    drupal_static_reset('user_role_permissions');
    $this->assertText(t('The changes have been saved.'), t('Successful save message displayed.'));
    $this->drupalGet("node/add/".$this->test_type_name);
    $this->assertResponse(200, "node add page for {$this->test_type_name} loaded");

    // make sure its in our page
    $this->drupalGet('admin/structure/limited-views');
    $this->assertResponse(200, "Limited views admin page was found");   
    $this->assertText($this->test_type_name);
    
    // create the nodes to test against
    // set preferences, enable content type for limiting
    $edit = array();
    $edit['limited_views_types['.$this->test_type_name.']'] = true;
    $edit['limited_views_message'] = $this->message;
    $edit['limited_views_threshold'] = $this->threshold;
    $this->drupalPost('admin/structure/limited-views', $edit, t('Save configuration'));
    $this->drupalGet('admin/structure/limited-views');
    $this->assertFieldChecked('edit-limited-views-types-'.$this->test_type_name, 'Content type was selected');

    // create n number of nodes
    $nodes = array();
    $edit = array();
    // create more than we need, used for testing referer and useragent hits
    for($i=1; $i< $this->threshold+5; $i++) {
      $this->nodes_bodies[$i] = "body text ".$this->randomName();
      $edit['title'] = "title ".$this->randomName();
      $edit['body[und][0][value]'] = $this->nodes_bodies[$i];   
      $this->drupalPost('node/add/'.$this->test_type_name, $edit, t('Save'));
    }
    $this->drupalLogout();
  }
  
  function fakeBrowserJSONcookie($op = "", $arg = false) {
    static $cookie_obj;
    
    if(!isset($cookie_obj)) {
      $cookie_obj = array();
    }
    
    if($op == 'add') {
     $node = new stdClass();
     $node->nid = $arg;
     $node->timestamp = time();
     $cookie_obj[] = $node;
    }
    if($op == 'reset') {
      $cookie_obj = array();
    }
    return drupal_json_encode($cookie_obj);
  }
  
  public function testContentTypeLimited() {
    // check that we can view 5, but then on the 6th we get the message
    $cookie = "";
    $got_message = false;
        
    for($i=1; $i!= $this->threshold+2; $i++) {
      $this->drupalGet('node/'.$i );
      $this->assertResponse(200, "Loaded node {$i}");
      
      // not perfect, but emulate what the browser does
      $cookie = $this->fakeBrowserJSONcookie("add", $i);

      // rebuild cookies, we can be nasty about this because we dont care for SESSID
      $this->additionalCurlOptions[CURLOPT_COOKIE] = LIMITED_VIEWS_COOKIE_NAME_COUNT .'='.rawurlencode($cookie) . ';';
      $this->assertText($this->nodes_bodies[$i], "body was found");
      if( $i == $this->threshold +1 ) {
        $got_message = true;
        $this->assertText($this->message,"Message was found set on load $i of {$this->threshold} limit");
      }
    }
    $this->assertTrue($got_message, "Notice message was found on the next page after we consumed our limit");    

  }
  
  public function testClickFree() {
    ///////////////////////////////////////////////////////////////////////////////////
    // now try the firstclickfree tests
    $cookie = $this->fakeBrowserJSONcookie();
    
    // should be +1 of the limit to ensure the logic is enough to trigger the message
    $this->assertTrue(count(drupal_json_decode($cookie)) >variable_get('limited_views_threshold', 5), 
             "Page load cookie length was long enough to trigger the message" );
    
    // lets do a request as a normal user to make sure that message shows, request a page
    // that they havent been to before and the message should show
    // this means the decision making works initially    
    $this->additionalCurlOptions[CURLOPT_COOKIE] = LIMITED_VIEWS_COOKIE_NAME_COUNT .'='.rawurlencode($cookie) . ';';
    // Ensure that internal logged in variable and cURL options are reset.
    $this->drupalGet("node/".($this->threshold+3) );
    $this->assertText($this->message, "Limited reached text message was shown");
    $this->assertResponse(200,"ClickFree test page response 1");
    
    // a referer from a search engine that hits an article that they havent seen yet
    // this should pass through
    $this->additionalCurlOptions[CURLOPT_COOKIE] = LIMITED_VIEWS_COOKIE_NAME_COUNT .'='.rawurlencode($cookie) . ';';
    $this->additionalCurlOptions[CURLOPT_REFERER] = "https://www.google.com.au/search?ix=hcb&sourceid=chrome&client=ubuntu&channel=cs&ie=UTF-8&q=stuff";
    
    $this->drupalGet("node/".($this->threshold+3));        
    $this->assertNoText($this->message, "Search referer wasnt shown the message");
    $this->assertResponse(200,"ClickFree test page response 3");
    
    // just double check that a user, with a full house of cookies set
    // get the message when they view one they have not viewed
    $this->additionalCurlOptions[CURLOPT_COOKIE] = LIMITED_VIEWS_COOKIE_NAME_COUNT .'='.rawurlencode($cookie) . ';';
    $this->additionalCurlOptions[CURLOPT_REFERER] = "";
    $this->drupalGet("node/".($this->threshold+4));        
    $this->assertText($this->message, "Client exceeded the views and was shown the message");
    $this->assertResponse(200,"ClickFree test page response 4");
    
  }
}

