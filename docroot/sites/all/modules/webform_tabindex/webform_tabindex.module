<?php

/**
 * @file
 * Provides simple way to create tabindex attribute of forms elements.
 *
 * @author Devendra Yadav <dev.firoza@gmail.com>
 */

/**
 * Implements hook_permission().
 */
function webform_tabindex_permission() {
  return array(
    'administer webform tabindex' => array(
      'title' => t('Administer webform tabindex'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function webform_tabindex_menu() {
  $items = array();
  $items['node/%webform_menu/webform/tabindex'] = array(
    'title' => 'Tab Index',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_tabindex_form', 1),
    'access callback' => '_webform_tabindex_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/webform.tabindex.admin.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function webform_tabindex_theme() {
  $theme = array(
    'webform_tabindex_form' => array(
      'render element' => 'form',
    ),
  );
  return $theme;
}

/**
 * Ensure a user both access and node 'view' permission on tabindex.
 */
function _webform_tabindex_access($node) {
  return user_access('administer webform tabindex') && node_access('view', $node);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_tabindex_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {
  $nid = $form['nid']['#value'];
  $cid = $form['cid']['#value'];
  $tabindex = 1;
  if ($cid) {
    // This query is used to get the default value of tabidex.
    $query = "SELECT tabindex, skip FROM {webform_tabindex} WHERE nid = :nid AND cid = :cid";
    $tabindex_obj = db_query($query, array(':nid' => $nid, ':cid' => $cid))->fetchObject();
    $tabindex = $tabindex_obj->tabindex;
  }
  else {
    // This query is used to get next maximum value of tabindex to set the next
    // suggested default value of tabindex.
    $query = "SELECT MAX(tabindex)+1 AS tabindex FROM {webform_tabindex} WHERE nid = :nid";
    $tabindex = db_query($query, array(':nid' => $nid))->fetchField();
    $tabindex = isset($tabindex) ? $tabindex : 1;
  }
  
  $form['tabi'] = array(
      '#type' => 'fieldset',
      '#title' => 'TabIndex',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
  );
  
  $form['tabi']['tabindex'] = array(
    '#type' => 'textfield',
    '#title' => t('Tabindex'),
    '#default_value' => $tabindex,
    '#element_validate' => array('element_validate_number'),
    '#description' => t('Suggested tabindex number is %tabindex.', array('%tabindex' => $tabindex)),
    '#maxlength' => 3,
  );
  
  $form['tabi']['skip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip'),
    '#default_value' => isset($tabindex_obj->skip) ? $tabindex_obj->skip : 0,
    '#return_value' => 1,
    '#description' => t('To skip the Tabindex on this element, Please make selected this checkbox.'),
  );
}

/**
 * Implements hook_FORM_alter().
 */
function webform_tabindex_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']->type) && in_array($form['#node']->type, webform_node_types())) {
    $submitted = isset($form['submitted']) ? $form['submitted'] : array();
    $nid = isset($form['#node']->nid) ? $form['#node']->nid : 0;
    if ($form_id == 'webform_client_form_' . $nid) {
      // This query is used to fetch all tabindex values of corresponding
      // webform components.
      $query = db_select('webform_tabindex')
              ->fields('webform_tabindex', array('cid', 'tabindex', 'skip'))
              ->condition('nid', $nid);
      $result = $query->execute()->fetchAll();

      $tabindexes = array();
      if (count($result)) {
        foreach ($result as $data) {
          $tabindexes[$data->cid] = $data->tabindex;
          if ($data->skip) {
            $tabindexes[$data->cid] = '-1';
          }
        }
        _webform_tabindex_add_tabindex($form, $nid, $tabindexes);
      }
    }
  }
}


/**
 * This is what alters the rendering.
 *
 * @see _webform_tabindex_add_a_tabindex()
 */
function _webform_tabindex_add_tabindex(&$form_element, $nid, $tabindexes) {
  _webform_tabindex_add_a_tabindex($form_element, $nid, $tabindexes);

  $components = element_children($form_element);
  foreach ($components as $key => $component_id) {
    $child_element = &$form_element[$component_id];
    _webform_tabindex_add_tabindex($child_element, $nid, $tabindexes);
  }
}

/**
 * Called by _webform_tabindex_add_tabindex within the foreach loop.
 *
 * @see _webform_tabindex_add_tabindex()
 */
function _webform_tabindex_add_a_tabindex(&$form_element, $nid, $tabindexes) {

  $cid = 0;
  if (isset($form_element['#webform_component']['cid'])) {
    $cid = $form_element['#webform_component']['cid'];
  }

  if (isset($form_element['#attributes']['tabindex'])) {
    $current_tabindex = $form_element['#attributes']['tabindex'];
  }
  else {
    $current_tabindex = NULL;
  }

  if ($cid != 0) {
    if ($current_tabindex != NULL) {
      $form_element['#attributes']['tabindex'] = array_merge($form_element['#attributes']['tabindex'], array($tabindexes[$cid]));
    }
    else {
      $form_element['#attributes']['tabindex'] = array($tabindexes[$cid]);
    }
  }
}

/**
 * Implements hook_webform_component_insert().
 */
function webform_tabindex_webform_component_insert($component) {
  // Insert a record into webform_tabindex module table when
  // a component is inserted.
  db_insert('webform_tabindex')
  ->fields(array(
      'nid' => $component['nid'],
      'cid' => $component['cid'],
      'tabindex' => $component['tabi']['tabindex'],
      'skip' => (int) $component['tabi']['skip'],
  ))->execute();
}

/**
 * Implements hook_webform_component_update().
 */
function webform_tabindex_webform_component_update($component) {
  // Use to check user corresponding tabindex exists in webform_tabindex table.
  if (isset($component['tabi']['tabindex']) && $component['tabi']['tabindex'] > 0) {
    $nid = $component['nid'];
    $cid = $component['cid'];
    $tabindex = $component['tabi']['tabindex'];
    db_merge('webform_tabindex')
      ->key(array('nid' => $nid, 'cid' => $cid))
      ->fields(array(
      'nid' => $nid,
      'cid' => $cid,
      'tabindex' => $tabindex,
      'skip' => (int) $component['tabi']['skip'],
       )
     )
    ->execute();
  }
}

/**
 * Implements hook_webform_component_delete().
 */
function webform_tabindex_webform_component_delete($component) {
  // Delete a record form webform_tabindex table when a component element
  // is deleted.
  db_delete('webform_tabindex')
    ->condition('nid', $component['nid'])
    ->condition('cid', $component['cid'])
    ->execute();
}

/**
 * Implements hook_theme_registry_alter().
 */
function webform_tabindex_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'webform_tabindex');
  $theme_registry['webform_admin_content']['theme path'] = $path;
  $theme_registry['webform_admin_content']['function'] = 'webform_tabindex_theme_webform_admin_content';
}

/**
 * Use to push a link 'Tabindex' to view/manage tabindex position.
 */
function webform_tabindex_theme_webform_admin_content($variables) {
  $nodes = $variables['nodes'];
  $header = array(t('Title'),
    array('data' => t('View'), 'colspan' => '4'),
    array('data' => t('Operations'), 'colspan' => '3'),
  );

  $rows = array();
  foreach ($nodes as $node) {
    $rows[] = array(
      l($node->title, 'node/' . $node->nid),
      l(t('Submissions'), 'node/' . $node->nid . '/webform-results'),
      l(t('Analysis'), 'node/' . $node->nid . '/webform-results/analysis'),
      l(t('Table'), 'node/' . $node->nid . '/webform-results/table'),
      l(t('Download'), 'node/' . $node->nid . '/webform-results/download'),
      node_access('update', $node) ? l(t('Edit'), 'node/' . $node->nid . '/edit') : '',
      user_access('delete all webform submissions') ? l(t('Clear'), 'node/' . $node->nid . '/webform-results/clear') : '',
      node_access('update', $node) ? l(t('Tabindex'), 'node/' . $node->nid . '/webform/tabindex') : '',
    );
  }

  if (empty($rows)) {
    $webform_types = webform_variable_get('webform_node_types');
    if (empty($webform_types)) {
      $message = t('Webform is currently not enabled on any content types.') . ' ' . t('Visit the <a href="!url">Webform settings</a> page and enable Webform on at least one content type.', array('!url' => url('admin/config/content/webform')));
    }
    else {
      $webform_type_list = webform_admin_type_list();
      $message = t('There are currently no webforms on your site. Create a !types piece of content.', array('!types' => $webform_type_list));
    }

    $rows[] = array(
      array('data' => $message, 'colspan' => 7),
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}
