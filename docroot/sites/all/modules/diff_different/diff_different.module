<?php
/**
 * @file
 * diff_different.module
 *
 * Performs Diff comparison inside the node template in a teacher/student
 * or similar scenario.
 */

/**
 * Implements hook_node_view_alter().
 *
 * Called at the end of node_view(), when $node->content as created by
 * node_build_content() has been rendered into an array that is passed in here.
 */
function diff_different_node_view_alter(&$build) {
  if (empty($build['#node']) || ($build['#view_mode'] != 'full') || (arg(2) == 'revisions' && arg(4) != 'view')) {
    // Not a normal node view like "node/25" or "node/25/revisions/91/view"
    return;
  }
  diff_different_render_diff($build, $build['#node'], $key = 'diff_different');

  $content_type = $build['#node']->type;
  $field_name = variable_get("diff_different_{$content_type}_field");
  if (isset($build[$field_name]['#weight'])) {
    // Put the Diff comparison either just below or just above the ref. field.
    $offset = variable_get("diff_different_{$content_type}_weight", 1);
    $build[$key]['#weight'] = $build[$field_name]['#weight'] + $offset;
  }
}

/**
 * Render a revision Diff into the supplied array.
 *
 * @param array $build
 *   The array in which the revision Diff is to be rendered.
 * @param object $node
 *   The node whose revision Diff is to be rendered.
 * @param int|string $key
 *   The index in the $build array where the Diff should be rendered.
 */
function diff_different_render_diff(&$build, $node, $key = 0) {

  $content_type = variable_get("diff_different_{$node->type}_field");
  if (empty($content_type)) {
    // The content type is not enabled.
    return;
  }

  $is_student_teacher = !variable_get('diff_different_revision_scenario');

  list($revision_left, $revision_right) = $is_student_teacher
    ? diff_different_get_student_teacher_revisions($node)
    : diff_different_get_2_latest_revisions($node);

  // Generic revision access check is on the left revision. Note that this
  // includes access check on current revision, normally the right revision.
  // As the comparison always shows either 1 or 2 unpublished revisions, we
  // require 'view own unpublished content' permission from the author.
  // If Revisioning is enabled then the "view revisions of own content"
  // permission is sufficient through node_access().
  global $user;
  $access = ($user->uid == $revision_left->uid && user_access('view own unpublished content'))
    || (module_exists('revisioning') ? node_access('view', $revision_left) : _node_revision_access($revision_left, 'view'));

  if (!$access) {
    return;
  }
  if (empty($revision_right)) {
    if ($is_student_teacher && $user->uid == $revision_left->uid && user_access('view diff different messages')) {
      drupal_set_message(t('A reviewer response to this revision does not yet exist.'));
    }
    return;
  }
  elseif (is_numeric(arg(3)) && arg(3) != $revision_right->vid) {
    // Support node/25/revisions/91/view only, if the revision (91) is the one
    // we're comparing against.
    return;
  }

  // $build[$key]['#attached'][] = diff_build_attachments();
  // Generate table header (date, username, log message).
  $header_left = t('!date by !username', array(
    '!date' => l(format_date($revision_left->timestamp), "node/$node->nid/revisions/$revision_left->vid/view", array('absolute' => 1)),
    '!username' => theme('username', array('account' => $revision_left)),
  ));
  $header_right = t('!date by !username', array(
    '!date' => l(format_date($revision_right->timestamp), "node/$node->nid/revisions/$revision_right->vid/view", array('absolute' => 1)),
    '!username' => theme('username', array('account' => $revision_right)),
  ));

  $revision_left_log = $revision_right_log = '';
  if (!empty($revision_left->log)) {
    $revision_left_log = '<p class="revision-log">' . filter_xss($revision_left->log) . '</p>';
  }
  if (!empty($revision_right->log)) {
    $revision_right_log = '<p class="revision-log">' . filter_xss($revision_right->log) . '</p>';
  }
  $rows = array();
  if (!empty($revision_left_log) || !empty($revision_right_log)) {
    $rows['logs'] = array(
      array('data' => $revision_left_log, 'colspan' => 2),
      array('data' => $revision_right_log, 'colspan' => 2),
    );
  }
  // The light-weight revisions loaded so far have the correct uid, but are
  // incomplete, e.g., they don't have content bodies. So load the complete
  // objects now (note: the uid in both revisions refers to the node author).
  $revision_left  = node_load($node->nid, $revision_left->vid);
  $revision_right = node_load($node->nid, $revision_right->vid);

  module_load_include('inc', 'diff', 'diff.pages');

  $state = variable_get('diff_default_state_node', 'raw');
  $rows = array_merge($rows, _diff_body_rows($revision_left, $revision_right, $state));

  $build[$key] = array(
    '#theme' => 'table__diff__standard',
    '#header' => _diff_default_header($header_left, $header_right),
    '#rows' => $rows,
    '#attributes' => array('class' => array('diff')),
    '#colgroups' => _diff_default_cols(),
    '#sticky' => FALSE,
  );
}

/**
 * Implements hook_ds_pre_render_alter().
 *
 * Display Suite requires special treatment as it discards the template variable
 * $content in favour of its own, e.g., $ds_content.
 */
function diff_different_ds_pre_render_alter(&$layout_render_array, $context) {
  if ($context['view_mode'] != 'full') {
    return;
  }
  $content_type = $context['bundle'];
  $field_name = variable_get("diff_different_{$content_type}_field");
  foreach ($layout_render_array as $region => &$fields) {
    foreach ($fields as $field_content) {
      if (isset($field_content['#field_name']) && $field_content['#field_name'] == $field_name) {
        // Render the Diff of the entire node into the selected field.
        diff_different_render_diff($fields, $context['entity'], $key = 'diff_different');
        if (isset($field_content['#weight'])) {
          // Put the Diff comparison either just below or just above the field.
          $offset = variable_get("diff_different_{$content_type}_weight", 1);
          $fields[$key]['#weight'] = $field_content['#weight'] + $offset;
        }
        return;
      }
    }
  }
}

/**
 * Returns the latest student revision and associated teacher revision.
 *
 * @param object $node
 *   The node object.
 *
 * @return array 
 *   Two elements, the student (left) and teacher (right) revisions; the teacher
 *   revision may be NULL.
 */
function diff_different_get_student_teacher_revisions($node) {

  // The creator of the node is deemed to be the student.
  $student_uid = $node->uid;

  // Teacher revision is the latest revision, provided it is not created by the
  // student.
  // node_revision_list() array is ordered by DESCending vid.
  $node_revisions = node_revision_list($node);
  $teacher_revision = reset($node_revisions);
  if ($teacher_revision->uid == $student_uid) {
    $teacher_revision = NULL;
  }
  else {
    $teacher_revision->nid = $node->nid;
  }
  // Find the latest revision by the student.
  foreach ($node_revisions as $revision) {
    if ($revision->uid == $student_uid) {
      $student_revision = $revision;
      break;
    }
  }
  $student_revision->nid = $node->nid;
  return array($student_revision, $teacher_revision);
}

/**
 * Returns the last two revisions of the supplied node.
 *
 * @param object $node
 *   The node object.
 *
 * @return array
 *   Two elements, the 2nd (right) revision may be NULL.
 */
function diff_different_get_2_latest_revisions($node) {
  // node_revision_list() array is ordered by DESCending vid.
  $node_revisions = node_revision_list($node);
  $revision_right = reset($node_revisions);
  $revision_left = next($node_revisions);
  $revision_left->nid = $revision_right->nid = $node->nid;
  return array($revision_left, $revision_right);
}

/**
 * Implements hook_node_presave().
 *
 * In the student-teacher scenario, with a not published node, we always want
 * the current revision to point to the latest revision.
 * This is not necessarily the case when Revisioning is enabled, so adjust.
 */
function diff_different_node_presave($node) {
  if (!$node->status && module_exists('revisioning')) {
    // See if this content type is enabled for Diff Different.
    $content_type = variable_get("diff_different_{$node->type}_field");
    if (!empty($content_type)) {
      // Next line is for when the module is used with Revisioning module.
      $node->revision_operation = REVISIONING_NEW_REVISION_NO_MODERATION;
    }
  }
}

/**
 * Implements hook_menu().
 */
function diff_different_menu() {
  $items = array(
    'admin/config/content/diff-different' => array(
      'title' => 'Diff Different',
      'description' => 'Diff Different settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('diff_different_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'diff_different.admin.inc',
    ),
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function diff_different_help($path, $arg) {
  switch ($path) {
    case 'admin/help#diff_different':
      $t = t('Configuration instructions and tips are in this <a target="readme" href="@README">README</a> file.<br/>Known issues and solutions may be found on the <a taget="project" href="@diff_different">Diff Different</a> project page.', array(
        '@README' => url(drupal_get_path('module', 'diff_different') . '/README.txt'),
        '@diff_different' => url('http://drupal.org/project/diff_different')));
      break;

    case 'admin/config/content/diff-different':
      $t = t('Select which content types need to have the <em>Diff Different</em> style of "diffing" applied.');
      break;
  }
  return empty($t) ? '' : '<p>' . $t . '</p>';
}

/**
 * Implements hook_permission().
 */
function diff_different_permission() {
  $permissions = array(
    'view diff different messages' => array(
      'title' => t('View Diff Different messages'),
      'description' => '',
    ),
  );
  return $permissions;
}
