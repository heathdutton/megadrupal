<?php

/**
 * @file
 * Resource booking module implementation
 */

//status constants
define('CONST_RESOURCE_BOOKING_REQUESTED', 'r');
define('CONST_RESOURCE_BOOKING_CONFIRMED', 'c');
define('CONST_RESOURCE_BOOKING_DECLINED', 'd');
define('CONST_RESOURCE_BOOKING_CANCELLED', 'x');

//permission constants
define('CONST_RESOURCE_BOOKING_CHANGE_STATUS', 'change resource status');
define('CONST_RESOURCE_BOOKING_VIEW_RESOURCE_SCHEDULE', 'access resource scheduling');

/**
 * Implements hook_permission().
 */
function resource_booking_permission() {
  return array(
    CONST_RESOURCE_BOOKING_CHANGE_STATUS => array(
      'title' => t('Change resource booking status'),
    ),
    CONST_RESOURCE_BOOKING_VIEW_RESOURCE_SCHEDULE => array(
      'title' => t('Access resouce booking schedule'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function resource_booking_menu() {
  $items['admin/config/date/resource-booking'] = array(
    'title' => 'Resource Booking',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resource_booking_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'resource_booking.admin.inc',
  );
  return $items;
}
 
/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function resource_booking_field_info() {
  return array(
    'resource_booking' => array(
      'label' => t('Resource booking'),
      'description' => t('Shows list of resources available for booking'),
      'default_widget' => 'resource_booking_widget',
      'default_formatter' => 'resource_booking_formatter',
      'instance_settings' => array('cardinality' => FIELD_CARDINALITY_UNLIMITED),
//     Entity module integration
      'property_callbacks' => array('resource_booking_entity_metadata_property_info_alter'),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function resource_booking_field_is_empty($item, $field) {
  
  return (empty($item['nid']) && empty($item['sdate']) && empty($item['edate']) );
}

/**
 * Implements hook_field_formatter_info().
 */
function resource_booking_field_formatter_info() {
  return array(
    'resource_booking_formatter' => array(
      'label' => t('Resource booking'),
      'field types' => array('resource_booking'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function resource_booking_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $sdate = NULL;
  $edate = NULL;
  $resources = array();
  switch ($display['type']) {
    case 'resource_booking_formatter':
      foreach ($items as $delta => $item) {
        $resources[] = $item['nid'];
        $rb_status[$item['nid']] = $item['rb_status'];
        if (!isset($sdate)) {
          $sdate = $item['sdate'];
          $edate = $item['edate'];
        }
      }
      if (!empty($resources)) {
        // $resources = db_select('node', 'n')->fields('n', array('nid', 'title'))
          // ->condition('nid', $resources, 'IN')->execute()->fetchAllKeyed();      
        $output = theme('resources_booking_view', array('resources' => $resources, 'status' => $rb_status,
        'startdate' => $sdate, 'enddate' => $edate));
      }
      else {
        $output = '';
      }
      break;
  }
  if (!empty($output)) {
    $element[$delta] = array(
      '#markup' => $output,
    );
    return $element;
  }
}

function resource_booking_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($items as $nid => $data) {
    foreach ($data as $key => $values) {
      foreach ($values as $fld => $value) {
        switch ($fld) {
      	  case 'rb_status':
            if (!empty($value)) {
              $status = _resource_booking_field_get_rb_status();
      	      $items[$nid][$key][$fld] = $status[$value];
      	    }
            break;

          case 'nid':
            break;

          case 'sdate':
          case 'edate':
            $items[$nid][$key][$fld] = empty($value)? NULL : format_date($value, 'short');
            break;

        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 *
 */
function resource_booking_field_widget_info() {
  return array(
    'resource_booking_widget' => array(
      'label' => t('Resource booking widget'),
      'field types' => array('resource_booking'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
      //TODO: where to set the default cardinality
      'settings' => array('cardinality' => FIELD_CARDINALITY_UNLIMITED),
    ),
//    'resources_widget' => array(
//      'label' => t('Resources widget'),
//      'field types' => array('resource_booking'),
//      'behaviors' => array(
//        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
//      ),
//      //TODO: where and how to set unlimited cardinality otherwise users have to set it manually
////      'settings' => array('cardinality' => FIELD_CARDINALITY_UNLIMITED)
//    )
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function resource_booking_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  //provide a selection for choosing node type that represents a resource
  $node_types = node_type_get_types();
  foreach ($node_types as $key => $node_spec) {
    $options[$key] = $node_spec->name;
  }
  $form['resource_booking_node'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#required' => TRUE,
    '#title' => t('Select node type'),
    '#description' => t('Select node type that has bookable resources'),
    '#default_value' => isset($settings['resource_booking_node'])? $settings['resource_booking_node'] : '',
  );
  $form['resource_schedule_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Path for resource schedule'),
    '#description' => t('Path to the calendar view that displays the resource schedule. Do not enter month/day/year in the url.'),
    '#default_value' => empty($settings['resource_schedule_url'])? 'rs-calendar' : $settings['resource_schedule_url'],
    '#field_suffix' => '/',
    '#required' => TRUE,
    '#size' => 16,
  );
  //allow for selection of resource types
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_vocabulary', 'v', 'v.vid = t.vid');
  $result = $query->fields('t', array('tid', 'name'))
    ->fields('v', array('name'))
    ->orderby('v.name, t.name')
    ->execute();
  foreach ($result as $record) {
    $resource_terms[$record->v_name][$record->tid] = $record->name;
  }
  $form['resource_terms'] = array(
    '#type' => 'select',
    '#title' => t('Select allowed resource types'),
    '#options' => $resource_terms,
    '#multiple' => TRUE,
    '#default_value' => empty($settings['resource_terms'])? array() : $settings['resource_terms'],
    '#description' => t('Select allowed resource types. To select all resource types and new ones added in future, do not select anything.'),
  );
  $form['resource_terms_multiple'] = array(
    '#type' => 'select',
    '#title' => t('Allow multiple'),
    '#options' => $resource_terms,
    '#multiple' => TRUE,
    '#default_value' => empty($settings['resource_terms_multiple'])? array() : $settings['resource_terms_multiple'],
    '#description' => t('Select allowed resource types that allow multiple resources to be booked.'),
  );
  $fields_inct = array();
  if (!empty($settings['resource_booking_node'])) {
    $types = field_info_instances('node', $instance['bundle']);
    foreach ($types as $fld => $spec) {
      if (strpos($spec['widget']['type'], 'date') !== FALSE) {
        $fields_inct[$fld] = $spec['label'];
      }
    }
  }
  $form['resource_booking_ct_date'] = array(
    '#type' => 'select',
    '#title' => t('Date field'),
    '#options' => $fields_inct,
    '#default_value' => empty($settings['resource_booking_ct_date'])? 0 : $settings['resource_booking_ct_date'],
    '#description' => t('If the content type already has a date field, then select that field to use date values for resource booking.'),
    '#empty_value' => 0,
  );
  return $form;
}

/**
 * Implements hook_field_widget_form().
 *
 */
function resource_booking_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $sdate = NULL;
  $edate = NULL;
  $rb_status = NULL;
  $resources = array();
  $field_name = $element['#field_name'];
  $show_availability = FALSE;
  $start_date = NULL;
  $end_date = NULL;
  $form_state['values']['resource_booking_field'] = array('field_name' => $field_name, 'langcode' => $langcode); //for use in ajax callback
  $rb_schedule_options = array('attributes' => array('target' => '_blank'));
  $is_settings = (arg(0) == 'admin');
  //get the default values loaded from storage
  foreach ($items as $key => $item) {
    if (!empty($item)) {
      if (!isset($sdate) && isset($item['sdate'])) {
        $sdate = $item['sdate'];
        $edate = $item['edate'];
      }
      if (!is_array($item['nid']) && !empty($item['nid'])) {
        $resources[] = $item['nid'];
        $rb_status[$item['nid']] = $item['rb_status'];
      }
    }
  }

  $element += array(
    '#type' => 'fieldset',
    '#element_validate' => array('resource_booking_field_widget_validate'),
  );
  //if start and end are not set, then default it to today
  if (!isset($sdate) && !isset($edate)) {
    $today_9am = mktime(9, 0, 0, date('m'), date('d'), date('Y'));
    $sdate = $today_9am;
    $edate = strtotime('+1 day', $sdate);
  }
  $date_format = variable_get('date_format_short', 'Y-m-d H:i');
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  switch ($instance['widget']['type']) {
    case 'resource_booking_widget':
      $class = '';
      if (!empty($settings['resource_booking_ct_date'])) {
        $jfields = array(
          'resource_booking' => array(
            'date_field' => $settings['resource_booking_ct_date'],
            'rb_field' => $field_name,
          )
        );
        $rin = field_info_instance('node', $settings['resource_booking_ct_date'], $field['type_name']);
        $df = $rin['widget']['settings']['input_format'];
        //we don't know how to find out the granularity. for now we will remove "seconds from the format"
        $token = explode(':', $df);
        $date_format = $token[0] . ':' . $token[1];
        if (strpos($df, 'a') !== FALSE) {
          $date_format .= 'a';
        }
        $class = 'hidden';
        $path = drupal_get_path('module', 'resource_booking');
        drupal_add_js($path . '/resource_booking.js');
        drupal_add_css($path . '/resource_booking.css');
        drupal_add_js($jfields, 'setting');
      }
      $element['sdate'] = array(
        '#type' => 'date_popup',
        '#date_type' => DATE_UNIX,
        '#title' => t('Start date and time'),
        '#default_value' => $is_settings? '' : date('Y-m-d H:i', $sdate),
        '#date_format' => $date_format,
        '#prefix' => '<div class="resource-booking-start-date ' . $class .  '">', '#suffix' => '</div>',
      );
      $element['edate'] = array(
        '#type' => 'date_popup',
        '#date_type' => DATE_UNIX,
        '#title' => t('End date and time'),
        '#default_value' => $is_settings? '' : date('Y-m-d H:i', $edate),
        '#date_format' => $date_format,
        '#prefix' => '<div class="resource-booking-end-date ' . $class .  '">', '#suffix' => '</div>',
      );
      //deliberate fall through. no break statement

//    case 'resources_widget':
      $element['btn_check_status'] = array(
        '#type' => 'button',
        '#value' => t('Refresh availability'),
        '#ajax' => array(
          'callback' => 'resource_booking_ajax_callback',
          'wrapper' => "rb_status-wrapper",
        ),
        '#limit_validation_errors' => array(array($field_name)),
      );

      $element['dmy'] = array(
        '#type' => 'hidden',
        '#value' => '',
        '#prefix' => '<div style="clear:both;">',
        '#suffix' => '</div>',
      );

        //get the selected start & end dates
      if (empty($form_state['values'][$field_name][$langcode])) {
        //no data selected. loading scenario
        if (!empty($sdate)) {
          $start_date = $sdate;
          $end_date = $edate;
        }
      }
      else {
        //check the selected resources
        foreach ($form_state['values'][$field_name][$langcode] as $selected_resources) {
          $resources[] = $selected_resources['nid'];
        }
        //user input scenario. if use has entered value. we should check for that and not stored
        //value
        $start_date = $form_state['values'][$field_name][$langcode][0]['sdate'];
        $end_date = $form_state['values'][$field_name][$langcode][0]['edate'];
      }

      if (!empty($start_date) && !empty($end_date)) {
        //choose 1 minute higher than the entered value to avoid end of one with start of another
        $start_date = strtotime("+1 minute", $start_date);
        //choose 1 minute less than the entered value to avoid start of one with end of another
        $end_date = strtotime("-1 minute", $end_date);
      }

      $query = db_select('node', 'n');
      $query->join('taxonomy_index', 'ti', 'ti.nid = n.nid');
      $query->join('taxonomy_term_data', 'td', 'td.tid = ti.tid');
      $query->fields('n', array('nid', 'title'))
        ->fields('td', array('name', 'tid'))
        ->condition('n.type',  isset($settings['resource_booking_node'])? $settings['resource_booking_node'] : '')
        ->condition('status', 1)
        ->orderby('td.name');
      if (!empty($settings['resource_terms'])) {
        $query->condition('ti.tid', $settings['resource_terms'], 'IN');
      }

      if (!empty($start_date) && !empty($end_date)) {
        $show_availability = TRUE;
        $query->leftjoin("field_data_$field_name", 'f', '
          f.entity_type = :etype AND
          f.' . $field_name . '_nid = n.nid AND
          f.' . $field_name . '_rb_status != :rb_status AND
          (
            (:sdate >= ' . $field_name . '_sdate and :sdate <= ' . $field_name . '_edate) OR
            (:edate >= ' . $field_name . '_sdate and :edate <= ' . $field_name . '_edate) OR
            (' . $field_name . '_sdate >= :sdate and ' . $field_name . '_sdate <= :edate) OR
            (' . $field_name . '_edate >= :sdate and ' . $field_name . '_edate <= :edate)
          )
          ', array(':sdate' => $start_date, ':edate' => $end_date, ':etype' => $element['#entity_type'],
          ':rb_status' => CONST_RESOURCE_BOOKING_DECLINED));
        $query->fields('f', array($field_name . '_rb_status', 'entity_id', 'revision_id'));
      }

      $result = $query->execute();
      $availability = array();
      $options = array();
      foreach ($result as $record) {
        $options[$record->tid][$record->name][$record->nid] = $record->title;
        if (!empty($record->entity_id)) {
          $availability[$record->nid] = array('entity_id' => $record->entity_id,
            'revision_id' => $record->revision_id,
            'rb_status' => $record->{$field_name . "_rb_status"}, );
        }
      }
      $cnt = 0;
      $element["resources"] = array(
        '#type' => 'container',
        '#prefix' => "<div id='rb_status-wrapper'>",
        '#suffix' => '</div>',
        '#theme' => 'resources_booking_form',
      );
      $allow_multiple = empty($settings['resource_terms_multiple'])? array() : $settings['resource_terms_multiple'];

      foreach ($options as $tid => $term_resources) {
        foreach ($term_resources as $name => $options_values) {
          $options_values[0] = t('None');
          $default_values = array_keys($options_values);
          //get the value that's relevant for this resource
          $result = array_intersect($default_values, $resources);
          if (in_array($tid, $allow_multiple)) {
            $select_type = 'checkboxes';
            $default_value = $result;
            unset($options_values[0]);
          }
          else {
            $select_type = 'radios';
            $default_value = array_pop($result);
          }

          $element["resources"]["fs-$cnt"] = array(
            '#type' => 'fieldset',
            '#title' => check_plain($name),
            '#collapsible' => TRUE,
  //          '#collapsed' => !$default_value,
          );
          $element["resources"]["fs-$cnt"]["nid-$cnt"]= array(
            '#type' => $select_type,
            '#options' => $options_values,
            '#default_value' => $default_value,
          );
          if (user_access(CONST_RESOURCE_BOOKING_CHANGE_STATUS)) {
            $rb_status_enabled = 'enabled';
          }
          else {
            $rb_status_enabled = 'disabled';
          }

          foreach ($options_values as $key => $value) {
            if (!empty($key)) {
              $element["resources"]["fs-$cnt"]["rb_status-$cnt"][$key] = array(
                '#type' => 'select',
                '#options' => _resource_booking_field_get_rb_status(),
                '#default_value' => (isset($rb_status) && !empty($rb_status[$key])) ? $rb_status[$key] : CONST_RESOURCE_BOOKING_REQUESTED,
                '#attributes' => array($rb_status_enabled => $rb_status_enabled),
              );
              if (!$show_availability) {
                $available = t('Unknown');
              }
              else {
                $available = empty($availability[$key]['rb_status'])? t('Available') : t('Booked');
              }

              //provide a link to the resouce booking schedule
              if (user_access(CONST_RESOURCE_BOOKING_VIEW_RESOURCE_SCHEDULE)) {
                $available_link = l($available, $settings['resource_schedule_url'] . '/month/' . date('Y', $start_date) . '-' . date('m', $start_date) . '/' . $key, $rb_schedule_options);
              }
              else {
                $available_link = '';
              }


              $element["resources"]["fs-$cnt"]["availability-$cnt"][$key] = array(
                '#type' => 'markup',
                '#markup' => $available_link,
                '#value' => $available,
              );
            }
            else {
              //"none" row
              $element["resources"]["fs-$cnt"]["rb_status-$cnt"][$key] = array(
                '#markup' => '',
              );
              $element["resources"]["fs-$cnt"]["availability-$cnt"][$key] = array(
                '#type' => 'markup',
                '#markup' => '',
              );
            }
          }

          $cnt++;
        }
      }

      break;

  }
  return $element;
}

/**
 * ajax callback
 */
function resource_booking_ajax_callback($form, &$form_state) {

  $ajax_field = $form_state['values']['resource_booking_field']['field_name'];
  $langcode = $form_state['values']['resource_booking_field']['langcode'];
  $output = $form[$ajax_field][$langcode]['resources'];

  return $output;
}

/**
 * Get Booking status
 */
function _resource_booking_field_get_rb_status() {
  return array(
    CONST_RESOURCE_BOOKING_REQUESTED => t('Requested'),
//    CONST_RESOURCE_BOOKING_CANCELLED => t('Cancelled'),
    CONST_RESOURCE_BOOKING_CONFIRMED => t('Confirmed'),
    CONST_RESOURCE_BOOKING_DECLINED => t('Declined'),
  );
}

/**
 * Implements hook_field_widget_validate().
 */
function resource_booking_field_widget_validate($element, &$form_state) {
  //take all the selected resources and put in a structure that db storage can be done
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $cnt = 0;
  $items = array();
  $nids = array();
  $widget_values = $form_state['values'][$field_name][$langcode];

  while (isset($widget_values['resources']["fs-$cnt"])) {
    $resource = $widget_values['resources']["fs-$cnt"]["nid-$cnt"];
    if (!empty($resource)) { //check if "none" has been selected
      if (is_array($resource)) {
        foreach ($resource as $key => $value) {
          if (!empty($value)) {
            $status = $widget_values['resources']["fs-$cnt"]["rb_status-$cnt"][$key];
            $items[] = array('nid' => $value, 'rb_status' => $status);
            $nids[] = $value;
          }
        }
      }
      else {
        if (!empty($resource)) {
          $status = $widget_values['resources']["fs-$cnt"]["rb_status-$cnt"][$resource];
          $items[] = array('nid' => $resource, 'rb_status' => $status);
          $nids[] = $resource;
        }
      }
    }
    $cnt++;
  }
  if (!empty($widget_values['sdate']) &&
    !empty($widget_values['edate'])) {
    //now for each selected resource, set the other fields
    $items_keys = array_keys($items);
    $start_date = strtotime($widget_values['sdate']);
    $end_date = strtotime($widget_values['edate']);

    if (!empty($items_keys)) {
      foreach ($items_keys as $key) {
        $items[$key]['sdate'] = $start_date;
        $items[$key]['edate'] = $end_date;
      }
    }
    else {
      $items[] = array('nid' => 0, 'rb_status' => '', 'sdate' => $start_date, 'edate' => $end_date);
    }
  }
    
  if (empty($nids) && $form_state['values']['op'] != t('Refresh availability') &&
    $form_state['values']['op'] != t('Save settings') && $element['#required']) {
      //do this only on real save
      form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
  }
  form_set_value($element, $items, $form_state);
}

/**
 * Implements hook_field_validate().
 */
function resource_booking_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {  
  if (!empty($items)) {
    $field_name = $field['field_name'];
    //check if start data is after end date, then throw an error
    $today = strtotime(date('Y-m-d'));
    if (!empty($items[0]['sdate']) && !empty($items[0]['edate'])) {
      if ($items[0]['sdate'] > $items[0]['edate']) {
        $errors[$field_name][$langcode][0][] = array(
          'error' => 'resource_booking_sdate',
          'message' => t('Start date cannot be after End date.'),
        );
      }
      else {
        $resources = array();
        foreach ($items as $key => $item) {
          $resources[$key] = $item['nid'];
        }
        if (!empty($resources)) {
          $start_date = $items[0]['sdate'];
          $start_date = strtotime("+1 minute", $start_date);
          $end_date = $items[0]['edate'];
          $end_date = strtotime("-1 minute", $end_date);
          $qargs = array(':sdate' => $start_date, ':edate' => $end_date,
                ':etype' => $entity_type, ':resources' => $resources,
                ':rb_status' => array(CONST_RESOURCE_BOOKING_CANCELLED, CONST_RESOURCE_BOOKING_DECLINED));
          if (!empty($entity->nid)) {
            $entity_filter = 'f.entity_id != :entity_id AND ';
            $qargs[':entity_id'] = $entity->nid;
          }
          else {
            $entity_filter = '';
          }

          //double check if selected resources are booked
          $query = db_select("field_data_$field_name", 'f');
          $query->join('node', 'n', 'n.nid = f.' . $field_name . '_nid');
          $query->fields('f', array($field_name . '_nid'))
            ->fields('n', array('title'))
            ->where(
                $entity_filter . '
                f.entity_type = :etype AND
                f.' . $field_name . '_nid in (:resources) AND
                f.' . $field_name . '_rb_status not in (:rb_status) AND
                (
                  (:sdate >= ' . $field_name . '_sdate and :sdate <= ' . $field_name . '_edate) OR
                  (:edate >= ' . $field_name . '_sdate and :edate <= ' . $field_name . '_edate) OR
                  (' . $field_name . '_sdate >= :sdate and ' . $field_name . '_sdate <= :edate) OR
                  (' . $field_name . '_edate >= :sdate and ' . $field_name . '_edate <= :edate)
                )
                ', $qargs);
          $result = $query->execute()->fetchAllKeyed();

          foreach ($result as $nid => $title) {
            $cnt = array_search($nid, $resources);
            $errors[$field_name][$langcode][$cnt][] = array(
              'error' => "resource_booking_resource_not_available_$nid",
              'message' => t('Resource %resource is not available', array('%resource' => $title)),
            );
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function resource_booking_field_widget_error($element, $error, $form, &$form_state) {
  $field = NULL;
  switch ($error['error']) {
    case 'resource_booking_sdate_past_date':
    case 'resource_booking_sdate':
      $field = $element['sdate'];
      break;

    case 'resource_booking_edate_past_date':
      $field = $element['edate'];
      break;

    default:
      if (strpos($error['error'], 'resource_booking_resource_not_available_') !== FALSE) {
        $resource_id = str_replace('resource_booking_resource_not_available_', '', $error['error']);
        $cnt = 0;
        while (isset($element['resources']["fs-$cnt"])) {
          $resources = array_keys($element['resources']["fs-$cnt"]["nid-$cnt"]['#options']);
          if (in_array($resource_id, $resources)) {
            $field = $element['resources']["fs-$cnt"]["nid-$cnt"];
            break;
          }
          $cnt++;
        }
      }
      break;
  }
  if (!empty($field)) {
    form_error($field, $error['message']);
  }
}

/**
 * Implements hook_theme().
 */
function resource_booking_theme() {
  return array(
    'resources_booking_form' => array('render element' => 'elements'),
    'resources_booking_view' => array('variables' => array('resources' => array(), 'status' => array(),
      'startdate' => NULL, 'enddate' => NULL)),
    'resource_booking_resources' => array('variables' => array('resources' => array(), 'status' => array(),
      'token' => '')),
  );
}

/**
 * theme for rendering widget form
 */
function theme_resources_booking_form($element) {
  $form = $element['elements'];
  $cnt = 0;
  $resources = '';
  $header = array(t('Resource'), t('Booking status'), t('Availability'));
  $not_available = array(t('Booked'), t('Unknown'));
  while (isset($form["fs-$cnt"])) {
    $rows = array();
    foreach (element_children($form["fs-$cnt"]["nid-$cnt"]) as $key) {
      //set element unselectable if it's booked
      if (isset($form["fs-$cnt"]["availability-$cnt"][$key]['#value']) &&
        in_array($form["fs-$cnt"]["availability-$cnt"][$key]['#value'], $not_available) &&
        strpos($form["fs-$cnt"]["nid-$cnt"][$key]['#type'], 'checkbox') === FALSE) {
        $form["fs-$cnt"]["nid-$cnt"][$key]['#attributes']['disabled'] = 'disabled';
      }
      $rows[] = array(
        drupal_render($form["fs-$cnt"]["nid-$cnt"][$key]),
        drupal_render($form["fs-$cnt"]["rb_status-$cnt"][$key]),
        drupal_render($form["fs-$cnt"]["availability-$cnt"][$key]));
    }
    $form["fs-$cnt"]['#children'] = theme('table', array('header' => $header, 'rows' => $rows,
      'empty' => t('No resources found.')));
    $resources .= drupal_render($form["fs-$cnt"]);
    $cnt++;
  }
  $output = $resources;
  $output .= drupal_render_children($form);
  return $output;
}

function template_preprocess_resources_booking_view(&$variables) {
  $query = db_select('node', 'n')->fields('n', array('nid', 'title'));
  $query->innerJoin('taxonomy_index', 'ti', 'ti.nid = n.nid');
  $query->innerJoin('taxonomy_term_data', 'td', 'td.tid = ti.tid');
  $query->addField('td', 'name', 'resource_type');
  $result = $query->condition('n.nid', $variables['resources'], 'IN')->execute();
  $resources = array();
  $resource_type = array();
  foreach ($result as $row) {
    $resources[$row->nid] = $row->title;
    $resource_type[$row->nid] = $row->resource_type;
  }
  $variables['resources'] = $resources;
  $variables['resource_types'] = $resource_type;
}

/**
 * theme for viewing widget
 */
function theme_resources_booking_view($variables) {
  $resources = $variables['resources'];
  $resource_types = $variables['resource_types'];
  $status = $variables['status'];
  $output = '<div class="rb-booked-date"><div class="startdate"><span>' . t('Start:') . '</span><span> ' . $variables['startdate'] . '</span></div>';
  $output .= '<div class="enddate"><span>' . t('End:') . '</span><span> ' . $variables['enddate'] . '</span></div></div>';
  $rows = array();
  foreach ($resources as $key => $title) {
    $rows[] = array($title, $resource_types[$key], $status[$key]);
  }
  $header = array(t('Resource'), t('Type'), t('Status'));
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No resources have been booked')));
  return $output;
}

/**
 * Entity integration
 */

function resource_booking_entity_metadata_property_info_alter(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];
  $property['property_type'] = 'struct';
  $property['label'] = t('Resource booking');
  $property['property info'] = array(
    'nid' => array(
      'type' => 'text',
      'label' => t('Resource ID'),
      'getter callback' => 'resource_booking_entity_metadata_field_property_get',
    ),
    'sdate' => array(
      'type' => 'text',
      'label' => t('Start date'),
      'getter callback' => 'resource_booking_entity_metadata_field_property_get',
    ),
    'edate' => array(
      'type' => 'text',
      'label' => t('End date'),
      'getter callback' => 'resource_booking_entity_metadata_field_property_get',
    ),
    'rb_status' => array(
      'type' => 'text',
      'label' => t('Status'),
      'getter callback' => 'resource_booking_entity_metadata_field_property_get',
    ),
  );
}

/**
 * property getter for resource booking
 */
function resource_booking_entity_metadata_field_property_get($entity, array $options, $name, $entity_type, $info) {
  $output = NULL;
  $values = array();
  $status = _resource_booking_field_get_rb_status();
  $sdate = NULL;
  $edate = NULL;
  $object = NULL;

  if (isset($entity->$name)) {//check if the full object is requested
    $object = $entity->$name;
  }
  else {
    $object = $entity;
  }
  if (!is_array($object)) {
    return $object;
  }
  foreach ($object as $langcode => $data) {
    foreach ($data as $record) {
      if (!isset($sdate)) {
        $sdate = $record['sdate'];
        $edate = $record['edate'];
      }
      $values[$record['nid']] = $status[$record['rb_status']];
    }
  }
  switch ($name) {
    case 'sdate':
      $output = format_date($sdate);
      break;

    case 'edate':
      $output = format_date($edate);
      break;

    case 'rb_status':
      $output = $values;
      break;

    default:
      //full object is sent or nid is requested
      $resources = array_keys($values);
      if ($name == 'nid') {
        $resource_data = db_select('node', 'n')->fields('n', array('nid', 'title'))
          ->condition('nid', $resources, 'IN')->execute()->fetchAllKeyed();
        $output = $resource_data;
      }
      else {
        $output = theme('resources_booking_view', array('resources' => $resources, 'status' => $values,
          'startdate' => format_date($sdate), 'enddate' => format_date($edate)));
      }
      break;
  }

  return $output;
}

/**
 * Implements hook_field_create_field().
 */
function resource_booking_field_create_field($field) {
  //add the new resource_booking field type to cache that it can be exposed to views
  if ($field['type'] == 'resource_booking') {
    $fields = variable_get('resource_booking_fields', array());
    $fields[$field['field_name']] = $field['field_name'];
    variable_set('resource_booking_fields', $fields);
  }
}

/**
 * Implements hook_field_delete_field().
 */
function resource_booking_field_delete_field($field) {
  //delete the resource_booking field type from cache that it can be removed from views
  if ($field['type'] == 'resource_booking') {
    $fields = variable_get('resource_booking_fields', array());
    unset($fields[$field['field_name']]);
    variable_set('resource_booking_fields', $fields);
  }
}

/**
 * Implements hook_date_views_fields().
 */
// function resource_booking_date_views_fields($field) {
  // $fields = variable_get('resource_booking_fields', array());
  // $values = array(
    // // The type of date: DATE_UNIX, DATE_ISO, DATE_DATETIME.
    // 'sql_type' => DATE_UNIX,
    // // Timezone handling options: 'none', 'site', 'date', 'utc' .
    // 'tz_handling' => 'site',
    // // Needed only for dates that use 'date' tz_handling.
    // 'timezone_field' => '',
    // // Needed only for dates that use 'date' tz_handling.
    // 'offset_field' => '',
    // // Array of "table.field" values for related fields that should be
    // // loaded automatically in the Views SQL.
    // 'related_fields' => array(),
    // // Granularity of this date field's db data.
    // 'granularity' => array('year', 'month', 'day', 'hour', 'minute', 'second'),
  // );
// 
  // foreach ($fields as $field_name) {
    // if ($field == 'field_data_' . $field_name . '.' . $field_name . '_sdate') {
      // return $values;
    // }
  // }
// }

/**
 * Views bulk operations integration
 */

/**
 * Implements hook_actions_info().
 */
function resource_booking_action_info() {
  return array(
    'resource_booking_status_approve_action' => array(
      'type' => 'node',
      'label' => t('Approve'),
      'configurable' => FALSE,
      'behavior' => array('changes_property'),
      'pass rows' => TRUE,
    ),
    'resource_booking_status_decline_action' => array(
      'type' => 'node',
      'label' => t('Decline'),
      'configurable' => FALSE,
      'behavior' => array('changes_property'),
      'pass rows' => TRUE,
    ),
  );
}

/**
 * approve status
 */
function resource_booking_status_approve_action($node, $context = array()) {
  _resoruce_booking_status_update($node, $context, CONST_RESOURCE_BOOKING_CONFIRMED);
}

/**
 * decline status
 */
function resource_booking_status_decline_action($node, $context = array()) {
  _resoruce_booking_status_update($node, $context, CONST_RESOURCE_BOOKING_DECLINED);
}

/**
 * Set the status
 */
function _resoruce_booking_status_update($node, $context, $status) {
  //Find the field, fetch the row and update.
  $fields = variable_get('resource_booking_fields', array());
  foreach ($fields as $field_name) {
    $resource_nid = array();
    if (isset($node->$field_name)) {
      //this is the field name. multiple fields of resource booking is not supported.
      foreach ($context['rows'] as $row) {
        $field_data = $node->$field_name;
        foreach ($field_data[$node->language] as $key => $data) {
          if ($data['nid'] == $row->{"node_field_data_$field_name" . '_nid'}) {
            $node->{$field_name}[$node->language][$key]['rb_status'] = $status;
          }
        }
      }
      node_save($node);
      break; //no need to look further
    }
  }
}

/**
 * Implements hook_views_api().
 *
 * This tells drupal that there is Views integration file named
 * module-name.views.inc
 */
function resource_booking_views_api() {
  // Note that you can include 'path' in this array so that your views.inc
  // file can be stored in a different location.
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'resource_booking') . '/views',
  );
}

/**
 * Implements hook_token_info_alter().
 */
function resource_booking_token_info_alter(&$info) {
  //provide token for each of the resource booking fields
  $fields = variable_get('resource_booking_fields', array());
  foreach ($fields as $field_name) {
    $token_fn = str_replace('_', '-', $field_name);
    $info['tokens']['node'][$token_fn . '-nid'] = array(
      'name' => t('Resource'),
      'description' => t('All selected resource.'),
      'type' => 'text',
    );
    $info['tokens']['node'][$token_fn . '-status'] = array(
      'name' => t('Status'),
      'description' => t('Status of all booked resources.'),
      'type' => 'text',
    );
    $info['tokens']['node'][$token_fn . '-sdate'] = array(
      'name' => t('Start date'),
      'description' => t('Resource booking Start date.'),
      'type' => 'text',
    );
    $info['tokens']['node'][$token_fn . '-edate'] = array(
      'name' => t('End date'),
      'description' => t('Resource booking End date.'),
      'type' => 'text',
    );
    $info['tokens']['node'][$token_fn . '-confirmed'] = array(
      'name' => t('Confirmed resources'),
      'description' => t('Approved resources for this node.'),
      'type' => 'text',
    );
    $info['tokens']['node'][$token_fn . '-declined'] = array(
      'name' => t('Declined resources'),
      'description' => t('Declined resources for this node.'),
      'type' => 'text',
    );
    $info['tokens']['node'][$token_fn . '-requested'] = array(
      'name' => t('Requested resources'),
      'description' => t('Requested resources for this node.'),
      'type' => 'text',
    );
  }
  return $info;
}

/**
 * Implements hook_tokens().
 */
function resource_booking_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $replacements_static = array();
  //check if static values are requeste for data comparison
  $status_text = _resource_booking_field_get_rb_status();
  if ($type == 'node' && !empty($data['node'])) {
    //check if specific field data is requested
    $fields = variable_get('resource_booking_fields', array());
    $node = $data['node'];
    $lang = $node->language;
    $resources = array();
    $message = '';

    foreach ($fields as $field_name) {
      $token_fn = str_replace('_', '-', $field_name);
      $supported_tokens = array(
        $token_fn . '-nid',
        $token_fn . '-status',
        $token_fn . '-sdate',
        $token_fn . '-edate',
        $token_fn . '-confirmed',
        $token_fn . '-declined',
        $token_fn . '-requested',
      );
      foreach ($tokens as $token => $original) {
        if (in_array($token, $supported_tokens)) {
          if (!isset($replacements[$original])) {
            $replacements[$original] = array();
          }
          foreach ($node->{$field_name}[$lang] as $id => $booking) {
            switch ($token) {
              case $token_fn . '-nid':
                //return all requested resources
                $replacements[$original][$booking['nid']] = '';
                break;

              case $token_fn . '-status':
                //return status of all requested resources
                $replacements[$original][$booking['nid']] = $status_text[$booking['rb_status']];
                break;

              case $token_fn . '-sdate':
                //return start date of booking
                $replacements_static[$original] = format_date($booking['sdate']);
                break;

              case $token_fn . '-edate':
                //return end date of booking
                $replacements_static[$original] = format_date($booking['edate']);
                break;

              case $token_fn . '-confirmed':
                if ($booking['rb_status'] == CONST_RESOURCE_BOOKING_CONFIRMED) {
                  $replacements[$original][$booking['nid']] = $status_text[$booking['rb_status']];
                }
                break;

              case $token_fn . '-declined':
                if ($booking['rb_status'] == CONST_RESOURCE_BOOKING_DECLINED) {
                  $replacements[$original][$booking['nid']] = $status_text[$booking['rb_status']];
                }
                break;

              case $token_fn . '-requested':
                if ($booking['rb_status'] == CONST_RESOURCE_BOOKING_REQUESTED) {
                  $replacements[$original][$booking['nid']] = $status_text[$booking['rb_status']];
                }
                break;

            }
          }
        }
      }
    }
    $nids = array();
    foreach ($replacements as $token => $data) {
      $result = array();
      if (is_array($data) && !empty($data)) {
        $nids = array_keys($data);
        $result = db_select('node', 'n')->fields('n', array('nid', 'title'))
          ->condition('nid', $nids, 'IN')->condition('status', 1)->execute()->fetchAllKeyed();
      }
      $replacements[$token] = theme('resource_booking_resources', array('resources' => $result, 'status' => $data, 'token' => $token));
    }
  }
  return $replacements + $replacements_static;
}

/**
 * theme resource_booking_resources
 */
function theme_resource_booking_resources($variables) {
  $token = $variables['token'];
  $resources = $variables['resources'];

  $output = '';
  if (strpos($token, '-status') !== FALSE) {
    $status = $variables['status'];
    $rows = array();
    foreach ($resources as $nid => $title) {
      $cells[] = check_plain($title);
      $cells[] = $status[$nid];
      $rows[] = array('data' => $cells);
      unset($cells);
    }
    $header = array(t('Resource'), t('Status'));
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No resources found.')));
  }
  else {
    if (empty($resources)) {
      $resources[] = t('No resources found.');
    }
    $output .= theme('item_list', array('items' => $resources));
  }
  return $output;
}

/**
 * set the status of given node
 */
function resource_booking_update_status($node, $status) {
  $fields = variable_get('resource_booking_fields', array());
  $dirty = FALSE;
  foreach ($fields as $field_name) {
    if (isset($node->$field_name)) {
      //set the status of all items to the given state and save
      $lang = $node->language;
      foreach ($node->{$field_name}[$lang] as $key => $data) {
        $node->{$field_name}[$lang][$key]['rb_status'] = $status;
        $dirty = TRUE;
      }
    }
  }
  if ($dirty) {
    node_save($node);
  }
}

/**
 * Implements hook_field_insert()
 */
function resource_booking_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $rdate = variable_get('resource_booking_resource_field', '');
  if (!empty($rdate)) {
    $field_name = $field['field_name'];
    $rdata_table = 'field_data_' . $rdate;
    $rrevision_table = 'field_revision_' . $rdate;
    
    //insert the new entries
    $fields = array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id',
      'language', 'delta', $rdate . '_value', $rdate . '_value2');
    $iquery = db_insert($rdata_table)->fields($fields);
    $irquery = db_insert($rrevision_table)->fields($fields);

    $has_data = FALSE;
    $values = array('entity_type' => 'node', 'bundle' => '', 'deleted' => 0, 'entity_id' => 0, 'revision_id' => 0,
      'language' => LANGUAGE_NONE, 'delta' => 0, $rdate . '_value' => 0, $rdate . '_value2' => 0);
    //get the maximum delta for selected items
    $entity_ids = array();
    foreach ($items as $item) {
      $entity_ids[] = $item['nid'];
    }
    if (!empty($entity_ids)) {
      $query = db_select($rdata_table, 'rt')->fields('rt', array('entity_id'));
      $query->addExpression('max(delta)', 'mdelta');
      $query->condition('entity_id', $entity_ids)->condition('entity_type', 'node')
      ->groupby('entity_id');
      $deltas = $query->execute()->fetchAllKeyed();
      foreach ($items as $item) {
        $has_data = TRUE;
        $entity_id = $item['nid'];
        $node = node_load($entity_id);
        if (!isset($deltas[$entity_id])) {
          $deltas[$entity_id] = 0;
        }
        $values['bundle'] = $node->type;
        $values['entity_id'] = $entity_id;
        $values['revision_id'] = $entity_id;
        $values['delta'] = ($deltas[$entity_id] + 1);
        $values[$rdate . '_value'] = $item['sdate'];
        $values[$rdate . '_value2'] = $item['edate'];
        $iquery->values($values);
        $irquery->values($values);
      }
      if ($has_data) {
        $iquery->execute();
        $irquery->execute();
      }
    }
    //clear the entity caches
    _resource_booking_clear_resource_cache($entity_ids);
  }
}

/**
 * Implements hook_field_update()
 */
function resource_booking_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $rdate = variable_get('resource_booking_resource_field', '');
  if (!empty($rdate)) {
    $field_name = $field['field_name'];
    $rdata_table = 'field_data_' . $rdate;
    $rrevision_table = 'field_revision_' . $rdate;
    _resource_booking_recreate_entries($field_name, $entity, $items);
  }
}

/**
 * Implements hook_field_delete()
 */
function resource_booking_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $rdate = variable_get('resource_booking_resource_field', '');
  if (!empty($rdate)) {
    $field_name = $field['field_name'];
    $entity_ids = _resource_booking_recreate_entries($field_name, $entity, NULL);
  }
}

/**
 * delete and recreate entries
 */
function _resource_booking_recreate_entries($field_name, $entity, $items) {
  $rdate = variable_get('resource_booking_resource_field', '');
  $entity_ids = array();
  if (!empty($rdate)) {  
    $rdata_table = 'field_data_' . $rdate;
    $rrevision_table = 'field_revision_' . $rdate;
    //1. delete all the entries for the previous resources in the resource booking table then we will create 
    //fresh entries
    $query = db_select('field_data_' . $field_name, 'fn')->fields('fn', array($field_name . '_nid'))
      ->condition('entity_type', 'node');
    if (is_object($entity)) {
      $query->condition('entity_id', $entity->nid);
    }
    $entity_ids = $query->execute()->fetchCol();
    //also do the current items
    if (!empty($items)) {
      foreach ($items as $item) {
        $entity_ids[] = $item['nid'];
      }
    }
    if (!empty($entity_ids)) {
      db_delete($rdata_table)->condition('entity_id', $entity_ids)->condition('entity_type', 'node')
      ->execute();
      db_delete($rrevision_table)->condition('entity_id', $entity_ids)->condition('entity_type', 'node')
      ->execute();
          //2. now we insert for deleted
      $query = db_select('field_data_' . $field_name, 'fn');
      $query->innerJoin('node', 'n', 'n.nid = fn.' . $field_name . '_nid');
      $query->fields('fn', array($field_name . '_nid', $field_name . '_sdate', $field_name . '_edate'))
        ->fields('n', array('type'));
      if (is_object($entity)) {
        $query->condition('entity_id', $entity->nid, '!=');
      }
      $result = $query->condition('entity_type', 'node')
        ->condition($field_name . '_nid', $entity_ids)->orderby($field_name . '_nid')->execute();
    
      $fields = array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id',
        'language', 'delta', $rdate . '_value', $rdate . '_value2');
      $iquery = db_insert($rdata_table)->fields($fields);
      $irquery = db_insert($rrevision_table)->fields($fields);
      $has_data = FALSE;
      $values = array('entity_type' => 'node', 'bundle' => '', 'deleted' => 0, 'entity_id' => 0, 'revision_id' => 0,
        'language' => LANGUAGE_NONE, 'delta' => 0, $rdate . '_value' => 0, $rdate . '_value2' => 0);
      $delta = array();
      
      foreach ($result as $row) {
        $has_data = TRUE;
        if (!isset($delta[$row->{$field_name . '_nid'}])) {
          $delta[$row->{$field_name . '_nid'}] = 0;
        }
        $values['bundle'] = $row->type;
        $values['entity_id'] = $row->{$field_name . '_nid'};
        $values['revision_id'] = $row->{$field_name . '_nid'};
        $values['delta'] = $delta[$row->{$field_name . '_nid'}]++;
        $values[$rdate . '_value'] = $row->{$field_name . '_sdate'};
        $values[$rdate . '_value2'] = $row->{$field_name . '_edate'};
        $iquery->values($values); 
        $irquery->values($values);
      }
      if (!empty($items)) {
        foreach ($items as $item) {
          $entity_id = $item['nid'];
          $node = node_load($entity_id);
          $has_data = TRUE;
          $entity_ids[] = $entity_id;
          if (!isset($delta[$item['nid']])) {
            $delta[$item['nid']] = 0;
          }
          $values['bundle'] = $node->type;
          $values['entity_id'] = $entity_id;
          $values['revision_id'] = $entity_id;
          $values['delta'] = $delta[$item['nid']]++;
          $values[$rdate . '_value'] = $item['sdate'];
          $values[$rdate . '_value2'] = $item['edate'];
          $iquery->values($values);
          $irquery->values($values);
        }
      }
      if ($has_data) {
        $iquery->execute();
        $irquery->execute();
        _resource_booking_clear_resource_cache($entity_ids);
      }
    }
  }
  return $entity_ids;
}

/**
 * clear the cache were resource utilization was changed
 */
function _resource_booking_clear_resource_cache($entity_ids) {
  foreach ($entity_ids as $entity_id) {
    cache_clear_all('field:node:' . $entity_id, 'cache_field');
  }
}
