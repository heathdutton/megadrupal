<?php
/**
 * YAMB: Yet another menu block module.
 * **/

/**
 * Implements hook_menu().
 */
function yamb_menu() {
  $items = array();
  $items['admin/config/content/yamb'] = array(
    'title' => 'Yamb settings',
    'description' => 'Configure which menues to slice',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yamb_admin_form'),
    'access arguments' => array('administer yamb'),
    'position' => 'left',
    'weight' => -15,
    'file' => 'yamb.admin.inc',
  );
  return $items;
}

/**
 * 
 * @return array, empty or full.
 * */
function _arrayForBlockCreation() {
	//Get which menues that will be sliced.
	$menuArray = variable_get('yamb_menues_to_slice', array());
	//where the menues will be collected.
	$menuCollector = array();
	//if empty return empty array,
	if(empty($menuArray))
		return array();
	
	//Not empty than work out that menu/those menues.
	foreach($menuArray as $menu) {
  		$tree = menu_tree_all_data($menu);  
  		foreach ($tree as $branch) {
  		//find 2nd level
  		if(is_array($branch['below']) && $branch['below'] != null) {
  		//Get the name	
			foreach($branch['below'] as $leave) {
				$submenuTitle = $leave['link']['link_title'];
				$submenuContentArray = $leave['below'];
				//add it to the array.
				$menuCollector[$submenuTitle] = $submenuContentArray;
	 			}
			}
  		}
	}
  return $menuCollector;
}

/**
 * Escaping characters.
 * @param the string that will be escaped.
 * */
function _yamb_block_name_cleaner($string)
{
	if(module_exists('transliteration'))
	{
		return transliteration_clean_filename($string);
	}
	
	//fallback if transliteration is not active, it is recommended to use transliteration.
	$newstr = preg_replace(array('/å/','/ä/','/ö/','/Å/','/Ä/','/Ö/'), array('a','a','o','A','A','O'), $string);
	$newstr = preg_replace('/[^a-zA-Z0-9\']/', '_', $newstr);
	$newstr = str_replace("'", '', $newstr);
	return strtolower($newstr);
}

/**
 * Implements hook_permission().
 */
function yamb_permission() {
  return array(
    'administer yamb' => array(
      'title' => t('Administer yamb module'),
    )
  );
}

/**
* Implements hook_block_info().
*/
function yamb_block_info() {

	$blocks = array();
	$infoArray = _arrayForBlockCreation();
	//in case infoarray is empty return empty blocks.
	if(empty($infoArray))
		return $blocks;
	//create the blocks info.
	foreach($infoArray as $name => $menuArray)
	{
		$blocks[_yamb_block_name_cleaner($name)] = array(
		'info' => t('YAMB: '.$name),
		'cache' => DRUPAL_NO_CACHE,
		);
	}

	return $blocks;
}

/**
* Implements hook_block_view().
*/
function yamb_block_view($block_name = '') {
	$block = array();
	$menuCollector = _arrayForBlockCreation();
	if(empty($menuCollector))
		return $block;
	//create the blocks view.
	foreach($menuCollector as $name => $value)
	{
		if($block_name == _yamb_block_name_cleaner($name))
		{
			$block['subject'] = t($name);
			$block['content'] = menu_tree_output($value);
			return $block;
		}
	}

}