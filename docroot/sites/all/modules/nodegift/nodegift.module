<?php


/**
 * Implementation of hook_permission().
 */
function nodegift_permission() {
	return array(
      'access node gift' => array(
        'title' => t('Access node gift form')
      ),
      'administer node gift' => array(
        'title' => t('Administer node gift settings')
      )
  );
}
/**
 * Implementation of hook_menu().
 */
function nodegift_menu() {
	$items = array();

	$items['nodegift/buy'] = array(
    'title' => 'Buy gift',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodegift_buy_form'),
    'access arguments' => array('access node gift'),
    'type' => MENU_CALLBACK,
	);
	$items['nodegift/gift_select'] = array(
    'title' => 'Choose gifts',
    'page callback' => 'nodegift_gift_select',
    'page arguments' => array(2),
    'access arguments' => array('access node gift'),
    'type' => MENU_CALLBACK,
	);

  $items['user/%user/gifts'] = array(
    'title' => t('Gifts'),
    'page callback' => 'nodegift_gifts',
    'page arguments' => array(1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%/gift/%/remove'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodegift_delete_confirm_form', 3, 1),
    'access callback' => 'nodegift_can_remove',
    'access arguments' => array(1),
    'file' => 'nodegift.pages.inc',
  );
	return $items;
}


/**
 * Implement hook_form_FORM_ID_alter().
 */
function nodegift_form_node_type_form_alter(&$form, &$form_state) {

  if (!user_access('administer node gift')) return;

  $node_type = $form['#node_type']->type;
  $settings = nodegift_get_settings($node_type);
  // TODO add js back $js = drupal_get_path('module', 'nodegift') . '/js/nodegift.js';

  $instances = field_info_instances('node', $node_type);
  $options_numbers = array();
  $options_images = array();

  foreach ($instances as $key => $value) {
    $field = field_info_field($key);
    if ($field['type'] == 'number_integer') {
      $options_numbers[$key] = $value['label'];
    }
  }

  $form['nodegift'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Gift'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#description' => t('Specify if this content type can be used as gift (Node Gift).' . l("Documentation", 'admin/help', array('fragment' => 'nodegift_settings'))),
    // TODO add js back '#attached'=> array('js' => array($js)),
  );

  if (!count($options_numbers)) {
    $form['nodegift']['ng_price'] = array(
      '#type' => 'item',
      '#title' => t('Error'),
      '#markup' => 'Content Type MUST contain at least one number integer field to be used as gift.'
    );
    return $form;
  }

  $form['nodegift']['ng_type'] = array(
    '#type' => 'checkbox',
    '#title' => t('NodeGift type'),
    '#default_value' => nodegift_is_gift_type($node_type),
    '#description' => t('If checked, this content type will be used as gift node'),
  );

  foreach ($instances as $key => $value) {
    $field = field_info_field($key);
    if ($field['type'] == 'image') {
      $options_images[$key] = $value['label'];
    }
  }
  $form['nodegift']['ng_price'] = array(
    '#type' => 'select',
    '#title' => t('Choose a content field for gift price'),
    '#options' => $options_numbers,
    '#default_value' => (isset($form_state['values']['ng_price']) ? $form_state['values']['ng_price'] : $settings['ng_price']),
    '#description' => t('This field will be used as virtual price for nodes.'),
  );

  $form['nodegift']['ng_image'] = array(
    '#type' => 'select',
    '#title' => t('Choose an image field for gift image'),
    '#options' => $options_images,
    '#default_value' => (isset($form_state['values']['ng_image']) ? $form_state['values']['ng_image'] :
                                  (isset($settings['ng_image']) ? $settings['ng_image'] : '')),
    '#description' => t('This field will be used to display gift images on user\'s gift page or on buy gift pages.'),
  );

  $options_styles = array();
  foreach(image_styles() as $key => $value) {
    $options_styles[$key] = $value['name'];
  }

  if (count($options_styles)) {
    $form['nodegift']['ng_image_style'] = array(
      '#type' => 'select',
      '#title' => t('Choose an image style'),
      '#options' => $options_styles,
      '#default_value' => (isset($form_state['values']['ng_image_style']) ? $form_state['values']['ng_image_style'] :
                                    (isset($settings['ng_image_style']) ? $settings['ng_image_style'] : '')),
      '#description' => t('Choosed image style will be used to display gift image on user\'s gifts page and on buy gift pages'),
    );
  }
  $form['nodegift']['ng_userpoints_category'] = array(
    '#type' => 'select',
    '#title' => t('Choose a Userpoints category'),
    '#options' => userpoints_get_categories(),
    '#default_value' => (isset($form_state['values']['ng_userpoints_category']) ? $form_state['values']['ng_userpoints_category'] :
                                  (isset($settings['ng_userpoints_category']) ? $settings['ng_userpoints_category'] : '')),
    '#description' => t('User will be able to buy gifts of this content type only if he have points of choosed category'),
    '#required' => false,
  );

    $formats = filter_formats();
    $options_formats = array();
    foreach ($formats as $format) {
        $options_formats[$format->format] = $format->name;
    }

    if (count($options_formats)) {
        $form['nodegift']['ng_comment_format'] = array(
            '#type' => 'select',
            '#title' => t('Choose format for gift comment'),
            '#options' => $options_formats,
            '#default_value' => (isset($form_state['values']['ng_comment_format']) ? $form_state['values']['ng_comment_format'] :
                (isset($settings['ng_comment_format']) ? $settings['ng_comment_format'] : '')),
            '#description' => t('Choosed format will be used to display comment on user gifts page as well as in views'),
        );
    }

    $form['#submit'][] = 'nodegift_node_type_form_submit';

}

function nodegift_node_type_form_submit($form, &$form_state) {
  if (isset($form_state['values']['ng_type']) && $form_state['values']['ng_type']) {
    $settings['ng_price'] = $form_state['values']['ng_price'];
    $settings['ng_image'] = $form_state['values']['ng_image'];
    $settings['ng_image_style'] = $form_state['values']['ng_image_style'];
    $settings['ng_comment_format'] = $form_state['values']['ng_comment_format'];
    $settings['ng_userpoints_category'] = $form_state['values']['ng_userpoints_category'];
    nodegift_save_settings($form['#node_type']->type, $settings);
  }
}

/**
 * Implementation of hook_node_view().
 */
function nodegift_node_view($node, $view_mode, $langcode) {
	global $user;

	$the_settings = nodegift_get_settings($node->type);

	if (nodegift_is_gift_type($node->type)) {

		$field_gift_price = $the_settings['ng_price'];
    $node_price = field_get_items('node', $node, $field_gift_price);
    $node_price = $node_price[0]['value'];

		if ($view_mode == 'teaser' || arg(1) == 'buy' || $user->uid == 0 || !user_access('access node gift')
        || userpoints_get_current_points($user->uid, $the_settings['ng_userpoints_category']) < $node_price) {
			return;
		}
		// Add our button form as a content item.
        $nodeForm = drupal_get_form('nodegift_button_form', $node);
		$node->content['nodegift_button_form'] = array(
		'#markup' => drupal_render($nodeForm),
		'#weight' => 50
		);
	}
}

/**
 * Implementation of hook_user_view().
 */
function nodegift_user_view($account, $view_mode, $langcode) {
	global $user;

  $nodegift_enabled = false;
  $names = node_type_get_names();

  foreach ($names as $key => $name) {
    if (nodegift_get_settings($key)) {
      $nodegift_enabled = true;
      break;
    }
  }

	if ($nodegift_enabled) {
		if ($view_mode == 'teaser' || arg(1) == 'buy' || $user->uid == 0 || !user_access('access node gift') || userpoints_get_current_points($user->uid) < 1) {
			return;
		}
		// Add our button form as a content item.
        $giftForm = drupal_get_form('nodegift_user_button_form', $account);
		$account->content['nodegift_button_form'] = array(
		  '#markup' => drupal_render($giftForm),
		  '#weight' => 50
		);
	}
}
/**
 * Node gift button form
 */
function nodegift_button_form($form_state, $node) {
	global $user;

	$form['gift_nid'] = array(
	'#type' => 'value',
	'#value' => $node['build_info']['args'][0]->nid
	);
	$form['submit'] = array(
	'#type' => 'submit',
	'#value' => t('Buy me!')
	);
	return $form;
}

/**
 * Node gift button form submit
 */
function nodegift_button_form_submit($form, &$form_state) {
	$form_state['redirect'] = 'nodegift/buy/' . $form_state['values']['gift_nid'];
}

/**
 * Node gift button form
 */
function nodegift_user_button_form($form_state, $account) {
	global $user;
	$form['account_uid'] = array(
	'#type' => 'value',
	'#value' => $account['build_info']['args'][0]->uid
	);
	$form['submit'] = array(
	'#type' => 'submit',
	'#value' => t('Buy gifts for this user!')
	);
	return $form;
}

function nodegift_user_button_form_submit($form, &$form_state) {
	$form_state['redirect'] = 'nodegift/gift_select/' . $form_state['values']['account_uid'];
}

function nodegift_gift_select($uid) {

  $the_settings = nodegift_get_settings();


  $results = db_select("{node}", 'n')->fields('n', array('nid'))->condition('type', array_keys($the_settings), 'IN')->orderBy('created', 'DESC')->execute();
  // TODO rewrite field_gift_image*
  //db_query("SELECT nid FROM {node} WHERE status = 1 AND type in :type ORDER BY created DESC", array(':type' => $the_settings['ng_type']));
  foreach ($results as $result) {
    $nodes[$result->nid] = node_load($result->nid);
  }
  foreach ($nodes as $nid => $node) {
    $field_gift_image = $the_settings[$node->type]['ng_image'];
    $field_gift_image_style = $the_settings[$node->type]['ng_image_style'];
    if ($field_gift_image && $field_gift_image_style) {
      $field_to_render = field_view_field('node', $node, $field_gift_image, array(
          'type' => 'image',
          'label' => 'hidden',
          'settings' => array('image_style' =>  $field_gift_image_style),
      ));
      $rows[0][] = array('data' => '<a href="'. url("nodegift/buy/$nid"). '/user/' . $uid . '">'. render($field_to_render). '</a>');
    }
  }
  $form['gift'] = array(
    '#type' => 'item',
    '#markup' => theme('table', array('rows' => $rows)),
  );
  return $form;
}

/**
 * Define gift buy form menu callback for = nodegift/buy
 */
function nodegift_buy_form() {
	global $user;
  $arg2 = arg(2);
  $nid = (int) $arg2;

  $rid = (arg(3) == 'user' && is_numeric(arg(4))) ? arg(4) : NULL;

	$node = node_load($nid);
  if (!$node) return;

  if (!nodegift_is_gift_type($node->type)) {
    drupal_set_message(t('This operation is not allowed for node type @node-type', array('@node-type' => $node->type)), 'error');
    return;
  }

  $the_settings = nodegift_get_settings($node->type);
  $field_gift_price = $the_settings['ng_price'];
  $field_gift_image = (isset($the_settings['ng_image'])) ? $the_settings['ng_image'] : FALSE;
  $field_gift_image_style = (isset($the_settings['ng_image_style'])) ? $the_settings['ng_image_style'] : FALSE;

  $node_price = field_get_items('node', $node, $field_gift_price);
  $node_price = $node_price[0]['value'];

  if ($user->uid == 0 || !user_access('access node gift')) {
    form_set_error('receiver', t('You are not allowed to buy gift(s)'));
  }

  if (userpoints_get_current_points($user->uid, $the_settings['ng_userpoints_category']) < $node_price) {
    form_set_error('receiver', t('You don\'t have enough userpoints to buy gift @gift', array('@gift' => $node->title)));
  }

	$form = array();

	$form['receiver'] = array(
	'#type' => 'textfield',
	'#title' => t('Who will receive the gift'),
	'#size' => 60,
	'#maxlength' => USERNAME_MAX_LENGTH,
	'#required' => TRUE,
	'#attributes' => array('tabindex' => '1'),
	'#autocomplete_path' => 'user/autocomplete',
	);

  if ($rid) {
    $receiver = user_load((int) $rid);
    $form['receiver']['#default_value'] = $receiver->name;
  }

	$form['price_info'] = array(
	'#type' => 'item',
	'#title' => t('Totals: '),
	'#markup' => t('Total price is %price You have: %you', array('%price' => $node_price, '%you' => userpoints_get_current_points($user->uid, $the_settings['ng_userpoints_category']))),
	);
  $rows = array();

  if ($field_gift_image && $field_gift_image_style) {
    $field_to_render = field_view_field('node', $node, $field_gift_image, array(
        'type' => 'image',
        'settings' => array('image_style' =>  $field_gift_image_style),
    ));
    $rows[0][] = array('data' => render($field_to_render));
  }
  $form['gift'] = array(
    '#type' => 'item',
    '#title' => t('Your gift(s)'),
    '#markup' => theme('table', array('rows' => $rows)),
  );

	$form['comment'] = array(
	'#type' => 'textarea',
	'#title' => t('Additional comment'),
	'#cols' => 40,
	'#rows' => 4,
	'#required' => TRUE,
	'#attributes' => array('tabindex' => '2'),
	);
	$form['gift_nid'] = array(
	'#type' => 'hidden',
	'#value' => $nid
	);
	$form['submit'] = array(
	'#type' => 'submit',
	'#value' => t('Send'),
	'#weight' => 2,
	'#attributes' => array('tabindex' => '2'));

	return $form;
}

/**
 * Validate gift buy form
 */
function nodegift_buy_form_validate($form, &$form_state) {
	global $user;

  $nid = $form_state['values']['gift_nid'];
  $node = node_load($nid);

	$the_settings = nodegift_get_settings($node->type);
  $field_gift_price = $the_settings['ng_price'];

	$user_name = check_plain($form_state['values']['receiver']);

  $result = db_query('SELECT uid FROM {users} WHERE name = :name ', array(':name' => $user_name));

	if(!$result->rowCount()){
		form_set_error('receiver', t('User %name does not exist', array('%name' => $user_name)));
	}

  $node_price = field_get_items('node', $node, $field_gift_price);
  $node_price = $node_price[0]['value'];

  if (!nodegift_is_gift_type($node->type)) {
    drupal_set_message(t('This operation is not allowed for node type @node-type', array('@node-type' => $node->type)), 'error');
    return;
  }

  if ($user->uid == 0 || !user_access('access node gift')) {
    form_set_error('receiver', t('You are not allowed to buy gift(s)'));
  }
  if (userpoints_get_current_points($user->uid, $the_settings['ng_userpoints_category']) < $node_price) {
    form_set_error('receiver', t('You don\'t have enough userpoints to buy current gift(s)'));
  }

}

/**
 * Submit gift buy form
 */
function nodegift_buy_form_submit($form, &$form_state) {
	global $user;

  $nid = $form_state['values']['gift_nid'];
	$rid = db_query("SELECT uid FROM {users} WHERE name = :name ", array(':name' => $form_state['values']['receiver']))->fetchField();
	$comment = $form_state['values']['comment'];
  // TODO check how it works
  nodegift_send($nid, $user->uid, $rid, $comment);
	drupal_set_message(t('Your gift(s) has been sent to user: @user-name', array('@user-name' => $form_state['values']['receiver'])), 'info');
	drupal_goto('user/' . $rid . '/gifts');
}


function nodegift_send($nid, $sid, $rid, $comment) {

  $node = node_load($nid);
  $the_settings = nodegift_get_settings($node->type);

  $node_price = field_get_items('node', $node, $the_settings['ng_price']);
  $node_price = $node_price[0]['value'];

  $fields = array('nid' => $nid, 'sid' => $sid, 'rid' => $rid, 'comment' => $comment, 'time_stamp' => time());
  db_insert("{node_gift}")->fields($fields)->execute();
  cache_clear_all();
  $receiver = user_load($rid);
  userpoints_userpointsapi(array('points' => (int) -$node_price, 'tid' => $the_settings['ng_userpoints_category'], 'description' => t('Bought a gift for user @user-name', array('@user-name' => format_username($receiver)))));


}

function nodegift_gifts($account) {
  global $user;

  $header = array(t('Gift'), t('Comment'), t('Sender'));
  drupal_set_title(t("@name's gifts", array('@name' => format_username($account))));
  if (nodegift_can_remove($account->uid)) {
    array_push($header, t('Operation'));
  }
  $empty_message = t('This user doesn\'t have any gifts');
  $results = db_query("SELECT gift_id, nid, sid, comment FROM {node_gift} WHERE rid = :rid ORDER BY time_stamp DESC", array(':rid' => $account->uid));
  $counter = 0;
  $rows = array();
  foreach ($results as $result) {
    $node = node_load($result->nid);
    $sender = user_load($result->sid);

    if ($the_settings = nodegift_get_settings($node->type)) {
      $field_gift_image = $the_settings['ng_image'];
      $field_gift_image_style = $the_settings['ng_image_style'];
      $comment_format = (isset($the_settings['ng_comment_format'])) ? $the_settings['ng_comment_format'] : 'plain_text';
    }

    if ($field_gift_image && $field_gift_image_style) {
      $field_to_render = field_view_field('node', $node, $field_gift_image, array(
          'type' => 'image',
          'label' => 'hidden',
          'settings' => array('image_style' =>  $field_gift_image_style, 'image_link' => 'content'),
      ));
      $rows[$counter] = array(array('data' => render($field_to_render)), array('data' => check_markup($result->comment, $comment_format)), array('data' => theme('username', array('account' => $sender))));
    }
    else {
      $rows[$counter] = array(array('data' => node_view($node, 'teaser')), array('data' => check_markup($result->comment, $comment_format)), array('data' => theme('username', array('account' => $sender))));
    }
    if (nodegift_can_remove($account->uid)) {
      array_push($rows[$counter], array('data' => l(t('Remove'), 'user/'.$account->uid.'/gift/'. $result->gift_id .'/remove/')));
    }
    $counter++;
  }
  return theme('table', array('rows' => $rows, 'empty' => $empty_message, 'header' => $header));
}

function nodegift_is_gift_type($content_type) {
  $settings = nodegift_get_settings($content_type);
  if (is_array($settings)) return TRUE;
  return FALSE;
}

function nodegift_get_settings($content_type = NULL, $flush = false) {

  static $settings = array();
  if (!count($settings) || $flush) {
    $names = node_type_get_names();
    foreach ($names as $key => $name) {
      if (variable_get('nodegift_settings_'. $key, false)) {
        $settings[$key] = unserialize(variable_get('nodegift_settings_'. $key, false));
      }
    }
  }
  if ($content_type && isset($settings[$content_type])) return $settings[$content_type];
  if (!$content_type && count($settings)) return $settings;

  return false;
}

function nodegift_can_remove($uid) {
  global $user;
  return $uid == $user->uid || user_access('administer node gift');
}

function nodegift_save_settings($content_type, $settings) {
  variable_set('nodegift_settings_' .$content_type, serialize($settings));
  nodegift_get_settings(NULL, FALSE);
}
