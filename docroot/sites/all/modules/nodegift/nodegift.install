<?php


function nodegift_update_7100(&$sandbox) {

  if ($settings = variable_get('nodegift_settings', FALSE)) {
    $settings = unserialize($settings);
    $content_type = $settings['ng_type'];
    unset($settings['ng_type']);
    variable_set('nodegift_settings_' .$content_type, serialize($settings));
  }

  // TODO Write update for nodegift scheme

}

function nodegift_install()
{
  $t = get_t();
  
  $nodegift = array(
    'type' => 'nodegift',
    'name' => $t('Gift'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('Use <em>gifts</em> when you need to create virtual gifts.'),
    'title_label' => $t('Title'),
	'custom' => TRUE,
  );

  $content_type = node_type_set_defaults($nodegift);

  //We add a body field and set the body label immediately.
  node_add_body_field($content_type, $t('Description'));

  // Save the content type
  node_type_save($content_type);

  foreach (_nodegift_installed_fields() as $field) {
    field_create_field($field);
  }

  foreach (_nodegift_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $nodegift['type'];
    field_create_instance($instance);
  }

  // TODO Set settings for Nodegift for newly created content type?
  // db_add_field gift_id - primary key
  // remove unique index
  // add indexes for sid, rid, (sid, rid, nid)

}

/**
 * Implementation of hook_schema
 */
function nodegift_schema() {
  $schema['node_gift'] = array(
    'description' => t('Stores nodegift nodes for user.'),
    'fields' => array(
      'gift_id' => array('description' => t('The primary identifier for nodegift.'),
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE),
      'nid' => array('description' => t('Node id of gift.'),
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
      'sid' => array('description' => t('The user who sends a gift.'), 
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
        ),
      'rid' => array('description' => t('The user who will receive a gift'),
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
        ),
      'comment' => array('description' => t('The text to a gift.'),
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
        ),
      'time_stamp' => array('description' => t('The time that the gift was created and send.'),
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0),
        ),
       'indexes' => array(
        'gift_sender' => array('sid'),
        'gift_receiver' => array('rid'),
        'gift' => array('nid', 'sid', 'rid'),
       ),
       'primary key' => array('gift_id'),
       );
       
  return $schema;
}

function nodegift_uninstall() {
  foreach (node_type_get_types() as $key => $type) {
    variable_del('nodegift_settings_' . $key);
  }
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 */
function _nodegift_installed_fields() {
  $t = get_t();
  return array(
    'nodegift_price' => array(
      'field_name'  => 'nodegift_price',
      'type'        => 'number_integer',
    ),
    'nodegift_image' => array(
      'field_name' => 'nodegift_image',
      'type'       => 'image',
    ),
  );
}

function _nodegift_installed_instances() {
  $t = get_t();
  return array(
    'nodegift_price' => array(
      'field_name'  => 'nodegift_price',
      'label' => $t('Price'),
      'type'        => 'number_integer',
      'required'    => TRUE,
      'widget'      => array(
        'type'    => 'number',
      ),
    ),
    'nodegift_image' => array(
      'field_name'  => 'nodegift_image',
      'label'       => $t('Upload an image:'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => 2.10,
      ),
    ),
  );
}
