<?php

/**
 * @file
 * The developer authentication module.
 */

/**
 * Implements hook_menu().
 */
function developer_authentication_menu() {
  $items['admin/config/people/devlogin'] = array(
    'title' => 'Developer authentication',
    'description' => 'Allow developer login via LDAP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('developer_authentication_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['devlogin'] = array(
    'title' => 'Developer login',
    'type' => MENU_CALLBACK,
    'access callback' => 'developer_authentication_access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('developer_authentication_form'),
  );
  return $items;
}

/**
 * Implements access callback for devlogin page.
 */
function developer_authentication_access() {
  // Don't let already logged-in users use devlogin.
  return !user_is_logged_in();
}

/**
 * Defines the settings page.
 */
function developer_authentication_admin($form_state) {
  $form['developer_authentication_ldap_server'] = array(
    '#type' => 'textfield',
    '#title' => t('LDAP server hostname'),
    '#default_value' => variable_get('developer_authentication_ldap_server', ''),
  );
  $form['developer_authentication_ldap_port'] = array(
    '#type' => 'textfield',
    '#title' => t('LDAP server port'),
    '#default_value' => variable_get('developer_authentication_ldap_port', ''),
  );
  $form['developer_authentication_username_field'] = array(
    '#type' => 'textfield',
    '#title' => t('LDAP username field'),
    '#default_value' => variable_get('developer_authentication_username_field', ''),
  );
  $form['developer_authentication_basedn'] = array(
    '#type' => 'textfield',
    '#title' => t('LDAP base DN'),
    '#default_value' => variable_get('developer_authentication_basedn', ''),
  );

  return system_settings_form($form);
}

/**
 * Defines the devlogin page form.
 */
function developer_authentication_form($form, &$form_state) {
  if (!variable_get('developer_authentication_basedn', FALSE) && !variable_get('developer_authentication_admin_pwd', FALSE)) {
    drupal_set_message(t('You haven\'t set the LDAP login settings.'), 'warning');
  }

  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('User name'),
  );
  $form['password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
  );
  $form['fakeuname'] = array(
    '#type' => 'textfield',
    '#title' => t('Fake user name'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Log in'),
  );
  return $form;
}

/**
 * Handles the submits for the devlogin form.
 *
 * Check if the LDAP login credentials are valid and log in as user #1 if they
 * are.
 */
function developer_authentication_form_submit($form, &$form_state) {
  if (_developer_authentication_ldaplogin($form_state['values']['username'], $form_state['values']['password'])) {
    if (!empty($form_state['values']['fakeuname'])) {
      $u = user_load_by_name($form_state['values']['fakeuname']);
      if (!empty($u->uid)) {
        $uid = $u->uid;
      }
    }
    else {
      $uid = 1;
    }
    if (!empty($uid)) {
      $lin['uid'] = $uid;
      user_login_submit(array(), $lin);
      watchdog('developer_authentication', 'Developer login by @username as user #@targetuid succeeded',
        array('@username' => $form_state['values']['username'], '@targetuid' => $uid), WATCHDOG_INFO);
      drupal_set_message(t('You were logged in as a developer.'));
      drupal_goto();
    }
  }
  watchdog('developer_authentication', 'Developer login as user @username failed',
    array('@username' => $form_state['values']['username']), WATCHDOG_NOTICE);
  drupal_set_message(t('You failed the login...'), 'error');
}

/**
 * Checks the LDAP login credentials.
 */
function _developer_authentication_ldaplogin($uname, $pass) {
  // Allow login via user name admin and password defined in settings.php, for
  // example.
  if ($adminpwd = variable_get('developer_authentication_admin_pwd', FALSE)) {
    if ($uname == 'admin' && sha1($pass) == $adminpwd) {
      return TRUE;
    }
    return FALSE;
  }

  // Connect to LDAP server.
  $server = variable_get('developer_authentication_ldap_server', 'localhost');
  $port = variable_get('developer_authentication_ldap_port', 389);
  $fname = variable_get('developer_authentication_username_field', 'cn');
  $base_dn = variable_get('developer_authentication_basedn', 'ou=members,dc=example,dc=org');
  $ldc = ldap_connect($server, $port);
  ldap_set_option($ldc, LDAP_OPT_PROTOCOL_VERSION, 3);
  if (!$ldc) {
    return FALSE;
  }

  // These can be used if necessary â€“ they allow an authenticated anon bind.
  /*
  $bn='cn=anonymous-user,'.$base_dn;
  $pw='anonymous-pass';
  $lbind=@ldap_bind($ldc, $bn, $pw);
  */

  // Bind as anonymous to search for the correct DN.
  $lbind = ldap_bind($ldc);
  if (!$lbind) {
    return FALSE;
  }

  // Clean the user name.
  $uname = _developer_authentication_clean_ldap_string($uname);
  // Search for the user's DN (required because the main user attribute is
  // full name, not uid...).
  $ureturn = ldap_search($ldc, $base_dn, "($fname=$uname)", array('dn'));
  $uent = ldap_first_entry($ldc, $ureturn);
  if (!$uent) {
    return FALSE;
  }

  // Take the DN.
  $bn = ldap_get_dn($ldc, $uent);
  // Try binding to LDAP with the correct DN and password.
  $lbind = ldap_bind($ldc, $bn, $pass);

  // If we succeeded, the password and DN were correct and we can grant access.
  if ($lbind) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Clean a string for usage in an LDAP query.
 */
function _developer_authentication_clean_ldap_string($str) {
  $str = str_replace(array('\\', '*', '(', ')'),
   array('\5c', '\2a', '\28', '\29'), $str);
  for ($i = 0; $i < strlen($str); $i++) {
    $char = substr($str, $i, 1);
    if (ord($char) < 32) {
      $hex = dechex(ord($char));
      if (strlen($hex) == 1) {
        $hex = '0' . $hex;
      }
      $str = str_replace($char, '\\' . $hex, $str);
    }
  }
  return $str;
}
