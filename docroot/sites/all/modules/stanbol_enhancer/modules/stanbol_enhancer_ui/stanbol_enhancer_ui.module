<?php

/**
 * @file
 * Module file for Stanbol Enhancer UI.
 */

/**
 * Implements hook_menu().
 */
function stanbol_enhancer_ui_menu() {
  $items = [];

  $items['admin/config/services/stanbol-enhancer'] = [
    'title' => 'Stanbol Enhancer',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['stanbol_enhancer_ui_administer_form'],
    'access arguments' => ['administer site configuration'],
  ];
  $items['admin/config/services/stanbol-enhancer/config'] = [
    'title' => 'Stanbol Enhancer',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  ];
  $items['admin/config/services/stanbol-enhancer/mapping'] = [
    'title' => 'Mapping',
    'description' => 'Enable Stanbol Enhancer to replace the selected fields value on the following entities.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['stanbol_enhancer_ui_field_mapping_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  ];

  return $items;
}

/**
 * Administration form for Stanbol Enhancer settings.
 */
function stanbol_enhancer_ui_administer_form($form, &$form_state) {
  $form[STANBOL_ENHANCER_DEFAULT_STANBOL_ENDPOINT] = [
    '#type' => 'textfield',
    '#title' => t('Stanbol Endpoint'),
    '#description' => t('Host and port of the Apache Stanbol. Default is: @default', ['@default' => 'http://localhost:8080']),
    '#required' => TRUE,
    '#default_value' => variable_get(STANBOL_ENHANCER_DEFAULT_STANBOL_ENDPOINT, 'http://localhost:8080'),
    '#element_validate' => ['_stanbol_enhancer_ui_stanbol_endpoint_element_validate'],
  ];

  return system_settings_form($form);
}

/**
 * Custom element validate function for Stanbol Endpoint field.
 *
 * @see stanbol_enhancer_ui_administer_form()
 */
function _stanbol_enhancer_ui_stanbol_endpoint_element_validate($element, &$form_state, $from) {
  if (!is_array(stanbol_enhancer_enhance_content('The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley.', ['endpoint' => $element['#value']]))) {
    form_error($element, t('Apache Stanbol could not be reached on this endpoint!'));
  }
}

/**
 * Administration form for Stanbol Enhancer entity field mapping.
 */
function stanbol_enhancer_ui_field_mapping_form($form, &$form_state) {
  $form['#tree'] = TRUE;
  $form['#processors'] = stanbol_enhancer_result_processor_info();
  $form['#entities'] = entity_get_info();

  // Collect processors's names with their descriptions.
  $processors_names = array_map(function ($processor) {
    return '<b>' . $processor['label'] . '</b>: ' . $processor['description'];
  }, $form['#processors']);

  $form['description'] = [
    '#markup' => t('Enable the Stanbol Enhancer on the following entity types.'),
  ];
  $form['available_processors'] = [
    '#type' => 'fieldset',
    '#title' => t('Available processors'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['available_processors']['list'] = [
    '#markup' => theme('item_list', ['items' => $processors_names]),
  ];

  $form['entities'] = [
    '#type' => 'vertical_tabs',
  ];

  // Display all entities with their bundles.
  foreach ($form['#entities'] as $entity_machine_name => $entity) {
    $form['entities'][$entity_machine_name] = [
      '#type' => 'fieldset',
      '#title' => $entity['label'],
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];

    $form['#entities'][$entity_machine_name]['#properties'] = entity_get_property_info($entity_machine_name);

    foreach ($entity['bundles'] as $bundle_machine_name => $bundle) {
      $form['entities'][$entity_machine_name][$bundle_machine_name] = [
        '#type' => 'fieldset',
        '#title' => $entity['bundles'][$bundle_machine_name]['label'],
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      ];
      // Get the Stanbol Enhancer settings form for this entity and its bundle.
      $form['entities'][$entity_machine_name][$bundle_machine_name]['settings'] = _stanbol_enhancer_ui_entity_bundle_stanbol_enhancer_settings_form($entity_machine_name, $bundle_machine_name, $form['#processors']);
    }
  }

  $form['actions'] = ['#type' => 'actions'];
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  ];

  return $form;
}

/**
 * Form validate for stanbol_enhancer_ui_field_mapping_form form.
 *
 * @see stanbol_enhancer_ui_field_mapping_form()
 */
function stanbol_enhancer_ui_field_mapping_form_validate($form, &$form_state) {
  $entity_settings = array_filter($form_state['values']['entities'], 'is_array');
  foreach ($entity_settings as $entity => $bundles) {
    foreach ($bundles as $bundle => $values) {
      // Call form validate for each entities' each bundles' Stanbol Enhancer
      // settings.
      _stanbol_enhancer_ui_entity_bundle_stanbol_enhancer_settings_form_validate($form['entities'][$entity][$bundle]['settings'], $form_state, $values['settings']);
    }
  }
}

/**
 * Form submit handler for stanbol_enhancer_ui_field_mapping_form form.
 *
 * @see stanbol_enhancer_ui_field_mapping_form()
 */
function stanbol_enhancer_ui_field_mapping_form_submit($form, &$form_state) {
  $entity_settings = array_filter($form_state['values']['entities'], 'is_array');
  foreach ($entity_settings as $entity => $bundles) {
    foreach ($bundles as $bundle => $values) {
      _stanbol_enhancer_ui_entity_bundle_stanbol_enhancer_settings_form_submit($entity, $bundle, $values['settings']);
    }
  }
}

/**
 * Returns a Stanbol Enhancer configuration form for this entity and its bundle.
 *
 * @param string $entity_type
 *   Type of the entity.
 * @param string $bundle
 *   Name of the entity's bundle.
 * @param array $processors
 *   Array of available Stanbol Enhancer result processors.
 *
 * @return array
 *   Form array.
 */
function _stanbol_enhancer_ui_entity_bundle_stanbol_enhancer_settings_form($entity_type, $bundle, array $processors) {
  $enhancer_settings = [];
  if ($stanbol_enhancer = stanbol_enhancer_load_enhancer_of_entity($entity_type, $bundle)) {
    $enhancer_settings = $stanbol_enhancer->settings;
  }
  return _stanbol_enhancer_ui_entity_bundle_stanbol_enhancer_settings_generate_form($entity_type, $bundle, $processors, $enhancer_settings);
}

/**
 * Generate a Stanbol enhancer settings form for the entity's bundle.
 *
 * @param string $entity_type
 *   Type of the entity.
 * @param string $bundle
 *   Bundle of the entity.
 * @param array $processors
 *   Array of avialable Stantol enhancer result processors.
 * @param array $enhancer_settings
 *   Settings of the Stanbol Enhancer.
 *
 * @return array
 *   Renderable form array.
 */
function _stanbol_enhancer_ui_entity_bundle_stanbol_enhancer_settings_generate_form($entity_type, $bundle, array $processors, array $enhancer_settings = []) {
  $form = [];

  // Collect all properties of the entity bundle.
  $entity_properties = entity_get_property_info($entity_type);
  $bundle_properties = isset($entity_properties['properties']) ? $entity_properties['properties'] : [];
  if (!empty($entity_properties['bundles'][$bundle]['properties'])) {
    $bundle_properties += $entity_properties['bundles'][$bundle]['properties'];
  }

  // Get the available text fields on the entity bundle.
  $text_fields = array_filter($bundle_properties, function ($property, $field_machine_name) {
    $text_properties = ['text', 'text_formatted'];
    if (isset($property['type']) && in_array($property['type'], $text_properties)) {
      $field_info = field_info_field($field_machine_name);
      return in_array($field_info['type'], [
        'text',
        'text_long',
        'text_with_summary',
      ]);
    }
    return FALSE;
  }, ARRAY_FILTER_USE_BOTH);

  if (!empty($text_fields)) {
    $field_to_analyze_options = array_map(function ($field) {
      return $field['label'];
    }, $text_fields);

    $form['enabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable the Stanbol Enhancer on this bundle.'),
      '#attributes' => ['class' => ['enabled']],
      '#default_value' => isset($enhancer_settings['enabled']) ? $enhancer_settings['enabled'] : FALSE,
    ];

    $form['field_to_analyze'] = [
      '#type' => 'select',
      '#title' => t('Field to analyze'),
      '#description' => t("Select which text field of the entity bundle should be analyzed by the Stanbol Enhancer. <strong>WARNING: The selected fields' values will be overridden by the Stanbol Enhancer always!</strong>"),
      '#options' => $field_to_analyze_options,
      '#empty_option' => t('- None -'),
      '#default_value' => isset($enhancer_settings['field_to_analyze']) ? $enhancer_settings['field_to_analyze'] : '',
      '#disabled' => count($field_to_analyze_options) == 0,
      '#states' => [
        'required' => [
          'fieldset#edit-entities-' . drupal_html_class($entity_type . '-' . $bundle) . ' input[class~="enabled"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['minimum_confidence_level'] = [
      '#type' => 'select',
      '#title' => t('Minimum confidence level'),
      '#description' => t('The minimum confidence level of the data that should be imported from the Stanbol Enhancer.'),
      '#options' => _stanbol_enhancer_ui_get_confidence_level_options(),
      '#empty_option' => t('- None -'),
      '#default_value' => isset($enhancer_settings['minimum_confidence_level']) ? $enhancer_settings['minimum_confidence_level'] : '',
      '#states' => [
        'required' => [
          'fieldset#edit-entities-' . drupal_html_class($entity_type . '-' . $bundle) . ' input[class~="enabled"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['process_immediately'] = [
      '#type' => 'checkbox',
      '#title' => t('Process the selected field values immediately'),
      '#description' => t('By default the Stanbol Enhancer does not process the entities immediately when they saved, rather than, it is add them to a queue and process them later with cron, because of performance reasons.'),
      '#default_value' => isset($enhancer_settings['process_immediately']) ? $enhancer_settings['process_immediately'] : FALSE,
    ];

    $form['mapping'] = [
      '#type' => 'container',
    ];

    $form['mapping']['title'] = [
      '#type' => 'item',
      '#title' => t('Processor mapping'),
      '#description' => t('Select which field should store the returned value of the processors.'),
    ];

    // Generate select list for all available processors.
    // Each value of a select list is contains only those fields, which
    // match the requirements of the current processor.
    foreach ($processors as $processor_name => $processor) {
      // Filter the bundle properties against the current processor
      // requirements.
      $matching_properties = array_filter($bundle_properties, function ($property) use ($processor) {
        if (isset($property['type']) && $property['type'] == $processor['type']) {
          if (empty($processor['conditions'])) {
            return TRUE;
          }
          foreach ($processor['conditions'] as $field => $value) {
            if (!isset($property[$field]) || $property[$field] == $value) {
              return TRUE;
            }
            return FALSE;
          }
        }
        return FALSE;
      });

      $processor_options = array_map(function ($property) {
        return $property['label'];
      }, $matching_properties);

      $form['mapping'][$processor_name] = [
        '#type' => 'select',
        '#title' => $processor['label'],
        '#description' => $processor['description'],
        '#options' => $processor_options,
        '#empty_option' => t('- None -'),
        // Delete the field old value, when it became disabled.
        '#default_value' => isset($enhancer_settings['mapping'][$processor_name]) && count($processor_options) != 0 ? $enhancer_settings['mapping'][$processor_name] : '',
        '#disabled' => count($processor_options) == 0,
      ];
    }
  }
  else {
    $form['no_field_to_analyze'] = [
      '#markup' => t("Entity bundle does not have any text field, which could be analyzed by the Apache Stanbol's Enhancer module."),
    ];
  }

  return $form;
}

/**
 * Validation handler for Stanbol Enhancer settings.
 *
 * @param array $form
 *   General form array.
 * @param array $from_state
 *   General form_state array.
 * @param array $settings
 *   form_state values of the Stanbol Enhancer for this entity and its bundle.
 */
function _stanbol_enhancer_ui_entity_bundle_stanbol_enhancer_settings_form_validate(array $form, array &$from_state, array $settings) {
  if ($settings['enabled'] && empty($settings['field_to_analyze'])) {
    form_error($form['field_to_analyze'], t('%field field is required.', ['%field' => $form['field_to_analyze']['#title']]));
  }
  if ($settings['enabled'] && empty($settings['minimum_confidence_level'])) {
    form_error($form['minimum_confidence_level'], t('%field field is required.', ['%field' => $form['minimum_confidence_level']['#title']]));
  }
  $unique_fields = array_unique($settings['mapping']);
  $unique_fields = array_keys(array_intersect_key($settings['mapping'], $unique_fields));

  foreach ($settings['mapping'] as $processor => $field) {
    if ($field && !in_array($processor, $unique_fields)) {
      form_error($form['mapping'][$processor], t('One field should be assigned to only one processor!'));
    }
  }
}

/**
 * Submit handler for Stanbol Enhancer settings.
 *
 * @param string $entity
 *   Entity type.
 * @param string $bundle
 *   Bundle of the entity type.
 * @param array $settings
 *   Array of Stanbol Enhancer settings for this entity type and its bundle.
 */
function _stanbol_enhancer_ui_entity_bundle_stanbol_enhancer_settings_form_submit($entity, $bundle, array $settings) {
  // Clear empty values, no need to save them.
  $settings['mapping'] = array_filter($settings['mapping']);
  if (!stanbol_enhancer_save($entity, $bundle, $settings)) {
    $entity_info = entity_get_info($entity);
    drupal_set_message(t('Settings of the %entity entity can not be saved, please try again!', ['%entity' => $entity_info['label']]), 'error');
  }
}

/**
 * Custom callback which returns the options of the Confidence level field.
 */
function _stanbol_enhancer_ui_get_confidence_level_options() {
  $confidence_level = [
    'More relevant, less results' => drupal_map_assoc([
      '1.0',
      '0.99',
      '0.95',
      '0.9',
    ]),
  ];

  $confidence_level += drupal_map_assoc([
    '0.8',
    '0.7',
    '0.6',
    '0.5',
    '0.4',
    '0.3',
    '0.2',
  ]);

  $confidence_level += [
    'Less relevant, more results' => drupal_map_assoc([
      '0.1',
      '0.01',
      '0.05',
      '0',
    ]),
  ];

  return $confidence_level;
}

/**
 * Custom callback which returns the options of the Language field.
 */
function _stanbol_enhancer_ui_get_languages() {
  require_once DRUPAL_ROOT . '/includes/iso.inc';
  $languages = _locale_get_predefined_list();
  return array_map(function ($lang) {
    return $lang[0];
  }, $languages);
}
