<?php

/**
 * @file
 */
define('CERF_ALL_BUNDLE', 'cerf_all_bundle');

/**
 * Implements hook_menu().
 */
function cerf_menu() {
  $items['cerf/%/%/%'] = array(
    'page callback' => 'cerf_autocomplete_callback',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Page callback for 'cerf/%/%/%' path.
 */
function cerf_autocomplete_callback($entity_type, $autocomplete_field = 'title', $entity_bundle = CERF_ALL_BUNDLE, $value) {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', $entity_type);
  $query->propertyCondition($autocomplete_field, "$value%", 'LIKE');

  if ($entity_bundle != CERF_ALL_BUNDLE) {
    $query->entityCondition('bundle', $entity_bundle);
  }

  $query->range(0, 10);
  $result = $query->execute();

  $matches = array();
  if (!empty($result[$entity_type])) {
    $entity_info = entity_get_info($entity_type);
    foreach ($result[$entity_type] as $entity) {
      if ($entity = entity_load($entity_type, array($entity->$entity_info['entity keys']['id']))) {
        $entity = reset($entity);
        $key = "{$entity->$autocomplete_field} ({$entity->$entity_info['entity keys']['id']})";
        $key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
        // Names containing commas or quotes must be wrapped in quotes.
        if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
          $key = '"' . str_replace('"', '""', $key) . '"';
        }
        $matches[$key] = '<div class="reference-autocomplete">' . $entity->$autocomplete_field . '</div>';
      }
    }
  }

  drupal_json_output($matches);
  drupal_exit();
}

/**
 * Process callback.
 */
function cerf_element_process($element) {
  if (!empty($element['#entity_type'])) {
    // Set autocomplete path by entity type.
    $autocomplete_field = !empty($element['#autocomplete_field']) ? $element['#autocomplete_field'] : 'title';

    if (!empty($element['#entity_bundle'])) {
      $element['#autocomplete_path'] = 'cerf/' . $element['#entity_type'] . '/' . $autocomplete_field . '/' . $element['#entity_bundle'];
    }
    else {
      $element['#autocomplete_path'] = 'cerf/' . $element['#entity_type'] . '/' . $autocomplete_field . '/' . CERF_ALL_BUNDLE;
    }

    if (!empty($element['#value']) && is_numeric($element['#value'])) {
      if ($entity = entity_load($element['#entity_type'], array($element['#value']))) {
        $entity = reset($entity);
        $entity_info = entity_get_info($element['#entity_type']);
        $element['#value'] = "{$entity->$autocomplete_field} ({$entity->$entity_info['entity keys']['id']})";
      }
    }
  }
  return $element;
}

/**
 * Element validate callback.
 */
function cerf_element_validate($element, &$form_state) {
  $name = $element['#name'];
  $values = $form_state['values'];

  $value = '';
  if (!empty($values[$name])) {
    // Take "label (entity id)', match the id from parenthesis.
    preg_match("/.+\((\d+)\)/", $values[$name], $matches);
    $value = $matches[1];
  }

  // Update the value of this element.
  $element['#value'] = $value;
  form_set_value($element, $value, $form_state);
}

///**
// * Implements hook_form_alter().
// */
//function cerf_form_alter(&$form, $form_state, $form_id) {
//  if ($form_id == 'user_login_block') {
//    $properties = array(
//      '#type' => 'textfield',
//      '#title' => t('my autocomplete'),
//      '#size' => 20,
//    );
//    $form['no_cerf'] = cerf_add_cerf_field($properties, 'node', 'title', 'article');
//  }
//}

/**
 * Add entity reference field to form.
 */
function cerf_add_cerf_field($properties, $entity_type, $autocomplete_field = 'title', $entity_bundle = CERF_ALL_BUNDLE) {
  $form_element = array();
  $properties['#process'][] = 'cerf_element_process';
  $properties['#element_validate'][] = 'cerf_element_validate';
  $properties['#entity_type'] = $entity_type;
  $properties['#autocomplete_field'] = $autocomplete_field;
  $properties['#entity_bundle'] = $entity_bundle;

  if (!empty($entity_type)) {
    $form_element = $properties;
  }
  else {
    watchdog('error', 'There is no \'#entity_type\' in cerf element.');
  }

  return $form_element;
}
