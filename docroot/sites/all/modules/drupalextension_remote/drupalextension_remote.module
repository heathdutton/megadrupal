<?php

/**
 * @file
 * Custom Drupal authentication and other features needed for Remote Behat testing.
 */

/**
 * Implements hook_init().
 *
 * Performs a user login from the credentials in the Custom HTTP_DRUPAL_AUTH header.
 */
function drupalextension_remote_init() {
    // Try to fill PHP_AUTH_USER & PHP_AUTH_PW with HTTP_DRUPAL_AUTH
    // for compatibility with Apache PHP CGI/FastCGI.
    // This requires the following line in your ".htaccess"-File:
    // RewriteRule .* - [E=HTTP_DRUPAL_AUTH:%{HTTP:Drupal-Auth}]
    if (!empty($_SERVER['HTTP_DRUPAL_AUTH'])) {
        $authentication = base64_decode($_SERVER['HTTP_DRUPAL_AUTH']);
        list($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) = explode(':', $authentication);
        if (user_is_anonymous() && isset($_SERVER['PHP_AUTH_USER']) && isset($_SERVER['PHP_AUTH_PW'])) {
            $form_state = array();
            $form_state['values']['name'] = $_SERVER['PHP_AUTH_USER'];
            $form_state['values']['pass'] = $_SERVER['PHP_AUTH_PW'];
            drupal_form_submit('user_login', $form_state);
            if (!user_is_anonymous()) {
                drupal_static_reset();

                // Always make sure to disable the page cache after we authenticated the
                // user so that a response never gets into the page cache.
                drupal_page_is_cacheable(FALSE);
            }
            else {
                // Clear the login form error and remove the login failure message.
                $form = &drupal_static('form_set_error', array());
                $form = array();
                $messages = drupalextension_remote_format_messages(drupal_get_messages());
                drupalextension_remote_api_response(array(), sprintf($messages), 422);
                exit();
            }
        }
    }
}

/**
 * Implements hook_permission().
 *
 */
function drupalextension_remote_permission() {
    $items['access extended drupal remote api data'] = array(
        'title' => t('Access extended Drupal Remote API data'),
        'description' => t('Warning: Give to trusted roles only; this permission has security implications.')
    );

    return $items;
}

/**
 * Implements hook_menu().
 *
 */
function drupalextension_remote_menu() {
    $items['drupal-remote-api/entities/%'] = array(
        'page callback' => array('drupalextension_remote_entity_api'),
        'page arguments' => array(2),
        'access arguments' => array('access extended drupal remote api data')
    );
    $items['drupal-remote-api/terms/%'] = array(
        'page callback' => array('drupalextension_remote_terms_api'),
        'page arguments' => array(2),
        'access arguments' => array('access extended drupal remote api data')
    );
    $items['drupal-remote-api/users/%'] = array(
        'page callback' => array('drupalextension_remote_users_api'),
        'page arguments' => array(2),
        'access arguments' => array('access extended drupal remote api data')
    );
    $items['drupal-remote-api/batchprocess'] = array(
        'page callback' => array('drupalextension_remote_batchprocess_api'),
        'access arguments' => array('access extended drupal remote api data')
    );
    $items['drupal-remote-api/cache'] = array(
        'page callback' => array('drupalextension_remote_cache_api'),
        'page arguments' => array(2),
        'access arguments' => array('access extended drupal remote api data')
    );

    return $items;
}

/**
 * Provides entity metadata.
 *
 * @param $args
 * @return array
 */
function drupalextension_remote_entity_api($args) {

    try {
        global $user;
        $account = $user;
        // Only return formats available to current user.
        $filter_formats = filter_formats($account);
        $return['filter_formats'] = $filter_formats;

        $node_types = node_type_get_types();
        $return['node_type_get_types'] = $node_types;

        $fields = explode(',' , $args);
        foreach ($fields as $field => $value) {
            $return['field_info_field'][$value] = field_info_field($value);
        }

        return drupalextension_remote_api_response($return, "Entity metadata retrieved successfully", 200);
    }
    catch (\Exception $e) {
        return drupalextension_remote_api_response($e->getMessage(), sprintf("Add role failed: %s", $e->getMessage()), 422);
    }

}

/**
 * Provides terms metadata.
 *
 * @param $args
 * @return array
 */
function drupalextension_remote_terms_api($args) {
    try {
        $args = explode(',', $args);
        $terms = array();
        foreach ($args as $arg) {
            $term = taxonomy_get_term_by_name($arg);
            if (!$term) {
                throw new \Exception(sprintf("The term '%s' does not exist on the remote site.", $arg));
            }
            $terms[] = array_pop($term);
        }

        return drupalextension_remote_api_response($terms, "Term metadata retrieved successfully", 200);
    }
    catch (\Exception $e) {
        return drupalextension_remote_api_response($e->getMessage(), sprintf("Retrieving term data failed: %s", $e->getMessage()), 422);
    }

}

/**
 * Provides user API.
 *
 * @param $args
 * @return array
 */
function drupalextension_remote_users_api($args) {

    if ($args === 'create') {
        try {
            // @TODO Determine if current POST validation is sufficient?
            // @TODO Do we need a CSRF token?
            $user = json_decode(file_get_contents('php://input'), FALSE);
            $user = drupalextension_remote_validate_post_data(array('name', 'pass', 'mail'), $user);

            // Not really necessary here right now, but leaving as this may be useful in the future.
            drupalextension_remote_dissalow_add_edit_user_1($user);

            // Default status to TRUE if not explicitly creating a blocked user.
            if (!isset($user->status)) {
                $user->status = 1;
            }

            // For now we are only allowing roles to be set with the addrole service.
            if (isset($user->roles)) {
                unset($user->roles);
            }

            user_save($user, (array) $user);

            return drupalextension_remote_api_response($user->uid, "User successfully created", 200);
        }
        catch (\Exception $e) {
            return drupalextension_remote_api_response(array(), sprintf("Node create failed: %s", $e->getMessage()), 422);
        }
    }

    if ($args === 'addrole') {
        try {
            $data = json_decode(file_get_contents('php://input'), FALSE);
            $data = drupalextension_remote_validate_post_data(array('uid', 'role_name'), $data);
            drupalextension_remote_dissalow_add_edit_user_1($data);

            $uid = $data->uid;
            $role_name = $data->role_name;

            $role = user_role_load_by_name($role_name);

            if (!$role) {
                throw new \RuntimeException(sprintf("The role '%s' does not exist on the remote site.", $role_name));
            }

            drupalextension_remote_disallow_roles($role);

            user_multiple_role_edit(array($uid), 'add_role', $role->rid);

            return drupalextension_remote_api_response(array(), "Role successfully added", 200);
        }
        catch (\Exception $e) {
            return drupalextension_remote_api_response(array(), sprintf("Add role failed: %s", $e->getMessage()), 422);
        }
    }
    return drupalextension_remote_api_response(array(), sprintf("API method %s is not implemented", $args), 422);

}

/**
 * Runs batch process.
 *
 * @TODO In Progress, not working yet.
 */
function drupalextension_remote_batchprocess_api() {

    //$batch =& batch_get();
    //$batch['progressive'] = FALSE;
    //batch_process();

    $return = array();
    $message = "Batch process not yet supported";
    drupal_json_output(drupalextension_remote_api_response($return, $message, 422));
    exit();
}

/**
 * Clear all caches.
 *
 */
function drupalextension_remote_cache_api() {
    try {
        drupal_flush_all_caches();
        $return = array();
        return drupalextension_remote_api_response($return, "All caches successfully cleared", 200);
    }
    catch (\Exception $e) {
        return drupalextension_remote_api_response($e->getMessage(), sprintf("Cache clear failed: %s", $e->getMessage()), 422);
    }
}

/**
 * Consistent response formatting.
 *
 * @param $results
 * @param $message
 * @param $response_code
 * @return array
 */
function drupalextension_remote_api_response($results, $message, $response_code) {
    return drupal_json_output(array(
        'data' => $results,
        'message' => $message,
        'response_code' => $response_code
    ));
}

/**
 * Do not allow adding or editing of user 1.
 *
 * @param $user
 */
function drupalextension_remote_dissalow_add_edit_user_1($user) {
    if (isset($user->uid) && $user->uid == 1) {
        throw new \RuntimeException(sprintf('Adding or editing user 1 is not permitted.'));
    }
}


/**
 * Do not allow adding specific blacklisted roles.
 *
 * @param $role
 */
function drupalextension_remote_disallow_roles($role) {
    $default = array('BehatAPI');
    $blacklist = variable_get('drupalextension_remote_role_blacklist', $default);
    if (in_array($role->name, $blacklist)) {
        throw new \RuntimeException(sprintf("The use of the role %s is not permitted on the remote site.", $role->name));
    }
}

/**
 * Check for required attributes and don't return anything else.
 *
 * @param $required_attributes
 * @param $post_data
 * @return array
 */
function drupalextension_remote_validate_post_data($required_attributes, $post_data) {

    $processed = new stdClass();
    foreach ($required_attributes as $attribute) {
        if (!isset($post_data->$attribute)) {
            throw new \RuntimeException(sprintf("The attribute %s is required.", $attribute));
        }
        $processed->$attribute = $post_data->$attribute;
    }
    return $processed;

}

/**
 * Format Drupal Messages for API Response.
 *
 * @param $messages
 * @return sting
 */
function drupalextension_remote_format_messages($messages) {
    $formatted_messages = '';
    foreach ($messages['error'] as $key => $value) {
        $formatted_messages = $formatted_messages . 'Drupal Message: ' . strip_tags($value) . ' ';
    }
    return $formatted_messages;
}
