<?php

/**
 * @file
 * Drupal Extension Remote services tests.
 */
class DrupalExtensionRemoteTestCase extends DrupalWebTestCase {

    /**
     * Get Info
     *
     */
    public static function getInfo() {
        return array(
            'name' => 'Drupal Extension Remote',
            'description' => 'Tests custom API operations via the expanded REST web service.',
            'group' => 'Services',
        );
    }

    /**
     * Setup
     *
     */
    public function setUp() {
        parent::setUp(
            'drupalextension_remote'
        );
    }

    /**
     * Test that sensitive API endpoints are not exposed to inappropriate users.
     *
     */
    public function testPermissions() {

        // Test as anonymous user, should fail.
        $this->runRequestsAgainstAPIWithExpectedResponseCodeOf('403');


        // Test with advanced permissions, should still fail.
        $account = $this->drupalCreateUser(array(
            'bypass node access',
            'administer content types',
            'administer nodes'
        ));
        $this->drupalLogin($account);
        $this->runRequestsAgainstAPIWithExpectedResponseCodeOf('403');
        $this->drupalLogout();

        // Test with correct permission, should pass.
        $account = $this->drupalCreateUser(array(
            'access extended drupal remote api data'
        ));
        $this->drupalLogin($account);
        $this->runRequestsAgainstAPIWithExpectedResponseCodeOf('200');
        $this->drupalLogout();

    }

    /**
     * Helper function to issue a HTTP request with simpletest's cURL.
     *
     * @param array $body
     *   Either the body for POST and PUT or additional URL parameters for GET.
     * @return string
     */
    protected function httpRequest($url, $method, $body = NULL, $format = 'json') {
        switch ($method) {
            case 'GET':
                // Set query if there are addition GET parameters.
                $options = isset($body) ? array('absolute' => TRUE, 'query' => $body) : array('absolute' => TRUE);
                $curl_options = array(
                    CURLOPT_HTTPGET => TRUE,
                    CURLOPT_URL => url($url, $options),
                    CURLOPT_NOBODY => FALSE,
                );
                break;

            case 'POST':
                $curl_options = array(
                    CURLOPT_HTTPGET => FALSE,
                    CURLOPT_POST => TRUE,
                    CURLOPT_POSTFIELDS => $body,
                    CURLOPT_URL => url($url, array('absolute' => TRUE)),
                    CURLOPT_NOBODY => FALSE,
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/' . $format,
                    ),
                );
                break;

            case 'PUT':
                $curl_options = array(
                    CURLOPT_HTTPGET => FALSE,
                    CURLOPT_CUSTOMREQUEST => 'PUT',
                    CURLOPT_POSTFIELDS => $body,
                    CURLOPT_URL => url($url, array('absolute' => TRUE)),
                    CURLOPT_NOBODY => FALSE,
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/' . $format,
                    ),
                );
                break;

            case 'DELETE':
                $curl_options = array(
                    CURLOPT_HTTPGET => FALSE,
                    CURLOPT_CUSTOMREQUEST => 'DELETE',
                    CURLOPT_URL => url($url, array('absolute' => TRUE)),
                    CURLOPT_NOBODY => FALSE,
                );
                break;
        }

        $response = $this->curlExec($curl_options);
        $headers = $this->drupalGetHeaders();
        $headers = implode("\n", $headers);

        $this->verbose($method . ' request to: ' . $url .
            '<hr />Code: ' . curl_getinfo($this->curlHandle, CURLINFO_HTTP_CODE) .
            '<hr />Response headers: ' . $headers .
            '<hr />Response body: ' . $response);

        return $response;
    }

    /**
     * Run request with expected response code.
     *
     */
    private function runRequestsAgainstAPIWithExpectedResponseCodeOf($expected_response_code) {
        // No GET access to entities API.
        $result = $this->httpRequest('/drupal-remote-api/entities/title', 'GET');
        $this->assertResponse($expected_response_code, 'HTTP response code is correct.');

        // No GET access to the "create" Users API.
        // Will always be an error response because GET method does not exist.
        $result = $this->httpRequest('/drupal-remote-api/users/create', 'GET');
        $this->assertResponse($expected_response_code, 'HTTP response code is correct.');

        // No POST access to the "create" Users API
        $result = $this->httpRequest('/drupal-remote-api/users/create', 'POST', $this->getPostData('user'));
        $this->assertResponse($expected_response_code, 'HTTP response code is correct.');

        // No GET access to the "addrole" Users API
        // Will always be an error response because GET method does not exist.
        $result = $this->httpRequest('/drupal-remote-api/users/addrole', 'GET');
        $this->assertResponse($expected_response_code, 'HTTP response code is correct.');

        // No POST access to the "addrole" Users API
        $result = $this->httpRequest('/drupal-remote-api/users/addrole', 'POST', $this->getPostData('addrole'));
        $this->assertResponse($expected_response_code, 'HTTP response code is correct.');

        // No GET access to the Terms API
        $result = $this->httpRequest('/drupal-remote-api/terms/term-name', 'GET');
        $this->assertResponse($expected_response_code, 'HTTP response code is correct.');

        // No GET access to the Cache API
        $result = $this->httpRequest('/drupal-remote-api/cache', 'GET');
        $this->assertResponse($expected_response_code, 'HTTP response code is correct.');
    }

    /**
     * Get POST data
     *
     */
    private function getPostData($type) {
        switch ($type) {
            case 'user':
                return json_encode(array(
                    'name' => 'fakename',
                    'pass' => 'fakepass',
                    'mail' => 'email@example.com'
                ));

            case 'addrole':
                return json_encode(array(
                    'uid' => '2',
                    'role_name' => 'authenticated user'
                ));

        }
    }
}
