<?php

/**
 * @file
 * Let user access contents from 3m and overdrive at same time.
 *
 * Show 3m and overdrive book searching widgets
 */

/**
 * Implements hook_permission().
 */
function ebooks_permission() {
  return array(
    'search ebooks' => array(
      'title' => t('Search eBooks'),
      'description' => t('Allows users to search eBooks.'),
    ),
    'configure ebooks' => array(
      'title' => t('Configure eBooks'),
      'description' => t('Allows users to make configuration changes for the eBooks Search.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function ebooks_block_info() {
  $blocks = array();

  $blocks['info'] = array(
    'info' => t('Search eBooks')
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ebooks_block_view($delta = '') {
  $block = array();

  $block['subject'] = t('eBooks Search');
  $block['content'] = drupal_get_form('ebooks_get_block');

  return $block;
}

function ebooks_get_block($form) {

  $form = array(
    '#id' => 'ebooks-block-form',
    '#action' => url('ebooks/search'),
  );
  $form['ebooks_block_fieldset'] = array(
    '#type' => 'fieldset',
  );
  $form['ebooks_block_fieldset']['ebooks_block_search'] = array(
    '#type' => 'textfield',
    '#title' => t('Title/Author/Subject/ISBN'),
    '#size' => 20,
    '#required' => TRUE,
  );
  $form['ebooks_block_fieldset']['ebooks_available'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only available books'),
  );
  $form['ebooks_block_fieldset']['ebooks_submit'] = array(
    '#type' => 'button',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * Implements hook_menu().
 */
function ebooks_menu() {
  $items['ebooks/search'] = array(
    'title' => t('eBooks Search'),
    'description' => t('Search your favorite books.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ebooks_get_widgets_form'),
    'file' => 'ebooks.pages.inc',
    'access arguments' => array('search ebooks'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'primary-links',
  );
  $items['ebooks/overdrive/search'] = array(
    'page callback' => 'ebooks_pages_overdrive',
    'file' => 'ebooks.pages.inc',
    'access arguments' => array('search ebooks'),
    'type' => MENU_CALLBACK,
  );
  $items['ebooks/3m/search'] = array(
    'page callback' => 'ebooks_pages_3m',
    'file' => 'ebooks.pages.inc',
    'access arguments' => array('search ebooks'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/search/ebooks'] = array(
    'title' => t('eBooks Search Settings'),
    'description' => t('Customize the eBooks Search.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ebooks_settings'),
    'file' => 'ebooks.admin.inc',
    'access arguments' => array('configure ebooks'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

function ebooks_get_3m_html($ebooks_search, &$options) {
  if (isset($options['search-within-results'])) {
    $ebooks_search = $options['last-search'] . ' ' . $ebooks_search;
  }

  $ebooks_3m_query = str_replace(' ', '%20', str_replace('-', '__token_sepp__', $ebooks_search));

  if (isset($options['only-available'])) {
    $available = 'loanable';
  }
  else {
    $available = 'library';
  }

  $full_url = variable_get('ebooks_3m_url') . '/search/query/' . $ebooks_3m_query . '/source/' . $available . '/';


  // 3M SEARCH ************************************************************************************************

  // Initialize a cURL session

  $ebooks_3m = curl_init();

  curl_setopt($ebooks_3m, CURLOPT_URL, $full_url);
  curl_setopt($ebooks_3m, CURLOPT_RETURNTRANSFER, TRUE);

  $search_3m = curl_exec($ebooks_3m);

  //getting only div that we need.
  //i-> where to start h-> how many char to go
  $search_3m = trim(preg_replace('/\s+/', ' ', $search_3m)); // Remove any whitespace characters (linebreaks, etc.)

  if (strpos($search_3m, 'channel-list-view') !== FALSE) {
    $i = strpos($search_3m, 'channel-list-view') + 19;
    $h = strpos($search_3m, 'root-footer') - $i - 9;

    $search_3m = substr($search_3m, $i, $h);
    $search_3m = str_replace('href= "', 'href="', $search_3m);
    $search_3m = str_replace('href="/library/', 'href="http://ebook.3m.com/library/', $search_3m);
    $search_3m = str_replace('<form', '<div class="form" ', $search_3m);
    $search_3m = str_replace('</form', '</div', $search_3m);

    // Strip unecessary/problematic tags.
    $search_3m = preg_replace('/<script[^>]*>.*?<\/script>/is', '', $search_3m);
    $search_3m = preg_replace('/<fieldset[^>]*>.*?<\/fieldset>/is', '', $search_3m);
    $search_3m = preg_replace('/<b\s[^>]*>.*?<\/b>/is', '', $search_3m);
    $search_3m = preg_replace('/<span class="year"[^>]*>.*?<\/span>/is', '', $search_3m);
    $search_3m = str_replace('</div></div></div></div></div></div>', '</div></div></div>', $search_3m);

    if (strpos($search_3m, 'Sorry, no results found. Please try modifying your query.')) {
      $search_3m = str_replace('Sorry, no results found. Please try modifying your query.', 'No results were found.', $search_3m);
      $search_3m = str_replace('<h3>', '<span class="no-results">', $search_3m);
      $search_3m = str_replace('</h3>', '</span>', $search_3m);
    }
    // Check for unnecessary final tags from 3M.
    $final_tags = substr($search_3m, -18);
    if ($final_tags == '</div></div></div>') {
      // Chop off the final tags then.
      $search_3m = substr($search_3m, 0, -18);
    }

    $options['last-search'] = $ebooks_search;

    return $search_3m . '<div id="ebooks-loading-panel" class="loading-3m" style="display: none; ">' . t('Searching eBooks') . ' <img src="/' . drupal_get_path('module', 'ebooks') . '/loading.gif" /></div>';
  }
  else {
    $options['last-search'] = $ebooks_search;
    return 'There was a problem contacting the 3M website.';
  }
}

function ebooks_get_overdrive_html($ebooks_search, &$options) {

  if (isset($options['search-within-results'])) {
    $ebooks_search = $options['last-search'] . ' ' . $ebooks_search;
  }

  $search_overd = '';

  $site_name = variable_get('site_name', 'Drupal Site Using eBooks Module');
  $client_key = variable_get('ebooks_overdrive_client_key');
  $client_secret = variable_get('ebooks_overdrive_client_secret');
  $auth_key = base64_encode($client_key . ':' . $client_secret);
  $ebooks_overdrive_account_id_number = variable_get('ebooks_overdrive_account_id_number');
  
  // ! 1. Token
  /**
   * 1. Ask Overdrive for a token.
   */
  $header[] = 'Content-Type: application/x-www-form-urlencoded;charset=UTF-8';
  $header[] = 'Authorization: Basic ' . $auth_key;
  $curl = curl_init('https://oauth.overdrive.com/token');
  curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, 'grant_type=client_credentials'); 
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  $curl_response = curl_exec($curl);
  curl_close($curl);
  $json = json_decode($curl_response);
  
  // ! 2. Product Search URL
  /**
   * 2. Find the URL for the library's product search.
   * 
   * GET /v1/libraries/1225 HTTP/1.1
   * Host: api.overdrive.com
   * Authorization: Bearer 2YotnFZFEjr1zCsicMWpAA
   * User-Agent: Richland Library Browser
   * X-Forwarded-For: (Client IP Address)
   */
  unset($header, $curl); // Empty out earlier vars.
  $header[] = 'Authorization: ' . $json->token_type . ' ' . $json->access_token;
  $header[] = 'User-Agent: ' . $site_name . ' Browser';
  $header[] = 'X-Forwarded-For: ' . $_SERVER['REMOTE_ADDR'];
  $curl = curl_init('https://api.overdrive.com/v1/libraries/' . $ebooks_overdrive_account_id_number);
  curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  $curl_response = curl_exec($curl);
  curl_close($curl);
  $json2 = json_decode($curl_response);
  $product_search_url = $json2->links->products->href;
  
  // ! 3. Search
  /**
   * 3. Now run a search for a title at that URL.
   * 
   * URL needs to have the query appended like this:
   * http://api.overdrive.com/v1/collections/L2B2gAAAKoBAAA1B/products?q=The%20Adventures%20of%20Sherlock%20Holmes
   */
  unset($header, $curl); // Empty out earlier vars.
  $header[] = 'Authorization: ' . $json->token_type . ' ' . $json->access_token;
  $header[] = 'User-Agent: ' . $site_name . ' Browser';
  $header[] = 'X-Forwarded-For: ' . $_SERVER['REMOTE_ADDR'];
  if ($options['ajax'] == TRUE && $options['page_overdrive'] > 0) {
    $page = $options['page_overdrive'];
    $offset = $page * 10;
    // Show more options since this is being done via AJAX once the initial 10 items get displayed.
    $curl = curl_init($product_search_url . '?limit=10&offset=' . $offset . '&q=' . urlencode($ebooks_search));
  }
  else {
    $curl = curl_init($product_search_url . '?limit=10&q=' . urlencode($ebooks_search));
  }
  curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  $curl_response = curl_exec($curl);
  curl_close($curl);  
  $json3 = json_decode($curl_response);
  if (is_array($json3->products) && count($json3->products) > 0) { // Make sure we actually got a result from our search.
    if (($options['ajax'] != TRUE && !isset($options['only-available'])) || ($options['ajax'] == TRUE && $options['only_available'] != 1)) {
      foreach ($json3->products as $product) {
        unset($title, $author, $thumbnail, $url);
        $title = $product->title;
        $author = $product->primaryCreator->name;
        $thumbnail = $product->images->thumbnail->href;
        $url = $product->contentDetails[0]->href;
        $search_overd .= "<div class=\"overdrive_title\"><a href=\"$url\" target=\"_blank\"><img src=\"$thumbnail\" class=\"cover\"></a><p><strong><a href=\"$url\" target=\"_blank\">$title</a></strong><br>$author\n</div>\n";
      }
    }
    else {
      // ! 4. Availability
      /**
       * 4. Now let's check the availability of the items.
       * 
       * The availability link comes from the previous call.
       */
      foreach ($json3->products as $product) {
        unset($title, $author, $thumbnail, $url, $url_availability, $json4);
        $title = $product->title;
        $author = $product->primaryCreator->name;
        $thumbnail = $product->images->thumbnail->href;
        $url = $product->contentDetails[0]->href;
        $url_availability = $product->links->availability->href;
        
        unset($header, $curl); // Empty out earlier vars.
        $header[] = 'Authorization: ' . $json->token_type . ' ' . $json->access_token;
        $header[] = 'User-Agent: ' . $site_name . ' Browser';
        $header[] = 'X-Forwarded-For: ' . $_SERVER['REMOTE_ADDR'];
        $curl = curl_init($url_availability);
        curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
        $curl_response = curl_exec($curl);
        curl_close($curl);
        $json4 = json_decode($curl_response);
        if ($json4->available == TRUE) {
          $search_overd .= "<div class=\"overdrive_title\"><a href=\"$url\" target=\"_blank\"><img src=\"$thumbnail\" class=\"cover\"></a><p><strong><a href=\"$url\" target=\"_blank\">$title</a></strong><br>$author\n</div>\n";
        }
      }
    }
  }
  else {
    $search_overd = 'No results were found.';
  }

  if ($options['ajax'] == TRUE) {
    return $search_overd;
  }
  else {
    return $search_overd . '<div id="ebooks-loading-panel" class="loading-overdrive" style="display: none; ">' . t('Searching eBooks') . ' <img src="/' . drupal_get_path('module', 'ebooks') . '/loading.gif" /></div>';
  }
}
