<?php
/**
 * @file Render content fieldgroups through a component.
 */

use Componentize\ComponentFactory;


/**
 * Implements hook_ctools_plugin_api().
 */
function componentize_fieldgroup_ctools_plugin_api($module, $api) {
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}


/**
 * Implements hook_field_group_formatter_info().
 *
 * @todo Avoid showing up in form admin.
 */
function componentize_fieldgroup_field_group_formatter_info() {
  return array(
    'display' => array(
      'component_fieldgroup' => array(
        'label' => t('Component'),
        'descripton' => t("This fieldgroup renders the inner content using the selected Component's structure"),
        'instance_settings' => array(
          'component' => '',
          'modifiers' => '',
        ),
      ),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function componentize_fieldgroup_theme() {
  return array(
    'component_fieldgroup' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * @todo Add fieldgroup mapping back.
 *
 * Display field mapping settings to admins.
 */
// function componentize_fieldgroup_field_formatter_settings_summary_alter(&$summary, $context) {
//   // Get the settings for this field's parent group.
//   $group_settings = _componentize_fieldgroup_check_group_settings($context);

//   // This has a component set.
//   if ($group_settings && isset($group_settings['component']) && !empty($group_settings['component'])) {
//     $field_display_mode = $context['instance']['display'][$context['view_mode']];
//     _componentize_entity_generate_summary($summary, $field_display_mode['settings']);
//   }
// }


/**
 * Implements hook_field_formatter_settings_form_alter().
 *
 * @param array $settings_form
 * @param array $context
 */
function componentize_fieldgroup_field_formatter_settings_form_alter(&$settings_form, $context) {
  // Obtain group settings from field via form data.
  if (isset($context['form_state'])) {
    // @todo More carefully confirm there is a fieldgroup set.
    //$parent_group = $context['form_state']['input']['fields'][$field_name]['parent'];
    //$group_settings = $context['form_state']['field_group'][$parent_group]->format_settings['instance_settings'];
    $group_settings = _componentize_fieldgroup_check_group_settings($context);

    // Use configured compontent.
    if (isset($group_settings['component'])) {
      $component = ComponentFactory::create($group_settings['component']);
      // Choose variables.
      _componentize_entity_generate_variable_form(
        $settings_form, $component, $field_display_mode['settings']
      );
    }
  }
}


/**
 * Find the group for this field.
 *
 * @param array $context
 *
 * @return array
 */
function _componentize_fieldgroup_check_group_settings($context) {
  $field_display_mode = $context['instance']['display'][$context['view_mode']];
  $hidden = ($field_display_mode['type'] === 'hidden');
  $field = $context['field'];

  // We know about this type of field.
  if (!$hidden && in_array($field['type'], array_keys(componentize_entity_field_types()))) {
    // Check relevant groups.
    $groups = field_group_info_groups(
      $context['instance']['entity_type'], $context['instance']['bundle'], $context['view_mode']
    );
    foreach ($groups as $group) {
      // Field exists within group, and presence of settings.
      if (in_array($field['field_name'], $group->children) && isset($group->format_settings['instance_settings'])) {
        return $group->format_settings['instance_settings'];
      }
    }
  }

  return FALSE;
}


/**
 * Get relevant field data in display mode for rendering component.
 *
 * @param array $element
 * @return array
 */
function _componentize_fieldgroup_get_fields($element, $group) {
  $entity = FALSE;
  $vars = array();

  foreach ($group->children as $name) {
    // Only present on array if a value exists.
    if (isset($element[$name])) {
      $field_info = field_info_instance($group->entity_type, $name, $group->bundle);
      $settings = _componentize_entity_get_field_settings($field_info, $group->mode);

      // Only include componentized fields.
      if ($settings) {
        // Prepare data for rendering.
        $entity = $entity ?: $element[$name]['#object'];
        $items = field_get_items($group->entity_type, $entity, $name);

        // Prepare field for template.
        $template_var = $settings['componentize_entity_variable_name'];
        $vars[$template_var . '_label'] = $element[$name]['#title'];
        $vars[$template_var] = componentize_entity_render_field(
          $name, $group->entity_type, $entity, $element[$name]['#items'], $settings
        );
      }
    }
  }

  return $vars;
}


/**
 * Reduce modifier choice to single string from multiple select lists.
 *
 * NOTE: Validate fires, and form_state=submitted is always TRUE for AJAX revealed forms.
 */
function componentize_fieldgroup_single_modifier_validate($element, &$form_state, $form) {
  // Reduce modifier array value to string (multiple inputs) for chosen component.
  foreach ($form_state['field_group'] as $group_name => $group) {
    $settings = $group->format_settings['instance_settings'];
    if (gettype($settings['component_modifier']) === 'array') {
      // Update the raw input.
      $form_state['values']['fields'][$group_name]['format_settings']['settings']['instance_settings']['component_modifier'] =
        $settings['component_modifier'][$settings['component']];
    }
  }
}


/**
 * Implements field_group_pre_render_<format-type>.
 * Format: component_fieldgroup
 *
 * @param array &$element
 * @param array $group
 * @param array &$form
 */
function field_group_pre_render_component_fieldgroup(&$element, $group, &$form) {
  // @todo May want to access the label position within the template.
  // $element['#label_display']

  // Add necessary items to variables within theme function.
  $element += array(
    '#type' => 'component_fieldgroup',
    '#theme' => 'component_fieldgroup',
    '#title' => t($group->label),
    '#description' => $group->description,
    '#parents' => array($group->parent_name),
    '#componentize_entity' => _componentize_fieldgroup_get_fields($element, $group),
    '#componentize_settings' => $group->format_settings['instance_settings'],
    '#view_mode' => $group->mode,
  );
}


/**
 * Returns HTML for a component fieldgroups.
 *
 * @param array $variables
 *
 * @return string
 */
function theme_component_fieldgroup($variables) {
  $element = $variables['element'];
  // @todo Deal with multiple forms on page issue with modifier saving.
  $modifier = isset($element['#componentize_settings']['modifier']) ?
      $element['#componentize_settings']['modifier'] : FALSE;

  // Pass data through template.
  $component = ComponentFactory::create($element['#componentize_settings']['component']);

  // Make modifier available in the template.
  if ($modifier) {
    $component->setModifier($modifier);
  }

  return $component->render($element['#componentize_entity']);
}
