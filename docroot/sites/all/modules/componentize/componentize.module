<?php
/**
 * @file Style-guide component integration.
 */

use Componentize\ComponentFactory;
use Componentize\ParserKSSnode;

define('COMPONENTIZE_DIRECTORY', 'sites/all/components');
define('COMPONENTIZE_PARTIALS', 'sites/all/components/_partials');
define('COMPONENTIZE_COMPILED_ASSETS', 'sites/all/components/dist');
define('COMPONENTIZE_COMPILED_TEMPLATES', 'sites/default/files/components');
define('COMPONENTIZE_COMPILED_CSS', 'style.css');
define('COMPONENTIZE_COMPILED_JS', 'script.js');

/**
 * Implements hook_menu().
 */
function componentize_menu() {
  $path = 'admin/structure/componentize';
  $items[$path] = array(
    'title' => 'Components',
    'description' => 'Browse available component structure.',
    'access arguments' => array('access components library'),
    'page callback' => 'componentize_library_output',
    'file' => 'componentize.library.inc'
  );
  $items[$path . '/library'] = array(
    'title' => 'Library',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items[$path . '/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure component structure.',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('componentize_settings'),
    'file' => 'componentize.admin.inc'
  );

  return $items;
}


/**
 * Implements hook_perm().
 */
function componentize_permission() {
  return array(
    'access components library' => array(
      'title' => t('Visit Components Library'),
      'description' => t('Browse available component structure.')
    ),
  );
}


/**
 * Implments hook_preprocess_page().
 */
function componentize_preprocess_page(&$variables) {
  // Compiled style sheet inclusion.
  $css = variable_get('componentize_css', COMPONENTIZE_COMPILED_ASSETS . '/' . COMPONENTIZE_COMPILED_CSS);
  if (file_exists($css)) {
    drupal_add_css($css);
  }
  else {
    drupal_set_message(t('Unable to find and include compiled Components javascript.'), 'warning');
  }

  // Compiled javascript inclusion.
  $js = variable_get('componentize_js', COMPONENTIZE_COMPILED_ASSETS . '/' . COMPONENTIZE_COMPILED_JS);
  if (file_exists($js)) {
    drupal_add_js($js);
  }
  else {
    drupal_set_message(t('Unable to find and include compiled Components styles.'), 'warning');
  }
}


/**
 * Provide list of components, via parsing directory or stashed variable.
 *
 * @todo Nested components (accordian + accordian item).
 *
 * @param boolean $shallow
 *   Just return a list without full objects (optional).
 *
 * @return array
 */
function componentize_list($shallow = FALSE, $reset = FALSE) {
  $list = &drupal_static(__FUNCTION__ . (($shallow) ? 'SHALLOW' : 'FULL'), array());
  $styleguide = &drupal_static(__FUNCTION__);
  $dir = variable_get('componentize_directory', COMPONENTIZE_DIRECTORY);

  // Use the static value.
  if (!empty($list) && !$reset) {
    return $list;
  }

  // Get the list, honor storage choice.
  switch (variable_get('componentize_storage', 'none')) {
    case 'variable':
      $list = variable_get('componentize_list', array());
      break;

    case 'cache':
      $list = cache_get('componentize_list', array());
      break;
  }

  // Generate the list if needed or desired.
  if (empty($list) || $reset) {
    // Parse all styles.
    $styleguide = new ParserKSSnode($dir);
    $components = $styleguide->getSections();
    // $components = $styleguide->getSectionChildren($section->getReference());
    $list = array_merge($list, array_keys($components));

    // Store results or complain.
    if (!empty($list)) {
      variable_set('componentize_list', $list);
    }
    else {
      drupal_set_message('No web components found.', 'warning');
    }
  }

  // Keep simple when possible.
  if (!$shallow) {
    // Build component objects.
    $list_full = array();
    foreach ($list as $key => $component) {
      $list_full[$component] = ComponentFactory::create($component, array(), TRUE);
      // Clear storage and compiled templates.
      if ($reset) {
        $list_full[$component]->remove();
      }
    }
    // Allows static.
    $list = $list_full;
  }

  // Allow adding custom components.
  drupal_alter('componentize_list', $list, $shallow);

  return $list;
}


/**
 * Shared function to build modifier form element (includes all components).
 *
 * @todo Multiple forms on the same page with states.
 *
 * @param array $form
 * @param string $default_value
 */
function _componentize_build_modifier_list_form(&$form, $parents, $default_component, $default_modifier) {
  $form_number = &drupal_static(__FUNCTION__, 0);

  // Main component choice.
  $component_parents = array_merge($parents, array('component'));
  drupal_array_set_nested_value($form, $component_parents, array(
    '#title' => t('Component'),
    '#type' => 'select',
    '#options' => array_merge(
      array('' => t('- None -')),
      drupal_map_assoc(componentize_list(TRUE))
    ),
    '#default_value' => $default_component,
    '#attributes' => array('class' => array('form-num-' . $form_number)),
    '#weight' => 1,
  ));

  // Modifiers.
  array_push($parents, 'component_modifier');
  drupal_array_set_nested_value($form, $parents, array(
    '#title' => t('Modifier'),
    '#description' => t('Modifier class to add for this entity view mode.'),
    '#type' => 'fieldset',
    '#element_validate' => array('componentize_single_modifier_validate'),
    '#weight' => 2,
  ));
  // Add select list for each components' modifiers.
  foreach (componentize_list() as $component) {
    $location = $parents;
    array_push($location, $component->getName());

    // Example: $form['additional_settings']['componentize']['component_modifier']['quote'].
    drupal_array_set_nested_value($form, $location, array(
      '#type' => 'select',
      '#options' => array_merge(
        array('' => t('- None -')),
        drupal_map_assoc($component->getModifiers())
      ),
      '#states' => array(
        'visible' => array(
          'select[name="component"].form-num-' . $form_number .
          ',select[name$="[component]"].form-num-' . $form_number => array(
            'value' => $component->getName(),
          ),
        ),
      ),
      '#default_value' => $default_modifier ?: '',
    ));
  }

  $form_number++;
}


/**
 * Reduce modifier choice to single string from multiple select lists.
 *
 * NOTE: Validate fires, and form_state=submitted is always TRUE for AJAX revealed forms.
 */
function componentize_single_modifier_validate($element, &$form_state, $form) {
  $vals = $form_state['values'];

  // Reduce modifier array value to string (multiple inputs) for chosen component.
  if (isset($vals['additional_settings']) && gettype($vals['additional_settings']['component_modifier']) === 'array' &&
      !empty($vals['additional_settings']['component'])) {
    $settings = $vals['additional_settings'];

    $form_state['values']['additional_settings']['component_modifier'] = $settings['component_modifier'][$settings['component']];
  }
  else {
    $form_state['values']['additional_settings']['component_modifier'] = '';
  }
}
