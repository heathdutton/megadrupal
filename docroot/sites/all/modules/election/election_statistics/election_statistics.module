<?php
/**
 * @file
 * Election Statistics primary module file.
 */

/**
 * Implements hook_menu().
 */
function election_statistics_menu() {
  $items = array();

  $items['election/%election/statistics'] = array(
    'title' => 'Statistics',
    'page callback' => 'election_statistics_page',
    'page arguments' => array(1),
    'access callback' => 'election_statistics_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function election_statistics_permission() {
  $permissions = array(
    'view election statistics' => array(
      'title' => t('View all election statistics'),
      'description' => t('This allows the user to view election statistics (if they already have permission to view the election).'),
    ),
    'view election statistics block' => array(
      'title' => t('View election statistics summary block'),
      'description' => t('This allows the user to view a block containing limited election statistics (if they already have permission to view the election).'),
    ),
  );
  return $permissions;
}

/**
 * Access callback for viewing an election's statistics.
 *
 * @param string $op
 *   Only the operations 'view' and 'view block' are supported.
 * @param object $election
 *   The election entity.
 * @param object $account
 *   The user account to check access for.
 *
 * @return bool
 *   TRUE if the user may view this election, and has permission to view
 *   election statistics. FALSE otherwise.
 */
function election_statistics_access($op, stdClass $election, $account = NULL) {
  if (!election_access('view', $election, $account)) {
    return FALSE;
  }
  switch ($op) {
    case 'view':
      if (user_access('view election statistics', $account)) {
        return TRUE;
      }
      break;

    case 'view block':
      if (user_access('view election statistics block', $account)) {
        return TRUE;
      }
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function election_statistics_theme() {
  return array(
    'election_statistics' => array(
      'variables' => array(
        'election' => NULL,
      ),
      'file' => 'election_statistics.theme.inc',
    ),
    'election_statistics_block' => array(
      'variables' => array(
        'election' => NULL,
        'totals' => array(),
      ),
      'file' => 'election_statistics.theme.inc',
    ),
  );
}

/**
 * Page callback for election/%election/statistics.
 */
function election_statistics_page(stdClass $election) {
  drupal_set_title(t('Statistics: %election', array('%election' => $election->title)), PASS_THROUGH);
  election_set_breadcrumb($election);
  return theme('election_statistics', array('election' => $election));
}

/**
 * Implements hook_block_info().
 */
function election_statistics_block_info() {
  // Provide a statistics block.
  return array(
    'election_statistics' => array(
      'info' => t('Election statistics'),
      'status' => 0,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function election_statistics_block_view($delta = '') {
  // Provide content to the statistics block.
  if ($delta == 'election_statistics' && arg(0) == 'election') {
    $election = menu_get_object('election');
    // Check access to view the block.
    if (!$election || !election_statistics_access('view block', $election)) {
      return;
    }
    $totals = election_statistics_get_totals($election);
    // Only display the statistics block if there have been any ballots.
    if (!$totals['ballots']) {
      return;
    }
    $block = array();
    $block['subject'] = t('Voting statistics');
    $block['content'] = theme('election_statistics_block', array(
      'election' => $election,
      'totals' => $totals,
    ));
    return $block;
  }
}

/**
 * Get the total numbers of ballots & votes for an election.
 *
 * @param object $election
 *   The election entity.
 * @param bool $reset
 *   Whether to bypass the cache for this request. Defaults to FALSE.
 *
 * @return array
 *   An associative array containing:
 *     'voters' (integer),
 *     'ballots' (integer),
 *     'votes' (integer),
 *     'abstentions' (integer).
 */
function election_statistics_get_totals(stdClass $election, $reset = FALSE) {
  $cache_key = 'election_statistics:' . $election->election_id;
  $ttl = variable_get('election_statistics_ttl', 300);
  // Return cached data if it already exists.
  if (!$reset && $ttl && ($cache = cache_get($cache_key)) && $cache->expire > REQUEST_TIME) {
    return $cache->data;
  }
  $query = _election_statistics_totals_query($election);
  $result = $query->execute()->fetchAssoc();
  // Cache the result (for 5 minutes by default).
  if ($ttl) {
    cache_set($cache_key, $result, 'cache', REQUEST_TIME + $ttl);
  }
  return $result;
}

/**
 * Get the total numbers of ballots & votes for election posts.
 *
 * @see election_statistics_get_totals()
 *
 * @param object $election
 *   The election entity.
 * @param bool $reset
 *   Whether to bypass the cache for this request. Defaults to FALSE.
 *
 * @return array
 *   An associative array of post statistics, keyed by post ID, containing the
 *   properties listed in election_statistics_get_totals().
 */
function election_statistics_get_post_totals(stdClass $election, $reset = FALSE) {
  $cache_key = 'election_statistics:' . $election->election_id . ':posts';
  $ttl = variable_get('election_statistics_ttl', 300);
  // Return cached data if it already exists.
  if (!$reset && $ttl && ($cache = cache_get($cache_key)) && $cache->expire > REQUEST_TIME) {
    return $cache->data;
  }
  $query = _election_statistics_totals_query($election);
  // Group results by post.
  $query->fields('eb', array('post_id'));
  $query->groupBy('eb.post_id');
  $result = $query->execute()->fetchAllAssoc('post_id', PDO::FETCH_ASSOC);
  // Cache the result (for 5 minutes by default).
  if ($ttl) {
    cache_set($cache_key, $result, 'cache', REQUEST_TIME + $ttl);
  }
  return $result;
}

/**
 * Helper function to build a select query for getting election statistics.
 *
 * @param object $election
 *   The election object.
 *
 * @return SelectQuery
 *   A Drupal select query, as returned by db_select().
 */
function _election_statistics_totals_query(stdClass $election) {
  $query = db_select('election_ballot', 'eb')
    ->condition('eb.election_id', $election->election_id);
  $query->condition('eb.value', 0, '>');
  // Get the total number of ballots, votes, and abstentions.
  $query->addExpression('COUNT(DISTINCT eb.ballot_id)', 'ballots');
  $query->addExpression('SUM(IF(eb.abstain=0, eb.value, NULL))', 'votes');
  $query->addExpression('SUM(IF(eb.abstain=1, eb.value, NULL))', 'abstentions');
  $query->addExpression('COUNT(DISTINCT IF(eb.uid = 0, eb.sid_hash, eb.uid))', 'voters');
  $query->addTag('election_statistics_totals');
  return $query;
}

/**
 * Get a list of the most popular attribute values for voters in this election.
 *
 * @param object $election
 *   The election entity.
 * @param string $group_by
 *   The {election_ballot} table column to group results by.
 * @param int $limit
 *   The maximum number of items to select.
 *
 * @return array
 *   An array whose elements are associative arrays containing a string 'agent'
 *   and an integer 'voters'.
 */
function election_statistics_get_top_count(stdClass $election, $group_by, $limit = 10) {
  $query = db_select('election_ballot', 'eb')
    ->condition('election_id', $election->election_id)
    ->condition('value', 0, '>')
    ->fields('eb', array($group_by));
  $query->addExpression('COUNT(DISTINCT IF(uid = 0, sid_hash, uid))', 'voters');
  $query->orderBy('COUNT(DISTINCT IF(uid = 0, sid_hash, uid))', 'DESC');
  $query->groupBy($group_by);
  $query->range(0, $limit);
  return $query->execute()->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * Internal function to get a list of election posts ordered by title.
 */
function _election_statistics_get_posts($election) {
  $post_ids = db_select('election_post', 'ep')
      ->fields('ep', array('post_id'))
      ->condition('election_id', $election->election_id)
      ->orderBy('title')
      ->execute()
      ->fetchCol();
  $posts = election_post_load_multiple($post_ids);
  return $posts;
}
