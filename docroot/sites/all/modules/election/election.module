<?php
/**
 * @file
 * Election primary module file.
 */

// Required files.
require_once 'includes/election.constants.inc';

/**
 * Implements hook_entity_info().
 */
function election_entity_info() {

  $entities = array();

  $entities['election'] = array(
    'label' => t('Election'),
    'access callback' => 'election_access',
    'uri callback' => 'election_uri',
    'controller class' => 'ElectionController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'election',
    'entity keys' => array(
      'id' => 'election_id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
      ),
      'teaser' => array(
        'label' => t('Teaser'),
      ),
    ),
    'view callback' => 'entity_metadata_view_single',
    // Enable the Meta Tags module to integrate with elections.
    'metatags' => TRUE,
  );

  foreach (election_types() as $type_machine_name => $type) {
    $entities['election']['bundles'][$type_machine_name] = array(
      'label' => drupal_ucfirst($type['name']),
      'admin' => array(
        'path' => 'admin/config/election/' . $type_machine_name,
        'real path' => 'admin/config/election/' . $type_machine_name,
        'bundle argument' => 3,
        'access arguments' => array('administer elections'),
      ),
    );
  }

  return $entities;

}

/**
 * Get information about election types.
 *
 * This uses hook_election_type_info() to allow other modules to define types.
 *
 * @return array
 *   An array of election types, keyed by the type's machine name. Each element
 *   is also a structured array, defining at least 'name'.
 */
function election_types() {
  $types = &drupal_static(__FUNCTION__);
  if (!is_array($types)) {
    $types = array();
    $types += module_invoke_all('election_type_info');
    foreach ($types as $type_machine_name => &$type) {
      if (!isset($type['post machine name'])) {
        $type['post machine name'] = $type_machine_name . '_post';
      }
    }
  }
  return $types;
}

/**
 * Implements hook_hook_info().
 */
function election_hook_info() {
  return array(
    'election_type_info' => array(
      'group' => 'election',
    ),
  );
}

/**
 * Implements hook_modules_enabled().
 */
function election_modules_enabled($modules) {
  _election_modules_changed($modules);
}

/**
 * Implements hook_modules_disabled().
 */
function election_modules_disabled($modules) {
  _election_modules_changed($modules);
}

/**
 * Act on enabling or disabling modules.
 */
function _election_modules_changed($modules) {
  // If any of the enabled modules contains an implementation of
  // hook_election_type_info(), clear the static cache of election types.
  $implements = module_implements('election_type_info');
  if (count(array_intersect($implements, $modules))) {
    // @todo check which of these is needed, if either.
    drupal_static_reset('election_types');
    menu_rebuild();
  }
}

/**
 * Implements entity_uri(). URI callback for a single election.
 */
function election_uri($election) {
  $path = 'election/' . $election->election_id;
  return array(
    'path' => $path,
    'options' => array(),
  );
}

/**
 * Get the URI to an election as a string.
 *
 * The implementation of this function throughout the module is debatable, see:
 * http://drupal.org/node/823428.
 *
 * @see election_uri()
 *
 * @return string
 *   The 'path' part of the election URI array.
 */
function election_uri_path($election) {
  $uri = election_uri($election);
  return $uri['path'];
}

/**
 * Load an individual election.
 *
 * @param int $election_id
 *   A single election ID.
 * @param bool $reset
 *   Whether to reset the internal cache for election entities.
 *
 * @return object
 *   A stdClass election object.
 */
function election_load($election_id, $reset = FALSE) {
  $result = election_load_multiple((array) $election_id, $reset);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Load multiple elections.
 *
 * @param array $election_ids
 *   An array of election IDs.
 * @param bool $reset
 *   Whether to reset the internal cache for election entities.
 *
 * @return array
 *   An array of election objects keyed by election ID.
 */
function election_load_multiple(array $election_ids = array(), $reset = FALSE) {
  // The $conditions parameter is not used as this is deprecated for D8.
  return entity_load('election', $election_ids, array(), $reset);
}

/**
 * Implements hook_entity_load().
 */
function election_entity_load($entities, $type) {
  // Add type information (in 'type_info' property) to each election.
  if ($type == 'election') {
    foreach ($entities as $election) {
      if (!isset($election->type_info)) {
        $election->type_info = _election_type_get_info($election->type);
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function election_permission() {
  $permissions = array(
    'administer elections' => array(
      'title' => t('Administer elections'),
      'description' => t('Alter the fields and display settings for election types.'),
    ),
    'delete any election' => array(
      'title' => t('Delete any election'),
      'description' => t('This permission is dangerous: deleting an election automatically deletes ALL associated data, for example votes.'),
      'restrict access' => TRUE,
    ),
    'bypass running election lock' => array(
      'title' => t('Bypass running election lock'),
      'description' => t('This permission allows the user to delete elections, or edit posts, or view results, even while voting is open (if they have the other relevant permissions).'),
    ),
    'edit any election' => array(
      'title' => t('Edit any election'),
      'description' => t('This allows the user not only to edit all elections, but also to administer the posts and candidates for those elections.'),
    ),
    'create elections' => array(
      'title' => t('Create elections'),
    ),
    'delete own elections' => array(
      'title' => t('Delete own elections'),
      'description' => t('This permission is dangerous: deleting an election automatically deletes ALL associated data, for example votes.'),
      'restrict access' => TRUE,
    ),
    'edit own elections' => array(
      'title' => t('Edit own elections'),
      'description' => t('This allows the user not only to edit their own elections, but also to administer the posts and candidates for those elections.'),
    ),
    'view published elections' => array(
      'title' => t('View published elections'),
      'description' => t("This permission allows the user to view published elections, including those elections' posts and any published candidates."),
    ),
  );
  return $permissions;
}

/**
 * Determines whether the given user has access to an election.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'create', 'update', or
 *   'delete'.
 * @param object $election
 *   Optionally an election or an election type to check access for. By default,
 *   access for all elections is determined.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function election_access($op, $election = NULL, $account = NULL) {
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  // If checking a specific election, find out whether it belongs to $account.
  $election_belongs_to_account = ($election && $election->uid == $account->uid);
  switch ($op) {
    case 'view':
      if ($election_belongs_to_account) {
        // If it's the $account's own election, always permit viewing.
        return TRUE;
      }
      elseif (empty($election) || empty($election->published)) {
        // If the election is unpublished, limit viewing to editors.
        return election_access('update', $election, $account);
      }
      elseif (user_access('view published elections', $account)) {
        // Otherwise, allow viewing to those who can 'view published elections'.
        return TRUE;
      }
      break;

    case 'create':
      return user_access('create elections', $account);

    case 'update':
      if ($election_belongs_to_account && user_access('edit own elections', $account)) {
        return TRUE;
      }
      else {
        return user_access('edit any election', $account);
      }
      break;

    case 'delete':
      if ($election && isset($election->vstatus) && _election_is_open($election->vstatus, $election->vopen_time, $election->vclose_time) && !user_access('bypass running election lock', $account)) {
        // Deny deleting running elections.
        // Use the permission 'bypass running election lock' to bypass this.
        return FALSE;
      }
      elseif ($election_belongs_to_account && user_access('delete own elections', $account)) {
        return TRUE;
      }
      else {
        return user_access('delete any election', $account);
      }
      break;

  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function election_menu() {

  $items = array();

  $items['elections'] = array(
    'title' => 'Elections',
    'page callback' => 'election_page_list',
    'file' => 'election.pages.inc',
    'access arguments' => array('view published elections'),
  );

  $items['admin/config/election'] = array(
    'title' => 'Elections',
    'description' => 'Administer elections.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer elections'),
    'weight' => 1,
  );

  foreach (election_types() as $type_machine_name => $type) {
    $items['elections/add/' . $type_machine_name] = array(
      'title' => 'Add new @type',
      'title arguments' => array('@type' => $type['name']),
      'page callback' => 'election_page_add',
      'page arguments' => array(2),
      'access arguments' => array('create elections'),
      'file' => 'election.admin.inc',
      'description' => empty($type['description']) ? '' : $type['description'],
      'type' => MENU_LOCAL_ACTION,
      'weight' => isset($type['weight']) ? $type['weight'] : 0,
    );
    $items['admin/config/election/' . $type_machine_name] = array(
      'title' => '@type settings',
      'title arguments' => array('@type' => drupal_ucfirst($type['name'])),
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer elections'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'description' => empty($type['description']) ? '' : $type['description'],
      'weight' => isset($type['weight']) ? $type['weight'] : 0,
    );
  }

  $items['election/%election'] = array(
    'title callback' => 'election_page_title',
    'title arguments' => array(1),
    'page callback' => 'election_page_view',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('view', 1),
  );

  $items['election/%election/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election/%election/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_page_edit',
    'file' => 'election.admin.inc',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('update', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['election/%election/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_form_delete_confirm', 1),
    'access callback' => 'election_access',
    'access arguments' => array('delete', 1),
    'file' => 'election.forms.inc',
  );

  return $items;

}

/**
 * Implements hook_menu_alter().
 */
function election_menu_alter(&$items) {
  // Change the types of automatic Field UI menu items for a clearer admin UI.
  foreach (election_types() as $type_machine_name => $type) {
    $path = 'admin/config/election/' . $type_machine_name;
    unset($items[$path . '/settings']);
    $items[$path . '/fields']['weight'] = -2;
    $items[$path . '/fields']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/fields']['description'] = t(
      'Manage fields for the election type %type.',
      array('%type' => $type['name'])
    );
    $items[$path . '/display']['weight'] = -1;
    $items[$path . '/display']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/display/full']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/display/teaser']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/display']['description'] = t(
      'Manage display for the election type %type.',
      array('%type' => $type['name'])
    );
  }
}

/**
 * Return election types as an array of options suitable for entity metadata.
 */
function _election_get_type_options() {
  $options = array();
  foreach (election_types() as $machine_name => $type) {
    $options[$machine_name] = drupal_ucfirst($type['name']);
  }
  return $options;
}

/**
 * Get an array of options for the 'published' property.
 */
function _election_get_published_options() {
  return array(
    1 => t('Published'),
    0 => t('Not published'),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function election_field_extra_fields() {
  $extra = array();
  foreach (election_types() as $bundle_name => $type) {
    $extra['election'][$bundle_name]['form'] = array(
      'title' => array(
        'label' => t('Title'),
        'weight' => 0,
      ),
      'voting' => array(
        'label' => t('Voting configuration'),
        'weight' => 2,
      ),
      'presentation' => array(
        'label' => t('Presentation'),
        'weight' => 10,
      ),
    );
    $extra['election'][$bundle_name]['display'] = array(
      'vstatus' => array(
        'label' => t('Voting status'),
        'weight' => -1,
      ),
    );
  }
  return $extra;
}


/**
 * Wrapper function to allow deleting multiple elections.
 *
 * @param array $election_ids
 *   Array of election IDs.
 */
function election_delete_multiple(array $election_ids) {
  return entity_get_controller('election')->delete($election_ids);
}

/**
 * Wrapper function to allow deleting an individual election.
 *
 * @see election_delete_multiple()
 *
 * @param mixed $election_id
 *   Single election ID.
 */
function election_delete($election_id) {
  return election_delete_multiple(array($election_id));
}

/**
 * Wrapper function to allow saving an election.
 *
 * @param object $election
 *   Election object.
 */
function election_save($election) {
  return entity_get_controller('election')->save($election);
}

/**
 * Implements hook_entity_update().
 */
function election_entity_update($entity, $type) {
  switch ($type) {
    case 'election':
      if (module_exists('pathauto')) {
        _election_pathauto_update_alias($entity, 'update');
      }
      break;

  }
}

/**
 * Implements hook_entity_delete().
 */
function election_entity_delete($entity, $type) {
  switch ($type) {
    case 'election':
      // Delete Pathauto path aliases when an election is deleted.
      if (function_exists('pathauto_entity_path_delete_all')) {
        pathauto_entity_path_delete_all('election', $entity);
      }
      break;

  }
}

/**
 * Implements hook_entity_insert().
 */
function election_entity_insert($entity, $type) {
  if ($type == 'election') {
    if (module_exists('pathauto')) {
      _election_pathauto_update_alias($entity, 'insert');
    }
  }
}

/**
 * Title callback for election/%election/view.
 */
function election_page_title(stdClass $election) {
  // Output should not be escaped here: it will be escaped in the menu system.
  return $election->title;
}

/**
 * Implements hook_theme().
 */
function election_theme() {
  return array(
    'election' => array(
      'render element' => 'elements',
      'template' => 'election',
      'file' => 'election.theme.inc',
    ),
    'election_status' => array(
      'variables' => array(
        'election' => NULL,
        'status_prefix' => 'v',
        'short' => FALSE,
      ),
      'file' => 'election.theme.inc',
    ),
    'election_info_item' => array(
      'variables' => array(
        'label' => NULL,
        'value' => NULL,
        'classes' => array(),
        'html' => FALSE,
        'children' => array(),
      ),
      'file' => 'election.theme.inc',
    ),
  );
}

/**
 * Page callback for viewing an election.
 */
function election_page_view(stdClass $election) {
  drupal_set_title($election->title);
  election_set_breadcrumb();
  return election_view($election, 'full');
}

/**
 * Generate an array for rendering the given election.
 */
function election_view(stdClass $election, $view_mode = 'full') {

  // Remove previously built content, if it exists.
  $election->content = array();

  // Display the voting status.
  $election->content['vstatus'] = array(
    '#theme' => 'election_info_item',
    '#label' => t('Voting'),
    '#children' => array(
      array(
        '#theme' => 'election_status',
        '#election' => $election,
      ),
    ),
  );

  // Display the nominations status.
  if (!empty($election->type_info['has candidates'])) {
    $election->content['nstatus'] = array(
      '#theme' => 'election_info_item',
      '#label' => t('Nominations'),
      '#children' => array(
        array(
          '#theme' => 'election_status',
          '#election' => $election,
          '#status_prefix' => 'n',
        ),
      ),
    );
  }

  field_attach_prepare_view('election', array($election->election_id => $election), $view_mode);
  entity_prepare_view('election', array($election->election_id => $election));
  $election->content += field_attach_view('election', $election, $view_mode);

  $build = $election->content;

  // We don't need duplicate rendering info in election->content.
  unset($election->content);

  $build += array(
    '#theme' => 'election',
    '#election' => $election,
    '#view_mode' => $view_mode,
  );

  // Add contextual links for this election, except when the election is already
  // being displayed on its own page. Modules may alter this behavior (for
  // example, to restrict contextual links to certain view modes) by
  // implementing hook_election_view_alter().
  if (!empty($election->election_id) && $view_mode != 'full') {
    $build['#contextual_links']['election'] = array('election', array($election->election_id));
  }

  // Invoke hook_entity_view().
  global $language;
  $langcode = $language->language;
  module_invoke_all('entity_view', $election, 'election', $view_mode, $langcode);

  // Invoke hook_ENTITY_view_alter() and hook_entity_view_alter().
  $type = 'election';
  drupal_alter(array('election_view', 'entity_view'), $build, $type);

  return $build;

}

/**
 * Get the human-readable post name (e.g. 'position') for an election type.
 *
 * See the README.txt, which explains what a 'post' is.
 *
 * @param string $type_machine_name
 *   The machine name of the election type.
 * @param bool $plural
 *   Whether to return a plural name (e.g. 'questions' or 'positions').
 */
function election_get_post_name($type_machine_name, $plural = FALSE) {
  $name = $plural ? 'posts' : 'post';
  if ($type = _election_type_get_info($type_machine_name)) {
    if (!empty($type['post name'])) {
      $name = $type['post name'];
      if ($plural) {
        $name = !empty($type['post name plural']) ? $type['post name plural'] : $name . 's';
      }
    }
  }
  return $name;
}

/**
 * Determine whether voting or nominating in an election is 'open'.
 *
 * @param int $status
 *   The vstatus/nstatus of the election (see election.install).
 * @param int $open_time
 *   The UNIX timestamp for the election's voting opening time.
 * @param int $close_time
 *   The UNIX timestamp for the election's voting closing time.
 */
function _election_is_open($status, $open_time, $close_time) {
  if ($status == ELECTION_STATUS_OPEN) {
    return TRUE;
  }
  if ($status == ELECTION_STATUS_CLOSED) {
    return FALSE;
  }
  return (
    $open_time && REQUEST_TIME >= $open_time
    && (!$close_time || REQUEST_TIME < $close_time)
  );
}

/**
 * Set the breadcrumb for an election, format: Home > Elections [ > Election].
 *
 * @param object $election
 *   An election object (optional).
 */
function election_set_breadcrumb(stdClass $election = NULL) {
  $links = array();
  $links[] = l(t('Home'), '<front>');
  $links[] = l(t('Elections'), 'elections');
  if ($election) {
    $links[] = l($election->title, election_uri_path($election));
  }
  drupal_set_breadcrumb($links);
}

/**
 * Internal function: load election type information by its machine name.
 *
 * @param string $type_machine_name
 *   The machine name of the type.
 *
 * @return mixed
 *   A stdClass election type object, or FALSE on failure.
 */
function _election_type_get_info($type_machine_name) {
  $types = election_types();
  if (!isset($types[$type_machine_name])) {
    drupal_set_message(
      t("The election type %machine_name could not be found.", array('%machine_name' => $type_machine_name)),
      'error',
      FALSE
    );
    return FALSE;
  }
  return $types[$type_machine_name];
}

/**
 * Implements hook_file_download_access().
 *
 * Allow private files to be downloaded when they are attached to an election
 * entity via a file field.
 */
function election_file_download_access($field, $entity_type, $entity) {
  if ($entity_type == 'election') {
    return election_access('view', $entity);
  }
}

/**
 * Implements hook_views_api().
 */
function election_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_default_views().
 */
function election_views_default_views() {
  $views_dir = drupal_get_path('module', 'election') . '/views';
  $views_files = scandir($views_dir);
  $views = array();
  foreach ($views_files as $filename) {
    if (substr($filename, -4) == '.inc') {
      include_once $views_dir . '/' . $filename;
    }
  }
  return $views;
}

/**
 * Implements hook_menu_position_rule_plugins().
 *
 * This is for integration with the Menu Position module.
 */
function election_menu_position_rule_plugins() {
  return array(
    'election' => array(
      'form_callback' => 'election_menu_position_rule_election_form',
      'condition_callback' => 'election_menu_position_condition_election',
      'file' => 'election.menu-position.inc',
    ),
  );
}

/**
 * Update the URL aliases for an individual election.
 *
 * This is for integration with the Pathauto module.
 *
 * @param object $election
 *   A election object.
 * @param string $op
 *   Operation being performed ('insert', 'update' or 'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 *
 * @see election.pathauto.inc
 */
function _election_pathauto_update_alias(stdClass $election, $op, array $options = array()) {
  // Skip processing if the election has no pattern.
  if (!pathauto_pattern_load_by_entity('election', $election->type)) {
    return;
  }
  module_load_include('inc', 'pathauto');
  pathauto_create_alias(
    'election',
    $op,
    election_uri_path($election),
    array('election' => $election),
    $election->type
  );
}

/**
 * Update the URL aliases for multiple elections.
 *
 * This is for integration with the Pathauto module.
 *
 * @param array $election_ids
 *   An array of election IDs.
 * @param string $op
 *   Operation being performed on the elections ('insert', 'update' or
 *   'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 *
 * @see election.pathauto.inc
 */
function _election_pathauto_update_alias_multiple(array $election_ids, $op, array $options = array()) {
  $options += array('message' => FALSE);
  $elections = election_load_multiple($election_ids);
  foreach ($elections as $election) {
    _election_pathauto_update_alias($election, $op, $options);
  }
  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($election_ids), 'Updated URL alias for 1 election.', 'Updated URL aliases for @count elections.'));
  }
}
