<?php
/**
 * @file
 * Election Condition: primary module file.
 */

/**
 * Get conditions.
 *
 * @see hook_election_condition_info()
 * @see hook_election_condition_info_alter()
 *
 * @return array
 *   Array of conditions keyed by machine name.
 */
function election_condition_get_conditions() {
  $conditions = &drupal_static(__FUNCTION__, NULL);
  if ($conditions === NULL) {
    $conditions = array();
    $conditions += module_invoke_all('election_condition_info');
    drupal_alter('election_condition_info', $conditions);
  }
  return $conditions;
}

/**
 * Implements hook_hook_info().
 */
function election_condition_hook_info() {
  return array(
    'election_condition_info' => array(
      'group' => 'election',
    ),
  );
}

/**
 * Implements hook_entity_load().
 */
function election_condition_entity_load($entities, $type) {
  // Add 'conditions' property to posts.
  if ($type == 'election_post') {
    $post_ids = array();
    foreach ($entities as $post) {
      if (!isset($post->conditions)) {
        $post_ids[] = $post->post_id;
        $post->conditions = array();
      }
    }
    $posts_conditions = db_select('election_post_condition', 'epc')
      ->fields('epc', array('post_id', 'condition_machine_name'))
      ->condition('post_id', $post_ids, 'IN')
      ->execute();
    $condition_info = election_condition_get_conditions();
    while ($record = $posts_conditions->fetch()) {
      $mn = $record->condition_machine_name;
      if (isset($condition_info[$mn])) {
        $condition = $condition_info[$mn];
      }
      else {
        $condition = array(
          'name' => $mn,
          'user explanation' => t('Unknown condition'),
        );
      }
      $condition['machine_name'] = $mn;
      $entities[$record->post_id]->conditions[$mn] = $condition;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function election_condition_form_election_post_form_alter(&$form, &$form_state) {

  $post = $form_state['post'];

  if (!isset($post->conditions)) {
    $post->conditions = array();
  }

  $form['conditions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Conditional voting'),
    '#description' => t('All conditions checked below must be satisfied before the user will be allowed to vote.'),
    '#collapsible' => TRUE,
    '#collapsed' => !count($post->conditions),
    '#weight' => 99,
  );
  $condition_headers = array(
    'name' => t('Name'),
    'description' => t('Description'),
  );

  // List all available conditions.
  $condition_options = array();
  foreach (election_condition_get_conditions() as $machine_name => $condition) {
    $condition_options[$machine_name] = array(
      'name' => $condition['name'],
      'description' => !empty($condition['description']) ? $condition['description'] : '',
    );
  }

  // Also list conditions that are assigned to the post but don't exist anymore
  // in code. Deliberately, these will prevent voting access until they are
  // unassigned.
  foreach ($post->conditions as $machine_name => $condition) {
    if (!isset($condition_options[$machine_name])) {
      $condition_options[$machine_name] = array(
        'name' => $machine_name,
        'description' => t('Unknown condition'),
      );
    }
  }

  $form['conditions']['conditions'] = array(
    '#type' => 'tableselect',
    '#attributes' => array('class' => array('select-conditions')),
    '#default_value' => array_fill_keys(array_keys($post->conditions), 1),
    '#header' => $condition_headers,
    '#options' => $condition_options,
    '#multiple' => TRUE,
    '#js_select' => FALSE,
    '#empty' => t('No conditions available.'),
  );

  $form['buttons']['submit']['#submit'][] = 'election_condition_election_post_form_submit';

}

/**
 * Additional callback for the Submit button on the form election_post_form.
 *
 * Save the conditions for the post.
 *
 * @see election_post_form()
 */
function election_condition_election_post_form_submit($form, &$form_state) {

  $post = $form_state['post'];

  $transaction = db_transaction();
  try {
    $conditions = array();
    foreach ($form_state['values']['conditions'] as $machine_name => $value) {
      if (!empty($value)) {
        $conditions[] = $machine_name;
      }
    }
    db_delete('election_post_condition')
      ->condition('post_id', $post->post_id)
      ->execute();
    if (count($conditions)) {
      $insert = db_insert('election_post_condition')->fields(array('post_id', 'condition_machine_name'));
      foreach ($conditions as $machine_name) {
        $insert->values(array($post->post_id, $machine_name));
      }
      $insert->execute();
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('election_condition', $e, NULL, WATCHDOG_ERROR);
  }

}

/**
 * Implements hook_entity_delete().
 */
function election_condition_entity_delete($entity, $type) {
  switch ($type) {
    // Delete associated election_post_condition entries when a post is deleted.
    case 'election_post':
      db_delete('election_post_condition')
        ->condition('post_id', $entity->post_id)
        ->execute();
      break;

  }
}

/**
 * Get the result of a condition.
 *
 * @param array $condition
 * @param object $post
 * @param object $account
 *
 * @return bool
 */
function election_condition_test($condition, $post, $account) {
  if (!empty($condition['file'])) {
    include_once $condition['file'];
  }
  $callback = isset($condition['callback']) ? $condition['callback'] : $condition['machine_name'];
  if (!is_callable($callback)) {
    return FALSE;
  }
  $data = isset($condition['data']) ? $condition['data'] : NULL;
  if (function_exists($callback)) {
    return $callback($post, $account, $data) === TRUE;
  }
  return call_user_func($callback, $post, $account, $data) === TRUE;
}
