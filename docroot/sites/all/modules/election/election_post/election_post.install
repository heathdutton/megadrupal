<?php
/**
 * @file
 * Install functions for the Election Post module.
 */

// Make sure Election constants are available (e.g. during uninstall).
require_once drupal_get_path('module', 'election') . '/includes/election.constants.inc';

/**
 * Implements hook_schema().
 */
function election_post_schema() {

  $schema = array();

  $schema['election_post'] = array(
    'description' => 'The posts table for the election module.',
    'fields' => array(
      'post_id' => array(
        'description' => 'Primary key: identifier for a post.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'election_id' => array(
        'description' => 'The {election}.election_id for this post.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'The type of the election post (machine name).',
        'type' => 'varchar',
        'length' => 100,
      ),
      'published' => array(
        'description' => 'Allows anyone who can view the election to view this post.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The title of the post.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'rids' => array(
        'description' => 'A serialized array of roles that may vote for this post.',
        'type' => 'blob',
        'size' => 'normal',
        'serialize' => TRUE,
        'not null' => FALSE,
      ),
      'allow_abstention' => array(
        'description' => 'Whether or not to allow voters to abstain.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'vstatus_inheritance' => array(
        'description' => sprintf(
          'The post\'s voting status: inherited (%d) or closed (%d).',
          ELECTION_POST_STATUS_INHERIT,
          ELECTION_POST_STATUS_CLOSED
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => ELECTION_POST_STATUS_INHERIT,
      ),
      // Nominations are relevant to elections with candidates.
      'nstatus_inheritance' => array(
        'description' => sprintf(
          'The post\'s nominations status: inherited (%d) or closed (%d).',
          ELECTION_POST_STATUS_INHERIT,
          ELECTION_POST_STATUS_CLOSED
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => ELECTION_POST_STATUS_INHERIT,
      ),
      // Vacancies (or 'seats') are relevant to elections with candidates.
      'vacancy_count' => array(
        'description' => 'The number of vacancies for this post.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp for when the post was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp for when the post was most recently changed.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'settings' => array(
        'description' => 'A serialized array of any further settings for this post.',
        'type' => 'blob',
        'size' => 'normal',
        'serialize' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('post_id'),
    'indexes' => array(
      'published' => array('published'),
      'created' => array('created'),
      'title' => array('title'),
      'vstatus_inheritance' => array('vstatus_inheritance'),
      'nstatus_inheritance' => array('nstatus_inheritance'),
      'election_id' => array('election_id'),
      'type' => array('type'),
    ),
    'foreign keys' => array(
      'post_election' => array(
        'table' => 'election',
        'columns' => array('election_id' => 'election_id'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_schema_alter().
 */
function election_post_schema_alter(&$schema) {

  $schema['election_ballot']['foreign keys']['post'] = array(
    'table' => 'election_post',
    'columns' => array('post_id' => 'post_id'),
  );

  $schema['election_vote']['foreign keys']['post'] = array(
    'table' => 'election_post',
    'columns' => array('post_id' => 'post_id'),
  );

}

/**
 * Add the allow_equal column to the election_post table.
 */
function election_post_update_7101() {
  db_add_field('election_post', 'allow_equal', array(
    'description' => 'For STV or ranked-choice elections: whether to allow equal rankings.',
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Add the settings column to the election_post table.
 */
function election_post_update_7102() {
  db_add_field('election_post', 'settings', array(
    'description' => 'A serialized array of any further settings for this post.',
    'type' => 'blob',
    'size' => 'normal',
    'serialize' => TRUE,
    'not null' => FALSE,
  ));
}

/**
 * Convert post settings to new serialized column.
 */
function election_post_update_7103() {
  $columns = array('allow_equal', 'use_ron', 'vacancy_count', 'exclusive');
  $posts = db_select('election_post', 'ep')
    ->fields('ep', $columns + array('settings'))
    ->condition('type', 'position')
    ->execute()
    ->fetchAll();
  foreach ($posts as $post) {
    $post->settings = (array) unserialize($post->settings);
    foreach ($columns as $column) {
      if (!isset($post->settings[$column])) {
        $post->settings[$column] = $post->$column;
      }
    }
    db_update('election_post')
      ->fields(array('settings' => serialize($post->settings)))
      ->condition('type', 'position')
      ->execute();
  }
}

/**
 * Delete old election_post fields (converted to serialized settings field).
 */
function election_post_update_7104() {
  db_drop_index('election_post', 'use_ron');
  db_drop_index('election_post', 'exclusive');
  db_drop_field('election_post', 'use_ron');
  db_drop_field('election_post', 'exclusive');
  db_drop_field('election_post', 'vacancy_count');
  db_drop_field('election_post', 'allow_equal');
}

/**
 * Restore election_post.vacancy_count field.
 */
function election_post_update_7105() {
  db_add_field('election_post', 'vacancy_count', array(
    'description' => 'The number of vacancies for this post.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 1,
  ));
}

/**
 * Move vacancy_count settings back into the election_post.vacancy_count field.
 */
function election_post_update_7106() {
  $post_ids = db_query("SELECT post_id FROM {election_post} WHERE settings LIKE '%vacancy_count%'")->fetchCol();
  $posts = election_post_load_multiple($post_ids);
  foreach ($posts as $post) {
    if (empty($post->settings['vacancy_count'])) {
      continue;
    }
    if ($post->vacancy_count != $post->settings['vacancy_count']) {
      $post->vacancy_count = $post->settings['vacancy_count'];
      unset($post->settings['vacancy_count']);
      election_post_save($post);
    }
  }
}

/**
 * Add the 'published' column to the election_post table.
 */
function election_post_update_7107() {
  db_add_field('election_post', 'published', array(
    'description' => 'Allows anyone who can view the election to view this post.',
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
  ));
  db_add_index('election_post', 'published', array('published'));
}

/**
 * Set all current posts to 'published' so they behave as they did before.
 */
function election_post_update_7108() {
  db_update('election_post')->fields(array('published' => 1))->execute();
}
