<?php
/**
 * @file
 * Election Post: primary module file.
 */

/**
 * Implements hook_menu().
 */
function election_post_menu() {

  $items = array();

  $items['election/%election/posts-admin'] = array(
    'title callback' => 'election_post_page_manage_title',
    'title arguments' => array(1),
    'page callback' => 'election_post_manage_page',
    'page arguments' => array(1),
    'file' => 'election-post.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    // To manage candidates, the user needs to have update access to the
    // election.
    'access callback' => 'election_access',
    'access arguments' => array('update', 1),
  );

  foreach (election_types() as $type_machine_name => $type) {
    $post_machine_name = $type['post machine name'];
    $post_name = election_get_post_name($type_machine_name);
    $post_name_plural = election_get_post_name($type_machine_name, TRUE);
    $items['admin/config/election/' . $type_machine_name . '/' . $post_machine_name] = array(
      'title' => '@post settings',
      'title arguments' => array('@post' => drupal_ucfirst($post_name)),
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer elections'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'description' => 'Manage fields and display settings for ' . $post_name_plural . '.',
    );
  }

  $items['election/%election/add-post'] = array(
    'title callback' => 'election_post_page_add_title',
    'title arguments' => array(1),
    'page callback' => 'election_post_page_add',
    'page arguments' => array(1),
    'access callback' => 'election_access',
    'access arguments' => array('update', 1),
    'file' => 'election-post.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['election-post/%election_post'] = array(
    'title callback' => 'election_post_page_title',
    'title arguments' => array(1),
    'page callback' => 'election_post_page_view',
    'page arguments' => array(1),
    'access callback' => 'election_post_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  $items['election-post/%election_post/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['election-post/%election_post/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'election_post_page_edit',
    'page arguments' => array(1),
    'file' => 'election-post.admin.inc',
    'access callback' => 'election_post_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );

  $items['election-post/%election_post/clone'] = array(
    'title callback' => 'election_post_page_clone_title',
    'title arguments' => array(1),
    'page callback' => 'election_post_page_clone',
    'page arguments' => array(1),
    'file' => 'election-post.admin.inc',
    'access callback' => 'election_post_access',
    'access arguments' => array('update', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_ACTION,
  );

  $items['election-post/%election_post/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_post_form_delete_confirm', 1),
    'access callback' => 'election_post_access',
    'access arguments' => array('delete', 1),
    'file' => 'election_post.forms.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;

}

/**
 * Implements hook_menu_alter().
 */
function election_post_menu_alter(&$items) {
  // Change the types of automatic Field UI menu items for a clearer admin UI.
  foreach (election_types() as $type_machine_name => $type) {
    $path = 'admin/config/election/' . $type_machine_name;
    $post_machine_name = $type['post machine name'];
    $post_name_plural = election_get_post_name($type_machine_name, TRUE);
    $items[$path . '/' . $post_machine_name]['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/fields']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/fields']['description'] = t(
      'Manage fields for %election_type @posts.',
      array(
        '%election_type' => $type['name'],
        '@posts' => $post_name_plural,
      )
    );
    $items[$path . '/' . $post_machine_name . '/display']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/display/full']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/display/teaser']['type'] = MENU_NORMAL_ITEM;
    $items[$path . '/' . $post_machine_name . '/display']['description'] = t(
      'Manage display for %election_type @posts.',
      array(
        '%election_type' => $type['name'],
        '@posts' => $post_name_plural,
      )
    );
  }
}

/**
 * Implements hook_entity_info().
 */
function election_post_entity_info() {

  $entities = array();

  $entities['election_post'] = array(
    'label' => t('Election post'),
    'access callback' => 'election_post_access',
    'uri callback' => 'election_post_uri',
    'controller class' => 'ElectionPostController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'election_post',
    'entity keys' => array(
      'id' => 'post_id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'static cache' => TRUE,
    'fieldable' => TRUE,
    'module' => 'election_post',
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
      ),
      'teaser' => array(
        'label' => t('Teaser'),
      ),
    ),
    'view callback' => 'entity_metadata_view_single',
    // Enable the Meta Tags module to integrate with posts.
    'metatags' => TRUE,
  );

  foreach (election_types() as $type_machine_name => $type) {
    $post_machine_name = $type['post machine name'];
    $post_name = election_get_post_name($type_machine_name);
    $entities['election_post']['bundles'][$post_machine_name] = array(
      'label' => drupal_ucfirst($post_name),
      'admin' => array(
        'path' => 'admin/config/election/' . $type_machine_name . '/' . $post_machine_name,
        'real path' => 'admin/config/election/' . $type_machine_name . '/' . $post_machine_name,
        'bundle argument' => 4,
        'access arguments' => array('administer elections'),
      ),
    );
  }

  return $entities;
}

/**
 * Implements hook_field_extra_fields().
 */
function election_post_field_extra_fields() {
  $info = array();
  foreach (election_types() as $type_mn => $type) {
    $bundle_name = $type['post machine name'];
    $info['election_post'][$bundle_name]['form'] = array(
      'title' => array(
        'label' => t('Title'),
        'weight' => -50,
      ),
      'role_access' => array(
        'label' => t('Role eligibility'),
        'weight' => 10,
      ),
      'voting' => array(
        'label' => t('Voting'),
        'weight' => 90,
      ),
      'published' => array(
        'label' => t('Published'),
        'description' => t("Whether the @post is published.", array(
          '@post' => election_get_post_name($type_mn),
        )),
        'weight' => 99,
      ),
    );
    $info['election_post'][$bundle_name]['display'] = array(
      'election' => array(
        'label' => t('Election'),
        'weight' => 0,
      ),
    );
  }
  return $info;
}

/**
 * Implements hook_field_extra_fields_alter().
 */
function election_post_field_extra_fields_alter(&$info) {
  foreach (election_types() as $bundle => $type) {
    $posts_name = election_get_post_name($bundle, TRUE);
    $info['election'][$bundle]['display']['posts'] = array(
      'label' => drupal_ucfirst($posts_name),
      'weight' => 100,
    );
  }
}

/**
 * Get post nomination/voting override values as an array of options.
 */
function _election_post_get_inheritance_options() {
  return array(
    ELECTION_POST_STATUS_INHERIT => t('Inherit'),
    ELECTION_POST_STATUS_CLOSED => t('Closed'),
  );
}

/**
 * Determines whether the given user has access to a post.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', or 'delete'. Access
 *   to create a post should check using election_access() on the election.
 * @param object $post
 *   A post to check access for.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function election_post_access($op, $post, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  switch ($op) {
    case 'view':
      // Users who can view the election can also view published posts.
      if (election_access('view', $post->election, $account) && $post->published) {
        return TRUE;
      }
      // Users who can update the election can view all its posts.
      if (election_access('update', $post->election, $account)) {
        return TRUE;
      }
      break;

    case 'update':
    case 'delete':
      // These actions are denied while voting is open for this post.
      // Use the 'bypass running election lock' permission to allow them again.
      if (election_post_voting_open($post) && !user_access('bypass running election lock', $account)) {
        return FALSE;
      }
      // These actions have the same access as updating elections.
      return election_access('update', $post->election, $account);

  }
  return FALSE;
}

/**
 * URI callback for a single election post.
 */
function election_post_uri($post) {
  $path = 'election-post/' . $post->post_id;
  return array(
    'path' => $path,
    'options' => array(),
  );
}

/**
 * Get the path part of the election post URI callback as a string.
 *
 * @see election_post_uri()
 */
function election_post_uri_path($post) {
  $uri = election_post_uri($post);
  return $uri['path'];
}

/**
 * Load an individual post.
 *
 * @param int $post_id
 *   A single election post ID.
 * @param bool $reset
 *   Whether to reset the internal cache for election post entities.
 *
 * @return object
 *   A stdClass election_post object.
 */
function election_post_load($post_id, $reset = FALSE) {
  $result = election_post_load_multiple((array) $post_id, $reset);
  if (!is_array($result) || !count($result)) {
    return FALSE;
  }
  return reset($result);
}

/**
 * Load multiple posts.
 *
 * @param array $post_ids
 *   An array of election post IDs.
 * @param bool $reset
 *   Whether to reset the internal cache for election post entities.
 *
 * @return array
 *   An array of election post objects keyed by post ID.
 */
function election_post_load_multiple(array $post_ids = array(), $reset = FALSE) {
  // The $conditions parameter is not used as this is deprecated for D8.
  return entity_load('election_post', $post_ids, array(), $reset);
}

/**
 * Load posts belonging to the given election.
 *
 * @param object $election
 *   An election object.
 * @param bool $only_published
 *   Whether to only find published posts.
 * @param string $order_by
 *   A database column to order posts by. Default is the title.
 *   Set FALSE for no ordering.
 *
 * @return array
 *   An array of post objects keyed by post ID.
 */
function election_post_load_by_election(stdClass $election, $only_published = TRUE, $order_by = 'title') {
  $select = db_select('election_post', 'ep')
    ->fields('ep', array('post_id'))
    ->condition('election_id', $election->election_id);
  if ($only_published) {
    $select->condition('published', 1);
  }
  if (!empty($order_by)) {
    $select->orderBy($order_by);
  }
  $post_ids = $select->execute()->fetchCol();
  $posts = election_post_load_multiple($post_ids);
  return $posts;
}

/**
 * Implements hook_entity_load().
 */
function election_post_entity_load($entities, $type) {
  // Add 'election' property to posts.
  if ($type == 'election_post') {
    $election_ids = array();
    foreach ($entities as $post) {
      if (!isset($post->election)) {
        $election_ids[] = $post->election_id;
      }
    }
    if (count($election_ids)) {
      $elections = election_load_multiple($election_ids);
      foreach ($entities as $post) {
        $post->election = $elections[$post->election_id];
      }
    }
  }
}

/**
 * Wrapper function to allow deleting multiple election posts.
 *
 * @param array $post_ids
 *   Array of post IDs.
 */
function election_post_delete_multiple(array $post_ids) {
  return entity_get_controller('election_post')->delete($post_ids);
}

/**
 * Wrapper function to allow deleting an individual election post.
 *
 * @see election_post_delete_multiple()
 *
 * @param mixed $post_id
 *   Single post ID.
 */
function election_post_delete($post_id) {
  return election_post_delete_multiple(array($post_id));
}

/**
 * Implements hook_entity_insert().
 */
function election_post_entity_insert($entity, $type) {
  switch ($type) {
    case 'election_post':
      if (module_exists('pathauto')) {
        _election_post_pathauto_update_alias($entity, 'insert');
      }
      break;

  }
}

/**
 * Implements hook_entity_update().
 */
function election_post_entity_update($entity, $type) {
  switch ($type) {
    case 'election_post':
      if (module_exists('pathauto')) {
        _election_post_pathauto_update_alias($entity, 'update');
      }
      break;

  }
}

/**
 * Implements hook_entity_delete().
 */
function election_post_entity_delete($entity, $type) {
  switch ($type) {
    // Delete associated posts when an election is deleted.
    case 'election':
      $post_ids = db_select('election_post')
        ->fields('election_post', array('post_id'))
        ->condition('election_id', $entity->election_id)
        ->execute()
        ->fetchCol();
      election_post_delete_multiple($post_ids);
      break;

    // Delete Pathauto path aliases when a post is deleted.
    case 'election_post':
      if (function_exists('pathauto_entity_path_delete_all')) {
        pathauto_entity_path_delete_all('election_post', $entity);
      }
      break;

  }
}

/**
 * Wrapper function to allow saving an election post.
 *
 * @param object $post
 *   Election post object.
 */
function election_post_save($post) {
  return entity_get_controller('election_post')->save($post);
}

/**
 * Title callback for cloning an election post.
 */
function election_post_page_clone_title($post) {
  // Output should not be escaped here; it is done later in the menu system.
  return t('Clone this !post', array('!post' => election_get_post_name($post->election->type)));
}

/**
 * Title callback for managing election posts.
 */
function election_post_page_manage_title($election) {
  // Output should not be escaped here; it is done later in the menu system.
  return t('Manage !posts', array('!posts' => election_get_post_name($election->type, TRUE)));
}

/**
 * Title callback for adding an election post.
 */
function election_post_page_add_title($election) {
  // Output should not be escaped here; it is done later in the menu system.
  return t('Add new !post', array('!post' => election_get_post_name($election->type)));
}

/**
 * Title callback for election-post/%election_post.
 */
function election_post_page_title($post) {
  // Output should not be escaped here; it is done later in the menu system.
  return $post->title;
}

/**
 * Implements hook_theme().
 */
function election_post_theme() {
  return array(
    'election_post' => array(
      'render element' => 'elements',
      'template' => 'election-post',
      'file' => 'election_post.theme.inc',
    ),
    'election_post_list_embed' => array(
      'variables' => array(
        'view' => 'election_posts',
        'display' => 'embed',
        'args' => array(),
        'title' => NULL,
      ),
      'file' => 'election_post.theme.inc',
    ),
  );
}

/**
 * Generate an array for rendering the given election post.
 *
 * @param object $post
 *   An election post object.
 * @param string $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 *
 * @return array
 *   An array as expected by drupal_render().
 */
function election_post_view($post, $view_mode = 'full') {

  // Remove previously built content, if it exists.
  $post->content = array();

  // Display a link to the election, if we're not on the election's page.
  $election = $post->election;
  $election_uri = election_uri($election);
  if (current_path() != $election_uri['path']) {
    $post->content['election'] = array(
      '#theme' => 'election_info_item',
      '#label' => t('Election'),
      '#html' => TRUE,
      '#value' => l($election->title, $election_uri['path'], $election_uri['options']),
    );
  }

  // Build fields content.
  // In case of a multiple view, node_view_multiple() already ran the
  // 'prepare_view' step. An internal flag prevents the operation from running
  // twice.
  field_attach_prepare_view('election_post', array($post->post_id => $post), $view_mode);
  entity_prepare_view('election_post', array($post->post_id => $post));
  $post->content += field_attach_view('election_post', $post, $view_mode);

  $build = $post->content;
  // We don't need duplicate rendering info in $post->content.
  unset($post->content);

  $build += array(
    '#theme' => 'election_post',
    '#post' => $post,
    '#view_mode' => $view_mode,
  );

  // Add contextual links for this post, except when the post is already being
  // displayed on its own page. Modules may alter this behavior (for example,
  // to restrict contextual links to certain view modes) by implementing
  // hook_election_post_view_alter().
  if (!empty($post->post_id) && $view_mode != 'full') {
    $build['#contextual_links']['election_post'] = array('election-post', array($post->post_id));
  }

  // Invoke hook_entity_view().
  global $language;
  $langcode = $language->language;
  module_invoke_all('entity_view', $post, 'election_post', $view_mode, $langcode);

  // Invoke hook_ENTITY_view_alter() and hook_entity_view_alter().
  $type = 'election_post';
  drupal_alter(array('election_post_view', 'entity_view'), $build, $type);

  return $build;

}

/**
 * Test whether voting is open for a post.
 *
 * @param object $post
 *   The election post object.
 *
 * @return bool
 *   TRUE if voting is open for the post, FALSE otherwise.
 */
function election_post_voting_open($post) {
  return _election_post_is_open($post, 'v');
}

/**
 * Test whether nominations are open for a post.
 *
 * @param object $post
 *   The election post object.
 *
 * @return bool
 *   TRUE if nominations are open for the post, FALSE otherwise.
 */
function election_post_nominations_open($post) {
  return _election_post_is_open($post, 'n');
}

/**
 * Find out if a post is open.
 *
 * @param object $post
 *   An election post object.
 * @param string $status_prefix
 *   The type of status ('v' for voting, 'n' for nominations).
 *
 * @return bool
 *   TRUE if the post is open, FALSE otherwise.
 */
function _election_post_is_open(stdClass $post, $status_prefix) {
  $status_inheritance = $post->{$status_prefix . 'status_inheritance'};
  if ($status_inheritance == ELECTION_POST_STATUS_CLOSED) {
    return FALSE;
  }
  $election = $post->election;
  $status = $election->{$status_prefix . 'status'};
  $open_time = $election->{$status_prefix . 'open_time'};
  $close_time = $election->{$status_prefix . 'close_time'};
  return _election_is_open($status, $open_time, $close_time);
}

/**
 * Menu callback for an election post, path: election-post/%election_post.
 *
 * @param object $post
 *   An election post object.
 * @param string $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 */
function election_post_page_view($post, $view_mode = 'full') {

  election_set_breadcrumb($post->election);

  return election_post_view($post, $view_mode);

}

/**
 * Set the breadcrumb for an election post.
 *
 * @param object $election
 *   An election object.
 * @param object $post
 *   An election post object (optional).
 */
function election_post_set_breadcrumb(stdClass $election, stdClass $post = NULL) {
  $links = array();
  $links[] = l(t('Home'), '<front>');
  $links[] = l(t('Elections'), 'elections');
  $links[] = l($election->title, election_uri_path($election));
  if ($post) {
    $links[] = l($post->title, election_post_uri_path($post));
  }
  drupal_set_breadcrumb($links);
}

/**
 * Implements hook_action_info().
 */
function election_post_action_info() {
  return array(
    'election_post_publish_action' => array(
      'type' => 'election_post',
      'label' => t('Publish'),
      'configurable' => FALSE,
      'behavior' => array('changes_property'),
      'triggers' => array('election_post_presave'),
    ),
    'election_post_unpublish_action' => array(
      'type' => 'election_post',
      'label' => t('Unpublish'),
      'configurable' => FALSE,
      'behavior' => array('changes_property'),
      'triggers' => array('election_post_presave'),
    ),
  );
}

/**
 * Publishes a post.
 *
 * @ingroup actions
 */
function election_post_publish_action($post, $context = array()) {
  $post->published = 1;
}

/**
 * Unpublishes a post.
 *
 * @ingroup actions
 */
function election_post_unpublish_action($post, $context = array()) {
  $post->published = 0;
}

/**
 * Implements hook_file_download_access().
 *
 * Allow private files to be downloaded when they are attached to a post entity
 * via a file field.
 */
function election_post_file_download_access($field, $entity_type, $entity) {
  if ($entity_type == 'election_post' && !empty($entity->election_id)) {
    $election = election_load($entity->election_id);
    return election_access('view', $election);
  }
}

/**
 * Implements hook_views_api().
 */
function election_post_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_default_views().
 */
function election_post_views_default_views() {
  $views_dir = drupal_get_path('module', 'election_post') . '/views';
  $views_files = scandir($views_dir);
  $views = array();
  foreach ($views_files as $filename) {
    if (substr($filename, -4) == '.inc') {
      include_once $views_dir . '/' . $filename;
    }
  }
  return $views;
}

/**
 * Update the URL aliases for an individual election post.
 *
 * @param object $post
 *   An election post object.
 * @param string $op
 *   Operation being performed on the post ('insert', 'update' or 'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 */
function _election_post_pathauto_update_alias(stdClass $post, $op, array $options = array()) {
  // Skip processing if the post has no pattern.
  if (!pathauto_pattern_load_by_entity('election_post', $post->type)) {
    return;
  }
  $election = empty($post->election) ? election_load($post->election_id) : $post->election;
  module_load_include('inc', 'pathauto');
  pathauto_create_alias(
    'election_post',
    $op,
    election_post_uri_path($post),
    array('election_post' => $post, 'election' => $election),
    $post->type
  );
}

/**
 * Update the URL aliases for multiple election posts.
 *
 * @param array $post_ids
 *   An array of election post IDs.
 * @param string $op
 *   Operation being performed on the posts ('insert', 'update' or
 *   'bulkupdate').
 * @param array $options
 *   An optional array of additional options.
 */
function _election_post_pathauto_update_alias_multiple(array $post_ids, $op, array $options = array()) {
  $options += array('message' => FALSE);
  $posts = election_post_load_multiple($post_ids);
  foreach ($posts as $post) {
    _election_post_pathauto_update_alias($post, $op, $options);
  }
  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($post_ids), 'Updated URL alias for 1 post.', 'Updated URL aliases for @count posts.'));
  }
}

/**
 * Implements hook_ENTITY_view_alter().
 */
function election_post_election_view_alter(&$build) {
  if (!isset($build['posts']) && $build['#view_mode'] == 'full') {
    $election = $build['#election'];
    $posts_name = election_get_post_name($election->type, TRUE);
    $build['posts'] = array(
      '#theme' => 'election_post_list_embed',
      '#title' => drupal_ucfirst($posts_name),
      '#args' => array($election->election_id),
    );
  }
}
