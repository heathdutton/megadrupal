<?php
/**
 * @file
 * Main file for the Election Result module.
 */

/**
 * Implements hook_menu().
 */
function election_results_menu() {
  $items = array();
  $items['election-post/%election_post/results'] = array(
    'title' => 'Results',
    'page callback' => 'election_results_page',
    'page arguments' => array(1),
    'access callback' => 'election_results_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['election-post/%election_post/results/view'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function election_results_permission() {
  return array(
    'view any election results' => array(
      'title' => t('View any election results'),
      'description' => t('This allows the user to view the results of any election posts.'),
    ),
    'view own election results' => array(
      'title' => t('View own election results'),
      'description' => t('This allows the user to view the results of their own election posts (those to which they have editing access).'),
    ),
  );
}

/**
 * Access callback for viewing results per election post.
 */
function election_results_access($op, stdClass $post, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  if ($op == 'view') {
    // The user has to have permission to view the post itself.
    if (!election_post_access('view', $post, $account)) {
      return FALSE;
    }
    // Prevent users from viewing results while voting is open, unless they can
    // 'bypass running election lock'.
    if (election_post_voting_open($post) && !user_access('bypass running election lock', $account)) {
      return FALSE;
    }
    if ($post->election->uid == $account->uid && user_access('view own election results', $account)) {
      return TRUE;
    }
    if (user_access('view any election results', $account)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function election_results_theme() {
  return array(
    'election_results_totals' => array(
      'variables' => array(
        'post' => NULL,
        'ballots' => 0,
        'votes' => 0,
        'abstentions' => 0,
      ),
      'file' => 'election_results.theme.inc',
    ),
  );
}

/**
 * Page callback: display results for an election post.
 */
function election_results_page(stdClass $post) {
  $election = $post->election;

  drupal_set_title(t('Results: %post', array('%post' => $post->title)), PASS_THROUGH);
  election_set_breadcrumb($election);

  $totals = election_results_get_totals($post);

  $output = array();
  $output['totals'] = array(
    '#theme' => 'election_results_totals',
    '#post' => $post,
    '#ballots' => $totals['ballots'],
    '#votes' => $totals['votes'],
    '#abstentions' => $totals['abstentions'],
  );

  drupal_alter('election_results_page', $output, $post);

  return $output;
}

/**
 * Get the total number of ballots, votes and abstentions for a post.
 *
 * @param object $post
 *   The election post object.
 *
 * @return array
 *   An array of totals for the post: 'ballots', 'votes', and 'abstentions' (all
 *   integers).
 */
function election_results_get_totals($post) {
  $totals = &drupal_static(__FUNCTION__, array());
  $pid = $post->post_id;
  if (!isset($totals[$pid])) {

    // Count the number of ballots cast for this post.
    $query = db_select('election_ballot')
      ->condition('post_id', $pid)
      ->condition('value', 0, '>')
      ->countQuery()
      ->distinct();
    $ballots = $query->execute()->fetchField();

    // No need to count votes and abstentions if there aren't any ballots.
    if ($ballots == 0) {
      $votes = 0;
      $abstentions = 0;
    }
    else {

      // Count votes.
      $query = db_select('election_ballot', 'eb')
        ->condition('eb.post_id', $pid);
      $query->condition('eb.abstain', 0);
      $query->addExpression('SUM(eb.value)');
      $votes = $query->execute()->fetchField();

      // Count abstentions.
      $query = db_select('election_ballot', 'eb')
        ->condition('eb.post_id', $pid);
      $query->condition('eb.abstain', 1);
      $query->addExpression('SUM(eb.value)');
      $abstentions = $query->execute()->fetchField();
    }

    // Make sure all the figures are integers.
    $totals[$pid] = array(
      'ballots' => (int) $ballots,
      'votes' => (int) $votes,
      'abstentions' => (int) $abstentions,
    );
  }
  return $totals[$pid];
}
