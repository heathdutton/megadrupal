<?php
/**
 * @file
 * Test the Election Post module for basic CRUD functionality.
 */

class ElectionPostCrudTestCase extends DrupalWebTestCase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Post CRUD',
      'description' => 'A basic CRUD (Create, Read, Update, Delete) test for the Election Post module.',
      'group' => 'Election Post',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array(
      'election_referendum',
      'election_stv',
    );
    parent::setUp($modules);
  }

  /**
   * Create, update, and delete an election post.
   */
  public function testElectionPostCrud() {

    // Create a user who has the appropriate permissions for this test.
    $test_user = $this->drupalCreateUser(array(
      'create elections',
      'view published elections',
      'edit own elections',
      'delete own elections',
    ));
    // Log in as that user.
    $this->drupalLogin($test_user);

    $election_controller = entity_get_controller('election');

    // Test CRUD for all installed election types.
    foreach (election_types() as $bundle => $type) {
      // Create a new election with a random title.
      $election = $election_controller->create(array(
        'type' => $bundle,
        'uid' => $test_user->uid,
        'title' => $this->randomString(),
      ));
      election_save($election);
      // Create a new post in the election with a random title.
      $post = $this->helperElectionPostCreateUi($election, $this->randomString());
      // Update the post's title and published status.
      $post = $this->helperElectionPostUpdateUi($post, array(
        'title' => $this->randomString(),
        'published' => FALSE,
      ));
      // Delete the post.
      $this->helperElectionPostDeleteUi($post);
    }

  }

  /**
   * Test creating a new election post via the UI.
   */
  protected function helperElectionPostCreateUi($election, $title, array $properties = array()) {
    $properties['title'] = $title;
    $this->drupalPost('election/' . $election->election_id . '/add-post', $properties, t('Save'));
    // The page should display that the new post was saved.
    $this->assertRaw(
      t('The @post "@title" was saved.', array('@post' => election_get_post_name($election->type), '@title' => $title)),
      t('Election Post for election %election added correctly.', array('%election' => $election->title))
    );
    // Load the newly created election post by its title.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'election_post')
      ->propertyCondition('title', $title);
    $result = $query->execute();
    $post_ids = array_keys($result['election_post']);
    $post_id = reset($post_ids);
    $post = election_post_load($post_id);
    // Check that the new post has the correct properties.
    $this->assertEqual($post->election_id, $election->election_id, t('The post is linked to the correct election.'));
    foreach ($properties as $name => $value) {
      $this->assertEqual($post->$name, $value, t('Post property %name is correct.', array('%name' => $name)));
    }
    return $post;
  }

  /**
   * Test updating an existing election post via the UI.
   */
  protected function helperElectionPostUpdateUi(stdClass $post, array $edit) {
    $this->drupalPost(election_post_uri_path($post) . '/edit', $edit, t('Save'));
    // The page should display that the post was saved.
    // The (possibly updated) title is needed to test this assertion.
    $new_title = $post->title;
    if (isset($edit['title'])) {
      $new_title = $edit['title'];
    }
    $election = $post->election;
    $post_name = election_get_post_name($election->type);
    $this->assertRaw(
      t('The @post "@title" was saved.', array('@post' => $post_name, '@title' => $new_title)),
      t('@Post updated correctly.', array('@Post' => drupal_ucfirst($post_name)))
    );
    // Load the post from the database again.
    $original = $post;
    $post = election_post_load($original->post_id, TRUE);
    // Check that the new post has the correct properties.
    foreach ($edit as $name => $value) {
      $this->assertEqual($post->$name, $value, t('Updated post property %name is correct.', array('%name' => $name)));
    }
    return $post;
  }

  /**
   * Test deleting an existing election post via the UI.
   */
  protected function helperElectionPostDeleteUi(stdClass $post) {
    $this->drupalPost(election_post_uri_path($post) . '/delete', array(), t('Delete'));
    // The page should display that the election post was deleted.
    $post_name = election_get_post_name($post->election->type);
    $this->assertRaw(
      t('The @post %post_title has been deleted.', array('@post' => $post_name, '%post_title' => $post->title)),
      t('@Post deleted successfully.', array('@Post' => drupal_ucfirst($post_name)))
    );
    // Test that the user was redirected to an existing page after deleting.
    $this->assertResponse(200, t('Redirected to an existent page after deleting.'));
  }

}
