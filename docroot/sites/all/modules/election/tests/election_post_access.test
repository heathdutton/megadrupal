<?php
/**
 * @file
 * Test the Election Candidate module for access control.
 */

class ElectionPostAccessTestCase extends ElectionWebTestCase {

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array(
      'election_referendum',
      'election_stv',
    );
    parent::setUp($modules);
  }

}

/**
 * Test access control for viewing posts.
 */
class ElectionPostViewAccessTestCase extends ElectionPostAccessTestCase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Post view access',
      'description' => 'Test access control for viewing posts.',
      'group' => 'Election Post',
    );
  }

  /**
   * Test that view access is affected by the published status of the post.
   */
  public function testPublishedAccess() {
    foreach (election_types() as $bundle => $election_type) {
      // Create a published election.
      $election = $this->helperElectionCreate($bundle, TRUE);
      // Create a published post in the election.
      $post = $this->helperElectionPostCreate($election, TRUE);
      $post_path = election_post_uri_path($post);
      $post_name = election_get_post_name($election->type);
      $params = array('@post' => $post_name);

      // Create a user who is allowed to view published elections, and log in.
      $account = $this->drupalCreateUser(array(
        'view published elections',
      ));
      $this->drupalLogin($account);

      // Visit the post page and check that access is granted.
      $this->drupalGet($post_path);
      $this->assertResponse(200, t('Access is granted to view a published @post.', $params));

      // Modify the election so that it is unpublished.
      $election->published = 0;
      election_save($election);

      // Visit the post page and check that access is denied.
      $this->drupalGet($post_path);
      $this->assertResponse(
        403,
        t('Access is denied to view a published @post in an unpublished election.', $params)
      );

      // Make the election published again, and unpublish the post.
      $election->published = 1;
      election_save($election);
      $post->published = 0;
      election_post_save($post);

      // Visit the post page and check that access is denied.
      $this->drupalGet($post_path);
      $this->assertResponse(
        403,
        t('Access is denied to view an unpublished @post in a published election.', $params)
      );
    }
  }

}
