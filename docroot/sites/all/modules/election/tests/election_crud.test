<?php
/**
 * @file
 * Test the Election module for basic CRUD functionality.
 */

class ElectionCrudTestCase extends DrupalWebTestCase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Election CRUD',
      'description' => 'A basic CRUD (Create, Read, Update, Delete) test for the Election module.',
      'group' => 'Election',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array(
      'election_referendum',
      'election_stv',
    );
    parent::setUp($modules);
  }

  /**
   * Create, update, and delete an election.
   */
  public function testElectionCrud() {

    // Create a user who has the appropriate permissions for this test.
    $test_user = $this->drupalCreateUser(array(
      'create elections',
      'view published elections',
      'edit own elections',
      'delete own elections',
    ));
    // Log in as that user.
    $this->drupalLogin($test_user);

    // Test that the main elections list exists.
    $this->drupalGet('elections');
    $this->assertResponse(200, t('The page at /elections exists.'));

    // Test CRUD for all election types.
    foreach (election_types() as $bundle => $type) {
      // Check that the "Add new" link exists for each bundle.
      $this->assertLink(t('Add new !post_name', array('!post_name' => $type['name'])));
      // Create a new election with a random title.
      $election = $this->helperElectionCreateUi($bundle, $this->randomString());
      // Update the election's title and published status.
      $election = $this->helperElectionUpdateUi($election, array(
        'title' => $this->randomString(),
        'published' => 1,
      ));
      // Delete the election.
      $this->helperElectionDeleteUi($election);
    }

  }

  /**
   * Test creating a new election via the UI.
   */
  protected function helperElectionCreateUi($bundle, $title, array $properties = array()) {
    $properties['title'] = $title;
    $this->drupalPost('elections/add/' . $bundle, $properties, t('Save'));
    $types = election_types();
    $type = $types[$bundle];
    // The page should display that the new election was saved.
    $this->assertRaw(
      t('The @type %title was saved.', array('@type' => $type['name'], '%title' => $title)),
      t('Election of type %type added correctly.', array('%type' => $type['name']))
    );
    // Load the newly created election by its title.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'election')
      ->propertyCondition('title', $title);
    $result = $query->execute();
    $election_ids = array_keys($result['election']);
    $election_id = reset($election_ids);
    $election = election_load($election_id);
    // Check that the new election has the correct properties.
    $this->assertEqual($election->type, $bundle, t('Election has the correct type.'));
    foreach ($properties as $name => $value) {
      $this->assertEqual($election->$name, $value, t('Election property %name is correct.', array('%name' => $name)));
    }
    return $election;
  }

  /**
   * Test updating an existing election via the UI.
   */
  protected function helperElectionUpdateUi(stdClass $election, array $edit) {
    $this->drupalPost(election_uri_path($election) . '/edit', $edit, t('Save'));
    // The page should display that the election was saved.
    // The (possibly updated) title is needed to test this assertion.
    $new_title = $election->title;
    if (isset($edit['title'])) {
      $new_title = $edit['title'];
    }
    $this->assertRaw(
      t('The @type %title was saved.', array('@type' => $election->type_info['name'], '%title' => $new_title)),
      t('Election updated correctly.')
    );
    // Load the election from the database again.
    $original = $election;
    $election = election_load($original->election_id, TRUE);
    // Check that the new election has the correct properties.
    foreach ($edit as $name => $value) {
      $this->assertEqual($election->$name, $value, t('Updated election property %name is correct.', array('%name' => $name)));
    }
    return $election;
  }

  /**
   * Test deleting an existing election via the UI.
   */
  protected function helperElectionDeleteUi(stdClass $election) {
    $this->drupalPost(election_uri_path($election) . '/delete', array(), t('Delete'));
    // The page should display that the election was deleted.
    $this->assertRaw(
      t('The @type %title has been deleted.', array('@type' => $election->type_info['name'], '%title' => $election->title)),
      t('Election deleted successfully.')
    );
    // Test that the user was redirected to an existing page after deleting.
    $this->assertResponse(200, t('Redirected to an existent page after deleting.'));
  }

}
