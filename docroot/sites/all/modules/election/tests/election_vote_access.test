<?php
/**
 * @file
 * Test the Election Vote module for access control.
 */

/**
 * Test voting access by role.
 */
class ElectionVoteAccessByRoleTestCase extends ElectionWebTestCase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Vote access - by role',
      'description' => 'Test access control for voting restrictions based on roles.',
      'group' => 'Election Vote',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array(
      'election_referendum',
      'election_stv',
    );
    parent::setUp($modules);
  }

  /**
   * Test access to vote for posts by role.
   */
  public function testVoteRoleAccess() {
    // Check for two different roles.
    $iterations = 2;
    // Create roles with the necessary permissions to vote, and a single user
    // for each of those roles.
    $rids = array();
    $accounts = array();
    for ($i = 1; $i <= $iterations; $i++) {
      $role_name = $this->randomName();
      $rids[$i] = $this->drupalCreateRole(array(
        'view published elections',
        'vote in elections',
      ), $role_name);
      $accounts[$i] = $this->drupalCreateUser();
      $edit = array('roles' => array($rids[$i] => $role_name));
      user_save($accounts[$i], $edit);
      $this->assertTrue(
        in_array($role_name, $accounts[$i]->roles),
        t('User %name granted role %role_name.', array(
          '%name' => $accounts[$i]->name,
          '%role_name' => $role_name,
        ))
      );
    }
    $post_controller = entity_get_controller('election_post');
    foreach (election_types() as $bundle => $election_type) {
      // Create a published election with open voting.
      $election = $this->helperElectionCreate($bundle, TRUE, NULL, NULL, ELECTION_STATUS_OPEN);
      // Create test posts, each allowing a single role to vote.
      foreach ($rids as $rid) {
        $post = $post_controller->create(array(
          'type' => $election_type['post machine name'],
          'title' => $this->randomString(),
          'election_id' => $election->election_id,
          'rids' => array($rid),
        ));
        election_post_save($post);
        // Reload the post so it gets processed correctly.
        $post = election_post_load($post->post_id, TRUE);
        // Add candidates, if relevant, because voting would be closed if there
        // were not sufficient candidates.
        if (module_exists('election_candidate') && election_candidate_check_support($election)) {
          $num_required = isset($post->vacancy_count) ? $post->vacancy_count + 1 : 2;
          for ($i = 1; $i <= $num_required; $i++) {
            $candidate = $this->helperElectionCandidateCreate($post, TRUE);
            $this->assertTrue(!empty($candidate), t('Candidate %name created.', array(
              '%name' => election_candidate_get_name($candidate, FALSE),
            )));
          }
        }
        // Check voting access for each user for this post. If a user has the
        // role assigned to the post, then the user should be allowed to vote,
        // and vice versa.
        foreach ($accounts as $account) {
          $eligible = isset($account->roles[$rid]);
          $has_access = election_vote_access('vote', $post, $account);
          $params = array(
            '%name' => $account->name,
            '@post' => election_get_post_name($election->type),
            '%title' => $post->title,
          );

          if ($eligible) {
            $this->assertTrue($has_access, t('Eligible user %name has access to vote for @post %title.', $params));
          }
          else {
            $this->assertFalse($has_access, t('Ineligible user %name does not have access to vote for @post %title.', $params));
          }
        }
      }
    }
  }

}

/**
 * Test voting access against there being enough candidates for a post.
 */
class ElectionVoteAccessCandidatesTestCase extends ElectionWebTestCase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Vote access - for enough candidates',
      'description' => 'Test access control for voting based on whether there are enough candidates to vote for.',
      'group' => 'Election Vote',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array(
      'election_referendum',
      'election_stv',
    );
    parent::setUp($modules);
  }

  /**
   * Test access to vote is denied when there are not enough candidates.
   */
  public function testVoteAccessForEnoughCandidates() {
    // Create a published election of type STV, with open voting.
    $election = $this->helperElectionCreate('stv', TRUE, NULL, NULL, ELECTION_STATUS_OPEN);
    // Create a user account for a voter.
    $voter_account = $this->drupalCreateUser(array(
      'view published elections',
      'vote in elections',
    ));
    // Get the role ID belonging to the voter (for the role created via the
    // drupalCreateUser() call above).
    foreach ($voter_account->roles as $rid => $role_name) {
      if ($role_name != 'authenticated user') {
        $voter_rid = $rid;
        break;
      }
    }
    // Add a post, with the user's role.
    $post = entity_get_controller('election_post')->create(array(
      'type' => $election->type_info['post machine name'],
      'title' => $this->randomString(),
      'election_id' => $election->election_id,
      'rids' => array($voter_rid),
    ));
    election_post_save($post);
    // Reload the post so it gets processed correctly.
    $post = election_post_load($post->post_id, TRUE);

    // Log in as the voter.
    $this->drupalLogin($voter_account);

    // Check that there are not enough candidates for the post yet.
    $post_name = election_get_post_name($election->type);
    $this->assertFalse(
      election_candidate_post_has_enough($post),
      t('There are not enough candidates for the @post.', array('@post' => $post_name))
    );

    // Check that vote access is therefore denied for the voter.
    $this->drupalGet('election-post/' . $post->post_id);
    $this->assertText(t('Voting is currently closed (not enough candidates)'));

    // Since we're going to check access again for the same post and account (in
    // the same page request), clear the static cache of vote access checks.
    drupal_static_reset('election_vote_grants');

    // Create enough candidates for the post.
    $num_required = isset($post->vacancy_count) ? $post->vacancy_count + 1 : 2;
    for ($i = 1; $i <= $num_required; $i++) {
      $this->helperElectionCandidateCreate($post, TRUE);
    }

    // Check that there are now enough candidates for the post.
    $this->assertTrue(
      election_candidate_post_has_enough($post),
      t('There are enough candidates for the @post.', array('@post' => $post_name))
    );

    // Check that vote access is now allowed for the voter.
    $this->drupalGet('election-post/' . $post->post_id);
    $this->assertText(t('You can vote'));
  }

}

/**
 * Test access control for restricting each user to a single vote.
 */
class ElectionVoteAccessPreventDuplicateTestCase extends ElectionWebTestCase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Vote access - prevent duplicates',
      'description' => 'Test access control for restricting each user to a single vote.',
      'group' => 'Election Vote',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array(
      'election_referendum',
      'election_stv',
    );
    parent::setUp($modules);
  }

  /**
   * Test control of duplicate votes.
   */
  public function testDuplicateAccess() {
    foreach (election_types() as $bundle => $election_type) {
      // Create a published election (with open voting) and a post.
      $election = $this->helperElectionCreate($bundle, TRUE, NULL, NULL, ELECTION_STATUS_OPEN);
      $post = $this->helperElectionPostCreate($election, TRUE);
      $post_path = election_post_uri_path($post);
      $vote_form_path = $post_path . '/vote';
      // Create a user account for a voter.
      $voter = $this->drupalCreateUser(array(
        'view published elections',
        'vote in elections',
      ));
      // Make sure the post allows that user's role to vote.
      $post->rids = array_keys($voter->roles);
      election_post_save($post);
      // Create the possible votes for each election type.
      switch ($bundle) {
        case 'referendum':
          $vote = array(
            'answer' => ELECTION_ANSWER_YES,
          );
          break;

        case 'stv':
          // For STV elections, create enough (published) candidates for voting
          // to be possible.
          $candidates = array();
          for ($i = 1; $i <= $post->vacancy_count + 1; $i++) {
            $candidates[] = $this->helperElectionCandidateCreate($post, TRUE);
          }
          $vote = array(
            'candidate_' . $candidates[0]->candidate_id => '1',
            'candidate_' . $candidates[1]->candidate_id => '2',
          );
          break;

      }
      // Log in as the voter.
      $this->drupalLogin($voter);
      // Submit the vote.
      $this->drupalPost($vote_form_path, $vote, t('Voteâ€¦'));
      $this->assertText(
        t('Are you sure you want to cast this vote?'),
        t('Vote submitted and confirmation form reached.')
      );
      // Confirm the vote.
      $this->drupalPost(NULL, array(), t('Confirm'));
      $this->assertText(t('Thank you'), t('Vote completed.'));
      // Access the voting form again.
      $this->drupalGet($vote_form_path);
      // Check that the message "You have already voted" is displayed.
      $this->assertText(
        t('You have already voted'),
        t('Access is denied for the voting form after voting.')
      );
      $this->drupalLogout();
    }
  }
}
