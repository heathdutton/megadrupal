<?php
/**
 * @file
 * Test the Election Candidate module for candidate types CRUD functionality.
 */

class ElectionCandidateTypeCrudTestCase extends DrupalWebTestCase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Candidate Type CRUD',
      'description' => 'A basic CRUD (Create, Read, Update, Delete) test for candidate types.',
      'group' => 'Election Candidate',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array(
      'election_stv',
    );
    parent::setUp($modules);
  }

  /**
   * Create, update, and delete an election candidate type.
   */
  public function testElectionCandidateTypeCrud() {

    // Create a user who has the appropriate permissions for this test.
    $test_user = $this->drupalCreateUser(array(
      'administer candidate types',
    ));
    // Log in as that user.
    $this->drupalLogin($test_user);

    // Create a new candidate type using the UI, with a random label and random
    // machine name.
    $label = $this->randomString();
    $machine_name = strtolower($this->randomName());
    $properties = array('label' => $label, 'type' => $machine_name);
    $this->drupalPost('admin/config/election/candidate-types/add', $properties, t('Save candidate type'));
    $this->assertResponse(200, t('Redirected to an existing page after adding a candidate type.'));

    // Load the candidate type by its machine name to check that it exists.
    $candidate_type = election_candidate_type_load($machine_name);
    $this->assertTrue((bool) $candidate_type, t('The candidate type %label exists.', array(
      '%label' => $label,
    )));

    $manage_path = 'admin/config/election/candidate-types/manage/' . $machine_name;
    $this->drupalGet($manage_path . '/fields');
    $this->assertResponse(200, t('The "Manage fields" page for the candidate type exists and can be accessed.'));
    $this->drupalGet($manage_path . '/display');
    $this->assertResponse(200, t('The "Manage display" page for the candidate type exists and can be accessed.'));

    // Update both the label and the machine name via the UI.
    $new_label = $this->randomString();
    $new_machine_name = strtolower($this->randomName());
    $new_properties = array('label' => $new_label, 'type' => $new_machine_name);
    $this->drupalPost($manage_path . '/edit', $new_properties, t('Save candidate type'));

    $candidate_type = election_candidate_type_load($new_machine_name);
    $this->assertTrue((bool) $candidate_type, t('The candidate type was successfully edited.', array(
      '%label' => $new_label,
    )));
    $this->assertIdentical($candidate_type->label, $new_label, t('The candidate type has the correct label after editing.'));

    $manage_path = 'admin/config/election/candidate-types/manage/' . $new_machine_name;

    // Delete the candidate type via the UI.
    $this->drupalPost($manage_path . '/delete', array(), t('Confirm'));
    $this->assertRaw(t('Deleted %entity %label', array(
      '%entity' => t('Candidate type'),
      '%label' => $new_label,
    )), t('The candidate type was successfully deleted.'));
  }

}
