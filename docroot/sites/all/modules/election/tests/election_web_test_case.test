<?php
/**
 * @file
 * Parent class for further test cases of the Election module.
 */

class ElectionWebTestCase extends DrupalWebTestCase {

  /**
   * Helper function to create an election of a given type.
   *
   * @param string $bundle
   *   An election type machine name.
   * @param bool $published
   *   The initial published status for the election (default: FALSE).
   * @param object $owner
   *   The account owning the election (default: a new user account with
   *   requisite permissions).
   * @param int $nstatus
   *   The initial nominations status for the election (default:
   *   ELECTION_STATUS_CLOSED).
   * @param int $vstatus
   *   The initial voting status for the election (default:
   *   ELECTION_STATUS_CLOSED).
   *
   * @return object
   *   A saved election object.
   */
  protected function helperElectionCreate($bundle, $published = FALSE, $owner = NULL, $nstatus = NULL, $vstatus = NULL) {
    static $default_owner;
    if ($owner === NULL) {
      if ($default_owner === NULL) {
        $default_owner = $this->drupalCreateUser(array(
          'create elections',
          'edit own elections',
        ));
      }
      $owner = $default_owner;
    }
    if ($vstatus === NULL) {
      $vstatus = ELECTION_STATUS_CLOSED;
    }
    if ($nstatus === NULL) {
      $nstatus = ELECTION_STATUS_CLOSED;
    }
    $election = entity_get_controller('election')->create(array(
      'title' => $this->randomString(),
      'uid' => $owner->uid,
      'type' => $bundle,
      'published' => $published ? 1 : 0,
      'vstatus' => $vstatus,
      'nstatus' => $nstatus,
    ));
    election_save($election);
    // Reload the election so it gets processed correctly.
    return election_load($election->election_id, TRUE);
  }

  /**
   * Helper function to create an election post.
   *
   * @param object $election
   *   The election associated with the post.
   * @param bool $published
   *   Whether the post should be published (default: FALSE).
   *
   * @return object
   *   The saved election post object.
   */
  protected function helperElectionPostCreate($election, $published = FALSE) {
    $post_controller = entity_get_controller('election_post');
    $post = $post_controller->create(array(
      'election_id' => $election->election_id,
      'type' => $election->type_info['post machine name'],
      'title' => $this->randomString(),
      'published' => $published ? 1 : 0,
    ));
    $post_controller->save($post);
    return election_post_load($post->post_id);
  }

  /**
   * Helper function to create a candidate for a given post.
   *
   * @param object $post
   *   An election post object.
   * @param bool $published
   *   The initial published status for the candidate (default: FALSE).
   * @param string $given_name
   *   The given name of the candidate (default: random string).
   * @param string $family_name
   *   The family name of the candidate (default: random string).
   * @param string $mail
   *   The e-mail address of the candidate (default: randomname@example.com).
   * @param int $cstatus
   *   The status of the candidate (default: ELECTION_CANDIDATE_HOPEFUL).
   *
   * @return object
   *   A saved candidate object, associated with the given post. The candidate
   *   will be published and in the 'Hopeful' status.
   */
  protected function helperElectionCandidateCreate(stdClass $post, $published = FALSE, $given_name = NULL, $family_name = NULL, $mail = NULL, $cstatus = NULL) {
    $candidate_controller = entity_get_controller('election_candidate');
    $candidate_type = !empty($post->settings['candidate_type']) ? $post->settings['candidate_type'] : 'candidate';
    $candidate_properties = array(
      'type' => $candidate_type,
      'election_id' => $post->election->election_id,
      'post_id' => $post->post_id,
      'cstatus' => $cstatus === NULL ? ELECTION_CANDIDATE_HOPEFUL : $cstatus,
      'published' => $published ? 1 : 0,
    );
    $candidate = $candidate_controller->create($candidate_properties);
    $candidate->candidate_name[LANGUAGE_NONE][0]['given'] = $given_name ? $given_name : $this->randomString();
    $candidate->candidate_name[LANGUAGE_NONE][0]['family'] = $family_name ? $family_name : $this->randomString();
    $candidate->candidate_mail[LANGUAGE_NONE][0]['email'] = $mail ? $mail : $this->randomName() . '@example.com';
    election_candidate_save($candidate);
    return $candidate;
  }

}
