<?php
/**
 * @file
 * Test the Election Candidate module's tokens.
 */

class ElectionCandidateTokenTestCase extends ElectionWebTestCase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Candidate tokens',
      'description' => 'Test candidate tokens.',
      'group' => 'Election Candidate',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array(
      'election_stv',
    );
    parent::setUp($modules);
  }

  /**
   * Test the candidate tokens.
   */
  public function testTokens() {
    // Create a published election of type 'stv', with open nominations.
    $election = $this->helperElectionCreate('stv', TRUE);
    // Create a published post in the election.
    $post = $this->helperElectionPostCreate($election, TRUE);

    // Create a published candidate, with known names that include HTML
    // special characters, and a known email address.
    $given_name = $this->randomString() . ' & <test>';
    $family_name = $this->randomString() . ' & <test>';
    $mail = $this->randomName() . '@test.example.com';
    $candidate = $this->helperElectionCandidateCreate($post, TRUE, $given_name, $family_name, $mail);

    // Create token test data.
    $data = array('election_candidate' => $candidate);

    // Test name token replacement (not sanitized).
    $test_string = "The candidate's name is '[election_candidate:name]'.";
    $text = token_replace($test_string, $data, array('sanitize' => FALSE));
    $test_string_replaced = "The candidate's name is '{$given_name} {$family_name}'.";
    $this->assertEqual($text, $test_string_replaced, t('Name token is replaced correctly.'));

    // Test name token replacement (sanitized for HTML). Note that the token
    // system sanitizes the replaced tokens, but it does not change the rest of
    // the string.
    $text = token_replace($test_string, $data);
    $test_string_replaced = "The candidate's name is '" . check_plain($given_name . ' ' . $family_name) . "'.";
    $this->assertEqual($text, $test_string_replaced, t('Name token is replaced and sanitized correctly.'));

    // Test ID token replacement.
    $test_string = "The candidate's ID is '[election_candidate:id]'.";
    $test_string_replaced = "The candidate's ID is '{$candidate->candidate_id}'.";
    $text = token_replace($test_string, $data, array('sanitize' => FALSE));
    $this->assertEqual($text, $test_string_replaced, t('ID token is replaced correctly.'));

    // Test post title token replacement.
    $test_string = "The candidate's election post is '[election_candidate:post]'.";
    $test_string_replaced = "The candidate's election post is '" . $post->title . "'.";
    $text = token_replace($test_string, $data, array('sanitize' => FALSE));
    $this->assertEqual($text, $test_string_replaced, t('Post token is replaced correctly.'));

    // Test election title token replacement.
    $test_string = "The candidate's election is '[election_candidate:election]'.";
    $test_string_replaced = "The candidate's election is '" . $election->title . "'.";
    $text = token_replace($test_string, $data, array('sanitize' => FALSE));
    $this->assertEqual($text, $test_string_replaced, t('Election token is replaced correctly.'));

    // Test email address token replacement.
    $test_string = "The candidate's e-mail address is '[election_candidate:candidate-mail]'.";
    $test_string_replaced = "The candidate's e-mail address is '" . $mail . "'.";
    $text = token_replace($test_string, $data, array('sanitize' => FALSE));
    $this->assertEqual($text, $test_string_replaced, t('E-mail address token is replaced correctly.'));
  }

}
