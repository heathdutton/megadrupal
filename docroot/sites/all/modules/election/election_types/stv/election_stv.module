<?php
/**
 * @file
 * Primary module file for the election_stv module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add STV-specific settings to the election post (position) edit form.
 */
function election_stv_form_election_post_form_alter(&$form, &$form_state) {

  $post = $form_state['post'];

  $election = $form_state['election'];
  if ($election->type != 'stv') {
    return;
  }

  $form['candidates_nominations']['settings_use_ron'] = array(
    '#type' => 'select',
    '#title' => t('RON (Re-Open Nominations)'),
    '#default_value' => isset($post->settings['use_ron']) ? $post->settings['use_ron'] : 0,
    '#options' => array(
      0 => t('Do not include RON'),
      1 => t('Include RON as a candidate'),
    ),
  );

  $form['voting']['settings_allow_equal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow equal rankings'),
    '#default_value' => isset($post->settings['allow_equal']) ? $post->settings['allow_equal'] : 0,
    '#description' => t('Used (rarely) in STV elections, this allows the voter to select more than one candidate as the same preference.'),
  );

  $form['#validate'][] = 'election_stv_post_settings_validate';

}

/**
 * Form validate function for the STV position settings.
 *
 * @see election_stv_form_election_post_form_alter()
 */
function election_stv_post_settings_validate($form, &$form_state) {

  // @todo Implement a settings form for this variable.
  if ($form_state['values']['settings_use_ron'] == 1 && isset($form_state['values']['vacancy_count']) && $form_state['values']['vacancy_count'] > 1 && !variable_get('election_allow_multi_vacancy_ron', TRUE)) {
    form_set_error('use_ron', t('RON can only be included for single-vacancy positions.'));
  }

}

/**
 * Implements hook_views_default_views_alter().
 */
function election_stv_views_default_views_alter(&$views) {
  // Add a new display to the View used for the list of election posts.
  if (isset($views['election_posts'])) {
    $view = $views['election_posts'];
    if (!isset($view->display['embed_stv'])) {
      require_once 'embed_stv_view_display.inc';
    }
  }
}

/**
 * Implements hook_ENTITY_view_alter().
 */
function election_stv_election_view_alter(&$build) {
  // Show the right Views display on STV elections.
  // See election_stv_views_default_views_alter().
  $election = $build['#election'];
  if ($election->type == 'stv' && $build['#view_mode'] == 'full') {
    $posts_name = election_get_post_name($election->type, TRUE);
    $build['posts'] = array(
      '#theme' => 'election_post_list_embed',
      '#title' => drupal_ucfirst($posts_name),
      '#display' => 'embed_stv',
      '#args' => array($election->election_id),
    );
  }
}

/**
 * Form modifying function - voting form (election-post/%election_post/vote).
 */
function election_stv_vote_form(&$form, &$form_state) {

  $post = $form_state['post'];
  $election = $post->election;

  // Load candidates.
  $candidates = election_candidate_load_by_post($post, array(ELECTION_CANDIDATE_HOPEFUL), TRUE, 'RAND()');
  $form_state['candidates'] = $candidates;

  $num_candidates = count($candidates);
  $form_state['num_candidates'] = $num_candidates;

  if ($num_candidates == 0) {
    drupal_set_message(t('Voting is currently closed: there are no published candidates standing for this @post.', array('@post' => election_get_post_name($election->type))), 'warning', FALSE);
    $form['#disabled'] = TRUE;
    drupal_goto(election_post_uri_path($post));
  }

  $rank_options = array();

  if (!empty($post->settings['allow_equal'])) {
    $form['#attributes']['class'][] = 'allow-equal';
  }

  // Add a 'No preference' option which means the candidate would not be ranked.
  $rank_options['NONE'] = t('No preference');

  // Find all the other possible rank options.
  // This provides n levels (n = number of (candidates + ron)) described as
  // ordinals (e.g. First, Second, Third).
  $pref_limit = $num_candidates;
  if (!empty($post->settings['use_ron'])) {
    $pref_limit++;
  }
  for ($i = 1; $i <= $pref_limit; $i++) {
    $rank_options[$i] = _election_stv_get_ordinal($i);
  }

  $post_name = election_get_post_name($election->type);

  $form['post_help'] = array('#type' => 'container');

  $form['post_help']['nums'] = array(
    '#markup' => t(
      'The following candidates are standing for the @post <a href="@post_url">%post_title</a> (!vacancies).',
      array(
        '@post' => $post_name,
        '%post_title' => $post->title,
        '@post_url' => url(election_post_uri_path($post)),
        '!vacancies' => format_plural($post->vacancy_count, '1 vacancy', '@count vacancies'),
      )
    ),
  );

  $form['ballot_paper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Your ballot paper'),
    '#attributes' => array('class' => array('election-ballot-paper')),
    '#description' => t('Please rank the candidates according to your preference.'),
  );

  if (count($candidates) > 1 || $post->settings['use_ron']) {
    $form['ballot_paper']['#description'] .= ' ' . t('Candidates are displayed in a random order.');
  }

  $form['ballot_paper']['start'] = array(
    '#markup' => '<table class="election-ballot-table"><tr><th>' . t('Name') . '</th><th>' . t('Preference') . '</th></tr>',
  );

  foreach ($candidates as $candidate) {
    $form['ballot_paper']['candidate_' . $candidate->candidate_id] = array(
      '#type' => 'select',
      '#prefix' => '<tr class="election-ballot-row"><td>'
      . theme('election_candidate_ballot_item', array('candidate' => $candidate))
      . '</td><td>',
      '#suffix' => '</td></tr>',
      '#title' => t('Your rank for %candidate', array('%candidate' => election_candidate_get_name($candidate, FALSE))),
      '#title_display' => 'invisible',
      '#options' => $rank_options,
      '#required' => FALSE,
      '#default_value' => 'NONE',
      '#attributes' => array('class' => array('election-candidate-preference-select')),
    );
  }

  if (!empty($post->settings['use_ron'])) {
    $form['ballot_paper']['candidate_RON'] = array(
      '#type' => 'select',
      '#prefix' => '<tr class="election-ballot-row ballot-item-ron"><td>' . t('RON (Re-Open Nominations)') . '</td><td>',
      '#suffix' => '</td></tr>',
      '#title' => t('Your rank for %candidate', array('%candidate' => t('RON (Re-Open Nominations)'))),
      '#title_display' => 'invisible',
      '#options' => $rank_options,
      '#required' => FALSE,
      '#default_value' => 'NONE',
      '#attributes' => array('class' => array('election-candidate-preference-select')),
    );
  }

  $form['ballot_paper']['end'] = array(
    '#markup' => '</table>',
  );

  $form['#attached']['js'][] = drupal_get_path('module', 'election_stv') . '/ballot-paper.min.js';
  $form['#validate'][] = 'election_stv_vote_form_validate';
}

/**
 * Validate the voting form (for STV elections).
 */
function election_stv_vote_form_validate($form, &$form_state) {

  $post = $form_state['post'];

  $error = FALSE;

  $candidate_rankings = array();
  $already_used = array();
  $someone_ranked = FALSE;

  // Add each selected preference to $candidate_rankings.
  foreach ($form_state['values'] as $key => $value) {
    // The form values are keyed by candidate ID, prefixed with 'candidate_'.
    if (substr($key, 0, 10) == 'candidate_') {
      $candidate_id = substr($key, 10);
      $candidate_rankings[$candidate_id] = $value;
      if (isset($already_used[$value]) && !$post->settings['allow_equal']) {
        form_set_error('', t('You have specified more than one candidate as your %ordinal preference. Candidates cannot be ranked equally.', array('%ordinal' => _election_stv_get_ordinal($value))));
        $error = TRUE;
        break;

      }
      if ($value != 'NONE' && $value !== NULL) {
        $someone_ranked = TRUE;
        $already_used[$value] = $key;
      }
    }
  }

  if (!$someone_ranked) {
    form_set_error('', t('You must rank at least one candidate in order to vote.'));
    $error = TRUE;
  }

  // Skip the rest of this function if the input was invalid.
  if ($error) {
    return;
  }

  // Assemble the ranks in order (1st, 2nd, 5th, 8th, etc.)
  asort($candidate_rankings);

  // Force the ranks to be consecutive.
  $original_rankings = $candidate_rankings;
  $consecutive_rank = 0;
  $rank_changes = array(); // Keep a log of changes for later.
  $previous_rank = NULL;
  foreach ($candidate_rankings as $candidate_id => &$rank) {
    // Allow for 'No preference'.
    if ($rank == 'NONE') {
      continue;
    }
    // Increment $consecutive_rank, if equal rankings are not allowed.
    if (empty($post->settings['allow_equal']) || !isset($previous_rank) || $rank != $previous_rank) {
      $consecutive_rank++;
    }
    // Save the rank as $previous_rank for the next iteration.
    $previous_rank = $rank;
    // Make changes if needed and log them to the $rank_changes array.
    if ($rank != $consecutive_rank) {
      $rank_changes[$candidate_id] = array($rank, $consecutive_rank);
      $rank = $consecutive_rank;
    }
  }

  // Save this to $form_state so it can be used when confirming/saving votes.
  $form_state['candidate_rankings'] = $candidate_rankings;
  $form_state['original_rankings'] = $original_rankings;
  $form_state['rank_changes'] = $rank_changes;

}

/**
 * Implements hook_election_vote_ELECTION_TYPE_save().
 *
 * Save votes for an STV election.
 */
function election_stv_election_vote_stv_save($ballot_id, $post, $vote_form, $vote_form_state) {

  $election = $post->election;
  if ($election->type != 'stv') {
    return TRUE;
  }

  $candidate_rankings = $vote_form_state['candidate_rankings'];

  foreach ($candidate_rankings as $cid => $candidate_ranking) {

    if ($candidate_ranking == 'NONE') {
      // Don't save anything if the user did not rank this candidate.
      continue;
    }

    $vote_entry = array(
      'ballot_id' => $ballot_id,
      'election_id' => $post->election_id,
      'post_id' => $post->post_id,
      'rank' => $candidate_ranking,
    );

    if ($cid == 'RON') {
      $vote_entry['ron'] = 1;
    }
    else {
      $vote_entry['candidate_id'] = $cid;
    }

    // Note the whole of this function is inside a DB transaction.
    $insert_id = db_insert('election_vote')
      ->fields($vote_entry)
      ->execute();

    if (!$insert_id) {
      return FALSE;
    }

  }

  return TRUE;

}

/**
 * Find the ordinal of a number.
 */
function _election_stv_get_ordinal($num) {
  $ends = array('th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th');
  if ($num % 100 >= 11 && $num % 100 <= 13) {
    $ord = $num . 'th';
  }
  else {
    $ord = $num . $ends[$num % 10];
  }
  return t($ord);
}

/**
 * Preprocess function for the voting confirmation page.
 */
function election_stv_preprocess_election_vote_confirm(&$variables) {

  $form_state = $variables['form_state'];
  $election = $form_state['election'];

  if ($election->type == 'stv') {
    $candidate_rankings = $form_state['candidate_rankings'];
    $original_rankings = $form_state['original_rankings'];

    $rank_changes = $form_state['rank_changes'];
    $ranking_changed = count($rank_changes) ? TRUE : FALSE;
    $variables['ranking_changed'] = $ranking_changed;

    $header = array(t('Candidate'));
    $rows = array();
    foreach ($candidate_rankings as $candidate_id => $rank) {
      if ($candidate_id == 'RON') {
        $candidate_item = t('RON (Re-Open Nominations)');
      }
      else {
        $candidate = $form_state['candidates'][$candidate_id];
        $candidate_item = election_candidate_get_name($candidate);
      }
      $rows[$candidate_id][] = $candidate_item;
    }

    // Add an intermediate column, if the user's input had to be reinterpreted.
    if ($ranking_changed) {
      $header[] = t('Your input');
      foreach ($original_rankings as $candidate_id => $rank) {
        $rows[$candidate_id][] = $rank == 'NONE' ? t('-') : _election_stv_get_ordinal($rank);
      }
    }

    $header[] = t('Your vote') . ($ranking_changed ? '<sup>*</sup>' : '');
    foreach ($candidate_rankings as $candidate_id => $rank) {
      $rows[$candidate_id][] = $rank == 'NONE' ? t('-') : _election_stv_get_ordinal($rank);
    }

    $variables['confirm']['rankings'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#weight' => 1,
    );

    if ($ranking_changed) {
      $variables['confirm']['warning'] = array(
        '#markup' => '<p><sup>*</sup>' . t('Your input is converted so that the candidates are ranked consecutively.') . '</p>',
        '#weight' => 2,
      );
    }

  }

}

/**
 * Implements template_preprocess_election_statistics().
 */
function election_stv_preprocess_election_statistics(&$variables) {
  $election = $variables['election'];
  if ($election->type == 'stv') {
    $totals = $variables['totals'];
    $query = db_select('election_ballot', 'eb')
      ->condition('eb.election_id', $election->election_id)
      ->condition('eb.value', 0, '>')
      ->condition('eb.abstain', 0);
    $query->join('election_vote', 'ev', 'ev.ballot_id = eb.ballot_id');
    $query->addExpression('COUNT(DISTINCT ev.vote_id)');
    $totals['rankings'] = $query->execute()->fetchField();
    $variables['content']['election_table']['#header']['rankings'] = t('Rankings (STV)');
    $variables['content']['election_table']['#rows'][0]['rankings'] = t('@rankings (@avg per ballot)', array(
      '@rankings' => number_format($totals['rankings']),
      '@avg' => number_format($totals['ballots'] ? ($totals['rankings'] / $totals['ballots']) : 0, 1),
    ));
  }
}
