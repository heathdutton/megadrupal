<?php
/**
 * @file
 * Primary module file for the election_referendum module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function election_referendum_form_election_form_alter(&$form, &$form_state) {
  // Tweak the help text for the 'Published' option so that it refers to "the
  // referendum" instead of "the election".
  if ($form_state['election']->type == 'referendum') {
    $form['published']['#description'] = t("This allows those with the '!perm' permission to view the referendum.", array(
      '!perm' => t('View published elections'),
    ));
  }
}

/**
 * Implements template_preprocess_election_post().
 */
function election_referendum_preprocess_election_post(&$vars) {
  // A link to the election is displayed on election posts labelled with
  // 'Election'. Alter this to say 'Referendum'.
  if ($vars['election']->type == 'referendum' && isset($vars['content']['election'])) {
    $vars['content']['election']['#label'] = t('Referendum');
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function election_referendum_views_default_views_alter(&$views) {
  // Add a new display to the View used for the list of election posts.
  if (isset($views['election_posts'])) {
    $view = $views['election_posts'];
    if (!isset($view->display['embed_referendum'])) {
      require_once 'embed_referendum_view_display.inc';
    }
  }
}

/**
 * Implements hook_ENTITY_view_alter().
 */
function election_referendum_election_view_alter(&$build) {
  // Show the right Views display on referendums.
  // See election_referendum_views_default_views_alter().
  $election = $build['#election'];
  if ($election->type == 'referendum' && $build['#view_mode'] == 'full') {
    $posts_name = election_get_post_name($election->type, TRUE);
    $build['posts'] = array(
      '#theme' => 'election_post_list_embed',
      '#title' => drupal_ucfirst($posts_name),
      '#display' => 'embed_referendum',
      '#args' => array($election->election_id),
    );
  }
}

/**
 * Preprocess function for the voting confirmation page.
 */
function election_referendum_preprocess_election_vote_confirm(&$variables) {

  $form_state = $variables['form_state'];
  $election = $form_state['election'];
  $post = $form_state['post'];

  if ($election->type == 'referendum') {

    $answer = $form_state['values']['answer'];

    $variables['confirm'] += array(
      'post' => array(
        '#type' => 'item',
        '#title' => drupal_ucfirst(election_get_post_name('referendum')),
        '#markup' => check_plain($post->title),
      ),
      'answer' => array(
        '#type' => 'item',
        '#title' => t('Your answer'),
        '#markup' => drupal_placeholder(
          _election_referendum_get_answer_text($post, $answer)
        ),
      ),
    );

  }

}

/**
 * Alter the results page to display referendum result counts.
 */
function election_referendum_election_results_page_alter(&$output, stdClass $post) {

  $election = $post->election;

  if ($election->type != 'referendum') {
    return;
  }

  // Create the results table header, using the user-defined answers.
  $header = array(
    check_plain(_election_referendum_get_answer_text($post, ELECTION_ANSWER_YES)),
    check_plain(_election_referendum_get_answer_text($post, ELECTION_ANSWER_NO)),
  );

  // Count the yes & no votes.
  $yes = election_referendum_count_votes_by_answer($post, ELECTION_ANSWER_YES);
  $no = election_referendum_count_votes_by_answer($post, ELECTION_ANSWER_NO);

  // Calculate the results as percentages of the total number of votes.
  $totals = election_results_get_totals($post);
  $pc_yes = $totals['votes'] == 0 ? 0 : ($yes / $totals['votes']) * 100;
  $pc_no = $totals['votes'] == 0 ? 0 : ($no / $totals['votes']) * 100;

  $rows = array(
    array(
      number_format($yes) . ' (' . number_format($pc_yes, 2) . '% of votes)',
      number_format($no) . ' (' . number_format($pc_no, 2) . '% of votes)',
    ),
  );

  $output['answers'] = array(
    '#theme' => 'table',
    '#caption' => t('Answers'),
    '#header' => $header,
    '#rows' => $rows,
  );

}

/**
 * Count the number of votes for a post according to the answer given.
 *
 * @param object $post
 *   The election post (referendum question) object.
 * @param int $answer
 *   The answer given (either ELECTION_ANSWER_YES or ELECTION_ANSWER_NO).
 *
 * @return int
 *   The number of votes.
 */
function election_referendum_count_votes_by_answer($post, $answer) {
  $query = db_select('election_vote')
    ->condition('post_id', $post->post_id)
    ->condition('valid', 1)
    ->condition('abstain', 0)
    ->condition('answer', $answer);
  $query->addExpression('COUNT(*)');
  return $query->execute()->fetchField();
}

/**
 * Form modifying function - voting form (election-post/%election_post/vote).
 */
function election_referendum_vote_form(&$form, &$form_state) {

  $post = $form_state['post'];
  $election = $post->election;

  $form['post_preview'] = array(
    '#type' => 'item',
    '#title' => check_plain(drupal_ucfirst(election_get_post_name($election->type))),
    '#markup' => t('@post (<a href="@post_url">view details</a>)', array(
      '@post' => $post->title,
      '@post_url' => url(election_post_uri_path($post)),
    )),
  );

  $form['answer'] = array(
    '#type' => 'radios',
    '#title' => t('Your answer'),
    '#options' => array(
      ELECTION_ANSWER_YES => check_plain(
        _election_referendum_get_answer_text($post, ELECTION_ANSWER_YES)
      ),
      ELECTION_ANSWER_NO => check_plain(
        _election_referendum_get_answer_text($post, ELECTION_ANSWER_NO)
      ),
    ),
    '#required' => TRUE,
  );

  $form['#validate'][] = 'election_referendum_vote_form_validate';

}

/**
 * Validate the voting form.
 */
function election_referendum_vote_form_validate($form, &$form_state) {

  // Add 'answer' to $form_state (so it's available for later).
  $form_state['answer'] = $form_state['values']['answer'];

}

/**
 * Implements hook_election_vote_ELECTION_TYPE_save().
 *
 * Save answer to a question in a referendum.
 */
function election_referendum_election_vote_referendum_save($ballot_id, $post, $vote_form, $vote_form_state) {

  $vote = array(
    'election_id' => $post->election_id,
    'ballot_id' => $ballot_id,
    'post_id' => $post->post_id,
    'answer' => $vote_form_state['answer'],
  );

  $success = db_insert('election_vote')
    ->fields($vote)
    ->execute();

  return $success ? TRUE : FALSE;

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add referendum-specific settings to the election_post edit form.
 */
function election_referendum_form_election_post_form_alter(&$form, &$form_state) {

  $post = $form_state['post'];
  $election = $form_state['election'];
  if ($election->type != 'referendum') {
    return;
  }

  $form['title']['#title'] = t('Question');

  $form['answers'] = array(
    '#type' => 'fieldset',
    '#title' => t('Answers'),
    '#description' => t('Define the valid positive and negative answers to this @post (e.g. Yes/No, Agree/Disagree, etc.).',
      array('@post' => election_get_post_name($election->type))),
    '#weight' => -30,
    '#collapsible' => TRUE,
  );
  $form['answers']['settings_answer_pos'] = array(
    '#type' => 'textfield',
    '#title' => t('Positive answer'),
    '#default_value' => _election_referendum_get_answer_text($post, ELECTION_ANSWER_YES),
    '#maxlength' => 10,
    '#size' => 10,
  );
  $form['answers']['settings_answer_neg'] = array(
    '#type' => 'textfield',
    '#title' => t('Negative answer'),
    '#default_value' => _election_referendum_get_answer_text($post, ELECTION_ANSWER_NO),
    '#maxlength' => 10,
    '#size' => 10,
  );
  $form['#validate'][] = 'election_referendum_settings_validate';
}

/**
 * Form validate function for the referendum post settings.
 *
 * @see election_referendum_form_election_post_form_alter()
 */
function election_referendum_settings_validate($form, &$form_state) {
  if ($form_state['values']['settings_answer_pos'] == $form_state['values']['settings_answer_neg']) {
    form_set_error('answers', t('The positive and negative answers cannot be the same.'));
  }
}

/**
 * Implements hook_field_extra_fields_alter().
 */
function election_referendum_field_extra_fields_alter(&$info) {
  // Add properties to the 'Manage fields' form for referendum questions.
  if (isset($info['election_post']['referendum_post']['form'])) {
    $info['election_post']['referendum_post']['form'] += array(
      'answers' => array(
        'label' => t('Answers'),
        'weight' => 1,
      ),
    );
  }
}

/**
 * Extract the answer text (Yes/No, Agree/Disagree etc.) for a referendum post.
 */
function _election_referendum_get_answer_text($post, $answer) {
  switch ($answer) {
    case ELECTION_ANSWER_YES:
      if (!empty($post->settings['answer_pos'])) {
        return $post->settings['answer_pos'];
      }
      return t('Yes');

    case ELECTION_ANSWER_NO:
      if (!empty($post->settings['answer_neg'])) {
        return $post->settings['answer_neg'];
      }
      return t('No');

  }
}
