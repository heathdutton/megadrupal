<?php
/**
 * @file
 * Install functions for the Election Vote module.
 */

/**
 * Implements hook_schema().
 */
function election_vote_schema() {

  $schema = array();

  $schema['election_vote'] = array(
    'description' => 'The votes table for the election module.',
    'fields' => array(
      'vote_id' => array(
        'description' => 'Primary key: identifier for a vote.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'election_id' => array(
        'description' => 'The election in which the vote was cast. Relates to {election}.election_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'post_id' => array(
        'description' => 'Relates to {election_post}.post_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'ballot_id' => array(
        'description' => 'Relates to {election_ballot}.ballot_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'abstain' => array(
        'description' => 'Whether or not the voter abstained.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'answer' => array(
        'description' => sprintf(
          'For referendums: the answer (no %d or yes %d).',
          ELECTION_ANSWER_NO,
          ELECTION_ANSWER_YES
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'candidate_id' => array(
        'description' => 'For ranked elections: the candidate being ranked.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'rank' => array(
        'description' => 'For ranked elections: the rank of the candidate in the ballot.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'ron' => array(
        'description' => 'For ranked elections: whether or not the candidate being ranked is RON (Re-Open Nominations).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'valid' => array(
        'description' => 'Whether the vote is still valid. If set to 0, the vote will not be counted.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('vote_id'),
    'indexes' => array(
      'ballot_id' => array('ballot_id'),
      'election_id' => array('election_id'),
      'post_id' => array('post_id'),
      'candidate_id' => array('candidate_id'),
      'rank' => array('rank'),
      'ron' => array('ron'),
      'answer' => array('answer'),
      'abstain' => array('abstain'),
      'valid' => array('valid'),
    ),
    'foreign keys' => array(
      'election' => array(
        'table' => 'election',
        'columns' => array('election_id' => 'election_id'),
      ),
      'post' => array(
        'table' => 'election_post',
        'columns' => array('post_id' => 'post_id'),
      ),
      'ballot' => array(
        'table' => 'election_ballot',
        'columns' => array('ballot_id' => 'ballot_id'),
      ),
    ),
  );

  $schema['election_ballot'] = array(
    'description' => 'The ballots table for the election module. This records the act of voting, but the voting preferences themselves are in the table {election_vote}.',
    'fields' => array(
      'ballot_id' => array(
        'description' => 'Primary key: identifier for a ballot.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'election_id' => array(
        'description' => 'The election in which the ballot was cast. Relates to {election}.election_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'post_id' => array(
        'description' => 'The post for which the ballot was cast. Relates to {election_post}.post_id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the voter.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'ip' => array(
        'description' => 'The IP address of the voter (v4 or v6).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'agent' => array(
        'description' => 'The HTTP User Agent of the voter.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'sid_hash' => array(
        'description' => 'An MD5 hash of the voter\'s session ID.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'A UNIX timestamp for when the ballot was cast.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'valid' => array(
        'description' => 'Whether the ballot is still valid. If set to 0, the ballot will not be counted.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('ballot_id'),
    'indexes' => array(
      'election_id' => array('election_id'),
      'post_id' => array('post_id'),
      'uid' => array('uid'),
      'agent' => array('agent'),
      'timestamp' => array('timestamp'),
      'ip' => array('ip'),
      'sid_hash' => array('sid_hash'),
      'valid' => array('valid'),
    ),
    'foreign keys' => array(
      'election' => array(
        'table' => 'election',
        'columns' => array('election_id' => 'election_id'),
      ),
      'post' => array(
        'table' => 'election_post',
        'columns' => array('post_id' => 'post_id'),
      ),
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  return $schema;

}

/**
 * Add the 'valid' column to the election_vote and election_ballot tables.
 */
function election_vote_update_7001() {
  $schema = array(
    'description' => 'Whether the vote is still valid. If set to 0, the vote will not be counted.',
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 1,
  );
  db_add_field('election_vote', 'valid', $schema);
  $schema['description'] = 'Whether the ballot is still valid. If set to 0, the ballot will not be counted.';
  db_add_field('election_ballot', 'valid', $schema);
  db_add_index('election_vote', 'valid', array('valid'));
  db_add_index('election_ballot', 'valid', array('valid'));
}
