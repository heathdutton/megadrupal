<?php
/**
 * @file
 * Main letter_default_avatar module file.
 */

/**
 * Implements hook_permission().
 */
function letter_default_avatar_permission() {
  return array(
    'administer letter_default_avatar' => array(
      'title' => 'Administer Letter Default Avatar',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function letter_default_avatar_menu() {
  $items = array();

  $items['admin/config/people/letter-default-avatar'] = array(
    'title' => 'Letter Default Avatar settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('letter_default_avatar_admin_settings'),
    'access arguments' => array('administer letter_default_avatar'),
  );

  return $items;
}

/**
 * Admin settings form callback.
 */
function letter_default_avatar_admin_settings() {
  $form = array();

  $form['letter_default_avatar_set_picture_fid'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set a users picture field when adding a default avatar'),
    '#default_value' => variable_get('letter_default_avatar_set_picture_fid', FALSE),
    '#description' => t("This is important stuff so read carefully! By default this is off though enabling this will ensure that your default avatar is seen everywhere. Places like Views will directly query the database for an image, if relying on <code>theme_user_picture</code> to provide a default this won't work. By setting the fid to the default avatar image this corrects that problem, in that case a new property on the user entity is set so we can tell that the image in place is a default one."),
  );

  $fonts = letter_default_avatar_get_fonts();
  $options = array();
  foreach ($fonts as $name => $font) {
    $options[$name] = $font['name'];
  }

  $form['letter_default_avatar_font'] = array(
    '#type' => 'select',
    '#title' => t('Font'),
    '#options' => $options,
    '#default_value' => variable_get('letter_default_avatar_font', 'helvetica'),
    '#description' => t('The library of characters to use, developers can add extra fonts via <code>hook_letter_default_avatar_fonts()</code>.'),
  );

  $font['letter_default_avatar_case_modify'] = array(
    '#type' => 'radios',
    '#title' => t('What to do with the character case'),
    '#options' => array(
      'uppercase' => t('Change the character to uppercase'),
      'lowercase' => t('Change the character to lowercase'),
      '' => t('Leave it as is'),
    ),
    '#default_value' => variable_get('letter_default_avatar_case_modify', 'uppercase'),
    '#description' => t('When generating the default avatar, you can modify the case of the character that will be used or otherwise leave it alone.'),
  );

  $form['letter_default_avatar_fallback_character'] = array(
    '#type' => 'textfield',
    '#title' => t('Fallback character'),
    '#default_value' => variable_get('letter_default_avatar_fallback_character', '?'),
    '#description' => t('The character to use when an image for the expected character cannot be found.'),
    '#maxlength' => 1,
    '#required' => TRUE,
  );

  $form['letter_default_avatar_add_wrapper'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add a wrapper to the avatar image'),
    '#default_value' => variable_get('letter_default_avatar_add_wrapper', TRUE),
    '#description' => t('This adds an element with data-* attributes such as user id, name and image preset in use.'),
  );

  $form['letter_default_avatar_wrapper_element'] = array(
    '#type' => 'select',
    '#title' => t('Element to use for the wrapper'),
    '#options' => array(
      'div' => t('Div'),
      'span' => t('Span'),
    ),
    '#default_value' => variable_get('letter_default_avatar_wrapper_element', 'div'),
  );

  $form['letter_default_avatar_profile_form_add_explanation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add explanation text to the user edit form which details that a default avatar has been generated for them.'),
    '#default_value' => variable_get('letter_default_avatar_profile_form_add_explanation', TRUE),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_letter_default_avatar_fonts().
 */
function letter_default_avatar_letter_default_avatar_fonts() {
  return array(
    'helvetica' => array(
      'name' => t('Helvetica'),
      'path' => drupal_get_path('module', 'letter_default_avatar') . '/fonts/helvetica',
    ),
  );
}

/**
 * Grab an array of available fonts.
 */
function letter_default_avatar_get_fonts($reset = FALSE) {
  $fonts = &drupal_static(__FUNCTION__);

  if (!isset($actions) || $reset) {
    $fonts = module_invoke_all('letter_default_avatar_fonts');
    drupal_alter('letter_default_avatar_fonts', $fonts);
  }

  return (array) $fonts;
}

/**
 * Implements hook_user_insert().
 */
function letter_default_avatar_user_insert(&$edit, $account, $category) {
  letter_default_avatar($account);
}

/**
 * Implements hook_user_update().
 */
function letter_default_avatar_user_update(&$edit, $account, $category) {
  // @todo if the user changes their username update their avatar.
  // Delete the old file entity then create a new one, update the picture fid
  // reference from the user entity.
  if (isset($edit['picture']) && $edit['picture'] != $edit['original']->picture) {
    // If the user has changed their name or deleted their picture, generate a
    // new one for them.
    if ($account->name != $edit['original']->name || !$edit['picture']) {
      letter_default_avatar_delete_image($account);
      letter_default_avatar($account);
    }

    // If we've now got an avatar whereas we didn't before, unset the default
    // avatar property.
    if ($edit['picture'] && $edit['original']->default_avatar && (!variable_get('letter_default_avatar_set_picture_fid', FALSE) && !$edit['original']->picture || variable_get('letter_default_avatar_set_picture_fid', FALSE) && $edit['original']->picture->fid != $edit['picture']->fid)) {
      // Remove the file if not setting fid as user_save won't know to remove
      // that file.
      if (!variable_get('letter_default_avatar_set_picture_fid', FALSE)) {
        letter_default_avatar_delete_image($account);
      }

      // Unset the property.
      db_query('UPDATE {users} SET default_avatar = 0 WHERE uid = :uid', array(':uid' => $account->uid));
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function letter_default_avatar_user_delete($account) {
  letter_default_avatar_delete_image($account);
}

/**
 * Helper function for loading a users default letter avatar.
 */
function letter_default_avatar_load_by_uid($uid) {
  $uri = "public://letter-avatars/u-{$uid}.png";
  $fid = db_query('SELECT fid FROM {file_managed} WHERE uri = :uri', array(':uri' => $uri))->fetchField();

  return $fid ? file_load($fid) : NULL;
}

/**
 * Delete a letter default avatar image.
 */
function letter_default_avatar_delete_image($account) {
  $file = letter_default_avatar_load_by_uid($account->uid);
  if ($file) {
    file_delete($file);
  }
  letter_default_avatar($account);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the "Delete picture" checkbox on this form when using a default avatar
 * that's attached to the $account->picture.
 */
function letter_default_avatar_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $account = $form['#user'];

  if ($account->default_avatar) {
    // Add an explaination sa to their current default avatar.
    if (variable_get('letter_default_avatar_profile_form_add_explanation', TRUE)) {
      $form['picture']['picture_current']['#weight'] = -10;
      $form['picture']['letter_default_avatar'] = array(
        '#markup' => t('<p class="help">This avatar has been generated for you and will be used until you select another.</p>'),
        '#weight' => -9,
      );
    }

    if (variable_get('letter_default_avatar_set_picture_fid', FALSE)) {
      // Hide the checkbox and leave a note.
      $form['picture']['picture_delete']['#access'] = FALSE;
      $form['picture']['picture_delete']['#access_note'] = 'This form element has been hidden by the letter_default_avatar module.';
    }
  }
}

/**
 * Implement template_preprocess_user_picture() to add in the default avatar
 * letter image if a user doesn't have one uploaded. Also tweak tge markup.
 *
 * @see template_preprocess_user_picture()
 */
function letter_default_avatar_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';

  if (variable_get('user_pictures', 0)) {
    $account = $variables['account'];
    $variables['wrapper_element'] = isset($variables['wrapper_element']) ? $variables['wrapper_element'] : variable_get('letter_default_avatar_wrapper_element', 'div');
    $variables['wrapper_attributes'] = array();
    $variables['link_to_profile'] = isset($variables['link_to_profile']) ? $variables['link_to_profile'] : TRUE;
    $variables['image_style'] = isset($variables['image_style']) ? $variables['image_style'] : variable_get('user_picture_style', '');
    $style = $variables['image_style'];

    // Only jump to if this is a full user account, and we're not on the create
    // new user admin page.
    if (!empty($account->name)) {
      if (variable_get('letter_default_avatar_add_wrapper', TRUE)) {
        $variables['wrapper_attributes'] = array(
          'class' => array('avatar'),
          'data-uid' => $account->uid,
          'data-username' => check_plain($account->name),
        );


        if (module_exists('image') && $style != '') {
          $variables['wrapper_attributes']['class'][] = "image-style-$style";
          $variables['wrapper_attributes']['data-image-style'] = $style;
        }

        // The following class is used by Harmony themes to know that the image
        // should be reduced to half of the image style size.
        if (variable_get('letter_default_avatar_add_high_res_class', FALSE)) {
          $variables['wrapper_attributes']['class'][] = "avatar-high-res";
        }
      }

      // Check for default letter avatar.
      if (variable_get('letter_default_avatar_set_picture_fid', FALSE) && isset($account->default_avatar) && $account->default_avatar) {
        $variables['wrapper_attributes']['class'][] = 'avatar-default';
      }

      // We have an avatar!
      if (!empty($account->picture)) {
        if (is_numeric($account->picture)) {
          $account->picture = file_load($account->picture);
        }
        if (!empty($account->picture->uri)) {
          $filepath = $account->picture->uri;
        }
      }
      // If there's not an image, let's make one.
      else {
        $variables['wrapper_attributes']['class'][] = 'avatar-default';
        $filepath = "public://letter-avatars/u-{$account->uid}.png";
        // Check to see if the letter avatar exists, if not make one.
        if (!file_exists($filepath)) {
          letter_default_avatar($account);
        }
      }

      $alt = t("@user's picture", array('@user' => format_username($account)));
      if (module_exists('image') && file_valid_uri($filepath) && $style != '') {
        $variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      else {
        $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }

      // Wrap in a link if the user can access user profiles.
      if ($account->uid && $variables['link_to_profile'] && user_access('access user profiles')) {
        // Create link to the user's profile.
        $attributes = array('title' => t('View user profile.'));
        $variables['user_picture'] = l($variables['user_picture'], 'user/' . $account->uid, array('attributes' => $attributes, 'html' => TRUE));
      }
    }
  }
}

/**
 * Implements template_process_user_picture().
 */
function letter_default_avatar_process_user_picture(&$variables) {
  if (variable_get('user_pictures', 0) && variable_get('letter_default_avatar_add_wrapper', TRUE)) {
    $wrapper_element = $variables['wrapper_element'] != '' ? $variables['wrapper_element'] : 'div';
    $variables['user_picture'] = "<{$wrapper_element}" . drupal_attributes($variables['wrapper_attributes']) . '>' . $variables['user_picture'] . "</{$wrapper_element}>";
  }
}

/**
 * Image generation function.
 * Hard work done by Discourse translated into PHP.
 * https://github.com/discourse/discourse/blob/master/lib/letter_avatar.rb
 *
 * @return path to the image file.
 */
function letter_default_avatar($account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $uid = $account->uid;

  // Grab some settings first.
  $colours = variable_get('letter_default_avatar_colours', letter_default_avatar_colours());
  $case = variable_get('letter_default_avatar_case_modify', 'uppercase');
  $size = variable_get('letter_default_avatar_fullsize', 512);
  $fonts = letter_default_avatar_get_fonts();
  $font = $fonts[variable_get('letter_default_avatar_font', 'helvetica')];


  // Work out the background colour.
  //$colour = $colours[base_convert(substr(md5($user->name), 0, 15), 10, 16) % (count($colours) - 1)];
  $colour = $colours[mt_rand(0, count($colours) - 1)];
  // And the darker colour.
  /*$darker = array();
  foreach ($colour as $value) {
    $darker[] = intval(floatval($value) * 0.8);
  }*/

  // Define the character we'll be using, can be upper or lower cased, or
  // left alone (preserve drop down option).
  $character = substr($account->name, 0, 1);

  // Ensure the character is something we support.
  $allowed_characters = array_merge(range('a', 'z'), range('0', '9'), array('_', '-', '?'));
  if (!in_array(strtolower($character), $allowed_characters, TRUE)) {
    $character = variable_get('letter_default_avatar_fallback_character', '?');
  }
  $non_alpha = array_merge(range('0', '9'), array('_', '-', '?'));

  // Figure out the correct case if not force setting a case.
  if (!$case) {
    $case = $character === strtolower($character) ? 'lowercase' : 'uppercase';
  }

  $case_directory = in_array($character, $non_alpha, TRUE) ? '' : "$case/";
  $character_lower = strtolower($character);
  $character_path = $font['path'] . "/{$case_directory}{$character_lower}.png";

  // Build up our image.
  $avatar = imagecreatetruecolor($size, $size);
  // Fill the background.
  $bg = imagecolorallocate($avatar, $colour[0], $colour[1], $colour[2]);
  imagefill($avatar, 0, 0, $bg);
  // Apply the character.
  $character_image = imagecreatefrompng($character_path);
  imagecopy($avatar, $character_image, 0, 0, 0, 0, 512, 512);

  // Save the image.
  $destination_dir = 'public://letter-avatars';
  file_prepare_directory($destination_dir, FILE_CREATE_DIRECTORY);
  $file = file_save_data('', "{$destination_dir}/u-{$uid}.png", FILE_EXISTS_REPLACE);
  if (isset($file) && $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri)) {
    imagepng($avatar, $wrapper->realpath());

    // Attach the image to the user if this is how we're going about things.
    if (variable_get('letter_default_avatar_set_picture_fid', FALSE)) {
      // If we've just reacted to a new account that has been created, the
      // is_new flag will still be there and cause an error.
      if (isset($account->is_new) && $account->is_new && $account->uid) {
        unset($account->is_new);
      }

      // Prevent recursive attempts at saving new accounts.
      if (!isset($account->is_new) || isset($account->is_new) && !$account->is_new) {
        user_save($account, array('picture' => $file, 'default_avatar' => TRUE));
      }
    }
  }
  imagedestroy($avatar);
}

/**
 * Implements hook_views_data_alter().
 *
 * We need to use this hook instead of hook_views_data() as
 * entity API already provides data for our custom entity type.
 */
function letter_default_avatar_views_data_alter(&$data) {
  $data['users']['picture']['field']['handler'] = 'letter_default_avatar_handler_field_user_picture';
  $data['users']['picture']['filter']['handler'] = 'letter_default_avatar_handler_filter_user_has_picture';
}

/**
 * Function to return a long list of colours which are optimally distinct.
 * http://tools.medialab.sciences-po.fr/iwanthue/index.php
 * array structure is:
 * - H: 0 - 360
 * - C: 0 - 2
 * - L: 0.75 - 1.5
 */
function letter_default_avatar_colours() {
  return array(
    array(198,125,40),
    array(61,155,243),
    array(74,243,75),
    array(238,89,166),
    array(52,240,224),
    array(177,156,155),
    array(240,120,145),
    array(111,154,78),
    array(237,179,245),
    array(237,101,95),
    array(89,239,155),
    array(43,254,70),
    array(163,212,245),
    array(65,152,142),
    array(165,135,246),
    array(181,166,38),
    array(187,229,206),
    array(77,164,25),
    array(179,246,101),
    array(234,93,37),
    array(225,155,115),
    array(142,140,188),
    array(223,120,140),
    array(249,174,27),
    array(244,117,225),
    array(137,141,102),
    array(75,191,146),
    array(188,239,142),
    array(164,199,145),
    array(173,120,149),
    array(59,195,89),
    array(222,198,220),
    array(68,145,187),
    array(236,204,179),
    array(159,195,72),
    array(188,121,189),
    array(166,160,85),
    array(181,233,37),
    array(236,177,85),
    array(121,147,160),
    array(234,218,110),
    array(241,157,191),
    array(62,200,234),
    array(133,243,34),
    array(88,149,110),
    array(59,228,248),
    array(183,119,118),
    array(251,195,45),
    array(113,196,122),
    array(197,115,70),
    array(80,175,187),
    array(103,231,238),
    array(240,72,133),
    array(228,149,241),
    array(180,188,159),
    array(172,132,85),
    array(180,135,251),
    array(236,194,58),
    array(217,176,109),
    array(88,244,199),
    array(186,157,239),
    array(113,230,96),
    array(206,115,165),
    array(244,178,163),
    array(230,139,26),
    array(241,125,89),
    array(83,160,66),
    array(107,190,166),
    array(197,161,210),
    array(198,203,245),
    array(238,117,19),
    array(228,119,116),
    array(131,156,41),
    array(145,178,168),
    array(139,170,220),
    array(233,95,125),
    array(87,178,230),
    array(157,200,119),
    array(237,140,76),
    array(229,185,186),
    array(144,206,212),
    array(236,209,158),
    array(185,189,79),
    array(34,208,66),
    array(84,238,129),
    array(133,140,134),
    array(67,157,94),
    array(168,179,25),
    array(140,145,240),
    array(151,241,125),
    array(67,162,107),
    array(200,156,21),
    array(169,173,189),
    array(226,116,189),
    array(133,231,191),
    array(194,161,63),
    array(241,77,99),
    array(241,217,53),
    array(123,204,105),
    array(210,201,119),
    array(229,108,155),
    array(240,91,72),
    array(187,115,210),
    array(240,163,100),
    array(178,217,57),
    array(179,135,116),
    array(204,211,24),
    array(186,135,57),
    array(223,176,135),
    array(204,148,151),
    array(116,223,50),
    array(95,195,46),
    array(123,160,236),
    array(181,172,131),
    array(142,220,202),
    array(240,140,112),
    array(172,145,164),
    array(228,124,45),
    array(135,151,243),
    array(42,205,125),
    array(192,233,116),
    array(119,170,114),
    array(158,138,26),
    array(73,190,183),
    array(185,229,243),
    array(227,107,55),
    array(196,205,202),
    array(132,143,60),
    array(233,192,237),
    array(62,150,220),
    array(205,201,141),
    array(106,140,190),
    array(161,131,205),
    array(135,134,158),
    array(198,139,81),
    array(115,171,32),
    array(101,181,67),
    array(149,137,119),
    array(37,142,183),
    array(183,130,175),
    array(168,125,133),
    array(124,142,87),
    array(236,156,171),
    array(232,194,91),
    array(219,200,69),
    array(144,219,34),
    array(219,95,187),
    array(145,154,217),
    array(165,185,100),
    array(127,238,163),
    array(224,178,198),
    array(119,153,120),
    array(124,212,92),
    array(172,161,105),
    array(231,155,135),
    array(157,132,101),
    array(122,185,146),
    array(53,166,51),
    array(70,163,90),
    array(150,190,213),
    array(210,107,60),
    array(166,152,185),
    array(159,194,159),
    array(39,141,222),
    array(202,176,161),
    array(95,140,229),
    array(168,142,87),
    array(93,170,203),
    array(159,142,54),
    array(14,168,39),
    array(94,150,149),
    array(187,206,136),
    array(157,224,166),
    array(235,158,208),
    array(109,232,216),
    array(141,201,87),
    array(208,124,118),
    array(142,125,214),
    array(19,237,174),
    array(72,219,41),
    array(234,102,111),
    array(168,142,79),
    array(188,135,35),
    array(95,155,143),
    array(148,173,116),
    array(223,112,95),
    array(228,128,236),
    array(206,114,54),
    array(195,119,88),
    array(235,140,94),
    array(235,202,125),
    array(233,155,153),
    array(214,214,238),
    array(246,200,35),
    array(151,125,171),
    array(132,145,172),
    array(131,142,118),
    array(199,126,150),
    array(61,162,123),
    array(58,176,151),
    array(215,141,69),
    array(225,154,220),
    array(220,77,167),
    array(233,161,64),
    array(130,221,137),
    array(81,191,129),
    array(169,162,140),
    array(174,177,222),
    array(236,174,47),
    array(233,188,180),
    array(69,222,172),
    array(71,232,93),
    array(118,211,238),
    array(157,224,83),
    array(218,105,73),
    array(126,169,36),
  );
}
