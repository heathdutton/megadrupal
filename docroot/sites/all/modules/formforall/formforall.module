<?php

/**
 * @file
 * Drupal Module: FormForAll
 * Provide formforall.com integration into Drupal.
 */


/* *********************************************************************
 * DEFINES & INIT
 * ********************************************************************/

// FormForAll domain
define('FORMFORALL_URL', 'https://www.formforall.com');

/**
 * Include field definition file
 * @todo Remove when http://drupal.org/node/977052 is fixed.
 */
require_once dirname(__FILE__) . '/formforall.field.inc';





/* *********************************************************************
 * MENU ROUTER & PERMISSIONS
 * ********************************************************************/


/**
 * Implements hook_menu().
 */
function formforall_menu() {

  // Ajax callback.
  $items['ajax/formforall'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formforall_wysiwyg_form'),
    'access arguments' => array('list formforall forms'),
    'type' => MENU_CALLBACK,
  );

  // Admin pages.
  $items['admin/config/services/formforall'] = array(
    'title' => "FormForAll",
    'description' => "Define User ID and API Key.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formforall_admin_settings_form'),
    'access arguments' => array('administer formforall'),
    'file' => 'formforall.admin.inc',
  );
  $items['admin/config/services/formforall/settings'] = array(
    'title' => "Settings",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/services/formforall/forms'] = array(
    'title' => "Forms",
    'page callback' => 'formforall_admin_forms_page',
    'access arguments' => array('administer formforall'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'formforall.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function formforall_permission() {
  return array(
    'administer formforall' => array(
      'title' => t("Administer FormForAll"),
    ),
    'list formforall forms' => array(
      'title' => t("List FormForAll forms"),
      'description' => t("Allow user to view existing FormForAll forms"),
    ),
  );
}





/* *********************************************************************
 * PAGE ALTERATION
 * ********************************************************************/


/**
 * Implements hook_page_alter().
 */
function formforall_page_alter(&$page) {
  // Add JS settings and script.
  $page['page_bottom']['formforall'] = array(
    '#attached' => array(
      'js' => array(
        array(
          'type' => 'setting',
          'data' => array(
            'formForAll' => array(
              'domain' => parse_url(FORMFORALL_URL, PHP_URL_HOST),
            ),
          ),
        ),
        drupal_get_path('module', 'formforall') . '/js/formforall.js' => array(
          'type' => 'file',
          'scope' => 'header',
          'group' => JS_DEFAULT,
        ),
      ),
    ),
  );
}





/* *********************************************************************
 * BLOCKS
 * ********************************************************************/


/**
 * Implements hook_block_info().
 */
function formforall_block_info() {
  $blocks = array();

  // Create one block per form.
  if ($forms = formforall_get_forms(TRUE)) {
    foreach ($forms as $form) {
      $blocks[formforall_get_block_delta($form['id'])] = array(
        'info' => "FormForAll: " . check_plain($form['title']),
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function formforall_block_view($delta = '') {

  // Try to get a form id from block delta.
  $form_id = formforall_get_block_form_id($delta);
  if ($form = formforall_get_form($form_id)) {
    return array(
      'subject' => check_plain($form['title']),
      'content' => array(
        '#theme' => 'formforall_form',
        '#form_id' => $form['id'],
      ),
    );
  }

}


/**
 * Create a 32char delta from form uuid.
 */
function formforall_get_block_delta($id) {
  if (formforall_is_valid_id($id)) {
    return str_replace('-', '', $id);
  }
}


/**
 * Retreive form uuid from block delta.
 */
function formforall_get_block_form_id($delta) {
  if (strlen($delta) === 32) {
    return substr($delta, 0, 8) . '-'
          . substr($delta, 8, 4) . '-'
          . substr($delta, 12, 4) . '-'
          . substr($delta, 16, 4) . '-'
          . substr($delta, 20, 12);
  }
}





/* *********************************************************************
 * THEME
 * ********************************************************************/


/**
 * Implements hook_theme().
 */
function formforall_theme() {
  $themes = array();

  $themes['formforall_form'] = array(
    'variables' => array(
      'form_id' => NULL,
      'tag' => 'div',
    ),
  );

  return $themes;
}


/**
 * Implements hook_preprocess_formforall_form().
 */
function formforall_preprocess_formforall_form(&$vars) {
  // Ensure form_id is safe.
  $vars['form_id'] = filter_xss($vars['form_id']);

  // Prepare attributes.
  $vars['attributes'] = array(
    'id' => 'formforall-' . $vars['form_id'],
    'class' => array('formforall-form'),
  );
}


/**
 * Theme function for FormForAll form.
 */
function theme_formforall_form($vars) {
  // Return HTML tag.
  $render = array(
    '#theme' => 'html_tag',
    '#tag' => $vars['tag'],
    '#attributes' => $vars['attributes'],
    '#value' => "",
    '#prefix' => '<!-- FormForAll ' . $vars['form_id'] . ' -->',
  );

  return drupal_render($render);
}




/* *********************************************************************
 * WYSIWYG
 * ********************************************************************/


/**
 * Callback function for Wysiwyg modal form.
 */
function formforall_wysiwyg_form() {
  drupal_set_title(t("FormForAll"));

  $form = array();
  $form['formforall'] = array(
    '#title' => t("Select the form you want to insert"),
    '#type' => 'select',
    '#options' => formforall_get_forms_options(),
    '#empty_option' => t("None"),
  );

  return $form;
}


/**
 * Implements hook_wysiwyg_include_directory().
 */
function formforall_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      // You can just return $type, if you place your Wysiwyg plugins into a
      // sub-directory named 'plugins'.
      return $type;
  }
}


/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function formforall_wysiwyg_editor_settings_alter(&$settings, $context) {
  // Load jQueryUI dialog library.
  if (!empty($context['profile']->settings['buttons']['drupal']['formforall'])) {
    drupal_add_library('system', 'ui.dialog');
  }
}


/* *********************************************************************
 * HELPERS
 * ********************************************************************/


/**
 * Get all available forms for this User ID.
 */
function formforall_get_forms($reset = FALSE) {
  $formforall_forms = &drupal_static(__FUNCTION__);

  if (!isset($formforall_forms) || $reset == TRUE) {
    if (!$reset && ($cache = cache_get('formforall_forms')) && !empty($cache->data)) {
      $formforall_forms = $cache->data;
    }
    else {

      // Get User ID & API key.
      $formforall_api_key = variable_get('formforall_api_key', FALSE);
      $formforall_user_id = variable_get('formforall_user_id', FALSE);

      if ($formforall_user_id && $formforall_api_key) {

        // HTTP Request to formforall API.
        // Request looks like /api/users/USER_ID/forms,
        // with a custom header like Authorization: API_KEY.
        $request = drupal_http_request(
          FORMFORALL_URL . '/api/users/' . $formforall_user_id . '/forms',
          array(
            'headers' => array(
              'Authorization' => $formforall_api_key,
            ),
          )
        );

        // Update info if response is correct.
        if ($request->code == 200) {
          $formforall_forms = drupal_json_decode($request->data);
        }

      }

      // Save it to cache.
      cache_set('formforall_forms', $formforall_forms);
    }
  }
  return $formforall_forms;
}



/**
 * Get a specific form.
 */
function formforall_get_form($id) {
  // Validate form id.
  if (formforall_is_valid_id($id) && $forms = formforall_get_forms()) {
    foreach ($forms as $form) {
      if ($form['id'] == $id) {
        return $form;
      }
    }
  }
}


/**
 * Form API helper: returns forms list for #options.
 */
function formforall_get_forms_options() {
  $options = array();
  if ($forms = formforall_get_forms(TRUE)) {
    foreach ($forms as $form) {
      $options[$form['id']] = check_plain($form['title']);
    }
  }
  return $options;
}


/**
 * Validate Form & User ID.
 */
function formforall_is_valid_id($uuid) {
  // Form ID & User ID are UUID v4.
  // http://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29
  return preg_match('/^([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$/', $uuid);
}
