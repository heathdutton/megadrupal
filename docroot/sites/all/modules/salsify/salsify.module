<?php

/**
 * @file
 * Salsify Drupal module is a contribution to the community by Double Prime,
 * Inc. with cooperation from the creators of Salsify.
 */

/**
 * @mainpage
 * Salsify enables vendors, merchants, and sales staff to manage and exchange
 * product information (descriptions, features, images, specs, data sheets,
 * videos, etc.) across the retail supply chain. Founded in 2012 by e-commerce
 * industry veterans and backed by Matrix and North Bridge, Salsify is already
 * used by dozens of global manufacturers to increase their brandsâ€™ product
 * distribution and by retailers to increase product range.
 *
 * A Salsify account is required to use this module.
 * @link http://www.salsify.com/product-tour Free trials @endlink are available.
 *
 * The current version of the Salsify module supports one way syncing of product
 * data from Salsify to Drupal. Two-way syncing is planned for the next version.
 *
 * @section reference Developer references
 * - @link http://help.salsify.com/knowledge_base/topics/channel-exports Channel export API @endlink
 * - @link http://help.salsify.com/knowledge_base/topics/import-api Import API @endlink
 * - @link http://help.salsify.com/knowledge_base/topics/salsify-json-import-format Salsify JSON Import Format @endlink
 * - @link http://help.salsify.com/knowledge_base/topics/product-crud-api Product CRUD API @endlink
 *
 * @link https://drupal.org/sandbox/darrenoh/salsify Project page @endlink
 */

/**
 * Implements hook_help().
 */
function salsify_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#salsify':
      $output .= '<h3>' . t('About') . '</h3>' . "\n";
      $output .= '<p>' . t('The Salsify module imports data from Salsify channels.') . '</p>' . "\n";
      $output .= '<h3>' . t('Uses') . '</h3>' . "\n";
      $output .= '<dl>' . "\n";
      $output .= '<dt>' . t('Configuring Salsify data migrations') . '</dt>' . "\n";
      $output .= '<dd>' . t('Use the <a href="!wizard">Salsify import wizard</a> to create a migration group or add migrations to an existing group.', array(
        '!wizard' => url('admin/content/migrate/new/salsifymigratewizard'),
      )) . '</dd>' . "\n";
      $output .= '<dt>' . t('Importing Salsify data') . '</dt>' . "\n";
      $output .= '<dd>' . t('You can run configured migrations as many times as you wish. All available migrations can be viewed from the <a href="!uri">Migrate dashboard</a>. By default, only new items are imported, but if you check the <em>Update</em> box under <em>Options</em>, previously imported items will be updated.', array(
        '!uri' => url('admin/content/migrate'),
      )) . '</dd>' . "\n";
      $output .= '<dt>' . t('Updating automatically') . '</dt>' . "\n";
      $output .= '<dd>' . t('If the Migrate module is configured to use Drush, you can run migrations automatically. You can see the migrations that have been configured to run automatically on the <a href="!uri">cron jobs</a> page. By checking the <em>Repeat import on cron run</em> box under <em>Options</em>, you can add migrations or migration groups to be executed on cron run.', array('!uri' => url('admin/content/migrate/cron'))) . '</dd>' . "\n";
      $output .= '</dl>' . "\n";
      break;
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function salsify_theme($existing, $type, $theme, $path) {
  return array(
    'salsify_form_table' => array(
      'render element' => 'elements',
      'file' => 'includes/wizard.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function salsify_menu() {
  $items['admin/content/migrate/cron'] = array(
    'title' => 'Cron jobs',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsify_migrate_cron'),
    'access arguments' => array(MIGRATE_ACCESS_BASIC),
    'file' => 'salsify.inc',
    'weight' => 100,
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function salsify_cron() {
  $cron = variable_get('salsify_cron', array());
  if (!empty($cron)) {
    foreach (migrate_migrations() as $machine_name => $migration) {
      $group_name = $migration->getGroup()->getName();
      if (isset($cron['migration'][$machine_name])) {
        $jobs[$machine_name] = $cron['migration'][$machine_name];
      }
      elseif (isset($cron['group'][$group_name])) {
        $jobs[$machine_name] = $cron['group'][$group_name];
      }
    }
    $drush_path = trim(variable_get('migrate_drush_path', ''));
    foreach ($jobs as $machine_name => $options) {
      list($uid, $force, $update, $limit) = $options;
      $drush_command = "$drush_path mi $machine_name --user=$uid --uri=$GLOBALS[base_url] --root=" . DRUPAL_ROOT;
      if ($force) {
        $drush_command .= ' --force';
      }
      if ($update) {
        $drush_command .= ' --update';
      }
      if (variable_get('migrate_drush_mail', FALSE)) {
        $drush_command .= ' --notify';
      }
      if (!empty($limit['value'])) {
        $drush_command .= ' --limit="' . "$limit[value] $limit[unit]" . '"';
      }
      $drush_command .= " >/tmp/$machine_name.import.log 2>&1 &";
      exec($drush_command, $output, $status);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function salsify_form_migrate_ui_migrate_dashboard_alter(&$form, &$form_state, $form_id) {
  if (in_array(variable_get('migrate_import_method', 0), array(1, 2))) {
    form_load_include($form_state, 'inc', 'salsify');
    $form['dashboard']['tasks']['#options'];
    $form['operations']['options'] = array_merge(array(
      'update' => array(),
      'force' => array(),
      'cron' => array(
        '#type' => 'checkbox',
        '#title' => t('Repeat import on cron run'),
        '#description' => t('Check this box to repeat import on cron run. Visit the <a href="!url">cron jobs</a> page to see existing import jobs.', array(
          '!url' => url('admin/content/migrate/cron'),
        )),
      ),
    ), $form['operations']['options']);
    array_unshift($form['operations']['submit']['#submit'], 'salsify_migrate_ui_migrate_submit');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function salsify_form_migrate_ui_migrate_group_alter(&$form, &$form_state, $form_id) {
  if (in_array(variable_get('migrate_import_method', 0), array(1, 2))) {
    form_load_include($form_state, 'inc', 'salsify');
    $form['operations']['options'] = array_merge(array(
      'update' => array(),
      'force' => array(),
      'cron' => array(
        '#type' => 'checkbox',
        '#title' => t('Repeat import on cron run'),
        '#description' => t('Check this box to repeat import on cron run. Visit the <a href="!url">cron jobs</a> page to see existing import jobs.', array(
          '!url' => url('admin/content/migrate/cron'),
        )),
      ),
    ), $form['operations']['options']);
    array_unshift($form['operations']['submit']['#submit'], 'salsify_migrate_ui_migrate_submit');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function salsify_form_migrate_ui_edit_mappings_alter(&$form, &$form_state, $form_id) {
  $migration = Migration::getInstance($form_state['build_info']['args'][1]);
  // Allow multiple source migrations to be selected.
  if ($migration instanceof SalsifyMigration) {
    foreach (element_children($form['field_mappings']) as $name) {
      unset($form['field_mappings'][$name]['source_migration']['#options']['-1']);
      $form['field_mappings'][$name]['source_migration']['#multiple'] = TRUE;
      $form['field_mappings'][$name]['source_migration']['#size'] = min(4, count($form['field_mappings'][$name]['source_migration']['#options']));
    }
  }
  // Prevent existing products migration from losing its product ID mapping.
  if ($migration instanceof SalsifyExistingProductsMigration) {
    $field_mappings = $migration->getFieldMappings();
    if (isset($field_mappings['product_id'])) {
      form_load_include($form_state, 'inc', 'salsify');
      $form['#validate'][] = 'salsify_form_migrate_ui_edit_mappings_validate';
      $form_state['salsify']['mappings']['product_id'] = $field_mappings['product_id'];
    }
  }
}
