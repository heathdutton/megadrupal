<?php

/**
 * @file
 * Changed Fields module file.
 */

/**
 * Implements hook_node_presave().
 */
function changed_fields_node_presave(stdClass $node) {
  $fields_info = module_invoke_all('changed_fields_info');

  foreach ($fields_info as $node_type => $fields) {
    if (isset($node->original) && $node->type == $node_type) {
      $changed_fields = array();

      foreach ($fields as $field_name) {
        if ($field_name == 'title') {
          $old_value = $node->original->$field_name;
          $new_value = $node->$field_name;
          $field_info = array('type' => 'title');
        }
        else {
          $old_value = field_get_items('node', $node->original, $field_name);
          $new_value = field_get_items('node', $node, $field_name);
          $field_info = field_info_field($field_name);
        }

        $result = changed_fields_run_field_comparison($field_info, $old_value, $new_value);

        if (is_array($result)) {
          $changed_fields[$field_name] = $result;
        }
      }

      if (!empty($changed_fields)) {
        module_invoke_all('changed_fields_reaction', $node, $changed_fields);
      }
    }
  }
}

/**
 * Function to run comparison field values of different types.
 *
 * @param array $field_info
 *   Array with information about field.
 * @param string|array $old_value
 *   Old field value.
 * @param string|array $new_value
 *   New field value.
 *
 * @return mixed
 *   TRUE if old and new field values are similar. Otherwise array which
 *   contains old and new field values.
 */
function changed_fields_run_field_comparison(array $field_info, $old_value, $new_value) {
  $similar_fields = TRUE;

  switch ($field_info['type']) {
    case 'title':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value);
      break;

    case 'text_with_summary':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value, array(
        'value',
        'summary',
      ));
      break;

    case 'text':
    case 'text_long':
    case 'number_decimal':
    case 'number_float':
    case 'number_integer':
    case 'list_float':
    case 'list_integer':
    case 'list_boolean':
    case 'list_text':
    case 'phone':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value, array('value'));
      break;

    case 'taxonomy_term_reference':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value, array('tid'));
      break;

    case 'entityreference':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value, array('target_id'));
      break;

    case 'image':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value, array(
        'fid',
        'width',
        'height',
      ));
      break;

    case 'file':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value, array('fid'));
      break;

    case 'date':
    case 'datetime':
    case 'datestamp':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value, array(
        'value',
        'timezone',
      ));
      break;

    case 'email':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value, array('email'));
      break;

    case 'link_field':
      $similar_fields = changed_fields_compare_field_values($old_value, $new_value, array(
        'url',
        'title',
      ));
      break;

    case 'field_collection':
      // If collection was added or removed then we have already
      // different collections.
      if ((!$old_value && $new_value) || ($old_value && !$new_value)) {
        $similar_fields = changed_fields_make_result_array($old_value, $new_value);
      }
      else {
        if ($old_value && $new_value) {
          // If value was added|removed to|from multi-value field then we have
          // already different values.
          if (count($new_value) != count($old_value)) {
            $similar_fields = changed_fields_make_result_array($old_value, $new_value);
          }
          else {
            foreach ($old_value as $key => $fc) {
              if (is_array($similar_fields)) {
                break;
              }

              $old_fc = entity_load('field_collection_item', array($fc['value']));
              $old_fc = reset($old_fc);
              $new_fc = $new_value[$key]['entity'];
              $fc_fields = field_info_instances('field_collection_item', $field_info['field_name']);

              foreach ($fc_fields as $fc_field_name => $fc_field_data) {
                $fc_field_info = field_info_field($fc_field_name);
                $old_fc_field_value = field_get_items('field_collection_item', $old_fc, $fc_field_name);
                $new_fc_field_value = field_get_items('field_collection_item', $new_fc, $fc_field_name);
                $similar_fields = changed_fields_run_field_comparison($fc_field_info, $old_fc_field_value, $new_fc_field_value);

                // If changes have been detected.
                if (is_array($similar_fields)) {
                  // Make result array with old and new
                  // field collection entities.
                  $similar_fields = changed_fields_make_result_array($old_value, $new_value);
                  break;
                }
              }
            }
          }
        }
      }

      break;

    default:
      // Allow modules to implement comparison logic for other field types.
      $data = array(
        'field_info' => $field_info,
        'old_value' => $old_value,
        'new_value' => $new_value,
        'result' => &$similar_fields,
      );

      drupal_alter('changed_fields_compare_field_values', $data);
  }

  return $similar_fields;
}

/**
 * Function to compare old and new field values.
 *
 * @param string|array $old_value
 *   Old field value.
 * @param string|array $new_value
 *   New field value.
 * @param array $properties
 *   Array which contains property names to compare.
 *
 * @return array|bool
 *   TRUE if fields are similar. Otherwise array with
 *   old and new field values.
 */
function changed_fields_compare_field_values($old_value, $new_value, array $properties = array()) {
  $result = TRUE;

  // If value was added or removed then we have already different values.
  if ((!$old_value && $new_value) || ($old_value && !$new_value)) {
    $result = changed_fields_make_result_array($old_value, $new_value);
  }
  else {
    if ($old_value && $new_value) {
      // Simple comparison (for title).
      if (empty($properties)) {
        if ($new_value != $old_value) {
          $result = changed_fields_make_result_array($old_value, $new_value);
        }
      }
      // Compare field value properties.
      else {
        // If value was added|removed to|from multi-value field then we have
        // already different values.
        if (count($new_value) != count($old_value)) {
          $result = changed_fields_make_result_array($old_value, $new_value);
        }
        else {
          // Walk through each field value and compare it's properties.
          foreach ($new_value as $key => $value) {
            if (is_array($result)) {
              break;
            }

            foreach ($properties as $property) {
              if ($new_value[$key][$property] != $old_value[$key][$property]) {
                $result = changed_fields_make_result_array($old_value, $new_value);
                break;
              }
            }
          }
        }
      }
    }
  }

  return $result;
}

/**
 * Function generates result array for changed_fields_compare_field_values().
 *
 * @param string|array $old_value
 *   Old field value.
 * @param string|array $new_value
 *   New field value.
 *
 * @return array
 *   Array with old and new field value.
 */
function changed_fields_make_result_array($old_value, $new_value) {
  return array(
    'old_value' => $old_value,
    'new_value' => $new_value,
  );
}
