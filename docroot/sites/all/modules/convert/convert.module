<?php

/**
 * @file
 * Convert module
 * *
 * Developed by netstudio.gr and Yannis Karampelas (http://drupal.org/user/1145950).
 *
 * Adds a small amount of javascript to the page which loads the A/B test from
 * the Convert.com website. All configuration after setting
 * the Account ID happens on the Convert.com website.
 */

/**
 * Implements hook_permission().
 */
function convert_permission() {
  return array(
    'administer convert' => array(
      'title' => t('Administer Convert'),
      'description' => t('Administer the Convert module options.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
 function convert_init() {
  // Grab the ID, but only proceed if it's set to something.
  $convert_id = variable_get('convert_id', 'NONE');
  $convert_onoff = variable_get('convert_onoff', 'on');
  $page_type = variable_get('convert_page_type', '');
  $category_id = variable_get('convert_category_id', '');
  $category_name = variable_get('convert_category_name', '');
  $product_sku = variable_get('convert_product_sku', '');
  $product_name = variable_get('convert_product_name', '');
  $product_price = variable_get('convert_product_price', '');
  $customer_id = variable_get('convert_customer_id', '');
  $custom_v1 = variable_get('convert_custom_v1', '');
  $custom_v2 = variable_get('convert_custom_v2', '');
  $custom_v3 = variable_get('convert_custom_v3', '');
  $custom_v4 = variable_get('convert_custom_v4', '');

  // if page_type tokens are set, use this variable.
  if (!empty($page_type) || !empty($category_id) || !empty($category_name) || !empty($product_sku) || !empty($product_name) || !empty($product_price) || !empty($customer_id) || !empty($custom_v1) || !empty($custom_v2) || !empty($custom_v3) || !empty($custom_v4)) {
    $types = array();
    $node = menu_get_object();
    if (is_object($node)) {
      $types += array('node' => $node);
    }
    $page_type_processed = token_replace($page_type, $types, array('clear' => TRUE));
    $category_id_processed = token_replace($category_id, $types, array('clear' => TRUE));
    $category_name_processed = token_replace($category_name, $types, array('clear' => TRUE));
    $product_sku_processed = token_replace($product_sku, $types, array('clear' => TRUE));
    $product_name_processed = token_replace($product_name, $types, array('clear' => TRUE));
    $product_price_processed = token_replace($product_price, $types, array('clear' => TRUE));
    $customer_id_processed = token_replace($customer_id, $types, array('clear' => TRUE));
    $custom_v1_processed = token_replace($custom_v1, $types, array('clear' => TRUE));
    $custom_v2_processed = token_replace($custom_v2, $types, array('clear' => TRUE));
    $custom_v3_processed = token_replace($custom_v3, $types, array('clear' => TRUE));
    $custom_v4_processed = token_replace($custom_v4, $types, array('clear' => TRUE));

  }

  if ($convert_onoff == 'on' && $convert_id != "NONE") {
    $convert_script = '
var _conv_page_type = "' . (isset($page_type_processed) ? $page_type_processed : '') . '";
var _conv_category_id = "' . (isset($category_id_processed) ? $category_id_processed : '') . '";
var _conv_category_name = "' . (isset($category_name_processed) ? $category_name_processed : '') . '";
var _conv_product_sku = "' . (isset($product_sku_processed) ? $product_sku_processed : '') . '";
var _conv_product_name = "' . (isset($product_name_processed) ? $product_name_processed : '') . '";
var _conv_product_price = "' . (isset($product_price_processed) ? $product_price_processed : '') . '";
var _conv_customer_id = "' . (isset($customer_id_processed) ? $customer_id_processed : '') . '";
var _conv_custom_v1 = "' . (isset($custom_v1_processed) ? $custom_v1_processed : '') . '";
var _conv_custom_v2 = "' . (isset($custom_v2_processed) ? $custom_v2_processed : '') . '";
var _conv_custom_v3 = "' . (isset($custom_v3_processed) ? $custom_v3_processed : '') . '";
var _conv_custom_v4 = "' . (isset($custom_v4_processed) ? $custom_v4_processed : '') . '";
var _conv_host = (("https:" == document.location.protocol) ? "https://d9jmv9u00p0mv.cloudfront.net" : "http://cdn-1.convertexperiments.com");document.write(unescape("%3Cscript src=\'" + _conv_host + "/js/' . $convert_id . '.js\' type=\'text/javascript\'%3E%3C/script%3E"));';
    drupal_add_js($convert_script, 'inline');
  }
}

/**
 * Implements hook_menu().
 */
function convert_menu() {
  $items['admin/config/system/convert'] = array(
    'title' => 'Convert Setup',
    'description' => 'Configure your Convert account ID, and turn the module on/off.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convert_setup_form'),
    'access arguments' => array('administer convert'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Settings form
 */
function convert_setup_form($form_state) {
  $form['introduction'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('In order to use this module, you need a <a href="@url">convert.com</a> account. A Free trial account is available.',
                  array('@url' => url('http://www.convert.com/'))) . '</p><p>' .
                  t('Most of the configuration and setup for the A/B and other tests is done by logging into your account on the Convert.com website.') . '</p>',
  );
  $form['convert_onoff'] = array(
    '#type' => 'radios',
    '#title' => t('Enable Convert'),
    '#description' => t('To start using Convert experiments, this setting must be enabled. This setting can be used to globally disable Convert experiments from working on your site without disabling yours experiments on the Convert.com website.'),
    '#default_value' => variable_get('convert_onoff', 'on'),
    '#options' => array(
      'off' => 'Disabled',
      'on' => 'Enabled',
    ),
  );
  $form['convert_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Project ID'),
    '#default_value' => variable_get('convert_id', 'NONE'),
    '#description' => t('Your Project ID. This is the numbers after <q>/js/</q> in the Convert Tracking Code. E.g: 90001234-90005678.'),
    '#size' => 20,
    '#maxlength' => 24,
    '#required' => TRUE,
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
 $form['advanced']['token_help'] = array(
    '#type' => 'item',
    '#description' => t('You can use tokens to tag your pages. Read more at the Convert.com support site: <a href="@url">http://support.convert.com/entries/21795481</a>.', array('@url' => url('http://support.convert.com/entries/21795481'))),
  );
  $form['advanced']['convert_page_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Page Type'),
    '#default_value' => variable_get('convert_page_type', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_category_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Category ID'),
    '#default_value' => variable_get('convert_category_id', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_category_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Category Name'),
    '#default_value' => variable_get('convert_category_name', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_product_sku'] = array(
    '#type' => 'textfield',
    '#title' => t('Product SKU'),
    '#default_value' => variable_get('convert_product_sku', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_product_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Product Name'),
    '#default_value' => variable_get('convert_product_name', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_product_price'] = array(
    '#type' => 'textfield',
    '#title' => t('Product Price'),
    '#default_value' => variable_get('convert_product_price', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_customer_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Customer ID'),
    '#default_value' => variable_get('convert_customer_id', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_custom_v1'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Variable 1'),
    '#default_value' => variable_get('convert_custom_v1', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_custom_v2'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Variable 2'),
    '#default_value' => variable_get('convert_custom_v2', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_custom_v3'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Variable 3'),
    '#default_value' => variable_get('convert_custom_v3', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['convert_custom_v4'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Variable 4'),
    '#default_value' => variable_get('convert_custom_v4', ''),
    '#size' => 20,
    '#element_validate' => array('token_element_validate'),
    '#after_build' => array('token_element_validate'),
    '#token_types' => array('node'),
  );
  $form['advanced']['token_tree'] = array(
    '#type' => 'markup',
    '#theme' => 'token_tree',
    '#token_types' => array('node'),
  );
  return system_settings_form($form);
}


/**
 * Implements hook_commerce_checkout_router()
 *
 */
function convert_commerce_checkout_router($order, $checkout_page) {
  // Add the javascript only when we are on the order complete page
  if ($checkout_page['page_id'] == 'complete' ) {
    $script = convert_ecommerce_js($order);
    // Add the code to the footer.
    drupal_add_js($script, array('type' => 'inline', 'scope' => 'footer', 'preprocess' => FALSE));
  }

}

/**
 * Build the e-commerce JS passed to Convert.com for revenue tracking.
 *
 * @param $order
 *   The fully loaded order object to get total amount from.
 * @return
 *   The JS that should be added to the page footer.
 */
function convert_ecommerce_js($order) {
  if(!($order instanceof EntityMetadataWrapper)) {
    $order = entity_metadata_wrapper('commerce_order', $order);
  }
  $line_items = $order->commerce_line_items;
  $products_cnt = commerce_line_items_quantity($line_items, array('product'));
  $total = round($order->commerce_order_total->amount->value() / 100, 2);
  $transaction_id = $order->order_id->value();
  $script = 'if(typeof(_conv_q)!="undefined")';
  $script .= '_conv_q.push(["sendRevenue",' . $transaction_id . ',' . $total . ',' . $products_cnt . ']);';
  return $script;
}