<?php

/**
 * @file
 * Defines attribute functionality.
 *
 * Attributes are attached to other DRPG entities to define characteristics.
 */

/**
 * Implements hook_entity_info().
 */
function drpg_attribute_entity_info() {
  return array(
    'drpg_attribute' => array(
      'label' => t('Attribute'),
      'plural label' => t('Attributes'),
      'controller class' => 'DrpgAttributeEntityController',
      'rules controller class' => 'EntityDefaultRulesController',
      'entity class' => 'DrpgAttribute',
      'base table' => 'drpg_attribute',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'attribute_id',
        'label' => 'label',
      ),
      'uri callback' => 'entity_class_uri',
      'module' => 'drpg_attribute',
      'label callback' => 'entity_class_label',
      'access callback' => 'drpg_attribute_access',
    ),
  );
}

/**
 * Access callback for attribute admin functionality.
 */
function drpg_attribute_access($op, $entity, $account = NULL) {
  return user_access('administer drpg', $account);
}

/**
 * Implements hook_hook_info().
 */
function drpg_attribute_hook_info() {
  $hooks = array(
    'drpg_attribute_names' => array(
      'group' => 'drpg',
    ),
  );

  return $hooks;
}

/**
 * Returns an array of attribute names defined by enabled modules.
 *
 * @see hook_drpg_attribute_names()
 *
 * @return array
 *   Array of attribute names indexed by attribute ID.
 */
function drpg_attribute_names() {
  $attribute_names = &drupal_static(__FUNCTION__);

  if (!isset($attribute_names)) {
    $attribute_names = array();

    foreach (module_implements('drpg_attribute_names') as $module) {
      foreach (module_invoke($module, 'drpg_attribute_names') as $key => $name) {
        if (!isset($attribute_names[$key])) {
          $attribute_names[$key] = $name;
        }
      }
    }
  }

  return $attribute_names;
}

/**
 * Returns an array of attributes for a given entity type and entity ID.
 *
 * @param string $type
 *   The type of entity to return attributes for.
 * @param int $entity_id
 *   The ID of the entity to return attributes for.
 *
 * @return array
 *   Array of DRPGAttribute objects.
 */
function drpg_attribute_get_entity_attributes($type, $entity_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_attribute')
    ->propertyCondition('type', $type, '=')
    ->propertyCondition('entity_id', $entity_id, '=');

  $result = $query->execute();

  $attributes = array();

  if (isset($result['drpg_attribute'])) {
    $entity_ids = array_keys($result['drpg_attribute']);
    $attributes = entity_load('drpg_attribute', $entity_ids);
  }

  return array_values($attributes);
}

/**
 * Returns an attribute for a given attribute ID.
 *
 * @param int $attribute_id
 *   The attribute ID.
 *
 * @return DrpgAttribute
 *   The attribute.
 */
function drpg_attribute_get_attribute($attribute_id) {
  return entity_load_single('drpg_attribute', $attribute_id);
}
