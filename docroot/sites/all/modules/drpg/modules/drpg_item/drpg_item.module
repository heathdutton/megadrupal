<?php

/**
 * @file
 * Defines item functionality.
 *
 * Items can be used as inventory by other DRPG entities.
 */

/**
 * Implements hook_entity_info().
 */
function drpg_item_entity_info() {
  $entities = array();

  $entities['drpg_item'] = array(
    'label' => t('Item'),
    'plural label' => t('Items'),
    'controller class' => 'DrpgItemEntityController',
    'rules controller class' => 'EntityDefaultRulesController',
    'entity class' => 'DrpgItem',
    'base table' => 'drpg_item',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'item_id',
      'label' => 'label',
    ),
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/drpg/items',
      'file' => 'drpg_item.admin.inc',
      'file path' => drupal_get_path('module', 'drpg_item') . '/includes',
      'controller class' => 'DrpgItemUIController',
    ),
    'uri callback' => 'entity_class_uri',
    'module' => 'drpg_item',
    'label callback' => 'entity_class_label',
    'access callback' => 'drpg_item_access',
  );

  $entities['drpg_item_container'] = array(
    'label' => t('Item Container'),
    'plural label' => t('Item Containers'),
    'controller class' => 'DrpgItemContainerEntityController',
    'rules controller class' => 'EntityDefaultRulesController',
    'entity class' => 'DrpgItemContainer',
    'base table' => 'drpg_item_container',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'item_container_id',
      'label' => 'label',
    ),
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/drpg/item_containers',
      'file' => 'drpg_item_container.admin.inc',
      'file path' => drupal_get_path('module', 'drpg_item') . '/includes',
      'controller class' => 'DrpgItemContainerUIController',
    ),
    'uri callback' => 'entity_class_uri',
    'module' => 'drpg_item_container',
    'label callback' => 'entity_class_label',
    'access callback' => 'drpg_item_access',
  );

  $entities['drpg_item_instance'] = array(
    'label' => t('Item Instance'),
    'plural label' => t('Item Instances'),
    'controller class' => 'DrpgItemInstanceEntityController',
    'rules controller class' => 'EntityDefaultRulesController',
    'entity class' => 'DrpgItemInstance',
    'base table' => 'drpg_item_instance',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'item_instance_id',
    ),
    'uri callback' => 'entity_class_uri',
    'module' => 'drpg_item_instance',
    'label callback' => 'entity_class_label',
    'access callback' => 'drpg_item_access',
  );

  return $entities;
}

/**
 * Access callback for item admin functionality.
 */
function drpg_item_access($op, $entity, $account = NULL) {
  return user_access('administer drpg', $account);
}

/**
 * Implements hook_menu().
 */
function drpg_item_menu() {
  $items = array();

  $items['drpg/data/container'] = array(
    'title' => 'DRPG Item Container',
    'description' => 'Get item container data.',
    'page callback' => 'drpg_item_container_data',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/drpg_item_container.data.inc',
    'weight' => 0,
  );

  $items['drpg/data/items'] = array(
    'title' => 'DRPG Items',
    'description' => 'Get items data.',
    'page callback' => 'drpg_item_all_items_data',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/drpg_item.data.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_drpg_attribute_names().
 */
function drpg_item_drpg_attribute_names() {
  $attribute_names = array(
    'damage' => 'Damage',
  );

  return $attribute_names;
}

/**
 * Returns an array of DrpgItem objects.
 *
 * @return array
 *   Array of DrpgItem objects.
 */
function drpg_item_get_items() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_item');

  $result = $query->execute();

  $items = array();

  if (isset($result['drpg_item'])) {
    $entity_ids = array_keys($result['drpg_item']);
    $items = entity_load('drpg_item', $entity_ids);
  }

  return $items;
}

/**
 * Returns an array of item names indexed by item ID.
 *
 * @return array
 *   Array of item names indexed by item ID.
 */
function drpg_item_get_item_names() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_item');

  $result = $query->execute();

  $item_names = array();

  if (isset($result['drpg_item'])) {
    $entity_ids = array_keys($result['drpg_item']);
    $items = entity_load('drpg_item', $entity_ids);

    foreach ($items as $item) {
      $item_names[$item->item_id] = $item->label;
    }
  }

  return $item_names;
}

/**
 * Returns an item container for a given item container ID.
 *
 * @param int $item_container_id
 *   The item container ID.
 *
 * @return DrpgItemContainer
 *   The item Container.
 */
function drpg_item_get_item_container($item_container_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_item_container')
    ->propertyCondition('item_container_id', $item_container_id, '=');

  $result = $query->execute();

  $item_container = NULL;

  if (isset($result['drpg_item_container'])) {
    $entity_ids = array_keys($result['drpg_item_container']);
    if (is_array($entity_ids)) {
      reset($entity_ids);
      // Load item container bypassing Drupal's entity cache.
      // This is important when adding item instances as a room may contain
      // multiple item containers of the same type.
      $item_container = entity_load_unchanged('drpg_item_container', current($entity_ids));
    }
  }

  if ($item_container != NULL) {
    $item_container->items = drpg_item_get_item_container_items($item_container);
  }

  return $item_container;
}

/**
 * Returns the items contained within an item container.
 *
 * Items are a randomized selection of items that match
 * the item container's rarity value.
 *
 * @param DrpgItemContainer $item_container
 *   The item container.
 *
 * @return array
 *   Array of DRPGItem objects.
 */
function drpg_item_get_item_container_items(DrpgItemContainer $item_container) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_item')
    ->propertyCondition('rarity', $item_container->item_rarity, $item_container->item_rarity_operator)
    ->addTag('random')
    ->range(0, $item_container->item_quantity);

  $result = $query->execute();

  $items = array();

  if (isset($result['drpg_item'])) {
    $entity_ids = array_keys($result['drpg_item']);
    $items = array_values(entity_load('drpg_item', $entity_ids));
  }

  return $items;
}

/**
 * Implements hook_query_TAG_alter().
 */
function drpg_item_query_random_alter($query) {
  $query->orderRandom();
}

/**
 * Creates an instance of an item for a given entity.
 *
 * @param string $type
 *   The type of entity to create the item instance for.
 * @param int $entity_id
 *   The ID of the entity to create the item instance for.
 * @param int $item_id
 *   The ID of the item to create the item instance from.
 *
 * @return DrpgItemInstance
 *   The new item instance or NULL on failure.
 */
function drpg_item_create_item_instance($type, $entity_id, $item_id) {
  $values = array(
    'type' => $type,
    'entity_id' => $entity_id,
    'item_id' => $item_id,
  );

  $item_instance = entity_create('drpg_item_instance', $values);
  $save_result = $item_instance->save();

  return ($save_result !== FALSE) ? $item_instance : NULL;
}

/**
 * Deletes an item instance.
 *
 * @param int $item_instance_id
 *   The item instance ID.
 *
 * @return bool
 *   TRUE on successful deletion.
 */
function drpg_item_delete_item_instance($item_instance_id) {
  return entity_delete('drpg_item_instance', $item_instance_id);
}

/**
 * Deletes all item instances for a given entity.
 *
 * @param string $type
 *   The type of entity to delete item instances for.
 * @param int $entity_id
 *   The ID of the entity to delete item instances for.
 *
 * @return bool
 *   TRUE on successful deletion.
 */
function drpg_item_delete_item_instances($type, $entity_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_item_instance')
    ->propertyCondition('type', $type, '=')
    ->propertyCondition('entity_id', $entity_id, '=');

  $result = $query->execute();

  if (isset($result['drpg_item_instance'])) {
    $entity_ids = array_keys($result['drpg_item_instance']);

    return entity_delete_multiple('drpg_item_instance', $entity_ids);
  }

  return FALSE;
}

/**
 * Returns an item for a given item ID.
 *
 * @param int $item_id
 *   The item ID.
 *
 * @return DrpgItem
 *   The item.
 */
function drpg_item_get_item($item_id) {
  return entity_load_single('drpg_item', $item_id);
}

/**
 * Returns all item instances of a given item owned by a given entity.
 *
 * @param string $type
 *   The entity type owning the item instances.
 * @param int $entity_id
 *   The ID of the entity owning the item instances.
 * @param int $item_id
 *   The ID of the item.
 *
 * @return array
 *   Array of DRPGItemInstance objects.
 */
function drpg_item_get_item_instances($type, $entity_id, $item_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_item_instance')
    ->propertyCondition('type', $type, '=')
    ->propertyCondition('entity_id', $entity_id, '=')
    ->propertyCondition('item_id', $item_id, '=');

  $result = $query->execute();

  $item_instances = array();

  if (isset($result['drpg_item_instance'])) {
    $entity_ids = array_keys($result['drpg_item_instance']);
    $item_instances = array_values(entity_load('drpg_item_instance', $entity_ids));
  }

  return $item_instances;
}

/**
 * Returns an item instance for a given item instance ID.
 *
 * @param int $item_instance_id
 *   The item instance ID.
 *
 * @return DrpgItemInstance
 *   The item instance.
 */
function drpg_item_get_item_instance($item_instance_id) {
  return entity_load_single('drpg_item_instance', $item_instance_id);
}

/**
 * Returns an array of operators used to define the rarity of container items.
 *
 * For example, a container may provide items with a rarity value of '>= 10'.
 *
 * @return array
 *   Array of rarity operators.
 */
function drpg_item_rarity_operators() {
  return array(
    '=' => '=',
    '>' => '>',
    '<' => '<',
    '>=' => '>=',
    '<=' => '<=',
  );
}
