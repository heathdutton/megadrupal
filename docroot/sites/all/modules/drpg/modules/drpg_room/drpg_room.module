<?php

/**
 * @file
 * Defines room functionality.
 *
 * Rooms can contain item and NPC entities.
 */

/**
 * Implements hook_entity_info().
 */
function drpg_room_entity_info() {
  return array(
    'drpg_room' => array(
      'label' => t('Room'),
      'plural label' => t('Rooms'),
      'controller class' => 'DrpgRoomEntityController',
      'rules controller class' => 'EntityDefaultRulesController',
      'entity class' => 'DrpgRoom',
      'base table' => 'drpg_room',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'room_id',
        'label' => 'label',
      ),
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/drpg/rooms',
        'file' => 'drpg_room.admin.inc',
        'file path' => drupal_get_path('module', 'drpg_room') . '/includes',
        'controller class' => 'DrpgRoomUIController',
      ),
      'uri callback' => 'entity_class_uri',
      'module' => 'drpg_room',
      'label callback' => 'entity_class_label',
      'access callback' => 'drpg_room_access',
    ),
  );
}

/**
 * Access callback for room admin functionality.
 */
function drpg_room_access($op, $entity, $account = NULL) {
  return user_access('administer drpg', $account);
}

/**
 * Implements hook_menu().
 */
function drpg_room_menu() {
  $items = array();

  $items['drpg/data/room'] = array(
    'title' => 'DRPG Room',
    'description' => 'Get room data.',
    'page callback' => 'drpg_room_data',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/drpg_room.data.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Returns a room along with all associated item container and NPCs.
 *
 * @param int $room_id
 *   The room ID.
 *
 * @return DrpgRoom
 *   The room.
 */
function drpg_room_get_room($room_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_room')
    ->propertyCondition('room_id', $room_id, '=');

  $result = $query->execute();

  $room = NULL;

  if (isset($result['drpg_room'])) {
    $entity_ids = array_keys($result['drpg_room']);
    if (is_array($entity_ids)) {
      reset($entity_ids);
      $room = entity_load_single('drpg_room', current($entity_ids));
    }
  }

  if ($room != NULL) {
    $room_wrapper = entity_metadata_wrapper('drpg_room', $room);

    // Get the item containers available to this room.
    $item_containers = $room_wrapper->drpg_multi_item_container_ref->value();
    $total_item_containers = count($item_containers);

    $room->item_containers = array();

    if ($room->item_container_quantity > 0) {
      // Pick random item containers from the available containers
      // until the room's item container quantity is reached.
      for ($i = 0; $i < $room->item_container_quantity; $i++) {
        $item_container_index = rand(0, ($total_item_containers - 1));

        // Get the item container with items.
        $room->item_containers[$i] = drpg_item_get_item_container($item_containers[$item_container_index]->item_container_id);
      }
    }

    // Get the NPCs in this room.
    $npcs = $room_wrapper->drpg_multi_npc_ref->value();

    $room->npcs = array();

    foreach ($npcs as $npc) {
      $room->npcs[] = drpg_npc_get_npc($npc->npc_id);
    }
  }

  return $room;
}

/**
 * Creates instances of item containers and NPCs for a given room and entity.
 *
 * @param string $type
 *   The type of entity to create instances for.
 * @param int $entity_id
 *   The ID of the entity to create instances for.
 * @param DrpgRoom $room
 *   The room to attach created instances to.
 */
function drpg_room_create_instances($type, $entity_id, DrpgRoom &$room) {
  // Create item instances.
  foreach ($room->item_containers as $item_container) {
    $item_container->item_instances = array();

    foreach ($item_container->items as $item) {
      $item_instance = drpg_item_create_item_instance($type, $entity_id, $item->item_id);
      if ($item_instance != NULL) {
        $item_container->item_instances[] = $item_instance;
      }
    }
  }

  // Create NPC instances.
  $room->npc_instances = array();

  foreach ($room->npcs as $npc) {
    $npc_instance = drpg_npc_create_npc_instance($type, $entity_id, $npc->npc_id);
    $room->npc_instances[] = $npc_instance;
  }
}

/**
 * Deletes all instances of item containers and NPCs for a given entity.
 *
 * @param string $type
 *   The type of entity to delete instances for.
 * @param int $entity_id
 *   The ID of the entity to delete instances for.
 */
function drpg_room_delete_instances($type, $entity_id) {
  // Delete item instances.
  drpg_item_delete_item_instances($type, $entity_id);

  // Delete NPC instances.
  drpg_npc_delete_npc_instances($type, $entity_id);
}
