<?php

/**
 * @file
 * Defines NPC functionality.
 */

/**
 * Implements hook_entity_info().
 */
function drpg_npc_entity_info() {
  $entities = array();

  $entities['drpg_npc'] = array(
    'label' => t('NPC'),
    'plural label' => t('NPCs'),
    'controller class' => 'DrpgNPCEntityController',
    'rules controller class' => 'EntityDefaultRulesController',
    'entity class' => 'DrpgNPC',
    'base table' => 'drpg_npc',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'npc_id',
      'label' => 'label',
    ),
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/drpg/npcs',
      'file' => 'drpg_npc.admin.inc',
      'file path' => drupal_get_path('module', 'drpg_npc') . '/includes',
      'controller class' => 'DrpgNPCUIController',
    ),
    'uri callback' => 'entity_class_uri',
    'module' => 'drpg_npc',
    'label callback' => 'entity_class_label',
    'access callback' => 'drpg_npc_access',
  );

  $entities['drpg_npc_instance'] = array(
    'label' => t('NPC Instance'),
    'plural label' => t('NPC Instances'),
    'controller class' => 'DrpgNPCInstanceEntityController',
    'rules controller class' => 'EntityDefaultRulesController',
    'entity class' => 'DrpgNPCInstance',
    'base table' => 'drpg_npc_instance',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'npc_instance_id',
    ),
    'uri callback' => 'entity_class_uri',
    'module' => 'drpg_npc_instance',
    'label callback' => 'entity_class_label',
    'access callback' => 'drpg_npc_access',
  );

  return $entities;
}

/**
 * Access callback for NPC admin functionality.
 */
function drpg_npc_access($op, $entity, $account = NULL) {
  return user_access('administer drpg', $account);
}

/**
 * Implements hook_menu().
 */
function drpg_npc_menu() {
  $items = array();

  $items['drpg/data/npc'] = array(
    'title' => 'DRPG NPC',
    'description' => 'Get NPC data.',
    'page callback' => 'drpg_npc_data',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/drpg_npc.data.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Returns an array of NPC types defined by enabled modules.
 *
 * @return array
 *   Array of NPC types indexed by type ID.
 */
function drpg_npc_types() {
  $npc_types = &drupal_static(__FUNCTION__);

  if (!isset($npc_types)) {
    $npc_types = array();

    foreach (module_implements('drpg_npc_types') as $module) {
      foreach (module_invoke($module, 'drpg_npc_types') as $key => $type) {
        if (!isset($npc_types[$key])) {
          $npc_types[$key] = $type;
        }
      }
    }
  }

  return $npc_types;
}

/**
 * Implements hook_hook_info().
 */
function drpg_npc_hook_info() {
  $hooks = array(
    'drpg_npc_types' => array(
      'group' => 'drpg',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_drpg_npc_types().
 */
function drpg_npc_drpg_npc_types() {
  $npc_types = array(
    'friendly' => 'Friendly',
    'enemy' => 'Enemy',
  );

  return $npc_types;
}

/**
 * Returns an NPC for a given ID.
 *
 * @param int $npc_id
 *   The ID of the NPC to return.
 *
 * @return DrpgNPC
 *   The NPC.
 */
function drpg_npc_get_npc($npc_id) {
  return entity_load_single('drpg_npc', $npc_id);
}

/**
 * Creates an instance of an NPC for a given entity.
 *
 * @param string $type
 *   The type of entity to create the NPC instance for.
 * @param int $entity_id
 *   The ID of the entity to create the NPC instance for.
 * @param int $npc_id
 *   The ID of the NPC to create the NPC instance from.
 *
 * @return DrpgNPCInstance
 *   The new NPC instance or NULL on failure.
 */
function drpg_npc_create_npc_instance($type, $entity_id, $npc_id) {
  $values = array(
    'type' => $type,
    'entity_id' => $entity_id,
    'npc_id' => $npc_id,
  );

  $npc_instance = entity_create('drpg_npc_instance', $values);
  $save_result = $npc_instance->save();

  return ($save_result !== FALSE) ? $npc_instance : NULL;
}

/**
 * Deletes an NPC instance.
 *
 * @param int $npc_instance_id
 *   The NPC instance ID.
 *
 * @return bool
 *   TRUE on successful deletion.
 */
function drpg_npc_delete_npc_instance($npc_instance_id) {
  return entity_delete('drpg_npc_instance', $npc_instance_id);
}

/**
 * Deletes all NPC instances for a given entity.
 *
 * @param string $type
 *   The type of entity to delete NPC instances for.
 * @param int $entity_id
 *   The ID of the entity to delete NPC instances for.
 *
 * @return bool
 *   TRUE on successful deletion.
 */
function drpg_npc_delete_npc_instances($type, $entity_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_npc_instance')
    ->propertyCondition('type', $type, '=')
    ->propertyCondition('entity_id', $entity_id, '=');

  $result = $query->execute();

  if (isset($result['drpg_npc_instance'])) {
    $entity_ids = array_keys($result['drpg_npc_instance']);

    return entity_delete_multiple('drpg_npc_instance', $entity_ids);
  }

  return FALSE;
}

/**
 * Returns all instances of an NPC owned by a given entity.
 *
 * @param string $type
 *   The entity type owning the NPC instances.
 * @param int $entity_id
 *   The ID of the entity owning the NPC instances.
 * @param int $npc_id
 *   The ID of the NPC.
 *
 * @return array
 *   Array of DrpgNPCInstance objects.
 */
function drpg_npc_get_npc_instances($type, $entity_id, $npc_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_npc_instance')
    ->propertyCondition('type', $type, '=')
    ->propertyCondition('entity_id', $entity_id, '=')
    ->propertyCondition('npc_id', $npc_id, '=');

  $result = $query->execute();

  $npc_instances = array();

  if (isset($result['drpg_npc_instance'])) {
    $entity_ids = array_keys($result['drpg_npc_instance']);
    $npc_instances = array_values(entity_load('drpg_npc_instance', $entity_ids));
  }

  return $npc_instances;
}

/**
 * Returns an NPC instance for a given NPC instance ID.
 *
 * @param int $npc_instance_id
 *   The NPC instance ID.
 *
 * @return DrpgNPCInstance
 *   The NPC instance.
 */
function drpg_npc_get_npc_instance($npc_instance_id) {
  return entity_load_single('drpg_npc_instance', $npc_instance_id);
}
