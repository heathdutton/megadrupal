<?php

/**
 * @file
 * Defines inventory item functionality.
 */

/**
 * Implements hook_entity_info().
 */
function drpg_inventory_item_entity_info() {
  $entities = array();

  $entities['drpg_inventory_item'] = array(
    'label' => t('Inventory Item'),
    'plural label' => t('Inventory Items'),
    'controller class' => 'DrpgInventoryItemEntityController',
    'rules controller class' => 'EntityDefaultRulesController',
    'entity class' => 'DrpgInventoryItem',
    'base table' => 'drpg_inventory_item',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'inventory_item_id',
    ),
    'uri callback' => 'entity_class_uri',
    'module' => 'drpg_inventory_item',
    'label callback' => 'entity_class_label',
    'access callback' => 'drpg_inventory_item_access',
  );

  return $entities;
}

/**
 * Access callback for inventory item admin functionality.
 */
function drpg_inventory_item_access($op, $entity, $account = NULL) {
  return user_access('administer drpg', $account);
}

/**
 * Implements hook_menu().
 */
function drpg_inventory_item_menu() {
  $items = array();

  $items['drpg/data/inventory/%/%'] = array(
    'title' => 'DRPG Inventory Items',
    'description' => 'Get inventory items data.',
    'page callback' => 'drpg_inventory_item_inventory_data',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/drpg_inventory_item.data.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_drpg_event_method_info().
 */
function drpg_inventory_item_drpg_event_method_info() {
  $events = array();

  $events['drpg_inventory_item_equip_item_event'] = array(
    'description' => 'Equips an inventory item.',
    'access' => 'drpg_event_can_process_event',
  );

  $events['drpg_inventory_item_unequip_item_event'] = array(
    'description' => 'Unequips the currently equipped inventory item.',
    'access' => 'drpg_event_can_process_event',
  );

  $events['drpg_inventory_add_item_event'] = array(
    'description' => 'Adds an item to the inventory. An item instance entity must exist.',
    'access' => 'drpg_event_can_process_event',
  );

  return $events;
}

/**
 * Returns all inventory items owned by a given entity ID.
 *
 * @param string $type
 *   The type of entity $entity_id represents.
 * @param int $entity_id
 *   The ID of the entity to return inventory items for.
 *
 * @return array
 *   Array of DRPGInventoryItem and DRPGItem objects in the format:
 *   array(
 *     'items' => array(),
 *     'item_instances' => array(),
 *   )
 */
function drpg_inventory_item_get_inventory($type, $entity_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drpg_inventory_item')
    ->propertyCondition('type', $type)
    ->propertyCondition('entity_id', $entity_id);

  $result = $query->execute();

  $inventory = array(
    'items' => array(),
    'item_instances' => array(),
  );

  // Cache item IDs to avoid duplicates.
  $item_ids = array();

  if (isset($result['drpg_inventory_item'])) {
    $entity_ids = array_keys($result['drpg_inventory_item']);
    $inventory_items = array_values(entity_load('drpg_inventory_item', $entity_ids));

    foreach ($inventory_items as $inventory_item) {

      $inventory_item_wrapper = entity_metadata_wrapper('drpg_inventory_item', $inventory_item);

      $item_id = $inventory_item_wrapper->drpg_item_ref->value()->item_id;

      if (!in_array($item_id, $item_ids)) {
        $item = entity_load_single('drpg_item', $item_id);
        $inventory['items'][] = $item;
      }

      $inventory_item->item_id = $item_id;
      $inventory['item_instances'][] = $inventory_item;
    }
  }

  return $inventory;
}

/**
 * Creates an inventory item for a given entity.
 *
 * @param string $type
 *   The type of entity to create the inventory item for.
 * @param int $entity_id
 *   The ID of the entity to create the inventory item for.
 * @param int $item_id
 *   The item ID to create the inventory item from.
 */
function drpg_inventory_item_create_item($type, $entity_id, $item_id) {
  $values = array(
    'type' => $type,
    'entity_id' => $entity_id,
  );

  $inventory_item = entity_create('drpg_inventory_item', $values);
  $inventory_item->save();

  $inventory_item_wrapper = entity_metadata_wrapper('drpg_inventory_item', $inventory_item);

  $inventory_item_wrapper->drpg_item_ref->set($item_id);
  $inventory_item_wrapper->save();
}

/**
 * Deletes an inventory item.
 *
 * @param int $inventory_item_id
 *   The inventory item ID.
 *
 * @return bool
 *   TRUE on successful deletion.
 */
function drpg_inventory_item_delete_item($inventory_item_id) {
  return entity_delete('drpg_inventory_item', $inventory_item_id);
}

/**
 * Returns an inventory item for a given ID.
 *
 * @param int $inventory_item_id
 *   The ID of the inventory item to return.
 *
 * @return DrpgInventoryItem
 *   The inventory item.
 */
function drpg_inventory_item_get_item($inventory_item_id) {
  return entity_load_single('drpg_inventory_item', $inventory_item_id);
}

/**
 * Adds an item to an entity's inventory.
 *
 * The item instance is deleted in the process.
 *
 * @param string $type
 *   The type of entity the inventory belongs to.
 * @param int $entity_id
 *   The ID of the entity the inventory belongs to.
 * @param int $item_instance_id
 *   The ID of the item instance to add to the inventory.
 *
 * @return bool
 *   True when the item is successfully added to the inventory.
 */
function drpg_inventory_add_item_event($type, $entity_id, $item_instance_id) {
  $item_instance = drpg_item_get_item_instance($item_instance_id);

  if ($item_instance != NULL) {
    if (($item_instance->type == $type) && ($item_instance->entity_id == $entity_id)) {

      // Create a new Inventory Item from the Item Instance.
      drpg_inventory_item_create_item($item_instance->type, $item_instance->entity_id, $item_instance->item_id);
      // Delete the Item Instance. It may only be used once.
      drpg_item_delete_item_instance($item_instance->item_instance_id);

      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Equips an inventory item for use.
 *
 * @param int $inventory_item_id
 *   The inventory item ID.
 *
 * @return bool
 *   TRUE on success.
 */
function drpg_inventory_item_equip_item_event($inventory_item_id) {
  global $user;

  $inventory_item = drpg_inventory_item_get_item($inventory_item_id);

  // Ensure inventory item exists.
  if ($inventory_item === FALSE) {
    return FALSE;
  }

  // Ensure user owns this inventory item.
  $avatar = drpg_avatar_get_user_active_avatar($user->uid);
  if (($inventory_item->type != 'drpg_avatar') || ($inventory_item->entity_id != $avatar->avatar_id)) {
    return FALSE;
  }

  // Unequip all inventory items.
  db_update('drpg_inventory_item')
    ->fields(array(
      'equipped' => 0,
    ))
    ->condition('type', 'drpg_avatar')
    ->condition('entity_id', $avatar->avatar_id)
    ->execute();

  // Equip inventory item.
  $inventory_item->equipped = TRUE;

  return ($inventory_item->save() !== FALSE);
}

/**
 * Unequips an inventory item.
 *
 * @param int $inventory_item_id
 *   The inventory item ID.
 *
 * @return bool
 *   TRUE on success.
 */
function drpg_inventory_item_unequip_item_event($inventory_item_id) {
  global $user;

  $inventory_item = drpg_inventory_item_get_item($inventory_item_id);

  // Ensure inventory item exists.
  if ($inventory_item === FALSE) {
    return FALSE;
  }

  // Ensure user owns this inventory item.
  $avatar = drpg_avatar_get_user_active_avatar($user->uid);
  if (($inventory_item->type != 'drpg_avatar') || ($inventory_item->entity_id != $avatar->avatar_id)) {
    return FALSE;
  }

  // Unequip inventory item.
  $inventory_item->equipped = FALSE;

  return ($inventory_item->save() !== FALSE);
}
