<?php
/**
 * @file
 * Connects Webservice Client instances with Feeds importers and mappers.
 *
 * Allows you to set up a web service client as a feeds data source,
 * and to use the Web Service Description (response object model)
 * to define the mappings of the results.
 */


/**
 * Implements hook_ctools_plugin_api().
 */
function wsclient_feeds_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
}


/**
 * Implements hook_feeds_plugins().
 */
function wsclient_feeds_feeds_plugins() {
  $path = drupal_get_path('module', 'wsclient_feeds') . '/plugins';
  $info['FeedsWSClientFetcher'] = array(
    'name' => 'Web Service Fetcher',
    'description' => 'Fetches from a Web Service using wsclient.',
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'FeedsWSClientFetcher',
    ),
  );
  $info['FeedsWSClientParser'] = array(
    'name' => t('Web Service Parser'),
    'description' => t('Parse Web service response data using the wsclient object model.'),
    'handler' => array(
      'parent' => 'FeedsParser',
      'class'  => 'FeedsWSClientParser',
    ),
  );
  $info['FeedsUniqueNodeProcessor'] = array(
    'name' => 'Node processor (Unique)',
    'description' => 'Create and update nodes.',
    'help' => '
      Identical to core Feeds Node Processor, only it repects GUIDs as
      being unique no matter where they were imported from.
      Eliminates duplicates and allows multiple sources to update a single
      target
    ',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'FeedsUniqueNodeProcessor',
      'file' => 'FeedsUniqueNodeProcessor.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Return a list of all known wsclient definitions.
 *
 * Copied from EntityDefaultUIController::overviewTable()
 */
function wsclient_feeds_fetch_instances($conditions = array()) {
  // WSClient uses the entity API for this, so I have to also.
  module_load_include('inc', 'wsclient', 'wsclient');

  $entity_type = 'wsclient_service'; // Machine name, not class name.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type);

  // Add all conditions to query.
  foreach ($conditions as $key => $value) {
    $query->propertyCondition($key, $value);
  }

  $results = $query->execute();

  $ids = isset($results[$entity_type]) ? array_keys($results[$entity_type]) : array();
  $entities = $ids ? entity_load($entity_type, $ids) : array();
  ksort($entities);

  return $entities;
}


/**
 * Small helper funcion. Parse the service_operation key.
 *
 * It's just a string of type "servicename:operationname" but I fetch it a lot.
 *
 * Returns an array containing
 *   The wsclient object and
 *   The operation definition.
 *
 * @param string $service_operation
 *  A string of like "servicename:operationname"
 */
function wsclient_feeds_get_service_operation($service_operation) {
  if (empty($service_operation)) {
    return array(NULL, NULL);
  }

  list($service_id, $operation_id) = explode(':', $service_operation);
  $service = wsclient_service_load($service_id);
  $operation = $service->operations[$operation_id];
  if (empty($service) || empty($operation)) {
    trigger_error("Failed to parse $service_operation into valid operation, or failed to load it.", E_USER_ERROR);
  }
  return array($service, $operation);
}

/**
 * AJAX callbck for inline editing of service call parameters.
 * 
 * @param array $form
 * @param array $form_state
 */
function wsclient_feeds_operation_arguments_callback_form($form, $form_state) {
  return $form['operation_arguments'];
}
