<?php

/**
 * @file
 * Scald Map is a Scald Atom Provider for Maps.
 */

/*******************************************************************************
 * SCALD HOOK IMPLEMENTATIONS
 */


/**
 * Implements hook_scald_atom_providers().
 */
function scald_map_scald_atom_providers() {
  return array(
    'map' => 'Map embed',
  );
}

/**
 * Implements hook_scald_wysiwyg_context_list_alter().
 */
function scald_map_scald_wysiwyg_context_list_alter(&$contexts) {
  drupal_add_js(drupal_get_path('module', 'scald_map') . '/scald_map.js');
}

/**
 * Implements hook_menu().
 */
function scald_map_menu() {
  $items = array();

  $items['scald/map/render/%scald_atom/%'] = array(
    'page callback' => 'scald_map_render_callback',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('access content'),
    'delivery callback' => 'scald_map_content_callback',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_scald_add_form().
 */
function scald_map_scald_add_form(&$form, &$form_state) {
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_map_scald_add_form_fill(&$atoms, $form, $form_state) {
}

/**
 * Implements hook_scald_fetch().
 */
function scald_map_scald_fetch($atom, $type) {
  if ($type == 'atom') {
    $file_items = field_get_items('scald_atom', $atom, 'scald_thumbnail');
    if (!empty($file_items)) {
      $file_item = current($file_items);
      if (file_exists($file_item['uri'])) {
        $atom->file_source = $atom->thumbnail_source = $file_item['uri'];
      }
    }
    else {
      $atom->thumbnail_source = drupal_get_path('module', 'scald_map') . '/icons/map-default.png';
    }
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_map_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    if ($context === 'sdl_library_item') {
      $scald_thumbnail = field_get_items('scald_atom', $atom, 'scald_thumbnail');
      if (empty($scald_thumbnail)) {
        $atom->rendered->thumbnail_transcoded_url = file_create_url($atom->thumbnail_source);
      }
    }
    else {
      $scald_geo = field_get_items('scald_atom', $atom, 'scald_geo');
      if (!empty($scald_geo)) {
        $zoomlevel = _scald_map_extract_zoomlevel($options);
        $context_config = scald_context_config_load($context);
        $dimensions = _scald_map_extract_dimensions($context_config);
        $atom->rendered->player = theme('scald_map_render',
          array(
            'vars' => array(
              'context' => $context,
              'id' => $atom->sid,
              'zoomlevel' => $zoomlevel,
              'width' => $dimensions[0],
              'height' => $dimensions[1],
            ),
          )
        );
      }
    }
  }
}

function _scald_map_extract_dimensions($config) {
  $width = 600;
  $height = 450;
  if(!empty($config->data['width'])){
    $width = $config->data['width'];
  }
  if(!empty($config->data['height'])){
    $height = $config->data['height'];
  }
  return array($width, $height);
}

/**
 * Sanitize and return the value of the zoom level option.
 */
function _scald_map_extract_zoomlevel($options) {
  $zoomlevel = 8;
  if (!empty($options['zoomlevel']) && is_numeric($options['zoomlevel'])) {
    $value = (int) $options['zoomlevel'];
    if ($value >= 0 && $value <= 18) {
      $zoomlevel = $value;
    }
  }
  return $zoomlevel;
}

/**
 * Delivery callback for the map atom.
 */
function scald_map_content_callback($page_callback_result) {
  print $page_callback_result;
  print drupal_get_js();
  print drupal_get_css();
  drupal_page_footer();
}

/**
 * Renders a map based on the atom referenced.
 */
function scald_map_render_callback($atom, $context, $zoomlevel) {
  $config = scald_context_config_load($context);
  $dimensions = _scald_map_extract_dimensions($config);
  $scald_geo = field_get_items('scald_atom', $atom, 'scald_geo');
  if (!empty($scald_geo)) {
    $mapzoom = _scald_map_extract_zoomlevel(array('zoomlevel' => $zoomlevel));
    $build = field_view_value('scald_atom', $atom, 'scald_geo', $scald_geo[0], array(
      'label' => 'hidden',
      'type' => 'geofield_map_map',
      'settings' => array(
        'geofield_map_height' => $dimensions[1],
        'geofield_map_draggable' => 1,
        'geofield_map_zoom' => $mapzoom,
      ),
    ));
    return render($build);
  }
  return '';
}

/**
 * Implements hook_theme().
 */
function scald_map_theme() {
  return array(
    'scald_map_render' => array(
      'variables' => array(
        'vars' => NULL,
      ),
      'template' => 'scald-map-render',
    ),
  );
}

/**
 * Processes variables for scald_map_render.tpl.php.
 *
 * Defines theme hook suggestions to be able to overwrite
 * the template by context.
 */
function template_preprocess_scald_map_render(&$variables) {
  $variables['theme_hook_suggestions'][] = 'scald_map_render';
  $variables['theme_hook_suggestions'][] = 'scald_map_render__' . $variables['vars']['context'];
}
