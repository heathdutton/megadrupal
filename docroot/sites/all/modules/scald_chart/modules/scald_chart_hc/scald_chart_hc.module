<?php

/**
 * @file
 * Scald Highchart is a Scald Atom Player for Scald Charts.
 */

/**
 * Implements hook_menu().
 */
function scald_chart_hc_menu() {
  $items = array();

  $items['scald_chart_hc/%scald_atom/%/%'] = array(
    'title' => 'scald highchart iframe',
    'access callback' => 'scald_action_permitted',
    'access arguments' => array(1, 'view'),
    'page callback' => 'scald_chart_hc_chart_iframe',
    'page arguments' => array(1, 2, 3),
    'file' => 'includes/scald_chart_hc.pages.inc',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'scald_chart_hc_chart_iframe_delivery_callback',
  );

  return $items;
}

/**
 * Implements hook_scald_player().
 */
function scald_chart_hc_scald_player() {
  return array(
    'highchart' => array(
      'name' => 'Highchart',
      'description' => 'Display highchart.',
      'type' => array('chart'),
      'settings' => array(
        'series_color_style' => '',
        'plot_background_color' => '',
        'title_position' => 'center',
        'subtitle_position' => 'center',
        'legend_position' => 'bottom',
        'credit_position' => 'right',
        'exporting' => 'true',
        'js_source_type' => 'external',
        'js_source' => 'http://code.highcharts.com/highcharts.js',
      ),
    ),
  );

  // This code will never be hit, but is necessary to mark the string
  // for translation on localize.d.o
  t('Highchart');
  t('Display highchart.');
}

/**
 * Implements hook_scald_player_settings_form().
 */
function scald_chart_hc_scald_player_settings_form($form, &$form_state) {
  $form['series_color_style'] = array(
    '#type' => 'textfield',
    '#title' => t('Series color style'),
    '#description' => t('Enter the color codes of the columns on the chart with commas in between. e.g.: #9ECAE1,#3182BD'),
    '#default_value' => $form['#scald']['player_settings']['series_color_style'],
  );

  $form['plot_background_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Plot background color'),
    '#description' => t('Enter the color code for the chart background.'),
    '#default_value' => $form['#scald']['player_settings']['plot_background_color'],
  );

  $form['title_position'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Title position'),
    '#description' => t('Select the orientation of the title.'),
    '#default_value' => $form['#scald']['player_settings']['title_position'],
    '#options' => array(
      'left' => t('Left'),
      'center' => t('Center'),
      'right' => t('Right'),
    ),
  );

  $form['subtitle_position'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Subtitle position'),
    '#description' => t('Select the orientation of the subtitle.'),
    '#default_value' => $form['#scald']['player_settings']['subtitle_position'],
    '#options' => array(
      'left' => t('Left'),
      'center' => t('Center'),
      'right' => t('Right'),
    ),
  );

  $form['legend_position'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Legend position'),
    '#description' => t('Select the orientation of the legend.'),
    '#default_value' => $form['#scald']['player_settings']['legend_position'],
    '#options' => array(
      'top' => t('Top'),
      'bottom' => t('Bottom'),
    ),
  );

  $form['credit_position'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Credit position'),
    '#description' => t('Select the orientation of the credit.'),
    '#default_value' => $form['#scald']['player_settings']['credit_position'],
    '#options' => array(
      'left' => t('Left'),
      'center' => t('Center'),
      'right' => t('Right'),
    ),
  );

  $form['exporting'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Chart exporting'),
    '#description' => t('Select the chart exporting option.'),
    '#default_value' => $form['#scald']['player_settings']['exporting'],
    '#options' => array(
      'true' => t('Enable'),
      'false' => t('Disable'),
    ),
  );

  $form['js_source_type'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Highcharts JS source type'),
    '#description' => t('Select the Highcharts JS source type. For local the library has to reside in the /sites/all/libraries/highcharts folder.'),
    '#default_value' => $form['#scald']['player_settings']['js_source_type'],
    '#options' => array(
      'external' => t('External'),
      'file' => t('Local'),
    ),
  );

  $form['js_source'] = array(
    '#type' => 'textfield',
    '#title' => t('Highcharts JS source'),
    '#description' => t('The URL for the highcharts.js file.'),
    '#default_value' => $form['#scald']['player_settings']['js_source'],
    '#element_validate' => array('scald_chart_hc_scald_player_settings_form_js_source_validate'),
    '#states' => array(
      'visible' => array(
        ':input[name="js_source_type"]' => array('value' => 'external'),
      ),
    ),
  );

  return $form;
}

/**
 * The chart_hc scald player settings js_source field validate.
 */
function scald_chart_hc_scald_player_settings_form_js_source_validate($element, &$form_state, $form) {
  if ('external' == $form_state['values']['js_source_type']) {
    if (empty($element['#value'])) {
      form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
    }
  }
  else {
    if (!function_exists('libraries_get_path')) {
      form_set_error('js_source_type', t('The libraries module is required.'));
    }
    else {
      $path = libraries_get_path('highcharts');
      if (empty($path)) {
        form_set_error('js_source_type', t('The HighCharts JS library not found.'));
      }
    }
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_chart_hc_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'player') {
    // Invoke the Player prerender hook.
    $config = scald_context_config_load($context);
    $player = isset($config->player[$atom->type]) ? $config->player[$atom->type]['*'] : 'default';
    if ('highchart' == $player) {
      $options = $config->data;
      $options += array(
        'width' => '100%',
        'height' => '400',
      );
      if (empty($options['width'])) {
        $options['width'] = '100%';
      }
      if (empty($options['height'])) {
        $options['height'] = '400';
      }

      $atom->rendered->player = array(
        '#theme' => 'scald_chart_hc_iframe',
        '#atom' => $atom,
        '#context' => $context,
        '#mode' => $mode,
        '#options' => $options,
      );
    }

    return;
  }
}

/**
 * Implements hook_theme().
 */
function scald_chart_hc_theme() {
  return array(
    'scald_chart_hc' => array(
      'variables' => array(
        'atom' => NULL,
        'chartid' => '',
        'chart' => '',
        'options' => array(),
      ),
      'template' => 'scald_chart_hc',
    ),
    'scald_chart_hc_iframe' => array(
      'variables' => array(
        'atom' => NULL,
        'context' => '',
        'mode' => '',
        'options' => array(),
      ),
      'template' => 'scald_chart_hc_iframe',
    ),
  );
}
