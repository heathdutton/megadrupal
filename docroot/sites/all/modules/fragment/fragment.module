<?php
/**
 * @file fragment.module
 * Contains the module code for fragment module.
 */

/**
 * Implements hook_entity_info().
 */
function fragment_entity_info() {
  $return = array(
    'fragment' => array(
      'label' => t('Fragment'),
      // The table we define in hook_schema().
      'base table' => 'fragment',
      // Callbacks.
      'uri callback' => 'fragment_uri',
      // Generic class provided by EntityAPI.
      'controller class' => 'EntityAPIController',
      'fieldable' => TRUE,
      'translation' => array(
        'locale' => TRUE,
      ),
      // This tells the entity system where to get essential data in the
      // entity object.
      'entity keys' => array(
        'id' => 'fid',
        'label' => 'title',
      ),
      'bundle keys' => array(
      ),
      'bundles' => array(
        'fragment' => array(
          'label' => t('Fragment'),
          'admin' => array(
            'path' => 'admin/content/fragments/manage',
            'real path' => 'admin/content/fragments/manage',
            'access arguments' => array('administer fragments'),
          ),
        )
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      // Entity API properties.
      'entity class' => 'Fragment',
      'module' => 'fragment',
      'admin ui' => array(
        'controller class' => 'FragmentUIController',
        'path' => 'admin/content/fragments',
        'file' => 'fragment.admin.inc',
      ),
      // Entity API callbacks for the admin UI.
      'access callback' => 'fragment_access',

    ),
  );

  return $return;
}

/**
 * Entity uri callback.
 */
function fragment_uri($fragment) {
  return array(
    'path' => 'admin/content/fragments/manage/' . $fragment->fid,
    'options' => array(),
  );
}

/**
 * Entity access callback.
 *
 * @param $op
 *  The operation being performed. One of 'view', 'update', 'create' or 'delete'.
 */
function fragment_access($op, $fragment = NULL, $account = NULL) {
  // todo: refactor this to use same pattern as profile2_profile2_access().
  switch ($op) {
    case 'view':
      return user_access('view fragments', $account);
    case 'create':
      return user_access('create fragments', $account);
    case 'update':
      // If no user object is supplied, the access check is for the current user.
      if (empty($account)) {
        $account = $GLOBALS['user'];
      }
      if (isset($fragment->uid) && $fragment->uid == $account->uid) {
        return user_access('edit own fragments', $account) || user_access('edit any fragments', $account);
      }
      else {
        return user_access('edit any fragments', $account);
      }
    case 'delete':
      // If no user object is supplied, the access check is for the current user.
      if (empty($account)) {
        $account = $GLOBALS['user'];
      }
      if (isset($fragment->uid) && $fragment->uid == $account->uid) {
        return user_access('delete own fragments', $account) || user_access('delete any fragments', $account);
      }
      else {
        return user_access('delete any fragments', $account);
      }
  }
}

/**
 * Implements hook_permission().
 */
function fragment_permission() {
  return array(
    'administer fragments' => array(
      'title' => t('Administer fragments'),
      'description' => t('Edit and view all content fragments.'),
    ),
    'view fragments' => array(
      'title' => t('View fragments'),
    ),
    'create fragments' => array(
      'title' => t('Create fragments'),
    ),
    'edit own fragments' => array(
      'title' => t('Edit own fragments'),
    ),
    'edit any fragments' => array(
      'title' => t('Edit any fragments'),
    ),
    'delete own fragments' => array(
      'title' => t('Delete own fragments'),
    ),
    'delete any fragments' => array(
      'title' => t('Delete any fragments'),
    ),
  );
}

/**
 * #post_render callback for elements of the fragment build array.
 *
 * There is, one would hope, a more graceful way of doing this but render arrays
 * are a total nightmare of inconsistencies and WTF.
 */
function fragment_entity_link($markup, $element) {
  // Set html to TRUE to account for image fields.
  // Anything coming here with a link already set is going to cause trouble...
  $element['#fragment_link_options']['html'] = TRUE;
  $markup = l($markup, $element['#fragment_link_options']['path'], $element['#fragment_link_options']);

  return $markup;
}

/**
 * Implements hook_field_extra_fields().
 */
function fragment_field_extra_fields() {
  $extra['fragment']['fragment'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('Fragment module element'),
        'weight' => -5,
      ),
      'link' => array(
        'label' => t('Link path'),
        'description' => t('Fragment module element'),
        'weight' => -4,
      ),
    ),
    'display' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('Title'),
        'weight' => -5,
      ),
    )
  );

  return $extra;
}

/**
 * Implements hook_theme().
 */
function fragment_theme($existing, $type, $theme, $path) {
  return array(
    'fragment' => array(
      'render element' => 'elements',
      'template' => 'fragment',
    ),
  );
}

/**
 * Process variables for fragment.tpl.php.
 */
function template_preprocess_fragment(&$variables) {
  // Let entity module do the hard work.
  template_preprocess_entity($variables);

  // Get the entity.
  $fragment = $variables['elements']['#entity'];

  $extra_fields = field_extra_fields_get_display('fragment', 'fragment', $variables['elements']['#view_mode']);

  if ($extra_fields['title']['visible']) {
    // Turn the title into a link...
    $variables['title'] = l($variables['title'], $fragment->link_options['path'], $fragment->link_options);
  }
  else {
    // ... or hide it.
    $variables['title'] = '';
  }


}
