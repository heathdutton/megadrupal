<?php
/**
 * @file
 * Code for the CM Inventory Adder
 */


function cm_inventory_adder_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['type'])) {
    return;
  }
  if ($form['type']['#value'] == 'facility_template') {
    $types = cm_inventory_adder_get_content_types('resource');
  }
  else if ($form['type']['#value'] == 'equipment_template') {
    $types = cm_inventory_adder_get_content_types('bucket');
  }
  else {
    //get node type
    $type = $form['type']['#value'] ? $form['type']['#value'] :
      str_replace('-', '_', arg(2));
    //check to see if node type is in facility types
    $types = cm_inventory_adder_get_content_types('resource');
    if (!array_key_exists($type, $types)) {
      
      $types = cm_inventory_adder_get_content_types('bucket');
      if (!array_key_exists($type, $types)) {
	$types = NULL;
      }
    }
  }
  if ($types) {
    $nid = $form['nid']['#value'];
    
    $default_value = isset($type) ? $type : "";
    $form['mnn_inventory_content_type'] = 
      array(
	    '#type' => 'select',
	    '#options'=> $types,
	    '#prefix' => '<div id="mnn_cm_airing_wrapper" class="cm-box">'.
	    "<h2>".t('Inventory Type')."</h2>",
	    '#suffix' => '</div>',
	    '#weight'=> -10,
	    );
    if ($default_value) {
      $form['mnn_inventory_content_type']['#default_value'] = $default_value; 
    }
  }
}

function cm_inventory_adder_node_validate($node, $form, &$form_state) {
  //get content type
  $type = $node->mnn_inventory_content_type;

  if ($type) {
    $type_inventory = cm_inventory_adder_get_inventory_for_type($type);
    $type_inventory_term = taxonomy_term_load($type_inventory);
    //get inventory from submitted node
    $node_inventory = 
      $node->field_reservations_inventory[LANGUAGE_NONE][0]['tid'];
    $node_inventory_term = taxonomy_term_load($node_inventory);

    //compare inventory
    if ($type_inventory && $node_inventory &&
	($type_inventory != $node_inventory)) {
      form_set_error('field_reservations_inventory',
		     t("You picked an inventory type, @type which is in the
                        @term1 inventory, but you selected @term2 as your
                        inventory. The inventories must match.",
		       array('@type' => $type,
			     '@term1' => $type_inventory_term->name, 
			     '@term2' => $node_inventory_term->name))); 
    }

    //get Inventory Number
    $inventory_number = 
      $node->field_inventory_number[LANGUAGE_NONE][0]['value'];
    if ($inventory_number) {
      $duplicate_items =
	cm_inventory_adder_get_duplicate_inventory_items($inventory_number,
							$node->nid);
      if($duplicate_items){
	form_set_error('field_inventory_number',
		       t("The inventory number @inventory_number is already
                          being used by !items. Click it to view it.",
			 array('@inventory_number' => $inventory_number, 
			       '!items' => $duplicate_items))); 
      }
    }
  }  
}

function cm_inventory_adder_node_presave($node) {
  $type = $node->mnn_inventory_content_type;

  if ($type) {
    $node->type = $type;
  }

  $status = $node->field_equipment_item_status[LANGUAGE_NONE][0]['tid'];
  if ($status) {
    $term = taxonomy_term_load($status);
    $status = $term->name;
    $node->reservations_default_availability = ($status == 'Reservable') ?
      1 : 2;
  }
}


function cm_inventory_adder_get_duplicate_inventory_items($inventory_number,
							 $nid) {
  $sql = 
    "SELECT nid, title 
     FROM {node} n
     INNER JOIN {field_data_field_inventory_number} i
     ON i.revision_id = n.vid
     WHERE i.field_inventory_number_value = :inventory_number";

  $params = array(':inventory_number'=>$inventory_number);
  if ($nid) {
    $sql .= " AND n.nid != :nid ";
    $params[':nid'] = $nid;
  }

  $results = db_query($sql, $params);
  $duplicate_items = "";
  $first = TRUE;
  while ($item = $results->fetchObject()) {
    if ($first) {
      $first = FALSE;
    }
    else {
      $sql .= ", ";
    }
    $duplicate_items .= l($item->title, "node/".$item->nid); 
  }

  return $duplicate_items;
}

function cm_inventory_adder_get_inventory_for_type($type) {
  $sql =
    "SELECT tids
     FROM {reservations_inventory_node_type}
     WHERE type=:type";

  $tid = db_query($sql, array(':type'=>$type))->fetchObject()->tids;
  return $tid;
}


function cm_inventory_adder_get_content_types($type_type) {

  $sql =
    "SELECT nt.name, t.type
     FROM {reservations_node_type} t
     INNER JOIN {node_type} nt ON nt.type=t.type
     WHERE reservations_type_setting!='disabled'
     AND reservations_type_setting = :type_type
     ORDER BY nt.name";

  $results = db_query($sql, array(':type_type'=>$type_type));

  $types = array();
  if ($type_type == 'resource') {
    $types['facility_non_reservable_'] = 'Facility (Non-Reservable)'; 
  }
  else {
    $types['equipment_non_reservable_'] = 'Equipment (Non-Reservable)'; 
  }

  while ($type = $results->fetchObject()) {
    $types[$type->type] = $type->name;
  }
  return $types;
}
