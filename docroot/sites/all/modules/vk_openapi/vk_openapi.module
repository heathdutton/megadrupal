<?php
/**
 * @file
 * Integration module with VK Openapi.
 */

/**
 * Implements hook_menu().
 */
function vk_openapi_menu() {

  $items['admin/config/people/vk_openapi'] = array(
    'title' => 'vKontakte OpenAPI',
    'description' => 'Administer vKontakte OpenAPI settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vk_openapi_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'vk_openapi.admin.inc',
  );

  $items['vk/login'] = array(
    'page callback' => 'vk_openapi_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['vk/login/error'] = array(
    'page callback' => 'vk_openapi_login_error',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Unite new account, created via vkontakte, with existing drupal account:
  // in first step user has created account via vkontakte in second step 
  // this account unite with existing account
  $items['vk/unite'] = array(
    'page callback' => 'vk_openapi_unite_accounts',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['vk/unite/dsma'] = array(
    'page callback' => 'vk_openapi_dont_show_unite_message_again',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['vk/xd_receiver'] = array(
    'page callback' => 'vk_openapi_receiver',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['vk/enter-e-mail'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vk_enter_email'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['vk/confirm'] = array(
    'page callback' => '_vk_confirm_email',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/vk'] = array(
    'title' => 'VK',
    'page callback' => 'vk_user_data',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  // unite existing drupal account with vkontakte:
  // in first step user create account via drupal, then this account linking with vkontakte account
  $items['vk/succesfull-unite'] = array(
    'page callback' => '_vk_unite_drupal_and_vk_accounts',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['vk/error-unite'] = array(
    'page callback' => '_vk_error_unite_drupal_and_vk_accounts',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function vk_openapi_theme() {
  return array(
    'vk_openapi_receiver' => array(
      'variables' => array(),
      'template' => 'vk-openapi-receiver',
    ),
    'vk_openapi_init_anon' => array(
      'variables' => array('path' => NULL, 'apiID' => NULL),
      'template' => 'vk-openapi-init-anon',
    ),
    'vk_openapi_init_auth' => array(
      'variables' => array('user' => NULL, 'path' => NULL, 'apiID' => NULL, 'v' => NULL),
      'template' => 'vk-openapi-init-auth',
    ),
  );
}

/**
 * Implements hook_init().
 */
function vk_openapi_init() {
  global $user;
  if (!$user->uid || ($user->uid && isset($user->data['vk_openapi']) && $user->data['vk_openapi']['vkuid'])) {
    drupal_add_js(drupal_get_path('module', 'vk_openapi') . "/openapi.js");
    drupal_add_css(drupal_get_path('module', 'vk_openapi') . "/vk_openapi.css");
  }

  if (variable_get('vk_openapi_add_js', 0)) {
    $element = array(
      '#type' => 'markup',
      '#markup' => '<script type="text/javascript" src="http://userapi.com/js/api/openapi.js?1"></script>',
    );
    drupal_add_html_head($element, 'vk_openapi_all_pages');

    $element = array(
      '#type' => 'markup',
      '#markup' => '<script type="text/javascript">VK.init({apiId: ' . trim(variable_get('vk_openapi_app_id', '')) . ', onlyWidgets: TRUE});</script>',
    );
    drupal_add_html_head($element, 'vk_openapi_inline_all_pages');
  }
}

/**
 * Implements hook_page_build().
 */
function vk_openapi_page_build(&$page) {
  global $base_url, $user, $theme;
  $allowed_themes = variable_get('vk_openapi_themes_list', 1);

  if ((!is_array($allowed_themes) && $allowed_themes == 1) || (in_array(1, $allowed_themes) || in_array($theme, $allowed_themes))) {
    if (!$user->uid) {
      $page['page_bottom']['vk_openapi']= array(
        '#type' => 'markup',
        '#markup' => theme('vk_openapi_init_anon', array('path' => base_path() . 'vk/xd_receiver', 'apiID' => trim(variable_get('vk_openapi_app_id', '')))),
      );
    }
    else {
      if (isset($user->data['vk_openapi']) && $user->data['vk_openapi']['vkuid'] && $user->data['vk_openapi']['last_update']) {
        if (time() - $user->data['vk_openapi']['last_update'] > variable_get('vk_openapi_update_freq', 60)) {
          // renew data for registered user
          $vk_openapi = _vk_get_user_data($user->data['vk_openapi']['vkuid']);
          $vk_openapi['last_update'] = time();

          $array = array('vk_openapi' => $vk_openapi);

          if (isset($vk_openapi['vkontakte_avatar'])) {
            $array['picture'] = $vk_openapi['vkontakte_avatar'];
          }
          
          user_save($user, $array);
        }
        $page['page_bottom']['vk_openapi']= array(
          '#type' => 'markup',
          '#markup' => theme('vk_openapi_init_auth', array('user' => $user, 'path' => base_path() . "vk/xd_receiver", 'apiID' => trim(variable_get('vk_openapi_app_id', '')))),
        );
      }
    }
  }
}

/**
 * Callback for vk/xd_receiver.
 */
function vk_openapi_receiver() {
  print theme('vk_openapi_receiver');
}

/**
 * Function returns user info by vkuid.
 */
function _vk_get_user_data($vkuid) {
  $vk_openapi = array();

  include(drupal_get_path('module', 'vk_openapi') . '/vkapi.class.php');
  $VK = new vkapi(trim(variable_get('vk_openapi_app_id', '')), trim(variable_get('vk_openapi_secret_key', '')));
  $resp = $VK->api('getProfiles', array('uids' => $vkuid, 'fields' => 'nickname,sex,bdate,city,country,timezone,photo,photo_medium,photo_big,has_mobile,rate,contacts,education,home_phone,mobile_phone,university,university_name,faculty,faculty_name,graduation'));

  $vk_openapi = $resp['response'][0];
  $vk_openapi['vkuid'] = $vk_openapi['uid'];
  unset($vk_openapi['uid']);

  $avatar = FALSE;
  if (variable_get('vk_openapi_avatar', 0) && $vk_openapi['photo'] && variable_get('user_pictures', 0)) {
    switch (variable_get('vk_openapi_avatar', 0)) {
      case 1:
        $path = $vk_openapi['photo'];
        break;
      case 2:
        $path = $vk_openapi['photo_medium'];
        break;  
      case 3:
        $path = $vk_openapi['photo_big'];
        break;  
    }
    $avatar = _vk_openapi_save_remote_image($path);
  }

  if ($avatar) {
    $vk_openapi['vkontakte_avatar'] = $avatar;
  }

  return $vk_openapi;
}

/**
 * AJAX callback for vk/login.
 */
function vk_openapi_login() {
  $member = authOpenAPIMember();

  if ($member !== FALSE && isset($_POST['uid'])) {
    $vkuid = $_POST['uid'];

    $vk_openapi = _vk_get_user_data($vkuid);
    $vk_openapi['last_update'] = time();
    
    $r = db_query('SELECT uid FROM {authmap} WHERE authname = :vkuid AND module = :name', array(':vkuid' => $vkuid, ':name' => 'vk_openapi'))->fetchObject();
    $newuser = FALSE;
    
    if (!isset($r->uid)) {
      $vk_openapi['confirmed'] = FALSE;
      // create new user

      $name = variable_get('vk_openapi_username', '%first_name %last_name_lq%nickname%last_name_rq %last_name');
      $name = str_replace('%first_name', $vk_openapi['first_name'], $name);
      $name = str_replace('%last_name', $vk_openapi['last_name'], $name);
      if (isset($nickname) && mb_strlen($nickname)) {
        $name = str_replace('%nickname_lq', variable_get('vk_openapi_nickname_lq', '«'), $name);
        $name = str_replace('%nickname_rq', variable_get('vk_openapi_nickname_rq', '»'), $name);
        $name = str_replace('%nickname', $vk_openapi['nickname'], $name);
      }
      else {
        $name = str_replace('%nickname_lq', '', $name);
        $name = str_replace('%nickname_rq', '', $name);
        $name = str_replace('%nickname', '', $name);
      }
      
      $name = str_replace('  ', ' ', $name);

      $name = _vk_openapi_check_name($name);
      
      $userinfo = array(
        'name' => $name,
        'pass' => user_password(),
        'status' => variable_get('user_register', 1),
        'vk_openapi' => $vk_openapi,
        'vk_show_unite_message' => TRUE,
        'mail' => $vkuid . '@vkontakte.ru',
      );
      
      if ($vk_openapi['vkontakte_avatar']) {
        $userinfo['picture'] = $vk_openapi['vkontakte_avatar'];
      }
      
      if ($rid = variable_get('vk_openapi_role_for_new_user', 0)) {
        $userinfo->roles = drupal_map_assoc(array($rid)); // some magic to prevent scalar query
      }

      // code below was partly copied from user_external_login_register function
      $account = user_save(drupal_anonymous_user(), $userinfo);
      // Terminate if an error occurred during user_save().
      if (!$account) {
        drupal_set_message(t('User create error'), 'error');
        print json_encode(array('error' => TRUE, 'exit_code' => '2', 'message' => 'user create error [2]', 'redirect_url' => variable_get('vk_openapi_redirect_url', "")));
        exit();
      }
      user_set_authmaps($account, array('authname_vk_openapi' => $vkuid));

      drupal_set_message(t('New user @name successfully created. Now you should enter your e-mail', array('@name' => $user->name)));
      $newuser = TRUE;
    }
    else {
      $account = user_load(array('uid' => $r->uid));
      
      $existing_vk_openapi = $account->data['vk_openapi'];
      $vk_openapi = array_merge((array)$existing_vk_openapi, $vk_openapi);
      
      $userdata = array('vk_openapi' => $vk_openapi);
      
      if (isset($avatar)) {
        $user_data['picture'] = $avatar;
      }

      user_save($account, $userdata);
    }
    
    if (($account->mail && $account->mail != $vkuid . '@vkontakte.ru') || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
      $data = array('uid' => $account->uid, 'vk_openapi' => $vk_openapi);

      user_login_submit(array(), $data);
      global $user;
      $logged_in = $user->uid;
    }
    else {
      setcookie('vk_new_user', $account->uid, time() + 300, '/');
    }
    
    if (($account->mail && $account->mail != $vkuid . '@vkontakte.ru') || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
      if (!$newuser && $logged_in) {
        drupal_set_message(t('@name, you successfully logged in via vKontakte account.', array('@name' => $account->name )));
      }
      exit(json_encode(array('error' => FALSE, 'exit_code' => '4', 'redirect_url' => variable_get('vk_openapi_redirect_url', ""))));
    }
    else {
      exit(json_encode(array('error' => FALSE, 'exit_code' => '3', 'redirect_url' => "vk/enter-e-mail")));
    }
  }
  else {
      exit(json_encode(array('error' => TRUE, 'exit_code' => '1', 'message' => 'auth error [1]', 'redirect_url' => variable_get('vk_openapi_redirect_url', ""))));
  }
}

/**
 * Function attaches Vkontakte uid to existing Drupal account.
 */
function _vk_unite_drupal_and_vk_accounts() {
  $member = authOpenAPIMember();

  if ($member !== FALSE) {
    $vkuid = $_POST['uid'];

    $vk_openapi = _vk_get_user_data($vkuid);
    $vk_openapi['last_update'] = time();
    $vk_openapi['confirmed'] = TRUE;

    global $user;

    $array = array('vk_openapi' => $vk_openapi);

    if (isset($avatar)) {
      $array['picture'] = $avatar;
    }
    user_save($user, $array);
    
    $count = db_select('authmap', 'a')
      ->condition('a.module', 'vk_openapi')
      ->condition('a.authname', $vkuid)
      ->countQuery()
      ->execute()
      ->fetchField();
    if (!$count) {
      user_set_authmaps($user, array('authname_vk_openapi' => $vkuid));
    }
    else {
      $old_uid = db_select('authmap', 'a')
        ->fields('a', array('uid'))
        ->condition('a.module', 'vk_openapi')
        ->condition('a.authname', $vkuid)
        ->execute()
        ->fetchField();
        
        _vk_openapi_merge_users($old_uid, $user->uid, TRUE);
    }

    exit(json_encode(array('error' => FALSE, 'exit_code' => '444', 'redirect_url' => 'user/' . $user->uid . '/vk')));
  }
  else {
      exit(json_encode(array('error' => TRUE, 'exit_code' => '1', 'message' => 'auth error [2]', 'redirect_url' => variable_get('vk_openapi_redirect_url', ''))));
  }

}

/**
 * Error callback while uniting accounts.
 */
function _vk_error_unite_drupal_and_vk_accounts() {
  drupal_set_message(t('Error uniting accounts'), 'error');
  drupal_goto('user/' . $user->uid . '/vkontakte');
}

/**
 * Helper function, checks whether login already exists or not.
 */
function _vk_openapi_check_name($name, $counter = 0, $original_name = '') {
  $r = db_query("SELECT COUNT(*) AS count FROM {users} WHERE LOWER(name) = LOWER(:name)", array(':name' => $name))->fetchObject();
  if (!$r->count) {
    return $name;
  }
  else {
    $counter++;
    if ($original_name != '') {
      $name = $original_name;
    }    
    return _vk_openapi_check_name($name . '_' . $counter, $counter, $name);
  }
}

/**
 * Authorization helper function.
 */
function authOpenAPIMember() {
  $session = array();
  $member = FALSE;
  $valid_keys = array('expire', 'mid', 'secret', 'sid', 'sig');
  $app_cookie = $_COOKIE['vk_app_' . trim(variable_get('vk_openapi_app_id', ''))];
  if ($app_cookie) {
    $session_data = explode('&', $app_cookie, 10);
    foreach ($session_data as $pair) {
      list($key, $value) = explode('=', $pair, 2);
      if (empty($key) || empty($value) || !in_array($key, $valid_keys)) {
        continue;
      }
      $session[$key] = $value;
    }
    foreach ($valid_keys as $key) {
      if (!isset($session[$key])) return $member;
    }
    ksort($session);

    $sign = '';
    foreach ($session as $key => $value) {
      if ($key != 'sig') {
        $sign .= ($key . '=' . $value);
      }
    }
    $sign .= variable_get('vk_openapi_secret_key', '');
    $sign = md5($sign);
    if ($session['sig'] == $sign && $session['expire'] > time()) {
      $member = array(
        'id' => intval($session['mid']),
        'secret' => $session['secret'],
        'sid' => $session['sid'],
        'sig' => $session['sig'],
      );
    }
  }
  return $member;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vk_openapi_form_user_login_alter(&$form, &$form_state, $form_id) {
  _vk_openapi_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vk_openapi_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  _vk_openapi_login_form_alter($form, $form_state);
}

/**
 * Function adds VK login button to stadard Drupal login form.
 */
function _vk_openapi_login_form_alter(&$form, &$form_state) {
  if (variable_get('vk_openapi_alter_login_form', 1) == 1) {
    $form['vk_openapi_button'] = array(
      '#markup' => '<div id="vk_login" class="vk_login" onclick="doLogin();"></div>',
      '#weight' => 100,
    );
  }
}

/**
 * Authorization error callback.
 */
function vk_openapi_login_error() {
  drupal_set_message(t('Error connecting to vkontakte.ru server'), 'error');
  drupal_goto(variable_get('vk_openapi_redirect_url', ""));
}

/**
 * Implements hook_user_view()
 */
function vk_openapi_user_view($account, $view_mode, $langcode) {
  global $user;
  if ($account->uid == $user->uid && isset($account->vk_show_unite_message) && $account->vk_show_unite_message && variable_get('vk_openapi_allow_users_unite_accounts', 1) ) {
    drupal_set_message(t('If you already have account you can <a href="@unite">unite their</a>. <a href="@show">Dont show this message again.</a>', array('@unite' => url('vk/unite'), '@show' => url('vk/unite/dsma'))));
  }
}

/**
 * Implements hook_user_delete()
 */
function vk_openapi_user_delete($account) {
  user_set_authmaps($user, array('authname_vk_openapi' => $user->data['vkuid']));
}

/**
 * Implements hook_user_presave()
 */
function vk_openapi_user_presave(&$edit, $account, $cat) {
  if (isset($edit['vk_openapi'])) {
    $edit['data']['vk_openapi'] = $edit['vk_openapi'];
  }
}

/**
 * Callback for vk/unite.
 */
function vk_openapi_unite_accounts() {
  global $user;

  $count = db_select('authmap', 'a')
      ->condition('a.module', 'vk_openapi')
      ->condition('a.uid', $user->uid)
      ->countQuery()
      ->execute()
      ->fetchField();

  if ($count && variable_get('vk_openapi_allow_users_unite_accounts', 1)) {
    return drupal_get_form('vk_openapi_acounts_unite_form');
  }
  else {
    drupal_set_message(t('You can\'t unite your account'));
    return '';
  }
}

/**
 * Callback for vk/unite/dsma.
 */
function vk_openapi_dont_show_unite_message_again() {
  global $user;
  user_save($user, array('vk_show_unite_message' => FALSE));
  drupal_set_message(t('Data saved'));
  drupal_goto('user/' . $user->uid);
}

/**
 * Account uniting form.
 */
function vk_openapi_acounts_unite_form($form_state) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => '',
    '#maxlength' => 64,
    '#prefix' => t('Using this form you can unite your vkontakte.ru account and old account from this site.'),
    '#size' => 15,
  );

  $form['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => '',
    '#maxlength' => 64,
    '#size' => 15,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#default_value' => '',
    '#maxlength' => 64,
    '#size' => 15,
  );

  return $form;
}

/**
 * Account uniting form validator.
 */
function vk_openapi_acounts_unite_form_validate($form, &$form_state) {
  $account = user_load_by_name($form_state['values']['name']);
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  if (!user_check_password($form_state['values']['pass'], $account)) {
    form_set_error('pass', t('Incorrect username or password'));
  }
  $form_state['values']['uid'] = $account->uid;
}

/**
 * Account uniting form submitter.
 */
function vk_openapi_acounts_unite_form_submit($form, &$form_state) {
  global $user;
  _vk_openapi_merge_users($user->uid, $form_state['values']['uid']);
}

/**
 * Function merges Drupal accounts made by user and made by this module.
 */
function _vk_openapi_merge_users($old_uid, $new_uid, $no_redirect = FALSE) {
  $new_user = user_load($new_uid);
  $old_user = user_load($old_uid);

  if (isset($new_user->uid) && isset($old_user->uid)) {
    db_query('UPDATE {comment} SET uid = :new_uid WHERE uid = :old_uid', array(':new_uid' => $new_user->uid, ':old_uid' => $old_user->uid));
    db_query('UPDATE {node_revision} SET uid = :new_uid WHERE uid = :old_uid', array(':new_uid' => $new_user->uid, ':old_uid' => $old_user->uid));
    db_query('UPDATE {node} SET uid = :new_uid WHERE uid = :old_uid', array(':new_uid' => $new_user->uid, ':old_uid' => $old_user->uid));
    
    global $user;
    $oldu_ser = $user;
    $user = $new_user; // switch sessions

    user_save($user, array('vk_disabled_user' => FALSE, 'vk_old_uid' => $old_user->uid));
    user_save($old_user, array('status' => 0, 'vk_disabled_user' => TRUE, 'vk_new_uid' => $user->uid));
    
    db_query('UPDATE {authmap} SET uid = :new_uid WHERE uid = :old_uid AND module = :name', array(':new_uid' => $new_user->uid, ':old_uid' => $old_user->uid, ':name' => 'vk_openapi'));
    
    drupal_set_message(t('Your accounts was succesfully united'));

    $_SESSION['vk_new_user_show_message'] = TRUE;
    
    if (!$no_redirect) {
      drupal_goto(variable_get('vk_openapi_redirect_url', ''));
    }
  }
  else {
    if (!$no_redirect) {
      drupal_set_message(t('uniting error'), 'error');
    }
  }
}

/**
 * Function gets the user image from VK server.
 */
function _vk_openapi_save_remote_image($path_to_img) {
  $ch = curl_init($path_to_img);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_BINARYTRANSFER, 1);
  $rawdata = curl_exec($ch);
  curl_close($ch);

  $slash_pos = strrpos($path_to_img, '/');
  $avatar_name = substr($path_to_img, $slash_pos);

  $fullpath = 'public://' . variable_get('user_picture_path', 'pictures') . $avatar_name;

  return file_save_data($rawdata, $fullpath);
}

/**
 * Form asks user to enter e-mail address.
 */
function vk_enter_email() {
  $form = array();

  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter your e-mail.'),
    '#default_value' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['#redirect'] = variable_get('site_frontpage', 'node');

  return $form;
}

/**
 * Validator for vk_enter_email.
 */
function vk_enter_email_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('Wrong e-mail'));
  }
}

/**
 * Submitter for vk_enter_email.
 */
function vk_enter_email_submit($form, &$form_state) {
  $user = user_load(array('uid' => $_COOKIE['vk_new_user']));

  $user->mail = $form_state['values']['mail'];
  $user->pass = user_password();  
  $array['mail'] = $form_state['values']['mail'];
  $array['pass'] = user_password();  
  if (_vk_openapi_mail_notify($user)) {
    $vk_openapi = $user->data['vk_openapi'];
    $vk_openapi['vk_confirm_email_sent'] = TRUE;
    $array['vk_openapi'] = $vk_openapi;
    drupal_set_message(t('A confirmation email has been sent to your new email address. You must follow the link provided in that email within 24 hours in order to confirm the change to your account email address.'));
    
    
    
    $form = array();
    $data = array('uid' => $user->uid, 'vk_openapi' => $user->data['vk_openapi']);
    user_login_submit($form, $data);
    drupal_goto();
  }
  else {
    drupal_set_message(t('Error while sending confirmation e-mail'));
  }
  user_save($user, $array);
}

/**
 * Function sent e-mail notification to user.
 */
function _vk_openapi_mail_notify($user) {
  $from = variable_get('site_mail', '');

  $message = array(
    'id' => 'confirm_mail',
    'to' => $user->mail,
    'subject' => t('Account details for !username on !site', array('!username' => $user->name, '!site' => variable_get('site_name', 'Drupal'))),
    'body' => array(t("!username,\n\nThank you for registering at !site. Now you should confirm your e-mail by clicking on this link or copying and pasting it in your browser:\n\n!confirm_url", array('!username' => $user->name, '!site' => variable_get('site_name', 'Drupal'), '!confirm_url' => url('vk/confirm/' . $user->uid . '/' . md5($user->created . $user->mail), array('absolute' => TRUE))))),
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
      'MIME-Version'              => '1.0',
      'Content-Type'              => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',
      'Content-Transfer-Encoding' => '8Bit',
      'X-Mailer'                  => 'Drupal'
    )
  );

  $system = drupal_mail_system('vk_openapi', 'confirm_mail');
  $message = $system->format($message);

  if ($system->mail($message)) {
    $user->data['vk_openapi']['confirm_mail_sent'] = TRUE;
    user_save($user);
    return TRUE;
  }

  return FALSE;
}

/**
 * User e-mail confirmation.
 */
function _vk_confirm_email() {
  $args = arg();

  $account = user_load(array('uid' => $args[2]));

  if (!$vk_openapi['confirmed']) {
    if ($args[3] == md5($account->created . $account->mail)) {
      drupal_set_message(t('E-mail succesfully confirmed'));
      $account->data['vk_openapi']['confirmed'] = TRUE;
      user_save($account, array('vk_openapi' => $account->data['vk_openapi']));
      
      global $user;
      if (!$user->uid) {
        $form = array();
        $arr = array('uid' => $user->uid);
        user_login_submit($form, $arr);
        drupal_goto();
      }
    }
    else {
      drupal_set_message(t('E-mail confirmation error'), 'error');
    }
  }
  else {
    drupal_set_message(t('You already cinfirm your e-mail'));
  }

  return '';
}

/**
 * Implements hook_cron().
 */
function vk_openapi_cron() {
  if (variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
    $uids = db_select('authmap', 'a')->fields('a', array('uid'))->condition('a.module', 'vk_openapi')->execute();
    foreach ($uids as $uid) {
      $account = user_load($uid->uid);

      if ($account->data['vk_openapi']['confirm_mail_sent']) {
        // if confirmation e-mail was sent...
        if (!$account->data['vk_openapi']['confirmed'] && $account->created + variable_get('vk_openapi_confirm_time', 86400) < time()) {
          // ...and user didn't confirm own e-mail
          $account->status = 0;
          user_save($account);
          watchdog('vk_openapi', 'User !name [!uid] was blocked, because user didn\'t confirm own e-mail address', array('!uid' => $account->uid, '!name' => $account->name));
        }
        
      }
    }
  }
}

/**
 * Callback for user/%user/vk.
 */
function vk_user_data($account) {
  global $user;

  drupal_set_title(check_plain($account->name));

  $count = db_select('authmap', 'a')
  ->condition('a.module', 'vk_openapi')
  ->condition('a.uid', $account->uid)
  ->countQuery()
  ->execute()
  ->fetchField();

  if ($count) {
    $vkuid = db_select('authmap', 'a')
    ->fields('a', array('authname'))
    ->condition('a.module', 'vk_openapi')
    ->condition('a.uid', $account->uid)  
    ->execute()
    ->fetchField();
    
    if ($user->uid == $account_>uid) {
      $output = t('You already united your account with <a href="!url">vkontakte.ru account</a>.', array('!url' => 'http://vkontakte.ru/id' . $vkuid));
    }
    else {
      $output = t('Account united with <a href="!url">vkontakte.ru account</a>.', array('!url' => 'http://vkontakte.ru/id' . $vkuid));
    }
  }
  else {
    if ($user->uid == $account->uid) {
      drupal_add_js(drupal_get_path('module', 'vk_openapi') . "/openapi.js");
      drupal_add_css(drupal_get_path('module', 'vk_openapi') . "/vk_openapi.css");
      $output = t('You can unite your current account with your vkontakte.ru account:');
      $output .= '<div id="vk_login" class="vk_login" style="margin: 0 auto 20px auto;" onclick="doUnite();"></div>';
      $output .= theme('vk_openapi_init_anon', array('path' => base_path() . 'vk/xd_receiver', 'apiID' => trim(variable_get('vk_openapi_app_id', ''))));
    }
    else {
      $output = t('This account not united with any VKontakte account.');
    }
  }
  return $output;
}