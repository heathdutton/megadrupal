<?php
/**
 * @file
 * Bean plugin for showing Openlayers Map.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_blocks_ctools_plugin_api($module, $api) {
  if ($module == 'boxes' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_boxes_plugins().
 */
function openlayers_blocks_boxes_plugins() {
  return array(
    'openlayers_blocks' => array(
      'title' => 'OpenLayers',
      'handler' => array(
        'parent' => 'boxes_box',
        'class' => 'openlayers_blocks',
        'file' => 'openlayers_blocks.inc',
        'path' => drupal_get_path('module', 'openlayers_blocks') . '/plugins/boxes'
      )
    )
  );
}

/**
 * Implements hook_bean_types_api_info().
 */
function openlayers_blocks_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */
function openlayers_blocks_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'openlayers_blocks') . '/plugins/bean';
  $plugins['openlayers_blocks'] = array(
    'label' => t('Openlayers Blocks'),
    'handler' => array(
      'class' => 'OpenlayersBlocksBean',
      'parent' => 'bean',
    ),
    'path' => $plugin_path,
  );
  return $plugins;
}

/**
 * Implements hook_openlayers_behaviors().
 *
 * This is a ctools plugins hook.
 */
function openlayers_blocks_openlayers_behaviors() {
  return array(
    'openlayers_blocks_behavior_block' => array(
      'title' => t('OpenLayers block Provider'),
      'type' => 'ui',
      'description' => t('When enabled, a new Drupal block is available to display the map.'),
      'behavior' => array(
        'path' => drupal_get_path('module', 'openlayers_blocks') .'/behaviors',
        'file' => 'openlayers_blocks_behavior_block.inc',
        'class' => 'openlayers_blocks_behavior_block',
        'parent' => 'openlayers_behavior',
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function openlayers_blocks_block_info() {
  $maps = _openlayers_blocks_get_maps_with_block();
  $blocks = array();

  foreach ($maps as $key => $map) {
    $blockid = _openlayers_blocks_get_block_id($key);
    $blocks[$blockid]['info'] = t('OpenLayers block for ' . $map->title);
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function openlayers_blocks_block_view($delta = '') {
  $block = array();
  $map_name = _openlayers_blocks_get_map_name($delta);

  if ($map_name != FALSE) {
    $block['subject'] = t($map_name);
    $block['content'] = openlayers_render_map($map_name);
  }

  return $block;
}

/**
 * Helper function.
 * Returns maps with the block behavior enabled.
 *
 * @return array
 */
function _openlayers_blocks_get_maps_with_block() {
  $maps = &drupal_static(__FUNCTION__);

  if (!isset($maps)) {
    $maps = openlayers_maps();
    foreach ($maps as $key => $map) {
      if (!isset($map->data['behaviors']['openlayers_blocks_behavior_block'])) {
        unset($maps[$key]);
      }
    }
  }

  return $maps;
}

/**
 * Helper function
 * Return the blocks delta according to the map_name.
 */
function _openlayers_blocks_get_block_id($map_name) {
  return substr(sha1($map_name), 0, -32) . '_block';
}

/**
 * Helper function
 * Return the map name according to the block delta.
 */
function _openlayers_blocks_get_map_name($delta) {
  foreach (_openlayers_blocks_get_maps_with_block() as $map_name => $map) {
    if (_openlayers_blocks_get_block_id($map_name) == $delta) {
      return $map_name;
    }
  }
  return FALSE;
}
