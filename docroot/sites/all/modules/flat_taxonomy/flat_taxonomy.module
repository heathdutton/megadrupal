<?php

/**
 * @file
 * Provides UI and implements hook to force taxonomies to be flat.
 */

/**
 * Taxonomy is not flat.
 */
define('FLAT_TAXONOMY_NORMAL', 0);

/**
 * Taxonomy is flat.
 */
define('FLAT_TAXONOMY_FLAT', 1);

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flat_taxonomy_form_taxonomy_form_vocabulary_alter(&$form, $form_state) {
  if (!array_key_exists('confirm_delete', $form_state)) {
    $form['flat'] = array(
      '#type' => 'checkbox',
      '#title' => t('Flat taxonomy'),
      '#description' => t("If checked, the taxonomy will be flat, terms can be ordered but can't be nested"),
      '#default_value' => (!empty($form['#vocabulary']->machine_name)) ? variable_get('flat_' . $form['#vocabulary']->machine_name, FLAT_TAXONOMY_NORMAL) : FLAT_TAXONOMY_NORMAL,
    );

    $form['#submit'][] = 'flat_taxonomy_form_taxonomy_form_vocabulary_submit';
  }
}

/**
 * Custom submit handler for the taxonomy add/edit form.
 */
function flat_taxonomy_form_taxonomy_form_vocabulary_submit($form, &$form_state) {
  // If the taxonomy machine name has changed, we delete the previous setting.
  if ($form_state['values']['machine_name'] != $form_state['values']['old_machine_name']) {
    variable_del('flat_' . $form_state['values']['old_machine_name']);
  }

  // We update the variable only if the setting has changed.
  if ($form_state['values']['flat'] == FLAT_TAXONOMY_FLAT && variable_get('flat_' . $form_state['values']['machine_name'], FLAT_TAXONOMY_NORMAL) == FLAT_TAXONOMY_NORMAL) {
    variable_set('flat_' . $form_state['values']['machine_name'], FLAT_TAXONOMY_FLAT);
  }
  elseif ($form_state['values']['flat'] == FLAT_TAXONOMY_NORMAL && variable_get('flat_' . $form_state['values']['machine_name'], FLAT_TAXONOMY_NORMAL) == FLAT_TAXONOMY_FLAT) {
    variable_del('flat_' . $form_state['values']['machine_name']);
  }
}

/**
 * Implements hook_taxonomy_vocabulary_delete().
 */
function flat_taxonomy_taxonomy_vocabulary_delete($vocabulary) {
  variable_del('flat_' . $vocabulary->machine_name);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flat_taxonomy_form_taxonomy_form_term_alter(&$form, $form_state) {
  if (variable_get('flat_' . $form['#vocabulary']->machine_name, FLAT_TAXONOMY_NORMAL) == FLAT_TAXONOMY_FLAT) {
    $form['relations']['parent']['#access'] = FALSE;

    $form['#validate'][] = 'flat_taxonomy_form_taxonomy_form_term_validate';
  }
}

/**
 * Custom validate handler for the taxonomy term add/edit form.
 */
function flat_taxonomy_form_taxonomy_form_term_validate($form, &$form_state) {
  if ($form_state['values']['parent'][0]) {
    form_set_error('parent', t("This term can't have any parent has it is part of a flat taxonomy."));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flat_taxonomy_form_taxonomy_overview_terms_alter(&$form, $form_state) {
  if (array_key_exists('#vocabulary', $form)) {
    $settings['flat_taxonomy'] = variable_get('flat_' . $form['#vocabulary']->machine_name, FLAT_TAXONOMY_NORMAL);
    drupal_add_js($settings, 'setting');
  }
}

/**
 * Implements hook_js_alter().
 */
function flat_taxonomy_js_alter(&$js) {
  $flat = FALSE;
  foreach ($js['settings']['data'] as $data) {
    if (isset($data['flat_taxonomy']) && $data['flat_taxonomy']) {
      $flat = TRUE;
    }
  }

  if ($flat) {
    foreach ($js['settings']['data'] as $index => $data) {
      if (isset($data['tableDrag']['taxonomy']['term-depth']) || isset($data['tableDrag']['taxonomy']['term-parent'])) {
        unset($js['settings']['data'][$index]);
      }
    }
  }
}
