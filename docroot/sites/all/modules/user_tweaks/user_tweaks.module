<?php
// $Id: user_tweaks.module,v 1.1.4.16 2011/01/11 18:45:45 kiam Exp $

/**
 * @file
 * Implements additional permissions that alter how some pages are rendered, or
 * who can access those pages.
 */

/**
 * Allows to access the Drupal variables used by the module.
 */
class UserTweakVars extends Vars {
  /**
   * Constructs a UserTweakVars object.
   */
  public function __construct() {
   parent::__construct('user_tweaks');
  }

  /**
   * Implements Vars::getDefaults().
   */
  public function getDefaults() {
    return array(
      'user_tweaks_protect_administrator_accounts' => array('value' => FALSE),
      'user_tweaks_comment_permissions' => array('value' => FALSE),
      'user_tweaks_show_member_since' => array('value' => FALSE),
      'user_tweaks_show_user_access' => array('value' => FALSE),
      'user_tweaks_tracker_permissions' => array('value' => FALSE),
      'user_tweaks_advanced_node_search_filter' => array('value' => FALSE),
      'user_tweaks_disable_user_language' => array('value' => FALSE),
    );
  }
}

/**
 * Implements hook_comment_view_alter().
 */
function user_tweaks_comment_view_alter(&$build) {
  global $user;

  $comment = $build['#comment'];
  // $langcode = $build['#language'];
  $links = array();
  $node = $build['#node'];
  // $view_mode = $build['#view_mode'];

  $vars = new UserTweakVars();

  $bool = (
    $vars['user_tweaks_comment_permissions'] &&
    ($comment->status == COMMENT_PUBLISHED) &&
    empty($comment->in_preview) &&
    ($node->comment == COMMENT_NODE_OPEN) &&
    !user_access('administer comments') &&
    user_access('post comments')
  );
  if ($bool) {
    $bool = (
      ($user->uid == $comment->uid && user_access('delete own comments')) ||
      ($user->uid == $comment->uid && user_access("delete own {$node->type} comments")) ||
      user_access('delete any comments') ||
      user_access("delete any {$node->type} comments")
    ) && user_access('post comments');
    if ($bool) {
      $links['comment-delete'] = array(
        'title' => t('delete'),
        'href' => "comment/$comment->cid/delete",
        'html' => TRUE,
      );
    }

    $bool = (
      ($user->uid == $comment->uid && user_access('edit own comments')) ||
      ($user->uid == $comment->uid && user_access("edit own {$node->type} comments")) ||
      user_access('edit any comments') ||
      user_access("edit any {$node->type} comments")
    );
    if ($bool) {
      $links['comment-edit'] = array(
        'title' => t('edit'),
        'href' => "comment/$comment->cid/edit",
        'html' => TRUE,
      );
    }
  }

  if ($links) {
    if (empty($build['links'])) {
      $build['links'] = array(
        '#theme' => 'links__comment',
        '#pre_render' => array('drupal_pre_render_links'),
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }

    if (empty($build['links']['comment'])) {
      $build['links']['comment'] = array(
        '#theme' => 'links__comment__comment',
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }

    foreach ($links as $id => $info) {
      $build['links']['comment']['#links'][$id] = $info;
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Allows users with the right permissions to see the autocomplete list in the
 * login form, or in the form to request a password reset.
 */
function user_tweaks_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('view login autocomplete')) {
    switch ($form_id) {
      case 'user_login_block':
      case 'user_login':
      case 'user_pass':
        $form['name']['#autocomplete_path'] = 'user/login/autocomplete';
        break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for search_form().
 */
function user_tweaks_form_search_form_alter(&$form, $form_state) {
  $vars = new UserTweakVars();

  $bool = (
    $vars['user_tweaks_advanced_node_search_filter'] &&
    isset($form['module']) &&
    ($form['module']['#value'] == 'node') &&
    user_access('use advanced search')
  );
  if ($bool) {
    foreach (array_keys(node_type_get_types()) as $type) {
      if (!user_access("filter node search to $type content")) {
        unset($form['advanced']['type']['#options'][$type]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form().
 */
function user_tweaks_form_user_profile_form_alter(&$form, $form_state) {
  $vars = new UserTweakVars();

  if ($vars['user_tweaks_disable_user_language']) {
    if (isset($form['locale']) && isset($form['_account']) && !user_access('change own user language', $form['_account']['#value'])) {
      if (count(element_children($form['locale'])) > 1) {
        unset($form['locale']['language']);
      }
      else {
        unset($form['locale']);
      }

      if (user_access('administer users')) {
        drupal_set_message(t('The user language for the current account cannot be changed; the account uses the language set in the <a href="@languages">languages page</a>.', array('@languages' => url('admin/settings/language'))), 'status', FALSE);
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function user_tweaks_help($path, $arg) {
  if ($path == 'admin/help#user_tweaks') {
    return '<p>' . t("The User tweaks module allows users to alter how user pages are rendered."
    ) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function user_tweaks_menu() {
  $items = array();

  $items['user/login/autocomplete'] = array(
    'title' => 'User autocomplete',
    'page callback' => 'user_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('view login autocomplete'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function user_tweaks_menu_alter(&$items) {
  $vars = new UserTweakVars();

  if ($vars['user_tweaks_comment_permissions']) {
    if (isset($items['comment/%/delete'])) {
      $items['comment/%/delete']['access callback'] = '_user_tweaks_comment_access';
      $items['comment/%/delete']['access arguments'] = array('delete', 1);
    }

    if (isset($items['comment/%/edit'])) {
      $items['comment/%/edit']['access callback'] = '_user_tweaks_comment_access';
      $items['comment/%/edit']['access arguments'] = array('edit', 1);
    }
  }

  if ($vars['user_tweaks_tracker_permissions'] && isset($items['tracker'])) {
    $items['tracker']['access arguments'] = array('view any tracker pages');
    $items['tracker/%user_uid_optional']['access callback'] = '_user_tweaks_mytracker_access';
    $items['user/%user/track']['access callback'] = '_user_tweaks_tracker_access';
  }

  if ($vars['user_tweaks_protect_administrator_accounts']){
    if (isset($items['user/%user/cancel'])) {
      $items['user/%user/cancel']['access callback'] = '_user_tweaks_user_access';
      $items['user/%user/cancel']['access arguments'] = array('cancel', 1);
    }

    if (isset($items['user/%user/cancel/confirm/%/%'])) {
      $items['user/%user/cancel/confirm/%/%']['access callback'] = '_user_tweaks_user_access';
      $items['user/%user/cancel']['access arguments'] = array('cancel', 1);
    }

    if (isset($items['user/%user/edit'])) {
      $items['user/%user/edit']['access callback'] = '_user_tweaks_user_access';
      $items['user/%user/cancel']['access arguments'] = array('edit', 1);
    }
  }
}

/**
 * Implements hook_node_access().
 */
function user_tweaks_node_access($node, $op, $account) {
  if (is_object($node) && $op == 'view' && !$node->status) {
    $bool = (
      user_access('view unpublished content', $account) ||
      user_access('view unpublished ' . $node->type . ' content', $account)
    );
    if ($bool) {
      return NODE_ACCESS_ALLOW;
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_permission().
 */
function user_tweaks_permission() {
  $permissions = array(
    'edit administrator accounts' => array(
      'title' => t('Edit administrator user accounts'),
      'description' => t('Edit the account of administrator users (including the first registered user). Users require also the <em>Administer users</em> permission'),
      'restrict access' => TRUE,
    ),
    'delete own comments' => array(
      'title' => t('Delete own comments'),
      'description' => t('Users require also the <em>Post comments</em> permission; the permission is not necessary for users who have the <em>Administer comments</em> permission.'),
    ),
    'delete any comments' => array(
      'title' => t('Delete any comments'),
      'description' => t('Users require also the <em>Post comments</em> permission; the permission is not necessary for users who have the <em>Administer comments</em> permission.'),
    ),
    'edit any comments' => array(
      'title' => t('Edit any comments'),
      'description' => t('Users require also the <em>Post comments</em> permission; the permission is not necessary for users who have the <em>Administer comments</em> permission.'),
    ),
    'view unpublished content' => array(
      'title' => t('View unpublished content'),
    ),
  );

  if (module_exists('user_tweaks_ui')  && user_access('administer user tweaks')) {
    $description = t('User tweaks p  ermissions are not used until the relative options shown in the <a href="@settings-page">settings page</a> are enabled.', array('@settings-page' => url('admin/config/people/user-tweaks')));
  }
  else {
    $description = $permissions['edit administrator accounts']['description'] .= t('User tweaks permissions are not used until the relative options shown in the settings page are enabled.');
  }

  $permissions['edit administrator accounts']['description'] .= $description;

  foreach (node_type_get_types() as $type => $info) {
    $args = array('%type_name' => $info->name);
    $text_type = check_plain($type);

    $permissions['delete own ' . $text_type . ' comments'] = array(
      'title' => t('%type_name: Delete own comments', $args),
      'description' => t('Users require also the <em>Post comments</em> permission; the permission is not necessary for users who have the <em>Administer comments</em> permission.'),
    );
    $permissions['delete any ' . $text_type . ' comments'] = array(
      'title' => t('%type_name: Delete any comments', $args),
      'description' => t('Users require also the <em>Post comments</em> permission; the permission is not necessary for users who have the <em>Administer comments</em> permission.'),
    );
    $permissions['edit own ' . $text_type . ' comments'] = array(
      'title' => t('%type_name: Edit any comments', $args),
      'description' => t('Users require also the <em>Post comments</em> permission; the permission is not necessary for users who have the <em>Administer comments</em> permission.'),
    );
    $permissions['edit any ' . $text_type . ' comments'] = array(
      'title' => t('%type_name: Edit any comments', $args),
      'description' => t('Users require also the <em>Post comments</em> permission; the permission is not necessary for users who have the <em>Administer comments</em> permission.'),
    );
    $permissions['view unpublished ' . $text_type . ' content'] = array(
      'title' => t('%type_name: View unpublished content', $args),
    );
    $permissions['filter node search to ' . $text_type . ' content'] = array(
      'title' => t('%type_name: Filter the node search to this content type', $args),
    );
  }

  $permissions += array(
    'view own tracker pages' => array(
      'title' => t('View own tracker pages'),
    ),
    'view any tracker pages' => array(
      'title' => t('View any tracker pages'),
    ),
    'view user access information' => array(
      'title' => t('View the user access information'),
      'description' => t('View the user access information in the user profile pages.')
    ),
    'view login autocomplete' => array(
      'title' => t('View the user autocomplete list in the login form'),
      'description' => t('View the autocomplete list for the usernames in the login form, or in the form to request a password reset.'),
    ),
    'change own user language' => array(
      'title' => t('Change own user language'),
      'description' => t('Set the language used for the user interface, and email messages for the user account.')
    ),
    'administer user tweaks' => array(
      'title' => t('Administer user tweaks'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_user_load().
 */
function user_tweaks_user_load(&$edit, &$account, $category = NULL) {
  $vars = new UserTweakVars();

  if ($vars['user_tweaks_disable_user_language'] && $account->uid && !user_access('change own user language', $account)) {
    $account->language = language_default('language');
  }
}

/**
 * Implements hook_user_view().
 */
function user_tweaks_user_view($account) {
  $vars = new UserTweakVars();

  if ($vars['user_tweaks_show_member_since']) {
    $account->content['summary']['member_since'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Member since'),
      '#markup' => format_date($account->created),
    );
  }
  elseif ($vars['user_tweaks_show_user_access'] && user_access('view user access information')) {
    $account->content['summary']['last_access'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Last access on'),
      '#markup' => format_date($account->access),
    );

    $account->content['summary']['last_login'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Last login on'),
      '#markup' => format_date($account->login),
    );
  }
}

/**
 * Implements hook_user_view_alter().
 */
function user_tweaks_user_view_alter(&$build) {
  $vars = new UserTweakVars();

  if ($vars['user_tweaks_show_member_since']) {
    unset($build['summary']['member_for']);
  }
}

function _user_tweaks_comment_access($access, $comment) {
  global $user;

  $result = FALSE;

  switch ($access) {
    case 'edit':
      $bool = (
        ($comment = comment_load($comment)) &&
        $comment->nid &&
        ($node = node_load($comment->nid))
      );
      if ($bool) {
        $result = (
          ($comment->status == COMMENT_PUBLISHED) &&
          ($node->comment == COMMENT_NODE_OPEN) &&
          !user_access('administer comments') &&
          user_access('post comments')
        ) || user_access('administer comments');
      }
      break;

    case 'delete':
      $bool = (
        $comment->nid &&
        ($node = node_load($comment->nid))
      );
      if ($bool) {
        $result = (
          ($user->uid == $comment->uid && user_access('delete own comments')) ||
          ($user->uid == $comment->uid && user_access("delete own {$node->type} comments")) ||
          user_access('delete any comments') ||
          user_access("delete any {$node->type} comments")
        ) || user_access('administer comments');
      }
      break;
  }

  return $result;
}

function _user_tweaks_mytracker_access($account) {
  return $account->uid && ($GLOBALS['user']->uid == $account->uid) && user_access('view own tracker pages') && user_access('access content');
}

function _user_tweaks_user_access($access, $account) {
  global $user;
  $roles = array_flip($account->roles);

  switch ($access) {
    case 'cancel':
      $bool = (
        ($user->uid == $account->uid) ||
        (($account->uid != 1) && isset($roles['administrator']) && user_access('administer users') && user_access('edit administrator accounts')) ||
        (($account->uid != 1) && user_access('administer users') && !isset($roles['administrator'])) ||
        (($account->uid == 1) && user_access('administer users') && user_access('edit administrator accounts'))
      ) && $account->uid > 0;
      break;

    case 'edit':
      $bool = (
        (($user->uid == $account->uid) && user_access('cancel account')) ||
        (($account->uid != 1) && isset($roles['administrator']) && user_access('administer users') && user_access('edit administrator accounts')) ||
        (($account->uid != 1) && user_access('administer users') && !isset($roles['administrator'])) ||
        (($account->uid == 1) && user_access('administer users') && user_access('edit administrator accounts'))
      ) && $account->uid > 0;
      break;
  }

  return $bool;
}

function _user_tweaks_tracker_access($account) {
  return user_view_access($account) && user_access('access content') && ($GLOBALS['user']->uid == $account->uid ? user_access('view own tracker pages') : user_aceess('view any tracker pages'));
}
