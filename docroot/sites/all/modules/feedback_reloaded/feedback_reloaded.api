<?php
/**
 * @file
 * Hooks provided by this module.
 */
/**
 * @addtogroup hooks
 * @{
 */

/**
 * Acts on Feedbacks being loaded from the database.
 *
 * This hook is invoked during Feedback loading, which is handled by
 * entity_load(), via the EntityCRUDController.
 *
 * @param array $feedbacks
 *   An array of Feedback entities being loaded, keyed by id.
 *
 * @see hook_entity_load()
 */
function hook_feedback_reloaded_load(array $feedbacks) {
  $result = db_query('SELECT pid, foo FROM {mytable} WHERE pid IN(:ids)', array(':ids' => array_keys($entities)));
  foreach ($result as $record) {
    $entities[$record->pid]->foo = $record->foo;
  }
}

/**
 * Responds when a Feedback is inserted.
 *
 * This hook is invoked after the Feedback is inserted into the database.
 *
 * @param FeedbackR $feedback
 *   The Feedback that is being inserted.
 *
 * @see hook_entity_insert()
 */
function hook_feedback_reloaded_insert(FeedbackR $feedback) {
  db_insert('mytable')
    ->fields(array(
      'id' => entity_id('feedback_reloaded', $feedback),
      'extra' => print_r($feedback, TRUE),
    ))
    ->execute();
}

/**
 * Acts on a Feedback being inserted or updated.
 *
 * This hook is invoked before the Feedback is saved to the database.
 *
 * @param FeedbackR $feedback
 *   The Feedback that is being inserted or updated.
 *
 * @see hook_entity_presave()
 */
function hook_feedback_reloaded_presave(FeedbackR $feedback) {
  $feedback->name = 'foo';
}

/**
 * Responds to a Feedback being updated.
 *
 * This hook is invoked after the Feedback has been updated in the database.
 *
 * @param FeedbackR $feedback
 *   The Feedback that is being updated.
 *
 * @see hook_entity_update()
 */
function hook_feedback_reloaded_update(FeedbackR $feedback) {
  db_update('mytable')
    ->fields(array('extra' => print_r($feedback, TRUE)))
    ->condition('id', entity_id('feedback_reloaded', $feedback))
    ->execute();
}

/**
 * Responds to Feedback deletion.
 *
 * This hook is invoked after the Feedback has been removed from the database.
 *
 * @param FeedbackR $feedback
 *   The Feedback that is being deleted.
 *
 * @see hook_entity_delete()
 */
function hook_feedback_reloaded_delete(FeedbackR $feedback) {
  db_delete('mytable')
    ->condition('pid', entity_id('feedback_reloaded', $feedback))
    ->execute();
}

/**
 * Act on a Feedback that is being assembled before rendering.
 *
 * @param $feedback
 *   The Feedback entity.
 * @param $view_mode
 *   The view mode the Feedback is rendered in.
 * @param $langcode
 *   The language code used for rendering.
 *
 * The module may add elements to $Feedback->content prior to rendering. The
 * structure of $Feedback->content is a renderable array as expected by
 * drupal_render().
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 */
function hook_feedback_reloaded_view($feedback, $view_mode, $langcode) {
  $feedback->content['my_additional_field'] = array(
    '#markup' => $additional_field,
    '#weight' => 10,
    '#theme' => 'mymodule_my_additional_field',
  );
}

/**
 * Alter the results of entity_view() for Feedbacks.
 *
 * @param $build
 *   A renderable array representing the Feedback content.
 *
 * This hook is called after the content has been assembled in a structured
 * array and may be used for doing processing which requires that the complete
 * Feedback content structure has been built.
 *
 * If the module wishes to act on the rendered HTML of the Feedback rather than
 * the structured content array, it may use this hook to add a #post_render
 * callback. Alternatively, it could also implement hook_preprocess_feedback().
 * See drupal_render() and theme() documentation respectively for details.
 *
 * @see hook_entity_view_alter()
 */
function hook_feedback_view_alter($build) {
  if ($build['#view_mode'] == 'full' && isset($build['an_additional_field'])) {
    // Change its weight.
    $build['an_additional_field']['#weight'] = -10;

    // Add a #post_render callback to act on the rendered HTML of the entity.
    $build['#post_render'][] = 'my_module_post_render';
  }
}

/**
 * Define default Feedback configurations.
 *
 * @return
 *   An array of default Feedbacks, keyed by machine names.
 *
 * @see hook_default_feedback_reloaded_alter()
 */
function hook_default_feedback_reloaded() {
  $defaults['main'] = entity_create('feedback_reloaded', array(
    // …
    ));
  return $defaults;
}

/**
 * Alter default Feedback configurations.
 *
 * @param array $defaults
 *   An array of default Feedbacks, keyed by machine names.
 *
 * @see hook_default_feedback_reloaded()
 */
function hook_default_feedback_reloaded_alter(array &$defaults) {
  $defaults['main']->name = 'custom name';
}

/**
 * Act after rebuilding default Feedbacks.
 *
 * This hook is invoked by the entity module after default Feedbacks
 * have been rebuilt; i.e. defaults have been saved to the database.
 *
 * @param $feedbacks
 *   The array of default Feedbacks which have been inserted or
 *   updated, keyed by name.
 * @param $originals
 *   An array of original Feedbacks keyed by name; i.e. the Feedbacks
 *   before the current defaults have been applied. For inserted
 *   Feedbacks no original is available.
 *
 * @see hook_default_feedback_reloaded()
 * @see entity_defaults_rebuild()
 */
function hook_feedback_reloaded_defaults_rebuild($feedbacks, $originals) {

}

/**
 * Alter Feedback forms.
 *
 * Modules may alter the Feedback entity form by making use of this hook or
 * the entity bundle specific hook_form_feedback_reloaded_edit_BUNDLE_form_alter().
 * #entity_builders may be used in order to copy the values of added form
 * elements to the entity, just as documented for
 * entity_form_submit_build_entity().
 *
 * @param $form
 *   Nested array of form elements that comprise the form.
 * @param $form_state
 *   A keyed array containing the current state of the form.
 */
//function hook_form_feedback_reloaded_form_alter(&$form, &$form_state) {
// Your alterations.
//}

/**
 * Acts on Feedback Types being loaded from the database.
 *
 * This hook is invoked during Feedback Type loading, which is handled by
 * entity_load(), via the EntityCRUDController.
 *
 * @param array $feedback_reloaded_types
 *   An array of Feedback Type entities being loaded, keyed by id.
 *
 * @see hook_entity_load()
 */
function hook_feedback_reloaded_type_load(array $feedback_reloaded_types) {
  $result = db_query('SELECT pid, foo FROM {mytable} WHERE pid IN(:ids)', array(':ids' => array_keys($entities)));
  foreach ($result as $record) {
    $entities[$record->pid]->foo = $record->foo;
  }
}

/**
 * Responds when a Feedback Type is inserted.
 *
 * This hook is invoked after the Feedback Type is inserted into the database.
 *
 * @param FeedbackRType $feedback_reloaded_type
 *   The Feedback Type that is being inserted.
 *
 * @see hook_entity_insert()
 */
function hook_feedback_reloaded_type_insert(FeedbackRType $feedback_reloaded_type) {
  db_insert('mytable')
    ->fields(array(
      'id' => entity_id('feedback_reloaded_type', $feedback_reloaded_type),
      'extra' => print_r($feedback_reloaded_type, TRUE),
    ))
    ->execute();
}

/**
 * Acts on a Feedback Type being inserted or updated.
 *
 * This hook is invoked before the Feedback Type is saved to the database.
 *
 * @param FeedbackRType $feedback_reloaded_type
 *   The Feedback Type that is being inserted or updated.
 *
 * @see hook_entity_presave()
 */
function hook_feedback_reloaded_type_presave(FeedbackRType $feedback_reloaded_type) {
  $feedback_reloaded_type->name = 'foo';
}

/**
 * Responds to a Feedback Type being updated.
 *
 * This hook is invoked after the Feedback Type has been updated in the database.
 *
 * @param FeedbackRType $feedback_reloaded_type
 *   The Feedback Type that is being updated.
 *
 * @see hook_entity_update()
 */
function hook_feedback_reloaded_type_update(FeedbackRType $feedback_reloaded_type) {
  db_update('mytable')
    ->fields(array('extra' => print_r($feedback_reloaded_type, TRUE)))
    ->condition('id', entity_id('feedback_reloaded_type', $feedback_reloaded_type))
    ->execute();
}

/**
 * Responds to Feedback Type deletion.
 *
 * This hook is invoked after the Feedback Type has been removed from the database.
 *
 * @param FeedbackRType $feedback_reloaded_type
 *   The Feedback Type that is being deleted.
 *
 * @see hook_entity_delete()
 */
function hook_feedback_reloaded_type_delete(FeedbackRType $feedback_reloaded_type) {
  db_delete('mytable')
    ->condition('pid', entity_id('feedback_reloaded_type', $feedback_reloaded_type))
    ->execute();
}

/**
 * Define default Feedback Type configurations.
 *
 * @return
 *   An array of default Feedback Types, keyed by machine names.
 *
 * @see hook_default_feedback_reloaded_type_alter()
 */
function hook_default_feedback_reloaded_type() {
  $defaults['main'] = entity_create('feedback_reloaded_type', array(
    // …
    ));
  return $defaults;
}

/**
 * Alter default Feedback Type configurations.
 *
 * @param array $defaults
 *   An array of default Feedback Types, keyed by machine names.
 *
 * @see hook_default_feedback_reloaded()
 */
function hook_default_feedback_reloaded_type_alter(array &$defaults) {
  $defaults['main']->name = 'custom name';
}

/**
 * Act after rebuilding default Feedback Types.
 *
 * This hook is invoked by the entity module after default Feedback Types
 * have been rebuilt; i.e. defaults have been saved to the database.
 *
 * @param $feedback_reloaded_types
 *   The array of default Feedback Types which have been inserted or
 *   updated, keyed by name.
 * @param $originals
 *   An array of original Feedback Types keyed by name; i.e. the Feedback Types
 *   before the current defaults have been applied. For inserted
 *   Feedback Types no original is available.
 *
 * @see hook_default_feedback_reloaded()
 * @see entity_defaults_rebuild()
 */
function hook_feedback_reloaded_type_defaults_rebuild($feedback_reloaded_types, $originals) {

}

/**
* Alter Feedback Type forms.
*
* Modules may alter the Feedback Type entity form by making use of this hook or
* the entity bundle specific hook_form_feedback_reloaded_type_edit_BUNDLE_form_alter().
* #entity_builders may be used in order to copy the values of added form
* elements to the entity, just as documented for
* entity_form_submit_build_entity().
*
* @param $form
*   Nested array of form elements that comprise the form.
* @param $form_state
*   A keyed array containing the current state of the form.
*/
//function hook_form_feedback_reloaded_type_form_alter(&$form, &$form_state) {
  // Your alterations.
//}

/**
* @}
*/
