<?php


/**
 * Implements hook_permission().
 */
function feedback_reloaded_permission() {
  return array(
    'access feedback form' => array(
      'title' => t('Access feedback form'),
      'description' => t('Submit feedback messages.'),
    ),
    'view feedback messages' => array(
      'title' => t('View feedback messages'),
      'description' => t('View, process, and delete submitted feedback messages.'),
    ),
    'administer feedback' => array(
      'title' => t('Administer feedback settings'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function feedback_reloaded_help($path, $arg) {
  switch ($path) {
    case 'admin/help#feedback_reloaded':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Feedback Reloaded module provides complete feedback solution to site administrators. Feedback helps site administrators in quality assurance of their pages, contents and theme. But website visitors and users are not expected to be expert in field of web development so the textual feedback provided by them might not be enough for the developer to track down the issue.  To solve this problem Feedback Reloaded captures the whole webpage automatically and allow visitors to highlight/blackout and even add a little note to relevant page area.').'</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Highlight') . '</dt>';
      $output .= '<dd>' . t('This module allows visitors to highlight relevant area in the webpage') . '</dd>';
      $output .= '<dt>' . t('Blackout') . '</dt>';
      $output .= '<dd>' . t('Visitor can blackout any personal information that he/she do not want to send in screenshot.').'</dd>';
      $output .= '<dt>' . t('Add Note') . '</dt>';
      $output .= '<dd>' . t('A little note can be attached to relevant area with breif describe of problem/suggestion.').'</dd>';
		  $output .= '<h3>' . t('Getting Started') . '</h3>';
			$output .= '<p>' . t('A \'Standard\' feedback type is provided by default you can create one or more <a href="@fbtype">Feedback Types</a> like Bug Report, Suggestion and can even attach fields to these types.', array('@fbtype' => 'admin/structure/feedbacks')).'</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_info().
 */
function feedback_reloaded_entity_info() {
  $return = array();

  // Feedback Type entity.
  $return['feedback_reloaded_type'] = array(
    'label' => t('Feedback Type'),
    'plural label' => t('Feedback Types'),
    'entity class' => 'FeedbackRType',
    'controller class' => 'FeedbackRTypeController',
    'base table' => 'feedback_reloaded_type',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
    ),
    'bundle of' => 'feedback_reloaded',
    'access callback' => 'feedback_reloaded_access',
    'module' => 'feedback_reloaded',
    // Enable the Entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/feedbacks',
      'file' => 'feedback_reloaded.admin.inc',
      'controller class' => 'FeedbackRTypeUIController',
    ),
  );

  // Feedback entity.
  $return['feedback_reloaded'] = array(
    'label' => t('Feedback'),
    'plural label' => t('Feedbacks'),
    'entity class' => 'FeedbackR',
    'controller class' => 'FeedbackRController',
    'base table' => 'feedback_reloaded',
    'fieldable' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'entity keys' => array(
      'id' => 'fid',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'bundles' => array(),
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'feedback_reloaded_access',
    'module' => 'feedback_reloaded',
    'metadata controller class' => 'FeedbackRMetadataController',
  );

  return $return;
}

/**
 * Define default feedback configurations.
 *
 * @return
 *   An array of default entities, keyed by machine names.
 */
function feedback_reloaded_default_feedback_reloaded_type() {
  $defaults['standard'] = entity_create('feedback_reloaded_type', array(
    'label' => 'Standard',
    'description' => 'This is default standard feedback type.',
  ));

  return $defaults;
}

/**
* Implements hook_entity_info_alter().
*/
function feedback_reloaded_entity_info_alter(&$entity_info) {
  foreach (feedback_reloaded_types() as $type => $info) {
    $entity_info['feedback_reloaded']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/feedbacks/manage/%feedback_reloaded_type',
        'real path' => 'admin/structure/feedbacks/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function feedback_reloaded_menu() {
  $items = array();

  // Settings page.
  $items['admin/config/workflow/feedback'] = array(
    'title' => 'Feedback',
    'description' => 'Manage feedback settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedback_reloaded_settings_form'),
    'access arguments' => array('administer feedback'),
    'file' => 'feedback_reloaded.admin.inc',
  );

  $items['admin/reports/feedback'] = array(
    'title' => 'Feedbacks',
    'description' => t('View feedbacks submitted by users.'),
    'page callback' => 'feedback_reloaded_list',
    'access arguments' => array('view feedback messages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $feedback_uri = 'feedback/%feedback_reloaded';
  $feedback_uri_argument_position = 1;

  // View feedback.
  $items[$feedback_uri] = array(
    'title callback' => 'feedback_reloaded_page_title',
    'title arguments' => array($feedback_uri_argument_position),
    'page callback' => 'feedback_reloaded_view',
    'page arguments' => array($feedback_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'feedback_reloaded', $feedback_uri_argument_position),
  );

  $items[$feedback_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  //Change review status of feedback.
  $items[$feedback_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedback_reloaded_edit_form', $feedback_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'feedback_reloaded', $feedback_uri_argument_position),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // Delete feedback.
  $items[$feedback_uri . '/delete'] = array(
    'title' => 'Delete Feedback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedback_reloaded_delete_form', $feedback_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'feedback_reloaded', $feedback_uri_argument_position),
  );

  return $items;
}

/**
 * Implements hook_file_download().
 */
function feedback_reloaded_file_download($uri) {
  if (strpos($uri, 'private://feedback_reloaded_screenshots') === 0) {
    if (!user_access('view feedback messages')) {
       return -1;
     }
     else {
       $info = image_get_info($uri);
       return array('Content-Type' => $info['mime_type']);
     }
  }
}

/**
 * Page callback.
 * Lists all feedbacks.
 *
 */
function feedback_reloaded_list() {

  $rows = array();

  // Build the sortable table header.
  $header = array(
    'uid' => array(
      'data' => 'User',
      'type' => 'property',
      'specifier' => 'uid',
    ),
    'type' => array(
      'data' => 'Type',
      'type' => 'entity',
      'specifier' => 'type',
    ),
    'status' => array(
      'data' => 'Status',
      'type' => 'property',
      'specifier' => 'status',
    ),
    'date_created' => array(
      'data' => 'Created',
      'type' => 'property',
      'specifier' => 'timestamp',
      'sort' => 'asc',
    ),
    'message' => array(
      'data' => 'Description',
      'type' => 'property',
      'specifier' => 'message',
    ),
    'useragent' => array(
      'data' => 'Useragent',
      'type' => 'property',
      'specifier' => 'useragent',
    ),
    'operations' => array(
      'data' => t('Operations')
    ),
  );

  $filters = feedback_reloaded_get_filter();

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'feedback_reloaded')
    ->tableSort($header)
    ->pager($filters['per_page']);

  if (!empty($filters['type'])) {
    $query->entityCondition('bundle', $filters['type'], 'IN');
  }

  // If int 0 is set at 0 index then set it to a string other than 0
  if(gettype($filters['status'][0]) == 'integer' && gettype($filters['status'][1]) == 'string') {
    $filters['status'][0] = "-1";
  }
  if (!empty($filters['status'])) {
    $query->propertyCondition('status', $filters['status'], 'IN');
  }

  $result = $query->execute();
  if (!empty($result)) {
    $feedbacks = feedback_reloaded_load_multiple(array_keys($result['feedback_reloaded']));
  }
  else {
    $feedbacks = array();
  }

  $destination = drupal_get_destination();
  $status_options = array(
    '0' => t('New'),
    '1' => t('Processed'),
  );

  $destination = drupal_get_destination();
  foreach ($feedbacks as $feedback) {
    $user = user_load($feedback->uid);

    $rows[$feedback->fid] = array(
      'uid' => array(
        'data' => array(
          '#type' => 'link',
          '#title' => $user->name,
          '#href' => 'user/' . $feedback->uid,
        ),
      ),
      'type' => feedback_reloaded_type_types($feedback->type)->label,
      'status' => $status_options[$feedback->status],
      'date_created' => format_date($feedback->timestamp),
      'message' => check_plain(substr($feedback->message,0,30)),
      'useragent' => substr($feedback->useragent,0,30).'...',
    );

    // Build a list of operations.
    $operations = array();

    $operations['view'] = array(
      'title' => t('view'),
      'href' => 'feedback/' . $feedback->fid,
      'query' => $destination,
    );

    $operations['edit'] = array(
      'title' => t('edit'),
      'href' => 'feedback/' . $feedback->fid . '/edit',
      'query' => $destination,
    );

    $operations['delete'] = array(
      'title' => t('delete'),
      'href' => 'feedback/' . $feedback->fid . '/delete',
      'query' => $destination,
    );

    // Render an unordered list of operations links.
    $rows[$feedback->fid]['operations'] = array(
      'data' => array(
        '#theme' => 'links',
        '#links' => $operations,
        '#attributes' => array('class' => array('links', 'inline')),
      ),
    );
  }

  $output = array(
    'feedback_reloaded_filter_form' => drupal_get_form('feedback_reloaded_filter_form'),
    'feedback_reloaded_content' => array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#empty' => t('There are no feedbacks available.'),
    ),
    'pager' => array(
      '#theme' => 'pager',
    ),
  );

  return $output;
}

/**
 * Returns feedback filters.
 *
 * @return array
 *   An array keyed by filter name.
 *
 * @see feedback_reloaded_filter_form()
 */
function feedback_reloaded_get_filter() {
  // Pull any saved values from the session.
  $filters = isset($_SESSION['feedback-reloaded-filter']) ? $_SESSION['feedback-reloaded-filter'] : array();

  // Fill with defaults where necessary.
  if (!isset($filters['type'])) {
    $filters['type'] = array_keys(feedback_reloaded_get_types());
  }

  if (!isset($filters['status'])) {
    $filters['status'] = array_keys(feedback_reloaded_status_options_list());
  }

  if (!isset($filters['per_page'])) {
    $filters['per_page'] = 50;
  }

  return $filters;
}

/**
 * Sets feedback filters.
 *
 * @see feedback_reloaded_filter_submit()
 * @see feedback_reloaded_filter_form()
 */
function feedback_reloaded_set_filter($filter) {
  $_SESSION['feedback-reloaded-filter'] = $filter;
}

/**
 * Resets feedback filters.
 *
 * @see feedback_reloaded_filter_submit_reset()
 * @see feedback_reloaded_filter_form()
 */
function feedback_reloaded_reset_filter() {
  unset($_SESSION['feedback-reloaded-filter']);
}

/**
 * Form callback.
 * Displays filter form for listing feedbacks.
 *
 * @see feedback_reloaded_list()
 */
function feedback_reloaded_filter_form($form, &$form_state) {
  $filters = feedback_reloaded_get_filter();

  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filters'),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => !isset($_SESSION['feedback-reloaded-filter']),
  );

  $type_options = array();
  foreach (feedback_reloaded_get_types() as $type) {
    $type_options[$type->name] = $type->getTranslation('label');
  }
  asort($type_options);

  $form['filters']['type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Type'),
    '#multiple' => TRUE,
    '#options' => $type_options,
    '#default_value' => $filters['type'],
  );

  $form['filters']['status'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Status'),
    '#multiple' => TRUE,
    '#options' => feedback_reloaded_status_options_list(),
    '#default_value' => $filters['status'],
  );

  $form['filters']['per_page'] = array(
    '#type' => 'select',
    '#title' => t('Items Per Page'),
    '#multiple' => FALSE,
    '#options' => array(20 => '20', 50 => '50', 100 => '100', 200 => '200', 500 => '500'),
    '#default_value' => $filters['per_page'],
  );

  $form['filters']['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#submit' => array('feedback_reloaded_filter_submit'),
  );
  $form['filters']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
    '#submit' => array('feedback_reloaded_filter_submit_reset'),
  );

  return $form;
}

/**
 * Submit callback.
 * Applies filters.
 *
 * @see feedback_reloaded_filter_form()
 */
function feedback_reloaded_filter_submit($form, &$form_state) {
  $filters = array(
    'type' => $form_state['values']['filters']['type'],
    'status' => $form_state['values']['filters']['status'],
    'per_page' => $form_state['values']['filters']['per_page'],
  );
 var_dump($filters['status']);

  feedback_reloaded_set_filter($filters);
  drupal_goto('admin/reports/feedback');
}

/**
 * Submit callback.
 * Resets filters.
 *
 * @see feedback_reloaded_filter_form()
 */
function feedback_reloaded_filter_submit_reset($form, &$form_state) {
  feedback_reloaded_reset_filter();
  drupal_goto('admin/reports/feedback');
}

function feedback_reloaded_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('feedback_reloaded_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Determines whether the given user has access to a feedback or feedback type
 * operation.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update'). This isn't
 *   actually used as there is one global administer FeedbackR types permission.
 * @param $type
 *   The feedback type we want to check access for. This isn't
 *   actually used as there is one global administer FeedbackR types permission.
 * @param $account
 *   The user to check for. Leave it NULL to check for the current user.
 * @return bool
 *   Whether the user has access.
 */
function feedback_reloaded_access($op, $type = NULL, $account = NULL) {
  return user_access('administer feedback', $account);
}



/**
 * Implements hook_init().
 */
function feedback_reloaded_init() {
  if (user_access('access feedback form') && !feedback_reloaded_match_path(variable_get('feedback_reloaded_excluded_paths', 'admin/reports/feedback'))) {
    $path = drupal_get_path('module', 'feedback_reloaded');
    drupal_add_css($path . '/feedback_reloaded.css');
    drupal_add_js($path . '/feedback_reloaded.js');
    drupal_add_js(array(
      'moduleBasePath' => $path,
      'screenshot_method' => variable_get('feedback_reloaded_screenshot_method', 'java'),
    ), 'setting');
    $path = base_path().$path;
    drupal_add_library('system', 'ui.draggable');
    $wizardContainer = <<<EOT
      <div id="feedback_form_container" class="feedback_form" onMouseMove="feedbackReloaded.getMouse(this,event);" onMouseUp="feedbackReloaded.getMouse(this,event);">
      <div style="border-bottom: solid 0px #ccc; float: left; width: 100%; padding-bottom: 0px;">
        <span><img src="$path/image/close.png" title="Click to close feedback wizard" style="cursor: pointer; border: solid 0px #ccc; float:right;" onClick="feedbackReloaded.stopFeedback();"></span>
        <img src="$path/image/fb.gif" height="30" \>&nbsp;&nbsp;<span style="font-size: 18px;">Feedback Wizard</span>
      </div>
      <div id="feedback_wizard_form_div" style="display:none; margin-top:50px;"></div>
      <div id="wizard_content"></div>
      </div>
EOT;
    $wizardform = drupal_get_form('feedback_wizard_form');
    $wizardPhaseOneContent = drupal_render($wizardform);
    $wizardPhaseTwoContent = <<<EOT
      <p style="margin-top:50px;">
      <button id="button_highlight" style="height: 30px; " disabled>Highlight</button>
      Click and drag to highlight problem area.
      </p>
      <p><button id="button_blackout" style="height: 30px;">Blackout</button>
      Click and drag to hide personal information.
      </p>
      <p><button id="button_addnote" style="height: 30px;">Add Note</button>
      Click anywhere in page to add a note there.
      </p>
      <div style="float:right; border-top: solid 1px #ccc; width: 100%; padding-top:9px;">
        <button id="button_preview" style="float:right; height: 30px;" value="Next" onClick="feedbackReloaded.takeScreenshot();">Preview</button>
   </div>
EOT;

    drupal_add_js(array('wizardContainer' => $wizardContainer), 'setting');
    drupal_add_js(array('wizardPhaseOneContent' => $wizardPhaseOneContent), 'setting');
    drupal_add_js(array('wizardPhaseTwoContent' => $wizardPhaseTwoContent), 'setting');
  }
}

/**
 * Check if the current path matches any pattern in a set of patterns.
 *
 * @param $patterns
 *   String containing a set of patterns separated by \n, \r or \r\n.
 *
 * @return
 *   Boolean value: TRUE if the current path or alias matches a pattern.
 */
function feedback_reloaded_match_path($patterns) {
  // Convert path to lowercase. This allows comparison of the same path
  // with different case. Ex: /Page, /page, /PAGE.
  $patterns = drupal_strtolower($patterns);

  // Convert the current path to lowercase.
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));

  // Compare the lowercase internal and lowercase path alias (if any).
  $page_match = drupal_match_path($path, $patterns);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $patterns);
  }

  return $page_match;
}

function feedback_wizard_form($form, &$form_state) {
  $form['#prefix'] = '<div id="feedback-wizard-form-wrapper">';
  $form['#suffix'] = '</div>';
  $feedbackTypes = array();

  foreach (feedback_reloaded_get_types() as $type => $info) {
    $key = $info->getTranslation('name');
    $value = $info->getTranslation('label');
    $feedbackTypes[$key] = $value;
  }

  $form['div_tag'] = array(
    '#markup' => '<p style="margin-bottom:9px; margin-top:50px;">Welcome to Feedback Wizard. This wizard will let you send bug reports, new feature ideas, suggestions and other comments.<br><br>Choose one of the following feedback type.</p>',
  );

  $form['feedbacktype'] = array(
    '#type' => 'select',
    '#options' => $feedbackTypes,
    '#attributes' => array(
      'style' => 'width: 150px; text-align: center;height: 28px !important;',
    ),
  );

  $form['div_tag2'] = array(
    '#markup' => '<p style="margin-bottom:9px;">Click next then you will be able to highlight the problem area.</p>',
  );

  $form['button'] = array(
    '#type' => 'button',
    '#value' => t('Next'),
    '#attributes' => array(
      'onclick' => 'feedbackReloaded.startPhaseTwo()',
    ),
    '#ajax' => array(
      'wrapper' => 'feedback-wizard-form-wrapper',
      'callback' => 'feedback_wizard_form_callback',
      'event' => 'click',
      // set progress to something else then bar and throbber, although not a standard but removes any progress indicator.
      'progress' => 'NULL',
    ),
  );

  return $form;
}

/**
 * Callback for feedback_wizard_form.
 *
 * On an ajax submit, the form builder function is called again, then the $form
 * and $form_state are passed to this callback function so it can select which
 * portion of the form to send on to the client.
 *
 * @return renderable array (the textfield element)
 */
function feedback_wizard_form_callback($form, $form_state) {
  //Create feedback form for selected feedback form type and save in Drupal.settings
  $feedbackType = feedback_reloaded_get_types($form_state['values']['feedbacktype']);
  $feedback = entity_create('feedback_reloaded', array('type' => $feedbackType));
  $feedback_form = drupal_get_form('feedback_reloaded_form', $feedback);
  //drupal_add_js(array('feeedbackForm' => drupal_render($feedback_form)) , 'setting');

  //Now return the $form as it is.
  return $feedback_form;
}

function feedback_reloaded_form($form, &$form_state, $feedback) {
  $form['#prefix'] = '<div id="feedback-wizard-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form_state['feedback'] = $feedback;

  $form['url'] = array('#type' => 'hidden');

  field_attach_form('feedback_reloaded', $feedback, $form, $form_state);

  $form['preview'] = array(
    '#markup' => '<p><strong>Screenshot Preview</strong><br><img id="screenshot_preview" src=""></img></p>'
  );

  $form['screenshot'] = array('#type' => 'hidden');

  $form['title'] = array(
    '#title' => 'Title',
    '#type' => 'textfield',
  );

  $form['message'] = array(
    '#title' => 'Description',
    '#type' => 'textarea',
    '#description' => t('Please give us a brief description regarding your feedback'),
  );

  $form['actions'] = array(
    '#weight' => 100,
  );

  $form['actions']['submit'] = array(
    '#type' => 'button',
    '#value' => t('Submit Feedback'),
    '#ajax' => array(
      'wrapper' => 'feedback-wizard-form-wrapper',
      'callback' => 'feedback_reloaded_form_callback',
      'event' => 'click',
      ),
  );

  return $form;
}

/**
 * Submit callback.
 * Saves a Feedback.
 *
 * @see feedback_reloaded_form()
 */
function feedback_reloaded_form_callback(&$form, &$form_state) {
  global $user;

  // If there was a form validation error, re-render the entire form.
  $error = form_get_errors();
  if($error) {
    return $form;
  }

  $feedback = $form_state['feedback'];
  $screenshot = $form_state['values']['screenshot'];
  //Now decode this base64 encoded date and store in $screenshot
  $screenshot = base64_decode($screenshot);
  $defaults = array(
    'uid' => $user->uid,
    'timestamp' => REQUEST_TIME,
    'useragent' => filter_xss($_SERVER['HTTP_USER_AGENT']),
  );

  foreach ($defaults as $key => $default) {
    if (!isset($feedback->$key)) {
      $feedback->$key = $default;
    }
  }

  // Build entity.
  entity_form_submit_build_entity('feedback_reloaded', $feedback, $form, $form_state);

  //Save screenshot
  $data = $screenshot;
  $feedback_reloaded_screenshot_uri = variable_get('feedback_reloaded_screenshot_uri');
  $privateFilePath = variable_get('file_private_path');
  // If feedback_reloaded_screenshot_uri is set to private then make sure directory exist as this was not created when module was installed
  if($feedback_reloaded_screenshot_uri == 'private://feedback_reloaded_screenshots' && $privateFilePath) {
    if(!file_prepare_directory($feedback_reloaded_screenshot_uri, FILE_CREATE_DIRECTORY)) {
      variable_set('feedback_reloaded_error','Directory could not be created in private://');
    }
  }
  // If private storage is removed at some point later then fallback to public://
  elseif(!$privateFilePath) {
    $feedback_reloaded_screenshot_uri = 'public://feedback_reloaded_screenshots';
    variable_set('feedback_reloaded_screenshot_uri',$feedback_reloaded_screenshot_uri);
  }


  $feedback_reloaded_screenshot_uri .= '/screenshot'.mt_rand().'.png';
  $file_object = file_save_data($data, $feedback_reloaded_screenshot_uri, FILE_EXISTS_RENAME);
  if (!empty($file_object)) {
    $url = file_create_url($file_object->uri);
    $feedback->screenshoturl = $url;
  }
  else {
    form_set_error('k','Screenshot could not be saved.');
    return $form;
  }

  // Save entity.
  feedback_reloaded_save($feedback);
  $status = "<p style=\"margin-bottom:9px; margin-top:50px;\">";
  $status .= variable_get('feedback_reloaded_after_save_text','Feedback Submitted Succesfully. Thanks for your feedback.');
  $status .= "<br><br><button onclick = \"feedbackReloaded.stopFeedback();\" value = \"Finish\">Finish</button></p>";
  $commands = array();
  $commands[] = ajax_command_remove('#feedback_wizard_form_div');
  $commands[] = ajax_command_html('#wizard_content', $status);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Form callback.
 * Displays feedback delete confirmation form.
 *
 * @see feedback_reloaded_menu()
 */
function feedback_reloaded_delete_form($form, &$form_state, $feedback) {
  $form_state['feedback'] = $feedback;

  // Always provide entity id in the same form key as in the entity edit form.
  $form['aid'] = array('#type' => 'value', '#value' => entity_id('feedback_reloaded', $feedback));
  $feedback_uri = entity_uri('subs', $feedback);
  return confirm_form($form, t('Are you sure you want to delete feedback %title?', array('%title' => entity_label('feedback_reloaded', $feedback))), $feedback_uri['path'], t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * Submit handler.
 * Deletes an feedback.
 *
 * @see feedback_reloaded_delete_form()
 */
function feedback_reloaded_delete_form_submit($form, &$form_state) {
  $feedback = $form_state['feedback'];

  // Delete feedback.
  feedback_reloaded_delete($feedback);

  // Redirect to front page.
  $form_state['redirect'] = '<front>';

  // Success message.
  drupal_set_message(t('Feedback %title deleted.', array('%title' => entity_label('feedback_reloaded', $feedback))));
}

function feedback_reloaded_edit_form($form, &$form_state, $feedback) {
  $feedback_type = feedback_reloaded_type_types($feedback->type);
  $form_state['feedback'] = $feedback;

  $form['title'] = array(
    '#title' => 'Title',
    '#type' => 'textfield',
    '#default_value' => $feedback->title,
  );

  $form['message'] = array(
    '#title' => 'Description',
    '#type' => 'textarea',
    '#description' => t('Please give us the brief desciption regarding your feedback'),
    '#default_value' => $feedback->message,
  );

  $option = array(0 => t('New'), 1 => t('Processed'));
  $form['status'] = array(
    '#type' => 'radios',
    '#title' => t('Status'),
    '#default_value' => $feedback->status,
    '#options' => $option,
    '#description' => t('Mark a feedback as processed after reviewing it.'),
  );

  field_attach_form('feedback_reloaded', $feedback, $form, $form_state);

  $form['actions'] = array(
    '#weight' => 100,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save feedback'),
    '#submit' => array('feedback_reloaded_edit_form_submit'),
  );

  return $form;
}

function feedback_reloaded_edit_form_submit($form, &$form_state) {
  $feedback = $form_state['feedback'];

  // Build entity.
  entity_form_submit_build_entity('feedback_reloaded', $feedback, $form, $form_state);

  // Save entity.
  feedback_reloaded_save($feedback);

  // Success message.
  drupal_set_message(t('Feedback %title saved.', array('%title' => entity_label('feedback_reloaded', $feedback))));
}

########################
### Helper Functions ###
########################

/**
 * Return the options lists for the feedback status property.
 *
 * @return array
 *   A keyed array with feedback statuses as keys and labels
 *   as values.
 */
function feedback_reloaded_status_options_list() {
  return array(
    '0' => t('New'),
    '1' => t('Processed'),
  );
}

############################
### API Functions - CRUD ###
############################

/**
 * Fetch a feedback object.
 *
 * @param $fid
 *   Integer specifying the feedback id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $feedback_reloaded object or FALSE if it cannot be loaded.
 *
 * @see feedback_reloaded_load_multiple()
 */
function feedback_reloaded_load($fid, $reset = FALSE) {
  $feedback_reloadeds = feedback_reloaded_load_multiple(array($fid), array(), $reset);
  return reset($feedback_reloadeds);
}

/**
 * Load multiple feedbacks based on certain conditions.
 *
 * @param $sids
 *   An array of feedback IDs.
 * @param $conditions
 *   An array of conditions to match against the {FeedbackR} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return array|FALSE
 *   An array of feedback objects, indexed by ID or FALSE of none were found.
 *
 * @see entity_load()
 * @see feedback_reloaded_load()
 * @see feedback_reloaded_load_by_user()
 */
function feedback_reloaded_load_multiple($fids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('feedback_reloaded', $fids, $conditions, $reset);
}

/**
 * Fetch feedbacks by account.
 *
 * @param $account
 *   The user account to load feedbacks for, or its uid.
 * @param $type_name
 *   To load feedbacks of a single type, specify it.
 * @param $reset
 *   To bypass the static cache set this to true.
 * @return FeedbackR|array|FALSE
 *   Either a single feedback or an array of feedbacks keyed by
 *   feedback type or FALSE of no feedbacks found.
 *
 * @see feedback_reloaded_load_multiple()
 */
function feedback_reloaded_load_by_user($account, $type_name = NULL, $reset = FALSE) {
  // Use a separate query to determine all feedback ids per user and cache them.
  // That way we can look up feedbacks by id and benefit from the static cache
  // of the entity loader.
  $cache = &drupal_static(__FUNCTION__, array());
  $uid = is_object($account) ? $account->uid : $account;

  if (!isset($cache[$uid]) || $reset) {
    if (empty($type_name)) {
      $feedback_reloadeds = feedback_reloaded_load_multiple(FALSE, array('uid' => $uid));
      // Cache ids for further lookups.
      $cache[$uid] = array();
      foreach ($feedback_reloadeds as $fid => $feedback_reloaded) {
        $cache[$uid][] = $fid;
      }
      return $feedback_reloadeds;
    }
    $cache[$uid] = db_select('feedback_reloaded', 'fr')
      ->fields('fr', array('fid'))
      ->condition('uid', $uid)
      ->execute()
      ->fetchCol();
  }

  if (!empty($type_name)) {
    // Manually filter, as array_filter() can't take additional parameters.
    $feedback_reloaded_filtered = array();

    foreach ($cache[$uid] as $fid) {
      if ($feedback_reloaded = feedback_reloaded_load($fid)) {
        if ($feedback_reloaded->type === $type_name) {
          $feedback_reloaded_filtered[$fid] = $feedback_reloaded;
        }
      }
    }

    return $feedback_reloaded_filtered;
  }

  // Return an array containing feedbacks keyed by feedback id.
  return feedback_reloaded_load_multiple($cache[$uid]);
}

/**
 * Deletes a feedback.
 * Set it to cancelled before to trigger any relevant events.
 *
 * @param FeedbackR
 *   The feedback object.
*/
function feedback_reloaded_delete(FeedbackR $feedback_reloaded) {
  //feedback_reloaded_set_cancelled($feedback_reloaded);
  $feedback_reloaded->delete();
}

/**
 * Delete multiple feedbacks.
 *
 * @param array
 *   An array of feedback IDs.
 */
function feedback_reloaded_delete_multiple(array $fids) {
  // Bypass the traditional entity_get_controller() approach because we
  // need to cancel each feedback before its deleted.
  foreach ($fids as $fid) {
    if ($feedback_reloaded = feedback_reloaded_load($fid)) {
      feedback_reloaded_delete($feedback_reloaded);
    }
  }
}

/**
 * Create a new feedback object.
 *
 * @param $values
 *   An array of values to initialize the feedback with.
 * @return FeedbackR
 *   The newly-created feedback object.
 */
function feedback_reloaded_create(array $values) {
  return new FeedbackR($values);
}

/**
 * Saves a feedback.
 *
 * @param $feedback_reloaded
 *   The feedback object.
 * @return boolean
 *   Whether the feedback was saved successfully.
 */
function feedback_reloaded_save(FeedbackR $feedback_reloaded) {
  return $feedback_reloaded->save();
}

/**
* Load task Type.
*/
function feedback_reloaded_type_load($type) {
  return feedback_reloaded_types($type);
}

/**
* List of task Types.
*/
function feedback_reloaded_type_types($type = NULL) {
  $types = entity_load_multiple_by_name('feedback_reloaded_type', isset($type) ? array($type) : FALSE);
  return isset($type) ? reset($types) : $types;
}

/**
* Save task type entity.
*/
function feedback_reloaded_type_save($type) {
  entity_save('feedback_reloaded_type', $type);
}

/**
* Delete single case type.
*/
function feedback_reloaded_type_delete($type) {
  entity_delete('feedback_reloaded_type', entity_id('feedback_reloaded_type' ,$type));
}

/**
* Delete multiple case types.
*/
function feedback_reloaded_type_delete_multiple($type_ids) {
  entity_delete_multiple('feedback_reloaded_type', $type_ids);
}

/**
 * Feedback view callback.
 * Displays a feedback entity.
 *
 *
 * @param FeedbackR
 *   The $feedback we want to view.
 * @return string
 *   The rendered feedback entity.
 *
 * @see feedback_reloaded_menu()
 */
function feedback_reloaded_view(FeedbackR $feedback) {
  drupal_set_title(entity_label('feedback_reloaded', $feedback));
  return entity_view('feedback_reloaded', array(entity_id('feedback_reloaded', $feedback) => $feedback), 'full');
}

/**
 * Menu title callback.
 * Returns page title for feedback-related menu items.
 *
 * @param FeedbackR
 *   The $feedback we want to get a title for.
 * @return string
 *   The feedback's label.
 *
 * @see feedback_reloaded_menu()
 */
function feedback_reloaded_page_title(FeedbackR $feedback) {
  return $feedback->label();
}

/**
 * Returns an array of all feedback types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return FeedbackRType[]
 *   Depending whether $type isset, an array of feedback types or a
 *   single one.
 */
function feedback_reloaded_get_types($type_name = NULL) {
  $feedback_reloaded_types = &drupal_static(__FUNCTION__);

  if (empty($feedback_reloaded_types)) {
    $feedback_reloaded_types = entity_load_multiple_by_name('feedback_reloaded_type', isset($type_name) ? array($type_name)
          : FALSE);
  }

  if (isset($type_name)) {
    return isset($feedback_reloaded_types[$type_name]) ? $feedback_reloaded_types[$type_name] : FALSE;
  } else {
    return $feedback_reloaded_types;
  }
}
