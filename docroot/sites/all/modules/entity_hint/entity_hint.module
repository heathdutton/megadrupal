<?php

use Zend\Code\Generator\ClassGenerator;
use Zend\Code\Generator\DocBlock\Tag\GenericTag;
use Zend\Code\Generator\DocBlockGenerator;
use Zend\Code\Generator\MethodGenerator;
use Zend\Code\Generator\PropertyGenerator;

function entity_hint($entity_type, $class = 'EntityHintGenerator')
{
    return (new $class($entity_type))->generate();
}

class EntityHintGenerator
{

    /** @var string */
    private $entity_type;

    /** @var EntityMetadataWrapper */
    private $wrapper;

    /** @var array */
    private $entity_info;

    public function __construct($entity_type)
    {
        $this->entity_type = $entity_type;
        $this->wrapper = entity_metadata_wrapper($entity_type);
        $this->entity_info = $this->wrapper->entityInfo();
    }

    public function generate()
    {
        $output = [];
        foreach (array_keys($this->entity_info['bundles']) as $bundle_name) {
            $output[] = $this->getBundleHint($bundle_name);
        }

        if (NULL === $this->output_file) {
            return implode("\n\n", $output);
        }
    }

    private function getBundleHint($bundle_name)
    {
        $metadata = new ClassGenerator($this->generateClassName($this->entity_type, $bundle_name));
        $metadata->setDocBlock($this->generateDocBlock());
        $metadata->setExtendedClass('EntityDrupalWrapper');
        foreach ($this->wrapper->getPropertyInfo() as $name => $info) {
            $metadata->addPropertyFromGenerator($this->generateProperty($name, $info));
        }
        return $this->generateControllerGetters($metadata);
    }

    private function generateClassName($entity_type, $bundle_name)
    {
        $name = ucwords(str_replace('_', ' ', $entity_type . ' ' . $bundle_name)) . 'MetadataWrapper';
        return str_replace(' ', '', $name);
    }

    private function generateDocBlock()
    {
        $entity_info = $this->wrapper->entityInfo();
        $doc = new DocBlockGenerator($entity_info['description']);
        $doc->setTag(new GenericTag('fieldable', !empty($entity_info['fieldable']) ? 'yes' : 'no'));
        $doc->setTag(new GenericTag('configuration', !empty($entity_info['configuration']) ? 'yes' : 'no'));

        if (isset($entity_info['label'])) {
            $doc->setTag(new GenericTag('label', $entity_info['label']));
        }

        return $doc;
    }

    private function generateProperty($name, $info)
    {
        $doc = new DocBlockGenerator(isset($info['label']) ? $info['label'] : '', isset($info['description']) ? $info['description'] : '');
        $doc->setTag(new GenericTag(!empty($info['field']) ? 'field' : 'property'));
        if (isset($info['type'])) {
            $base_type = get_class($this->wrapper->get($name));
            $doc->setTag(new GenericTag('var', "{$base_type} {$info['type']}"));
        }

        if (!empty($info['required'])) {
            $doc->setTag(new GenericTag('required'));
        }

        $property = new PropertyGenerator($name);
        $property->setDocBlock($doc);
        return $property;
    }

    /**
     * @param ClassGenerator $metadata
     * @return string
     */
    private function generateControllerGetters(ClassGenerator $metadata)
    {
        $map['controller class'] = 'return entity_get_controller(\'' . $this->entity_type . '\');';
        foreach ($map as $key => $body) {
            $name = str_replace(' ', '', 'get' . ucwords($key));
            $doc = '@return ' . $this->entity_info[$key];
            $metadata->addMethod($name, [], MethodGenerator::FLAG_PUBLIC, $body, $doc);
        }
        return $metadata->generate();
    }

}
