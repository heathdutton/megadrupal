<?php

/**
 * @file
 * Implementation of our own geosearch_hook_info
 */

/**
 * Implements hook_trigger_info().
 */
function openlayers_geosearch_trigger_info() {
  return array(
    'geosearch' => array(
      'geosearch_geosearch' => array(
        'label' => t('When we ask to geosearch a location'),
      ),
    ),
  );
}

/**
 * Implements hook_geosearch().
 */
function openlayers_geosearch_geosearch($query) {
  $result = array();
  $handlers = geocoder_handler_info();

  $enabledhandlers = variable_get('openlayers_geosearch_geocoders', array(
      'geocode_google',
  ));
  foreach ($handlers as $handler) {
    if (isset($handler['terms_of_service'])) {
      if ($enabledhandlers[$handler['name']] != "0") {
        $result[$handler['name']] = geocoder($handler['name'], $query);
      }
    }
  }

  if (!empty($result)) {
    return $result;
  }
  else {
    return FALSE;
  }
}

/**
 * Add required js and css files.
 */
function openlayers_geosearch_load_required_files() {
  // ERROR: return statement not found in hook_load
  // TODO: Name the variable $xx_missing_xx which
  // was missing in the old function signature.
  static $loaded = FALSE;

  if (!$loaded) {
    drupal_add_library('system', 'ui.tabs');
    $path = drupal_get_path('module', 'openlayers_geosearch');
    drupal_add_css($path . '/css/openlayers_geosearch.css');

    $options = array(
      'openlayers_geosearch' => array(
        'zoomlevel' => variable_get('openlayers_geosearch_zoomlevel', 14),
        'zoomonselect' => variable_get('openlayers_geosearch_zoomonselect', TRUE),
        'hoover' => variable_get('openlayers_geosearch_hoover', TRUE),
      ),
    );
    drupal_add_js($options, 'setting');
    $loaded = TRUE;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_geosearch_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_maps':
        return array('version' => 1);

      case 'openlayers_layers':
        return array('version' => 1);

    }
  }
}

/**
 * Implements hook_openlayers_maps().
 */
function openlayers_geosearch_openlayers_maps() {
  module_load_include('inc', 'openlayers_geosearch', 'includes/openlayers_geosearch_maps');
  return _openlayers_geosearch_openlayers_maps();
}

/**
 * Implements hook_openlayers_layers().
 */
function openlayers_geosearch_openlayers_layers() {
  module_load_include('inc', 'openlayers_geosearch', 'includes/openlayers_geosearch_layers');
  return _openlayers_geosearch_openlayers_layers();
}

/**
 * Implements hook_menu().
 */
function openlayers_geosearch_menu() {
  $items = array();
  $items['admin/structure/openlayers/geosearch'] = array(
    'title' => 'Geosearch',
    'description' => 'Manage Geosearch Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'openlayers_geosearch_settings_page',
    ),
    'access arguments' => array(
      'administer openlayers',
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $items['admin/structure/openlayers/geosearch/form'] = array(
    'title' => 'Geosearch',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  $items['openlayers/geosearch/response_js'] = array(
    'page callback' => 'openlayers_geosearch_get_response_js',
    'access arguments' => array(
      'access content',
    ),
    'type' => MENU_CALLBACK,
  );

  $items['openlayers/geosearch/searchpage'] = array(
    'page callback' => 'openlayers_geosearch_searchpage',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Settings page of our own module.
 */
function openlayers_geosearch_settings_page($form, &$form_state) {
  $handlers = geocoder_handler_info();

  $form['openlayers_geosearch_map'] = array(
    '#type' => 'select',
    '#title' => t('Map'),
    '#description' => t('This is the map that will be used to render the view.'),
    '#options' => openlayers_map_options(),
    '#default_value' => variable_get('openlayers_geosearch_map', 'default'),
  );

  $form['openlayers_geosearch_test'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Test Page'),
    '#description' => t('Enables the !link.', array(
      '!link' => l(t('test page'), 'openlayers/geosearch/searchpage'),
      )
    ),
    '#default_value' => variable_get('openlayers_geosearch_test', 1),
  );

  $form['clientsettings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Client Settings'),
    '#description' => t('These settings affect how geosearch behaves on the client'),
  );

  $form['clientsettings']['openlayers_geosearch_zoomonselect'] = array(
    '#type' => 'checkbox',
    '#title' => t('Zoom on Select'),
    '#description' => t('Zoom the map when a search result is selected'),
    '#default_value' => variable_get('openlayers_geosearch_zoomonselect', TRUE),
  );

  $form['clientsettings']['openlayers_geosearch_zoomlevel'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Level'),
    '#description' => t('Zoomlevel to zoom the map to when a search result is selected or when there is only 1 result'),
    '#default_value' => variable_get('openlayers_geosearch_zoomlevel', 14),
  );
  $form['clientsettings']['openlayers_geosearch_hoover'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate on Hoover'),
    '#description' => t('Activate features on Hoover instead of click.'),
    '#default_value' => variable_get('openlayers_geosearch_hoover', FALSE),
  );

  $options = array();
  $handlers = geocoder_handler_info();

  foreach ($handlers as $handler) {
    if (isset($handler['terms_of_service'])) {
      $options[$handler['name']] = $handler['name'];
    }
  }

  $form['openlayers_geosearch_geocoders'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Geocoders'),
    '#description' => t('Enables the selected geocoder'),
    '#options' => $options,
    '#default_value' => variable_get('openlayers_geosearch_geocoders', array()),
  );

  $form['openlayers_geosearch_formatting'] = array(
    '#type' => 'radios',
    '#title' => t('Results formatting'),
    '#description' => t('How to format the results for presentation to the user'),
    '#options' => array('panels' => 'Panels', 'tabs' => 'Tabs'),
    '#default_value' => variable_get('openlayers_geosearch_formatting', 'panels'),
  );

  $form['titles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tab Titles'),
  );

  foreach ($options as $key => $value) {
    $form['titles'][$key] = array(
      '#type' => 'fieldset',
      '#title' => $value,
    );

    $form['titles'][$key]['openlayers_geosearch_' . $key . '_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Tab Title'),
      '#description' => t('Title of the tab for this geocoder'),
      '#default_value' => variable_get('openlayers_geosearch_' . $key . '_title', $value),
    );
    $form['titles'][$key]['openlayers_geosearch_' . $key . '_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Tab Description'),
      '#description' => t('Description of the tab for this geocoder'),
      '#default_value' => variable_get('openlayers_geosearch_' . $key . '_description', ''),
    );

  }

  // Make a system setting form and return.
  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function openlayers_geosearch_theme($existing, $type, $theme, $path) {
  return array(
    'openlayers_geosearch_result_tabs' => array(
      'variables' => array(
        'provider' => NULL,
        'description' => NULL,
        'locations' => NULL,
      ),
      'template' => 'openlayers-geosearch-result-tabs',
      'path' => drupal_get_path('module', 'openlayers_geosearch') . '/theme',
    ),
    'openlayers_geosearch_result_panels' => array(
      'variables' => array(
        'provider' => NULL,
        'description' => NULL,
        'locations' => NULL,
      ),
      'template' => 'openlayers-geosearch-result-panels',
      'path' => drupal_get_path('module', 'openlayers_geosearch') . '/theme',
    ),
  );
}

/**
 * Get response from all hooks and render as HTML.
 */
function openlayers_geosearch_get_response_js($form, $form_state) {
  $query = check_plain($_POST['openlayers_geosearch_query_block']);
  $result = '';
  $locations = array();

  if ($response = openlayers_geosearch_geosearch($query)) {
    // Yes, one day we will use a nice .tpl file for this.
    // Note that openlayersgeosearchresults is the div
    // that we are replacing using the.
    // FormAPI ajax settings in the search form.
    // This is done pretty rigourously, so we need to insert the
    // #id again.
    $result .= '<div id="openlayersgeosearchresults">';
    if (variable_get('openlayers_geosearch_formatting', 'panels') == 'panels') {
      $result .= '<div id="openlayersgeosearchpanels" class="ui-panels">';

      $result .= '<ul class="ui-panels-nav">';

      foreach ($response as $provider => $results) {
        $title = variable_get('openlayers_geosearch_' . $provider . '_title', '');

        $count = 0;
        if (isset($results->data['geocoder_alternatives'])) {
          $count = count($results->data['geocoder_alternatives']) + 1;
        }
        elseif (isset($results) && ($results)) {
          $count = 1;
        }
        $result .= '<li><h2 class="openlayersgeosearchpanels-title ' .
          $provider . '"><a href="#openlayersgeosearchpanels-' .
          $provider . '">' . t($title) . ' (<span class="count">' .
          $count . '</span>)</a></h2>';
        $description = variable_get('openlayers_geosearch_' .
          $provider . '_description', '');
        $result .= '<div id="openlayersgeosearchpanels-' .
          $provider . '" class="ui-panels-panel">';
        $locations = array();
        if (!empty($description)) {
          $result .= '<div class="geosearch-tab-description">' .
            t($description) . '</div>';
        }

        if (isset($results->data['geocoder_alternatives'])) {
          $locations = $results->data['geocoder_alternatives'];
          unset($results->data['geocoder_alternatives']);
        }

        array_unshift($locations, $results);
        if (!empty($locations[0])) {
          $format = variable_get('openlayers_geosearch_formatting', 'panels');
          $result .= theme('openlayers_geosearch_result_' . $format, array(
            'provider' => $provider,
            'description' => $description,
            'locations' => $locations,
          ));
          unset($locations);
        }
        else {
          $result .= "<div class='ui-panels-nav'>" . t($title) . " " .
            t("returned no results.") . "</div>";
        }
        $result .= '</div>';
        $result .= '</li>';
      }
      $result .= '</ul>';

      $result .= '</div>';
    }
    else {
      $result .= '<div id="openlayersgeosearchstabs" class="ui-tabs">';

      $result .= '<ul class="ui-tabs-nav">';

      foreach ($response as $provider => $results) {
        $title = variable_get('openlayers_geosearch_' . $provider . '_title', '');

        $count = 0;
        if (isset($results->data['geocoder_alternatives'])) {
          $count = count($results->data['geocoder_alternatives']) + 1;
        }
        elseif (isset($results) && ($results)) {
          $count = 1;
        }
        $result .= '<li><a href="#openlayersgeosearchtabs-' . $provider . '">' . t($title) . ' (' . $count . ')</a></li>';
      }
      $result .= '</ul>';
      foreach ($response as $provider => $results) {
        $description = variable_get('openlayers_geosearch_' . $provider . '_description', '');
        $result .= '<div id="openlayersgeosearchtabs-' . $provider . '" class="ui-tabs-panel">';
        $locations = array();
        if (!empty($description)) {
          $result .= '<div class="geosearch-tab-description">' . t($description) . '</div>';
        }

        if (isset($results->data['geocoder_alternatives'])) {
          $locations = $results->data['geocoder_alternatives'];
          unset($results->data['geocoder_alternatives']);
        }

        array_unshift($locations, $results);
        if (!empty($locations[0])) {
          $format = variable_get('openlayers_geosearch_formatting', 'panels');
          $result .= theme('openlayers_geosearch_result_' . $format, array(
            'provider' => $provider,
            'description' => $description,
            'locations' => $locations,
          ));
          unset($locations);
        }
        else {
          $result .= "<div class='ui-tabs-nav'>" . $provider . t("returned no results.") . "</div>";
        }
        $result .= '</div>';
      }
      $result .= '</div>';
    }
    $result .= '</div>';
  }
  else {
    $result .= '<div id="openlayersgeosearchresults">';
    $result .= t('No location found.');
    $enabled = FALSE;
    $geocoders = variable_get('openlayers_geosearch_geocoders', array());
    foreach ($geocoders as $geocoder) {
      if ($geocoder === 1) {
        $enabled = TRUE;
        exit();
      }
    }
    if (!$enabled) {
      $result .= t("No geocoders enabled. Please first configure the openlayers_geocoders module.");
    }
    $result .= "</div>";
  }

  // Return plain HTML.
  return $result;
}

/**
 * Implements hook_block_info().
 */
function openlayers_geosearch_block_info() {
  $blocks['search-form']['info'] = t('Geosearch Search Box');
  $blocks['search-results']['info'] = t('Geosearch Search Results');
  $blocks['search-form-results']['info'] = t('Geosearch Search Box and Results');
  $blocks['search-map']['info'] = t('Geosearch Search Map');
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function openlayers_geosearch_block_configure($delta) {
  switch ($delta) {
    case 'search-form':
      // For now we wont store a provider on the block but only on the
      // General page.
      break;

    case 'search-results':
      break;

    case 'search-form-results':
      break;

    case 'search-map':
      $form['openlayers_geosearch_map'] = array(
        '#type' => 'select',
        '#title' => t('Map'),
        '#description' => t('This is map that will be used to render the view.'),
        '#options' => openlayers_map_options(),
        '#default_value' => variable_get('openlayers_geosearch_searcmap', 'default'),
      );
      return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function openlayers_geosearch_block_save($delta, $edit) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  switch ($delta) {
    case 'search-form':
      break;

    case 'search-results':
      break;

    case 'search-form-results':
      break;

    case 'search-map':
      variable_set('openlayers_geosearch_map', $edit['openlayers_geosearch_map']);
      break;

  }
}

/**
 * Implements hook_block_view().
 */
function openlayers_geosearch_block_view($delta) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  $block = array();
  switch ($delta) {
    case 'search-form':
      $block['subject'] = t('Search Form');
      $block['content'] = drupal_get_form('openlayers_geosearch_searchform');
      break;

    case 'search-results':
      $block['subject'] = t('Search Results');
      $block['content'] = '<div id="openlayersgeosearchresults"></div>';
      break;

    case 'search-form-results':
      $form = drupal_get_form('openlayers_geosearch_searchform');
      $block['subject'] = t('Search Form Results');
      $block['content'] = render($form) . '<div id="openlayersgeosearchresults"></div>';
      break;

    case 'search-map':
      $map = openlayers_map_load(variable_get('openlayers_geosearch_map', 'default'));
      $map->data['id'] = 'openlayers_geosearch_map_id';
      $rendered = openlayers_render_map($map->data, variable_get('openlayers_geosearch_map', 'default'));
      $block['subject'] = t('Search Map');
      $block['content'] = $rendered;
  }
  return $block;
}

/**
 * Please document this function.
 */
function openlayers_geosearch_searchform($form) {
  // Load required js and css.
  openlayers_geosearch_load_required_files();
  drupal_add_js(drupal_get_path('module', 'openlayers_geosearch') . '/js/openlayers_geosearch.js');
  $form['openlayers_geosearch_query_block'] = array(
    '#title' => t('Search address'),
    '#type' => 'textfield',
    '#weight' => -10,
  );
  $form['openlayers_geosearch_button'] = array(
    '#type' => 'button',
    '#value' => t('Search'),
    '#name' => 'search',
    '#ajax' => array(
      'event' => 'click',
      'callback' => 'openlayers_geosearch_get_response_js',
      'wrapper' => 'openlayersgeosearchresults',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Searching...'),
      ),
    ),
    '#weight' => 0,
  );
  // Add a checkbox to allow searching by bounds.
  $form['openlayers_geosearch_search_by_boundingbox'] = array(
    '#title' => t('Search within visible map'),
    '#type' => 'checkbox',
    '#options' => array(
      '0' => t('No'),
      '1' => t('Yes'),
    ),
    '#weight' => 10,

  );
  return $form;
}

/**
 * Please document this function.
 */
function openlayers_geosearch_searchpage() {
  if (variable_get('openlayers_geosearch_test', TRUE)) {
    // Load required js and css.
    openlayers_geosearch_load_required_files();

    $mapblock = module_invoke('openlayers_geosearch', 'block_view', 'search-map');
    $searchblock = module_invoke('openlayers_geosearch', 'block_view', 'search-form');
    $searchblock['content'] = drupal_render($searchblock);
    $resultblock = module_invoke('openlayers_geosearch', 'block_view', 'search-results');
    $output = $mapblock['content'] . $searchblock['content'] . $resultblock['content'];
    return $output;
  }
  else {
    drupal_access_denied();
  }
}
