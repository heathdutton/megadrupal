<?php

/**
 * @file
 * Hooks and functions for the OneLogin module.
 */


/**
 * Implements hook_help().
 */
function onelogin_help($path, $arg) {
  switch ($path) {
    case "admin/help#onelogin_saml":
      return '<p>'.  t('Allow Drupal user authentication via OneLogin SAML.') .'</p>';
      break;
  }
}

/**
 * Implements hook_menu()
 */
function onelogin_menu() {
  // Admin configruation form.
  $items['admin/config/people/onelogin'] = array(
    'title' => 'OneLogin',
    'description' => 'Configure OneLogin SAML certs and settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onelogin_settings_form'),
    'file' => 'includes/onelogin.admin.inc',
    'access arguments' => array('administer onelogin'),
    'type' => MENU_NORMAL_ITEM,
  );

  // SAML consumer callback.
  $items['onelogin_saml/consumer'] = array(
    'title' => 'SAML Consumer',
    'page callback' => 'onelogin_consume',
    'file' => 'includes/onelogin.consume.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function onelogin_permission() {
  return array(
    'administer onelogin' => array(
      'title' => t('Administer OneLogin'),
      'description' => t('Make configuration changes to the OneLogin module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_init().
 */
function onelogin_init() {
  $isMaintenanceMode = variable_get('maintenance_mode', FALSE);
  $authRequiredGlobally = variable_get('onelogin_required_globally', FALSE);
  $isSamlConsumer = request_path() === 'onelogin_saml/consumer';
  $contextEnabled = module_exists('context');

  // If OneLogin authentication is required globally, attempt it.
  if ($authRequiredGlobally && !$isSamlConsumer && !$isMaintenanceMode) {
    onelogin_require_authentication();
  }

  // If context is enabled, check to see if our require auth reaction is needed.
  if ($contextEnabled) {
    if ($plugin = context_get_plugin('reaction', 'context_reaction_require_onelogin_auth')) {
      $plugin->execute();
    }
  }
}

/**
 * Implements hook_context_registry().
 */
function onelogin_context_registry() {
  return array(
    'reactions' => array(
      'context_reaction_require_onelogin_auth' => array(
        'title' => t('Require authentication via OneLogin'),
        'plugin' => 'context_reaction_require_onelogin_auth',
      ),
    ),
  );
}

/**
 * Implements hook_context_plugins().
 */
function onelogin_context_plugins() {
  $plugins['context_reaction_require_onelogin_auth'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'onelogin') .'/plugins',
      'file' => 'context_reaction_require_onelogin_auth.inc',
      'class' => 'context_reaction_require_onelogin_auth',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_libraries_info().
 */
function onelogin_libraries_info() {
  $libraries['onelogin'] = array(
    'name' => 'OneLogin SAML PHP',
    'vendor url' => 'https://www.onelogin.com',
    'download url' => 'https://github.com/onelogin/php-saml/releases',
    'version' => '1.0.0',
    'version callback' => 'onelogin_libraries_version',
    'files' => array(
      'php' => array(
        'src/OneLogin/Saml/AuthRequest.php',
        'src/OneLogin/Saml/Metadata.php',
        'src/OneLogin/Saml/Response.php',
        'src/OneLogin/Saml/Settings.php',
        'src/OneLogin/Saml/XmlSec.php',
        'ext/xmlseclibs/xmlseclibs.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Helper function to return OneLogin PHP SAML library version. Necessary
 * because there's no way to determine it from the library itself.
 *
 * @see onelogin_libraries_info()
 */
function onelogin_libraries_get_version($library, $options) {
  return $library['version'];
}

/**
 * Helper function to require OneLogin authentication. If the user is not
 * authenticated and OneLogin is configured as expected, this will redirect the
 * user to the app's login URL.
 */
function onelogin_require_authentication() {
  $loginUrl = variable_get('onelogin_login_url', '');

  if (user_is_anonymous() && $loginUrl) {
    drupal_goto($loginUrl, array(
      'query' => array(
        // @see onelogin_get_settings()
        'originalRefererPath' => request_path(),
      ),
    ));
  }
}
