<?php
/**
 * @file
 * Community Media Project Module
 */


/**
 * Implements hook_help().
 */
function cm_project_help($section) {
  switch ($section) {
    case 'admin/help#cm_project':
      return t('Core project functionality.');
      break;
  }
}

/**
 * Implements hook_init().
 */
function cm_project_init() {
  //drupal_add_css(drupal_get_path('module', 'cm_project') . '/cm_project.css');
  //drupal_add_js(drupal_get_path('module', 'cm_project') .'/cm_project.js');
}

/**
 * Implements hook_node_info().
 */
function cm_project_node_info() {
  return array(
    // Project nodes.
    'cm_project' => array(
      'name' => t('Project'),
      'base' => 'cm_project',
      'description' => t('<b>Community Media</b> - This content type is used to group Shows and Reservations to related a series or project.  Users who are members of the Project have permission to add Shows and make Reservations associated to the Project.'),
      'has_title' => TRUE,
      'title_label' => 'Title',
      'has_body' => TRUE,
    ),
  );
}

/**
 * Implement hook_form() with the standard default form.
 */
function cm_project_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implementation of hook_menu().
 */
function cm_project_menu() {
  $items = array();

  // Adds Community Media Section to Admin Interface
  // Duplicated in cm_checklist.  Project only manages this menu if
  // checklist is disabled
  if (!module_exists('cm_checklist')) {
    $items['admin/config/communitymedia'] = array(
      'title' => 'Community Media',
      'description' => 'Configuration options for Community Media modules',
      'position' => 'right',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'weight' => -99,
    );
  }

  $items['admin/config/communitymedia/project'] = array(
    'title' => 'Project Configuration',
    'description' => 'Configuration options for the Community Media Project.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_project_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  if (module_exists('cm_show')) {
    $items['node/%node/shows'] = array(
      'title' => 'Shows',
      'description' => 'Takes node object and returns shows',
      'page callback' => 'cm_project_shows',
      'page arguments' => array(1),
      'access callback' => 'cm_project_display_show_tab',
      'access arguments' => array(1),  
      'type' => MENU_LOCAL_TASK,
      'weight' => 12,
    );
  }
  if (module_exists('reservations')) {
    $items['node/%node/reservations'] = array(
      'title' => 'Reservations',
      'description' => 'Takes node object and returns reservations',
      'page callback' => 'cm_project_reservations',
      'page arguments' => array(1),
      'access callback' => 'cm_project_display_reservations_tab',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 13,
    );
  }
  
  $items['project/add/show'] = array(
    'title' => 'Add Show',
    'description' => 'Takes node object and returns shows',
    'page callback' => 'cm_project_add_show',
    'access callback' => 'cm_project_add_show_access',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 12,
  );
    
  return $items;

}

function cm_project_add_show() {

  //load active projects the user is a member of
  $groups = og_get_entity_groups();
  //add the most recently added active project to the path
  drupal_goto('node/add/cm-show', array('query'=>array('gid'=> end($groups))));
  
}

function cm_project_add_show_access() {
  return TRUE;
}



/**
 * Builds the cm_project admininstration settings form.
 */
function cm_project_admin_settings($form, &$form_state) {
  $form = array();
  
  $requirements = array();
   
  $cm_project_status = cm_project_status();
  $requirements['cm_project']['title'] = 'Project';
  $requirements['cm_project']['value'] = 'Installed';
  $requirements['cm_project']['severity'] = $cm_project_status['severity']; 
  $requirements['cm_project']['description'] = $cm_project_status['description'];
    
  $status = theme('status_report', array('requirements' => $requirements));

  $form['cm_project_status'] = array(
    '#markup' => $status,
  );
  
  /*

  $form['cm_project_alphabetize_projects'] = array(
    '#type' => 'checkbox',
    '#title' => t('Alphabetize '),
    '#default_value' => variable_get('cm_project_alphabetize_projects', 0),
    '#description' => t('This option will be removed when this is fixed in Organic Groups.'),
  );
  
  */

  if (module_exists('reservations')) {
    $form['cm_project_reservations_require_project'] = array(
      '#type' => 'checkbox',
      '#title' => t('Reservations Require Project'),
      '#default_value' => variable_get('cm_project_reservations_require_project', 0),
      '#description' => t('This option will eventually be deprecated, but Organic Groups fails to correctly interpret the Required setting on the groups_groups field.'),
    );
  }
  
  if (module_exists('cm_show')) {
    $form['cm_project_shows_require_project'] = array(
      '#type' => 'checkbox',
      '#title' => t('Shows Require Project'),
      '#default_value' => variable_get('cm_project_shows_require_project', 0),
      '#description' => t('This option will eventually be deprecated, but Organic Groups fails to correctly interpret the Required setting on the groups_groups field.'),
    );
  
    $form['cm_project_autopopulate_show_fields'] = array(
      '#type' => 'checkbox',
      '#title' => t('Auto Populate Show Fields'),
      '#default_value' => variable_get('cm_project_autopopulate_show_fields', 0),
      '#description' => t('This option only works when Add Show is selected from the Show tab or the user only has one Project.  Field are not auto-populated if the user is a member of multiple projects and chooses the Project from a select list.'),
    );
  }
  
  return system_settings_form($form);
}

/**
 * returns TRUE or FALSE controlling display of Shows Tab  
 * on Project content type
 */
function cm_project_display_show_tab($node) {
 
  if($node->type == 'cm_project') {
  //checking path allows permission to be applied to View
  //dsm(drupal_valid_path('node/' . $node->nid . '/shows'));
  //if (module_exists('cm_show') && drupal_valid_path('node/' . $node->nid . '/shows')) {
    return TRUE;
  }
  
  return FALSE;
}


/**
 * Adds Tab to Project nodes with list of related Shows nodes
 * if criteria from cm_project_access_shows_tab returns TRUE
 */
function cm_project_shows($node) {
  
  //only works while group is active
  //$group = og_get_group('node', $node->nid);
  $gid = $node->group_group[LANGUAGE_NONE][0]['value'];
  
  //For some reason you this function can only return active or pending... not both
  //http://drupalcontrib.org/api/drupal/contributions--og--og.module/function/og_get_group_ids/7
  //if (!isset($group->gid)) {
  //  $group = og_get_group('node', $node->nid, FALSE, array(OG_STATE_PENDING));
  //}

  $query = isset($gid) ? array('gid' => $gid) : NULL;
  // check to see if the current user is a member of the project
  // AND has permission to create Show
  // OR has permission to manage Show
  
  $output = '<ul class="action-links">';
    $output .= '<li>'; 
    $output .= l('Add Show', 'node/add/cm-show', array('query' => $query));
    $output .= '</li>';
  $output .= '</ul>';
  
  $view = views_get_view('cm_project_shows');
  $output .= $view->execute_display('default');

  return $output;
}

/**
 * returns TRUE or FALSE controlling display of Reservations Tab  
 * on Project content type
 */
function cm_project_display_reservations_tab($node) {
  if($node->type == 'cm_project') {
  //checking path allows permission to be applied to View
  //if (module_exists('reservations_ui') && drupal_valid_path('node/' . $node->nid . '/reservations')) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Adds Tab to Project nodes with list of related Reservation nodes 
 * if criteria from cm_project_display_reservations_tab returns TRUE
 */
function cm_project_reservations($node) {

  //$group = og_get_group('node', $node->nid);
  $gid = $node->group_group[LANGUAGE_NONE][0]['value'];
  // check to see if the current user is a member of the project
  // AND has permission to create Reservations
  // OR has permission to manage Reservations
  
  $output = '<ul class="action-links">';
    $output .= '<li>';
    $output .= l('Add Reservation', 'node/add/reservations-reservation', array('query' => array('gid' => $gid)));
    $output .= '</li>';
  $output .= '</ul>';
  
  $view = views_get_view('cm_project_reservations');
  $output .= $view->execute_display('default');

  return $output;
}

/**
 * Implementation of hook_views_api().
 */
function cm_project_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'cm_project'),
  );
}

/**
 * Implements hook_form_alter().
 */
function cm_project_form_alter(&$form, &$form_state, $form_id) {
     
  // these are needed because of a bug in OG that ignores required field
  // http://drupal.org/node/1342496
  if ($form_id == 'cm_show_node_form') {
          
    if (isset($form['group_audience']) && !$form['group_audience'][LANGUAGE_NONE]['#input']) {
      unset($form['actions']['submit']);
      unset($form['actions']['preview']);
      drupal_set_message('You cannot submit a Show until you have an approved Project.', 'error');
    } 
    
    if (variable_get('cm_project_alphabetize_projects', 0)) {
      //krsort($form['group_audience'][LANGUAGE_NONE]['#options']['Other groups']);
      
      $array = $form['group_audience'][LANGUAGE_NONE]['#options']['Other groups'];
      asort($array);
      #options['Other groups'];
    }
    // http://stackoverflow.com/questions/6670041/sort-options-in-a-select-list-with-javascript-jquery-but-not-alphabetically
    
    

    if (isset($_REQUEST['gid'])) {
      
            
      $form['group_audience'][LANGUAGE_NONE]['#default_value'] = $_REQUEST['gid'];
      
      if (variable_get('cm_project_autopopulate_show_fields', 0)) {
        
        //dsm($form);
        $og = og_load($_REQUEST['gid']);
        $node = node_load($og->etid);
        
        
        //check to see if there are any fields shared between cm_show and cm_project
        $result = db_query("SELECT field_name, entity_type FROM {field_config_instance} WHERE bundle = :bundle", array(':bundle' => 'cm_project'));
  
        $project_fields = $result->fetchAll();
        
        foreach ($project_fields as $field) {
           //check to see if the field matches
           $result = db_query("SELECT field_name, entity_type FROM {field_config_instance} WHERE bundle = 'cm_show' AND field_name = :field_name", array(':field_name' => $field->field_name));
           $show_field_match = $result->fetchAll();
           if ($show_field_match) {
                        
             $match = $show_field_match[0]->field_name;
             $default_value = $node->$match;
               
             $language = $form[$match]['#language'];
             //@TODO: what's the right way to do this? see..
             //http://pixeljets.com/blog/writing-robust-code-uses-fields-drupal-7
             //$language = field_language('node', $node, $show_field_match);
             
             //only sets the first value for field types that support multiple entries
             if (isset($form[$match][$language][0])) {
              
               if($form[$match][$language][0]['value']['#type'] == 'textarea') {
                 $form[$match][$language][0]['value']['#default_value'] = $default_value[$language][0]['value'];
               }
               
               if($form[$match][$language][0]['value']['#type'] == 'text') {
                 $form[$match][$language][0]['value']['#default_value'] = $default_value[$language][0]['value'];
               }
             
             } else {
             
               
               if ($form[$match][$language]['#type'] == 'select' || $form[$match][$language]['#type'] == 'checkbox') {
                 $value_key = $form[$match][$language]['#value_key'];
                 $form[$match][$language]['#default_value']  = $default_value[$language][0][$value_key];
               }
    
             }
             //dsm($form);
                           

           };
        }   
      }
    }   
  }
  
  if (isset($form['group_audience']) && $form_id == 'reservations_reservation_node_form') {
    if (!isset($form['group_audience'][LANGUAGE_NONE]['#input'])) {
      unset($form['actions']['submit']);
      unset($form['actions']['preview']);
      drupal_set_message('You cannot make a Reservation until you have an approved Project.', 'error');
    }
    
    if (isset($_REQUEST['gid'])) {
      $form['group_audience'][LANGUAGE_NONE]['#default_value'] = $_REQUEST['gid'];
    }    
  } 
   
}

/**
 * returns status for cm_checklist
 */
function cm_project_status() {
  //check OG status
  if (!module_exists('og') && !module_exists('og_ui')) {
    $status = array(
    'description' => 'You should enable <a href="http://drupal.org/project/og">Organic Groups</a> and configure Project as a Group Content Type as well as Reservations and Shows as Content Types that can be associated to a Group.  See <a href="http://drupal.org/node/1114890">Organic Group documentation for step by step instructions</a>.',
    'severity' => 2,); 
    return $status;  
  }
  
  //check to see if cm_project is og enabled
  if (module_exists('og') && module_exists('og_ui')) {
    $is_group = og_is_group_type('node', 'cm_project');
    if (!$is_group) {
      $status = array(
      'description' => 'Organic Groups and Organic Groups UI are enabled.  Now configure Project as a Group Content Type as well as Reservations and Shows as Content Types that can be associated to a Group.  See <a href="http://drupal.org/node/1114890">Organic Group documentation for step by step instructions</a>.',
      'severity' => 2,); 
      return $status;
    } 
   
    $instance_data = field_info_instance('node', 'group_group', 'cm_project');  
    if ($instance_data['label'] == 'Group') {
      //Has not been customized
      $status = array(
      'description' => 'Project is a Group Content Type, but the checkbox enabling the group functionality is using the default "Group" label.  Most stations customized this to be labeled "Active" or "Staff Approved" and set the default to be unchecked.  These settings are changed by ' . l('Managing the Fields of the Project Content Type', 'admin/structure/types/manage/cm-project/fields/group_group'),
      'severity' => 2,); 
      return $status;
    }
    
    //check to see if any custom fields have been added
    //SELECT * FROM `field_config_instance` WHERE `bundle` LIKE 'cm_project'
    
    
  }
  
  // if there were no other steps...
  $status = array(
      'description' => 'Projects is configured correctly.',
      'severity' => 0,);
  return $status;
}


/**
 * Implements hook_field_widget_form_alter().
 */
function cm_project_field_widget_form_alter(&$element, &$form_state, $context) {
  
  //RESERVATIONS
  if (module_exists('reservations_staff')) {
	if ($context['instance']['bundle'] == 'reservations_reservation' && $context['instance']['field_name'] == 'group_audience') {

	  if (!user_access('manage reservations')) {
		return;
	  }
            
      //@TODO: MOVE TO REUSABLE FUNCTION
      $form = $context['form'];
	  $field = $context['field'];
	  $instance = $context['instance'];
	  $langcode = $context['langcode'];
	  $items = $context['items'];
	  $delta = $context['delta'];
	  
	  if (isset($form_state['values'])) {
		$node = (array)$form_state['values'] + (array)$form['#node'];
	  } else {
		$node = $form['#node'];
	  }
	  $node = (object) $node;
	  drupal_static_reset('og_field_audience_options');
	  unset($element['#input']);
	  unset($element['#type']); 
	  unset($element['#options']); 
	  unset($element['#default_value']);
	  unset($element['#attributes']);
	  unset($element['#disabled']);
	  // Re-use options widget element validation, to correctly transform
	  // submitted values from field => delta to delta => field.
	  // @see options_field_widget().
	  unset($element['#value_key']);
	  unset($element['#element_validate']);
	  unset($element['#properties']);
	  // Add OG specific context.
	  unset($element['#opt_group']);
	  unset($element['#audience']);
	  unset($element['#hidden_selected_gids']);
  
	  $base = $element;
	  // Recreate the groups and choices based on the submitted name.
	  cm_project_load_user((array) $node);
	  global $user;
  
	  $return = og_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $base);
	  cm_project_load_user();
	  $element = $return;
	}
  }
  
  //SHOW
  
  if (module_exists('cm_show_staff')) {
	if ($context['instance']['bundle'] == 'cm_show' && $context['instance']['field_name'] == 'group_audience') {
      
      //Show: Edit any content
	  if (!user_access('edit any cm_show content')) {
		return;
	  }
      
      //@TODO: MOVE TO REUSABLE FUNCTION
      $form = $context['form'];
	  $field = $context['field'];
	  $instance = $context['instance'];
	  $langcode = $context['langcode'];
	  $items = $context['items'];
	  $delta = $context['delta'];
	  
	  if (isset($form_state['values'])) {
		$node = (array)$form_state['values'] + (array)$form['#node'];
	  } else {
		$node = $form['#node'];
	  }
	  $node = (object) $node;
	  
	  drupal_static_reset('og_field_audience_options');
	  unset($element['#input']);
	  unset($element['#type']); 
	  unset($element['#options']); 
	  unset($element['#default_value']);
	  unset($element['#attributes']);
	  unset($element['#disabled']);
	  // Re-use options widget element validation, to correctly transform
	  // submitted values from field => delta to delta => field.
	  // @see options_field_widget().
	  unset($element['#value_key']);
	  unset($element['#element_validate']);
	  unset($element['#properties']);
	  // Add OG specific context.
	  unset($element['#opt_group']);
	  unset($element['#audience']);
	  unset($element['#hidden_selected_gids']);
  
	  $base = $element;
	  // Recreate the groups and choices based on the submitted name.
	  cm_project_load_user((array) $node);
	  global $user;
  
	  $return = og_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $base);
	  cm_project_load_user();
	  $element = $return;
	}
  }

}

/**
 * Implements hook_load_user().
 */
function cm_project_load_user($post = NULL) {
  static $admin_user;
  global $user;
  if (empty($admin_user)) {
    $admin_user = $user;
  }
  if ($post and isset($post['override']) and !$post['override'] and ($newuser = array_shift(user_load_multiple(array(), array('name' => $post['name']))))) {
    $user = $newuser;
  }
  else {
    $user = $admin_user;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cm_project_form_reservations_reservation_node_form_alter(&$form, &$form_state) {
 
  if (user_access('manage reservations') && module_exists('reservations_staff')) {

    if (module_exists('civicrm_user_reference')) {
      $form['name']['#autocomplete_path'] = 'civicrm_user_reference/autocomplete-nouid';
    }
    
    $form['name']['#ajax'] = array(
      'callback' => 'cm_project_update_name',
      'wrapper' => 'reservations-staff-edit-form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );
    
    $form['override']['#ajax'] = array(
      'callback' => 'cm_project_update_name',
      'wrapper' => 'reservations-staff-edit-form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );
    
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cm_project_form_cm_show_node_form_alter(&$form, &$form_state) {
 
  if (user_access('edit any cm_show content') && module_exists('cm_show_staff')) {
   
   
    if (module_exists('civicrm_user_reference')) {
      $form['name']['#autocomplete_path'] = 'civicrm_user_reference/autocomplete-nouid';
    }
    
    $form['name']['#ajax'] = array(
      'callback' => 'cm_project_update_name',
      'wrapper' => 'cm-show-staff-edit-form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );
        
  }
}

/**
 * Menu callback that reprocesses the form with the new author
 */
function cm_project_update_name($form, $form_state) {
  return $form;
}
