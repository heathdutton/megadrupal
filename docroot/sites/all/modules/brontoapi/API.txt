OVERVIEW
--------------------------
The Bronto API module works by sending emails via Bronto API rather than by the
default Drupal mail system.

In the case of the stock Drupal email templates, Bronto API provides a selection
field that allows a user to pick out of a list of available Bronto
Message types. If a default template value has a Bronto API message type value,
then the email generated by drupal_mail() is not sent, and instead everything
is passed to Bronto API.

User profile tie-in and Bronto lists are also supported in additional modules.

Also included are Rules and Abandon Cart (Commerce Notify) integrations.
Developers are also able to generate their own functionality using
brontoapi_mail_message() and the hooks provided with the Bronto API module.


ADMIN SETTINGS
--------------------------
Upon installing the Bronto API module and giving yourself 
'administer bronto' permissions, go to /admin/config/brontoapi/settings.

Enter your Bronto token, your default sender email address, default sender name
and default message folder.

If desired, enable "test mode" and choose a list to which all messages will be
sent when test mode is enabled. While test mode is enabled,
the list(s) passed to the brontoapi_mail_message() functions will be ignored and
all messages will be sent only to the test list.


MESSAGES
--------------------------
Your module will use your existing Bronto API messages. It will pull these
directly from Bronto API.

You will be able to use these out of the box with the stock Drupal email
templates, and with additional modules this functionality can be enabled
elsewhere.


HOOKS
--------------------------
Bronto API has several hooks to enable modular changes as well as exposing
different functionality to the Bronto API module.

One of the hooks is hook_brontoapi_drupal_template_info. This is where you can
register various mail settings to work with Bronto API.

Each key in brontoapi_drupal_template_info() has an array value with several
keys. They are as follows:

Container is the container element on the form that the element is contained in.

Id is the module & key combination passed to drupal_mail().

Machine_name is to ensure a unique key for saving to variables table.

Label is the human-readable name.

Elements are the actual form elements (inside the containers) that are modified.

Element_create is a callback that creates an element - to be used with
non-unique forms (such as commerce_notification).

Callback is a callback that replaces standard processing for Bronto API. Do not
use unless you want complete control over the data.


FUNCTIONS
--------------------------
Add one or more email addresses to one or more lists:
  
  brontoapi_add_email(array('user@example.com', 'another@example.com'), array('test_field1', 'test_field2'));
    The first argument is either an email address (as a string), or an array of 
    email addresses.
    The second argument is a field name (string) or array of field names.
    Each address will be be created as a contact if it does not exist.
  
Send email (with inline content):
  
  brontoapi_mail_message("user@example.com", message_id, replacements, array());
    The first argument is an array or string of email addresses.
    The second argument is the message id.
    The third argument is all of the data for the replacement fields
    The fourth argument is extra parameters such as reply_name.

Read fields:

  brontoapi_read_fields();
    Reads all of the fields that are created in Bronto.

Look-up contact id from email:

  brontoapi_get_contact_id("user@example.com);
    Returns a contact id for a given email address, if it exists in Bronto.

Get all message folders:

  brontoapi_get_all_message_folders();
    Returns a list of message folders - either cached or via SOAP.

Execute SOAP commands
  brontoapi_exec();
    This function manages all of the API calls to Bronto via SOAP. The returned
    output is dependent on any given API call as defined in the Bronto API docs.
    
    
Check for errors:

  $err = brontoapi_error();
    Takes no arguments. Returns a string containing the last error message
    generated, or FALSE if no error message has been set.
    It is recommended to call this function and check its return value, after
    using any of the above API functions, to test for success.
