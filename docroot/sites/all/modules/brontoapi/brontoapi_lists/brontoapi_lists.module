<?php

/**
 * @file
 * Handles Bronto API lists & list creation.
 */

/**
 * Implements hook_menu().
 */
function brontoapi_lists_menu() {
  $items = array();

  $items['admin/config/brontoapi/settings/lists'] = array(
    'title' => 'Bronto API Lists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('brontoapi_lists_page'),
    'access arguments' => array('administer bronto'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Adds contact to list.
 */
function brontoapi_lists_add_to_lists($email, $lists) {
  $contact = brontoapi_get_or_create_contact_obj($email, TRUE);

  // Make sure lists and listIds are arrays.
  if (!isset($contact->listIds)) {
    $contact->listIds = array();
  }
  elseif (!is_array($contact->listIds)) {
    $contact->listIds = array($contact->listIds);
  }
  if (!isset($lists)) {
    watchdog("No lists given", "No lists were passed to brontoapi_lists_add_to_lists. This is probably in error.");
    return FALSE;
  }
  elseif (!is_array($lists)) {
    $lists = array($lists);
  }

  // Add lists to contact if they aren't there already.
  foreach ($lists as $list) {
    if (!in_array($list, $contact->listIds)) {
      $contact->listIds[] = $list;
    }
  }

  $res = brontoapi_exec('updateContacts', array($contact));

  return $res;
}

/**
 * Removes contact from list.
 */
function brontoapi_lists_remove_from_lists($email, $lists) {
  $contact = brontoapi_get_contact_obj($email, TRUE);
  if (!$contact) {
    watchdog("No such contact", "An attempt was made to remove $email from lists. No such contact exists. This is probably in error.");
    return FALSE;
  }

  // Make sure lists and listIds are arrays.
  if (!isset($contact->listIds)) {
    $contact->listIds = array();
  }
  elseif (!is_array($contact->listIds)) {
    $contact->listIds = array($contact->listIds);
  }
  if (!isset($lists)) {
    watchdog("No lists given", "No lists were passed to brontoapi_lists_remove_from_lists. This is probably in error.");
    return FALSE;
  }
  elseif (!is_array($lists)) {
    $lists = array($lists);
  }

  // Reconstruct listIds.
  $new_lists = array();
  foreach ($contact->listIds as $list) {
    if (!in_array($list, $lists)) {
      array_push($new_lists, $list);
    }
  }

  // Set listIds to FALSE if we've removed them all.
  // (this is necessary for some reason).
  if (count($new_lists) == 0) {
    $contact->listIds = FALSE;
  }
  else {
    $contact->listIds = $new_lists;
  }
  return brontoapi_exec('updateContacts', array($contact));
}

/**
 * Reads Bronto API lists.
 */
function brontoapi_lists_read_lists($email = NULL) {
  if ($email != NULL) {
    $filter = array(
      'email' => array(
        array(
          'value' => $email,
          'operator' => 'EqualTo',
        ),
      ),
    );
  }
  else {
    $filter = array();
  }
  $ret = brontoapi_exec_all(
    "readLists", array(
      "filter" => $filter,
    )
  );
  return $ret;
}

/**
 * Creates page of Bronto API lists.
 */
function brontoapi_lists_page() {
  $form = array();
  $count = 1;
  foreach (brontoapi_lists_read_lists() as $list) {
    $list_id = variable_get($list->id);
    if (isset($list_id)) {
      $count = variable_get($list->id);
    }
    else {
      variable_set($list->id, $count);
    }
    $form["brontoapi_list_" . $list->id . "_fieldset"] = array(
      '#type' => 'fieldset',
      '#title' => $list->label,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form["brontoapi_list_" . $list->id . "_fieldset"]["list_id"] = array(
      '#markup' => t("List ID") . ": " . $list->id,
    );
    $block = variable_get("block_" . $list->id);
    $form["brontoapi_list_" . $list->id . "_fieldset"]["block_" . $list->id] = array(
      '#type' => 'checkboxes',
      '#title' => t('Enable list blocks'),
      '#options' => brontoapi_lists_block_options($list),
      '#default_value' => isset($block) ? $block : 0,
      "#prefix" => "<p>When all selected blocks are saved, a new checkbox is created. An unlimited number of blocks can be created per list.</p><p>Disabling a block deletes it upon save.</p>",
      "#suffix" => "<p>Webform components and rules are limited to one per list.</p>",
    );
    if (module_exists("rules")) {
      $rules = variable_get("rules_" . $list->id);
      $form["brontoapi_list_" . $list->id . "_fieldset"]["rules_" . $list->id] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable rules integration for this list.'),
        '#default_value' => isset($rules) ? $rules : 0,
      );
    }
    if (module_exists("webform")) {
      $webform = variable_get("webform_" . $list->id);
      $form["brontoapi_list_" . $list->id . "_fieldset"]["webform_" . $list->id] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable webform component for this list.'),
        '#default_value' => isset($webform) ? $webform : 0,
      );
    }
    $count++;
  }
  return system_settings_form($form);
}

/**
 * Function to generate options for block checkboxes.
 */
function brontoapi_lists_block_options($list) {
  $block_list_id = variable_get("block_" . $list->id);
  if (isset($block_list_id) && !empty($block_list_id)) {
    $checkboxes = variable_get("block_" . $list->id);
    // Adjusts for empty checkboxes.
    $adjust = 0;
    foreach ($checkboxes as $val => $checkbox) {
      if (!empty($checkbox)) {
        $checkboxes[$val - $adjust] = "Block " . ($val - $adjust);
      }
      else {
        unset($checkboxes[$val]);
        $adjust++;
      }
    }
    $checkboxes[$val + 1 - $adjust] = "Block " . ($val + 1 - $adjust);
  }
  else {
    $checkboxes = array(1 => "Block 1");
  }
  return $checkboxes;
}

/**
 * Implements hook_block_info().
 */
function brontoapi_lists_block_info() {
  $blocks = array();
  foreach (brontoapi_lists_read_lists() as $list) {
    $block_list_ids = variable_get("block_" . $list->id, array());
    foreach ($block_list_ids as $block_list_id) {
      if (!($block_list_id === 0)) {
        variable_set("bl_" . $list_id . "_" . $block_list_id, $list->id);
        $blocks["bl_" . $list_id . "_" . $block_list_id] = array(
          'info' => "Bronto API List " . $list->id . " Block " . $block_list_id,
        );
      }
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_views().
 */
function brontoapi_lists_block_view($delta = '') {
  $block = array();

  $block['subject'] = t("Sign-up for mailing list");
  $block['content'] = drupal_get_form('brontoapi_lists_sign_up_form', $delta, 'block');

  return $block;
}

/**
 * Creates the sign-up form.
 */
function brontoapi_lists_sign_up_form($form, &$form_state, $name, $type = '', $required = NULL) {
  $form = array();
  $form['brontoapi_list_sign_up_' . $name] = array(
    "#type" => "radios",
    "#options" => array(0 => t("Opt-out"), 1 => t("Opt-in")),
    "#required" => isset($required) ? TRUE : FALSE,
  );
  if ($type == "block") {
    $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
    $form['#submit'] = array('brontoapi_lists_block_submit');
  }
  return $form;
}

/**
 * Sign-up or remove from list depending on submitted block value.
 */
function brontoapi_lists_block_submit($form, $form_state) {
  $var_list = $form_state['build_info']['args'][0];
  $list = variable_get($var_list);
  $value = $form_state['input']['brontoapi_list_sign_up_' . $var_list];
  if ($value == 1) {
    brontoapi_lists_signup($list);
  }
  elseif ($value == 0) {
    brontoapi_lists_remove($list);
  }
}

/**
 * Implements hook_rules_action_info().
 */
function brontoapi_lists_rules_action_info() {
  // Checks if there are any lists.
  $lists = brontoapi_lists_read_lists();
  if (!empty($lists)) {
    return array(
      'brontoapi_lists_rules_signup' => array(
        'label' => t('Bronto API List Sign-up'),
        'group' => t('Bronto'),
        'parameter' => array(
          'list' => array(
            'type' => 'text',
            'label' => t('Bronto List'),
            'description' => t('Select Bronto API list.'),
            'options list' => 'brontoapi_lists_lists',
            'restriction' => 'input',
          ),
          'account' => array(
            'type' => 'user',
            'label' => t('User'),
            'description' => t('Select an optional user. Defaults to logged in user.'),
            'optional' => TRUE,
          ),
        ),
      ),
      'brontoapi_lists_rules_remove' => array(
        'label' => t('Bronto API Remove from List'),
        'group' => t('Bronto'),
        'parameter' => array(
          'list' => array(
            'type' => 'text',
            'label' => t('Bronto List'),
            'description' => t('Select Bronto API list.'),
            'options list' => 'brontoapi_lists_lists',
            'restriction' => 'input',
          ),
          'account' => array(
            'type' => 'user',
            'label' => t('User'),
            'description' => t('Select an optional user. Defaults to logged in user.'),
            'optional' => TRUE,
          ),
        ),
      ),
    );
  }
}

/**
 * Selects the Bronto API list that will appear in the drop-down.
 */
function brontoapi_lists_lists() {
  $lists = brontoapi_lists_read_lists();
  $rules_lists = array();
  foreach ($lists as $list) {
    $rules_val = variable_get("rules_" . $list->id);
    if (!empty($rules_val)) {
      $rules_lists[$list->id] = $list->label;
    }
  }
  return $rules_lists;
}

/**
 * Wrapper for brontoapi_lists_remove().
 */
function brontoapi_lists_rules_remove($list, $account = NULL) {
  brontoapi_lists_remove($list, $account = NULL);
}

/**
 * Wrapper for brontoapi_lists_signup().
 */
function brontoapi_lists_rules_signup($list, $account = NULL) {
  brontoapi_lists_signup($list, $account);
}

/**
 * Signs user up for a list.
 */
function brontoapi_lists_signup($list, $account) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }
  $email = $account->mail;
  brontoapi_lists_add_to_lists($email, array($list));
}

/**
 * Removes user from a list.
 */
function brontoapi_lists_remove($list, $account) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }
  $email = $account->mail;
  brontoapi_lists_remove_from_lists($email, array($list));
}

/**
 * Creates a webform component type for Bronto API lists.
 */
function brontoapi_lists_webform_component_info_alter(&$components) {
  $lists = brontoapi_lists_read_lists();
  if (!empty($lists)) {
    $components['brontoapi_list'] = array(
      'label' => t('Bronto API List Sign-up'),
      'description' => t('Sign-up for Bronto List'),
      'file' => 'components/list.inc',
      'module' => 'brontoapi_lists',
    );
  }
}
