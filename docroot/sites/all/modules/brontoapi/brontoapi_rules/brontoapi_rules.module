<?php

/**
 * @file
 * Integrates Bronto API with Rules.
 */

/**
 * Implements hook_rules_action_info().
 */
function brontoapi_rules_rules_action_info() {
  return array(
    'brontoapi_rules_replacement' => array(
      'label' => t('Replacement Field'),
      'group' => t('Bronto'),
      'parameter' => array(
        'field' => array(
          'type' => 'text',
          'label' => t('Bronto Field'),
          'description' => t('Select Bronto API field.'),
          'options list' => 'brontoapi_rules_fields',
          'restriction' => 'input',
        ),
        'type' => array(
          'type' => 'text',
          'label' => t('Bronto Message Type'),
          'description' => t('Select Bronto API message type.'),
          'options list' => 'brontoapi_rules_type',
          'restriction' => 'input',
        ),
      ),
      'provides' => array(
        'replacement_item' => array(
          'type' => 'list',
          'label' => t('Replacement Item'),
        ),
      ),
    ),
    'brontoapi_rules_replacement_string' => array(
      'label' => t('Replacement String'),
      'group' => t('Bronto'),
      'parameter' => array(
        'string' => array(
          'type' => 'text',
          'label' => t('Bronto String'),
          'description' => t('Select Bronto API field.'),
        ),
        'type' => array(
          'type' => 'text',
          'label' => t('Bronto Message Type'),
          'description' => t('Select Bronto API message type.'),
          'options list' => 'brontoapi_rules_type',
          'restriction' => 'input',
        ),
        'content' => array(
          'type' => 'text',
          'label' => t('Content'),
          'optional' => TRUE,
          'description' => t('The value being inserted into the body of the message.'),
        ),
      ),
      'provides' => array(
        'replacement_item' => array(
          'type' => 'list',
          'label' => t('Replacement Item'),
        ),
      ),
    ),
    'brontoapi_rules_send_to_message' => array(
      'label' => t('Send mail with Bronto'),
      'group' => t('Bronto'),
      'parameter' => array(
        'message' => array(
          'type' => 'text',
          'label' => t('Bronto Message'),
          'description' => t('Select Bronto API template.'),
          'options list' => 'brontoapi_rules_get_messages',
          'restriction' => 'input',
        ),
        'to' => array(
          'type' => 'text',
          'label' => t('To'),
          'description' => t('The e-mail address or addresses where the message will be sent to.'),
        ),
        'replacements' => array(
          'type' => 'list',
          'label' => t('Replacement Strings'),
          'description' => t('Strings to replace values for Bronto messages'),
        ),
        'from' => array(
          'type' => 'text',
          'label' => t('From'),
          'description' => t("The mail's from address. Leave it empty to use the site-wide configured address."),
          'optional' => TRUE,
        ),
        'reply' => array(
          'type' => 'text',
          'label' => t('Reply'),
          'description' => t("The mail's reply address. Leave it empty to use the from address."),
          'optional' => TRUE,
        ),
        'reply_name' => array(
          'type' => 'text',
          'label' => t('Reply Name'),
          'description' => t("The mail's reply name. Leave it empty to use the site-wide configured name."),
          'optional' => TRUE,
        ),
      ),
    ),
  );
}

/**
 * Selects the Bronto API field that a replacement value will be selected from.
 */
function brontoapi_rules_fields() {
  $fields = brontoapi_read_fields();
  $rules_fields = array();
  foreach ($fields as $field) {
    $rules_fields[$field->id] = $field->label;
  }
  return $rules_fields;
}

/**
 * Wraps Bronto API field replacements.
 */
function brontoapi_rules_replacement($name, $type) {
  return array(
    "replacement_item" => array(
      array(
        "name" => $name,
        "type" => $type,
        "content" => "",
      ),
    ),
  );
}

/**
 * Wraps Bronto API string replacements.
 */
function brontoapi_rules_replacement_string($name, $type, $content) {
  return array(
    "replacement_item" => array(
      array(
        "name" => $name,
        "type" => $type,
        "content" => $content,
      ),
    ),
  );
}

/**
 * Provides the Bronto API message types.
 */
function brontoapi_rules_type() {
  return array(
    "text" => "Text",
    "html" => "HTML",
  );
}

/**
 * Takes values from rules and passes them to Bronto for mailing.
 */
function brontoapi_rules_send_to_message($message, $to, $replacements, $from = NULL, $reply = NULL, $reply_name = NULL) {
  $extras = array();
  if (!empty($from)) {
    $extras["from"] = $from;
  }
  if (!empty($reply)) {
    $extras["reply"] = $reply;
  }
  if (!empty($reply_name)) {
    $extras["reply_name"] = $reply_name;
  }
  brontoapi_mail_message($to, $message, $replacements, $extras);
}

/**
 * Provides a list of messages and message names.
 */
function brontoapi_rules_get_messages() {
  $messages = brontoapi_get_all_messages();
  $list = array();
  foreach ($messages as $message) {
    $name = brontoapi_get_message_name($message);
    $list[$message] = $name . " ($message)";
  }
  return $list;
}
