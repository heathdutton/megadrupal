<?php
/**
 * @file
 * Install file.
 */

/**
 * Implements hook_schema().
 */
function civicrm_cicero_schema() {
  $schema = array();
  $schema['civicrm_cicero_sync_runs'] = array(
    'description' => 'Information about running an previous syncs to the Cicero database.',
    'fields' => array(
      'sync_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The id of a run',
      ),
      'civi_group_id' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'drupal_uid' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Drupal user id of the user who created the sync.',
      ),
      'cicero_user' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Cicero user id of the user who ran the sync.',
      ),
      'date_to_run' => array(
        'description' => 'The Unix timestamp when the will run.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'cron_run_limit' => array(
        'description' => 'The number of contacts to sync per cron run.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The satus of the sync job.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => 'pending',
      ),
      'contact_progress' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Serialized data about contacts in the sync job.',
      ),
      'syncd_officials' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Serialized data about elected officials in this sync job.',
      ),

    ),
    'primary key' => array('sync_id'),
  );
  return $schema;
}

/**
 * Implements hook_enable().
 */
function civicrm_cicero_enable() {
  civicrm_cicero_add_menu();
}

/**
 * Implements hook_disable().
 */
function civicrm_cicero_disable() {
  civicrm_cicero_remove_menu();
}

/**
 * Implements hook_uninstall().
 */
function civicrm_cicero_uninstall() {
  $vars = "SELECT name FROM variable WHERE name LIKE 'civicrm_cicero_%'";
  foreach ($vars as $var) {
    variable_del($var->name);
  }
}

/**
 * Helper function.
 *
 * Properly initialize civicrm depending on whether we are being called
 * by drush or via http.
 */
function civicrm_cicero_initialize_crm() {
  if (PHP_SAPI === 'cli') {
    _civicrm_init();
  }
  else {
    civicrm_initialize();
  }
}

/**
 * Remove the admin menu item from CiviCRM Administer -> System Settings.
 */
function civicrm_cicero_remove_menu() {
  civicrm_cicero_initialize_crm();
  require_once 'CRM/Core/BAO/Navigation.php';
  $label = 'Administer CiviCRM Cicero';
  $url = 'admin/config/civicrm/civicrm-cicero';
  $domain_id  = CRM_Core_Config::domainID();
  $sql = "DELETE FROM civicrm_navigation WHERE label = %1 AND url = %2 " .
    "AND is_active = 1 AND domain_id = %3";
  $params = array(
    1 => array($label, 'String'),
    2 => array($url, 'String'),
    3 => array($domain_id, 'Integer'),
  );
  CRM_Core_DAO::executeQuery($sql, $params);
  drupal_set_message(t("Removed civicrm_cicero menu item."));
  require_once 'CRM/Core/Config.php';
  $config = CRM_Core_Config::singleton();

  // Clear db caching so menu item disappears.
  $config->clearDBCache();
}

/**
 * Add the admin menu item to CiviCRM Administer -> System Settings.
 */
function civicrm_cicero_add_menu() {
  civicrm_cicero_initialize_crm();
  $label = 'Administer CiviCRM Cicero';
  $url = 'admin/config/civicrm/civicrm-cicero';
  require_once 'CRM/Core/BAO/Navigation.php';
  $menus = CRM_Core_BAO_Navigation::getNavigationList();
  $system_settings_array = preg_grep('/System Settings/', $menus);
  $system_settings_name = array_pop($system_settings_array);
  $keys = array_keys($menus, $system_settings_name);
  if (count($keys) != 1) {
    drupal_set_message(t("Failed to add civicrm_cicero menu item."));
    return;
  }
  $id = array_pop($keys);
  $params = array(
    'label' => $label,
    'url' => $url,
    'permission' => array(
      0 => 'administer civicrm cicero',
    ),
    'permission_operator' => 'AND',
    'is_active' => 1,
    'parent_id' => $id,
  );
  CRM_Core_BAO_Navigation::add($params);
  drupal_set_message(t("Added civicrm_cicero menu item."));
}

/**
 * Remove 2010 cicero fields and update settings.
 *
 * According to Cicero, all 2010 district changes are in effect, so no
 * reason to use these fields any more. This function ensures that if a
 * _2010 field was chosen, we switch to the non-_2010 version.
 */
function civicrm_cicero_update_7001() {
  // Delete all the field names stored.
  $sql = "DELETE FROM {variable} where name LIKE 'civicrm_cicero_cicero_fields%'";
  db_query($sql);
  // Get the map of fields names in use.
  $map = variable_get('civicrm_cicero_contact_field_map', array());
  while(list($k, $v) = each($map)) {
    if(preg_match('/^(.*)_2010$/', $k, $matches)) {
      // If we find one that is set to the _2010 value... unset it.
      unset($map[$k]);
      // Set the new field name - without the _2010 part.
      $k = $matches[1];
      $map[$k] = $v;
    }
    // Set the field name (since deleted them in the first step).
    variable_set("civicrm_cicero_cicero_fields_${k}", 1);
  }
  variable_set('civicrm_cicero_contact_field_map', $map);
}
