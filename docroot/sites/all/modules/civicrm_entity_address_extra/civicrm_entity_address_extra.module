<?php

/**
 * Implements hook_token_info().
 */
function civicrm_entity_address_extra_token_info() {
  return array();
}

/**
 * Implements hook_token_info_alter().
 */
function civicrm_entity_address_extra_token_info_alter(&$data) {
  civicrm_initialize();

  // Merge our custom tokens into the token data.
  foreach(civicrm_entity_address_extra_custom_tokens() as $token_obj) {
    $data = array_merge_recursive($data, $token_obj->info());
  }

  return $data;
}

/**
 * Implements hook_tokens().
 */
function civicrm_entity_address_extra_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  foreach(civicrm_entity_address_extra_custom_tokens() as $token_obj) {
    $result = $token_obj->tokens($type, $tokens, $data, $options);
    if(isset($result)) {
      $replacements = array_merge($replacements, $result);
    }
  }

  return $replacements;
}

/**
 * Returns an array of all the custom tokens this module defines.
 *
 * @return array
 */
function civicrm_entity_address_extra_custom_tokens() {
  $custom_tokens = &drupal_static(__FUNCTION__);
  if (!isset($custom_tokens)) {
    $custom_tokens = array(
      new \CiviCrmAddressToken(),
      new \CiviCrmEmailToken(),
      new \CiviCrmPhoneToken(),
    );
  }

  return $custom_tokens;
}


/**
 * Implements hook_theme().
 */
function civicrm_entity_address_extra_theme($existing, $type, $theme, $path) {
  return array(
    'civicrm_entity_address_extra_token' => array(
      'variables' => array(
        'controller' => $this,
        'token' => NULL,
        'original' => NULL,
        'data' => array(
          'raw' => NULL,
          'needs_data' => NULL,
          'location_type' => NULL,
        ),
        'entity_property' => NULL,
      ),
    ),
  );
}

/**
 * The base theme function for civicrm_entity_address_extra tokens. Additional context can be applied
 * by adding more function names after a "__" (double underscore).
 *
 * @param $variables
 * @return string
 */
function theme_civicrm_entity_address_extra_token(&$variables) {
  return $variables['controller']->getEntityPropertyValue($variables['data']['raw'], $variables['entity_property']);
}
