<?php
/**
 * @file
 * Main module file for the internet_defense_league module.
 */
 
/**
 * Implements hook_help().
 */
function internet_defense_league_help($path, $arg) {
    switch ($path) {
    case 'admin/internet_defense_league#block':
      return '<p>' . t('The <a href="http://internetdefenseleague.org/">Internet Defense League</a> module brings the league to your site.') . '</p>';

  }
}

/**
 * Implements hook_init().
 */
function internet_defense_league_init() {
  // We need to include the settings for the module here and want to be
  // explicit about where the JS file goes.
  drupal_add_js(array(
    'internetDefenseLeague' => internet_defense_league_make_settings(),
  ), 'setting');
  drupal_add_js(drupal_get_path('module', 'internet_defense_league') . '/internet_defense_league.js',
    array( 
      'weight' => -200,
      'every_page' => TRUE,
    )
  );
}

/**
 * Implements hook_menu().
 */
function internet_defense_league_menu() {
  $items['admin/config/services/internet_defense_league'] = array(
    'title' => 'Internet Defense League settings',
    'description' =>  'Configure the Internet Defense League settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('internet_defense_league_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function internet_defense_league_block_info() {
  // We should use a full prefix but the blocks table
  // has some length limitations for the delta value
  $blocks['idl_super_badge'] = array(
    'info' => t('Internet Defense League Super Badge'),
  );
  $blocks['idl_shield_badge'] = array(
    'info' => t('Internet Defense League Shield Badge'),
  );
  $blocks['idl_footer_badge'] = array(
    'info' => t('Internet Defense League Footer Badge'),
  );
  $blocks['idl_sidebar_badge'] = array(
    'info' => t('Internet Defense League Sidebar Badge'),
  );
  $blocks['idl_ribbon_left_badge'] = array(
    'info' => t('Internet Defense League Ribbon (left) Badge'),
  );
  $blocks['idl_ribbon_right_badge'] = array(
    'info' => t('Internet Defense League Ribbon (right) Badge'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function internet_defense_league_block_view($delta = '') {
  $block = array();

  $block['subject'] = t('Internet Defense League');
  $block['content'] = array(
    '#theme' => 'internet_defense_league_badge', 
    '#type' => $delta, 
  );
  
  return $block;
}

/**
 * Implements hook_theme().
 */
function internet_defense_league_theme($existing, $type, $theme, $path) {
  return array(
    'internet_defense_league_badge' => array(
      'variables' => array(
        'type' => 'internet_defense_league_super_badge',
      ),
    ),
  );
}

/**
 * Default theme implementation for badges.
 */
function theme_internet_defense_league_badge($vars) {
  drupal_add_css(drupal_get_path('module', 'internet_defense_league') . '/internet_defense_league.css');
  $output = '';
  
  switch ($vars['type']) {
    case 'idl_super_badge':
    default:
      $url = 'http://internetdefenseleague.org/images/badges/final/super_badge.png';
      break;
      
    case 'idl_shield_badge':
      $url = 'http://internetdefenseleague.org/images/badges/final/shield_badge.png';
      break;
      
    case 'idl_footer_badge':
      $url = 'http://internetdefenseleague.org/images/badges/final/footer_badge.png';
      break;
      
    case 'idl_sidebar_badge':
      $url = 'http://internetdefenseleague.org/images/badges/final/side_bar_badge.png';
      break;
      
    case 'idl_ribbon_left_badge':
      $url = 'http://internetdefenseleague.org/images/badges/final/banner_left.png';
      break;
      
    case 'idl_ribbon_right_badge':
      $url = 'http://internetdefenseleague.org/images/badges/final/banner_right.png';
      break;
  }
  
  $image = theme('image', array(
    'path' => $url,
    'alt' => t('Member of The Internet Defense League'),
  ));
  $output .= l($image, 'http://internetdefenseleague.org', array(
    'attributes' => array(
      'target' => '_blank',
      'class' => array(
        'internet-justice-league-badge',
        $vars['type'],
      ),
    ),
    'html' => TRUE,
  ));

  return $output;
}

/**
 * Admin settings for idl.
 */
function internet_defense_league_admin_settings() {
  $form = array();
  
  $form['internet_defense_league_config_variant'] = array(
    '#type' => 'radios',
    '#title' => t('Variant'),
    '#description' => t('The type of display for the Leagues notification.'),
    '#options' => array(
      'modal' => t('Modal'),
      'banner' => t('Banner'),
    ),
    '#default_value' => variable_get('internet_defense_league_config_variant', 
      internet_defense_league_variables('internet_defense_league_config_variant')),
  );
  $form['internet_defense_league_config_campaign'] = array(
    '#type' => 'radios',
    '#title' => t('Campaign'),
    '#description' => t('The type of campaign.'),
    '#options' => array(
      'default' => t('All Campaigns as they are pushed through the League.'),
      'idl_launch' => t('Just the Leagues launch'),
    ),
    '#default_value' => variable_get('internet_defense_league_config_campaign', 
      internet_defense_league_variables('internet_defense_league_config_campaign')),
  );
  
  return system_settings_form($form);
}

/**
 * Function to make JS settings.
 */
function internet_defense_league_make_settings() {
  $settings = array();
  $prefix = 'internet_defense_league_config';
  
  $vars = internet_defense_league_variables();
  foreach ($vars as $v => $default) {
    if (strpos($v, $prefix) === 0) {
      $settings[str_replace($prefix . '_', '', $v)] = variable_get($v, $default);
    }
  }
  
  // Remove campaign if default
  if ($settings['campaign'] === 'default') {
    unset($settings['campaign']);
  }
  
  return $settings;
}

/**
 * Function to keep track of variables.
 */
function internet_defense_league_variables($var = NULL) {
  $vars = array();
  
  // name => default value
  $vars['internet_defense_league_config_variant'] = 'modal';
  $vars['internet_defense_league_config_campaign'] = 'default';
  
  return ($var == NULL) ? $vars : $vars[$var];
}