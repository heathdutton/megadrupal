<?php

/** 
 * A module to manage lauth keys.
 * 
 * FIXME: keys should be entities.
 */

/**
 * hook_menu implementation.
 */
function lauth_server_menu() {
  $items['user/%user/lauth'] = array(
    'title' => 'Keys',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'lauth_server_user_keys_list',
    'page arguments' => array(1),
    'access callback' => '_lauth_server_user_access',
    'access arguments' => array(1),
  );
  $items['user/%user/lauth/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['user/%user/lauth/create'] = array(
    'title' => 'Create',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lauth_server_new_key_form', 1),
    'access callback' => '_lauth_server_user_access',
    'access arguments' => array(1, 'lauth create keys'),
    'weight' => 2,
  );
  $items['lauth/%/edit'] = array(
    'title' => 'Edit key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lauth_server_user_keys_edit_form', 1),
    'access callback' => '_lauth_server_edit_key_access',
    'access arguments' => array(1),
  );
  $items['lauth/%/revoke'] = array(
    'title' => 'Revoke key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lauth_server_user_keys_revoke_confirm', 1),
    'access callback' => '_lauth_server_edit_key_access',
    'access arguments' => array(1),
  );
  $items['lauth/%/secret'] = array(
    'title' => 'Key secret',
    'page callback' => 'lauth_server_user_keys_view_secret',
    'page arguments' => array(1),
    'access callback' => '_lauth_server_secret_key_access',
    'access arguments' => array(1),
  );
  
  return $items;
}

/**
 * hook_permission implementation.
 */
function lauth_server_permission() {
  $permissions = array();
  
  $permissions['lauth administer keys'] = array(
    'title' => t('Administer keys'),
    'restrict access' => TRUE,
  );
  $permissions['lauth create keys'] = array(
    'title' => t('Create keys')
  );
  $permissions['lauth edit own keys'] = array(
    'title' => t('Edit own keys')
  );
  
  $roles = user_roles(TRUE);
  foreach ($roles as $rid => $name) {
    $permissions[_lauth_server_role_perm_name($rid)] = array(
      'title' => t('Assign role %name to a key', array('%name' => $name))
    );
  }
  
  return $permissions;
}

function _lauth_server_role_perm_name($rid) {
  return 'assign ' . $rid . ' to a key';
}

function _lauth_server_user_access($user, $permission = NULL) {
  return user_edit_access($user) && (empty($permission) || user_access($permission));
}

function _lauth_server_edit_key_access($key_id) {
  global $user;
  
  $key_uid =   $result = db_select('lauth_server_keys', 'k')
    ->fields('k', array('uid'))
    ->condition('key_id', $key_id)
    ->execute()
    ->fetchField();
  
  return user_access('lauth administer keys') || ($key_uid && ($key_uid == $user->uid) && user_access('lauth edit own keys'));
}

function _lauth_server_secret_key_access($key_id) {
  global $user;
  
  $key_uid =   $result = db_select('lauth_server_keys', 'k')
    ->fields('k', array('uid'))
    ->condition('key_id', $key_id)
    ->execute()
    ->fetchField();
  
  return ($key_uid && ($key_uid == $user->uid));
}

/**
 * hook_user_cancel implementation.
 * 
 * @param unknown_type $edit
 * @param unknown_type $account
 * @param unknown_type $method
 */
function lauth_server_user_cancel($edit, $account, $method) {
  _lauth_delete_user_keys($account->uid);
}

/**
 * hook_user_delete implementation.
 * 
 * @param unknown_type $account
 */
function lauth_server_user_delete($account) {
  _lauth_delete_user_keys($account->uid);
}

/**
 * Delete all keys associated with a user.
 * 
 * @param unknown_type $uid
 */
function _lauth_delete_user_keys($uid) {
  $keys = db_select('lauth_server_keys', 'k')
    ->fields('k', array('key_id'))
    ->condition('uid', $uid)
    ->execute()
    ->fetchCol();
    
  lauth_server_delete_key($keys);
}


/**
 * List all keys of a user.
 * 
 * @param unknown_type $user
 */
function lauth_server_user_keys_list($user) {
  $table['header'] = array(
    array(
      'data' => t('Key ID'),
      'field' => 'key_id',
      'sort' => 'asc'
    ),
    t('Description'),
    t('Operations'),
  );
  
  $result = db_select('lauth_server_keys', 'k')
    ->fields('k', array('key_id', 'description'))
    ->condition('uid', $user->uid)
    ->extend('TableSort')
    ->orderByHeader($table['header'])
    ->execute();
  
  $destination = drupal_get_destination();
    
  foreach ($result as $record) {
    $operations = array();
    
    if (_lauth_server_edit_key_access($record->key_id)) {
      $operations['edit'] = array(
        'title' => t('edit'),
        'href' => 'lauth/'.$record->key_id.'/edit',
        'query' => $destination,
      );
      $operations['revoke'] = array(
        'title' => t('revoke'),
        'href' => 'lauth/'.$record->key_id.'/revoke',
        'query' => $destination,
      );
    }

    $operations['secret'] = array(
      'title' => t('show secret'),
      'href' => 'lauth/'.$record->key_id.'/secret',
      'query' => $destination,
    );
      
    $table['rows'][] = array(
      $record->key_id,
      $record->description,
      theme("links__node_operations", array('links' => $operations, 'attributes' => array('class' => array('links', 'inline'))))
    );
  }

  return theme('table', $table);
}

function lauth_server_user_keys_edit_form($form, $form_state, $key_id) {
  $key = lauth_server_load_key($key_id);
  $key_roles = lauth_server_get_key_roles($key_id);

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $key->uid
  );
  
  $form['key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Key id'),
    '#description' => t('The key identifier.'),
    '#maxlength' => 255,
    '#default_value' => $key->key_id,
    '#disabled' => TRUE,
  );
  
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('A short description for this key.'),
    '#maxlength' => 255,
    '#default_value' => $key->description
  );
  
  $roles = user_roles(TRUE);
  foreach ($roles as $rid => $name) {
    if (user_access(_lauth_server_role_perm_name($rid))) {
      $options[$rid] = check_plain($name);
    }
  }
  $form['key_roles'] = array(
    '#title' => ('Roles associated with this key'),
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => array_keys($key_roles)
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => 'user/'.$key->uid.'/lauth',
  );
  
  return $form;
}

function lauth_server_user_keys_edit_form_submit($form, &$form_state) {
  $uid = $form_state['values']['uid'];
  $key_id = $form_state['values']['key_id'];
  $description = $form_state['values']['description'];
  $roles = $form_state['values']['key_roles'];
  $roles = array_filter(array_values($roles), '_lauth_server_neq_zero');
  lauth_server_update_key($key_id, $description, $roles);
  $form_state['redirect'] = 'user/'.$uid.'/lauth';
}

/**
 * Revoke key confirmation form.
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $key_id
 */
function lauth_server_user_keys_revoke_confirm($form, &$form_state, $key_id) {
  $form['key_id'] = array('#type' => 'value', '#value' => $key_id);
  
  return confirm_form(
    $form, 
    t('Are you sure you want to revoke key %key?', array('%key' => $key_id)),
    NULL, 
    NULL, 
    t('Revoke'), 
    t('Cancel'));
}

function lauth_server_user_keys_revoke_confirm_submit($form, &$form_state) {
  $key_id = $form_state['values']['key_id'];
  lauth_server_delete_key($key_id);
}

/**
 * Show the secret key
 */
function lauth_server_user_keys_view_secret($key_id) {
  $secret = lauth_server_get_secret($key_id);
  return theme('lauth_secret', array('secret' => $secret));
}

/**
 * Create key form.
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $user
 */
function lauth_server_new_key_form($form, &$form_state, $user) {
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $user->uid
  );
  
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('A short description for the new key.'),
    '#maxlength' => 255
  );
  
  $roles = user_roles(TRUE);
  foreach ($roles as $rid => $name) {
    if (user_access(_lauth_server_role_perm_name($rid))) {
      $options[$rid] = check_plain($name);
    }
  }
  $form['key_roles'] = array(
    '#title' => ('Roles associated with key'),
    '#type' => 'checkboxes',
    '#options' => $options,
  );
   
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create')
  );
  
  return $form;
}

function lauth_server_new_key_form_submit($form, &$form_state) {
  $uid = $form_state['values']['uid'];
  $description = $form_state['values']['description'];
  $roles = $form_state['values']['key_roles'];
  $roles = array_filter(array_values($roles), '_lauth_server_neq_zero');
  lauth_server_create_key($uid, $description, $roles);
  $form_state['redirect'] = 'user/'.$uid.'/lauth';
}

function _lauth_server_neq_zero($value) {
  return $value != 0;
}

/**
 * Verify the identity of a request author.
 */
function lauth_server_verify_request() {
  list($success, $value) = lauth_api_verify_request('lauth_server_get_secret');
  if ($success) {
    $key = lauth_server_load_key($value);
    $roles = lauth_server_get_key_roles($key->key_id);
    return array('success' => TRUE, 'uid' => $key->uid, 'key' => $key->key_id, 'roles' => $roles);
  }
  else {
    return array('success' => FALSE, 'error' => $value);
  }
}

/**
 * Create a new key.
 */
function lauth_server_create_key($uid, $description, $roles) {
  $key['id'] = _lauth_api_hash_base32('md5', uniqid(mt_rand(), TRUE) . drupal_random_bytes(55));
  $key['secret'] = _lauth_api_hash_base32('sha256', uniqid(mt_rand(), TRUE) . drupal_random_bytes(55));

  db_insert('lauth_server_keys')
    ->fields(array(
      'key_id' => $key['id'],
      'secret' => $key['secret'],
      'uid' => $uid,
      'description' => $description
    ))
    ->execute();
    
  $query = db_insert('lauth_keys_roles')->fields(array('key_id', 'rid'));
  foreach ($roles as $rid) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      $query->values(array(
        'key_id' => $key['id'],
        'rid' => $rid,
      ));
    }
  }
  $query->execute();
  
  return $key['id'];
}

function lauth_server_update_key($key_id, $description, $roles) {
  db_update('lauth_server_keys')
    ->condition('key_id', $key_id)
    ->fields(array(
      'description' => $description
    ))
    ->execute();
    
  db_delete('lauth_keys_roles')
    ->condition('key_id', $key_id)
    ->execute();
  $query = db_insert('lauth_keys_roles')->fields(array('key_id', 'rid'));
  foreach ($roles as $rid) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      $query->values(array(
        'key_id' => $key_id,
        'rid' => $rid,
      ));
    }
  }
  $query->execute();
  
  return $key['id'];
}

/**
 * Delete keys identified by $key_ids.
 * 
 * @param $key_ids
 *   A key id or an array of key ids to delete.
 */
function lauth_server_delete_key($key_ids) {
  db_delete('lauth_keys_roles')
    ->condition('key_id', $key_ids)
    ->execute();
  
  db_delete('lauth_server_keys')
    ->condition('key_id', $key_ids)
    ->execute();  
}

/**
 * Load a key
 */
function lauth_server_load_key($key_id) {
  $key = db_select('lauth_server_keys', 'k')
    ->condition('k.key_id', $key_id)
    ->fields('k')
    ->execute()
    ->fetchObject();
  return $key;
}

/**
 * Get the secret key
 */
function lauth_server_get_secret($key_id) {
  $secret = db_select('lauth_server_keys', 'k')
    ->condition('k.key_id', $key_id)
    ->fields('k', array('secret'))
    ->execute()
    ->fetchField();
  return $secret;
}

/**
 * Get key roles
 * 
 * @param $key_id
 */
function lauth_server_get_key_roles($key_id) {
  $query = db_select('lauth_keys_roles', 'k');
  $query->join('role', 'r', 'k.rid = r.rid');
  
  $roles = $query->condition('k.key_id', $key_id)
    ->fields('k', array('rid'))
    ->fields('r', array('name'))
    ->execute()
    ->fetchAllKeyed();
    
  return $roles;
}

/**
 * hook_theme implementation
 */
function lauth_server_theme($existing, $type, $theme, $path) {
  return array(
    'lauth_secret' => array(
      'variables' => array('secret' => '')
    )
  );
}

function theme_lauth_secret($variables) {
  $output = '<div>'.t('This is the secret associated to your key:').'</div>';
  $output .= '<div class="lauth-secret">'.$variables['secret'].'</div>';
  $output .= '<a>' . l(t('Return to key list'), $_GET['destination']) . '</a>';
  return $output;
}
