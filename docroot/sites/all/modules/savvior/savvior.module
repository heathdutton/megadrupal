<?php
/**
 * @file
 * Savvior masonry plugin for views.
 */
// Regular expression to determine which version of Savvior is installed.
define('SAVVIOR_VERSION_REGEX', '/(\d\.\d\.\d)/');
define('ENQUIRE_VERSION_REGEX', '/(\d\.\d\.\d)/');

/**
 * Implements hook_permission().
 */
function savvior_permission() {
  return array(
    'manage Savvior settings' => array(
      'title' => t('Manage Savvior settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function savvior_menu() {
  $items = array();

  $items['admin/config/user-interface/savvior'] = array(
    'title' => 'Savvior Settings',
    'description' => 'Configure Savvior',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('savvior_admin_settings_form'),
    'access arguments' => array('manage Savvior settings'),
    'file' => 'savvior.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_views_api()
 */
function savvior_views_api() {
  return array('api' => 3);
}

/**
 * Preprocess function for views_view_savvior.tpl.php.
 */
function template_preprocess_views_view_savvior(&$vars) {
  // Run preprocess function for unformatted style
  template_preprocess_views_view_unformatted($vars);

  // Get view options
  $view = $vars['view'];
  $options = $vars['options'];
}

/**
 * Implements template_preprocess_views_view().
 */
function savvior_preprocess_views_view_savvior(&$vars) {

  drupal_add_js(enquire_get_path(), array(
    'scope' => 'footer',
    'weight' => 100,
  ));
  drupal_add_js(savvior_get_path(), array(
    'scope' => 'footer',
    'weight' => 200, // make sure it comes after enquire
  ));

  if (variable_get('savvior_load_default_js')) {
    drupal_add_js(drupal_get_path('module', 'savvior') . '/js/savvior_default.js');
  }
  if (variable_get('savvior_load_default_css')) {
    drupal_add_css(drupal_get_path('module', 'savvior') . '/css/savvior_default.css', array(
      'type' => 'file',
    ));
  }
}

/**
 * 
 */
function savvior_get_path() {
  $savvior_path = libraries_get_path('savvior');

  if (variable_get('savvior_use_min_js')) {
    $savvior_path .= ('/dist/savvior.min.js');
  } else {
    $savvior_path .= ('/dist/savvior.js');
  }

  return $savvior_path;
}

function enquire_get_path() {
  $enquire_path = libraries_get_path('enquire.js');

  if (variable_get('enquire_use_min_js')) {
    $enquire_path .= ('/dist/enquire.min.js');
  } else {
    $enquire_path .= ('/dist/enquire.js');
  }

  return $enquire_path;
}

/**
 * Guesses the savvior library version.
 *
 * This function is using a regex, which assumes that the format of the version
 * string won't change. If it changes, feel free to submit a bug report.
 *
 * @return mixed The version number if exists, or a boolean FALSE if it can't be
 * determined.
 */
function savvior_get_version($reset = FALSE) {
  $version = &drupal_static(__FUNCTION__);

  if ($version === NULL || $reset == TRUE) {
    if ($cached = cache_get('savvior_version') && isset($cached->data) && $reset != TRUE) {
      $version = $cached->data;
    }
    else {
      $version = FALSE;
      $savvior_path = savvior_get_path();
      if (file_exists($savvior_path)) {
        $savvior = file_get_contents($savvior_path);

        $matches = array();
        preg_match(SAVVIOR_VERSION_REGEX, $savvior, $matches);

        if (isset($matches[0])) {
          $version = $matches[0];
          if ($version) {
            cache_set('savvior_version', $version);
          }
        }

        unset($savvior);
      }
    }
  }

  return $version;
}


function enquire_get_version($reset = FALSE) {
  $version = &drupal_static(__FUNCTION__);

  if ($version === NULL || $reset == TRUE) {
    if ($cached = cache_get('enquire_version') && isset($cached->data) && $reset != TRUE) {
      $version = $cached->data;
    }
    else {
      $version = FALSE;
      $enquire_path = enquire_get_path();
      if (file_exists($enquire_path)) {
        $enquire = file_get_contents($enquire_path);

        $matches = array();
        preg_match(ENQUIRE_VERSION_REGEX, $enquire, $matches);

        if (isset($matches[0])) {
          $version = $matches[0];
          if ($version) {
            cache_set('enquire_version', $version);
          }
        }

        unset($enquire);
      }
    }
  }

  return $version;
}


