<?php
/**
 * @file
 * media_issuu/media_issuu.module
 *
 * Media: Issuu.com provides a stream wrapper and formatters of issuu embed
 * content provided by Issuu, available at http://issuu.com/.
 */


/**
 * A registry of variable_get defaults.
 */
include_once dirname(__FILE__) . '/includes/media_issuu.variables.inc';

/**
 * Hooks and callbacks for integrating with File Entity module for display.
 */
include_once dirname(__FILE__) . '/includes/media_issuu.formatters.inc';

/**
 * Implements hook_media_internet_providers().
 */
function media_issuu_media_internet_providers() {
  $info['MediaInternetIssuuHandler'] = array(
    'title' => t('Issuu'),
  );

  return $info;
}

/**
 * Implements hook_stream_wrappers().
 */
function media_issuu_stream_wrappers() {
  return array(
    'issuu' => array(
      'name' => t('Issuu documents'),
      'class' => 'MediaIssuuStreamWrapper',
      'description' => t('Documents provided by Issuu.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function media_issuu_theme($existing, $type, $theme, $path) {
  return array(
    'media_issuu_document' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'media_issuu.theme.inc',
      'path' => $path . '/includes/themes',
      'template' => 'media-issuu-document',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_issuu_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );
  if (isset($api_versions[$owner][$api])) {
    return array('version' => $api_versions[$owner][$api]);
  }
}

/**
 * Implements hook_media_parse().
 *
 * @todo This hook should be deprecated. Refactor Media module to not call it
 *   any more, since media_internet should be able to automatically route to the
 *   appropriate handler.
 */
function media_issuu_media_parse($embed_code) {
  $handler = new MediaInternetIssuuHandler($embed_code);
  return $handler->parse($embed_code);
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Register the document/issuu mimetype.
 */
function media_issuu_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'document/issuu';
}

/*
* Implements hook_file_default_types_alter().
*
* Adds the document/issuu fake mimetype to document files.
*/
function media_issuu_file_default_types_alter(&$types) {
  $types['document']->mimetypes[] = 'document/issuu';
}

/**
 * Allow stream wrappers to have their chance at validation.
 *
 * Any module that implements hook_media_parse will have an
 * opportunity to validate this.
 *
 * @see media_parse_to_uri()
 */
function media_issuu_add_validate($form, &$form_state) {
  if ($form_state['values']['op'] == t('Apply')) {
    return;
  }
  $uri = $form_state['values']['submitted-document'];
  try {
    $file = file_uri_to_object($uri, TRUE);
  }
  catch (Exception $e) {
    form_set_error('url', $e->getMessage());
    return;
  }

  if (!$file->uri) {
    form_set_error('url', t('Please select an issuu-document.'));
    return;
  }

  $validators = $form['#validators'];
  if ($validators) {
    // Check for errors. @see media_add_upload_validate calls file_save_upload().
    // this code is ripped from file_save_upload because we just want the validation part.
    // Call the validation functions specified by this function's caller.
    $errors = file_validate($file, $validators);

    if (!empty($errors)) {
      $message = t('%uri could not be added.', array('%uri' => $uri));
      if (count($errors) > 1) {
        $message .= theme('item_list', array('items' => $errors));
      }
      else {
        $message .= ' ' . array_pop($errors);
      }
      form_set_error('url', $message);
      return FALSE;
    }
  }
  // @TODO: Validate that if we have no $uri that this is a valid file to
  // save. For instance, we may only be interested in images, and it would
  // be helpful to let the user know they passed the HTML page containing
  // the image accidentally. That would also save us from saving the file
  // in the submit step.

  // This is kinda a hack of the same.

  // This should use the file_validate routines that the upload form users.
  // We need to fix the media_parse_to_file routine to allow for a validation.
}

/**
 * @TODO: Document this function.
 */
function media_issuu_add_submit($form, &$form_state) {
  $uri = $form_state['values']['submitted-document'];
  try {
    // Save the remote file
    $file = file_uri_to_object($uri, TRUE);
    file_save($file);
  }
  catch (Exception $e) {
    form_set_error('url', $e->getMessage());
    return;
  }

  if (!$file->fid) {
    form_set_error('url', t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $uri)));
    return;
  }
  else {
    $form_state['file'] = $file;
  }

  // Redirect to the file edit page after submission.
  // @TODO: media_access() is a wrapper for file_entity_access(). Switch to the
  // new function when Media 1.x is deprecated.
  if (media_access('update', $file)) {
    $destination = array('destination' => 'admin/content/file');
    if (isset($_GET['destination'])) {
      $destination = drupal_get_destination();
      unset($_GET['destination']);
    }
    $form_state['redirect'] = array('file/' . $file->fid . '/edit', array('query' => $destination));
  }
  else {
    $form_state['redirect'] = 'admin/content/file';
  }
}
