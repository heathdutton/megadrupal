<?php

/**
 * @file
 * Creates view modes for theme regions and puts them into regions.
 */

/**
 * Implements hook_entity_info_alter().
 *
 * Adds view modes for active theme sidebar regions.
 */
function region_view_modes_entity_info_alter(&$entity_info) {
  $region_view_modes = _region_view_modes_get_view_modes();

  foreach ($region_view_modes as $region_view_mode_name => $region_view_mode_info) {
    // Create a view mode for the region.
    $entity_info['node']['view modes'][$region_view_mode_name] = array(
      'label' => t('!theme theme: !region region', array(
          '!theme' => $region_view_mode_info['theme'],
          '!region' => $region_view_mode_info['region'])),
      'custom settings' => FALSE,
    );
  }
}

/**
 * Implements hook_page_build().
 *
 * Place the current node, rendered via the region view mode, in the appropriate
 * region.
 */
function region_view_modes_page_build(&$page) {
  global $theme;

  if (($node = menu_get_object('node', 1)) && (arg(2) !== 'edit')) {
    $region_view_modes = _region_view_modes_get_view_modes();
    $view_mode_settings = field_view_mode_settings('node', $node->type);

    foreach ($region_view_modes as $region_view_mode_name => $region_view_mode_info) {
      $visible = !empty($view_mode_settings[$region_view_mode_name]['custom_settings']);

      if ($visible && ($region_view_mode_info['theme_name'] === $theme)) {
        // Run the node through the applicable region view mode.
        $node_render_array = node_view($node, $region_view_mode_name);

        // Determine if anything would be rendered from the above array. As far
        // as I can tell, this is the only sure-fire way to know if a render
        // array would produce anything. If it proves too expensive to render
        // this array twice, an alternative would be to add the resulting
        // markup in $rendered as a #markup element below, rather than passing
        // along the array for rendering again. The downside to doing this
        // would be that further processing of the render array would not be
        // possible.
        $rendered = render($node_render_array);

        // $rendered would be empty if there was nothing renderable in the
        // array. If empty, we don't add it to the page region so that
        // template_preprocess_html() won't add the sidebar body classes.
        if ($rendered) {
          // Rendering a render array causes subsequent renders not to output
          // anything. We unset the #printed flag here to allow this array to
          // be rendered again.
          unset($node_render_array['#printed']);

          // Create the region if it doesn't exist.
          if (!isset($page[$region_view_mode_info['region_name']])) {
            $page[$region_view_mode_info['region_name']] = array();
          }

          // Add the render array to the correct region. This is where the
          // magic happens.
          if (variable_get('region_view_modes_placement__' . $region_view_mode_name, 'above') == 'above') {
            array_unshift($page[$region_view_mode_info['region_name']], $node_render_array);
          }
          else {
            array_push($page[$region_view_mode_info['region_name']], $node_render_array);
          }
        }
      }
    }
  }
}

/**
 * Implements theme_preprocess_type().
 */
function region_view_modes_preprocess_node(&$variables) {
  $region_view_modes = _region_view_modes_get_view_modes();

  if (in_array($variables['view_mode'], array_keys($region_view_modes))) {
    // Tricks the default node.tpl.php into hiding the node title.
    $variables['page'] = TRUE;

    // Disables the author and date display in any node.tpl.php that checks
    // for $display_submitted (which includes the default node.tpl.php).
    $variables['display_submitted'] = FALSE;

    // Add theme hook suggestions so we can override node templates when
    // displayed in regions.
    $variables['theme_hook_suggestions'][] = 'node__region_view_mode';
    $variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'];
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Trick the theme system into using the simplified node template
 * (node--region-view-mode.tpl.php) provided by this module, while still
 * allowing themes to override it if necessary.
 *
 * Inspired by https://www.drupal.org/node/715160#comment-7891529
 *
 * @see region_view_modes_preprocess_node()
 */
function region_view_modes_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['node__region_view_mode'])) {
    // Looks like a theme already implements the template.
    return;
  }

  $module_path = drupal_get_path('module', 'region_view_modes');
  $theme_registry['node__region_view_mode'] = array(
    'type' => 'module',
    'theme path' => $module_path,
    'template' => 'node--region-view-mode',
    'path' => $module_path,
    'render element' => 'elements',
    'base hook' => 'node',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a notice to the top of region view modes.
 */
function region_view_modes_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  $region_view_modes = _region_view_modes_get_view_modes();

  if (in_array($form['#view_mode'], array_keys($region_view_modes))) {
    $message = t('Fields placed in this view mode will appear in the %region region of the %theme theme.', array(
          '%theme' => $region_view_modes[$form['#view_mode']]['theme'],
          '%region' => $region_view_modes[$form['#view_mode']]['region']));

    $form['region_view_mode_name'] = array(
      '#type' => 'value',
      '#value' => $form['#view_mode'],
    );

    $form['region_view_mode_message'] = array(
      '#markup' => $message,
      '#weight' => -2,
    );

    $form['region_view_mode_placement'] = array(
      '#title' => t('Display fields'),
      '#type' => 'select',
      '#options' => array(
        'above' => t('Above regular blocks'),
        'below' => t('Below regular blocks'),
      ),
      '#default_value' => variable_get('region_view_modes_placement__' . $form['#view_mode'], 'above'),
      '#weight' => -1,
    );

    $form['#submit'][] = 'region_view_modes_form_field_ui_display_overview_form_submit';
  }
}

/**
 * Additional form submission handler for field_ui_display_overview_form.
 */
function region_view_modes_form_field_ui_display_overview_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  variable_set('region_view_modes_placement__' . $values['region_view_mode_name'], $values['region_view_mode_placement']);
}

/**
 * Return a list of view modes for each theme region.
 */
function _region_view_modes_get_view_modes() {
  $view_modes = array();
  $themes = list_themes();

  foreach ($themes as $theme_obj) {
    $regions_hidden = array();
    if (isset($theme_obj->info['regions_hidden'])) {
      $regions_hidden = array_merge($regions_hidden, $theme_obj->info['regions_hidden']);
    }

    if (isset($theme_obj->info['region_view_modes_hidden'])) {
      $regions_hidden = array_merge($regions_hidden, $theme_obj->info['region_view_modes_hidden']);
    }

    if ($theme_obj->status) {
      foreach ($theme_obj->info['regions'] as $region => $region_name) {
        if (!in_array($region, $regions_hidden)) {
          $view_modes[$theme_obj->name . '__' . $region] = array(
            'theme_name' => $theme_obj->name,
            'theme' => $theme_obj->info['name'],
            'region_name' => $region,
            'region' => $region_name,
          );
        }
      }
    }
  }

  return $view_modes;
}

/**
 * Implements hook_system_info_alter().
 */
function region_view_modes_system_info_alter(&$info, $file, $type) {
  if ($type == 'theme') {
    // Don't allow region view modes for dashboard regions.
    if (module_exists('dashboard')) {
      foreach (dashboard_regions() as $dashboard_region) {
        $info['region_view_modes_hidden'][] = $dashboard_region;
      }
    }

    // Don't allow a region view mode for the content region.
    $info['region_view_modes_hidden'][] = 'content';
  }
}
