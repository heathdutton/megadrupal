<?php
/**
 * @file
 * Main Storypal module.
 */

/**
 * Implementation of hook_menu().
 */
function storypal_menu() {
  $items = array();
  $items['storypal/create'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storypal_storify_create_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['storypal/callback'] = array(
    'page callback' => 'storypal_storify_callback',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%/edit-story'] = array(
    'title' => 'Edit Story',
    'page callback' => 'storypal_storify_edit_story',
    'page arguments' => array(1,3),
    'access arguments' => array('access content'),
    'context' => MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE,
    'type' => MENU_CALLBACK,
  );
  $items['node/%/edit-story/submit'] = array(
    'page callback' => 'storypal_storify_edit_story_submit',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['storypal/import'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storypal_storify_import_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function storypal_storify_import_form($form_state) {

  $Storypal = new Storypal();

  $types = node_type_get_types();

  $options = array();
  foreach($types as $type_name => $type) {
    if ($Storypal->getFieldName($type_name)) {
      $options[$type_name] = $type_name;
    }
  }

  $form['contenttype'] = array(
    '#title' => t('Select the content type to import story into.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => '',
  );
  $form['stories'] = array(
    '#type' => 'textarea',
    '#description' => t('Paste each storify url, one by line.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );

  return $form;
}

function storypal_storify_import_form_submit($form, &$form_state) {
  $type = $form_state['values']['contenttype'];
  $stories = explode("\n", $form_state['values']['stories']);

  $operations = array();
  foreach ($stories as $url) {
    $url = trim($url);
    if (!empty($url)) {
      $operations[] = array('storypal_type_check', array($type, $url));
      $operations[] = array('storypal_url_check', array($type, $url));
      $operations[] = array('storypal_url_import', array($type, $url));
      $operations[] = array('storypal_create_node', array($type, $url));
    }
  }

  $batch = array(
    'title' => 'Importing story from Storify...',
    'init_message' => t('Initializing'),
    'operations' => $operations,
    'finished' => 'storypal_import_finished_import',
    'error_message' => 'Error',
    'file' => drupal_get_path('module', 'storypal') . '/includes/storypal.batch.inc',
  );

  batch_set($batch);
  batch_process('<front>');

}

function storypal_import_finished_import($success, $results, $operations) {
  $msg = t('Import finished, @nodes node(s) has been created.', array('@nodes' => $results['processed']));
  drupal_set_message($msg);
  drupal_goto('storypal/import');
}


function storypal_storify_edit_story($nid, $delta) {
  $node = node_load($nid);
  $Storypal = new Storypal();

  $field_name = $Storypal->getFieldName($node->type);

  $field = $node->$field_name;

  $Storypal->setStory($field[$node->language][$delta]);
  $metadata = $Storypal->getStoryMetadata();

  $arguments = array(
    'hideBackToProfileBtn' => TRUE,
    'callback' => url('node/' . $nid . '/edit-story/submit', array('absolute' => TRUE)),
  );

  $element['title'] = array(
    '#markup' => '<h1>' . t('Edit the story \'@title\'', array('@title' => $metadata['title'])) . '</h1>',
    '#description' => 'desc',
  );

  $element['help'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => t('Once submitted, this story will be updated and you\'ll be redirect to the node edit page.'),
    '#attributes' => array(
      'class' => 'description',
    ),
  );

  $element['iframe'] = array(
    '#type' => 'html_tag',
    '#tag' => 'iframe',
    '#value' => '',
    '#attributes' => array(
      'height' => 600,
      'width' => '100%',
      'src' => url($Storypal->getUrl('edit'), array('absolute' => TRUE, 'query' => $arguments)),
    )
  );

  drupal_add_css(drupal_get_path('module', 'storypal') . '/styles/storypal.css');

  return $element;

}

function storypal_storify_edit_story_submit($nid) {
  $Storypal = new Storypal($_GET['storyPermalink']);
  cache_clear_all(sha1($Storypal->getUrl('json')), 'cache');
  drupal_goto('node/' . $nid . '/edit');
}

function storypal_storify_create_form($form_state, $vars, $type) {
  $Storypal = new Storypal();

  $msg = "If your Story exists, you can skip this page and <a href='@url'>create the <em>@type</em> directly</a>.";
  drupal_set_message(t($msg, array('@type' => $type, '@url' => url('node/add/'.$type, array('absolute' => TRUE)))));
  
  $arguments = array(
    'hideBackToProfileBtn' => TRUE,
    'callback' => url('storypal/callback/' . $type, array('absolute' => TRUE)),
  );

  $element['title'] = array(
    '#markup' => '<h1>'.t('Create a story using Storify').'</h1>',
    '#description' => 'desc',
  );

  $element['help'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => t('Once published, this story will be imported into Drupal as a node.'),
    '#attributes' => array(
      'class' => 'description',
    ),
  );

  $element['iframe'] = array(
    '#title' => 'coin',
    '#type' => 'html_tag',
    '#tag' => 'iframe',
    '#value' => '',
    '#attributes' => array(
      'height' => 600,
      'width' => '100%',
      'src' => url($Storypal->createUrl, array('absolute' => TRUE, 'query' => $arguments)),
    )
  );

  drupal_add_css(drupal_get_path('module', 'storypal') . '/styles/storypal.css');

  return $element;
}

function storypal_storify_callback($type) {

  $url = $_GET['storyPermalink'];

  $operations = array();
  $operations[] = array('storypal_type_check', array($type, $url));
  $operations[] = array('storypal_url_check', array($type, $url));
  $operations[] = array('storypal_url_import', array($type, $url));
  $operations[] = array('storypal_create_node', array($type, $url));

  $batch = array(
    'title' => 'Importing story from Storify...',
    'init_message' => t('Initializing'),
    'operations' => $operations,
    'finished' => 'storypal_import_finished',
    'error_message' => 'Error',
    'file' => drupal_get_path('module', 'storypal') . '/includes/storypal.batch.inc',
  );

  batch_set($batch);
  batch_process('<front>');
}

/**
 * Implementation of hook_admin_paths().
 */
function storypal_admin_paths() {
  $paths = array();
  $paths['storypal/create/*'] = TRUE;
  $paths['node/*/edit-story/*'] = TRUE;
  return $paths;
}

function storypal_form_alter(&$form, &$form_state, $form_id) {
  // Add a message on the top of the page when edit or add a node who
  // contains a field 'field_storify_url'.
  if (substr($form_id, -10) == '_node_form') {
    $fields = field_info_instances('node', $form['type']['#value']);
    foreach ($fields as $name => $field_data) {
      $field_info = field_info_field_by_id($field_data['field_id']);
      if ($field_info['type'] == 'field_storify') {
        $field[] = array();
        if (is_numeric(arg(1))) {
          $field = field_get_items('node', node_load(arg(1)), $name);
        }

        $Storypal = new Storypal($field[0]);
        if (!$Storypal->isValid()) {
          $msg = t('You can also use the Storify.com interface <a href="@url">to create a node</a>.', array('@url' => url('storypal/create/' . $form['type']['#value'], array('absolute' => TRUE))));
          drupal_set_message($msg);
        }
        break;
      }
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function storypal_theme() {
  return array(
    'storify_link' => array(
      'variables' => array('data' => array()),
      'template' => 'storify-link',
      'path' => drupal_get_path('module', 'storypal') . '/templates',
    ),
    'storify' => array(
      'variables' => array('data' => array()),
      'template' => 'storify',
      'path' => drupal_get_path('module', 'storypal') . '/templates',
    ),
    'storify_user' => array(
      'variables' => array('data' => array()),
      'template' => 'storify-user',
      'path' => drupal_get_path('module', 'storypal') . '/templates',
    ),
  );
}

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 * Provides the description of the field.
 */
function storypal_field_info() {
  return array(
    'field_storify' => array(
      'label' => t('Storify'),
      'description' => t('Display a story from Storify.com'),
      'default_widget' => 'field_storify_url_text',
      'default_formatter' => 'storypal_storify_default',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function storypal_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    $Storypal = new Storypal();

    if (!empty($item['url'])) {
      $Storypal->setStory($item['url']);
      if (!$Storypal->isValid()) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'storypal_invalid_url',
          'message' => t('This is not a valid Storify url.'),
        );
      }
    } else {
      if (!empty($item['user']) || !empty($item['slug'])) {
        $Storypal->setStory($item);
        if (!$Storypal->isValid()) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'storypal_invalid_url',
            'message' => t('This is not a valid Storify username and/or slug.'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function storypal_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'storypal_invalid_url':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function storypal_field_is_empty($item, $field) {
  if (empty($item['user']) || empty($item['slug'])) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function storypal_field_formatter_info() {
  return array(
    'storypal_storify_link' => array(
      'label' => t('Link to the story.'),
      'field types' => array('field_storify'),
      'settings' => array('noscript' => '1'),
    ),
    'storypal_storify_default' => array(
      'label' => t('Embedded.'),
      'field types' => array('field_storify'),
      'settings' => array('noscript' => '1', 'template' => 'storify'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function storypal_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();


  switch ($display['type']) {
    case 'storypal_storify_link':
      foreach ($items as $delta => $item) {

        $settings['noscript'] = ($item['noscript'] != '0') ? $item['noscript'] : $settings['noscript'];
        $settings['noscript']%=2;

        $Storypal = new Storypal($item);
        $story_metadata = $Storypal->getStoryMetadata();

        $element[$delta] = array(
          '#theme' => 'storify_link',
          '#data' => array('url' => $Storypal->getUrl('story'),
            'metadata' => $story_metadata,
            'link' => l(t('View the story @title on Storify.com', array('@title' => $story_metadata['title'])), $Storypal->getUrl('story')),
            'settings' => $settings,
            'noscript' => $Storypal->getStoryHtml()
        ));

      }
      break;

    case 'storypal_storify_default':
      foreach ($items as $delta => $item) {
        $Storypal = new Storypal($item);
        $story_metadata = $Storypal->getStoryMetadata();

        $script_embed = $Storypal->getUrl('embed');

        $noscript = ($item['noscript'] != '0') ? $item['noscript'] : $settings['noscript'];
        $noscript %= 2;
        if ($noscript == 1) {
          $story_noscript_html = $Storypal->getStoryHtml();
        } else {
          $story_noscript_html = '';
        }

        $template = ($item['template'] != 'default') ? $item['template'] : $settings['template'];
        if (!empty($template)) {
          $script_embed .= '&template=' . $template;
        }

        $element[$delta][] = array(
          '#theme' => 'storify',
          '#data' => array(
            'embed_url' => $script_embed,
            'metadata' => $story_metadata,
            'noscript' => $story_noscript_html,
            'settings' => $display['settings']
          ),
        );
      }
      break;

  }

  return $element;
}

/**
 * Implementation of hook_field_formatter_settings_summary().
 */
function storypal_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $noscript = ($settings['noscript'] == 1) ? 'Yes' : 'No';

  $items['items'][] = t('Include HTML for SEO: @noscript', array('@noscript' => $noscript));

  if ($display['type'] == 'storypal_storify_default') {
    $template = $settings['template'];
    $items['items'][] = t('Template: @template', array('@template' => $template));
  }

  $summary = theme('item_list', $items);

  return $summary;
}

/**
 * Implementation of hook_field_formatter_settings_form().
 */
function storypal_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  $element['noscript'] = array(
    '#title' => t('Include HTML for SEO ?'),
    '#type' => 'checkbox',
    '#default_value' => $settings['noscript'],
  );

  if ($display['type'] == 'storypal_storify_default') {
    $element['template'] = array(
      '#title' => t('Template'),
      '#type' => 'select',
      '#options' => array('storify' => 'Default', 'slideshow' => 'Slideshow'),
      '#default_value' => $settings['template'],
    );
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function storypal_field_widget_info() {
  return array(
    'field_storify_url_text' => array(
      'label' => t('Story from text input.'),
      'field types' => array('field_storify'),
    ),
    'field_storify_user_and_slug' => array(
      'label' => t('Story from Twitter username and Storify slug.'),
      'field types' => array('field_storify'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function storypal_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $item = array('user' => NULL, 'slug' => NULL, 'template' => 'default', 'noscript' => 'default');
  $Storypal = new Storypal();

  if (isset($items[$delta])) {
    $item = $items[$delta];
    $Storypal->setStory($item);
  }

  switch ($instance['widget']['type']) {
    case 'field_storify_url_text':
      $element += array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#element_validate' => array('_storypal_field_storify_url_validate'),
      );
      $element['url'] = array(
        '#title' => 'Storify URL',
        '#description' => t('Copy-paste the URL of your story, from Storify.com.'),
        '#type' => 'textfield',
        '#default_value' => $Storypal->getUrl('story'),
        '#size' => 100,
        '#maxlength' => 100,
      );
      $element['user'] = array(
        '#title' => t('Twitter Username'),
        '#type' => 'hidden',
        '#default_value' => $Storypal->getUser(),
        '#size' => 50,
        '#maxlength' => 50,
        '#description' => t('This must be a valid Twitter username.'),
      );
      $element['slug'] = array(
        '#title' => t('Slug'),
        '#type' => 'hidden',
        '#default_value' => $Storypal->getSlug(),
        '#size' => 100,
        '#maxlength' => 100,
        '#description' => t('Find a good description of the slug and I\'ll put it here ! ;-)'),
      );
      break;

    case 'field_storify_user_and_slug':
      $element += array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
      );
      $element['user'] = array(
        '#title' => t('Twitter Username'),
        '#type' => 'textfield',
        '#default_value' => $Storypal->getUser(),
        '#size' => 50,
        '#maxlength' => 50,
        '#description' => t('This must be a valid Twitter username.'),
      );
      $element['slug'] = array(
        '#title' => t('Slug'),
        '#type' => 'textfield',
        '#default_value' => $Storypal->getSlug(),
        '#size' => 100,
        '#maxlength' => 100,
        '#description' => t('Find a good description of the slug and I\'ll put it here ! ;-)'),
      );
      break;
  }

  $element['template'] = array(
    '#title' => 'Choose the rendering template',
    '#description' => t('Default or Slideshow'),
    '#type' => 'select',
    '#options' => array('default' => 'From default', 'storify' => 'Storify', 'slideshow' => 'Slideshow'),
    '#default_value' => $item['template'],
  );

  $element['noscript'] = array(
    '#title' => 'Include HTML for SEO ?',
    '#description' => t('Enable if you want to include a HTML version of the story in <em>noscript</em> tags.'),
    '#type' => 'radios',
    '#options' => array('0' => 'From default', '1' => 'Yes', '2' => 'No'),
    '#default_value' => $item['noscript'],
  );

  if ($Storypal->isValid()) {
    $element['edit'] = array(
      '#markup' => l('Edit this story inline', 'node/' . arg(1) . '/edit-story/' . $delta)
    );
  }

  return $element;
}

/**
 * Custom validation for form element.
 */
function _storypal_field_storify_url_validate($element, &$form_state) {
  $Storypal = new Storypal($element['url']['#value']);
  form_set_value($element['user'], $Storypal->getUser(), $form_state);
  form_set_value($element['slug'], $Storypal->getSlug(), $form_state);
}

/**
 * End of field setup.
**/


/**
 * Implements hook_filter_info().
 */
function storypal_filter_info() {
  $filters['storify'] = array(
    'title' => t('Storify'),
    'description' => t('Render [storify:STORY_FROM_STORIFY,template=storify,noscript=1] as you would see it on Storify.com.<br/>Arguments are optionals and use default filter\'s settings when they are ommitted.'),
    'process callback' => '_storypal_filter_process',
    'default settings' => array(
      'template' => 'storify',
      'noscript' => 1,
    ),
    'settings callback' => '_storypal_filter_settings',
    'tips callback' => '_storypal_filter_tips',
  );
  return $filters;
}

/**
 * Implements the tips callback of the filter.
 */
function _storypal_filter_tips($filter, $format, $long = FALSE) {
  $urls= array(
    '[storify:http://storify.com/drupol/introduction]',
    '[storify:xdamman/storify-logo,template=storify]',
    '[storify:http://storify.com/storify/now-you-can-create-storify-stories-from-the-wordpr,noscript=0]',
    '[storify:vinch01/my-first-steps-in-san-francisco,template=slideshow,noscript=1]',
  );

  return t("You can use [storify] placeholders to add a Story into your content.<br/>Here's a couple of working examples:".theme('item_list', array('items'=>$urls)));
}

/**
 * Implements the settings callback of the filter.
 */
function _storypal_filter_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['template'] = array(
    '#title' => 'Choose the rendering template',
    '#description' => t('Default or Slideshow'),
    '#type' => 'select',
    '#options' => array('storify' => 'Storify', 'slideshow' => 'Slideshow'),
    '#default_value' => isset($filter->settings['template']) ? $filter->settings['template'] : $defaults['template'],
  );

  $settings['noscript'] = array(
    '#title' => 'Include HTML for SEO ?',
    '#description' => t('Enable if you want to include a HTML version of the story in <em>noscript</em> tags.'),
    '#type' => 'radios',
    '#options' => array('1' => 'Yes', '2' => 'No'),
    '#default_value' => isset($filter->settings['noscript']) ? $filter->settings['noscript'] : $defaults['noscript'],
  );
  return $settings;
}

/**
 * Implements the process callback of the filter.
 */
function _storypal_filter_process($text, $filter) {
  preg_match_all('/\[storify:([^\s\]]*)\]/', $text, $matches);

  $Storypal = new Storypal();
  $result = array();

  foreach($matches[1] as $idx => $value) {

    $parameters = explode(",", $value);
    $item = array('url'=>NULL,'settings' => $filter->settings);

    foreach($parameters as $parameter) {
      if (strpos($parameter, '=') !== FALSE) {
        list($setting_name, $setting_value) = explode('=', $parameter);
        $item['settings'][$setting_name] = trim(check_plain($setting_value));
        continue;
      }

      if (!isset($item['url'])) {
        if ( $parse = parse_url($parameter) ) {
          if (isset($parse['scheme']) && isset($parse['host'])) {
            $Storypal->setStory($parameter);
            $item['url'] = $Storypal->getUrl('story');
            continue;
          }
        }

        if ( strpos($parameter, '/') !== FALSE ) {
          list($item['user'], $item['slug']) = explode('/', $parameter);
          $Storypal->setStory($item);
          $item['url'] = $Storypal->getUrl('story');
        }
      }
    }

    $Storypal->setStory($item['url']);
    if (!$Storypal->isValid()) {
      $result[$idx] = $matches[0][$idx];
      continue;
    }

    $embedUrl = $Storypal->getUrl('embed');
    if ($item['settings']['template'] == 'slideshow') {
      $embedUrl .= '&template=slideshow';
    }

    $element = array(
      '#theme' => 'storify',
      '#data' => array(
        'embed_url' => $embedUrl,
        'metadata' => $Storypal->getStoryMetadata(),
        'noscript' => $Storypal->getStoryHtml(),
        'settings' => $item['settings']),
    );

    $result[$idx] = drupal_render($element);
  }

  return str_replace($matches[0], $result, $text);
}
