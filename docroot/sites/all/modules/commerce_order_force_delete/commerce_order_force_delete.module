<?php

/**
 * @file
 * Provides an emergency order deletion functionality.
 *
 * Use this only if the normal functionality fails due to order corruption.
 * See also: https://www.drupal.org/node/2155577#comment-8400057
 * There are other possible causes of corruption but that's the most likely and
 * this will fix it.
 */

/**
 * Implements hook_menu().
 */
function commerce_order_force_delete_menu() {
  $items = array();
  $items['admin/commerce/orders/%commerce_order/force_delete'] = array(
    'title' => 'Force Delete',
    'page callback' => 'commerce_order_force_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('delete', 3),
    'description' => 'Force delete an order',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function commerce_order_force_delete_help($path, $arg) {
  switch ($path) {

    // Display readme or link to module page if can't display the readme on the
    // main Drupal admin help pages at /admin/help/.
    case 'admin/help#commerce_order_force_delete':
      $readme_path = drupal_get_path('module', 'commerce_order_force_delete') . '/README.md';
      if (file_exists($readme_path)) {
        if (module_exists('markdown')) {
          $filters = module_invoke('markdown', 'filter_info');
          $info = $filters['filter_markdown'];
          if (function_exists($info['process callback'])) {
            return $info['process callback'](
              file_get_contents($readme_path), NULL);
          }
          else {
            return '<pre>' . file_get_contents($readme_path) . '</pre>';
          }
        }
        else {
          return '<pre>' . file_get_contents($readme_path) . '</pre>';
        }
      }
      else {
        return "<p>" . t("Readme unavailable. Please see %l for help.", array(
          '%l' => "<a href='https://www.drupal.org/project/commerce_order_force_delete'>module
          page</a>")) . "</p>";
      }
  }
}

/**
 * Function to force delete an order.
 *
 * @param int $order_id
 *   The numeric id of the order to delete.
 */
function commerce_order_force_delete_func($order_id) {
  try {
    $tables = array(
      'commerce_order' => 'order_id',
      'field_data_commerce_line_items' => 'entity_id',
      'commerce_line_item' => 'order_id',
    );
    foreach ($tables as $table => $fk) {
      db_delete($table)
        ->condition($fk, $order_id)
        ->execute();
    }
    return TRUE;
  }
  catch (Exception $e) {
    return FALSE;
  }
}

/**
 * Form callback: confirmation form for force deleting an order.
 *
 * @param object $order
 *   The order object to delete.
 *
 * @return array
 *   The form array to request confirmation that you really want to do this!
 *
 * @see confirm_form()
 */
function commerce_order_force_delete_form($form, &$form_state, $order) {
  $form_state['order'] = $order;

  $form['#submit'][] = 'commerce_order_force_delete_form_submit';

  $form = confirm_form($form,
    t('Are you sure you want to force delete order @number?', array('@number' => $order->order_number)),
    '',
    '<p>' . t('Deleting this order cannot be undone. WARNING: This method of deleting the order should only be done if the normal delete method fails.') . '</p>',
    t('Delete'),
    t('Cancel'),
    'confirm'
  );

  return $form;
}

/**
 * Submit callback for commerce_order_force_delete_form().
 */
function commerce_order_force_delete_form_submit($form, &$form_state) {
  $order = $form_state['order'];

  if (commerce_order_force_delete_func($order->order_id)) {
    drupal_set_message(t('Order @number has been force deleted.', array('@number' => $order->order_number)));
    watchdog('commerce_order', 'Force deleted order @number.', array('@number' => $order->order_number), WATCHDOG_NOTICE);
  }
  else {
    drupal_set_message(t('Order @number could not be deleted.', array('@number' => $order->order_number)), 'error');
  }
}

/**
 * Form callback wrapper: confirmation form for deleting an order.
 *
 * @param object $order
 *   The order object to delete through the form.
 *
 * @see commerce_order_force_delete_form()
 */
function commerce_order_force_delete_form_wrapper($order) {
  // Include the forms file from the Order module.
  return drupal_get_form('commerce_order_force_delete_form', $order);
}
