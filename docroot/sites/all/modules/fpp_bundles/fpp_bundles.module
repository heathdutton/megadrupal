<?php
/**
 * @file
 * Module for creating panels from admin interface.
 *
 * @author Sergey Bondarenko <broken@propeople.com.ua>
 */

/**
 * Machine name of the module.
 */
define('FPP_BUNDLES_MACHINE_NAME', 'fpp_bundles');
/**
 * An entity machine name.
 */
define('FPP_BUNDLES_ENTITY_TYPE', 'fieldable_panels_pane');
/**
 * An entity access permissions.
 */
define('FPP_BUNDLES_ENTITY_ACCESS', 'administer fieldable panels panes');
/**
 * An entity admin page.
 */
define('FPP_BUNDLES_ADMIN_URL', 'admin/structure/fieldable-panels-panes');
/**
 * Minimum characters number for name of the bundle.
 */
define('FPP_BUNDLES_MINIMUM_CHARS_FOR_NAME', 3);
/**
 * Name of an action for create new bundle. Should not be changed.
 */
define('FPP_BUNDLES_CREATE_BUNDLE_ACTION', 'insert');
/**
 * Name of an action for update an existing bundle. Should not be changed.
 */
define('FPP_BUNDLES_UPDATE_BUNDLE_ACTION', 'update');
/**
 * Name of an action for remove an existing bundle. Should not be changed.
 */
define('FPP_BUNDLES_REMOVE_BUNDLE_ACTION', 'delete');

/**
 * Implements hook_fpp_bundles_bundle_update().
 */
function fpp_bundles_fpp_bundles_bundle_insert(\FppBundle $bundle) {
  $_SESSION['test']['insert'] = $bundle;
}
/**
 * Implements hook_fpp_bundles_bundle_update().
 */
function fpp_bundles_fpp_bundles_bundle_update(\FppBundle $bundle) {
  $_SESSION['test']['update'] = $bundle;
}
/**
 * Implements hook_fpp_bundles_bundle_update().
 */
function fpp_bundles_fpp_bundles_bundle_delete(\FppBundle $bundle) {
  $_SESSION['test']['delete'] = $bundle;
}

/**
 * Main controller of the module.
 *
 * @param string $option_name
 *   Option name, a value of which will be returned.
 *
 * @return array
 *   Module settings or an option value.
 */
function fpp_bundles($option_name = '') {
  static $settings = array();

  if (!$settings) {
    foreach (array(
      'autocomplete category' => array(
        'type' => MENU_CALLBACK,
        'page callback' => TRUE,
        'page arguments' => array(5),
      ),
      FPP_BUNDLES_REMOVE_BUNDLE_ACTION => array(
        'title' => t('Remove the bundle'),
      ),
      FPP_BUNDLES_UPDATE_BUNDLE_ACTION => array(
        'title' => t('Update the bundle'),
      ),
      FPP_BUNDLES_CREATE_BUNDLE_ACTION => array(
        'type' => MENU_LOCAL_ACTION,
        'title' => t('Create the bundle'),
      ),
    ) as $human_name => $data) {
      $relative_path = str_replace(' ', '/', $human_name);
      // All menu routes of the module relative to the next URL:
      // "admin/structure/fieldable-panels-panes/list/{module_route}".
      // That's necessary to be a part of the FPP module and complement it.
      $route_path = FPP_BUNDLES_ADMIN_URL . '/' . $relative_path;
      // The suffix of the routing callback function by default is a
      // "manage_bundle". Due to this, default callback function name
      // is a "_fpp_bundles_manage_bundle".
      $callback_suffix = 'manage_bundle';

      // If we don't want to use the default route function, then we can
      // override it, defining the "page callback". Suffix of the callback
      // function will be generated automatically from relative route path.
      if (isset($data['page callback'])) {
        $callback_suffix = str_replace(' ', '_', $human_name);
        unset($data['page callback']);
      }

      $settings['menu_routes'][$route_path] = $data + array(
        'type' => MENU_VISIBLE_IN_BREADCRUMB,
        'file' => _fpp_bundles_include_file_path('admin'),
        'page callback' => _fpp_bundles_callback_prefix($callback_suffix),
        'page arguments' => array(3),
        'access arguments' => array(FPP_BUNDLES_ENTITY_ACCESS),
      );

      $settings['menu_paths'][$human_name] = $route_path;

      if (isset($data['title'])) {
        $settings['action_titles'][$human_name] = $data['title'];
      }
    }
  }

  return isset($settings[$option_name]) ? $settings[$option_name] : $settings;
}

/**
 * Get an object for working with DB.
 *
 * @return \FppBundlesDatabase
 *   An object instance.
 */
function fpp_bundles_db() {
  return \FppBundlesDatabase::instance(FPP_BUNDLES_MACHINE_NAME);
}

/**
 * Create or update a bundle programmatically.
 *
 * @see \FppBundlesDatabase::saveBundle()
 */
function fpp_bundles_save(array $values) {
  return fpp_bundles_db()->saveBundle($values);
}

/**
 * Remove bundle programmatically.
 *
 * @see \FppBundlesDatabase::removeBundle()
 */
function fpp_bundles_remove($bid) {
  return fpp_bundles_db()->removeBundle($bid);
}

/**
 * Implements hook_help().
 */
function fpp_bundles_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#' . FPP_BUNDLES_MACHINE_NAME:
      return theme(_fpp_bundles_prefix('_admin_help'), func_get_args());
  }

  return $output;
}

/**
 * Implements hook_theme().
 */
function fpp_bundles_theme($existing, $type, $theme, $path) {
  $suggestions = array();

  foreach (array('_admin_help') as $suggestion) {
    $suggestion = _fpp_bundles_prefix($suggestion);
    $suggestions[$suggestion] = array(
      'template' => str_replace('_', '-', $suggestion),
      'path' => "$path/templates",
    );
  }

  return $suggestions;
}

/**
 * Create the module route.
 *
 * @return array
 *   An array of menu routes.
 */
function fpp_bundles_menu() {
  return fpp_bundles('menu_routes');
}

/**
 * Implements hook_features_api().
 */
function fpp_bundles_features_api() {
  $integrations = array();

  $integrations[FPP_BUNDLES_MACHINE_NAME] = array(
    'name' => t('Fieldable Panels Panes Bundles'),
    'file' => drupal_get_path('module', FPP_BUNDLES_MACHINE_NAME) . '/' . _fpp_bundles_include_file_path('features'),
    'default_hook' => FPP_BUNDLES_MACHINE_NAME,
    'default_file' => FEATURES_DEFAULTS_INCLUDED,
    'feature_source' => TRUE,
  );

  return $integrations;
}

/**
 * Implements hook_entity_info_alter().
 */
function fpp_bundles_entity_info_alter(&$entity_info) {
  /* @var \FppBundle $bundle */
  foreach (fpp_bundles_db()->getAllBundles() as $machine_name => $bundle) {
    $entity_info[FPP_BUNDLES_ENTITY_TYPE]['bundles'][$machine_name] = array(
      'bid' => $bundle->getBundleId(),
      'label' => $bundle->getHumanName(),
      'pane category' => $bundle->getCategoryName() ?: t('Custom'),
      'pane top level' => $bundle->isTopLevelPanel(),
      'admin' => array(
        'path' => FPP_BUNDLES_ADMIN_URL . '/manage/%fieldable_panels_panes_type',
        'real path' => FPP_BUNDLES_ADMIN_URL . "/manage/$machine_name",
        'bundle argument' => 4,
        'access arguments' => array(FPP_BUNDLES_ENTITY_ACCESS),
      ),
    );
  }
}

/**
 * Implements hook_entity_load().
 */
function fpp_bundles_entity_load(array $entities, $type) {
  if ($type == FPP_BUNDLES_ENTITY_TYPE) {
    $db = fpp_bundles_db();

    foreach ($entities as $entity) {
      $bundle = $db->getBundleByDbIndex('unique', $entity->bundle);

      if ($bundle) {
        $entity->assets = array();

        if ($bundle->isAssetsLoadAutomatically()) {
          _fpp_bundles_collect_assets($entity->assets, $entity->bundle);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function fpp_bundles_preprocess_fieldable_panels_pane(&$variables) {
  $entity = $variables['elements']['#element'];

  // The "assets" property is provided by this module and set
  // only for entities that has been created from UI.
  if (isset($entity->assets)) {
    // Add additional assets for administrative users.
    if ($variables['is_admin']) {
      _fpp_bundles_collect_assets($entity->assets, "admin/$entity->bundle-admin");
    }

    foreach ($entity->assets as $type => $files) {
      array_map("drupal_add_$type", $files);
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function fpp_bundles_menu_alter(&$items) {
  $items[FPP_BUNDLES_ADMIN_URL]['page callback'] = _fpp_bundles_callback_prefix('entities_page');
}

/**
 * Get the information about entity of the "fieldable_panels_pane" type.
 *
 * @return \stdClass
 *   Entity information.
 */
function fpp_bundles_get_fieldable_panels_pane_entity() {
  return (object) entity_get_info(FPP_BUNDLES_ENTITY_TYPE);
}

/**
 * Callback function for the FPP Entities page.
 *
 * @return array
 *   An array with elements for render.
 */
function _fpp_bundles_entities_page() {
  $items = $rows = array();

  /* @var \FppBundle $bundle */
  foreach (fpp_bundles_db()->getAllBundles(10) as $machine_name => $bundle) {
    $manage_entity_url = FPP_BUNDLES_ADMIN_URL . "/manage/$machine_name";
    $actions = array();

    $actions['entity'] = _fpp_bundles_build_links_for_operations_with_bundle($manage_entity_url);

    foreach (array(
      FPP_BUNDLES_UPDATE_BUNDLE_ACTION => t('update'),
      FPP_BUNDLES_REMOVE_BUNDLE_ACTION => t('remove'),
    ) as $action_type => $action_name) {
      $actions['bundle'][$action_type] = array(
        'title' => $action_name,
        'href' => _fpp_bundles_get_menu_path($action_type) . '/' . $bundle->getBundleId(),
      );
    }

    foreach (array_keys($actions) as $action_type) {
      $actions[$action_type] = _fpp_bundles_theme_links_block($actions[$action_type]);
    }

    $rows[] = array(
      'name' => l($bundle->getHumanName(), $manage_entity_url),
      'category' => $bundle->getCategoryName(),
    ) + $actions;
  }

  $items['bundles'] = array(
    '#theme' => 'table',
    '#header' => array(
      'name' => t('Name'),
      'category' => t('Category'),
      'entity' => t('Entity actions'),
      'bundle' => t('Bundle actions'),
    ),
    '#rows' => $rows,
    '#empty' => t('Any bundle has not been created.'),
  );

  $items['pager'] = array(
    '#theme' => 'pager',
  );

  $items['separator'] = array(
    '#tag' => 'h4',
    '#type' => 'html_tag',
    '#value' => t('Bundles, that has been created programmatically.'),
    '#attributes' => array(
      'class' => 'form-item',
    ),
  );

  $items['in_code'] = array(
    '#theme' => 'table',
    '#header' => array(
      'name' => t('Name'),
      'category' => t('Category'),
      'operations' => t('Operations'),
    ),
    '#rows' => _fpp_bundles_get_bundles_stored_in_code(),
  );

  return $items;
}

/**
 * Get an array with links for entity managing.
 *
 * @param string $url_prefix
 *   Admin URL to bundle page. Will be suffixed by action type.
 *
 * @return array
 *   An associative array where key is a machine name of link and
 *   value - an array with two keys: "title" and "href".
 */
function _fpp_bundles_build_links_for_operations_with_bundle($url_prefix) {
  $actions = array();

  foreach (array(
    'add' => t('add panel'),
    'fields' => t('manage fields'),
    'display' => t('manage display'),
  ) as $action_type => $action_name) {
    $actions[$action_type] = array(
      'title' => $action_name,
      'href' => "$url_prefix/$action_type",
    );
  }

  return $actions;
}

/**
 * Wrapper for Drupal "theme()" function.
 *
 * @param array $links
 *   An array that can be rendered by Drupal mechanism.
 *
 * @return string
 *   HTML markup.
 */
function _fpp_bundles_theme_links_block(array $links) {
  return theme('links', array(
    'links' => $links,
    'attributes' => array(
      'class' => array('links', 'inline'),
    ),
  ));
}

/**
 * Get an array with bundles for render which has been created programmatically.
 */
function _fpp_bundles_get_bundles_stored_in_code() {
  $rows = array();

  foreach (fpp_bundles_get_fieldable_panels_pane_entity()->bundles as $bundle) {
    // If the bundle does not have the "bid" it means that it has
    // been created programmatically.
    if (!isset($bundle['bid'])) {
      $rows[] = array(
        'name' => l($bundle['label'], $bundle['admin']['real path']),
        'category' => isset($bundle['pane category']) ? $bundle['pane category'] : '',
        'operations' => _fpp_bundles_theme_links_block(_fpp_bundles_build_links_for_operations_with_bundle($bundle['admin']['real path'])),
      );
    }
  }

  return $rows;
}

/**
 * Get the URL by action name.
 *
 * @param string $action_name
 *   Name of performed action.
 *
 * @return string
 *   Relative URL or an empty string if action does not exist.
 */
function _fpp_bundles_get_menu_path($action_name) {
  $paths = fpp_bundles('menu_paths');
  return isset($paths[$action_name]) ? $paths[$action_name] : '';
}

/**
 * Get the title by action name.
 *
 * @param string $action_name
 *   Name of performed action.
 *
 * @return string
 *   Title for the specified action or an empty string if action does not exist.
 */
function _fpp_bundles_get_action_title($action_name) {
  $titles = fpp_bundles('action_titles');
  return isset($titles[$action_name]) ? $titles[$action_name] : '';
}

/**
 * Clear caches of the Drupal theme and entities.
 */
function _fpp_bundles_clear_caches() {
  entity_info_cache_clear();
  drupal_theme_rebuild();
}

/**
 * Create function name that prefixed by module name.
 *
 * @see _fpp_bundles_prefix()
 */
function _fpp_bundles_callback_prefix($suffix) {
  return '_' . _fpp_bundles_prefix($suffix);
}

/**
 * Prepend module name into a string.
 *
 * @param string $suffix
 *   Ending of a string.
 *
 * @return string
 *   Prefixed string.
 */
function _fpp_bundles_prefix($suffix) {
  return FPP_BUNDLES_MACHINE_NAME . "_$suffix";
}

/**
 * Get the relative, to the module directory, file path from "includes" dir.
 *
 * @param string $type
 *   File extension.
 *
 * @return string
 *   Relative path.
 */
function _fpp_bundles_include_file_path($type) {
  return 'includes/' . FPP_BUNDLES_MACHINE_NAME . ".$type.inc";
}

/**
 * Get an action success message.
 *
 * @param string $action
 *   An action name.
 * @param string $bundle_name
 *   The bundle name.
 *
 * @see \FppBundlesDatabase::performAction()
 *
 * @return string
 *   Success message.
 */
function _fpp_bundles_get_action_success_message_by_name($action, $bundle_name) {
  $status = '';

  switch ($action) {
    case FPP_BUNDLES_CREATE_BUNDLE_ACTION:
      $status = t('created');
      break;

    case FPP_BUNDLES_UPDATE_BUNDLE_ACTION:
      $status = t('updated');
      break;

    case FPP_BUNDLES_REMOVE_BUNDLE_ACTION:
      $status = t('removed');
      break;
  }

  if ($status) {
    return t('The "!bundle" bundle was successfully !status!', array(
      '!bundle' => $bundle_name,
      '!status' => $status,
    ));
  }

  return $status;
}

/**
 * Transform a any string to machine name.
 *
 * @param string $string
 *   Input string for transformations.
 *
 * @example
 *   String: "__-_   An awe-some manager!#$%^&_+123=-ÆæØä'Ö\"@ (bundle)"
 *   Will be transformed to: "an_awe_some_manager123_bundle".
 *
 * @return string
 *   Generated name.
 */
function _fpp_bundles_create_machine_name($string) {
  // Firstly, set to lowercase the input string. Secondly, leave in a
  // row only lowercase latin characters, numbers, and single spaces,
  // but only between the words. Thirdly, replace spaces to underscores.
  return trim(preg_replace('/\s+|-+/', '_', trim(preg_replace('/[^a-z\d\s-]/', '', strtolower($string)))), '_');
}

/**
 * Collect an assets for a panel.
 *
 * @param array $assets
 *   An array with "css" & "js" keys.
 * @param string $name
 *   File name without extension.
 */
function _fpp_bundles_collect_assets(array &$assets, $name) {
  $theme_path = path_to_theme();

  foreach (array('css', 'js') as $extension) {
    $file = $theme_path . str_replace('_', '-', "/$extension/fieldable-panels-panes/$name.$extension");

    if (file_exists(DRUPAL_ROOT . "/$file")) {
      $assets[$extension][] = $file;
    }
  }
}

