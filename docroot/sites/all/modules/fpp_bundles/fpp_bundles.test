<?php
/**
 * @file
 * Test the "FPP Bundles" module functionality.
 */

/**
 * Class FppBundlesTestCase.
 */
class FppBundlesTestCase extends \DrupalWebTestCase {
  /**
   * Module object.
   *
   * @var \FppBundlesDatabase
   */
  protected $db;

  /**
   * Give display information to the SimpleTest system.
   *
   * @return array
   *   Keyed array with information for SimpleTest.
   */
  public static function getInfo() {
    $name = 'FPP Bundles';

    return array(
      'name' => $name,
      'group' => $name,
      'description' => "Ensure that the \"$name\" provided functions properly.",
    );
  }

  /**
   * Setup the test environment.
   */
  public function setUp() {
    $this->db = fpp_bundles_db();
    parent::setUp(FPP_BUNDLES_MACHINE_NAME);
    $this->drupalLogin($this->drupalCreateUser(array(FPP_BUNDLES_ENTITY_ACCESS)));
  }

  /**
   * Build an URL to page on that can be performed some action.
   *
   * @param string $action
   *   URL suffix.
   *
   * @return string
   *   Page URL.
   */
  public function getActionUrl($action) {
    return '/' . FPP_BUNDLES_ADMIN_URL . "/$action";
  }

  /**
   * Programmatically creating the bundle in database.
   *
   * @param array $bundle
   *   An array with bundle data.
   *
   * @return array
   *   Information about bundle that has been created.
   */
  public function createBundleProgrammatically(array $bundle) {
    try {
      $bundle['bid'] = $this->db->insertBundle($this->db->prepareBundleData($bundle));
    }
    catch (\FppBundlesException $e) {
      $this->error($e->getMessage());

      return FALSE;
    }

    return $bundle;
  }

  /**
   * Get the necessary data for creating the bundle.
   *
   * @param string $human_name
   *   The bundle name.
   *
   * @return array
   *   Information.
   */
  public function getRandomBundleData($human_name = '') {
    $human_name = $human_name ?: $this->randomString(14);

    $edit = array();
    $edit['name'] = $human_name;
    $edit['level'] = 0;
    $edit['assets'] = 1;
    $edit['machine'] = preg_replace('/[^a-z0-9_]+/', '_', strtolower($human_name));
    $edit['category'] = $this->randomName(8);

    return $edit;
  }

  /**
   * Creating a new bundle.
   */
  public function testCreateBundle() {
    $action = FPP_BUNDLES_CREATE_BUNDLE_ACTION;
    $url = $this->getActionUrl($action);

    // Go to the creating page.
    $this->drupalGet($url);
    $this->assertResponse(200, 'User is allowed to see the page for creating a bundle.');
    $this->assertFieldByName('name', '', 'Found the "name" field in creating form.');

    // Create new bundle.
    $edit = $this->getRandomBundleData('Test bundle');
    $message = _fpp_bundles_get_action_success_message_by_name($action, $edit['name']);
    $this->drupalPost($url, $edit, _fpp_bundles_get_action_title($action));
    $this->assertResponse(200, 'The request for bundle creation has been successfully sent.');
    $this->assertText($message, $message);
  }

  /**
   * Test case, when the name consists only from cyrillic letters.
   */
  public function testCreateBundleWithCyrillicSymbols() {
    $action = FPP_BUNDLES_CREATE_BUNDLE_ACTION;
    $message = t('The machine-readable name must contain unique characters.');

    $this->drupalPost($this->getActionUrl($action), $this->getRandomBundleData('Кириллица'), _fpp_bundles_get_action_title($action));
    $this->assertText($message, $message);
  }

  /**
   * Test case, when the name consists only from numbers.
   */
  public function testCreateBundleWithNumbers() {
    $action = FPP_BUNDLES_CREATE_BUNDLE_ACTION;
    $message = t('The name of bundle should not contain only numbers.');

    $this->drupalPost($this->getActionUrl($action), $this->getRandomBundleData(' 22 1212 3432'), _fpp_bundles_get_action_title($action));
    $this->assertText($message, $message);
  }

  /**
   * Test case, when the name consists less than five symbols.
   */
  public function testCreateBundleWithShortName() {
    $action = FPP_BUNDLES_CREATE_BUNDLE_ACTION;
    $message = t('The name of bundle should contain more than !number symbols.', array(
      '!number' => FPP_BUNDLES_MINIMUM_CHARS_FOR_NAME,
    ));

    $this->drupalPost($this->getActionUrl($action), $this->getRandomBundleData(' B1'), _fpp_bundles_get_action_title($action));
    $this->assertText($message, $message);
  }

  /**
   * Editing an existing bundle.
   */
  public function testUpdateBundle() {
    // Create the bundle.
    $action = FPP_BUNDLES_UPDATE_BUNDLE_ACTION;
    $bundle = $this->createBundleProgrammatically($this->getRandomBundleData('The bundle name'));
    $url = $this->getActionUrl($action . '/' . $bundle['bid']);

    // Go to the editing page.
    $this->drupalGet($url);
    $this->assertResponse(200, 'User is allowed to see the page for editing a bundle.');
    $this->assertFieldByName('name', $bundle['name'], 'Found filled field "name" on the edit form.');

    // Update data.
    $bundle['name'] = 'Updated bundle';
    unset($bundle['machine']);

    $message = _fpp_bundles_get_action_success_message_by_name($action, $bundle['name']);
    $this->drupalPost($url, $bundle, _fpp_bundles_get_action_title($action));
    $this->assertResponse(200, 'The request for bundle updating has been successfully sent.');
    $this->assertText($message, $message);
  }

  /**
   * Removing an existing bundle.
   */
  public function testRemoveBundle() {
    // Create the bundle.
    $action = FPP_BUNDLES_REMOVE_BUNDLE_ACTION;
    $bundle = $this->createBundleProgrammatically($this->getRandomBundleData('The bundle name'));
    $url = $this->getActionUrl($action . '/' . $bundle['bid']);

    // Go to the removing page.
    $this->drupalGet($url);
    $this->assertResponse(200, 'User is allowed to see the page for removing a bundle.');
    $this->assertText($bundle['name'], 'Found filled field "name" on the edit form.');

    // Remove the bundle.
    $message = _fpp_bundles_get_action_success_message_by_name($action, $bundle['name']);
    $this->drupalPost($url, array(), _fpp_bundles_get_action_title($action));
    $this->assertResponse(200, 'The request for bundle deletion has been successfully sent.');
    $this->assertText($message, $message);
  }

  /**
   * Programmatically create/update/remove the bundle.
   */
  public function testCreateUpdateRemoveBundleProgrammatically() {
    // Create a bundle.
    $status = fpp_bundles_save(array(
      'name' => t('New bundle'),
      'category' => t('FPP Bundles'),
    ));
    $this->assertTrue($status, 'The bundle was created with help of "fpp_bundles_save" function.');

    // Update the created bundle.
    $status = fpp_bundles_save(array(
      'bid' => 1,
      'name' => t('New bundle name'),
      'level' => 1,
      'assets' => 0,
    ));
    $this->assertTrue($status, 'The bundle was updated with help of "fpp_bundles_save" function.');

    // Remove the created bundle.
    $status = fpp_bundles_remove(1);
    $this->assertTrue($status, 'The bundle was removed with help of "fpp_bundles_save" function.');
  }
}
