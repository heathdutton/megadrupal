<?php
/**
 * @file
 * Estonian Personal identification code (isikukood) field.
 *
 * http://en.wikipedia.org/wiki/National_identification_number#Estonia
 * The form is GYYMMDDSSSC, where G shows sex and century of birth
 * (odd number male, even number female, 1-2 19th century,
 * 3-4 20th century, 5-6 21st century), SSS is a serial number separating
 * persons born on the same date and C a checksum.
 */

/**
 * Implements hook_permission().
 */
function est_id_code_permission() {
  $perms['view own eidcode'] = array('title' => t('View own Estonian ID code'));
  $perms['edit own eidcode'] = array('title' => t('Edit own Estonian ID code'));
  $perms['view any eidcode'] = array('title' => t('View any Estonian ID code'));
  $perms['edit any eidcode'] = array('title' => t('Edit any Estonian ID code'));

  return $perms;
}

/**
 * Implements hook_field_access().
 *
 * The tricky thing here is that a field can be attached to any type
 * of entity, so it's not always trivial to figure out whether
 * $account 'owns' the entity. So it's checked if entity has an "uid".
 *
 * @see est_id_code_permissions()
 */
function est_id_code_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['type'] == 'est_id_code_field') {
    $context = 'any';
    if ($entity && isset($entity->uid)) {
      if ($entity->uid == $account->uid) $context = 'own';
    }
    $permission = $op . ' ' . $context . ' eidcode';
    $access = user_access($permission, $account);
    return $access;
  }
  return TRUE;
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function est_id_code_field_info() {
  return array(
    'est_id_code_field' => array(
      'label' => t('Estonian ID code'),
      'description' => t('The Estonian ID code field.'),
      'default_widget' => 'eic_widget_plain',
      'default_formatter' => 'eic_formatter_plain',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * @see est_id_code_field_widget_error()
 */
function est_id_code_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (!_est_id_code_validate($item['value'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'est_id_code_invalid',
          'message' => t('This code is not correct.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function est_id_code_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see est_id_code_field_formatter_view()
 */
function est_id_code_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'eic_formatter_plain' => array(
      'label' => t('Plain'),
      'field types' => array('est_id_code_field'),
    ),
    'eic_formatter_formatted' => array(
      'label' => t('Formatted'),
      'field types' => array('est_id_code_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 *
 * @see est_id_code_field_formatter_info()
 */
function est_id_code_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'eic_formatter_plain':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'span',
          '#attributes' => array(
            'class' => 'est-id-code est-id-code-plain',
          ),
          '#value' => check_plain($item['value']),
        );
      }
      break;

    case 'eic_formatter_formatted':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'span',
          '#attributes' => array(
            'class' => 'est-id-code est-id-code-formatted',
          ),
          '#value' => implode(' ', _est_id_code_segments(check_plain($item['value']))),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see est_id_code_field_widget_form()
 */
function est_id_code_field_widget_info() {
  return array(
    'eic_widget_plain' => array(
      'label' => t('ID code plain'),
      'field types' => array('est_id_code_field'),
    ),
    'eic_widget_formatted' => array(
      'label' => t('ID code formatted'),
      'field types' => array('est_id_code_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function est_id_code_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'eic_widget_plain':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 11,
        '#maxlength' => 11,
      );
      break;

    case 'eic_widget_formatted':
      if (!empty($value)) {
        $segments = _est_id_code_segments($value);
      }
      else {
        $segments = array();
      }

      $widget += array(
        '#type' => 'fieldset',
        '#element_validate' => array('est_id_code_formatted_validate'),
        '#delta' => $delta,
      );

      // GYYMMDDSSSC.
      $widget['G'] = array(
        '#type' => 'textfield',
        '#title' => t('Century of birth and sex'),
        '#size' => 1,
        '#maxlength' => 1,
        '#default_value' => array_shift($segments),
      );
      if ($instance['required'] == 1) $widget['G']['#required'] = 1;

      $widget['YY'] = array(
        '#type' => 'textfield',
        '#title' => t('Year of birth, format: YY'),
        '#size' => 2,
        '#maxlength' => 2,
        '#default_value' => array_shift($segments),
      );
      if ($instance['required'] == 1) $widget['YY']['#required'] = 1;

      $widget['MM'] = array(
        '#type' => 'textfield',
        '#title' => t('Month of birth, format: MM'),
        '#size' => 2,
        '#maxlength' => 2,
        '#default_value' => array_shift($segments),
      );
      if ($instance['required'] == 1) $widget['MM']['#required'] = 1;

      $widget['DD'] = array(
        '#type' => 'textfield',
        '#title' => t('Day of birth, format: DD'),
        '#size' => 2,
        '#maxlength' => 2,
        '#default_value' => array_shift($segments),
      );
      if ($instance['required'] == 1) $widget['DD']['#required'] = 1;

      $widget['SSS'] = array(
        '#type' => 'textfield',
        '#title' => t('Serial number'),
        '#size' => 3,
        '#maxlength' => 3,
        '#default_value' => array_shift($segments),
      );

      $widget['C'] = array(
        '#type' => 'textfield',
        '#title' => t('Checksum'),
        '#size' => 1,
        '#maxlength' => 1,
        '#default_value' => array_shift($segments),
      );
      if ($instance['required'] == 1) $widget['C']['#required'] = 1;

      break;
  }

  $element['value'] = $widget;
  return $element;
}


/**
 * Validation for formatted widget segments.
 */
function est_id_code_formatted_validate($element, &$form_state) {
  $delta = $element['#delta']; // TODO: Isn't there a better way to find out which element?
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['value'])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta]['value'];
    $segments = array('G', 'YY', 'MM', 'DD', 'SSS', 'C');
    $value = '';
    foreach ($segments as $segment) {
      // If they left any empty, we'll set the value empty and quit.
      if (strlen($values[$segment]) == 0) {
        form_set_value($element, '', $form_state);
        return;
      }
      // Simple number validation.
      if (!preg_match('/^[0-9]+$/', $values[$segment])) {
        form_error($element[$segment], t('Segment must be numerical.'));
      }
      $value .= $values[$segment];
    }

    form_set_value($element, $value, $form_state);
  }
}

/**
 * Implements hook_field_widget_error().
 *
 * @see est_id_code_field_validate()
 * @see form_error()
 */
function est_id_code_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'est_id_code_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Helper function to segment the code value
 * @param  string $code
 * @return array segemented array with keys G, YY, MM, DD, SSS, C
 */
function _est_id_code_segments($code) {
  return array(
    'G' => $code[0],
    'YY' => $code[1] . $code[2],
    'MM' => $code[3] . $code[4],
    'DD' => $code[5] . $code[6],
    'SSS' => $code[7] . $code[8] . $code[9],
    'C' => $code[10],
  );
}

/**
 * Validate the code.
 * @param  string $code
 * @return boolean
 */
function _est_id_code_validate($code) {
  if (strlen($code) != 11) {
      return FALSE;
  }
  if (!is_numeric($code)) {
      return FALSE;
  }

  $code_segments = _est_id_code_segments($code);

  $century = 0;
  switch ((int)$code_segments['G']) {
    case 1:
    case 2:
      $century = 1800;
      break;
    case 3:
    case 4:
      $century = 1900;
      break;
    case 5:
    case 6:
      $century = 2000;
      break;
    default:
      return FALSE;
  }

  // Check if birthday is a valid date.
  $year = (int)($century + (int)$code_segments['YY']);
  $month = (int)$code_segments['MM'];
  $day = (int)$code_segments['DD'];;

  if (!checkdate($month, $day, $year)) {
    return FALSE;
  }

  // Calculate the checksum.
  $sum = $code[9];
  for ($i = 0; $i <= 8; $i++) {
    $sum += $code[$i] * ($i + 1);
  }

  $check = $sum % 11;
  // Special case, recalculate the checksum.
  if ($check == 10) {
    $sum = 0;
    for ($i = 0; $i <= 6; $i++) {
      $sum += $code[$i] * ($i + 3);
    }
    for ($i = 7; $i <= 9; $i++) {
      $sum += $code[$i] * ($i - 6);
    }
    $check = $sum % 11;
    $check = $check % 10;
  }

  if ($check != $code_segments['C']) {
    return FALSE;
  }

  return TRUE;
}
