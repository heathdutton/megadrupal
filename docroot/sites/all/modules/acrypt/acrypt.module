<?php

/**
 * @file
 * Asymmetric crypt algorithm routines.
 */

/**
 * Implements hook_menu().
 */
function acrypt_menu() {

  $items['admin/config/system/gpg_acrypt'] = array(
    'title' => 'Acrypt GnuPG settings',
    'description' => 'Settings for acrypt GPG',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('acrypt_gpg_ui_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'acrypt_ui.admin.inc',
  );

  return $items;
}

/**
 * Encryption routine for filename.
 *
 * @param string $src_filename
 *   Source filename.
 * @param string $dest_filename
 *   Destination crypted filename to be written with a crypted data.
 * @param null $gpg_pub_key
 *   Optional custom gpg public key for encryption.
 *
 * @return bool
 *   FALSE on error, TRUE if success.
 *
 * @api
 */
function acrypt_gpg_encrypt(
  $src_filename,
  $dest_filename = NULL,
  $gpg_pub_key = NULL
) {
  if (!$gpg_pub_key) {
    $gpg_pub_key = variable_get('acrypt_gpg_public_key', NULL);
    if (!$gpg_pub_key) {
      watchdog('acrypt', 'GPG public key is not defined.', array(), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  if (!$dest_filename) {
    // By convention the extension .gpg is used for encrypted/binary data.
    $dest_filename = $src_filename . '.gpg';
  }
  $data = file_get_contents($src_filename);
  $gpg = new gnupg();
  $info = $gpg->import($gpg_pub_key);
  $gpg->addencryptkey($info['fingerprint']);
  $enc = $gpg->encrypt($data);

  $status = file_put_contents($dest_filename, $enc, FILE_EXISTS_REPLACE);
  return $status ? TRUE : FALSE;
}
