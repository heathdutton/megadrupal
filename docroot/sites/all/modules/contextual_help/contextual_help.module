<?php
/**
 * @file
 * Code for the Contextual Help feature.
 */

include_once 'contextual_help.features.inc';

/**
 * Implements hook_form_alter().
 */
function contextual_help_form_contextual_help_node_form_alter(&$form, &$form_state) {
  if (isset($form_state['ajax'])) {
    // Pre-populate the context path if we clicked the 'Add help' link.
    $form['field_context_path']['und']['0']['#default_value']['url'] = contextual_help_get_ref_path();

    // Remove field titles.
    $form['title']['#title_display'] = 'invisible';
    $form['field_contextual_help_text']['und']['0']['#title_display'] = 'invisible';

    // Register an after_build callback, so we can clean up the modal form.
    $form['#after_build'][] = 'contextual_help_after_build';
  }
}

/**
 * Helper function to get the path of the referring page.
 */
function contextual_help_get_ref_path() {
  static $ref_path;
  if (!isset($ref_path)) {
    $ref_path = trim(parse_url($_SERVER['HTTP_REFERER'], PHP_URL_PATH), '/');
    // Handle frontpage path, which returns the empty string.
    $ref_path = $ref_path != '' ? $ref_path : '<front>';
  }
  return $ref_path;
}

/**
 * After_build form callback to clean up the 'Add help' modal form.
 */
function contextual_help_after_build($form, &$form_state) {
  $keep = array(
    //'field_context_path',
    'field_contextual_help_text',
  );
  // Trash everything we don't explicitly want to keep.
  foreach ($form as $field => $settings) {
    if (array_key_exists('#access', $settings) && !in_array($field, $keep)) {
      $form[$field]['#access'] = FALSE;
    }
  }

  // Clean up buttons.
  unset($form['actions']['draft']);
  unset($form['actions']['preview_changes']);
  unset($form['actions']['preview']);
  $form['actions']['submit']['#value'] = 'Save';

  return $form;
}

/**
 * Implements hook_block_view_alter().
 */
function contextual_help_block_view_alter(&$data, $block) {
  // Don't show the contextual_help block on any contextual help pages.
  if ($block->module == 'views' && $data['subject'] == 'Contextual help') {
    $node = menu_get_object();
    if (!empty($node) && $node->type == 'contextual_help') {
      $data = array();
    }
  }
}

/**
 *  Implements hook_menu().
 */
function contextual_help_menu() {
  // Provide ajax callback paths for the ctools modal dialogs
  $items['contextual_help/%ctools_js/%'] = array(
      'title' => 'Contextual Help',
      'page arguments' => array(1, 2),
      'page callback' => 'contextual_help_modal_page',
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
  );
  $items['contextual_help/%ctools_js/add'] = array(
      'title' => 'Add Contextual Help',
      'page arguments' => array(1),
      'page callback' => 'contextual_help_modal_add_form',
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
  );
  $items['contextual_help/%ctools_js/edit/%'] = array(
      'title' => 'Add Contextual Help',
      'page arguments' => array(1, 3),
      'page callback' => 'contextual_help_modal_edit_form',
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Ctools modal page callback.
 *
 * @param $js
 *   boolean CTools' guess whether the user's browser is javascript enabled.
 * @param $nid
 *   string The node ID passed as an argument from the hook_menu() path.
 * @return
 *   string The contents of the node, that will fill the modal window.
 */
function contextual_help_modal_page($js = NULL, $nid = NULL) {
  if ($nid == NULL) {
    return 'ERROR: No node ID was sent.';
  }
  if ($js == NULL) {
    // No javascript, so just load the relevant page.
    drupal_goto('node/' . $nid);
  }
  else {
    // Required includes for ctools to work:
    ctools_include('modal');
    ctools_include('ajax');
    // Required include for node form:
    ctools_include('node.pages', 'node', '');

    $node = node_load($nid);
    // Make the modal title a link to edit the node in a modal.
    $href = 'contextual_help/nojs/edit/' . $nid;
    $title_link = ctools_modal_text_button($node->title, $href, t('Edit contextual help %title.', array('%title' => $node->title)), 'ctools-modal-contextual-help-modal-style');
    // Render the node object in order to obtain a string.
    $node_view = node_view($node);
    return ctools_modal_render($title_link, render($node_view));
  }
}

/**
 * Ctools modal form callback for adding a contextual_help node.
 *
 * @param $js
 *   boolean CTools' guess whether the user's browser is javascript enabled.
 */
function contextual_help_modal_add_form($js = NULL) {
  if ($js == NULL) {
    // No javascript, so just load the relevant page.
    drupal_goto('node/add/contextual-help');
  }
  else {
    global $user;

    // Required includes for ctools to work:
    ctools_include('modal');
    ctools_include('ajax');

    // Required include for node form:
    ctools_include('node.pages', 'node', '');

    // Create a dummy node object for the node form.
    $node = (object) array(
      'uid' => $user->uid,
      'name' => (isset($user->name) ? $user->name : ''),
      'type' => 'contextual_help',
      'language' => LANGUAGE_NONE,
    );

    // Set up a basic form state.
    $form_state = array(
      'title' => t('Add contextual help for %title', array('%title' => contextual_help_get_ref_path())),
      'ajax' => $js,
    );
    $form_state['build_info']['args'] = array($node);

    $form = ctools_modal_form_wrapper('contextual_help_node_form', $form_state);

    // Close the modal and refresh the underlying page when the form is executed.
    if ($form_state['executed'] && $js) {
      $commands = array();
      $commands[] = ctools_modal_command_dismiss(t('Contextual help added.'));
      $commands[] = ctools_ajax_command_reload();
      print ajax_render($commands);
      exit;
    }

    // Otherwise, just print the rendered form.
    print ajax_render($form);
  }

}

/**
 * Ctools modal form callback for editing a contextual_help node.
 *
 * @param $js
 *   boolean CTools' guess whether the user's browser is javascript enabled.
 * @param $nid
 *   string The node ID passed as an argument from the hook_menu() path.
 */
function contextual_help_modal_edit_form($js = NULL, $nid = NULL) {
  if ($nid == NULL) {
    return 'ERROR: No node ID was sent.';
  }
  if ($js == NULL) {
    // No javascript, so just load the relevant page.
    drupal_goto('node/' . $nid . '/edit');
  }
  else {
    global $user;

    // Required includes for ctools to work:
    ctools_include('modal');
    ctools_include('ajax');

    // Required include for node form:
    ctools_include('node.pages', 'node', '');

    $node = node_load($nid);

    // Set up a basic form state.
    $form_state = array(
      'title' => t('Edit contextual help for %title', array('%title' => contextual_help_get_ref_path())),
      'ajax' => $js,
    );
    $form_state['build_info']['args'] = array($node);

    $form = ctools_modal_form_wrapper('contextual_help_node_form', $form_state);

    // Close the modal and refresh the underlying page when the form is executed.
    if ($form_state['executed'] && $js) {
      $commands = array();
      $commands[] = ctools_modal_command_dismiss(t('Contextual help added.'));
      $commands[] = ctools_ajax_command_reload();
      print ajax_render($commands);
      exit;
    }

    // Otherwise, just print the rendered form.
    print ajax_render($form);
  }

}

/**
* Implements hook_theme().
*/
function contextual_help_theme() {
  return array(
    'views_view_fields__contextual_help__modal_links_block' => array(
      'variables' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view-fields--contextual-help--modal-links-block',
      'base hook' => 'views_view_fields',
      'path' => drupal_get_path('module', 'contextual_help') . '/theme',
    ),
    'views_view__contextual_help__modal_links_block' => array(
      'variables' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view--contextual-help--modal-links-block',
      'base hook' => 'views_view',
      'path' => drupal_get_path('module', 'contextual_help') . '/theme',
    ),
    'node__contextual_help' =>array(
      'template' => 'node--contextual-help',
      'base hook' => 'node_view',
      'path' => drupal_get_path('module', 'contextual_help') . '/theme',
    ),
  );
}

/*
 * Implements hook_preprocess_views_view_fields().
 */
function contextual_help_preprocess_views_view_fields(&$vars) {
  if ($vars['view']->name == 'contextual_help') {
    // Include the CTools tools that we need.
    ctools_include('ajax');
    ctools_include('modal');

    $name = $vars['fields']['title']->content;
    // Add a path to the callback defined in contextual_help_menu().
    $href = 'contextual_help/nojs/' . $vars['fields']['nid']->content;
    $vars['ctools_link'] = ctools_modal_text_button($name, $href, t('View help for this page (%name).', array('%name' => $name)), 'ctools-modal-contextual-help-modal-style');
  }
}

/*
 * Implements hook_preprocess_views_view().
 */
function contextual_help_preprocess_views_view(&$vars) {
  if ($vars['view']->name == 'contextual_help') {
    if (user_access('create contextual_help content')) {
      $name = '<i class="icon-question-sign"></i>Add help';
      $href = 'contextual_help/nojs/add';
      $vars['add_contextual_help_link'] = ctools_modal_text_button($name, $href, t('Add help for this page.'), 'ctools-modal-contextual-help-modal-style');
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function contextual_help_views_pre_render(&$views) {
  if ($views->name == 'contextual_help') {
    // Include the CTools tools that we need.
    ctools_include('ajax');
    ctools_include('modal');
    // Create our own javascript that will be used to theme our modals.
    $contextual_help_style = array(
      'contextual-help-modal-style' => array(
        'modalSize' => array(
          'type' => 'scale',
          'width' => '.7',
          'height' => '.7',
          'addWidth' => 0,
          'addHeight' => 0,
          'contentRight' => 25,
          'contentBottom' => 75,
        ),
        'modalOptions' => array(
          'opacity' => '.55',
          'background-color' => '#FFF',
        ),
        'animationSpeed' => 'fast',
        'modalTheme' => 'CToolsModalDialog',
        'throbberTheme' => 'CToolsModalThrobber',
      ),
    );
    // Add the settings array Drupal's JS settings.
    drupal_add_js($contextual_help_style, 'setting');
    // Add our Javascript to the page.
    ctools_add_js('contextual_help', 'contextual_help');
    // Add our CSS to the page.
    ctools_add_css('contextual_help', 'contextual_help');
  }
}
