<?php
// $Id: eazylaunch.module,v 1.1.2.1 2010/08/04 19:52:13 tdway Exp $
/**
 * Implement hook_menu().
 */
function eazylaunch_menu() {
  $items['eazylaunch/js'] = array(
    'page callback' => 'eazylaunch_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['eazylaunch/action/flush-all'] = array(
    'title' => 'Flush All Cache',
    'page callback' => 'eazylaunch_flush',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['eazylaunch/action/flush-menu'] = array(
    'title' => 'Flush Menu Router',
    'page callback' => 'eazylaunch_flush',
    'page arguments' => array('menu router'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['eazylaunch/action/flush-theme'] = array(
    'title' => 'Flush Theme Registry',
    'page callback' => 'eazylaunch_flush',
    'page arguments' => array('theme registry'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['eazylaunch/action/flush-admin'] = array(
    'title' => 'Flush Admin Cache',
    'page callback' => 'eazylaunch_flush',
    'page arguments' => array('admin cache'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['eazylaunch/action/flush-jscss'] = array(
    'title' => 'Flush JS and CSS cache',
    'page callback' => 'eazylaunch_flush',
    'page arguments' => array('js and css'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/eazylaunch'] = array(
    'title' => 'EazyLaunch Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eazylaunch_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['eazylaunch/action/fra-dryrun'] = array(
    'title' => 'List Overridden Feature Components',
    'page callback' => 'eazylaunch_features_revert',
    'page arguments' => array(TRUE),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['eazylaunch/action/fra-run'] = array(
    'title' => 'Revert All Features',
    'page callback' => 'eazylaunch_features_revert',
    'page arguments' => array(FALSE),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function eazylaunch_admin_settings() {
  $form['eazylaunch_disable_overlay'] = array(
    '#type' => 'checkbox',
    '#title' => 'Don\'t open EazyLaunch commands in Drupal\'s admin overlay',
    '#default_value' => variable_get('eazylaunch_disable_overlay', 0),
  );
  $form['eazylaunch_ajax'] = array(
    '#type' => 'checkbox',
    '#title' => "Asynchronously load EazyLaunch after the page loads instead of including it in the intial page request",
    '#default_value' => variable_get('eazylaunch_ajax', 1),
  );
  
  return system_settings_form($form);  
}

/**
 * Implementation of hook_permission().
 */
function eazylaunch_permission() {
  return array(
    'access eazylaunch' => array(
      'title' => t('Access eazylaunch'), 
    ),
  );
  
}

function eazylaunch_init() {
  if (user_access('access eazylaunch')) {
    $path = drupal_get_path('module', 'eazylaunch');
    drupal_add_js("$path/jq/jquery.autocomplete.min.js");
    drupal_add_css("$path/jq/jquery.autocomplete.css");
    drupal_add_js("$path/eazylaunch.js");
    drupal_add_css("$path/eazylaunch.css");
    $settings = array('disable_overlay' => variable_get('eazylaunch_disable_overlay', 0));
    $settings['hotkeys'] = $GLOBALS['user']->data['ezhotkeys'] ? $GLOBALS['user']->data['ezhotkeys'] : array('ctrlz' => 'ctrlz');
    if (!variable_get('eazylaunch_ajax', 1)) {
      $settings['data'] = eazylaunch_load();
    } 
    drupal_add_js(array('eazylaunch' => $settings), 'setting');
  }
}

function eazylaunch_js() {
  // Ask devel.module not to print it's footer.
  $GLOBALS['devel_shutdown'] = FALSE;
  echo drupal_json_encode(eazylaunch_load());
  exit();
}

function eazylaunch_load() {
  global $user, $language;
  $cid = "eazylaunch:$user->uid:$language->language";
  $cache = cache_get($cid, 'cache');
  $eazylaunch = isset($cache->data) ? $cache->data : NULL;

  if (!$eazylaunch) { //if not found in cache, build it
    $links = eazylaunch_menulinks();
    
    if (module_exists('devel')) {
      foreach (devel_switch_user_list() as $item) {
        $links[] = array('title' => "Switch User - " . $item['title'], 'href' => drupal_get_path_alias($item['href']));
      }
    }

    $links[] = array('title' => "Eazy - Run cron", 'href' => "admin/reports/status/run-cron");
    $links[] = array('title' => "Eazy - Run update.php", 'href' => "update.php");
    $links[] = array('title' => "Eazy - Edit my account", 'href' => "user/" . $GLOBALS['user']->uid . "/edit");
    foreach (eazylaunch_menu() as $path => $item) { //add cache & feature commands
      if (isset($item['title']) && strpos($path, 'eazylaunch/action') === 0) {
        $links[] = array('title' => 'Eazy - ' . $item['title'], 'href' => $path); 
      }
    }
    $eazylaunch = array('eazylaunch' => 
      array('links' => $links, 
        'details' => t("Type and press enter."), 
        'moreDetails' => t("Press Esc or Ctrl+Z to close.<br/> Use Up/Down arrows to navigate.<br/>Type 'content' to launch the Content page.<br/>Type 'menu' to list all menu pages.<br/> Type 'eazy' to see special cache and feature actions. ")
          . t("<br/>Type 'EazyLaunch settings' or 'Edit my account' to configure EazyLaunch usage."),
      )
    );
    cache_set($cid, $eazylaunch, 'cache', CACHE_TEMPORARY);
  }

  return $eazylaunch;
}

function eazylaunch_menulinks_build($tree, $prefix = NULL, $isroot = FALSE) {
  $links = array();
  foreach ($tree as $item) {
    $title = $item['link']['title'];
    $href = $item['link']['href'];
    if (!$title) continue;  
    if ($prefix && !in_array($prefix, array("Management", "Navigation", "Administration"))) $title = "$prefix - $title"; 
    $link = array('title' => $title, 'href' => drupal_get_path_alias($href));
    if ($isroot || $title == "Administration" || strpos($href, 'eazylaunch/action') === 0) $link['root'] = 'true';
    $links[] = $link;
    if ($item['below']) $links = array_merge($links, eazylaunch_menulinks_build($item['below'], $title));
  }
  return $links;
}

function eazylaunch_flush($name = 'all cache') {
  switch ($name) {
    case 'menu router':
      menu_rebuild();
      break;
    case 'admin cache': // Don't clear cache_form - in-progress form submissions may break. Ordered so clearing the page cache will always be the last action.
      $core = array('cache', 'cache_block', 'cache_filter', 'cache_page');
      $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
      foreach ($cache_tables as $table) cache_clear_all('*', $table, TRUE);
      break;
    case 'js and css': // Change query-strings on css/js files to enforce reload for all users.
      _drupal_flush_css_js();
      drupal_clear_css_cache();
      drupal_clear_js_cache();
      break;
    case 'theme registry':
      module_invoke('system', 'theme_data');
      drupal_theme_rebuild();
      break;
    default: // Flush all caches; no need to re-implement this.
      drupal_flush_all_caches();
      break;
  }
  drupal_set_message(t("Flushed @type.", array('@type' => $name)));
  drupal_goto();
}

/**
 * shortcut to revert all features thru the browser
 * @param $dryrun
 */
function eazylaunch_features_revert($dryrun = TRUE) {
  module_load_include('inc', 'features', 'features.export');
  $restore_states = array(FEATURES_OVERRIDDEN, FEATURES_REBUILDABLE, FEATURES_NEEDS_REVIEW);
  $states = features_get_component_states(array(), FALSE);
  foreach ($states as $module_name => $components) {
    foreach ($components as $component => $state) {
      if (in_array($state, $restore_states)) {
        $items[$module_name][] = $component;
        $vars = array('!component' => $component, '!module_name' => l($module_name, 'admin/structure/features/' . $module_name));
        $msg = $dryrun ? t('!component in !module_name is overridden', $vars) : t('!component in !module_name reverted', $vars); 
        drupal_set_message($msg);
      }
    }
  }
  if (!$dryrun) {
    features_revert($items);
    drupal_set_message(t('Feature reverts complete.'));   
  } elseif (count($items) == 0) {
    drupal_set_message(t('No overridden feature components.'));
  }
  drupal_goto();
  //return '';
}

/**
 * D7 version
 */
function eazylaunch_menulinks() {
  $links = array();
  $result = db_query("SELECT * from {menu_custom}");
  foreach ($result as $menu) {
    $links = array_merge($links, eazylaunch_menulinks_build(menu_tree_all_data($menu->menu_name), $menu->title, FALSE));
  }
  return $links;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function eazylaunch_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];
    if (user_access('access eazylaunch', $account)) {
      $form['eazylaunch'] = array(
        '#type' => 'fieldset',
        '#title' => t('Eazylaunch'),
        '#weight' => 4,
        '#collapsible' => TRUE,
      );

      $form['eazylaunch']['ezhotkeys'] = array(
        '#type' => 'checkboxes',
        '#title' => t('EazyLaunch hotkeys'),
        '#description' => t('Enable or disable EazyLaunch hotkeys.'),
        '#options' => array('ctrlz' => 'Ctrl+Z', 'altz' => 'Alt+Z'),
        '#default_value' => isset($account->data['ezhotkeys']) ? $account->data['ezhotkeys'] : array('ctrlz'),
      );
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function eazylaunch_user_presave(&$edit, $account, $category) {
  if (isset($edit['ezhotkeys'])) {
    $edit['data']['ezhotkeys'] = $edit['ezhotkeys'];
  }
}