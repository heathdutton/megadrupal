<?php

/**
 * @file
 * The install file for the quiz evaluation question type.
 */

/**
 * Implements hook_install().
 */
function quiz_evaluation_install() {
  // Add body field to multichoice node
  quiz_question_add_body_field('quiz_evaluation');
  
  cache_clear_all('autoload:', 'cache');
  variable_set('node_options_quiz_evaluation', array('status'));

  quiz_evaluation_insert_range(array(1 => 'Poor', 2 => 'Average', 3 => 'Good', 4 => 'Excellent'));
  quiz_evaluation_insert_range(array(1 => 'Very poor', 2 => 'Poor', 3 => 'Average', 4 => 'Good', 5 => 'Very good', 6 => 'Excellent'));
  quiz_evaluation_insert_range(array(1 => 'Not great', 2 => 'Could do better', 3 => 'Not bad at this', 4 => 'Fantastic'));
  quiz_evaluation_insert_range(array(1 => 'Strongly disagree', 2 => 'Disagree', 3 => 'Agree', 4 => 'Strongly agree'));
}

/**
 * Implements hook_schema().
 */
function quiz_evaluation_schema() {
  $schema = array();

  $schema['quiz_evaluation_quiz'] = array(
    'description' => 'Provides a link between the quiz node, the collections of questions and the range of answers.',
    'fields' => array(
      'collection_id' => array(
        'description' => 'The collection ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The node ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The node version ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'range_id' => array(
        'description' => 'The range ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('collection_id'),
    'indexes' => array(
      'nid_vid' => array('nid', 'vid'),
    ),
  );

  $schema['quiz_evaluation_question'] = array(
    'description' => 'Holds the collection of questions that this node contains.',
    'fields' => array(
      'question_id' => array(
        'description' => 'The question ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'collection_id' => array(
        'description' => 'The collection ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The question title text',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('question_id'),
    'indexes' => array(
      'collection_id' => array('collection_id'),
    ),
  );

  $schema['quiz_evaluation_range'] = array(
    'description' => 'Holds the answer ranges that each collection has.',
    'fields' => array(
      'value_id' => array(
        'description' => 'The ID of the answer',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'range_id' => array(
        'description' => 'The range ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'value' => array(
        'description' => 'The answer for the question',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'score' => array(
        'description' => 'The score that this answer carries',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('value_id'),
    'indexes' => array(
      'range_id' => array('range_id'),
    ),
  );
  $schema['quiz_evaluation_user_score'] = array(
    'description' => 'Holds the users entries for a particular question.',
    'fields' => array(
      'answer_id' => array(
        'description' => 'The answer ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'rid' => array(
        'description' => 'The result ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'collection_id' => array(
        'description' => 'The collection ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'question_id' => array(
        'description' => 'The question ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'value_id' => array(
        'description' => 'The question value ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('answer_id', 'question_id', 'value_id'),
  );


  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function quiz_evaluation_uninstall() {
  drupal_set_message(t("The quiz evaluation module has been uninstalled. Evaluation nodes may still exist, but they will not function properly."));
  variable_del('node_options_quiz_evaluation');
}

/**
 * Insert ranges into table.
 *
 * Insert the given options into the quiz_evaluation_range table. Each array of
 * options should be an associative array where the key is the score and the
 * value is the value shown to the user.
 *
 * @param $options
 *    An array of options key of which is the score and the value is the
 *    value shown to the user.
 */
function quiz_evaluation_insert_range($options) {

  // Get the range_id
  $range_id = db_query('SELECT MAX(range_id) + 1 as range_id FROM {quiz_evaluation_range}')->fetchAssoc();
  $range_id = $range_id['range_id'];

  if (is_null($range_id)) {
    $range_id = 1;
  }

  $insert = db_insert('quiz_evaluation_range')->fields(array('range_id', 'value', 'score'));
  $values = array();
  // Save the answers belonging to the collection
  foreach ($options as $score => $value) {
    $values = array(
      'range_id' => $range_id,
      'value' => $value,
      'score' => $score,
    );
    $insert->values($values);
  }
  $insert->execute();
}