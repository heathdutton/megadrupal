<?php

/**
 * @file
 * Allows admins to pull content from the NPR API, and turn NPR articles into
   (locally-stored, independent) drupal nodes.
 */

define('NPR_PULL_STAGE_URL', 'http://api-s2.npr.org');
define('NPR_PULL_PRODUCTION_URL', 'http://api.npr.org');

/**
 * The content type to which pulled stories will be mapped.
 */
define('NPR_PULL_MAPPING_CONTENT_TYPE', 'npr_story');

/**
 * Implements hook_permission().
 */
function npr_pull_permission() {
  return array(
    'pull NPR content' => array(
      'title' => t('Pull NPR content'),
      'description' => t('Pull NPR content to create local nodes on the site.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function npr_pull_menu() {
  $items = array();

  $items['admin/content/npr'] = array(
    'title' => 'Pull NPR Story',
    'description' => 'Retrieve a single story from the NPR API.',
    'access arguments' => array('pull NPR content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('npr_pull_get_story'),
    'file' => 'npr_pull.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/npr/cron'] = array(
    'title' => 'Cron settings',
    'description' => 'Retrieve the following types of stories from NPR at every cron.',
    'access arguments' => array('administer npr api'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('npr_pull_cron_config'),
    'file' => 'npr_pull.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/npr/tags'] = array(
    'title' => 'Tag settings',
    'description' => 'Map retrieved story tags to local terms.',
    'access arguments' => array('administer npr api'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('npr_pull_tags_config'),
    'file' => 'npr_pull.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function npr_pull_form_npr_api_config_form_alter(&$form, &$form_state, $form_id) {

  $form['npr_pull_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('NPR Pull'),
  );

  $form['npr_pull_config']['npr_pull_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('NPR Pull URL'),
    '#default_value' => variable_get('npr_pull_api_url', NPR_PULL_PRODUCTION_URL),
  );

  $users = entity_load('user');
  $all_users = array();
  foreach ($users as $uid => $user) {
    $all_users[$uid] = $user->name;
  }

  unset($all_users[0]);
  asort($all_users);
  $all_users = array(0 => 'Anonymous') + $all_users;

  $form['npr_pull_config']['npr_pull_author'] = array(
    '#type' => 'select',
    '#title' => 'Drupal author of pulled stories',
    '#default_value' => variable_get('npr_pull_author', 0),
    '#options' => $all_users,
  );
}

/**
 * Implements hook_cron().
 */
function npr_pull_cron() {
  npr_pull_pull_stories();
}

/**
 * Pulls NPR stories (according to config settings).
 */
function npr_pull_pull_stories() {
  $ids = variable_get('npr_pull_cron_query_ids', array());
  $today = format_date(REQUEST_TIME, 'custom', 'Y-m-d');
  $pub = variable_get('npr_pull_cron_publish_flag', 1);
  foreach ($ids as $id) {
    if ($id) {
      $params = array(
        'id' => $id,
        'startDate' => $today,
      );
      $NPR = npr_api_fetch_object($params);
      if (!empty($NPR->stories)) {
        foreach ($NPR->stories as $story) {
          $story->status = $pub;
          npr_pull_insert_story($story);
        }
      }
    }
  }
}

/**
 * Creates a new npr_story node from NPRMLEntity object
 */
function npr_pull_insert_story($story) {
  $nid = npr_pull_get_nid_from_story_id($story->id);
  if ($nid) {
    // using the date modified field from API
    $story->nid = $nid;
  }
  npr_pull_save_story($story);
}

/**
 * Determines if a (drupal) NPR story node with a certain NPR ID already exists.
 *
 * @param string $npr_id
 *   The NPR ID in question
 *
 * @return boolean
 *  TRUE if nor story already exists locally, FALSE otherwise.
 */
function npr_pull_story_exists($npr_id) {
  return npr_pull_get_nid_from_story_id($npr_id) > 0;
}

/**
 * Given a NPR ID, finds a matching nid.
 *
 * @param string $npr_id
 *
 * @return integer/FALSE
 *   The nid of the node, or FALSE, if no node exists.
 */
function npr_pull_get_nid_from_story_id($npr_id) {
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'npr_story')
    ->fieldCondition('field_npr_id', 'value', $npr_id, '=')
    ->execute();
  if (!empty($result['node'])) {
    $node = array_shift($result['node']);
    return $node->nid;
  }
}

/**
 * Converts an NPRMLEntity story object into a node object and saves it to the
 * DB (via form submit)
 *
 * @param object
 *   An NPR story pulled from the API.
 */
function npr_pull_save_story($story) {
  /*
  TODO:

  DO:
  lastModifiedDate -- use for updates

  PUNT:
  plain text -- punt
  story_link -- different from link? -- punt
  link -- punt
  transcript - maybe punt on this
  slug -- not super-useful to typical station
  subtitle - find out if this is even used
  organization -- doesn't hurt to save this

  */

  // Impersonate the proper user.
  global $user;
  $original_user = $user;
  drupal_save_session(FALSE);
  $user = user_load(variable_get('npr_pull_author', 0));

  module_load_include('inc', 'node', 'node.pages');


  // is an update?
  if (!empty($story->nid)) {
    $node = (array)node_load($story->nid);
  }

  // or a newly pulled story?
  else {
    $node = new stdClass();
    $form_state = array();
    $node = array(
      'type' => 'npr_story',
      'nid' => NULL,
      'status' => isset($story->status) ? $story->status : 1,
      'language' => LANGUAGE_NONE,
      'created' => isset($story->created) ? $story->created : strtotime($story->pubDate->value),
    );
  }

  // Name must be set to a value or null;
  $node['name'] = empty($user->name) ? NULL : $user->name;

  $form_state['values']['title'] = $story->title->value;
  $form_state['values']['field_npr_id'][LANGUAGE_NONE][0]['value'] = $story->id;
  $form_state['values']['date'] = date('Y-m-d H:i:s O', $node['created']);

  $form_state['values']['body'][LANGUAGE_NONE][0]['value'] = $story->body;
  $form_state['values']['body'][LANGUAGE_NONE][0]['summary'] = $story->teaser->value;
  $form_state['values']['field_npr_byline'][LANGUAGE_NONE][0]['value'] = !empty($story->byline->name->value) ? $story->byline->name->value : '';

  $form_state['values']['field_npr_org_id'][LANGUAGE_NONE][0]['value'] = $story->organization->orgId;
  $form_state['values']['field_npr_url'][LANGUAGE_NONE][0]['value'] = $story->link['html']->value;

  // Tags
  if (variable_get('npr_pull_map_tags')) {
    $vid = variable_get('npr_pull_mapped_vid');
    if ($vid && !empty($story->tags)) {
      $full_terms = entity_load('taxonomy_term', FALSE, array('vid' => $vid));
      $terms = array();
      foreach ($full_terms as $tid => $full_term) {
        $terms[$tid] = $full_term->name;
      }
      foreach($story->tags as $tag) {
        $added_tags[] = $tag;
      }
      if (!empty($added_tags)) {
        $vocab = taxonomy_vocabulary_load($vid);
        $form_state['values']['field_'  . $vocab->machine_name][LANGUAGE_NONE] = implode(',', $added_tags);
      }
    }
  }

  if (!empty($story->audio)) {
    foreach($story->audio as $audio) {
      $audio_element = array(
        'value' => isset($audio->id) ? $audio->id : 0,
        'title' => isset($audio->title->value) ? $audio->title->value : '',
        'description' => isset($audio->description->value) ? $audio->description->value : '',
        'duration' => isset($audio->duration->value) ? $audio->duration->value : '',
        'mp3' => isset($audio->format->mp3['mp3']->value) ? $audio->format->mp3['mp3']->value : '',
        'mediastream' => isset($audio->format->mediastream->value) ? $audio->format->mediastream->value : '',
        'wm' => isset($audio->format->wm->value) ? $audio->format->wm->value : '',
        'download' => isset($audio->permissions->download->allow) ? 1 : 0,
        'embed' => isset($audio->permissions->embed->allow) ? 1 : 0,
        'stream' => isset($audio->permissions->stream->allow) ? 1 : 0,
      );
      $form_state['values']['npr_audio'][LANGUAGE_NONE][] = $audio_element;
    }
  }
  $images = array();
  if (!empty($story->image)) {
    foreach ($story->image as $npr_image) {
      $image_url = '';
      // check the <enlargement> and then the <crop>'s (type = enlargement or
      // standard), if they don't exist, just get the image->src
      if (!empty($npr_image->enlargement)) {
        $image_url = $npr_image->enlargement->src;
      }
      else {
        if (!is_array($npr_image->crop)) {
          $npr_image->crop = array($npr_image->crop);
        }
        if (!empty($npr_image->crop)) {
          foreach ($npr_image->crop as $crop) {
            if (!empty($crop->type) && $crop->type == 'enlargement') {
              $image_url = $crop->src;
              continue;
            }
          }
        }
        if ($image_url == '' && !empty($npr_image->crop)) {
          foreach ($npr_image->crop as $crop) {
            if (!empty($crop->type) && $crop->type == 'standard') {
              $image_url = $crop->src;
              continue;
            }
          }
        }
      }
      if ($image_url == '') {
        $image_url = $npr_image->src;
      }

      // Convert mimetype string (e.g., 'image/jpeg') into file extension (e.g., 'jpg')
      require_once DRUPAL_ROOT . '/' . 'includes/file.mimetypes.inc';
      $mappings = file_default_mimetype_mapping();
      // Create an array that maps mimetype string to integer (mimetype constant)
      $mimetypes = array_flip($mappings['mimetypes']);
      // Create an array that maps integer (mimetype constant) into file extension
      $extensions = array_flip($mappings['extensions']);
      $npr_image_mimetype = file_get_mimetype($image_url);
      // Convert mimetype string into extension
      $ext = $extensions[$mimetypes[$npr_image_mimetype]];

      // @TODO
      // clean up how we do collision prevention
      // rand() seems to hacky
      // there MUST be a cleaner way
      $file_name = $npr_image->id . '_' . rand() . '.' . $ext;

      // Get the image directory.
      $image_dir_uri = _npr_pull_get_image_dir_uri();
      file_prepare_directory($image_dir_uri, FILE_CREATE_DIRECTORY);
      $file_uri = $image_dir_uri . $file_name;

      // Download the image and create a local copy.
      $image_in = fopen($image_url, 'rb');
      $image_out = fopen($file_uri, 'wb');
      stream_copy_to_stream($image_in, $image_out);
      fclose($image_in);
      fclose($image_out);

      $file = new stdClass();
      $file->filename = $file_name;
      $file->uri = $file_uri;
      $file->uid = $user->uid;
      $file->filemime = $npr_image_mimetype;
      $file->file_size = filesize($file_uri);

      file_save($file);
      $images[] = array(
        'fid' => $file->fid,
        'title' => $npr_image->title->value,
        'alt' => $npr_image->caption->value,
        'display' => 1,
      );
    }
  }
  $form_state['values']['op'] = t('Save');
  $node = (object)$node;

  if (!empty($images)) {
    $node->field_npr_image[LANGUAGE_NONE] = $images;
  }

  drupal_form_submit('npr_story_node_form', $form_state, $node);
  // set user back
  $user = $original_user;
  drupal_save_session(TRUE);
  drupal_set_message(t('Go to') . ' ' . l($node->title, 'node/' . $node->nid));
}

/**
 * Retrieves the directory in which to store pulled images.
 *
 * @return string
 *   The URI directory in which to save files. Includes trailing slash.
 */
function _npr_pull_get_image_dir_uri() {
  $field_instance_info = field_info_instance('node', 'field_npr_image', 'npr_story');
  $field_info = field_info_field('field_npr_image');
  $dir_uri = $field_info['settings']['uri_scheme'] . '://' . $field_instance_info['settings']['file_directory'] . '/';
  return $dir_uri;
}
