<?php

/**
 * Implementation of hook_menu().
 */
function content_schema_menu() {
  $items['admin/structure/types/schema'] = array(
    'title' => 'Draw schema',
    'page callback' => 'content_schema_render',
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Page callback for `admin/structure/types/schema`.
 */
function content_schema_render() {
  require_once(_graphviz_create_filepath(variable_get('graphviz_filter_pear_path', ''), 'Image/GraphViz.php'));
  $G = new Image_Graphviz(TRUE);
  foreach (taxonomy_get_vocabularies() as $vid => $vocabulary) {
    $G->addNode($vid, array(
      'shape' => 'ellipse',
      'label' => $vocabulary->name,
      'URL' => url('admin/structure/taxonomy/' . $vocabulary->machine_name),
    ));
  }
  $all_fields = field_info_fields();

  foreach (node_type_get_types() as $type) {
    $fields = array();

    // Get the extra fields.
    foreach (field_info_extra_fields('node', $type->type, 'form') as $key => $field) {
      $fields[$field['weight']] = '+ ' . $field['label'] . ' (' . $key . ')';
      $context = array(
        'entity_type' => 'node',
        'bundle_type' => $type->type,
        'field' => $key,
      );
      drupal_alter('content_schema_field_render', $G, $context);
    }

    // Get the regular fields.
    $instances = field_info_instances('node', $type->type);
    foreach ($instances as $key => $field) {
      $field_type = $all_fields[$key]['type'];
      $fields[$field['widget']['weight']] = '+ ' . $field['label'] . ' (' . $key . ') : ' . $field_type;
      if ($field_type == 'taxonomy_term_reference') {
        foreach ($all_fields[$key]['settings']['allowed_values'] as $setting) {
          $vocabulary = taxonomy_vocabulary_machine_name_load($setting['vocabulary']);
          $G->addEdge(array($type->type => $vocabulary->vid), array(
            'style' => 'dotted',
          ));
        }
      }
      $context = array(
        'entity_type' => 'node',
        'bundle_type' => $type->type,
        'field' => $key,
      );
      drupal_alter('content_schema_field_render', $G, $context);
    }

    // Add reference to comments.
    if (variable_get('comment_' . $type->type, COMMENT_NODE_OPEN) == COMMENT_NODE_OPEN) {
      $G->addEdge(array($type->type => 'comment'), array(
        'style' => 'dotted',
      ));
    }

    // Add the node type with sorted fields.
    ksort($fields);
    $G->addNode($type->type, array(
      'shape' => 'record',
      'label' => '{' . $type->name . ' (' . $type->type . ')|' . implode('\l', $fields) . '\l}',
      'URL' => url('admin/structure/types/manage/' . $type->type),
    ));
  }

  // Add the user type.
  // TODO: Add fields.
  $G->addNode('user',array(
    'shape' => 'record',
    'label' => 'User',
  ));

  // Add the comment type.
  // TODO: Add fields.
  $G->addNode('comment',array(
    'shape' => 'record',
    'label' => 'Comment',
  ));

  return graphviz_filter_render($G, 'content');
}

