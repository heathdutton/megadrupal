<?php
/**
 * @file Provides new "Graphviz" filter that interprets text as DOT syntax
 * and outputs corresponding rendering of the graph.
 */

define("GRAPHVIZ_REGEX", "/\[graphviz\](.*?)\[\/graphviz\]/si");
define("GRAPHVIZ_FILTER_SUPPORTED_COMMANDS", "dot, neato, twopi, fdp, circo");

/**
 * Implementation of hook_requirements().
 */
function graphviz_filter_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {
    // Check for availability of `dot`.
    $output = array();
    $return = 0;
    $command = _graphviz_create_filepath(variable_get('graphviz_filter_dot_path', ''), 'dot'); 
    exec("$command -V 2>&1", $output, $return);
    $requirements['dot'] = array(
      'title' => $t('Graphviz tools'),
      'value' => check_plain(implode('<br />', $output)),
      'severity' => $return != 0 ? REQUIREMENT_ERROR : REQUIREMENT_OK,
    );

    // Check for availability of PEAR::Image_GraphViz.
    $pear = (bool)(($handle = @fopen(_graphviz_create_filepath(variable_get('graphviz_filter_pear_path', ''), 'Image/GraphViz.php'), 'r', TRUE)) && fclose($handle));
    $requirements['pear'] = array(
      'title' => $t('Graphviz PEAR package'),
      'value' => $pear ? $t('The PEAR::Image_GraphViz package was found.') : 
                         $t('The PEAR::Image_GraphViz package was not found. 
                             Graphviz Filter will still function normally, but some sub-modules (such as CCK Schema and Workflow Graph) will not. 
                             Please install the package and/or make sure that the Graphviz Filter settings are set to locate it properly.'),
      'severity' => $pear ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

class Functor {
  function __construct($callback, $args) {
    $this->callback = $callback;
    $this->args = $args;
  }
  function callback() {
    $args = array_merge(func_get_args(), $this->args);
    return call_user_func_array($this->callback, $args);
  }
  static function create_functor($callback) {
    $args = func_get_args();
    array_shift($args);
    return array(new Functor($callback, $args), 'callback');
  }
  var $callback;
  var $args;
};

function graphviz_filter_filter_info() {
  $filters['graphviz_filter'] = array(
    'title' => t('Graphviz (DOT) syntax'),
    'description' => t('Interprets text as DOT syntax and returns a PNG image of the generated graph.'),
    'process callback' => '_graphviz_filter_filter_process',
    'settings callback' => '_graphviz_filter_filter_settings',
    'default settings' => array(
      'dot_path' => '',
      'pear_path' => '',
      'commands' => GRAPHVIZ_FILTER_SUPPORTED_COMMANDS,
    ),
    'tips callback'  => '_graphviz_filter_filter_tips'
  );
  return $filters;
 }

function _graphviz_filter_filter_process($text, $format) {
  return preg_replace_callback(GRAPHVIZ_REGEX, Functor::create_functor('_graphviz_filter_filterproc', $format), $text);
}

/**
 * Implementation of hook_filter_tips().
 */
function _graphviz_filter_filter_tips($filter, $format, $long = false) {
  $output = '';
  if ($long) {
    $output .= t('<h4>Using Graphviz filter</h4>');
  }
  $output .= t('Use <a href="@dot">DOT syntax</a> with some additional commands embedded in the comments.', array('@dot' => url('http://www.graphviz.org/Documentation.php')));
  $output .= '&nbsp;';
  list($formats, $args) = _graphviz_filter_formats();
  if ($long) {
    $output .= t('In the comments, you can specify additional arguments such as:');
    $items = array();
    foreach ($args as $arg => $info) {
      $items[] = '@'. $arg .': '. $info['description'];
    }
    $output .= theme_item_list($items);
  }
  $output .= t('Available formats:');
  $items = array();
  foreach ($formats as $format => $info) {
    $items[] = $format .': '. $info['description'];
  }
  $output .= theme_item_list($items);
  return $output;
}

/**
 * Implementation of hook_file_download().
 */
function graphviz_filter_file_download($file) {
  //$file = file_create_path($file);
  $fileuri = file_build_uri($file);
  if (strpos($fileuri, file_default_scheme() . ':/' .'/graphviz') !== FALSE) {
    return array(
      'Content-Length: '.filesize($file),
    );
  }
}

/**
 * Implementation of hook_node_delete().
 */
function graphviz_filter_node_delete(&$node) {
  // delete the Graphviz rendering if any
  $matches = array();
  if (preg_match_all(GRAPHVIZ_REGEX, $node->body, $matches)) {
    $dir = file_default_scheme() . ':/' .'/graphviz';
    foreach ($matches[1] as $match) {
      $match = str_replace(array("\r\n", "\r"), "\n", $match); // do like filter.module
      $basename = md5($match);
      foreach (file_scan_directory($dir, $basename) as $file) {
        file_delete($file->filename);
      }
    }
  }
}

function _graphviz_filter_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;

  $form = array();
  $form['dot_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path of Graphviz commands'),
    '#default_value' => $filter->settings['dot_path'],
    '#description' => t('Specify the base path of the Graphviz commands (`dot`, `neato`, etc). 
                         Leave blank if these commands are to be found on the system PATH which, on this server, is set to:<br /><pre>@path</pre>',
                         array('@path' => getenv('PATH'))
                       ),
  );
  $form['commands'] = array(
    '#type' => 'textfield',
    '#title' => t('Supported Graphviz commands'),
    '#default_value' => $filter->settings['commands'],
    '#description' => t('Specify the Graphviz commands that can be invoked by the filter, separated by commas. This prevents users from inserting malicious commands in the Graphviz script.'),
  );
  $form['pear_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path of PEAR::Image_GraphViz package'),
    '#default_value' => $filter->settings['pear_path'],
    '#description' => t('Specify the base path of the PEAR::Image_GraphViz package. 
                         The specified directory should contain the following subdirectory structure: Image/GraphViz.php. 
                         Leave blank if this package was installed via `pear install` or if it is present in the PHP include_path setting.
                         Note that this setting is only needed for sub-modules CCK Schema and Workflow Graph, rather than the core Graphviz Filter module.
                         On this server, the PHP include_path is set to:<br/><pre>@path</pre>',
                         array('@path' => ini_get('include_path'))
                       ),
  );
  return $form;
}

function _graphviz_create_filepath($path, $filename) {
  if (!empty($path)) {
    return rtrim($path, '/') .'/'. $filename;
  }
  return $filename;
}

function _graphviz_filter_filterproc($matches, $format) {
  return graphviz_filter_filterproc($matches[1]);
}

function graphviz_filter_filterproc($text) {
  // Parse arguments.
  list($formats, $args) = _graphviz_filter_formats();
  _graphviz_filter_parse_args($text, $args);

  // Check for existing command.
  $supported = array_map('trim', explode(',', variable_get('graphviz_filter_commands', GRAPHVIZ_FILTER_SUPPORTED_COMMANDS)));
  if (!in_array($args['command']['value'], $supported)) {
    $msg = 'Graphviz command `%command` is not supported. Please choose one of (%supported) or edit the Graphviz filter settings.';
    $arg = array('%command' => $args['command']['value'], '%supported' => implode(', ', $supported));
    drupal_set_message(t($msg, $arg), 'error');
    watchdog('graphviz filter', $msg, $arg, WATCHDOG_ERROR);
    return $text;
  }

  // Create a temporary file with the DOT script.
  $outdir = '/graphviz';
  file_prepare_directory(file_build_uri($outdir), FILE_CREATE_DIRECTORY);
  $inpath = file_build_uri($outdir .'/'. md5($text) .'.dot');
  if (!file_exists(drupal_realpath($inpath))) {
    file_put_contents($inpath, $text);
  }

  // Render desired formats.
  $output = '';
  foreach (explode(',', $args['formats']['value']) as $format) {
    $format = trim($format);
    if (!array_key_exists($format, $formats)) {
      $msg = 'Graphviz format %format is not supported. Please choose one of (%supported).';
      $arg = array('%format' => $format, '%supported' => implode(', ', array_keys($formats)));
      drupal_set_message(t($msg, $arg), 'error');
      watchdog('graphviz filter', $msg, $arg, WATCHDOG_ERROR);
      continue;
    }
    $outpath = file_build_uri($outdir .'/'. md5($text) .'.out.'. $formats[$format]['format']);
    if (file_exists(drupal_realpath($outpath)) || _graphviz_filter_render($inpath, $outpath, $formats[$format]['format'], $args['command']['value'])) {
      $output .= '<div class="graphviz graphviz-'. $format .'">';
      if ($args['link-output']['value']) {
        $output .= l(t($args['title']['value']), file_create_url($outpath), array('attributes' => array('class' => 'graphviz-link-output')));
      }
      else {
        $output .= module_invoke($formats[$format]['module'], 'graphviz_render', $inpath, $outpath, $format, $args);
      }
      $output .= '</div>';
      if ($args['link-input']['value']) {
        $output .= '<div class="graphviz graphviz-"'. $format .'>';
        $output .= l(t('Download input script for %title', array('%title' => $args['title']['value'])), file_create_url($inpath), 
          array('html' => TRUE, 'attributes' => array('class' => 'graphviz-link-input'))
        );
        $output .= '</div>';
      }
    }
  }
  return $output;
}

function _graphviz_filter_formats() {
  // Gather available formats and arguments.
  $formats = array();
  $args = array(
    'command' => array(
      'description' => t('Process the graph script using this Graphviz command (`dot`, `neato`, `twopi`, etc).'),
      'value' => 'dot',
    ),
    'formats' => array(
      'description' => t('Comma-separated list of desired output formats.'),
      'value' => 'png',
    ),
    'title' => array(
      'description' => t('Title of the output image.'),
      'value' => '',
    ),
    'link-output' => array(
      'description' => t('Output a link to the output image instead of embedding it (needs @title).'),
      'value' => FALSE,
    ),
    'link-input' => array(
      'description' => t('Add a link to the input DOT script (needs @title).'),
      'value' => FALSE,
    ),
  );
  foreach (module_implements('graphviz_formats') as $module) {
    $f = module_invoke($module, 'graphviz_formats');
    foreach ($f as $format => $info) {
      $f[$format]['module'] = $module;
      if (isset($f[$format]['arguments']) && is_array($f[$format]['arguments'])) {
        $args += $f[$format]['arguments'];
      }
    }
    $formats += $f;
  }
  return array($formats, $args);
}

function _graphviz_filter_render($dotfile, $outputfile, $format, $command) {
  $command = _graphviz_create_filepath(variable_get('graphviz_filter_dot_path', ''), $command);  
  $command .= ' -T'.escapeshellarg($format)
             .' -o'.escapeshellarg(drupal_realpath($outputfile))
             .' '.escapeshellarg(drupal_realpath($dotfile))
             .' 2>&1';
  $output = array();
  $return = 0;
  exec($command, $output, $return);
  clearstatcache();
  if ($return != 0) {
    $msg = 'Graphviz encountered an error while rendering to format %format:<br />%output';
    $arg = array('%format' => $format, '%output' => check_plain(implode('<br />', $output)));
    drupal_set_message(t($msg, $arg), 'error');
    watchdog('graphviz filter', $msg, $arg, WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

function _graphviz_filter_parse_args($text, &$args) {
  // Parse comments in the DOT syntax to find our arguments.
  // Taken from a discussion in http://ostermiller.org/findcomment.html
  if (!preg_match_all("/(?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/)/", $text, $comments)) return;
  foreach ($comments[0] as $comment) {
    foreach ($args as $key => $info) {
      $value = $info['value'];
      if (($m = _graphviz_filter_parse_arg($comment, $key)) !== FALSE) {
        if (is_bool($value)) {
          $args[$key]['value'] = preg_match("/TRUE|YES|ON|1/i", $m) == 1;
        }
        else {
          $args[$key]['value'] = trim($m);
        }
      }
    }
  }
}

function _graphviz_filter_parse_arg($text, $arg) {
  // TODO This doesn't handle case /* @arg=value */ i.e. start and close on same line.
  if (preg_match("/@$arg\s*?=\s*?(\w[\w\W]*?)[\r\n]/i", $text, $match)) {
    return $match[1];
  }
  return FALSE;
}

/**
 * Implementation of hook_graphviz_formats().
 */ 
function graphviz_filter_graphviz_formats() {
  $formats = array();
  foreach (array('png', 'jpg', 'gif') as $format) {
    $formats[$format] = array(
      'description' => t('Standard HTML &lt;img&gt; rendering for !format.', array('!format' => strtoupper($format))),
      'format' => $format,
      'arguments' => array(
        'imagemap' => array(
          'description' => t('Create a client-side image map for the output image (TRUE or FALSE).'),
          'value' => FALSE,
        ),
      ),
    );
  }
  $formats['dot'] = array(
    'description' => t('Fully-laid-out DOT rendering of the graph.'),
    'format' => 'dot',
  );
  return $formats;
}

/**
 * Implementation of hook_graphviz_render().
 */
function graphviz_filter_graphviz_render($inpath, $outpath, $format, $args) {
  if ($format == 'dot' ) {
    $output = '<pre>' . file_get_contents($outpath) . '</pre>' . "\n";
  }
  else {
    $output = '<img src="'. file_create_url($outpath) .'" title="'. check_plain(t($args['title']['value'])) .'" ';
    $mapuri = $outpath .'.map';
    if ($args['imagemap']['value'] && _graphviz_filter_render($inpath, $mapuri, 'cmapx', $args['command']['value'])) {
      $map = file_get_contents($mapuri);
      $id = 'G';
      $match = array();
      if (preg_match('/<map[^>]*id\s*=\s*"(.*?)"/', $map, $match)) {
        $id = $match[1];
      }
      $output .= 'usemap="#'.$id.'" />';
      $output .= $map;
      $output .= "\n";
    }
    else {
      $output .= ' />';
    }
    $output .= "\n";
  }
  return $output;
}

/**
 * API function to render an Image_GraphViz graph.
 */
function graphviz_filter_render($G, $application = '', $application_args = array(), $graph_args = array('formats' => 'png', 'imagemap' => TRUE)) {
  if (empty($G)) return '';

  // Allow other module to alter the graph.
  $graph = array('graph' => &$G, 'arguments' => &$graph_args);
  drupal_alter('graphviz_render', $graph, $temp=array('application' => $application, 'arguments' => $application_args));

  // Construct the arguments header.
  $header = "/*\n";
  foreach ($graph_args as $key => $value) {
    $header .= " * @$key = $value\n";
  }
  $header .= " */\n";
  
  // Convert the graph object to DOT syntax.
  $dot = $G->parse();

  // Render the whole thing.
  return graphviz_filter_filterproc($header . $dot);
}

