<?php

/**
 * Implements hook_menu().
 */
function openlayers_taxonomy_menu() {
  $items = array();

  $items['admin/structure/openlayers/layers/openlayers_taxonomy'] = array(
    'title' => 'Taxonomy Layers',
    'description' => 'Configure openlayers taxonomy layers.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_taxonomy_settings_form'),
    'access arguments' => array('administer openlayers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  return $items;
}

/**
 * Return a form for the openlayers_taxonomy settings
 */
function openlayers_taxonomy_settings_form() {
  $options = array();
  foreach(taxonomy_get_vocabularies() as $vocab) {
    $options[$vocab->vid] = $vocab->name;
  }

  $form['openlayers_taxonomy_vids'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Vocabularies'),
    '#description' => t('Each selected vocabulary will have it\'s terms turned into a layer.'),
    '#options' => $options,
    '#default_value' => variable_get('openlayers_taxonomy_vids', array())
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Submit handler for openlayers_taxonomy_settings_form()
 */
function openlayers_taxonomy_settings_form_submit($form, $form_state) {
  variable_set('openlayers_taxonomy_vids', $form_state['values']['openlayers_taxonomy_vids']);
  views_invalidate_cache();
}


/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_taxonomy_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_layers':
        return array('version' => 1);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function openlayers_taxonomy_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_default_views().
 */
function openlayers_taxonomy_views_default_views() {
  $views = array();

  $view = new view();
  $view->name = 'openlayers_taxonomy';
  $view->description = 'Taxonomy layer provides a layer per term.';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'OpenLayers';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = TRUE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'none';
  $handler->display->display_options['pager']['options']['offset'] = '0';
  $handler->display->display_options['style_plugin'] = 'openlayers_data';
  $handler->display->display_options['style_options']['data_source'] = array(
    'value' => 'wkt',
    'other_lat' => 'title',
    'other_lon' => 'title',
    'wkt' => 'title',
    'other_top' => 'title',
    'other_right' => 'title',
    'other_bottom' => 'title',
    'other_left' => 'title',
    'name_field' => 'title',
    'description_field' => '',
    'view_mode' => 'full',
    'style_field' => '',
  );
  $handler->display->display_options['row_plugin'] = 'fields';
  /* Field: Content: Title */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = '';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  /* Contextual filter: Content: Has taxonomy term ID (with depth) */
  $handler->display->display_options['arguments']['term_node_tid_depth']['id'] = 'term_node_tid_depth';
  $handler->display->display_options['arguments']['term_node_tid_depth']['table'] = 'node';
  $handler->display->display_options['arguments']['term_node_tid_depth']['field'] = 'term_node_tid_depth';
  $handler->display->display_options['arguments']['term_node_tid_depth']['default_action'] = 'not found';
  $handler->display->display_options['arguments']['term_node_tid_depth']['title_enable'] = TRUE;
  $handler->display->display_options['arguments']['term_node_tid_depth']['title'] = '%1';
  $handler->display->display_options['arguments']['term_node_tid_depth']['default_argument_type'] = 'fixed';
  $handler->display->display_options['arguments']['term_node_tid_depth']['summary']['number_of_records'] = '0';
  $handler->display->display_options['arguments']['term_node_tid_depth']['summary']['format'] = 'default_summary';
  $handler->display->display_options['arguments']['term_node_tid_depth']['summary_options']['items_per_page'] = '25';
  $handler->display->display_options['arguments']['term_node_tid_depth']['specify_validation'] = TRUE;
  $handler->display->display_options['arguments']['term_node_tid_depth']['validate']['type'] = 'taxonomy_term';
  $handler->display->display_options['arguments']['term_node_tid_depth']['depth'] = '0';
  $handler->display->display_options['arguments']['term_node_tid_depth']['break_phrase'] = TRUE;
  /* Contextual filter: Content: Has taxonomy term ID depth modifier */
  $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['id'] = 'term_node_tid_depth_modifier';
  $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['table'] = 'node';
  $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['field'] = 'term_node_tid_depth_modifier';
  $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['default_argument_type'] = 'fixed';
  $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['summary']['format'] = 'default_summary';  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;

  $vids = variable_get('openlayers_taxonomy_vids', array());

  foreach ($vids as $vid) {
    $terms = taxonomy_get_tree($vid);
    foreach ($terms as $term) {
      $voc = taxonomy_vocabulary_load($vid);
      /* Display: OpenLayers Taxonomy Data Overlay */
      $handler = $view->new_display('openlayers', $voc->name . ' - ' . $term->name, $voc->machine_name.'_'.$term->tid);
      $handler->display->display_options['title'] = 'Taxonomy layer';
      $handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
      $handler->display->display_options['defaults']['row_plugin'] = FALSE;
      $handler->display->display_options['row_plugin'] = 'fields';
      $handler->display->display_options['defaults']['arguments'] = FALSE;
      /* Contextual filter: Content: Has taxonomy term ID (with depth) */
      $handler->display->display_options['arguments']['term_node_tid_depth']['id'] = 'term_node_tid_depth';
      $handler->display->display_options['arguments']['term_node_tid_depth']['table'] = 'node';
      $handler->display->display_options['arguments']['term_node_tid_depth']['field'] = 'term_node_tid_depth';
      $handler->display->display_options['arguments']['term_node_tid_depth']['default_action'] = 'default';
      $handler->display->display_options['arguments']['term_node_tid_depth']['title_enable'] = TRUE;
      $handler->display->display_options['arguments']['term_node_tid_depth']['title'] = '%1';
      $handler->display->display_options['arguments']['term_node_tid_depth']['default_argument_type'] = 'fixed';
      $handler->display->display_options['arguments']['term_node_tid_depth']['default_argument_options']['argument'] = $term->tid;
      $handler->display->display_options['arguments']['term_node_tid_depth']['summary']['number_of_records'] = '0';
      $handler->display->display_options['arguments']['term_node_tid_depth']['summary']['format'] = 'default_summary';
      $handler->display->display_options['arguments']['term_node_tid_depth']['summary_options']['items_per_page'] = '25';
      $handler->display->display_options['arguments']['term_node_tid_depth']['specify_validation'] = TRUE;
      $handler->display->display_options['arguments']['term_node_tid_depth']['validate']['type'] = 'taxonomy_term';
      $handler->display->display_options['arguments']['term_node_tid_depth']['depth'] = '0';
      $handler->display->display_options['arguments']['term_node_tid_depth']['break_phrase'] = TRUE;
      /* Contextual filter: Content: Has taxonomy term ID depth modifier */
      $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['id'] = 'term_node_tid_depth_modifier';
      $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['table'] = 'node';
      $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['field'] = 'term_node_tid_depth_modifier';
      $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['default_argument_type'] = 'fixed';
      $handler->display->display_options['arguments']['term_node_tid_depth_modifier']['summary']['format'] = 'default_summary';
    }
  }
  if (count($vids)) {
    $views[$view->name] = $view;
  }

  return $views;
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function openlayers_taxonomy_taxonomy_term_delete($term) {
  // Flush the cache if we're creating, editing, or deleting a term
  views_invalidate_cache();
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function openlayers_taxonomy_taxonomy_term_presave($term) {
  // Flush the cache if we're creating, editing, or deleting a term
  views_invalidate_cache();
}

/**
 * Implements hook_taxonomy_vocabulary_delete().
 */
function openlayers_taxonomy_taxonomy_vocabulary_delete($vocabulary) {
  // Update the vid list when a vocab is deleted
  $vids = variable_get('openlayers_taxonomy_vids', array());
  foreach($vids as $key => $vid) {
    if ($vid == $vocabulary->vid) {
      unset($vids[$key]);
    }
  }
  variable_set('openlayers_taxonomy_vids', $vids);
  views_invalidate_cache();
}
