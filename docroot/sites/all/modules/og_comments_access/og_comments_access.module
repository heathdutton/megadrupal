<?php

/**
 * @file
 * Organic groups comments access.
 */

/**
 * Implements hook_og_permission().
 */
function og_comments_access_og_permission() {
  $items = array();
  $items['modify any comments'] = array(
    'title' => t('Modify any comments'),
    'description' => t('Allow user to modify any comments.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );
  $items['post comments'] = array(
    'title' => t('Post comments'),
    'description' => t('Allow user to post comments.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE, OG_AUTHENTICATED_ROLE),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function og_comments_access_menu_alter(&$items) {
  // Change the access callback for comment edition.
  $items['comment/%comment/edit']['access callback'] = 'og_comments_access';
  $items['comment/%comment/edit']['access arguments'] = array('edit', 1);
  // Change the access callback for comment reply.
  $items['comment/reply/%node']['access callback'] = 'og_comments_access_post_and_reply';
  $items['comment/reply/%node']['access arguments'] = array(2);
}

/**
 * Determines whether the current user has access to edit particular comment.
 *
 * @see comment_access()
 */
function og_comments_access($op, $comment, $account = NULL) {
  global $user;

  // Allow to specify a user.
  if (!is_null($account)) {
    $account = $user;
  }

  if ($op == 'edit' && isset($comment->nid)) {
    // Load the comment node.
    $node = node_load($comment->nid);

    // Check if the user can administer the group.
    $access = og_user_access_entity('administer group', 'node', $node, $user);
    // Check if the user as the right permissions.
    $access = $access ||
          og_user_access_entity('modify any comments', 'node', $node, $user);
    // We still check the usual permissions.
    return (($user->uid && $user->uid == $comment->uid && $comment->status == COMMENT_PUBLISHED && user_access('edit own comments', $user))) || user_access('administer comments', $user) || $access;
  }
}

/**
 * Custom access function for comment posting in a group content.
 */
function og_comments_access_post_and_reply($node) {
  global $user;

  $access = og_user_access_entity('administer group', 'node', $node, $user);
  // Check if we are in a group context.
  if (!is_null($access)) {
    // Check if the user as the right permissions.
    $access = $access ||
          og_user_access_entity('post comments', 'node', $node, $user);

    $access = $access || user_access('administer comments');
  }
  // If we are not we use the default permission.
  else {
    $access = user_access('post comments');
  }

  return $access;
}


/**
 * Implements hook_node_view().
 */
function og_comments_access_node_view($node, $view_mode) {
  $access = og_comments_access_post_and_reply($node);

  // Unset the comment form if the user /
  // is not in at least one of the node's group.
  if (isset($node->content['links']['comment']) && !$access) {
    unset($node->content['links']['comment']['#links']['comment-add']);
    unset($node->content['comments']['comment_form']);
  }
}

/**
 * Implements hook_comment_view().
 */
function og_comments_access_comment_view($comment, $view_mode, $langcode) {
  $node = node_load($comment->nid);
  $access = $access = og_comments_access_post_and_reply($node);

  // Unset the reply link if the user is /
  // not in at least one of the node's group.
  if (isset($comment->content['links']['comment']['#links']['comment-reply']) && !$access) {
    unset($comment->content['links']['comment']['#links']['comment-reply']);
  }

  $access_edit = og_comments_access('edit', $comment);
  if (!isset($comment->content['links']['comment']['#links']['comment-edit']) && $access_edit) {
    $comment->content['links']['comment']['#links']['comment-edit'] = array(
      'title' => t('edit'),
      'href' => "comment/$comment->cid/edit",
      'html' => TRUE,
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function og_comments_access_form_alter(&$form, &$form_state, $form_id) {
  // Keep the original comment owner when group administrator edit a comment.
  if ($form_id == 'comment_node_post_form') {
    // Get the comment.
    $comment = $form['#entity'];
    // If it's an existing comment and the user /
    // as the right to edit in the group.
    if ($comment->cid && og_comments_access('edit', $comment)) {

      // Do as if it was and administrator.
      // See comment_form() in comment module.
      $form['author']['#type'] = 'fieldset';
      $form['author']['#title'] = t('Administration');
      $form['author']['#collapsible'] = TRUE;
      $form['author']['#collapsed'] = TRUE;
      $form['author']['#weight'] = -2;

      $author = (!$comment->uid && $comment->name ? $comment->name : $comment->registered_name);
      $form['author']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Authored by'),
        '#default_value' => $author,
        '#maxlength' => 60,
        '#size' => 30,
        '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
        '#autocomplete_path' => 'user/autocomplete',
      );

    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * @see entity_module_implements_alter()
 */
function og_comments_access_entity_info_alter(&$entity_info) {
  // Change the entity callback for comment.
  if (module_exists('comment')) {
    $entity_info['comment']['access callback'] = 'og_comments_access_entity_metadata_comment_access';
  }
}

/**
 * Overwrite the default access callback for the comment entity.
 *
 * @see entity_metadata_comment_access
 */
function og_comments_access_entity_metadata_comment_access($op, $entity = NULL, $account = NULL) {
  // When determining access to a comment, 'comment_access' does not take any
  // access restrictions to the comment's associated node into account. If a
  // comment has an associated node, the user must be able to view it in order
  // to access the comment.
  if (isset($entity->nid)) {
    if (!entity_access('view', 'node', node_load($entity->nid), $account)) {
      return FALSE;
    }
  }

  // Comment administrators are allowed to perform all operations on all
  // comments.
  if (user_access('administer comments', $account)) {
    return TRUE;
  }

  // Unpublished comments can never be accessed by non-admins.
  if (isset($entity->status) && $entity->status == COMMENT_NOT_PUBLISHED) {
    return FALSE;
  }

  if (isset($entity) && $op == 'update') {
    // Adding OG group permission check.
    if (!isset($account)) {
      return og_comments_access('edit', $entity);
    }
    else {
      return og_comments_access('edit', $entity, $account);
    }
  }
  if (user_access('access comments', $account) && $op == 'view') {
    return TRUE;
  }
  return FALSE;
}
