<?php
/**
 * @file
 * The Mail2 module creates blocks with one form for each public newsletter.
 */

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function mail2_libraries_info() {
  // Expected to be extracted into 'sites/all/libraries/mail2_api'.
  $libraries['mail2'] = array(
    'name' => 'mail2 API',
    'vendor url' => 'http://mail2support.lynch2.com/',
    'download url' => 'http://mail2support.lynch2.com/customer/portal/kb_article_attachments/11858/original.phps?1359297049',
    'version arguments' => array(
      'file' => 'class.mail2.phps',
      'pattern' => '/version = "([\d\.]+)/',
      'lines' => 6,
    ),
    'files' => array(
      'php' => array('class.mail2.phps'),
    ),
  );
  return $libraries;
}

/**
 * Helper function which will load the mail2 library.
 *
 * This will utlize the Libraries module in order to find the library, if it's
 * available. Otherwise it will look in the sites/all/libraries folder.
 *
 * @return bool
 *   TRUE or FALSE depending on whether the library could be loaded or not.
 */
function mail2_load_library() {
  if (module_exists('libraries')) {
    // Load using Libraries and returned the installed status.
    $information = libraries_load('mail2');
    return $information['installed'];
  }

  // Try to include from sites/all/libraries.
  $file = DRUPAL_ROOT . '/sites/all/libraries/mail2/class.mail2.phps';
  if (file_exists($file)) {
    require_once $file;
    return TRUE;
  }

  // Failed to find the file.
  return FALSE;
}

/**
 * Get list of all enabled news letters.
 *
 * @return array
 *   Array of newsletter objects.
 */
function _mail2_get_activated_lists() {
  return variable_get('mail2_lists_active', array());
}

/**
 * Get the name of a specific news letter.
 *
 * @param int $list_id
 *   The lists id.
 *
 * @return string
 *   Name of list or "Unknown list" if not set.
 */
function _mail2_get_list_name($list_id) {
  $lists = variable_get('mail2_lists_active', array());
  $list_name = t('Unknown list');

  if (array_key_exists($list_id, $lists) && isset($lists[$list_id]['name'])) {
    $list_name = $lists[$list_id]['name'];
  }

  return $list_name;
}

/**
 * Get list of all public news letters from mail2.
 *
 * @return array
 *   Array of newsletter objects.
 */
function _mail2_get_public_lists() {
  // Load the mail2 library.
  mail2_load_library();

  $items = array();

  try {
    if (class_exists('mail2')) {
      $mail2 = new mail2(variable_get('mail2_api_key', ''), FALSE);
      $items = $mail2->List_Get_Active_Lists(array('type' => 'public'));
    }
    else {
      throw new Exception('You seem to be missing the mail2 API!');
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Could not get available lists from mail2. @message',
      array('@message' => $e->getMessage())), 'warning');
  }

  return $items;
}

/**
 * Add subscription to mail2 list.
 *
 * @param int $list_id
 *   Id of list to add subscription to.
 *
 * @param string $email
 *   The subscribers e-mail address.
 *
 * @return bool
 *   Boolean that indicates if the subscription has been added or not.
 */
function _mail2_add_subscription($list_id, $email) {
  // Load the mail2 library.
  mail2_load_library();

  try {
    if (class_exists('mail2')) {
      $mail2 = new mail2(variable_get('mail2_api_key', ''), FALSE);
      return $mail2->List_Subscribe($list_id, $email);
    }
    else {
      throw new Exception('The module mail2 might need to be re-installed.');
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('The subscription request could not be handled: @message',
      array('@message' => $e->getMessage())), 'warning');
  }

  return FALSE;
}

/**
 * Remove an email address contact from an existing list.
 *
 * @param int $list_id
 *   The relevant list id the contact want to unsubscribe from.
 *
 * @param string $email
 *   The relevant email address.
 */
function _mail2_contact_remove_subscription($list_id, $email) {
  // Load the mail2 library.
  mail2_load_library();

  $items = array();

  try {
    if (class_exists('mail2')) {
      $mail2 = new mail2(variable_get('mail2_api_key', ''), FALSE);
      $response = $mail2->List_Unsubscribe($list_id, $email);
    }
    else {
      throw new Exception('You seem to be missing the mail2 API!');
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Could not remove subscription. @message',
      array('@message' => $e->getMessage())), 'warning');
  }

  return $items;
}

/**
 * Get the listIds for all the lists this contact is subscribed to.
 *
 * @param string $email
 *   The email address you want to get subscriptions form.
 */
function _mail2_contact_get_subscription($email) {
  // Load the mail2 library.
  mail2_load_library();

  $items = array();
  if (class_exists('mail2')) {
    $mail2 = new mail2(variable_get('mail2_api_key', ''), FALSE);
    try {
      $mail2->Contact_Get_Subscriptions($email);
    }
    catch (Exception $e) {
      // Not finding any subscription is not an error. Don't do any handling.
    }
  }
  else {
    throw new Exception('You seem to be missing the mail2 API!');
  }

  return $items;
}

/**
 * Implements hook_menu().
 *
 * No configuration is available at the moment. Feel free to implement it. :)
 */
function mail2_menu() {
  $items = array();

  $items['admin/config/services/mail2'] = array(
    'title' => 'Mail2',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mail2_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: mail2 Settings.
 *
 * @see mail2_menu()
 */
function mail2_form($form, &$form_state) {
  // Add form elements.
  $form['mail2_api_key'] = array(
    '#type' => 'textfield',
    '#title' => 'API key',
    '#default_value' => variable_get('mail2_api_key', ''),
  );

  $form['mail2_email_placeholder'] = array(
    '#type' => 'textfield',
    '#title' => 'Placeholder text for email subscription field',
    '#default_value' => variable_get('mail2_email_placeholder', 'email@example.org...'),
  );

  if ($lists = (array) _mail2_get_public_lists()) {
    // Update stored variable of existing lists.
    variable_set('mail2_lists', $lists);

    // Build options for checkboxes: id => name.
    $options = array();
    foreach ($lists as $list) {
      $options[$list['listId']] = $list['name'];
    }

    // Get lists that have been activated before.
    $active_lists = variable_get('mail2_lists_active', array());

    $form['mail2_states'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Select which lists should be made available as blocks:'),
      '#options' => $options,
      '#default_value' => array_keys($active_lists),
    );
  }

  $form['#submit'][] = 'mail2_form_submit';

  return system_settings_form($form);
}

/**
 * Submit function that gets mailing lists from Mail2.
 */
function mail2_form_submit(&$form, &$form_state) {
  $lists = variable_get('mail2_lists', array());

  if (!empty($form_state['values']['mail2_states'])) {
    // Unset lists that are not checked.
    foreach ($form_state['values']['mail2_states'] as $key => $val) {
      if (!$val) {
        unset($lists[$key]);
      }
    }
    // Save activated lists.
    variable_set('mail2_lists_active', $lists);
  }
}

/**
 * Implements hook_block_info().
 */
function mail2_block_info() {
  $blocks = array();

  foreach (_mail2_get_activated_lists() as $list) {
    $blocks[$list['listId']] = array(
      // The name that will appear in the block list.
      'info' => t('mail2: @name', array('@name' => $list['name'])),
      'cache' => DRUPAL_CACHE_GLOBAL,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mail2_block_view($delta = '') {
  $block = array();

  foreach (_mail2_get_activated_lists() as $list) {
    if ($list['listId'] == $delta) {
      $block['subject'] = t('@name', array('@name' => $list['name']));

      if (user_access('access content')) {
        $block['content'] = drupal_get_form('mail2_subscribe_form_' . $list['listId'], $list['listId']);
      }

      break;
    }
  }

  return $block;
}

/**
 * Form constructor for subscription form.
 *
 * @param int $list_id
 *   Id of list to generate form for.
 */
function mail2_subscribe_form($form, &$form_state, $list_id = 0) {
  $form['list_id'] = array(
    '#type' => 'hidden',
    '#value' => $list_id,
  );

  $form['email'] = array(
    '#attributes' => array('placeholder' => variable_get('mail2_email_placeholder', 'email@example.org...')),
    '#type' => 'textfield',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );

  return $form;
}

/**
 * Adds a validation handler for our subscription form.
 */
function mail2_subscribe_form_validate($form, &$form_state) {
  $email = $form_state['values']['email'];

  // A very rudimentary check.
  if (!valid_email_address($email)) {
    form_set_error('email', t('@email is not a valid e-mail address.', array('@email' => $email)));
  }
}

/**
 * Adds a submit handler for our subscription form.
 */
function mail2_subscribe_form_submit($form, &$form_state) {
  $list_id = $form_state['values']['list_id'];
  $email = $form_state['values']['email'];
  $list_name = _mail2_get_list_name($list_id);

  if (_mail2_add_subscription($list_id, $email)) {
    drupal_set_message(t('You have successfully subscribed to @list.', array('@list' => $list_name)));
  }
  else {
    drupal_set_message(t('Registration encountered an error.'), 'warning');
  }
}

/**
 * Implements hook_forms().
 */
function mail2_forms($form_id, $args) {
  $forms = array();

  // Makes Drupal generate unique form id's, otherwise we can't have
  // multiple forms on the same page.
  if (preg_match('/^mail2_subscribe_form_\d+$/', $form_id)) {
    $forms[$form_id] = array(
      'callback' => 'mail2_subscribe_form',
    );
  }

  return $forms;
}
