<?php
/**
 * @file
 * Defines the functions of the basic functionality of the Elearning module.
 */

define('ELEARNING_STATUS_UNSTARTED', 0);
define('ELEARNING_STATUS_STARTED', 1);
define('ELEARNING_STATUS_PASSED', 2);
define('ELEARNING_STATUS_FAILED', 3);
define('ELEARNING_STATUS_FINISHED', 4);

define('ELEARNING_DEFAULT_PASSING_THRESHOLD', 60);

/**
 * Lists the different result statuses.
 */
function elearning_result_status_list() {
  return array(
    ELEARNING_STATUS_STARTED => 'started',
    ELEARNING_STATUS_FAILED => 'failed',
    ELEARNING_STATUS_PASSED => 'passed',
    ELEARNING_STATUS_FINISHED => 'finished',
  );
}

/**
 * List different result statuses as translatable strings.
 */
function elearning_result_status_list_strings() {
  return array(
    ELEARNING_STATUS_STARTED => t('Started'),
    ELEARNING_STATUS_FAILED => t('Failed'),
    ELEARNING_STATUS_PASSED => t('Passed'),
    ELEARNING_STATUS_FINISHED => t('Finished'),
  );
}

module_load_include('inc', 'elearning', 'includes/elearning.field');
module_load_include('inc', 'elearning', 'includes/elearning.result');
module_load_include('inc', 'elearning', 'includes/elearning.entity');
module_load_include('inc', 'elearning', 'includes/elearning.access');

/**
 * Implements hook_menu().
 */
function elearning_menu() {
  $items['course/%elearning_course'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('elearning_course', 1),
    'page callback' => 'elearning_entity_page_view',
    'page arguments' => array('elearning_course', 1),
    'access callback' => 'elearning_course_entity_access',
    'access arguments' => array('view', 1, NULL, 'elearning_course', TRUE),
    'file' => 'elearning.pages.inc',
    'file path' => drupal_get_path('module', 'elearning') . '/includes',
  );

  $items['course/%elearning_course/%ctools_js/reset'] = array(
    'title' => 'Are you sure?',
    'page callback' => 'elearning_entity_result_reset',
    'page arguments' => array(2, 1),
    'access callback' => 'elearning_entity_retry_access',
    'access arguments' => array('elearning_course', 1),
    'file' => 'elearning.pages.inc',
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'elearning') . '/includes',
  );

  $items['course/%elearning_course/unit/%elearning_unit'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('elearning_unit', 3),
    'page callback' => 'elearning_entity_page_view',
    'page arguments' => array('elearning_unit', 3),
    'access callback' => 'elearning_unit_entity_access',
    'access arguments' => array('view', 3, NULL, 'elearning_unit', 1, TRUE),
    'file' => 'elearning.pages.inc',
    'file path' => drupal_get_path('module', 'elearning') . '/includes',
  );
  $items['course/%elearning_course/unit/%elearning_unit/%ctools_js/reset'] = array(
    'title' => 'Are you sure?',
    'page callback' => 'elearning_entity_result_reset',
    'page arguments' => array(4, 3),
    'access callback' => 'elearning_entity_retry_access',
    'access arguments' => array('elearning_unit', 3, 1),
    'file' => 'elearning.pages.inc',
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'elearning') . '/includes',
  );
  $items['course/%elearning_course/unit/%elearning_unit/exercise/%elearning_exercise'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('elearning_exercise', 5),
    'page callback' => 'elearning_entity_page_view',
    'page arguments' => array('elearning_exercise', 5),
    'access callback' => 'elearning_exercise_entity_access',
    'access arguments' => array('view', 5, NULL, 'elearning_exercise', 3, 1, TRUE),
    'file' => 'elearning.pages.inc',
    'file path' => drupal_get_path('module', 'elearning') . '/includes',
  );
  $items['course/%elearning_course/unit/%elearning_unit/exercise/%elearning_exercise/result/%elearning_exercise_result/%ctools_js'] = array(
    'title callback' => 'elearning_exercise_result_page_title',
    'title arguments' => array (5),
    'page callback' => 'elearning_exercise_result_page',
    'page arguments' => array(7, 8),
    'access callback' => 'elearning_entity_result_access',
    'access arguments' => array('view', 7, NULL),
    'file' => 'elearning.pages.inc',
    'file path' => drupal_get_path('module', 'elearning') . '/includes',
  );

  return $items;
}

/**
 * Implements hook_permisison().
 */
function elearning_permission() {
  $permissions['administer elearning config'] = array(
    'title' => t('Administer Elearning settings'),
    'description' => t('Give administration rights to elearning settings.'),
    'restrict access' => TRUE,
  );
  $permissions['administer elearning course access'] = array(
    'title' => t('Administer course access'),
    'description' => t('Grant or deny a user access to courses.'),
  );
  $permissions['administer elearning results'] = array(
    'title' => t('Administer results'),
    'description' => t('View and delete elearning results.'),
  );
  $permissions['view own results'] = array(
    'title' => t('View own results'),
    'description' => t('View own Elearning results.'),
  );

  foreach (elearning_get_elearning_entity_info() as $entity_type => $entity_info) {
    $permissions['administer ' . str_replace('_', ' ', $entity_type)] = array(
      'title' => t('Administer @entity_type', array('@entity_type' => strtolower($entity_info['plural label']))),
      'restrict access' => TRUE,
    );
  }

  return $permissions;
}

/**
 * Implements hook_hook_info().
 */
function elearning_hook_info() {
  $hooks = array(
    'elearning_entity_label' => array(
      'group' => 'elearning',
    ),
    'elearning_entity_settings' => array(
      'group' => 'elearning',
    ),
    'elearning_course_access' => array(
      'group' => 'elearning',
    ),
    'elearning_unit_access' => array(
      'group' => 'elearning',
    ),
    'elearning_exercise_access' => array(
      'group' => 'elearning',
    ),
    'elearning_exercise_type' => array(
      'group' => 'elearning',
    ),
    'elearning_exercise_formatter_form' => array(
      'group' => 'elearning',
    ),
    'elearning_question_reference_items_alter' => array(
      'group' => 'elearning',
    ),
    'elearning_question_type' => array(
      'group' => 'elearning',
    ),
    'elearning_question_form_element' => array(
      'group' => 'elearning',
    ),
    'elearning_question_form_element_alter' => array(
      'group' => 'elearning',
    ),
    'elearning_question_widget_alter' => array(
      'group' => 'elearning',
    ),
    'elearning_question_check_correct' => array(
      'group' => 'elearning',
    ),
    'elearning_question_given_answer' => array(
      'group' => 'elearning',
    ),
    'elearning_result_access' => array(
      'group' => 'elearning',
    ),
  );
  return $hooks;
}

/**
 * Implements hook_entity_info().
 *
 * @see elearning_entity_basic_key()
 */
function elearning_entity_info() {

  $elearning_types = elearning_entity_basic_keys();

  foreach ($elearning_types as $elearning_type => $elearning_type_info) {
    $info['elearning_' . $elearning_type] = array(
      'label' => $elearning_type_info['label'],
      'plural label' => $elearning_type_info['plural label'],
      'entity class' => 'Entity',
      'controller class' => 'ElearningEntityController',
      'base table' => 'elearning_' . $elearning_type,
      'fieldable' => TRUE,
      'module' => 'elearning',
      'group' => 'elearning',
      'label callback' => 'elearning_entity_label',
      'uri callback' => 'elearning_' . $elearning_type . '_uri',
      'access callback' => 'elearning_entity_access',
      'entity keys' => array(
        'id' => $elearning_type . '_id',
        'bundle' => 'type',
        'label' => 'label',
        'language' => 'language',
      ),
    );

    // Add a Teaser view mode to all types except 'question'.
    if ($elearning_type != "elearning_question") {
      $info['elearning_' . $elearning_type]['view modes'] = array(
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
      );
    }

    // The course result entity.
    $info['elearning_' . $elearning_type . '_result'] = array(
      'label' => t('@type result', array('@type' => $elearning_type_info['label'])),
      'plural label' => t('@type results', array('@type' => $elearning_type_info['label'])),
      'base table' => 'elearning_' . $elearning_type . '_result',
      'controller class' => 'ElearningResultEntityController',
      'entity class' => 'Entity',
      'access callback' => 'elearning_entity_result_access',
      'module' => 'elearning',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'result_id',
      ),
      'static cache' => FALSE,
    );
  }

  // Set a different Controllor for the course since it has to deal
  // with Course Access.
  $info['elearning_course']['controller class'] = 'ElearningCourseController';

  // For every exercise type create a view mode on the question.
  $bundles = module_invoke_all('elearning_exercise_type');
  foreach ($bundles as $machine_name => $label) {

    $info['elearning_exercise']['bundles'][$machine_name] = array(
      'label' => $label,
    );

    // Create a view mode per exercise type for the questions
    // So they can be displayed diffferently.
    $info['elearning_question']['view modes'][$machine_name] = array(
      'label' => $label,
      'custom settings' => FALSE,
    );
  }

  // For every exercise type create a view mode on the question.
  $bundles = module_invoke_all('elearning_question_type');
  foreach ($bundles as $machine_name => $label) {
    $info['elearning_question']['bundles'][$machine_name] = array(
      'label' => $label,
    );
  }

  // The Course Access Entity.
  $info['elearning_course_access'] = array(
    'label' => t('Course Access Record'),
    'base table' => 'elearning_course_access',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'fieldable' => FALSE,
    'module' => 'elearning',
    'entity keys' => array(
      'id' => 'course_access_id',
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function elearning_entity_property_info_alter(&$info) {

  // Iterate over our basic elearning entity types, since most of the
  // properties are the same.
  $elearning_types = elearning_entity_basic_keys();

  foreach ($elearning_types as $elearning_type => $elearning_type_info) {

    $parent = elearning_entity_basic_keys_relative($elearning_type, 'parent');

    // Main entity types.
    $properties = array(
      'label' => array(
        'label' => t("Label"),
        'description' => t('The @entity_type label.', array('@entity_type' => $elearning_type)),
      ),
      'language' => array(
        'description' => t('The language of this @entity_type.', array('@entity_type' => $elearning_type)),
      ),
      'created' => array(
        'description' => t('When the @entity_type was created.', array('@entity_type' => $elearning_type)),
        'type' => 'date',
      ),
      'changed' => array(
        'description' => t('When the @entity_type was updated.', array('@entity_type' => $elearning_type)),
        'type' => 'date',
      ),
      'author' => array(
        'type' => 'user',
        'label' => t("Author"),
        'description' => t('Author of this @entity_type.', array('@entity_type' => $elearning_type)),
        'setter callback' => 'entity_property_verbatim_set',
        'getter callback' => 'elearning_metadata_get_properties',
        'schema field' => 'uid',
        'entity views field' => TRUE,
      ),
      'result' => array(
        'type' => 'elearning_' . $elearning_type . '_result',
        'label' => t('Result'),
        'description' => t('Last result for this @entity_type and the current user.', array('@entity_type' => $elearning_type)),
        'computed' => TRUE,
        'entity views field' => TRUE,
        'getter callback' => 'elearning_property_result_getter',
      ),
    );

    if ($parent) {
      $properties[$parent] = array(
        'type' => 'elearning_' . $parent,
        'label' => $elearning_types[$parent]['label'],
        'description' => t('The @parent to which this @entity_type belongs.', array('@parent' => $parent, '@entity_type' => $elearning_type)),
        'computed' => TRUE,
        'entity views field' => TRUE,
        'getter callback' => 'elearning_property_' . $parent . '_getter',
      );
    }

    switch ($elearning_type) {
      case 'question':
      case 'exercise':
        $properties['type']['label'] = t('@entity_type type', array('@entity_type' => $elearning_type_info['label']));
        break;
    }

    $info['elearning_' . $elearning_type]['properties'] = array_replace_recursive($info['elearning_' . $elearning_type]['properties'], $properties);

    // Result entity types.
    $properties = array(
      'uid' => array(
        'type' => 'user',
        'label' => t('Owner'),
        'description' => t('Owner of this @entity_type result.', array('@entity_type' => $elearning_type)),
        'setter callback' => 'entity_property_verbatim_set',
        'schema field' => 'uid',
        'entity views field' => TRUE,
      ),
      $elearning_type => array(
        'type' => 'elearning_' . $elearning_type,
        'label' => $elearning_type_info['label'],
        'description' => t('The @entity_type this @entity_type result belongs to.', array('@entity_type' => $elearning_type)),
        'setter callback' => 'entity_property_verbatim_set',
        'getter callback' => 'elearning_metadata_get_properties',
        'schema field' => $elearning_type . '_id',
        'entity views field' => TRUE,
      ),
      $elearning_type . '_id' => array(
        'type' => 'elearning_' . $elearning_type,
        'label' => $elearning_type_info['label'],
      ),
    );

    if ($parent) {
      $properties[$parent . '_result'] = array(
        'label' => t('@entity_type result', array('@entity_type' => $elearning_types[$parent]['label'])),
        'type' => 'elearning_' . $parent . '_result',
        'description' => t('The @parent result entity this @entity_type result belongs to.', array('@parent' => $parent, '@entity_type' => $elearning_type)),
        'setter callback' => 'entity_property_verbatim_set',
      );
    }

    switch ($elearning_type) {
      case 'exercise':
      case 'unit':
      case 'course':
        $properties['started'] = array(
          'type' => 'date',
          'label' => t('Start time'),
          'description' => t('Time when the @entity_type was started.', array('@entity_type' => $elearning_type)),
          'setter callback' => 'entity_property_verbatim_set',
        );
        $properties['finished'] = array(
          'type' => 'date',
          'label' => t('Finish time'),
          'description' => t('Time when the @entity_type was finished.', array('@entity_type' => $elearning_type)),
          'setter callback' => 'entity_property_verbatim_set',
        );
        $properties['duration'] = array(
          'type' => 'duration',
          'label' => t('Duration'),
          'description' => t('Time it took the user to finish the @entity_type.', array('@entity_type' => $elearning_type)),
          'setter callback' => 'entity_property_verbatim_set',
        );
        $properties['score'] = array(
          'label' => t('Score'),
          'description' => t('Final score in a decimal.'),
          'setter callback' => 'entity_property_verbatim_set',
          'entity views field' => TRUE,
        );
        $properties['score_formatted'] = array(
          'label' => t('Score (formatted)'),
          'computed' => TRUE,
          'entity views field' => TRUE,
          'description' => t('Result score in percentage.'),
          'getter callback' => 'elearning_metadata_get_properties',
          'entity views field' => TRUE,
        );
        $properties['status'] = array(
          'label' => t('Status'),
          'description' => t("Status of the @entity_type result.", array('@entity_type' => $elearning_type)),
          'options list' => 'elearning_result_status_list_strings',
          'setter callback' => 'entity_property_verbatim_set',
        );
        break;

      case 'question':
        $properties['correct'] = array(
          'label' => t('Correct'),
          'type' => 'boolean',
          'description' => t('Whether or not this question was answered correctly.'),
          'setter callback' => 'entity_property_verbatim_set',
        );
        $properties['given_answer'] = array(
          'label' => t('Given answer'),
          'description' => t('Details of the given answer for feedback.'),
          'setter callback' => 'entity_property_verbatim_set',
          'getter callback' => 'elearning_metadata_get_properties',
          'entity views field' => TRUE,
          'sanitized' => TRUE,
        );
        $properties['feedback'] = array(
          'label' => t('Feedback'),
          'description' => t('Feedback provided by the question type.'),
          'setter callback' => 'entity_property_verbatim_set',
          'getter callback' => 'elearning_metadata_get_properties',
          'entity views field' => TRUE,
          'computed' => TRUE,
          'sanitized' => TRUE,
        );
        $properties['weight'] = array(
          'description' => t('Saves the order of the questions within an exercise'),
          'setter callback' => 'entity_property_verbatim_set',
        );
        break;
    }

    if ($elearning_type == "course" || $elearning_type == "unit") {
      $properties['progress_formatted'] = array(
        'label' => t('Progress (formatted)'),
        'computed' => TRUE,
        'entity views field' => TRUE,
        'description' => t('Progress in percentage.'),
        'getter callback' => 'elearning_metadata_get_properties',
        'entity views field' => TRUE,
      );
      $properties['progress'] = array(
        'label' => t('Progress'),
        'description' => t('Final score in a decimal.'),
        'setter callback' => 'entity_property_verbatim_set',
        'entity views field' => TRUE,
      );
    }
    $info['elearning_' . $elearning_type . '_result']['properties'] = array_replace_recursive($info['elearning_' . $elearning_type . '_result']['properties'], $properties);
  }

  // Course access entity type.
  $properties = array(
    'course_access_id' => array(
      'label' => t("Course Access ID"),
      'description' => t("The ID of the Access to the course."),
    ),
    'uid' => array(
      'type' => 'user',
      'label' => t("User"),
      'description' => t("User to whom this course has been granted access or not."),
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'course_id' => array(
      'type' => 'elearning_course',
      'label' => t('Course'),
      'description' => t('The course related to the Course Access Entity.'),
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'status' => array(
      'type' => 'boolean',
      'label' => t('Status'),
      'description' => t('A boolean for whether or not the user has access to this course'),
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'granted' => array(
      'type' => 'date',
      'label' => t('Last granted'),
      'description' => t('When the access was last granted.'),
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );
  $info['elearning_course_access']['properties'] = array_replace_recursive($info['elearning_course_access']['properties'], $properties);
}

/**
 * Implements hook_views_api().
 */
function elearning_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'elearning') . '/views',
  );
}

/**
 * Implements hook_theme().
 */
function elearning_theme($existing, $type, $theme, $path) {
  $elearning_types = elearning_get_elearning_entity_info();
  $question_types = array_keys($elearning_types['elearning_question']['bundles']);

  $return = array(
    'elearning_question_field_form_table' => array(
      'render element' => 'element',
      'file' => 'elearning.theme.inc',
      'path' => $path . '/includes',
    ),
    'elearning_exercise_result_page' => array(
      'variables' => array(
        'status' => NULL,
        'question_results' => NULL,
        'score_raw' => NULL,
        'score_formatted' => NULL,
        'exercise' => NULL,
        'exercise_result' => NULL,
      ),
      'template' => 'elearning-exercise-result-page',
      'path' => $path . '/theme',
    ),
  );

  // Theme functions can only be overridden in a theme. In our case we would
  // like to have theme functions for every specific question type. For that
  // reason we create our own 'pseudo' theme suggestion, which isnt a suggestion
  // really but an actual requirement for question type modules.
  foreach ($question_types as $question_type) {
    $return['elearning_question_given_answer_' . $question_type] = array(
      'variables' => array(
        'given_answer' => NULL,
        'correct_answer' => NULL,
        'correct' => NULL,
        'question' => NULL,
      ),
      'file' => $question_type . '.theme.inc',
      'path' => drupal_get_path('module', $question_type) . '/includes',
    );
    $return['elearning_question_feedback_' . $question_type] = array(
      'variables' => array(
        'given_answer' => NULL,
        'correct_answer' => NULL,
        'correct' => NULL,
        'question' => NULL,
      ),
      'file' => $question_type . '.theme.inc',
      'path' => drupal_get_path('module', $question_type) . '/includes',
    );
  }

  $return['elearning_progress'] = array(
    'variables' => array(
      'progress' => NULL,
      'progress_formatted' => NULL,
      'status' => NULL,
      'entity_type' => NULL,
      'result' => NULL,
    ),
    'file' => 'elearning.theme.inc',
    'path' => $path . '/includes',
  );
  $return['elearning_score'] = array(
    'variables' => array(
      'score' => NULL,
      'result' => NULL,
      'status' => NULL,
      'entity_type' => NULL,
      'view_mode' => NULL,
    ),
    'file' => 'elearning.theme.inc',
    'path' => $path . '/includes',
  );
  return $return;
}

/**
 * Implements hook_preprocess_entity().
 *
 * Used for adding classes to the entity for styling purposes.
 */
function elearning_preprocess_entity(&$variables) {

  $account = $GLOBALS['user'];

  $entity_type = $variables['entity_type'];
  $account = $GLOBALS['user'];
  $entity = $variables[$entity_type];
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  switch ($entity_type) {
    case 'elearning_course':
    case 'elearning_unit':
      $result = $wrapper->result->value();
      if ($result) {
        $status_list = elearning_result_status_list();
        $variables['classes_array'][] = $status_list[$result->status];
      }
      break;

    case 'elearning_exercise':
      $result = $wrapper->result->value();
      if ($wrapper->unit->value()) {
        $course = $wrapper->unit->course->value();
        $unit = $wrapper->unit->value();
        if ($result) {
          $status_list = elearning_result_status_list();
          $variables['classes_array'][] = $status_list[$result->status];
        }
        $uri = 'course/' . $course->course_id . '/unit/' . $unit->unit_id . '/exercise/' . $entity->exercise_id;
        $router_link = menu_get_item($uri);
        if ($router_link['access'] == FALSE) {
          $variables['url'] = FALSE;
        }
      }
      break;

    case 'elearning_question':
      $question = $variables['elearning_question'];
      $variables['attributes_array']['id'] = 'question-' . $question->question_id;
      break;
  }
}

/**
 * Implements hook_entity_view().
 *
 * Add the complementary psuedo fields to the entites.
 */
function elearning_entity_view($entity, $entity_type, $view_mode, $langcode) {

  $account = $GLOBALS['user'];

  $wrapper = entity_metadata_wrapper($entity_type, $entity);

  switch ($entity_type) {
    case 'elearning_course':
    case 'elearning_unit':
      $result = $wrapper->result->value();
      if ($result) {
        $result_wrapper = entity_metadata_wrapper($entity_type . '_result', $result);
        $progress_formatted = $result_wrapper->progress_formatted->value();
        $progress = $result_wrapper->progress->value();
      }
      else {
        $progress = 0;
        $progress_formatted = 0;
      }
      $entity->content['progress'] = array(
        '#progress' => (string) $progress,
        '#progress_formatted' => $progress_formatted,
        '#status' => $result ? $result->status : ELEARNING_STATUS_UNSTARTED,
        '#result' => $result,
        '#entity_type' => $entity_type,
        '#theme' => 'elearning_progress',
      );
      if ($result && $result->score != NULL) {
        if($result->status != ELEARNING_STATUS_STARTED){
          $status_list = elearning_result_status_list();
          $entity->content['score'] = array(
            '#score' => $result->score,
            '#status' => $status_list[$result->status],
            '#result' => $result,
            '#entity_type' => $entity_type,
            '#view_mode' => $view_mode,
            '#theme' => 'elearning_score',
          );
        }
      }
      if ($result && $result->status != ELEARNING_STATUS_STARTED) {
        if ($entity_type == 'elearning_course') {
          $path = 'course/' . $entity->course_id . '/nojs/reset';
        }
        elseif ($entity_type == "elearning_unit") {
          $course = $wrapper->course->value();
          $path = 'course/' . $course->course_id . '/unit/' . $entity->unit_id . '/nojs/reset';
        }
        ctools_include('ajax');
        ctools_include('modal');
        ctools_modal_add_js();

        $router_link = menu_get_item($path);

        if ($router_link['access']) {

          $entity->content['reset'] = array(
            '#theme' => 'link',
            '#text' => t('Retry'),
            '#path' => $path,
            '#options' => array(
              'attributes' => array(
                'class' => array(
                  'use-ajax',
                  'ctools-use-modal',
                  'retry',
                ),
              ),
              'html' => TRUE,
            ),
          );
        }
      }
      break;

    case 'elearning_exercise':
      $result = $wrapper->result->value();
      if ($wrapper->unit->value()) {
        $course = $wrapper->unit->course->value();
        $unit = $wrapper->unit->value();
        if ($result) {
          if ($result->status != ELEARNING_STATUS_STARTED) {

            ctools_include('ajax');
            ctools_include('modal');
            ctools_modal_add_js();

            $path = 'course/' . $course->course_id . '/unit/' . $unit->unit_id . '/exercise/' . $entity->exercise_id . '/result/' . $result->result_id . '/nojs';
            $router_item = menu_get_item($path);
            if ($router_item['access']) {
              $entity->content['result_link'] = array(
                '#theme' => 'link',
                '#text' => t('Check my answers'),
                '#path' => $path,
                '#options' => array(
                  'attributes' => array(
                    'class' => array(
                      'use-ajax',
                      'ctools-use-modal',
                      'result-link',
                    ),
                  ),
                  'html' => FALSE,
                ),
              );
            }
            $status_list = elearning_result_status_list();
            $entity->content['score'] = array(
              '#score' => $result->score,
              '#status' => $status_list[$result->status],
              '#result' => $result,
              '#entity_type' => $entity_type,
              '#theme' => 'elearning_score',
            );
          }
        }
        // If you can't access the exercise page (for example because it was
        // already done) we shouldn't see the link in the title.
        $uri = 'course/' . $course->course_id . '/unit/' . $unit->unit_id . '/exercise/' . $entity->exercise_id;
        $router_link = menu_get_item($uri);
        if ($router_link['access'] == FALSE) {
          $variables['url'] = FALSE;
        }
      }
      break;
  }
}

/**
 * Retrieves the entity info of the principal E-learning entities.
 */
function elearning_get_elearning_entity_info() {
  $return = array();
  $entity_types = entity_get_info();
  foreach ($entity_types as $entity_type => $entity_info) {
    if (isset($entity_info['group']) && $entity_info['group'] == "elearning") {
      $return[$entity_type] = $entity_info;
    }
  }
  return $return;
}

/**
 * Implements hook_user_create().
 */
function elearning_user_insert(&$edit, $account, $category) {
  $uid = $account->uid;
  $courses = entity_load('elearning_course');

  // Add a course access entity for every new user.
  foreach (array_keys($courses) as $course_id) {
    $course_access = new StdClass();

    $wrapper = entity_metadata_wrapper('elearning_course_access', $course_access);
    $wrapper->uid = $uid;
    $wrapper->course_id = $course_id;
    $wrapper->status = FALSE;
    $wrapper->save();
  }
}

/**
 * Implements hook_user_delete().
 *
 * Delete linked course access and course result entities.
 */
function elearning_user_delete($account) {
  $uid = $account->uid;
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'elearning_course_access')->propertyCondition('uid', $uid)->execute();

  if (!empty($result['elearning_course_access'])) {
    foreach (array_keys($result['elearning_course_access']) as $course_access_id) {
      entity_delete('elearning_course_access', $course_access_id);
    }
  }

  // By deleting the course result, all other results will be deleted as well.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'elearning_course_result')->propertyCondition('uid', $uid)->execute();

  if (!empty($result['elearning_course_result'])) {
    foreach (array_keys($result['elearning_course_result']) as $course_result_id) {
      entity_delete('elearning_course_result', $course_result_id);
    }
  }
}

/**
 * Helper function to add fields to the different exercise types upon install.
 */
function elearning_exercise_add_fields($bundle, $label) {

  $field_name = $bundle . '_reference';
  $field_type = 'entityreference';
  $entity_type = 'elearning_unit';
  $cardinality = FIELD_CARDINALITY_UNLIMITED;
  $widget = array(
    'weight' => 1,
  );
  $settings = array(
    'target_type' => 'elearning_exercise',
    'handler' => 'base',
    'handler_settings' => array(
      'target_bundles' => array($bundle),
    ),
  );
  $display = array(
    'default' => array(
      'label' => 'hidden',
    ),
    'teaser' => array(
      'type' => 'hidden',
      'label' => 'hidden',
    ),
  );

  elearning_add_field($field_name, $label, $field_type, $entity_type, 'elearning_unit', $cardinality, $settings, $widget, $display);

  $field_name = 'elearning_question_reference';
  $field_type = 'entityreference';
  $entity_type = 'elearning_exercise';
  $cardinality = FIELD_CARDINALITY_UNLIMITED;
  $label = t('Question');
  $widget = array(
    'weight' => 1,
  );
  $settings = array(
    'target_type' => 'elearning_question',
    'handler' => 'base',
  );
  $display = array(
    'default' => array(
      'label' => 'hidden',
      'weight' => 99,
      'type' => 'elearning_question_reference_formatter',
    ),
  );

  elearning_add_field($field_name, $label, $field_type, $entity_type, $bundle, $cardinality, $settings, $widget, $display);
  drupal_flush_all_caches();
}

/**
 * Helper function to create fields and instances upon submodule activation.
 */
function elearning_add_field($field_name, $label, $field_type, $entity_type, $bundle, $cardinality, $settings, $widget, $display) {

  $field = field_info_field($field_name);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => $cardinality,
      'translatable' => FALSE,
      'locked' => TRUE,
      'settings' => $settings,
    );
    field_create_field($field);
  }
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $label,
      'widget' => $widget,
      'display' => $display,
    );
    $field = field_create_instance($instance);
    return $field;
  }
}

/**
 * Helper function to remove fields upon uninstall exercise type.
 */
function elearning_exercise_remove_fields($bundle) {
  $instance = field_info_instance('elearning_unit', $bundle . '_reference', 'unit');
  field_delete_instance($instance);
  field_delete_field($bundle . '_reference');
  field_delete_instance($instance);
  field_delete_field('elearning_question_reference');
  drupal_flush_all_caches();
  drupal_cron_run();
}

/**
 * Helper function to add default fields to question types.
 */
function elearning_question_add_fields($bundle, $settings = array()) {

  $field_name = 'answer';
  $field_type = 'elearning_answer_field';
  $entity_type = 'elearning_question';

  $cardinality = FIELD_CARDINALITY_UNLIMITED;
  $locked = TRUE;
  $widget = array(
    'weight' => 1,
  );
  $label = t("Answer");
  $settings = array();
  $display = array(
    'default' => array(
      'label' => 'hidden',
      'weight' => 1,
      'type' => 'elearning_answer_formatter',
    ),
  );

  elearning_question_add_field($field_name, $label, $field_type, $entity_type, $bundle, $cardinality, $settings, $widget, $display, $locked);

  $field_name = 'question';
  $field_type = 'text_long';
  $cardinality = 1;
  $locked = FALSE;
  $label = t("Question");
  $widget = array(
    'weight' => -399,
  );
  $settings = array();
  $display = array(
    'default' => array(
      'label' => 'hidden',
      'weight' => -399,
    ),
  );

  elearning_question_add_field($field_name, $label, $field_type, $entity_type, $bundle, $cardinality, $settings, $widget, $display, $locked);

  drupal_flush_all_caches();
}

/**
 * Helper function to remove fields.
 */
function elearning_question_remove_fields($bundle) {
  $instance = field_info_instance('elearning_question', 'elearning_answer_field', $bundle);
  field_delete_instance($instance);
  drupal_flush_all_caches();
  drupal_cron_run();
}

/**
 * Helper function to add fields and instances to questions.
 */
function elearning_question_add_field($field_name, $label, $field_type, $entity_type, $bundle, $cardinality, $settings, $widget, $display, $locked) {

  $field = field_info_field($field_name);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => $cardinality,
      'translatable' => FALSE,
      'settings' => $settings,
      'locked' => $locked,
    );
    field_create_field($field);
  }
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $label,
      'widget' => $widget,
      'display' => $display,
    );
    field_create_instance($instance);
  }
}

/**
 * Helper function for retreiving the basic keys used in this module.
 */
function elearning_entity_basic_keys() {
  return array(
    'course' => array(
      'label' => t('Course'),
      'plural label' => t('Courses'),
    ),
    'unit' => array(
      'label' => t('Unit'),
      'plural label' => t('Units'),
    ),
    'exercise' => array(
      'label' => t('Exercise'),
      'plural label' => t('Exercises'),
    ),
    'question' => array(
      'label' => t('Question'),
      'plural label' => t('Questions'),
    ),
  );
}

/**
 * Helper function to get the parent or the child of our elearning entity types.
 *
 * @see elearning_entity_basic_keys()
 */
function elearning_entity_basic_keys_relative($entity_type, $op = 'parent') {
  $entity_types = elearning_entity_basic_keys();
  $entity_types_keys = array_keys($entity_types);
  $pos = array_search($entity_type, $entity_types_keys);
  if ($op == 'parent') {
    return $pos - 1 >= 0 ? $entity_types_keys[$pos - 1] : FALSE;
  }
  elseif ($op == 'child') {
    return isset($entity_types_keys[$pos + 1]) ? $entity_types_keys[$pos + 1] : FALSE;
  }
}

/**
 * Property callback for adding a new field type property to entity.
 *
 * The custom answer field is not by default recognised by the entity, unless
 * we create this callback.
 *
 * @see https://drupal.org/node/1156554
 */
function elearning_question_field_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
}
