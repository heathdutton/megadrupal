<?php

/**
 * @file
 * The practice exercise type is for practicing purposes.
 */

define('ELEARNING_PRACTICE_DEFAULT_THRESHOLD', 60);

/**
 * Implements hook_elearning_exercise_type().
 */
function elearning_practice_elearning_exercise_type() {
  return array('elearning_practice' => t('Practice'));
}

/**
 * Implements hook_hook_info().
 */
function elearning_practice_hook_info() {
  $hooks = array(
    'elearning_question_immediate_feedback' => array(
      'group' => 'elearning',
    ),
    'elearning_question_immediate_submit' => array(
      'group' => 'elearning',
    ),
  );
  return $hooks;
}

/**
 * Implements hook_elearning_exercise_formatter_form_alter().
 */
function elearning_practice_elearning_exercise_formatter_form_alter(&$form, &$form_state, $exercise_type) {
  if ($exercise_type == "elearning_practice") {

    form_load_include($form_state, 'inc', 'elearning', 'includes/elearning.forms');

    $account = $GLOBALS['user'];

    foreach (element_children($form['questions']) as $question_id) {
      $element = $form['questions'][$question_id]['answer'][0];
      $question_type = $form['questions'][$question_id]['answer']['#object']->type;
      $element = module_invoke($question_type, 'elearning_question_immediate_submit', $element);
      if (empty($element)) {
        drupal_set_message(t('Please add the elearning_question_immediate_submit hook to your question type'), 'warning');
      }
      $form['questions'][$question_id]['answer'][0] = $element;
    }

    $exercise = $form_state['#exercise'];
    $exercise_wrapper = entity_metadata_wrapper('elearning_exercise', $exercise);
    $exercise_result = $exercise_wrapper->result->value();

    // Save an exercise result on first load of this form
    // if not already present.
    if (!$form_state['submitted'] && !$form_state['rebuild'] && ($exercise_result == FALSE || $exercise_result->status != ELEARNING_STATUS_STARTED)) {

      $exercise_result = entity_create('elearning_exercise_result', array(
          'uid' => $account->uid,
          'exercise_id' => $exercise->exercise_id,
          'status' => ELEARNING_STATUS_STARTED,
          'started' => time(),
        ));
      entity_save('elearning_exercise_result', $exercise_result);
    }
    $form_state['build_info']['args'][] = $exercise_result;

    // Change theme on correct/incorrect and play a sound. These are theme
    // functions in javscript and can be overwritten by the theme.
    $form['#attached']['css'][] = drupal_get_path('module', 'elearning_practice') . '/theme/css/elearning_practice.theme.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'elearning_practice') . '/theme/js/elearning_practice.theme.js';
    $form['#attached']['js'][] = array(
      'data' => array('ElearningPracticePath' => drupal_get_path('module', 'elearning_practice')),
      'type' => 'setting',
    );

    // There are two submit buttons: one for submitting and going to the next
    // practice, another for submitting and going back to the unit.
    $form['submit_review'] = array(
      '#type' => 'submit',
      '#value' => t('Save and review'),
      '#submit' => array('elearning_practice_form_submit', 'elearning_practice_redirect_review'),
    );

    // save exercises in unit to the form_state, because on the ajax callback
    // it won't be able to consult the unit to which the exercise belongs.
    if (isset($form_state['#exercises_in_unit'])) {
      $exercises_in_unit = $form_state['#exercises_in_unit'];
    }
    else {
      $exercises_in_unit = $exercise_wrapper->unit->elearning_practice_reference->raw();
      $form_state['#exercises_in_unit'] = $exercises_in_unit;
    }

    foreach ($exercises_in_unit as $key => $exercise_id_in_unit) {
      if ($exercise_id_in_unit == $exercise->exercise_id) {
        $next_exercise_id = isset($exercises_in_unit[$key + 1]) ? $exercises_in_unit[$key + 1] : FALSE;
      }
    }
    if ($next_exercise_id) {
      $form['submit_next'] = array(
        '#type' => 'submit',
        '#value' => t('Save and go to next lesson'),
        '#submit' => array('elearning_practice_form_submit', 'elearning_practice_redirect_next'),
        '#next' => $next_exercise_id,
      );
    }
  }
}

/**
 * Submit callback for this practice exercise().
 */
function elearning_practice_form_submit($form, &$form_state) {

  $exercise = $form_state['build_info']['args'][0];
  $questions = $form_state['build_info']['args'][1];
  $exercise_result = $form_state['build_info']['args'][2];

  $question_results = array();

  $account = $GLOBALS['user'];

  // Don't save if a question result has been saved on ajax already.
  foreach ($form_state['question_results'] as $question_id => $question_result) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'elearning_question_result')
      ->propertyCondition('question_id', $question_id)
      ->propertyCondition('exercise_result', $exercise_result->result_id);
    $query_result = $query->execute();
    if (empty($query_result)) {
      $question_result->exercise_result = $exercise_result->result_id;
      entity_save('elearning_question_result', $question_result);
    } else{
      // Get the question result previously saved by ajax
      // To be used for calculation of the exercise result.
      $array_keys =array_keys($query_result['elearning_question_result']);
      $question_result_id = end($array_keys);
      $question_result = entity_load_single('elearning_question_result', $question_result_id);
    }
    $question_results[] = $question_result;
  }
  module_load_include('inc', 'elearning', 'includes/elearning.result');
  elearning_process_exercise_result($exercise_result, $question_results);
}

/**
 * Submit callback that redirects to the exercise review page.
 */
function elearning_practice_redirect_review($form, &$form_state) {
  $course = $form_state['#course'];
  $unit = $form_state['#unit'];
  $form_state['redirect'] = $form_state['redirect'] = 'course/' . $course->course_id . '/unit/' . $unit->unit_id;

  // Form needs to be rebuild so it works properly when retrying the same
  // exercise.
  drupal_rebuild_form('elearning_exercise_formatter_form', $form_state);
}

/**
 * Submit callback that redirects to the exercise review page.
 */
function elearning_practice_redirect_next($form, &$form_state) {
  $course = $form_state['#course'];
  $unit = $form_state['#unit'];
  $path = "course/$course->course_id/unit/$unit->unit_id/exercise/" . $form['submit_next']['#next'];
  $form_state['redirect'] = $path;
  drupal_rebuild_form('elearning_exercise_formatter_form', $form_state);
}
