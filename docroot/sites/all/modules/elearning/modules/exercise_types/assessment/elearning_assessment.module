<?php

/**
 * @file
 * The Assessment exercise type is used for testing the users skills.
 */

/**
 * Implements hook_elearning_exercise_type().
 *
 * @see elearning_assessment_install()
 */
function elearning_assessment_elearning_exercise_type() {
  return array('elearning_assessment' => t('Assessment'));
}

/**
 * Implements hook_theme().
 *
 * @todo See if we still need the result template file.
 */
function elearning_assessment_theme($existing, $type, $theme, $path) {
  return array(
    'assessment_timer' => array(
      'variables' => array(
        'seconds' => NULL,
        'seconds_used' => NULL,
      ),
      'template' => 'assessment-timer',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_preprocess_entity().
 */
function elearning_assessment_entity_view($entity, $entity_type, $view_mode, $langcode) {

  if ($entity_type == "elearning_exercise") {
    $bundle = $entity->bundle();
    if ($bundle == "elearning_assessment"):
      $wrapper = entity_metadata_wrapper('elearning_exercise', $entity);
      $result = $wrapper->result->value();
      if (!empty($result) && $result->status == ELEARNING_STATUS_STARTED) {
        $settings = unserialize($entity->settings);
        $seconds = $settings['time_limit'];
        $seconds_used = time() - $result->started;
        if ($seconds != 0) {
          $settings = array(
            'seconds' => $seconds,
            'seconds_used' => $seconds_used,
          );
          $entity->content['timer'] = array(
            '#theme' => 'assessment_timer',
            '#seconds' => $seconds,
            '#seconds_used' => $seconds_used,
            '#attached' => array(
              'js' => array(
                drupal_get_path('module', 'elearning_assessment') . '/js/elearning_assessment.timer.js',
                drupal_get_path('module', 'elearning_assessment') . '/theme/js/elearning_assessment.timerwidget.js',
                array(
                  'data' => array('elearning_assessment' => $settings),
                  'type' => 'setting',
                ),
              ),
              'css' => array(
                drupal_get_path('module', 'elearning_assessment') . '/theme/css/elearning_assessment.timerwidget.css',
              ),
            ),
          );
        }
      }
    endif;
  }
}

/**
 * Implements hook_extra_fields().
 */
function elearning_assessment_field_extra_fields() {
  $extra['elearning_exercise']['elearning_assessment'] = array(
    'display' => array(
      'timer' => array(
        'label' => t('Timer'),
        'description' => t('Timer for the assessment.'),
        'weight' => 0,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_elearning_exercise_formatter_form_alter().
 *
 * The assessment is time limited, so we add a start button to start tracking
 * the time before the user can start answering the questions.
 * The time is saved as part of he exercise result, so the user won't be able
 * to cheat.
 *
 * @todo :This should me Drupal Multistep.??.
 */
function elearning_assessment_elearning_exercise_formatter_form_alter(&$form, &$form_state, $exercise_type) {
  if ($exercise_type == "elearning_assessment") {

    $unit = $form_state['#unit'];
    $unit_wrapper = entity_metadata_wrapper('elearning_unit', $unit);
    $exercises_in_unit = $unit_wrapper->elearning_assessment_reference->raw();
    $course = $form_state['#course'];
    $exercise = $form_state['#exercise'];

    foreach ($exercises_in_unit as $exercise_id) {
      if ($exercise_id == $exercise->exercise_id) {
        break;
      }
    }
    $next = current($exercises_in_unit);

    $total_exercises_in_unit = $unit_wrapper->elearning_assessment_reference->count();

    if ($unit && $course) {

      $settings = unserialize($exercise->settings);
      $result = $form_state['#result'];

      // Show start button if there is no open result.
      if (($result && $result->status != ELEARNING_STATUS_STARTED) || !$result) {

        $form['actions']['start'] = array(
          '#type' => 'submit',
          '#value' => t('Start assessment'),
          '#name' => 'start',
          '#submit' => array('elearning_assessment_form_start'),
          '#weight' => -99,
        );

        // Questions and submit button are removed.
        unset($form['questions']);
        unset($form['submit']);

        // Add class to form for theming purposes.
        $form['#attributes'] = array('class' => array('unstarted'));

        // Show questions if there is an open exercise result.
      }
      else {

        $seconds_used = !empty($result) ? time() - $result->started : 0;

        if ($seconds_used > $settings['time_limit'] && $settings['time_limit'] != 0 && empty($form_state['input'])) {
          $form['questions']['#disabled'] = TRUE;
          drupal_set_message(t("You've exceeded the time limit for this test. Please click %finish_button to submit your answers.", array('%finish_button' => t('Submit assessment'))), 'warning');
        }

        if ($total_exercises_in_unit == 1) {
          $form['actions']['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Submit Assessment'),
            '#name' => 'submit',
            '#submit' => array('elearning_assessment_form_submit'),
          );
        }
        elseif (!$next) {
          $form['actions']['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Submit and finish'),
            '#name' => 'submit',
            '#submit' => array('elearning_assessment_form_submit'),
          );
        }
        else {
          $form_state['next'] = $next;
          $form['actions']['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Submit and take a break'),
            '#name' => 'submit',
            '#submit' => array('elearning_assessment_form_submit'),
          );
          $form['actions']['submit_next'] = array(
            '#type' => 'submit',
            '#value' => t('Submit and go to next'),
            '#name' => 'submit',
            '#submit' => array('elearning_assessment_form_submit', 'elearning_assessment_form_goto_next'),
          );
        }

        // Add class to form for theming purposes.
        $form['#attributes'] = array('class' => array('started'));
      }
    }
    else {
      drupal_set_message(t('You are viewing an exercise for administrative purposes only.'));
      $form['submit']['#markup'] = t('You cannot submit this test');
    }
  }
}

/**
 * Form callback after clicking start.
 *
 * Create a new exercise result with starting timestamp. Parent results will
 * be cascadingly created upon entity_save().
 */
function elearning_assessment_form_start($form, &$form_state) {

  $exercise = $form_state['#exercise'];
  $account = $GLOBALS['user'];
  $exercise_result = entity_create('elearning_exercise_result', array(
      'uid' => $account->uid,
      'exercise_id' => $exercise->exercise_id,
      'status' => ELEARNING_STATUS_STARTED,
      'started' => time(),
      'is_new' => TRUE,
    )
  );
  entity_save('elearning_exercise_result', $exercise_result);
  $form_state['#result'] = $exercise_result;
}

/**
 * Callback for submitting the form.
 */
function elearning_assessment_form_submit($form, &$form_state) {
  if ($form_state['triggering_element']['#name'] == 'submit') {
    $exercise = $form_state['#exercise'];
    $questions = $form_state['#questions'];
    $result = $form_state['#result'];
    $course = $form_state['#course'];
    $unit = $form_state['#unit'];

    $question_results = array();

    // The question result object is generated as submit value of the questions.
    // All we have to do is save them. The exercise result wil be attached
    // automatically upon saving since the exercise result is still open.
    foreach ($form_state['question_results'] as $question_id => $question_result) {
      $question_result->exercise_result = $form_state['#result']->result_id;
      entity_save('elearning_question_result', $question_result);
      $question_results[] = $question_result;
    }

    module_load_include('inc', 'elearning', 'includes/elearning.result');
    elearning_process_exercise_result($result, $question_results);

    $form_state['redirect'] = 'course/' . $course->course_id . '/unit/' . $unit->unit_id;
  }
}

/**
 * Redirect to next question.
 */
function elearning_assessment_form_goto_next($form, &$form_state) {
  $exercise = $form_state['#exercise'];
  $course = $form_state['#course'];
  $unit = $form_state['#unit'];
  $next = $form_state['next'];
  $form_state['redirect'] = 'course/' . $course->course_id . '/unit/' . $unit->unit_id . '/exercise/' . $next;
}

/**
 * Implements BUNDLE_elearning_entity_settings().
 */
function elearning_assessment_elearning_entity_settings($settings, $entity_type, $bundle) {
  return array(
    'time_limit' => array(
      '#type' => 'textfield',
      '#title' => t('Time limit in seconds'),
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer'),
      '#size' => 4,
      '#field_suffix' => t('seconds'),
      '#description' => t('Enter 0 for no time limit'),
      '#default_value' => isset($settings['time_limit']) ? $settings['time_limit'] : 0,
    ),
  );
}
