<?php

/**
 * @file
 * Creates multiple choice type of question.
 */

/**
 * Implements hook_elearning_question_type().
 */
function elearning_multiplechoice_elearning_question_type() {
  return array('elearning_multiplechoice' => t('Multiplechoice question'));
}

/**
 * Implements hook_elearning_question_form_element().
 */
function elearning_multiplechoice_elearning_question_form_element($question, $items) {
  $settings = unserialize($question->settings);

  foreach ($items as $item) {
    $options[] = $item['key'];
  }
  $element = array(
    '#type' => 'radios',
    '#options' => $options,
  );
  if ($settings['multiple_answers']) {
    $element['#type'] = "checkboxes";
  }
  return $element;
}

/**
 * Implements hook_elearning_question_type_settings().
 */
function elearning_multiplechoice_elearning_entity_settings($settings, $entity_type, $bundle) {
  return array(
    'multiple_answers' => array(
      '#type' => 'checkbox',
      '#title' => t("There might be more than one correct option."),
      '#default_value' => isset($settings['multiple_answers']) ? $settings['multiple_answers'] : FALSE,
      '#ajax' => array(
        'callback' => 'elearning_open_questions_multiple_fields_callback',
        'wrapper' => 'elearning-answer-field-table',
      ),
    ),
    'all_correct' => array(
      '#prefix' => '<div id="all-correct-checkbox">',
      '#suffix' => '</div>',
      '#type' => 'checkbox',
      '#title' => t("All boxes need to be checked for the answer to be correct."),
      '#description' => t('This field is only relevant in case the previous box is checked.'),
      '#default_value' => isset($settings['all_correct']) ? $settings['all_correct'] : TRUE,
    ),
  );
}

/**
 * Ajax callback after checking the box for multiple answer possibility.
 */
function elearning_multiplechoice_multiple_fields_callback($form, $form_state) {
  return $form['answer'][LANGUAGE_NONE];
}

/**
 * Implements hook_question_widget_alter().
 */
function elearning_multiplechoice_elearning_question_widget_alter(&$element, &$form_state, $question, $form) {
  if ($question->type == "elearning_multiplechoice") {

    $check_multiple = FALSE;

    if (!empty($question->settings)) {
      $settings = unserialize($question->settings);
      $check_multiple = $settings['multiple_answers'];
    }

    if (isset($form_state['values']) && isset($form_state['values']['multiple_answers'])) {
      $check_multiple = $form_state['values']['multiple_answers'];
    }

    foreach ($element['value'] as $key => $value) {
      $element['value'][$key]['#type'] = "checkbox";
      $selected = 0;
      if (!$check_multiple) {
        $element['value'][$key]['#ajax'] = array(
          'callback' => 'elearning_multiplechoice_set_one_value',
          'wrapper' => 'elearning-answer-field-table',
        );
        if (isset($form_state['triggering_element']) && $form_state['triggering_element']['#name'] == 'multiple_answers') {
          $element['value'][$key]['#value'] = FALSE;
        }
      }
    }
  }
}

/**
 * Ajax callback to allow only one answer.
 */
function elearning_multiplechoice_set_one_value($form, $form_state) {
  $element = $form['answer'];
  foreach (element_children($element[LANGUAGE_NONE]['value']) as $key) {
    $element[LANGUAGE_NONE]['value'][$key]['#checked'] = FALSE;
  }
  $checked = $form_state['triggering_element']['#parents'][3];
  $element[LANGUAGE_NONE]['value'][$checked]['#checked'] = TRUE;
  return $element;
}

/**
 * Implements hook_elearning_question_check_correct().
 */
function elearning_multiplechoice_elearning_question_check_correct($question, $element, $form_state, $form) {
  if ($question->type == "elearning_multiplechoice") {
    $question_wrapper = entity_metadata_wrapper('elearning_question', $question);
    $values = $question_wrapper->answer->value();
    $reply = $element['#value'];
    if (($reply === FALSE) || ($reply === "")) {
      $correct = FALSE;
    }
    else {
      if ($element['#type'] == "radios") {
        return isset($values[$reply]) && $values[$reply]['value'] ? TRUE : FALSE;
      }
      if ($element['#type'] == "checkboxes") {
        $settings = unserialize($question->settings);
        if ($settings['all_correct']) {
          // If all answers need to be correct
          // answer is correct until proven wrong
          // because one of the items doesnÂ´t match.
          $correct = TRUE;
          foreach ($values as $key => $value) {
            if (isset($reply[$key]) != $value['value']) {
              $correct = FALSE;
            }
          }
        }
        else {
          // If only one anwer needs to be correct
          // answer is wrong until one correct is found
          // and no option was wrongfully selected.
          $correct = FALSE;
          if (!empty($reply)) {
            foreach ($values as $key => $value) {
              if (isset($reply[$key]) == $value['value']) {
                $correct = TRUE;
              }
            }
            foreach ($values as $key => $value) {
              if (isset($reply[$key]) && !$value['value']) {
                $correct = FALSE;
              }
            }
          }
        }
        return $correct;
      }
    }
  }
}

/**
 * Implements hook_elearning_question_given_answer().
 */
function elearning_multiplechoice_elearning_question_given_answer($question, $element, $form_state, $form) {
  return ($element['#value']);
}

/**
 * Implements hook_elearning_question_immediate_submit().
 */
function elearning_multiplechoice_elearning_question_immediate_submit($element) {
  $question = $element['element']['#question'];
  $question_id = $question->question_id;
  $question_settings = unserialize($element['element']['#question']->settings);
  $question_wrapper = entity_metadata_wrapper('elearning_question', $question);
  $values = $question_wrapper->answer->value();
  $settings['question-' . $question->question_id]['values'] = $values;
  $settings['question-' . $question->question_id]['settings'] = $question_settings;
  if ($element['element']['#type'] == "checkboxes") {
    $question_id = $element['element']['#question']->question_id;
    $element['check'] = array(
      '#type' => 'button',
      '#value' => t('Check'),
      '#name' => $question_id,
      '#ajax' => array(
        'callback' => 'elearning_multiplechoice_practice_save_question_result',
        'progress' => array('type' => 'none'),
      ),
      '#weight' => 9999,
      '#question_id' => $element['element']['#question']->question_id,
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'elearning_multiplechoice') . '/js/elearning_multiplechoice.check.js',
          array(
            'data' => array('elearning_multiplechoice' => $settings),
            'type' => 'setting',
          ),
        ),
      ),
    );
  }
  if ($element['element']['#type'] == "radios") {
    $question_id = $element['element']['#question']->question_id;
    $element['element']['#ajax'] = array(
      'callback' => 'elearning_multiplechoice_practice_save_question_result',
      'progress' => array('type' => 'none'),
    );
    $element['element']['#attached'] = array(
      'js' => array(
        drupal_get_path('module', 'elearning_multiplechoice') . '/js/elearning_multiplechoice.check.js',
        array(
          'data' => array('elearning_multiplechoice' => $settings),
          'type' => 'setting',
        ),
      ),
    );
    $element['element']['#question_id'] = $element['element']['#question']->question_id;
  }
  return $element;
}

/**
 * Callback for immediate saving of the question result.
 */
function elearning_multiplechoice_practice_save_question_result($form, $form_state) {
  $triggered_question = $form_state['triggering_element']['#parents'][1];
  $exercise_result = $form_state['build_info']['args'][2]->result_id;
  $query = new EntityFieldQuery();
  $question_result_query = $query->entityCondition('entity_type', 'elearning_question_result')
    ->propertyCondition('question_id', $triggered_question)
    ->propertyCondition('exercise_result', $exercise_result)
    ->execute();

  if (empty($question_result_query['elearning_question_result'])) {
    $triggered_question = $form_state['triggering_element']['#parents'][1];
    $question_result = $form_state['question_results'][$triggered_question];
    $question_result->exercise_result = $exercise_result;
    entity_save('elearning_question_result', $question_result);
  }
}
