<?php
/**
 * @file
 * Creates an open question type with an open text field.
 */

/**
 * Implements hook_elearning_question_type().
 */
function elearning_open_question_elearning_question_type() {
  return array('elearning_open_question' => t('Open question'));
}

/**
 * Implements hook_elearning_question_form_element().
 */
function elearning_open_question_elearning_question_form_element($question, $items) {
  foreach ($items as $key => $item) {
    $item_array = preg_split('/\r\n|[\r\n]/', $item['value']);
    $item_length = array_map('strlen', $item_array);
    $element[$key] = array(
      '#title' => $item['key'],
      '#type' => 'textfield',
      '#size' => max($item_length),
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
    );
    if (max($item_length) > 30) {
      $element[$key]['#type'] = 'textarea';
    }
  }
  return $element;
}

/**
 * Impements hook_elearning_entity_settings().
 *
 * Use an element validate to return a serialized array as element value.
 */
function elearning_open_question_elearning_entity_settings($settings, $entity_type, $bundle) {
  return array(
    'case_sensitive' => array(
      '#type' => 'checkbox',
      '#title' => t("The correct answer is case-sensitive."),
      '#description' => t("The user should get all the letter casings correctly."),
      '#default_value' => isset($settings['case_sensitive']) ? $settings['case_sensitive'] : FALSE,
    ),
    'space_sensitive' => array(
      '#type' => 'checkbox',
      '#title' => t("The correct answer is space-sensitive."),
      '#description' => t("If unchecked the spaces won't be taken into account."),
      '#default_value' => isset($settings['space_sensitive']) ? $settings['space_sensitive'] : FALSE,
    ),
    'punctuation_sensitive' => array(
      '#type' => 'checkbox',
      '#title' => t("The correct answer is punctuation-sensitive."),
      '#description' => t("If unchecked the punctuation won't be taken into account."),
      '#default_value' => isset($settings['punctuation_sensitive']) ? $settings['punctuation_sensitive'] : FALSE,
    ),
    'apostroph_sensitive' => array(
      '#type' => 'checkbox',
      '#title' => t("The correct answer is apostroph-sensitive."),
      '#description' => t("If unchecked it won't matter if the participant uses <em>'</em> or <em>´</em>."),
      '#default_value' => isset($settings['apostroph_sensitive']) ? $settings['apostroph_sensitive'] : FALSE,
    ),
    'multiple_options' => array(
      '#type' => 'checkbox',
      '#title' => t("There are more than one possible answers."),
      '#description' => t('Put each option on a new line.'),
      '#default_value' => isset($settings['multiple_options']) ? $settings['multiple_options'] : FALSE,
      '#ajax' => array(
        'callback' => 'elearning_open_questions_multiple_fields_callback',
        'wrapper' => 'elearning-answer-field-table',
      ),
    ),
    'multiple_fields' => array(
      '#type' => 'checkbox',
      '#title' => t("The user has to fill in multiple fields."),
      '#description' => t('All fields have to be filled in correctly for the answer to be correct.'),
      '#default_value' => isset($settings['multiple_fields']) ? $settings['multiple_fields'] : FALSE,
      '#ajax' => array(
        'callback' => 'elearning_open_questions_multiple_fields_callback',
        'wrapper' => 'elearning-answer-field-table',
      ),
    ),
  );
}

/**
 * Implements hook_elearning_question_widget_alter().
 */
function elearning_open_question_elearning_question_widget_alter(&$element, &$form_state, $question, $form) {
  if ($question->type == "elearning_open_question") {

    if (isset($question->settings)) {
      $settings = unserialize($question->settings);
    }
    else {
      $settings['multiple_fields'] = FALSE;
      $settings['multiple_options'] = FALSE;
    }

    if ((empty($form_state['input']) && $settings['multiple_fields'] == FALSE) || !empty($form_state['input']) && $form_state['input']['multiple_fields'] == FALSE) {
      unset($element['add_row']);
      foreach ($element['value'] as $key => $item) {
        if ($key != 0) {
          unset($element['value'][$key]);
          unset($element['key'][$key]);
        }
      }
      unset($element['#table_columns']['key']);
    }
    if ((empty($form_state['input']) && $settings['multiple_options'] == TRUE) || (!empty($form_state['input']) && isset($form_state['input']['multiple_options']) && $form_state['input']['multiple_options'] == TRUE)) {
      foreach ($element['value'] as $key => $item) {
        $element['value'][$key]['#type'] = 'textarea';
        $element['value'][$key]['#description'] = t('Put the different options on a new line.');
      }
    }
  }
}

/**
 * Callback for multiple fields.
 */
function elearning_open_questions_multiple_fields_callback($form, $form_state) {
  return $form['answer'][LANGUAGE_NONE];
}

/**
 * Implements hook_elearning_answer_field_check_correct().
 */
function elearning_open_question_elearning_question_check_correct($question, $element, $form_state, $form) {
  if ($question->type == "elearning_open_question") {
    $question_wrapper = entity_metadata_wrapper('elearning_question', $question);
    $values = $question_wrapper->answer->value();
    $settings = unserialize($question->settings);
    $correct = TRUE;
    foreach (element_children($element) as $key) {

      // Correct and given answers are parsed using the question settings.
      $given_answer = trim($element[$key]['#value']);
      $correct_answer = trim($values[$key]['value']);
      $correct_child = elearning_open_question_check_per_option($settings, $given_answer, $correct_answer);
      if ($correct_child == FALSE) {
        $correct = FALSE;
      }
    }
    return $correct;
  }
}

/**
 * Implements hook_elearning_question_given_answer().
 */
function elearning_open_question_elearning_question_given_answer($question, $element, $form_state, $form) {
  $return = array();
  foreach (element_children($element) as $key) {
    $return[] = $element[$key]['#value'];
  }
  return $return;
}

/**
 * Helper function to parse the given and correct answers.
 */
function elearning_open_question_check_per_option($settings, $given_answer, $correct_answer) {

  // Correct and given answer are trimmed in any case.
  trim($given_answer);
  trim($correct_answer);
  // Parse the given answer.
  if (!$settings['case_sensitive']) {
    $given_answer = strtolower($given_answer);
  }
  if (!$settings['space_sensitive']) {
    $given_answer = str_replace(' ', '', $given_answer);
  }
  if (!$settings['punctuation_sensitive']) {
    $given_answer = preg_replace("#[[:punct:]]#", "", $given_answer);
  }
  if (!$settings['apostroph_sensitive']) {
    $given_answer = str_replace("´", "'", $given_answer);
  }

  $correct_answer_possibilities = preg_split('/\r\n|[\r\n]/', $correct_answer);
  foreach ($correct_answer_possibilities as $key => $correct_answer_possibility) {
    if (!$settings['case_sensitive']) {
      $correct_answer_possibility = strtolower($correct_answer_possibility);
    }
    if (!$settings['space_sensitive']) {
      $correct_answer_possibility = str_replace(' ', '', $correct_answer_possibility);
    }
    if (!$settings['punctuation_sensitive']) {
      $correct_answer_possibility = preg_replace("#[[:punct:]]#", "", $correct_answer_possibility);
    }
    if (!$settings['apostroph_sensitive']) {
      $correct_answer_possibility = str_replace("´", "'", $correct_answer_possibility);
    }
    $correct_answer_possibilities[$key] = $correct_answer_possibility;
  }

  if (!in_array($given_answer, $correct_answer_possibilities)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Implements hook_elearning_question_immediate_submit().
 */
function elearning_open_question_elearning_question_immediate_submit($element) {
  $question_id = $element['element']['#question']->question_id;
  $question_settings = unserialize($element['element']['#question']->settings);
  $question = $element['element']['#question'];
  $question_wrapper = entity_metadata_wrapper('elearning_question', $question);
  $values = $question_wrapper->answer->value();
  $settings['question-' . $question->question_id]['values'] = $values;
  $settings['question-' . $question->question_id]['settings'] = $question_settings;
  $element['check'] = array(
    '#type' => 'button',
    '#value' => t('Check'),
    '#name' => $question_id,
    '#ajax' => array(
      'callback' => 'elearning_open_question_save_question_result',
    ),
    '#weight' => 9999,
    '#question_id' => $element['element']['#question']->question_id,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'elearning_open_question') . '/js/elearning_open_question.check.js',
        array(
          'data' => array('elearning_open_question' => $settings),
          'type' => 'setting',
        ),
      ),
    ),
  );

  return $element;
}

/**
 * Callback for immediate saving of the question result.
 */
function elearning_open_question_save_question_result($form, $form_state) {

  $triggered_question = $form_state['triggering_element']['#parents'][1];
  $exercise_result = $form_state['build_info']['args'][2]->result_id;
  $query = new EntityFieldQuery();
  $question_result_query = $query->entityCondition('entity_type', 'elearning_question_result')
    ->propertyCondition('question_id', $triggered_question)
    ->propertyCondition('exercise_result', $exercise_result)
    ->execute();

  if (empty($question_result_query['elearning_question_result'])) {
    $triggered_question = $form_state['triggering_element']['#parents'][1];
    $question_result = $form_state['question_results'][$triggered_question];
    $question_result->exercise_result = $exercise_result;
    entity_save('elearning_question_result', $question_result);
  }
}
