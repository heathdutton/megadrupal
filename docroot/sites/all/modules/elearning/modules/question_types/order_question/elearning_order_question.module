<?php

/**
 * @file
 * Creates an 'Put in Order' type of question.
 *
 * @todo  Currently using Base64 encoding which is a really dirty solution
 * and should be fixed at some point.
 */

/**
 * Implements hook_elearning_question_type().
 */
function elearning_order_question_elearning_question_type() {
  return array('elearning_order_question' => t('Put in Order question'));
}

/**
 * Implements hook_theme().
 */
function elearning_order_question_theme($existing, $type, $theme, $path) {
  return array(
    'elearning_order_question_sort_item' => array(
      'variables' => array(
        'markup' => NULL,
        'crypt_id' => NULL,
      ),
      'template' => 'elearning-order-sort-item',
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Implements hook_elearning_question_form_element().
 */
function elearning_order_question_elearning_question_form_element($question, $items) {

  foreach ($items as $key => $item) {

    $element[0]['text']['#prefix'] = '<div class="elearning-order-question-textfield-wrapper">';
    $element[0]['text']['#suffix'] = '</div>';
    $element[0]['text'][$key] = array(
      '#type' => 'textfield',
      '#size' => 1,
    );

    $element[0]['sort']['#prefix'] = '<div class="elearning-order-question-sort-wrapper clearfix">';
    $element[0]['sort']['#suffix'] = '</div>';
    $element[0]['sort']['elements'][] = array(
      '#theme' => 'elearning_order_question_sort_item',
      '#markup' => $item['value'],
      '#crypt_id' => base64_encode($key),
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'elearning_order_question') . '/theme/elearning_order.question.css',
        ),
        'js' => array(
          drupal_get_path('module', 'elearning_order_question') . '/theme/elearning_order.question.js',
        ),
        'library' => array(
          array('system', 'ui.sortable'),
        ),
      ),
    );
  }
  $settings = unserialize($question->settings);
  if ($settings['randomize']) {
    shuffle($element[0]['sort']['elements']);
    foreach ($element[0]['sort']['elements'] as $key => $value) {

      $element[0]['text'][$key]['#default_value'] = $value['#crypt_id'];
    }
  }
  else {
    $question_order = explode(',', $settings['question_order']);
    $new_order = array();
    foreach ($question_order as $key) {
      $new_order[] = $element[0]['sort']['elements'][$key - 1];
    }
    unset($element[0]['sort']['elements']);
    $element[0]['sort']['elements'] = $new_order;
  }

  return $element;
}

/**
 * Implements hook_elearning_entity_settings().
 */
function elearning_order_question_elearning_entity_settings($settings, $entity_type, $bundle) {
  return array(
    'randomize' => array(
      '#type' => 'checkbox',
      '#title' => t("Randomize"),
      '#description' => t("Randomize the order in which the options first appear."),
      '#default_value' => isset($settings['randomize']) ? $settings['randomize'] : TRUE,
    ),
    'question_order' => array(
      '#type' => 'textfield',
      '#title' => t('Define a fixed order in which the options appear.'),
      '#description' => t('Enter the position number of each item, comma
        separating each value, e.g. 5,2,3,1,4. Make sure all positions are
        included. This option will only work when Randomize is not selected.'),
      '#default_value' => isset($settings['question_order']) ? $settings['question_order'] : '',
    ),
  );
}

/**
 * Implements hook_elearning_question_widget_alter().
 */
function elearning_order_question_elearning_question_widget_alter(&$element, &$form_state, $question, $form) {
  if ($question->type == "elearning_order_question") {
    $element['#table_columns']['key'] = t('Correct position');
    $element['#table_columns']['value'] = t('Item');
    foreach ($element['key'] as $key => $item) {
      $element['key'][$key] = array(
        '#markup' => $key + 1,
      );
    }
  }
}

/**
 * Implements hook_elearning_answer_field_check_correct().
 */
function elearning_order_question_elearning_question_check_correct($question, $element, $form_state, $form) {
  if ($question->type == "elearning_order_question") {
    $question_wrapper = entity_metadata_wrapper('elearning_question', $question);
    $values = $question_wrapper->answer->value();
    $correct = TRUE;
    $answer = array();

    foreach (element_children($element[0]['text']) as $key) {
      $answer[$key] = base64_decode($element[0]['text'][$key]['#value']);
      if ($key != $answer[$key]) {
        $correct = FALSE;
      }
    }
    return $correct;
  }
}

/**
 * Implements hook_elearning_question_given_answer().
 */
function elearning_order_question_elearning_question_given_answer($question, $element, $form_state, $form) {
  $return = array();
  foreach (element_children($element[0]['text']) as $key) {
    $return[] = base64_decode($element[0]['text'][$key]['#value']);
  }
  return $return;
}

/**
 * Implements hook_entity_load().
 */
function elearning_order_question_entity_load($entities, $type) {
  if ($type == "elearning_question_result") {
    drupal_add_css(drupal_get_path('module', 'elearning_order_question') . '/theme/elearning_order_question_result.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
}

/**
 * Implements hook_elearning_question_immediate_submit().
 */
function elearning_order_question_elearning_question_immediate_submit($element) {
  $question_id = $element['element']['#question']->question_id;
  $question_settings = unserialize($element['element']['#question']->settings);
  $question = $element['element']['#question'];
  $question_wrapper = entity_metadata_wrapper('elearning_question', $question);
  $values = $question_wrapper->answer->value();
  $settings['question-' . $question->question_id]['values'] = $values;
  $element['check'] = array(
    '#type' => 'button',
    '#value' => t('Check'),
    '#name' => $question_id,
    '#ajax' => array(
      'callback' => 'elearning_order_question_save_question_result',
    ),
    '#weight' => 9999,
    '#question_id' => $element['element']['#question']->question_id,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'elearning_order_question') . '/js/elearning_order_question.check.js',
        array(
          'data' => array('elearning_order_question' => $settings),
          'type' => 'setting',
        ),
      ),
    ),
  );

  return $element;
}

/**
 * Callback for immediate saving of the question result.
 */
function elearning_order_question_save_question_result($form, $form_state) {

  $triggered_question = $form_state['triggering_element']['#parents'][1];
  $exercise_result = $form_state['build_info']['args'][2]->result_id;

  $query = new EntityFieldQuery();
  $question_result_query = $query->entityCondition('entity_type', 'elearning_question_result')
    ->propertyCondition('question_id', $triggered_question)
    ->propertyCondition('exercise_result', $exercise_result)
    ->execute();

  if (empty($question_result_query['elearning_question_result'])) {
    $triggered_question = $form_state['triggering_element']['#parents'][1];
    $question_result = $form_state['question_results'][$triggered_question];
    $question_result->exercise_result = $exercise_result;
    entity_save('elearning_question_result', $question_result);
  }
}
