<?php
/**
 * @file
 * Creates a drag and drop type of question.
 */

/**
 * Implements hook_elearning_question_type().
 */
function elearning_dragndrop_elearning_question_type() {
  return array('elearning_dragndrop' => t('Drag and Drop question'));
}

/**
 * Implements hook_theme().
 */
function elearning_dragndrop_theme($existing, $type, $theme, $path) {
  return array(
    'elearning_dragndrop_origin' => array(
      'variables' => array(
        'markup' => NULL,
        'crypt_id' => NULL,
      ),
      'template' => 'elearning-dragndrop-origin',
      'path' => $path . '/theme',
    ),
    'elearning_dragndrop_destination' => array(
      'variables' => array(
        'markup' => NULL,
      ),
      'template' => 'elearning-dragndrop-destination',
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Implements hook_elearning_question_form_element().
 */
function elearning_dragndrop_elearning_question_form_element($question, $items) {
  foreach ($items as $key => $item) {

    $element[0]['text']['#prefix'] = '<div class="elearning-dragndrop-question-textfield-wrapper">';
    $element[0]['text']['#suffix'] = '</div>';

    if (!empty($item['value'])) {
      $element[0]['text'][] = array(
        '#type' => 'textfield',
        '#size' => 1,
      );
      $element[0]['destination'][] = array(
        '#theme' => 'elearning_dragndrop_destination',
        '#markup' => '',
      );
    }

    $element[0]['destination']['#prefix'] = '<div class="elearning-dragndrop-destination-wrapper">';
    $element[0]['destination']['#suffix'] = '</div>';
    $element[0]['origin']['#prefix'] = '<div class="elearning-dragndrop-origin-wrapper clearfix">';
    $element[0]['origin']['#suffix'] = '</div>';
    $element[0]['origin']['elements'][] = array(
      '#theme' => 'elearning_dragndrop_origin',
      '#markup' => $item['key'],
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'elearning_dragndrop') . '/theme/elearning_dragndrop.question.css',
        ),
        'js' => array(
          drupal_get_path('module', 'elearning_dragndrop') . '/theme/elearning_dragndrop.question.js',
        ),
        'library' => array(
          array('system', 'ui.droppable'),
          array('system', 'ui.draggable'),
        ),
      ),
    );
  }

  return $element;
}

/**
 * Implements hook_elearning_question_widget_alter().
 */
function elearning_dragndrop_elearning_question_widget_alter(&$element, &$form_state, $question, $form) {
  if ($question->type == "elearning_dragndrop") {
    $element['#description'] = t('Create a row for each drag and drop item.
      Put the text item in the first column and the correct position in the second.');
    foreach ($element['key'] as $key => $item) {
      $element['#table_columns']['key'] = t('Drag and drop element');
      $element['#table_columns']['value'] = t('Answer position');
      $element['value'][$key]['#title'] = t('Answer position');
      $element['value'][$key]['#element_validate'] = array('element_validate_integer_positive');
      $element['value'][$key]['#size'] = 1;
    }
  }
}

/**
 * Implements hook_elearning_answer_field_check_correct().
 */
function elearning_dragndrop_elearning_question_check_correct($question, $element, $form_state, $form) {
  if ($question->type == "elearning_dragndrop") {
    $question_wrapper = entity_metadata_wrapper('elearning_question', $question);
    $correct_values = $question_wrapper->answer->value();

    $correct = TRUE;
    foreach (element_children($element[0]['text']) as $answered_key) {
      foreach ($correct_values as $key => $correct_value) {
        if ($correct_value['value'] == $answered_key + 1) {
          $answer = $key;
        }
      }
      if ($answer != $element[0]['text'][$answered_key]['#value']) {
        $correct = FALSE;
      }
    }
    return $correct;
  }
}

/**
 * Implements hook_elearning_question_given_answer().
 */
function elearning_dragndrop_elearning_question_given_answer($question, $element, $form_state, $form) {
  $return = array();
  foreach (element_children($element[0]['text']) as $key) {
    $return[] = $element[0]['text'][$key]['#value'];
  }
  return $return;
}

/**
 * Implements hook_elearning_question_immediate_submit().
 */
function elearning_dragndrop_elearning_question_immediate_submit($element) {
  $question = $element['element']['#question'];
  $question_wrapper = entity_metadata_wrapper('elearning_question', $question);
  $values = $question_wrapper->answer->value();
  $settings['question-' . $question->question_id] = $values;
  $question_id = $element['element']['#question']->question_id;
  $element['check'] = array(
    '#type' => 'button',
    '#value' => t('Check'),
    '#name' => $question_id,
    '#ajax' => array(
      'callback' => 'elearning_dragndrop_save_question_result',
    ),
    '#weight' => 9999,
    '#question_id' => $element['element']['#question']->question_id,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'elearning_dragndrop') . '/js/elearning_dragndrop.check.js',
        array(
          'data' => array('elearning_dragndrop' => $settings),
          'type' => 'setting',
        ),
      ),
    ),
  );
  return $element;
}

/**
 * Ajax callback for saving the question result.
 */
function elearning_dragndrop_save_question_result($form, &$form_state) {
  $triggered_question = $form_state['triggering_element']['#parents'][1];
  // Check if all dropdowns are filled in:
  foreach ($form_state['input']['answer'][$triggered_question] as $answer_value) {
    if ($answer_value == 0) {
      exit;
    }
  }

  // Only save dropdown questions when all options are filled in.
  // And on the first time only.
  // Check if there is a question result already. Only the first is saved as it
  // even though the user gets the chance to get the right answer afterwards.
  $triggered_question = $form_state['triggering_element']['#parents'][1];
  $exercise_result = $form_state['build_info']['args'][2]->result_id;
  $query = new EntityFieldQuery();
  $question_result_query = $query->entityCondition('entity_type', 'elearning_question_result')
    ->propertyCondition('question_id', $triggered_question)
    ->propertyCondition('exercise_result', $exercise_result)
    ->execute();

  if (empty($question_result_query['elearning_question_result'])) {
    $triggered_question = $form_state['triggering_element']['#parents'][1];
    $question_result = $form_state['question_results'][$triggered_question];
    $question_result->exercise_result = $exercise_result;
    entity_save('elearning_question_result', $question_result);
  }
}
