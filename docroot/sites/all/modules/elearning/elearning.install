<?php
/**
 * @file
 * Installation for the Elearning module.
 */

/**
 * Implements hook_schema().
 *
 * Sets the schema the different Elearning entities and their corresponding
 * result entities: course, unit, exercise and questions.
 */
function elearning_schema() {

  drupal_load('module', 'elearning');

  $elearning_types = elearning_entity_basic_keys();

  foreach ($elearning_types as $elearning_type => $elearning_type_info) {

    $schema['elearning_' . $elearning_type] = array(
      'description' => 'The base table for the ' . $elearning_type . 'entity',
      'fields' => array(
        $elearning_type . '_id' => array(
          'description' => 'Primary key: Identifier for the ' . $elearning_type . '.',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'label' => array(
          'description' => 'Administrative title for the ' . $elearning_type . '.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'type' => array(
          'description' => 'The ' . $elearning_type . ' type.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'language' => array(
          'description' => 'The language of the ' . $elearning_type . '.',
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
          'default' => '',
        ),
        'uid' => array(
          'description' => 'the {user} UID of the author',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'created' => array(
          'description' => 'The unix timestamp when the  ' . $elearning_type . ' was created.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'changed' => array(
          'description' => 'The unix timestamp when the  ' . $elearning_type . ' was most recently updated.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'settings' => array(
          'description' => 'Serialized settings for the  ' . $elearning_type . '.',
          'type' => 'blob',
          'size' => 'normal',
          'not null' => FALSE,
        ),
      ),
      'primary key' => array($elearning_type . '_id'),
      'foreign keys' => array(
        'uid' => array(
          'table' => 'user',
          'columns' => array('uid' => 'uid'),
        ),
      ),
      'indexes' => array(
        'type' => array('type'),
      ),
    );
    $schema['elearning_' . $elearning_type . '_result'] = array(
      'description' => 'Stores results per question and exercise result',
      'fields' => array(
        'result_id' => array(
          'description' => 'Primary key of the result entity',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        $elearning_type . '_id' => array(
          'description' => 'The ' . $elearning_type . ' ID this result belongs to.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'uid' => array(
          'description' => 'The {user} uid of the user to which this result belongs',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'primary key' => array('result_id'),
    );
    if ($elearning_type != 'question'):
      $schema['elearning_' . $elearning_type . '_result']['fields'] += array(
        'started' => array(
          'description' => 'when the exercise was started',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'finished' => array(
          'description' => 'when the exercise was finished',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'duration' => array(
          'description' => 'amount of seconds it took the user',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'score' => array(
          'description' => 'Result score for this unit and user',
          'type' => 'float',
          'size' => 'small',
        ),
        'status' => array(
          'description' => 'If the unit has been started, passed or failed.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 1,
        ),
      );
    elseif ($elearning_type == 'question'):
      $schema['elearning_question_result']['fields'] += array(
        'exercise_result' => array(
          'description' => 'ID of the exercise result this question result belongs to.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'correct' => array(
          'description' => 'Boolean: TRUE if question was answered correctly',
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
        ),
        'given_answer' => array(
          'description' => 'The answer given by the user. Can be a serialized array.',
          'not null' => TRUE,
          'type' => 'blob',
        ),
        'weight' => array(
          'description' => 'Defines the order in which the questions were used in the exercise.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      );
    endif;
    switch ($elearning_type) {
      case 'course':
        $schema['elearning_' . $elearning_type . '_result']['fields']['progress'] = array(
          'description' => 'Progress of the course',
          'type' => 'float',
          'size' => 'small',
        );
      case 'unit':
        $schema['elearning_unit_result']['fields']['course_result'] = array(
          'description' => 'ID of the course result this unit result belongs to.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        );
        $schema['elearning_' . $elearning_type . '_result']['fields']['progress'] = array(
          'description' => 'Progress of the unit',
          'type' => 'float',
          'size' => 'small',
        );

        $schema['elearning_unit_result']['foreign keys']['course_result'] = array(
          'table' => 'elearning_course_result',
          'column' => 'result_id',
        );
        break;

      case 'exercise':
        $schema['elearning_exercise_result']['fields']['unit_result'] = array(
          'description' => 'ID of the unit result this exercise result belongs to.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        );
        $schema['elearning_exercise_result']['foreign keys']['unit_result'] = array(
          'table' => 'elearning_unit_result',
          'column' => 'result_id',
        );
        break;
    }
  }
  $schema['elearning_course_access'] = array(
    'description' => 'Stores course access entity information',
    'fields' => array(
      'course_access_id' => array(
        'description' => 'Primary key of the course access result entity',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {user} uid of the user having access to take the course',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'course_id' => array(
        'description' => '{course} id of the course entity',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'whether or not the user has access to this course',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'granted' => array(
        'description' => 'The unix timestamp when the access was last granted.',
        'type' => 'int',
      ),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'user',
        'column' => 'uid',
      ),
      'course_id' => array(
        'table' => 'node',
        'column' => 'nid',
      ),
    ),
    'primary key' => array('course_access_id'),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function elearning_field_schema($field) {
  if ($field['type'] == 'elearning_answer_field') {
    $columns = array(
      'key' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'Mostly used for saving labels for the options.',
      ),
      'value' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'Mostly used to save the correct answer or option.',
      ),
    );
  }
  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_install().
 */
function elearning_install() {

  $field = array(
    'field_name' => 'elearning_unit_reference',
    'type' => 'entityreference',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'translatable' => FALSE,
    'locked' => TRUE,
    'settings' => array(
      'target_type' => 'elearning_unit',
      'handler' => 'base',
    ),
  );
  if (!field_info_field('elearning_unit_reference')) {
    $field = field_create_field($field);
  }
  $t = get_t();
  $instance = array(
    'field_name' => $field['field_name'],
    'entity_type' => 'elearning_course',
    'bundle' => 'elearning_course',
    'label' => $t('Units'),
    'required' => FALSE,
    'widget' => array(),
    'settings' => array(),
    'display' => array(
      'default' => array(
        'type' => 'elearning_entityreference_views_formatter',
        'label' => 'hidden',
      ),
    ),
  );
  field_create_instance($instance);

  drupal_flush_all_caches();
}

/**
 * Implements hook_uninstall().
 */
function elearning_uninstall() {
  $instance = field_info_instance('course', 'elearning_unit_reference', 'course');
  field_delete_instance($instance, $field_cleanup = TRUE);
  field_delete_field('elearning_unit_reference');

  drupal_flush_all_caches();
  drupal_cron_run();

  variable_del('elearning_course_default_threshold');
  variable_del('elearning_unit_default_threshold');
}
