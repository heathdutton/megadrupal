<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function mailchimp_subscriptions_menu() {
  $items['admin/config/services/mailchimp/subscriptions'] = array(
    'title' => 'Subscriptions',
    'description' => 'MailChimp subscriptions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_subscriptions_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function mailchimp_subscriptions_block_info() {
  $blocks['mailchimp_subscriptions'] = array(
    'info' => t('Mailchimp subscribe to user'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mailchimp_subscriptions_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'mailchimp_subscriptions':
      $block['subject'] = t('Get notified when this user posts new content');
      if (mailchimp_subscriptions_get_user()) {
        $block['content'] = drupal_get_form('mailchimp_subscriptions_form');
      } 
      else {
        // @TODO also check if this content-type correspondents to one of the checked in settings.
        $block['content'] = t('No UID found for this page. Did you place this block on a full node?');
      }
      break;
  }
  return $block;
}

function mailchimp_subscriptions_form($form, &$form_state) {

  $account = mailchimp_subscriptions_get_user();

  $form['markup'] = array(
    '#markup' => t('Keep up to date with the latest posts of this user.'),
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#placeholder' => t('Name'),
    '#required' => TRUE,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#placeholder' => t('Email'),
    '#required' => TRUE,
  );

  $form['group'] = array(
    '#type' => 'hidden',
    '#value' => $account->name,
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Keep me posted'),
  );
  
  return $form;
}

function mailchimp_subscriptions_get_user() {
  $node = menu_get_object();
  if (isset($node->uid)) {
    $account = user_load($node->uid);
    return $account;
  }
  return FALSE;
}

function mailchimp_subscriptions_form_validate($form, &$form_state) {
  $mail = $form_state['values']['email'];
  if (!valid_email_address($mail)) {
    form_set_error('email', t('Please enter a valid email address.'));
  }
}

function mailchimp_subscriptions_form_submit($form, &$form_state) {
   // mailchimp integratie
  $list_id = variable_get('mailchimp_subscriptions_list_id');
  if (!$list_id) {
    watchdog('mailchimp_subscriptions', 'You should enter a MailChimp list-id for subscribe user.', array(), WATCHDOG_ERROR, $link = NULL);
  } 
  else { 
    // @TODO make this configurable?
    // you must have a textfield with machine name 'NAME' 
    // the groupings are automatically generated
    $mcapi = mailchimp_get_api_object();
    $groupings = $mcapi->listInterestGroupings($list_id);

    // Check if the user isn't already subscribed to this list
    $check = $mcapi->listMemberInfo($list_id, check_plain($form['email']['#value']));
    if ($check['success'] == 1) {
      // update
      $existing_groups = $check['data'][0]['merges']['GROUPINGS'][0]['groups'];
      $new_groups = $existing_groups . "," . check_plain($form['group']['#value']);
      $merge_vars = array(
        'NAME' => check_plain($form['name']['#value']),
        'GROUPINGS' => array(
          array(
              'id' => $groupings[0]['id'], 
              'groups' => $new_groups,
          ),
        )
      );
      $success = $mcapi->listUpdateMember($list_id, check_plain($form['email']['#value']), $merge_vars, $email_type = '', $replace_interests = TRUE);
      if ($success) {
        drupal_set_message(t('Thanks! @name has been added to your e-mail subscriptions', array('@name' => check_plain($form['group']['#value']))));
        return $success;
      } 
      else {
        watchdog('mailchimp_subscriptions', 'Mailchimp subscription update failed for List ID: %list_id', array('%list_id' => $list_id), WATCHDOG_ERROR, $link = NULL);
      }
    } 
    else {
      // insert
      $merge_vars = array(
        'NAME' => check_plain($form['name']['#value']),
        'GROUPINGS' => array(
          array(
              'id' => $groupings[0]['id'], 
              'groups' => check_plain($form['group']['#value']),
          ),
        )
      );
      $success = $mcapi->listSubscribe($list_id, check_plain($form['email']['#value']), $merge_vars);
      if ($success) {
        drupal_set_message(t('Thanks! Check your mail for a confirmation message.'));
        return $success;
      } 
      else {
        drupal_set_message(t('Oops, something went wrong. Please contact the site owner to have him take a peek in the logs.'), 'error');
        watchdog('mailchimp_subscriptions', 'Mailchimp subscription insert failed for List ID: %list_id', array('%list_id' => $list_id), WATCHDOG_ERROR, $link = NULL);
      }
    }
  }
}

/**
 * Admin settings menu callback.
 */
function mailchimp_subscriptions_settings_form($form, &$form_state, $cid = NULL) {
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_list_id'] = array(
    '#type' => 'textfield',
    '#title' => t('MailChimp list-ID'),
    '#default_value' => variable_get('mailchimp_subscriptions_list_id'),
    '#required' => TRUE,
    '#description' => t('This is the MailChimp List ID which will be used for the subscriptions. You can find this ID on the list settings page in MailChimp.'),
  );
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_approved_domains'] = array(
    '#type' => 'textfield',
    '#title' => t('Send mail from these domains'),
    '#default_value' => variable_get('mailchimp_subscriptions_approved_domains'),
    '#required' => TRUE,
    '#description' => t('Mailchimp will only sent mail of triggered from one of these domains. For example: www.example.com. Seperate multiple domains with comma. These values are matched against PHP\'s SERVER_NAME variable. At least one domain is required.'),
  );
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_folder_name'] = array(
    '#type' => 'textfield',
    '#title' => t('MailChimp folder name'),
    '#default_value' => variable_get('mailchimp_subscriptions_folder_name'),
    '#required' => TRUE,
    '#description' => t('This is the MailChimp campaign folder name which will be created to store all the campaigns in to keep your campaigns list tidy.'),
  );
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('MailChimp mailing subject'),
    '#default_value' => variable_get('mailchimp_subscriptions_subject', '@name posted new content'),
    '#required' => TRUE,
    '#description' => t('Subject of the mailing. @name will be replaced with the username who posted new content.'),
  );
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_from_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Mailing from name'),
    '#default_value' => variable_get('mailchimp_subscriptions_from_name'),
    '#required' => TRUE,
    '#description' => t('This is the from name in the mailing.'),
  );
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_from_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Mailing from email'),
    '#default_value' => variable_get('mailchimp_subscriptions_from_email'),
    '#required' => TRUE,
    '#description' => t('This is the from email address in the mailing.'),
  );
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_html'] = array(
    '#type' => 'textarea',
    '#title' => t('Mailing body HTML'),
    '#default_value' => variable_get('mailchimp_subscriptions_html'),
    '#required' => TRUE,
    '#description' => t('This is the actual email body, HTML version. You can use tokens here.'),
  );
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Mailing body plain text'),
    '#default_value' => variable_get('mailchimp_subscriptions_text'),
    '#required' => TRUE,
    '#description' => t('This is the body text version. You can also use tokens here, but beware HTML is not allowed.'),
  );
  if (module_exists('token')) {
    $form['mailchimp_subscriptions']['token_tree'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('node'),
    );
  }

  $roles = user_roles($membersonly = TRUE, $permission = NULL);
  $options = array();
  foreach ($roles as $key => $value) {
    $options[$key] = $value;
  }
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_role_id'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Role'),
    '#options' => $options,
    '#required' => TRUE,
    '#description' => t('Select the roles whose users content should be subscribable. On submitting this page, a MailChimp group will be created for EACH USER in this role in the above list. The group name will be the username.'),
    '#default_value' => variable_get('mailchimp_subscriptions_role_id', ''),    
  );

  $types = node_type_get_types();
  $options = array();
  foreach ($types as $key => $value) {
    $options[$key] = $value->name;
  }
  $form['mailchimp_subscriptions']['mailchimp_subscriptions_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => $options,
    '#required' => TRUE,
    '#description' => t('Select the content-types which should trigger a new mailing.'),
    '#default_value' => variable_get('mailchimp_subscriptions_content_types', ''),    
  );
  $form['#submit'][] = 'mailchimp_subscriptions_settings_form_submit';
  return system_settings_form($form);
}

function mailchimp_subscriptions_settings_form_validate($form, &$form_state) {
  $list = mailchimp_get_list($form_state['values']['mailchimp_subscriptions_list_id']);
  if (!$list) {
    form_set_error('mailchimp_subscriptions_list_id', t('Iep! Can\'t find a MailChimp list with that ID!'));
  }

  $domain_check = FALSE;
  $approved_hosts = $form_state['values']['mailchimp_subscriptions_approved_domains'];
  $approved_hosts = explode(',', $approved_hosts);
  foreach ($approved_hosts as $host) {
    $server_name = strtolower(trim($host));
    if (strtolower($_SERVER['SERVER_NAME']) == $server_name) {
      $domain_check = TRUE;
      drupal_set_message(t('The current domain (@server_name) is set allow sending MailChimp Subscriptions.', array('@server_name' => $_SERVER['SERVER_NAME'])), 'status');
    }
  }

  if ($domain_check == FALSE) {
    drupal_set_message(t('The current domain (@server_name) is NOT set to allow sending MailChimp Subscriptions.', array('@server_name' => $_SERVER['SERVER_NAME'])), 'status');
  }
}

function mailchimp_subscriptions_settings_form_submit($form, &$form_state) {
  $roles = variable_get('mailchimp_subscriptions_role_id');
  $list_id = variable_get('mailchimp_subscriptions_list_id');
  $mcapi = mailchimp_get_api_object();
  $users = _mailchimp_subscriptions_get_users($roles);
  // for each user, we will be creating a 'grouping' in the list,
  foreach ($users as $user) {
    $success = $mcapi->listInterestGroupAdd($list_id, $user->name, $grouping_id = NULL);
    if ($success) {
      drupal_set_message(t('A MailChimp group @name has been created.', array('@name' => $user->name)), 'status');
    } 
    else { 
      if ($mcapi->errorCode == 270) {
        drupal_set_message(t('MailChimp group @name already exists.', array('@name' => $user->name)), 'warning');
        // note: MailChimp will throw an error if a group already exists but won't overwrite.
      }
    }
  }
  // folder creation
  $folder_name = check_plain(variable_get('mailchimp_subscriptions_folder_name'));
  $success = $mcapi->folderAdd($folder_name, $type = 'campaign');
  if ($success) {
    drupal_set_message(t('MailChimp campaign folder @name created.', array('@name' => $folder_name)), 'status');
  } 
  else {
    drupal_set_message(t('MailChimp campaign folder @name already exists.', array('@name' => $folder_name)), 'warning');
  }
}

/**
 * Implements hook_node_insert
 */
function mailchimp_subscriptions_node_insert($node) {
  // @TODO: instead of sending 'immediately' after new node creation, we could aggregate new posts per day/week or month perhaps?
  // we are using this hook to determine if one of the authors - defined by role - is posting any new content of a certain type.
  if ($node->status == 1 && mailchimp_subscriptions_check_node($node) == TRUE) {
    // this was created and published immediately
    mailchimp_subscriptions_send($node);
  } 
  else {
    drupal_set_message(t('This node is not yet published. No mail is sent through MailChimp.'));
  }
}

/**
 * Implements hook_node_update
 */
function mailchimp_subscriptions_node_update($node) {
  // The mailing should also be triggered when a node is published which was created earlier (but not published).
  // Also, we are using the publication_date module to prevent mail triggering when a user unpublishes a node 
  // which was already published once, and then publishes it again. 
  // This dependency hopefully won't be necessary anymore in Drupal 8: https://drupal.org/node/1838918
  if ($node->status == 1 && mailchimp_subscriptions_check_node($node) == TRUE) {
    if (isset($node->published_at) && $node->published_at != FALSE) {
      // then this node was already published once, and we shouldn't be triggering mailchimp to send any emails 
      drupal_set_message(t('This node was already published once. No mail is sent through MailChimp.'));
    } 
    else {
      mailchimp_subscriptions_send($node);
    }
  }
}

/**
 * Helper function
 */
function _mailchimp_subscriptions_get_users($roles) {
  foreach ($roles as $key => $value) {
    if ($value != 0) {
      $rids[] = $value;
    }
  }
  $uids = array();
  $query = 'SELECT DISTINCT(ur.uid) FROM {users_roles} AS ur WHERE ur.rid IN (:rids)';
  $result = db_query($query, array(':rids' => $rids));
  foreach ($result as $row) {
    $uids[] = $row->uid;
  }
  return user_load_multiple($uids); 
}

function mailchimp_subscriptions_check_node($node) {
  $roles = variable_get('mailchimp_subscriptions_role_id');
  $users = _mailchimp_subscriptions_get_users($roles);
  $types = variable_get('mailchimp_subscriptions_content_types');
  $user_valid = FALSE;
  $type_valid = FALSE;
  foreach ($users as $user) {
    if ($user->uid === $node->uid) {
      $user_valid = TRUE;
    }
  }
  foreach ($types as $type) {
    if ($type === $node->type) {
      $type_valid = TRUE;
    }
  }
  if ($user_valid == TRUE && $type_valid == TRUE) {
    return TRUE;
  } 
  else {
    return FALSE;
  }
}

function mailchimp_subscriptions_send($node) {

  $domain_check = FALSE;
  $approved_hosts = variable_get('mailchimp_subscriptions_approved_domains');
  if (empty($approved_hosts)) {
    watchdog('mailchimp_subscriptions', 'No approved domains found. Check your MailChimp Subscriptions settings', array(), WATCHDOG_ERROR, $link = NULL);
    return FALSE;
  }
  $approved_hosts = explode(',', $approved_hosts);
  foreach ($approved_hosts as $host) {
    $server_name = strtolower(trim($host));
    if (strtolower($_SERVER['SERVER_NAME']) == $server_name) {
      $domain_check = TRUE;
    }
  }

  if ($domain_check == FALSE) {
    watchdog('mailchimp_subscriptions', 'Current domain (%server_name) is not set to sent MailChimp Subscriptions.', array('%server_name' => $_SERVER['SEVER_NAME']), WATCHDOG_NOTICE, $link = NULL);
    return FALSE;
  }

  $mcapi = mailchimp_get_api_object();
  $list_id = variable_get('mailchimp_subscriptions_list_id');
  $account = user_load($node->uid);
  // we already checked this to be a valid user.

  // get folder-ID so we can store this campaign neatly in a folder.
  $folders = $mcapi->folders();
  $folder_name = check_plain(variable_get('mailchimp_subscriptions_folder_name'));
  foreach ($folders as $folder) {
    if ($folder['name'] == $folder_name) {
      $folder_id = $folder['folder_id'];
    }
  }
  $options = array(
    'list_id' => $list_id,
    'subject' => t(variable_get('mailchimp_subscriptions_subject'), array('@name' => $account->name)),
    'from_email' => variable_get('mailchimp_subscriptions_from_email'),
    'from_name' => variable_get('mailchimp_subscriptions_from_name'),
    'folder_id' => $folder_id,
  );
  
  $html = variable_get('mailchimp_subscriptions_html');
  $html = token_replace($html, array('node' => $node));

  $text = variable_get('mailchimp_subscriptions_text');
  $text = token_replace($text, array('node' => $node));
  
  $content = array(
    'html' => $html,
    'text' => $text,
  );
  
  $groupings = $mcapi->listInterestGroupings($list_id);

  if (!isset($groupings[0])) {
    drupal_set_message(t('Error sending MailChimp mailing. See logs for details'), 'error');
    watchdog('mailchimp_subscriptions', 'No groupings found for MailChimp list-ID: %listid', array('%listid' => $list_id), WATCHDOG_ERROR, $link = NULL);
    return FALSE;
  }

  $conditions = array();
  $conditions[] = array(
    'field' => 'interests-' . $groupings[0]['id'], 
    'op' => 'one', 
    'value' => $account->name,
  );

  $segment_opts = array(
    'match' => 'all', 
    'conditions' => $conditions,
  );

  // First, lets test if there are any subscribers at all for this segment.
  // docs: http://apidocs.mailchimp.com/api/1.3/campaignsegmenttest.func.php
  $count = $mcapi->campaignSegmentTest($list_id, $segment_opts);
  if ($count > 0) { 
    $campaign_id = $mcapi->campaignCreate('regular', $options, $content, $segment_opts, $type_opts = NULL);
    if ($campaign_id) { // success
      $success = $mcapi->campaignSendNow($campaign_id);
      if ($success) {
        // iep! :)
        drupal_set_message(t('@count user(s) are being mailed via MailChimp.', array('@count' => $count)), 'status');
      } 
      else {
        if ($mcapi->errorCode) {
          drupal_set_message(t('Error sending MailChimp mailing. See logs for details'), 'error');
          watchdog('mailchimp_subscriptions', $mcapi->errorMessage, array(), WATCHDOG_ERROR, $link = NULL);
        }
      }
    } 
    else {
      // error creating campaign
      if ($mcapi->errorCode) {
        drupal_set_message(t('Error creating MailChimp campaign. See logs for details'), 'error');
        watchdog('mailchimp_subscriptions', $mcapi->errorMessage, array(), WATCHDOG_ERROR, $link = NULL);
      }
    }
  } 
  else {
    drupal_set_message(t('No mails were sent via MailChimp, because no people have subscribed to this user.'), 'warning');
  }

}



