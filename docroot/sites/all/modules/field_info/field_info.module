<?php

/**
 * Implements hook_menu().
 */
function field_info_menu() {
  $items = array();

  $items['admin/structure/fields'] = array(
    'title' => 'Fields',
    'description' => 'Fields information overview',
    'page callback' => 'field_info_fields_list',
    'page arguments' => array(),
    'access arguments' => array(
      'access administration pages',
    ),
  );

  $items['admin/structure/fields/list'] = $items['admin/structure/fields'];
  $items['admin/structure/fields/list']['type'] = MENU_DEFAULT_LOCAL_TASK;

  $items['admin/structure/fields/unused-widgets'] = array(
    'title' => 'Unused widgets',
    'description' => 'Lists all unused widgets.',
    'page callback' => 'field_info_widgets_list',
    'page arguments' => array(),
    'access arguments' => array(
      'access administration pages',
    ),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback; lists all defined fields for quick reference.
 *
 * This function extends the existing field_ui method with extra links.
 * It also lists each field per bundle to allow sorting on the table.
 *
 * @return string
 */
function field_info_fields_list() {
  $instances = field_info_instances();
  $field_types = field_info_field_types();
  $bundles = field_info_bundles();
  $entities = entity_get_info();
  $modules = system_rebuild_module_data();

  $query = drupal_get_query_parameters();
  if (isset($query['sort'])) {
    $order = strtolower($query['order']);
    $sort = $query['sort'];
  }
  else {
    $order = '';
    $sort = 'asc';
  }

  $header = array(
    array(
      'data' => t('Field name'),
      'field' => 'field',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Field type'),
      'field' => 'type',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Used in'),
      'field' => 'used in',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Cardinality'),
      'field' => 'cardinality',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Widget'),
      'field' => 'widget',
      'sort' => 'asc'
    ),
  );

  // Get all view modes.
  $displays = array();
  foreach ($instances as $entity_type => $type_bundles) {
    foreach ($type_bundles as $bundle => $bundle_instances) {
      foreach ($bundle_instances as $field_name => $instance) {
        foreach ($instance['display'] as $display => $settings) {
          if (!key_exists($display, $displays)) {
            $header[] = array(
              'data' => ucfirst($display),
              'field' => $display,
              'sort' => 'asc'
            );
            $displays[$display] = count($header);
          }
        }
      }
    }
  }

  // Generate the rows.
  $rows = array();
  foreach ($instances as $entity_type => $type_bundles) {
    foreach ($type_bundles as $bundle => $bundle_instances) {
      foreach ($bundle_instances as $field_name => $instance) {
        $field = field_info_field($field_name);

        $admin_path = _field_ui_bundle_admin_path($entity_type, $bundle);

        $data = array();

        // Field name.
        $name = $field['locked'] ? t('@field_name (Locked)', array(
          '@field_name' => $field_name
        )) : $field_name;
        $data[0] = ($admin_path ? l($name, $admin_path . '/fields/' . $field_name) :  $name);
        $sort_value = '';

        // Field type.
        $module_name = $field_types[$field['type']]['module'];
        $data[1] = ($admin_path ? l($field_types[$field['type']]['label'], $admin_path . '/fields/' . $field_name . '/field-settings') :  $field_types[$field['type']]['label']) . ' ' . t('(module: !module)', array(
          '!module' => $modules[$module_name]->info['name']
        ));
        if ($order == 'field type') {
          $sort_value = $field['type'];
        }

        // Used in
        $data[2] = $admin_path ? l($bundles[$entity_type][$bundle]['label'], $admin_path . '/fields') : $bundles[$entity_type][$bundle]['label'];
        if ($order == 'used in') {
          $sort_value = $bundles[$entity_type][$bundle]['label'];
        }

        // Cardinality.
        $cardinality = $field['cardinality'] < 0 ? t('Unlimited') : $field['cardinality'];
        $data[3] = ($admin_path ? l( $cardinality, $admin_path . '/fields/' . $field_name) :  $cardinality);
        if ($order == 'cardinality') {
          $sort_value = $field['cardinality'];
        }

        // Widget.
        $module_name = $instance['widget']['module'];
        $data[4] = ($admin_path ? l($instance['widget']['type'], $admin_path . '/fields/' . $field_name . '/widget-type') : $instance['widget']['type']) . ' ' . t('(module: !module)', array(
              '!module' => $modules[$module_name]->info['name']
            ));
        if ($order == 'widget') {
          $sort_value = $instance['widget']['type'];
        }

        foreach ($displays as $display => $index) {
          if (array_key_exists($display, $instance['display'])) {
            if ($instance['display'][$display]['type'] == 'hidden') {
              $data[$index] = $instance['display'][$display]['type'];
              $data[$index] = ($admin_path ? l( $instance['display'][$display]['type'], $admin_path . '/display/' . $display) :  $instance['display'][$display]['type']);
            }
            else {
              $module_name = $instance['display'][$display]['module'];
              $data[$index] = ($admin_path ? l( $instance['display'][$display]['type'], $admin_path . '/display/' . $display) :  $instance['display'][$display]['type']) . ' ' . t('(module: !module)', array(
                  '!module' => $modules[$module_name]->info['name']
              ));
            }
            if ($order == $display) {
              $sort_value = $instance['display'][$display]['type'];
            }
          }
          else {
            $data[$index] = '-';
            if ($order == $display) {
              $sort_value = '-';
            }
          }
        }

        $row = array(
          'class' => $field['locked'] ? array(
            'menu-disabled'
          ) : array(
            ''
          ),
          'data' => $data,
        );

        $sort_key = strtolower($sort_value . '_' . $field_name . '_' . $bundle);
        $rows[$sort_key] = $row;
      }
    }
  }

  if (empty($rows)) {
    $output = t('No fields have been defined yet.');
  }
  else {
    // Sort rows by field name.
    if ($sort == 'asc') {
      ksort($rows);
    }
    else {
      krsort($rows);
    }

    $output = theme('table', array(
      'header' => $header,
      'rows' => $rows
    ));
  }

  return $output;
}

function field_info_widgets_list() {

  drupal_set_title(t('Fields') . ' - ' . t('Unused widgets'));

  $instances = field_info_instances();
  $widgets = field_info_widget_types();
  $modules = system_rebuild_module_data();

  $query = drupal_get_query_parameters();
  if (isset($query['sort'])) {
    $order = strtolower($query['order']);
    $sort = $query['sort'];
  }
  else {
    $order = 'type';
    $sort = 'asc';
  }

  $header = array(
    array(
      'data' => t('Widget'),
      'field' => 'label',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Type'),
      'field' => 'type',
      'sort' => 'asc'
    ),
    array(
      'data' => t('Module'),
      'field' => 'module',
      'sort' => 'asc'
    ),
  );

  // Filter out the used widgets.
  foreach ($instances as $entity_type => $type_bundles) {
    foreach ($type_bundles as $bundle => $bundle_instances) {
      foreach ($bundle_instances as $field_name => $instance) {
        unset($widgets[$instance['widget']['type']]);
      }
    }
  }

  // Generate the rows.
  $rows = array();
  foreach ($widgets as $type => $widget) {
    $data = array();

    // Widget name.
    $data[0] = $widget['label'];
    if ($order == 'widget') {
      $sort_value = $widget['label'];
    }

    // Widget type.
    $data[1] = $type;
    if ($order == 'type') {
      $sort_value = $type;
    }

    // Module.
    $package = preg_replace('/[^a-z0-9_-]/', '_', (strtolower($modules[$widget['module']]->info['package'])));
    $link = l($modules[$widget['module']]->info['name'], 'admin/modules', array(
      'fragment' => $package
    ));
    $data[2] = $link . ' ' . t('(module: !module)', array(
      '!module' => $modules[$widget['module']]->name
    ));
    if ($order == 'module') {
      $sort_value = $widget['module'];
    }

    $row = array(
      'class' => array(
        ''
      ),
      'data' => $data,
    );

    $sort_key = strtolower($sort_value . '_' . $type);
    $rows[$sort_key] = $row;
  }

  if (empty($rows)) {
    $output = t('All widgets are being used.');
  }
  else {
    // Sort rows by field name.
    if ($sort == 'asc') {
      ksort($rows);
    }
    else {
      krsort($rows);
    }

    $output = theme('table', array(
      'header' => $header,
      'rows' => $rows
    ));
  }

  return $output;
}
