<?php
/**
 * @file
 * Allows creation of a progress bar block to visually show donations amount.
 */

/**
 * Implements hook_permission().
 */
function donations_thermometer_permission() {
  return array('administer donations thermometer' => array(
    'title' => t('Adminster Donations Thermometer'),
  ));
}


/**
 * Imeplements hook_menu().
 */
function donations_thermometer_menu() {
  $items = array();

  // Admin Configuration Group.
  // When an admin has logged in -- this creates a group
  // under the configuration page.
  $items['admin/config/donations_thermometer'] = array(
    'title' => 'Donations Thermometer',
    'description' => 'Administer Donations Thermometer Options',
    'access arguments' => array('admin donations_thermometer settings'),
  );

  // Admin configuration - Settings.
  // Adds a link under the Admin Configuration Group
  // mentioned in the above block.
  $items['admin/config/donations_thermometer/manage'] = array(
    'title' => 'Donations Thermometer Settings',
    'description' => 'Manage Donations Thermometer Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('donations_thermometer_admin_settings_form'),
    'access arguments' => array('donations_thermometer settings'),
  );

  return $items;
}


/**
 * Implements hook_form().
 */
function donations_thermometer_admin_settings_form($node, &$form_state) {
  $form = array();

  // GENERAL.
  $form['general'] = array(
    '#title' => t('General Settings'),
    '#description' => t('General Settings. Individual meter settings can be found in the blocks for the respective item.'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );
  $form['general']['donations_thermometer_number_of_meters'] = array(
    '#title' => t('Number of Donation Meters'),
    '#description' => t('You can have as many donation meter blocks as you like. Set the number here and configure each donation meter\'s settings in the block settings. NOTE: lowering this number will remove any data for existing donation thermometers.'),
    '#type' => 'textfield',
    '#size' => 4,
    '#default_value' => variable_get('donations_thermometer_number_of_meters', 1),
  );

  return system_settings_form($form);
}


/**
 * Implements hook_form_validate().
 */
function donations_thermometer_admin_settings_form_validate($form, &$form_state) {
  $old_number_of_meters = variable_get('donations_thermometer_number_of_meters', 1);
  $new_number_of_meters = $form_state['values']['donations_thermometer_number_of_meters'];
  $grep = '/^[0-9]+$/';
  if (preg_match($grep, $new_number_of_meters) == FALSE && $new_number_of_meters <= 0) {
    form_set_error('donations_thermometer_number_of_meters', t('Must be an integer bigger than zero.'));
  }
  elseif($old_number_of_meters > $new_number_of_meters) {
    // Remove data for old donation thermometers.
    for ($i = $old_number_of_meters; $i > $new_number_of_meters ; $i--) {
      donations_thermometer__remove_block_data($i);
    }
  }
}


/**
 * Implementation of hook_theme().
 */
function donations_thermometer_theme($existing, $type, $theme, $path) {
  $items = array();

  $items['donations_thermometer'] = array(
    'arguments' => array('current' => NULL, 'goal' => NULL, 'prefix' => NULL, 'postfix' => NULL, 'size' => 'large'),
    'template' => 'templates/donations-thermometer',
  );

  return $items;
}


/**
 * Implements hook_block_info().
 *
 * Define all blocks provided by the module.
 * This hook declares to Drupal what blocks are provided by your module and
 * can optionally specify initial block configuration settings.
 */
function donations_thermometer_block_info() {
  $number_of_blocks = variable_get('donations_thermometer_number_of_meters', 1);
  $block_number = 1;

  while ($block_number <= $number_of_blocks) {
    $block_description = '';
    if( !empty(variable_get('donations_thermometer_block-' . $block_number . '-description')) ) {
      $block_description = variable_get('donations_thermometer_block-' . $block_number . '-description');
    }

    $blocks['donations_thermometer_block-' . $block_number] = array(
      'info' => t('Donations Thermometer: ' . $block_number . ' ' . $block_description),
      'cache' => DRUPAL_NO_CACHE,
    );
    $block_number++;
  }
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function donations_thermometer_block_view($delta) {
  $block = array();
  $parts = explode('-', $delta);

  if ($parts[0] == 'donations_thermometer_block') {
    $block_number = $parts[1];
    $block_data = null;

    // Classy.
    if( variable_get('donations_thermometer_block-' . $block_number . '-type') == 'classy') {
      $block_data = donations_thermometer__classy_block($block_number);
    }

    // Manual.
    elseif( variable_get('donations_thermometer_block-' . $block_number . '-type') == 'manual') {
      $block_data = donations_thermometer__manual_block($block_number);
    }

    // Block type has not been configured.
    else{
      return $block;
    }

    // Variables to TPL file.
    $block['subject'] = t($block_data['description']);

    // Variables specific to orientation.
    if($block_data['orientation'] == 'horizontal') {
      $block_data['inlinecss'] = 'width: ' . $block_data['percent'] . '%; ';
    }
    elseif($block_data['orientation'] == 'vertical') {
      $block_data['inlinecss'] = 'height: ' . $block_data['percent'] . '%; ';
    }
    $block['content'] = theme('donations_thermometer', $block_data );

    // Variables or "settings" the JS function.
    $settings = array(
      'block_number' => $block_number,
      'orientation' =>  $block_data['orientation'],
      'percent' => $block_data['percent'],
      'description' => $block_data['description'],
    );
  }

  return $block;
}


/**
 * Implements hook_block_configure().
 */
function donations_thermometer_block_configure($delta = '') {
  $form = array();
  $parts = explode('-', $delta);
  $block_number = $parts[1];
  $type = variable_get('donations_thermometer_block-' . $block_number . '-type');

  if ($parts[0] == 'donations_thermometer_block') {
    $form['general'] = array(
      '#title' => t('General'),
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
    );
    $form['general']['donations_thermometer_block-' . $block_number . '-description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-description'),
      '#description' => t('A description of this block so that it can be easily identified in the block list.'),
      '#required' => TRUE,
    );
    $form['general']['donations_thermometer_block-' . $block_number . '-type'] = array(
      '#type' => 'select',
      '#title' => t('Thermometer Type'),
      '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-type'),
      '#options' => array(
        'manual' => t('Manual'),
        'classy' => t('Classy.org')
      ),
      "#empty_option" => t('Please Select'),
      '#description' => t('If the type is changed, you must click save in order to see additional settings.'),
    );

    if(!empty($type)) {
      // Type specifc
      $form['thermometer_type_specifc_settings'] = array(
        '#title' => t('Type Specific Settings'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
      );

      // Classy.org.
      if( variable_get('donations_thermometer_block-' . $block_number . '-type') == 'classy') {
        $form['thermometer_type_specifc_settings']['donations_thermometer_block-' . $block_number . '-classy_token'] = array(
          '#type' => 'textfield',
          '#title' => t('Classy Token'),
          '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-classy_token'),
          '#description' => t("API Access Token"),
          '#required' => TRUE,
        );
        $form['thermometer_type_specifc_settings']['donations_thermometer_block-' . $block_number . '-classy_cid'] = array(
          '#type' => 'textfield',
          '#title' => t('CID Number'),
          '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-classy_cid'),
          '#description' => t("Classy Merchant ID"),
          '#required' => TRUE,
        );
        $form['thermometer_type_specifc_settings']['donations_thermometer_block-' . $block_number . '-classy_eid'] = array(
          '#type' => 'textfield',
          '#title' => t('EID Number'),
          '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-classy_eid'),
          '#description' => t("Classy Campaign ID"),
          '#required' => TRUE,
        );
        $form['thermometer_type_specifc_settings']['donations_thermometer_block-' . $block_number . '-update_frequency'] = array(
          '#type' => 'select',
          '#title' => t('Data Update Frequency'),
          '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-update_frequency', 30),
          '#options' => array(
            5 => t('5 Minutes'),
            10 => t('10 Minutes'),
            30 => t('30 Minutes'),
            60 => t('1 Hour'),
            1440 => t('24 Hours'),
          ),
          "#empty_option" => t('Please Select'),
          '#description' => t("How often should new data be gathered from Classy.org. It is highly advised that this be left at the default 30 minutes especially for donation thermometers who's data does not change frequently.")
        );
      }

      // Manual.
      elseif( variable_get('donations_thermometer_block-' . $block_number . '-type') == 'manual') {
        $form['thermometer_type_specifc_settings']['donations_thermometer_block-' . $block_number . '-goal'] = array(
          '#type' => 'textfield',
          '#title' => t('Goal'),
          '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-goal', 100),
          '#size' => 9,
          '#maxlength' => 10,
          '#description' => t("The Goal amount of the thermometer. Once set, this normally does not change."),
          '#required' => TRUE,
        );
        $form['thermometer_type_specifc_settings']['donations_thermometer_block-' . $block_number . '-current'] = array(
          '#type' => 'textfield',
          '#title' => t('Current number'),
          '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-current', 50),
          '#size' => 9,
          '#maxlength' => 10,
          '#description' => t("The current progress amount. This is the value that must be manually adjusted."),
          '#required' => TRUE,
        );
      }

      // Value Representations
      $form['value_representation'] = array(
        '#title' => t('Value Representations'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['value_representation']['donations_thermometer_block-' . $block_number . '-roundto'] = array(
        '#type' => 'select',
        '#title' => t('Round Values To'),
        '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-roundto', 1),
        '#options' => array(
          0 => t('Ones (2.5 -> 3%)'),
          1 => t('Tenths (2.25 -> 2.3%)'),
          2 => t('Hundreds (2.225 -> 2.23%)'),
          3 => t('Thousands (2.2225 -> 2.223%)')
        ),
        '#description' => t('How should the current amount and goal amount values be rounded when displayed?')
      );
      $form['value_representation']['donations_thermometer_block-' . $block_number . '-prefix'] = array(
        '#type' => 'textfield',
        '#title' => t('Prefix'),
        '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-prefix', ''),
        '#size' => 9,
        '#maxlength' => 10,
        '#description' => t("A prefix for goal and current values."),
        '#required' => FALSE,
      );
      $form['value_representation']['donations_thermometer_block-' . $block_number . '-postfix'] = array(
        '#type' => 'textfield',
        '#title' => t('Postfix'),
        '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-postfix', ''),
        '#size' => 9,
        '#maxlength' => 10,
        '#description' => t("A postfix for goal and current values."),
        '#required' => FALSE,
      );

      // Donation Thermometer Styling
      $form['thermometer_styling'] = array(
        '#title' => t('Donation Thermometer Styling'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['thermometer_styling']['donations_thermometer_block-' . $block_number . '-orientation'] = array(
        '#type' => 'select',
        '#title' => t('Display Orientation'),
        '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-orientation', 'vertical'),
        '#options' => array(
          'vertical' => t('Vertical'),
          'horizontal' => t('Horizontal')
        ),
      );
      $form['thermometer_styling']['donations_thermometer_block-' . $block_number . '-size'] = array(
        '#type' => 'select',
        '#title' => t('Thermometer Size'),
        '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-size', 'small'),
        '#options' => array(
          'small' => t('Small'),
          'large' => t('Large')
        ),
        '#description' => t("The dimensions of these \"small\" and \"large\" are defined in the CSS for this module. If you are crafty, you can override these values in CSS to fit your needs."),
      );
      $form['thermometer_styling']['donations_thermometer_block-' . $block_number . '-color'] = array(
        '#type' => 'select',
        '#title' => t('Thermometer Color'),
        '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-color', 'red'),
        '#options' => array(
          'red' => t('Red'),
          'blue' => t('Blue'),
          'yellow' => t('Yellow'),
          'green' => t('Green'),
          'orange' => t('Orange'),
          'purple' => t('Purple'),
          'image' => t('Thermometer Image'),
        ),
        '#description' => t("This too can be overridden in CSS."),
      );

      // Engagement URL
      $form['engagement_url'] = array(
        '#title' => t('Engagement URL'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['engagement_url']['donations_thermometer_block-' . $block_number . '-url_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Engagement URL'),
        '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-url_enabled', 0),
        '#description' => t("If the visitor clicks on this Donation Thermometer, where should they be sent."),
      );
      $form['engagement_url']['donations_thermometer_block-' . $block_number . '-url'] = array(
        '#type' => 'textfield',
        '#title' => t('Engagement URL'),
        '#default_value' => variable_get('donations_thermometer_block-' . $block_number . '-url', ''),
        '#description' => t("If the visitor clicks on this Donation Thermometer, where should they be sent."),
      );
    }
  }

  return $form;
}


/**
 * Implements hook_block_save().
 */
function donations_thermometer_block_save($delta = '', $edit = array()) {
  $parts = explode('-', $delta);
  $block_number = $parts[1];
  $type = $edit['donations_thermometer_block-' . $block_number . '-type'];

  if($parts[0] == 'donations_thermometer_block') {
    if(isset($edit['donations_thermometer_block-' . $block_number . '-type'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-type', $edit['donations_thermometer_block-' . $block_number . '-type']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-roundto'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-roundto', $edit['donations_thermometer_block-' . $block_number . '-roundto']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-description'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-description', $edit['donations_thermometer_block-' . $block_number . '-description']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-orientation'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-orientation', $edit['donations_thermometer_block-' . $block_number . '-orientation']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-size'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-size', $edit['donations_thermometer_block-' . $block_number . '-size']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-color'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-color', $edit['donations_thermometer_block-' . $block_number . '-color']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-postfix'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-postfix', $edit['donations_thermometer_block-' . $block_number . '-postfix']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-prefix'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-prefix', $edit['donations_thermometer_block-' . $block_number . '-prefix']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-url'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-url', $edit['donations_thermometer_block-' . $block_number . '-url']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-url_enabled'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-url_enabled', $edit['donations_thermometer_block-' . $block_number . '-url_enabled']);
    }
  }

  if($type == 'classy' && $parts[0] == 'donations_thermometer_block') {

    if(isset($edit['donations_thermometer_block-' . $block_number . '-classy_token'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-classy_token', $edit['donations_thermometer_block-' . $block_number . '-classy_token']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-classy_cid'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-classy_cid', $edit['donations_thermometer_block-' . $block_number . '-classy_cid']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-classy_eid'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-classy_eid', $edit['donations_thermometer_block-' . $block_number . '-classy_eid']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-update_frequency'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-update_frequency', $edit['donations_thermometer_block-' . $block_number . '-update_frequency']);
    }
  }
  elseif($type == 'manual' && $parts[0] == 'donations_thermometer_block') {
    if(isset($edit['donations_thermometer_block-' . $block_number . '-goal'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-goal', $edit['donations_thermometer_block-' . $block_number . '-goal']);
    }
    if(isset($edit['donations_thermometer_block-' . $block_number . '-current'])) {
      variable_set('donations_thermometer_block-' . $block_number . '-current', $edit['donations_thermometer_block-' . $block_number . '-current']);
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds validation of block configuration custom fields.
 */
function donations_thermometer_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  if ($form['module']['#value'] == 'donations_thermometer') {
    $form['#validate'][] = 'donations_thermometer_block_validate';
  }
}


/**
 * Form validation callback of block configuration.
 */
function donations_thermometer_block_validate(&$form, $form_state) {
  $delta = $form['module']['#value'];

  if ($delta == 'donations_thermometer') {
    $thermometer_id = $form['delta']['#value'];

    $new_type = $form_state['values'][$thermometer_id . '-type'];
    $old_type = variable_get($thermometer_id . '-type');

    if ($new_type == '') {
      form_set_error($thermometer_id . '-type', t('Please select an valid type.'));
    }
    elseif ($new_type == $old_type && $new_type == 'manual') {
      $current = $form_state['values'][$thermometer_id . '-current'];
      $goal = $form_state['values'][$thermometer_id . '-goal'];

      if (!is_numeric($current)) {
        form_set_error($thermometer_id . '-current', t('You must select a number for the current number.'));
      }
      else if ($current < 0) {
        form_set_error($thermometer_id . '-current', t('Current number must be positive.'));
      }

      if (!is_numeric($goal)) {
        form_set_error($thermometer_id . '-goal', t('You must select a number for the goal.'));
      }
      else if ($goal <= 0) {
        form_set_error($thermometer_id . '-goal', t('Goal number must be greater than zero.'));
      }

      if ($current > $goal) {
        form_set_error($thermometer_id . '-current', t('Current number must be equal to or less than the goal.'));
        form_set_error($thermometer_id . '-goal', t('Current number must be equal to or less than the goal.'));
      }
    }
    elseif ($new_type == $old_type && $new_type == 'classy') {
      // TODO: For now there is no valdiation. At some point, maybe wise to have
      // classy.org API version numbers. Then validate that the users input
      // fits with that version's number requirmenets.
      //
      // Another idea would be to check that data is coming in available given
      // the credentials supplied.
    }
    elseif ($new_type != $old_type) {
      // TODO: Possible feature.
      // Remove any stored data from old type.
      // Right now the old type data stays put. If the current block is removed
      // or if the donation thermometer changes we have to progaramtcially
      // remove data for each type.
      //
      // Sudo code:
      // 1) Find old type.
      // 2) Call the donations_thermometer__remove_TYPE_block_data function
    }

    // Validation for all types.
    @$url_enabled = $form_state['values'][$thermometer_id . '-url_enabled'];
    @$url = $form_state['values'][$thermometer_id . '-url'];

    if ($url_enabled == 1 && empty($url) ) {
      form_set_error($thermometer_id . '-url', t('A URL should be set if URL is enabled.'));
    }
  }
}


/**
 * Implementation of hook_init().
 */
function donations_thermometer_init() {
  // We add CSS and JS files here — adding it in hook_block() or
  // in the theme function is incompatible with the block cache.
  // See http://drupal.org/node/214856.

  // Upon further reading this is mostly an issue with drupal_add_css()
  // My changes requires that  drupal_add_js() be done in the hook_block().
  $module_path = drupal_get_path('module', 'donations_thermometer');
  drupal_add_css($module_path .'/css/donations_thermometer.css');
}


/**
 * MODULE SPECIFC FUNCTIONS.
 */
function donations_thermometer__classy_block($block_number) {
  $description = variable_get('donations_thermometer_block-' . $block_number . '-description');
  $goal = variable_get('donations_thermometer_block-' . $block_number . '-goal', 1);
  $current = variable_get('donations_thermometer_block-' . $block_number . '-current', 0);
  $token = variable_get('donations_thermometer_block-' . $block_number . '-classy_token');
  $cid = variable_get('donations_thermometer_block-' . $block_number . '-classy_cid');
  $eid = variable_get('donations_thermometer_block-' . $block_number . '-classy_eid');
  $num_donors = variable_get('donations_thermometer_block-' . $block_number . '-num_donors');
  $num_donations = variable_get('donations_thermometer_block-' . $block_number . '-num_donations');
  $postfix = variable_get('donations_thermometer_block-' . $block_number . '-postfix');
  $prefix = variable_get('donations_thermometer_block-' . $block_number . '-prefix');
  $size = variable_get('donations_thermometer_block-' . $block_number . '-size');
  $color = variable_get('donations_thermometer_block-' . $block_number . '-color');
  $orientation = variable_get('donations_thermometer_block-' . $block_number . '-orientation');

  $update_frequency = variable_get('donations_thermometer_block-' . $block_number . '-update_frequency', 30);

  $now = new DateTime();
  $last_update = variable_get('donations_thermometer_block-' . $block_number . '-last_update');
  $interval = new DateInterval('PT' . $update_frequency . 'M');

  if( !empty($last_update) ) {
    $last_update->add($interval);
  }

  if( empty($last_update) || ($now > $last_update) ) {
    $json = @file_get_contents('https://www.classy.org/api1/campaign-info?token=' . $token . '&cid=' . $cid . '&eid=' . $eid);
    if($json) {
      $data = json_decode($json);

      variable_set('donations_thermometer_block-' . $block_number . '-last_update', $now);

      $goal = $data->goal;
      variable_set('donations_thermometer_block-' . $block_number . '-goal', $goal);

      $current = $data->total_raised;
      variable_set('donations_thermometer_block-' . $block_number . '-current', $current);

      $num_donations = $data->num_donations;
      variable_set('donations_thermometer_block-' . $block_number . '-num_donations', $num_donations);

      $num_donors = $data->num_donors;
      variable_set('donations_thermometer_block-' . $block_number . '-num_donors', $num_donors);
    }
    // else: there was an error so we will fall back on old data.
  }

  $percent = round(($current / $goal) * 100, variable_get('donations_thermometer_block-' . $block_number . '-roundto', 1));
  $url_enabled = variable_get('donations_thermometer_block-' . $block_number . '-url_enabled');
  $url = variable_get('donations_thermometer_block-' . $block_number . '-url');

  return compact('block_number', 'description', 'goal', 'current', 'prefix', 'postfix', 'size', 'color', 'orientation', 'percent', 'num_donations', 'num_donors', 'url', 'url_enabled');
}


function donations_thermometer__manual_block($block_number) {
  $description = variable_get('donations_thermometer_block-' . $block_number . '-description');
  $goal = variable_get('donations_thermometer_block-' . $block_number . '-goal');
  $current = variable_get('donations_thermometer_block-' . $block_number . '-current');
  $postfix = variable_get('donations_thermometer_block-' . $block_number . '-postfix');
  $prefix = variable_get('donations_thermometer_block-' . $block_number . '-prefix');
  $size = variable_get('donations_thermometer_block-' . $block_number . '-size');
  $color = variable_get('donations_thermometer_block-' . $block_number . '-color');
  $orientation = variable_get('donations_thermometer_block-' . $block_number . '-orientation');
  $url_enabled = variable_get('donations_thermometer_block-' . $block_number . '-url_enabled');
  $url = variable_get('donations_thermometer_block-' . $block_number . '-url');
  $percent = round(($current / $goal) * 100, variable_get('donations_thermometer_block-' . $block_number . '-roundto', 1));

  return compact('block_number', 'description', 'goal', 'current', 'prefix', 'postfix', 'size', 'color', 'orientation', 'percent', 'url', 'url_enabled');
}


/**
 * Remove Block Data.
 *
 * These functions remove the generic donations_thermometer data for a given
 * block number.
 */
function donations_thermometer__remove_block_data($block_number) {
  donations_thermometer__remove_generic_block_data($block_number);
  donations_thermometer__remove_classy_block_data($block_number);
  donations_thermometer__remove_manual_block_data($block_number);
}

function donations_thermometer__remove_generic_block_data($block_number) {
  variable_del('donations_thermometer_block-' . $block_number . '-description');
  variable_del('donations_thermometer_block-' . $block_number . '-postfix');
  variable_del('donations_thermometer_block-' . $block_number . '-prefix');
  variable_del('donations_thermometer_block-' . $block_number . '-size');
  variable_del('donations_thermometer_block-' . $block_number . '-color');
  variable_del('donations_thermometer_block-' . $block_number . '-orientation');
  variable_del('donations_thermometer_block-' . $block_number . '-url_enabled');
  variable_del('donations_thermometer_block-' . $block_number . '-url');
  variable_del('donations_thermometer_block-' . $block_number . '-url_enabled');
}

function donations_thermometer__remove_classy_block_data($block_number) {
  variable_del('donations_thermometer_block-' . $block_number . '-goal');
  variable_del('donations_thermometer_block-' . $block_number . '-current');
  variable_del('donations_thermometer_block-' . $block_number . '-classy_token');
  variable_del('donations_thermometer_block-' . $block_number . '-classy_cid');
  variable_del('donations_thermometer_block-' . $block_number . '-classy_eid');
  variable_del('donations_thermometer_block-' . $block_number . '-num_donors');
  variable_del('donations_thermometer_block-' . $block_number . '-num_donations');
  variable_del('donations_thermometer_block-' . $block_number . '-update_frequency');
  variable_del('donations_thermometer_block-' . $block_number . '-last_update');
}

function donations_thermometer__remove_manual_block_data($block_number) {
  variable_del('donations_thermometer_block-' . $block_number . '-goal');
  variable_del('donations_thermometer_block-' . $block_number . '-current');
}
