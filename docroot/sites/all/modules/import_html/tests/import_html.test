<?php
/**
 * @file attempt to test some functions and stop things breaking
 */

class import_htmlTestCase extends DrupalWebTestCase {


  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Import HTML'),
      'description' => t('Test the importing of known HTML source examples directly.'),
      'group' => t('Import HTML'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // First to basic setup
    parent::setUp('import_html', 'path', 'menu');
    // Now our own config tasks
    // Create and log in our test user.
    $user = $this->drupalCreateUser(array(
      'administer site configuration',
      'access import_html',
      'administer menu',
      'create url aliases',
      'administer url aliases'
    ));
    $this->drupalLogin($user);
  }



  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    // Do tear down tasks...

    // Delete created nodes
    // Delete import temp files

    // Finally...
    parent::tearDown();
  }

  /**
   * Checks the default GUI profile screen submits OK
   */
  function testDefaultProfileSettings() {

    // Just post nothing to that form, see what happens
    $edit = array();
    $this->drupalPost(IMPORT_HTML_ADMIN_PATH . '/profiles', $edit, t('Save Settings'));

    $profile = import_html_profile();
    # assertTitle checks <title> not H1
    #$this->assertTitle(t("Import HTML Settings"), "Settings page is available and accessible");

    // Need to assert the settings are valid
    // This particular check may be off-base, but it's a hint.
    $this->assertEqual(
      $profile['translation_template'],
      drupal_get_path('module', 'import_html') .'/templates/html2simplehtml.xsl', // What our API SHOULD return
      "Seems the default settings are initialized OK.",
      "Seems the default settings (from import_html_profile) may not have been initialized as expected."
      . " expected [" . drupal_get_path('module', 'import_html') .'/templates/html2simplehtml.xsl' . "]"
      . " found [" . $profile['translation_template'] . "]"
    );
  }

  function testImportOneFile() {
    $profile = import_html_profile();
    $profile['debug_level'] = WATCHDOG_NOTICE;
    $profile['keep_temp_files'] = TRUE;

    // Import a single source file.
    $context = array();
    $context['profile_id'] = $profile['profile_id'];
    $context['source_siteroot'] = drupal_get_path('module', 'import_html') . '/tests/example_pages';
    $rel_path = 'input_example_01.htm';

$this->pass(print_r($profile, TRUE));

    $file_results = import_html_import_file($rel_path, $context);
$this->pass(print_r($file_results, TRUE));
    // What did that do?
    $this->assertNotEqual($file_results, FALSE, "Importing a single file $rel_path returns a result");
    if (! empty($file_results)) {
      $result_item = reset($file_results);
      // The 'node' passed back is only for auditing, not a real node.
      $result_node = node_load($result_item['node']->nid);

      // Inspect the generated node
      $this->assertNotNull($result_node, 'Result of processing the file was a valid node');
$this->pass(print_r($result_node, TRUE));

      // node_load may not retrieve its ->path automatically,
      // nor is there a good API for it. *bah*.
      // Make it up, then check it.
      $result_node->path = ltrim(url('node/' . $result_node->nid), '/');
      $this->assertTrue(($result_node->path == 'input_example_01'), 'Calculated clean_url path is correct');

      $this->assertTrue(strstr($result_node->title, 'Simple HTML Input 01'), 'Extracted and saved the correct title from the source document sample_01');
      $node_body = $result_node->body[$result_node->language][0]['value'];
      $this->assertTrue(strstr($node_body, 'This is the simplest of all HTML pages'), 'Extracted and saved the correct body from the source document sample_01');

      // Load the imported node
      $this->drupalGet($rel_path);
      $this->assertText('Simple HTML Input 01', 'Node was saved with the correct path, and displays the correct title');
      $this->assertText('This is the simplest of all HTML pages', 'Loaded Node displays the correct body');
    }
    // Check if there was anything interesting in the logs
$this->drupalGet(IMPORT_HTML_ADMIN_PATH .'/results/'. WATCHDOG_INFO);
$this->pass($this->drupalGetContent());
  }

  /**
   * Checks submitting a "Select Files" form submission behaves as expected.
   *
   */
  function testImportSiteStep1() {

    // Just post nothing to that form, see what happens
    $edit = array();
    $this->drupalPost(IMPORT_HTML_ADMIN_PATH . '/import_site', $edit, t("Next >>"));

    // This SHOULD fail, as the source path is incorrect
    $this->assertText(
      "does not exist or is unreadable",
      "Submitting an invalid source path correctly raises an error."
    );

    // Now try a valid input
    $edit['source_siteroot'] = drupal_get_path('module', 'import_html') . '/tests/example_pages';
    $this->drupalPost(IMPORT_HTML_ADMIN_PATH . '/import_site', $edit, t("Next >>"));

    // This SHOULD NOT fail, as the source path is incorrect
    $this->assertNoText(
      "does not exist or is unreadable",
      "Submitting a valid source path validates."
    );
    $this->assertText(
      "Step 2 of 3",
      "Proceeds successfully to step two"
    );

    // See if the folder listing contains the right items
    $search_for_file = "example_subfolder/find-me.htm";
    $found_file = FALSE;
    $this->parse();
    $forms = $this->xpath('//form');
    foreach ($forms as $form) {
      $elements = $form->xpath('.//input|.//textarea|.//select');
      foreach ($elements as $element) {
        if ($element['value'] == $search_for_file) $found_file = TRUE;
      }
    }
    $this->assertTrue($found_file, "Folder listing contains required files as checkbox items");

  }

  /**
   * Checks submitting the selected checkboxes listed actually works and
   * imports the html as expected.
   *
   */
  function xtestImportSiteStep2() {
    $edit = array();
    $edit['source_siteroot'] = drupal_get_path('module', 'import_html') . '/tests/example_pages';
    $this->drupalPost(IMPORT_HTML_ADMIN_PATH . '/import_site', $edit, t("Next >>"));
    $this->assertText(
      "Step 2 of 3",
      "Choose valid input directory and proceed successfully to step two"
    );

    // "Select" the checkboxes in this multi-step form.
    $edit = $this->_select_all_files();

    // Now submit that
    $this->pass("Selected ". count($edit['file_rel_path][']) ." items to import");
    $this->pass("Posting form ". var_dump($edit, 1) );
    // Post to multistep
    #$this->drupalPost(NULL, $edit, t("Batch Process Files"));
    $this->drupalPost(NULL, $edit, t("Import Files"));

    // There's not a lot we can do here, cross fingers!

    $this->assertText(
      "Step 3 of 3",
      "Submitted and successfully processed all import files in one go. Got as far as the results page summary."
    );

$this->pass($this->drupalGetContent());
  }


  /**
   * Run the import again - this time in batch mode
   *
   */
  function xtestImportSiteStep2Batch() {
    $edit = array();
    $edit['source_siteroot'] = drupal_get_path('module', 'import_html') . '/tests/example_pages';
    $this->drupalPost(IMPORT_HTML_ADMIN_PATH . '/import_site', $edit, t("Next >>"));
    $this->assertText(
      "Step 2 of 3",
      "Choose valid input directory and proceed successfully to step two"
    );

    // "Select" the checkboxes in this multi-step form.
    $edit = $this->_select_all_files();

    // Now submit that
    $this->pass("Selected ". count($edit['file_rel_path][']) ." items to import");
    $this->pass("Posting form ". var_dump($edit, 1) );
    // Post to multistep
    $this->drupalPost(NULL, $edit, t("Batch Process Files"));

    // There's not a lot we can do here, cross fingers!

    $this->assertText(
      "Step 3 of 3",
      "Submitted and successfully processed all import files in BATCH mode. Got as far as the results page summary."
    );

    $this->pass($this->drupalGetContent());

  }


  /**
   * Helper to fill in the treeview form
   * Returns an edit array with all the file_rel_path boxes filled in
   */
  function _select_all_files() {
    // "Select" the checkboxes in this multi-step form.
    $edit = array();
    $this->parse();
    $elements = $this->xpath('//input');
    foreach ($elements as $element) {
      if ($element['type'] == 'checkbox' && strstr($element['name'], 'file_rel_path')) {
        #$this->pass("Found checkbox indicating file to import ". print_r($element, 1) );
        // I need to figure out my own ][ brackets :(
        $edit["file_rel_path[{$element['value']}]"] = ''. $element['value'];
        // That was HACKY!
      }
    }
    return $edit;
  }

}

