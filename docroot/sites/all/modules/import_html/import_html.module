<?php

/**
 * @file Main drupal interface to import_html.
 *
 * This file contains Drupal hooks
 * and some config/preferences. Actual processing functions are in
 * import_html_process.inc
 *
 * Synopsis:
 *
 * Facility to import an existing, static HTML site structure into the Drupal
 * CMS as structured nodes.
 *
 * Intent:
 *
 * Allow an admin to define a source directory of an existing
 * traditional static HTML website, and import (as much as possible)
 * the content and structure into a drupal site.
 * Source files will be stripped of exisiting chrome and navigation
 * elements before being inserted as nodes.
 *
 * See import_html_help.htm for more
 *
 * Main data extraction routines are in import_html_process.inc. Module-specific
 * data extraction methods have been shifted into import_html_modules.inc UI
 * forms and themes have been shifted to import_html_ui.inc.
 * Drupal hooks and some configs remain in this module file.
 *
 * import_html libraries can be used by external modules, specifically wrapper.
 * module (private development) and static.module (experimental)
 *
 * CODE:
 * Internally, there are a lot of filepath fragments being passed around.
 * Any filepath known to represent a folder (eg $source_siteroot) will end with
 * a /. Path fragments or filenames do NOT begin with a /. This makes
 * concatenation pretty reliable, even with empty strings and not worrying about
 * dividers. However, many times, small functions like 'ensure_trailing_slash()'
 * may be called. Not all of them are needed, but most of them were put in due
 * to some wierd filesystem vagery or filename encountered.
 *
 *
 * @ingroup import_html Import HTML
 *
 * @author Dan Morrison http://coders.co.nz/
 *
 */

// TODO clean this up.
// Bad style
#$import_html_library_path = drupal_get_path('module', 'import_html') . '/coders_php_library';
#set_include_path($import_html_library_path . PATH_SEPARATOR . get_include_path());



/**
 * @name Debug Flag
 * Used for testing only
 */
if (! function_exists('debug')) {
  module_load_include('inc', 'import_html', 'coders_php_library/debug');
  #  define('DEBUGLEVEL', 0);
}
#debug_set_level(3);


/**
 * Support libraries are broken off for management
 */
module_load_include('inc', 'import_html', 'import_html_ui');

/**
 * Include the per-module hooks that we provide on behalf of other modules.
 * Due to D7 hook registry caching, this can no longer be lazy-loaded.
 *
 * TODO- is there a lazy-load for hooks?
 */
import_html_include_add_on_module_handlers();

/**
 * @name $_import_html_file_classes
 * poor-mans mime-list
 */
global $_import_html_file_classes;
$_import_html_file_classes = array(
  "htm" => 'html',
  "html" => 'html',
  "shtml" => 'html',
  "php" => 'html',
  "asp" => 'html',
  "aspx" => 'html',
  "jsp" => 'html',
  "gif" => "image",
  "jpg" => "image",
  "png" => "image",
  "css" => "resource",
  "js" => "resource",
  "swf" => "resource",
  "pdf" => "document",
  "txt" => "document",
  "rtf" => "document",
);

// How to handle duplicates and other problems when importing
define("IMPORT_HTML_SKIP", 0);
define("IMPORT_HTML_MERGE", 1);
define("IMPORT_HTML_GUESS", 2);
define("IMPORT_HTML_DEFAULT", 4);
define("IMPORT_HTML_CAREFUL", 8);

define("IMPORT_HTML_MAX_LABEL_LENGTH", 32);

define('IMPORT_HTML_ADMIN_PATH', 'admin/structure/import_html');


define('IMPORT_HTML_GLOB_BEFORE', 'glob before');
define('IMPORT_HTML_RECURSE_AFTER', 'recurse after ');

/**
 * DEPRECATED!
 * To avoid overloading the treeview display, directory listing depth recursion
 * will be truncated if the number of found files is greater than this.
 */
# define('IMPORT_HTML_MAX_FILE_LISTING_COUNT', 500);

/**
 * If the database max_allowed_packet size is limited, then huge batch jobs
 * cannot be queued - the list of instructions is too long!
 * 16M is a common default, but shared hosts may have something useless like
 * 1M . Here is the recommended minimum, in Mb.
 * You should be able to process 4000 pages in one go with 4M
 */
define('IMPORT_HTML_REQUIRED_MAX_ALLOWED_PACKET', 11); // Megs

/**
 * Implements hook_menu() ().
 *
 * Declares all the menu items relating to this module
 * And all the public functions it supplies
 */
function import_html_menu() {
  // Jump right in and present the wizard form as the first option
  $items[IMPORT_HTML_ADMIN_PATH] = array(
    'title' => 'Import HTML Site',
    'description' => "Import an entire site from static HTML",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_html_importprocess_form'),
    'file' => 'import_html_ui.inc',
    'access arguments' => array('access import_html'),
  );
  $items[IMPORT_HTML_ADMIN_PATH . '/import'] = array(
    'title' => 'Import HTML Site',
    'description' => "Import an entire site from static HTML",
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Callback for various profile subtabs
  // If this page is hit without an argument, it will redirect to the current default profile.
  $items[IMPORT_HTML_ADMIN_PATH . '/profiles'] = array(
    'title' => 'Manage settings',
    'page callback' => 'import_html_profiles_page',
    'file' => 'import_html_ui.inc',
    'weight' => 2,
    'access arguments' => array('access import_html'),
    'type' => MENU_LOCAL_TASK,
  );

  $items[IMPORT_HTML_ADMIN_PATH . '/profiles/new'] = array(
    'title' => 'New',
    'description' => 'Make a new configuration set',
    'page callback' => 'import_html_profiles_page',
    'page arguments' => array('new'),
    'file' => 'import_html_ui.inc',
    'access arguments' => array('access import_html'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  // List all profiles. Set the most recently used as the default
  // Create muliple items dont use %import_html_profile as we need individual
  // menu items created, not just callbacks
  foreach (import_html_profile_load_all() as $profile_id => $profile) {
    $items[IMPORT_HTML_ADMIN_PATH . '/profiles/' . $profile_id] = array(
      'title' => $profile_id,
      'page arguments' => array($profile_id),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('access import_html'),
    );
  }

  $items[IMPORT_HTML_ADMIN_PATH . '/profiles/%import_html_profile/export'] = array(
    'title' => 'Export preset',
    'file' => 'import_html_ui.inc',
    'page callback' => 'import_html_profile_export_page',
    'page arguments' => array(4),
    'access arguments' => array('access import_html'),
    'type' => MENU_CALLBACK,
  );

  $items[IMPORT_HTML_ADMIN_PATH . '/demo'] = array(
    'title' => 'Demo',
    'weight' => 3,
    'description' => 'Demonstrate or test HTML Import on one file.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_html_demo_form'),
    'file' => 'import_html_ui.inc',
    'access arguments' => array('access import_html'),
    'type' => MENU_LOCAL_TASK,
  );
  $items[IMPORT_HTML_ADMIN_PATH . '/results'] = array(
    'title' => 'Results',
    'weight' => 5,
    'description' => "View log of recent import messages",
    'page callback' => 'import_html_results',
    'file' => 'import_html_ui.inc',
    'access arguments' => array('access import_html'),
    'type' => MENU_LOCAL_TASK,
  );
  $items[IMPORT_HTML_ADMIN_PATH . '/setup'] = array(
    'title' => 'Setup',
    'weight' => 6,
    'description' => "Verify requirements and available utilities",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_html_setup'),
    'file' => 'import_html_ui.inc',
    'access arguments' => array('access import_html'),
    'type' => MENU_LOCAL_TASK,
  );

  // Utility to allow direct links to source files from the filebrowser UI.
  $items[IMPORT_HTML_ADMIN_PATH . '/file_preview'] = array(
      'title' => 'Preview source file',
      'description' => "Proxy access to the files in the source directory",
      'page callback' => 'import_html_file_preview',
      'file' => 'import_html_ui.inc',
      'access arguments' => array('access import_html'),
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Hook Implementation
 */
function import_html_permission() {
  return array(
    'access import_html' => array(
      'title' => t('access import_html'),
      'description' => t('Use import_html to import content.'),
    ),
  );
}

/**
 * Return help text describing this module
 *
 * @param $section string Context this help is being called from
 * @return string
 */
function import_html_help($path, $arg) {
  switch ($path) {
    case 'admin/modules/import_html':
      return t("Import/Export an entire site to/from static HTML");
    case 'admin/help#import_html':
      $text = file_get_contents(drupal_get_path("module", "import_html") . "/help/import_html_help.html");
      return str_replace('&base_url&', url(), $text);
    case IMPORT_HTML_ADMIN_PATH:
      return l("DO check the help page, this is a complex process", 'admin/help/import_html');
    case 'admin/structure/import_html/demo':
      return 'The demo will show a <em>preview</em> of what importing a node could look like in Drupal, but it cannot be imported directly.';
  }
  return FALSE;
}



/**
 * Implements hook_form_alter() ().
 */
function import_html_form_alter(&$form, &$form_state, $form_id) {
  // I need to pretend the demo page is a submit page
  if (($form_id == 'page_node_form') && ($form['#action'] == url(IMPORT_HTML_ADMIN_PATH . '/import_files')) ) {
    $form['#action'] = url('node/add/page');
  }
}

////////////////////////////////////////////
// End of Drupal core hooks.
// Module utilities below.



/**
 * Accessor for a persistant profile switcher.
 * Really just a wrapper to variable_get()
 *
 * @param $profile_id
 *   If set, this becomes the active profile for the duration of the request.
 * @return The current set profile id. 'default' by default.
 */
function import_html_current_profile_id($profile_id = NULL) {
  static $import_html_current_profile_id;
  if (! $import_html_current_profile_id) {
    $import_html_current_profile_id = variable_get('import_html_current_profile', 'default');
  }
  if (isset($profile_id)) {
    $import_html_current_profile_id = $profile_id;
    variable_set('import_html_current_profile', $profile_id);
  }
  return $import_html_current_profile_id;
}

/**
 * Return an array containing the set of import_html settings to use as a template
 */
function import_html_profile_defaults() {
  global $user;
  $defaults = array(
    'profile_id' => 'default', // required to be filled in by the system
    # extraction prefs
    'translation_template' => drupal_get_path('module', 'import_html') . '/templates/html2simplehtml.xsl',
    'content_tag_id' => 'article',
    'content_type' => 'page',
    'preferred_filter' => import_html_get_preferred_filter(),
    'default_document' => 'index.htm, index.html',
    'default_documents' => array('index.htm', 'index.html'),
    'file_exclusions' => "^_\n/_\nCVS\n^\.\n/\.",
    // File exclusions is a textfield, newline separated.
    // Internally that gets converted to the regexp expected by file_scan_directory
    // eg nomask = '/(\.\.?|CVS)$/'
    // nomask = '@^_|^CVS$|^\.@'
    'file_exclusions' => "^_\n/_\nCVS\n^\.\n/\.",
    'strip_tables' => FALSE,
    'cleanup_namespaces' => TRUE,
    'force_tidy' => TRUE,
    'spider' => FALSE,
    'absorb_all_tagged_elements' => TRUE,
    #replication options
    'trim_suffixes' => TRUE,
    'legacy_aliases' => TRUE,
    'relink_files' => FALSE,
    'allow_bad_urls' => FALSE,
      // TODO - modify uses of this to use File API
    #'file_storage_path' => variable_get('file_directory_path', 'sites/default/files') . "/imported/",
    'file_storage_path' => variable_get('file_public_path', conf_path() . '/files') . "/imported/",
    'rewrite_links' => TRUE,
    'import_site_prefix' => '',
    'freetag_vocab' => 0,
    #subsettings
    'import_category' => array(),
    'import_status' => TRUE,
    'import_promote' => "",
    'import_user' => $user->name,
    'import_lang' => '',
    'create_menus' => TRUE,
    'menu_link_max_length' => IMPORT_HTML_MAX_LABEL_LENGTH,
    'hide_default_menu_placeholders' => FALSE,
    'menu_parent_id' => 'main-menu:0',
    #advanced
    'handle_duplicates' => IMPORT_HTML_MERGE,
    'handle_no_title' => IMPORT_HTML_GUESS,
    'recursion_behaviour' => IMPORT_HTML_GLOB_BEFORE,
    'keep_temp_files' => FALSE,
  );
  $extras = module_invoke_all('import_html_default_settings');
  return $defaults + $extras;
}

/**
 * Check the settings are legal
 */
function import_html_profile_validate($profile) {
  $ok = TRUE;
  $types = node_type_get_names();
  if (! in_array($profile['content_type'], array_keys($types))) {
    import_html_debug("Node type [%type] is invalid. Check your settings. Either there is a mistake somewhere or a required dependency or content type definition is unavailable", array('%type' => $profile['content_type']), WATCHDOG_CRITICAL);
    $ok = FALSE;
  }
  return $ok;
}

/**
 * Retrieve a default value for the 'input filter' which applies to nodes even after import.
 *
 * This is needed otherwise the edit page defaults to 'filtered' and existing
 * formatting gets badly stripped.
 * Normally this is available in the variable import_html_preferred_filter
 * but the very first time this module is called, the setting may not be
 * initialized yet. Scan the available filters here and return the appropriate
 * named filter id.
 *
 * @param $as_list bool set this to just get an option list of available filters
 */
function import_html_get_preferred_filter($profile = array(), $as_list = FALSE) {
  if (!empty($profile['preferred_filter']) && (!$as_list)) {
    return $profile['preferred_filter'];
  }
  $preferred_format_id = 'unfiltered_html';
  $preferred_format_name = 'Unfiltered HTML';

  // As we are importing existing html, we don't even need line breaks done for us,
  // so the preferred filter is NONE AT ALL - Unfiltered HTML

  // Detect the ID of 'Unfiltered HTML' format, if available
  $formats = filter_formats();

  if ($as_list) {
    $formats_list = array();
    foreach ($formats as $fid => $f) {
      $formats_list[$f->format] = $f->name;
    }
    return $formats_list;
  }

  if (! isset($formats[$preferred_format_id])) {
    // No unfiltered HTML option available... but I need it!;
    drupal_set_message("Creating new filter option - $preferred_format_name");

    // can't use filter_admin_add(); as it rewrites the whole page
    $filter_format = new stdClass;
    $filter_format->format = $preferred_format_id;
    $filter_format->name = $preferred_format_name;
    filter_format_save($filter_format);
    drupal_set_message("Created new filter option - $preferred_format_name ($preferred_format_id)");
    $format_id = $filter_format->format;
  }
  return $preferred_format_id;
}


/**
 * Returns what general 'type' a file probably is, based on suffix or mime if
 * available.
 *
 * @returns one of the defined 'file_classes' : page|image|resource|document ... or null if unknown
 *
 * This is used for UI coloring, and the process decision on how to import it,
 * so is not totally cannonic. HTML- or- not is all that really counts.
 *
 * @see $_import_html_file_classes
 */
function import_html_guess_file_class($filename) {
  global $_import_html_file_classes;
  // D7 requires that normal paths get DRUPAL_ROOT added.
  // Bloody boring.
  if (! file_exists($filename)) {
    $filename = DRUPAL_ROOT . '/' . $filename;
  }
  if (! file_exists($filename)) {
    trigger_error("Invalid argument - file $filename does not exist");
    return NULL;
  }
  // First try mime
  if ( function_exists('mime_content_type') ) {
    $mime = mime_content_type($filename);
  }
  elseif ( function_exists('finfo_open') ) {
    $finfo = finfo_open(FILEINFO_MIME);
    $mime = finfo_file($finfo, $filename);
  }

  if (isset($mime)) {
    @list($mime_type, $mime_subtype) = split('/', $mime);
    if ($mime == 'text/html') {
      return $mime_subtype;
    }
    if ($mime_type == 'image') {
      return $mime_type;
    }
    if ($mime == 'text/css') {
      return 'resource';
    }
    if ($mime == 'application/x-shockwave-flash') {
      return 'resource';
    }
    if ($mime == 'application/x-javascript') {
      return 'resource';
    }
    if ($mime_type == 'application') {
      return 'document'; // gross generalization
    }
    # return 'resource';
  }

  // Some file mirrors (wget or myself) may have produced odd filenames
  // strip URL args like # and ? off it
  $filename = preg_replace('|[\?\#].*$|', '', $filename);

  if (count(explode('.', basename($filename))) == 1) {
    // assume no suffix at all is a html page
    return 'html';
  }
  $extension = pathinfo($filename, PATHINFO_EXTENSION);

  return @$_import_html_file_classes[strtolower($extension)];
}

/**
 * Declare themable stuff.
 */
function import_html_theme() {
  return array(
    'import_html_list_filesystem_tree' => array(
      'render element' => 'form',
    ),
    'tree_branch' => array(
      'render element' => 'element',
    ),
    'import_html_filesystem_tree_item' => array(
      'render element' => 'element',
    ),
    'import_html_file_selector_wrapper' => array(
      'render element' => 'element',
    ),
    'import_html_form_table' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Render the contents of a form element - eg a fieldset - in a table.
 *
 * Immediate form children elements are the rows, the contents of that are the
 * cells.
 */
function theme_import_html_form_table($variables) {
  $fields_container = $variables['element'];
  module_load_include('inc', 'import_html', 'theme_fieldset_as_table');
  return theme_fieldsets_as_table($fields_container);
}


/**
 * Implements hook_element_info().
 *
 * Declare our custom pseudo form item
 */
function import_html_element_info() {
  $type['tree_branch'] = array(
    '#theme' => 'tree_branch',
  );
  return $type;
}



///////////////////////////////////////////////////////
// Batch operations are really part of import_html_process, but
// need to be in this module file so the batch runner can FIND the jobs
// Batch ops do not allow inc file inclusions AFAIK.

/**
 * Return a batch set containing the instructions to run over many files.
 *
 * A batch set is a queue consisting of multiple batch jobs.
 *
 * @see import_html_import_file_batch_job()
 *
 * @param $file_list
 * @param $profile context settings.
 */
function import_html_import_files_batch_instructions($file_list, $context, $funcname = 'import_html_import_file_batch_job') {
  // Prepare a batch config
  $batch_settings = array(
    'finished' => 'import_html_batch_import_finished',
    'title' => t('Processing all queued import requests. %count tasks.', array('%count' => count($file_list))),
    'init_message' => t('Starting Batch HTML Import.'),
    'progress_message' => t('Processed @current out of @total.', array()),
    'error_message' => t('Batch HTML Import has encountered an error.'),
    'operations' => array(),
  );
  foreach ($file_list as $rel_path) {
    if ($rel_path) {
      $batch_settings['operations'][] = array($funcname, array($rel_path, $context));
    }
  }
  return $batch_settings;
}

/**
 * Called by the batch queue, invoke import_html_import_file() and update the
 * batch context with the status
 */
function import_html_import_file_batch_job($rel_path, $profile, &$batch_context) {
  import_html_debug(
    __FUNCTION__ . " (%rel_path) starting",
    array('%rel_path' => $rel_path),
    WATCHDOG_DEBUG
  );

  $results = import_html_import_file($rel_path, $profile);
  if (! $results) {
    // The results may be empty if the path scanned was just a directory
    // that had no immediate index page. The child items may have been queued
    // recursively, but no results are immediately returned in that case.

    import_html_debug(
      'Failed to get any results from the attempted analysis of %rel_path.
        The source file path was probably unavailable, invalid, or incorrect.
        Or it may have been a directory without an index.
        May also mean that an internal rule excluded the import.
        ',
      array('%rel_path' => $rel_path),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  foreach ($results as $summary) {
    // Almost useless loop, usually just one node per file
    if (! empty($summary['node'])) {
      $batch_context['message'] = "Processed $rel_path : <span class='node-title'>" . $summary['node']->title . "</span>";
      #$batch_context['results'][$rel_path] = $summary['node']->title;
      # The system will link to this - things may have been renamed away from that original filename
      $batch_context['results']['node/' . $summary['node']->nid] = $summary['node']->title;
    }
    else {
      // May have been a file! That's not a failure
      if ($summary['type'] == 'resource') {
        $batch_context['message'] = "Imported the file $rel_path as a resource";
        $batch_context['results'][$summary['path']] = $rel_path;
      }
      else {
        $batch_context['message'] = "FAILED to process $rel_path";
        $batch_context['results'][$rel_path] = "FAILED to process $rel_path";
      }
    }
  }

  #return $node; // I don;t think this return value goes anywhere?
}

/**
 * Called by the batch queue, invoke import_html_import_directory() and update
 * the batch context with the status
 *
 * @param $rel_path
 * @param $profile
 */
function import_html_import_directory_batch_job($rel_path, $profile, &$batch_context) {
  // Processing a directory when in batch context means adding batch jobs to the end of the current process
  // - that in turn may add more jobs.
  // List the files we can, and add them as jobs.

  // The recursion_method flag dictates how folder recursion will be handled
  // Folders processed during batch recursion will add their children as further
  // batch processes.
  // A batch task called "{recursion_method}_add_list_to_queue" will be called.
  // In this case, "import_html_batch_add_list_to_queue"
  $profile['recursion_method'] = 'import_html_batch';

  import_html_debug("Starting batch import dir job '$rel_path' ", array('%rel_path' => $rel_path), WATCHDOG_DEBUG );

  $working_path = $profile['source_siteroot'] . $rel_path;

  // Scan the given directory (NOT deep), add the files, and the subdirectories.
  // Processing the subdir will do the recursion itself
  $file_scan_options = array(
    'nomask' => import_html_file_exclusions_to_regexp($profile['file_exclusions']),
    'recurse' => FALSE,
  );
  $dir_structure = import_html_file_scan_directory($working_path, "@.*@", $file_scan_options);

  // sort into file & folder
  $selected_files = array();
  $selected_dirs = array();
  foreach ($dir_structure as $filepath => $file_info) {
    $new_filepath = str_replace($profile['source_siteroot'], '', $filepath);
    if (is_dir($filepath)) {
      $selected_dirs[] = $new_filepath;
    }
    else {
      $selected_files[] = $new_filepath;
    }
  }
  if (empty($selected_files) && empty($selected_dirs)) {
    drupal_set_message("No files or directories selected. Not setting any batch jobs");
    return;
  }

  if (! empty($selected_files)) {
    $file_batch_instructions = import_html_import_files_batch_instructions($selected_files, $profile, 'import_html_import_file_batch_job');
    batch_set($file_batch_instructions);
  }
  if (! empty($selected_dirs)) {
    $dir_batch_instructions = import_html_import_files_batch_instructions($selected_dirs, $profile, 'import_html_import_directory_batch_job');
    batch_set($dir_batch_instructions);
  }

  import_html_debug("Batch import_dir queued %count_files files and %count_dirs dirs.", array('%count_files' => count($selected_files), '%count_dirs' => count($selected_dirs)), WATCHDOG_INFO  );
}

/**
 * Callback function to run at the end of the batch process
 */
function import_html_batch_import_finished($success, $results, $operations) {
  $duration = REQUEST_TIME - variable_get('import_html_last_import_timestamp', REQUEST_TIME);

  // Results returns a list of node paths & titles.
  // Convert to something we can theme
  array_walk(
    $results,
    create_function('&$title, $link', '$title = array("href" => $link, "title" => url($link) . " : $title" );')
  );

  // Batch API 'finished' does not return us the profile context we were working with.
  // Assume it was the last one in effect - may be a race condition here.
  $profile = import_html_profile();
  if ($profile['create_menus']) {
    list($menu_parent, $menu_id) = explode(':', $profile['menu_parent_id']);
    $menu_details = t("You may find these pages listed under the !menu_reference menu", array('!menu_reference' => l($menu_parent, 'admin/structure/menu-customize/' . $menu_parent)));
  }
  $message = '<strong>Batch import completed</strong> in %duration. %count items processed (%average), !menu_details  : !links';
  $strings = array(
    '%duration' => format_interval($duration),
    '%count' => count($results),
    '%average' => count($results) ? format_interval($duration / count($results)) . ' per item' : "no time details",
    '!links' => theme('links', array('links' => array_values($results))),
    '!menu_details' => isset($menu_details) ? $menu_details : '',
  );
  import_html_debug($message, $strings, WATCHDOG_NOTICE);
  drupal_set_message(t($message, $strings));
  #dpm($results);
}

/**
 * Given a list of file (or folder) relative paths, set up a batch job for them
 * all
 * @return a list of things we have done, in a format similar to the normal
 * import result summary.
 *
 */
function import_html_batch_add_list_to_queue($path_list, $context) {
  import_html_debug("Queuing Batch process of %count selected items", array('%count' => count($path_list)), WATCHDOG_INFO );
  $results = array();
  if (!empty($path_list)) {
    $batch_instructions = import_html_import_files_batch_instructions($path_list, $context, 'import_html_import_file_batch_job');
    batch_set($batch_instructions);

    // Return a list of things we have done, so the caller function doesn't
    // confuse an empty return with an error.
    // Returns an array similar to that returned by import_html_import_file()
    // Used mainly for error checking and progress reporting.
    foreach ($path_list as $path) {
      $results[$path] = array(
        'type' => 'batch_job',
        'rel_path' => $path,
      );
    }
  }
  return $results;
}

/**
 * Implements hook_features_api().
 */
function import_html_features_api() {
  return array(
    'import_html_profile' => array(
      'name' => t('Import HTML settings'),
      'default_hook' => 'import_html_profile_defaults',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      // name of the function that will be provided by the features dump script
      // and when called will return the settings.
      'features_source' => TRUE,
      'file' => drupal_get_path('module', 'import_html') . '/import_html.features.inc',
    ),
    'import_html_content' => array(
      'name' => t('Import HTML content sources'),
      'default_hook' => 'import_html_content_defaults',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'features_source' => TRUE,
      'file' => drupal_get_path('module', 'import_html') . '/import_html.features.inc',
    ),
    'import_html_node' => array(
      'name' => t('Any node'),
      'default_hook' => 'import_html_node_defaults',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'features_source' => TRUE,
      'file' => drupal_get_path('module', 'import_html') . '/import_html.features.inc',
    ),
  );
}

/**
 * Discard any values that are the same as the expected defaults.
 * Just cleans up the export and removes redundancy to show the actual settings
 * that count.
 */
function import_html_profile_sanitize(&$profile, $module_name) {
  $default = import_html_profile_defaults();
  // un-localize any hard-coded path that looks like a reference to this module location
  $profile['translation_template'] = strtr($profile['translation_template'], array(drupal_get_path('module', $module_name) => '!module'));
  foreach ((array) $profile as $key => $value) {
    if ($value == $default[$key]) {
      unset($profile[$key]);
    }
  }
}


/**
 * CRUD for profile storage
 *
 * Function named for compatibility with ctools, features, autoloader etc
 */
function import_html_profile_save($profile) {
  $profile_id = $profile['profile_id'];
  $old_profile = import_html_profile_load($profile_id);
  $import_html_profiles = variable_get('import_html_profiles', array());

  // Clean up the profile data before saving
  $new_profile = array();

  // Trivial tidy-up.
  if (! empty($profile['file_storage_path'])) {
    $profile['file_storage_path'] = ensure_trailing_slash($profile['file_storage_path']);
  }

  // Pre-calculate this once so it doesn't have to happen a lot elsewhere.
  // Convert from a string (in the UI) to an array (internal).
  if (!empty($profile['default_document']) && is_string($profile['default_document'])) {
    $default_documents = explode(",", $profile['default_document']);
    $default_documents = array_map('trim', $default_documents);
    $profile['default_documents'] = $default_documents;
  }
  // Only known keys.
  $keys = array_keys(import_html_profile_defaults());
  foreach ($keys as $key) {
    // It's possible that some values are not relevant if modules
    // (path/taxonomy) are not enabled.
    // Doesn't hurt.
    if (isset($profile[$key])) {
      $new_profile[$key] = $profile[$key];
    }
  }

  $import_html_profiles[$profile_id] = $new_profile;
  variable_set('import_html_profiles', $import_html_profiles);
  return $new_profile;
}



/**
 * CRUD for profile storage
 *
 * Function named for compatibility with ctools, features, autoloader etc
 *
 * When loading, all possible default values will be filled in for us,
 * returning a full $profile definition.
 *
 * Returns NULL if asked for a profile that does not exist
 */
function import_html_profile_load($profile_id) {
  static $import_html_profiles;
  if (empty($import_html_profiles) || ! isset($import_html_profiles[$profile_id])) {
    $import_html_profiles = variable_get('import_html_profiles', array());
    // Ensure the latest defaults are set on it
    foreach ($import_html_profiles as $profile_id_loop => $profile) {
      $import_html_profiles[$profile_id_loop] += import_html_profile_defaults();
      // Validate the user to use still exists.
      if (isset($profile['import_user'])) {
        $users = user_load_multiple(array(), array('name' => $profile['import_user']));
        $user = array_shift($users);
        if (isset($user->uid) && is_numeric($user->uid)) {
          $import_html_profiles[$profile_id_loop]['import_uid'] = $user->uid;
        }
      }
    }
  }
  if (! isset($import_html_profiles[$profile_id])) {
    // import_html_debug("No such profile id %profile_id", array('%profile_id' => $profile_id), WATCHDOG_NOTICE);
    return NULL;
  }
  return $import_html_profiles[$profile_id];
}

/**
 * CRUD for profile storage
 */
function import_html_profile_load_all() {
  $import_html_profiles = variable_get('import_html_profiles', array());
  return $import_html_profiles;
}

/**
 * CRUD for profile storage
 *
 */
function import_html_profile_delete($profile_id) {
  $import_html_profiles = variable_get('import_html_profiles', array());
  unset($import_html_profiles[$profile_id]);
  variable_set('import_html_profiles', $import_html_profiles);

  // If it was the default, unset that also.
  if (import_html_current_profile_id() == $profile_id) {
    import_html_current_profile_id('');
  }
}

/**
 * Ctools/exportables API
 *
 * We can't use the ctools built-in method, construct it ourself.
 *
 * Returns PHP snippet representing a preset array
 */
function import_html_profile_export($myobj, $indent = '') {
  ctools_include('export');
  $identifier = 'import_html_profile';
  $output  = "<?php\n";
  $output  = "// import_html profile \n";
  $output .= "\$$identifier = " . ctools_var_export($myobj);
  $output .= "\n?>";

  return $output;
}

/**
 * Accessor for the current profile data
 *
 * Returns or sets the data in a named import_html_profile. The currently active
 * one if not explicitly defined. Profile will be padded with expected default
 * fields if not explicitly set (to assist upgrades)
 *
 * Effectively import_html_profile_load() and import_html_profile_save() in one.
 *
 * @param $profile If set, saves this data back to the saved settings. Pass FALSE to delete it.
 */
function import_html_profile($profile_id = NULL, $profile = NULL) {
  if (empty($profile_id)) {
    $profile_id = import_html_current_profile_id();
  }
  if (isset($profile)) {
    if (empty($profile)) {
      import_html_profile_delete($profile_id);
    }
    else {
      import_html_profile_save($profile);
    }
  }
  $profile = import_html_profile_load($profile_id);
  return $profile;
}
