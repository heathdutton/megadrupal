<?php

/**
 * @file Extra process to remove some troublesome markup before htmltidy runs
 *
 * Implementation  of HOOK_import_html_preprocess()
 */
function import_html_preprocess_cleanups_import_html_preprocess($profile, $raw_source) {
  // Overly verbose comments can trigger :
  //  Comment not terminated <!--- --- --- Company  in Entity,
  // so prevent that markup from firing - by making the comments legal.
  $comment_pattern = "@<!--(.*?)-->@s"; // s means dot carries over newlines also
  $raw_source = preg_replace_callback($comment_pattern, 'import_html_preprocess_cleanups_sanitize_comment', $raw_source);

  // aspx 'VIEWSTATE' is fucking fucking bullshit.
  // throw it away
  $raw_source = preg_replace('@<[^>]*name="__VIEWSTATE"[^>]*>@', '', $raw_source);

  return $raw_source;
}

/**
 * Replace any multiple "--" inside an html comment with "==" instead,
 * as they confues the XML parser when it's looking for the end of a comment.
 *
 * @param Array $matches
 */

function import_html_preprocess_cleanups_sanitize_comment($matches) {
  $matches[1] = preg_replace("@-+@", "==", $matches[1]);
  return '<!--' . $matches[1] . '-->';
}


/**
 * Publish some extra settings to display on the import_html config page
 *
 * This is a version of {module}_form_{formname}_alter
 *
 * Used to modify our import_html_profile_settings form and add extra
 * options to it
 */
function import_html_preprocess_cleanups_form_import_html_profile_settings_alter(&$form, $form_state) {
  $profile = $form['#profile'];

  $form['extraction']['import_html_preprocess_cleanups'] = array(
      '#type' => 'fieldset',
      '#title' => t('Structure preprocess cleanups'),
      '#tree' => TRUE,
      '#theme' => 'import_html_form_table',
      '#description' => t('
          Provide some XPath-based manipulations that should be done on the
          input document before data extraction occurs.

          <br/>This replacement will run on the parsed input DOM document,
          just after the XSL template has run, and
          before it has been absorbed into field values.
          <br/>
          This facility can be used to <ul>
          <li>REMOVE named divs that you don\'t want to process at all.
          Use this to remove things like embedded "back to top" links with
          cruddy little images, unwanted
          HRs and anorexic anchors, script tags or any messy placeholders.
          </li>
          <li>UNPACK named divs that you don\'t want in the result, but keep the
          contents. Use this if there is clutter in the element you\'ve
          selected that is difficult to avoid otherwise.</li>
          <li>SET ASIDE named elements that you don\'t want in the body of
           normal content, but may want to absorb in different ways.
           This could be used to identify a pullquote that is structurally
           found in the body text, but you want to add it as a stand-alone
           textarea within Drupal.
           If you "set aside" this element it will be removed from body text,
           but still be available for data mapping to a field using later scraping.
          </li>
          </ul>
          This process can also be done, with much more power,
          using the XSL import templates.
          This UI may help just eliminate a number
          of simple cases where the content being scraped has clutter you can
          clean up simply.
          <small>Conversely, much of the work that <em>used</em> to be done
          by custom XSL in the D4,D5,D6 versions of this module
          can now be configured here.</small>
          '),
      '#element_validate' => array('import_html_preprocess_cleanups_form_validate'),
  );
  $actions_options = array(
    'remove' => 'Delete this element entirely',
    'unpack' => 'Remove this wrapper element but leave the children behind',
    'set_aside' => 'Take this element out of normal content, but keep it in the data structure so it can be used if needed',
  );
  $replacements = $profile['import_html_preprocess_cleanups'];
  $replacements[] = array(
      'xpath' => '',
      'action' => FALSE,
  );
  foreach ($replacements as $i => $pattern) {
    $form['extraction']['import_html_preprocess_cleanups'][$i] = array(
      'xpath' => array(
        '#title' => t('XPath pattern'),
        '#type' => 'textfield',
        '#default_value' => $pattern['xpath'],
        '#description' => t("If creating an xpath that addresses a node by name directly, use the xhtml: prefix. eg <code>//xhtml:script</code> not just <code>//script</code>.<br/> This is required as internally the DOM representation uses strict namepaces (and I can't figure out how to get it to use a default namespace)"),
      ),
      'action' => array(
        '#title' => t('Action'),
        '#type' => 'select',
        '#options' => $actions_options,
        '#default_value' => $pattern['action'],
        '#description' => t("Submit the page if you want space for another rule."),
      ),
    );
  }
}

/**
 * Small validate function runs when settings are being saved
 *
 * Ensure we don't save EMPTY rules. They need to be ignored later if we leave
 * them in, and they multiply on the settings form
 * (which always adds a blank for us) if we don't clean up.
 * And it's just tidier.
 */
function import_html_preprocess_cleanups_form_validate($element, &$form_state, $form) {
  $values = $form_state['values']['import_html_preprocess_cleanups'];
  // Throw out any submitted rules that have blank xpaths.
  foreach ($values as $delta => $directive) {
    if (empty($directive['xpath'])) {
      unset($values[$delta]);
    }
  }
  form_set_value($element, $values, $form_state);
}

/**
 * hook_import_html_default_settings()
 *
 * Return an array defining the keys that settings need to save.
 * If we define a profile setting of our own, it needs to be listed here to be
 * serialized.
 */
function import_html_preprocess_cleanups_import_html_default_settings() {
  // One of the default cleanups should be to remove any stray <script> tags
  return array(
    'import_html_preprocess_cleanups' => array(
      array(
        'xpath' => '//script',
        'action' => 'remove',
      ),
    ),
  );
}

/**
 * Hook to run between loading the DOM and reading the DOM into node data.
 *
 * @param array $profile
 * @param DOM_Document $datadoc
 */
function import_html_preprocess_cleanups_import_html_preparse($profile, $datadoc) {
  import_html_debug(__FUNCTION__ . ' has a chance to tidy the DOM before data is read');

  foreach ($profile['import_html_preprocess_cleanups'] as $delta => $cleanup_rule) {
    if (empty($cleanup_rule['xpath'])) {
      // The UI may have an empty row.
      continue;
    }

    $found_elements = xml_query($datadoc, $cleanup_rule['xpath']);
    $count = $found_elements->length;
    import_html_debug("Running '{$cleanup_rule['action']}' on $count found element that matched {$cleanup_rule['xpath']}");
    // Removing things in a domnodelist throws out their index and misses things.
    // Need a temp array instead of the built-in iterator?
    #while ($found_element = $found_elements->item(0)) {
    $element_list = array();
    foreach ($found_elements as $found_element) {
      $element_list[] = $found_element;
    }
    foreach ($element_list as $found_element) {
      switch ($cleanup_rule['action']) {
        case 'remove' :
          // Just get rid of this element
          import_html_debug("Removing element due to preprocess_cleanups rule " . htmlspecialchars(xml_toString($found_element)));
          if (is_a($found_element, 'DOMAttr')) {
            $found_element->parentNode->removeAttributeNode($found_element);
          }
          else {
            $found_element->parentNode->removeChild($found_element);
          }
          break;
        case 'unpack' :
          $parent = $found_element->parentNode;
          import_html_debug(__FUNCTION__ . " Found an element matching {$cleanup_rule['xpath']} that needs unpacking. This wrapper will be stripped, Contents will be kept. Child count is " . $found_element->childNodes->length . '');
          // Scan the target element for children,
          // Shift those children into the parent one by one.
          // Remove the target.

          // Inverted logic here as direct manipulation of the DOM gets
          // confused when pulling things out of the list we are manipulating.
          // :-(
          // Pull out the last child, add it above myself.
          // Until there are no children left.
          $where_to_insert_before = $found_element;
          while ($lastchild = $found_element->lastChild) {
            #dpm('SHIFTING element CHILD ' . xml_toString($lastchild));
            // Ignore whitespace children. Because who cares?
            $val = trim(xml_toString($lastchild));
            if (empty($val)) {
              $found_element->removeChild($lastchild);
              continue;
            }
            $where_to_insert_before = $parent->insertBefore($lastchild, $where_to_insert_before);
          }
          $found_element->parentNode->removeChild($found_element);
          break;
        case 'set_aside' :
          // Put this element into another place in the DOM
          // It can still be found, but will not turn up in normal string extractions.
          // TODO.
          // Find the 'body' of the current document.
          // Add THIS as a child of that (it will be outside of the 'content' div)
          // and remove it from the original location.
          $bodies = xml_getOwnerDocument($datadoc)->getElementsByTagName('body');
          if ($body_element = $bodies->item(0)) {
            $body_element->appendChild($found_element);
          }
          else {
            import_html_debug("Strangely, the current doc has no body to add to");
          }
          break;
      }
    }
  }
}