<?php

/**
 * @file Extra process to scrape content based on xpath paterns
 *
 * If this is to work, it must run before field_import_html does,
 * as it scrapes data, but leaves the field utility to serialize it.
 *
 * Implementation  of HOOK_import_html()
 */
function import_html_scraping_rules_import_html($profile, &$node, $datadoc = NULL) {
  // Use each of the xpath rules and scan the document for a match.
  $scraping_rules = $profile['scraping_rules'];
  foreach ($scraping_rules as $i => $rule) {
    import_html_debug('Looking for the pattern %xpath', array('%xpath' => $rule['xpath']), WATCHDOG_DEBUG);
    $found = xml_query($datadoc, $rule['xpath']);
    foreach ($found as $found_element) {
      // Dump this into the local array of imported data.
      // Not directly on the node yet.
      // Individual modules will pull it out again, as they are the ones that
      // know how to serialize it.
      $value = xml_tostring($found_element, TRUE);
      if (! trim($value)) {
        continue;
      }
      import_html_debug('There was a match for the pattern %xpath - result is %value', array('%xpath' => $rule['xpath'], '%value' => $value), WATCHDOG_DEBUG);
      $node->import_html[$rule['destination']][] = $value;
    }
  }

  return;
}


/**
 * Publish some extra settings to display on the import_html config page
 *
 * This is a version of {module}_form_{formname}_alter
 *
 * Used to modify our import_html_profile_settings form and add extra
 * options to it
 */
function import_html_scraping_rules_form_import_html_profile_settings_alter(&$form, $form_state) {
  $profile = $form['#profile'];
  $entity_type = 'node';

  $form['extraction']['scraping_rules'] = array(
    '#type' => 'fieldset',
    '#title' => t('Data scraping rules'),
    '#description' => t('
      Extra patterns for pulling data out of the source pages.
    '),
    '#theme' => 'import_html_form_table',
    '#tree' => TRUE,
    '#element_validate' => array('import_html_scraper_rules_import_html_settings_form_validate'),
  );

  // Get a list of all rdf data fields that can be mapped to (any content type)
  // Combine all fields from field.module and all rdf mappings from core and rdfx
  // The preferred key value will be the rdf predicate, if available.
  // The field ID if not.
  $target_options = array();
  $target_options[''] = '<none>';
  $target_options['link_title'] = t('Menu link title');
  $managed_fields = array();
  // Informational extra info array
  $used_on = array();
  // RDF mapping option and info.
  if (module_exists('rdf')) {
    // Prepare a summary of rdf mappings.
    // - need to support all bundles (not just default)
    $entity_info = entity_get_info($entity_type);
    foreach ($entity_info['bundles'] as $bundle_id => $bundle_info) {
      $rdf_mapping = $bundle_info['rdf_mapping'];
      // Also non-rdf fields may be available on this entity type.
      foreach ($rdf_mapping as $field_id => $field_mapping) {
        if (isset($field_mapping['predicates'])) {
          foreach($field_mapping['predicates'] as $predicate) {
            $target_options[$predicate] = "$field_id [$predicate]";
            $used_on[$predicate][$bundle_id] = $bundle_id;
          }
          // Note that this field is managed via RDF.
          $managed_fields[$field_id] = $field_id;
        }
      }
    }
  }

  // Add additional unmapped fields
  // that haven't been mapped via rdf
  if (module_exists('field')) {
    $fields = field_info_fields();
    foreach ($fields as $field_id => $field_def) {
      // Create an informational list of node types this field is in use on.
      foreach ($field_def['bundles'] as $bundle_type => $entity_list) {
        foreach ($entity_list as $bundle_id) {
          $used_on[$field_id][$bundle_id] = $bundle_id;
        }
      }
      $description = $field_def['field_name'];
      // Only add this as a thing if it's NOT RDF managed.
      if (empty($managed_fields[$field_id])) {
        $target_options[$field_id] = $description;
      }
    }
  }

  // Add the used_on info to each field identifier.
  // Decorative only.
  foreach($target_options as $field_id => $label) {
    if (! empty($used_on[$field_id])) {
      $target_options[$field_id] .= " (used on " . @join(', ', @$used_on[$field_id]) . ')';
    }
  }

  $scraping_rules = $profile['scraping_rules'];
  #dpm(get_defined_vars());
  $scraping_rules[] = array(
    'xpath' => '',
    'destination' => FALSE,
  );
  foreach ($scraping_rules as $i => $rule) {
    $form['extraction']['scraping_rules'][$i] = array(
      'xpath' => array(
        '#title' => t('XPath pattern'),
        '#type' => 'textfield',
        '#default_value' => $rule['xpath'],
        '#description' => t("
           If creating an xpath that addresses a node by name directly,
           use the xhtml: prefix. eg //xhtml:script not just //script.
        "),
      ),
      'destination' => array(
        '#title' => t('Destination node property to map to'),
        '#type' => 'select',
        '#options' => $target_options,
        '#default_value' => $rule['destination'],
        '#description' => t("
           This is a list of node values that can have data inserted into them.
           For more control, configure the data types at !RDFx
        ", array(
          '!RDFx' => l('RDFx', 'admin/config/services/rdf/mappings')
        )),
      ),
    );
  }

}


/**
 * Small validate function runs when settings are being saved
 *
 * Ensure we don't save EMPTY rules. They need to be ignored later if we leave
 * them in, and they multiply on the settings form
 * (which always adds a blank for us) if we don't clean up.
 * And it's just tidier.
 */
function import_html_scraper_rules_import_html_settings_form_validate($element, &$form_state, $form) {
  $values = $form_state['values']['scraping_rules'];
  // Throw out any submitted rules that have blanks.
  foreach ($values as $delta => $directive) {
    if (empty($directive['xpath'])) {
      unset($values[$delta]);
    }
  }
  form_set_value($element, $values, $form_state);
}


/**
 * hook_import_html_default_settings()
 *
 * Return an array defining the keys that settings need to save.
 * If we define a profile setting of our own, it needs to be listed here to be
 * serialized.
 */
function import_html_scraping_rules_import_html_default_settings() {
  return array(
    'scraping_rules' => array(),
  );
}
