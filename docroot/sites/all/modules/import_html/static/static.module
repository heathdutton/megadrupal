<?php
/**
 * @file
 * Storage and retrieval of Drupal node content as plain HTML files
 *
 * Intent:
 *
 * Every time a Drupal node is saved, a corresponding file is updated. This
 * means that content can be retained even somethime in the future when the
 * database is unavailable.
 *
 * @see static_help.htm for details
 *
 * @author Dan Morrison http://coders.co.nz/
 *
 */

set_include_path( dirname(__FILE__) . '../coders_php_library' . PATH_SEPARATOR . get_include_path());

/**
 * @name Debug Flag
 * Used for testing only
 * @{
 */
if (! function_exists('debug')) {
  module_load_include('inc', 'static', 'coders_php_library/debug');
}
/**
 * @}
 */

module_load_include('inc', 'static', '../coders_php_library/xml-transform');
module_load_include('inc', 'static', '../coders_php_library/file-routines');
module_load_include('inc', 'static', '../coders_php_library/tidy-functions');


/**
 * Refresh behaviours.
 * Access the filesystem on save, on load, or on date check
 */
define("STATIC_PASSIVE", 1);
define("STATIC_AGGRESSIVE", 2);
define("STATIC_INTELLIGENT", 4);


/**
 * Return help text describing this module
 *
 * @param $section string Context this help is being called from
 * @return string
 */
function static_help($path, $arg) {
  $message = '';
  if (! extension_loaded( "dom" )) {
    $message = t(" <em>Static serialization requires PHP DOM support (a PHP5 extension) . This is currently unavailable, and static writing will not work.</em>");
  }
  $description = t("Synchonizes all nodes with filesystem files. <b>experimental</b>") . $message;

  switch ($path) {
    case 'admin/modules#description':
      return $description;
    case 'admin/modules/static':
      return $description;
    case 'admin/config/static':
      return $description;
    case 'admin/help#static':
      return $description . file_get_contents(dirname(__FILE__) . "/static_help.htm");
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function static_menu() {
  $items = array();
  $items['admin/config/media/static'] = array(
    'title' => 'Static HTML Settings',
    'description' => 'Configure where and how the static HTML pages are mirrored.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('static_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/media/static/settings'] = array(
    'title' => 'Static HTML Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Generate and deliver flat derivatives on demand
  $items['static/content'] = array(
    'title' => 'Generate static page style',
    'page callback' => 'static_generate_page',
    'access callback' => TRUE,
    'theme callback' => 'static_theme_callback',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * For the menu callback, return the bare theme to use when seializing the
 * vanilla pages.
 */
function static_theme_callback() {
  return 'stark';
}

/**
 * Display the options and settings.
 *
 * @return FAPI Form
 */
function static_settings($form, &$form_state) {
  $form = array();

  $form['static_file_storage_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Static file location'),
    '#default_value' => ensure_trailing_slash( variable_get('static_file_storage_path', file_default_scheme() . '://' . 'static/') ),
    '#description' => t("
      Where the static files are stored.
    "),
  );

  $form['static_synchronization_behaviour'] = array(
    '#type' => 'select',
    '#title' => t("Synchronization Behaviour"),
    '#default_value' => variable_get('static_synchronization_behaviour', STATIC_PASSIVE),
    '#options' => array(
      STATIC_PASSIVE => 'Write file on node save, never read',
      STATIC_AGGRESSIVE => 'Read file every node access, write when updating',
      STATIC_INTELLIGENT => 'Write on save, Read only if file time has changed',
    )  ,
    '#description' => t("
      How much reading and writing goes on. <ul>
      <li>If 'never read' is chosen, static HTML just acts as a backup, retrieval system for when your database becomes unavailable. Very solid future-proofing for your content. It also means there is no danger of your data structures (custom node types and features) getting messed with.</li>
      <li>If 'aggressive read/write' is chosen, you are using Drupal as an <em>interface</em> to what is effectively a filesystem-based website, as far as the node content is concerned.</li>
      <li>If intelligent read/write is chosen (optimal) this works under Drupal as normal, saving useful backups, <em>and</em> allowing third-party apps to update content at the same time. This is the clever option.</li>
      </ul>
      Either of the options that read from disk <em>may</em> have a hard time reconstructing a node object back from a flat file if it is anything beyond a standard 'page'. Certain details may be lost in the round-trip process.
    "),
  );

  $form['static_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node Types to apply to'),
    '#default_value' => variable_get('static_node_types', array()),
    '#options' => node_type_get_names(),
    '#description' => t("
          A list of node types you want to use with this module.
          All the selected types will be synchronized with static files.
    "),
  );

  $form['static_show_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show link to archive file on page'),
    '#default_value' => variable_get('static_show_link', FALSE),
  );

  $form['static_use_import_html_settings'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use import HTML processing'),
    '#default_value' => variable_get('static_use_import_html_settings', FALSE),
    '#description' => t("
          Static HTML is designed to read and write its own 'pure' XHTML files
          in a lowest-common-denominator, semantically tagged way.
          What comes in is expected to be the same as what goes out.
          <br/>
          However, it can also use the import_html translation pipeline on-the-fly.
          This would be useful if uploading or editing raw HTML files behind Drupals back.
          Doing so is likely to produce imperfect XHTML, so we must run the full import_html process each time such a file is read.
          This is the same as running a full import_html process on that file, using the xsl template and all the preferences currently set
          in the import_html settings.
          <br/>
          Enabling this may cause performance to suffer a bit, but the Synchronization Behaviour setting should cache the results for us.
    "),
    '#disabled' => (! module_exists('import_html')),
  );

  return system_settings_form($form);
}

/**
 * Check settings are valid. FAPI callback.
 */
function static_settings_form_validate($form, &$form_state) {
  // Ensure file path exists and is writable.
  if (!is_dir($form_state['values']['static_file_storage_path'])) {
    mkdir($form_state['values']['static_file_storage_path'], NULL, TRUE);
  }
  if (!is_writable($form_state['values']['static_file_storage_path'])) {
    form_set_error('static_file_storage_path', "Storage path is not writable");
  }
}

/**
 * Appends a reference to the cached/static version of a node when displaying it.
 *
 */
function static_link($type, $node) {
  if (static_node_applies($node)) {
    $filepath = static_node_path($node);

    if (file_create_path($filepath)) {
      $links[] = array(
        'title' => 'archive',
        'href' => file_create_url($filepath),
      );
    }
  }
  return $links;
}

/**
 * Return true if the admin has selected this node as participating in this
 * functionality.
 * Choose by node-type, or by virtue of a taxonomy classification (TODO)
 */
function static_node_applies($node) {
  $active_node_types = variable_get('static_node_types', array());
  if (!empty($active_node_types[$node->type])) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Implements hook_node_insert().
 */
function static_node_insert($node) {
  static_node_save($node);
}

/**
 * Implements hook_node_update().
 */
function static_node_update($node) {
  static_node_save($node);
}


/**
 * Save a serialized version of a node to file - if appropriate.
 */
function static_node_save(&$node) {
  if (! static_node_applies($node)) {
    return FALSE;
  }

  // Catch recursion. Loading a page can trigger an update,
  // with will in turn trigger a save.
  // Which updates the timestamp to make a load neccessary...
  static $already_doing_this;
  if ($already_doing_this[$node->nid . '-' . 'save']) {
    return FALSE;
  }
  $already_doing_this[$node->nid . '-' . 'save'] = TRUE;

  watchdog(__FUNCTION__, "Saving node as static HTML file ", array('!node' => l($node->title, 'node/' . $node->nid)));
  #dpm(array(__FUNCTION__ => $node));

  $html = static_path_to_html('node/' . $node->nid);
  if (! is_string($html)) {
    return FALSE;
    // Failure.
  }

  $filepath = static_node_path($node);
  watchdog(__FUNCTION__, "Saving node to file " . l($filepath, $filepath));

  $filedir = dirname($filepath);
  if (!$filedir) {
    trigger_error("static.module Trying to save a node with no path, this should never happen. Obviously the stars are mis-aligned.");
    return;
  }

  file_prepare_directory($filedir, FILE_CREATE_DIRECTORY);

  #file_move($file_new, $directory . $file_new->filename);

  if (!is_dir($filedir)) {
    trigger_error("directory '$filedir' doesn't exist and couldn't be created. This is really horrible news.", E_USER_WARNING);
    return FALSE;
  }
  $success = file_put_contents($filepath, $html);
  drupal_chmod($filepath);

  if ($success) {
    drupal_set_message(t("A static version of this page has been archived as !archive_link. That's pretty cool.", array('!archive_link' => l($filepath, file_create_url($filepath)))));
  }

  return $success;
}

/**
 * When loading a node, check the local filesystem to see if there is a file
 * version of this node newer than the last-modified date on the current
 * revision.
 *
 * If so, fill in the data by reading the dumped file.
 */
function static_node_load($nodes, $types) {
  // hook_node_load takes an array by default.
  // Pass this to individual version.
  foreach ($nodes as &$node) {
    _static_node_load($node);
  }
}

/**
 * When loading a node, check the local filesystem to see if there is a file
 * version of this node newer than the last-modified date on the current
 * revision.
 *
 * If so, fill in the data by reading the dumped file.
 */
function _static_node_load($node) {

  watchdog(__FUNCTION__, "Possibly loading node from static! !node", array('!node' => l($node->title, 'node/' . $node->nid)), WATCHDOG_DEBUG);
  if (! static_node_applies($node)) {
    return FALSE;
  }

  $behaviour = variable_get('static_synchronization_behaviour', STATIC_PASSIVE);
  if ($behaviour == STATIC_PASSIVE) {
    watchdog(__FUNCTION__, "Static HTML in passive mode when loading. Not doing anything.", array(), WATCHDOG_INFO);
    return FALSE;
  }
  $filepath = static_node_path($node);

  if (! is_file($filepath)) {
    watchdog(__FUNCTION__, "No static backup to retrieve", array(), WATCHDOG_INFO);
    return;
  }

  import_html_debug(t("Filesystem file was dated %fs_time while the database node is dated %db_time", array('%fs_time' => filectime( $filepath ), '%db_time' => $node->changed)));

  if (($behaviour == STATIC_INTELLIGENT) && ($node->changed >= filectime( $filepath ))) {
    // no recent change
     watchdog(__FUNCTION__, "No recent change in $filepath . Node time: $node->changed >= File time: " . filectime( $filepath ), array(), WATCHDOG_DEBUG);
    return;
  }

   watchdog(__FUNCTION__, "Loading node statically from " . $filepath, array(), WATCHDOG_DEBUG);

  // We should trust these files to be pure, no more validating or translating needed
  // HOWEVER
  // If reading from a non XHTML source (like raw XML)
  // extra processing (found in import_html) could be called here.
   $profile = import_html_profile_load(variable_get('static_use_import_html_profile', 'default'));

  if (variable_get('static_use_import_html_settings', FALSE)) {
    watchdog(__FUNCTION__, "Using import_html transformation to initialize node from raw HTML file " . $filepath, array(), WATCHDOG_INFO);

    module_load_include('inc', 'import_html', 'import_html_process');

    $nodes = import_html_process_html_page($filepath, $node->path_alias, $profile);
    $scanned_node = array_pop($nodes);
  }
  else {
    // trust the file is nice and tidy like we left it.
    $xmldoc = parse_in_xml_file($filepath, FALSE);
    if ($xmldoc) {
      $scanned_node = import_html_xhtml_to_node($xmldoc, $node, $profile);
    }
  }

  if ($scanned_node) {
    #dpm(array(__FUNCTION__ . " - middle"  => $scanned_node));

    // First do a rough over-write of all values
    #foreach ($scanned_node as $key => $val) {
    #  $node->$key = $val;
    #}

  }
  else {
    drupal_set_message(t("Failed to parse file from $filepath. It should contain info about this node."));
  }
dpm(get_defined_vars());

  return $node;
}


/**
 * Return the path to save a node as.
 *
 * However - should 'this/thing' end up as 'this/thing.htm'
 * or 'this/thing/index.htm' - as would be needed sometimes?
 * 'this/thing/' will always imply 'index.htm' is expected.
 *
 * For now it's valid (though unclear) for us to have
 *
 * this/thing.htm
 * this/thing/things_child.htm
 *
 * Which represents exactly the same thing as
 * this/thing/index.htm
 * this/thing/things_child.htm
 *
 * Filesystem can deal with this.
 */
function static_node_path($node) {
  $base = variable_get('static_file_storage_path', file_default_scheme() . '://' . 'static/');

  if (is_string($node)) {
    $path = $node;
  }
  else {
    $path = isset($node->path) ? $node->path['alias'] : 'node/' . $node->nid;
  }

  if (strrpos($path, '.') > strrpos($path, '/') ) {
    // Path has no suffix.
    // Check if it's looking like overwriting a directory.
    if (is_dir($base . $path)) {
      return $base . $path . '/' . variable_get('import_html_default_document', "index.htm");
    }
  }
  else if (strrpos($path, '/') == strlen($path) -1) {
    // Ends with a slash.
    return $base . $path . variable_get('import_html_default_document', "index.htm");
  }
  return $base . preg_replace('|\.[^\.\/]+$|', '', $path) . ".htm";
}

/**
 * Menu-based callback that will build and save a serialization of the node
 * expected to be at the named path.
 *
 * Calls to this from the site path /static/content/*
 */
function static_generate_page() {
  // Args are the actual path request we are proxying.
  $path = implode('/', func_get_args());

  #$router_item = menu_get_item($path);
  #$node = menu_get_object('node', 1, $path);
  #kpr(get_defined_vars());

  $html = static_path_to_html($path);
  // Now save it!

  $filepath = static_node_path($path);

  $filedir = dirname($filepath);
  if (!$filedir) {
    trigger_error("static.module Trying to save a node with no path, this should never happen. Obviously the stars are mis-aligned.");
    return;
  }
  file_prepare_directory($filedir, FILE_CREATE_DIRECTORY);
  if (!is_dir($filedir)) {
    trigger_error("directory '$filedir' doesn't exist and couldn't be created. This is really horrible news.", E_USER_WARNING);
    return FALSE;
  }
  $success = file_put_contents($filepath, $html);
  drupal_chmod($filepath);

  print($html);
  exit();

  return "BUILT $path";
}


/**
 * Given a path, return a clean HTML rendition of it.
 *
 * Does this by using the 'stark' theme and Drupal core to render, minus
 * everything but the body display of a node.
 *
 * @return a rendered string. Vanilla HTML.
 */
function static_path_to_html($path) {
  // When running menu_execute_active_handler, pretend we are anonymous.
  global $user;
  $real_user = $user;
  $user = drupal_anonymous_user();

  $path = drupal_get_normal_path($path);
  $return = menu_execute_active_handler($path, FALSE);
  $page = element_info('page');
  $page['#pre_render'][] = 'static_pre_render_page';
  $page['#post_render'][] = 'static_post_render_page';

  // @see drupal_render_page
  // Modules can add elements to $page as needed in hook_page_build().
  // These are where the meta head may be set.
  foreach (module_implements('page_build') as $module) {
    $function = $module . '_page_build';
    $function($page);
  }
  $page['content']['system_main'] = $return;

  // Modules alter the $page as needed. Blocks are populated into regions like
  // 'sidebar_first', 'footer', etc.
  $page['#static_render_mode'] = TRUE;
  drupal_alter('page', $page);

  // Content in the renderable array is all good,
  // but we also need to intercept the rendering to discard css stuff.
  // That's done in static_process_html()
  $result = drupal_render($page);

  $user = $real_user;

  #kpr(get_defined_vars());
  return $result;
}


/**
 * Remove block regions before they get rendered.
 */
function static_pre_render_page($element) {
  // Unset all regions but the content
  foreach (element_children($element) as $child_name) {
    if ($child_name != 'content') {
      unset($element[$child_name]);
      $element[$child_name] = array();
    }
  }
  #kpr(get_defined_vars());
  return $element;
}

/**
 * Nothing I can do here except regexp cleanup.
 * @param unknown_type $element
 */
function static_post_render_page($element) {
  #kpr(get_defined_vars());
  return $element;
}

/**
 * At this point I have a handle on $variables['page'] that is not available
 * in the 'process' pass.
 * I need to set a flag now to get picked up later.
 *
 * @param array $variables
 */
function static_preprocess_html(&$variables) {
  // Just copy this flag into a place it can be found again by the theme_wrapper.
  if (!empty($variables['page']['#static_render_mode'])) {
    $variables['static_render_mode'] = $variables['page']['#static_render_mode'];
  }
  #kpr(get_defined_vars());
}

/**
 * Discard some of the things that are normally added to pages.
 * Strip away css and js that the system may otherwise think you need.
 * These were added by template_process_html()
 *
 * @param unknown_type $variables
 */
function static_process_html(&$variables) {
  // @see template_process_html();

  if (!empty($variables['static_render_mode'])) {
    // The flag tells us to remove unwanted extras from the HTML markup.
    // Could not stop them being added, but I can remove them now, before
    // they are printed.
    // DO NOT WANT
#    $variables['page_top'] = NULL;
#    $variables['page_bottom'] = NULL;

    $variables['css'] = NULL;
    $variables['styles'] = NULL;
    $variables['scripts'] = NULL;
  }
}

/**
 * Discard some of the things that are normally added to pages.
 * Strip away css and js that the system may otherwise think you need.
 * These were added by template_process_html()
 *
 * @param unknown_type $variables
 */
function static_process_page(&$variables) {
  // @see template_process_html();
  if (!empty($variables['page']['#static_render_mode'])) {
    // The flag tells us to remove unwanted extras from the HTML markup.
    // Could not stop them being added, but I can remove them now, before
    // they are printed.
    // DO NOT WANT
    $variables['logo'] = NULL;
    $variables['site_name'] = NULL;

    // Fuck it. Throw away EVERYTHING
    foreach ($variables as $key => $val) {
      if ($key != 'page') {
        $variables[$key] = NULL;
      }
    }
  }
}


/**
 * Short callback function to serialize the node description (teaser) into
 * something worth saving.
 *
 * A static_html serialization callback.
 * @param The Source Node Object
 * @param The XHTML Document this value is to be inserted into. Modify by
 * reference
 *
 * @return If set, add the value as a META in the header of the document. If no
 * return, assume the $doc has been updated as required, eg by adding an element
 * to the body.
 */
function static_serialize_description($node = NULL, &$doc = NULL) {
  return strip_tags($node->teaser);
}

/**
 * Implements hook_install().
 */
function static_install() {
  // Ensure this always runs AFTER core stuff has done its nodeapi;
  // path_nodeapi('load') for example needs to have run before we call load.
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("UPDATE {system} SET weight = 3 WHERE name = 'static'") */
  db_update('system')
    ->fields(array(
      'weight' =>  3,
    ))
    ->condition('name', 'static')
    ->execute();

  drupal_set_message(t("Static HTML has been enabled. This module will keep a plaintext, updated version of your nodes on the file system, once you have configured the storage policies in <a href='!static_settings_link'>the static settings page</a>>", array('!static_settings_link' => '/admin/settings/static') ));
}
