<?php

/**
 * Implements hook_entity_info().
 */
function commerce_shipping_rate_entity_info() {
  $return = array(
    'commerce_shipping_rate' => array(
      'label' => t(
        'Commerce shipping Rate', array(), array('context' => 'a shipping rate relative to a shipping service')
      ),
      'controller class' => 'DrupalCommerceEntityController',
      'base table' => 'commerce_shipping_rate',
      'load hook' => 'commerce_shipping_rate_load',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'rate_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'rate' => array(
          'label' => t('Generic Rate', array(), array('context' => 'a generic rate relative to a shipping service')),
          'admin' => array(
            'path' => 'admin/commerce/config/shipping/shipping-rates',
            'real path' => 'admin/commerce/config/shipping/shipping-rates',
            'access arguments' => array('administer commerce_shipping_rate entities'),
          ),
        ),
      ),
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
        'customer' => array(
          'label' => t('Customer'),
          'custom settings' => FALSE,
        ),
      ),
      'token type' => 'commerce-shipping-rate',
      'metadata controller class' => '',
      'access callback' => 'commerce_entity_access',
      'access arguments' => array('administer commerce_shipping_rate entities'),
      'permission labels' => array(
        'singular' => t('shipping rate'),
        'plural' => t('shipping rates'),
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_menu().
 */
function commerce_shipping_rate_menu() {
  $items = array();
  // Shipping services links.
  $items['admin/commerce/config/shipping/shipping-rates'] = array(
    'title' => 'Shipping rates',
    'page callback' => 'commerce_shipping_rate_views_embed_view',
    'page arguments' => array(
      'shipping_rates_manage',
      'default',
    ),
    'access callback' => 'commerce_entity_access',
    'access arguments' => array(
      'view',
      NULL,
      NULL,
      'commerce_shipping_rate',
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/commerce_shipping_rate.pages.inc',
  );


  foreach (commerce_shipping_methods() as $method_id => $method) {
    // Convert underscores to hyphens for the menu item argument.
    $method_name_arg = strtr($method_id, '_', '-');
    $items['admin/commerce/config/shipping/shipping-rates/' . $method_name_arg] = array(
      'title' => $method['title'],
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'commerce_shipping_rates_services_overview',
      'access arguments' => array('administer commerce_shipping_rate entities'),
      'page arguments' => array(
        $method_id,
      ),
      'file' => 'includes/commerce_shipping_rate.pages.inc',
    );

    foreach (commerce_shipping_services($method_id) as $service_name => $shipping_service) {
      // Convert underscores to hyphens for the menu item argument.
      $service_name_arg = 'shipping-rates' . '-' . strtr($service_name, '_', '-');
      $admin_base_url = 'admin/commerce/config/shipping/shipping-rates/' . $method_name_arg . '/' . $service_name_arg;
      // Shipping services links.
      $items[$admin_base_url] = array(
        'title' => $shipping_service['title'],
        'page callback' => 'commerce_shipping_rate_views_embed_view',
        'page arguments' => array(
          'shipping_rates',
          'default',
          $method_id,
          $service_name,
        ),
        'access callback' => 'commerce_entity_access',
        'access arguments' => array(
          'view',
          NULL,
          NULL,
          'commerce_shipping_rate',
        ),
        'type' => MENU_NORMAL_ITEM,
        'weight' => 0,
        'file' => 'includes/commerce_shipping_rate.pages.inc',
      );

      // Shipping service rate Create Link.
      $items[$admin_base_url . '/add'] = array(
        'title' => 'add a rate',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
          'commerce_shipping_rate',
          commerce_shipping_rate_new($method_id, $service_name),
        ),
        'access callback' => 'commerce_entity_access',
        'access arguments' => array(
          'create',
          commerce_shipping_rate_new($method_id, $service_name),
          NULL,
          'commerce_shipping_rate',
        ),
        'type' => MENU_LOCAL_ACTION,
        'weight' => 1,
        'file' => 'includes/commerce_shipping_rate.forms.inc',
      );
    }
  }

  $items['admin/commerce/config/shipping/shipping-rates/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/commerce/config/shipping/shipping-rates/add'] = array(
    'title' => 'Add',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'commerce_shipping_rates_methods_overview',
    'access arguments' => array('administer commerce_shipping_rate entities'),
    'file' => 'includes/commerce_shipping_rate.pages.inc',
  );


  $items['admin/commerce/config/shipping/shipping-rates/import'] = array(
    'title' => 'Import',
    'description' => 'Import rates of shipping services.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_shipping_rate_import_form'),
    'access arguments' => array('administer commerce_shipping_rate entities'),
    'file' => 'includes/commerce_shipping_rate.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $tab_root = 'admin/commerce/config/shipping/shipping-rates/manage/%commerce_shipping_rate';
  $tab_root_arg_pos = 6;
  $items[$tab_root] = array(
    'title callback' => 'commerce_shipping_rate_title',
    'title arguments' => array($tab_root_arg_pos),
    'page callback' => 'commerce_shipping_rate_view_rate_wrapper',
    'page arguments' => array($tab_root_arg_pos),
    'access callback' => 'commerce_entity_access',
    'access arguments' => array('view', $tab_root_arg_pos, NULL, 'commerce_shipping_rate'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Shipping rate Read, Update, Delete Link.
  $items[$tab_root . '/view'] = array(
    'title' => 'view',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'weight' => 1,
    'tab_root' => $tab_root,
  );

  $items[$tab_root . '/edit'] = array(
    'title' => 'edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_shipping_rate', $tab_root_arg_pos),
    'access callback' => 'commerce_entity_access',
    'access arguments' => array(
      'update',
      $tab_root_arg_pos,
      NULL,
      'commerce_shipping_rate',
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/commerce_shipping_rate.forms.inc',
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'tab_root' => $tab_root,
    'weight' => 2,
  );

  $items[$tab_root . '/delete'] = array(
    'title' => 'delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'commerce_shipping_rate_delete_rate_form',
      $tab_root_arg_pos,
    ),
    'access callback' => 'commerce_entity_access',
    'access arguments' => array(
      'delete',
      $tab_root_arg_pos,
      NULL,
      'commerce_shipping_rate',
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/commerce_shipping_rate.forms.inc',
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'tab_root' => $tab_root,
    'weight' => 3,
  );
  return $items;
}

/**
 * Implements hook_forms().
 */
function commerce_shipping_rate_forms($form_id, $args) {
  $forms['commerce_shipping_rate'] = array(
    'callback' => 'commerce_shipping_rate_form',
  );

  return $forms;
}

/**
 * Implements hook_permission().
 */
function commerce_shipping_rate_permission() {
  return commerce_entity_access_permissions('commerce_shipping_rate');
}

/**
 * Returns an initialized shipping_flexibility_rate object.
 *
 * @param string $method_id
 *   The shipping service method id.
 * @param string $service_name
 *   The uid of the owner of the order.
 * @param string $bundle
 *   Bundle name of commerce_shipping_rate entity type.
 *
 * @return mixed
 *   A shipping_flexibility_rate object with all default fields initialized.
 */
function commerce_shipping_rate_new($method_id, $service_name, $bundle = 'rate') {
  if (!array_key_exists($service_name, commerce_shipping_services()) ||
      !array_key_exists($method_id, commerce_shipping_methods())) {
    return FALSE;
  }

  return entity_create('commerce_shipping_rate',
    array(
      'rate_id' => '',
      'name' => $service_name,
      'method' => $method_id,
      'type' => $bundle,
      'min_weight' => '',
      'max_weight' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    )
  );
}

/**
 * Saves a shipping service rate.
 *
 * @param stdClass $commerce_shipping_rate
 *   The full shipping rate object to save.
 *
 * @return int
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_shipping_rate_save($commerce_shipping_rate) {
  return entity_save('commerce_shipping_rate', $commerce_shipping_rate);
}

/**
 * Loads a shipping service rate by id.
 *
 * @param int|string $rate_id
 *   The primary identifier of a rate.
 *
 * @return object
 *   The fully loaded rate object.
 */
function commerce_shipping_rate_load($rate_id) {
  return entity_load_single('commerce_shipping_rate', $rate_id);
}

/**
 * Loads multiple service rates.
 *
 * @param array $rate_ids
 *   An array of rate_id
 * @param array $conditions
 *   An array of conditions to filter loaded rates by on the
 *   {commerce_shipping_rate} table in the form 'field' => $value.
 * @param bool $reset
 *   Whether to reset the internal rate loading cache.
 */
function commerce_shipping_rate_load_multiple($rate_ids, $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_shipping_rate', $rate_ids, $conditions, $reset);
}

/**
 * Deletes a shipping service rate.
 *
 * @param int|string $rate_id
 *   The primary identifier of a rate.
 */
function commerce_shipping_rate_delete($rate_id) {
  return entity_delete('commerce_shipping_rate', $rate_id);
}

/**
 * Deletes multiple shipping service rates.
 *
 * @param array $rates_ids
 *   An array of rate_id.
 */
function commerce_shipping_rate_delete_multiple($rates_ids) {
  return entity_delete_multiple('commerce_shipping_rate', $rates_ids);
}

/**
 * Return a fully loaded commerce_shipping_rate based on a weight parameter.
 *
 * @param string $method_id
 *   The shipping service method id.
 * @param string $service_name
 *   The shipping service name.
 * @param array $weight
 *   A weight array:
 *   - unit: the weight unit (kg, oz...).
 *   - weight: total weight.
 *
 * @return mixed
 *   A fully loaded commerce_shipping_rate. Empty array if an error is found.
 */
function commerce_shipping_get_rate_by_weight($method_id, $service_name, $weight) {
  if (!isset($weight['weight']) ||
      !array_key_exists($service_name, commerce_shipping_services()) ||
      !array_key_exists($method_id, commerce_shipping_methods())) {
    return array();
  }

  $min_weight_unit = _commerce_shipping_rate_get_field_weight_unit('shipping_rate_min_weight');
  $max_weight_unit = _commerce_shipping_rate_get_field_weight_unit('shipping_rate_max_weight');

  $min_weight = $weight['weight'];
  if ($min_weight_unit != $weight['unit']) {
    $converted_weight = physical_weight_convert($weight, $min_weight_unit);
    $min_weight = $converted_weight['weight'];
  }

  $max_weight = $weight['weight'];
  if ($max_weight_unit != $weight['unit']) {
    $converted_weight = physical_weight_convert($weight, $max_weight_unit);
    $max_weight = $converted_weight['weight'];
  }

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'commerce_shipping_rate')
  ->propertyCondition('name', $service_name, '=')
  ->propertyCondition('method', $method_id, '=')
  ->fieldCondition('shipping_rate_min_weight', 'weight', $weight['weight'], '<')
  ->fieldCondition('shipping_rate_max_weight', 'weight', $weight['weight'], '>=')
  ->range(0, 1);

  $result = $query->execute();

  if (isset($result['commerce_shipping_rate'])) {
    $result = commerce_shipping_rate_load(key($result['commerce_shipping_rate']));
  }

  return $result;
}

/**
 * Get the unit of a specific field.
 *
 * @param string $field_name
 *   The field name.
 * @return string
 *   The weight unit used for this field instance.
 */
function _commerce_shipping_rate_get_field_weight_unit($field_name) {
  $units = &drupal_static(__FUNCTION__, array());

  if (!isset($units[$field_name])) {
    $infos = field_info_instance('commerce_shipping_rate', $field_name, 'rate');
    $settings = $infos['widget']['settings'];
    $units[$field_name] = $settings['default_unit'];
  }

  return $units[$field_name];
}

/**
 * Title callback: Returns the title of a commerce_shipping_rate entity type.
 *
 * @param object $commerce_shipping_rate
 *   A fully loaded commerce_shipping_rate object.
 *
 * @return string
 *   The menu title
 */
function commerce_shipping_rate_title($commerce_shipping_rate) {
  return t('Rate @rate_id', array("@rate_id" => $commerce_shipping_rate->rate_id));
}

/**
 * Wrapper callback: Display a commerce_shipping_rate object.
 *
 * @param object $commerce_shipping_rate
 *   A fully loaded commerce_shipping_rate object.
 *
 * @return array
 *   Returns a renderable array to display a commerce_shipping_rate
 *   object.
 */
function commerce_shipping_rate_view_rate_wrapper($commerce_shipping_rate) {
  return entity_view('commerce_shipping_rate', array($commerce_shipping_rate->rate_id => $commerce_shipping_rate), 'full');
}

/**
 * Implements hook_views_api().
 */
function commerce_shipping_rate_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_shipping_rate') . '/includes/views',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_shipping_rate_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $field = $form['#field'];
  if ($field['field_name'] != 'shipping_rate_min_weight' &&
      $field['field_name'] != 'shipping_rate_max_weight') {
    return;
  }
  $form['instance']['widget']['settings']['unit_select_list']['#value'] = FALSE;
  $form['instance']['widget']['settings']['unit_select_list']['#access'] = FALSE;

  $count = db_query('SELECT COUNT(rate_id) FROM {commerce_shipping_rate}')->fetchField();
  if ($count) {
    $form['instance']['widget']['settings']['#access'] = FALSE;
  }
}

/**
 * Helper function to parse CSV from a string or a file.
 *
 * @param array $lines
 *   Data lines to parse and validate
 *
 * @return array
 *   The data array to be saved or the error array.
 */
function _commerce_shipping_rate_import_parse_data($lines) {
  $data = array();
  $shipping_methods = commerce_shipping_methods();
  $shipping_services = commerce_shipping_services();

  foreach ($lines as $delta => $line) {
    // Sanitize the line value.
    $line = filter_var($line, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_LOW);

    // If line is empty, put the cursor on the next iteration.
    if (empty($line)) {
      continue;
    }

    // Stores found values per line.
    $data[$delta] = str_getcsv($line, ',', '"', '\\');

    $shipping_method_id = trim($data[$delta][0]);
    $number_of_values = count($data[$delta]);
    if ($number_of_values != 5) {
      $error = array(
        'delta' => $delta,
        'message' => t('Incorrect number of values : %number_of_values, expect 5 values (method, service, min-weight, max-weight, price)', array('%number_of_values' => $number_of_values)),
     );
      break;
    }
    if (!array_key_exists($shipping_method_id, $shipping_methods)) {
      $error = array(
        'delta' => $delta,
        'message' => t('Unknow shipping method %shipping_method_id', array('%shipping_method_id' => $shipping_method_id)),
      );
      break;
    }

    $shipping_service_name = trim($data[$delta][1]);


    if (!array_key_exists($shipping_service_name, $shipping_services)) {
      $error = array(
        'delta' => $delta,
        'message' =>
          t(
            'Unknow %shipping_method_title shipping service %shipping_service_name',
            array(
              '%shipping_method_title' => $shipping_methods[$shipping_method_id]['title'],
              '%shipping_service_name' => $shipping_service_name
            )
           ),
      );
      break;
    }
  }

  return isset($error) ? $error : $data;
}

/**
 * Helper function to import rates from CSV.
 *
 * @param array $lines
 *   Data lines to write.
 *
 * @return bool
 *   Returns true if no errors have been raised, false otherwise.
 */
function _commerce_shipping_rate_import_save_data($lines) {
  $default_currency = commerce_currency_load();
  $code = $default_currency['code'];

  foreach ($lines as $line) {
    try {
      $min_weight_unit = _commerce_shipping_rate_get_field_weight_unit('shipping_rate_min_weight');
      $max_weight_unit = _commerce_shipping_rate_get_field_weight_unit('shipping_rate_max_weight');
      $commerce_shipping_rate = commerce_shipping_rate_new(trim($line[0]), trim($line[1]));
      $commerce_shipping_rate->changed = $commerce_shipping_rate->created = REQUEST_TIME;
      $commerce_shipping_rate->shipping_rate_min_weight = array(
        'und' => array(
          array(
            'weight' => (float) trim($line[2]),
            'unit' => $min_weight_unit,
          ),
        ),
      );
      $commerce_shipping_rate->shipping_rate_max_weight = array(
        'und' => array(
          array(
            'weight' => (float) trim($line[3]),
            'unit' => $max_weight_unit,
          ),
        ),
      );
      $commerce_shipping_rate->shipping_rate_price = array(
        'und' => array(
          array(
            'amount' => (int) (commerce_currency_decimal_to_amount(trim($line[4]), $code)),
            'currency_code' => $code,
          ),
        ),
      );

      commerce_shipping_rate_save($commerce_shipping_rate);
    }
    catch (ErrorException $e) {
      drupal_set_message($e->getMessage(), 'error');

      return FALSE;
    }
  }

  return TRUE;
}
