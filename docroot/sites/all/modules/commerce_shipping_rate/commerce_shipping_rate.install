<?php

/**
 * @file
 * Defines the database schema for SoColissimo Flexibility rates.
 */

/**
 * Implements hook_schema().
 */
function commerce_shipping_rate_schema() {
  $schema = array();

  $schema['commerce_shipping_rate'] = array(
    'description' => 'Stores information about Shipping services rates.',
    'fields' => array(
      'rate_id' => array(
        'description' => 'Primary identifier for a rate.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine-name of the shipping service.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'method' => array(
        'description' => 'The machine-name of the shipping method.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The type of this rate.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the rate was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the rate was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('rate_id'),
    'indexes' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}


/**
 * Implements hook_install().
 */
function commerce_shipping_rate_install() {
  $field = array(
    'field_name' => 'shipping_rate_price',
    'type' => 'commerce_price',
    'cardinality' => 1,
    'entity_types' => array('commerce_shipping_rate'),
    'translatable' => FALSE,
    'locked' => TRUE,
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'shipping_rate_min_weight',
    'type' => 'physical_weight',
    'cardinality' => 1,
    'entity_types' => array('commerce_shipping_rate'),
    'translatable' => FALSE,
    'locked' => FALSE,
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'shipping_rate_max_weight',
    'type' => 'physical_weight',
    'cardinality' => 1,
    'entity_types' => array('commerce_shipping_rate'),
    'translatable' => FALSE,
    'locked' => FALSE,
  );
  field_create_field($field);

}

/**
 * Implements hook_uninstall().
 */
function commerce_shipping_rate_uninstall() {
  commerce_delete_instances('commerce_shipping_rate', 'rate');
  commerce_delete_field('shipping_rate_price');
  commerce_delete_field('shipping_rate_min_weight');
  commerce_delete_field('shipping_rate_max_weight');
}

/**
 * Implements hook_modules_enabled().
 */
function commerce_shipping_rate_modules_enabled($modules) {
  $entity_type = 'commerce_shipping_rate';
  $bundle = 'rate';
  $t = get_t();

  field_info_cache_clear();

  if (!field_info_instance($entity_type, 'shipping_rate_min_weight', $bundle)) {
    $instance = array(
      'field_name' => 'shipping_rate_min_weight',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $t('Minimun weight'),
      'required' => FALSE,
      'default_value' => array(array('weight' => 0)),
      'settings' => array(),
      'widget' => array(
        'type' => 'physical_weight_textfield',
        'weight' => 1,
        'settings' => array(
          'default_unit' => 'kg',
          'unit_select_list' => FALSE,
        ),
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

  if (!field_info_instance($entity_type, 'shipping_rate_max_weight', $bundle)) {
    $instance = array(
      'field_name' => 'shipping_rate_max_weight',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $t('Maximum weight'),
      'required' => TRUE,
      'default_value' => array(array('weight' => 0)),
      'settings' => array(),
      'widget' => array(
        'type' => 'physical_weight_textfield',
        'weight' => 2,
        'settings' => array(
          'default_unit' => 'kg',
          'unit_select_list' => FALSE,
        ),
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

  if (!field_info_instance($entity_type, 'shipping_rate_price', $bundle)) {
    $instance = array(
      'field_name' => 'shipping_rate_price',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $t('Rate amount'),
      'required' => TRUE,
      'settings' => array(),
      'widget' => array(
        'type' => 'commerce_price_simple',
        'weight' => 10,
        'settings' => array(
          'currency_code' => 'default',
        ),
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

}
