<?php
/**
 * @file
 * A module which allows deleting more revisions at once
 *
 * More specificly whenever a user is deleting a revision,
 * the system will provide a checkbox to delete all prior revisions as well.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function node_revision_bulk_delete_form_node_revision_delete_confirm_alter(&$form, &$form_state, $form_id) {
  $revisions = node_revision_bulk_delete__get_previous_revisions($form['#node_revision']->nid, $form['#node_revision']->vid);
  $revisions_before = $revisions['revisions_before'];
  if (count($revisions_before) > 0) {
    $form['revision_list'] = array(
      '#type' => 'fieldset',
      '#title' => t('Delete prior revisions'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['revision_list']['delete_prior_revisions'] = array(
      '#type' => 'checkbox',
      '#title' => t('Also delete %revs_no revisions prior to this one.', array('%revs_no' => count($revisions_before))),
    );

    $headers = array(
      t('Revision ID'),
      t('Title'),
      t('Date'),
    );
    foreach ($revisions_before as $rev) {
      $rows[] = array(
        $rev->vid,
        $rev->title,
        format_date($rev->timestamp),
      );
    }
    $form['revision_list']['table_markup'] = array(
      '#markup' => theme("table", array(
        'header' => $headers,
        'rows' => $rows,
        )
      ),
    );
    $form['#submit'][] = 'node_revision_bulk_delete_submit_callback';
  }
}

/**
 * Extra submit callback for the revision deletion form.
 */
function node_revision_bulk_delete_submit_callback(&$form, &$form_state) {
  if ($form_state['values']['delete_prior_revisions'] == 1) {
    $revisions = node_revision_bulk_delete__get_previous_revisions($form['#node_revision']->nid, $form['#node_revision']->vid);
    $revisions_before = $revisions['revisions_before'];
    $all_deleted = FALSE;
    if (count($revisions['revisions_remaining']) == 1) {
      $all_deleted = TRUE;
    }
    batch_set(node_revision_bulk_delete__batch_op(array_keys($revisions_before), $form['#node_revision']->nid, $all_deleted));
  }
}

/**
 * Batch operation defition: deleting prior revisions.
 */
function node_revision_bulk_delete__batch_op($revisions, $nid, $all_deleted = FALSE) {
  drupal_set_message(t('Deleting previous revisions'));
  foreach ($revisions as $revision) {
    $operations[] = array('node_revision_bulk_delete__batch_delete_revision', array($revision));
  }
  if ($all_deleted == TRUE) {
    $operations[] = array('node_revision_bulk_delete__batch_redirect_node_view', array($nid));
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'node_revision_bulk_delete__batch_op_finished',
    'file' => drupal_get_path('module', 'node_revision_bulk_delete') . '/node_revision_bulk_delete.batch.inc',
  );
  return $batch;
}

/**
 * Getting previous revisions for a node.
 */
function node_revision_bulk_delete__get_previous_revisions($nid, $currently_deleted_revision_id) {
  $node = node_load($nid);
  $all_revisions = node_revision_list($node);
  if (!isset($all_revisions[$currently_deleted_revision_id])) {
    $all_revisions[$currently_deleted_revision_id] = array();
    krsort($all_revisions);
  }
  $revisions_before = array_slice($all_revisions, array_search($currently_deleted_revision_id, array_keys($all_revisions)) + 1, NULL, TRUE);
  $revisions_remaining = array_slice($all_revisions, 0, array_search($currently_deleted_revision_id, array_keys($all_revisions)), TRUE);
  return array(
    'revisions_before' => $revisions_before,
    'revisions_remaining' => $revisions_remaining,
  );
}
