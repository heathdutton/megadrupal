<?php

/**
 * @file
 * Provides pakkelabels functionality.
 */

module_load_include('inc', 'pakkelabels', 'pakkelabels.field');

use Pakkelabels\Pakkelabels;
use Pakkelabels\Exception\Pakkelabels_Exception;

/**
 * Implements hook_menu().
 */
function pakkelabels_menu() {
  $items = array();

  $items['admin/commerce/orders/%commerce_order/pakkelabels'] = array(
     'title' => 'Pakkelabels.dk',
     'page callback' => 'pakkelabels_pagecallback',
     'page arguments' => array(3),
     'access arguments' => array('create shipment label with pakkelabels'),
     'type' => MENU_LOCAL_TASK,
     'weight' => 10,
     'parent' => 'admin/commerce/orders/%commerce_order',
   );

   $items['admin/commerce/orders/%commerce_order/pakkelabels/pdf'] = array(
     'title' => 'Pakkelabels.dk',
     'page callback' => 'pakkelabels_pdf_pagecallback',
     'page arguments' => array(3),
     'access arguments' => array('create shipment label with pakkelabels'),
     'type' => MENU_LOCAL_TASK,
     'weight' => 30,
     'parent' => 'admin/commerce/orders/%commerce_order',
  );

  $items['admin/config/services/pakkelabels'] = array(
    'title' => 'Pakkelabels.dk',
    'description' => 'Manage Pakkelabels.dk settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pakkelabels_admin_settings'),
    'access arguments' => array('administer pakkelabels'),
    'file' => 'pakkelabels.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_confirm().
 */
function pakkelabels_create_shipment_confirm($form, &$form_state, $order) {
  $form['order_id'] = array('#type' => 'value', '#value' => $order->order_id);

  if (variable_get('pakkelabels_testmode') == 'true') {
    $form['testmode'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="messages warning">' . t('The integration with Pakkelabels.dk is in <strong>testing</strong> mode.') . '</div>',
    );
  } else {
    $form['testmode'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="messages status">' . t('The integration with Pakkelabels.dk is in <strong>production</strong> mode.') . '</div>',
    );
  }

  if (pakkelabels_create_shipment_directly()) {

    $options = array('pdk' => 'PostDanmark', 'gls' => 'GLS');
    $form['shipping_provider'] = array(
      '#type' => 'select',
      '#title' => t('Shipping provider'),
      '#options' => $options,
      '#default_value' => 'pdk',
      '#description' => t('Shipping provider to handle the shipment.'),
    );
    $options = array('true' => 'Yes', 'false' => 'No');
    $form['delivery'] = array(
      '#type' => 'select',
      '#title' => t('Delivery'),
      '#options' => $options,
      '#default_value' => 'true',
      '#description' => t('Whether or not the shipment should be delivered to the address (Yes) or to a pickup point (No).'),
    );
    $form['weight'] = array(
      '#type' => 'textfield',
      '#title' => t('Package weight in grams'),
      '#required' => TRUE,
      '#default_value' => '',
      '#description' => t('The weight of the package in grams'),
    );
  }
  return confirm_form($form,
    t('Are you sure you want to make a shipment label for order @id?', array('@id' => $order->order_id)),
    'admin/commerce/orders/' . $order->order_id,
    t('Are you sure you want to make a shipment label for order @id in Pakkelabels.dk?', array('@id' => $order->order_id)),
    t('Create the shipment label'),
    t('Cancel')
  );
}

/**
 * Whether to create the shipment directly or as a template.
 */
function pakkelabels_create_shipment_directly() {
  return (variable_get('pakkelabels_create_mode') == 'direct');
}

/**
 * Implements hook_confirm_submit().
 */
function pakkelabels_create_shipment_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $order = commerce_order_load($form_state['values']['order_id']);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    if (pakkelabels_create_shipment_directly()) {
      if ($pakkelabels_shipment_id = pakkelabels_create_shipment($order, $form_state['values']['shipping_provider'], $form_state['values']['weight'], $form_state['values']['delivery'])) {
        $message = t('Successfully made a shipment label order @order_id as shipment id @shipment_id', array('@order_id' => $order->order_id, '@shipment_id' => $order_wrapper->pakkelabels_shipment_id->value()));
      }
      else {
        $message = t('An error occured while trying to create a shipment label for order @order_id as shipment id @shipment_id', array('@order_id' => $order->order_id, '@shipment_id' => $order_wrapper->pakkelabels_shipment_id->value()));
      }
    }
    else {
      if ($pakkelabels_shipment_id = pakkelabels_create_shipment($order)) {
        $message = t('Successfully made a shipment label order @order_id as shipment id @shipment_id', array('@order_id' => $order->order_id, '@shipment_id' => $order_wrapper->pakkelabels_shipment_id->value()));
      }
      else {
        $message = t('An error occured while trying to create a shipment label for order @order_id as shipment id @shipment_id', array('@order_id' => $order->order_id, '@shipment_id' => $order_wrapper->pakkelabels_shipment_id->value()));
      }
    }

    watchdog('pakkelabels', $message);
    drupal_set_message($message);
  }
}

/**
 * Implements hook_confirm_validate().
 */
function pakkelabels_create_shipment_confirm_validate($form, &$form_state) {
  if (pakkelabels_create_shipment_directly()) {
    if (!is_numeric($form_state['values']['weight']) OR $form_state['values']['weight'] <= 0) {
      form_set_error('weight', t('Not a valid weight.'));
    }
    if (!in_array($form_state['values']['shipping_provider'], array('pdk', 'gls'))) {
      form_set_error('shipping_provider', t('Not a valid shipping provider'));
    }
    if (!in_array($form_state['values']['delivery'], array('true', 'false'))) {
      form_set_error('delivery', t('Not a valid delivery status'));
    }
  }
}

/**
 * Page call back.
 */
function pakkelabels_pagecallback($order) {
  // Initiate API Client. Validates page.
  try {
    $label = pakkelabels_get_api_client();
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return '<p>' . t('Please review the !link', array('!link' => l(t('settings for pakkelabels'), 'admin/config/services/pakkelabels'))) . '.</p>';
  }

  /** @var EntityDrupalWrapper $wrapper */
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Order state should be higher at least checkout complete.
  // @todo: Support a method to alter these states (for systems like ERPAL.)
  if (in_array($wrapper->get('state')->value(), array('cart', 'checkout'))) {
    return t('Order @order_id has order status "@status" and could not get a shipment label.', array('@order_id' => $order->order_id, '@status' => $wrapper->state->value()));
  }

  // If the order does not have an shipment ID, set up form to create remote shipment.
  $shipment_id = $wrapper->get('pakkelabels_shipment_id')->value();
  if (!$shipment_id) {
    if (pakkelabels_create_shipment_directly()) {
      $balance = $label->balance();
      if ($balance < 100) {
        drupal_set_message(t('Currently you only have @amount DKK left in your account on Pakkelabels.dk.', array('@amount' => $label->balance())), 'warning');
      }
      else {
        drupal_set_message(t('Currently you have @amount DKK left in your account on Pakkelabels.dk.', array('@amount' => $label->balance())), 'status');
      }
    }
    return drupal_get_form('pakkelabels_create_shipment_confirm', $order);
  }

  $shipments = $label->shipments(array('order_id' => $order->order_id));
  if (empty($shipments['shipment_count']) OR $shipments['shipment_count'] == 0) {

    // Imported shipment.
    $output = '<p>' . t('Order @order_id has been granted the following imported shipment id !shipment_id in Pakkelabels.dk.', array(
      '@order_id' => $order->order_id,
      '!shipment_id' => $wrapper->pakkelabels_shipment_id->value()
    )) . '</p>';
    $output .= '<p>' . t('!link', array('!link' => l(t('Buy from Pakkelabels.dk'), 'https://app.pakkelabels.dk/main/app/#/shipping-labels'))) . '</p>';
  }
  else {
    // Link for the PDF version when using regular shipments.
    $link = 'admin/commerce/orders/' . $order->order_id . '/pakkelabels/pdf';

    // Regular shipment. Outcommented as we default to imported shipment.
    $output = '<p>' . t('Order @order_id has the following shipment label id !shipment_id in Pakkelabels.dk.', array(
      '@order_id' => $order->order_id,
      '!shipment_id' => l($wrapper->pakkelabels_shipment_id->value(), $link)
    )) . '</p>';
    $output .= '<p>' . t('!link', array('!link' => l(t('Shipment label'), $link))) . '</p>';
  }
  return array(
    '#markup' => $output,
  );
}

/**
 * Page call back.
 */
function pakkelabels_pdf_pagecallback($order) {
  // Initiate API Client. Not actually used, but validates page.
  // @todo: Should this maybe be part of an access callback to just 403?
  try {
    $label = pakkelabels_get_api_client();
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return '<p>' . t('Please review the !link', array('!link' => l(t('settings for pakkelabels'), 'admin/config/services/pakkelabels'))) . '.</p>';
  }

  /** @var EntityDrupalWrapper $wrapper */
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  try {
    $base64 = $label->pdf($wrapper->pakkelabels_shipment_id->value());
  } catch (Pakkelabels_Exception $e) {
    drupal_set_message(t('Exception: ') . $e->getMessage(), 'warning');
    return array('#markup' => '<p>' . t('The shipment could not be found. You have probably created it as an imported shipment label.') . '</p>');
  }
  $pdf = base64_decode($base64);
  header('Content-type: application/pdf');
  header('Content-Disposition: inline; filename="label.pdf"');
  echo $pdf;
  drupal_exit();
}

/**
 * Implements hook_libraries_info().
 */
function pakkelabels_libraries_info() {
  $libraries = array();
  $libraries['pakkelabels-php'] = array(
    'name' => 'pakkelabels',
    'vendor url' => 'https://github.com/discimport/pakkelabels-dk',
    'version' => 'master',
    'xautoload' => 'pakkelabels_xautoload_libraries_callback'
  );
  return $libraries;
}

/**
 * XAutoload callback.
 *
 * Closure's cannot be serailized. Having this as an anonymous function is
 * causing some grief when libraries info is cached.
 *
 * @param \Drupal\xautoload\Adapter\LocalDirectoryAdapter $adapter
 */
function pakkelabels_xautoload_libraries_callback($adapter) {
  $adapter->composerJson('composer.json');
}

/**
 * Implements hook_permission().
 */
function pakkelabels_permission() {
  return array(
    'create shipment label with pakkelabels' => array(
    'title' => t('use pakkelabels.dk'),
    'description' => t('Make it possible to create shipment labels using Pakkelabels.dk'),
    ),
    'administer pakkelabels' => array(
    'title' => t('administer pakkelabels.dk'),
    'description' => t('Administer Pakkelabels.dk settings'),
    ),
  );
}

/**
 * Implements hook_field_access().
 */
function pakkelabels_field_access($op, $field, $entity_type, $entity, $account) {
  $fields = array('shipment');
  foreach ($fields as $name) {
    if ($field['field_name'] == 'pakkelabels_' . $name . '_id') {
      // Only allow admins to edit field value.
      return user_access('administer pakkelabels', $account);
    }
  }
  return TRUE;
}

/**
 * Get a Pakkelabels object
 *
 * Object for communication with the the Pakkelabels.dk server.
 *
 * @throws Exception
 * @return Pakkelabels
 */
function pakkelabels_get_api_client() {
  $library = libraries_detect('pakkelabels-php');
  if ($library['installed']) {
    libraries_load('pakkelabels-php');

    if (!variable_get('pakkelabels_api_key', '') OR !variable_get('pakkelabels_api_user', '')) {
      // @todo: Provide link to admin settings form.
      throw new Exception(t('You must set an user and an API key in order to use Pakkelabels.dk', array()));
    }

    try {
      return new Pakkelabels(variable_get('pakkelabels_api_user', ''), variable_get('pakkelabels_api_key', ''));
    } catch (Pakkelabels_Exception $e) {
      throw $e;
    }
  }
  else {
    throw new Exception(t('Pakkelabels.dk PHP-SDK library not installed'));
  }
}

/**
 * Creates an shipment label in Pakkelabels.dk.
 *
 * @param object $order Drupal Commerce Order Object
 *
 * @return string pakkelabels Shipment ID
 */
function pakkelabels_create_shipment($order, $shipping_provider = 'pdk', $weight = 1000, $delivery = 'true') {
  $label = pakkelabels_get_api_client();

  /** @var EntityDrupalWrapper $wrapper */
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  /** @var EntityDrupalWrapper $shipping_profile */
  $shipping_profile = $wrapper->get('commerce_customer_shipping');

  /** @var EntityDrupalWrapper $customer_profile */
  $customer_profile = entity_metadata_wrapper('commerce_customer_profile', $shipping_profile->profile_id->value());

  $address = $customer_profile->get('commerce_customer_address')->value();

  // Name normalization.
  if (!$address['name_line']) {
    $address['name_line'] = $address['first_name'] . ' ' . $address['last_name'];
  }

  // Phone isn't something handled by Commerce by default.
  // This could be part of the Billing profile.
  /** @var EntityDrupalWrapper $billing_profile */
  $billing_profile = $wrapper->get('commerce_customer_billing');

  /** @var EntityDrupalWrapper $billing_customer_profile */
  $billing_customer_profile = entity_metadata_wrapper('commerce_customer_profile', $billing_profile->profile_id->value());

  $phone = '';
  if ($billing_customer_profile->__isset('field_customer_phone')) {
    $phone = $billing_customer_profile->get('field_customer_phone')->value();
  }

  // Create the shipment.
  $data = array(
    'shipping_agent' => $shipping_provider,
    'weight' => $weight,
    'order_id' => $order->order_id,
    'receiver_name' => $address['name_line'],
    'receiver_address1' => $address['thoroughfare'],
    'receiver_zipcode' => $address['postal_code'],
    'receiver_city' => $address['locality'],
    'receiver_country' => $address['country'],
    'receiver_email' => $order->mail,
    'receiver_mobile' => $phone,
    'sender_name' => variable_get('pakkelabels_sender_name', ''),
    'sender_address1' => variable_get('pakkelabels_sender_address', ''),
    'sender_zipcode' => variable_get('pakkelabels_sender_zipcode', ''),
    'sender_city' => variable_get('pakkelabels_sender_city', ''),
    'sender_country' => variable_get('pakkelabels_sender_countrycode', ''),
    'sender_email' => variable_get('pakkelabels_sender_email', ''),
    'delivery' => $delivery,
    'test' => variable_get('pakkelabels_testmode', 'true'), // Change to false when going live
  );

  if (pakkelabels_create_shipment_directly()) {
    // By default we are creating imported shipments.
    $shipment = $label->create_shipment($data);
  }
  else {
    // By default we are creating imported shipments.
    $shipment = $label->create_imported_shipment($data);
  }

  // Imported shipment.
  if (!empty($shipment['id'])) {
    $id = $shipment['id'];
    // Save id to the entity.
    $wrapper->get('pakkelabels_shipment_id')->set($id);
    $wrapper->save();
  }
  // Regular shipment paid right away.
  else if (!empty($shipment['shipment_id']) AND $shipment['shipment_id'] > 0) {
    // [shipment_id] => 0000 [order_id] => 0000 [pkg_no] => 00000000000000000000

    $id = $shipment['shipment_id'];

    // Save id to the entity.
    $wrapper->get('pakkelabels_shipment_id')->set($id);
    $wrapper->save();
  }
  // Testing shipment.
  else if (!empty($shipment['shipment_id']) AND $shipment['shipment_id'] == '0000') {
    $id = $shipment['shipment_id'];
    drupal_set_message(t('Test label has been created successfully. You cannot see it anywhere at the moment though.'), 'status');
  }

  return $id;
}
