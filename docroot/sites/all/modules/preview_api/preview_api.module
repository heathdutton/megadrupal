<?php
/**
 * @file
 * Preview API Drupal Hooks and API functions.
 */

/**
 * Implements hook_boot().
 */
function preview_api_boot() {
  // required to be included in an early bootstrap so that then have the opportunity to use hook_url_inbound_alter().
}

/**
 * Implements hook_views_api().
 */
function preview_api_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'preview_api') . '/views',
  );
}

/**
 * Implements hook_node_access().
 */
function preview_api_node_access($node, $op, $account) {
  if ($op == 'view') {
    $data = is_preview_api();
    if ($data && $data['nid'] == $node->nid) {
      $node_current_revision = node_load($node->nid);
      $is_current_revision = $node_current_revision->vid == $node->vid;
      if (!$is_current_revision && isset($data['vid']) && $data['vid'] != $node->vid) {
        return NODE_ACCESS_IGNORE;
      }
      return NODE_ACCESS_ALLOW;
    }
  }
}

/**
 * Implements hook_url_inbound_alter().
 */
function preview_api_url_inbound_alter(&$path, $origional, $language) {
  if ($path && $data = preview_api_process_path($path)) {
    is_preview_api($data);
    drupal_alter('preview_api_path', $path, $data);
  }
}

/**
 * Implements hook_preview_api_path_alter().
 */
function preview_api_preview_api_path_alter(&$path, $data) {
  if ($data['nid']) {
    $path = 'node/' . $data['nid'] . '/revisions/' . $data['vid'] . '/view';
    //$path = 'node/' . $data['nid'];
  }
}

function preview_api_create_path($data) {
  $node = node_load($data['nid'], $data['vid']);
  $node->title = $test_string = variable_get('preview_api_pathauto_safe_string', 'preview-api-pathauto-safe-test');

  $drupal_internal_path = 'node/' . 1;
  module_load_include('inc', 'pathauto');
  $path = pathauto_create_alias('node', 'return', $drupal_internal_path, array('node' => $node), $node->type);

  $pos = strpos($path, $test_string);

  $len = strlen($test_string);
  $prefix = substr($path, 0, $pos);
  $suffix = substr($path, $pos + $len);
  $marker = _preview_api_marker();
  $token = _preview_api_get_token($prefix, $data, $suffix);

  return $prefix . $marker . $token . drupal_json_encode($data) . $marker . $suffix;
}

function preview_api_url($data) {
  $url = array(
    'path' => preview_api_create_path($data),
    'options' => array(
      'query' => variable_get('preview_api_query', array()),
    ),
  );

  $base_url = variable_get('preview_api_base_url', FALSE);
  if ($base_url) {
    $url['path'] = $base_url . $url['path']; 
    $url['options']['external'] = TRUE;
  }

  return $url;
}

function _preview_api_marker() {
  return variable_get('preview_api_marker', '_____PREVIEW_URL_____');
}

function _preview_api_get_token($prefix, $data, $suffix) {
  $marker = _preview_api_marker();
  $data = drupal_json_encode($data);
  $path = trim($prefix . $marker . $data . $marker . $suffix);
  $token = drupal_hmac_base64($path, drupal_get_private_key() . drupal_get_hash_salt());
  return $token;
}

function preview_api_process_path($path) {
  $marker = _preview_api_marker();
  $parts = explode($marker, $path);

  if (!$parts || count($parts) < 3) {
    return FALSE;
  }
  $incoming_token = substr($parts[1], 0, 43);
  $data = drupal_json_decode(substr($parts[1], 43));

  if (!$data || !is_array($data)) {
    return FALSE;
  }
  $trusted_token = _preview_api_get_token($parts[0], $data, $parts[2]);
  if ($incoming_token != $trusted_token) {
    return FALSE;
  }

  return $data;
}

function is_preview_api($data = FALSE) {
  static $d = FALSE;
  if ($data) {
    $d = $data;
  }
  return $d;
}
