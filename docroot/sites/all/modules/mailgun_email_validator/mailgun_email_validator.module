<?php
/**
 * @file
 * Module file for Mailgun Email Validator.
 */

/**
 * Implements hook_help().
 */
function mailgun_email_validator_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mailgun_email_validator':
      $output = '';
      $output = '<p>Check for Open SSL extension enabled.</p>
      <p><strong>Configure Email field widget : </strong></p>
      <ul>
        <li>Install <a href="https://www.drupal.org/project/email" title="Email"
          rel="nofollow">Email</a> field Module.
        </li>
        <li>Create cck field for email using email widget.</li>
        <li>While creating the field, Mailgun email validator enable checkbox will
          be provided within Field setting form.
        </li>
        <li>Enabling Mailgun email validator will validate email widget field,if
          invalid email is entered Mailgun will provide you with suggested email
          address right below your email field.
        </li>
      </ul>
      <p>
        <strong>Configure Webform email field : </strong>
      </p>
      <ul>
        <li>Install <a href="https://www.drupal.org/project/webform" title="Webform"
          rel="nofollow">Webform</a> Module.
        </li>
        <li>Create webform and add email field.</li>
        <li>While creating the field, Mailgun email validator enable checkbox will
          be provided within webform component setting form.
        </li>
        <li>Enabling Mailgun email validator will validate email widget field,if
          invalid email is entered Mailgun will provide you with suggested email
          address right below your email field.
        </li>
      </ul>
      <h3 id="project-usage">Usage</h3>
      <p>To enable a form to validate textfield for email, simply set <code>#mailgun_email</code>
        in the form array to <code>TRUE</code>.
      </p>
      <div class="codeblock">
        <pre><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br>&nbsp; $form</span><span
          style="color: #007700">[</span><span style="color: #DD0000">\'custom_email\'</span><span
          style="color: #007700">] = array(<br>&nbsp;&nbsp;&nbsp; </span><span
          style="color: #DD0000">\'#title\' </span><span style="color: #007700">=&gt; </span><span
          style="color: #0000BB">t</span><span style="color: #007700">(</span><span
          style="color: #DD0000">\'Email Address\'</span><span
          style="color: #007700">),<br>&nbsp;&nbsp;&nbsp; </span><span
          style="color: #DD0000">\'#type\' </span><span style="color: #007700">=&gt; </span><span
          style="color: #DD0000">\'textfield\'</span><span
          style="color: #007700">,<br>&nbsp;&nbsp;&nbsp; </span><span
          style="color: #DD0000">\'#description\' </span><span
          style="color: #007700">=&gt; </span><span
          style="color: #0000BB">t</span><span style="color: #007700">(</span><span
          style="color: #DD0000">\'Custom Mailgun Email Validator Textfield.\'</span><span
          style="color: #007700">),<br>&nbsp;&nbsp;&nbsp; </span><span
          style="color: #DD0000">\'#mailgun_email\' </span><span
          style="color: #007700">=&gt; </span><span style="color: #0000BB">TRUE</span><span
          style="color: #007700">,<br>&nbsp; );<br></span><span
          style="color: #0000BB">?&gt;</span></span></code></pre>
      </div>
      <p>Example can be found at ' . l(t('mailgun_email_validator_example'), 'mailgun_email_validator_example') . ' .</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function mailgun_email_validator_permission() {
  return array(
    'administer mailgun detail' => array(
      'title' => t('Administer mailgun email validator'),
      'description' => t('Allow users to change the settings of the mailgun email validator module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mailgun_email_validator_menu() {
  $items = array();
  $items['admin/config/services/mailgun'] = array(
    'title' => 'Mailgun Email Validator',
    'description' => 'Helps to set the credential for mailgun api.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_email_validator_credential_form'),
    'access arguments' => array('administer mailgun detail'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['mailgun_email_validator_example'] = array(
    'title' => 'Mailgun Email Validator Example',
    'description' => 'Mailgun Email Validator custom form textfield validation example.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_email_validator_custom_field_example'),
    'access arguments' => array('administer mailgun detail'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Callback for Mailgun credential form.
 */
function mailgun_email_validator_credential_form() {
  $form = array();
  $form['mailgun_signup'] = array(
    '#markup' => l(t('Log into Mailgun for the api key.'), 'https://mailgun.com/sessions/new', array('attributes' => array('target' => '_blank'))),
  );
  $form['mailgun_email_validator_apikey'] = array(
    '#title' => t('Mailgun Api Public-key'),
    '#description' => t('Please enter mailgun api public-key.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('mailgun_email_validator_apikey', ''),
  );
  return system_settings_form($form);
}

/**
 * Callback for Mailgun Email Validator Custom field example.
 */
function mailgun_email_validator_custom_field_example() {
  $form = array();
  $form['custom_name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
  );
  $form['custom_email'] = array(
    '#title' => t('Email Address'),
    '#type' => 'textfield',
    '#description' => t('Custom Mailgun Email Validator Textfield.'),
    '#mailgun_email' => TRUE,
  );
  $form['custom_submit'] = array(
    '#title' => t('Submit'),
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function mailgun_email_validator_field_widget_form_alter(&$element, &$form_state, $context) {
  if (module_exists('email')) {
    if ($context['field']['type'] == 'email') {
      $element[$context['field']['type']]['#element_validate'] = array('mailgun_email_validator_validate_email_field');
      // Attached css on the form.
      $element['#attached']['css'] = array(
        drupal_get_path('module', 'mailgun_email_validator') . '/css/mailgun_email_validator.css',
      );
    }
  }
}

/**
 * Callback function for mailgun validation api.
 */
function mailgun_email_validator_api($email) {
  // Collecting Credential for Mailgun Api.
  $apikey = variable_get('mailgun_email_validator_apikey');
  // Http request to mailgun http api.
  $url = 'https://api:' . $apikey . '@api.mailgun.net/v2/address/validate?address=' . strtolower($email);
  $raw_response = drupal_http_request($url);
  return $raw_response;
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailgun_email_validator_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Validation for Email Field Widget.
  if (module_exists('email')) {
    if ($form['#instance']['widget']['type'] == 'email_textfield') {
      $form['field']['enable_mailgun_' . $form['#field']['field_name']] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Mailgun Validation'),
        '#default_value' => (isset($form['#field']['enable_mailgun_' . $form['#field']['field_name']])) ? $form['#field']['enable_mailgun_' . $form['#field']['field_name']] : 0,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailgun_email_validator_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {
  // Validation for Webform email field component.
  if (module_exists('webform')) {
    // Adding setting field for enabling mailgun validation.
    if ($form['type']['#value'] == 'email') {
      $webform = array();
      if (isset($form['#node']) && !empty($form['#node'])) {
        $webform = $form['#node']->webform;
      }
      $form['extra']['mailgun_enable'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Mailgun Validation'),
        '#description' => t('Check this option to enable mailgun validation.'),
        '#default_value' => (isset($webform['components'][$form['cid']['#value']]) && !empty($webform['components'][$form['cid']['#value']])) ? $webform['components'][$form['cid']['#value']]['extra']['mailgun_enable'] : 0,
        '#weight' => 1,
      );
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function mailgun_email_validator_form_alter(&$form, &$form_state, $form_id) {
  // Validation for Webform email field component.
  if (module_exists('webform')) {
    // Adding element validtion callback.
    if (strpos($form_id, 'webform_client_form_') === 0) {
      // Attached css on the form.
      $form['#attached']['css'] = array(
        drupal_get_path('module', 'mailgun_email_validator') . '/css/mailgun_email_validator.css',
      );
      if (isset($form['#node']) && !empty($form['#node'])) {
        foreach ($form['#node']->webform['components'] as $component) {
          if ($component['type'] == 'email') {
            if (isset($component['extra']['mailgun_enable']) && !empty($component['extra']['mailgun_enable'])) {
              if ($component['extra']['mailgun_enable'] == 1) {
                $form['submitted'][$component['form_key']]['#element_validate'] = array('mailgun_email_validator_validate_webform_field');
              }
            }
          }
        }
      }
    }
  }
  // Validation for Custom textfield validation.
  $have_email = FALSE;
  foreach ($form as &$element) {
    if (is_array($element) && !empty($element['#mailgun_email']) && $element['#type'] == 'textfield') {
      $element['#element_validate'] = array('mailgun_email_validator_validate_custom_email_field');
      $have_email = TRUE;
    }
  }
  if ($have_email) {
    // Attached css on the form.
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'mailgun_email_validator') . '/css/mailgun_email_validator.css',
    );
  }
}

/**
 * Validate callback for email module field.
 */
function mailgun_email_validator_validate_email_field($element, &$form_state, &$form) {
  $field_info = field_info_field($element['#field_name']);
  // Using default entity langauge.
  if (isset($element['#entity']) && !empty($element['#entity'])) {
    $entity_language = $element['#entity']->language;
  }
  else {
    $entity_language = LANGUAGE_NONE;
  }
  if (isset($field_info['enable_mailgun_' . $element['#field_name']]) && !empty($field_info['enable_mailgun_' . $element['#field_name']])) {
    if ($field_info['enable_mailgun_' . $element['#field_name']] == 1) {
      if (isset($form_state['values'][$element['#field_name']][$entity_language]) && !empty($form_state['values'][$element['#field_name']][$entity_language])) {
        foreach ($form_state['values'][$element['#field_name']][$entity_language] as $delta => $field) {
          if (isset($field['email']) && !empty($field['email'])) {
            if (valid_email_address(trim($field['email']))) {
              $email = $field['email'];
              // Calling mailgun email validation callback function.
              $raw_response = mailgun_email_validator_api($email);
              if ($raw_response->code == "200") {
                $response_data = filter_xss($raw_response->data);
                $response = drupal_json_decode($response_data);
                if ($response['is_valid'] == FALSE) {
                  if (isset($response['did_you_mean']) && !empty($response['did_you_mean'])) {
                    $form[$element['#field_name']][$entity_language][$delta]['#suffix'] = '<div class="mailgun_suggest"><span class="did_you_mean">' . t('Did you mean') . '</span> : <span class="mailgun_address">' . check_plain($response['did_you_mean']) . '</span></div>';
                  }
                  form_set_error($element['#field_name'] . '][' . $entity_language . '][' . $delta, t('"%mail" is not a valid email address', array('%mail' => $email)));
                }
              }
              else {
                drupal_set_message(t("Mailgun Api doesn't seem to be responding, please configure the !mailgun api-key", array('!mailgun' => l(t('Mailgun'), 'admin/config/services/mailgun'))), 'warning');
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Validate callback for webform email field.
 */
function mailgun_email_validator_validate_webform_field($element, &$form_state, &$form) {
  $field = $element['#webform_component']['form_key'];
  $email = $form_state['values']['submitted'][$field];
  if (isset($email) && !empty($email)) {
    // Calling mailgun email validation callback function.
    $raw_response = mailgun_email_validator_api($email);
    if ($raw_response->code == "200") {
      $response_data = filter_xss($raw_response->data);
      $response = drupal_json_decode($response_data);
      if ($response['is_valid'] == FALSE) {
        if (isset($response['did_you_mean']) && !empty($response['did_you_mean'])) {
          $form['submitted'][$field]['#field_suffix'] = '<div class="mailgun_suggest"><span class="did_you_mean">' . t('Did you mean') . '</span> : <span class="mailgun_address">' . check_plain($response['did_you_mean']) . '</span></div>';
        }
        form_error($element, t('"%mail" is not a valid email address', array('%mail' => $email)));
      }
    }
    else {
      drupal_set_message(t("Mailgun Api doesn't seem to be responding, please configure the !mailgun api-key", array('!mailgun' => l(t('Mailgun'), 'admin/config/services/mailgun'))), 'warning');
    }
  }
}

/**
 * Validate callback for custom textfield.
 */
function mailgun_email_validator_validate_custom_email_field($element, &$form_state, &$form) {
  $email_address = $form_state['values'][$element['#name']];
  if (isset($email_address) && !empty($email_address)) {
    if (!valid_email_address($email_address)) {
      form_set_error($element['#name'], t('"%mail" is not a valid email address', array('%mail' => $email_address)));
    }
    else {
      // Calling mailgun email validation callback function.
      $raw_response = mailgun_email_validator_api($email_address);
      if ($raw_response->code == "200") {
        $response_data = filter_xss($raw_response->data);
        $response = drupal_json_decode($response_data);
        if ($response['is_valid'] == FALSE) {
          if (isset($response['did_you_mean']) && !empty($response['did_you_mean'])) {
            $form[$element['#name']]['#suffix'] = '<div class="mailgun_suggest"><span class="did_you_mean">' . t('Did you mean') . '</span> : <span class="mailgun_address">' . check_plain($response['did_you_mean']) . '</span></div>';
          }
          form_set_error($element['#name'], t('"%mail" is not a valid email address', array('%mail' => $email_address)));
        }
      }
      else {
        drupal_set_message(t("Mailgun Api doesn't seem to be responding, please configure the !mailgun api-key", array('!mailgun' => l(t('Mailgun'), 'admin/config/services/mailgun'))), 'warning');
      }
    }
  }
}
