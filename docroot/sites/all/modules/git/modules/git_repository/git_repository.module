<?php
/**
 * @file
 *  Git repository module
 */

/**
 * Implements hook_entity_info().
 */
function git_repository_entity_info() {
  $info = array();

  $info['git_repository'] = array(
    'module' => 'git',
    'label' => t('Git Repository'),
    'entity class' => 'GitRepository',
    'controller class' => 'GitControllerExportable',
    'features controller class' => 'GitFeaturesController',
    'base table' => 'git_repository',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'load hook' => 'git_repository_load',
    'fieldable' => FALSE,
    'static cache' => TRUE,
    'configuration' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'bundle' => 'bundle',
      'id' => 'rid',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'bundle',
    ),
    'bundles' => array(
      'repository' => array(
        'label' => 'Repository',
        'admin' => array(
          'path' => 'admin/structure/git/repository/manage',
          'access arguments' => array('administer git repositories'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Git Repository'),
        'custom settings' =>  FALSE,
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function git_repository_menu() {
  $items = array();

  $items['admin/config/development/git/repositories'] = array(
    'title' => 'Repositories',
    'description' => 'Manage git repositories.',
    'page callback' => 'git_repositories_list',
    'access arguments' => array('administer git repositories'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'git_repository.admin.inc',
  );
  $items['git/repository/add'] = array(
    'title' => 'Add new repository',
    'access arguments' => array('administer git repositories'),
    'page callback' => 'git_repository_edit',
    'file' => 'git_repository.admin.inc',
  );
  $items['git/repository/%git_repository'] = array(
    'title' => 'View',
    'access arguments' => array('administer git repositories'),
    'page callback' => 'git_repository_view',
    'page arguments' => array(2),
    'file' => 'git_repository.admin.inc',
  );
  $items['git/repository/%git_repository/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['git/repository/%git_repository/edit'] = array(
    'title' => 'Edit',
    'access arguments' => array('administer git repositories'),
    'page callback' => 'git_repository_edit',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'git_repository.admin.inc',
  );
  $items['git/repository/%git_repository/delete'] = array(
    'title' => 'Delete',
    'access arguments' => array('administer git repositories'),
    'page callback' => 'git_repository_delete',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'git_repository.admin.inc',
    'weight' => 50,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function git_repository_admin_paths() {
  $paths = array(
    'git/repository/add' => TRUE,
    'git/repository/*' => TRUE,
    'git/repository/*/edit' => TRUE,
    'git/repository/*/delete' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function git_repository_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/config/development/git/repositories') {
    // Add action link to 'git/repository/add' on 'admin/config/development/git/repositories' page.
    $item = menu_get_item('git/repository/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function git_repository_permission() {
  $permissions['administer git repositories'] = array(
    'title' => t('Administer git repositories'),
  );
  return $permissions;
}

/**
 * Loads a git_repository object.
 */
function git_repository_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $repo = git_repository_load_multiple($ids, $reset);
  return $repo ? reset($repo) : FALSE;
}

/**
 * Loads one or more git_repository objects.
 */
function git_repository_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('git_repository', $ids, $conditions, $reset);
}

/**
 * Saves a Git repository.
 *
 * @param $repository GitRepository
 * The repository to save.
 */
function git_repository_save($repository) {
  $repository->save();
}

/**
 * Returns whether the $repository_name exists.
 */
function git_repository_exists($repository_name) {
  return $repository_name == db_select("git_repository", "gr")
    ->fields("gr")
    ->condition("name", $repository_name)
    ->execute()
    ->fetchField();
}

