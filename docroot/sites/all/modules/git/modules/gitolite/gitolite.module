<?php
/**
 * @file
 *  Workflow Gitolite module
 */

use Gitter\Client;

require_once(__DIR__ . '/gitolite.sshkey.inc');
require_once(__DIR__ . '/gitolite.user.inc');

/**
 * Implements hook_entity_info_alter().
 */
function gitolite_entity_info_alter(&$info) {
  $info['git_server']['bundles']['gitolite'] = array(
    'label' => t('Gitolite'),
    'admin' => array(
      'path' => 'admin/structure/git/servers/gitolite',
      'access arguments' => array('administer git servers'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function gitolite_menu() {
  $items = array();

  $items['admin/structure/git/servers/gitolite'] = array(
    'title' => t('Gitolite Servers'),
    'access arguments' => array('administer git servers'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/structure/git/servers/gitolite/fields'),
  );
  $items['git/server/%git_server/install'] = array(
    'title' => t('Install'),
    'access callback' => 'gitolite_menu_access',
    'access arguments' => array('administer git servers', 2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gitolite_server_install_confirm_form', 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gitolite.admin.inc',
  );
  $items['git/server/%git_server/sync'] = array(
    'title' => t('Sync'),
    'access callback' => 'gitolite_menu_access',
    'access arguments' => array('administer git servers', 2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gitolite_server_sync_confirm_form', 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gitolite.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function gitolite_menu_alter(&$items) {
  $items['admin/structure/git/servers/gitolite/fields']['title'] = t('Manage Gitolite Server Fields');
}

/**
 * Implements hook_admin_paths().
 */
function gitolite_admin_paths() {
  $paths = array(
    'git/server/*/install' => TRUE,
    'git/server/*/sync' => TRUE,
  );
  return $paths;
}

/**
 * Prevents showing menu items for non-gitolite servers.
 */
function gitolite_menu_access($permission, $git_server) {
  return $git_server->bundle == 'gitolite' && user_access($permission);
}

/**
 * Implements hook_theme().
 */
function gitolite_theme() {
  $items = array();

  $items['gitolite_message'] = array(
    'function' => 'gitolite_theme_message',
    'variables' => array('message' => 'An error occurred', 'key' => NULL),
  );

  return $items;
}

/**
 * Default implementation of gitolite_message theme hook.
 */
function gitolite_theme_message($variables) {
  $tokens = array(
    '!synchronise-link' => l('synchronise your gitolite server(s)', 'admin/config/development/git/servers'),
  );

  if (!empty($variables['key'])) {
    $key = $variables['key'];
    $tokens['@user_id'] = $key->entity_id;
    $tokens['%fingerprint'] = theme('sshkey_fingerprint', array('key' => $key));
  }

  return t($variables['message'], $tokens);
}

/**
 * Provides a Git\Repository representing the gitolite admin repository.
 *
 * @param string $user The gitolite user (eg. 'git')
 * @param string $host The gitolite host (eg. 'localhost')
 * @param Git\Client $git The git client to use (Optional. Will call git_get_client() if NULL).
 * @return Git\Repository
 */
function gitolite_admin_repo($user, $host, $git = NULL) {
  $repo_key = "gitolite_admin_repo_$user@$host";
  $repository =& drupal_static($repo_key);

  if (empty($repository)) {
    try {
      $git = ($git instanceof Client ? $git : git_get_client($repo_key));

      $repository_directory = drupal_tempnam(file_directory_temp(), 'gitolite');
      if (FALSE === $repository_directory) {
        throw new Exception(t("Could not create temporary directory"));
      }
      drupal_unlink($repository_directory);
      drupal_mkdir($repository_directory);

      $repository_url = "$user@$host:gitolite-admin";
      $repository = $git->cloneRepository($repository_url, $repository_directory);
      register_shutdown_function('gitolite_delete_admin_repo', $user, $host);
    }
    catch (Exception $e) {
      $message = theme('gitolite_message', array(
        'message' => 'Could not load gitolite admin repo. Please check your settings, and then to recover you may want to !synchronise-link.',
      ));
      drupal_set_message($message, 'error');
      throw $e;
    }
  }

  return $repository;
}

/**
 * Deletes the admin repo returned from gitolite_admin_repo().
 */
function gitolite_delete_admin_repo($user, $host) {
  $repo_key = "gitolite_admin_repo_$user@$host";
  $client_key = "gitolite_client_$user@$host";

  $repository =& drupal_static($repo_key);
  if (!empty($repository)) {
    try {
      $directory = $repository->getPath();
      _gitolite_delete_dir($directory);
      drupal_static_reset($repo_key);
      drupal_static_reset($client_key);
    }
    catch (Exception $e) {
      watchdog_exception('gitolite', $e);
      drupal_set_message(t("Could not delete temp gitolite admin repo"), 'error');
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Returns a global instance of a Git\Gitolite controller
 *
 * @param string $user The gitolite user (eg. 'git')
 * @param string $host The gitolite host (eg. 'localhost')
 * @param Gitter\Client $git The git client to use (Optional. Will call git_get_client() if NULL).
 */
function gitolite_client($user, $host, $git = NULL) {
  $gitolite =& drupal_static("gitolite_client_$user@$host");
  if (empty($gitolite)) {
    $repository = gitolite_admin_repo($user, $host, $git);
    $fileSystem = new Gitolite\FileSystem($repository->getPath());
    $gitolite = new Gitolite\Client($repository, $fileSystem);
  }

  return $gitolite;
}

/**
 * Sets up permissions on repos.
 */
function gitolite_setup_permissions($git_server) {
  $permissions = module_invoke_all('gitolite_permissions');
  drupal_alter('gitolite_permissions', $permissions);

  if (!empty($permissions[$git_server->host][$git_server->user])) {
    $gitolite = gitolite_client($git_server->user, $git_server->host);
    $repos = $permissions[$git_server->host][$git_server->user];

    foreach ($repos as $repo => $rules) {
      $repository = $gitolite->loadRepository($repo);
      $repository->removeAllRules();
      usort($rules, '_gitolite_sort_repos_rules');
      foreach ($rules as $rule) {
        $repo_rule = new Gitolite\Entity\Rule(
          $rule['permission'],
          $rule['refexes'],
          new Gitolite\Entity\Placeholder($rule['entity'])
        );
        $repository->addRule($repo_rule);
      }
      $gitolite->save($repository, "Updated permissions for {$git_server->user}@{$git_server->host}:$repo");
    }

    if ($gitolite->getAdminRepository()->isAhead()) {
      $gitolite->push();
      drupal_set_message("Gitolite permissions setup successfully.");
      return TRUE;
    }
  }

  drupal_set_message("Gitolite permissions already setup.");
  return TRUE;
}

/**
 * Sort function for sorting rules by weight.
 * @see usort
 */
function _gitolite_sort_repos_rules($rule1, $rule2) {
  $a = @$rule1['weight'] ?: 0;
  $b = @$rule2['weight'] ?: 0;

  return $a < $b ? -1 : ($a == $b ? 0 : 1);
}

/**
 * Recursively deletes a directory.
 *
 * @param string $path The directory to delete
 */
function _gitolite_delete_dir($path) {
  exec("rm -rf " . escapeshellarg($path), $output, $exit);
  if ($exit !== 0) {
    throw new Exception(implode("\n", $output), $exit);
  }

  return TRUE;
}

