<?php
/**
 * @file
 *  Git Server module
 */


/**
 * Implements hook_entity_info().
 */
function git_server_entity_info() {
  $info = array();

  $info['git_server'] = array(
    'module' => 'git',
    'label' => t('Git Server'),
    'entity class' => 'GitServer',
    'controller class' => 'GitControllerExportable',
    'features controller class' => 'GitFeaturesController',
    'base table' => 'git_server',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'load hook' => 'git_server_load',
    'fieldable' => TRUE,
    'static cache' => TRUE,
    'configuration' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'bundle' => 'bundle',
      'id' => 'sid',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'bundle',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Git Server'),
        'custom settings' =>  FALSE,
      ),
    ),
  );

  return $info;
}


/**
 * Implements hook_menu().
 */
function git_server_menu() {
  $items = array();

  $items['admin/config/development/git'] = array(
    'title' => 'Git',
    'description' => 'Manage git servers.',
    'page callback' => 'git_server_list',
    'access arguments' => array('administer git servers'),
    'file' => 'git_server.admin.inc',
  );

  $items['admin/config/development/git/servers'] = array(
    'title' => 'Servers',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['git/server/add'] = array(
    'title' => 'Add new server',
    'access arguments' => array('administer git servers'),
    'page callback' => 'git_server_add',
    'file' => 'git_server.admin.inc',
  );
  $items['git/server/add/%'] = array(
    'title' => 'Add new server',
    'access arguments' => array('administer git servers'),
    'page callback' => 'git_server_edit',
    'page arguments' => array(NULL, 3),
    'file' => 'git_server.admin.inc',
  );
  $items['git/server/%git_server/edit'] = array(
    'title' => 'Edit',
    'access arguments' => array('administer git servers'),
    'page callback' => 'git_server_edit',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'git_server.admin.inc',
  );
  $items['git/server/%git_server'] = array(
    'title' => 'View',
    'access arguments' => array('administer git servers'),
    'page callback' => 'git_server_view',
    'page arguments' => array(2),
    'file' => 'git_server.admin.inc',
  );
  $items['git/server/%git_server/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['git/server/%git_server/delete'] = array(
    'title' => 'Delete',
    'access arguments' => array('administer git servers'),
    'page callback' => 'git_server_delete',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'git_server.admin.inc',
    'weight' => 50,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function git_server_admin_paths() {
  $paths = array(
    'git/server/add' => TRUE,
    'git/server/*' => TRUE,
    'git/server/*/edit' => TRUE,
    'git/server/*/delete' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function git_server_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/config/development/git') {
    // Add action link to 'git/server/add' on 'admin/config/development/git/servers' page.
    $item = menu_get_item('git/server/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function git_server_permission() {
  $permissions = array();

  $permissions['administer git servers'] = array(
    'title' => t('Administer git servers'),
  );

  return $permissions;
}


/**
 * Loads a git_server object.
 */
function git_server_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $server = git_server_load_multiple($ids, $reset);
  return $server ? reset($server) : FALSE;
}

/**
 * Loads a git_server object.
 */
function git_server_name_load($name = NULL, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'git_server');
  $query->propertyCondition('name', $name);
  $result = $query->execute();
  $ids = array_keys($result['git_server']);

  $server = git_server_load_multiple($ids, $reset);
  return $server ? reset($server) : FALSE;
}

/**
 * Loads one or more git_server objects.
 */
function git_server_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('git_server', $ids, $conditions, $reset);
}

/**
 * Provides a list of git server names keyed by name.
 */
function git_server_list_names() {
  $servers = entity_load('git_server');
  $names = array();
  foreach ($servers as $server) {
    $names[$server->name] = entity_label('git_server', $server);
  }
  return $names;
}

/**
 * Saves a Git server.
 *
 * @param $server GitServer
 * The server to save.
 */
function git_server_save($server) {
  $server->save();
}

/**
 * Returns whether the $server_name exists.
 */
function git_server_exists($server_name) {
  return $server_name == db_select("git_server", "gs")
    ->fields("gs")
    ->condition("name", $server_name)
    ->execute()
    ->fetchField();
}

