<?php

/**
 * @file
 * Hooks for the Personalize Pages module.
 */

/**
 * Implements hook_menu().
 */
function personalize_pages_menu() {

  $items['admin/structure/personalize/variations/personalize-pages'] = array(
    'title' => 'Pages',
    'description' => 'Personalize pages.',
    'page callback' => 'personalize_pages_list',
    'access callback' => 'user_access',
    'access arguments' => array('manage personalized content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'personalize_pages.admin.inc',
  );

  $items['admin/structure/personalize/variations/personalize-pages/list'] = array(
    'title' => 'List personalize pages',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/personalize/variations/personalize-pages/add'] = array(
    'title' => 'Add personalized page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalize_pages_form', 'add'),
    'access arguments' => array('manage personalized content'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'personalize_pages.admin.inc',
  );

  $items['admin/structure/personalize/variations/personalize-pages/manage/%personalize_page'] = array(
    'title' => 'Edit Personalized Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalize_pages_form', FALSE, 6),
    'access arguments' => array('manage personalized content'),
    'file' => 'personalize_pages.admin.inc',
  );

  $items['admin/structure/personalize/variations/personalize-pages/manage/%personalize_page/edit'] = array(
    'title' => 'Edit Personalized Page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items['admin/structure/personalize/variations/personalize-pages/manage/%personalize_page/delete'] = array(
    'title' => 'Delete Personalized Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalize_pages_page_delete', 6),
    'access arguments' => array('manage personalized content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'personalize_pages.admin.inc',
  );

  return $items;

}

/**
 * Implements hook_page_alter().
 */
function personalize_pages_page_alter(&$page) {
  if (!$os = personalize_pages_match_current_path()) {
    return;
  }
  $renderable = array(
    '#theme_wrappers' => 'personalize_options_wrapper',
    '#personalize_option_set' => $os,
    '#personalize_options' => array(),

  );
  $renderable['#theme_wrappers'] = array('personalize_options_wrapper');
  $renderable['#personalize_option_set'] = $os;
  $renderable['pages'] = array();
  $renderable['#personalize_options'] = array();
  $options = array_reverse($os->options);
  foreach ($options as $option) {
    $alias = $option['path'] != '<front>' ? $option['path'] : variable_get('site_frontpage');
    $path = drupal_get_normal_path($alias);
    $option_content = menu_execute_active_handler($path, FALSE);
    $renderable['#personalize_options'][$option['option_id']]['#markup'] = render($option_content);
    $renderable['pages'][]['#markup'] = render($option_content);
  }

  $renderable['#first_option'] = $renderable['pages'][0];
  personalize_element_with_option_set($renderable, $os, TRUE);
  $page['content']['system_main'] = array($renderable);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function personalize_pages_ctools_plugin_api($owner, $api) {
  if ($owner == 'personalize' && $api == 'personalize') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_personalize_option_set_type().
 */
function personalize_pages_personalize_option_set_type() {
  return array(
    'pages' => array(),
  );
}

/**
 * Implements hook_personalize_create_new_links().
 */
function personalize_pages_personalize_create_new_links() {
  return array(
    array(
      'title' => 'Personalized Page',
      'path' => 'admin/structure/personalize/variations/personalize-pages/add',
    )
  );
}

/**
 * Implements hook_personalize_edit_link().
 */
function personalize_pages_personalize_edit_link($option_set) {
  if ($option_set->plugin != 'pages') {
    return NULL;
  }
  return "admin/structure/personalize/variations/personalize-pages/manage/{$option_set->osid}/edit";
}

/**
 * Implements hook_personalize_delete_link().
 */
function personalize_pages_personalize_delete_link($option_set) {
  if ($option_set->plugin != 'pages') {
    return NULL;
  }
  return "admin/structure/personalize/variations/personalize-pages/manage/{$option_set->osid}/delete";
}

/**
 * Loads a personalized panel by its osid.
 *
 * @param $osid
 *   The osid of the option set.
 * @return The loaded option set or NULL no option set exists.
 */
function personalize_page_load($osid) {
  $os = personalize_option_set_load($osid);
  if (!$os || $os->plugin != 'pages') {
    return NULL;
  }
  return $os;
}

/**
 * Helper function to match the current path against Personalize Pages option 
 * sets.
 *
 * @return mixed
 *  False if there is no match, the full option set of the match if there is 
 *  one.
 */
function personalize_pages_match_current_path() {
  $option_sets = personalize_option_set_load_multiple(FALSE, array('executor' => 'personalizePages'));
  if (empty($option_sets)) {
    return FALSE;
  }

  $personalized_paths = array();
  foreach ($option_sets as $osid => $set) {
    $ctrl_option = reset($set->options);
    $personalized_paths[$osid] = $ctrl_option['path'];
  }
  
  foreach ($personalized_paths as $osid => $path) {
    if (drupal_match_path(drupal_get_path_alias(), $path)) {
      return $option_sets[$osid];
    }
  }
  return FALSE;
}
