<?php

/**
 * @file
 * CSS-Crush module file.
 */

/**
 * Output directory.
 */
define('CSSCRUSH_OUT_DIR', variable_get('file_public_path', conf_path() . '/files') . '/csscrush');

/**
 * Minimum required library version.
 */
define('CSSCRUSH_MIN_VERSION', '1.11.0');

/**
 * Permissions constant.
 */
define('CSSCRUSH_PERMISSION', 'administer csscrush');

/**
 * Pull in module API functions.
 */
module_load_include('inc', 'csscrush', 'csscrush.api');


/**
 * Implements hook_menu().
 */
function csscrush_menu() {

  $items['admin/config/development/csscrush'] = array(
    'title' => ' CSS-Crush settings',
    'description' => 'Administer CSS-Crush settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('csscrush_settings'),
    'access arguments' => array(CSSCRUSH_PERMISSION),
    'file' => 'csscrush.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function csscrush_permission() {
  return array(
    CSSCRUSH_PERMISSION => array(
      'title' => t('Administer CSS-Crush'),
      'description' => t('Access the CSS-Crush settings page.'),
    ),
  );
}


/**
 * Implements hook_help().
 */
function csscrush_help($path) {
  switch ($path) {
    case 'admin/help#csscrush':
      return '<p>' . t('For an overview of this CSS preprocessor see the <a href="@homepage">CSS-Crush homepage</a>. Docs, source, and issue tracker are hosted on <a href="@github">Github</a>.', array('@homepage' => '//the-echoplex.net/csscrush/', '@github' => '//github.com/peteboere/css-crush')) . '</p>';
  }
}


/**
 * Implements hook_element_info_alter().
 */
function csscrush_element_info_alter(&$type) {
  array_unshift($type['styles']['#pre_render'], '_csscrush_styles_pre_render');
}


/**
 * Link and process queued CSS files that have a '.crush.css' extension.
 */
function _csscrush_styles_pre_render($styles) {

  // Scan theme info files for CSS-Crush settings.
  $csscrush_theme_settings = array();
  foreach (list_themes() as $theme_name => $theme_data) {
    if (!empty($theme_data->info['settings']['csscrush'])) {
      $csscrush_theme_settings[drupal_get_path('theme', $theme_name) . '/']
        = $theme_data->info['settings']['csscrush'];
    }
  }

  foreach ($styles['#items'] as $file_name => $data) {

    // Check files have not already been processed.
    if (preg_match('~\.crush\.css$~i', $file_name) && empty($data['csscrush_processed'])) {

      // Resolve theme specific CSS-Crush settings.
      // These are scoped only to the theme's CSS files.
      $csscrush_options = array();
      foreach ($csscrush_theme_settings as $theme_path => $theme_settings) {
        if (strpos($file_name, $theme_path) === 0 && !empty($theme_settings['options'])) {
          $csscrush_options = $theme_settings['options'];
        }
      }

      // On success unlink the un-processed file and add the processed file.
      if ($result = _csscrush_process($file_name, $data, $csscrush_options)) {
        unset($styles['#items'][$file_name]);
        $styles['#items'][$result['data']]
          = array('data' => $result['data']) + $result['options'];
      }
    }
  }

  return $styles;
}
