<?php
/**
 * @file
 * Main goals module file.
 */

/**
 * Define a constant used in a number of 'redirect's in form submissions
 */
define('GOALS_ADMIN_PATH', 'admin/config/goals/main');

/**
 * Implements hook_field_extra_fields().
 */
function goals_field_extra_fields() {
  // Load the include file and call the function to provide extra field data.
  require_once 'goals.entities.inc';
  return _goals_field_extra_fields();
}

/**
 * Implements hook_menu().
 */
function goals_menu() {

  // View Goals (Page and View tab).
  $items['goals/goal/%goals'] = array(
    'title callback' => 'goals_title',
    'title arguments' => array(2),
    'page callback' => 'goals_view',
    'page arguments' => array(2),
    'access arguments' => array('view any goals entity'),
  );

  $items['goals/goal/%goals/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Add Goals.
  $items['goals/goal/add'] = array(
    'title' => 'Add a goal',
    'page callback' => 'goals_add',
    'access arguments' => array('create goals entities'),
    'file' => 'goals.pages.inc',
  );
  $items['goals/goal/add/%'] = array(
    'title' => 'Add a goal',
    'page callback' => 'goals_add',
    'page arguments' => array(3),
    'access arguments' => array('create goals entities'),
    'file' => 'goals.pages.inc',
  );
  // Edit Goals.
  $items['goals/goal/%goals/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('goals_form', 2),
    'access arguments' => array('edit any goals entity'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'goals.pages.inc',
  );
  // Delete Goals.
  $items['goals/goal/%goals/delete'] = array(
    'title' => 'Delete Goal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('goals_delete_form', 2),
    'access arguments' => array('delete goals entities'),
    'file' => 'goals.pages.inc',
  );

  // View Tasks  (Page and View tab).
  $items['goals/task/%goals_tasks'] = array(
    'title callback' => 'goals_task_title',
    'title arguments' => array(2),
    'page callback' => 'goals_task_view',
    'page arguments' => array(2),
    'access arguments' => array('view any goals entity'),
  );
  $items['goals/task/%goals_tasks/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Add Tasks.
  $items['goals/task/add'] = array(
    'title' => 'Add a task',
    'page callback' => 'goals_task_add',
    'access arguments' => array('create goals entities'),
    'file' => 'goals.pages.inc',
  );

  // Edit Tasks.
  $items['goals/task/%goals_tasks/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('goals_task_form', 2),
    'access arguments' => array('edit any goals entity'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'goals.pages.inc',
  );

  // Delete Tasks.
  $items['goals/task/%goals_tasks/delete'] = array(
    'title' => 'Delete Goal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('goals_task_delete_form', 2),
    'access arguments' => array('delete goals entities'),
    'file' => 'goals.pages.inc',
  );

  // Administration pages.
  $items['admin/config/goals'] = array(
    'title' => 'Goals',
    'description' => 'Configure goals.',
    'position' => 'left',
    'weight' => -15,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Admin table for Goals and Tasks.
  $items['admin/config/goals/main'] = array(
    'title' => 'Goals and Tasks',
    'description' => 'View goals and tasks together in one place.',
    'page callback' => 'goals_admin_summary_page',
    'access arguments' => array('administer goals entities'),
    'file' => 'goals.admin.inc',
    'weight' => 10,
  );

  // Admin Goals Page.
  $items['admin/config/goals/manage'] = array(
    'title' => 'Goals',
    'description' => 'Administer goals for users.',
    'page callback' => 'goals_goal_management_page',
    'access arguments' => array('administer goals entities'),
    'file' => 'goals.admin.inc',
    'weight' => 20,
  );

  // Admin Tasks Page.
  $items['admin/config/goals/tasks/manage'] = array(
    'title' => 'Tasks',
    'description' => 'Administer goals tasks for users.',
    'page callback' => 'goals_task_management_page',
    'access arguments' => array('administer goals entities'),
    'file' => 'goals.admin.inc',
    'weight' => 30,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function goals_permission() {
  $permissions = array(
    'administer goals entities' => array(
      'title' => t('Administer goals entities'),
    ),
    'view any goals entity' => array(
      'title' => t('View any Goal entity'),
    ),
    'edit any goals entity' => array(
      'title' => t('Edit any Goal entity'),
    ),
    'create goals entities' => array(
      'title' => t('Create Goal Entities'),
    ),
    'delete goals entities' => array(
      'title' => t('Delete Goal Entities'),
    ),
  );
  return $permissions;
}

/**
 * Implements the uri callback.
 *
 * @param object $goal
 *   Goal object.
 *
 * @return array
 *   Path to goal.
 */
function goals_goal_uri($goal) {
  return array(
    'path' => 'goals/goal/' . $goal->goal_id,
  );
}


/**
 * Callback for a page title when this entity is displayed.
 *
 * @param object $goal
 *   Entity for which to provide a title.
 *
 * @return null|string
 *   Title.
 */
function goals_title($goal) {
  return $goal->title;
}
/**
 * Fetch a goal.
 *
 * This function ends up being a shim between the menu system and
 * goals_load_multiple().
 *
 * @param object $goal_id
 *   Integer specifying the goal id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $goal object or FALSE if it cannot be loaded.
 *
 * @see goals_load_multiple()
 */
function goals_load($goal_id = NULL, $reset = FALSE) {
  $goal_ids = (isset($goal_id) ? array($goal_id) : array());
  $goal = goals_load_multiple($goal_ids, array(), $reset);
  return $goal ? reset($goal) : FALSE;
}

/**
 * Loads multiple goals.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 *
 * @param bool $goal_ids
 *   The goal to load.
 * @param array $conditions
 *   Additional conditions to load.
 * @param bool $reset
 *   Reset parameter.
 *
 * @return mixed
 *   Entity object.
 */
function goals_load_multiple($goal_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('goal', $goal_ids, $conditions, $reset);
}

/**
 * Fetch a task.
 *
 * This function ends up being a shim between the menu system and
 * goals_load_multiple().
 *
 * @param object $task_id
 *   Integer specifying the goal id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $goal object or FALSE if it cannot be loaded.
 *
 * @see goals_load_multiple()
 */
function goals_tasks_load($task_id = NULL, $reset = FALSE) {
  $task_ids = (isset($task_id) ? array($task_id) : array());
  $task = goals_tasks_load_multiple($task_ids, array(), $reset);
  return $task ? reset($task) : FALSE;
}

/**
 * Loads multiple tasks.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 *
 * @param bool $task_ids
 *   The tasks to load.
 * @param array $conditions
 *   Additional conditions to load.
 * @param bool $reset
 *   Reset parameter.
 *
 * @return mixed
 *   Entity object.
 */
function goals_tasks_load_multiple($task_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('goal_task', $task_ids, $conditions, $reset);
}
/**
 * Menu callback to display n goal.
 *
 * As we load the goal for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @param object $entity
 *   Entity to display.
 * @param string $view_mode
 *   View mode.
 *
 * @return mixed
 *   Entity display.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function goals_view($entity, $view_mode = 'full') {
  global $language;
  $langcode = $language->language;

  // Our entity type, for convenience.
  $entity_type = 'goal';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );
  // Build fields content.
  field_attach_prepare_view($entity_type, array($entity->goal_id => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->goal_id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );
  $entity->content['title'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#markup' => check_plain($entity->title),
  );


  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.


  // And now invoke hook_goal_view().
  module_invoke_all('goals_goal_view', $entity, $entity_type, $view_mode, $langcode);

  // Now invoke hook_entity_view_alter().
  drupal_alter(array('goals_view'), $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * Implements the uri callback.
 *
 * @param object $task
 *   Goal object.
 *
 * @return array
 *   Path to task.
 */
function goals_task_uri($task) {
  return array(
    'path' => 'goals/task/' . $task->task_id,
  );
}

/**
 * Callback for a page title when this entity is displayed.
 *
 * @param object $task
 *   Task object.
 *
 * @return null|string
 *   Task title.
 */
function goals_task_title($task) {
  return $task->title;
}

/**
 * Menu callback to display a goal task.
 *
 * As we load the task for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @param object $entity
 *   Task object.
 * @param string $view_mode
 *   View mode.
 *
 * @return mixed
 *   View of task entity.
 */
function goals_task_view($entity, $view_mode = 'full') {
  global $language;
  $langcode = $language->language;

  // Our entity type, for convenience.
  $entity_type = 'goal_task';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );
  // Build fields content.
  field_attach_prepare_view($entity_type, array($entity->task_id => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->task_id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  $entity->content['title'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#markup' => check_plain($entity->title),
  );

  $entity->content['requirement'] = array(
    '#type' => 'item',
    '#title' => t('To complete this task'),
    '#markup' => goals_task_requirements($entity),
  );

  // And now invoke hook_entity_view().
  module_invoke_all('goals_task_view', $entity, $entity_type, $view_mode, $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('goals_task_view'), $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * Generate a list of options of goals.
 *
 * Using a direct query over entity_load_multiple for efficiency.
 *
 * @return array
 *   Array of goals.
 */
function goals_task_goal_options() {
  $result = db_query("SELECT * FROM {goals} ORDER BY title");
  $arr = array();
  foreach ($result as $record) {
    $arr[$record->goal_id] = $record->title;
  }
  return $arr;
}

/**
 * Task delete form.
 */
function goals_task_delete_form($form, &$form_state, $task) {
  $form = array();
  $form['task_id'] = array('#type' => 'value', '#value' => $task->task_id);
  return confirm_form($form, t('Are you sure you want to delete the task %task?', array('%task' => $task->title)), GOALS_ADMIN_PATH);
}

/**
 * Handle the deletion of a task.
 */
function goals_task_delete_form_submit($form, &$form_state) {
  $task_id = $form_state['values']['task_id'];
  // Load the task.
  $task = goals_tasks_load($task_id);

  entity_delete('goal_task', $task->task_id);
  drupal_set_message(t('The task %task has been deleted.',
      array('%task' => $task->title))
  );
  $form_state['redirect'] = GOALS_ADMIN_PATH;
}

/**
 * Generate a readable interpretation of the task requirement.
 *
 * @param object $row
 *   Task object.
 *
 * @return string
 *   Formatted string of task requirement.
 */
function goals_task_requirements($row) {
  $task = '@type @task_count @times';

  if ($row->within && $row->within_interval) {
    $task .= ' within @within @within_interval';
  }

  if ($row->limit_count && $row->limit_interval) {
    $task .= ' with a limit of @limit_count action(s) per @limit_interval.';
  }

  return t($task, array(
      '@type' => $row->type,
      '@task_count' => $row->task_count,
      '@times' => format_plural($row->task_count, 'time', 'times'),
      '@within' => $row->within,
      '@within_interval' => $row->within_interval,
      '@limit_count' => $row->limit_count,
      '@limit_interval' => $row->limit_interval,
    )
  );

}

/**
 * A list of within intervals.
 *
 * @return array
 *   Array of task within intervals
 */
function goals_within_intervals() {
  return array(
    'hours' => t('Hours'),
    'days' => t('Days'),
    'weeks' => t('Weeks'),
  );
}

/**
 * A list of limit intervals.
 *
 * @return array
 *   Array of task limit intervals
 */
function goals_limit_intervals() {
  return array(
    'hour' => t('Hour'),
    'day' => t('Day'),
    'week' => t('Week'),
    'month' => t('Month'),
    'year' => t('Year'),
  );
}

/**
 * Calculates the number of seconds for each interval.
 *
 * @param int $count
 *   Value of count field.
 * @param string $interval
 *   Value of interval field.
 *
 * @return mixed
 *   Number of seconds between intervals.
 */
function goals_interval_second_calc($count, $interval) {
  switch ($interval) {
    case "hours":
      return $count * 3600;

    break;

    case "days":
      return $count * 3600 * 24;

    break;

    case "weeks":
      return $count * 3600 * 24 * 7;

    break;
  }
  return;
}

/**
 * Returns the date string value for the passed interval.
 *
 * @param string $interval
 *   Interval value from task.
 *
 * @return string
 *   SQL date string value for interval.
 */
function goals_limit_datestring($interval) {
  switch ($interval) {
    case "hour":
      return '%Y-%m-%d-%H';

    break;

    case "day":
      return '%Y-%m-%d';

    break;

    case "week":
      return '%Y-%m-%d-%U';

    break;

    case "month":
      return '%Y-%m';

    break;

    case "year":
      return '%Y';

    break;
  }
}

/**
 * Calculates goals for a user.
 *
 * @param int $uid
 *   Userid for which to calculate goals.
 */
function goals_calculate_user($uid) {
  $goals = goals_incomplete_goals($uid);
  foreach ($goals as $goal) {
    $tasks = goals_incomplete_tasks($goal->goal_id, $uid);
    foreach ($tasks as $task) {
      goals_check_task($task, $uid);
    }
    // Now, check if the goal is complete since tasks have been updated.
    goals_check_goal($goal, $uid);
  }
}


/**
 * Returns an array of uncompleted goals for this user, if any.
 *
 * @param int $uid
 *   User ID for which to check goals completion.
 *
 * @return array
 *   Returns an array of uncompleted goals, or an empty
 *   array if all goals are completed for this user.
 */
function goals_incomplete_goals($uid) {
  $s = "SELECT g.goal_id, g.title FROM {goals} g LEFT JOIN {goals_completed_goals} gcg ON g.goal_id = gcg.goal_id AND gcg.uid = :uid WHERE gcg.goal_id IS NULL";
  $result = db_query($s, array(':uid' => $uid))->fetchAll();
  return $result;
}

/**
 * Returns an array of uncompleted tasks for a goal for a user, if any.
 *
 * @param int $goal_id
 *   Goal ID to check for completion.
 *
 * @param int $uid
 *   User ID for which to check task completion.
 *
 * @return array
 *   Returns an array of uncompleted tasks for this goal, or an
 *   empty array if all tasks are completed for this user for this
 *   goal.
 */
function goals_incomplete_tasks($goal_id, $uid) {
  $s = "SELECT gt.* FROM {goals_tasks} gt LEFT JOIN {goals_completed_tasks} gct ON gt.task_id = gct.task_id AND gct.uid = :uid WHERE gct.task_id IS NULL AND gt.goal_id = :goal_id";
  $result = db_query($s, array(
    ':uid' => $uid,
    ':goal_id' => $goal_id,
    )
  )->fetchAll();
  return $result;
}

/**
 * Check to see if a task has been completed.
 *
 * @param object $task
 *   Task object to check.
 * @param int $uid
 *   User ID to check.
 */
function goals_check_task($task, $uid) {
  if ($task->within == 0 && $task->limit_count == 0) {
    // This is a 'Simple' task with no within or limit constraints.
    $s = "SELECT uid FROM {goals_activity} ga WHERE ga.task_type = :task_type AND ga.uid = :uid HAVING COUNT(*) >= :task_count";
    $cnt = db_query($s, array(
      ':task_type' => $task->type,
      ':uid' => $uid,
      ':task_count' => $task->task_count,
      )
    )->rowCount();

    if ($cnt > 0) {
      // This task is complete, so award the task.
      goals_award_task($task, $uid);
    }
  }
  elseif ($task->within > 0 && $task->limit_count == 0) {

    // Calculate if a task has been performed a number of times
    // within a time period.
    $interval = goals_interval_second_calc($task->within, $task->within_interval);
    $s = "SELECT COUNT(*) FROM {goals_activity} WHERE task_type = :task_type and uid = :uid and created > (:timestamp
       - :interv)";
    $result = db_query($s, array(
      ':task_type' => $task->type,
      ':uid' => $uid,
      ':timestamp' => REQUEST_TIME,
      ':interv' => $interval,
      )
    );
    $cnt = $result->fetchField();

    if ($cnt == $task->task_count || $cnt > $task->task_count) {
      // This task is complete, so award the task.
      goals_award_task($task, $uid);
    }
  }
  elseif ($task->within > 0 && $task->limit_count > 0) {
    // Calculate if a task has been performed a number of times within a
    // timeframe with a limit of times per period.
    $datestring = goals_limit_datestring($task->limit_interval);
    $interval = goals_interval_second_calc($task->within, $task->within_interval);
    $s = 'SELECT SUM(int_count) as grand_total FROM (SELECT case when count(id) > :limit_count then :limit_count else count(id) end as int_count FROM {goals_activity} WHERE task_type = :task_type AND uid = :uid AND created > (unix_timestamp() - :interv) GROUP BY from_unixtime(created, :datestring) ) as tt';
    $result = db_query($s, array(
      ':limit_count' => $task->limit_count,
      ':task_type' => $task->type,
      ':uid' => $uid,
      ':interv' => $interval,
      ':datestring' => $datestring,
      )
    );
    $cnt = $result->fetchField();
    if ($cnt == $task->task_count || $cnt > $task->task_count) {
      // This task is complete, so award the task.
      goals_award_task($task, $uid);
    }
  }
  elseif ($task->within == 0 && $task->limit_count > 0) {
    // Calculate if a task has been performed a number of times
    // with a limit of times per period.
    $datestring = goals_limit_datestring($task->limit_interval);
    $s = 'SELECT SUM(int_count) as grand_total FROM (SELECT case when count(id) > :limit_count then :limit_count else count(id) end as int_count  FROM {goals_activity} WHERE task_type = :task_type AND uid = :uid GROUP BY from_unixtime(created, :datestring)) as tt';
    $result = db_query($s, array(
      ':limit_count' => $task->limit_count,
      ':task_type' => $task->type,
      ':uid' => $uid,
      ':datestring' => $datestring,
      )
    );
    $cnt = $result->fetchField();
    if ($cnt == $task->task_count || $cnt > $task->task_count) {
      // This task is complete, so award the task.
      goals_award_task($task, $uid);
    }
  }
}

/**
 * Records a task a completed for a user.
 *
 * @param object $task
 *   Task object to check.
 * @param int $uid
 *   User ID to check.
 */
function goals_award_task($task, $uid) {
  // Invoke drupal_alter to let others know the task is completed.
  module_invoke_all('goals_completed_task', $task->task_id, $uid);

  $result = db_insert('goals_completed_tasks')
      ->fields(array(
    'goal_id' => $task->goal_id,
    'task_id' => $task->task_id,
    'uid' => $uid,
    'created' => REQUEST_TIME,
  ))
      ->execute();

  if (module_exists('rules')) {
    $event_name = 'task_awarded';
    $account = user_load($uid);
    $variables = array(
      'task' => $task,
      'awarded_user' => $account,
    );
    rules_invoke_event_by_args($event_name, $variables);
  }
}

/**
 * See if a user has completed all of the tasks related to a goal.
 *
 * @param object $goal
 *   Goal object to check.
 * @param int $uid
 *   User ID to check.
 */
function goals_check_goal($goal, $uid) {
  // Get a count of the total tasks related to this goal.
  $s = "SELECT COUNT(task_id) FROM {goals_tasks} WHERE goal_id = :goal_id";
  $cnt = db_query($s, array(':goal_id' => $goal->goal_id))->fetchField();
  if ($cnt > 0) {
    $tasks = goals_incomplete_tasks($goal->goal_id, $uid);
    if (count($tasks) == 0) {
      // The goal is complete, so award the goal.
      goals_award_goal($goal, $uid);
    }
  }
  return;
}

/**
 * Records that the user has completed the goal.
 *
 * @param object $goal
 *   Goal object to check.
 * @param int $uid
 *   User ID to check.
 */
function goals_award_goal($goal, $uid) {
  // Invoke drupal_alter to let others know the goal is completed.
  module_invoke_all('goals_completed_goal', $goal->goal_id, $uid);

  $result = db_insert('goals_completed_goals')
      ->fields(array(
    'goal_id' => $goal->goal_id,
    'uid' => $uid,
    'created' => REQUEST_TIME,
  ))
      ->execute();

  if (module_exists('rules')) {
    $event_name = 'goal_awarded';
    $account = user_load($uid);
    $variables = array(
      'goal' => $goal,
      'awarded_user' => $account,
    );
    rules_invoke_event_by_args($event_name, $variables);

  }
}

/**
 * Implements hook_entity_info().
 */
function goals_entity_info() {
  require_once 'goals.entities.inc';
  $info['goal'] = _goals_entity_info_goal();
  $info['goal_task'] = _goals_entity_info_goal_task();
  $info['goal_task_completed'] = _goals_entity_info_task_completed();
  $info['goal_completed'] = _goals_entity_info_goal_completed();
  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function goals_entity_property_info_alter(&$info) {
  require_once 'goals.entities.inc';
  _goals_entity_property_info_alter($info);
}
