<?php
/**
 * @file
 * PageRank Widget module.
 */

/**
 * Implements hook_help().
 */
function pr_widget_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pr_widget':
      // Return a line-break version of the README.txt.
      return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Implements hook_cron().
 *
 * Called every time the Drupal cron runs. Grabs the PageRank from Google
 * to store in the variable 'pr_widget_ratio' till next cron run.
 */
function pr_widget_cron() {
  // Defaults to a daily interval.
  $interval = variable_get('pr_widget_interval', 24 * 60 * 60);
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (time() >= variable_get('pr_widget_next_execution', 0)) {
    $url = variable_get('pr_widget_testurl', 0) ? parse_url(variable_get('pr_widget_testurl', 0), PHP_URL_HOST) : parse_url($GLOBALS['base_url'], PHP_URL_HOST);
    variable_set('pr_widget_ratio', pr_widget_pagerank($url));
    // Alternatively get PR from main domain.
    $ratio = variable_get('pr_widget_ratio', pr_widget_pagerank($url));
    if (($ratio == 'NA' || $ratio == '0') && variable_get('pr_widget_pagerank_fallback', 1)) {
      // Get domain from subdomain.
      $url = variable_get('pr_widget_testurl', 0) ? pr_widget_get_domain(variable_get('pr_widget_testurl', 0)) : pr_widget_get_domain($GLOBALS['base_url']);
      $ratio = pr_widget_pagerank($url);
      // If the URL is invalid we won't get a number back anyway.
      if ($ratio >= 1 && $ratio <= 10) {
        variable_set('pr_widget_ratio', $ratio);
      }
    }
    $message = t('PageRank updated successfully = %pagerank', array('%pagerank' => variable_get('pr_widget_ratio', pr_widget_pagerank($url))));
    watchdog('pr_widget', $message);
    variable_set('pr_widget_next_execution', time() + $interval);
  }
}

/**
 * Implements hook_menu().
 */
function pr_widget_menu() {
  $items['admin/config/system/pr_widget'] = array(
    'title' => 'PageRank',
    'description' => 'PageRank Widget settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pr_widget_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'pr_widget.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares the blocks that contains the pr_widget ratio.
 */
function pr_widget_block_info() {
  $blocks['pr_widget_widget'] = array(
    'info' => t('PageRank widget'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => 1,
    'region' => 'footer',
  );

  $blocks['pr_widget_text'] = array(
    'info' => t('PageRank text only'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => 0,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function pr_widget_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'pr_widget_widget':
      $block['subject'] = NULL;
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = pr_widget_contents($delta);
      break;

    case 'pr_widget_text':
      $block['subject'] = NULL;
      $block['content'] = pr_widget_contents($delta);
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function pr_widget_theme(&$existing, &$type, &$theme, &$path) {
  return array(
    'pr_widget' => array(
      'results' => array(),
      'template' => 'pr_widget',
    ),
  );
}

/**
 * A module-defined block content function.
 */
function pr_widget_contents($which_block) {
  // Current domain name without the leading protocol.
  $host = variable_get('pr_widget_url_name', parse_url($GLOBALS['base_url'], PHP_URL_HOST));
  $year = variable_get('pr_widget_year', '');
  // If the notice is enabled we want it..
  if (variable_get('pr_widget_notice_enabled', 0)) {
    $notice = ' ' . variable_get('pr_widget_prepend', '') . ' Â© ' . (($year != date('Y') && !empty($year)) ? $year . '-' . date('Y') : date('Y'));
  }
  else {
    // ..and leave it empty if it's disabled.
    $notice = '';
    $host = '';
  }

  switch ($which_block) {
    case 'pr_widget_widget':
      // For the 'pr_widget widget' block we use pr_widget.tpl.php to make
      // it easier to override copying it to the theme's template folder.
      drupal_add_css(drupal_get_path('module', 'pr_widget') . '/pr_widget.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
      $results = array(
        'module_path' => drupal_get_path('module', 'pr_widget'),
      );
      return theme('pr_widget', array('results' => $results));

    case 'pr_widget_text':
      // The 'pr_widget text only' block can render directly instead
      // If pagerank is enabled we want it..
      if (variable_get('pr_widget_enabled', 1)) {
        $pagerank = variable_get('pr_widget_string', t('PageRank')) . ': ' . variable_get('pr_widget_ratio', t('[No data yet]') . variable_get('pr_widget_suffix', '') . ' ');
        $link = variable_get('pr_widget_link', 'http://domaintyper.com/PageRankCheck/');
        if (!empty($link)) {
          $pagerank = l($pagerank, $link . parse_url($GLOBALS['base_url'], PHP_URL_HOST),
            array(
              'attributes' => array(
                'title' => t('Check on') . ' ' . parse_url($link, PHP_URL_HOST),
              ),
            )
          );
        }
      }
      else {
        // ..and leave it empty if it's disabled.
        $pagerank = '';
      }
      return array('#markup' => $pagerank . $notice . ' ' . $host);
  }
}

/**
 * Generating hash to validate querying Google.
 */
function pr_widget_genhash($url) {
  $hash = "Mining PageRank is AGAINST GOOGLE'S TERMS OF SERVICE. Yes, I'm talking to you, scammer.";
  $c = 16909125;
  $length = drupal_strlen($url);
  $hashpieces = str_split($hash);
  $urlpieces = str_split($url);
  for ($d = 0; $d < $length; $d++) {
    $c = $c ^ (ord($hashpieces[$d]) ^ ord($urlpieces[$d]));
    $c = (($c >> 23) & 0x1ff) | $c << 9;
  }
  $c = -(~($c & 4294967295) + 1);
  return '8' . dechex($c);
}

/**
 * Grab the PageRank querying Google.
 */
function pr_widget_pagerank($url) {
  $googleurl = 'http://toolbarqueries.google.com/tbr?client=navclient-auto&ch=' . pr_widget_genhash($url) . '&features=Rank&q=info:' . urlencode($url);
  if (function_exists('curl_init')) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_URL, $googleurl);
    $out = curl_exec($ch);
    curl_close($ch);
  }
  else {
    $out = check_plain(file_get_contents($googleurl));
  }
  if (drupal_strlen($out) > 0 && drupal_strlen($out) < 12) {
    return trim(drupal_substr(strrchr($out, ':'), 1));
  }
  else {
    if (drupal_strlen($out) > 11) {
      return 'Invalid URL: ' . $url;
    }
    else {
      return 'NA';
    }
  }
}

function pr_widget_get_domain($url) {
  $pieces = parse_url($url);
  $count = substr_count($pieces['host'], '.');
  $extract = ($count < 4 && strpos($pieces['host'],'www.') !== false) || $count ==2 ? 0 : 1;
  $host =explode('.', $pieces['host'], $count - $extract);
  return array_pop($host);
}
