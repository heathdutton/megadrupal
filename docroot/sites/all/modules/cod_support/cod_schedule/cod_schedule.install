<?php

/**
 * Enable panel pages when cod_schedule is first installed.
 */
function cod_schedule_install() {
  // Enabled the associated schedule pages
  $module_list = array('cod_schedule_pages');
  module_enable($module_list);
  return array();
}

/**
 * Enable the views_json module.
 */
function cod_schedule_update_7001() {
  module_enable(array('views_json'));
  return array();
}

/**
 * Revert the feature to include hide the view when no schedule items appear,
 * and change the entityreference views widget handler to cod_timeslots.
 */
function cod_schedule_update_7002() {

  $revert = array(
    'cod_schedule' => array('field_base', 'field_instance', 'views_view'),
  );
  features_revert($revert);
}

/**
 * Update session timeslot permissions, remove old session_track fields from view.
 */
function cod_schedule_update_7003() {

  $revert = array(
    'cod_schedule' => array('user_permission', 'views_view'),
  );
  features_revert($revert);
}

/**
 * Enable the COD Schedule Pages module.
 */
function cod_schedule_update_7004() {
  module_enable(array('cod_schedule_pages'));
  return array();
}

/**
 * Update session timeslot permissions, move schedule path for view.
 */
function cod_schedule_update_7005() {

  $revert = array(
    'cod_schedule' => array('field_instance', 'views_view'),
  );
  features_revert($revert);
}

/**
 * Update add the duplicate timeslots view.
 */
function cod_schedule_update_7006() {

  $revert = array(
    'cod_schedule' => array('views_view'),
  );
  features_revert($revert);
}

/**
 * Revert cod_bof view feature to convert to the panel if the page is enabled.
 */
function cod_schedule_update_7007() {
  if (module_exists('cod_schedule_pages')){
    $revert = array(
      'cod_schedule' => array('views_view'),
      'cod_schedule_pages' => array('page_manager_pages'),
    );
    features_revert($revert);
  }

  return array();
}

/**
 * Change the og_group_ref select widget to a plain select widget
 */
function cod_schedule_update_7008() {
  $revert = array(
    'cod_schedule' => array('field_instance'),
  );
  features_revert($revert);
}

/**
 * Update the Cod Schedule Admin Pages to use the new schedule menu and remove quicktabs.
 */
function cod_schedule_update_7009() {
  if (module_exists('cod_schedule_pages')){
    $revert = array(
      'cod_schedule_pages' => array('page_manager_pages'),
    );
    features_revert($revert);
  }
}

/**
 * Change the event time date field to not use a timezone.
 */
function cod_schedule_update_7011() {
  $data_raw = db_select('field_config', 'fc')
    ->fields('fc', array('data'))
    ->condition('field_name', 'field_evttime_date')
    ->execute()
    ->fetchField();
  $data = unserialize($data_raw);
  $data['settings']['timezone_db'] = '';
  $data['settings']['tz_handling'] = 'none';

  $data_raw = serialize($data);
  $result = db_update('field_config')
    ->fields(array('data' => $data_raw))
    ->condition('field_name', 'field_evttime_date')
    ->execute();

  $revert = array(
    'cod_schedule' => array('field_base'),
  );
  features_revert($revert);
}

/*
 * Update offsets for times to local time and remove the columns afterward.
 */
function cod_schedule_update_7012() {
  $dates = db_query("SELECT DISTINCT ed.entity_id, ed.field_evttime_date_value AS value1,
   ed.field_evttime_date_value2 AS value2, field_evttime_date_timezone AS tz
  FROM field_data_field_evttime_date ed ORDER BY entity_id");

  $records = array();
  // Get all the records before we do inplace updates of the same table.
  foreach ($dates as $record) {
    $records[] = $record;
  }
  if (variable_get('date_default_timezone', 'UTC') == 'UTC' || variable_get('date_default_timezone', 'UTC') == 'GMT') {
    foreach($records AS $record) {
      $value1 = new DateTime($record->value1 ." UTC");
      $value2 = new DateTime($record->value2 ." UTC");
      $value1->setTimezone(new DateTimeZone($record->tz));
      $value2->setTimezone(new DateTimeZone($record->tz));

      db_update('field_data_field_evttime_date')
        ->fields(array(
          'field_evttime_date_value' => $value1->format('Y-m-d H:i:s'),
          'field_evttime_date_value2' => $value2->format('Y-m-d H:i:s'),
        ))
        ->condition('entity_id', $record->entity_id)
        ->execute();
      db_update('field_revision_field_evttime_date')
        ->fields(array(
          'field_evttime_date_value' => $value1->format('Y-m-d H:i:s'),
          'field_evttime_date_value2' => $value2->format('Y-m-d H:i:s'),
        ))
        ->condition('entity_id', $record->entity_id)
        ->execute();
      }
      db_drop_field('field_data_field_evttime_date', 'field_evttime_date_timezone');
      db_drop_field('field_data_field_evttime_date', 'field_evttime_date_offset');
      db_drop_field('field_data_field_evttime_date', 'field_evttime_date_offset2');
      db_drop_field('field_revision_field_evttime_date', 'field_evttime_date_timezone');
      db_drop_field('field_revision_field_evttime_date', 'field_evttime_date_offset');
      db_drop_field('field_revision_field_evttime_date', 'field_evttime_date_offset2');
  }
  else {
    drupal_set_message("Warning, your site's timezone is not set to UTC. Please check your timeslot times manually");
  }
  return array();
}