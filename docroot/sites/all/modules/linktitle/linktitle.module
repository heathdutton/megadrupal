<?php

/**
 * @file
 * Input filter which adds a title attribute to links. The title is taken form
 * the pagetitle where the link is pointing to.
 *
 * @author Rolf Meijer for Studio Karu
 * @see http://drupal.org/user/358052
 */

$_linktitle_setting_maxread = 2000;
$_linktitle_setting_timeout = 1000;
 
/**
 * Implements hook_help().
 */
function linktitle_help($path, $arg) {
  switch ($path) {
    case 'admin/help#linktitle':
      $output = '<p>' . t('To use the Links Title filter, simply enable the'
      . ' Links Title filter for one or more of your'
      . ' <a href="@text_formats">text formats</a>.', array(
        '@text_formats' => url('admin/config/content/formats'))) . '</p><p>';
      $output .= t('If you also enable other filters that act on links make'
      . ' sure that the one that needs to take precedence is the last one'
      . ' called in the Filter processing porder.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_filter_info().
 */
function linktitle_filter_info() {
  $filters['linktitle'] = array(
    'title' => t('Adds a title attribute to links'),
    'description' => t('Adds a title attribute to links, with it\'s value'
    . ' taken from the pagetitle where the link is pointing to.'),
    'process callback' => '_linktitle_filter_process',
    'settings callback' => '_linktitle_filter_settings',
    'default settings' => array(
      'linktitle_display_tip' => 1,
      'linktitle_maxread_bytes' => 2000,
      'linktitle_timeout' => 1000,
    ),
    'tips callback' => '_linktitle_filter_tips',
  );
  return $filters;
}

/**
 * Settings callback for the linktitle filter.
 */
function _linktitle_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['linktitle_maxread_bytes'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of bytes read'),
    '#default_value' => $filter->settings['linktitle_maxread_bytes'],
    '#maxlength' => 8,
    '#description' => t('Number of bytes read from the page that is linked to.'
    . ' The title-tag should be in those read bytes,'
    . ' if you miss a title from a page,'
    . ' it is possible that the title tag is after those read bytes.'
    . ' In that case increase this number.'),
  );
  $settings['linktitle_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum time to connect to the page that is referred to.'),
    '#default_value' => $filter->settings['linktitle_timeout'],
    '#maxlength' => 8,
    '#description' => t('The maximum time in milliseconds to connect to the '
    . 'page that is linked to. When there a lot of links on the page every '
    . 'link will take some time to visit. To optimize this adjust this '
    . 'timeout. Decrease it for better performance but probably less '
    . 'succesfull attempts to get the title, increae for the reverse effect.'),
  );
  return $settings;
}


/**
 * Filter process callback for linktitle filter.
 *
 * @param $text
 *   Text to be filtered. Regex pattern matches links to be processed.
 *
 * @return
 *   Filtered text with processed links including HTML title attributes.
 */
function _linktitle_filter_process($text, $filter) {
  global $_linktitle_setting_maxread;
  global $_linktitle_setting_timeout;
  $_linktitle_setting_maxread = $filter->settings['linktitle_maxread_bytes'];
  $_linktitle_setting_timeout = $filter->settings['linktitle_timeout'];
  $pattern = '%<a([^>]*?href="([^"]+?)"[^>]*?)>%i';
  return preg_replace_callback($pattern, '_linktitle_filter_text_process', $text);
}

function linktitle_get_remotetitle($url, $bytes = 5000) {
  // Init
  global $_linktitle_setting_timeout;
  $dat = '';
  $innertitle = '';
  $fp = @fopen($url, "r");
  if ($fp) {
    stream_set_timeout($fp, 0, $_linktitle_setting_timeout);
    $dat = fread($fp, $bytes);
    fclose($fp);
    // if the url is not available $dat wil be empty
    if (preg_match('|<title>[[:space:]]*(.*)[[:space:]]*</title>|Uis', $dat, $match )) {
      $innertitle = $match[1];
    }
  }
  return $innertitle;
}

/**
 * Callback for _linktitle_filter_process().
 */
function _linktitle_filter_text_process($matches) {
  global $_linktitle_setting_maxread;
  if (strpos($matches[1], 'title=') == FALSE) {
    $pagetitle = linktitle_get_remotetitle($matches[2], $_linktitle_setting_maxread);
    if (empty($pagetitle)) {
      return $matches[0];
    }
    else {
      // make sure the inserted page title is plain text
      // $insert_title = 'title="'.check_plain($pagetitle).'"';
      $insert_title = 'title="' . $pagetitle . '"';
      return substr_replace($matches[0], $insert_title, -1, -1);
    }
  }
  else {
    return $matches[0];
  }
}

/**
 * Callback for $filters['linktitle']['tips callback'] within
 * linktitle_filter_info().
 */
function _linktitle_filter_tips($filter, $format, $long = FALSE) {
  if ($filter->settings['linktitle_display_tip']) {
    return t('Adds a title attribute to links found in the content.');
  }
}
