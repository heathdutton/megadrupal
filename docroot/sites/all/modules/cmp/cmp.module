<?php
/**
 * @file
 * Hooks and callback functions.
 */

// Load all Field module hooks and callbacks.
module_load_include('inc', 'cmp', 'includes/cmp.field');

/**
 * Implements hook_permission().
 */
function cmp_permission() {
  return array(
    'administer cmp' => array(
      'title'       => t('Administer CaptureMyPage module'),
      'description' => t('Allow the user administer CaptureMyPage settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cmp_menu() {
  $items = array();

  $items['admin/config/services/cmp'] = array(
    'title'            => 'CaptureMyPage settings',
    'description'      => 'Allows the user to configure the CaptureMyPage module',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('cmp_settings_form'),
    'access arguments' => array('administer cmp'),
    'file'             => 'cmp.admin.inc',
    'file path'        => drupal_get_path('module', 'cmp') . '/includes',
  );

  $items['admin/config/services/cmp/settings'] = array(
    'title'  => 'Settings',
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function cmp_theme() {
  return array(
    'cmp_default_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
      ),
      'file' => 'cmp.theme.inc',
      'path' => drupal_get_path('module', 'cmp') . '/includes',
    ),
  );
}

/**
 * @param array $settings
 */
function cmp_get_snapshot_url($settings = array()) {
  $service_key = variable_get('cmp_service_key', '');

  $cmpAPI = array(
    'class'    => 'cmpAPI',
    'filetype' => 'php',
    'filename' => 'includes/class/cmp.api',
    'module'   => 'cmp',
  );

  module_load_include($cmpAPI['filetype'], $cmpAPI['module'], $cmpAPI['filename']);

  // Installing new API class with Service Key.
  $request = new $cmpAPI['class']($service_key);

  // Make a request with action "get/thumbnail".
  $result = $request->makeRequest('get/thumbnail', array(
    // URL of website we want to get the HTML source.
    'url'         => isset($settings['url']) ? $settings['url'] : '',
    // Number of milliseconds to wait after a page loads before taking the
    // screenshot.
    'renderDelay' => isset($settings['renderDelay']) ? (int) $settings['renderDelay'] : 2000,
    // Custom user-agent.
    'userAgent'   => isset($settings['userAgent']) ? $settings['userAgent'] : '',
    // If streaming is used, this designates the file format of the streamed
    // rendering. Possible values are 'png', 'jpg', and 'jpeg'.
    'streamType'  => isset($settings['streamType']) ? $settings['streamType'] : 'png',
    // JPEG compression quality. A higher number will look better, but creates a
    // larger file. Quality setting has no effect when streaming.
    'quality'     => isset($settings['quality']) ? (int) $settings['quality'] : 75,
    // Number of milliseconds to wait before killing the process and assuming
    // webshotting has failed. (0 is no timeout.)
    'timeout'     => isset($settings['timeout']) ? (int) $settings['timeout'] : 0,
    // The dimensions of the browser window. screenSize is an alias for this
    // property.
    'windowSize'  => array(
      'width'  => isset($settings['windowSize_width']) ? (int) $settings['windowSize_width'] : 1024,
      'height' => isset($settings['windowSize_height']) ? (int) $settings['windowSize_height'] : 768,
    ),
    // The area of the page document, starting at the upper left
    // corner, to render. Possible values are 'screen', 'all', and a number
    // defining a pixel length.
    //
    // 'window' causes the length to be set to the length of the window (i.e. the
    // shot displays what is initially visible within the browser window).
    //
    // 'all' causes the length to be set to the length of the document along the
    // given dimension.
    'shotSize'    => array(
      'width'  => isset($settings['shotSize_width']) ? $settings['shotSize_width'] : '',
      'height' => isset($settings['shotSize_height']) ? $settings['shotSize_height'] : '',
    ),
    // The left and top offsets define the upper left corner of the
    // screenshot rectangle. The right and bottom offsets allow pixels to be
    // removed from the shotSize dimensions (e.g. a shotSize height of 'all' with
    // a bottom offset of 30 would cause all but the last 30 rows of pixels on
    // the site to be rendered).
    'shotOffset'  => array(
      'left'   => isset($settings['shotOffset_left']) ? (int) $settings['shotOffset_left'] : 0,
      'right'  => isset($settings['shotOffset_right']) ? (int) $settings['shotOffset_right'] : 0,
      'top'    => isset($settings['shotOffset_top']) ? (int) $settings['shotOffset_top'] : 0,
      'bottom' => isset($settings['shotOffset_bottom']) ? (int) $settings['shotOffset_bottom'] : 0,
    ),
    // When taking the screenshot, adds custom CSS rules if defined.
    'customCSS'   => isset($settings['customCSS']) ? $settings['customCSS'] : '',
    'useCache'    => isset($settings['useCache']) ? (bool) $settings['useCache'] : TRUE,
  ));

  return $result;
}
