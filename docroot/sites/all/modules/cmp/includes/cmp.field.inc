<?php
/**
 * @file
 * Hooks and callbacks to handle cmp field.
 */

module_load_include('inc', 'cmp', 'includes/cmp.field.widget');
module_load_include('inc', 'cmp', 'includes/cmp.field.formatter');
module_load_include('inc', 'cmp', 'includes/cmp.field.instance');
module_load_include('inc', 'cmp', 'includes/cmp.field.validate');

/**
 * Implements hook_field_info().
 */
function cmp_field_info() {
  return array(
    'cmp' => array(
      'label'             => t('CaptureMyPage'),
      'description'       => t('Provides a field to store an URL, and an image generated by CaptureMyPage.'),
      'settings'          => array(
        'uri_scheme'    => variable_get('file_default_scheme', 'public'),
        'default_image' => 0,
      ),
      'instance_settings' => array(
        'renderDelay'       => 2000,
        'userAgent'         => '',
        'streamType'        => 'png',
        'quality'           => 75,
        'timeout'           => 0,
        'windowSize_width'  => 1024,
        'windowSize_height' => 768,
        'shotSize_width'    => 'window',
        'shotSize_height'   => 'window',
        'shotOffset_left'   => 0,
        'shotOffset_right'  => 0,
        'shotOffset_top'    => 0,
        'shotOffset_bottom' => 0,
        'customCSS'         => '',
        'useCache'          => TRUE,
        'uri_scheme'        => variable_get('file_default_scheme', 'public'),
        'file_directory'    => '',
        'default_image'     => 0,
        'alt_field'         => '',
        'title_field'       => '',
      ),
      'default_widget'    => 'cmp_field_widget',
      'default_formatter' => 'cmp_field_formatter',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function cmp_field_settings_form($field, $instance) {
  $defaults = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);

  $scheme_options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $stream_wrapper) {
    $scheme_options[$scheme] = $stream_wrapper['name'];
  }

  $form['uri_scheme'] = array(
    '#type'          => 'radios',
    '#title'         => t('Upload destination'),
    '#description'   => t('Select where the final files should be stored. Private file storage has significantly more overhead than public files, but allows restricted access to files within this field.'),
    '#options'       => $scheme_options,
    '#default_value' => $settings['uri_scheme'],
  );

  $form['default_image'] = array(
    '#type'            => 'managed_file',
    '#title'           => t('Default image'),
    '#description'     => t('If no image, this image will be shown on display.'),
    '#default_value'   => $field['settings']['default_image'],
    '#upload_location' => $settings['uri_scheme'] . '://default_images/',
  );

  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function cmp_field_is_empty($item, $field) {
  return empty($item['url']);
}

/**
 * Implements hook_field_prepare_view().
 */
function cmp_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  if ($field['type'] == 'cmp') {
    // If there are no files specified at all, use the default.
    foreach ($entities as $id => $entity) {
      if (empty($items[$id])) {
        $fid = 0;
        // Use the default for the instance if one is available.
        if (!empty($instances[$id]['settings']['wrapper']['default_image'])) {
          $fid = $instances[$id]['settings']['wrapper']['default_image'];
        }
        // Otherwise, use the default for the field.
        elseif (!empty($field['settings']['default_image'])) {
          $fid = $field['settings']['default_image'];
        }

        // Add the default image if one is found.
        if ($fid && ($file = file_load($fid))) {
          $items[$id][0] = (array) $file + array(
              'is_default' => TRUE,
              'alt'        => '',
              'title'      => '',
            );
        }
      }
    }
  }
}

/**
 * Implements hook_field_load().
 */
function cmp_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  if ($field['type'] == 'cmp') {
    $fids = array();

    foreach ($entities as $id => $entity) {
      // Load the files from the files table.
      foreach ($items[$id] as $delta => $item) {
        if (isset($item['fid']) && (int) $item['fid'] > 0) {
          $fids[] = $item['fid'];
        }
      }
    }

    if (!empty($fids)) {
      $files = file_load_multiple($fids);
    }

    if (isset($files)) {
      foreach ($entities as $id => $entity) {
        foreach ($items[$id] as $delta => $item) {
          // If the file does not exist, mark the entire item as empty.
          if (!isset($item['fid']) || (int) $item['fid'] === 0 || !isset($files[$item['fid']])) {
            // $items[$id][$delta] = NULL;
          }
          else {
            $items[$id][$delta] = array_merge((array) $files[$item['fid']], $item);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function cmp_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'cmp') {
    // If no image file, and token is not generated before.
    foreach ($items as $delta => $item) {
      if (isset($item['url']) && !empty($item['url']) && (int) $items[$delta]['fid'] === 0) {
        $settings_defaults = $instance['settings'];
        $settings_saved = isset($instance['settings']['wrapper']) ? $instance['settings']['wrapper'] : array();

        $settings = array_merge($settings_defaults, $settings_saved);
        $settings['entity_type'] = $entity_type;
        $settings['field'] = $field['field_name'];
        $settings['url'] = $item['url'];

        $result = cmp_get_snapshot_url($settings);

        if ((int) $result['error'] === 0) {
          // Get file save directory.
          $filename = drupal_basename($result['data']);
          // Strip slashes from the beginning and end of 'file_directory'.
          $file_directory = trim($settings['file_directory'], '/');
          // Define the destination folder with filename.
          $destination = $field['settings']['uri_scheme'] . '://' . $file_directory;
          // If file directory path is not empty, we should append a slash to path.
          $destination .= !empty($file_directory) ? '/' : '';
          // Get remote file content.
          $source = file_get_contents($result['data']);

          if ($source && file_prepare_directory($destination, FILE_CREATE_DIRECTORY)) {
            // Append filename and extension to destination path.
            $destination .= $filename;
            // Save file into Drupal filesystem.
            $file = file_save_data($source, $destination, FILE_EXISTS_RENAME);

            if ($file) {
              // We attach file to the field item.
              $items[$delta]['fid'] = $file->fid;

              // Get image info.
              $info = image_get_info($file->uri);
              if (is_array($info)) {
                // Save original width of image.
                $items[$delta]['width'] = $info['width'];
                // Save original height of image.
                $items[$delta]['height'] = $info['height'];
              }
            }
            else {
              drupal_set_message(t('Snapshot file could not be saved to the local filesystem.'), 'error');
            }
          }
          else {
            drupal_set_message(t('Snapshot file could not be saved to the local filesystem.'), 'error');
          }
        }
        else {
          drupal_set_message($result['message'], 'error');
        }
      }
    }
  }
}

/**
 * Implements hook_field_insert().
 */
function cmp_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'cmp') {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

    // Add a new usage of each uploaded file.
    foreach ($items as $item) {
      if (isset($item['fid']) && (int) $item['fid'] > 0) {
        $file = (object) $item;
        file_usage_add($file, 'file', $entity_type, $id);
      }
    }
  }
}

/**
 * Implements hook_field_update().
 */
function cmp_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'cmp') {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

    // On new revisions, all files are considered to be a new usage and no
    // deletion of previous file usages are necessary.
    if (!empty($entity->revision)) {
      foreach ($items as $item) {
        if (isset($item['fid']) && (int) $item['fid'] > 0) {
          $file = (object) $item;
          file_usage_add($file, 'file', $entity_type, $id);
        }
      }
    }
    else {
      // Build a display of the current FIDs.
      $current_fids = array();
      foreach ($items as $item) {
        if (isset($item['fid']) && (int) $item['fid'] > 0) {
          $current_fids[] = $item['fid'];
        }
      }

      // Compare the original field values with the ones that are being saved. Use
      // $entity->original to check this when possible, but if it isn't available,
      // create a bare-bones entity and load its previous values instead.
      if (isset($entity->original)) {
        $original = $entity->original;
      }
      else {
        $original = entity_create_stub_entity($entity_type, array(
          $id,
          $vid,
          $bundle
        ));
        field_attach_load($entity_type, array($id => $original), FIELD_LOAD_CURRENT, array('field_id' => $field['id']));
      }

      $original_fids = array();
      if (!empty($original->{$field['field_name']}[$langcode])) {
        foreach ($original->{$field['field_name']}[$langcode] as $original_item) {
          if (isset($original_item['fid']) && (int) $original_item['fid'] > 0) {
            $original_fids[] = $original_item['fid'];
            if (isset($original_item['fid']) && !in_array($original_item['fid'], $current_fids)) {
              // Decrement the file usage count by 1 and delete the file if possible.
              file_field_delete_file($original_item, $field, $entity_type, $id);
            }
          }
        }
      }

      // Add new usage entries for newly added files.
      foreach ($items as $item) {
        if (isset($item['fid']) && (int) $item['fid'] > 0 && !in_array($item['fid'], $original_fids)) {
          $file = (object) $item;
          file_usage_add($file, 'file', $entity_type, $id);
        }
      }
    }
  }
}

/**
 * Implements hook_field_delete().
 */
function cmp_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  // Delete all file usages within this entity.
  foreach ($items as $delta => $item) {
    if (isset($item['fid']) && (int) $item['fid'] > 0) {
      file_field_delete_file($item, $field, $entity_type, $id, 0);
    }
  }
}

/**
 * Implements hook_field_delete_revision().
 */
function cmp_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  foreach ($items as $delta => $item) {
    if (isset($item['fid']) && (int) $item['fid'] > 0) {
      // Decrement the file usage count by 1 and delete the file if possible.
      if (file_field_delete_file($item, $field, $entity_type, $id)) {
        $items[$delta] = NULL;
      }
    }
  }
}

/**
 * Implements hook_field_delete_field().
 */
function cmp_field_delete_field($field) {
  if ($field['type'] == 'cmp') {
    // The value of a managed_file element can be an array if #extended == TRUE.
    $fid = (is_array($field['settings']['default_image']) ? $field['settings']['default_image']['fid'] : $field['settings']['default_image']);
    if ($fid && ($file = file_load($fid))) {
      file_usage_delete($file, 'cmp', 'default_image', $field['id']);
    }
  }
}

/**
 * Implements hook_field_update_field().
 */
function cmp_field_update_field($field, $prior_field, $has_data) {
  if ($field['type'] != 'cmp') {
    return;
  }

  // The value of a managed_file element can be an array if #extended == TRUE.
  $fid_new = (is_array($field['settings']['default_image']) ? $field['settings']['default_image']['fid'] : $field['settings']['default_image']);
  $fid_old = (is_array($prior_field['settings']['default_image']) ? $prior_field['settings']['default_image']['fid'] : $prior_field['settings']['default_image']);

  $file_new = $fid_new ? file_load($fid_new) : FALSE;

  if ($fid_new != $fid_old) {

    // Is there a new file?
    if ($file_new) {
      $file_new->status = FILE_STATUS_PERMANENT;
      file_save($file_new);
      file_usage_add($file_new, 'cmp', 'default_image', $field['id']);
    }

    // Is there an old file?
    if ($fid_old && ($file_old = file_load($fid_old))) {
      file_usage_delete($file_old, 'cmp', 'default_image', $field['id']);
    }
  }

  // If the upload destination changed, then move the file.
  if ($file_new && (file_uri_scheme($file_new->uri) != $field['settings']['uri_scheme'])) {
    $directory = $field['settings']['uri_scheme'] . '://default_images/';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
    file_move($file_new, $directory . $file_new->filename);
  }
}
