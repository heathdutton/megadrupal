<?php
/**
 * @file
 * Contains install and uninstall functionality.
 */

/**
 * Implements hook_requirements().
 */
function shopify_requirements($phase) {
  $t = get_t();
  if ($phase == 'install') {
    module_load_install('shopify_api');
    $api_requirements = shopify_api_requirements('runtime');
    $requirements = array_merge($api_requirements);
    // Shopify library not installed.
    if ($requirements['shopify']['severity'] != REQUIREMENT_OK) {
      $requirements['shopify_ecommerce'] = array(
        'title' => $t('Shopify eCommerce'),
        'description' => $t('Unable to install Shopify eCommerce. Shopify API library not installed. Check the help section at <a href="@shopify_api_config">/admin/config/services/shopify</a>.', array('@shopify_api_config' => url('admin/config/services/shopify'))),
        'severity' => REQUIREMENT_ERROR,
      );
      return $requirements;
    }

    // No credentials provided for Shopify API.
    $client = shopify_api_client();
    if (!$client instanceof ShopifyClient) {
      $requirements['shopify_ecommerce'] = array(
        'title' => $t('Shopify eCommerce'),
        'description' => $t('Unable to install Shopify eCommerce. Do you have a <a href="@shopify_website">Shopify Account</a>? If so, make sure you\'ve entered your API credentials at <a href="@shopify_api_config">/admin/config/services/shopify</a>', array(
          '@shopify_website' => 'https://www.shopify.com/?ref=bonify',
          '@shopify_api_config' => url('admin/config/services/shopify')
        )),
        'severity' => REQUIREMENT_ERROR,
      );
      return $requirements;
    }
    // Attempt to connect and get basic store information.
    try {
      $client = shopify_api_client();
      if ($client) {
        $client->call('GET', '/admin/shop.json');
      }
    } catch (Exception $e) {
      $requirements['shopify_ecommerce'] = array(
        'title' => $t('Shopify eCommerce'),
        'description' => $t('Cannot connect your credentials to the Shopify API. Do you have a <a href="@shopify_website">Shopify Account</a>? <a href="@shopif_api">Are your API settings correct</a>?', array(
          '@shopify_website' => 'https://www.shopify.com/?ref=bonify',
          '@shopify_api' => url('admin/config/services/shopify')
        )),
        'severity' => REQUIREMENT_ERROR,
      );
      return $requirements;
    }
  }
}

/**
 * Implements hook_schema().
 */
function shopify_schema() {
  $schema['shopify_products'] = array(
    'description' => 'Base table for storing Shopify products.',
    'fields' => array(
      'id' => array(
        'description' => 'Shopify product ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'product_id' => array(
        'type' => 'int',
        'description' => 'Product ID',
        'size' => 'big',
      ),
      'variant_id' => array(
        'type' => 'int',
        'description' => 'Variant ID',
        'default' => 0,
        'size' => 'big',
      ),
      'title' => array(
        'description' => 'Product title',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'body_html' => array(
        'description' => 'Product body HTML',
        'type' => 'text',
      ),
      'handle' => array(
        'description' => 'Product handle',
        'type' => 'varchar',
        'length' => 128,
      ),
      'product_type' => array(
        'description' => 'Product type',
        'type' => 'varchar',
        'length' => 32,
      ),
      'published_scope' => array(
        'description' => 'Published scope',
        'type' => 'varchar',
        'length' => 32,
      ),
      'vendor' => array(
        'description' => 'Vendor',
        'type' => 'varchar',
        'length' => 32,
      ),
      'tags' => array(
        'description' => 'Tags',
        'type' => 'varchar',
        'length' => 512,
      ),
      'options' => array(
        'description' => 'Options',
        'type' => 'blob',
      ),
      'barcode' => array(
        'description' => 'Barcode',
        'type' => 'varchar',
        'length' => 32,
      ),
      'compare_at_price' => array(
        'description' => 'Product comparison price',
        'type' => 'numeric',
        'scale' => 2,
        'precision' => 10,
      ),
      'fulfillment_service' => array(
        'description' => 'Fulfillment Service',
        'type' => 'varchar',
        'length' => 16,
      ),
      'grams' => array(
        'description' => 'Grams',
        'type' => 'int',
      ),
      'inventory_management' => array(
        'description' => 'Inventory management',
        'type' => 'varchar',
        'length' => 32,
      ),
      'inventory_policy' => array(
        'description' => 'Inventory policy',
        'type' => 'varchar',
        'length' => 32,
      ),
      'inventory_quantity' => array(
        'description' => 'Inventory quantity',
        'type' => 'int',
      ),
      'old_inventory_quantity' => array(
        'description' => 'Old inventory quantity',
        'type' => 'int',
      ),
      'option_values' => array(
        'description' => 'Option values',
        'type' => 'text',
      ),
      'price' => array(
        'description' => 'Product price',
        'type' => 'numeric',
        'scale' => 2,
        'precision' => 10,
      ),
      'requires_shipping' => array(
        'description' => 'Requires shipping',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'sku' => array(
        'description' => 'SKU',
        'type' => 'varchar',
        'length' => 64,
      ),
      'taxable' => array(
        'description' => 'Requires shipping',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'weight' => array(
        'description' => 'Product weight',
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
      ),
      'weight_unit' => array(
        'description' => 'Weight unit',
        'type' => 'varchar',
        'length' => 8,
      ),
      'created_at' => array(
        'description' => 'Created at',
        'type' => 'int',
      ),
      'published_at' => array(
        'description' => 'Published at',
        'type' => 'int',
      ),
      'updated_at' => array(
        'description' => 'Updated at',
        'type' => 'int',
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Modify product and variant ID columns to be large INT.
 */
function shopify_update_7100() {
  db_change_field('shopify_products', 'product_id', 'product_id', array(
    'type' => 'int',
    'description' => 'Product ID',
    'size' => 'big',
  ));
  db_change_field('shopify_products', 'variant_id', 'variant_id', array(
    'type' => 'int',
    'description' => 'Variant ID',
    'default' => 0,
    'size' => 'big',
  ));
}

/**
 * Modify product handler to be a larger field.
 */
function shopify_update_7101() {
  db_change_field('shopify_products', 'handle', 'handle', array(
    'description' => 'Product handle',
    'type' => 'varchar',
    'length' => 128,
  ));
}

/**
 * Update options column to accommodate larger variant data.
 */
function shopify_update_7102() {
  $options_column = array(
    'type' => 'blob',
    'description' => 'Options'
  );
  db_change_field('shopify_products', 'options', 'options', $options_column);
}

/**
 * Update tags column to accommodate more tags.
 */
function shopify_update_7103() {
  $tags_column = array(
    'type' => 'varchar',
    'length' => 512,
  );
  db_change_field('shopify_products', 'tags', 'tags', $tags_column);
}

/**
 * Implements hook_install().
 */
function shopify_install() {

  shopify_products_reset_sync_datestamp();

  // Set the shop info on install.
  $client = shopify_api_client();
  $info = $client->call('GET', '/admin/shop.json');
  variable_set('shopify_store_info', $info);

  //  Create Shopify Tags vocabulary
  $vocabulary = new stdClass;
  $vocabulary->name = 'Shopify Tags';
  $vocabulary->machine_name = 'shopify_tags';
  taxonomy_vocabulary_save($vocabulary);

  // Create Shopify Collections vocabulary
  $vocabulary = new stdClass;
  $vocabulary->name = 'Shopify Collections';
  $vocabulary->machine_name = 'shopify_collections';
  taxonomy_vocabulary_save($vocabulary);

  // Create product image field
  field_create_field(
    array(
      'field_name' => 'shopify_product_images',
      'type' => 'image',
      'cardinality' => -1,
      'settings' => array(),
    ));


  // Create product image field on product entity
  $instance = array(
    'field_name' => 'shopify_product_images',
    'entity_type' => 'shopify_product',
    'bundle' => 'shopify_product',
    'label' => 'Shopify Product Images',
    'required' => FALSE,
    'widget' => array(
      'type' => 'image_image',
      'settings' => array('image_style' => 'thumbnail', 'image_link' => ''),
      'weight' => 0,
    ),
    'display' => array(
      'default' =>
        array(
          'label' => 'hidden',
          'type' => 'image',
          'weight' => '0',
          'settings' =>
            array(
              'image_style' => 'shopify_product_thumbnail',
              'image_link' => '',
            ),
          'module' => 'image',
        ),
    )
  );

  field_create_instance($instance);

  // Create collections published field.
  field_create_field(
    array(
      'field_name' => 'shopify_collection_published_at',
      'type' => 'datestamp',
      'cardinality' => 1,
      'settings' => array(),
    ));


  // Create collections published instance.
  $instance = array(
    'field_name' => 'shopify_collection_published_at',
    'entity_type' => 'taxonomy_term',
    'bundle' => 'shopify_collections',
    'label' => 'Shopify Collection Published Date',
    'required' => FALSE,
  );

  field_create_instance($instance);

  // Create Shopify Tags term reference
  field_create_field(
    array(
      'field_name' => 'shopify_product_tags',
      'type' => 'taxonomy_term_reference',
      'cardinality' => -1,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'shopify_tags',
            'parent' => 0
          ),
        )
      ),
    )
  );


  // Create product tags term reference on product entity
  $instance = array(
    'field_name' => 'shopify_product_tags',
    'entity_type' => 'shopify_product',
    'bundle' => 'shopify_product',
    'label' => 'Shopify Product Tags',
    'required' => FALSE,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => 1,
    ),
    'display' => array(
      array(
        'default' =>
          array(
            'label' => 'hidden',
            'type' => 'taxonomy_term_reference_link',
            'settings' =>
              array(),
            'module' => 'taxonomy',
            'weight' => 1,
          ),
        'label' => 'hidden',
        'type' => 'taxonomy_term_reference_link',
        'settings' =>
          array(),
        'module' => 'taxonomy',
        'weight' => 33,
      ),
      'default' =>
        array(
          'label' => 'hidden',
          'type' => 'taxonomy_term_reference_link',
          'weight' => '4',
          'settings' =>
            array(),
          'module' => 'taxonomy',
        ),
    )
  );

  field_create_instance($instance);

  // Create Shopify Collections term reference
  field_create_field(
    array(
      'field_name' => 'shopify_product_collections',
      'type' => 'taxonomy_term_reference',
      'cardinality' => -1,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'shopify_collections',
            'parent' => 0
          ),
        ),
      ),
    )
  );

  // Create product collections term reference on product entity
  $instance = array(
    'field_name' => 'shopify_product_collections',
    'entity_type' => 'shopify_product',
    'bundle' => 'shopify_product',
    'label' => 'Shopify Collections',
    'required' => FALSE,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => 2,
    ),
    'display' =>
      array(
        'default' =>
          array(
            'label' => 'hidden',
            'type' => 'taxonomy_term_reference_link',
            'weight' => '5',
            'settings' =>
              array(),
            'module' => 'taxonomy',
          ),
      ),
  );

  field_create_instance($instance);

  // Create Shopify Collections Image field
  field_create_field(
    array(
      'field_name' => 'shopify_collection_image',
      'type' => 'image',
      'cardinality' => 1,
      'settings' => array(),
    )
  );

  // Create Shopify Collections Image on collections term entity
  $instance = array(
    'field_name' => 'shopify_collection_image',
    'entity_type' => 'taxonomy_term',
    'bundle' => 'shopify_collections',
    'label' => 'Shopify Collection Image',
    'required' => FALSE,
    'widget' => array(
      'type' => 'image_image',
      'settings' => array('image_style' => 'thumbnail', 'image_link' => ''),
    ),
  );

  field_create_instance($instance);

  // Create field to track the collection ID from Shopify.
  field_create_field(
    array(
      'field_name' => 'shopify_collection_id',
      'type' => 'number_integer',
      'cardinality' => 1,
      'settings' => array(),
    )
  );

  $instance = array(
    'field_name' => 'shopify_collection_id',
    'entity_type' => 'taxonomy_term',
    'bundle' => 'shopify_collections',
    'label' => 'Shopify Collection ID',
    'required' => TRUE,
  );

  field_create_instance($instance);

  $product_settings = array(
    'view_modes' =>
      array(
        'full' =>
          array(
            'custom_settings' => FALSE,
          ),
        'teaser' =>
          array(
            'custom_settings' => FALSE,
          ),
        'token' =>
          array(
            'custom_settings' => FALSE,
          ),
        'search_index' =>
          array(
            'custom_settings' => FALSE,
          ),
        'search_result' =>
          array(
            'custom_settings' => FALSE,
          ),
      ),
    'extra_fields' =>
      array(
        'form' =>
          array(
            'metatags' =>
              array(
                'weight' => '3',
              ),
          ),
        'display' =>
          array(
            'product_id' =>
              array(
                'default' =>
                  array(
                    'weight' => '27',
                    'visible' => FALSE,
                  ),
              ),
            'variant_id' =>
              array(
                'default' =>
                  array(
                    'weight' => '26',
                    'visible' => FALSE,
                  ),
              ),
            'body_html' =>
              array(
                'default' =>
                  array(
                    'weight' => '1',
                    'visible' => TRUE,
                  ),
              ),
            'price' =>
              array(
                'default' =>
                  array(
                    'weight' => '6',
                    'visible' => FALSE,
                  ),
              ),
            'updated_at' =>
              array(
                'default' =>
                  array(
                    'weight' => '18',
                    'visible' => FALSE,
                  ),
              ),
            'created_at' =>
              array(
                'default' =>
                  array(
                    'weight' => '22',
                    'visible' => FALSE,
                  ),
              ),
            'published_at' =>
              array(
                'default' =>
                  array(
                    'weight' => '21',
                    'visible' => FALSE,
                  ),
              ),
            'title' =>
              array(
                'default' =>
                  array(
                    'weight' => '5',
                    'visible' => FALSE,
                  ),
              ),
            'handle' =>
              array(
                'default' =>
                  array(
                    'weight' => '9',
                    'visible' => FALSE,
                  ),
              ),
            'product_type' =>
              array(
                'default' =>
                  array(
                    'weight' => '7',
                    'visible' => FALSE,
                  ),
              ),
            'published_scope' =>
              array(
                'default' =>
                  array(
                    'weight' => '23',
                    'visible' => FALSE,
                  ),
              ),
            'vendor' =>
              array(
                'default' =>
                  array(
                    'weight' => '24',
                    'visible' => FALSE,
                  ),
              ),
            'barcode' =>
              array(
                'default' =>
                  array(
                    'weight' => '25',
                    'visible' => FALSE,
                  ),
              ),
            'compare_at_price' =>
              array(
                'default' =>
                  array(
                    'weight' => '20',
                    'visible' => FALSE,
                  ),
              ),
            'fulfillment_service' =>
              array(
                'default' =>
                  array(
                    'weight' => '19',
                    'visible' => FALSE,
                  ),
              ),
            'grams' =>
              array(
                'default' =>
                  array(
                    'weight' => '12',
                    'visible' => FALSE,
                  ),
              ),
            'inventory_management' =>
              array(
                'default' =>
                  array(
                    'weight' => '11',
                    'visible' => FALSE,
                  ),
              ),
            'inventory_policy' =>
              array(
                'default' =>
                  array(
                    'weight' => '10',
                    'visible' => FALSE,
                  ),
              ),
            'inventory_quantity' =>
              array(
                'default' =>
                  array(
                    'weight' => '13',
                    'visible' => FALSE,
                  ),
              ),
            'requires_shipping' =>
              array(
                'default' =>
                  array(
                    'weight' => '14',
                    'visible' => FALSE,
                  ),
              ),
            'sku' =>
              array(
                'default' =>
                  array(
                    'weight' => '17',
                    'visible' => FALSE,
                  ),
              ),
            'taxable' =>
              array(
                'default' =>
                  array(
                    'weight' => '16',
                    'visible' => FALSE,
                  ),
              ),
            'weight' =>
              array(
                'default' =>
                  array(
                    'weight' => '15',
                    'visible' => FALSE,
                  ),
              ),
            'weight_unit' =>
              array(
                'default' =>
                  array(
                    'weight' => '8',
                    'visible' => FALSE,
                  ),
              ),
            'add_to_cart' =>
              array(
                'default' =>
                  array(
                    'weight' => '2',
                    'visible' => TRUE,
                  ),
              ),
          ),
      ),
  );

  variable_set('field_bundle_settings_shopify_product__shopify_product', $product_settings);
  // Please keep the product settings last.

}

/**
 * Implements hook_uninstall().
 */
function shopify_uninstall() {
  field_delete_field('shopify_product_images');
  field_delete_field('shopify_collection_image');
  field_delete_field('shopify_product_tags');
  field_delete_field('shopify_product_collections');
  field_delete_field('shopify_collection_id');
  field_delete_field('shopify_collection_published_at');
  $vocabulary = taxonomy_vocabulary_machine_name_load('shopify_tags');
  taxonomy_vocabulary_delete($vocabulary->vid);
  $vocabulary = taxonomy_vocabulary_machine_name_load('shopify_collections');
  taxonomy_vocabulary_delete($vocabulary->vid);
  variable_del('shopify_last_product_sync');
  variable_del('shopify_last_collection_sync');
  variable_del('shopify_store_info');
  variable_del('shopify_cron_sync_products');
  variable_del('shopify_cron_sync_collections');
  variable_del('shopify_cron_sync_time');
  variable_del('shopify_webhooks_debug');
  variable_del('shopify_last_registered_host');
  field_purge_batch(20);
}
