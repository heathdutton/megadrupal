<?php
/**
 * @file
 * Main module file for warning
 *
 * warning places a simple fieldset and text above comment and registration
 * forms with configuable messages, such as warning users that comments are
 * moderated, and they should not put commercial URLs into their comments.
 */


global $warning_types;
$warning_types = array(t('Disabled'), t('Warning'), t('Disclaimer'), t('Caution'), t('Important'), t('Note'), t('Tip'));

/**
 * Implements hook_help().
 */
function warning_help($path, $arg) {
  switch ($path) {
    case 'admin/config/user-interface/warning':
      $links = array(
        '!permissions-page' => l(t('permissions page'), 'admin/people/permissions'),
      );
      return '<p>' .
                t('Warning can be useful in discouraging people from including
                    advertising links in comments or during registration when moderation
                    is enabled. Like safety cameras they can prevent harm and effort
                    when placed visibly.') .
              '</p><p>' .
                t('You can modify the various warning messages below. If you want
                    to disable one or more of these warning messages for certain
                    roles, you can do so on the !permissions-page. You can also
                    disable a warning for all users by selecting type "Disabled".', $links) .
              '</p><p>' .
                t('<strong>NOTE:</strong> By default all warnings are enabled when
                    the module is activated.') .
              '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function warning_menu() {
  $items['admin/config/user-interface/warning'] = array(
    'title' => 'Warning messages',
    'description' => 'Configure warning settings to encourage or discourage certain behaviour on form submission.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('warning_admin_settings'),
    'access arguments' => array('administer warnings'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function warning_permission() {
  return array(
    'administer warnings' => array(
      'title' => t('Administer warnings'),
      'description' => t('Administer settings for the warnings module.'),
    ),
    'disable register warning' => array(
      'title' => t('Skip register warnings'),
      'description' => t('Don\'t display warning message on the registration form.'),
    ),
    'disable comment warning' => array(
      'title' => t('Skip comment warnings'),
      'description' => t('Don\'t display warning message on the comment form.'),
    ),
  );
}

// Module configuration page.
function warning_admin_settings() {
  global $warning_types;
  // TODO: Add a description ?
  // TODO: Take into account whether moderation is enabled
  $form['warning_register_type'] = array(
    '#type' => 'select',
    '#title' => t('Register form warning type'),
    '#default_value' => variable_get('warning_register_type', 1),
    '#options' => $warning_types,
  );
  $form['warning_register_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Register form warning text'),
    '#default_value' => variable_get('warning_register_text', ''),
    '#rows' => 3,
  );
  $form['warning_comment_type'] = array(
    '#type' => 'select',
    '#title' => t('Comment form warning type'),
    '#default_value' => variable_get('warning_comment_type', 1),
    '#options' => $warning_types,
  );
  $form['warning_comment_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Comment form warning'),
    '#default_value' => variable_get('warning_comment_text', ''),
    '#rows' => 3,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter.
 */
function warning_form_user_register_alter(&$form, $form_state) {
  // TODO: Take into account whether moderation is enabled
  global $warning_types;
  if ( !user_access('disable register warning') && variable_get('warning_register_type', 1) ) {
    $form['warning'] = array(
      '#type' => 'fieldset',
      '#title' => $warning_types[variable_get('warning_register_type', 1)],
      '#description' => variable_get('warning_register_text', ''),
      '#weight' => -9,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter.
 */
function warning_form_comment_form_alter(&$form, $form_state) {
  global $warning_types;
  if ( !user_access('disable comment warning') && variable_get('warning_comment_type', 1) ) {
    $form['warning'] = array(
      '#type' => 'fieldset',
      '#title' => $warning_types[variable_get('warning_comment_type', 1)],
      '#description' => variable_get('warning_comment_text', ''),
      '#weight' => -9,
    );
  }
}
