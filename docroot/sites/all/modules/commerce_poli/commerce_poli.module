<?php

/**
 * @file
 * Core functions for POLi Payments module.
 */

// POLi Payments API URL.
define('COMMERCE_POLI_API', 'https://poliapi.apac.paywithpoli.com/api');

function commerce_poli_menu() {
  $items['commerce_poli/nudge/%'] = array(
    'page callback'   => 'commerce_poli_process_transaction',
    'page arguments'  => array(2),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_poli_commerce_payment_method_info() {
  $payment_methods['poli'] = array(
    'base'                 => 'commerce_poli',
    'title'                => t('POLi Payments'),
    'short_title'          => t('POLi'),
    'description'          => t('POLi Payments'),
    'terminal'             => FALSE,
    'offsite'              => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_poli_settings_form($settings = array()) {
  $form['merchant_code'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Merchant code'),
    '#default_value' => isset($settings['merchant_code']) ? $settings['merchant_code'] : '',
    '#required'      => TRUE,
  );

  $form['authentication_code'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Authentication code'),
    '#default_value' => isset($settings['authentication_code']) ? $settings['authentication_code'] : '',
    '#required'      => TRUE,
  );

  $form['debug'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Debug mode'),
    '#default_value' => isset($settings['debug']) ? $settings['debug'] : FALSE,
    '#description'   => t('Log all POLi Payments API responses.'),
  );

  return $form;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_poli_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build 'Transaction/Initiate' method data.
  $data = array(
    'Amount'              => commerce_currency_amount_to_decimal($wrapper->commerce_order_total->amount->value(), $wrapper->commerce_order_total->currency_code->value()),
    'CurrencyCode'        => $wrapper->commerce_order_total->currency_code->value(),
    'MerchantReference'   => $wrapper->order_id->value(),
    'MerchantHomepageURL' => url('<front>', array('absolute' => TRUE)),
    'SuccessURL'          => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'FailureURL'          => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'CancellationURL'     => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'NotificationURL'     => url('commerce_poli/nudge/' . $payment_method['instance_id'], array('absolute' => TRUE)),
  );

  // Execute 'Transaction/Initiate' method.
  $url      = COMMERCE_POLI_API . '/Transaction/Initiate';
  $response = drupal_http_request($url, array(
    'method'  => 'POST',
    'data'    => json_encode($data),
    'headers' => array(
      'Content-Type'  => 'application/json',
      'Authorization' => _commerce_poli_authenication_string($payment_method['settings']),
    ),
  ));

  if ($response->code == 200) {
    $response->data = json_decode($response->data);
    if ($response->data->Success && isset($response->data->NavigateURL)) {
      // Set POLi payment URL.
      $form['#action'] = $response->data->NavigateURL;

      // Create a payment transaction.
      $transaction                = commerce_payment_transaction_new('poli', $order->order_id);
      $transaction->instance_id   = $payment_method['instance_id'];
      $transaction->remote_id     = $response->data->TransactionRefNo;
      $transaction->amount        = $wrapper->commerce_order_total->amount->value();
      $transaction->currency_code = $wrapper->commerce_order_total->currency_code->value();
      $transaction->status        = COMMERCE_PAYMENT_STATUS_PENDING;
      commerce_payment_transaction_save($transaction);
    }
  }

  // Log response.
  if ($payment_method['settings']['debug']) {
    watchdog('commerce_poli', '<strong>' . t('Transaction/Initiate response') . ':</strong><br /><pre>' . print_r($response, TRUE) . '</pre>');
  }

  if (isset($transaction)) {
    $form['submit'] = array(
      '#type'   => 'submit',
      '#value'  => t('Proceed to POLi Payments'),
      '#weight' => 100,
    );

    return $form;
  }
  else {
    // Error.
  }
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_poli_redirect_form_validate($order, $payment_method) {
  $transaction = commerce_poli_process_transaction($payment_method['instance_id'], TRUE);

  if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    return FALSE;
  }
}

/**
 * Process POLi transaction as provided by token.
 */
function commerce_poli_process_transaction($instance_id, $return = FALSE) {
  if (isset($_POST['Token']) || isset($_GET['token'])) {
    // Get token provided by POLi Payments.
    $token = isset($_POST['Token']) ? urlencode($_POST['Token']) : urlencode($_GET['token']);

    // Load payment method.
    $payment_method = commerce_payment_method_instance_load($instance_id);

    // Execute 'Transaction/GetTransaction' method.
    $url      = COMMERCE_POLI_API . '/Transaction/GetTransaction?token=' . $token;
    $response = drupal_http_request($url, array(
      'method'  => 'GET',
      'headers' => array(
        'Content-Type'  => 'application/json',
        'Authorization' => _commerce_poli_authenication_string($payment_method['settings']),
      ),
    ));

    if ($response->code == 200) {
      $response->data = json_decode($response->data);

      // Update payment transaction.
      $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $response->data->TransactionRefNo));
      $transaction  = reset($transactions);

      // Prevent individual transaction being processed multiple times.
      if ($transaction->status == COMMERCE_PAYMENT_STATUS_PENDING) {
        $transaction->remote_id             = $response->data->TransactionRefNo;
        $transaction->amount                = commerce_currency_decimal_to_amount($response->data->AmountPaid, $response->data->CurrencyCode);
        $transaction->currency_code         = $response->data->CurrencyCode;
        $transaction->payload[REQUEST_TIME] = $response->data;
        $transaction->remote_status         = $response->data->TransactionStatusCode;

        switch ($response->data->TransactionStatusCode) {
          case 'Initiated':
            break;

          case 'FinancialInstitutionSelected':
            break;

          case 'EULAAccepted':
            break;

          case 'InProcess':
            break;

          case 'Completed':
            $transaction->status  = COMMERCE_PAYMENT_STATUS_SUCCESS;
            $transaction->message = t('The payment has completed.');
            break;

          case 'Unknown':
            break;

          case 'Failed':
          case 'ReceiptUnverified':
          case 'Cancelled':
          case 'TimedOut':
            $transaction->status  = COMMERCE_PAYMENT_STATUS_FAILURE;
            $transaction->message = $response->data->ErrorMessage;
            break;
        }

        // Save the transaction information.
        commerce_payment_transaction_save($transaction);
      }
    }

    // Log response.
    if ($payment_method['settings']['debug']) {
      watchdog('commerce_poli', '<strong>' . t('Transaction/GetTransaction response') . ':</strong><br /><pre>' . print_r($response, TRUE) . '</pre>');
    }

    if (isset($transaction) && $return) {
      return $transaction;
    }
  }
}

/**
 * Helper function; build authentication string.
 */
function _commerce_poli_authenication_string($settings = array()) {
  return 'Basic ' . base64_encode("{$settings['merchant_code']}:{$settings['authentication_code']}");
}
