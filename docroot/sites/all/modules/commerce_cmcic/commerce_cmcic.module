<?php

/**
 * @file
 * The main file of the module.
 */

/**
 * Implements hook_menu().
 */
function commerce_cmcic_menu() {

  $items = array();

  $items['commerce_cmcic/response'] = array(
    'title' => 'CM-CIC paiement response',
    'page callback' => 'commerce_cmcic_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_cmcic_commerce_payment_method_info() {
  $payment_methods = array();

  $display_title = theme('cmcic_icons_title');
  $icons = theme('cmcic_icons_payment');
  $display_title .= '<div class="commerce-cmcic-icons"><span class="label">' . t('Includes:') . '</span>' . implode(' ', $icons) . '</div>';

  $payment_methods['commerce_cmcic'] = array(
    'base' => 'commerce_cmcic',
    'title' => t('Credit Mutuel - CIC'),
    'short_title' => t('CM-CIC'),
    'display_title' => $display_title,
    'description' => t('CM-CIC Payments'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}


/**
 * Payment method callback: settings form.
 */
function commerce_cmcic_settings_form($settings = NULL) {
  $form = array();

  $form['version'] = array(
    '#type' => 'textfield',
    '#title' => t('Version number'),
    '#description' => t('The number of the version of the payment kit.'),
    '#default_value' => isset($settings['version']) ? $settings['version'] : '3.0',
    '#required' => TRUE,
  );
  $form['tpe'] = array(
    '#type' => 'textfield',
    '#title' => t('TPE number'),
    '#description' => t('The TPE number of your CM-CIC account on 7 characters (eg. 1234567).'),
    '#default_value' => $settings['tpe'],
    '#required' => TRUE,
  );
  $form['company'] = array(
    '#type' => 'textfield',
    '#title' => t('Company number'),
    '#description' => t('The company number of your CM-CIC account.'),
    '#default_value' => $settings['company'],
    '#required' => TRUE,
  );
  $form['security_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Security key'),
    '#description' => t('The security key based on 40 characters.'),
    '#default_value' => $settings['security_key'],
    '#required' => TRUE,
  );
  $form['bank_type'] = array(
    '#type' => 'radios',
    '#title' => t('Bank type'),
    '#description' => t('The bank type. This will define the URLs.'),
    '#options' => array(
      'cm' => t('Cr&eacute;dit Mutuel'),
      'cic' => t('CIC'),
      'obc' => t('OBC'),
    ),
    '#default_value' => isset($settings['bank_type']) ? $settings['bank_type'] : 'cm',
  );
  $form['server_type'] = array(
    '#type' => 'radios',
    '#title' => t('CM-CIC server'),
    '#options' => array(
      'test' => ('Test - use for testing'),
      'production' => ('Production - use for processing real transactions'),
    ),
    '#default_value' => isset($settings['server_type']) ? $settings['server_type'] : 'test',
  );

  return $form;
}


/**
 * Payment method callback: adds a message and CSS to the submission form.
 */
function commerce_cmcic_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['commerce_cmcic_information'] = array(
    '#markup' => '<span class="commerce-commerce-cmcic-info">' . t('(Continue with checkout to complete payment via CM-CIC.)') . '</span>',
  );

  return $form;
}

/**
 * Create the form to redirect user to payment page.
 */
function commerce_cmcic_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['tpe'])) {
    drupal_set_message(t('CM-CIC is not configured for use. No CM-CIC TPE has been specified.'), 'error');
    return array();
  }
  elseif (empty($payment_method['settings']['company'])) {
    drupal_set_message(t('CM-CIC is not configured for use. No CM-CIC company number has been specified.'), 'error');
    return array();
  }
  elseif (empty($payment_method['settings']['security_key'])) {
    drupal_set_message(t('CM-CIC is not configured for use. No CM-CIC security key has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_cmcic_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}


/**
 * Builds a CM-CIC form from an order object.
 *
 * @param object $order
 *   The fully loaded order being paid for.
 * @param array $settings
 *   An array of settings used to build out the form, including:
 *   - tpe: The TPE number of the CM-CIC account.
 *   - company : The company number of the CM-CIC account.
 *   - bank_type : The bank chosen.
 *   - server_type : The flag of the environnement type.
 *
 * @return array
 *   A renderable form array.
 */
function commerce_cmcic_order_form($form, &$form_state, $order, $settings) {

  global $language;

  // Include required file.
  require_once 'includes/commerce_cmcic.inc';

  /********************************/
  /**** GET ORDER INFORMATIONS ****/
  /********************************/

  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  /***********************************************/
  /**** PREPARE ALL VARIABLES FOR PAYMENT KIT ****/
  /***********************************************/

  $s_options = "";

  // Reference: unique, alphaNum (A-Z a-z 0-9), 12 characters max.
  $s_reference = commerce_cmcic_invoice($order);

  // Amount : format  "xxxxx.yy" (no spaces).
  $s_amount = round(commerce_currency_amount_to_decimal($amount, $currency_code), 2);

  // Currency : ISO 4217 compliant.
  $s_currency_code = $currency_code;

  // Free text : a bigger reference, session context for the return on the
  // merchant website.
  $s_free_text = "";

  // Transaction date : format d/m/y:h:m:s.
  $s_date = date("d/m/Y:H:i:s");

  // Language of the company code.
  $s_language = strtoupper($language->language);

  // Customer email.
  $s_email = $order->mail;

  // Between 2 and 4.
  $s_nbr_ech = "";

  // Date echeance 1 - format dd/mm/yyyy.
  $s_date_echeance1 = "";

  // Montant echeance 1 - format  "xxxxx.yy" (no spaces).
  $s_montant_echeance1 = "";

  // Date echeance 2 - format dd/mm/yyyy.
  $s_date_echeance2 = "";

  // Montant echeance 2 - format  "xxxxx.yy" (no spaces).
  $s_montant_echeance2 = "";

  // Date echeance 3 - format dd/mm/yyyy
  $s_date_echeance3 = "";

  // Montant echeance 3 - format  "xxxxx.yy" (no spaces).
  $_montant_echeance3 = "";

  // Date echeance 4 - format dd/mm/yyyy.
  $s_date_echeance4 = "";

  // Montant echeance 4 - format  "xxxxx.yy" (no spaces).
  $s_montant_echeance4 = "";

  $settings['url_server'] = commerce_cmcic_get_server($settings['bank_type'],
                                              $settings['server_type']);

  $o_tpe = new CmcicTpe($settings, $s_language);
  $o_hmac = new CmcicHmac($o_tpe);

  // Control String for support.
  $ctl_hmac = sprintf(CMCIC_CTLHMAC, $o_tpe->sVersion, $o_tpe->sNumero, $o_hmac->computeHmac(sprintf(CMCIC_CTLHMACSTR, $o_tpe->sVersion, $o_tpe->sNumero)));

  // Data to certify.
  $php1_fields = sprintf(CMCIC_CGI1_FIELDS, $o_tpe->sNumero,
                                            $s_date,
                                            $s_amount,
                                            $s_currency_code,
                                            $s_reference,
                                            $s_free_text,
                                            $o_tpe->sVersion,
                                            $o_tpe->sLangue,
                                            $o_tpe->sCodeSociete,
                                            $s_email,
                                            $s_nbr_ech,
                                            $s_date_echeance1,
                                            $s_montant_echeance1,
                                            $s_date_echeance2,
                                            $s_montant_echeance2,
                                            $s_date_echeance3,
                                            $_montant_echeance3,
                                            $s_date_echeance4,
                                            $s_montant_echeance4,
                                            $s_options);

  // MAC computation.
  $s_mac = $o_hmac->computeHmac($php1_fields);

  /***********************/
  /**** GENERATE FORM ****/
  /***********************/

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  // Build the data array that will be translated into hidden form values.
  $data = array(
    'version' => $o_tpe->sVersion,
    'TPE' => $o_tpe->sNumero,
    'date' => $s_date,
    'montant' => $s_amount . $s_currency_code,
    'reference' => $s_reference,
    'MAC' => $s_mac,
    'url_retour' => $o_tpe->sUrlKO,
    'url_retour_ok' => $o_tpe->sUrlOK,
    'url_retour_err' => $o_tpe->sUrlKO,
    'lgue' => $o_tpe->sLangue,
    'societe' => $o_tpe->sCodeSociete,
    'texte-libre' => $s_free_text,
    'mail' => $s_email,

    // For split payment.
    'nbrech' => $s_nbr_ech,
    'dateech1' => $s_date_echeance1,
    'montantech1' => $s_montant_echeance1,
    'dateech2' => $s_date_echeance2,
    'montantech2' => $s_montant_echeance2,
    'dateech3' => $s_date_echeance3,
    'montantech3' => $_montant_echeance3,
    'dateech4' => $s_date_echeance4,
    'montantech4' => $s_montant_echeance4,
  );

  $form['#action'] = $o_tpe->sUrlPaiement;

  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to CM-CIC'),
  );

  return $form;
}

/**
 * Process the transaction and store informations.
 */
function commerce_cmcic_response() {

  // Get all response from the bank server.
  $payment_data = $_POST;

  watchdog('commerce_cmcic', 'The data received from bank server are @data', array('@data' => var_export($payment_data, TRUE)));

  // Get the order ID.
  list($order_id, $timestamp) = explode('-', $payment_data['reference']);
  if ($order_id) {
    $order = commerce_order_load($order_id);
  }
  else {
    $order = FALSE;
  }

  if (!$order) {
    watchdog('commerce_cmcic', 'The order is undefined.');
    drupal_exit();
  }

  // Include required file.
  require_once 'includes/commerce_cmcic.inc';

  // Get informations about payment method.
  $cmcic_rule = rules_config_load('commerce_payment_commerce_cmcic');
  $cmcic_payment_id = commerce_payment_method_instance_id('commerce_cmcic', $cmcic_rule);
  $payment_method = commerce_payment_method_instance_load($cmcic_payment_id);

  $settings = commerce_cmcic_get_settings($order, $payment_method);
  $settings = $settings + $payment_method['settings'];

  $settings['url_server'] = commerce_cmcic_get_server($settings['bank_type'], $settings['server_type']);

  // TPE init variables.
  $o_tpe = new CmcicTpe($settings);
  $o_hmac = new CmcicHmac($o_tpe);

  // Message Authentication.
  $cgi2_fields = sprintf(
    CMCIC_CGI2_FIELDS,
    $o_tpe->sNumero,
    $payment_data["date"],
    $payment_data['montant'],
    $payment_data['reference'],
    $payment_data['texte-libre'],
    $o_tpe->sVersion,
    $payment_data['code-retour'],
    $payment_data['cvx'],
    $payment_data['vld'],
    $payment_data['brand'],
    $payment_data['status3ds'],
    $payment_data['numauto'],
    isset($payment_data['motifrefus']) ? $payment_data['motifrefus'] : '',
    $payment_data['originecb'],
    $payment_data['bincb'],
    $payment_data['hpancb'],
    $payment_data['ipclient'],
    $payment_data['originetr'],
    $payment_data['veres'],
    $payment_data['pares']
  );

  watchdog('commerce_cmcic', 'The cgi2 fields string are @fields', array('@fields' => $cgi2_fields));

  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = commerce_cmcic_get_price_value($payment_data['montant']);

  // If there was already a transaction with the same transaction id.
  if (in_array($payment_data['code-retour'], array('Annulation',
                                                    'paiement',
                                                    'payetest')) &&
    !empty($payment_data['MAC']) &&
    $auth = commerce_cmcic_history_load($payment_data['MAC'])) {

    // Load the prior IPN's transaction and update that with the capture values.
    $transaction = commerce_payment_transaction_load($auth['transaction_id']);

  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('commerce_cmcic', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }

  $transaction->remote_id = $payment_data['numauto'];
  $transaction->amount = commerce_currency_decimal_to_amount($amount, $currency_code);
  $transaction->currency_code = $currency_code;
  $transaction->payload[REQUEST_TIME] = $payment_data;

  // Set the transaction's statuses based on the CM-CIC payment_status.
  $transaction->remote_status = $payment_data['code-retour'];

  if ($o_hmac->computeHmac($cgi2_fields) == strtolower($payment_data['MAC'])) {

    switch ($payment_data['code-retour']) {
      case "Annulation":
        // Payment has been refused
        // put your code here (email sending / Database update)
        // Attention : an autorization may still be delivered for this payment.
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = t('The authorization was voided.');
        break;

      case "payetest":
        // Payment has been accepted on the test server
        // put your code here (email sending / Database update).
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('The payment has completed.');
        break;

      case "paiement":
        // Payment has been accepted on the productive server
        // put your code here (email sending / Database update).
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('The payment has completed.');
        break;

      /*** ONLY FOR MULTIPART PAYMENT ***/
      case "paiement_pf2":
      case "paiement_pf3":
      case "paiement_pf4":
        // Payment has been accepted on the productive server for the part #N
        // return code is like paiement_pf[#N]
        // put your code here (email sending / Database update)
        // You have the amount of the payment part in $_POST['montantech'].
        break;

      case "Annulation_pf2":
      case "Annulation_pf3":
      case "Annulation_pf4":
        // Payment has been refused on the productive server for the part #N
        // return code is like Annulation_pf[#N]
        // put your code here (email sending / Database update)
        // You have the amount of the payment part in $_POST['montantech'].
        break;

    }

    // Save the transaction information.
    commerce_payment_transaction_save($transaction);
    $payment_data['transaction_id'] = $transaction->transaction_id;

    commerce_payment_redirect_pane_next_page($order);
    watchdog('commerce_cmcic',
             'Payment processed for Order @order_number with ID @txn_id.',
              array(
                '@txn_id' => $payment_data['numauto'],
                '@order_number' => $order->order_number,
              ), WATCHDOG_INFO);
    if (in_array($payment_data['code-retour'], array('paiement', 'payetest'))) {
      $order = commerce_order_status_update($order, 'completed');
    }

    // Add additional information.
    $payment_data['tpe'] = $o_tpe->sNumero;
    $payment_data['version'] = $o_tpe->sVersion;
    $payment_data['order_id'] = $order->order_id;

    // Save payment information.
    commerce_cmcic_save_data($payment_data);

    $receipt = CMCIC_CGI2_MACOK;

  }
  else {
    // Your code if the HMAC doesn't match.
    $receipt = CMCIC_CGI2_MACNOTOK . $cgi2_fields;
  }

  /**************************************/
  /**** Send receipt to CMCIC server ****/
  /**************************************/

  printf(CMCIC_CGI2_RECEIPT, $receipt);
  drupal_exit();

}

/**
 * Implements hook_theme().
 */
function commerce_cmcic_theme() {
  return array(
    'cmcic_icons_title' => array(
      'variables' => array(),
    ),
    'cmcic_icons_payment' => array(
      'variables' => array(),
    ),
  );
}


/**
 * Theme function for "cmcic_icons_title".
 *
 * @param array $variables
 *   Store data parameters.
 *
 * @return string
 *   The output of this theme.
 */
function theme_cmcic_icons_title(&$variables) {
  $icon_variables = array(
    'path' => drupal_get_path('module', 'commerce_cmcic') . '/kit/images/logocmcicpaiement.png',
    'title' => t('CM-CIC Payment'),
    'alt' => t('CM-CIC Payment'),
    'attributes' => array(
      'class' => array('commerce-cmcic-icon'),
    ),
  );
  $icon = theme('image', $icon_variables);
  $display_title = t('!logo <b>Credit card Payment</b>', array('!logo' => $icon));
  return $display_title;
}

/**
 * Theme function for "cmcic_icons_payment".
 *
 * @param array $variables
 *   Store data parameters.
 *
 * @return string
 *   The output of this theme.
 */
function theme_cmcic_icons_payment(&$variables) {
  $icons = array();

  $payment_methods = array(
    'visa' => t('Visa'),
    'mastercard' => t('Mastercard'),
    'amex' => t('American Express'),
    'cb' => t('CB'),
  );

  foreach ($payment_methods as $name => $title) {
    $variables = array(
      'path' => drupal_get_path('module', 'commerce_cmcic') . '/kit/images/' . $name . '.gif',
      'title' => $title,
      'alt' => $title,
      'attributes' => array(
        'class' => array('commerce-cmcic-icon'),
      ),
    );
    $icons[$name] = theme('image', $variables);
  }

  return $icons;
}
