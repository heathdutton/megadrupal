<?php


/**
 * @file
 * An implementation of the IMDB voting algorithm.
 */

function imdb_voting_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/config/search/imdb_voting':
      $output  = t('This page is used to configure the IMDB voting settings. IMDB-like votes are calculated using the formula <i>W = (Rv + Cm) / (v + m)</i>  where <i>W</i> = IMDB rating,  <i>R</i> = mean for the movie as a number from 0 to 10 (mean), <i>v</i> = number of votes for the movie, <i>m</i>  = minimum votes required to be listed in the Top 250, <i>C</i> = the mean vote across the whole report (currently 6.9)');
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function imdb_voting_menu() {
  $items['admin/config/search/imdb_voting'] = array(
    'title' => 'IMDB voting',
    'description' => 'Configure the minimal number of votes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imdb_voting_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Callback function for admin/settings/imdb_voting. Display the settings form.
 */
function imdb_voting_admin_settings() {
  $form = array();

  $form['imdb_minimum_votes'] = array(
    '#type' => 'textfield',
    '#title' => t("Enter numeric value for minimum number of votes (<i>m</i>)"),
    '#default_value' => variable_get('imdb_minimum_votes', 6)
  );
  return system_settings_form($form);
}

/** Explained in http://en.wikipedia.org/wiki/Internet_Movie_Database
 *  W = (Rv + Cm) / (v + m)
 */
function imdb_voting_votingapi_results_alter(&$cache, $entity_type, $entity_id) {
  // C from the formula
  $imdb_average_vote = variable_get('imdb_average_vote', 6.9);
  // m from the formula
  $imdb_minimum_votes = variable_get('imdb_minimum_votes', 6);
  // R = (SUM(value)/10)/COUNT(*)
  $sql  = "SELECT v.tag as tag, (((SUM(value)/COUNT(*)/10 * COUNT(*)) + :imdb_average_vote * :imdb_minimum_votes ) / (COUNT(*) + :imdb_minimum_votes ))*10 as imdb ";
  $sql .= "FROM {votingapi_vote} v ";
  $sql .= "WHERE v.entity_type = :type AND v.entity_id = :id AND v.value_type = 'percent' ";
  $sql .= "GROUP BY v.tag";

  $query = db_query($sql, array(
    'imdb_average_vote' => $imdb_average_vote,
    'imdb_minimum_votes' => $imdb_minimum_votes,
    'type' => $entity_type,
    'id' => $entity_id)
  );

  // VotingAPI wants the data in the following format:
  // $cache[$tag][$value_type][$aggregate_function] = $value;
  while ($row = $query->fetchAssoc()) {
    $cache[$row['tag']]['percent']['imdb'] = $row['imdb'];
  }
}

/**
 * Implementation of hook_votingapi_metadata_alter().
 */
function imdb_voting_votingapi_metadata_alter(&$data) {
  $data['functions']['imdb'] = array(
    'name' => t('imdb'),
    'description' => t('IMDB-like votes'),
    'module' => 'imdb_voting',
  );
}

function imdb_voting_cron() {
  $result = db_query("SELECT ROUND(SUM(value)/COUNT(*)/10, 1) AS average FROM {votingapi_vote}");
    while ($content = $result->fetchObject()) {
      variable_set('imdb_average_vote', $content->average);
    }
}

