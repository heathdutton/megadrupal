<?php

/**
 * @file
 * Install, update and uninstall functions for the Visitors Voice module.
 */

/**
 * Implements hook_schema().
 */
function visitorsvoice_schema() {
  $schema['cache_visitorsvoice'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_visitorsvoice']['description'] = 'Cache table for the Visitors Voice module to store full record response in JSON format.';

  $schema['visitorsvoice_keywords'] = array(
    'description' => 'Contains the search keywords for which customizations exist.',
    'fields' => array(
      'keywords' => array(
        'description' => 'The search keywords.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'index_id' => array(
        'description' => 'The {search_api_index}.machine_name for which these keywords are customized.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'customization_id' => array(
        'description' => 'An integer identifying the customization.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('index_id', 'keywords'),
  );

  $schema['visitorsvoice_customization'] = array(
    'description' => 'Contains customizations for specific items.',
    'fields' => array(
      'customization_id' => array(
        'description' => 'An integer identifying the customization.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'item_id' => array(
        'description' => 'The ID of the search item which is customized.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'custom' => array(
        'description' => 'Positive values: determine order of results; negative values: added result, absolute value determines order; 0: excluded from results.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('customization_id', 'item_id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function visitorsvoice_install() {
  // In case the module is installed via an installation profile, a batch is
  // active and we skip this.
  if (batch_get()) {
    return;
  }

  if (!variable_get('visitorsvoice_api_key', '')) {
    drupal_set_message(t('The Visitors Voice integration module was enabled. Please visit the <a href="@url">settings page</a> to set the access keys to use for connections.', array('@url' => url('admin/config/search/visitorsvoice'))));
  }
}

/**
 * Implements hook_requirements().
 */
function visitorsvoice_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $has_api_key = (bool) variable_get('visitorsvoice_access_key');

    $requirements['visitorsvoice_access_key'] = array(
      'title' => t('Visitors Voice Access key'),
      'value' => $has_api_key ? t('Connected') : t('Not connected'),
      'severity' => $has_api_key ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    );
    if (!$has_api_key) {
      $requirements['visitorsvoice_access_key']['description'] = t('To connect this site with Visitors Voice, an access key needs to be set. Please set it <a href="@url">here</a>!', array('@url' => url('admin/config/search/visitorsvoice')));
    }
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function visitorsvoice_uninstall() {
  variable_del('visitorsvoice_access_key');
  variable_del('visitorsvoice_last_access_id');
  variable_del('visitorsvoice_index');
  variable_del('visitorsvoice_api_key');
  variable_del('visitorsvoice_cache_data');
  variable_del('visitorsvoice_cache_expire');
}
