<?php

/**
 * @file
 * Provides mockups for some Search API functionality to aid in tests.
 */

/**
 * Implements hook_menu().
 */
function visitorsvoice_test_menu() {
  $items['visitorsvoice_test/%'] = array(
    'title' => 'test',
    'page callback' => 'test',
    'page arguments' => array('48'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Makes indexes use our own mockup index class.
 */
function visitorsvoice_test_entity_info_alter(array &$info) {
  $info['search_api_index']['entity class'] = 'VisitorsvoiceTestIndexMock';
}

/**
 * Mocks a search index for use in the REST tests.
 */
class VisitorsvoiceTestIndexMock extends SearchApiIndex {

  /**
   * Constructs a new test index mock with default parameters.
   */
  public function __construct(array $values = array()) {
    parent::__construct(array(
      'name' => 'Test index',
      'item_type' => 'test',
      'server' => 'test_server',
      'enabled' => TRUE,
    ) + $values);
    $this->datasource = new VisitorsvoiceTestDatasourceMock('test');
    $this->server_object = new VisitorsvoiceTestServerMock();
  }

  /**
   * {@inheritdoc}
   */
  public function query($options = array()) {
    $exceptions = variable_get('visitorsvoice_test_exceptions', array());
    if (in_array(__FUNCTION__, $exceptions)) {
      throw new SearchApiException(__FUNCTION__);
    }
    return new VisitorsvoiceTestQueryMock($this, $options);
  }

  /**
   * {@inheritdoc}
   */
  public function resetCaches() {}

}

/**
 * Mocks a search server for use in the REST tests.
 */
class VisitorsvoiceTestServerMock extends SearchApiServer {

  /**
   * Constructs a new test servre mock with default parameters.
   */
  public function __construct(array $values = array()) {
    parent::__construct(array(
      'machine_name' => 'test_server',
      'name' => 'Test server',
      'class' => 'search_api_solr_service',
      'enabled' => TRUE,
    ) + $values);
  }

  /**
   * {@inheritdoc}
   */
  public function indexItems(SearchApiIndex $index, array $items) {
    return $items;
  }

  /**
   * {@inheritdoc}
   */
  public function deleteItems($ids = 'all', SearchApiIndex $index = NULL) {}

  /**
   * {@inheritdoc}
   */
  public function search(SearchApiQueryInterface $query) {
    return $query instanceof VisitorsvoiceTestQueryMock ? $query->execute() : array(
      'result count' => 0,
    );
  }
}

/**
 * Mocks a Search API datasource for use in the REST tests.
 */
class VisitorsvoiceTestDatasourceMock extends SearchApiAbstractDataSourceController {

  /**
   * {@inheritdoc}
   */
  public function getIdFieldInfo() {
    return array(
      'key' => 'id',
      'type' => 'integer',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getEntityType() {
    return variable_get('visitorsvoice_test_entity_type');
  }

  /**
   * {@inheritdoc}
   */
  public function getItemId($item) {
    $id = $item;
    if ($entity_type = variable_get('visitorsvoice_test_entity_type')) {
      list($id) = entity_extract_ids($entity_type, $item);
    }
    return "id--$id";
  }

  /**
   * {@inheritdoc}
   */
  public function getItemLabel($item) {
    return "Item $item";
  }

  /**
   * {@inheritdoc}
   */
  public function getItemUrl($item) {
    $func = variable_get('visitorsvoice_test_item_url_callback');
    if ($func && is_callable($func)) {
      return call_user_func($func, $item);
    }
    $id = $item;
    if ($entity_type = variable_get('visitorsvoice_test_entity_type')) {
      list($id) = entity_extract_ids($entity_type, $item);
    }
    return array(
      'path' => "visitorsvoice_test/$id",
      'options' => array(),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function loadItems(array $ids) {
    $exceptions = variable_get('visitorsvoice_test_exceptions', array());
    if (in_array(__FUNCTION__, $exceptions)) {
      throw new SearchApiException(__FUNCTION__);
    }
    return drupal_map_assoc($ids);
  }

  /**
   * {@inheritdoc}
   */
  public function startTracking(array $indexes) {
    return;
  }

}

/**
 * Mocks a search query for use in the REST tests.
 */
class VisitorsvoiceTestQueryMock extends SearchApiQuery {

  /**
   * {@inheritdoc}
   */
  public function __construct(SearchApiIndex $index, array $options = array()) {
    $this->index = $index;
    $this->options = $options + array(
      'conjunction' => 'AND',
      'parse mode' => 'terms',
      'filter class' => 'SearchApiQueryFilter',
      'search id' => __CLASS__,
    );
    $this->filter = $this->createFilter('AND');
    $this->sort = array();
  }

  /**
   * {@inheritdoc}
   */
  public function execute() {
    $exceptions = variable_get('visitorsvoice_test_exceptions', array());
    if (in_array(__FUNCTION__, $exceptions)) {
      throw new SearchApiException(__FUNCTION__);
    }
    $results = array();
    $filter_count = count($this->getFilter()->getFilters());
    if (variable_get('visitorsvoice_test_lookup')) {
      $ids = $this->lookupTestResults();
    }
    else {
      $ids = range(1, 12, $filter_count + 1);
    }
    foreach ($ids as $id) {
      $results[$id] = array(
        'id' => $id,
        'score' => 1,
      );
    }
    $result_count = count($results);
    if (isset($this->options['offset']) || isset($this->options['limit'])) {
      $results = array_slice($results, $this->options['offset'], $this->options['limit'], TRUE);
    }
    return array(
      'result count' => $result_count,
      'results' => $results,
    );
  }

  /**
   * Calculates the results to return for a lookup test.
   *
   * Used by VisitorsvoiceRESTTest::checkGetPageSearchResult() to ensure that
   * the correct fields are set in a lookup query. This functionality is
   * configured and triggered with the "visitorsvoice_test_lookup" variable.
   *
   * @return array
   *   An array of IDs to return.
   */
  protected function lookupTestResults() {
    $min_fields = variable_get('visitorsvoice_test_lookup', 0);
    if (count($this->fields) < $min_fields) {
      return array();
    }
    return $this->fields;
  }

}
