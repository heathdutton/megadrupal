<?php/** * @file * Form maker themes. *//** * Form maker themes table. */function form_maker_themes() {  if (arg(0) == 'node' && is_numeric(arg(1))) {    $nodeid = arg(1);  }  $form['fieldset_theme_buttons'] = array(    '#type' => 'fieldset',    '#title' => t('Themes'),  );  $form['fieldset_theme_buttons']['default_themes'] = array(    '#type' => 'submit',    '#submit' => array('form_maker_default_themes'),    '#value' => t('Default'),  );  $form['fieldset_theme_buttons']['delete_themes'] = array(    '#type' => 'submit',    '#submit' => array('form_maker_delete_theme'),    '#value' => t('Delete'),    '#attributes' => array('onclick' => 'if (!confirm(Drupal.t("Do you want to delete selected themes?"))) {return false;}'),  );  $form['fieldset_theme_buttons']['new_theme'] = array(    '#prefix' => l(t('New'), url('node/' . $nodeid . '/form_maker_themes/new', array('absolute' => TRUE))),  );  $form['fieldset_search_theme_title'] = array(    '#type' => 'fieldset',    '#title' => t('Search'),  );  $form['fieldset_search_theme_title']['search_theme_title'] = array(    '#type' => 'textfield',    '#size' => 25,    '#default_value' => variable_get('form_maker_search_theme_title', ''),  );  $form['fieldset_search_theme_title']['search_theme_button'] = array(    '#type' => 'submit',    '#submit' => array('form_maker_theme_search'),    '#value' => t('Go'),  );  $form['fieldset_search_theme_title']['reset_theme_button'] = array(    '#type' => 'submit',    '#value' => t('Reset'),    '#submit' => array('form_maker_theme_reset'),    '#suffix' => '<div class="description">' . t('Search themes by title.') . '</div>',  );  // Add to themes table static headers.  $header = array(    'id' => array(      'data' => t('ID'),      'field' => 'n.id'    ),    'title' => array(      'data' => t('Title'),      'field' => 'n.title'    ),    'default_theme' => array(      'data' => t('Default'),      'field' => 'n.default_theme'    ),  );  $themes_ids_col = db_select('form_maker_themes', 'n')->fields('n', array('id'))->condition('n.title', '%' . db_like(variable_get('form_maker_search_theme_title', '')) . '%', 'LIKE')->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(20)->execute()->fetchCol();  foreach ($themes_ids_col as $theme_id) {    $row = db_query("SELECT * FROM {form_maker_themes} WHERE id=:id", array(':id' => $theme_id))->fetchObject();    // Add to themes table rows.    $options[$theme_id] = array(      'id' => $row->id,      'default_theme' => ($row->default_theme == 1) ? '<img src="' . base_path() . drupal_get_path('module', 'form_maker') . '/images/default_theme.png" />' : '',    );    $options[$theme_id]['title'] = array(      'data' => array(        '#type' => 'link',        '#title' => $row->title,        '#href' => url('node/' . $nodeid . '/form_maker_themes/edit', array(          'query' => array('theme_id' => $row->id),          'absolute' => TRUE        )),      ),    );  }  $form['form_maker_themes_table'] = array(    '#type' => 'tableselect',    '#header' => $header,    '#options' => $options,    '#empty' => t('No themes available.'),    '#suffix' => theme('pager', array('tags' => array())),  );  return $form;}/** * Set default theme. */function form_maker_default_themes($form, &$form_state) {  if (arg(0) == 'node' && is_numeric(arg(1))) {    $nodeid = arg(1);  }  $themes_ids_col = db_query("SELECT id FROM {form_maker_themes}")->fetchCol();  $flag = FALSE;  foreach ($themes_ids_col as $theme_id) {    $default_theme = db_query("SELECT default_theme FROM {form_maker_themes} WHERE id=:id", array(':id' => $theme_id))->fetchField();    if ($default_theme == 1) {      db_query("UPDATE {form_maker_themes} SET default_theme=:default_theme WHERE id=:id", array(        ':default_theme' => 0,        ':id' => $theme_id      ));    }  }  foreach ($themes_ids_col as $theme_id) {    if (isset($_POST['form_maker_themes_table'][$theme_id])) {      $flag = TRUE;      db_query("UPDATE {form_maker_themes} SET default_theme=:default_theme WHERE id=:id", array(        ':default_theme' => 1,        ':id' => $theme_id      ));      db_query("UPDATE {form_maker_table} SET theme=:theme WHERE vid=:vid", array(        ':theme' => $theme_id,        ':vid' => $nodeid      ));      drupal_set_message(t('Changed default theme.'), 'status', FALSE);      return;    }  }  if ($flag == FALSE) {    drupal_set_message(t('You must check a theme.'), 'warning', FALSE);  }}/** * Delete selected themes. */function form_maker_delete_theme($form, &$form_state) {  $themes_ids_col = db_query("SELECT id FROM {form_maker_themes}")->fetchCol();  $flag = FALSE;  foreach ($themes_ids_col as $theme_id) {    if (isset($_POST['form_maker_themes_table'][$theme_id])) {      $flag = TRUE;      $default_theme = db_query("SELECT default_theme FROM {form_maker_themes} WHERE id=:id", array(':id' => $theme_id))->fetchField();      if ($default_theme == 1) {        drupal_set_message(t("You can't delete default theme."), 'error', FALSE);      }      else {        db_query("DELETE FROM {form_maker_themes} WHERE id=:id", array(':id' => $theme_id));        drupal_set_message(t('Themes successfully deleted.'), 'status', FALSE);      }    }  }  if ($flag == FALSE) {    drupal_set_message(t('You must check a theme.'), 'warning', FALSE);  }}/** * Create a new theme. */function form_maker_add_theme() {  $form['fieldset_form_new_theme_buttons'] = array(    '#type' => 'fieldset',  );  $form['fieldset_form_new_theme_buttons']['new_theme_save'] = array(    '#type' => 'submit',    '#submit' => array('form_maker_new_theme_save'),    '#value' => t('Save'),  );  $form['fieldset_form_new_theme_buttons']['new_theme_apply'] = array(    '#type' => 'submit',    '#submit' => array('form_maker_new_theme_apply'),    '#value' => t('Apply'),  );  $form['fieldset_form_new_theme_buttons']['new_theme_cancel'] = array(    '#type' => 'submit',    '#submit' => array('form_maker_new_theme_cancel'),    '#value' => t('Cancel'),  );  $form['fieldset_form_new_theme'] = array(    '#type' => 'fieldset',    '#title' => t('Create a new theme'),  );  $form['fieldset_form_new_theme']['new_theme_title'] = array(    '#type' => 'textfield',    '#title' => t('Title'),  );  $form['fieldset_form_new_theme']['new_theme_css'] = array(    '#type' => 'textarea',    '#title' => t('CSS'),    '#rows' => 13,  );  return $form;}/** * Edit the theme. */function form_maker_edit_theme() {  if (isset($_GET['theme_id'])) {    $theme_id = check_plain($_GET['theme_id']);    $row = db_query("SELECT * FROM {form_maker_themes} WHERE id=:id", array(':id' => $theme_id))->fetchObject();  }  $form['fieldset_form_edit_theme_buttons'] = array(    '#type' => 'fieldset',  );  $form['fieldset_form_edit_theme_buttons']['edit_theme_save'] = array(    '#type' => 'submit',    '#submit' => array('form_maker_new_theme_save'),    '#value' => t('Save'),  );  $form['fieldset_form_edit_theme_buttons']['edit_theme_apply'] = array(    '#type' => 'submit',    '#submit' => array('form_maker_new_theme_apply'),    '#value' => t('Apply'),  );  $form['fieldset_form_edit_theme_buttons']['edit_theme_cancel'] = array(    '#type' => 'submit',    '#submit' => array('form_maker_new_theme_cancel'),    '#value' => t('Cancel'),  );  $form['fieldset_form_edit_theme'] = array(    '#type' => 'fieldset',    '#title' => t('Edit theme'),  );  $form['fieldset_form_edit_theme']['edit_theme_title'] = array(    '#type' => 'textfield',    '#title' => t('Title'),    '#default_value' => $row->title,  );  $form['fieldset_form_edit_theme']['edit_theme_css'] = array(    '#type' => 'textarea',    '#title' => t('CSS'),    '#rows' => 13,    '#default_value' => $row->css,  );  return $form;}/** * Save theme. */function form_maker_new_theme_save($form, &$form_state) {  if (arg(0) == 'node' && is_numeric(arg(1))) {    $nodeid = arg(1);  }  if (isset($_GET['theme_id'])) {    $theme_id = check_plain($_GET['theme_id']);    db_query("UPDATE {form_maker_themes} SET title=:title,css=:css WHERE id=:id", array(      ':title' => $form_state['values']['edit_theme_title'],      ':css' => $form_state['values']['edit_theme_css'],      ':id' => $theme_id    ));    drupal_set_message(t('Your theme successfully updated.'), 'status', FALSE);  }  else {    db_insert('form_maker_themes')->fields(array(      'title' => $form_state['values']['new_theme_title'],      'css' => $form_state['values']['new_theme_css'],      'default_theme' => 0    ))->execute();    drupal_set_message(t('Your theme successfully saved.'), 'status', FALSE);  }  $form_state['redirect'] = url('node/' . $nodeid . '/form_maker_themes', array('absolute' => TRUE));}/** * Apply theme. */function form_maker_new_theme_apply($form, &$form_state) {  if (arg(0) == 'node' && is_numeric(arg(1))) {    $nodeid = arg(1);  }  if (isset($_GET['theme_id'])) {    $theme_id = check_plain($_GET['theme_id']);    db_query("UPDATE {form_maker_themes} SET title=:title,css=:css WHERE id=:id", array(      ':title' => $form_state['values']['edit_theme_title'],      ':css' => $form_state['values']['edit_theme_css'],      ':id' => $theme_id    ));    drupal_set_message(t('Your theme successfully updated.'), 'status', FALSE);  }  else {    db_insert('form_maker_themes')->fields(array(      'title' => $form_state['values']['new_theme_title'],      'css' => $form_state['values']['new_theme_css'],      'default_theme' => 0    ))->execute();    $theme_id = db_query("SELECT MAX(id) FROM {form_maker_themes}")->fetchField();    drupal_set_message(t('Your theme successfully saved.'), 'status', FALSE);  }  $form_state['redirect'] = url('node/' . $nodeid . '/form_maker_themes/edit', array(    'query' => array('theme_id' => $theme_id),    'absolute' => TRUE  ));}/** * Cancel theme save. */function form_maker_new_theme_cancel($form, &$form_state) {  if (arg(0) == 'node' && is_numeric(arg(1))) {    $nodeid = arg(1);  }  $form_state['redirect'] = url('node/' . $nodeid . '/form_maker_themes', array('absolute' => TRUE));}/** * Search in themes. */function form_maker_theme_search($form, &$form_state) {  if (arg(0) == 'node' && is_numeric(arg(1))) {    $nodeid = arg(1);  }  variable_set('form_maker_search_theme_title', $form_state['values']['search_theme_title']);  $form_state['redirect'] = url('node/' . $nodeid . '/form_maker_themes', array('absolute' => TRUE));}/** * Reset themes. */function form_maker_theme_reset($form, &$form_state) {  if (arg(0) == 'node' && is_numeric(arg(1))) {    $nodeid = arg(1);  }  variable_set('form_maker_search_theme_title', '');  $form_state['redirect'] = url('node/' . $nodeid . '/form_maker_themes', array('absolute' => TRUE));}