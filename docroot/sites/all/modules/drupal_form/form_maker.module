<?php
/**
 * @file
 * This module allow to create forms for Drupal 7.
 *
 * Written by Webdorado team.
 */

/**
 * Implements hook_help().
 */
function form_maker_help($path, $arg) {
  switch ($path) {
    case "admin/help#form_maker":
      $output = '<h3>' . t("Form Maker module help.") . '</h3>';
      $output .= '<p>' . t("To show HTML editor in <strong>ADD A NEW FIELD > Custom HTML</strong> download 'tinymce' library from <a href='http://github.com/downloads/tinymce/tinymce/tinymce_3.5.7.zip'>http://github.com/downloads/tinymce/tinymce/tinymce_3.5.7.zip</a> and extract it to sites/all/libraries/tinymce directory.<br />
      <h4><strong>Step 1: <a href='http://web-dorado.com/drupal-form-maker-guide-2.html'>Creating a new Form.</a></strong></h4>
      <p>
        <strong>1.1 </strong>From the <strong>Navigation</strong> section on the left hand of the screen click on the <strong>Add content</strong> link.
      </p>
      <p>
        <strong>1.2 </strong>Click on <strong>Form</strong> to create a new form using Form Maker.
      </p>
      <p>
        <strong>1.3 </strong>Fill out the <strong>Title</strong> field. The <strong>Body </strong> field is optional. Click <strong>Save</strong> to save the created form and proceed to the Form Maker. Now you can add fields to your form. Pay attention to the buttons on the top of the 
          <strong>Form Maker</strong> tab:
          <ul type=\'disc\'>
            <li><strong>Preview: </strong>Using this button, you can preview the form in its current state to see how it will appear on the website.</li>
            <li><strong>Actions after Submission: </strong>Here you can select the action that takes place after form submission.</li>
            <li><strong>Edit JavaScript: </strong>Here you can define new JavaScript functions, which can be applied to the form.</li>
            <li><strong>Custom text in e-mail for administrator: </strong>Here you can add custom texts, images, and custom HTML to the e-mail message that is sent to the administrator.</li>
            <li><strong>Custom text in e-mail for user: </strong>Here you can add custom texts, images, and custom HTML to the e-mail message that is sent to the users.<br /></li>
          </ul>
      </p>
      <p>
        <strong>1.4 </strong>On the right side you will see the<strong> Email to send submissions to</strong> field. Here you provide e-mails to which submitted form information is sent. If you need more than one e-mail address, you must separate them by commas. This field is not required. In any case, the submitted information is stored in
          <strong>“Submissions”</strong> part, where it can be easily managed.<br />
        <strong>1.5 Theme </strong>A distinct theme can be applied to each new form. The themes can be accessed by selecting <strong>Themes</strong> on the top menu. 41 themes are available for selection. There is an option for creating new themes, which you can access by clicking “New” on the upper right corner of the section.<br />
        <strong>1.6 </strong>Add new fields to your form by clicking on the <strong>ADD A NEW FIELD</strong> button (see the next step for the description of the fields).
        <div style='text-align:right;'><a href='http://web-dorado.com/drupal-form-maker-guide-2.html'>More</a></div>
      </p>
      <h4><strong>Step 2: <a href='http://web-dorado.com/drupal-form-maker-guide-3.html'>Description of the form fields.</a></strong></h4>
      <p>
        <strong>2.1 Custom HTML: </strong> An HTML editor. You can insert your own HTML content to your Drupal Form.
      </p>
      <p>
        <strong>2.2 Text Input: </strong>At first choose the <b>Field Type</b> according to your preference. There are several options:
        <ul>
          <li><b><u>Simple Text:</u></b> This can be used for typing some text.</li>
          <li><b><u>Password:</u></b> This field can be used for adding a <b>password</b> field to your form.</li>
          <li><b><u>Text Area:</u></b> This field can be used for typing some text. The difference between Text Area and Simple Text is that Simple Text has only one row while Text Area can have several rows.</li>
          <li><b><u>Name:</u></b> This can be used for typing a name.</li>
          <li><b><u>Address:</u></b> This field can be used for adding an address.</li>
          <li><b><u>Address (Mark on Map):</u></b> This filed can be used for adding an address by directly marking it on the map.</li>
          <li><b><u>E-mail:</u></b> This field can be used for typing the submitter’s e-mail. The submitted e-mail validation is checked.</li>
          <li><b><u>Number:</u></b> This field can be used to provide numbers for different purposes (e.g. serial number).</li>
          <li><b><u>Phone:</u></b> This field can be used to provide a phone number.</li>
          <li><b><u>Hidden Field:</u></b> This field can be used to store additional information that does not need to be displayed.</li>
        </ul>
      </p>
      <p>
        <strong>2.3 Time and Date:</strong> At first choose the <b>Field Type</b> according to your preference. There are several options:
        <ul>
          <li><b><u>Date (single field with a picker):</u></b> This field can be used for typing a date or choosing by the picker.</li>
          <li><b><u>Date (3 separate fields):</u></b> This field can be used for typing a date in 3 field format(day, month, year). Each of the 3 fields can be set as text input or select list.</li>
          <li><b><u>Time:</u></b> This field can be used for typing a time. Time can be shown in 24 hour or 12 hour formats by setting the time format attribute.</li>
        </ul>
      </p>
      <p>
        <strong>2.4 Select:</strong> At first choose the <b>Field Type</b> according to your preference. There are several options:
        <ul>
          <li><b><u>Custom select:</u></b> This field can be used for selecting the values from a list. The list can be defined by Options attribute. You can easily add and remove list items. The checked items are considered as empty values.</li>
          <li><b><u>Country list:</u></b> This field can be used for selecting a country from a list.</li>
        </ul>
      </p>
      <p>
        <strong>2.5 Checkbox:</strong> This field can be used for selecting the values from a list of <strong>checkboxes. </strong>
          The list can be defined by Options attribute. You can easily add and remove list items. The list can be displayed in horizontal/vertical positions by setting the
          <strong>Relative Position</strong> attribute.
      </p>
      <p>
        <strong>2.6 Radio:</strong> This field can be used for selecting the values from a list of <strong>radio buttons</strong>. The list can be defined by Options attribute. You can easily add and remove list items. The list can be displayed in horizontal/vertical positions by setting the
          <strong>Relative Position</strong> attribute.
      </p>
      <p>
        <strong>2.7 File Upload:</strong> This field can be used for uploading a file. The size of the uploaded file can be limited by setting the value of <strong>Maximum Size</strong>
          attribute in KB. The upload folder can be mentioned by setting the <strong>Destination</strong> attribute. Only files with extensions listed in <strong>Allowed file extensions</strong> attribute can be uploaded.
      </p>
      <p>
        <strong>2.8 Captcha:</strong> This field can be used for the ensuring that the submission is generated by a person. The number of randomly generated symbols can be set by the value of <strong>Captcha size</strong> attribute.
        <ul>
          <li><b><u>Simple Captcha:</u></b> This is a easy to configure Simple Captcha. The number of randomly generated symbols can be set by the value of Captcha size attribute.</li>
          <li><b><u>Recaptcha:</u></b>  This is an alternative option for Captcha that uses Public and Private Keys. You will need to create reCaptcha keys with the help of a dedicated tool.The tool can be found on <a href='https://www.google.com/recaptcha/admin/create'>https://www.google.com/recaptcha/admin/create</a></li>
        </ul>
      </p>
      <p>
        <strong>2.9 Page Break:</strong> This can be used to break the form into distinct pages. Use Page Title to provide a title for the given page.
      </p>
      <p>
        <strong>2.10 Section Break:</strong> This option allows adding a section break to the form page.
      </p>
      <p>
        <strong>2.11 Map:</strong> This field can be used for pointing out some position on the map. The position of the marker is fixed at the front end.
      </p>
      <p>
        <strong>2.12 Button:</strong> At first choose the <b>Field Type</b> according to your preference.
        <ul>
          <li><b><u>Submit and Reset:</u></b> This field can be used for inserting a submit/reset button into the form. You can display reset button by checking the box called
            <strong>Display reset button</strong>. Type the name of the submit and reset buttons in <strong>Submit button label</strong> and <strong>Reset button label</strong>.
          </li>
          <li><b><u>Custom:</u></b> This field can be used for inserting custom buttons into the form. Type the name of each button in button name field. You can define click functions for each button.</li>
        </ul>
      </p>
      <div style='text-align:right;'><a href='http://web-dorado.com/drupal-form-maker-guide-3.html'>More</a></div>
      <h4><strong>Step 3: <a href='http://web-dorado.com/drupal-form-maker-guide-4.html'>Managing submissions of the form.</a></strong></h4>
      <p>
        <strong>3.1 </strong>Select a form and choose the last <strong> </strong> tab named <strong> Submissions </strong> to access the form submissions database.
      </p>
      <p>
        <strong>3.2 </strong>It is possible to <strong>Edit</strong> or <strong>Delete</strong> the submissions.
      </p>
      <p>
        <strong>3.3</strong> It is also possible to export the submissions database to <strong>CSV</strong> or <strong>XML</strong> formats.
      </p>
      <p>
        <strong>3.4</strong> The <strong>Add/Remove Columns </strong> button allows adding or removing columns from the submissions list (All, ID, Submit date, Submitter’s IP address).
      </p>
      <p>
        <strong>3.5 </strong> For each form certain types of statistical data are available.
        <ul>
          <li><b><u>Entries:</u></b> The number of submitted forms.</li>
          <li><b><u>Views:</u></b> The number of times the form has been viewed.</li>
          <li><b><u>Conversion Rate:</u></b> The percentage of submitted forms to the overall number of views.</li>
        </ul>
      </p>
      <p>
        <strong>3.6 </strong> For the forms that contain checkboxes or radio buttons a separate statistics is available. It shows how many times a particular checkbox/radio button has been checked, and what is the ratio of that number to the overall number of checks.
      </p>
      <p>
        <strong>3.7 </strong> There is a possibility to search the submissions database by all the relevant fields of the given form.
      </p>
      <div style='text-align:right;'><a href='http://web-dorado.com/drupal-form-maker-guide-4.html'>More</a></div>
      <h4><strong>Step 4: <a href='http://web-dorado.com/drupal-form-maker-guide-5.html'>Using Drupal Form with Views module.</a></strong></h4>
      <p>
        Form Maker is fully integrated with Views module. With the help of the Views module you can
        <ul>
          <li>Display more then one form on the same page,</li>
          <li>Display Form Maker forms alongside different types of content,</li>
          <li>Insert forms into a block,</li>
          <li>etc.</li>
        </ul>
        After installing Form Maker, a new item <strong>Form</strong> is added to the list of content types in Views module, as well as to the <strong>FIELDS</strong> and to the <strong>FILTER CRITERIA</strong>.
      </p>
      <div style='text-align:right;'><a href='http://web-dorado.com/drupal-form-maker-guide-5.html'>More</a></div>
      ") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function form_maker_permission() {
  return array(
    'access Form Maker administration' => array(
      'title' => t('Administer Form Maker module'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function form_maker_form(&$node, $form_state) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
  );
  return $form;
}

/**
 * Implements hook_form_alter().
 */
function form_maker_form_alter(&$form, $form_state, $form_id) {
  $matches = array();
  if (isset($form['#node']->type) && $form_id == $form['#node']->type . '_node_form' && in_array($form['#node']->type, form_maker_variable_get('form_maker_node_types'))) {
    $node = $form['#node'];
    // Preserve all form_maker options currently set on the node.
    $form['form_maker'] = array(
      '#type' => 'value',
      '#value' => $node->form_maker,
    );
    if (empty($node->nid) && in_array($node->type, form_maker_variable_get('form_maker_node_types_primary'))) {
      $form['actions']['submit']['#submit'][] = 'form_maker_form_submit';
    }
  }
}

/**
 * Implements hook_node_defaults().
 */
function form_maker_node_defaults() {
  $defaults = array(
    'confirmation' => '',
    'confirmation_format' => NULL,
    'redirect_url' => '<confirmation>',
    'teaser' => '0',
    'block' => '0',
    'allow_draft' => '0',
    'auto_save' => '0',
    'submit_notice' => '1',
    'submit_text' => '',
    'submit_limit' => '-1',
    'submit_interval' => '-1',
    'total_submit_limit' => '-1',
    'total_submit_interval' => '-1',
    'status' => '1',
    'record_exists' => FALSE,
    'roles' => array('1', '2'),
    'emails' => array(),
    'components' => array(),
  );
  drupal_alter('form_maker_node_defaults', $defaults);
  return $defaults;
}

/**
 * Implements hook_node_prepare().
 */
function form_maker_node_prepare($node) {
  $form_maker_types = form_maker_variable_get('form_maker_node_types');
  if (in_array($node->type, $form_maker_types) && !isset($node->form_maker)) {
    $node->form_maker = form_maker_node_defaults();
  }
}

/**
 * Implements hook_form_submit().
 */
function form_maker_form_submit($form, &$form_state) {
  drupal_set_message(t('Add new fields to your form with the form below.'));
  $form_state['redirect'] = 'node/' . $form_state['nid'] . '/form_maker';
}

/**
 * Implements hook_node_type().
 */
function form_maker_node_type($op, $info) {
  $form_maker_types = form_maker_variable_get('form_maker_node_types');
  $affected_type = isset($info->old_type) ? $info->old_type : $info->type;
  $key = array_search($affected_type, $form_maker_types);
  if ($key !== FALSE) {
    if ($op == 'update') {
      $form_maker_types[$key] = $info->type;
    }
    if ($op == 'delete') {
      unset($form_maker_types[$key]);
    }
    variable_set('form_maker_node_types', $form_maker_types);
  }
}

/**
 * Function form_maker_variable_get.
 */
function form_maker_variable_get($variable) {
  switch ($variable) {
    case 'form_maker_allowed_tags':
      $result = variable_get('form_maker_allowed_tags', array(
        'a',
        'em',
        'strong',
        'code',
        'img'));
      break;

    case 'form_maker_default_from_name':
      $result = variable_get('form_maker_default_from_name', variable_get('site_name', ''));
      break;

    case 'form_maker_default_from_address':
      $result = variable_get('form_maker_default_from_address', variable_get('site_mail', ini_get('sendmail_from')));
      break;

    case 'form_maker_default_subject':
      $result = variable_get('form_maker_default_subject', t('Form submission from: %title'));
      break;

    case 'form_maker_node_types':
      $result = variable_get('form_maker_node_types', array('form_maker'));
      break;

    case 'form_maker_node_types_primary':
      $result = variable_get('form_maker_node_types_primary', array('form_maker'));
      break;
  }
  return $result;
}

/**
 * Implements hook_menu().
 */
function form_maker_menu() {
  $items = array();
  $items['form_maker/captcha'] = array(
    'page callback' => 'form_maker_captcha',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/form_maker_captcha.inc',
  );
  $items['node/%form_maker_menu/form_maker'] = array(
    'title' => 'Form maker',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_edit'),
    'access arguments' => array('access Form Maker administration'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
    'file' => 'includes/form_maker_edit.inc',
  );
  $items['node/%form_maker_menu/form_maker/select_country_preview'] = array(
    'page callback' => 'form_maker_select_country_preview',
    'access arguments' => array('access Form Maker administration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/form_maker_select_country_popup.inc',
  );
  $items['node/%form_maker_menu/form_maker/preview'] = array(
    'page callback' => 'form_maker_form_preview',
    'access arguments' => array('access Form Maker administration'),
    'file' => 'includes/form_maker_form_preview.inc',
  );
  $items['node/%form_maker_menu/form_maker/action_after_submission'] = array(
    'title' => 'Action after submission',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_action_after_submission'),
    'access arguments' => array('access Form Maker administration'),
    'file' => 'includes/form_maker_edit.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['node/%form_maker_menu/form_maker/edit_javascript'] = array(
    'title' => 'Edit JavaScript',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_edit_javascript'),
    'access arguments' => array('access Form Maker administration'),
    'file' => 'includes/form_maker_edit.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['node/%form_maker_menu/form_maker/custom_text_in_email_admin'] = array(
    'title' => 'Custom text in email for administrator',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_custom_text_in_email_admin'),
    'access arguments' => array('access Form Maker administration'),
    'file' => 'includes/form_maker_edit.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['node/%form_maker_menu/form_maker/custom_text_in_email_user'] = array(
    'title' => 'Custom text in email for user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_custom_text_in_email_user'),
    'access arguments' => array('access Form Maker administration'),
    'file' => 'includes/form_maker_edit.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['node/%form_maker_menu/submissions'] = array(
    'title' => 'Submissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_submissions'),
    'access arguments' => array('access Form Maker administration'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/form_maker_submissions.inc',
  );
  $items['form_maker/generate_csv'] = array(
    'page callback' => 'form_maker_generate_csv',
    'access arguments' => array('access Form Maker administration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/form_maker_generate_csv.inc',
  );
  $items['form_maker/generate_xml'] = array(
    'page callback' => 'form_maker_generate_xml',
    'access arguments' => array('access Form Maker administration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/form_maker_generate_xml.inc',
  );
  $items['node/%form_maker_menu/submissions/edit'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_edit_submissions'),
    'access arguments' => array('access Form Maker administration'),
    'file' => 'includes/form_maker_submissions.inc',
    'type' => MENU_CALLBACK,
  );
  $items['node/%form_maker_menu/submissions/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_delete_submission'),
    'access arguments' => array('access Form Maker administration'),
    'file' => 'includes/form_maker_submissions.inc',
    'type' => MENU_CALLBACK,
  );
  $items['node/%form_maker_menu/submissions/add_remove'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_add_remove'),
    'access arguments' => array('access Form Maker administration'),
    'file' => 'includes/form_maker_submissions.inc',
    'type' => MENU_CALLBACK,
  );
  $items['node/%form_maker_menu/submissions/map_preview'] = array(
    'page callback' => 'form_maker_map_preview',
    'access arguments' => array('access Form Maker administration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/form_maker_submissions_map_popup.inc',
  );
  $items['node/%form_maker_menu/form_maker_themes'] = array(
    'title' => 'Themes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_themes'),
    'access arguments' => array('access Form Maker administration'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 3,
    'file' => 'includes/form_maker_themes.inc',
  );
  $items['node/%form_maker_menu/form_maker_themes/new'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_add_theme'),
    'access arguments' => array('access Form Maker administration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/form_maker_themes.inc',
  );
  $items['node/%form_maker_menu/form_maker_themes/edit'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_maker_edit_theme'),
    'access arguments' => array('access Form Maker administration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/form_maker_themes.inc',
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function form_maker_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array(
      'node/*/form_maker' => TRUE,
      'node/*/form_maker/*' => TRUE,
      'node/*/submissions' => TRUE,
      'node/*/submissions/*' => TRUE,
      'node/*/form_maker_themes' => TRUE,
      'node/*/form_maker_themes/*' => TRUE,
    );
  }
}

/**
 * Implements hook_menu_load().
 */
function form_maker_menu_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  if (!isset($node->type) || !in_array($node->type, form_maker_variable_get('form_maker_node_types'))) {
    return FALSE;
  }
  return $node;
}

/**
 * Implements hook_node_info().
 */
function form_maker_node_info() {
  return array(
    'form_maker' => array(
      'name' => t('Form'),
      'base' => 'form_maker',
      'module' => 'form_maker',
      'description' => t("Create a new form with Form maker module"),
    )
  );
}

/**
 * Implements hook_views_api().
 */
function form_maker_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'form_maker') . '/views',
  );
}

/**
 * Implements hook_node_view().
 */
function form_maker_node_view($node, $view_mode) {
  if (!in_array($node->type, array('form_maker'))) {
    return;
  }
  require_once "includes/form_maker_content_view.inc";
  if ($view_mode == 'full') {
    if (variable_get('form_maker_custom_text_after_submit', 'empty') != 'empty') {
      $node_view = variable_get('form_maker_custom_text_after_submit', 'empty');
      variable_del('form_maker_custom_text_after_submit');
    }
    else {
      $node_view = form_maker_content_view($node->nid);
    }
    unset($node->content['comments']);
  }
  else {
    $node_view = '';
  }
  $teaser = $view_mode == 'teaser';
  $page = arg(0) == 'node' && arg(1) == $node->nid;
  if (($teaser) || empty($node->nid)) {
    return;
  }
  $node->content['form_maker'] = array(
    '#node' => $node,
    '#teaser' => $teaser,
    '#page' => $page,
    '#markup' => $node_view,
    '#enabled' => TRUE,
    '#weight' => 10,
  );
}

/**
 * Implements hook_node_insert().
 */
function form_maker_node_insert($node) {
  if ($node->type != 'form_maker') {
    return;
  }
  $type = 'form_maker';
  $title = db_query("SELECT title FROM {node} WHERE nid=:nid", array(':nid' => $node->nid))->fetchField();
  // If node doesn't exist.
  $first_javascript = '// before form is load
function form_maker_before_load() {

}

// before form submit
function form_maker_before_submit() {

}

// before form reset
function form_maker_before_reset() {

}';
  db_insert('form_maker_table')
  ->fields(array(
    'vid' => $node->nid,
    'type' => $type,
    'title' => $title,
    'mail' => '',
    'form' => '',
    'form_front' => '',
    'theme' => '1',
    'css' => '',
    'javascript' => $first_javascript,
    'script1' => '',
    'script2' => '',
    'admin_script1' => '',
    'admin_script2' => '',
    'data' => '',
    'counter' => '0',
    'label_order' => '',
    'redirect_url' => '',
    'pagination' => '',
    'show_title' => '',
    'show_numbers' => '',
    'public_key' => '',
    'private_key' => '',
    'recaptcha_theme' => '',
    ))
  ->execute();
  db_query("UPDATE {node_revision} SET comment=:comment WHERE nid=:nid", array(':comment' => 0, ':nid' => $node->nid));
}

/**
 * Implements hook_node_delete().
 */
function form_maker_node_delete($node) {
  // Delete submissions of deleted node.
  db_query("DELETE FROM {form_maker_submits_table} WHERE form_id=:form_id", array(':form_id' => $node->nid));
  // Notice that we're matching all revision, by using the node's nid.
  db_query("DELETE FROM {form_maker_table} WHERE vid=:vid", array(':vid' => $node->nid));
  // Delete View Report variable.
  variable_del('form_maker_view_reports' . $node->nid);
  if (!in_array($node->type, form_maker_variable_get('form_maker_node_types'))) {
    return;
  }
}

/**
 * Implements hook_library().
 */
function form_maker_library() {
  $libraries = array(
    'tinymce' => array(
      'version' => '3.5.7',
      'js' => array(
        'sites/all/libraries/tinymce/jscripts/tiny_mce/tiny_mce.js' => array(
          'group' => JS_LIBRARY,
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_init().
 */
function form_maker_init() {
  drupal_add_css(drupal_get_path('module', 'form_maker') . '/css/form_maker_fieldset.css');
  if (file_exists("sites/all/libraries/tinymce/jscripts/tiny_mce/tiny_mce.js")) {
    drupal_add_js('sites/all/libraries/tinymce/jscripts/tiny_mce/tiny_mce.js');
    drupal_add_js('tinyMCE.init({
				// General options
        mode : "specific_textareas",
        editor_selector : "form_maker_editor",
				theme : "advanced",
				plugins : "autolink,lists,spellchecker,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template",
				// Theme options
				theme_advanced_buttons1 : "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect",
				theme_advanced_buttons2 : "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
				theme_advanced_buttons3 : "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen",
				theme_advanced_buttons4 : "insertlayer,moveforward,movebackward,absolute,|,styleprops,spellchecker,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,blockquote,pagebreak,|,insertfile,insertimage",
				theme_advanced_toolbar_location : "top",
				theme_advanced_toolbar_align : "left",
				theme_advanced_statusbar_location : "bottom",
				theme_advanced_resizing : true,

				// Skin options
				skin : "o2k7",
				skin_variant : "silver",

				// Example content CSS (should be your site CSS)
				//content_css : "css/example.css",
				
				// Drop lists for link/image/media/template dialogs
				template_external_list_url : "js/template_list.js",
				external_link_list_url : "js/link_list.js",
				external_image_list_url : "js/image_list.js",
				media_external_list_url : "js/media_list.js",

				// Replace values for the template plugin
				template_replace_values : {
					username : "Some User",
					staffid : "991234"
				}
			});', array('type' => 'inline', 'scope' => 'footer'));
  }
}
