<?php

/**
 * @file
 * A helper module to create content based on a content type template
 * and an existing node.
 */

/**
 * Implementation of hook_perm().
 */
function crc_perm() {
  return array(
    'access create related content block' => array(
      'title' => t('Access CRC block'),
      'description' => t('Access create related content block and pages.'),
    ),
    'access create related content menu' => array(
      'title' => t('Access CRC menu'),
      'description' => t('Access create related content menu tab and pages.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function crc_menu() {
  $items = array();

  $items['node/%node/add_related'] = array(
    'title' => 'Create related content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crc_add_page_form', 1),
    'access callback' => 'crc_node_add_any_access',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/add/%/crc/%node'] = array(
    'page callback' => 'crc_node_add',
    'page arguments' => array(2, 4),
    'access callback' => 'crc_node_add_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Returns the settings for all or a specified content type.
 * @param $type
 * @return array
 */
function crc_settings($type = FALSE) {
  $global_settings = variable_get('crc_settings', array('profiles' => array('production' => array(), 'development' => array()), 'default_profile' => 'production'));
  if ($type !== FALSE) {
    return _crc_settings($type, $global_settings['profiles'][$global_settings['default_profile']]);
  }
  else {
    $settings = array();
    foreach (node_get_types('names') as $type => $name) {
      $settings[$type] = _crc_settings($type, $global_settings['profiles'][$global_settings['default_profile']]);
    }
    return $settings;
  }
}

function _crc_settings($type, $default) {
  static $settings = array();
  if (!array_key_exists($type, $settings)) {
    $settings[$type] = variable_get('crc_settings_' . $type, array('status' => 1));
    foreach (crc_module_implements('crc_settings') as $module) {
      if (!array_key_exists($module, $settings[$type])) {
        $settings[$type][$module] = array();
      }
      $func = $module . '_crc_settings';
      $func($settings[$type][$module]);
    }
  }
  return $settings[$type];
}

/**
 * Implementation of hook_for_alter().
 */
function crc_form_alter(&$form, $form_state, $form_id) {
  // Edit content type form
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    module_load_include('inc', 'crc', 'crc.admin');
    crc_content_type_alter($form, $form_state);
  }
}

/**
 * Implementation of hook_node_type().
 */
function crc_node_type($op, $info) {
  switch ($op) {
    case 'delete':
      variable_del('crc_settings_' . $info->type);
      break;
  }
}

/**
 * This is a type specific menu callback to ensure that the
 * user has permission to create at least one type of node.
 *
 * @return bool
 *    The access permission on this action
 */
function crc_node_add_any_access() {
  if (user_access('access create related content menu') || user_access('access create related content block')) {
    return count(crc_add_node_type_options());
  }
  return FALSE;
}


function crc_add_node_type_options() {
  $type_settings = crc_settings();
  $options = array();
  foreach (node_get_types('names') as $type => $name) {
    if (!empty($type_settings[$type]['status']) && node_hook($type, 'form') && node_access('create', $type)) {
      $options[$type] = $name;
    }
  }
  return $options;
}

/**
 * This is a type specific menu callback to ensure that the
 * user has permission to create content of this type.
 *
 * @param string $type
 *    The name of the content type the user is trying to create
 * @return bool
 *    The access permission on this action
 */
function crc_node_add_access($type) {
  if (user_access('access create related content menu') || user_access('access create related content block')) {
    $type = str_replace('-', '_', $type);
    if (!array_key_exists($type, crc_add_node_type_options())) {
      return FALSE;
    }
    return (node_hook($type, 'form') && node_access('create', $type));
  }
  return FALSE;
}

function crc_token_values($type, $object = NULL, $options = array()) {
  global $user;
  if ($type == 'crc') {
    $user_tokens = user_token_values('user', $user, $options);
    $node_tokens = node_token_values('node', $object, $options);
    return array_merge($user_tokens, $node_tokens);
  }
}

function crc_token_list($type = 'all') {
  if ($type == 'crc' || $type == 'all') {
    $user_tokens = user_token_list($type == 'all' ? 'all' : 'user');
    $node_tokens = node_token_list($type == 'all' ? 'all' : 'node');
    return array_merge($user_tokens, $node_tokens);
  }
}

/**
 * Returns the core Drupal modules that the module implements
 * pseudo-hooks for.
 */
function _crc_types() {
  static $loaded = FALSE, $types = array();
  if (!$loaded) {
    foreach (array('node', 'menu', 'taxonomy') as $module) {
      if (module_exists($module)) {
        module_load_include('inc', 'crc', 'includes/crc.' . $module);
        $types[] = $module;
      }
    }
    $loaded = TRUE;
  }
  return $types;
}

function crc_module_implements($hook, $sort = FALSE) {
  $modules = module_implements($hook);
  foreach (_crc_types() as $type) {
    if (function_exists($type . '_' . $hook)) {
      $modules[] = $type;
    }
  }
  // In Drupal 6, hooks can be defined anywhere
  // In Drupal 7, (March 2009), hooks needed to be in the files
  // defined in the module.info files[] array.
  // In case this changes, filter duplicates
  array_unique($modules);
  if ($sort) {
    sort($modules);
  }
  return $modules;
}

function crc_default_type() {
  $type = new stdClass();
  $type->type = '';
  $type->name = '';
  $type->base = '';
  $type->description = '';
  $type->help = '';
  $type->min_word_count = 0;
  $type->has_title = 1;
  $type->has_body = 1;
  $type->title_label = t('Title');
  $type->body_label = t('Body');
  $type->custom = 0;
  $type->modified = 0;
  $type->locked = 1;
  $type->is_new = 1;
  return $type;
}

function crc_default_menu() {
  $menu = array(
    'link_title' => '',
    'mlid' => 0,
    'plid' => 0,
    'menu_name' => variable_get('menu_default_node_menu', 'main-menu'),
    'weight' => 0,
    'options' => array(),
    'module' => 'menu',
    'expanded' => 0,
    'hidden' => 0,
    'has_children' => 0,
    'customized' => 0
  );
  $menu['parent_depth_limit'] = _menu_parent_depth_limit($menu);
  return $menu;
}
/**
 * Implementation of hook_help().
 */
function crc_help($path, $arg) {
  switch ($path) {
    case 'node/%/add_related':
      $node = node_load($arg[1]);
      $type = node_get_types('type', $node->type);
      return t('This form allows you to pre-populate the <em>Create content</em> page form with some default values that are related to the %type item, %title.', array('%type' => $type->name, '%title' => $node->title));
  }
}

/**
 * Implementation of hook_block_list().
 */
function crc_block_list() {
  $blocks = array(
    'crc_form' => array(
      'info' => t('Create related content form'),
      'cache' => BLOCK_NO_CACHE,
    ),
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function crc_block_view($delta = '') {
  $block = array();
  switch($delta) {
    case 'crc_form':
      $block = array(
        'subject' => t('Create related content'),
        'content' => crc_form_block());
      break;
  }
  return $block;
}

function crc_form_block() {
  $arg0 = arg(0);
  $arg1 = arg(1);
  if ($arg0 == 'node' && is_numeric($arg1) && user_access('access create related content block')) {
    if (crc_node_add_any_access() && $node = node_load($arg1)) {
      module_load_include('inc', 'crc', 'crc.pages');
      return drupal_get_form('crc_add_page_form', $node);
    }
  }
}
