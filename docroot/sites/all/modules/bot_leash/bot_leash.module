<?php

/**
 * @file
 * Keeps the bot from talking to strangers (users who are not in an IRC channel the bot itself is already on).
 */

/**
 * Implements hook_help().
 */
function bot_leash_help($path, $arg) {
  switch ($path) {
    case 'irc:features':
      return array(t('Leash'));
    case 'irc:features#leash':
      return t("Keeps your bot on a leash, by stopping it from talking to strangers (users who are not in an IRC channel the bot itself is already on).  This is useful if you use the bot in a private channel on a public IRC server, and other users on the server are not trusted.  Since any user on IRC who knows a bot's IRC handle can interact with the bot in a private chat.  The message that the bot responds to private messages from strangers with can be modified or disabled on the bot settings page, at <!url>.", array('!url' => url('admin/settings/bot', array('absolute' => TRUE))));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The message the bot responds with should be configurable.
 */
function bot_leash_form_bot_settings_alter(&$form, &$form_state) {
  $form['bot_leash_response'] = array(
    '#type' => 'textfield',
    '#title' => t('Response to strangers'),
    '#description' => t('When strangers privately message the bot, what message should the bot respond with?  Leave empty for no response.  Use "<em>!channels</em>" to print a list of channels the stranger can join.  Disable the <em>Bot Leash</em> (bot_leash) module to allow the bot to talk privately with anyone.'),
    '#default_value' => bot_leash_get_response(),
  );
}

/**
 * Implements hook_irc_bot_reply_message_alter().
 *
 * Overwrites the message if it the recipient is not allowed to see it.
 *
 * @param string $to
 *   The nick of the user who will recieve the message.
 * @param string &$message
 *   The message which will be sent.
 */
function bot_leash_irc_bot_reply_message_alter($to, &$message) {
  if (strpos($to, '#') !== 0) {
    $nicks = bot_leash_get_nicks();
    if (!isset($nicks[strtolower($to)])) {
      $message = t(bot_leash_get_response(), array('!channels' => bot_leash_t_channels()));
    }
  }
}

/**
 * Implements hook_irc_access().
 *
 * Listens to private messages to the bot.
 * @see http://drupal.org/node/918966
 *
 * @param string $hook
 *   The name of the IRC hook that is being queried.
 * @param object $data
 *   The regular $data object prepared by the IRC library.
 */
function bot_leash_irc_access($hook, $data) {
  if ($hook === 'irc_msg_query') {
    $enquirer = strtolower($data->nick);
    $nicks = bot_leash_get_nicks();
    if (!isset($nicks[$enquirer])) {
      bot_leash_respond($enquirer);
      return FALSE;
    }
  }
}

/**
 * Get the response message for strangers.
 *
 * @return string
 *   The message to respond with. Empty string if there should be no response
 */
function bot_leash_get_response() {
  return variable_get('bot_leash_response', t("I do not talk to strangers.  Please join !channels"));
}

/**
 * Get nicks of users that may interact with the bot.
 *
 * @return array
 *   The nicks are the keys of the array. Values are TRUE.
 */
function bot_leash_get_nicks() {
  global $irc;
  $nicks = array();
  foreach ($irc->channel as $channel) {
    foreach (array_keys($channel->users) as $nick) {
      $nicks[strtolower($nick)] = TRUE;
    }
  }
  return $nicks;
}

/**
 * Respond to strangers via IRC.
 *
 * @param string $to
 *   Nick of user to respond to.
 */
function bot_leash_respond($to) {
  if ($response = bot_leash_get_response()) {
    bot_message($to, t($response, array('!channels' => bot_leash_t_channels())));
  }
}

/**
 * Get the t()-compatible "!channel" variable for the response message.
 *
 * @return string
 *   Empty string if there are no channels. The channel name if there is only
 *   one channel. Comma-separated list of channels with ' or ' separating the
 *   last two.
 */
function bot_leash_t_channels() {
  $channels = bot_leash_get_channels();
  if (count($channels) == 1) {
    return $channels[0];
  }
  elseif (count($channels) > 1) {
    return t("!channels or !last_channel.", array(
      // The order is important.
      '!last_channel' => array_pop($channels),
      '!channels' => implode(', ', $channels),
    ));
  }
  return '';
}

/**
 * Get channels which users must joint to interact with the bot.
 *
 * @return array
 *   Items are channel names.
 */
function bot_leash_get_channels() {
  global $irc;
  return array_keys($irc->channel);
}
