<?php

/**
 * @file
 * Warns site visitors that the web site will be going down for maintenance
 * at a specified time.
 */

/**
 * Implements hook_init().
 */
function going_down_init() {
  if (variable_get('going_down_warning', 0)) {
    $time_down = _going_down_get_offline_time();
    if ($time_down !== FALSE) {
      $time_now = REQUEST_TIME;
      if ($time_now > $time_down) {
        $action = variable_get('going_down_action', 2);
        switch ($action) {
          case 0:
            _going_down_get_js($time_down);
            break;

          case 1:
            // Hide message.
            variable_set('going_down_warning', 0);
            break;

          case 2:
            // Set site off-line.
            variable_set('maintenance_mode', 1);
            variable_set('going_down_warning', 0);
            drupal_goto('<front>', array('query' => array('time' => $time_now)));
            break;
        };
      }
      else {
        _going_down_get_js($time_down);
      };
    }
    else {
      // Problem with time - turn off warning message.
      variable_set('going_down_warning', 0);
    };
  };
}

/**
 * Implements hook_footer().
 */
function going_down_page_build(&$page) {
  if (variable_get('going_down_warning', 0)) {
    $time_down = _going_down_get_offline_time();
    if ($time_down) {
      $time_now = REQUEST_TIME;
      if ($time_now > $time_down) {
        $action = variable_get('going_down_action', 0);
        if ($action == 0) {
          _going_down_get_html($page, $time_down);
        };
      }
      else {
        _going_down_get_html($page, $time_down);
      };
    };
  };
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function going_down_form_system_site_maintenance_mode_alter(&$form, &$form_state, $form_id) {
  $now_time = REQUEST_TIME;
  $now = array(
    'hour' => date('G', $now_time),
    'minute' => ltrim(date('i', $now_time), '0'),
    'day' => date('j', $now_time),
    'month' => date('n', $now_time),
    'year' => date('Y', $now_time),
  );

  $settings = array(
    'going_down_date' => variable_get('going_down_date',
      array(
        'day' => $now['day'],
        'month' => $now['month'],
        'year' => $now['year'],
      )
    ),
    'going_down_hour' => variable_get('going_down_hour', $now['hour']),
    'going_down_minute' => variable_get('going_down_minute', $now['minute']),
    'going_down_warning' => variable_get('going_down_warning', 0),
    'going_down_time_format' => variable_get('going_down_time_format', 'short'),
    'going_down_message' => variable_get('going_down_message',
      t('@site is going off-line for maintenance: @time',
        array('@site' => variable_get('site_name', 'Drupal')))),
    'going_down_action' => variable_get('going_down_action', 2),
    'going_down_style' => variable_get('going_down_style',
      'background-color: red; border: 2px outset darkred; font-weight: bold; color: papayawhip; position: fixed; z-index: 1000; bottom: 0px; left: 0px; right: 0px; padding: 1em; margin: 1em;'),
  );

  $hour = $settings['going_down_hour'];
  $minute = $settings['going_down_minute'];
  $year = $settings['going_down_date']['year'];
  $month = $settings['going_down_date']['month'];
  $day = $settings['going_down_date']['day'];
  $date_time = mktime($hour, $minute, 0, $month, $day, $year);

  if ($date_time < $now_time) {
    foreach ($now as $key => $value) {
      if ($key == ('hour' || '$minute')) {
        $settings['going_down_' . $key] = $value;
      }
      else {
        $settings['going_down_date'][$key] = $value;
      };
    };
  };

  $form['going_down'] = array(
    '#title' => t('Going down'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#weight' => -1,
    '#description' => t('Warns users that the site will be going into
      maintenance mode with a message visible on every page.'),
  );
  $form['going_down']['going_down_warning'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show warning'),
    '#default_value' => $settings['going_down_warning'],
  );
  $form['going_down']['going_down_action'] = array(
    '#type' => 'select',
    '#title' => t('Going down action'),
    '#description' => t('This action will be executed after the off-line time
      passes either when a page is requested or when CRON runs.'),
    '#options' => array(
      '0' => t('Continue showing warning message'),
      '1' => t('Stop showing warning message'),
      '2' => t('Put site into maintenance mode'),
    ),
    '#default_value' => $settings['going_down_action'],
  );
  $form['going_down']['going_down_datetime'] = array(
    '#type' => 'item',
    '#title' => t('Going down date and time'),
    '#description' => t('Current server time is @time',
      array('@time' => strftime('%c %z', $now_time))),
  );
  $form['going_down']['going_down_date'] = array(
    '#type' => 'date',
    '#default_value' => $settings['going_down_date'],
    '#prefix' => '<div class="container-inline">',
  );
  $options_hour = drupal_map_assoc(range(0, 23));
  for ($x = 0; $x < 10; $x++) {
    $options_hour[$x] = '0' . $options_hour[$x];
  };
  $form['going_down']['going_down_hour'] = array(
    '#type' => 'select',
    '#default_value' => $settings['going_down_hour'],
    '#options' => $options_hour,
    '#prefix' => '&nbsp;',
    '#suffix' => ':',
  );
  $options_minute = drupal_map_assoc(range(0, 59));
  for ($x = 0; $x < 10; $x++) {
    $options_minute[$x] = '0' . $options_minute[$x];
  };
  $form['going_down']['going_down_minute'] = array(
    '#type' => 'select',
    '#default_value' => $settings['going_down_minute'],
    '#options' => $options_minute,
    '#suffix' => '</div>',
  );
  $form['going_down']['going_down_time_format'] = array(
    '#type' => 'select',
    '#title' => t('Time display format'),
    '#default_value' => $settings['going_down_time_format'],
    '#options' => array(
      'short' => format_date($now_time, 'short'),
      'medium' => format_date($now_time, 'medium'),
      'long' => format_date($now_time, 'long'),
    ),
  );
  $form['going_down']['going_down_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Warning message'),
    '#default_value' => $settings['going_down_message'],
    '#description' => t("Message displayed to warn users that the site is going
      down for maintenance. Use %time in message to display the time set
      above. If JavaScript is enabled on the user's browsers then %time will
      be replaced by a countdown timer in the format: 1 day 6 hours 42 minutes
      4 seconds.", array('%time' => '@time')),
    '#required' => TRUE,
  );
  $form['going_down']['advanced'] = array(
    '#title' => t('Advanced settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['going_down']['advanced']['going_down_style'] = array(
    '#type' => 'textarea',
    '#title' => t('Message CSS'),
    '#description' => t('Text inserted into the %style attribute of the message
      container. Please make sure it is valid CSS with no HTML or line breaks.',
      array('%style' => 'style')),
    '#default_value' => $settings['going_down_style'],
    '#required' => TRUE,
  );
  $form['#validate'][] = 'going_down_system_site_maintenence_mode_form_validate';
  if (user_access('access overlay')) {
    $form['#submit'][] = 'going_down_system_site_maintenence_mode_form_submit';
  }
}

/**
 * Validate the going down form inputs.
 */
function going_down_system_site_maintenence_mode_form_validate($form, &$form_state) {
  if ($form_state['values']['going_down_warning']) {
    // Check date time are in the future.
    $hour = $form_state['values']['going_down_hour'];
    $minute = $form_state['values']['going_down_minute'];
    $year = $form_state['values']['going_down_date']['year'];
    $month = $form_state['values']['going_down_date']['month'];
    $day = $form_state['values']['going_down_date']['day'];
    $now_date = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
    $now_date_time = mktime();
    $down_date = mktime(0, 0, 0, $month, $day, $year);
    $down_date_time = mktime($hour, $minute, 0, $month, $day, $year);

    if ($down_date < $now_date) {
      form_set_error('going_down_date', t('The off-line date must be in the future.'));
    }
    elseif ($down_date_time < $now_date_time) {
      form_set_error('going_down_hour', t('The off-line time must be in the future.'));
      form_set_error('going_down_minute', 'REMOVED');
      // Removes the last error but keeps form error highlighting.
      array_pop($_SESSION['messages']['error']);
    };

    $style = $form_state['values']['going_down_style'];
    if ($style != strip_tags($style)) {
      form_set_error('going_down_style', t('Message CSS cannot contain HTML tags.'));
    };
    if (preg_match('/[\n\r]/', $style)) {
      form_set_error('going_down_style', t('Message CSS cannot contain line breaks.'));
    };
  };
}

/**
 * Additional verification that warning is activated when admin overlay in use.
 */
function going_down_system_site_maintenence_mode_form_submit($form, &$form_state) {
  if ($form_state['values']['going_down_warning']) {
    drupal_set_message(t('Going down warning activated.'));
  }
}

/**
 * Implements hook_cron().
 */
function going_down_cron() {
  if (variable_get('going_down_warning', 0)) {
    $time_down = _going_down_get_offline_time();
    if ($time_down !== FALSE) {
      $time_now = mktime();
      if ($time_now > $time_down) {
        $action = variable_get('going_down_action', 0);
        switch ($action) {
          case 1:
            // Hide message.
            variable_set('going_down_warning', 0);
            break;

          case 2:
            // Set site off-line.
            variable_set('maintenance_mode', 1);
            variable_set('going_down_warning', 0);
            break;
        };
      };
    };
  };
}

/**
 * Get stored variables for time format and message and compile output HTML.
 *
 * @param datetime $time_down
 *   The unix datetime that the site will be going down at.
 *
 * @return string
 *   The HTML to be inserted.
 */
function _going_down_get_html(&$page, $time_down) {
  $time_format = variable_get('going_down_time_format', 'short');
  $time_str = format_date($time_down, $time_format);

  $message_going_down_custom = variable_get('going_down_message', FALSE);
  if ($message_going_down_custom) {
    $message_going_down = check_plain($message_going_down_custom);
  }
  else {
    $message_going_down = t('@site is going offline for maintenance: @time',
      array('@site' => variable_get('site_name', 'Drupal')));
  };

  $message_going_down_time = str_replace('@time', $time_str, $message_going_down);
  $style = check_plain(variable_get('going_down_style', 'background-color: red; border: 2px outset darkred; font-weight: bold; color: papayawhip; position: fixed; z-index: 1000; bottom: 0px; left: 0px; right: 0px; padding: 1em; margin: 1em;'));

  $page['page_bottom']['going_down']= array(
    '#type' => 'markup',
    '#markup' => '<div id="going-down" style="' . $style . '">' . $message_going_down_time . '</div>',
  );
}

/**
 * Get stored variables for date and time and convert to datetime.
 *
 * @return datetime
 *   The unix datetime
 */
function _going_down_get_offline_time() {
  static $time_down = NULL;
  if (is_null($time_down)) {
    $hour = variable_get('going_down_hour', FALSE);
    $minute = variable_get('going_down_minute', FALSE);
    $date = variable_get('going_down_date', FALSE);
    if ($date == FALSE || $hour == FALSE || $minute == FALSE) {
      $time_down = FALSE;
    }
    else {
      $time_down = mktime($hour, $minute, 0, $date['month'], $date['day'], $date['year']);
    };
  };
  return $time_down;
}

/**
 * Helper function to insert countdown timer JavaScript.
 *
 * @param datetime $time_down
 *   The unix datetime that the site will be going down at.
 */
function _going_down_get_js($time_down) {
  $site = variable_get('site_name', 'Drupal');

  $message_going_down_custom = variable_get('going_down_message', FALSE);
  if ($message_going_down_custom) {
    $message_going_down = check_plain($message_going_down_custom);
  }
  else {
    $message_going_down = t('@site is going offline for maintenance: @time',
      array('@site' => $site));
  };

  $message_offline_custom = variable_get('maintenance_mode_message', FALSE);
  if ($message_offline_custom) {
    $message_offline = check_plain($message_offline_custom);
  }
  else {
    $message_offline = t('@site is currently under maintenance. We should be back shortly. Thank you for your patience.',
      array('@site' => $site));
  };

  $js_vars = array(
    'goingDown' => array(
      'timeDown' => $time_down,
      'messageGoingDown' => $message_going_down,
      'messageOffline' => $message_offline,
    ),
  );
  drupal_add_js($js_vars, 'setting');
  drupal_add_js(drupal_get_path('module', 'going_down') . '/going_down.js');
}
