<?php
/**
 * image_field_random.module
 *
 * Defines hooks for image field random module.
 */

/**
 * Implements hook_field_info_alter().
 *
 * Adds default value of the random_default image field setting.
 */
function image_field_random_field_info_alter(&$info) {
  $info['image']['instance_settings']['random_default'] = 0;
  $info['image']['instance_settings']['random_default_path'] = '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds the random default image checkbox to the field instance settings form.
 */
function image_field_random_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#field']['type'] == 'image') {
    $form['instance']['settings']['random'] = array(
      '#type' => 'fieldset',
      '#title' => t('Randomize Default Image Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['instance']['settings']['random']['random_default'] = array(
      '#type' => 'checkbox',
      '#title' => t('Randomize the Image'),
      '#description' => t('If set a random image from the directory will be used if the image field is left blank. Only supports image fields with 1 value.'),
      '#parents' => array('instance', 'settings', 'random_default'),
      '#default_value' => $form['#instance']['settings']['random_default'],
    );
    $form['instance']['settings']['random']['random_default_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Random Image Path'),
      '#description' => t('The directory to pull the random image from. Do not include preceding or trailing slashes.'),
      '#element_validate' => array('_file_generic_settings_file_directory_validate'),
      '#parents' => array('instance', 'settings', 'random_default_path'),
      '#default_value' => $form['#instance']['settings']['random_default_path'],
    );
  }
}

/**
 * Implements hook_field_attach_submit().
 */
function image_field_random_field_attach_submit($entity_type, $entity, $form, &$form_state) {

  // First find the image fields. This proces is much more complicated than
  // it probably should be.
  // 1. Grab the name of the entity bundle
  // 2. Grab the list of fields for the given entity type and bundle
  // 3. Loop through all fields in that type and bundle and get the image
  //    fields names.
  $entity_info = entity_get_info($entity_type);

  // User entity doesn't have a bundle. So you just pass the type into the
  // bundle field.
  if (empty($entity_info['entity keys']['bundle'])) {
    $field_instances_info = field_info_instances($entity_type, $entity_type);
  }
  else {
    $field_instances_info = field_info_instances($entity_type, $entity->{$entity_info['entity keys']['bundle']});
  }

  $image_fields = array();
  foreach ($field_instances_info as $field_name => $field_instance_info) {
    $field_info = field_info_field($field_name);

    if ($field_info['type'] == 'image') {
      $image_fields[$field_name] = $field_instance_info['settings'];
      $image_fields[$field_name]['uri_scheme'] = $field_info['settings']['uri_scheme'];      

      // While the data is available find out if the field is empty in this
      // entity. //ToDo: allow multi-value fields?
      $empty_function = $field_info['module'] . '_field_is_empty';

      if (function_exists($empty_function)) {
        $image_fields[$field_name]['empty'] = !isset($form[$field_name]['und'][0]['#value']) ||
          $empty_function($form[$field_name]['und'][0]['#value'], $field_info);
      }
    }
  }

  // The list of image fields is now available. If the instance setting of that
  // field has random_default set and the image field is empty choose a random
  // file of the supported file type in the directory.
  foreach ($image_fields as $field_name => $field_instance_info) {
    if ($field_instance_info['random_default'] && $field_instance_info['empty']) {

      $files = file_scan_directory(
        $field_instance_info['uri_scheme'] . '://' . $field_instance_info['random_default_path'], 
        '/^[\w|\s|!|@|#|\$|%|\^|&|\*|\(|\)|-|\+|=|\{|\}|\||\[|\]|"|\'|~|`|\.]*\.(' . implode('|', explode(' ', $field_instance_info['file_extensions'])) . ')$/'
      );

      if (empty($files)) {
        drupal_set_message(t('Error. No files found in the selected directory. Check that your image field settings point to the correct directory and that the allowed file extentions are accurate. Your image field was left empty.'), 'error');
        return;
      }

      // Seed the random number generator.
      $seed = time();
      srand($seed);

      // Get a random number in the range of the array.
      $selection = rand(0, count($files) - 1);

      // Obtain the uri of the psudo randomly chosen file.
      $keys = array_keys($files);
      $file_selection = $keys[$selection];

      // 2. Check if a file id exists for it
      $result = db_select('file_managed', 'fm')
              ->fields('fm', array('fid'))
              ->condition('fm.uri', $file_selection)
              ->execute()
              // Fetch as array
              ->fetchAll(PDO::FETCH_ASSOC);

      // 3. If it does not create a new one
      if (empty($result)) {
        GLOBAL $user;

        $file->uid = $user->uid;
        $file->filename = $files[$file_selection]->filename;
        $file->uri = $file_selection;
        $file->filemime = file_get_mimetype($file_selection, $mapping = NULL);
        $file->status = 1;

        file_save($file);
      }
      else {
        $file = file_load($result[0]['fid']);
      }

      // Add a fake file usage to prevent files pulled form the random directory 
      // from being deleted when they are no longer referenced.
      $usage = file_usage_list($file);
      if (!isset($usage['image_field_random'])) {
        file_usage_add($file, 'image_field_random', 'image_field_random', 0);
      }

      // 4. Identify this file for the field
      $entity->{$field_name}['und'][0] = (array) $file;
    }
  }
}
