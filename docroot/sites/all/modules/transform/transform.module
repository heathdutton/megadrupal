<?php
// $Id: transform.module,v 1.0 2011/11/03 22:32:10 dhavyd Exp $

/**
 * @file
 * Implementation of module hooks.
 */


/**
 * Implements hook_preprocess_HOOK() for page.tpl.php.
 */
function transform_preprocess_page(&$vars) {
  drupal_add_js('var $ = jQuery;', 'inline');
}


/**
 * Implementation of hook_init().
 */
function transform_init() {
  // Get JavaScript file  
  $plugin_js = transform_get_plugin('jquery.jqtransform.js');
  if ($plugin_js) {
    drupal_add_js($plugin_js);
  }
  else {
    drupal_set_message('The JQTransform plugin is missing. It is required of Transform module.', 'error');
  }
  // Get CSS file
  $plugin_css = transform_get_plugin('jqtransform.css');
  if ($plugin_css) {
    drupal_add_css($plugin_css);
  }
  else {
    drupal_set_message('The JQTransform plugin CSS is missing. It is required of Transform module.', 'error');
  }
  drupal_add_js(array(
   'transform' => array(
     'enabled' => variable_get('transform_enabled', FALSE),
     'class_id' => variable_get('transform_class_id', 0),
     'form_list' => variable_get('transform_form_list', ''),
     'exclude_class_id' => variable_get('transform_exclude_class_id', 0),
     'exclude_form_list' => variable_get('transform_exclude_form_list', ''),
     'select_width' => variable_get('transform_select_width', 0),
     'textfield_width' => variable_get('transform_textfield_width', 0),
    ),
  ), array('type' => 'setting', 'scope' => JS_DEFAULT));
  drupal_add_js(drupal_get_path('module', 'transform') . '/transform.js');
  drupal_add_css(drupal_get_path('module', 'transform') . '/transform.css');
}


/**
 * Implementation of hook_menu().
 */
function transform_menu() {
  $items = array();
  // Admin  
  $items['admin/config/user-interface/transform'] = array(
    'title' => 'Transform',
    'description' => 'Configure Transform settings.',
    'page callback' => 'drupal_get_form',
    'page arguments'    => array('transform_admin_general_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Returns the path to a file in the jqTransform library.
 *
 * @return mixed
 *   The path to the file or FALSE if no file could be found.
 */
function transform_get_plugin($file) {
  $path = 'sites/all/libraries/jqtransformplugin/' . $file;
  if (file_exists($path)) {
    return $path;
  }
  else {
    return FALSE;
  }
}

/**
 * Menu callback with the administration form.
 */
function transform_admin_general_form($form, &$form_state) {
  $form = array();
  $path = drupal_get_path('module', 'transform');
  $form['transform_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t("Enable transformation of form elements"),
    '#description' => t('Enable transformation of form elements.'),
    '#default_value' => variable_get('transform_enabled', FALSE),
    '#weight' => -10,
  );
  $form['transform_form'] = array(
    '#type' => 'fieldset',
    '#title' => t('Forms to transform'),
    '#weight' => -9,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['transform_form']['transform_class_id'] = array(
    '#type' => 'radios',
    '#title' => t('How to apply the transformation'),
    '#default_value' => variable_get('transform_class_id', 0),
    '#options' => array(
      t('By form class'),
      t('By form id'),
      ),
  );
  $form['transform_form']['transform_form_list'] = array(
    '#type' => 'textarea',
    '#title' => t('Form list'),
    '#default_value' => variable_get('transform_form_list', ''),
    '#disabled' => FALSE,
    '#description' => t('Forms to apply jqTransform to. Ex: <code>myform</code>. One class or id per row. Leave it empty to apply to all forms.'),
    '#attributes' => array('class' => array('transform-form-class-list')),
    '#size' => 20,
  );
  $form['transform_form_exclude'] = array(
    '#type' => 'fieldset',
    '#title' => t('Forms that shouldn\'t get transformed'),
    '#weight' => -8,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['transform_form_exclude']['transform_exclude_class_id'] = array(
    '#type' => 'radios',
    '#title' => t('How to avoid forms being transformed'),
    '#default_value' => variable_get('transform_exclude_class_id', 0),
    '#options' => array(
      t('By form class'),
      t('By form id'),
      ),
  );
  $form['transform_form_exclude']['transform_exclude_form_list'] = array(
    '#type' => 'textarea',
    '#title' => t('Form list'),
    '#default_value' => variable_get('transform_exclude_form_list', ''),
    '#disabled' => FALSE,
    '#description' => t('Forms that should NOT be transformed. Input classes or ids.'),
    '#attributes' => array('class' => array('transform-form-exclude-class-list')),
    '#size' => 20,
  );
  
  $form['transform_min_width'] = array(
    '#type' => 'fieldset',
    '#title' => t('Form element settings'),
    '#weight' => -7,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['transform_min_width']['transform_select_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Set the "min-width" property of selectboxes'),
    '#default_value' => variable_get('transform_select_width', 0),
    '#description' => t('You can define a min-width in pixels. Set "0" for automatic min-width.'),
    '#maxlength' => 5,
    '#size' => 6,
  );
  $form['transform_min_width']['transform_textfield_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Set the "width" property of textfields'),
    '#default_value' => variable_get('transform_textfield_width', 0),
    '#description' => t('You can define a width in pixels. Set "0" for automatic width.'),
    '#maxlength' => 5,
    '#size' => 6,
  );
  
  return system_settings_form($form);
}







