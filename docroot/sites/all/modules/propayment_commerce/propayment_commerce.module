<?php

/**
 * @file
 * 
 * Provides a Transaction Pro payment method.
 */

/**
 * Define URLs, shift and length.
 */
define('PROPAYMENT_COMMERCE_INIT_URL', '/gwprocessor2.php?a=init');
define('PROPAYMENT_COMMERCE_STATUS_REQUEST_URL', '/gwprocessor2.php?a=status_request');

define('PROPAYMENT_COMMERCE_TRANSITION_URL_SHIFT', '7');
define('PROPAYMENT_COMMERCE_INIT_TRANSACTION_SHIFT', '3');
define('PROPAYMENT_COMMERCE_INIT_TRANSACTION_LENGTH', '40');
define('PROPAYMENT_COMMERCE_RESPONSE_SHIFT', '7');

/**
 * Implements hook_permission().
 */
function propayment_commerce_permission() {
  return array(
    'administer propayment_commerce' => array(
      'title' => t('Administer propayment_commerce'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function propayment_commerce_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['propayment_commerce'] = array(
    'title' => t('Propayment commerce'),
    'short_title' => t('Propayment commerce'),
    'display_title' => t('Propayment commerce'),
    'description' => t('Propayment commerce payment'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );
  return $payment_methods;
}

/**
 * Select order_id.
 */
function propayment_commerce_order_id_load($transaction_id) {
  $order_id = db_select('propayment_commerce_order_relations', 'o')
    ->fields('o', array('order_id'))
    ->condition('o.transaction_id', $transaction_id)
    ->execute()
    ->fetchField();
  
  return $order_id;
}

/**
 * Select transaction_id.
 */
function propayment_commerce_transaction_id_load($order_id) {
  $transaction_id = db_select('propayment_commerce_order_relations', 'o')
    ->fields('o', array('transaction_id'))
    ->condition('o.order_id', $order_id)
    ->orderBy('o.rid', 'desc')
    ->execute()
    ->fetchField();
  
  return $transaction_id;
}

/**
 * If GET-parameter exist, redirect to link for ending transaction process.
 */
function propayment_commerce_preprocess_page(&$vars) {
  if (isset($_GET['merchant_transaction_id'])) {
    $merchant_transaction_id = $_GET['merchant_transaction_id'];
    $order_id = propayment_commerce_order_id_load($merchant_transaction_id);
    if ($order_id) {
      $order = commerce_order_load($order_id);
      $success_url = url('checkout/' . $order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
      drupal_goto($success_url);
    }
    else {
      drupal_set_message("Unable to process the request.", "error");
    }
  }
}

/**
 * Returns external user ip.
 */
function propayment_commerce_user_ip() {
  $external_ip = file_get_contents('http://phihag.de/ip/');
  return $external_ip;
}

/**
 * Returns server URL for initial transaction.
 */
function propayment_commerce_server_url($server) {
  $external_server = $server . PROPAYMENT_COMMERCE_INIT_URL;
  return $external_server;
}

/**
 * Returns server URL for status request.
 */
function propayment_commerce_status_request_url($server) {
  $external_server = $server . PROPAYMENT_COMMERCE_STATUS_REQUEST_URL;
  return $external_server;
}

/**
 * Returns the default settings for payment method.
 */
function propayment_commerce_default_settings() {
  return array(
    'propayment_commerce_guid' => '',
    'propayment_commerce_pwd' => '',
    'propayment_commerce_rs' => '',
    'propayment_commerce_server' => '',
    'propayment_commerce_currency' => 'USD',
    'propayment_commerce_merchant_site_url' => 'http://',
  );
}

/**
 * Propayment commerce settings page callback.
 *
 * @return array
 *   A system settings form for Propayment commerce payment method.
 */
function propayment_commerce_settings_form($settings = array()) {
  $form = array();
  $settings = (array)$settings + propayment_commerce_default_settings();
  $form['propayment_commerce_guid'] = array(
    '#type' => 'textfield',
    '#title' => t('Guid'),
    '#default_value' => $settings['propayment_commerce_guid'],
    '#description' => t('Your merchant GUID.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_pwd'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => $settings['propayment_commerce_pwd'],
    '#description' => t('Your processing password.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_rs'] = array(
    '#type' => 'textfield',
    '#title' => t('Routing string'),
    '#default_value' => $settings['propayment_commerce_rs'],
    '#description' => t('Your routing string.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_currency'] = array(
    '#type' => 'textfield',
    '#title' => t('Currency'),
    '#default_value' => $settings['propayment_commerce_currency'],
    '#description' => t('Transaction currency, ISO 4217 3-character code (USD, EUR, CHF, and other).'),
    '#required' => TRUE,
    '#element_validate' => array('_propayment_commerce_element_validate_currency'),
  );
  $form['propayment_commerce_merchant_site_url'] = array(
    '#type' => 'textfield',
    '#default_value' => $settings['propayment_commerce_merchant_site_url'],
    '#title' => t('Merchant site URL'),
    '#description' => t('Purchase site URL.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Transact Pro server'),
    '#required' => TRUE,
    '#description' => t('Enter server URL - test or live.'),
    '#default_value' => $settings['propayment_commerce_server'],
  );
  return $form;
}

/**
 * Validate propayment_commerce_settings form - currency.
 */
function _propayment_commerce_element_validate_currency($element, $form, &$form_state) {
  if (drupal_strlen($element['#value']) < 3) {
    form_error($element, t('Currency must be min 3 characters'));
    return FALSE;
  }
  return TRUE;
}

/**
 * Payment method callback: submit form.
 */
function propayment_commerce_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  $form['propayment_commerce_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Order description'),
    '#description' => t('Order items description, from 5 to 255 characters.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_name_on_card'] = array(
    '#type' => 'textfield',
    '#title' => t('Name on card'),
    '#description' => t('Name, as printed on a card.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_country'] = array(
    '#type' => 'textfield',
    '#title' => t('Country'),
    '#description' => t('2-letter ISO 3166-1-Alpha 2 code.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#description' => t('Min 2 symbols.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_zip'] = array(
    '#type' => 'textfield',
    '#title' => t('ZIP'),
    '#description' => t('ZIP postal code min 2 symbols.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_street'] = array(
    '#type' => 'textfield',
    '#title' => t('Street'),
    '#description' => t('Min 2 symbols.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#description' => t("Send NA if you don't have state information."),
    '#required' => TRUE,
  );
  $form['propayment_commerce_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone number'),
    '#description' => t('Min 5 symbols.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    '#description' => t('Valid e-mail address.'),
    '#required' => TRUE,
  );
  $form['propayment_commerce_card_bin'] = array(
    '#type' => 'textfield',
    '#title' => t('Card BIN'),
    '#description' => t('First 6 characters of CC number.'),
    '#required' => FALSE,
  );
  $form['propayment_commerce_bin_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank name'),
    '#description' => t('Cardholder bank name (non-mandatory).'),
    '#required' => FALSE,
  );
  $form['propayment_commerce_bin_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank phone'),
    '#description' => t('Cardholder bank phone given on a back side of used card (non-mandatory).'),
    '#required' => FALSE,
  );
  return $form;
}

/**
 * Payment method callback: validate callback for the payment submission form.
 */
function propayment_commerce_submit_form_validate($payment_method, $pane_form, $pane_values, $order) {
  if (drupal_strlen($pane_values['propayment_commerce_description']) < 5) {
    form_error($pane_form['propayment_commerce_description'], t('Order description: Please enter min 5 characters.'));
    return FALSE;
  }
  if (drupal_strlen($pane_values['propayment_commerce_description']) > 255) {
    form_error($pane_form['propayment_commerce_description'], t('Order description: Please enter max 255 characters.'));
    return FALSE;
  }
  if (drupal_strlen($pane_values['propayment_commerce_country']) != 2) {
    form_error($pane_form['propayment_commerce_country'], t('Country ISO code must be 2 symbols.'));
    return FALSE;
  }
  if (drupal_strlen($pane_values['propayment_commerce_city']) < 2) {
    form_error($pane_form['propayment_commerce_city'], t('City: Please enter min 2 symbols.'));
    return FALSE;
  }
  if (drupal_strlen($pane_values['propayment_commerce_zip']) < 2) {
    form_error($pane_form['propayment_commerce_zip'], t('ZIP: Please enter min 2 symbols.'));
    return FALSE;
  }
  if (drupal_strlen($pane_values['propayment_commerce_street']) < 2) {
    form_error($pane_form['propayment_commerce_street'], ('Street: Please enter min 2 symbols.'));
    return FALSE;
  }
  if (drupal_strlen($pane_values['propayment_commerce_phone']) < 5) {
    form_error($pane_form['propayment_commerce_phone'], t('Phone: Please enter min 5 symbols.'));
    return FALSE;
  }
  if (!valid_email_address($pane_values['propayment_commerce_email'])) {
    form_error($pane_form['propayment_commerce_email'], t('Please enter valid e-mail address.'));
    return FALSE;
  }
  return TRUE;
}

/**
 * Payment method callback: submit form submission.
 */
function propayment_commerce_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['propayment_commerce'] = $pane_values;
  $rand_transaction_id = $order->order_id + time();
  
  $data = array(
    'order_id' => $order->order_id,
    'transaction_id' => $rand_transaction_id,
  );
  drupal_write_record('propayment_commerce_order_relations', $data);
}

/**
 * Payment method callback: payment redirect form.
 */
function propayment_commerce_redirect_form($form, &$form_state, $order, $payment_method) {
  $order_data = $order->data['propayment_commerce'];
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = $wrapper->commerce_order_total->value();
  $transaction_id = propayment_commerce_transaction_id_load($order->order_id);

  
  $service_settings = array(
    'guid' => $payment_method['settings']['propayment_commerce_guid'],
    'pwd' => sha1($payment_method['settings']['propayment_commerce_pwd']),
    'rs' => $payment_method['settings']['propayment_commerce_rs'],
    'currency' => $payment_method['settings']['propayment_commerce_currency'],
    'merchant_site_url' => $payment_method['settings']['propayment_commerce_merchant_site_url'],
    'user_ip' => propayment_commerce_user_ip(),
    'merchant_transaction_id' => $transaction_id,
    'amount' => $order_total['amount'],
    'name_on_card' => $order_data['propayment_commerce_name_on_card'],
    'description' => $order_data['propayment_commerce_description'],
    'street' => $order_data['propayment_commerce_street'],
    'zip' => $order_data['propayment_commerce_zip'],
    'city' => $order_data['propayment_commerce_city'],
    'country' => $order_data['propayment_commerce_country'],
    'state' => $order_data['propayment_commerce_state'],
    'phone' => $order_data['propayment_commerce_phone'],
    'email' => $order_data['propayment_commerce_email'],
    'card_bin' => $order_data['propayment_commerce_card_bin'],
    'bin_name' => $order_data['propayment_commerce_bin_name'],
    'bin_phone' => $order_data['propayment_commerce_bin_phone'],   
  );
  
  $server_url = propayment_commerce_server_url($payment_method['settings']['propayment_commerce_server']);
  $initCurl = curl_init();
  curl_setopt_array($initCurl, array(
    CURLOPT_URL => $server_url,
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_POST => TRUE,
    CURLOPT_SSL_VERIFYPEER => FALSE,
    CURLOPT_POSTFIELDS => $service_settings,
  ));
  
  $response = curl_exec($initCurl);
  drupal_set_message($response);
  curl_close($initCurl);
  $check_url = strpos($response, 'Onsite:');

  $transition_url = substr($response, $check_url + PROPAYMENT_COMMERCE_TRANSITION_URL_SHIFT);
  $check_url = strpos($response, 'OK:');
  $init_transaction_id = substr($response, $check_url + PROPAYMENT_COMMERCE_INIT_TRANSACTION_SHIFT, $length = PROPAYMENT_COMMERCE_INIT_TRANSACTION_LENGTH);
  
  $record = array(
    'init_transaction_id' => $init_transaction_id,
    'transaction_id' => $transaction_id,
  );
  drupal_write_record('propayment_commerce_transaction_relations', $record);

  drupal_goto($transition_url, array());
}

/**
 * Payment method callback: redirect form return validation.
 */
function propayment_commerce_redirect_form_validate($order, $payment_method) {
  $transaction_id = propayment_commerce_transaction_id_load($order->order_id);
  
  $init_transaction_id = db_select('propayment_commerce_transaction_relations', 't')
    ->fields('t', array('init_transaction_id'))
    ->condition('t.transaction_id', $transaction_id)
    ->execute()
    ->fetchField();
  
  $status_transaction = array(
    'request_type' => 'transaction_status',
    'init_transaction_id' => $init_transaction_id,
    'guid' => $payment_method['settings']['propayment_commerce_guid'],
    'pwd' => sha1($payment_method['settings']['propayment_commerce_pwd']),
  );

  $status_transaction_url = propayment_commerce_status_request_url($payment_method['settings']['propayment_commerce_server']);

  $initCurl = curl_init();
  curl_setopt_array($initCurl, array(
    CURLOPT_URL => $status_transaction_url,
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_POST => TRUE,
    CURLOPT_SSL_VERIFYPEER => FALSE,
    CURLOPT_POSTFIELDS => $status_transaction,
  ));
  $response = curl_exec($initCurl);
  curl_close($initCurl);

  $response_shift = substr($response, PROPAYMENT_COMMERCE_RESPONSE_SHIFT);
  if (strcasecmp($response_shift,'Success') == 0) {
    drupal_set_message(t('Transaction success'));
    return TRUE;
  } 
  elseif (strcasecmp($response_shift,'Pending') == 0) {
    drupal_set_message(t('Transaction status: pending'));
  }
  else {
    dpm($status_transaction_url);
    drupal_set_message(t('Transaction failed'));
    return FALSE;
  }
}

/**
 * Payment redirect form submit.
 */
function propayment_commerce_redirect_form_submit($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Create transaction.
  $transaction = commerce_payment_transaction_new('propayment_commerce', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order_wrapper->commerce_order_total->amount->value();
  $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = t('The payment has been completed.');
  commerce_payment_transaction_save($transaction);
}
