<?php
/**
 * @file
 * Provides the ability to embed documents from Scribd.
 *
 * This module provides an input filter to add a document (from Scribd) anywhere
 * input filters are accepted. You have the option of replacing the filter tag
 * with a link to the scribd or embedding the scribd itself.
 */

/**
 * Implements hook_help().
 */
function scribd_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#scribd_filter':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Scribd Input filter makes it possible to embed documents from Scribd everywhere input filters are accepted. For more information, see the project for <a href="@scribd_filter">Scribd Input Filter</a>.', array('@scribd_filter' => 'http://drupal.org/project/scribd_filter')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Usage') . '</dt>';
      $output .= '<dd>' . t('To embed a document, you need to use the following code snippet: <samp>[scribd id=doc_id key=access_key mode=mode]</samp>.') . ' where mode is optional.</dd>';
      $output .= '<dt>' . t('How to find the document id?') . '</dt>';
      $output .= '<dd><ul>';
      $output .= '<li>' . t('Navigate to Scribd and find the embed button') . '.</li>';
      $output .= '<li>' . t('Click on embed') . '.</li>';
      $output .= '<li>' . t('You can copy and paste the code used for Wordpress directly.') . '.</li>';
      $output .= '</ul></dd>';

      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implementation of hook_filter_info().
 */
function scribd_filter_filter_info() {
  $filters['scribd_filter'] = array(
    'title' => t('Scribd documents filter'),
    'description' => t('Substitutes [scribd id=xx key=yy mode=zz] tags with the scribd document located at http://scribd.com/doc/xx.'),
    'process callback'  => 'scribd_filter_scribd_filter_process',
    'default settings' => array(
      'scribd_filter_display_method' => 'embed',
    ),
    'settings callback' => 'scribd_filter_scribd_filter_settings',
    'tips callback' => 'scribd_filter_filter_tips',
    'cache' => TRUE,
  );
  return $filters;
}

class ScribdInputFilter {
  // suggested in #regex '/\[scribd\sid=([^\s]+)\skey=([^\s]+)\smode=([^]]+)\]/';
  protected $pattern = '/\[scribd\sid=([^\s]+)\skey=([^\s]+)\s*(?:mode=(\S+))?]/';
  protected $filter;
  protected $default_mode = 'scroll';
  
  public function __construct($filter) {
    $this->filter = $filter;
  }
  
  static public function type() {
    return array(
      'embed_html5' => 'Html5',
      'link' => 'Link'
    );
  }
  
  static public function mode() {
    return array(
      'scroll' => 'Scroll',
      'slideshow' => 'Slideshow',
      'book' => 'Book',
      );
  }
  
  public function parse($text) {
    return preg_replace_callback($this->pattern, array($this, 'embed'), $text);  
  }
  
  protected function embed($matches) {
    $data['scribd_doc_id'] = check_plain($matches[1]);
    $data['scribd_access_key'] = check_plain($matches[2]);
    if (!empty($matches[3])) {
      $data['scribd_mode'] = check_plain($matches[3]);
    }
    else {
      if (!empty($this->filter->settings['scribd_filter_display_mode'])) {
        $data['scribd_mode'] = check_plain($this->filter->settings['scribd_filter_display_mode']);
      }
      else {
        $data['scribd_mode'] = $this->default_mode;
      }
    }
    if ($data['scribd_mode'] == 'link') {
      return $this->link($data['scribd_doc_id'], $data['scribd_access_key']);
    }

    switch (check_plain($this->filter->settings['scribd_filter_display_method'])) {
      case 'link':
        return $this->link($data['scribd_doc_id'], $data['scribd_access_key']);
        break;
      default:
        return $this->embed_html5($data['scribd_doc_id'], $data['scribd_access_key'], $data['scribd_mode']);
        break;
    }
  }

  protected function embed_html5($scribd_doc_id, $scribd_access_key, $scribd_mode = 'scroll') {
    $output = array('<iframe class="scribd_iframe_embed" src="//www.scribd.com/embeds/' . $scribd_doc_id . '/content?start_page=1&view_mode=' . $scribd_mode . '&access_key=' . $scribd_access_key . '" data-auto-height="true" data-aspect-ratio="1.44339622641509" scrolling="no" id="doc_' . $scribd_doc_id . '" width="100%" height="600" frameborder="0"></iframe>');
    return implode("\n", $output);
  }

  /**
   * Replace the text with a link.
   */
  function link($scribd_doc_id, $scribd_access_key) {
    $scribd_url = '//www.scribd.com/full/' . $scribd_doc_id . '?access_key=' . $scribd_access_key;
    return l($scribd_url, $scribd_url);
  }
}

/**
 * Process callback for hook_filter_info().
 */
function scribd_filter_scribd_filter_process($text, $filter, $format) {
  $si = new ScribdInputFilter($filter);
  return $si->parse($text);  
}

/**
 * Settings callback for scribd_filter.
 */
function scribd_filter_scribd_filter_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['scribd_filter_display_method'] = array(
    '#title' => t('Scribd display method'),
    '#type' => 'select',
    '#options' => ScribdInputFilter::type(),
    '#default_value' => isset($filter->settings['scribd_filter_display_method']) ? $filter->settings['scribd_filter_display_method'] : $defaults['scribd_filter_display_method'],
  );
  $settings['scribd_filter_display_mode'] = array(
    '#title' => t('Scribd display mode'),
    '#type' => 'select',
    '#options' => ScribdInputFilter::mode(),
    '#default_value' => isset($filter->settings['scribd_filter_display_mode']) ? $filter->settings['scribd_filter_display_mode'] : $defaults['scribd_filter_display_mode'],
  );  
  return $settings;
}

/**
 * Implements hook_filter_tips().
 */
function scribd_filter_filter_tips($filter, $format, $long = FALSE) {
  $display = $filter->settings['scribd_filter_display_method'];
  $action = $display == 'embed' ? t('embed the scribd document') : t('create a link to the scribd document');
  return t('Use [scribd id=xx key=yy mode=zz] where xx is you scribd document_id, yy is your scribd document access_key and zz is your optional mode (scroll or slideshow) to %action.', array('%action' => $action));
}
