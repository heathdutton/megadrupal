<?php

/**
 * @file
 * Module file for Password Reset Tab.
 */

/**
 * Implements hook_help().
 */
function password_reset_tabs_help($path, $arg) {
  switch ($path) {
    case "admin/help#password_reset_tabs":
      return '<p>' . t('Password reset tabs module provides a simple UI to change password.You can access this UI <a href="@pass_reset">here</a>', array('@pass_reset' => url('password_reset'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function password_reset_tabs_menu() {
  $items['password_reset'] = array(
    'title' => 'Password Reset',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_pass'),
    'file' => 'user.pages.inc',
    'file path' => drupal_get_path('module', 'user'),
    'weight' => 0,
  );
  $items['password_reset/identification'] = array(
    'title' => 'IDENTIFICATION',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_pass'),
    'file' => 'user.pages.inc',
    'file path' => drupal_get_path('module', 'user'),
    'weight' => 1,
  );
  $items['password_reset/validation'] = array(
    'title' => 'VALIDATION',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'page callback' => 'password_reset_tabs_validation',
    'weight' => 2,
  );
  $items['password_reset/new_password'] = array(
    'title' => 'NEW PASSWORD',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'page callback' => 'password_reset_tabs_new_password',
    'weight' => 3,
  );
  $items['password_reset/done'] = array(
    'title' => 'YOU ARE DONE',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'page callback' => 'password_reset_tabs_done',
    'weight' => 4,
  );

  return $items;
}

/**
 * Call back function for validation tab.
 */
function password_reset_tabs_validation() {
  drupal_add_js(drupal_get_path('module', 'password_reset_tabs') . '/js/password_reset_tabs.js');
  $param = drupal_get_query_parameters();
  if (!empty($param) && isset($param['workflow-valid']) && drupal_valid_token($param['workflow-valid'], 'password-reset-validate')) {
    return t('Further instructions have been sent to your e-mail address.');
  }
  drupal_access_denied();
}

/**
 * Call back function for new password tab.
 */
function password_reset_tabs_new_password() {
  $param = drupal_get_query_parameters();
  global $user;
  if (!empty($param) && isset($param['workflow-new-pwd']) && $user->uid) {
    $account = user_load($user->uid);
    // Load user.pages.inc from the user module for getting user_pass form.
    module_load_include('inc', 'user', 'user.pages');
    return drupal_get_form('user_profile_form', $account);
  }
  drupal_access_denied();
}

/**
 * Call back function for You are done tab.
 */
function password_reset_tabs_done() {
  drupal_add_js(drupal_get_path('module', 'password_reset_tabs') . '/js/password_reset_tabs.js');
  $param = drupal_get_query_parameters();
  if (!empty($param) && isset($param['workflow-done']) && drupal_valid_token($param['workflow-done'], 'password-reset-validate-2') && user_is_logged_in()) {
    session_destroy();
    return t('Your password changed successfully.');
  }
  drupal_access_denied();
}

/**
 * Implements hook_menu_alter().
 */
function password_reset_tabs_menu_alter(&$items) {
  // Drupal's default behavior sows a user-login form
  // This menu alter will reduce the step and keep user on same tabular UI.
  $items['user/reset/%/%/%'] = array(
    'title' => 'Account settings',
    'access callback' => 'password_reset_tabs_pass_reset_access',
    'access arguments' => array(2, 3, 4),
    'page callback' => 'password_reset_tabs_pass_reset_page',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );
}
/**
 * Access callback for use with Drupal's menu API.
 */
function password_reset_tabs_pass_reset_access($uid, $timestamp, $hashed_pass) {
  if (user_is_logged_in()) {
    return FALSE;
  }

  // Following logic copied from user_pass_reset().
  // Time out, in seconds, until login URL expires. Defaults to 24 hours =
  // 86400 seconds.
  $timeout = variable_get('user_password_reset_timeout', 86400);
  $current = REQUEST_TIME;
  // Some redundant checks for extra security.
  $users = user_load_multiple(array($uid), array('status' => '1'));
  $account = !empty($users) ? reset($users) : NULL;
  if ($timestamp <= $current && $account) {
    // No time out for first time login.
    if ($account->login && $current - $timestamp > $timeout) {
      drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
      drupal_goto('user/password');
    }
    elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login, $uid)) {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * Page callback for use with Drupal's menu API.
 *
 * This page replaces core one-time login form provided by user_pass_reset().
 *
 * @param int $uid
 *   The uid of user.
 * @param int $timestamp
 *   Login timestamp of user.
 * @param string $hashed_pass
 *   Encrupted password generated by password reset link.
 * @param string $option
 *   Variable to get nature of action on which this function is called.
 */
function password_reset_tabs_pass_reset_page($uid, $timestamp, $hashed_pass, $option = NULL) {
  // Original action is preserved.
  $token = drupal_get_token('password-reset-validate');
  if ($option == 'original') {
    return drupal_get_form('user_pass_reset', $uid, $timestamp, $hashed_pass);
  }
  elseif ($option == 'login') {
    return drupal_get_form('user_pass_reset', $uid, $timestamp, $hashed_pass, $option);
  }
  // Action to login and  redirect to reset password page.
  else {
    if (isset($uid)) {
      $user = user_load($uid);
      $form_state = array();
      $form_state['uid'] = $user->uid;
      user_login_submit(array(), $form_state);
      $token = drupal_get_token('password-reset-validate-3');
      drupal_goto('password_reset/new_password/', array('query' => array('workflow-new-pwd' => $token)));
    }
  }
}

/**
 * Implements hook_form_form_id_alter() for user_pass_form().
 */
function password_reset_tabs_form_user_pass_alter(&$form, &$form_state, $form_id) {
  $path = current_path();
  if (strstr($path, 'password_reset')) {
    $form['#submit'][] = 'password_reset_tabs_redirect_new_password_tab';
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'password_reset_tabs') . '/js/password_reset_tabs.js',
    );
  }
}

/**
 * Implements hook_form_form_id_alter() for user_profile_form().
 */
function password_reset_tabs_form_user_profile_form_alter(&$form, &$form_state) {
  $path = current_path();
  if (strstr($path, 'new_password')) {
    $form['#submit'][] = 'password_reset_tabs_validation_pass_change_done';
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'password_reset_tabs') . '/js/password_reset_tabs.js',
    );
  }
}

/**
 * Submit function for user_pass form().
 */
function password_reset_tabs_redirect_new_password_tab(&$form, &$form_state) {
  $token = drupal_get_token('password-reset-validate');
  $form_state['redirect'] = array('password_reset/validation', array('query' => array('workflow-valid' => $token)));

}

/**
 * New submit function for user_profile form.
 */
function password_reset_tabs_validation_pass_change_done($form, &$form_state) {
  $token = drupal_get_token('password-reset-validate-2');
  $form_state['redirect'] = array('password_reset/done', array('query' => array('workflow-done' => $token)));
}
