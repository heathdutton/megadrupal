<?php
/**
 * @file
 * Campaignion newsletter module.
 */

use \Drupal\campaignion_newsletters\ProviderFactory;
use \Drupal\campaignion_newsletters\Subscription;
use \Drupal\campaignion_newsletters\Subscriptions;

/**
 * Implements hook_cron().
 */
function campaignion_newsletters_cron() {
  _campaignion_newsletters_poll();
}

/**
 * Polling function.
 */
function _campaignion_newsletters_poll() {
  $factory = ProviderFactory::getInstance();
  foreach ($factory->providers() as $source) {
    $provider = $factory->providerByKey($source);
    foreach ($provider->getLists() as $list) {
      $list->save();
    }
  }
}

/**
 * Implements hook_permission().
 */
function campaignion_newsletters_permission() {
  return array(
    'administer newsletters' => array(
      'title' => t('Administer Newsletters'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function campaignion_newsletters_menu() {
  $items['admin/config/services/campaignion_newsletters'] = array(
    'title' => t('Newsletter settings'),
    'description' => t('Configure newsletter API behavior'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignion_newsletters_admin_settings'),
    'access arguments' => array('administer newsletters'),
    'file' => 'includes/pages.php',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Implements hook_form_FORM_ID_alter().
 * Implements hook_form_redhen_contact_contact_form_alter().
 */
function campaignion_newsletters_form_redhen_contact_contact_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'php', 'campaignion_newsletters', 'includes/pages');
  _campaignion_newsletters_form_redhen_contact_contact_form_alter($form, $form_state);
}

/**
 * Implements hook_webform_component_info().
 */
function campaignion_newsletters_webform_component_info() {
  return array(
    'newsletter' => array(
      'label' => t('Newsletter Subscription'),
      'description' => t('Offers a user to subscribe to a given newsletter.'),
      'features' => array(
        'conditional' => FALSE,
        'description' => FALSE,
      ),
      'file' => 'campaignion_newsletters.component.inc',
    ),
  );
}

/**
 * Implements hook_webform_submission_insert().
 *
 * If the webform doesn't need confirmation invoke our hook_email_confirmed()
 * immediately.
 */
function campaignion_newsletters_webform_submission_insert($node, $submission) {
  $webform = new \Drupal\little_helpers\Webform\Webform($node);
  if (!$webform->needsConfirmation()) {
    campaignion_newsletters_webform_confirm_email_email_confirmed($node, $submission);
  }
}

/**
 * Implements hook_webform_confirm_email_email_confirmed().
 */
function campaignion_newsletters_webform_confirm_email_email_confirmed($node, $submission) {
  $s = new \Drupal\campaignion\CRM\Import\Source\WebformSubmission($node, $submission);
  // use value of the component with key 'email' as email address
  if (!($email = $s->value('email'))) {
    return;
  }
  foreach ($s->webform->componentsByType('newsletter') as $component) {
    $value = $s->valuesByCid($component['cid']);
    if (!empty($value['subscribed'])) {
      $needs_opt_in = !$component['extra']['opt_in_implied'];
      foreach ($component['extra']['lists'] as $list_id => $value) {
        if (!empty($value)) {
          $subscription = Subscription::byData($list_id, $email);
          $subscription->delete = FALSE;
          $subscription->source = $s;
          $subscription->needs_opt_in = $needs_opt_in;
          $subscription->save();
        }
      }
    }
  }
}

/**
 * Implements hook_form_builder_element_types().
 *
 * Defines a new form_builder field:
 * - 'title'
 * - in which ['palette_group'] it appears. @see hook_form_builder_palette_groups().
 * - it's ['default'] representation (is used when dragging it into the preview area) including:
 *   - ['#webform_component'] the component array for webform (most important it's ['#webform_component']['type'].
 *     @see hook_webform_component_info().
 *   - ['#type'] the form-API type is used as the default form_builder element_type.
 *     @see hook_element_info().
 *   - ['#form_builder'] the form_builder type (again).
 *     @see hook_form_builder_element_types().
 * - whether or not the field is ['unique'].
 *
 * Fields are defined per form_type (so far only 'webform' is relevant for us).
 */
function campaignion_newsletters_form_builder_element_types($form_type, $form_id) {
  if ($form_type != 'webform') {
    return;
  }
  require_once dirname(__FILE__) . '/campaignion_newsletters.component.inc';
  $map = _form_builder_webform_property_map('newsletter');
  // default value is handled by the newsletter property.
  unset($map['properties']['default_value']);
  unset($map['properties']['description']);
  $fields['newsletter'] = array(
    'title' => t('Newsletter'),
    'properties' => array_keys($map['properties']),
    'default' =>  array(
      '#form_builder' => array('element_type' => 'newsletter'),
    ) + _form_builder_webform_default('newsletter'),
  );
  return $fields;
}

/**
 * Implements hook_form_builder_types_alter().
 *
 * Remove the email_newsletter field from campaignion_form_builder.
 */
function campaignion_newsletters_form_builder_types_alter(&$fields, $form_type, $form_id) {
  if ($form_type == 'webform') {
    unset($fields['email_newsletter']);
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Save all subscriptions for the redhen_contact.
 */
function campaignion_newsletters_entity_insert($entity, $entity_type) {
  campaignion_newsletters_entity_update($entity, $entity_type);
}

/**
 * Implements hook_entity_update().
 *
 * Save all subscriptions for the redhen_contact.
 */
function campaignion_newsletters_entity_update($entity, $entity_type) {
  if ($entity_type != 'redhen_contact') {
    return;
  }
  if (empty($entity->newsletters)) {
    $entity->newsletters = Subscriptions::byContact($entity);
  }
  $entity->newsletters->save();
}

/**
 * Implements hook_entity_delete().
 *
 * Unsubscribe from all newsletters.
 */
function campaignion_newsletters_entity_delete($entity, $entity_type) {
  if ($entity_type != 'redhen_contact') {
    return;
  }
  if (empty($entity->newsletters)) {
    $entity->newsletters = Subscriptions::byContact($entity);
  }
  $entity->newsletters->unsubscribeAll();
  $entity->newsletters->save();
}

/**
 * Implements hook_cronapi().
 */
function campaignion_newsletters_cronapi($op, $job = NULL) {
  $items['campaignion_newsletters_send_queue'] = array(
    'description' => 'Send queue data to newsletter providers',
    'rule' => '*/2 * * * *',
    'weight' => 100,
    'file' => 'includes/cron.php',
    'callback' => 'campaignion_newsletters_send_queue',
  );
  return $items;
}
