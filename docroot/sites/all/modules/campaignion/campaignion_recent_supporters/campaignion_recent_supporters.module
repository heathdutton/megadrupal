<?php

define ('CAMPAIGNION_RECENT_SUPPORTENODE_URL_PART', 'recent-supporters');
define ('CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_DEFAULT', 0);
define ('CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_FULL', 1);
define ('CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_INITIAL', 2);
define ('CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_FIRST_ONLY', 3);

use \Drupal\campaignion_recent_supporters\Loader;

function campaignion_recent_supporters_campaignion_recent_supporters_backend_info() {
  $backends['activity'] = '\\Drupal\\campaignion_recent_supporters\\ActivityBackend';
  return $backends;
}

function _campaignion_recent_supporters_name_display_options() {
  return array(
    CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_DEFAULT => t('Default'),
    CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_FULL => t('Full name'),
    CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_INITIAL => t('First name and initial'),
    CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_FIRST_ONLY => t('First name only'),
  );
}

/**
 * Get the current recent supporter settings.
 */
function campaignion_recent_supporters_settings() {
  $saved_settings = variable_get('campaignion_recent_supporters_settings', array()) + array(
    'backend'        => 'activity',
    'query_limit'    => 10,
    'visible_count'  => 6,
    'cycle_toggle'   => 0,
    'country_toggle' => 1,
    'name_display'   => CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_DEFAULT,
  );
  return $saved_settings;
}

/**
 * Implements hook_menu();
 */
function campaignion_recent_supporters_menu() {
  // Serve a localized ISO -> country-name mapping.
  // If clean URLs are disabled, it will always be served through the menu system.
  // If clean URLs are enabled and it already exists, PHP will be bypassed.
  $dir = _campaignion_recent_supporters_countries_dir();
  $items[$dir . '/%'] = array(
    'title' => 'Generate JS country mapping',
    'page callback' => 'campaignion_recent_supporters_country_json',
    'page arguments' => array(count(explode('/', $dir))),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/content/recent-supporters'] = array(
    'title'            => t('Recent Supporter Settings'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('campaignion_recent_supporters_settings_form'),
    'description'      => 'Recent Supporter settings.',
    'access arguments' => array('administer recent supporters'),
    'file'             => 'campaignion_recent_supporters.admin.inc',
  );
  $items['admin/config/content/recent-supporters/general'] = array(
    'title' => t('General settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function campaignion_recent_supporters_permission() {
  $permissions['administer recent supporters'] = array(
    'title'       => t('Administer recent supporter settings'),
    'description' => t('Administer site-wide settings for the recent supporters block.'),
  );
  return $permissions;
}

function _campaignion_recent_supporters_countries_dir() {
  $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
  return $directory_path . '/countries';
}

function campaignion_recent_supporters_preprocess_block(&$variables) {
  if (   $variables['block']->module == 'campaignion_recent_supporters'
      && !empty($variables['block']->block_html_id)) {
    $variables['block_html_id'] = $variables['block']->block_html_id;
  }
}

function campaignion_recent_supporters_preprocess_html($variables) {
  $langcode = '';
  if (!empty($variables['language'])) {
    $lang = preg_split('/-/', $variables['language']->language);
    $langcode = array_shift($lang);
  }
  // try to load localized timeago library
  // if this fails load the default (not localized) timeago lib
  $library = libraries_detect('timeago');
  if (!empty($library['variants'][$langcode])) {
    libraries_load('timeago', $langcode);
  } else {
    libraries_load('timeago');
  }

  // load jQuery Easing library
  libraries_load('jquery.easing');
}
/**
 * Implements hook_library().
 */
function campaignion_recent_supporters_library() {
  $path = drupal_get_path('module', 'campaignion_recent_supporters');
  if (function_exists('libraries_get_path') && file_exists(libraries_get_path('timeago'))) {
    $path = libraries_get_path('timeago');
  }
  return array(
    'timeago' => array(
      'title' => t('Time ago'),
      'website' => 'http://timeago.yarp.com',
      'version' => '1.4.1',
      'js' => array(
        $path . '/jquery.timeago.js',
      ),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function campaignion_recent_supporters_libraries_info() {
  $library = array(
    'timeago' => array(
      'name' => t('Time ago'),
      'vendor url' => 'http://timeago.yarp.com',
      'download url' => 'https://github.com/rmm5t/jquery-timeago',
      'version arguments' => array(
        'file' => 'jquery.timeago.js',
        'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
      ),
      'files' => array(
        'js' => array(
          'jquery.timeago.js',
        ),
      ),
      'variants' => array(),
    ),
    'jquery.easing' => array(
      'name' => t('Time ago'),
      'vendor url' => 'http://gsgd.co.uk/sandbox/jquery/easing/',
      'download url' => 'http://gsgd.co.uk/sandbox/jquery/easing/jquery.easing.1.3.js',
      'version arguments' => array(
        'file' => 'jquery.easing.1.3.js',
        'pattern' => '/jQuery Easing v([0-9a-zA-Z\.]+)/',
        'lines' => 5,
      ),
      'files' => array(
        'js' => array(
          'jquery.easing.1.3.js',
        ),
      ),
    )
  );

  // define all locales as variants of timeago
  foreach (array(
    "ar", "bg", "bs", "ca", "cs", "cy", "da", "de", "el", "en", "en-short", "es", "es-short", "et", "fa", "fi", "fr", "fr-short", "gl", "he", "hr", "hu", "hy", "id", "is", "it", "ja", "jv", "ko", "lt", "mk", "nl", "no", "pl", "pt-br", "pt", "ro", "rs", "ru", "sk", "sl", "sv", "th", "tr", "uk", "uz", "vi", "zh-CN", "zh-TW"
  ) as $variant) {
    $library['timeago']['variants'][$variant] = array(
      'files' => array(
        'js' => array(
          'jquery.timeago.js',
          'locales/jquery.timeago.'.$variant.'.js',
        ),
      ),
    );
  }

  return $library;
}

/**
 * Implements hook_block_info().
 */
function campaignion_recent_supporters_block_info() {
  $info = array(
    'recent_supporters' => array(
      'info'   => t('Recent supporters'),
      'region' => 'sidebar_second',
    ),
    'recent_supporters_all_actions' => array(
      'info'   => t('Recent supporters accumulated for all action pages'),
      'region' => 'sidebar_second',
    ),
  );
  return $info;
}

/**
 * Implements hook_block_view().
 */
function campaignion_recent_supporters_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'recent_supporters':
      $block = _campaignion_recent_supporters_block_recent_supporters();
      break;
    case 'recent_supporters_all_actions':
      $block = _campaignion_recent_supporters_block_recent_supporters_all_actions();
      break;
  }
  return $block;
}

/**
 * creates content for a recent supporters block for 1 specific action;
 * called from hook_block_view();
 */
function _campaignion_recent_supporters_block_recent_supporters() {
  $block = array();
  if (($node = menu_get_object()) == FALSE || isset($node->nid) == FALSE) {
    return NULL;
  }

  // read field settings from the site we are ON
  // and not any related action site (in case we are on a thank_you_page
  // therefore: load the field prior to reloading the node
  $fields = campaignion_recent_supporters_field_instances('node', $node, 'recent_supporters');
  // we use the first field only
  $field = array_shift($fields);
  $show = isset($field['toggle']) ? $field['toggle'] : 0;

  /* thank_you_page integration */
  if (   $node->type == "thank_you_page"
      && isset( $_GET['share']) == TRUE
      && preg_match('@node/(\d+)@', $_GET['share'], $get_nid) == 1) {
    $nid = $get_nid[1];
    $node = node_load($nid);
  }
  if ($node === FALSE) {
    return NULL;
  }

  if ($show) {
    // save values for polling
    $polling_url = $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'campaignion_recent_supporters') . '/poll.php?';
    $options = $field['options'] + campaignion_recent_supporters_settings();
    $backend = Loader::instance()->getBackend($options['backend']);
    $params = $backend->buildParams($options, $node);
    $polling_url .= $params->buildQuery();

    $block['subject'] = t('Recent supporters');
    $supporters = $backend->recentOnOneAction($params);
    $block['content'] = array(
      '#theme' => 'recent_supporters',
      '#supporters' => $supporters,
      '#show_country' => (bool) $options['country_toggle'],
      '#all_actions' => FALSE,
      '#texts' => NULL,
    );

    // set an unique id to use as key in Drupal.settings array
    $block_id = drupal_html_id('campaignion-recent-supporters');
    $block['block_html_id'] = $block_id;
    drupal_add_js(array('recentSupporters' => array(
      'blocks' => array(
        $block_id => array(
          'cycleSupporters' => $options['cycle_toggle'],
          'showCountry' => $options['country_toggle'],
          'visibleCount' => $options['visible_count'],
          'pollingURL' => $polling_url,
          'nodeID' => $node->nid,
          'allActions' => FALSE,
        )
      )
    )), 'setting');

    if ($options['country_toggle']) {
      $dir = _campaignion_recent_supporters_countries_dir();
      drupal_add_js($dir . '/' . $GLOBALS['language']->language . '.js', array('scope' => 'footer', 'preprocess' => FALSE));
    }
  }
  return $block;
}

/**
 * Helper function to get all installed action content types as
 * well as their default recent supporters texts
 */
function _campaignion_recent_supporters_get_types_defaults($lang_code = NULL) {
  global $language;
  static $action_type_info;
  if (!isset($action_type_info)) {
    $action_type_info = \Drupal\campaignion_action\TypeBase::typesInfo();
  }
  $saved_lang = $language;
  if (isset($lang_code)) {
    $language_list = language_list();
    $language      = $language_list[$lang_code];
  }
  $types = array();
  foreach ($action_type_info as $type => $info) {
    $types[$type] = array(
      'enabled' => 1,
      'text'    => $info['parameters']['recent_supporters']['default_text'],
    );
  }
  $language = $saved_lang;

  return $types;
}

/**
 * creates content for a recent supporters block for all configured
 * action pages with configured texts;
 * called from hook_block_view();
 */
function _campaignion_recent_supporters_block_recent_supporters_all_actions() {
  $block = array();
  $saved_settings = campaignion_recent_supporters_settings();
  $types_settings = variable_get('campaignion_recent_supporters_settings_types', array())
    + _campaignion_recent_supporters_get_types_defaults($GLOBALS['language']->language);
  $types = array();
  foreach ($types_settings as $type => $setting) {
    if ($setting['enabled']) {
      $types[] = $type;
    }
  }
  $polling_url = $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'campaignion_recent_supporters') . '/poll.php?';

  $backend = Loader::instance()->getBackend($saved_settings['backend']);
  $params = $backend->buildParams($saved_settings, NULL, $types);
  $polling_url .= $params->buildQuery();

  $supporters  = $backend->recentOnAllActions($params);
  $texts = _campaignion_recent_supporters_get_action_texts($types);

  $block['subject'] = t('Recent supporters');
  $block['content'] = array(
    '#theme'        => 'recent_supporters',
    '#supporters'   => $supporters,
    '#show_country' => ($saved_settings['country_toggle'] == '1') ? TRUE : FALSE,
    '#all_actions'  => TRUE,
    '#texts'        => $texts,
  );

  // set configured texts in generic recentSupporter setting
  drupal_add_js(
    array(
      'recentSupporters' => array(
        'actionTexts'    => $texts,
      )
    ),
    'setting'
  );

  // set an unique id to use as key in Drupal.settings array
  // and fill with block specific settings
  $block_id = drupal_html_id('campaignion-recent-supporters');
  $block['block_html_id'] = $block_id;
  drupal_add_js(array('recentSupporters' => array(
    'blocks' => array(
      $block_id => array(
        'cycleSupporters' => $saved_settings['cycle_toggle'],
        'showCountry'     => $saved_settings['country_toggle'],
        'visibleCount'    => $saved_settings['visible_count'],
        'pollingURL'      => $polling_url,
        'types'           => $types,
        'lang'            => $GLOBALS['language']->language,
        'nameDisplay'     => $saved_settings['name_display'],
        'allActions'      => TRUE,
      ),
    ),
  )),'setting');

  if ($saved_settings['country_toggle']) {
    $dir = _campaignion_recent_supporters_countries_dir();
    drupal_add_js($dir . '/' . $GLOBALS['language']->language . '.js', array('scope' => 'footer', 'preprocess' => FALSE));
  }
  return $block;
}

/**
 * Page callback for country Javascript.
 */
function campaignion_recent_supporters_country_json($filename) {
  $langCode = substr($filename, 0, strlen($filename) - 3);
  $languages = language_list();
  if (isset($languages[$langCode])) {
    $GLOBALS['language'] = $languages[$langCode];
  }
  else {
    return MENU_ACCESS_DENIED;
  }

  $target = 'public://countries/' . $langCode . '.js';
  $target_dir = dirname($target);
  if (!file_prepare_directory($target_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog('campaignion_recent_supporters', 'Unable to create directory: !dir.', array('!dir' => $target_dir), WATCHDOG_ERROR);
    return NULL;
  }

  $countries = country_get_list();
  $output = 'Drupal.settings.recentSupporters.countries = ' . drupal_json_encode($countries) . ';';
  file_put_contents($target, $output);
  file_transfer($target, array('Content-Type' => 'text/javascript', 'Content-Length' => filesize($target)));
}

/**
 * Implements hook_theme().
 */
function campaignion_recent_supporters_theme() {
  $theme['recent_supporters'] = array(
    'variables' => array('supporters' => array(), 'show_country' => FALSE, 'all_actions' => FALSE, 'texts' => array()),
  );
  return $theme;
}

/**
 * theme function for theme('recent_supporters', $variables).
 */
function theme_recent_supporters($variables) {
  $supporters = $variables['supporters'];
  if ($show_country = $variables['show_country']) {
    $countries = country_get_list();
  }
  $output = '';

  if (count($supporters) < 1) {
    $output = '<div class="no-activity-yet">'.t('No recent activity.').'</div>';
    return $output;
  }
  else {
    $all_actions = $variables['all_actions'] ? 'recent-supporters-all-actions' : 'recent-supporters-single-action';
    $texts = $variables['texts'];
    $output .= "<ul class=\"recent-supporters $all_actions\">\n";
    foreach($supporters as $supporter) {
      $action_type = "";
      if (!empty($supporter['action_type'])) {
        $action_type = "action-type-" . $supporter['action_type'];
      }
      $output .= "<li class=\"supporter clearfix $action_type\">\n";

      if ($show_country && isset($supporter['country'])) {
        $classes = empty($supporter['country']) ? 'no-cc' : "flag-".strtolower(drupal_clean_css_identifier($supporter['country']));
        $country_name = (isset($supporter['country']) && isset($countries[$supporter['country']])) ? $countries[$supporter['country']] : '';
        $output .= "<span title=\"".t($country_name)
          ."\" class=\"country flag " . $classes ."\">";
        $output .= $supporter['country'];
        $output .= "</span>\n";
      }
      if ($all_actions === 'recent-supporters-all-actions') {
        $first_name = $supporter['first_name'] . (!empty($supporter['first_name']) ? " " : "");
        $vars['!supporter_name'] = "<span class=\"name\">" . $first_name . "<span class=\"last_name\">" . $supporter['last_name'] . "</span></span>\n";
        $vars['!action_title']   = "<span class=\"title\">";
        if (!empty($supporter['action_url'])) {
          $vars['!action_title']  .= '<a href="'.$supporter['action_url'].'" ';
          $vars['!action_title']  .= 'title="'.$supporter['action_title'].'">';
          $vars['!action_title']  .= $supporter['action_title'];
          $vars['!action_title']  .= '</a>';
        } else {
          $vars['!action_title']  .= $supporter['action_title'];
        }
        $vars['!action_title']  .= "</span>";
        $output .= format_string($texts[$supporter['action_type']], $vars);
      }
      else {
        $output .= "<span class=\"name\">";
        $output .= implode(" ", array($supporter['first_name'], $supporter['last_name']));
        $output .= "</span>\n";
      }
      $output .= "\n<span class=\"time\" data-timestamp=\"".$supporter['timestamp']."\" title=\"".$supporter['rfc8601']."\">";
      $output .= date('d.m.Y H:i', $supporter['timestamp']);
      $output .= "</span>\n";

      $output .= "</li>\n";
    }
    $output .= "</ul>\n";
  }
  return $output;
}

/**
 * callback funtion
 */
function _campaignion_recent_supporters_strip_callback($value) {
  return mb_substr($value, 0, 1);
};

/**
 * helper function: get the configured action texts
 * returns only the texts for the types in the parameter, or all if the parameter is an empty array
 */
function _campaignion_recent_supporters_get_action_texts($types = array()) {
  static $texts;

  if (!isset($texts)) {
    $texts = variable_get('campaignion_recent_supporters_settings_types', _campaignion_recent_supporters_get_types_defaults());
  }
  if (!empty($types)) {
    $filtered_types = array_intersect_key($texts, array_flip($types));
  } else {
    $filtered_types = $texts;
  }
  $result = array();
  // set a new array with the values we also want to expose via JSON or Drupal.settings
  // we do *not* want to expose the variable values as a whole
  foreach ($filtered_types as $type => $value) {
    $result[$type] = $value['text'];
  }
  return $result;
}

/**
 * Implements hook_field_widget_form().
 */
function campaignion_recent_supporters_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $item = isset($items[$delta]) ? $items[$delta] : array();
  if (isset($instance['default_value'][$delta]) && !isset($items[$delta])) {
    $item = $instance['default_value'][$delta];
  }

  $defaults = array(
    'toggle' => 0,
    'options' => array(
      'visible_count' => 6,
      'cycle_toggle' => 0,
      'country_toggle' => 1,
      'name_display' => CAMPAIGNION_RECENT_SUPPORTERS_NAME_DISPLAY_DEFAULT,
    ),
  );

  $item = drupal_array_merge_deep($defaults, $item);

  $toggle_id = drupal_html_id('recent-supporters-toggle');
  $element['toggle'] = array(
    '#title' => t('Display a recent supporters block.'),
    '#description' => t('Display a recent supporters block.'),
    '#type' => 'checkbox',
    '#default_value' => $item['toggle'],
    '#id' => $toggle_id,
  );
  $element['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Recent supporters advanced settings.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#states' => array(
      'visible' => array(
        "#$toggle_id" => array('checked' => TRUE),
      ),
    ),
  );
  $element['options']['name_display'] = array(
    '#title' => t('Supporter name display'),
    '#description' => t('Configure the information displayed about the supporters of this action.'),
    '#type' => 'select',
    '#options' => _campaignion_recent_supporters_name_display_options(),
    '#attributes' => array(),
    '#default_value' => $item['options']['name_display'],
  );
  $element['options']['visible_count'] = array(
    '#title' => t('Number of max. visible supporters.'),
    '#description' => t('Number of max. visible supporters.'),
    '#type' => 'textfield',
    '#size' => 12,
    '#maxlength' => 10,
    '#attributes' => array(),
    '#default_value' => $item['options']['visible_count'],
  );
  $element['options']['cycle_toggle'] = array(
    '#title' => t('Cycle supporters.'),
    '#description' => t('Cycle supporters.'),
    '#type' => 'checkbox',
    '#default_value' => $item['options']['cycle_toggle'],
  );
  $element['options']['country_toggle'] = array(
    '#title' => t('Show country of supporters.'),
    '#description' => t('Show country of supporters.'),
    '#type' => 'checkbox',
    '#default_value' => $item['options']['country_toggle'],
  );

  return $element;
}

/**
 * Implements hook_field_info().
 */
function campaignion_recent_supporters_field_info() {
  $info['recent_supporters'] = array(
    'label' => t('Recent supporters'),
    'description' => t('Allows you to display a recent supporters block.'),
    'settings' => array('style' => NULL),
    'default_widget' => 'recent_supporters',
    'default_formatter' => 'recent_supporters',
  );
  return $info;
}

/**
 * Implements hook_field_widget_info().
 */
function campaignion_recent_supporters_field_widget_info() {
  $info['recent_supporters'] = array(
    'label' => t('Recent supporters'),
    'field types' => array('recent_supporters'),
    'settings' => array('size' => 60),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_info().
 */
function campaignion_recent_supporters_field_formatter_info() {
  $info['recent_supporters'] = array(
    'label' => 'Recent supporters',
    'field types' => array('recent_supporters'),
  );
  return $info;
}

/**
 * Implements hook_field_presave().
 */
function campaignion_recent_supporters_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'recent_supporters') {
    foreach ($items as &$item) {
      if (is_array($item['options'])) {
        $item['options'] = serialize($item['options']);
      }
    }
  }
}

/**
 * Implements hook_field_load().
 */
function campaignion_recent_supporters_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  if ($field['type'] == 'recent_supporters') {
    foreach ($entities as $id => $entity) {
      foreach ($items[$id] as &$item) {
        $item['options'] = unserialize($item['options']);
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function campaignion_recent_supporters_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * utility function: returns all field items by field type in array
 * (indexed by field name)
 */
function campaignion_recent_supporters_field_instances($entity_type, $node, $field_type) {
  $instances = field_info_instances($entity_type, $node->type);
  $recent_supporter_fields = array();
  foreach ($instances as $instance) {
    $field_info = field_info_field($instance['field_name']);
    if ($field_info['type'] == $field_type) {
      $item = field_get_items($entity_type, $node, $instance['field_name']);
      if ($item) {
        $recent_supporter_fields[$instance['field_name']] = $item[0];
      }
    }
  }
  return $recent_supporter_fields;
}
