<?php

use \Drupal\campaignion_action\TypeBase;

/**
 * Implements hook_menu().
 */
function campaignion_wizard_menu() {
  $wizards = TypeBase::types();
  foreach ($wizards as $id => $wizard) {
    $info['wizard/' . str_replace('_', '-', $id)] = array(
      'title'            => 'Wizard',
      'page callback'    => 'campaignion_wizard_new',
      'page arguments'   => array($id),
      'access callback' => 'node_access',
      'access arguments' => array('create', $id),
      'type' => MENU_CALLBACK,
    );
  }
  $info['node/%node/wizard/%'] = array(
    'title'            => 'Edit',
    'page callback'    => 'campaignion_wizard',
    'page arguments'   => array(1, 3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  $info['node/%node/wizard'] = array(
    'title'          => 'Edit',
    'page arguments' => array(1, 'content'),
  ) + $info['node/%node/wizard/%'];
  return $info;
}

/**
 * Implements hook_menu_alter().
 *
 * Override core node edit pages.
 */
function campaignion_wizard_menu_alter(&$info) {
  foreach (TypeBase::types() as $id => $wizard) {
    $type = str_replace('_', '-', $id);
    $info['node/add/' . $type]['page callback'] = 'campaignion_wizard_redirect_add';
  }
  $info['node/%node/edit']['page callback'] = 'campaignion_wizard_redirect_edit';
  $info['node/%node/webform']['type'] = MENU_LOCAL_TASK;
}

/**
 * Page callback for node/%/edit.
 */
function campaignion_wizard_redirect_edit($node) {
  if (TypeBase::isAction($node->type)) {
    campaignion_wizard_redirect("node/{$node->nid}/wizard");
  }
  elseif ($fields = TypeBase::referenceFieldsByType($node->type)) {
    foreach ($fields as $field) {
      // Lookup the action that uses this thank you page.
      $sql = "SELECT entity_id FROM {field_data_$field} WHERE entity_type='node' AND {$field}_node_reference_nid=:nid LIMIT 1";
      $result = db_query($sql, array(':nid' => $node->nid));
      if ($nid = $result->fetchField()) {
        campaignion_wizard_redirect("node/{$nid}/wizard/thank");
      }
    }
  }
  return node_page_edit($node);
}

/**
 * Page callback for node/add/%type.
 */
function campaignion_wizard_redirect_add($type) {
  $type = str_replace('_', '-', $type);
  campaignion_wizard_redirect("wizard/$type");
  return node_add($type);
}

/**
 * Redirect keeping all query parameters.
 *
 * Redirect if redirecting is not explicitly deactivated
 * via $_GET['wizard'] = 'off' .
 */
function campaignion_wizard_redirect($path) {
  if (!(isset($_GET['wizard']) && $_GET['wizard'] == 'off')) {
    $options = array();
    $options['query'] = drupal_get_query_parameters();
    unset($_GET['destination']);
    drupal_goto($path, $options, 301);
  }
}

/**
 * Page callback for wizard/$type.
 */
function campaignion_wizard_new($type) {
  $type = str_replace('-', '_', $type);
  try {
    $actionType = TypeBase::fromContentType($type);
  }
  catch (\Exception $e) {
    return drupal_not_found();
  }
  return $actionType->wizard()->run('content');
}

/**
 * Page callback for wizard/%node/%step.
 */
function campaignion_wizard($node = NULL, $step = 'content') {
  $type = $node->type;
  if (TypeBase::isAction($type)) {
    $actionType = TypeBase::fromContentType($type);
    return $actionType->wizard($node)->run($step);
  }
  else {
    require_once drupal_get_path('module', 'node') . '/node.pages.inc';
    return node_page_edit($node);
  }
}

/**
 * Implements hook_admin_paths().
 */
function campaignion_wizard_admin_paths() {
  $paths = array();
  $paths['node/*/wizard/*'] = TRUE;
  $paths['node/*/wizard'] = TRUE;
  $paths['wizard/*'] = TRUE;
  return $paths;
}

/**
 * Implements hook_theme().
 * Used for better control of webform emails setting form
 */
function campaignion_wizard_theme() {
  $items['campaignion_wizard_email_form'] = array(
    'render element' => 'form',
    'file'           => 'campaignion_wizard.theme.php',
  );

  return $items;
}
