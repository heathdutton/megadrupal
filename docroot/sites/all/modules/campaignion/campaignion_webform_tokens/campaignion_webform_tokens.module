<?php

/**
 * Implements hook_token_info().
 */
function campaignion_webform_tokens_token_info() {
  $types['submission'] = array(
    'name' => t('Webform submission data'),
    'description' => t('Tokens related to data submitted by webforms.'),
  );

  $submission['{component}'] = array(
    'name' => t('Component value'),
    'description' => t('The value of the selected component, e.g. "email_adress".'),
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'submission' => $submission,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function campaignion_webform_tokens_form_webform_client_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'campaignion_webform_tokens_redirect';
}

/**
 * Submit-callback for webform_client_form().
 * 
 * Add hash to the redirect if sid is set.
 */
function campaignion_webform_tokens_redirect($form, &$form_state) {
  if (empty($form_state['webform_completed'])) {
    return;
  }
  if (!is_array($form_state['redirect'])) {
    $form_state['redirect'] = array($form_state['redirect'], array('query' => array()));
  }
  $sid = $form_state['values']['details']['sid'];
  $form_state['redirect'][1] += array('query' => array());
  $form_state['redirect'][1]['query'] += array(
    'sid' => $sid,
    'hash' => drupal_hmac_base64($sid, drupal_get_private_key() . drupal_get_hash_salt()),
  );
}

/**
 * Implements hook_tokens().
 */
function campaignion_webform_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type != 'submission')
    return $replacements;
 
  $sid = (isset($_GET['sid']) && is_numeric($_GET['sid'])) ? (int) $_GET['sid'] : 0;
  $hash = isset($_GET['hash']) ? $_GET['hash'] : NULL;
  $webform_submission = _campaignion_webform_tokens_get_components($sid, $hash);

  foreach ($tokens as $name => $original) {
    // Split token name to get the components name. The remainder is our default value.
    $token = explode('/', $name, 2);
    $component_name = $token[0];
    if (count($token) < 2) {
      $token[] = '';
    }
    if (isset($webform_submission[$component_name])) {
      // render webform component.
      $replacements[$original] = $webform_submission[$component_name];
    } else {
      $replacements[$original] = $token[1];
    }
  }
  return $replacements;
}

function _campaignion_webform_tokens_get_components($sid, $hash) {
  // If hashes are needed:
  //  - check if hash is present and valid
  //  - don't replace anything if hashes don't match.
  if (variable_get('campaignion_webform_tokens_use_hash', '1') == '1') {
    if ($hash !=  drupal_hmac_base64((int) $sid, drupal_get_private_key() . drupal_get_hash_salt()))
      return array();
  }

  module_load_include('inc', 'webform', 'includes/webform.submissions');

  $submission = webform_get_submissions(array('sid' => $sid));
  if (!isset($submission[$sid]))
    return array();

  $nid = $submission[$sid]->nid;
  $subm_node = node_load($nid);
  $components = $subm_node->webform['components'];
  $webform_submission = array();
  foreach ($submission[$sid]->data as $cid => $component_value) {
    if (!empty($component_value['value'][0])) {
      $webform_submission[$components[$cid]['form_key']] = campaignion_webform_tokens_render_component($components[$cid], $component_value['value']);
    }
  }
  return $webform_submission;
}

/**
 * Taken from webform_rules.module: webform_rules_render_component().
 */
function campaignion_webform_tokens_render_component($component, $value, $format = 'text') {
  $display_element = webform_component_invoke($component['type'], 'display', $component, $value, 'text');
  $display_element['#parents'] = array('submitted', $component['form_key']);
  if (!isset($display_element['#id'])) {
    $display_element['#id'] = drupal_clean_css_identifier('edit-' . implode('-', $display_element['#parents']));
  }
  $display_element['#title'] = NULL;
  if (!isset($display_element['#webform_component'])) {
    $display_element['#webform_component'] = $component;
  }
  return drupal_render($display_element);
}

function campaignion_webform_tokens_node_view($node, $view_mode, $langcode) {
  $languages = language_list();
  $node->title = token_replace($node->title, array(), array('language' => $languages[$langcode]));
  
  if ($view_mode == 'teaser') {
    // fix read-more link title.
    $node->content['links']['node']['#links']['node-readmore']['title'] =
      t('Read more<span class="element-invisible"> about @title</span>', array('@title' => strip_tags($node->title)));
  }
  if (($request_node = menu_get_object()) && $request_node->nid == $node->nid) {
    drupal_set_title($node->title);
  }
}

if (module_exists('metatag')) {
  /**
   * Implements template_process_page().
   *
   * Prevent metatag from setting the page title from a cached value.
   */
  function campaignion_webform_tokens_process_page(&$v) {
    if (isset($v['page']['content']['metatags'])) {
      foreach ($v['page']['content']['metatags'] as &$tags) {
        if (isset($tags['title'])) {
          unset($tags['title']);
        }
      }
    }
  }
}
