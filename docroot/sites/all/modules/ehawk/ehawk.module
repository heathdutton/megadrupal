<?php

/**
 * @file
 * Provide tools to integrate webforms with E-Hawk vetting service.
 */

/**
 * Implements hook_permission().
 */
function ehawk_permission() {
  return array(
    'configure ehawk settings' => array(
      'title' => t('Configure E-Hawk Settings'),
      'description' => t('Access configuration pages for integrating webforms with E-Hawk.'),
    ),
  );
}

/**
 * Implements hook_help().
 *
 * @todo Write detailed text for 'admin/help#ehawk' page.
 */
function ehawk_help($path, $arg) {
  switch ($path) {
    case 'admin/config/services/ehawk':
      return '<p>' . t('In order to leverage E-Hawk vetting, you must connect a valid account.') . '</p>';

    case 'admin/config/services/ehawk/forms':
      return '<p>' . t('Select webforms to connect with E-Hawk and configure their field mappings.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function ehawk_menu() {

  // Setup API key.
  $items['admin/config/services/ehawk'] = array(
    'title' => 'E-Hawk',
    'description' => 'E-Hawk configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_ehawk_config'),
    'access arguments' => array('configure ehawk settings'),
  );
  // API key as tab.
  $items['admin/config/services/ehawk/account'] = array(
    'title' => 'Account',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Form chooser.
  $items['admin/config/services/ehawk/forms'] = array(
    'title' => 'Forms',
    'description' => 'E-Hawk forms configuration.',
    'page callback' => '_ehawk_forms',
    'access arguments' => array('configure ehawk settings'),
    'type' => MENU_LOCAL_TASK,
  );
  // Form configure.
  $items['admin/config/services/ehawk/%/config'] = array(
    'title' => 'Configure E-Hawk Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ehawk_form_configure', 4),
    'access arguments' => array('configure ehawk settings'),
  );
  // Form remover.
  $items['admin/config/services/ehawk/%/remove'] = array(
    'title' => 'Remove E-Hawk Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ehawk_form_remove', 4),
    'access arguments' => array('configure ehawk settings'),
  );

  return $items;
}

/**
 * Builds the form for choosing and configuring webform forms.
 *
 * @return string
 *   The html markup for the form.
 */
function _ehawk_forms() {
  $output = drupal_render(drupal_get_form('ehawk_add_form'));
  $output .= ehawk_forms_list();
  return $output;
}

/**
 * Builds the settings form for E-Hawk module.
 *
 * @return array
 *   A Forms API compatible array defining the form.
 *
 * @todo
 *   Add option to fine-tune cron warnings when credits are low, etc.
 */
function _ehawk_config() {
  $form = array();
  $api_key = variable_get('ehawk_api_key', '');
  $description = t('API key is provided by E-Hawk. Need one? <a href="@url" target="_blank">Get a free E-Hawk API key</a>.',
    array('@url' => 'http://www.e-hawk.net/signup/'));

  $form['ehawk_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('E-Hawk API Key'),
    '#description' => $description,
    '#required' => TRUE,
    '#default_value' => check_plain($api_key),
  );

  // If there's already a key present, fetch account status.
  if ($api_key) {
    $form['ehawk_status'] = array(
      '#type' => 'item',
      '#title' => t('Account Status'),
    );
    $key_status = ehawk_check_api_key($api_key);
    if ($key_status['valid'] == FALSE) {
      $form['ehawk_status']['#markup'] = '<span style="color:#B22222;">' . $key_status['message'] . '</span>';
    }
    else {
      $color = ($key_status['units'] > 20) ? "inherit" : "#DAA520";
      $form['ehawk_status']['#markup'] = '<span style="color:' . $color . '">' . $key_status['message'] . '</span>';
    }
  }
  return system_settings_form($form);
}

/**
 * Checks on an API key to see if it's valid.
 *
 * @param string $key
 *   The user-provided API key for E-Hawk.
 *
 * @return array
 *   Associative array containing info on the provided key's status.
 */
function ehawk_check_api_key($key) {

  $protocol = 'http';
  // Setting to HTTPS can cause 'Error opening socket ssl://... in some envt's.
  $url_base = $protocol . '://www.e-hawk.net/vet/credits.php';
  $parameters = array(
    'apikey' => $key,
  );
  $full_url = url($url_base, array('query' => $parameters));
  $options = array(
    'method' => 'GET',
    'max_redirects' => 1,
    'timeout' => 10,
  );
  $response = drupal_http_request($full_url, $options);

  // If there was an HTTP problem, yo I'll log it.
  if ($response->code != 200) {
    watchdog('ehawk', 'API key verification HTTP error: ' . $response->error);
    return array(
      'valid' => FALSE,
      'message' => t('Sorry, an error occurred. HTTP response code @code', array('code' => $response->code)),
    );
  }

  // Process the response if we got one.
  $data = json_decode($response->data);

  if ($data->status == 'ERROR') {
    variable_del('ehawk_api_key_valid');
    watchdog('ehawk', 'API key verification response error: ' . $data->reason);
    return array(
      'valid' => FALSE,
      'message' => t('Sorry, an error occurred. EHawk error: @error', array('@error' => $data->reason)),
    );
  }
  elseif ($data->status == 'OK') {
    variable_set('ehawk_api_key_valid', TRUE);
    if ($data->plan == 'Annual') {
      return array(
        'valid' => TRUE,
        'message' => t('Your Plan: @plan, Monthly Limit: @credits', array('@plan' => $data->plan, '@credits' => $data->monthly_limit)),
        'units' => (int) $data->monthly_limit,
        'plan' => 'monthly',
      );
    }
    elseif ($data->plan == 'Suspended') {
      return array(
        'valid' => FALSE,
        'message' => t('Warning: Your E-Hawk plan is currently suspended.'),
        'units' => 0,
        'plan' => 'suspended',
      );
    }
    else {
      return array(
        'valid' => TRUE,
        'message' => t('Your Plan: @plan, Credits Remaining: @credits', array('@plan' => $data->plan, '@credits' => $data->credits)),
        'units' => (int) $data->credits,
        'plan' => 'pay-as-you-go',
      );
    }
  }
  else {
    variable_set('ehawk_api_key_valid', FALSE);
    watchdog('ehawk', 'API key verification response error: Status was ' . $data->status);
    return array(
      'valid' => FALSE,
      'message' => t('Sorry, an error occurred. EHawk response status was @status, expected OK or ERROR', array('@status' => $data->status)),
    );
  }
}

/**
 * Helper function to get webform nodes not yet integrated into E-Hawk.
 *
 * @return array
 *   Associative array of webform nodes.
 */
function _ehawk_potential_forms() {
  $query = db_select('webform', 'w');
  $query->join('node', 'n', 'w.nid = n.nid');
  $query->leftJoin('ehawk_forms', 'e', 'w.nid = e.nid');
  $query->where('e.nid IS NULL');
  $query->fields('n');
  $nodes = $query->execute()->fetchAllAssoc('nid');
  return $nodes;
}

/**
 * Helper function to get webform nodes already integrated into E-Hawk.
 *
 * @return array
 *   Associative array of webform nodes.
 */
function _ehawk_current_forms() {
  $query = db_select('webform', 'w');
  $query->join('node', 'n', 'w.nid = n.nid');
  $query->leftJoin('ehawk_forms', 'e', 'w.nid = e.nid');
  $query->where('e.nid IS NOT NULL');
  $query->fields('n', array('title'));
  $query->fields('e');
  $nodes = $query->execute()->fetchAllAssoc('nid');
  return $nodes;
}

/**
 * Builds a form for choosing a new form to integrate with E-Hawk.
 *
 * @param array $form_state
 *   The keyed array of the current form state.
 *
 * @return array
 *   Forms API array of form components.
 */
function ehawk_add_form($form_state) {

  $node_options = _ehawk_potential_forms();
  $options = array();
  foreach ($node_options as $node) {
    $options[$node->nid] = $node->title;
  }

  $form['wrapper'] = array(
    '#type' => 'fieldset',
    '#attributes' => array('class' => array('container-inline')),
    '#title' => t('Link an Existing Webform'),
  );

  $form['wrapper']['webform'] = array(
    '#type' => 'select',
    '#options' => $options,
  );

  $form['wrapper']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add',
  );

  return $form;
}

/**
 * Processes initial integration of webform with E-Hawk.
 *
 * @param array $form
 *   The nested array of form elements.
 * @param array $form_state
 *   Keyed array of current state of the form.
 */
function ehawk_add_form_submit($form, &$form_state) {

  $nid = $form_state['values']['webform'];
  db_insert('ehawk_forms')
    ->fields(array(
    'nid' => $nid,
    'field_map' => '',
    'options' => '',
    ))
    ->execute();
  $form_state['redirect'] = "admin/config/services/ehawk/$nid/config";
}

/**
 * Outputs a list of all ehawk-enabled forms so that they can be configured.
 *
 * @return string
 *   Drupal-themed table listing the ehawk-enabled forms with actions.
 */
function ehawk_forms_list() {

  $header = array(
    t('Webform'),
    array('data' => t('Operations'), 'colspan' => '2'),
  );

  $nodes = _ehawk_current_forms();
  $rows = array();
  foreach ($nodes as $node) {
    $rows[] = array(
      l($node->title, 'node/' . $node->nid),
      l(t('Configure'), 'admin/config/services/ehawk/' . $node->nid . '/config'),
      l(t('Remove'), 'admin/config/services/ehawk/' . $node->nid . '/remove'),
    );
  }

  if (empty($rows)) {
    $message = t('No webforms currently being processed by E-Hawk.');
    $rows[] = array(
      array('data' => $message, 'colspan' => 3),
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Menu callback to providing form confirming removal of ehawk form integration.
 *
 * @param array $form
 *   Nested array of elements comprising the form.
 * @param array $form_state
 *   The keyed array of the current form's state.
 * @param int $the_id
 *   Node ID of the webform to remove E-Hawk integration from.
 *
 * @return array
 *   Nested array of elements comprising the confirmation form.
 */
function ehawk_form_remove($form, &$form_state, $the_id) {
  $form = array();
  $form['the_id'] = array(
    '#type' => 'value',
    '#value' => $the_id,
  );
  return confirm_form(
    $form,
    t('Are you sure you want to remove E-Hawk for this webform?'),
    'admin/config/services/ehawk/forms',
    t('This action will destroy your configuration for this integration and cannot be undone.')
  );
}

/**
 * Process removal of webform E-Hawk integration.
 *
 * @param array $form
 *   Nested array of form elements.
 * @param array $form_state
 *   Keyed array of current state of the form, including submitted data.
 */
function ehawk_form_remove_submit($form, &$form_state) {
  if ($form_state['values']['the_id']) {
    $num_deleted = db_delete('ehawk_forms')
      ->condition('nid', $form_state['values']['the_id'])
      ->execute();
    if ($num_deleted == 1) {
      drupal_set_message(t('E-Hawk integration removed.'));
    }
    elseif ($num_deleted > 1) {
      drupal_set_message(t('Multiple E-Hawk integrations appear to have been removed.'), 'error');
    }
    else {
      drupal_set_message(t('Integration could not be found.'), 'warning');
    }

  }
  else {
    drupal_set_message(t('E-Hawk integration not removed: form ID not specified.'), 'warning');
  }
  $form_state['redirect'] = 'admin/config/services/ehawk/forms';
}

/**
 * Menu callback to provide a form to config a specific ehawk form integration.
 *
 * @param array $form
 *   Nested array of form elements.
 * @param array $form_state
 *   Keyed array of current state of the form, including submitted data.
 * @param int $nid
 *   Node ID of the webform being integrated into E-Hawk.
 *
 * @return array
 *   Nested array of form elements for Forms API.
 */
function ehawk_form_configure($form, &$form_state, $nid) {

  // Fetch our webform components.
  // @todo: make sure this is a real node, has a webform component, etc.
  $node = node_load($nid);
  $elements = $node->webform['components'];

  // Fetch our settings.
  $config = db_select('ehawk_forms', 'e')
    ->fields('e')
    ->condition('nid', (int) $nid, '=')
    ->execute()
    ->fetchAssoc();
  $config['field_map'] = unserialize($config['field_map']);
  $config['options'] = unserialize($config['options']);

  $allowed_types = array(
    'textfield',
    'select',
    'textarea',
    'email',
    'hidden',
    'number',
  );
  drupal_alter('ehawk_allowed_components', $allowed_types);

  $webform_fields = array();
  $webform_hidden_fields = array();

  // Build $webform_fields into an array of entries, each disabled by default.
  foreach ($elements as $element) {
    $webform_fields[$element['cid']] = array(
      'name'    => $element['name'],
      'key'     => $element['form_key'],
      'enabled' => FALSE,
    );

    // Only hidden fields are populatable by e-hawk.
    if ('hidden' == $element['type']) {
      $webform_hidden_fields[$element['cid']] = array(
        'name'    => $element['name'],
        'key'     => $element['form_key'],
      );
    }

    // Enable if criteria are met.
    if (in_array($element['type'], $allowed_types)) {
      $webform_fields[$element['cid']]['enabled'] = TRUE;

      // Except for multi-selects.
      if (array_key_exists('multiple', $element['extra']) && $element['extra']['multiple'] == 1) {
        $webform_fields[$element['cid']]['enabled'] = FALSE;
      }
    }
  }

  // Build the select menu options array for "to ehawk"
  // Also build an array of disabled option IDs, which we'll disable via JS
  // Because the Drupal Forms API Doesn't support disabling single options.
  $options_array = array();
  $hidden_array = array();
  $disabled_array = array();
  foreach ($webform_fields as $info) {
    $options_array[$info['key']] = $info['name'] . ' (' . $info['key'] . ')';
    if ($info['enabled'] == FALSE) {
      $disabled_array[] = $info['key'];
    }
  }

  foreach ($webform_hidden_fields as $info) {
    $hidden_array[$info['key']] = $info['name'] . ' (' . $info['key'] . ')';
  }

  $ehawk_collection_fields = _ehawk_fields();

  // @todo : support teasing out "details=yes" functionality provided by API.
  $ehawk_return_fields = _ehawk_fields('return');

  // Some fields need descriptions.
  $ehawk_descriptions = array(
    'State'       => t('For US and Canadian locations, should be two-letter code.'),
    'Country'     => t('Should be two-letter ISO code.'),
    'Producer'    => t('If you want to link vets back to a particular partner or lead generator.'),
    'Campaign'    => t('Similar to producer, a campaign ID linked back to the lead or data.'),
    'Ad'          => t('Advertisement ID linked back to the lead or data.'),
    'Whole Name'  => t('Provide either this or separate first/last names, but not both.'),
    'Version'     => t('E-Hawk API version. Not commonly stored'),
  );

  // Begin building our form!
  $form = array();

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'ehawk') . '/js/ehawk-admin.js',
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );

  $form['to_ehawk'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields Provided to E-Hawk'),
    '#description' => t('Identify which fields in this webform should be passed to E-Hawk for vetting. E-Hawk provides better scores the more information is provided. <em>Some field types cannot be sent to E-Hawk.</em>'),
    '#collapsible' => TRUE,
  );

  // Fields being provided to ehawk.
  foreach ($ehawk_collection_fields as $field_label => $field_name) {
    $form['to_ehawk'][$field_name] = array(
      '#type' => 'select',
      '#title' => $field_label,
      '#options' => $options_array,
      '#empty_option' => t('- Do Not Provide -'),
    );

    if (isset($config['field_map'][$field_name])) {
      $form['to_ehawk'][$field_name]['#default_value'] = $config['field_map'][$field_name];
    }

    if (isset($ehawk_descriptions[$field_label])) {
      $form['to_ehawk'][$field_name]['#description'] = $ehawk_descriptions[$field_label];
    }
  }

  // Then the hidden field of disabled select options.
  $form['to_ehawk']['disabled_options'] = array(
    '#type' => 'hidden',
    '#value' => implode(',', $disabled_array),
  );

  // Now build the fieldset for assigning what we get back from ehawk.
  $form['from_ehawk'] = array(
    '#type' => 'fieldset',
    '#title' => t('Data Returned from E-Hawk'),
    '#description' => t('Identify which fields in this webform should have their values populated by values returned from E-Hawk. Only <strong>hidden</strong> fields are eligible.'),
    '#collapsible' => TRUE,
  );

  foreach ($ehawk_return_fields as $field_label => $field_name) {
    $form['from_ehawk'][$field_name] = array(
      '#type' => 'select',
      '#title' => $field_label,
      '#options' => $hidden_array,
      '#empty_option' => t('- Do Not Populate -'),
    );

    if (isset($config['field_map'][$field_name])) {
      $form['from_ehawk'][$field_name]['#default_value'] = $config['field_map'][$field_name];
    }

    if (isset($ehawk_descriptions[$field_label])) {
      $form['from_ehawk'][$field_name]['#description'] = $ehawk_descriptions[$field_label];
    }
  }

  // Now build the fieldset for advanced options.
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['options']['provide_empty'] = array(
    '#type' => 'checkbox',
    '#title' => t('Provide empty values'),
    '#description' => t("By default, fields left blank by users are not sent to E-Hawk (per E-Hawk's recommendation) as they severely negatively impact the vetting score. Check this override this behavior and send empty values. <em>Not recommended.</em>"),
    '#default_value' => (isset($config['options']['provide_empty'])) ? $config['options']['provide_empty'] : "",
  );

  $form['options']['suppress_server'] = array(
    '#type' => 'checkbox',
    '#title' => t('Suppress server data'),
    '#description' => t("By default, IP address, user agent and referrer information is automatically provided to E-Hawk via PHP \$_SERVER variables. Check this to suppress delivery of these. You might need to do this if you're using a proxy/caching/balancing system that prevents those values from being populated correctly."),
    '#default_value' => (isset($config['options']['suppress_server'])) ? $config['options']['suppress_server'] : "",
  );

  // @todo: options for timeout, HTTPS?, revet toggle, details=yes, etc.
  $form['actions'] = array('#type' => 'actions');

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'admin/config/services/ehawk/forms'),
  );

  return $form;
}

/**
 * Process saving a configuration.
 *
 * @param array $form
 *   Nested array of form elements.
 * @param array $form_state
 *   Keyed array of current state of the form, including submitted data.
 */
function ehawk_form_configure_submit($form, &$form_state) {
  $val = $form_state['values'];

  $nid = $val['nid'];

  $fields = array_values(_ehawk_fields());
  $fields = array_merge($fields, _ehawk_fields('return'));

  $map = array();
  $opts = array();

  foreach ($fields as $field) {
    if (isset($val[$field]) && $val[$field] != '') {
      $map[$field] = $val[$field];
    }
  }

  $map_string = serialize($map);

  foreach ($opts as $option) {
    if (isset($val[$option]) && $val[$option]) {
      $opts[$option] = $val[$option];
    }
  }
  $opt_string = serialize($opts);

  db_merge('ehawk_forms')
    ->key(array('nid' => $nid))
    ->fields(array(
        'field_map' => $map_string,
        'options' => $opt_string,
    ))
    ->execute();

  drupal_set_message(t('Configuration options saved'));
  $form_state['redirect'] = 'admin/config/services/ehawk/forms';
}

/**
 * Implements hook_form_alter().
 *
 * Alter forms to capture E-Hawk's required data.
 */
function ehawk_form_alter(&$form, &$form_state, $form_id) {

  // We only care about webforms.
  if (strpos($form_id, 'webform_client_form_') !== 0) {
    return;
  }

  // We only care about webforms ehawk is processing.
  $webform_id = (int) str_replace('webform_client_form_', '', $form_id);
  if (!$webform_id) {
    return;
  }
  $count = db_select('ehawk_forms', 'e')
    ->fields('e')
    ->condition('nid', $webform_id)
    ->execute()
    ->rowCount();
  if ($count != 1) {
    return;
  }

  // Add client side E-Hawk required form fields.
  $form['talon'] = array(
    '#default_value' => '{"version": 2, "status": -1}',
    '#type' => 'hidden',
    '#attributes' => array('id' => 'talon'),
  );

  $form['E_HAWK_REFERER'] = array(
    '#type' => 'hidden',
  );

  if (isset($_SERVER['HTTP_REFERER'])) {
    $form['E_HAWK_REFERER']['#value'] = $_SERVER['HTTP_REFERER'];
  }
  else {
    $form['E_HAWK_REFERER']['#value'] = '';
  }

  // Include E-Hawk JS file.
  $form['#attached']['js'][] = 'https://talon.e-hawk.net/js/EHawkTalon.js';

  // Include E-Hawk JS snippet.
  $form['#attached']['js']['jQuery(document).ready(function($) {eHawkTalon();});'] = array('type' => 'inline');

  // Register E-Hawk API connector as a form submission handler that runs early.
  array_unshift($form['#submit'], 'ehawk_api_connector');
}

/**
 * Check a webform's submission against E-Hawk's vetting API.
 *
 * @param array $form
 *   Nested array of form elements.
 * @param array $form_state
 *   Keyed array of current state of the form, including submitted data.
 */
function ehawk_api_connector($form, &$form_state) {

  $nid = $form['#node']->nid;

  // Make sure we have a valid api key before we eff around with DB queries.
  if (variable_get('ehawk_api_key_valid') !== TRUE) {
    return;
  }

  // Pull this node's ehawk options, if present. Otherwise, continue on...
  $results = db_select('ehawk_forms', 'e')
    ->fields('e')
    ->condition('e.nid', $nid)
    ->execute();
  $count = $results->rowCount();
  if ($count != 1) {
    return;
  }
  $config = $results->fetch();
  $config->field_map = unserialize($config->field_map);
  $config->options = unserialize($config->options);
  $config->apikey = variable_get('ehawk_api_key');
  $config->version = 'V1.5';

  // Set Vet API request vars.
  $post_array['details']  = 'yes';
  $post_array['apikey']   = $config->apikey;
  $post_array['proxy']    = _ehawk_encode_proxy();
  // Maybe this shouldn't be hard-coded?
  $post_array['revet']    = 'yes';
  // Send $_SERVER data, unless suppressed.
  if (!isset($config->options['suppress_server']) || $config->options['suppress_server'] != 1) {
    $post_array['ip'] = ip_address();
    $post_array['useragent'] = $_SERVER['HTTP_USER_AGENT'];
    if (!empty($form_state['values']['E_HAWK_REFERER'])) {
      $post_array['referer'] = $form_state['values']['E_HAWK_REFERER'];
    }
  }
  else {
    $post_array['ip'] = '10.0.0.100';
    // E-Hawk needs *something for an IP* so this is our default.
  }

  // Provide the talon.
  $talon_fingerprint = '';
  if (isset($form_state['values']['talon'])) {
    $post_array['talon'] = $form_state['values']['talon'];
    $talon = json_decode($form_state['values']['talon']);
    $talon_fingerprint = $talon->fp;
  }

  // Loop thru config->field_map.
  foreach ($config->field_map as $ehawk_field => $webform_field) {

    // Make sure we're not trying to process a return field.
    if (in_array($ehawk_field, array_values(_ehawk_fields('return')))) {
      continue;
    }

    $post_array[$ehawk_field] = $form_state['values']['submitted'][$webform_field];

    // Lowercase-ify State and Country.
    if ($ehawk_field == 'state' || $ehawk_field == 'country') {
      $post_array[$ehawk_field] = strtolower($form_state['values']['submitted'][$webform_field]);
    }

    // Cleanup phone number extras.
    elseif ($ehawk_field == 'phone') {
      $post_array[$ehawk_field] = str_replace(array('-', '.', ' ', '(', ')'), '', $form_state['values']['submitted'][$webform_field]);
    }

    // Cleanup dates.
    elseif ($ehawk_field == 'birth_date') {
      if (is_array($form_state['values']['submitted'][$webform_field])) {
        $birthdate_value = $form_state['values']['submitted'][$webform_field]['year']
          . '-' . str_pad($form_state['values']['submitted'][$webform_field]['month'], 2, '0', STR_PAD_LEFT)
          . '-' . str_pad($form_state['values']['submitted'][$webform_field]['day'], 2, '0', STR_PAD_LEFT);
      }
      else {
        $birthdate_value = date('Y-m-d', strtotime($form_state['values']['submitted'][$webform_field]));
      }
      $post_array[$ehawk_field] = $birthdate_value;
    }

    // Cleanup URLs.
    elseif ($ehawk_field == 'url') {
      $post_array[$ehawk_field] = _ehawk_add_protocol($form_state['values']['submitted'][$webform_field]);
    }

    // Cleanup everything else.
    // TO DO: more input sanitization.
    else {
      $post_array[$ehawk_field] = htmlspecialchars((string) $form_state['values']['submitted'][$webform_field]);
    }
  }

  // Make sure we're not submitting a blank value, unless we're supposed to.
  if (!isset($config->options['provide_empty']) || $config->options['provide_empty'] != 1) {
    foreach ($post_array as $field => $value) {
      if (empty($value)) {
        unset($post_array[$field]);
      }
    }
  }

  // Invoke E-Hawk vetting API.
  $curl = curl_init("https://api.e-hawk.net/vetting.php");
  if (!empty($curl)) {
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, TRUE);
    curl_setopt($curl, CURLOPT_POST, TRUE);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
    // Ehawk docs say FALSE, drupal codesniffer says true...
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, TRUE);
    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 10);
    curl_setopt($curl, CURLOPT_TIMEOUT, 6);
    curl_setopt($curl, CURLOPT_USERAGENT, "E-HAWK_Vet Connector " . $config->version);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_array);
    $data = curl_exec($curl);
    curl_close($curl);

    // Get the data and do stuff.
    if (!empty($data)) {
      // Setup return array.
      $ehawk_return = array('fingerprint' => $talon_fingerprint);

      $vet_array = json_decode($data, TRUE);
      // Extract vet info.
      if (is_array($vet_array['score'])) {
        $ehawk_return['score-value']  = $vet_array['score'][1];
        $ehawk_return['score-type']   = $vet_array['score'][2];
      }
      // Vet error.
      else {
        $ehawk_return['score-value']  = FALSE;
        $ehawk_return['score-type']   = "No risk score: " . $vet_array['error_message'];
      }

      // Load the fingerprint returned by API if found, as it's better.
      if (isset($vet_array['fingerprint'])) {
        $ehawk_return['fingerprint']  = $vet_array['fingerprint'];
      }

      // Misc other values.
      $ehawk_return['version']        = $vet_array['version'];
      $ehawk_return['transaction_id'] = $vet_array['transaction_id'];
      $ehawk_return['status']         = $vet_array['status'];
      $ehawk_return['json']           = (string) $data;
      $ehawk_return['error_message']  = $vet_array['error_message'];

      // Insert vetting API values into Drupal submission flow.
      foreach ($config->field_map as $ehawk_value => $webform_field) {
        // Make sure we're only trying to process a return field.
        if (!in_array($ehawk_value, array_values(_ehawk_fields('return')))) {
          continue;
        }
        $form_state['values']['submitted'][$webform_field] = $ehawk_return[$ehawk_value];
      }
    }
    else {
      watchdog('ehawk', 'No data received from E-Hawk API endpoint');
    }
  }
}

/**
 * Encode the client's perceiveable proxy settings for E-Hawk consumption.
 *
 * @return int
 *   Proxy encoding value.
 */
function _ehawk_encode_proxy() {
  if (isset($_SERVER['FORWARDED'])) {
    return 1;
  }
  elseif (isset($_SERVER['FORWARDED_FOR_IP'])) {
    return 2;
  }
  elseif (isset($_SERVER['HTTP_CLIENT_IP'])) {
    return 3;
  }
  elseif (isset($_SERVER['HTTP_FORWARDED_FOR'])) {
    return 4;
  }
  elseif (isset($_SERVER['HTTP_FORWARDED_FOR_IP'])) {
    return 5;
  }
  elseif (isset($_SERVER['HTTP_PROXY_CONNECTION'])) {
    return 6;
  }
  elseif (isset($_SERVER['HTTP_VIA'])) {
    return 7;
  }
  elseif (isset($_SERVER['HTTP_X_FORWARDED'])) {
    return 8;
  }
  elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    return 9;
  }
  elseif (isset($_SERVER['HTTP_MT_PROXY_ID'])) {
    return 10;
  }
  elseif (isset($_SERVER['HTTP_X_PROXY_ID'])) {
    return 11;
  }
  elseif (isset($_SERVER['HTTP_Z_FORWARDED_FOR'])) {
    return 12;
  }
  elseif (isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) {
    return 13;
  }
  elseif (isset($_SERVER['HTTP_CLIENT_IP'])) {
    return 14;
  }
  return 0;
}

/**
 * Helper function for referencing various E-Hawk fields.
 *
 * @param string $type
 *   String indicating class of fields to return.
 *
 * @return array
 *   Associative array containing list of relevant fields.
 *
 * @todo
 *   Support returning values from "details=yes" provided by API.
 */
function _ehawk_fields($type = 'collection') {
  if ('collection' == $type) {
    return array(
      'Email Address'  => 'email',
      'Phone Number'   => 'phone',
      'Street'         => 'street',
      'State'          => 'state',
      'Postal Code'    => 'postalcode',
      'Country'        => 'country',
      'Website'        => 'website',
      'Whole Name'     => 'name',
      'First Name'     => 'first_name',
      'Last Name'      => 'last_name',
      'User Name'      => 'username',
      'Birthdate'      => 'birth_date',
      'Producer'       => 'producer_id',
      'Campaign'       => 'campaign',
      'Ad'             => 'ad',
    );
  }
  else {
    return array(
      'Version'        => 'version',
      'Transaction ID' => 'transaction_id',
      'Status Code'    => 'status',
      'Error Message'  => 'error_message',
      'Risk Score'     => 'score-value',
      'Risk Type'      => 'score-type',
      'Fingerprint'    => 'fingerprint',
      'Complete JSON'  => 'json',
    );
  }
}

/**
 * Implements hook_cron().
 *
 * Hook to regularly compute credits remaining (if any), valid API, etc.
 *
 * @todo
 *   Make 10 credits a configurable limit before notices get generated.
 */
function ehawk_cron() {
  // Only run every other hour to reduce load on everyone.
  $hour = intval(date('H'));
  if ($hour % 2 != 0) {
    return;
  }

  $api_key = variable_get('ehawk_api_key');

  $keycheck = ehawk_check_api_key($api_key);
  if (!$keycheck['valid']) {
    drupal_set_message(t('There is a problem with your E-Hawk API key.'), 'error', FALSE);
  }
  elseif ($keycheck['units'] < 10) {
    drupal_set_message(t('You only have @num E-Hawk credits remaining this month.', array('@num' => $keycheck['units'])));
  }
}

/**
 * Helper for URL protocols, prepends URL scheme if needed.
 *
 * @param string $url
 *   URL string.
 * @param string $scheme
 *   The URL scheme prefix.
 *
 * @return string
 *   The URL with the scheme present.
 */
function _ehawk_add_protocol($url, $scheme = 'http://') {
  return parse_url($url, PHP_URL_SCHEME) === NULL ? $scheme . $url : $url;
}
