<?php
/**
 * @file
 * Primary hook implementations for the commerce_auto_checkout module.
 */

/**
 * Implements hook_menu_alter().
 *
 * Change the cart page callback.
 */
function commerce_auto_checkout_menu_alter(&$items) {
  if (variable_get('commerce_auto_checkout_disable_cart_page', TRUE)) {
    $items['cart'] = array(
      'title' => 'Shopping cart',
      'page callback' => 'commerce_auto_checkout_cart_view',
      'access arguments' => array('access content'),
    );
  }
}

/**
 * Menu callback.
 *
 * Skip the cart page if disabled. Redirect to checkout page.
 */
function commerce_auto_checkout_cart_view() {
  if (variable_get('commerce_auto_checkout_disable_cart_page', TRUE)) {
    if (variable_get('commerce_auto_checkout_auto_create_order', FALSE)) {
      global $user;

      // Load the current shopping cart order.
      $order = commerce_cart_order_load($user->uid);

      // If there's no active order, create a new one.
      if (empty($order)) {
        $order = commerce_cart_order_new($user->uid);
        $order = commerce_order_new($user->uid, 'checkout_checkout');

        // Save the order to get its ID.
        commerce_order_save($order);
      }

      // Add the default product if there's nothing in the cart.
      if (empty($order->commerce_line_items)) {
        $product_id = variable_get('commerce_auto_checkout_auto_create_products');
        if (!empty($product_id)) {
          // Load the default product.
          $product = commerce_product_load($product_id);
          // Verify the product is able to load.
          if (!empty($product)) {
            $line_item = commerce_product_line_item_new($product, 1, $order->order_id);

            // Save the line item to get its ID.
            commerce_line_item_save($line_item);

            // Add the line item to the order.
            $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
            $order_wrapper->commerce_line_items[] = $line_item;

            // Save the order again to update its line item reference field.
            commerce_order_save($order);
          }
          else {
            watchdog('commerce_auto_checkout', 'Unable to load the default product: %id', array('%id' => $product_id));
          }
        }
      }
    }

    // Continue to the checkout page.
    drupal_goto('checkout');
  }
  else {
    module_load_include('inc', 'commerce_cart', 'includes/commerce_cart.pages');
    return commerce_cart_view();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the cancel button on checkout.
 */
function commerce_auto_checkout_form_commerce_checkout_form_checkout_alter(&$form, &$form_state, $form_id) {
  if (variable_get('commerce_auto_checkout_disable_cart_page', TRUE)) {
    $form['buttons']['cancel']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a checkout setting for disabling the cart page.
 * The user will be redirected directly to checkout page.
 * The pane from this module could be used for updating the cart.
 *
 * @see commerce_auto_checkout_cart_view().
 * @see commerce_auto_checkout_form_commerce_checkout_form_checkout_alter().
 */
function commerce_auto_checkout_form_commerce_checkout_builder_form_alter(&$form, $form_state, $form_id) {
  $form['commerce_auto_checkout'] = array(
    '#type' => 'fieldset',
    '#title' => t('Auto-Checkout'),
    'commerce_auto_checkout_disable_cart_page' => array(
      '#type' => 'checkbox',
      '#title' => t('Disable the cart page'),
      '#description' => t('The cart page will be skipped. The commerce cart form checkout pane could be used for updating the cart.<br />Note: Changing this will cause the menus to be reloaded, which could slow down the site for a moment.'),
      '#default_value' => variable_get('commerce_auto_checkout_disable_cart_page', TRUE),
    ),
    'commerce_auto_checkout_auto_create_order' => array(
      '#type' => 'checkbox',
      '#title' => t('Create empty order if one does not exists'),
      '#description' => t('If the user does not already have an in-progress order, optionally create one. Without this, when a visitor loads the cart page they will be redirected to @url.', array('@url' => url(variable_get('commerce_checkout_empty_redirect', ''), array('absolute' => TRUE)))),
      '#default_value' => variable_get('commerce_auto_checkout_auto_create_order', FALSE),
      '#states' => array(
        'visible' => array(
         ':input[name="commerce_auto_checkout_disable_cart_page"]' => array('checked' => TRUE),
        ),
      ),
    ),
  );

  // Build a list of products to show.
  $products = array();
  $query = new EntityFieldQuery;
  $results = $query
    ->entityCondition('entity_type', 'commerce_product')
    // Only show active products.
    ->propertyCondition('status', 1)
    // Sort by the title. This won't take into account i18n, but for our meagre
    // needs, it should suffice.
    ->propertyOrderBy('title')
    ->execute();
  if (!empty($results)) {
    $results = reset($results);
    foreach (entity_load('commerce_product', array_keys($results)) as $entity) {
      $products[$entity->product_id] = $entity->title;
    }
  }

  if (empty($products)) {
    drupal_set_message(t('Once <a href="@url">products are added</a> it will be possible to set a default product to be added to the cart when the cart would otherwise be empty.', array('@url' => url('admin/commerce/products/add'))));
  }
  else {
    $form['commerce_auto_checkout']['commerce_auto_checkout_auto_create_products'] = array(
      '#type' => 'select',
      '#title' => t('Default product for empty cart'),
      '#description' => t('Commerce requires a product to be in the cart in order to load the checkout page. Select the product that will be automatically added to the cart when the cart would be otherwise empty.'),
      '#options' => $products,
      '#empty_option' => '- No product added automatically -',
      '#default_value' => variable_get('commerce_auto_checkout_auto_create_products', FALSE),
      '#states' => array(
        'visible' => array(
         ':input[name="commerce_auto_checkout_disable_cart_page"]' => array('checked' => TRUE),
         ':input[name="commerce_auto_checkout_auto_create_order"]' => array('checked' => TRUE),
        ),
      ),
    );
  }

  $form['actions']['#weight'] = 10;
  $form['actions']['submit']['#submit'][] = 'commerce_auto_checkout_form_commerce_checkout_builder_form_submit';
}

/**
 * Custom submit function to save module settings after form submit.
 *
 * @see commerce_auto_checkout_form_commerce_checkout_builder_form_alter().
 * @see commerce_auto_checkout_cart_view().
 * @see commerce_auto_checkout_form_commerce_checkout_form_checkout_alter().
 */
function commerce_auto_checkout_form_commerce_checkout_builder_form_submit($form, $form_state) {
  // Work out what the current setting is.
  $existing_value = variable_get('commerce_auto_checkout_disable_cart_page');

  // Save module settings.
  $new_value = $form_state['values']['commerce_auto_checkout_disable_cart_page'];
  variable_set('commerce_auto_checkout_disable_cart_page', $new_value);
  variable_set('commerce_auto_checkout_auto_create_order', $form_state['values']['commerce_auto_checkout_auto_create_order']);
  variable_set('commerce_auto_checkout_auto_create_products', $form_state['values']['commerce_auto_checkout_auto_create_products']);

  // Reload the menus if the setting changed.
  if ($existing_value != $new_value) {
    variable_set('menu_rebuild_needed', TRUE);
  }
}
