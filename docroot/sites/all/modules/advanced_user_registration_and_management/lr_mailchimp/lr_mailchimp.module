<?php
/**
 * @file
 * Implement mailchimp support for Drupal
 */
/**
 * Implements hook_menu().
 * Responed to url handling for lr_mailchimp_menu module.
 *
 * @return array An array of menu items
 */
function lr_mailchimp_menu() {
  $file_path = drupal_get_path('module', 'lr_mailchimp');
  $items['admin/config/people/userregistration/mailchimp'] = array(
    'title' => 'MailChimp',
    'description' => 'Mailchimp settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lr_mailchimp_settings_form'),
    'access arguments' => array('administer mailchimp'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
    'file path' => $file_path,
    'file' => 'includes/lr_mailchimp.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Responed to Define user permissions.
 *
 * @return array An array of permission settings
 */
function lr_mailchimp_permission() {
  return array(
    'administer mailchimp' => array(
      'title' => t('Administer Mailchimp settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * GEt mailchimp fields data from extended profile data and subscribe user.
 *
 * @param object $userprofile User profile data that you got from social network
 * @param object $account User account information
 */
function lr_mailchimp_integration($userprofile, $account) {
  $mailchimp_api_key = trim(variable_get('lr_mailchimp_apikey'));
  $mailchimp_list_id = trim(variable_get('lr_mailchimp_list'));

  if (!class_exists('MCAPI')) {
    require drupal_get_path('module', 'lr_mailchimp') . '/integrations/mailchimp/MCAPI.class.php';
  }

  $login_radius_mailchimp = new MCAPI($mailchimp_api_key);
  $temp_merge_vars = $login_radius_mailchimp->listMergeVars($mailchimp_list_id);

  foreach ($temp_merge_vars as $temp_merge_var) {
    // If value exists for this merge var.
    $mailchimp_merger_var_field = variable_get('mailchimp_merge_var_' . $temp_merge_var['tag']);
    $value = "";
    if (isset($mailchimp_merger_var_field)) {
      if ($mailchimp_merger_var_field == 'User ID') {
        $value = $account->uid;
      }
      elseif ($mailchimp_merger_var_field == 'Username') {
        $value = $account->name;
      }
      elseif ($mailchimp_merger_var_field == 'BirthDate' && $temp_merge_var['field_type'] == 'birthday') {
        $value = isset($userprofile->$mailchimp_merger_var_field) ? $userprofile->$mailchimp_merger_var_field : '';
        if (!empty($value)) {
          if ($temp_merge_var['dateformat'] == 'DD/MM') {
            $value = date('d/m', strtotime($value));
          }
          elseif ($temp_merge_var['dateformat'] == 'MM/DD') {
            $value = date('m/d', strtotime($value));
          }
        }
      }
      else {
        $value = isset($userprofile->$mailchimp_merger_var_field) ? $userprofile->$mailchimp_merger_var_field : '';
      }
    }

    if ($temp_merge_var['field_type'] == 'birthday') {
      if (!empty($value)) {
        $birth_date = explode('/', $value);
        if ($temp_merge_var['dateformat'] == 'DD/MM') {
          $merge_vars[$temp_merge_var['tag']]['day'] = $birth_date[0];
          $merge_vars[$temp_merge_var['tag']]['month'] = $birth_date[1];
        }
        else {
          $merge_vars[$temp_merge_var['tag']]['day'] = $birth_date[1];
          $merge_vars[$temp_merge_var['tag']]['month'] = $birth_date[0];
        }
      }
    }
    elseif ($mailchimp_merger_var_field == 'lr_Addresses' && $temp_merge_var['field_type'] == 'address') {
      $merge_vars[$temp_merge_var['tag']]['addr1'] = isset($userprofile->Addresses[0]->Address1) ? $userprofile->Addresses[0]->Address1 : (isset($userprofile->MainAddress) && !is_array($userprofile->MainAddress) ? $userprofile->MainAddress : 'NA');
      $merge_vars[$temp_merge_var['tag']]['addr2'] = isset($userprofile->Addresses[0]->Address2) ? $userprofile->Addresses[0]->Address2 : 'NA';
      $merge_vars[$temp_merge_var['tag']]['city'] = isset($userprofile->Addresses[0]->City) ? $userprofile->Addresses[0]->City : (isset($userprofile->City) ? $userprofile->City : 'NA');
      $merge_vars[$temp_merge_var['tag']]['state'] = isset($userprofile->Addresses[0]->State) ? $userprofile->Addresses[0]->State : (isset($userprofile->State) ? $userprofile->State : 'NA');
      $merge_vars[$temp_merge_var['tag']]['zip'] = isset($userprofile->Addresses[0]->PostalCode) ? $userprofile->Addresses[0]->PostalCode : 'NA';
      $merge_vars[$temp_merge_var['tag']]['country'] = isset($userprofile->Country->Name) ? lr_get_country_code($userprofile->Country->Name) : 'NA';
    }
    else {
      $merge_vars[$temp_merge_var['tag']] = $value;
    }

    if (sizeof(module_implements('lr_add_mapping_mailchimp_field')) > 0) {
      // Call all modules that implement the hook, and let them make changes to $variables.
      $result = module_invoke_all('lr_add_mapping_mailchimp_field', $temp_merge_vars, $userprofile);
      if (count($result) > 0) {
        $merge_vars = array_merge($merge_vars, $result);
      }
    }
  }
  $merge_vars['EMAIL'] = $account->mail;
  $login_radius_mailchimp->listSubscribe($mailchimp_list_id, $account->mail, $merge_vars);
}

/**
 * Implement hook add_user_data_after_save of sociallogin module.
 *
 * @param $account
 * @param $userprofile
 */
function lr_mailchimp_add_user_data_after_save($account, $userprofile) {
  // Mailchimp integration.

  if (variable_get('lr_mailchimp_enable') == 1 && variable_get('lr_mailchimp_apikey') != "" && variable_get('lr_mailchimp_list') != "") {
    lr_mailchimp_integration($userprofile, $account);
  }
}

/**
 * Get country code to set value in mailchimp.
 */
function lr_get_country_code($key) {
  $county = array(
    'Afghanistan' => 'AF',
    'Aland Islands' => 'AX',
    'Albania' => 'AL',
    'Algeria' => 'DZ',
    'American Samoa' => 'AS',
    'Andorra' => 'AD',
    'Angola' => 'AO',
    'Anguilla' => 'AI',
    'Antarctica' => 'AQ',
    'Antigua and Barbuda' => 'AG',
    'Argentina' => 'AR',
    'Armenia' => 'AM',
    'Aruba' => 'AW',
    'Australia' => 'AU',
    'Austria' => 'AT',
    'Azerbaijan' => 'AZ',
    'Bahamas the' => 'BS',
    'Bahrain' => 'BH',
    'Bangladesh' => 'BD',
    'Barbados' => 'BB',
    'Belarus' => 'BY',
    'Belgium' => 'BE',
    'Belize' => 'BZ',
    'Benin' => 'BJ',
    'Bermuda' => 'BM',
    'Bhutan' => 'BT',
    'Bolivia' => 'BO',
    'Bosnia and Herzegovina' => 'BA',
    'Botswana' => 'BW',
    'Bouvet Island (Bouvetoya)' => 'BV',
    'Brazil' => 'BR',
    'British Indian Ocean Territory (Chagos Archipelago)' => 'IO',
    'British Virgin Islands' => 'VG',
    'Brunei Darussalam' => 'BN',
    'Bulgaria' => 'BG',
    'Burkina Faso' => 'BF',
    'Burundi' => 'BI',
    'Cambodia' => 'KH',
    'Cameroon' => 'CM',
    'Canada' => 'CA',
    'Cape Verde' => 'CV',
    'Cayman Islands' => 'KY',
    'Central African Republic' => 'CF',
    'Chad' => 'TD',
    'Chile' => 'CL',
    'China' => 'CN',
    'Christmas Island' => 'CX',
    'Cocos (Keeling) Islands' => 'CC',
    'Colombia' => 'CO',
    'Comoros the' => 'KM',
    'Congo' => 'CD',
    'Congo the' => 'CG',
    'Cook Islands' => 'CK',
    'Costa Rica' => 'CR',
    'Croatia' => 'HR',
    'Cuba' => 'CU',
    'Cyprus' => 'CY',
    'Czech Republic' => 'CZ',
    'Denmark' => 'DK',
    'Djibouti' => 'DJ',
    'Dominica' => 'DM',
    'Dominican Republic' => 'DO',
    'Ecuador' => 'EC',
    'Egypt' => 'EG',
    'El Salvador' => 'SV',
    'Equatorial Guinea' => 'GQ',
    'Eritrea' => 'ER',
    'Estonia' => 'EE',
    'Ethiopia' => 'ET',
    'Faroe Islands' => 'FO',
    'Falkland Islands (Malvinas)' => 'FK',
    'Fiji the Fiji Islands' => 'FJ',
    'Finland' => 'FI',
    'France, French Republic' => 'FR',
    'French Guiana' => 'GF',
    'French Polynesia' => 'PF',
    'French Southern Territories' => 'TF',
    'Gabon' => 'GA',
    'Gambia the' => 'GM',
    'Georgia' => 'GE',
    'Germany' => 'DE',
    'Ghana' => 'GH',
    'Gibraltar' => 'GI',
    'Greece' => 'GR',
    'Greenland' => 'GL',
    'Grenada' => 'GD',
    'Guadeloupe' => 'GP',
    'Guam' => 'GU',
    'Guatemala' => 'GT',
    'Guernsey' => 'GG',
    'Guinea' => 'GN',
    'Guinea-Bissau' => 'GW',
    'Guyana' => 'GY',
    'Haiti' => 'HT',
    'Heard Island and McDonald Islands' => 'HM',
    'Holy See (Vatican City State)' => 'VA',
    'Honduras' => 'HN',
    'Hong Kong' => 'HK',
    'Hungary' => 'HU',
    'Iceland' => 'IS',
    'India' => 'IN',
    'Indonesia' => 'ID',
    'Iran' => 'IR',
    'Iraq' => 'IQ',
    'Ireland' => 'IE',
    'Isle of Man' => 'IM',
    'Israel' => 'IL',
    'Italy' => 'IT',
    'Jamaica' => 'JM',
    'Japan' => 'JP',
    'Jersey' => 'JE',
    'Jordan' => 'JO',
    'Kazakhstan' => 'KZ',
    'Kenya' => 'KE',
    'Kiribati' => 'KI',
    'Korea' => 'KR',
    'Kuwait' => 'KW',
    'Kyrgyz Republic' => 'KG',
    'Lao' => 'LA',
    'Latvia' => 'LV',
    'Lebanon' => 'LB',
    'Lesotho' => 'LS',
    'Liberia' => 'LR',
    'Libyan Arab Jamahiriya' => 'LY',
    'Liechtenstein' => 'LI',
    'Lithuania' => 'LT',
    'Luxembourg' => 'LU',
    'Macao' => 'MO',
    'Macedonia' => 'MK',
    'Madagascar' => 'MG',
    'Malawi' => 'MW',
    'Malaysia' => 'MY',
    'Maldives' => 'MV',
    'Mali' => 'ML',
    'Malta' => 'MT',
    'Marshall Islands' => 'MH',
    'Martinique' => 'MQ',
    'Mauritania' => 'MR',
    'Mauritius' => 'MU',
    'Mayotte' => 'YT',
    'Mexico' => 'MX',
    'Micronesia' => 'FM',
    'Moldova' => 'MD',
    'Monaco' => 'MC',
    'Mongolia' => 'MN',
    'Montenegro' => 'ME',
    'Montserrat' => 'MS',
    'Morocco' => 'MA',
    'Mozambique' => 'MZ',
    'Myanmar' => 'MM',
    'Namibia' => 'NA',
    'Nauru' => 'NR',
    'Nepal' => 'NP',
    'Netherlands Antilles' => 'AN',
    'Netherlands the' => 'NL',
    'New Caledonia' => 'NC',
    'New Zealand' => 'NZ',
    'Nicaragua' => 'NI',
    'Niger' => 'NE',
    'Nigeria' => 'NG',
    'Niue' => 'NU',
    'Norfolk Island' => 'NF',
    'Northern Mariana Islands' => 'MP',
    'Norway' => 'NO',
    'Oman' => 'OM',
    'Pakistan' => 'PK',
    'Palau' => 'PW',
    'Palestinian Territory' => 'PS',
    'Panama' => 'PA',
    'Papua New Guinea' => 'PG',
    'Paraguay' => 'PY',
    'Peru' => 'PE',
    'Philippines' => 'PH',
    'Pitcairn Islands' => 'PN',
    'Poland' => 'PL',
    'Portugal, Portuguese Republic' => 'PT',
    'Puerto Rico' => 'PR',
    'Qatar' => 'QA',
    'Reunion' => 'RE',
    'Romania' => 'RO',
    'Russian Federation' => 'RU',
    'Rwanda' => 'RW',
    'Saint Barthelemy' => 'BL',
    'Saint Helena' => 'SH',
    'Saint Kitts and Nevis' => 'KN',
    'Saint Lucia' => 'LC',
    'Saint Martin' => 'MF',
    'Saint Pierre and Miquelon' => 'PM',
    'Saint Vincent and the Grenadines' => 'VC',
    'Samoa' => 'WS',
    'San Marino' => 'SM',
    'Sao Tome and Principe' => 'ST',
    'Saudi Arabia' => 'SA',
    'Senegal' => 'SN',
    'Serbia' => 'RS',
    'Seychelles' => 'SC',
    'Sierra Leone' => 'SL',
    'Singapore' => 'SG',
    'Slovakia (Slovak Republic)' => 'SK',
    'Slovenia' => 'SI',
    'Solomon Islands' => 'SB',
    'Somalia, Somali Republic' => 'SO',
    'South Africa' => 'ZA',
    'South Georgia and the South Sandwich Islands' => 'GS',
    'Spain' => 'ES',
    'Sri Lanka' => 'LK',
    'Sudan' => 'SD',
    'Suriname' => 'SR',
    'Svalbard & Jan Mayen Islands' => 'SJ',
    'Swaziland' => 'SZ',
    'Sweden' => 'SE',
    'Switzerland, Swiss Confederation' => 'CH',
    'Syrian Arab Republic' => 'SY',
    'Taiwan' => 'TW',
    'Tajikistan' => 'TJ',
    'Tanzania' => 'TZ',
    'Thailand' => 'TH',
    'Timor-Leste' => 'TL',
    'Togo' => 'TG',
    'Tokelau' => 'TK',
    'Tonga' => 'TO',
    'Trinidad and Tobago' => 'TT',
    'Tunisia' => 'TN',
    'Turkey' => 'TR',
    'Turkmenistan' => 'TM',
    'Turks and Caicos Islands' => 'TC',
    'Tuvalu' => 'TV',
    'Uganda' => 'UG',
    'Ukraine' => 'UA',
    'United Arab Emirates' => 'AE',
    'United Kingdom' => 'GB',
    'United States of America' => 'US',
    'United States Minor Outlying Islands' => 'UM',
    'United States Virgin Islands' => 'VI',
    'Uruguay, Eastern Republic of' => 'UY',
    'Uzbekistan' => 'UZ',
    'Vanuatu' => 'VU',
    'Venezuela' => 'VE',
    'Vietnam' => 'VN',
    'Wallis and Futuna' => 'WF',
    'Western Sahara' => 'EH',
    'Yemen' => 'YE',
    'Zambia' => 'ZM',
    'Zimbabwe' => 'ZW',
  );
  if (isset($county[$key])) {
    return $county[$key];
  }
  return 'NA';
}
