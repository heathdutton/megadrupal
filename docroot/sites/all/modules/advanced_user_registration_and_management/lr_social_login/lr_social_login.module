<?php

/**
 * @file
 * Implement lr_social_login support for Drupal
 */
module_load_include('inc', 'lr_social_login', 'includes/lr_social_login.functions');

/**
 * Implements hook_menu().
 *
 * Responed to url handling for lr_social_login module.
 *
 * @return array An array of menu items
 */
function lr_social_login_menu() {
  $items['user/%user/lr_social_login/delete'] = array(
    'title' => 'Delete Social Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lr_social_login_user_delete_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'includes/lr_social_login.functions.inc',
  );
  $items['admin/config/people/userregistration'] = array(
    'title' => 'Advanced User Registration and Management',
    'description' => 'Configure setting for LoginRadius
          Advanced User Registration and Management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lr_social_login_admin_settings'),
    'access arguments' => array('administer userregistration'),
    'weight' => -4,
    'file' => 'includes/lr_social_login.admin.inc',
  );
  $items['admin/config/people/userregistration/settings'] = array(
    'title' => 'Social Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lr_social_login_admin_settings'),
    'access arguments' => array('administer userregistration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'includes/lr_social_login.admin.inc',
  );
  $items['admin/config/people/userregistration/advancesettings'] = array(
    'title' => 'Advance Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lr_social_login_lr_advance_settings'),
    'access arguments' => array('administer userregistration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'includes/lr_social_login.admin.inc',
  );
  $items['lr_social_login/token_handler'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lr_social_login_user_register_validate'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * @return null|string
 *
 * Welcome email content.
 */
function lr_social_login_email_content_text() {
  $output = variable_get('lr_social_login_email_content', FALSE);

  if (!$output && $output !== '') {
    $output = '';
    $output .= '[user:name],

Your account at [site:name] has been created.

Please use following credentials to log into your account:

Website : [site:login-url]
User name : [user:name]
Password :  @password

--  [site:name]';
  }

  return $output;
}

/**
 * Implements hook_admin_paths().
 *
 * Respond to Define administrative paths.
 *
 * @return array A list of administrative paths.
 */
function lr_social_login_admin_paths() {
  return array(
    'user/*/lr_social_login' => TRUE,
    'user/*/lr_social_login/delete/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 *
 * Responed to Define user permissions.
 *
 * @return array An array of permission settings
 */
function lr_social_login_permission() {
  return array(
    'administer userregistration' => array(
      'title' => t('Administer User Registration settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * @return array An associative array of theme hook information
 */
function lr_social_login_theme() {
  $path = drupal_get_path('module', 'lr_social_login') . '/theme';
  return array(
    'lr_social_login_popup' => array(
      'template' => 'lr_social_login_popup',
      'variables' => array(
        'popup_params' => NULL,
      ),
      'path' => $path,
    ),
    'lr_social_login_links' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'lr_social_login_links',
      'path' => $path,
    ),
    'lr_social_login_linked' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'lr_social_login_linked',
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_user_update().
 * Block/unblock user, Set/Update password and create new user.
 *
 *
 * @param $edit
 * @param $account user account object
 * @param $category
 */
function lr_social_login_user_update(&$edit, $account, $category) {
  if (isset($_POST['op']) && $_POST['op'] == 'Update') {
    if (user_access('administer site configuration')) {
      if (!$account->login) {
        db_update('users')
          ->fields(array(
            'login' => REQUEST_TIME,
          ))
          ->condition('uid', $account->uid)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Respond to disable traditional login block form.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current
 * state of the form
 * @param string $form_id A unique string identifying the form
 * @return array A renderable html form
 */
function lr_social_login_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('lr_social_login_disable_traditional_login') == 1) {
    if ($form_id == 'user_login_block') {
      unset($form['name']);
      unset($form['pass']);
      unset($form['actions']);
      unset($form['links']);
    }

    return $form;
  }
}

/**
 * Implements hook_form_comment_form_alter().
 *
 * Add Social Login interface at comment form.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current
 * state of the form
 * @return null
 */
function lr_social_login_form_comment_form_alter(&$form, &$form_state) {
  if (variable_get('lr_social_login_commenting_enable') == 1) {
    if (user_is_logged_in()) {
      return;
    }

    // Check if loginradius sent a token to authenticate the user.
    lr_social_login_user_login_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_help().
 *
 * Respond to Provide online user help links.
 *
 * @param string $path The router menu path
 * @return string A localized string containing the help text
 */


function lr_social_login_help($path) {
  if ($path == 'admin/help#lr_social_login') {
    $loginradius_link = l(t('LoginRadius'), 'http://www.LoginRadius.com/',
      array('attributes' => array('target' => '_blank')));
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('This social login module is developed by LoginRadius
    which is a Software As A Service (SaaS).Social Login module enables social
    login on a Drupal website letting users log in through their existing IDs
    such as Facebook, Twitter, Google, Yahoo and over 15 more! Other than
    social login, lr_social_login plugin also include User Profile Data and
    Social Analytics. Please visit the !loginradius.',
        array('!loginradius' => $loginradius_link)) . '</p>';
    $items_list = array(
      t('Social login'),
      t('User profile data'),
      t('Social analytics'),
      t('Eliminating registration process'),
      t('Syncronize social login with traditional login'),
    );
    $output .= theme('item_list', array(
      'items' => $items_list,
      'title' => t('Use'),
    ));
    $items = array(
      l(t('Drupal live demo'), 'http://demo.loginradius.com/',
        array('attributes' => array('target' => '_blank'))),
      l(t('Drupal Plugin Documentations'),
        'http://www.loginradius.com/developers/Plugins/Drupal',
        array('attributes' => array('target' => '_blank'))),
      l(t('LoginRadius'), 'http://www.LoginRadius.com/',
        array('attributes' => array('target' => '_blank'))),
      l(t('Other live demo'), 'https://www.loginradius.com/demo',
        array('attributes' => array('target' => '_blank'))),
      l(t('Developers'), 'http://www.loginradius.com/developers',
        array('attributes' => array('target' => '_blank'))),
      l(t('LoginRadius blog'), 'http://blog.loginradius.com/',
        array('attributes' => array('target' => '_blank'))),
      l(t('LoginRadius video'), 'http://www.youtube.com/LoginRadius',
        array('attributes' => array('target' => '_blank'))),
    );
    $output .= theme('item_list', array(
      'items' => $items,
      'title' => t('Important links'),
    ));
    return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Respond to altering user login block.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current
 * state of the form
 */
function lr_social_login_form_user_login_block_alter(&$form, &$form_state) {
  if (variable_get('lr_social_login_attach_login_form') == 1) {
    lr_social_login_user_login_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for
 * lr_social_login_form_user_login_alter().
 *
 * Respond to add a lr_social_login link on user login form.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current
 * state of the form
 */
function lr_social_login_form_user_login_alter(&$form, &$form_state) {
  if (variable_get('lr_social_login_loginpage_position') == 1) {
    lr_social_login_user_login_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Respond to add a lr_social_login link on user register form.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 */
function lr_social_login_form_user_register_form_alter(&$form, &$form_state) {
  // Add lr_social_login link to registration form.
  if (isset($_SESSION['social_lrdata'])) {
    $userprofile = $_SESSION['social_lrdata'];
    unset($_SESSION['social_lrdata']);

    if (isset($userprofile->ID) && !empty($userprofile->ID)) {
      $data = lr_social_login_check_exist_username($userprofile);
      $form['account']['name']['#default_value'] = $data['username'];
      $form['account']['mail']['#default_value'] = $userprofile->Email_value;

      if (variable_get('user_email_verification', TRUE)) {
        $form['account']['pass']['#type'] = 'hidden';
        $form['account']['pass']['#value'] = user_password();
      }
      lr_field_mapping_show_profile_field_to_register_form($form, $userprofile);
    }
  }

  if (variable_get('lr_social_login_registerpage_position') == 1
    && !user_access('administer site configuration')
  ) {
    lr_social_login_user_login_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_user_insert() The module should save its custom additions
 * to the user object into the database
 * Insert user data when New user register via traditional social login.
 *
 * @param array $edit The array of form values submitted by the user
 * @param object $account The user object on which the operation is being
 * performed
 * @param string $category The active category of user information being edited
 */
function lr_social_login_user_insert(&$edit, $account, $category) {
  if (isset($_SESSION['social_lrdata'])) {
    $userprofile = $_SESSION['social_lrdata'];
    unset($_SESSION['social_lrdata']);

    if (variable_get('user_pictures') == 1 && !empty($userprofile->ImageUrl)) {
      lr_social_login_insert_picture($userprofile->ImageUrl, $account);
    }

    lr_social_login_insert_into_mapping_table($userprofile->ID,
      $userprofile->Provider, $account->uid);
  }
}

/**
 *
 * @param object $account The user object on which the operation is being
 * performed
 *
 * Function that insert social user picture.
 */
function lr_social_login_user_delete($account) {
  $aid = db_query('SELECT aid FROM {authmap} WHERE uid = :id',
    array('id' => $account->uid))->fetchField();
  db_delete('loginradius_mapusers')
    ->condition('aid', $aid)
    ->execute();
}

/**
 * Implements hook_block_info().
 *
 * @return array An associative array whose keys define the
 * delta for each block and whose values contain the block descriptions
 */
function lr_social_login_block_info() {
  $blocks['login'] = array(
    'info' => t('LoginRadius Social login'),
    'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta Which block to render.
 * This is a unique identifier for the block within the module,
 * defined in hook_block_info()
 * @return array Contain block's body and subject
 */
function lr_social_login_block_view($delta) {
  $block = array();
  if ($delta == 'login') {
    if (user_is_logged_in()) {
      $block['content'] = '';
    }
    else {
      $my_settings = lr_social_login_interface_settings();
      $block['content'] = array(
        '#theme' => 'lr_social_login_links',
        '#attached' => array(
          'js' => array(
            array(
              'data' => array('lrsociallogin' => $my_settings),
              'type' => 'setting'
            )
          )
        ),
      );
    }
  }

  return $block;
}

/**
 * Implements hook_mail().
 *
 * @param string $key An identifier of the mail
 * @param array $message An array to be filled in
 * @param array $params An arbitrary array of parameters set by the caller to drupal_mail
 *
 * Implements hook_mail().
 */
function lr_social_login_mail($key, &$message, $params) {
  switch ($key) {
    case 'newuser':
      $language = $message['language'];
      $variables = array(
        'user' => $params['account'],
        'pass' => isset($params['pass']) ? $params['pass'] : '',
      );
      $message['subject'] = lr_social_login_mail_text($key . '_subject', $language, $variables);
      $message['body'][] = lr_social_login_mail_text($key . '_body', $language, $variables);
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 * Show Social Account Linking interface at user profile page.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 * @param string $form_id A unique string identifying the form
 * @return array A renderable html form
 */
function lr_social_login_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('administer site configuration') && variable_get('lr_social_login_account_linking') == 1) {
    $identity_title = variable_get('lr_social_login_identity_label_string');
    $value = theme('lr_social_login_linked');
    // Advanced module LR Code Hook Start.
    if (count(module_implements('add_social_linking_widget')) > 0) {
      // Call all modules that implement the hook, and let them make changes to $variables.
      $result = module_invoke_all('add_social_linking_widget');
      $linked = end($result);
      if (!empty($linked)) {
        $value = $linked;
      }
    }
    // Advanced module LR Code Hook End.
    $my_settings = lr_social_login_interface_settings();
    $form['lr_social_login_linked'] = array(
      '#type' => 'item',
      '#title' => '',
      '#markup' => $value,
      '#attributes' => array('class' => array('lr_social_login_linked')),
      '#prefix' => '<fieldset class="form-wrapper" id="edit-social-linked"><legend><span class="fieldset-legend">' . t($identity_title) . '</span></legend>',
      '#suffix' => '</fieldset>',
      '#weight' => -20,
        '#attached' => array(
            'js' => array(
                array(
                    'data' => array('lrsociallogin' => $my_settings),
                    'type' => 'setting'
                )
            )
        ),
    );
  }

  return $form;
}

/**
 * Implements hook_preprocess.
 * variables for lr_social_login_linked.tpl file
 * Show Account Linking interface
 *
 * @global type $user
 *
 * @param array $vars variables array used in linked tpl file
 */
function lr_social_login_preprocess_lr_social_login_linked(&$vars) {
  global $user;
  $result = db_query("SELECT am.aid, authname, provider, provider_id FROM {authmap} am INNER JOIN {loginradius_mapusers} sm ON am.aid = sm.aid WHERE uid = :uid", array(
    ':uid' => $user->uid
  ));

  foreach ($result as $identity) {
    $vars['providers'][$identity->provider_id] = $identity->provider;
  }
}

/**
 * hook_preprocess_page()
 *
 * Add Social login Script and Sharing script in all pages.
 *
 * @param $vars variables array
 * @param $hook hook name
 */
function lr_social_login_preprocess_page(&$vars, $hook) {
  if (!module_exists('lr_raas')) {
    drupal_add_js(drupal_get_path('module', 'lr_social_login') . '/js/LoginRadiusSDK.js', array(
      'type' => 'file',
      'scope' => 'header',
    ));
  }
}

/**
 * Function that process login/registration/popup functionality.
 *
 * @global object $user user information
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 * @param string $token LoginRadius access token
 * @return array A renderable html form
 */
function lr_social_login_user_register_validate($form, &$form_state) {
  global $user;
  $post_value = $_POST;
  $request_token = isset($post_value['token']) ? trim($post_value['token']) : '';
  // Advanced module LR Code Hook Start.
  // Make sure at least one module implements our hook.
  if (count(module_implements('get_loginradius_token')) > 0) {
    // Call all modules that implement the hook, and let them.
    // Make changes to $variables.
    $value = module_invoke_all('get_loginradius_token', $request_token, $form);
    if (!empty($value)) {
      return $value;
    }
  }
  // Advanced module LR Code Hook End.
  // Get lr_social_login variable.
  module_load_include('inc', 'lr_social_login', 'includes/lr_social_login.loginradius');
  $obj = new LoginRadius();

  // Handle email popup.
  if (isset($post_value['lr_social_login_emailclick'])) {
    return lr_social_login_email_popup_submit($form, $form_state, $post_value);
  }
  // Clear session of loginradius data when email popup cancel.
  elseif (isset($post_value['lr_social_login_emailclick_cancel'])) {
    unset($_SESSION['lrdata']);
    drupal_goto();
  }

  $secret = trim(variable_get('lr_social_login_apisecret'));
    // Advanced module LR Code Hook Start.
    // Make sure at least one module implements our hook.
    if (count(module_implements('check_lrtoken_valid')) > 0) {
        $result = module_invoke_all('check_lrtoken_valid', $request_token);

        $value = end($result);
        if($value){
            $token = $value;
        }
    }
    if(!isset($token)){
  $token = $obj->loginradiusFetchAccessToken($secret, $request_token);
    }
  // Check loginradius token is posted on this page.
  if (empty($token)) {
    return;
  }

  $userprofile = $obj->loginradiusGetUserProfiledata($token);
  // Advanced module LR Code Hook Start.
  // Make sure at least one module implements our hook.
  if (count(module_implements('add_loginradius_userdata')) > 0) {
    // Call all modules that implement the hook, and let them.
    // Make changes to $variables.
    $result = module_invoke_all('add_loginradius_userdata', $userprofile, $token);
    $value = end($result);
    if (!empty($value)) {
      $userprofile = $value;
    }
  }
  // Advanced module LR Code Hook End.

  // Handle login/registration functionality when user os not logged in.
  if (!user_is_logged_in()) {
    if (isset($userprofile->ID) && $userprofile->ID != '') {
      $userprofile = lr_social_login_getuser_data($userprofile);
      $userprofile->widget_token = trim($token);
      variable_set('user_verify', 0);

      if (variable_get('lr_social_login_email_required', 1) && empty($userprofile->Email_value)) {
        $account = user_external_load($userprofile->ID);

        if (isset($account->uid) && $account->uid != 0) {
          return $form = lr_social_login_provide_login_to_unblock_user($account,
            $userprofile, $form, $form_state);
        }
        else {
          lr_social_login_enable_force_registration($userprofile);
          $_SESSION['lrdata'] = $userprofile;
          $textemailpoup = variable_get('lr_social_login_emailrequired_popup_text');
          $popup_params = array(
            'msg' => t($textemailpoup),
            array('@provider' => t($userprofile->Provider)),
            'provider' => $userprofile->Provider,
            'msgtype' => 'status',
          );
          $theme = theme('lr_social_login_popup', array('popup_params' => $popup_params));
          $form['lr_social_login_popup'] = lr_social_login_get_popup_form_element_array($theme);
          return $form;
        }
      }

      return $form = lr_social_login_check_existing_user($form, $form_state, $userprofile);
    }
    elseif (!user_is_logged_in()) {
      lr_social_login_show_error_message($userprofile);
    }
  }
  elseif (!empty($token)) {
    if ((!isset($post_value['lr_source'])) || (isset($post_value['lr_source']) && !in_array($post_value['lr_source'], array(
          'wall_post',
          'friend_invite',
        )))
    ) {
      lr_social_login_user_identities_submit($form, $user, $token);
    }
  }
}
