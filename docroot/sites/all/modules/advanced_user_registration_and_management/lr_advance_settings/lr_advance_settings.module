<?php
/**
 * @file
 * Advanced features.
 */
/**
 * Unset and set form option.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return mixed
 */
function lr_advance_settings_form_lr_social_login_lr_advance_settings_alter(&$form, &$form_state, $form_id) {
  unset($form['interface_settings']['lr_social_login_interface_size']);
  unset($form['interface_settings']['lr_social_login_interface_columns']);
  unset($form['interface_settings']['lr_social_login_interface_bgcolor']);

  $form['user_settings']['lr_social_login_skip_email_verification'] = array(
    '#type' => 'radios',
    '#title' => t('Do you want users to skip email verification when logging in from social network providers like facebook, google, yahoo, etc. and email is already provided by the network provider?'),
    '#default_value' => variable_get('lr_social_login_skip_email_verification', 2),
    '#options' => array(
      1 => t('Yes'),
      2 => t('No'),
    ),
  );
  return $form;
}

/**
 * Add Social Linking widget with custom interface.
 *
 * @return mixed
 */
function lr_advance_settings_add_social_linking_widget() {
  return theme('lr_advance_settings_linked', array('params' => array('lr_location' => lr_social_login_get_callback_url())));

}

/**
 * Check Email verification is required or not.
 *
 * @param $account
 * @param $form_state
 * @return bool
 */
function  lr_advance_settings_check_send_verification_email($account, $form_state) {
  $status = FALSE;

  if ((variable_get('user_email_verification', TRUE) && variable_get('lr_social_login_skip_email_verification', '') == 1) || (!variable_get('user_email_verification', TRUE))) {
    $status = TRUE;
  }
  return $status;
}

/**
 * create theme to show linking interface and login interface.
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $pat
 * @return array
 */
function lr_advance_settings_theme($existing, $type, $theme, $pat) {
  $path = drupal_get_path('module', 'lr_advance_settings') . '/theme';
  return array(
    'lr_advance_settings_links' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'lr_advance_settings_links',
      'path' => $path,
    ),
    'lr_advance_settings_linked' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'lr_advance_settings_linked',
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_preprocess.
 * variables for lr_social_login_linked.tpl file
 * Show Account Linking interface
 *
 * @global type $user
 *
 * @param array $vars variables array used in linked tpl file
 */
function lr_advance_settings_preprocess_lr_advance_settings_linked(&$vars) {
  global $user;
  $result = db_query("SELECT am.aid, authname, provider, provider_id FROM {authmap} am INNER JOIN {loginradius_mapusers} sm ON am.aid = sm.aid WHERE module = :module AND uid = :uid", array(
    ':module' => 'lr_social_login',
    ':uid' => $user->uid
  ));

  foreach ($result as $identity) {
    if (strtolower($identity->provider) != 'raas') {
      $vars['providers'][$identity->provider_id] = $identity->provider;
    }
  }
}

/**
 * Add custom social login interface
 */
function lr_advance_settings_add_social_login_interface_widget() {
  return theme('lr_advance_settings_links', array('params' => array('lr_location' => lr_social_login_get_callback_url())));

}

/**
 * Implements hook_block_view_alter().
 * Add custom login interface.
 *
 * @param $data
 * @param $block
 */
function lr_advance_settings_block_view_alter(&$data, $block) {
  switch ($block->delta) {
    case 'lr_login':
      if (!user_is_logged_in()) {
        $data['content'] = theme('lr_advance_settings_links');
      }
      else {
        $data['content'] = '';
      }
      break;
  }
}
