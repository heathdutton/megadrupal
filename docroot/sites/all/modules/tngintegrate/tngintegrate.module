<?php

/**
 * @file
 * Integrates Darrin Lythgoe's The Next Generation genealogy software with Drupal user database.
 */

/**
 * Define default setting values
 */
define ('TNG_DIR', 'sites/all/libraries/tng');
define ('TNG_TABLE', 'tng_users');
define ('TNG_WELCOMESUBJECT', 'Welcome to TNG');
define ('TNG_WELCOMETEXT', 'You have been granted access to TNG Genealogy software.');


/**
 * Implements hook_menu().
 */
function tngintegrate_menu() {
  $items = array();

  $items['tng'] = array(
    'title' => 'TNG Genealogy',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tngintegrate_login_form'),
    'access arguments' => array('access TNG'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/tng'] = array(
    'title' => 'TNG Genealogy',
    'description' => 'Configure integration with The Next Generation Genealogy software.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tngintegrate_admin_form'),
    'access arguments' => array('administer TNG'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tngintegrate_permission() {
  return array(
    'administer TNG' => array(
      'title' => t('Administer TNG Genealogy'),
    ),
    'access TNG' => array(
      'title' => t('View TNG Genealogy'),
    ),
  );
}

/**
 * Form constructor for TNG Integrate settings.
 */
function tngintegrate_admin_form($form, &$form_state) {
  $form['tngintegrate_dir'] = array(
    '#type' => 'textfield',
    '#size' => '64',
    '#maxlength' => '64',
    '#title' => t('Path to TNG directory'),
    '#default_value' => variable_get('tngintegrate_dir', TNG_DIR),
    '#element_validate' => array('_tngintegrate_admin_tngintegrate_dir_validate'),
  );
  $form['tngintegrate_table'] = array(
    '#type' => 'textfield',
    '#size' => '64',
    '#maxlength' => '64',
    '#title' => t('Name of TNG user information table'),
    '#default_value' => variable_get('tngintegrate_table', TNG_TABLE),
    '#element_validate' => array('_tngintegrate_admin_tngintegrate_table_validate'),
  );
  $profile_fields = _tngintegrate_get_profile_fields();
  if (count($profile_fields) > 1) {
    $form['tngintegrate_realname1'] = array(
      '#type' => 'select',
      '#title' => t('Profile field for first name of real name'),
      '#options' => $profile_fields,
      '#default_value' => variable_get('tngintegrate_realname1'),
    );
    $form['tngintegrate_realname2'] = array(
      '#type' => 'select',
      '#title' => t('Profile field for last name of real name'),
      '#options' => $profile_fields,
      '#default_value' => variable_get('tngintegrate_realname2'),
    );
  }
  $form['tngintegrate_error_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Error logging'),
    '#options' => array(t('Watchdog'), t('Output to browser')),
    '#default_value' => variable_get('tngintegrate_error_mode', 1),
  );
  $form['tngintegrate_adminaddress'] = array(
    '#type' => 'textfield',
    '#size' => '64',
    '#maxlength' => '64',
    '#title' => t('Admin e-mail address for TNG'),
    '#default_value' => variable_get('tngintegrate_adminaddress', variable_get('site_mail', ini_get('sendmail_from'))),
  );
  $form['tngintegrate_welcomesubject'] = array(
    '#type' => 'textfield',
    '#size' => '64',
    '#maxlength' => '64',
    '#title' => t('Subject line for TNG welcome e-mail message'),
    '#description' => t('If left blank, no welcome e-mail will be sent out.'),
    '#default_value' => variable_get('tngintegrate_welcomesubject', TNG_WELCOMESUBJECT),
  );
  $form['tngintegrate_welcometext'] = array(
    '#type' => 'textarea',
    '#title' => t('Text of TNG welcome e-mail message'),
    '#default_value' => variable_get('tngintegrate_welcometext', TNG_WELCOMETEXT),
  );

  return system_settings_form($form);
}

/**
 * Validation function for tngintegrate_dir field of TNG Integrate settings form.
 */
function _tngintegrate_admin_tngintegrate_dir_validate($element, &$form_state) {
  // Strip slashes from the beginning and end of the directory pathname.
  $basedir = trim($element['#value'], '\\/');
  form_set_value($element, $basedir, $form_state);
  if ($basedir == 'tng') {
    form_set_error('', t('The path "tng" is reserved and cannot be used as the path to the TNG directory.'));
  }
  // Check that TNG is actually installed in this directory
  $tng_version_file = DRUPAL_ROOT . '/' . $basedir . '/version.php';
  if (!file_exists($tng_version_file)) {
    form_set_error('', t('The TNG Genealogy software does not appear to be installed in the "@basedir" directory.',
      array('@basedir' => $basedir)));
  }
}

/**
 * Validation function for tngintegrate_table field of TNG Integrate settings form.
 */
function _tngintegrate_admin_tngintegrate_table_validate($element, &$form_state) {
  // Check that the user table actually exists -- if not, TNG wasn't initialized
  if (!db_table_exists($element['#value'])) {
    form_set_error('', t('The TNG user information table "@table" was not found. Perhaps the TNG Genealogy software is not initialized.',
      array('@table' => $element['#value'])));
  }
}

function tngintegrate_login_form($form, &$form_state) {
  global $user;

  $pwd = uniqid();
  $login_user = db_query("SELECT * FROM {tngintegrate} WHERE uid = :uid", array(
    ':uid' => $user->uid,
    ))->fetchObject();
  if ($login_user !== FALSE) {
    db_update(variable_get('tngintegrate_table', TNG_TABLE))
      ->fields(array(
        'username' => $user->name,
        'password' => md5($pwd),
        'role' => user_access('administer TNG') ? 'admin' : '',
        ))
      ->condition('userID', $login_user->tuid)
      ->execute();
  }
  else {
    _tngintegrate_add_user($user);
    drupal_goto('tng');
  }

  $basedir = variable_get('tngintegrate_dir', TNG_DIR);
  ob_start();
  $output = "<script>";
  $output .= 'var frameSrc = "";';
  $output .= 'frameSrc += "<html><body>";';
  $output .= 'frameSrc += "<form name=login method=post action=\'' . $basedir . '/processlogin.php\'>";';
  $output .= 'frameSrc += "<input type=hidden name=tngusername value=\'' . $user->name . '\'>";';
  $output .= 'frameSrc += "<input type=hidden name=tngpassword value=' . $pwd . '>";';
  $output .= 'frameSrc += "</form>";';
  $output .= 'frameSrc += "<script>";';
  $output .= 'frameSrc += "document.login.submit();";';
  $output .= 'frameSrc += "<\/script>";';
  $output .= 'frameSrc += "<\/body><\/html>";';
  $output .= 'var iframeWin;';
  $output .= 'function init(){';
  $output .= '  iframeWin = window.frames.anIframe;';
  $output .= '  iframeWin.document.open();';
  $output .= '  iframeWin.document.write(frameSrc);';
  $output .= '  iframeWin.document.close();';
  $output .= '}';
  $output .= '</script>';
  $output .= '<iframe id="anIframe" name="anIframe" src="about:blank" width="100%" height="800px" hspace=0 vspace=0 marginwidth=0 marginheight=0 frameborder=0 scrolling="auto">';
  $output .= '</iframe>';
  $output .= '<script>';
  $output .= '  init();';
  $output .= '</script>';
  ob_end_clean();

  $form = array();
  $form['tngintegrate_iframe'] = array(
    '#type' => 'markup',
    '#markup' => $output,
  );

  return $form;
}

/**
 * Implements hook_user_categories().
 */
function tngintegrate_user_categories() {
  return array(array(
    'name' => 'tngintegrate',
    'title' => t('TNG Permissions'),
    'access callback' => 'user_access',
    'access arguments' => array('administer TNG'),
    'weight' => 10,
  ));
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form().
 */
function tngintegrate_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#user_category'] != 'tngintegrate') {
    return array();
  }

  $user = $form['#user'];
  $integrated_user = db_query("SELECT * FROM {tngintegrate} WHERE uid = :uid", array(
    ':uid' => $user->uid,
    ))->fetchObject();
  if ($integrated_user === FALSE) {
    _tngintegrate_add_user($user);
  }

  $users_table = variable_get('tngintegrate_table');
  $permissions = db_query("SELECT * FROM $users_table t JOIN {tngintegrate} i ON t.userID = i.tuid WHERE i.uid = :uid", array(
    ':uid' => $user->uid,
    ))->fetchObject();
  if ($permissions->tentative_edit) {
    $permissions->allow_edit = 2;
  }
  $form['tng_allow_add'] = array(
    '#type' => 'radios',
    '#title' => t('Add records'),
    '#options' => array(
      0 => t('No add rights'),
      1 => t('Allow to add any new data'),
      3 => t('Allow to add media only'),
      ),
    '#default_value' => $permissions->allow_add,
    '#weight' => 1,
  );
  $form['tng_allow_edit'] = array(
    '#type' => 'radios',
    '#title' => t('Edit records'),
    '#options' => array(
      0 => t('No edit rights'),
      2 => t('Allow to submit edits for review'),
      1 => t('Allow to edit any existing data'),
      3 => t('Allow to edit media only'),
      ),
    '#default_value' => $permissions->allow_edit,
    '#weight' => 2,
  );
  $form['tng_allow_delete'] = array(
    '#type' => 'radios',
    '#title' => t('Delete records'),
    '#options' => array(
      0 => t('No delete rights'),
      1 => t('Allow to delete any existing data'),
      3 => t('Allow to delete media only'),
      ),
    '#default_value' => $permissions->allow_delete,
    '#weight' => 3,
  );
  $form['tng_allow_living'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow to view information for living individuals'),
    '#default_value' => $permissions->allow_living,
    '#weight' => 10,
  );
  $form['tng_allow_ged'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow to download GEDCOMs'),
    '#default_value' => $permissions->allow_ged,
    '#weight' => 13,
  );
  $form['tng_allow_lds'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow to view LDS information'),
    '#default_value' => $permissions->allow_lds,
    '#weight' => 15,
  );
  $form['tng_tuid'] = array(
    '#type' => 'hidden',
    '#value' => $permissions->tuid,
  );

  $tng_major_version = _tngintegrate_get_tng_major_version();
  switch ($tng_major_version) {
    case "8":
      // Do nothing else
      break;
    case "9":
      // Add fields that are new in version 9 schema of tng_users table
      $form['tng_allow_pdf'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow to download PDFs'),
        '#default_value' => $permissions->allow_pdf,
        '#weight' => 14,
      );
      $form['tng_allow_private'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow to view information for private individuals'),
        '#default_value' => $permissions->allow_private,
        '#weight' => 12,
      );
      $form['tng_allow_profile'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow to edit user profile'),
        '#default_value' => $permissions->allow_profile,
        '#weight' => 16,
      );
      $form['tng_disabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Disabled'),
        '#default_value' => $permissions->disabled,
        '#weight' => 0,
      );
      break;
    default:
      // Unknown version
      $msg = t('Unsupported TNG version: %version', array('%version' => $tng_major_version));
      watchdog('tngintegrate', $msg, array(), WATCHDOG_ERROR);
      drupal_set_message($msg, 'error');
      return;
    }

  return $form;
}

/**
 * Implements hook_user_update().
 */
function tngintegrate_user_update(&$edit, $account, $category) {
  if ($category != 'tngintegrate') {
    return;
  }

  $tentative_edit = 0;
  if ($edit['tng_allow_edit'] == 2) {
    $edit['tng_allow_edit'] = 0;
    $tentative_edit = 1;
  }

  // Initialize fields common to all TNG versions
  $users_table_fields = array(
    'allow_edit' => $edit['tng_allow_edit'],
    'allow_add' => $edit['tng_allow_add'],
    'tentative_edit' => $tentative_edit,
    'allow_delete' => $edit['tng_allow_delete'],
    'allow_lds' => $edit['tng_allow_lds'],
    'allow_ged' => $edit['tng_allow_ged'],
    'allow_living' => $edit['tng_allow_living'],
  );

  $tng_major_version = _tngintegrate_get_tng_major_version();
  switch ($tng_major_version) {
    case "8":
      // Do nothing else
      break;
    case "9":
      // Add fields that are new in version 9 schema of tng_users table
      $users_table_fields['allow_pdf'] = $edit['tng_allow_pdf'];
      $users_table_fields['allow_private'] = $edit['tng_allow_private'];
      $users_table_fields['allow_profile'] = $edit['tng_allow_profile'];
      $users_table_fields['disabled'] = $edit['tng_disabled'];
      break;
    default:
      // Unknown version
      $msg = t('Unsupported TNG version: %version', array('%version' => $tng_major_version));
      watchdog('tngintegrate', $msg, array(), WATCHDOG_ERROR);
      drupal_set_message($msg, 'error');
      return;
  }

  try {
    db_update(variable_get('tngintegrate_users_table', TNG_TABLE))
      ->fields($users_table_fields)
      ->condition('userID', $edit['tng_tuid'])
      ->execute();
    watchdog('tngintegrate', 'TNG permissions changed for user %userid.', array('%userid' => $account->uid));
  }
  catch (Exception $e) {
    watchdog('tngintegrate', 'Error attempting to change permissions for user %userid.', array('%userid' => $account->uid), WATCHDOG_ERROR);
  }
}

function tngintegrate_error($message, $ret) {
  $error_mode = variable_get('tngintegrate_error_mode', array());
  if (in_array(2, $error_mode)) {
    drupal_set_message(check_plain($message));
  }

  $full_message = isset($ret) ? $message . '<br/>' . $ret->getAsHtml() : $message;
  if (in_array(1, $error_mode)) {
    watchdog('tng', $full_message, WATCHDOG_ERROR);
  }
}

function _tngintegrate_add_user($user) {
  // Create Real Name if profile fields exist else make Drupal username
  $names = array();
  $user_fields = user_load($user->uid);
  $tng_realname1 = variable_get('tngintegrate_realname1');
  if ($tng_realname1 && $tng_realname1 != t('<none>') && isset($user_fields->$tng_realname1)) {
    $names[] = $user_fields->$tng_realname1;
  }
  $tng_realname2 = variable_get('tngintegrate_realname2');
  if ($tng_realname2 && $tng_realname2 != t('<none>') && isset($user_fields->$tng_realname2)) {
    $names[] = $user_fields->$tng_realname2;
  }
  if (!$names) {
    $names[] = $user->name;
  }
  $realname = implode(' ', $names);

  // Check if user with same username already exists in TNG database
  // and if so, simply add user information to TNG Integrate table
  $users_table = variable_get('tngintegrate_table', TNG_TABLE);
  $tng_user = db_query("SELECT * FROM $users_table WHERE username = :name", array(
    ':name' => $user->name,
    ))->fetchObject();
  if ($tng_user !== FALSE) {
    try {
      db_insert('tngintegrate')
        ->fields(array(
          'uid' => $user->uid,
          'tuid' => $tng_user->userid,
          'created' => REQUEST_TIME,
          'lastlogin' => REQUEST_TIME,
          ))
        ->execute();
      watchdog('tngintegrate', 'Existing TNG user %name added to TNG Integrate user table.', array('%name' => $user->name));
      if (!emtpy(variable_get('tngintegrate_welcomesubject', TNG_WELCOMESUBJECT))) {
        $mail_success = drupal_mail('tngintegrate', 'welcome', $user->mail, user_preferred_language($user), NULL, variable_get('tng_adminaddress', variable_get('site_mail', ini_get('sendmail_from'))));
        if ($mail_success) {
          watchdog('tngintegrate', 'New TNG user notification email sent (%name at %email).', array('%name' => $user->name, '%email' => $user->mail));
        }
        else {
          watchdog('tngintegrate', 'Error mailing notification of new TNG user creation (%name at %email).', array('%name' => $user->name, '%email' => $user->mail), WATCHDOG_ERROR);
        }
      }
    }
    catch (Exception $e) {
      watchdog('tngintegrate', 'Error attempting to add existing TNG user %name to TNG Integrate user table.', array('%name' => $user->name));
    }
  }
  else {
    $is_admin = user_access('administer TNG', $user);
    $maxtuid = db_query("SELECT MAX(userID) AS tuid FROM $users_table")->fetchField();

    // Initialize fields common to all TNG versions
    $users_table_fields = array(
      'userID' => $maxtuid + 1,
      'description' => $realname,
      'username' => $user->name,
      'password' => md5(uniqid()),
      'password_type' => 'md5',
      'mygedcom' => '',
      'personID' => '',
      'allow_edit' => $is_admin ? 1 : 0,
      'allow_add' => $is_admin ? 1 : 0,
      'tentative_edit' => 0,
      'allow_delete' => $is_admin ? 1 : 0,
      'allow_lds' => $is_admin ? 1 : 0,
      'allow_ged' => $is_admin ? 1 : 0,
      'allow_living' => $is_admin ? 1 : 0,
      'role' => $is_admin ? 'admin' : '',
      'realname' => $realname,
      'email' => $user->mail,
      'dt_activated' => date("Y-m-d H:i:s", time()),
    );

    $tng_major_version = _tngintegrate_get_tng_major_version();
    switch ($tng_major_version) {
      case "8":
        // Do nothing else
        break;
      case "9":
        // Add fields that are new in version 9 schema of tng_users table
        $users_table_fields['allow_pdf'] = $is_admin ? 1 : 0;
        $users_table_fields['allow_private'] = $is_admin ? 1 : 0;
        $users_table_fields['allow_profile'] = $is_admin ? 1 : 0;
        $users_table_fields['disabled'] = 0;
        break;
      default:
        // Unknown version
        $msg = t('Unsupported TNG version: %version', array('%version' => $tng_major_version));
        watchdog('tngintegrate', $msg, array(), WATCHDOG_ERROR);
        drupal_set_message($msg, 'error');
        return;
    }

    try {
      db_insert($users_table)
        ->fields($users_table_fields)
        ->execute();

      db_insert('tngintegrate')
        ->fields(array(
          'uid' => $user->uid,
          'tuid' => $maxtuid + 1,
          'created' => REQUEST_TIME,
          'lastlogin' => REQUEST_TIME,
          ))
        ->execute();
      watchdog('tngintegrate', 'New user %name created in TNG user table %table.', array('%name' => $user->name, '%table' => $users_table));
    }
    catch (Exception $e) {
      watchdog('tngintegrate', 'Error attempting to create user %name in TNG user table %table.', array('%name' => $user->name, '%table' => $users_table), WATCHDOG_ERROR);
    }
  }
  return;
}

/**
 * Implements hook_mail().
 */
function tngintegrate_mail($key, &$message, $params) {
  switch ($key) {
    case 'welcome':
      $message['subject'] = variable_get('tngintegrate_welcomesubject', TNG_WELCOMESUBJECT);
      $message['body'] = variable_get('tngintegrate_welcometext', TNG_WELCOMETEXT);
      break;
  }
}

function _tngintegrate_get_profile_fields() {
  $fields = array(t('<none>'));
  $result = db_query("SELECT * FROM {profile_field}");
  foreach ($result as $field) {
    $fields[$field->name] = $field->title;
  }
  return $fields;
}

/**
 * Identify which version of TNG is installed.
 *
 * @return
 *   A string indicating the major version of TNG.
 */
function _tngintegrate_get_tng_major_version() {
  // Obtain the installed version of the TNG application from its version.php file
  $basedir = variable_get('tngintegrate_dir', TNG_DIR);
  // We make the assumption that TNG is installed inside the Drupal tree
  $tng_version_file = DRUPAL_ROOT . '/' . $basedir . '/version.php';
  if (file_exists($tng_version_file)) {
    // It would be easier to just include $tng_version_file, but it would not be safe
    $tng_version_file_contents = file_get_contents($tng_version_file);
    if (preg_match('/\$tng_version *= *\"([0-9.]+)\" *;/', $tng_version_file_contents, $tng_version_str) == 1) {
      $tng_version = $tng_version_str[1];
    }
  }
  if (!isset($tng_version)) {
    watchdog('tngintegrate', 'Cannot determine the TNG version');
    drupal_exit();
  }

  watchdog('tngintegrate', 'TNG version is %version', array('%version' => $tng_version));  // Possibly a bit too verbose...
  preg_match('/^[0-9]+/', $tng_version, $tng_major_version);  // Get the initial sequence of numbers
  return $tng_major_version[0];
}
