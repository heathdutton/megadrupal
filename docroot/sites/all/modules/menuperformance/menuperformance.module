<?php
/**
 * @file
 * This is the main module file for Menuperformance.
 */


/**
 * Implements hook_menu().
 */
function menuperformance_menu() {
  $items = array();

  $items['admin/config/user-interface/menuperformance'] = array(
    'title' => 'Menuperformance settings',
    'description' => 'Activate or deactivate Menuperformance module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menuperformance_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['_menuperformance/ajax/get_link_children/%/%'] = array(
    'title' => 'Menuperformance AJAX callback',
    'description' => 'An AJAX callback URL',
    'page callback' => 'menuperformance_ajax',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer menu'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_module_implements_alter().
 *
 * Makes sure that menuperformance alters the vocabulary form after the
 * taxonomy_menu module.
 */
function menuperformance_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['menuperformance'])) {
      $temp = $implementations['menuperformance'];
      unset($implementations['menuperformance']);
      $implementations['menuperformance'] = $temp;
    }
    else {
      $implementations['menuperformance'] = '';
    }
  }
}


/**
 * Implements hook_form_FORMID_alter().
 */
function menuperformance_form_node_form_alter(&$form, &$form_state) {
  if (variable_get('menu_override_parent_selector', FALSE) && module_exists('menu')) {
    // Copied from menu.module:menu_form_node_form_alter().
    // With large menus, Drupal's default way of loading _all_ menu items on all
    // node edit pages becomes impractical. We use the variable
    // menu_override_parent_selector to disable Drupal's default menu handling,
    // and re-implement the menu item form elements almost exactly the same way
    // here. The only difference is in the loading of the parent items: We don't
    // load the parents before switching to the hs_element, and skip the "empty"
    // check for the options. The HS element can handle loading its own parents
    // without loading the full menu trees. Another change is the removal of the
    // check that checks that the default value exists in the options array.
    //
    $link = $form['#node']->menu;
    $type = $form['#node']->type;
    $options = array();

    $form['menu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Menu settings'),
      '#access' => user_access('administer menu'),
      '#collapsible' => TRUE,
      '#collapsed' => !$link['link_title'],
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'menu') . '/menu.js'),
      ),
      '#tree' => TRUE,
      '#weight' => -2,
      '#attributes' => array('class' => array('menu-link-form')),
    );
    $form['menu']['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Provide a menu link'),
      '#default_value' => (int) (bool) $link['mlid'],
    );
    $form['menu']['link'] = array(
      '#type' => 'container',
      '#parents' => array('menu'),
      '#states' => array(
        'invisible' => array(
          'input[name="menu[enabled]"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Populate the element with the link data.
    $keys = array(
      'mlid',
      'module',
      'hidden',
      'has_children',
      'customized',
      'options',
      'expanded',
      'hidden',
      'parent_depth_limit',
    );

    foreach ($keys as $key) {
      $form['menu']['link'][$key] = array('#type' => 'value', '#value' => $link[$key]);
    }

    $form['menu']['link']['link_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Menu link title'),
      '#default_value' => $link['link_title'],
    );

    $form['menu']['link']['description'] = array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#default_value' => isset($link['options']['attributes']['title']) ? $link['options']['attributes']['title'] : '',
      '#rows' => 1,
      '#description' => t('Shown when hovering over the menu link.'),
    );

    // Use the currently selected menu item's parent as the default parent
    // item, if a menu link has been defined. Otherwise, use the root element
    // of the menu defined for this content type.
    
    $default = variable_get('menu_options_' . $type, array('main-menu'));
    $default = reset($default);
    $default_value = ($link['mlid'] ? $link['menu_name'] . ':' . $link['plid'] : $default . ':0');

    // Note: If the selected parent item becomes unavailable, (unpublished,
    // for example) and a user who has no access to the parent, edits the
    // node, the parent selector widget will default to the first available
    // ancestor of the previously selected parent menu item.
    $form['menu']['link'] += menuperformance_get_form_items($default_value, $type, $link);
  }
}


/**
 * Helper function for the form_alter_hooks.
 *
 * @param String $default
 *   The default value for the parent menu item. Either "0" or in format
 *   MENUNAME:MLID.
 * @param String $type
 *   The type of the node that we're editing.
 * @param Array $link
 *   The menu attribute of the node object we're editing.
 */
function menuperformance_get_form_items($default, $type = FALSE, $link = FALSE) {
  global $base_url;

  if (variable_get('menuperformance_debug_mode', FALSE)) {
    $debug_field_type = 'textfield';
  }
  else {
    $debug_field_type = 'hidden';
  }

  $form['parent'] = array(
    '#type' => $debug_field_type,
    '#title' => t('Parent item (Debug mode display only)'),
    '#default_value' => $default,
    '#attributes' => array(
      'class' => array('menuperformance_node_menu_value'),
      'readonly' => 'true',
    ),
  );

  $form['parent_container_start'] = array(
    '#markup' => '<div class="menuperformance_container">',
  );

  $default_menu = substr($default, 0, strpos($default, ':'));
  if ($type) {
    $all_menus = menu_get_menus();
    $type_menus = variable_get('menu_options_' . $type, array('main-menu' => 'main-menu'));
    $available_menus = array();
    foreach ($all_menus as $key => $name) {
      if (in_array($key, $type_menus)) {
        $available_menus[$key] = $name;
      }
    }
  }
  else {
    $available_menus = menu_get_menus();
  }
  // Add the select element for the menu selection.
  $form['parent_menu'] = array(
    '#type' => 'select',
    '#options' => $available_menus,
    '#default_value' => $default_menu,
    '#attributes' => array(
      'class' => array('menuperformance_node_menu_parent_menu'),
    ),
    '#title' => t('Parent item'),
  );

  // Add selects for parent link item selects, if needed:
  $default_mlid = substr($default, strpos($default, ':') + 1);
  $i = 0;
  $mlid = $default_mlid;
  $temp_items = array();
  $finished = FALSE;
  $prev_mlid = FALSE;

  if ($link && $link['mlid']) {
    $own_mlid = $link['mlid'];
  }
  else {
    $own_mlid = FALSE;
  }

  if ($default_menu) {
    while (!$finished) {
      $options = array(0 => '[select]');
      $options += menuperformance_get_link_children($default_menu, $mlid, TRUE);

      // Remove the current menu item so we can't select itself as its own
      // parent.
      foreach ($options as $key => $option) {
        if ((int) $key === $own_mlid) {
          unset($options[$key]);
        }
      }

      $temp_items[] = array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $prev_mlid,
        '#attributes' => array(
          'class' => array('menuperformance_node_menu_parent_link'),
        ),
      );

      if ($mlid == 0) {
        $finished = TRUE;
      }

      $mlink = menu_link_load($mlid);
      $prev_mlid = $mlid;
      $mlid = $mlink['plid'];

      // Development fallback to prevent infinite loops. Doesn't do any harm,
      // so it can stick around for the stable versions as well.
      $i++;
      if ($i > 11) {
        break;
      }
    }
  }

  $c = count($temp_items);
  for ($i = 0; $i <= $c; $i++) {
    $item = array_pop($temp_items);
    $item['#attributes']['data-mpi'] = $i;
    $form['menuperformance_node_menu_parent_link_' . $i] = $item;
  }

  $form['parent_container_end'] = array(
    '#markup' => '</div>',
  );

  if ($link) {
    $form['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#delta' => 50,
      '#default_value' => (isset($link['weight']) ? $link['weight'] : 0),
      '#description' => t('Menu links with smaller weights are displayed before links with larger weights.'),
    );
  }

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'menuperformance') . '/menuperformance.css',
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'menuperformance') . '/menuperformance.js',
  );

  // Key 'current_mlid' is passed to the template so we can disable the node's
  // own current menu item from the parent select. This is used when looping
  // through menu items received via AJAX. When loading the full page, the check
  // is done above, line 219.
  if ($link) {
    $current_mlid = $link['mlid'];
  }
  else {
    $current_mlid = FALSE;
  }

  $form['#attached']['js'][] = array(
    'data' => array(
      'menuperformance' => array(
        'base_url' => $base_url,
        'module_path' => drupal_get_path('module', 'menuperformance'),
        'current_mlid' => $current_mlid,
      ),
    ),
    'type' => 'setting',
  );

  return $form;
}


/**
 * Implements hook_node_validate().
 */
function menuperformance_node_validate($node) {
  if(isset($node->menu) && $node->menu['enabled'] == 1) {
    $parent = $node->menu['parent'];
    $parent = explode(':', $parent);
    if (!isset($parent[1])) {
      form_set_error('menu][parent', t('Invalid parent menu string. Format should be "MENUNAME:MLID".'));
    }
    else {
      $menus = menu_get_menus();
      if (!isset($menus[$parent[0]])) {
        form_set_error('menu][parent', t('Invalid parent menu. First part of the selection should be the machine name of a menu.'));
      }
      else {
        // "0" is the root element and is ok.
        if ($parent[1] != 0) {
          $menu_link = menu_link_load($parent[1]);
          if (!$menu_link) {
            form_set_error('menu][parent', t('Invalid menu link id. Second part of the selection should be id of a menu link.'));
          }
          elseif ($parent[1] == $node->menu['mlid']) {
            form_set_error('menu][parent', t("Invalid menu item selection. Can't set the menu item as its own parent."));
          }
          else {
            if ($menu_link['menu_name'] != $parent[0]) {
              form_set_error('menu][parent', t('Mismatch in menu name and id. Given mlid must belong to given menu.'));
            }
          }
        }
      }
    }
  }
}


/**
 * Implements hook_node_submit().
 *
 * @see menu_form_node_form_alter()
 */
function menuperformance_node_submit($node, $form, $form_state) {
  // Decompose the selected menu parent option into 'menu_name' and 'plid'.
  if (!empty($form_state['values']['menu']['parent'])) {
    list($node->menu['menu_name'], $node->menu['plid']) = explode(':', $form_state['values']['menu']['parent']);
  }
}


/**
 * Creates the admin settings form.
 */
function menuperformance_admin_form() {
  $form = array();

  $form['menu_override_parent_selector'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate Menuperformance'),
    '#default_value' => variable_get('menu_override_parent_selector', FALSE),
    '#description' => t('Check this if you have generated or will generate a large amount of menu items. This sets Drupal variable "menu_override_parent_selector", which is checked against in menu.module:menu_parent_options(), and if set, will skip fetching the whole menu tree. When active, Menuperformance creates its own version of the menu item parent selector widget on node editing, node type editing and taxonomy vocabulary editing (when Taxonomy Menu is active) pages, allowing faster page loads.'),
  );

  $form['menuperformance_debug_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug mode'),
    '#default_value' => variable_get('menuperformance_debug_mode', FALSE),
    '#description' => t('Activates debug mode. Displays extra information in the menu parent selectors.'),
  );

  return system_settings_form($form);
}


/**
 * AJAX callback for the admin menu parent selection widget.
 */
function menuperformance_ajax($menu_name, $mlid) {
  if (!$mlid) {
    $mlid = 0;
  }
  $children = menuperformance_get_link_children($menu_name, $mlid);
  drupal_json_output($children);
  drupal_exit();
}


/**
 * Gets link children.
 *
 * @param string $menu_name
 *   The machine name of the menu to which the menu item belongs.
 * @param integer $mlid
 *   The menu link id of the menu link whose children we want.
 *
 * @return Array
 *   An array containing the immediate children of the given menu item.
 */
function menuperformance_get_link_children($menu_name, $mlid, $simple = FALSE) {
  $query = db_select('menu_links')
  ->fields('menu_links', array('link_title', 'mlid'))
  ->condition('plid', $mlid)
  ->condition('menu_name', $menu_name)
  ->orderBy('weight', 'ASC');

  for ($i = 1; $i <= MENU_MAX_DEPTH; $i++) {
    $query->orderBy('p' . $i, 'ASC');
  }

  $result = $query->execute();

  $children = array();
  foreach ($result as $record) {
    $link = menu_link_load($record->mlid);
    if ($link['access']) {
      if ($simple) {
        $children[$record->mlid] = $record->link_title;
      }
      else {
        $children[$record->mlid] = $record;
      }
    }
  }

  return $children;
}


/**
 * Implements hook_form_FORMID_alter().
 *
 * Setting the variable "menu_override_parent_selector" prevents the node type
 * form alter from loading all menu items. As a result, a "An illegal choice
 * has been detected"-error is shown when trying to save the form.
 *
 * This function replaces the form elements so that the original submit handler
 * can handle the form, but we don't need to load all menu items to do the
 * selections we need to do.
 */
function menuperformance_form_node_type_form_alter(&$form, $form_state) {
  if (variable_get('menu_override_parent_selector', FALSE)) {
    unset($form['menu']);
    $menu_options = menu_get_menus();
    $type = $form['#node_type'];
    $form['menu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Menu settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'menu') . '/menu.admin.js'),
      ),
      '#group' => 'additional_settings',
    );

    $form['menu']['menu_options'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Available menus'),
      '#default_value' => variable_get('menu_options_' . $type->type, array('main-menu')),
      '#options' => $menu_options,
      '#description' => t('The menus available to place links in for this content type.'),
    );

    // @TODO: http://drupal.org/node/1557668
    // Create an element that allows an _optional_ way of selecting the
    // default menu item. If we have menus in the system that have a couple of
    // thousand items each, we don't want to load those on the page if not
    // needed.
    // - Add some HTML showing the current default menu item
    // - Create a checkbox labeled "Select default menu item"
    // When checkbox is checked, show a select element with the available menus,
    // filtered based on the checkboxes above. Once the user selects a menu, we
    // can do an AJAX call to get the first level elements, like on the node
    // edit page.
  }
}


/**
 * Implements hook_form_FORMID_alter().
 */
function menuperformance_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
  if (variable_get('menu_override_parent_selector', FALSE) && module_exists('taxonomy_menu')) {
    if(isset($form['vid']['#value'])) {
      $default = variable_get(_taxonomy_menu_build_variable('vocab_menu', $form['vid']['#value']), NULL) . ':' . variable_get(_taxonomy_menu_build_variable('vocab_parent', $form['vid']['#value']), NULL);
    }

    $form['taxonomy_menu']['vocab_parent']['#type'] = 'hidden';

    $form['taxonomy_menu']['parent'] = menuperformance_get_form_items(isset($default) ? $default : 0);
    $form['taxonomy_menu']['parent']['#weight'] = -1;
    // Unlike on the node edit pages, we want to have a "no menu" selection
    // available.
    $form['taxonomy_menu']['parent']['parent_menu']['#options'] = array(0 => 'DISABLED') + $form['taxonomy_menu']['parent']['parent_menu']['#options'];

    array_unshift($form['#submit'], 'menuperformance_taxonomy_form_vocabulary_submit');
  }
}


/**
 * Additional submit handler for the vocabulary edit page. Copies the parent
 * value to a place where the original submit handler expects to find it.
 */
function menuperformance_taxonomy_form_vocabulary_submit($form, &$form_state) {
  $form_state['values']['taxonomy_menu']['vocab_parent'] = $form_state['values']['taxonomy_menu']['parent']['parent'];
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This one doesn't need an extra submit handler, since the new replacement form
 * item is named just like the original.
 */
function menuperformance_form_menu_edit_item_alter(&$form, $form_state) {
  if (variable_get('menu_override_parent_selector', FALSE) && module_exists('menu')) {
    $default_menu = $form['original_item']['#value']['menu_name'];
    $default_plid = $form['original_item']['#value']['plid'];
    unset($form['parent']);

    // Note the fake $link-array passed to the function. This passes the
    // information about which menu item we're editing, and allows the function
    // to remove that menu item from the list of possible parents.
    $form += menuperformance_get_form_items($default_menu . ':' . $default_plid, FALSE, array('mlid' => $form['mlid']['#value']));
  }
}
