<?php
/**
 * @file
 * Awesome Inline Reference Formatter.
 */


/**
 * Implementation of hook_ctools_plugin_directory()
 */
function air_ctools_plugin_directory($module, $plugin) {
  if (($module == 'panelizer' || $module == 'page_manager' || $module == 'panels' || $module == 'ctools' || $module == 'stylizer') && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Open modal window
 * Arguments are:
 * 2 => entity_id
 * 3 => placement
 * 4 => entity_type
 * 5 => field_name
 * 6 => style
 * @return array
 */
function air_menu() {
  $items = array();
  $items['air/modal/%/%/%/%/%'] = array(
    'title' => 'Open Modal',
    'type' => MENU_CALLBACK,
    'page callback' => 'air_open_modal',
    'page arguments' => array(2, 3, 4, 5, 6),
    'access arguments' => array('configure air settings'),
  );

  return $items;
}

/**
 * Check if a placement exists in the air settings table.
 * @param $placement
 * @return bool
 */
function air_settings_exist($entity_type, $entity_id, $placement) {
  $result = db_select('air_settings', 'a')
    ->fields('a', array('placement', 'settings', 'entity_type', 'entity_id', 'field_name'))
    ->condition('placement', $placement)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute()
    ->fetch();
  if (!empty($result) && $result->placement !== NULL) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Remove settings from AIR settings table based on entity type and entity id.
 * @param $entity_type
 * @param $entity_id
 */
function air_settings_delete($entity_type, $entity_id) {
  db_delete('air_settings')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute();
}

/**
 * @param $entity_type
 * @param $entity_id
 * @param $placement
 * @return bool
 */
function air_settings_load($entity_type, $entity_id, $placement) {
  $result = db_select('air_settings', 'a')
    ->fields('a', array('placement', 'settings', 'entity_type', 'entity_id', 'field_name'))
    ->condition('placement', $placement)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute()
    ->fetchAssoc();

  if (!empty($result)) {
    return $result;
  }
  return FALSE;
}

/**
 * @param $entity_type
 * @param $entity_id
 * @param $field_name
 * @param null $placement
 * @param array $settings
 */
function air_settings_create($entity_type, $entity_id, $field_name, $placement = NULL, $settings = array()) {
  $record = new stdClass();
  $record->entity_type = $entity_type;
  $record->entity_id = $entity_id;
  $record->field_name = $field_name;
  $record->placement = $placement;
  $record->settings = $settings;

  if (air_settings_exist($entity_type, $entity_id, $placement)) {
    drupal_write_record('air_settings', $record, array('placement'));
  }
  else {
    drupal_write_record('air_settings', $record);
  }
}

/**
 * @return array
 */
function air_get_all_reference_fields() {
  $entity_types = array();
  $field_instances = field_info_field_map();
  foreach ($field_instances as $field_name => $field) {
    if ($field['type'] == 'entityreference') {
      foreach ($field['bundles'] as $entity_type => $bundles) {
        $entity_types[$entity_type][$field_name] = $field_name;
      }
    }
  }
  return $entity_types;
}

/**
 * @param $entity_id
 * @param $entity_type
 * @param $field_name
 * @return bool
 */
function air_check_referred_data_exists($entity_id, $entity_type, $field_name) {
  $entity = entity_load_single($entity_type, $entity_id);
  if (empty($entity)) {
    return FALSE;
  }
  $entity_reference_field = field_get_items($entity_type, $entity, $field_name);
  if (!$entity_reference_field) {
    return FALSE;
  }
  $field = field_info_field($field_name);
  $target_type = $field['settings']['target_type'];
  $entity_ids = array();
  foreach ($entity_reference_field as $item) {
    if (entity_load_single($target_type, $item['target_id']) !== FALSE) {
      $entity_ids[] = $item['target_id'];
    }
  }
  return (count($entity_ids) > 0);
}

/**
 * @param $entity_id
 * @param $entity_type
 * @param $field_name
 * @return array
 */
function air_get_referred_data_from_entity($entity_id, $entity_type, $field_name) {
  $entity = entity_load_single($entity_type, $entity_id);
  $entity_reference_field = field_get_items($entity_type, $entity, $field_name);
  $field = field_info_field($field_name);
  $target_type = $field['settings']['target_type'];
  $entity_ids = array();
  foreach ($entity_reference_field as $item) {
    if (entity_load_single($target_type, $item['target_id']) !== FALSE) {
      $entity_ids[] = $item['target_id'];
    }
  }

  return $entity_ids;
}

/**
 * Return renderable arrays from the content that is saved in AIR settings.
 *
 * @param $air_settings
 * @return array
 */
function air_render_entities($settings, $entity_type) {
  $output = array();
  foreach ($settings as $setting) {
    if ($setting['enabled'] == 1) {
      $entity = entity_load_single($entity_type, $setting['entity_id']);
      if (!empty($entity)) {
        $output[] = entity_view($entity_type, array($entity), $setting['viewmode']);
      }
    }
  }
  return $output;
}

/**
 * @param $entity_id
 * @param $placement
 * @param $entity_type
 * @param $field_name
 * @param $style
 */
function air_open_modal($entity_id, $placement, $entity_type, $field_name, $style) {
  ctools_include('modal');
  ctools_include('ajax');

  $entity_ids = air_get_referred_data_from_entity($entity_id, $entity_type, $field_name);

  $form_state = array(
    'ajax' => TRUE,
    'title' => $field_name,
    'build_info' => array(
      'args' => array(
        $entity_ids,
        $placement,
        $entity_type,
        $field_name,
        $entity_id,
        $style,
      ),
    ),
  );

  $commands = ctools_modal_form_wrapper('air_container_form', $form_state);
  if (!empty($form_state['executed'])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
    $commands[] = ctools_ajax_command_reload();
  }
  print ajax_render($commands);
  exit();
}

// Implements hook_theme().
function air_theme($existing, $type, $theme, $path) {
  return array(
    'air_container_form' => array(
      'render element' => 'form',
    ),
    'air_content_default' => array(
      'variables' => array('items' => array()),
    ),
    'air_content_default_item' => array(
      'variables' => array('item' => array()),
    ),
  );
}

/**
 * @param $variables
 * @return string
 */
function theme_air_content_default($variables) {
  $out = '';
  $items = $variables['items'];
  foreach ($items as $item) {
    $out .= theme('air_content_default_item', array('item' => $item));
  }
  return $out;
}

/**
 * @param $variables
 * @return bool|string
 */
function theme_air_content_default_item($variables) {
  return drupal_render($variables['item']);
}

// Theme function for container.
function theme_air_container_form($variables) {
  $form = $variables['form'];

  $rows = array();
  foreach (element_children($form['settings']) as $entity_id) {
    $form['settings'][$entity_id]['weight']['#attributes']['class'] = array('settings-order-weight');
    $rows[] = array(
      'data' => array(
        array('class' => array('settings-cross')),
        drupal_render($form['settings'][$entity_id]['enabled']),
        drupal_render($form['settings'][$entity_id]['caption']),
        drupal_render($form['settings'][$entity_id]['weight']),
        drupal_render($form['settings'][$entity_id]['viewmode']),
      ),
      'class' => array('draggable', 'table'),
    );
  }

  $header = array('', t('Enabled'), t('Title'), t('Weight'), t('View mode'));
  $output = '';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'settings-order', 'class' => array('table', 'table-striped', 'table-bordered', 'table-hover'))));
  $output .= drupal_render_children($form);

  drupal_add_tabledrag('settings-order', 'order', 'sibling', 'settings-order-weight');

  return $output;
}

/**
 * Implements hook_air_styles()
 *
 * Add default style to AIR that accept all viewmodes.
 * @param $style
 */
function air_air_styles() {
  return array(
    'default' => array(
      'label' => 'Default',
      'view_modes' => 'all',
      'theme_function' => 'air_content_default'
    ),
  );
}

/**
 * @param $style
 * @param $viewmodes
 * @return mixed
 */
function air_map_style_to_viewmode($style, $viewmodes) {
  $allowed_viewmodes = module_invoke_all('air_styles');

  if ($allowed_viewmodes[$style]['view_modes'] == 'all') {
    return $viewmodes;
  }
  foreach ($viewmodes as $id => $viewmode) {
    if (!in_array($id, $allowed_viewmodes[$style]['view_modes'])) {
      unset($viewmodes[$id]);
    }
  }

  return $viewmodes;
}

/**
 * @param $form
 * @param $form_state
 * @param $entity_ids
 * @param $placement
 * @param $entity_type
 * @param $field_name
 * @param $entity_id
 * @param string $style
 * @return array
 */
function air_container_form($form, &$form_state, $entity_ids, $placement, $entity_type, $field_name, $entity_id, $style = 'default') {
  $form = array();

  // load all data form air table
  $old_record = air_settings_load($entity_type, $entity_id, $placement);
  if (!empty($old_record)) {
    $settings = unserialize($old_record['settings']);
  }

  $form['#tree'] = TRUE;
  $form['settings'] = array();

  $form['placement'] = array(
    '#type' => 'value',
    '#value' => $placement,
  );

  $form['entity_type'] = array(
    '#type' => 'value',
    '#value' => $entity_type,
  );

  $form['field_name'] = array(
    '#type' => 'value',
    '#value' => $field_name,
  );

  $form['entity_id'] = array(
    '#type' => 'value',
    '#value' => $entity_id,
  );

  usort($entity_ids, function ($val1, $val2) use ($settings) {
    $val1_weight = 0;
    $val2_weight = 0;
    if (isset($settings[$val1]['weight'])) {
      $val1_weight = $settings[$val1]['weight'];
    }
    if (isset($settings[$val2]['weight'])) {
      $val2_weight = $settings[$val2]['weight'];
    }
    return ($val1_weight > $val2_weight) ? 1 : -1;
  });

  $entity_info = entity_get_info($entity_type);
  $all_viewmodes = $entity_info['view modes'];

  foreach ($entity_ids as $id => $entity_id) {
    if (!empty($entity_id)) {
      $entity = entity_load_single($entity_type, $entity_id);
    }
    else {
      $entity = (object)array('title' => '');
    }

    $entitydata = entity_extract_ids($entity_type, $entity);
    $view_modes = field_view_mode_settings($entity_type, $entitydata[2]);
    $selectviewmodes = array();
    foreach ($view_modes as $viewmode => $viewmode_settings) {
      if ($viewmode_settings['custom_settings'] == TRUE && !empty($all_viewmodes[$viewmode]['label'])) {
        $selectviewmodes[$viewmode] = $all_viewmodes[$viewmode]['label'];
      }
    }

    $selectviewmodes = air_map_style_to_viewmode($style, $selectviewmodes);

    // Textfield to hold content id.
    $form['settings'][$entity_id]['enabled'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($settings[$entity_id]['enabled']) ? $settings[$entity_id]['enabled'] : 1,
    );
    // Caption for the slideshow.
    $form['settings'][$entity_id]['caption'] = array(
      '#markup' => entity_label($entity_type, $entity),
    );

    // Caption for the slideshow.
    $form['settings'][$entity_id]['viewmode'] = array(
      '#type' => 'select',
      '#options' => $selectviewmodes,
      '#default_value' => isset($settings[$entity_id]['viewmode']) ? $settings[$entity_id]['viewmode'] : array_slice($selectviewmodes, 0, 1),
    );

    // This field is invisible, but contains sort info (weights).
    $form['settings'][$entity_id]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#title_display' => 'invisible',
      '#default_value' => isset($settings[$entity_id]['weight']) ? $settings[$entity_id]['weight'] : 0,
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes'),
  );

  return $form;
}

/**
 * Submit handler for container settings.
 * @param $form
 * @param $form_state
 */
function air_container_form_submit(&$form, &$form_state) {
  $entity_type = $form_state['values']['entity_type'];
  $entity_id = $form_state['values']['entity_id'];
  $field_name = $form_state['values']['field_name'];
  $placement = $form_state['values']['placement'];
  $settings = $form_state['values']['settings'];

  air_settings_create($entity_type, $entity_id, $field_name, $placement, $settings);
}

/**
 * @param $entity
 * @param $entity_type
 */
function air_entity_delete($entity, $entity_type) {
  $entity_id = entity_id($entity_type, $entity);
  air_settings_delete($entity_type, $entity_id);
}

/**
 * @return array
 */
function air_permission() {
  return array(
    'configure air settings' => array(
      'title' => t('Configure AIR settings'),
      'description' => t('Perform administration tasks for AIR settings.'),
    ),
  );
}

/**
 * @return array
 */
function air_field_formatter_info() {
  return array(
    'air_entityreference' => array(
      'label' => t('Awesome inline reference'),
      'field types' => array('entityreference'),
      'settings' => array(
        'style' => NULL,
        'show_default' => NULL,
        'placement' => NULL,
        'entity_type' => NULL,
        'field_name' => NULL,
      ),
    ),
  );
}

/**
 * @param $field
 * @param $instance
 * @param $view_mode
 * @param $form
 * @param $form_state
 * @return array
 */
function air_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'air_entityreference') {
    $element = air_formatter_settings_form($settings);
    $element['placement'] = array(
      '#type' => 'value',
      '#value' => $view_mode,
    );
    $element['entity_type'] = array(
      '#type' => 'value',
      '#value' => $form['#entity_type'],
    );
    $element['field_name'] = array(
      '#type' => 'value',
      '#value' => $field['field_name'],
    );
  }

  return $element;
}

/**
 * @param $field
 * @param $instance
 * @param $view_mode
 * @return null|string
 */
function air_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'air_entityreference') {
    $summary = t('Style: @style<br />Show default: @show_default', array(
      '@style' => !empty($settings['style']) ? $settings['style'] : t('default'),
      '@show_default' => !empty($settings['show_default']) ? 'yes' : 'no',
    ));
  }

  return $summary;
}

/**
 * @param $entity_type
 * @param $entity
 * @param $field
 * @param $instance
 * @param $langcode
 * @param $items
 * @param $display
 * @return array
 */
function air_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $tempelement = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'air_entityreference':

      $air_settings = air_get_entities($entity, $settings, $items);
      $entity_array = air_render_entities($air_settings, $settings['entity_type']);

      $tempelement['wrapper'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('air-container'),
        ),
      );

      if (user_access('configure air settings')) {
        drupal_add_css(drupal_get_path('module', 'air') . '/css/air.css');
        drupal_add_js(drupal_get_path('module', 'air') . '/js/air.js');
        // render the edit link for air here if user has access!!
        $tempelement['wrapper']['edit_link'] = array('#markup' => air_edit_link_render($entity, $settings));
      }

      $style = $settings['style'];

      $entity_array_rendered = air_render_themed_items($style, $entity_array);

      $tempelement['wrapper']['rendered_entities'] = array(
        '#markup' => $entity_array_rendered,
        '#prefix' => '<div class="air-rendered-entities">',
        '#suffix' => '</div>',
      );

      $element[0] = array(
        '#markup' => drupal_render($tempelement),
      );
      return $element;

      break;
  }
}


function air_get_entities($entity, $settings, $untouched_items) {
  $air_settings = array();
  // check if air has saved any settings. if so use that order for this render or else use the field order below
  // check for settings based on: entity type, entity id, fieldname and what?
  $old_record = air_settings_load($settings['entity_type'], entity_id($settings['entity_type'], $entity), $settings['placement']);
  if (!empty($old_record)) {
    $air_settings = unserialize($old_record['settings']);
    foreach ($air_settings as $entity_id => $entitydata) {
      $air_settings[$entity_id]['entity_id'] = $entity_id;
    }
    if (count($untouched_items > count($air_settings))) {
      $i = 0;
      // Some new entities have been added.
      foreach ($untouched_items as $item) {
        if (!in_array($item, array_keys($air_settings))) {
          $air_settings[$item] = array(
            'enabled' => 1,
            'viewmode' => 'default',
            'weight' => 45 + $i,
            'entity_id' => $item,
          );
          $i++;
        }
      }
    }
    usort($air_settings, function ($val1, $val2) {
      return ($val1['weight'] > $val2['weight']) ? 1 : -1;
    });
  }
  else {
    if (isset($settings['show_default']) && $settings['show_default'] == 1) {
      // render the original field order here if no air settings has been stored.
      // use the default field order if no settings has been saved.
      $air_settings = array();
      foreach ($untouched_items as $delta => $item) {
        $air_settings[$item['target_id']]['enabled'] = 1;
        $air_settings[$item['target_id']]['entity_id'] = $item['target_id'];
        $air_settings[$item['target_id']]['viewmode'] = 'full';
      }
    }
  }

  return $air_settings;
}

/**
 * @param $style
 * @param $entity_array
 * @param $theme_function
 * @return string
 */
function air_render_themed_items($style, $entity_array) {
  $styles = module_invoke_all('air_styles');
  return theme($styles[$style]['theme_function'], array('items' => $entity_array));
}


/**
 * @param $entity
 * @param $settings
 * @return string
 */
function air_edit_link_render($entity, $settings) {
  $links = array();

  ctools_include('modal');
  ctools_modal_add_js();

  $url = 'air/modal/' . entity_id($settings['entity_type'], $entity) . '/' . $settings['placement'] . '/' . $settings['entity_type'] . '/' . $settings['field_name'] . '/' . $settings['style'];
  $class = array('air-open-' . $settings['placement'] . '-url', 'ctools-use-modal');
  $id = 'air-open-' . $settings['placement'];
  $link = l(t('EDIT'), $url, array('attributes' => array('id' => $id, 'class' => $class)));

  return '<div class="air-admin-link-wrapper"><span class="air-links-trigger">' . $link . '</span></div>';
}

/**
 * @param array $settings
 * @return mixed
 */
function air_formatter_settings_form($settings = array()) {
  $styles = module_invoke_all('air_styles');
  foreach ($styles as $name => $style) {
    $styleoptions[$name] = $style['label'];
  }

  $form['style'] = array(
    '#type' => 'select',
    '#title' => 'Select style',
    '#options' => $styleoptions,
    '#default_value' => !empty($settings['style']) ? $settings['style'] : $styleoptions[0],
  );

  $form['show_default'] = array(
    '#type' => 'checkbox',
    '#title' => 'Show new content automatically when created',
    '#default_value' => !empty($settings['show_default']) ? $settings['show_default'] : 0,
  );

  return $form;
}