<?php
/**
 * @file
 *
 * This file has been recreated from the original commerce_fancy_attributes
 * to extend it's functionality to support images also.
 */

/**
 * Implements hook_menu().
 */
function commerce_fancy_image_attributes_menu() {
  $items['admin/commerce/config/commerce_fancy_image_attributes'] = array(
    'title' => 'Commerce fancy image attributes',
    'description' => 'Allows configuration of the hex color field for attributes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fancy_image_attributes_settings_form'),
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Administrative settings form for the module
 */
function commerce_fancy_image_attributes_settings_form($form, &$form_state) {
  $form['description'] = array(
    '#type' => 'item',
    '#title' =>  t('Commerce Fancy Image Attributes'),
    '#markup' => t('This page allows you to change the default hex field type for colors.'),
  );

  $color_text_options = array('commerce_fancy_attributes' => t('Commerce fancy attributes (Color)'), 'color_field' => t('Color Field'));

  $form['commerce_fancy_image_attributes_color_text'] = array(
    '#type' => 'radios',
    '#title' => t('Color hex handler'),
    '#default_value' => variable_get('commerce_fancy_image_attributes_color_text', 'commerce_fancy_attributes'),
    '#options' => $color_text_options,
    '#description' => t('Select the way the color hex values will be handled.'),
  );

  if (!module_exists('color_field')) {
    $form['commerce_fancy_image_attributes_color_text']['color_field'] = array(
      '#disabled' => TRUE,
    );

    $form['color_field_notice'] = array(
      '#type' => 'item',
      '#markup' => t('<em>Color Field module is not present</em>'),
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_facetapi_widgets().
 */
function commerce_fancy_image_attributes_facetapi_widgets() {
  return array(
    'commerce_search_api_fancy_images' => array(
      'handler' => array(
        'label' => t('Fancy attributes (with Images)'),
        'class' => 'CommerceSearchApiFancyImage',
        'query types' => array('term'),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_fancy_image_attributes_field_formatter_info() {
  return array(
    'commerce_fancy_image_attributes_color' => array(
      'label' => t('Color Image'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function commerce_fancy_image_attributes_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function commerce_fancy_image_attributes_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_fancy_image_attributes_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  switch ($display['type']) {
    case 'commerce_fancy_image_attributes_color':
      $element = array();

      $title = entity_label($entity_type, $entity);
      foreach ($items as $delta => $item) {
        $item['title'] = $title;
        $element[$delta] = array(
          '#theme' => 'image_formatter',
          '#item' => $item,
          '#image_style' => $display['settings']['image_style'],
          '#path' => '',
        );
      }

      return $element;
  }
}
