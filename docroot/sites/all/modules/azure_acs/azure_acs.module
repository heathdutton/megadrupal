<?php
/**
 * @file
 * Windows Azure ACS integration
 *
 */

/**
 * Implements hook_menu().
 */
function azure_acs_menu() {
  $items = array();

  $items['admin/config/people/azure_acs'] = array(
    'title' => 'Windows Azure ACS',
    'description' => 'Configure Windows Azure ACS integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('azure_acs_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'azure_acs.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['acs'] = array(
    'title' => 'Windows Azure ACS return handler',
    'description' => 'Handles returning users',
    'page callback' => 'azure_acs_return',
    'file' => 'azure_acs.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['acserror'] = array(
    'title' => 'Windows Azure ACS error handler',
    'description' => 'Handles ACS login errors',
    'page callback' => 'azure_acs_error',
    'file' => 'azure_acs.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function azure_acs_theme() {
  $theme = array(
    'azure_acs_providers' => array(
      'variables' => array('providers' => array()),
    ),
  );

  return $theme;
}

/**
 * Default implementation of theme azure_acs_providers.
 *
 * Formats identity providers list
 * @see azure_acs_get_identity_providers()
 *
 */
function theme_azure_acs_providers($variables) {
  $providers = $variables['providers'];

  if (empty($providers)) {
    return '';
  }

  $links = array();

  foreach ($providers as $provider) {
    $name = $provider['Name'];
    $login_url = $provider['LoginUrl'];

    $links['login-' . drupal_strtolower($name)] = array(
      'title' => t('Login with @provider', array('@provider' => $name)),
      'href' => $login_url,
    );
  }

  $output = theme('links', array('links' => $links));

  return $output;
}

/**
 * Implements hook_block_info().
 */
function azure_acs_block_info() {
  $blocks['identity_providers'] = array(
    'info' => t('Windows Azure ACS identity providers')
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function azure_acs_block_view($delta) {
  global $user;
  $block = array();

  switch ($delta) {
    case 'identity_providers':
      if ($user->uid == 0) {
        $block['subject'] = '';

        $providers = azure_acs_get_identity_providers();
        if ($providers) {
          $block['content'] = theme('azure_acs_providers', array('providers' => $providers));
        }
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter user register form to include data retrieved from ACS
 */
function azure_acs_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  if (isset($_SESSION) && !empty($_SESSION['azure_acs_data'])) {
    $name = isset($_SESSION['azure_acs_data']['name']) ? $_SESSION['azure_acs_data']['name'] : '';
    $mail = isset($_SESSION['azure_acs_data']['emailaddress']) ? $_SESSION['azure_acs_data']['emailaddress'] : '';

    if (isset($form['account'])) {
      if (isset($form['account']['name'])) {
        $form['account']['name']['#default_value'] = $name;
      }
      if (isset($form['account']['mail'])) {
        $form['account']['mail']['#default_value'] = $mail;
      }
    }

    $form['azure_acs_data'] = array(
      '#type' => 'value',
      '#value' => $_SESSION['azure_acs_data'],
    );
  }
}

/**
 * Implements hook_user_insert().
 */
function azure_acs_user_insert(&$edit, $account, $category) {
  if (!empty($edit['azure_acs_data'])) {
    // Insert identity provider data for later use
    azure_acs_add_user_identity($account->uid, $edit['azure_acs_data']);

  }
}

/**
 * Adds external user data provided by an identity provider
 * @param integer $uid User id to associate this data with
 * @param array $user_data Claims returned by the identity provider.
 * @see _azure_acs_match_user()
 */
function azure_acs_add_user_identity($uid, $user_data) {
  $identity_provider = $user_data['identityprovider'];
  $name_identifier = $user_data['nameidentifier'];

  db_insert('azure_acs_users')
    ->fields(array(
    'identity_provider' => $identity_provider,
    'name_identifier' => $name_identifier,
    'uid' => $uid
  ))
  ->execute();
}

/**
 * Implements hook_user_delete().
 */
function azure_acs_user_delete($account) {
  // Delete identity provider data
  db_delete('azure_acs_users')->condition('uid', $account->uid)->execute();
}

/**
 * Gets a list of identity providers used with this site ("Relying party application").
 *
 * @return array FALSE on error, otherwise an array of identity provider arrays. Each array has the following keys:
 *  'Name' - The provider name (like Google or Facebook)
 *  'LoginUrl' - The provider login url (i.e. where to point the user's browser when logging in with this provider)
 *  'LogoutUrl' - The provider logout url. Can be empty
 *  'ImageUrl - ? (can be empty)
 *  'EmailAddressSuffixes' - ? (can be empty)
 */
function azure_acs_get_identity_providers() {
  // Avoid unnecessary external http requests by caching the provider list
  $cid = 'azure_acs_identity_providers';
  $cache = cache_get($cid);

  $providers = array();

  if ($cache) {
    $providers = $cache->data;
  }
  else {
    $namespace = variable_get('azure_acs_namespace', '');
    if (!$namespace) {
      watchdog('azure_acs', 'Windows Azure ACS namespace is not set', array(), WATCHDOG_WARNING);
      return FALSE;
    }

    $realm = _azure_acs_get_realm();

    $url = 'https://' . $namespace . '/v2/metadata/IdentityProviders.js?protocol=wsfederation&version=1.0&realm=' . $realm;
    $response = drupal_http_request($url);

    if ($response->code != 200) {
      $variables =  array('@status' => $response->code, '@message' => $response->status_message, '@error' => $response->error);
      watchdog('azure_acs', 'Getting identity provider list failed: @status @message (@error)', $variables, WATCHDOG_ERROR);
      return FALSE;
    }

    $providers = json_decode($response->data, TRUE);
    if (is_array($providers)) {
      cache_set($cid, $providers);
    }
  }

  return $providers;
}

/**
 * Gets the application realm.
 *
 * @return string
 */
function _azure_acs_get_realm() {
  $realm = variable_get('azure_acs_realm', '');
  if (!$realm) {
    // No realm set in settings, use site url.
    $realm = url('', array('absolute' => TRUE));
  }

  return $realm;
}

/**
 * Tries to find a user from the users table based on the claims returned by an identity provider.
 *
 * @param array $user_data Claims returned by the identity provider.
 *        Required keys are 'identityprovider' (identity provider name) and 'nameidentifier' (user id in the identity provider's service)
 *       Optional keys: 'emailaddress'
 *
 * @return integer User id on match, FALSE if no match was found
 */
function _azure_acs_match_user($user_data) {
  $query = "SELECT uid FROM {azure_acs_users} WHERE identity_provider = :ip AND name_identifier = :nameid";
  $uid = db_query($query, array(':ip' => $user_data['identityprovider'], ':nameid' => $user_data['nameidentifier']))->fetchField();

  if (!$uid && variable_get('azure_acs_link_users', FALSE)) {
    // Check if we can link this user to an existing one by email address
    $mail = isset($user_data['emailaddress']) ? $user_data['emailaddress'] : NULL;
    if ($mail && ($users = user_load_multiple(array(), array('mail' => $mail)))) {
      $user = reset($users);
      $uid = $user->uid;

      azure_acs_add_user_identity($uid, $user_data);

      return $uid;
    }

    // Nope, this user really doesn't exist in our database yet
    return FALSE;
  }
  else {
    return $uid;
  }
}

/**
 * Logs in ACS-authenticated users.
 *
 * @param integer $uid The user id
 */
function _azure_acs_log_user_in($uid) {
  // Check user status
  $account = user_load($uid);

  if ($account && user_is_blocked($account->name)) {
    drupal_set_message(t('The username %name has not been activated or is blocked.', array('%name' => $account->name)), 'error');
    drupal_goto('<front>');
  }

  // Log user in.
  drupal_set_message(t('You are now logged in as %name.', array('%name' => $account->name)));
  $form_state = array('uid' => $uid);
  user_login_submit(array(), $form_state);
}
