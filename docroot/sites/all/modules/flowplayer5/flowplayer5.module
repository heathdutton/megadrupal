<?php

/**
 * @file
 * All module hooks implementation can be found in this file.
 */

/**
 * Implementation of hook_menu().
 */
function flowplayer5_menu() {
  $items = array();
  $items['admin/config/media/flowplayer5'] = array(
    'title' => 'Flowplayer5',
    'description' => 'Flowplayer5 work with html5 advance player.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flowplayer5_admin_settings_page'),
    'file' => 'flowplayer5.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function flowplayer5_theme() {
  return array(
    'flowplayer5' => array(
      'variables' => array(
        'config' => NULL,
        'id' => 'flowplayer5',
        'attributes' => array(),
      ),
    ),
    'flowplayer5_html5_video' => array(
      'variables' => array('item' => NULL, 'width' => NULL, 'height' => NULL),
      'template' => 'flowplayer5-html5-video'
    ),
  );
}

/**
 * 
 * Theme flowplayer5 video preview to custimize UI according to user 
 * requirements.
 * 
 * @param array $variables
 *  Contains theme attributes for player.  
 *  
 * @return String  
 *  Return html wrapper div for video preview.
 */
function theme_flowplayer5($variables) {
  $config = $variables['config'];
  $id = $variables['id'];
  $attributes = $variables['attributes'];
  // Prepare the ID.
  $id = drupal_clean_css_identifier($id);
  // Prepare the attributes, passing in the flowplayer class.
  if (isset($attributes['class'])) {
    $attributes['class'][] = ' flowplayer5';
  }
  else {
    $attributes['class'] = 'flowplayer5 ';
  }
  $attributes = drupal_attributes($attributes);

  // Add the JavaScript to handle the element.
  flowplayer5_add('#' . $id, $config);

  // Return the markup.
  return "<div id='$id' $attributes></div>";
}

function flowplayer5_libraries_info() {
  $libraries = array();
  $libraries['flowplayer5'] = array(
    'name' => t('Flowplayer HTML5'),
    'vendor url' => 'https://flowplayer.org',
    'download url' => 'https://flowplayer.org/pricing/#downloads',
    'version arguments' => array(
      'file' => 'flowplayer.min.js',
      'pattern' => '@v+([0-9a-zA-Z\.-]+)@',
      'lines' => 3,
    // 'cols' => 14,
    ),
    'files' => array(
      'js' => array('flowplayer.min.js'),
      'css' => array('skin/all-skins.css'),
    ),
    'variants' => array(
      'functional' => array(
        'files' => array(
          'css' => array('skin/functional.css'),
          'js' => array('flowplayer.min.js'),
        ),
      ),
      'minimalist' => array(
        'files' => array(
          'css' => array('skin/minimalist.css'),
          'js' => array('flowplayer.min.js'),
        ),
        'playful' => array(
          'files' => array(
            'css' => array('skin/playful.css'),
            'js' => array('flowplayer.min.js'),
          ),
        ),
      ),
    )
  );

  return $libraries;
}

/**
 * Adds a FlowPlayer5 element to the page.
 *
 * @param $selector
 *   Jquery selector id where player would be embeded.
 * 
 * @param array $config
 *   Video files and flowplayer other  options which user want to implement on 
 * player.
 */
function flowplayer5_add($selector = NULL, $config = NULL) {
  static $style, $brand;
  // Load flowplayer html5 library.
  if (!$style) {
    if (isset($config['style']) && isset($config['style']['type'])) {
      $style = $config['style'];
      // If any style in $config then remove it.
      unset($config['style']);
    }
    else {
      $vari = variable_get('flowplayer5_variation', 'minimalist');
      // Get settings for different sample player variations.
      $settings = flowplayer5_get_settings();
      $style = $settings[$vari];
      $style['type'] = $vari;
    }
  }

  if (!$brand) {
    // Check user inserted api key for commercial use.
    $is_com = variable_get('flowplayer5_branding', FALSE);

    if ($is_com) {
      // Get API key.
      $brand['is_com'] = TRUE;
      $key = variable_get('flowplayer5_key', '');
      $brand['key'] = $key;

      // Get custom logo.
      $logo = variable_get('flowplayer5_logo', '');
      $brand['logo'] = $logo;
    }
    else {
      $brand['is_com'] = FALSE;
    }
  }

  libraries_load('flowplayer5');

  // Add js for flowplayer
  drupal_add_js(drupal_get_path('module', 'flowplayer5') . '/js/flowplayer5.js', array('weight' => 0));
  drupal_add_js(array('flowplayer5' => array('selector' => $selector, 'config' => $config, 'style' => $style, 'brand' => $brand)), 'setting');
}

function flowplayer5_get_settings() {
  $settings = array();
  $inputs = array('backgroundColor' => '#000000',
    'timelineColor' => '#000000',
    'progressColor' => '#db0000',
    'bufferColor' => '#f9f9f9',
    'playerBgColor' => '#000000');
  // Checkboxes for UI controlls.
  $ui_con = array('time' => TRUE,
    'top_left' => FALSE,
    'volume' => TRUE,
    'slider' => TRUE,
    'play' => TRUE,
    'embed' => FALSE,
    'ful_screen' => TRUE,
    'darkicons' => FALSE,
    'overlayed' => TRUE,
    'on_mouseover' => FALSE);

  foreach (array('minimalist', 'functional', 'playful') as $vari) {
    // Get input/textfields value from different variations.
    foreach ($inputs as $k => $v) {
      $settings[$vari]['input'][$k] = variable_get('flowplayer5_color_' . $k . '_' . $vari, $v);
    }
    // Get checkboxes value from different variations.
    foreach ($ui_con as $kc => $ic) {
      $vs = variable_get('flowplayer5_conts_' . $vari, $ic);
      $settings[$vari]['check'][$kc] = $vs[$kc];
    }
  }
  return $settings;
}

/**
 *  Alter video form and add flowplayer option.
 */
function flowplayer5_form_video_players_admin_settings_alter(&$form, &$form_state, $form_id) {
  // Get all video file extensions which video module support.
  $extensions = video_utility::getMediaExtensions();
  // Add Flowplayer5 option  in video form under html5 selection.
  foreach ($extensions as $ext) {
    $value = variable_get('video_extension_' . $ext . '_html5_player', '');
    $form['extensions']['video_extension_' . $ext . '_html5_player']['#options']['flowplayer5'] = t('Flowplayer5 provide html5 flowplayer for video with fallback.');
    if ($value == 'flowplayer5') {
      $form['extensions']['video_extension_' . $ext . '_html5_player']['#default_value'] = $value;
    }
  }
}

/**
 * Override video module theme function 'video_html5'
 * Imepelement hook_theme_registry_alter.
 */
function flowplayer5_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['video_html5'])) {
    $theme_registry['video_html5']['function'] = 'flowplayer5_html5_video_override';
  }
}

function flowplayer5_html5_video_override($variables) {
  $themed_output = NULL;
  $item = $variables['item'];

  $files = $item['playablefiles'];
  $extension = video_utility::getExtension($files[0]->uri);

  $html5_player = variable_get('video_extension_' . $extension . '_html5_player', 'video');
  switch ($html5_player) {
    case 'flowplayer5':
      static $count = 1;
      $variables['files'] = $files;
      $variables['count'] = $count;
      // Add player code.

      if ($files) {
        $playlist = array();
        foreach ($files as $vfile) {

          $url = file_create_url($vfile->uri);
          $ext = pathinfo($url, PATHINFO_EXTENSION);
          $playlist[$ext] = $url;
          $thumb = $vfile->thumbnail;
        }
        $config = array(
          'playlist' => $playlist,
          'ratio' => 3 / 4,
          'posterImage' => $thumb,
        );
      }
      flowplayer5_add('#flowplayer5-' . $count . '-player', $config);
      $count++;
      return theme('flowplayer5_html5_video', $variables);
      break;
    default :
      return theme_video_html5($variables);
  }
}
