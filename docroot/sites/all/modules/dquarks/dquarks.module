<?php

/**
 * @file
 * This module provides a simple way to create quiz.
 *
 * @author IP-TECH
 */

/**
 * Implements hook_help().
 */
require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';
require_once  drupal_get_path('module', 'dquarks') . '/components/multichoice.inc';

/**
 * Implements hook_help().
 */
function dquarks_help($section = 'admin/help#dquarks', $arg = NULL) {
  $output = '';
  switch ($section) {
    case 'admin/config/content/dquarks':
      require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.admin.inc';
      $type_list = dquarks_admin_type_list();
      $output = t('dquarks enables nodes to have attached forms and questionnaires.');
      if ($type_list) {
        $output .= ' ' . t('To add one, create a !types piece of content.', array('!types' => $type_list));
      }
      else {
        $output .= ' <strong>' . t('dquarks is currently not enabled on any content types.') . '</strong> ' . t('To use dquarks, please enable it on at least one content type on this page.');
      }
      $output = '<p>' . $output . '</p>';
      break;

    case 'admin/content/dquarks':
      $output = '<p>' . t('This page lists all of the content on the site that may have a dquarks attached to it.') . '</p>';
      break;

    case 'admin/help#dquarks':
      require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.admin.inc';
      $types = dquarks_admin_type_list();
      if (empty($types)) {
        $types = t('dquarks-enabled piece of content');
        $types_message = t('dquarks is currently not enabled on any content types.') . ' ' . t('Visit the <a href="!url">dquarks settings</a> page and enable dquarks on at least one content type.', array('!url' => url('admin/config/content/dquarks')));
      }
      else {
        $types_message = t('Optional: Enable dquarks on multiple types by visiting the <a href="!url">dquarks settings</a> page.', array('!url' => url('admin/config/content/dquarks')));
      }
      $output = t("<p>This module lets you create forms or questionnaires and define their content. Submissions from these forms are stored in the database and optionally also sent by e-mail to a predefined address.</p>
      <p>Here is how to create one:</p>
      <ul>
        <li>!dquarks-types-message</li>
        <li>Go to <a href=\"!create-content\">Create content</a> and add a !types piece of content.</li>
        <li>After saving the new content, you will be redirected to the main field list of the form that will be created. Add the fields you would like on your form.</li>
        <li>Once finished adding fields, you may want to send e-mails to administrators or back to the user who filled out the form. Click on the <em>Emails</em> sub-tab underneath the <em>dquarks</em> tab on the piece of content.</li>
        <li>Finally, visit the <em>Form settings</em> sub-tab under the <em>dquarks</em> tab to configure remaining configurations options for your form.
          <ul>
          <li>Add a confirmation message and/or redirect URL that is to be displayed after successful submission.</li>
          <li>Set a submission limit.</li>
          <li>Determine which roles may submit the form.</li>
          <li>Advanced configuration options such as allowing drafts or show users a message indicating how they can edit their submissions.</li>
          </ul>
        </li>
        <li>Your form is now ready for viewing. After receiving submissions, you can check the results users have submitted by visiting the <em>Results</em> tab on the piece of content.</li>
      </ul>
      <p>Help on adding and configuring the components will be shown after you add your first component.</p>
      ", array(
        '!dquarks-types-message' => $types_message,
        '!create-content' => url('node/add'),
        '!types' => $types)
      );
      break;

    case 'node/%/dquarks/components':
      $output .= '<p>' . t('This page displays all the components currently configured for this dquarks node. You may add any number of components to the form, even multiple of the same type. To add a new component, fill in a name and select a type from the fields at the bottom of the table. Submit the form to create the new component or update any changed form values.') . '</p>';
      $output .= '<p>' . t("Click on any existing component's name to edit its settings.") . '</p>';
      break;

    case 'node/%/submission/%/resend':
      $output .= '<p>' . t('This form may be used to resend e-mails configured for this dquarks. Check the e-mails that need to be sent and click <em>Resend e-mails</em> to send these e-mails again.') . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_menu().
 */
function dquarks_menu() {
  $items = array();

  // Submissions listing.
  $items['admin/content/dquarks'] = array(
    'title' => 'Dquarks',
    'page callback' => 'dquarks_admin_content',
    'access callback' => 'user_access',
    'access arguments' => array('access all dquarks results'),
    'description' => 'View and edit all the available dquarkss on your site.',
    'file' => 'includes/dquarks.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Admin Settings.
  $items['admin/config/content/dquarks'] = array(
    'title' => 'Dquarks settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dquarks_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Global configuration of dquarks functionality.',
    'file' => 'includes/dquarks.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Node page tabs.
  $items['node/%dquarks_menu/done'] = array(
    'title' => 'dquarks confirmation',
    'page callback' => '_dquarks_confirmation',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%dquarks_menu/dquarks/components'] = array(
    'title' => 'quiz components',
    'page callback' => 'dquarks_components_page',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/dquarks.components.inc',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );

  // Node component forms.
  $items['node/%dquarks_menu/dquarks/components/%dquarks_menu_component'] = array(
    'load arguments' => array(1, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dquarks_component_edit_form', 1, 4, FALSE),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%dquarks_menu/dquarks/components/%dquarks_menu_component/clone'] = array(
    'load arguments' => array(1, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dquarks_component_edit_form', 1, 4, TRUE),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%dquarks_menu/dquarks/components/%dquarks_menu_component/delete'] = array(
    'load arguments' => array(1, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dquarks_component_delete_form', 1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%dquarks_menu/dquarks/components/callback'] = array(
    'page callback' => 'dquarks_component_edit_callback',
    'load arguments' => array(1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  $items['node/%dquarks_menu/dquarks/components/callback/%dquarks_menu_operation_parms'] = array(
    'page callback' => 'dquarks_component_edit_callback',
    'laod arguments' => array(1, 5),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%dquarks_menu/dquarks/components/%dquarks_menu_component/addrule'] = array(
    'load arguments' => array(1, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dquarks_component_addrule_form', 1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/dquarks_components.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%dquarks_menu/dquarks/components/%dquarks_menu_component/delrule/%dquarks_menu_rule_id'] = array(
    'load arguments' => array(1, 5, 4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dquarks_component_delrule_form', 1, 4, 6),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  // Node dquarks results.
  $items['node/%dquarks_menu/dquarks-results'] = array(
    'title' => 'Results',
    'page callback' => 'dquarks_results_submissions',
    'page arguments' => array(1, FALSE, '50'),
    'access callback' => 'dquarks_results_access',
    'access arguments' => array(1),
    'file' => 'includes/dquarks.report.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%dquarks_menu/dquarks-results/submissions'] = array(
    'title' => 'Submissions',
    'page callback' => 'dquarks_results_submissions',
    'page arguments' => array(1, FALSE, '50'),
    'access callback' => 'dquarks_results_access',
    'access arguments' => array(1),
    'file' => 'includes/dquarks.report.inc',
    'weight' => 4,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%dquarks_menu/dquarks-results/analysis'] = array(
    'title' => 'Analysis',
    'page callback' => 'dquarks_results_analysis',
    'page arguments' => array(1),
    'access callback' => 'dquarks_results_access',
    'access arguments' => array(1),
    'file' => 'includes/dquarks.report.inc',
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%dquarks_menu/dquarks-results/analysis/%dquarks_menu_component'] = array(
    'title' => 'Analysis',
    'load arguments' => array(1, 4),
    'page callback' => 'dquarks_results_analysis',
    'page arguments' => array(1, array(), 4),
    'access callback' => 'dquarks_results_access',
    'access arguments' => array(1),
    'file' => 'includes/dquarks.report.inc',
    'type' => MENU_CALLBACK,
  );
  $items['node/%dquarks_menu/dquarks-results/table'] = array(
    'title' => 'Table',
    'page callback' => 'dquarks_results_table',
    'page arguments' => array(1, '50'),
    'access callback' => 'dquarks_results_access',
    'access arguments' => array(1),
    'file' => 'includes/dquarks.report.inc',
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%dquarks_menu/dquarks-results/download'] = array(
    'title' => 'Download',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dquarks_results_download_form', 1),
    'access callback' => 'dquarks_results_access',
    'access arguments' => array(1),
    'file' => 'includes/dquarks.report.inc',
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%dquarks_menu/dquarks-results/clear'] = array(
    'title' => 'Clear',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dquarks_results_clear_form', 1),
    'access callback' => 'dquarks_results_clear_access',
    'access arguments' => array(1),
    'file' => 'includes/dquarks.report.inc',
    'weight' => 8,
    'type' => MENU_LOCAL_TASK,
  );

  // Node submissions.
  $items['node/%dquarks_menu/submissions'] = array(
    'title' => 'Submissions',
    'page callback' => 'dquarks_results_submissions',
    'page arguments' => array(1, TRUE, '50'),
    'access callback' => 'dquarks_submission_access',
    'access arguments' => array(1, NULL, 'list'),
    'file' => 'includes/dquarks.report.inc',
    'type' => MENU_CALLBACK,
  );
  $items['node/%dquarks_menu/submission/%dquarks_menu_submission'] = array(
    'title' => 'dquarks submission',
    'load arguments' => array(1),
    'page callback' => 'dquarks_submission_page',
    'page arguments' => array(1, 3, 'html'),
    'title callback' => 'dquarks_submission_title',
    'title arguments' => array(1, 3),
    'access callback' => 'dquarks_submission_access',
    'access arguments' => array(1, 3, 'view'),
    'file' => 'includes/dquarks.submissions.inc',
    'type' => MENU_CALLBACK,
  );
  $items['node/%dquarks_menu/submission/%dquarks_menu_submission/view'] = array(
    'title' => 'View',
    'load arguments' => array(1),
    'page callback' => 'dquarks_submission_page',
    'page arguments' => array(1, 3, 'html'),
    'access callback' => 'dquarks_submission_access',
    'access arguments' => array(1, 3, 'view'),
    'weight' => 0,
    'file' => 'includes/dquarks.submissions.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['node/%dquarks_menu/submission/%dquarks_menu_submission/delete'] = array(
    'title' => 'Delete',
    'load arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dquarks_submission_delete_form', 1, 3),
    'access arguments' => array(1, 3, 'delete'),
    'weight' => 2,
    'file' => 'includes/dquarks.submissions.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%dquarks_menu/dquarks/notify'] = array(
    'title' => 'Notify',
    'page callback' => 'drupal_get_form',
    'load arguments' => array(1),
    'page arguments' => array('dquarks_notify_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/dquarks.notify.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Menu loader callback. Load a dquarks node if the given nid is a dquarks.
 */
function dquarks_menu_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  if (!isset($node->type) || !in_array($node->type, dquarks_variable_get('dquarks_node_types'))) {
    return FALSE;
  }
  return $node;
}

/**
 * Menu loader callback. Load a dquarks submission if the given sid is a valid.
 */
function dquarks_menu_submission_load($sid, $nid) {
  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.submissions.inc';
  $submission = dquarks_get_submission($nid, $sid);
  return empty($submission) ? FALSE : $submission;
}

/**
 * Menu loader callback. Load a dquarks component if the given cid is a valid.
 */
function dquarks_menu_component_load($cid, $nid, $type) {
  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';
  if ($cid == 'new') {
    $components = dquarks_components();
    $component = in_array($type, array_keys($components)) ? array(
      'type' => $type,
      'nid' => $nid,
      'name' => $_GET['name'],
      'mandatory' => $_GET['mandatory'],
      'email' => $_GET['email'],
      'pid' => $_GET['pid'],
      'weight' => $_GET['weight'],) : FALSE;
  }
  else {
    $node = node_load($nid);
    $component = isset($node->dquarks['components'][$cid]) ? $node->dquarks['components'][$cid] : FALSE;
  }
  if ($component) {
    dquarks_component_defaults($component);
  }
  return $component;
}

/**
 * Load a rule.
 *
 * @param int $ruleid
 *   The id of rule.
 * @param int $nid
 *   The id of node.
 * @param string $type
 *   The type of component.
 * @param int $cid
 *   The component id.
 *
 * @return object
 *   The rule loaded.
 */
function dquarks_menu_rule_id_load($ruleid, $nid, $type, $cid) {
  if (!is_numeric($ruleid)) {
    return FALSE;
  }
  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';
  $node = node_load($nid);
  $component = dquarks_menu_component_load($cid, $nid, $type);
  $rule = dquarks_component_loadrule($node, $component, $ruleid);
  if (!isset($rule->testid)) {
    return FALSE;
  }
  return $rule;
}

/**
 * Ensure a user have permission.
 *
 * @global object $user
 *   The information of user.
 *
 * @param object $node
 *   The node object
 * @param object $submission
 *   The current submission
 * @param string $op
 *   Option: can be view, edit, delete or list.
 * @param object $account
 *   The account of user.
 *
 * @return boolean
 *   True if the the have a given privilege.
 */
function dquarks_submission_access($node, $submission, $op = 'view', $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  $access_all = user_access('access all dquarks results', $account);
  $access_own_submission = isset($submission) && user_access('access own dquarks submissions', $account) && (($account->uid && $account->uid == $submission->uid) || isset($_SESSION['dquarks_submission'][$submission->sid]));
  $access_node_submissions = user_access('access own dquarks results', $account) && $account->uid == $node->uid;

  $general_access = $access_all || $access_own_submission || $access_node_submissions;

  // Disable the page cache for anonymous users in this access callback,
  // otherwise the "Access denied" page gets cached.
  if (!$account->uid && user_access('access own dquarks submissions', $account)) {
    dquarks_disable_page_cache();
  }

  $module_access = count(array_filter(module_invoke_all('dquarks_submission_access', $node, $submission, $op, $account))) > 0;

  switch ($op) {
    case 'view':
      return $module_access || $general_access;
    case 'edit':
      return $module_access || ($general_access && (user_access('edit all dquarks submissions', $account) || (user_access('edit own dquarks submissions', $account) && $account->uid == $submission->uid)));
    case 'delete':
      return $module_access || ($general_access && (user_access('delete all dquarks submissions', $account) || (user_access('delete own dquarks submissions', $account) && $account->uid == $submission->uid)));
    case 'list':
      return $module_access || user_access('access all dquarks results', $account) || (user_access('access own dquarks submissions', $account) && ($account->uid || isset($_SESSION['dquarks_submission']))) || (user_access('access own dquarks results', $account) && $account->uid == $node->uid);
  }
}

/**
 * Menu access callback. Ensure a user both access and node 'view' permission.
 */
function dquarks_results_access($node, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  $module_access = count(array_filter(module_invoke_all('dquarks_results_access', $node, $account))) > 0;

  return node_access('view', $node, $account) && ($module_access || user_access('access all dquarks results', $account) || (user_access('access own dquarks results', $account) && $account->uid == $node->uid));
}

/**
 * Menu access callback. Ensure a user both access and node 'view' permission.
 *
 * @global object $user
 *   The information of user.
 *
 * @param object $node
 *   The node object.
 * @param object $account
 *   The account of user.
 *
 * @return boolean
 *   True if the current user may perform the given on the spicified node.
 */
function dquarks_results_clear_access($node, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  $module_access = count(array_filter(module_invoke_all('dquarks_results_clear_access', $node, $account))) > 0;

  return dquarks_results_access($node, $account) && ($module_access || user_access('delete all dquarks submissions', $account));
}

/**
 * Implements hook_admin_paths().
 */
function dquarks_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array(
      'node/*/dquarks' => TRUE,
      'node/*/dquarks/*' => TRUE,
      'node/*/dquarks-results' => TRUE,
      'node/*/dquarks-results/*' => TRUE,
      'node/*/submission/*' => TRUE,
    );
  }
}

/**
 * Implements hook_permission().
 */
function dquarks_permission() {
  return array(
    'access dquarks results' => array(
      'title' => t('Access dquarks results'),
      'description' => t('Grants access to the "Results" tab on all dquarks content. Generally an administrative permission.'),
    ),
    'access all dquarks results' => array(
      'title' => t('Access all dquarks results'),
      'description' => t('Grants access to the "Results" tab on all dquarks content. Generally an administrative permission.'),
    ),
    'access own dquarks results' => array(
      'title' => t('Access own dquarks results'),
      'description' => t('Grants access to the "Results" tab to the author of dquarks content they have created.'),
    ),
    'edit all dquarks submissions' => array(
      'title' => t('Edit all dquarks submissions'),
      'description' => t('Allows editing of any dquarks submission by any user. Generally an administrative permission.'),
    ),
    'delete all dquarks submissions' => array(
      'title' => t('Delete all dquarks submissions'),
      'description' => t('Allows deleting of any dquarks submission by any user. Generally an administrative permission.'),
    ),
    'access own dquarks submissions' => array(
      'title' => t('Access own dquarks submissions'),
    ),
    'edit own dquarks submissions' => array(
      'title' => t('Edit own dquarks submissions'),
    ),
    'delete own dquarks submissions' => array(
      'title' => t('Delete own dquarks submissions'),
    ),
    'access dquarks submissions' => array(
      'title' => t('Access dquarks submissions'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dquarks_theme() {
  $theme = array(
    // dquarks.module.
    'dquarks_view' => array(
      'render element' => 'dquarks',
    ),
    'dquarks_view_messages' => array(
      'variables' => array(
        'node' => NULL,
        'teaser' => NULL,
        'page' => NULL,
        'submission_count' => NULL,
        'user_limit_exceeded' => NULL,
        'allowed_roles' => NULL,
      ),
    ),
    'dquarks_form' => array(
      'render element' => 'form',
      'template' => 'templates/dquarks-form',
      'pattern' => 'dquarks_form_[0-9]+',
    ),
    'dquarks_confirmation' => array(
      'variables' => array('node' => NULL, 'sid' => NULL),
      'template' => 'templates/dquarks-confirmation',
      'pattern' => 'dquarks_confirmation_[0-9]+',
    ),
    'dquarks_element' => array(
      'render element' => 'element',
    ),
    'dquarks_element_text' => array(
      'render element' => 'element',
    ),
    'dquarks_inline_radio' => array(
      'render element' => 'element',
    ),
    'dquarks_mail_message' => array(
      'variables' => array(
        'form_values' => NULL,
        'node' => NULL,
        'sid' => NULL,
        'cid' => NULL,
        'score' => NULL,
      ),
      'template' => 'templates/dquarks-mail',
      'pattern' => 'dquarks_mail(_[0-9]+)?',
    ),
    'dquarks_mail_headers' => array(
      'variables' => array(
        'form_values' => NULL,
        'node' => NULL,
        'sid' => NULL,
        'cid' => NULL,
      ),
      'pattern' => 'dquarks_mail_headers_[0-9]+',
    ),
    'dquarks_mail_fields' => array(
      'variables' => array(
        'cid' => NULL,
        'value' => NULL,
        'node' => NULL,
        'score' => NULL,
        'indent' => NULL,
      ),
    ),
    'dquarks_token_help' => array(
      'render element' => 'form',
    ),
    // dquarks.admin.inc.
    'dquarks_admin_settings' => array(
      'render element' => 'form',
      'file' => 'includes/dquarks.admin.inc',
    ),
    'dquarks_admin_content' => array(
      'variables' => array('nodes' => NULL),
      'file' => 'includes/dquarks.admin.inc',
    ),
    'dquarks_edit_multichoice_items' => array(
      'render element' => 'form',
      'file' => 'components/multichoice.inc',
    ),
    // dquarks.components.inc.
    'dquarks_components_page' => array(
      'variables' => array('node' => NULL, 'form' => NULL),
      'file' => 'includes/dquarks.components.inc',
    ),
    'dquarks_components_form' => array(
      'render element' => 'form',
      'file' => 'includes/dquarks.components.inc',
    ),
    'dquarks_component_select' => array(
      'render element' => 'element',
      'file' => 'includes/dquarks.components.inc',
    ),
    // dquarks.pages.inc.
    'dquarks_advanced_redirection_form' => array(
      'render element' => 'form',
      'file' => 'includes/dquarks.pages.inc',
    ),
    'dquarks_advanced_submit_limit_form' => array(
      'render element' => 'form',
    ),
    'dquarks_advanced_total_submit_limit_form' => array(
      'render element' => 'form',
      'file' => 'includes/dquarks.pages.inc',
    ),
    // dquarks.report.inc.
    'dquarks_results_per_page' => array(
      'variables' => array('total_count' => NULL, 'pager_count' => NULL),
      'file' => 'includes/dquarks.report.inc',
    ),
    'dquarks_results_submissions_header' => array(
      'variables' => array('node' => NULL),
      'file' => 'includes/dquarks.report.inc',
    ),
    'dquarks_results_submissions' => array(
      'render element' => 'element',
      'template' => 'templates/dquarks-results-submissions',
      'file' => 'includes/dquarks.report.inc',
    ),
    'dquarks_results_table_header' => array(
      'variables' => array('node' => NULL),
      'file' => 'includes/dquarks.report.inc',
    ),
    'dquarks_results_table' => array(
      'variables' => array(
        'node' => NULL,
        'components' => NULL,
        'submissions' => NULL,
        'node' => NULL,
        'total_count' => NULL,
        'pager_count' => NULL,
      ),
      'file' => 'includes/dquarks.report.inc',
    ),
    'dquarks_results_download_range' => array(
      'render element' => 'element',
      'file' => 'includes/dquarks.report.inc',
    ),
    'dquarks_results_analysis' => array(
      'variables' => array(
        'node' => NULL,
        'data' => NULL,
        'sids' => array(),
        'component' => NULL,
      ),
      'file' => 'includes/dquarks.report.inc',
    ),
    // dquarks.submissions.inc
    'dquarks_submission' => array(
      'render element' => 'renderable',
      'template' => 'templates/dquarks-submission',
      'pattern' => 'dquarks_submission_[0-9]+',
      'file' => 'includes/dquarks.submissions.inc',
    ),
    'dquarks_submission_page' => array(
      'variables' => array(
        'node' => NULL,
        'submission' => NULL,
        'submission_content' => NULL,
        'submission_navigation' => NULL,
        'submission_information' => NULL,
        'submission_actions' => NULL,
        'mode' => NULL,
      ),
      'template' => 'templates/dquarks-submission-page',
      'file' => 'includes/dquarks.submissions.inc',
    ),
    'dquarks_submission_information' => array(
      'variables' => array(
        'node' => NULL,
        'submission' => NULL,
        'mode' => 'display',
      ),
      'template' => 'templates/dquarks-submission-information',
      'file' => 'includes/dquarks.submissions.inc',
    ),
    'dquarks_submission_navigation' => array(
      'variables' => array('node' => NULL, 'submission' => NULL, 'mode' => NULL),
      'template' => 'templates/dquarks-submission-navigation',
      'file' => 'includes/dquarks.submissions.inc',
    ),
    'dquarks_submission_resend' => array(
      'render element' => 'form',
      'file' => 'includes/dquarks.submissions.inc',
    ),
    'dquarks_mail_settings_form' => array(
      'render element' => 'form',
    ),
    'dquarks_mail_components_form' => array(
      'render element' => 'form',
    ),
  );

  // Theme functions in all components.
  $components = dquarks_components(TRUE);
  foreach ($components as $type => $component) {
    if ($theme_additions = dquarks_component_invoke($type, 'theme')) {
      $theme = array_merge($theme, $theme_additions);
    }
  }
  return $theme;
}

/**
 * Implements hook_library().
 */
function dquarks_library() {
  $module_path = drupal_get_path('module', 'dquarks');

  // Dquarks administration.
  $libraries['admin'] = array(
    'title' => 'dquarks: Administration',
    'website' => 'http://drupal.org/project/dquarks',
    'version' => '1.0',
    'js' => array(
      $module_path . '/js/dquarks-admin.js' => array('group' => JS_DEFAULT),
    ),
    'css' => array(
      $module_path . '/css/dquarks-admin.css' => array(
        'group' => CSS_DEFAULT,
        'weight' => 1,
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_element_info().
 */
function dquarks_element_info() {
  // A few of our components need to be defined here because Drupal does not
  // provide these components natively. Because this hook fires on every page
  // load (even on non-dquarks pages), we don't put this in the component .inc
  // files because of the unnecessary loading that it would require.
  $elements['dquarks_time'] = array('#input' => 'TRUE');
  $elements['dquarks_grid'] = array('#input' => 'TRUE');
  return $elements;
}

/**
 * Implements hook_dquarks_component_info().
 */
function dquarks_dquarks_component_info() {
  return array(
    'direction' => array(
      'label' => t('Direction'),
      'description' => t('Break up a multi-page quiz with test value for jump.'),
      'file' => 'components/direction.inc',
      'features' => array(
        'email_name' => TRUE,
        'spam_analysis' => TRUE,
      ),
    ),
    'label' => array(
      'label' => t('Label'),
      'description' => t('Basic label type.'),
      'file' => 'components/label.inc',
      'features' => array(
        'email_name' => TRUE,
        'spam_analysis' => TRUE,
      ),
    ),
    'multichoice' => array(
      'label' => t('Multichoice'),
      'description' => t('Allows creation of checkboxes, radio buttons, or select menus.'),
      'file' => 'components/multichoice.inc',
      'features' => array(
        'email_name' => TRUE,
        'spam_analysis' => TRUE,
      ),
    ),
    'email' => array(
      'label' => t('E-mail'),
      'description' => t("A textfield that automatically fills in a logged-in user's e-mail."),
      'file' => 'components/email.inc',
      'features' => array(
        'email_address' => TRUE,
        'spam_analysis' => TRUE,
      ),
    ),
    'textfield' => array(
      'label' => t('Textfield'),
      'description' => t('Basic textfield type.'),
      'file' => 'components/textfield.inc',
      'features' => array(
        'email_name' => TRUE,
        'spam_analysis' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_forms().
 *
 * All dquarks_client_form forms share the same form handler
 */
function dquarks_forms($form_id) {
  $forms = array();
  if (strpos($form_id, 'dquarks_client_form_') === 0) {
    $forms[$form_id]['callback'] = 'dquarks_client_form';
  }
  return $forms;
}

/**
 * Implements hook_dquarks_dquarks_submission_actions().
 */
function dquarks_dquarks_submission_actions($node, $submission) {
  $actions = array();
  $destination = drupal_get_destination();

  if (module_exists('print_pdf') && user_access('access PDF version')) {
    $actions['printpdf'] = array(
      'title' => t('Download PDF'),
      'href' => 'printpdf/' . $node->nid . '/submission/' . $submission->sid,
      'query' => $destination,
    );
  }

  if (module_exists('print') && user_access('access print')) {
    $actions['print'] = array(
      'title' => t('Print'),
      'href' => 'print/' . $node->nid . '/submission/' . $submission->sid,
    );
  }

  return $actions;
}

/**
 * Implements hook_file_download().
 *
 * Only allow users with view dquarks submissions to download files.
 */
function dquarks_file_download($uri) {
  global $user;

  // Determine whether this file was a dquarks upload. If it was, retrieve file
  // information, plus the user id of the uploader.
  $file = db_query("SELECT ws.uid, f.* FROM {file_managed} f INNER JOIN {dquarks_submitted_data} wsd ON f.fid = wsd.data INNER JOIN {dquarks_submissions} ws ON ws.sid = wsd.sid INNER JOIN {dquarks_component} wc ON wc.cid = wsd.cid  WHERE f.uri = :uri AND wc.type = :file", array(
    'uri' => $uri,
    ':file' => 'file'))
          ->fetchObject();
  if ($file) {
    // Allow file access for admins, or for users who are viewing their own
    // submissions.
    if (user_access('access all dquarks results') || ($user->uid == $file->uid && user_access('access own dquarks results'))) {
      // TODO: This is a copy/paste from file_file_download. Switch to using
      // file_get_content_headers() instead if http://drupal.org/node/943112
      // gets committed.
      $name = mime_header_encode($file->filename);
      $type = mime_header_encode($file->filemime);
      // Serve images, text, and flash content for display rather than download.
      $inline_types = variable_get('file_inline_types', array(
        '^text/', '^image/', 'flash$')
      );
      $disposition = 'attachment';
      foreach ($inline_types as $inline_type) {
        // Exclamation marks are used as delimiters to avoid escaping slashes.
        if (preg_match('!' . $inline_type . '!', $file->filemime)) {
          $disposition = 'inline';
        }
      }
      return array(
        'Content-Type' => $type . '; name="' . $name . '"',
        'Content-Length' => $file->filesize,
        'Content-Disposition' => $disposition . '; filename="' . $name . '"',
        'Cache-Control' => 'private',
      );
    }
    // This is a dquarks-controlled file, but the user doesn't have access.
    return -1;
  }
  // This is not a dquarks-controlled file.
  return NULL;
}

/**
 * Implements hook_node_type().
 *
 * Not a real hook in Drupal 7. Re-used for consistency with the D6 version.
 */
function dquarks_node_type($op, $info) {
  $dquarks_types = dquarks_variable_get('dquarks_node_types');
  $affected_type = isset($info->old_type) ? $info->old_type : $info->type;
  $key = array_search($affected_type, $dquarks_types);
  if ($key !== FALSE) {
    if ($op == 'update') {
      $dquarks_types[$key] = $info->type;
    }
    if ($op == 'delete') {
      unset($dquarks_types[$key]);
    }
    variable_set('dquarks_node_types', $dquarks_types);
  }
}

/**
 * Implements hook_node_type_update().
 */
function dquarks_node_type_update($info) {
  dquarks_node_type('update', $info);
}

/**
 * Implements hook_node_type_delete().
 */
function dquarks_node_type_delete($info) {
  dquarks_node_type('delete', $info);
}

/**
 * Implements hook_node_submit().
 */
function dquarks_node_submit(&$node, $form, &$form_state) {
  if (!in_array($node->type, dquarks_variable_get('dquarks_node_types'))) {
    return;
  }
  // Add the conditional e-mail recipients to components.
  if (empty($node->is_new)) {
    $original_node = node_load($node->nid);
    if (isset($original_node->dquarks['components'])) {
      foreach ($original_node->dquarks['components'] as $cid => $component) {
        if (!isset($node->dquarks['components'][$cid])) {
          $node->dquarks['components'][$cid] = $component;
        }
        if (isset($node->dquarks['email_components'][$cid])) {
          $node->dquarks['components'][$cid]['extra']['email'] = $node->dquarks['email_components'][$cid];
        }
      }
    }
  }
  unset($node->dquarks['email_components']);
  // Merge the e-mail name, address, and subject options into single values.
  foreach (array('from_name', 'from_address', 'subject') as $field) {
    $option = $node->dquarks['email_' . $field . '_option'];
    if ($option == 'default') {
      $node->dquarks['email_' . $field] = 'default';
    }
    else {
      $node->dquarks['email_' . $field] = $node->dquarks['email_' . $field . '_' . $option];
    }
    unset($node->dquarks['email_' . $field . '_option']);
    unset($node->dquarks['email_' . $field . '_component']);
    unset($node->dquarks['email_' . $field . '_custom']);
  }
  // Set the submit limit to -1 if set to unlimited.
  if ($form_state['values']['dquarks']['enforce_limit'] == 'no') {
    $node->dquarks['submit_limit'] = -1;
    $node->dquarks['submit_interval'] = -1;
  }
  else {
    $node->dquarks['submit_limit'] = $form_state['input']['dquarks']['submit_limit'];
    $node->dquarks['submit_interval'] = $form_state['input']['dquarks']['submit_interval'];
  }
  unset($node->dquarks['enforce_limit']);
  // Save roles.
  $node->dquarks['roles'] = array_keys(array_filter($form_state['input']['dquarks']['roles']));


  $node->dquarks['teaser'] = $form_state['input']['dquarks']['teaser'];
  $node->dquarks['block'] = isset($form_state['input']['dquarks']['block']) ? $form_state['input']['dquarks']['block'] : 0;
  $node->dquarks['submit_text'] = $form_state['input']['dquarks']['submit_text'];
  $node->dquarks['submit_interval'] = $form_state['input']['dquarks']['submit_interval'];
  $node->dquarks['show_score'] = $form_state['input']['dquarks']['show_score'];
  $node->dquarks['result_pos'] = $form_state['input']['dquarks']['result_pos'];
  $node->dquarks['mail_add_result'] = $form_state['input']['dquarks']['mail_add_result'];
  $node->dquarks['confirmation'] = $form_state['input']['dquarks']['confirmation'];
  $node->dquarks['email'] = $form_state['input']['dquarks']['email'];
}

/**
 * Implements hook_node_validate().
 *
 * @param object $node
 *   The node id.
 * @param array $form
 *   An array of form item.
 * @param array $form_state
 *   An array of form values item.
 */
function dquarks_node_validate($node, $form, &$form_state) {
  // Ensure the entered e-mail addresses are valid.
  if (!in_array($node->type, dquarks_variable_get('dquarks_node_types'))) {
    return;
  }
  if (!empty($form_state['values']['dquarks']['emails'])) {
    $emails = explode(',', $form_state['values']['dquarks']['emails']);
    foreach ($emails as $email) {
      if (!valid_email_address(trim($email))) {
        form_set_error('dquarks][email', t('The entered email address %address is not a valid address.', array(
                  '%address' => $email,
                )));
        break;
      }
    }
  }
  if ($form_state['values']['dquarks']['email_from_address_option'] == 'custom') {
    if (!valid_email_address($form_state['values']['dquarks']['email_from_address_custom'])) {
      form_set_error('dquarks][email_from_address_custom', t('The entered email address %address is not a valid address.', array('%address' => $form_state['values']['dquarks']['email_from_address_custom'])));
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function dquarks_node_insert($node) {
  if (!in_array($node->type, dquarks_variable_get('dquarks_node_types'))) {
    return;
  }

  // If added directly through node_save(), set defaults for the node.
  if (!isset($node->dquarks)) {
    $node->dquarks = dquarks_node_defaults();
  }

  // Do not make an entry if this node does not have any dquarks settings.
  if ($node->dquarks == dquarks_node_defaults() && !in_array($node->type, dquarks_variable_get('dquarks_node_types_primary'))) {
    return;
  }

  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';

  // Insert the dquarks.
  $node->dquarks['nid'] = $node->nid;

  $node->dquarks['record_exists'] = (bool) drupal_write_record('dquarks', $node->dquarks);

  // Insert the components into the database. Used with clone.module.
  if (isset($node->dquarks['components']) && !empty($node->dquarks['components'])) {
    foreach ($node->dquarks['components'] as $cid => $component) {
      // Required for clone.module.
      $component['nid'] = $node->nid;
      dquarks_component_insert($component);
    }
  }

  // Set the per-role submission access control.
  foreach (array_filter($node->dquarks['roles']) as $rid) {
    db_insert('dquarks_roles')->fields(array(
              'nid' => $node->nid,
              'rid' => $rid))
            ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function dquarks_node_update($node) {

  if (!in_array($node->type, dquarks_variable_get('dquarks_node_types'))) {
    return;
  }

  // Check if this node needs a dquarks record at all. If it matches the
  // defaults, any existing record will be deleted.
  dquarks_check_record($node);

  // If a dquarks row doesn't even exist, we can assume it needs to be inserted.
  // If the the dquarks matches the defaults, no row will be inserted.
  if (!$node->dquarks['record_exists']) {
    dquarks_node_insert($node);
    return;
  }

  // Update the dquarks entry.
  $node->dquarks['nid'] = $node->nid;
  drupal_write_record('dquarks', $node->dquarks, array('nid'));

  // Compare the dquarks components and don't do anything if it's not needed.
  // The internal cache needs to be reset here so that the cached node entity
  // does not get loaded and invalidate the comparisons.
  $original = node_load($node->nid, NULL, TRUE);

  if ($original->dquarks['components'] != $node->dquarks['components']) {
    require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';

    $original_cids = array_keys($original->dquarks['components']);
    $current_cids = array_keys($node->dquarks['components']);

    $all_cids = array_unique(array_merge($original_cids, $current_cids));
    $deleted_cids = array_diff($original_cids, $current_cids);
    $inserted_cids = array_diff($current_cids, $original_cids);

    foreach ($all_cids as $cid) {
      if (in_array($cid, $inserted_cids)) {
        dquarks_component_insert($node->dquarks['components'][$cid]);
      }
      elseif (in_array($cid, $deleted_cids)) {
        dquarks_component_delete($node, $original->dquarks['components'][$cid]);
      }
      elseif ($node->dquarks['components'][$cid] != $original->dquarks['components'][$cid]) {
        $node->dquarks['components'][$cid]['nid'] = $node->nid;
        dquarks_component_update($node->dquarks['components'][$cid]);
      }
    }
  }

  // Just delete and re-insert roles if they've changed.
  if ($original->dquarks['roles'] != $node->dquarks['roles']) {
    db_delete('dquarks_roles')->condition('nid', $node->nid)->execute();
    foreach (array_filter($node->dquarks['roles']) as $rid) {
      db_insert('dquarks_roles')->fields(array('nid' => $node->nid, 'rid' => $rid))->execute();
    }
  }
}

/**
 * Implements hook_delete().
 */
function dquarks_node_delete($node) {
  if (!in_array($node->type, dquarks_variable_get('dquarks_node_types'))) {
    return;
  }

  // Allow components clean up extra data, such as uploaded files.
  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';
  foreach ($node->dquarks['components'] as $cid => $component) {
    dquarks_component_delete($node, $component);
  }

  // Remove any trace of dquarks data from the database.
  db_delete('dquarks')->condition('nid', $node->nid)->execute();
  db_delete('dquarks_component')->condition('nid', $node->nid)->execute();
  db_delete('dquarks_roles')->condition('nid', $node->nid)->execute();
  db_delete('dquarks_submissions')->condition('nid', $node->nid)->execute();
  db_delete('dquarks_submitted_data')->condition('nid', $node->nid)->execute();
}

/**
 * Default settings for a newly created dquarks node.
 */
function dquarks_node_defaults() {

  $defaults = array(
    'confirmation' => '',
    'pager' => 1,
    'result_pos' => 1,
    'show_score' => 0,
    'mail_add_result' => 0,
    'teaser' => 0,
    'block' => 0,
    'submit_text' => '',
    'submit_limit' => -1,
    'submit_interval' => -1,
    'email' => '',
    'email_from_name' => 'default',
    'email_from_address' => 'default',
    'email_subject' => 'default',
    'quiz_notify_message_subject' => '',
    'quiz_notify_message_content' => '',
    'quiz_notify_mails_list' => '',
    'roles' => array('1', '2'),
  );

  drupal_alter('dquarks_node_defaults', $defaults);
  return $defaults;
}

/**
 * Implements hook_node_prepare().
 */
function dquarks_node_prepare($node) {
  $dquarks_types = dquarks_variable_get('dquarks_node_types');
  if (in_array($node->type, $dquarks_types) && !isset($node->dquarks)) {
    $node->dquarks = dquarks_node_defaults();
  }
}

/**
 * Implements hook_node_prepare_translation().
 */
function dquarks_node_prepare_translation(&$node) {
  // Copy all dquarks settings over to translated versions of this node.
  if (isset($node->translation_source)) {
    $source_node = node_load($node->translation_source->nid);
    $node->dquarks = $source_node->dquarks;
  }
}

/**
 * Implements hook_node_load().
 */
function dquarks_node_load($nodes, $types) {

  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';

  // Select all dquarkss that match these node IDs.
  $result = db_select('dquarks')
          ->fields('dquarks')
          ->condition('nid', array_keys($nodes), 'IN')
          ->execute()
          ->fetchAllAssoc('nid', PDO::FETCH_ASSOC);

  foreach ($result as $nid => $dquarks) {
    // Load the basic information for each node.
    $nodes[$nid]->dquarks = $dquarks;
    $nodes[$nid]->dquarks['record_exists'] = TRUE;
  }

  // Load the components, emails, and defaults for all dquarks-enabled nodes.
  // TODO: Increase efficiency here by pulling in all information all at once
  // instead of individual queries.
  foreach ($nodes as $nid => $node) {


    // If a dquarks record doesn't exist, just return the defaults.
    if (!isset($nodes[$nid]->dquarks)) {
      $nodes[$nid]->dquarks = dquarks_node_defaults();
      continue;
    }

    $nodes[$nid]->dquarks['components'] = array();
    $nodes[$nid]->dquarks['additional_emails'] = array();

    $nodes[$nid]->dquarks['roles'] = db_select('dquarks_roles')
            ->fields('dquarks_roles', array('rid'))
            ->condition('nid', $nid)
            ->execute()
            ->fetchCol();

    // Load components for each node.
    $nodes[$nid]->dquarks['components'] = db_select('dquarks_component')
            ->fields('dquarks_component')
            ->condition('nid', $nid)
            ->orderBy('weight')
            ->orderBy('name')
            ->execute()
            ->fetchAllAssoc('cid', PDO::FETCH_ASSOC);

    // Do a little cleanup on each component.
    foreach ($nodes[$nid]->dquarks['components'] as $cid => $component) {
      $nodes[$nid]->dquarks['components'][$cid]['nid'] = $nid;
      $nodes[$nid]->dquarks['components'][$cid]['extra'] = unserialize($component['extra']);
      dquarks_component_defaults($nodes[$nid]->dquarks['components'][$cid]);
    }

    // Organize the components into a fieldset-based order.
    if (!empty($nodes[$nid]->dquarks['components'])) {
      $component_tree = array();
      _dquarks_components_tree_build($nodes[$nid]->dquarks['components'], $component_tree, 0, $page_count);
      $nodes[$nid]->dquarks['components'] = _dquarks_components_tree_flatten($component_tree['children']);
    }
  }
}

/**
 * Enables modules to add links.
 */
function dquarks_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  if (isset($node->type) && $node->type === 'dquarks') {
    if ($teaser && !$node->dquarks['teaser']) {
      $links['dquarks_goto'] = array(
        'title' => t('Go to form'),
        'href' => 'node/' . $node->nid,
        'attributes' => array(
          'title' => t('View this form.'),
          'class' => array('read-more'),
        ),
      );
    }
  }
  return $links;
}

/**
 * Implements hook_form_alter().
 */
function dquarks_form_dquarks_node_form_alter(&$form, $form_state, $form_id) {
  $node = $form['#node'];
  // Preserve all dquarks options currently set on the node.
  $form['dquarks'] = array(
    '#type' => 'value',
    '#value' => $node->dquarks,
  );


  // If a new node, redirect the user to the components form after save.
  if (empty($node->nid) && in_array($node->type, dquarks_variable_get('dquarks_node_types_primary'))) {
    $form['actions']['submit']['#submit'][] = 'dquarks_form_submit';
  }


  $nodes = array();
  if (!isset($node->nid) && !isset($node->dquarks)) {
    $node->nid = 0;
    $nodes[$node->nid] = $node;
    $additions = dquarks_node_load($nodes);
    $node->dquarks = $additions->dquarks;
    $node->nid = NULL;
  }

  /* Save Components in a value (helps with clone.module) */
  $form['components'] = array(
    '#type' => 'value',
    '#value' => isset($node->dquarks['components']) ? $node->dquarks['components'] : '',
    '#parents' => array('dquarks'),
  );

  /* Start Edit Form */
  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Quiz Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#parents' => array('dquarks'),
  );

  $form['settings']['confirmation'] = array(
    '#type' => 'textarea',
    '#title' => t('Confirmation message or redirect URL'),
    '#description' => t('Message to be shown upon successful submission or a path to a redirect page. Preface message with <em>message:</em> for a simple message that does not require a page refresh. Redirect pages must start with <em>http://</em> for external sites or <em>internal:</em> for an internal path. i.e. <em>http://www.example.com</em> or <em>internal:node/10</em>'),
    '#default_value' => $node->dquarks['confirmation'],
    '#parents' => array('dquarks', 'confirmation'),
    '#cols' => 40,
    '#rows' => 10,
  );
  $pager = array(1 => "One question", 2 => "Two questions");

  $form['settings']['result_pos'] = array(
    '#type' => 'radios',
    '#title' => t('Show result'),
    '#default_value' => $node->dquarks['result_pos'],
    '#options' => array(
      1 => t("After every page"),
      2 => t("Only on the end"),
      0 => t("Don't show result"),
    ),
    '#parents' => array('dquarks', 'result_pos'),
  );
  $form['settings']['mail_add_result'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include the result with e-mails'),
    '#default_value' => $node->dquarks['mail_add_result'],
    '#parents' => array('dquarks', 'mail_add_result'),
  );
  $form['settings']['show_score'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show score'),
    '#default_value' => $node->dquarks['show_score'],
    '#parents' => array('dquarks', 'show_score'),
  );

  /* End Edit Form */

  /* Start per-role submission control */
  $form['role_control'] = array(
    '#type' => 'fieldset',
    '#title' => t('Quiz access control'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -3,
    '#parents' => array('dquarks'),
    '#description' => t('These permissions affect which roles can submit this Quiz. It does not prevent access to the Quiz page. If needing to prevent access to the Quiz page entirely, use a content access module such as <a href="http://drupal.org/project/taxonomy_access">Taxonomy Access</a> or <a href="http://drupal.org/project/node_privacy_byrole">Node Privacy by Role</a>.'),
    '#access' => variable_get('dquarks_submission_access_control', 1),
  );
  $user_roles = user_roles();
  $form['role_control']['roles'] = array(
    '#default_value' => $node->dquarks['roles'],
    '#options' => $user_roles,
    '#type' => 'checkboxes',
    '#title' => t('Roles that can submit this Quiz'),
    '#description' => t('Uncheck all roles to prevent new submissions. The %authenticated role applies to any user signed into the site, regardless of other assigned roles.', array('%authenticated' => $user_roles[2])), '#parents' => array('dquarks'),
    '#parents' => array('dquarks', 'roles'),
  );
  /* End per-role submission control */

  /* Start E-mail Settings Form */
  $form['mail_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Quiz mail settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -2,
    '#parents' => array('dquarks'),
    '#theme' => 'dquarks_mail_settings_form',
  );

  $form['mail_settings']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail to address'),
    '#maxlength' => 255,
    '#default_value' => $node->dquarks['email'],
    '#description' => t('Form submissions will be e-mailed to this address. Leave blank for none. Multiple e-mail addresses may be separated by commas.'),
    '#parents' => array('dquarks', 'email'),
  );

  $form['mail_settings']['email_components'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#theme' => 'dquarks_mail_components_form',
    '#title' => t('Conditional e-mail recipients'),
    '#description' => t('The settings below allow you to send e-mails to multiple recipients based off the value of a component.'),
    '#node' => $node,
  );

  $options = array();
  if (isset($node->dquarks['components'])) {
    $options = _dquarks_component_options($node->dquarks['components'], 'email');
  }
  $default_value = array();
  if (isset($node->dquarks['components']) && is_array($node->dquarks['components'])) {
    foreach ($node->dquarks['components'] as $cid => $component) {
      if (isset($component['extra']['email']) && $component['extra']['email']) {
        $default_value[] = $cid;
      }
    }
  }
  $form['mail_settings']['email_components']['email_components'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $default_value,
    '#parents' => array('dquarks', 'email_components'),
  );

  foreach (array('from_name', 'from_address', 'subject') as $field) {
    switch ($field) {
      case 'from_name':
        $default_value = dquarks_variable_get('dquarks_default_from_name');
        $title = t("E-mail from name");
        $description = t("After adding components to this form any textfield form element may be selected as the sender\'s name for e-mails.");
        break;

      case 'from_address':
        $default_value = dquarks_variable_get('dquarks_default_from_address');
        $title = t("E-mail from address");
        $description = t("After adding components to this form any email form element may be selected as the sender\'s e-mail address.");
        break;

      case 'subject':
        $default_value = dquarks_variable_get('dquarks_default_subject');
        $title = t("E-mail subject");
        $description = t('After adding components to this quiz any textfield form element may be selected as the subject for e-mails.');
        break;
    }

    $form['mail_settings']['email_' . $field . '_option'] = array(
      '#title' => check_plain($title),
      '#type' => 'radios',
      '#default_value' => is_numeric($node->dquarks['email_' . $field]) ? 'component' : ((empty($default_value) || ($node->dquarks['email_' . $field] != 'default' && isset($node->dquarks['email_' . $field]))) ? 'custom' : 'default'),
      '#description' => $description,
      '#parents' => array('dquarks', 'email_' . $field . '_option'),
    );
    if (!empty($default_value)) {
      $form['mail_settings']['email_' . $field . '_option']['#options']['default'] = $default_value;
    }
    $form['mail_settings']['email_' . $field . '_option']['#options']['custom'] = 'custom';
    $form['mail_settings']['email_' . $field . '_option']['#options']['component'] = 'component';

    $form['mail_settings']['email_' . $field . '_custom'] = array(
      '#type' => 'textfield',
      '#size' => 40,
      '#default_value' => (!is_numeric($node->dquarks['email_' . $field]) && $node->dquarks['email_' . $field] != 'default') ? $node->dquarks['email_' . $field] : NULL,
      '#parents' => array('dquarks', 'email_' . $field . '_custom'),
    );
    if (isset($node->dquarks['components'])) {
      $options = _dquarks_component_options($node->dquarks['components'], $field == 'from_address' ? 'email' : 'string');
    }
    $form['mail_settings']['email_' . $field . '_component'] = array(
      '#type' => 'select',
      '#default_value' => is_numeric($node->dquarks['email_' . $field]) ? $node->dquarks['email_' . $field] : NULL,
      '#options' => empty($options) ? array('' => t('No available components')) : $options,
      '#disabled' => empty($options) ? TRUE : FALSE,
      '#parents' => array('dquarks', 'email_' . $field . '_component'),
      '#weight' => 6,
    );
  }
  /* End mail settings form */

  /* Start advanced settings form */
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Quiz advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -1,
    '#parents' => array('dquarks'),
  );
  $form['advanced']['block'] = array(
    '#type' => 'checkbox',
    '#title' => t('Available as block'),
    '#default_value' => $node->dquarks['block'],
    '#description' => t('If enabled this webform will be available as a block.'),
    '#parents' => array('dquarks', 'block'),
    '#access' => user_access('administer blocks') || user_access('administer site configuration') || user_access('use panels dashboard'),
  );
  $form['advanced']['teaser'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show complete quiz in teaser'),
    '#default_value' => $node->dquarks['teaser'],
    '#description' => t('Display the entire quiz in the teaser display of this node.'),
    '#parents' => array('dquarks', 'teaser'),
  );
  $form['advanced']['submit_limit'] = array(
    '#type' => 'fieldset',
    '#title' => t('Limit the number of submissions a user may send within a specified time period'),
    '#theme' => 'dquarks_advanced_submit_limit_form',
  );
  $form['advanced']['submit_limit']['enforce_limit'] = array(
    '#type' => 'radios',
    '#options' => array(
      'no' => t('Unlimited'),
      'yes' => t('Limit to !count submission(s) !timespan'),
    ),
    '#default_value' => isset($form_state['input']['dquarks']['enforce_limit']) ? $form_state['input']['dquarks']['enforce_limit'] : ($node->dquarks['submit_limit'] == -1 ? 'no' : 'yes'),
    '#parents' => array('dquarks', 'enforce_limit'),
  );
  $form['advanced']['submit_limit']['submit_limit'] = array(
    '#type' => 'textfield',
    '#maxlength' => 2,
    '#size' => 2,
    '#default_value' => $node->dquarks['submit_limit'] != -1 ? $node->dquarks['submit_limit'] : '',
    '#parents' => array('dquarks', 'submit_limit'),
  );
  $form['advanced']['submit_limit']['submit_interval'] = array(
    '#type' => 'select',
    '#options' => array(
      '-1' => t('ever'),
      '3600' => t('every hour'),
      '86400' => t('every day'),
      '604800' => t('every week'),
    ),
    '#default_value' => $node->dquarks['submit_interval'],
    '#parents' => array('dquarks', 'submit_interval'),
  );
  $form['advanced']['submit_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Submit button text'),
    '#default_value' => $node->dquarks['submit_text'],
    '#description' => t('By default the submit button on this quiz will have the label <em>Submit</em>. Enter a new title here to override the default.'),
    '#parents' => array('dquarks', 'submit_text'),
  );
}

/**
 * Submit handler for the dquarks node form.
 *
 * Redirect the user to the components form on new node inserts. Note that this
 * fires after the hook_submit() function above.
 */
function dquarks_form_submit($form, &$form_state) {
  drupal_set_message(t('The new dquarks %title has been created. Add new fields to your dquarks with the form below.', array('%title' => $form_state['values']['title'])));
  $form_state['redirect'] = 'node/' . $form_state['nid'] . '/dquarks/components';
}

/**
 * Theme the dquarks mail settings section of the node form.
 *
 * @param array $form
 *   The current form of a submission
 *
 * @return Array
 *   Themed quiz mail setting
 */
function theme_dquarks_mail_settings_form($form) {
  $form = $form['form'];
  // Loop through fields, rendering them into radio button options.
  foreach (array('from_name', 'from_address', 'subject') as $field) {
    foreach (array('custom' => t('Custom'), 'component' => t('Component')) as $option => $title) {
      $replacements = array(
        '!option' => drupal_render($form['email_' . $field . '_' . $option]),
        '!title' => $title,
      );
      $form['email_' . $field . '_' . $option]['#attributes']['class'] = array('dquarks-set-active');
      $form['email_' . $field . '_option'][$option]['#title'] = NULL;
      $form['email_' . $field . '_option'][$option]['#inline_element'] = t('!title : !option', $replacements);
      $form['email_' . $field . '_option'][$option]['#theme_wrappers'] = array('dquarks_inline_radio');
    }
    // For spacing consitency, every option is wrapped in container-inline.
    foreach (element_children($form['email_' . $field . '_option']) as $option) {
      $form['email_' . $field . '_option'][$option]['#prefix'] = '<div class="container-inline">';
      $form['email_' . $field . '_option'][$option]['#suffix'] = '</div>';
    }
    // Wrap the default option in a placeholder tag..
    if (isset($form['email_' . $field . '_option']['#options']['default'])) {
      $replacements = array(
        '!default' => 'Default',
        '!default_option' => $form['email_' . $field . '_option']['default']['#title'],
      );
      $form['email_' . $field . '_option']['default']['#title'] = t('!default : !default_option', $replacements);
      $form['email_' . $field . '_option']['default']['#inline_element'] = t('!default : !default_option', $replacements);
      $form['enforce_limit']['yes']['#theme_wrappers'] = array('dquarks_inline_radio');
    }
  }

  return drupal_render_children($form);
}

/**
 * Theme the component options for sending e-mails.
 *
 * @param array $form
 *   The current form of a submission.
 *
 * @return string
 *   Textual output to be included in the email.
 */
function theme_dquarks_mail_components_form($form) {
  $form = $form['form'];
  drupal_add_css(drupal_get_path('module', 'dquarks') . '/js/dquarks.css');
  $node = $form['#node'];
  $header = array(
    array('data' => t('To'), 'class' => array('dquarks-checkbox')),
    t('Name'),
    t('Type'),
  );
  $rows = array();
  foreach (element_children($form['email_components']) as $cid) {
    $title = $form['email_components'][$cid]['#title'];
    unset($form['email_components'][$cid]['#title']);
    $rows[] = array(
      array(
        'data' => drupal_render($form['email_components'][$cid]),
        'class' => array('dquarks-checkbox'),
      ),
      $title,
      $node->dquarks['components'][$cid]['type'],
    );
  }
  if (empty($rows)) {
    $rows[] = array(array(
        'colspan' => 5,
        'data' => t('No components yet in this Quiz.'),
      ),
    );
  }

  $output = '';
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(
      'id' => 'dquarks-emails',
    ),
          )
  );
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Theme the submit limit fieldset on the dquarks node form.
 */
function theme_dquarks_advanced_submit_limit_form($variables) {
  $form = $variables['form'];
  $form['submit_limit']['#attributes']['class'] = array('dquarks-set-active');
  $form['submit_interval']['#attributes']['class'] = array('dquarks-set-active');
  // Remove div wrappers around limit options.
  $form['submit_limit']['#theme_wrappers'] = array();
  $form['submit_interval']['#theme_wrappers'] = array();
  $replacements = array(
    '!count' => drupal_render($form['submit_limit']),
    '!timespan' => drupal_render($form['submit_interval']),
  );

  $form['enforce_limit']['no']['#theme_wrappers'] = array('dquarks_inline_radio');
  $form['enforce_limit']['yes']['#title'] = NULL;
  $form['enforce_limit']['yes']['#inline_element'] = t('Limit each user to !count submission(s) !timespan', $replacements);
  $form['enforce_limit']['yes']['#theme_wrappers'] = array('dquarks_inline_radio');

  return drupal_render_children($form);
}

/**
 * Implements hook_node_view().
 */
function dquarks_node_view($node, $view_mode) {
  global $user;

  // Set teaser and page variables.
  $teaser = $view_mode == 'teaser';
  $page = arg(0) == 'node' && arg(1) == $node->nid;

  // If empty, a teaser, or a new node (during preview) do not display.
  if (empty($node->dquarks['components']) || ($teaser && !$node->dquarks['teaser']) || empty($node->nid)) {
    return;
  }

  // Do not include the form in the search index if indexing is disabled.
  if (module_exists('search') && $view_mode == 'search_index' && !variable_get('dquarks_search_index', 1)) {
    return;
  }

  $submission = array();
  $submission_count = 0;
  $enabled = TRUE;
  $preview = FALSE;
  $logging_in = FALSE;
  $user_limit_exceeded = FALSE;

  // When logging in using a form on the same page as a dquarks node, suppress
  // output messages so that they don't show up after the user has logged in.
  if (isset($_POST['op']) && isset($_POST['name']) && isset($_POST['pass'])) {
    $logging_in = TRUE;
  }

  // Check if the user's role can submit this dquarks.
  if (variable_get('dquarks_submission_access_control', 1)) {
    $allowed_roles = array();
    foreach ($node->dquarks['roles'] as $rid) {
      $allowed_roles[$rid] = isset($user->roles[$rid]) ? TRUE : FALSE;
    }
    if (array_search(TRUE, $allowed_roles) === FALSE && $user->uid != 1) {
      $enabled = FALSE;
    }
  }
  else {
    // If not using dquarks submission access control, allow for all roles.
    $allowed_roles = array_keys(user_roles());
  }

  // Get a count of previous submissions by this user. Note that the
  // dquarks_submission_access() function may disable the page cache for
  // anonymous users if they are allowed to edit their own submissions!
  // Check if the user can add another submission.
  if ($node->dquarks['submit_limit'] != -1) {
    require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.submissions.inc';

    // Disable the form if the limit is exceeded and page cache is not active.
    if (($user_limit_exceeded = _dquarks_submission_user_limit_check($node))) {
      $enabled = FALSE;
    }
  }

  // Get a count of previous submissions by this user.
  if ($user->uid && (user_access('access own Quiz submissions') || user_access('access dquarks results') || user_access('access dquarks submissions'))) {
    $submission_count = db_query('SELECT count(*) FROM {dquarks_submissions} WHERE nid = :nid AND uid = :uid  AND is_draft = FALSE', array(
      ':nid' => $node->nid,
      ':uid' => $user->uid,
            ))
            ->fetchField();
  }

  // Check if this user has a draft for this dquarks.
  $is_draft = FALSE;
  if ($user->uid != 0) {
    // Draft found - display form with draft data for further editing.
    if ($draft_sid = _dquarks_fetch_draft_sid($node->nid, $user->uid)) {
      require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.submissions.inc';
      $submission = dquarks_get_submission($node->nid, $draft_sid);
      $enabled = TRUE;
      $is_draft = TRUE;
    }
  }

  // Render the form and generate the output.
  $form = !empty($node->dquarks['components']) ? drupal_get_form('dquarks_client_form_' . $node->nid, $node, $submission, $enabled, $preview) : '';

  // Remove the surrounding <form> tag if this is a preview.
  if (!empty($node->in_preview)) {
    $form['#type'] = 'markup';
  }

  // Print out messages for the dquarks.
  if (empty($node->in_preview) && !isset($node->dquarks_block) && !$logging_in) {
    theme('dquarks_view_messages', array(
      'node' => $node,
      'teaser' => $teaser,
      'page' => $page,
      'submission_count' => $submission_count,
      'user_limit_exceeded' => $user_limit_exceeded,
      'allowed_roles' => $allowed_roles,
    ));
  }

  // Add the output to the node.
  $node->content['dquarks'] = array(
    '#theme' => 'dquarks_view',
    '#node' => $node,
    '#teaser' => $teaser,
    '#page' => $page,
    '#form' => $form,
    '#enabled' => $enabled,
    '#weight' => 10,
  );
}

/**
 * Output the dquarks into the node content.
 *
 * @param array $variables
 *   contains
 *   - node: The dquarks node object.
 *   - teaser: If this dquarks is being displayed as the teaser view of the
 *   node.
 *   - page: If this dquarks node is being viewed as the main content of the
 *   page.
 *   - form: The rendered form.
 *   - enabled: If the form allowed to be completed by the current user.
 */
function theme_dquarks_view($variables) {
  // Only show the form if this user is allowed access.
  if ($variables['dquarks']['#enabled']) {
    return drupal_render($variables['dquarks']['#form']);
  }
}

/**
 * Display a message to a user if they are not allowed to fill out a form.
 *
 * @param array $variables
 *   contain:
 *   - node: The dquarks node object.
 *   - teaser: If this dquarks is being displayed as the teaser view of the
 *   node.
 *   - page: If this dquarks node is being viewed as the main content of the
 *   page.
 *   - submission_count: The number of submissions this user has already
 *   submitted. Not calculated for anonymous users.
 *   - user_limit_exceeded: Boolean value if the submission limit for this user
 *   has been exceeded.
 *   - total_limit_exceeded: Boolean value if the total submission limit
 *   has been exceeded.
 *   - allowed_roles: A list of user roles that are allowed to submit this
 *   dquarks.
 *   - closed: Boolean value if submissions are closed.
 */
function theme_dquarks_view_messages($variables) {
  global $user;

  $node = $variables['node'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $submission_count = $variables['submission_count'];
  $user_limit_exceeded = $variables['user_limit_exceeded'];
  $allowed_roles = $variables['allowed_roles'];

  $type = 'notice';

  // If open and not allowed to submit the form, give an explanation.
  if (array_search(TRUE, $allowed_roles) === FALSE && $user->uid != 1) {
    if (empty($allowed_roles)) {
      // No roles are allowed to submit the form.
      $message = t('Submissions for this form are closed.');
    }
    elseif (isset($allowed_roles[2])) {
      // The "authenticated user" role is allowed to submit and the user is
      // currently logged-out.
      $login = url('user/login', array('query' => drupal_get_destination()));
      $register = url('user/register', array('query' => drupal_get_destination()));
      if (variable_get('user_register', 1) == 0) {
        $message = t('You must <a href="!login">login</a> to view this form.', array('!login' => $login));
      }
      else {
        $message = t('You must <a href="!login">login</a> or <a href="!register">register</a> to view this form.', array(
          '!login' => $login,
          '!register' => $register,
                ));
      }
    }
    else {
      // The user must be some other role to submit.
      $message = t('You do not have permission to view this form.');
    }
  }

  // If the user has exceeded the limit of submissions, explain the limit.
  elseif ($user_limit_exceeded) {
    if ($node->dquarks['submit_interval'] == -1 && $node->dquarks['submit_limit'] > 1) {
      $message = t('You have submitted this form the maximum number of times (@count).', array('@count' => $node->dquarks['submit_limit']));
    }
    elseif ($node->dquarks['submit_interval'] == -1 && $node->dquarks['submit_limit'] == 1) {
      $message = t('You have already submitted this form.');
    }
    else {
      $message = t('You may not submit another entry at this time.');
    }
    $type = 'error';
  }

  // If the user has submitted before, give them a link to their submissions.
  if ($submission_count > 0) {
    if (empty($message)) {
      $message = t('You have already submitted this form.') . ' ' . t('<a href="!url">View your previous submissions</a>.', array('!url' => url('node/' . $node->nid . '/submissions')));
    }
    else {
      $message .= ' ' . t('<a href="!url">View your previous submissions</a>.', array('!url' => url('node/' . $node->nid . '/submissions')));
    }
  }

  if ($page && isset($message)) {
    drupal_set_message($message, $type, FALSE);
  }
}

/**
 * Implements hook_mail().
 */
function dquarks_mail($key, &$message, $params) {
  switch ($key) {
    case 'submission':
      $message['headers'] = array_merge($message['headers'], $params['headers']);
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function dquarks_block_info() {
  $blocks = array();
  $dquarks_node_types = dquarks_variable_get('dquarks_node_types');
  if (!empty($dquarks_node_types)) {
    $query = db_select('dquarks', 'w')->fields('w')->fields('n', array('title'));
    $query->leftJoin('node', 'n', 'w.nid = n.nid');
    $query->condition('w.block', 1);
    $query->condition('n.type', $dquarks_node_types, 'IN');
    $result = $query->execute();
    foreach ($result as $data) {
      $blocks['client-block-' . $data->nid] = array(
        'info' => t('dquarks: !title', array('!title' => $data->title)),
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dquarks_block_view($delta = '') {
  global $user;

  // Load the block-specific configuration settings.
  $dquarks_blocks = variable_get('dquarks_blocks', array());
  $settings = isset($dquarks_blocks[$delta]) ? $dquarks_blocks[$delta] : array();
  $settings += array(
    'display' => 'form',
    'pages_block' => 0,
  );

  // Get the node ID from delta.
  $nid = drupal_substr($delta, strrpos($delta, '-') + 1);

  // Load node in current language.
  if (module_exists('translation')) {
    global $language;
    if (($translations = translation_node_get_translations($nid)) && (isset($translations[$language->language]))) {
      $nid = $translations[$language->language]->nid;
    }
  }

  // The dquarks node to display in the block.
  $node = node_load($nid);

  // Return if user has no access to the dquarks node.
  if (!node_access('view', $node)) {
    return;
  }

  // This is a dquarks node block.
  $node->dquarks_block = TRUE;

  // Use the node title for the block title.
  $subject = $node->title;

  // Generate the content of the block based on display settings.
  if ($settings['display'] == 'form') {
    dquarks_node_view($node, 'full');
    $content = $node->content['dquarks'];
  }
  else {
    $teaser = ($settings['display'] == 'teaser') ? 'teaser' : 'full';
    $content = node_view($node, $teaser);
  }

  // Create the block.
  $block = array(
    'subject' => $subject,
    'content' => $content,
  );
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function dquarks_block_configure($delta = '') {
  // Load the block-specific configuration settings.
  $dquarks_blocks = variable_get('dquarks_blocks', array());
  $settings = isset($dquarks_blocks[$delta]) ? $dquarks_blocks[$delta] : array();
  $settings += array(
    'display' => 'form',
    'pages_block' => 0,
  );

  $form = array();
  $form['display'] = array(
    '#type' => 'radios',
    '#title' => t('Display mode'),
    '#default_value' => $settings['display'],
    '#options' => array(
      'form' => t('Form only'),
      'full' => t('Full node'),
      'teaser' => t('Teaser'),
    ),
    '#description' => t('The display mode determines how much of the dquarks to show within the block.'),
  );

  $form['pages_block'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show all dquarks pages in block'),
    '#default_value' => $settings['pages_block'],
    '#description' => t('By default multi-page dquarkss redirect to the node page for all pages after the first one. If checked, all pages will be shown in the block instead.'),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function dquarks_block_save($delta = '', $edit = array()) {
  // Load the previously defined block-specific configuration settings.
  $settings = variable_get('dquarks_blocks', array());
  // Build the settings array.
  $new_settings[$delta] = array(
    'display' => $edit['display'],
    'pages_block' => $edit['pages_block'],
  );
  // We store settings for multiple blocks in just one variable
  // so we merge the existing settings with the new ones before save.
  variable_set('dquarks_blocks', array_merge($settings, $new_settings));
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function dquarks_contextual_links_view_alter(&$element, &$items) {
  // Add dquarks and Results links to dquarks-enabled nodes. This code affects
  // both node teasers and nodes exposed as blocks through dquarks.
  if (isset($element['#element']['#node']) && in_array($element['#element']['#node']->type, dquarks_variable_get('dquarks_node_types'))) {
    $element['#links']['dquarks'] = array(
      'title' => t('dquarks'),
      'href' => 'node/' . $element['#element']['#node']->nid . '/dquarks',
    );
    $element['#links']['dquarks-results'] = array(
      'title' => t('Results'),
      'href' => 'node/' . $element['#element']['#node']->nid . '/dquarks-results',
    );
  }
}

/**
 * Client form generation function.
 *
 * @param array $form_state
 *   The current form values of a submission, used in multipage dquarks.
 * @param object $node
 *   The current dquarks node.
 * @param object $submission
 *   An object containing information about the form submission if we're
 *   displaying a result.
 * @param boolean $enabled
 *   If displaying a result, specify if form elements are enabled for editing.
 * @param boolean $is_draft
 *   Optional. Set to TRUE if displaying a draft.
 */
function dquarks_client_form($form, &$form_state, $node, $submission, $enabled = FALSE, $preview = FALSE, $is_draft = FALSE) {
  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';
  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.submissions.inc';
  dquarks_load_components();
  // Attach necessary JavaScript and CSS.
  $form['#attached'] = array(
    'css' => array(drupal_get_path('module', 'dquarks') . '/css/dquarks.css'),
    'js' => array(drupal_get_path('module', 'dquarks') . '/js/dquarks.js'),
  );
  if (isset($submission->sid)) {
    drupal_set_title(t('Submission #@sid', array('@sid' => $submission->sid)));
  }
  // Set a header for navigating results.
  if ($submission && user_access('access dquarks results') && !$is_draft) {
    $result = db_select('dquarks_submissions')
            ->condition('nid', $node->nid)
            ->condition('sid', $submission->sid, '<');
    $result->addExpression('MAX(sid)', 'sid');
    $previous = $result->execute()->fetchField();

    $result = db_select('dquarks_submissions')
            ->condition('nid', $node->nid)
            ->condition('sid', $submission->sid, '>');
    $result->addExpression('MIN(sid)', 'sid');
    $next = $result->execute()->fetchField();

    $form['submission'] = array(
      '#type' => 'value',
      '#value' => $submission,
    );
    $form['navigation'] = array(
      '#prefix' => '<div class="dquarks-submission-navigation">',
      '#suffix' => '</div>',
    );
    $form['navigation']['previous'] = array(
      '#value' => $previous ? l(t('Previous submission'), 'node/' . $node->nid . '/submissions/' . $previous . ($enabled ? '/edit' : ''), array(
                'attributes' => array('class' => 'dquarks-submission-previous'),
                'query' => ($enabled ? drupal_get_destination() : NULL))) : '<span class="dquarks-submission-previous">' . t('Previous submission') . '</span>',
    );
    $form['navigation']['next'] = array(
      '#value' => $next ? l(t('Next submission'), 'node/' . $node->nid . '/submissions/' . $next . ($enabled ? '/edit' : ''), array(
                'attributes' => array('class' => 'dquarks-submission-next'),
                'query' => ($enabled ? drupal_get_destination() : NULL))) : '<span class="dquarks-submission-next">' . t('Next submission') . '</span>',
    );
  }
  // Add a theme function for this form.
  $form['#theme'] = array('dquarks_form_' . $node->nid, 'dquarks_form');
  // Add a css class for all client forms.
  $form['#attributes'] = array('class' => 'dquarks-client-form');
  // Set the encoding type (necessary for file uploads).
  $form['#attributes']['enctype'] = 'multipart/form-data';
  // Set the form action to the node ID in case this is being displayed on the
  // teaser, subsequent pages should be on the node page directly.
  if (empty($submission)) {
    $form['#action'] = url('node/' . $node->nid);
  }

  // If this is a dquarks block, load the block-specific configuration settings.
  $pages_in_node = TRUE;
  if (isset($node->dquarks_block)) {
    $dquarks_blocks = variable_get('dquarks_blocks', array());
    $delta = 'client-block-' . $node->nid;
    $block_settings = isset($dquarks_blocks[$delta]) ? $dquarks_blocks[$delta] : array();
    $pages_in_node = empty($block_settings['pages_block']);
  }

  // Set the form action to the node ID in case this is being displayed on the
  // teaser or in a block, subsequent pages should be on the node page directly.
  if ($pages_in_node && empty($submission)) {
    $query = $_GET;
    unset($query['q']);
    $form['#action'] = url('node/' . $node->nid, array('query' => $query));
  }
  $form['#submit'] = array('dquarks_client_form_submit');
  $form['#validate'] = array('dquarks_client_form_validate');

  if (is_array($node->dquarks['components']) && !empty($node->dquarks['components'])) {
    // Prepare a new form array.
    $form['submitted'] = array(
      '#tree' => TRUE,
    );
    $form['details'] = array(
      '#tree' => TRUE,
    );
    // Put the components into a tree structure.
    $component_tree = array();
    $page_count = 1;
    $page_num = 1;
    $directions = array();
    $pages_links = array();
    $quiz_pages = array();
    _dquarks_components_tree_build($node->dquarks['components'], $component_tree, 0, $page_count, $directions, $quiz_pages, $pages_links);

    if ((!$preview && $enabled)) {

      $next_page = t('Next question >');

      if ($page_count > 1) {
        // Check if we're in a multipage form and determine the page number.
        if (!empty($form_state['storage']['submitted'])) {
          $page_num = $form_state['values']['details']['page_num'];
          $errors = form_get_errors();
          if (empty($errors)) {
            // Add a test of redirection.
            if (($node->dquarks['result_pos'] != 1) || !isset($quiz_pages[$page_num]) || (!empty($form_state['values']) && ($form_state['storage']["shown_result"][$page_num] != 1))) {
              // Depending on the configuration remain the same page to display
              // the result or see next page.
              if ($form_state['values']['op'] == $next_page && (!empty($directions[$page_num]))) {
                $page_num = _dquarks_direction_get_next_page($form_state, $node->dquarks['components'], $directions[$page_num], $pages_links, $page_num);
              }
              elseif ($form_state['values']['op'] == $next_page && $page_num < $page_count) {
                $page_num++;
              }
            }
          }
        }
        else {
          $page_num = 1;
        }

        $form['details']['page_num'] = array(
          '#type' => 'hidden',
          '#value' => $page_num,
        );

        $form['details']['page_count'] = array(
          '#type' => 'hidden',
          '#value' => $page_count,
        );

        dquarks_client_form_add_submit_button($node, $form, $form_state, $page_num, $page_count, $next_page, $quiz_pages);
      }
      else {
        $page_num = 1;
        dquarks_client_form_add_submit_button($node, $form, $form_state, $page_num, $page_count, $next_page, $quiz_pages);
      }
    }
    if (($node->dquarks['result_pos']) && !empty($form_state['values']) && isset($quiz_pages[$page_num]) && $quiz_pages[$page_num] && isset($form_state['storage']["shown_result"][$page_num]) && $form_state['storage']["shown_result"][$page_num] == 1) {
      // Show results.
      if (!(($node->dquarks['result_pos'] == 2) && ($page_num < $page_count))) {
        if (!empty($form_state['storage']["result_message"])) {
          $form['details']["quiz_result"]["message"] = array(
            '#theme' => 'item_list',
            '#items' => $form_state['storage']["result_message"],
          );
        }
        if ($node->dquarks['show_score']) {
          $form['details']["quiz_result"]["score"] = array(
            '#type' => 'textfield',
            '#size' => 25,
            '#attributes' => array('readonly' => TRUE),
            '#value' => t('Your score : !score points', array("!score" => array_sum($form_state['storage']["Score"]))),
          );
        }
      }
      $form_state['storage']["shown_result"][$page_num] = 2;
    }
    else {
      $form_state['storage']["shown_result"][$page_num] = 1;
      // Recursively add components to the form. Microweights keep things in
      // dquarks order.
      $microweight = 0.001;
      foreach ($component_tree['children'] as $cid => $component) {
        $component_value = isset($form_state['values']['submitted'][$component['form_key']]) ? $form_state['values']['submitted'][$component['form_key']] : NULL;
        _dquarks_client_form_add_component($cid, $component, $component_value, $form['submitted'], $form, $submission, $page_num, $enabled);
        if (isset($form['submitted'][$component['form_key']])) {
          $form['submitted'][$component['form_key']]['#weight'] += $microweight;
          $microweight += 0.001;
        }
      }
    }
    // Do not display the submit button if this is a preview or submission view.
    if ((!$preview && $enabled)) {
      // Additional hidden elements.
      $form['details']['email_subject'] = array(
        '#type' => 'hidden',
        '#value' => $node->dquarks['email_subject'],
      );
      $form['details']['email_from_name'] = array(
        '#type' => 'hidden',
        '#value' => $node->dquarks['email_from_name'],
      );
      $form['details']['email_from_address'] = array(
        '#type' => 'hidden',
        '#value' => $node->dquarks['email_from_address'],
      );
      $form['details']['nid'] = array(
        '#type' => 'value',
        '#value' => $node->nid,
      );
      if (isset($submission->sid)) {
        $form['details']['sid'] = array(
          '#type' => 'hidden',
          '#value' => $submission->sid,
        );
      }
    }
  }

  return $form;
}

/**
 * Check if a component should be displayed on the current page.
 */
function _dquarks_client_form_rule_check($node, $component, $page_num, $form_state = NULL, $submission = NULL) {
  $conditional_values = isset($component['extra']['conditional_values']) ? $component['extra']['conditional_values'] : NULL;
  $conditional_component = isset($component['extra']['conditional_component']) && isset($node->dquarks['components'][$component['extra']['conditional_component']]) ? $node->dquarks['components'][$component['extra']['conditional_component']] : NULL;
  $conditional_cid = $conditional_component['cid'];

  // Check any parents' visibility rules.
  $show_parent = $show_page;
  if ($show_parent && $component['pid'] && isset($node->dquarks['components'][$component['pid']])) {
    $parent_component = $node->dquarks['components'][$component['pid']];
    $show_parent = _dquarks_client_form_rule_check($node, $parent_component, $page_num, $form_state, $submission);
  }

  // Check the individual component rules.
  $show_component = $show_parent;
  if ($show_component && ($page_num == 0 || $component['page_num'] == $page_num) && $conditional_component && strlen(trim($conditional_values))) {
    $input_values = array();
    if (isset($form_state)) {
      $input_value = isset($form_state['values']['submitted'][$conditional_cid]) ? $form_state['values']['submitted'][$conditional_cid] : NULL;
      $input_values = is_array($input_value) ? $input_value : array($input_value);
    }
    elseif (isset($submission)) {
      $input_values = isset($submission->data[$conditional_cid]['value']) ? $submission->data[$conditional_cid]['value'] : array();
    }

    $test_values = array_map('trim', explode("\n", $conditional_values));
    if (empty($input_values) && !empty($test_values)) {
      $show_component = FALSE;
    }
    else {
      foreach ($input_values as $input_value) {
        if ($show_component = in_array($input_value, $test_values)) {
          break;
        }
      }
    }

    if ($component['extra']['conditional_operator'] == '!=') {
      $show_component = !$show_component;
    }
  }

  return $show_component;
}

/**
 * Add component to quiz.
 *
 * @param int $cid
 *   The node identifier of the component.
 * @param array $component
 *   An array of components.
 * @param string $component_value
 *   Values of component.
 * @param array $parent_fieldset
 *   The parent fieldset of component.
 * @param array $form
 *   An array of form items.
 * @param object $submission
 *   The dquarks submission values.
 * @param int $page_num
 *   The number of page.
 * @param bool $enabled
 *   Add or edit mode.
 */
function _dquarks_client_form_add_component($cid, $component, $component_value, &$parent_fieldset, &$form, $submission, $page_num, $enabled = FALSE) {
  // Load with submission information if necessary.
  if (!$enabled) {
    // This component is display only.
    $display_function = '_dquarks_submission_display_' . $component['type'];
    if (function_exists($display_function)) {
      $parent_fieldset[$component['form_key']] = $display_function(empty($submission->data[$cid]) ? NULL : $submission->data[$cid], $component, $enabled);
    }
  }
  elseif ($component['page_num'] == $page_num) {
    // Add this user-defined field to the form (with all the values that are
    // always available).
    if (isset($submission->data)) {
      $display_function = '_dquarks_submission_display_' . $component['type'];
      if (function_exists($display_function)) {
        $data = isset($submission->data[$cid]) ? $submission->data[$cid] : NULL;
        $parent_fieldset[$component['form_key']] = $display_function($data, $component, $enabled);
      }
    }
    else {
      $render_function = '_dquarks_render_' . $component['type'];
      if (function_exists($render_function)) {
        // Call the component render function.
        $parent_fieldset[$component['form_key']] = $render_function($component);
        // Set a value if one already exists in the form state.
        if (isset($component_value)) {
          if (is_array($component_value)) {
            foreach ($component_value as $key => $value) {
              $parent_fieldset[$component['form_key']][$key]['#default_value'] = $value;
            }
          }
          else {
            $parent_fieldset[$component['form_key']]['#default_value'] = $component_value;
          }
        }
      }
      else {
        drupal_set_message(t('The Quiz component @type is not able to be displayed', array('@type' => $component['type'])));
      }
    }
  }
  // Save drafts: If the dquarks is being built during a submission, and draft
  // save has been requested, prevent validation warning by marking the fields
  // already validated.
  $validate = TRUE;
  if (isset($form['#no_validate_on'])) {
    list($no_validate_key, $no_validate_value) = explode('=', $form['#no_validate_on']);
    if ($_POST[$no_validate_key] == $no_validate_value) {
      $validate = FALSE;
    }
  }

  if (!$validate) {
    $parent_fieldset[$component['form_key']]['#validated'] = TRUE;
    unset($form['#redirect']);
  }

  if (isset($component['children']) && is_array($component['children'])) {
    $microweight = 0.001;
    foreach ($component['children'] as $scid => $subcomponent) {
      $subcomponent_value = isset($component_value[$subcomponent['form_key']]) ? $component_value[$subcomponent['form_key']] : NULL;
      _dquarks_client_form_add_component($scid, $subcomponent, $subcomponent_value, $parent_fieldset[$component['form_key']], $form, $submission, $page_num, $enabled);
      $parent_fieldset[$component['form_key']][$subcomponent['form_key']]['#weight'] += $microweight;
      $microweight += 0.001;
    }
  }
}

/**
 * Implements hook_validate().
 *
 * @param array $form
 *   An array of form items.
 * @param array $form_state
 *   An array of form items.
 *
 * @return bool
 *   Exit function
 */
function dquarks_client_form_validate($form, $form_state) {
  $node = node_load($form_state['values']['details']['nid']);

  // Check that the user has not exceeded the submission limit.
  // This usually will only apply to anonymous users when the page cache is
  // enabled, because they may submit the form even if they do not have access.
  // -1: Submissions are never throttled.
  if ($node->dquarks['submit_limit'] != -1) {
    require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.submissions.inc';

    if (empty($sid) && $user_limit_exceeded = _dquarks_submission_user_limit_check($node)) {
      // Assume that dquarks_view_messages will print out the necessary message,
      // then stop the processing of the form with an empty form error.
      theme('dquarks_view_messages', array(
        'node' => $node, 'teaser' => 0,
        'page' => 1,
        'submission_count' => 0,
        'user_limit_exceeded' => $user_limit_exceeded,
        'allowed_roles' => array_keys(user_roles()
              )));
      form_set_error('', NULL);
      return;
    }
  }

  // Flatten trees within the submission.
  $form_state['values']['submitted_tree'] = isset($form_state['values']['submitted']) ? $form_state['values']['submitted'] : NULL;
  if (isset($form_state['values']['submitted'])) {
    $form_state['values']['submitted'] = _dquarks_client_form_submit_flatten($node, $form_state['values']['submitted']);
  }
  else {
    $form_state['values']['submitted'] = _dquarks_client_form_submit_flatten($node);
  }
}

/**
 * Implements hook_submit().
 *
 * @global object $user
 *   Information of user.
 * @global string $base_url
 *   Base url.
 *
 * @param array $form
 *   An array of form items.
 * @param array $form_state
 *   An array of form items.
 *
 * @return boolean
 *   Exit function
 */
function dquarks_client_form_submit($form, &$form_state) {
  global $user, $base_url;
  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.submissions.inc';
  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';

  $node = node_load($form_state['values']['details']['nid']);

  // Check for a multi-page form that is not yet complete.
  $submit_op = empty($node->dquarks['submit_text']) ? t('Submit') : $node->dquarks['submit_text'];
  // Check if user is submitting as a draft.
  if ($form_state['values']['op'] != $submit_op) {
    // Checkboxes need post-processing to maintain their values.
    if ($node->dquarks['result_pos'] < 2) {
      $form_state['storage']["result_message"] = array();
    }
    $result = _dquarks_client_form_submit_process($node, $form_state['values']['submitted'], FALSE, array(
      'select', 'grid', 'multichoice'));

    $form_state['storage']["result_message"] = $result['messages'];
    if (isset($form_state['values']['details']['page_num'])) {
      $form_state['storage']["Score"][$form_state['values']['details']['page_num']] = $result['note'];
    }
    else {
      $form_state['storage']["Score"][] = $result['note'];
    }
    // Store values from the current page in the form state storage.
    if (is_array($form_state['values']['submitted'])) {
      foreach ($form_state['values']['submitted'] as $key => $val) {
        $form_state['storage']['submitted'][$key] = $val;
      }
    }
    // Update form state values with those from storage.
    if (is_array($form_state['storage']['submitted'])) {
      foreach ($form_state['storage']['submitted'] as $key => $val) {
        $form_state['values']['submitted'][$key] = $val;
      }
    }
    // Rebuild the form, allowing the rebuild to determine the next page.
    $form_state['rebuild'] = TRUE;
    return;
  }

  if (isset($form_state['storage']['submitted'])) {
    // Merge any stored submission data for multistep forms.
    $original_values = (isset($form_state['values']['submitted']) && is_array($form_state['values']['submitted'])) ? $form_state['values']['submitted'] : array();
    unset($form_state['values']['submitted']);

    foreach ($form_state['storage']['submitted'] as $key => $val) {
      $form_state['values']['submitted'][$key] = $val;
    }
    foreach ($original_values as $key => $val) {
      $form_state['values']['submitted'][$key] = $val;
    }
    // Remove the form state storage now that we're done with the pages.
    unset($form_state['rebuild']);
    unset($form_state['storage']);
    // Remove the variable so it doesn't show up in the additional processing.
    unset($original_values);
  }

  // Perform post processing by components.
  $result = _dquarks_client_form_submit_process($node, $form_state['values']['submitted'], TRUE);
  $final_score = $result['note'];
  // Flatten trees within the submission.
  $form_state['values']['submitted_tree'] = $form_state['values']['submitted'];
  $form_state['values']['submitted'] = _dquarks_client_form_submit_flatten($node, $form_state['values']['submitted']);
  // Convert additional email addresses into actual values.
  foreach ($node->dquarks['additional_emails'] as $cid => $value) {
    if (is_array($form_state['values']['submitted'][$cid])) {
      $node->dquarks['additional_emails'][$cid] = array();
      foreach ($form_state['values']['submitted'][$cid] as $submitted_value) {
        if ($submitted_value) {
          $node->dquarks['additional_emails'][$cid][] = $submitted_value;
        }
      }
    }
    else {
      $node->dquarks['additional_emails'][$cid] = $form_state['values']['submitted'][$cid];
    }
    if (empty($node->dquarks['additional_emails'][$cid])) {
      unset($node->dquarks['additional_emails'][$cid]);
    }
  }

  // Save the submission to the database.
  if (empty($form_state['values']['details']['sid'])) {
    // No sid was found thus insert it in the datatabase.
    $form_state['values']['details']['sid'] = dquarks_submission_insert($node, $form_state['values']['submitted']);
    $form_state['values']['details']['is_new'] = TRUE;
    // Set a cookie including the server's submission time.
    // The cookie expires in the length of the interval plus a day to compensate
    // for different timezones.
    if (variable_get('dquarks_use_cookies', 0)) {
      $cookie_name = 'dquarks-' . $node->nid;
      $time = time();
      setcookie($cookie_name . '[' . $time . ']', $time, $time + $node->dquarks['submit_interval'] + 86400);
    }
  }
  else {
    // Sid was found thus update the existing sid in the datatbase.
    dquarks_submission_update($node, $form_state['values']['details']['sid'], $form_state['values']['submitted'], $is_draft);
    $form_state['values']['details']['is_new'] = FALSE;
  }
  $sid = $form_state['values']['details']['sid'];
  // Update the main submission info.
  db_update('dquarks_submissions')
          ->fields(array(
            'score' => $final_score,
            'max_score' => $result['max_score'],
          ))
          ->condition('sid', $sid)
          ->condition('nid', $node->nid)
          ->execute();


  // Check if this form is sending an email.
  if ((!empty($node->dquarks['email']) || !empty($node->dquarks['additional_emails'])) && $form_state['values']['details']['is_new']) {
    // Set values for the name, address, and subject for the email.
    $email_from_name = $node->dquarks['email_from_name'];
    $email_from_address = $node->dquarks['email_from_address'];
    $email_subject = $node->dquarks['email_subject'];
    foreach (array('from_name', 'from_address', 'subject') as $field) {
      if ($node->dquarks['email_' . $field] == 'default') {
        $ {'email_' . $field} = _dquarks_filter_values(dquarks_variable_get('dquarks_default_' . $field), $node, $form_state['values']['submitted'], FALSE, TRUE);
      }
      elseif (is_numeric($node->dquarks['email_' . $field])) {
        if (is_array($form_state['values']['submitted'][$ {'email_' . $field}])) {
          $values = array();
          foreach ($form_state['values']['submitted'][$ {'email_' . $field}] as $key => $value) {
            $values[] = _dquarks_filter_values($value, $node, $form_state['values']['submitted'], FALSE, TRUE);
          }
          $ {'email_' . $field} = implode(', ', $values);
        }
        else {
          $ {'email_' . $field} = _dquarks_filter_values($form_state['values']['submitted'][$ {'email_' . $field}], $node, $form_state['values']['submitted'], FALSE, TRUE);
        }
      }
      else {
        $ {'email_' . $field} = _dquarks_filter_values($ {'email_' . $field}, $node, $form_state['values']['submitted'], FALSE, TRUE);
      }
    }
    // Create a themed message for mailing.
    // Check for a node-specific message:
    $emails = $node->dquarks['additional_emails'];
    if ($node->dquarks['email']) {
      $emails['default'] = $node->dquarks['email'];
    }
    $messages = array();
    $headers = array();
    $froms = array();
    $subjects = array();
    foreach ($emails as $cid => $email) {
      $messages[$cid] = theme(array(
        'dquarks_mail_' . $node->nid,
        'dquarks_mail',
        'dquarks_mail_message',
              ), array(
                'form_values' => $form_state['values'],
                'node' => $node,
                'sid' => $sid,
                'cid' => $cid,
                'score' => $final_score . '/' . $result['max_score'],
              )
      );
      $headers[$cid] = theme(array('dquarks_mail_headers_' . $node->nid, 'dquarks_mail_headers'), array(
        'form_values' => $form_state['values'],
        'node' => $node,
        'sid' => $sid,
        'cid' => $cid,
              ));
      // Assemble the FROM string.
      if (isset($headers[$cid]['From'])) {
        $froms[$cid] = $headers[$cid]['From'];
        unset($headers[$cid]['From']);
      }
      elseif (drupal_strlen($email_from_name) > 0) {
        $froms[$cid] = '"' . mime_header_encode($email_from_name) . '" <' . $email_from_address . '>';
      }
      else {
        $froms[$cid] = $email_from_address;
      }
      // Update the subject if set in the themed headers.
      if (isset($headers[$cid]['Subject'])) {
        $subjects[$cid] = $headers[$cid]['Subject'];
        unset($headers[$cid]['Subject']);
      }
      else {
        $subjects[$cid] = $email_subject;
      }
      // Update the to e-mail if set in the themed headers.
      if (isset($headers[$cid]['To'])) {
        $emails[$cid] = $headers[$cid]['To'];
        unset($headers[$cid]['To']);
      }
    }

    // Verify that this submission is not attempting to send any spam hacks.
    if (_dquarks_submission_spam_check($emails['default'], $subjects['default'], $froms['default'], $headers['default'])) {
      watchdog('dquarks', 'Possible spam attempt from @remote_addr' . "<br />\n" . nl2br(htmlentities($messages['default'])), array('@remote_add' => ip_address()));
      drupal_set_message(t('Illegal information. Data not submitted.'), 'error');
      return FALSE;
    }

    // Mail the dquarks results.
    foreach ($emails as $cid => $address) {
      // In the case of checkboxes or multiple select, multiple e-mails may need
      // to be sent out.
      $headers[$cid]['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      if (is_array($address)) {
        foreach ($address as $single_address) {
          $params = array(
            'body' => $messages[$cid],
            'subject' => $subjects[$cid],
            'headers' => $headers[$cid],
          );
          drupal_mail('dquarks', 'submission', $single_address, user_preferred_language($user), $params, $froms[$cid], TRUE);
          // Debugging output for email.
          if (variable_get('dquarks_debug', 0) >= 2) {
            drupal_set_message(check_plain('E-mail Headers: <pre>' . htmlentities(print_r($headers[$cid], TRUE)) . '</pre>To: ' . $single_address . '<br />From: ' . htmlentities($froms[$cid]) . '<br />Subject: ' . $subjects[$cid] . '<br />E-mail Body: <pre>' . $messages[$cid] . '</pre>'));
          }
        }
      }
      else {
        $params = array(
          'body' => $messages[$cid],
          'subject' => $subjects[$cid],
          'headers' => $headers[$cid],
        );
        drupal_mail('dquarks', 'submission', $address, user_preferred_language($user), $params, $froms[$cid], TRUE);
        // Debugging output for email.
        if (variable_get('dquarks_debug', 0) >= 2) {
          drupal_set_message(check_plain('E-mail Headers: <pre>' . htmlentities(print_r($headers[$cid], TRUE)) . '</pre>To: ' . $address . '<br />From: ' . htmlentities($froms[$cid]) . '<br />Subject: ' . $subjects[$cid] . '<br />E-mail Body: <pre>' . $messages[$cid] . '</pre>'));
        }
      }
    }
  }
  // More debugging output.
  if (variable_get('dquarks_debug', 0) >= 2) {
    drupal_set_message(check_plain('$form_state is: <pre>' . htmlentities(print_r($form_state, TRUE)) . '</pre>'));
    drupal_set_message(check_plain('$_SERVER is: <pre>' . htmlentities(print_r($_SERVER, TRUE)) . '</pre>'));
    drupal_set_message(check_plain('$_POST is: <pre>' . htmlentities(print_r($_POST, TRUE)) . '</pre>'));
  }
  // Log to watchdog if normal debug is on.
  if (variable_get('dquarks_debug', 0) >= 1) {
    watchdog('dquarks', 'Submission posted to %title. <a href="!url">Results</a>. !details', array(
      '%title' => $node->title,
      '!url' => url('node/' . $node->nid . '/quizsubmission/' . $sid),
      '!results' => "<br />\n<pre>" . htmlentities(print_r($form_state['values'], TRUE)) . '</pre>',
    ));
  }
  // Check confirmation field to see if redirect should be to another node or a
  // message.
  if (isset($form_state['values']['submission'])) {
    drupal_set_message(t('Submission updated.'));
    $redirect = NULL;
  }
  elseif (valid_url(trim($node->dquarks['confirmation']), TRUE)) {
    $redirect = trim($node->dquarks['confirmation']);
  }
  // Check if the form should redirect to an internal URL, strip tags off
  // first in case a WYSIWYG editor messed it up.
  elseif (preg_match('/^internal:/', trim(strip_tags($node->dquarks['confirmation'])))) {
    $path = preg_replace('/^internal:/', '', trim(strip_tags($node->dquarks['confirmation'])));
    $redirect = array(trim($path), 'sid=' . $sid);
  }
  elseif (preg_match('/^message:/', $node->dquarks['confirmation'])) {
    $message = preg_replace('/^message:/', '', $node->dquarks['confirmation']);
    drupal_set_message(check_plain($message));
    $redirect = NULL;
  }
  else {
    $redirect = NULL;
  }
  $form_state['redirect'] = $redirect;
}

/**
 * Flattens a submitted form back into a single array representation.
 */
function _dquarks_client_form_submit_flatten($node, $fieldset = NULL, $parent = 0) {
  $values = array();

  if (is_array($fieldset)) {
    foreach ($fieldset as $form_key => $value) {
      $cid = dquarks_get_cid($node, $form_key, $parent);

      if (is_array($value) && $node->dquarks['components'][$cid]['type'] == 'fieldset') {
        $values += _dquarks_client_form_submit_flatten($node, $value, $cid);
      }
      else {
        $values[$cid] = $value;
      }
    }
  }

  return $values;
}

/**
 * Prints the confirmation message after a successful submission.
 */
function _dquarks_confirmation($node) {
  drupal_set_title($node->title);

  dquarks_set_breadcrumb($node);
  $sid = isset($_GET['sid']) ? $_GET['sid'] : NULL;
  return theme(array(
                    'dquarks_confirmation_' . $node->nid,
                    'dquarks_confirmation',
                  ), array(
                    'node' => $node,
                    'sid' => $sid,
                  )
  );
}

/**
 * Prepare for theming of the dquarks form.
 */
function template_preprocess_dquarks_form(&$vars) {
  if (isset($vars['form']['details']['nid']['#value'])) {
    $vars['nid'] = $vars['form']['details']['nid']['#value'];
  }
  elseif (isset($vars['form']['submission']['#value'])) {
    $vars['nid'] = $vars['form']['submission']['#value']->nid;
  }
}

/**
 * Prepare to theme the contents of e-mails sent by dquarks.
 */
function template_preprocess_dquarks_mail_message(&$vars) {
  global $user;
  $vars['user'] = $user;
  $vars['ip_address'] = ip_address();
}

/**
 * Replacement for theme_form_element().
 */
function theme_dquarks_element($variables) {
  // Ensure defaults.
  $variables['element'] += array(
    '#title_display' => 'before',
  );

  $element = $variables['element'];

  // All elements using this for display only are given the "display" type.
  if (isset($element['#format']) && $element['#format'] == 'html') {
    $type = 'display';
  }
  else {
    $type = (isset($element['#type']) && !in_array($element['#type'], array('markup', 'textfield'))) ? $element['#type'] : $element['#dquarks_component']['type'];
  }
  $parents = str_replace('_', '-', implode('--', array_slice($element['#parents'], 1)));

  $wrapper_classes = array(
    'form-item',
    'dquarks-component',
    'dquarks-component-' . $type,
  );
  if (isset($element['#title_display']) && $element['#title_display'] == 'inline') {
    $wrapper_classes[] = 'dquarks-container-inline';
  }
  $output = '<div class="' . implode(' ', $wrapper_classes) . '" id="dquarks-component-' . $parents . '">' . "\n";
  $required = !empty($element['#required']) ? '<span class="form-required" title="' . t('This field is required.') . '">*</span>' : '';

  // If #title is not set, we don't display any label or required marker.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }
  $prefix = isset($element['#field_prefix']) ? '<span class="field-prefix">' . _dquarks_filter_xss($element['#field_prefix']) . '</span> ' : '';
  $suffix = isset($element['#field_suffix']) ? ' <span class="field-suffix">' . _dquarks_filter_xss($element['#field_suffix']) . '</span>' : '';

  switch ($element['#title_display']) {
    case 'inline':
    case 'before':
    case 'invisible':
      $output .= ' ' . theme('form_element_label', $variables);
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;

    case 'after':
      $output .= ' ' . $prefix . $element['#children'] . $suffix;
      $output .= ' ' . theme('form_element_label', $variables) . "\n";
      break;

    case 'none':
    case 'attribute':
      // Output no label and no required marker, only the children.
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;
  }

  if (!empty($element['#description'])) {
    $output .= ' <div class="description">' . $element['#description'] . "</div>\n";
  }

  $output .= "</div>\n";

  return $output;
}

/**
 * Output a form element in plain text format.
 */
function theme_dquarks_element_text($variables) {
  $element = $variables['element'];
  $value = $variables['element']['#children'];

  $output = '';
  $is_group = dquarks_component_feature($element['#dquarks_component']['type'], 'group');

  // Output the element title.
  if (isset($element['#title'])) {
    if ($is_group) {
      $output .= '--' . $element['#title'] . '--';
    }
    elseif (!in_array(drupal_substr($element['#title'], -1), array(
              '?', ':', '!', '%', ';', '@'))) {
      $output .= $element['#title'] . ':';
    }
    else {
      $output .= $element['#title'];
    }
  }

  // Wrap long values at 65 characters, allowing for a few fieldset indents.
  // It's common courtesy to wrap at 75 characters in e-mails.
  if ($is_group && drupal_strlen($value) > 65) {
    $value = wordwrap($value, 65, "\n");
    $lines = explode("\n", $value);
    foreach ($lines as $key => $line) {
      $lines[$key] = '  ' . $line;
    }
    $value = implode("\n", $lines);
  }

  // Add the value to the output.
  if ($value) {
    $output .= (strpos($value, "\n") === FALSE ? ' ' : "\n") . $value;
  }

  // Indent fieldsets.
  if ($is_group) {
    $lines = explode("\n", $output);
    foreach ($lines as $number => $line) {
      if (strlen($line)) {
        $lines[$number] = '  ' . $line;
      }
    }
    $output = implode("\n", $lines);
    $output .= "\n";
  }

  if ($output) {
    $output .= "\n";
  }

  return $output;
}

/**
 * Theme a radio button and another element together.
 *
 * This is used in the e-mail configuration to show a radio button and a text
 * field or select list on the same line.
 */
function theme_dquarks_inline_radio($variables) {
  $element = $variables['element'];

  // Add element's #type and #name as class to aid with JS/CSS selectors.
  $class = array('form-item');
  if (!empty($element['#type'])) {
    $class[] = 'form-type-' . strtr($element['#type'], '_', '-');
  }
  if (!empty($element['#name'])) {
    $class[] = 'form-item-' . strtr($element['#name'], array(
              ' ' => '-',
              '_' => '-',
              '[' => '-',
              ']' => '',
            ));
  }

  // Add container-inline to all elements.
  $class[] = 'dquarks-container-inline';
  if (isset($element['#inline_element']) && isset($variables['element']['#title'])) {
    $variables['element']['#title'] .= ': ';
  }

  $output = '<div class="' . implode(' ', $class) . '">' . "\n";
  $output .= ' ' . $element['#children'];
  if (!empty($element['#title'])) {
    $output .= ' ' . theme('form_element_label', $variables) . "\n";
  }
  if (isset($element['#inline_element'])) {
    $output .= ' ' . $element['#inline_element'] . "\n";
  }

  if (!empty($element['#description'])) {
    $output .= ' <div class="description">' . $element['#description'] . "</div>\n";
  }

  $output .= "</div>\n";

  return $output;
}

/**
 * Theme the headers when sending an email from dquarks.
 *
 * @return array
 *   An array of headers to be used when sending a dquarks email. If headers
 *   for "From", "To", or "Subject" are set, they will take precedence over
 *   the values set in the dquarks configuration.
 */
function theme_dquarks_mail_headers($variables) {
  $headers = array(
    'X-Mailer' => 'Drupal dquarks (PHP/' . phpversion() . ')',
  );
  return $headers;
}

/**
 * Prepare to theme the fields portion of the e-mails sent by dquarks.
 *
 * This function calls itself recursively to maintain the tree structure of
 * components in the dquarks. It is called intially by
 * theme_dquarks_create_mailmessage().
 *
 * @param array $variables
 *   Contains the parent component ID we're currently printing,
 * the value of the component to be printed. May be an array of other component,
 * the full node object and he current amount of indentation being applied to
 * printed components.
 *
 * @return string
 *   the message to send
 */
function theme_dquarks_mail_fields($variables) {
  $cid = $variables['cid'];
  $value = $variables['value'];
  $node = $variables['node'];
  $indent = $variables['indent'];
  $component = $cid ? $node->dquarks['components'][$cid] : NULL;
  // Check if this component needs to be included in the email at all.
  if ($cid && !$component['email'] && !in_array($component['type'], array(
            'direction'))) {
    return '';
  }
  // First check for component-level themes.
  $themed_output = theme('dquarks_mail_' . $component['type'], array(
    'data' => $value,
    'component' => $component,
    'mail_add_result' => $node->dquarks['mail_add_result'],
          ));

  $message = '';

  if ($themed_output) {
    // Do not send in the mail the labels of direction component.
    if ($component['type'] != 'direction') {
      // Indent the output and add to message.
      $message .= $indent;
      $themed_output = rtrim($themed_output, $indent);
      $message .= $themed_output;
      $message .= "<br/>";
    }
  }
  // Generic output for single values.
  elseif (!is_array($value)) {
    // Note that newlines cannot be preceeded by spaces to display properly in
    // some clients.
    if ($component['name']) {
      // If text is more than 60 characters, put it on a new line with space
      // after.
      $long = (drupal_strlen($indent . $component['name'] . $value)) > 60;
      $message .= $indent . $component['name'] . ':' . (empty($value) ? "\n" : ($long ? "\n$value\n\n" : " $value\n"));
    }
  }
  // Else use a generic output for arrays.
  else {
    foreach ($value as $k => $v) {
      foreach ($node->dquarks['components'] as $local_key => $local_value) {
        if ($local_value['form_key'] == $k && $local_value['pid'] == $cid) {
          $form_key = $local_key;
          break;
        }
      }
      $cid_value = (isset($form_key)) ? $form_key : $cid;
      $message .= theme('dquarks_mail_fields', array(
        'cid' => $cid_value,
        'value' => $v,
        'node' => $node,
        'indent' => $indent . '  ',
              ));
    }
  }

  return ($message);
}

/**
 * Check if current user has a draft of this dquarks, and return the sid.
 *
 * @param int $nid
 *   Id of node
 * @param int $uid
 *   Id of user
 *
 * @return int
 *   Return the sid of user
 */
function _dquarks_fetch_draft_sid($nid, $uid) {
  return db_select('dquarks_submissions')
                  ->fields('dquarks_submissions', array('sid'))
                  ->condition('nid', $nid)
                  ->condition('uid', $uid)
                  ->condition('is_draft', 1)
                  ->orderBy('submitted', 'DESC')
                  ->execute()
                  ->fetchField();
}

/**
 * Return the value of tokens.
 *
 * @global object $user
 *   The information of user
 * @staticvar Array $replacements
 *   An array of values of each token
 *
 * @param string $string
 *   The description of component.
 * @param object $node
 *   A fully loaded node object.
 * @param object $submission
 *   The dquarks submission values.
 * @param bool $strict
 *   If true, filter the return result to prevent XSS vulnerabilities.
 * @param bool $allow_anonymous
 *   Check if the anonymous users have right to use tokens.
 *
 * @return Array
 *   Return the value of each token.
 */
function _dquarks_filter_values($string, $node = NULL, $submission = NULL, $strict = TRUE, $allow_anonymous = FALSE) {
  global $user;
  static $replacements;
  // Setup default token replacements.
  if (!isset($replacements)) {
    $replacements['unsafe'] = array();
    $replacements['safe']['%site'] = variable_get('site_name', 'drupal');
    $replacements['safe']['%date'] = format_date(time(), 'large');
  }
  // Node replacements.
  if (isset($node) && !array_key_exists('%title', $replacements)) {
    $replacements['safe']['%title'] = $node->title;
    $replacements['safe']['%url'] = url('node/' . $node->nid, array('absolute' => TRUE));
    $replacements['safe']['%nid'] = $node->nid;
  }
  // Submission replacements.
  if (isset($submission) && !array_key_exists('%email_values', $replacements)) {
    foreach ($submission as $cid => $value) {
      $replacements['unsafe']['%cid[' . $cid . ']'] = (string) $value;
    }
  }
  // Provide a list of candidates for token replacement.
  // Note these tokens are not cached as they may change frequently.
  $special_tokens = array(
    'safe' => array(
      '%get' => $_GET,
    ),
    'unsafe' => array(
      '%cookie' => $_COOKIE,
      '%session' => isset($_SESSION) ? $_SESSION : array(),
      '%post' => $_POST,
      '%request' => $_REQUEST,
    ),
  );
  // User replacements.
  if (!array_key_exists('%username', $replacements['unsafe'])) {
    $replacements['unsafe']['%username'] = isset($user->name) ? $user->name : '';
    $replacements['unsafe']['%useremail'] = isset($user->mail) ? $user->mail : '';
    $replacements['unsafe']['%ip_address'] = ip_address();
    // Doesn't really belong here with user things, but works.
    $special_tokens['unsafe']['%server'] = $_SERVER;
  }
  // User profile replacements.
  if (!isset($replacements['unsafe']['%profile[uid]'])) {
    if ($user->uid && module_exists('profile')) {
      profile_load_profile($user);
    }
    $special_tokens['unsafe']['%profile'] = $user;
  }

  foreach ($special_tokens as $safe_state => $tokens) {
    foreach ($tokens as $token => $variable) {
      if (strpos($string, $token) !== FALSE) {
        foreach ($variable as $key => $value) {
          // This special case for profile module dates.
          if ($token == '%profile' && is_array($value) && isset($value['year'])) {
            $replacement = format_date(strtotime($value['month'] . '/' . $value['day'] . '/' . $value['year']), 'custom', 'F j, Y', '0');
          }
          else {
            $replacement = (string) $value;
          }
          $replacements[$safe_state][$token . '[' . $key . ']'] = $replacement;
        }
      }
    }
  }
  // Make a copy of the replacements so we don't affect the static version.
  $safe_replacements = $replacements['safe'];
  // Restrict replacements for anonymous users. Not all tokens can be used
  // because they may expose session or other private data to other users when
  // anonymous page caching is enabled.
  if ($user->uid || $allow_anonymous) {
    $safe_replacements += $replacements['unsafe'];
  }
  else {
    foreach ($replacements['unsafe'] as $key => $value) {
      $safe_replacements[$key] = '';
    }
  }

  $find = array_keys($safe_replacements);
  $replace = array_values($safe_replacements);
  $string = str_replace($find, $replace, $string);
  // Clean up any unused tokens.
  foreach ($special_tokens as $safe_state => $tokens) {
    foreach (array_keys($tokens) as $token) {
      $string = preg_replace('/\\' . $token . '\[\w+\]/', '', $string);
    }
  }

  return $strict ? filter_xss($string) : $string;
}

/**
 * Filters all tokens provided, and allows basic layout in descriptions.
 *
 * @param string $string
 *   The description of component.
 * @param object $node
 *   A fully loaded node object.
 * @param object $submission
 *   The dquarks submission values.
 * @param bool $strict
 *   If true, filter the return result to prevent XSS vulnerabilities
 *
 * @return string
 *   All available tokens with its values
 */
function _dquarks_filter_descriptions($string, $node = NULL, $submission = NULL, $strict = TRUE) {
  return check_markup(_dquarks_filter_values($string, $node, $submission, $strict));
}

/**
 * Filter labels for display by running through XSS checks.
 */
function _dquarks_filter_xss($string) {
  static $allowed_tags;
  $allowed_tags = isset($allowed_tags) ? $allowed_tags : dquarks_variable_get('dquarks_allowed_tags');
  return filter_xss($string, $allowed_tags);
}

/**
 * Utility function to ensure that a dquarks record exists in the database.
 *
 * @param object $node
 *   The node object to check if a database entry exists.
 *
 * @return int
 *   This function should always return TRUE if no errors were encountered,
 *   ensuring that a dquarks table row has been created. Will return FALSE if
 *   a record does not exist and a new one could not be created.
 */
function dquarks_ensure_record(&$node) {
  if (!$node->dquarks['record_exists']) {
    // Even though dquarks_node_insert() would set this property to TRUE,
    // we set record_exists to trigger a difference from the defaults.
    $node->dquarks['record_exists'] = TRUE;
    dquarks_node_insert($node);
  }
  return $node->dquarks['record_exists'];
}

/**
 * Utility function to check if a dquarks record is necessary in the database.
 *
 * If the node is no longer using any dquarks settings, this function will
 * delete the settings from the dquarks table. Note that this function will NOT
 * delete rows from the dquarks table if the node-type is exclusively used for
 * dquarkss (per the "dquarks_node_types_primary" variable).
 *
 * @param object $node
 *   The node object to check if a database entry is still required.
 *
 * @return int
 *   Returns TRUE if the dquarks still has a record in the database. Returns
 *   FALSE if the dquarks does not have a record or if the previously existing
 *   record was just deleted.
 */
function dquarks_check_record(&$node) {
  $dquarks = $node->dquarks;
  $dquarks['record_exists'] = FALSE;
  unset($dquarks['nid']);

  // Don't include empty values in the comparison, this makes it so modules that
  // extend dquarks with empty defaults won't affect cleanup of rows.
  $dquarks = array_filter($dquarks);
  $defaults = array_filter(dquarks_node_defaults());
  if ($dquarks == $defaults && !in_array($node->type, dquarks_variable_get('dquarks_node_types_primary'))) {
    dquarks_node_delete($node);
    $node->dquarks = dquarks_node_defaults();
  }
  return $node->dquarks['record_exists'];
}

/**
 * Given a form_key and a list of form_key parents, determine the cid.
 *
 * @param object $node
 *   A fully loaded node object.
 * @param int $form_key
 *   The form key for which we're finding a cid.
 * @param int $pid
 *   The parent id of component
 *
 * @return int
 *   The cid of the parent component.
 */
function dquarks_get_cid(&$node, $form_key, $pid) {
  foreach ($node->dquarks['components'] as $cid => $component) {
    if ($component['form_key'] == $form_key && $component['pid'] == $pid) {
      return $cid;
    }
  }
}

/**
 * Retreive a Drupal variable with the appropriate default value.
 */
function dquarks_variable_get($variable) {
  switch ($variable) {
    case 'dquarks_allowed_tags':
      $result = variable_get('dquarks_allowed_tags', array(
        'a', 'em', 'strong', 'code', 'img')
      );
      break;

    case 'dquarks_default_from_name':
      $result = variable_get('dquarks_default_from_name', variable_get('site_name', ''));
      break;

    case 'dquarks_default_from_address':
      $result = variable_get('dquarks_default_from_address', variable_get('site_mail', ini_get('sendmail_from')));
      break;

    case 'dquarks_default_subject':
      $result = variable_get('dquarks_default_subject', t('Form submission from: %title'));
      break;

    case 'dquarks_node_types':
      $result = variable_get('dquarks_node_types', array('dquarks'));
      break;

    case 'dquarks_node_types_primary':
      $result = variable_get('dquarks_node_types_primary', array('dquarks'));
      break;
  }
  return $result;
}

/**
 * Display the available tokens.
 *
 * @staticvar array $tokens
 *   The available tokens to use
 * @return string
 *   Textual output to present the available tokens.
 */
function theme_dquarks_token_help() {

  $groups = array('basic', 'node', 'special');
  static $tokens = array();

  if (empty($tokens)) {

    $tokens['basic'] = array(
      'title' => t('All users:'),
      'tokens' => array(
        '%site' => t('The name of the site (i.e. %site_name)', array('%site_name' => variable_get('site_name', ''))),
        '%date' => t('The current date, formatted according to the site settings.'),
        '%get[' . t('key') . ']' => t('Tokens may be populated from the URL by creating URLs of the form http://example.com/my-form?foo=bar. Using the token %get[foo] would print "bar".'),
      ),
    );

    $tokens['node'] = array(
      'title' => t('Quiz informations:'),
      'tokens' => array(
        '%nid' => t('The node ID.'),
        '%title' => t('The node title.'),
        '%url' => t('The URL of node.'),
      ),
    );

    $tokens['special'] = array(
      'title' => t('Only for logged in users:'),
      'tokens' => array(
        '%username' => t('The name of the user if logged in. Blank for anonymous users.'),
        '%useremail' => t('The e-mail address of the user if logged in. Blank for anonymous users.'),
        '%ip_address' => t('The IP address of the user.'),
        '%profile[' . t('key') . ']' => t('Any user profile field or value, such as %profile[name] or %profile[profile_first_name]'),
        '%post[' . t('key') . ']' => t('Tokens may also be populated from POST values that are submitted by forms.'),
        '%session[' . t('key') . ']' => t('You can use %session[key] to add any of the special PHP <a href="http://www.php.net/reserved.variables#reserved.variables.session">$_SESSION</a> variables.'),
        '%request[' . t('key') . ']' => t('You can use %request[key] to add any of the special PHP <a href="http://www.php.net/reserved.variables#reserved.variables.request">$_REQUEST</a> variables.'),
        '%cookie[' . t('key') . ']' => t('You can use %cookie[key] to add any of the special PHP <a href="http://www.php.net/reserved.variables#reserved.variables.cookies">$_COOKIE</a> variables.'),
        '%server[' . t('key') . ']' => t('You can use %server[key] to add any of the special PHP <a href="http://www.php.net/reserved.variables#reserved.variables.server">$_SERVER</a> variables.'),
      ),
    );
  }

  $output = '';
  $output .= '<p>' . t('You may use special tokens in this field that will be replaced with dynamic values.') . '</p>';

  foreach ($tokens as $group_name => $group) {
    if (!is_array($groups) || in_array($group_name, $groups)) {
      $items = array();
      foreach ($group['tokens'] as $token => $token_description) {
        $items[] = $token . ' - ' . $token_description;
      }
      $output .= theme('item_list', array(
        'items' => $items,
        'title' => $group['title'],
              ));
      $output .= isset($group['description']) ? '<p>' . $group['description'] . '</p>' : '';
    }
  }

  $fieldset = array(
    '#title' => t('Token values'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#children' => '<div>' . $output . '</div>',
    '#attributes' => array('class' => array('collapsible', 'collapsed')),
  );
  return theme('fieldset', array('element' => $fieldset));
}

/**
 * Convert names to ASCII code.
 *
 * @param string $name
 *   The name not already observing the code ASCII
 *
 * @return string
 *   The name replaced
 */
function _dquarks_safe_name($name) {
  $new = trim($name);

  // If transliteration is available, use it to convert names to ASCII.
  if (function_exists('transliteration_get')) {
    $new = transliteration_get($new, '');
    $new = str_replace(array(' ', '-', '/'), array('_', '_', '_'), $new);
  }
  else {
    $new = str_replace(
            array(
              ' ', '-', '/', '€', 'ƒ', 'Š', 'Ž', 'š', 'ž', 'Ÿ', '¢',
              '¥', 'µ', 'À', '�?', 'Â', 'Ã', 'Ä', 'Å', 'Ç', 'È', 'É',
              'Ê', 'Ë', 'Ì', '�?', 'Î', '�?', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ',
              'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', '�?', 'à', 'á', 'â', 'ã',
              'ä', 'å', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï',
              'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü',
              'ý', 'ÿ', 'Œ', 'œ', 'Æ', '�?', 'Þ', 'ß', 'æ', 'ð', 'þ',
            ), array(
              '_', '_', '_', 'E', 'f', 'S', 'Z', 's', 'z', 'Y', 'c', 'Y', 'u', 'A',
              'A', 'A', 'A', 'A', 'A', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I',
              'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 'a', 'a',
              'a', 'a', 'a', 'a', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o',
              'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'OE', 'oe', 'AE',
              'DH', 'TH', 'ss', 'ae', 'dh', 'th',
            ), $new
    );
  }

  $new = drupal_strtolower($new);
  $new = preg_replace('/[^a-z0-9_]/', '', $new);
  return $new;
}

/**
 * Given an email address and a name, format an e-mail address.
 *
 * @param string $address
 *   The e-mail address.
 * @param string $name
 *   The name to be used in the formatted address.
 * @param object $node
 *   The dquarks node if replacements will be done.
 * @param object $submission
 *   The dquarks submission values if replacements will be done.
 * @param boolean $encode
 *   Encode the text for use in an e-mail.
 * @param boolean $single
 *   Force a single value to be returned, even if a component expands to
 *   multiple addresses. This is useful to ensure a single e-mail will be
 *   returned for the "From" address.
 * @param string $format
 *   The e-mail format, defaults to the site-wide setting. May be either "short"
 *   or "long".
 */
function dquarks_format_email_address($address, $name, $node = NULL, $submission = NULL, $encode = TRUE, $single = TRUE, $format = NULL) {
  if (!isset($format)) {
    $format = variable_get('dquarks_email_address_format', 'long');
  }

  if ($name == 'default') {
    $name = dquarks_variable_get('dquarks_default_from_name');
  }
  elseif (is_numeric($name) && isset($node->dquarks['components'][$name])) {
    if (isset($submission->data[$name]['value'])) {
      $name = $submission->data[$name]['value'];
    }
    else {
      $name = t('Value of !component', array('!component' => $node->dquarks['components'][$name]['name']));
    }
  }

  if ($address == 'default') {
    $address = dquarks_variable_get('dquarks_default_from_address');
  }
  elseif (is_numeric($address) && isset($node->dquarks['components'][$address])) {
    if (isset($submission->data[$address]['value'])) {
      $values = $submission->data[$address]['value'];
      $address = array();
      foreach ($values as $value) {
        $address = array_merge($address, explode(',', $value));
      }
    }
    else {
      $address = t('Value of "!component"', array('!component' => $node->dquarks['components'][$address]['name']));
    }
  }

  // Convert arrays into a single value for From values.
  if ($single) {
    $address = is_array($address) ? reset($address) : $address;
    $name = is_array($name) ? reset($name) : $name;
  }

  // Address may be an array if a component value was used on checkboxes.
  if (is_array($address)) {
    foreach ($address as $key => $individual_address) {
      $address[$key] = _dquarks_filter_values($individual_address, $node, $submission, FALSE, TRUE);
    }
  }
  else {
    $address = _dquarks_filter_values($address, $node, $submission, FALSE, TRUE);
  }

  if ($format == 'long' && !empty($name)) {
    $name = _dquarks_filter_values($name, $node, $submission, FALSE, TRUE);
    if ($encode) {
      $name = mime_header_encode($name);
    }
    return '"' . $name . '" <' . $address . '>';
  }
  else {
    return $address;
  }
}

/**
 * Given an email subject, format it with any needed replacements.
 */
function dquarks_format_email_subject($subject, $node = NULL, $submission = NULL) {
  if ($subject == 'default') {
    $subject = dquarks_variable_get('dquarks_default_subject');
  }
  elseif (is_numeric($subject) && isset($node->dquarks['components'][$subject])) {
    $component = $node->dquarks['components'][$subject];
    if (isset($submission->data[$subject]['value'])) {
      $display_function = '_dquarks_display_' . $component['type'];
      $value = $submission->data[$subject]['value'];

      // Convert the value to a clean text representation if possible.
      if (function_exists($display_function)) {
        $display = $display_function($component, $value, 'text');
        $display['#theme_wrappers'] = array();
        $subject = str_replace("\n", ' ', drupal_render($display));
      }
      else {
        $subject = $value;
      }
    }
    else {
      $subject = t('Value of "!component"', array('!component' => $component['name']));
    }
  }

  // Convert arrays to strings (may happen if checkboxes are used as the value).
  if (is_array($subject)) {
    $subject = reset($subject);
  }

  return _dquarks_filter_values($subject, $node, $submission, FALSE, TRUE);
}

/**
 * Convert an array of components into a tree.
 */
function _dquarks_components_tree_build($src, &$tree, $parent, &$page_count, &$directions = NULL, &$quiz_pages = array(), &$pages_link = NULL) {

  $pages_link[0] = 0;

  foreach ($src as $cid => $component) {
    if ($component['pid'] == $parent) {
      _dquarks_components_tree_build($src, $component, $cid, $page_count, $directions, $quiz_pages);
      $tree['children'][$cid] = $component;
      $tree['children'][$cid]['page_num'] = $page_count;
      if ($component['type'] == 'multichoice') {
        $quiz_pages[$page_count] = TRUE;
      }
      if ($component['type'] == 'direction') {
        if ($component['type'] == 'direction') {
          $directions[$page_count] = $component;
        }
        $page_count++;
        $pages_link[$component['cid']] = $page_count;
      }
    }
  }
  return $tree;
}

/**
 * Flatten a component tree into a flat list.
 */
function _dquarks_components_tree_flatten($tree) {
  $components = array();
  foreach ($tree as $cid => $component) {
    if (isset($component['children'])) {
      unset($component['children']);
      $components[$cid] = $component;
      // array_merge() can't be used here because the keys are numeric.
      $children = _dquarks_components_tree_flatten($tree[$cid]['children']);
      foreach ($children as $ccid => $ccomponent) {
        $components[$ccid] = $ccomponent;
      }
    }
    else {
      $components[$cid] = $component;
    }
  }
  return $components;
}

/**
 * Helper for the uasort in dquarks_tree_sort().
 */
function _dquarks_components_sort($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return strcasecmp($a['name'], $b['name']);
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Sort each level of a component tree by weight and name.
 */
function _dquarks_components_tree_sort($tree) {
  if (isset($tree['children']) && is_array($tree['children'])) {
    $children = array();
    uasort($tree['children'], '_dquarks_components_sort');
    foreach ($tree['children'] as $cid => $component) {
      $children[$cid] = _dquarks_components_tree_sort($component);
    }
    $tree['children'] = $children;
  }
  return $tree;
}

/**
 * Get a list of all available component definitions.
 */
function dquarks_components($include_disabled = FALSE, $reset = FALSE) {
  static $components, $disabled;

  if (!isset($components) || $reset) {
    $components = array();
    $disabled = array_flip(variable_get('dquarks_disabled_components', array()));
    foreach (module_implements('dquarks_component_info') as $module) {
      $module_components = module_invoke($module, 'dquarks_component_info');
      foreach ($module_components as $type => $info) {
        $module_components[$type]['module'] = $module;
        $module_components[$type]['enabled'] = !array_key_exists($type, $disabled);
      }
      $components += $module_components;
    }
    drupal_alter('dquarks_component_info', $components);
    ksort($components);
  }

  return $include_disabled ? $components : array_diff_key($components, $disabled);
}

/**
 * Build a list of components suitable for use as select list options.
 */
function dquarks_component_options($include_disabled = FALSE) {
  $component_info = dquarks_components($include_disabled);
  $options = array();
  foreach ($component_info as $type => $info) {
    $options[$type] = $info['label'];
  }
  return $options;
}

/**
 * Load a component file into memory.
 *
 * @param string $component_type
 *   The string machine name of a component.
 */
function dquarks_component_include($component_type) {
  static $included = array();

  // No need to load components that have already been added once.
  if (!isset($included[$component_type])) {
    $components = dquarks_components(TRUE);
    $included[$component_type] = TRUE;

    if (($info = $components[$component_type]) && isset($info['file'])) {
      require_once  drupal_get_path('module', $info['module']) . '/' . $info['file'];
    }
  }
}

/**
 * Load all necessary component.inc files into memory.
 */
function dquarks_load_components($return_all = FALSE, $reset = FALSE) {
  static $component_list, $enabled_list;

  if (!isset($component_list) || $reset) {
    $component_list = array();
    $enabled_list = array();
    $path = drupal_get_path('module', 'dquarks') . '/components';
    $files = file_scan_directory($path, '/^.*\.inc$/');
    foreach ($files as $filename => $file) {
      $enabled = variable_get('dquarks_enable_' . $file->name, 1);
      if ($return_all || $enabled) {
        require_once  drupal_get_path('module', 'dquarks') . '/components/' . $file->name . '.inc';
        $component_list[$file->name] = t($file->name);
      }
      if ($enabled) {
        $enabled_list[$file->name] = t($file->name);
      }
    }
  }
  // Ensure only wanted components are returned, even all are loaded.
  return $return_all ? $component_list : array_intersect_assoc($component_list, $enabled_list);
}

/**
 * Invoke a component callback.
 *
 * @param string $type
 *   The component type as a string.
 * @param string $callback
 *   The callback to execute.
 * @param ...
 *   Any additional parameters required by the $callback.
 */
function dquarks_component_invoke($type, $callback) {
  $args = func_get_args();
  $type = array_shift($args);
  $callback = array_shift($args);
  $function = '_dquarks_' . $callback . '_' . $type;
  dquarks_component_include($type);
  if (function_exists($function)) {
    return call_user_func_array($function, $args);
  }
}

/**
 * Check if a component implements a particular hook.
 *
 * @param string $type
 *   The component type as a string.
 * @param string $callback
 *   The callback to check.
 */
function dquarks_component_implements($type, $callback) {
  $function = '_dquarks_' . $callback . '_' . $type;
  dquarks_component_include($type);
  return function_exists($function);
}

/**
 * Disable the Drupal page cache.
 */
function dquarks_disable_page_cache() {
  drupal_page_is_cacheable(FALSE);
}

/**
 * Set the necessary breadcrumb for the page we are on.
 */
function dquarks_set_breadcrumb($node, $submission = NULL) {
  $breadcrumb = drupal_get_breadcrumb();

  if (isset($node)) {
    $dquarks_breadcrumb = array();
    $dquarks_breadcrumb[] = array_shift($breadcrumb);
    $dquarks_breadcrumb[] = l($node->title, 'node/' . $node->nid);
    if (isset($submission)) {
      $last_link = array_shift($breadcrumb);
      $dquarks_breadcrumb[] = l(t('Submissions'), 'node/' . $node->nid . '/submissions');
      if (isset($last_link)) {
        $dquarks_breadcrumb[] = $last_link;
      }
    }
    $breadcrumb = $dquarks_breadcrumb;
  }

  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Convert an ISO 8601 date or time into an array.
 *
 * This converts full format dates or times. Either a date or time may be
 * provided, in which case only those portions will be returned. Dashes and
 * colons must be used, never implied.
 *
 * Formats:
 * Dates: YYYY-MM-DD
 * Times: HH:MM:SS
 * Datetimes: YYYY-MM-DDTHH:MM:SS
 *
 * @param string $string
 *   An ISO 8601 date, time, or datetime.
 * @param string $type
 *   If wanting only specific fields back, specify either "date" or "time".
 *   Leaving empty will return an array with both date and time keys, even if
 *   some are empty. Returns an array with the following keys:
 *   - year
 *   - month
 *   - day
 *   - hour (in 24hr notation)
 *   - minute
 *   - second
 */
function dquarks_date_array($string, $type = NULL) {
  $pattern = '/((\d{4}?)-(\d{2}?)-(\d{2}?))?(T?(\d{2}?):(\d{2}?):(\d{2}?))?/';
  $matches = array();
  preg_match($pattern, $string, $matches);
  $matches += array_fill(0, 9, '');

  $return = array();

  // Check for a date string.
  if ($type == 'date' || !isset($type)) {
    $return['year'] = $matches[2] !== '' ? (int) $matches[2] : '';
    $return['month'] = $matches[3] !== '' ? (int) $matches[3] : '';
    $return['day'] = $matches[4] !== '' ? (int) $matches[4] : '';
  }

  // Check for a time string.
  if ($type == 'time' || !isset($type)) {
    $return['hour'] = $matches[6] !== '' ? (int) $matches[6] : '';
    $return['minute'] = $matches[7] !== '' ? (int) $matches[7] : '';
    $return['second'] = $matches[8] !== '' ? (int) $matches[8] : '';
  }

  return $return;
}

/**
 * Convert an array of a date or time into an ISO 8601 compatible string.
 *
 * @param array $array
 *   The array to convert to a date or time string.
 * @param string $type
 *   If wanting a specific string format back specify either "date" or "time".
 *   Otherwise a full ISO 8601 date and time string will be returned.
 */
function dquarks_date_string($array, $type = NULL) {
  $string = '';

  if ($type == 'date' || !isset($type)) {
    $string .= empty($array['year']) ? '0000' : sprintf('%04d', $array['year']);
    $string .= '-';
    $string .= empty($array['month']) ? '00' : sprintf('%02d', $array['month']);
    $string .= '-';
    $string .= empty($array['day']) ? '00' : sprintf('%02d', $array['day']);
  }

  if (!isset($type)) {
    $string .= 'T';
  }

  if ($type == 'time' || !isset($type)) {
    $string .= empty($array['hour']) ? '00' : sprintf('%02d', $array['hour']);
    $string .= ':';
    $string .= empty($array['minute']) ? '00' : sprintf('%02d', $array['minute']);
    $string .= ':';
    $string .= empty($array['second']) ? '00' : sprintf('%02d', $array['second']);
  }

  return $string;
}

/**
 * Get a date format according to the site settings.
 *
 * @param string $size
 *   A choice of 'short', 'medium', or 'long' date formats.
 */
function dquarks_date_format($size = 'medium') {
  // Format date according to site's given format.
  $format = variable_get('date_format_' . $size, 'D, m/d/Y - H:i');
  $time = 'aABgGhHisueIOPTZ';
  $day_of_week = 'Dlw';
  $special = ',-: ';
  $date_format = trim($format, $time . $day_of_week . $special);

  // Ensure that a day, month, and year value are present. Use a default
  // format if all the values are not found.
  if (!preg_match('/[dj]/', $date_format) || !preg_match('/[FmMn]/', $date_format) || !preg_match('/[oYy]/', $date_format)) {
    $date_format = 'm/d/Y';
  }

  return $date_format;
}

/**
 * Return a date in the desired format taking into consideration user timezones.
 */
function dquarks_strtodate($format, $string, $timezone_name = NULL) {
  // Adjust the time based on the user or site timezone.
  if (variable_get('configurable_timezones', 1) && $timezone_name == 'user') {
    $timezone_name = isset($GLOBALS['user']->timezone) ? $GLOBALS['user']->timezone : 'UTC';
  }
  elseif (empty($timezone_name) || $timezone_name == 'user') {
    $timezone_name = variable_get('date_default_timezone', 'UTC');
  }

  if (!empty($timezone_name) && class_exists('DateTimeZone')) {
    // Suppress errors if encountered during string conversion. Exceptions are
    // only supported for DateTime in PHP 5.3 and higher.
    try {
      @$timezone = new DateTimeZone($timezone_name);
      @$datetime = new DateTime($string, $timezone);
      return @$datetime->format($format);
    }
    catch (Exception $e) {
      return '';
    }
  }
  else {
    return date($format, strtotime($string));
  }
}

/**
 * Get a timestamp in GMT time, ensuring timezone accuracy.
 */
function dquarks_strtotime($date) {
  $current_tz = date_default_timezone_get();
  date_default_timezone_set('UTC');
  $timestamp = strtotime($date);
  date_default_timezone_set($current_tz);
  return $timestamp;
}

/**
 * Wrapper function for tt() if i18nstrings enabled.
 */
function dquarks_tt($name, $string, $langcode = NULL, $update = FALSE) {
  if (function_exists('tt')) {
    return tt($name, $string, $langcode, $update);
  }
  else {
    return $string;
  }
}

/**
 * Check if any available HTML mail handlers are available for dquarks to use.
 */
function dquarks_email_html_capable() {
  // TODO: Right now we only support MIME Mail. Support others if available
  // through a hook?
  if (module_exists('mimemail')) {
    $mail_systems = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
    $enable = !isset($mail_systems['dquarks']) || $mail_systems['dquarks'] == 'MimeMailSystem';

    // We assume that if a solution exists even if it's not specified we should
    // use it. dquarks will specify if e-mails sent with the system are plain-
    // text or not when sending each e-mail.
    if ($enable) {
      $GLOBALS['conf']['mail_system']['dquarks'] = 'MimeMailSystem';
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_views_api().
 */
function dquarks_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'dquarks') . '/views',
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function dquarks_field_extra_fields() {
  $extra = array();
  foreach (dquarks_variable_get('dquarks_node_types') as $type) {
    $extra['node'][$type]['display']['dquarks'] = array(
      'label' => t('dquarks'),
      'description' => t('dquarks client form.'),
      'weight' => 10,
    );
  }
  return $extra;
}

/**
 * Implements hook_mollom_form_list().
 */
function dquarks_mollom_form_list() {
  $forms = array();
  $dquarks_types = dquarks_variable_get('dquarks_node_types');
  if (empty($dquarks_types)) {
    return $forms;
  }

  $result = db_select('node', 'n')
          ->fields('n', array('nid', 'title'))
          ->condition('n.type', $dquarks_types, 'IN')
          ->execute();

  foreach ($result as $node) {
    $form_id = 'dquarks_client_form_' . $node->nid;
    $forms[$form_id] = array(
      'title' => t('@name form', array('@name' => $node->title)),
      'entity' => 'dquarks',
      'delete form' => 'dquarks_submission_delete_form',
    );
  }
  return $forms;
}

/**
 * Implements hook_mollom_form_info().
 */
function dquarks_mollom_form_info($form_id) {
  require_once  drupal_get_path('module', 'dquarks') . '/includes/dquarks.components.inc';

  $nid = drupal_substr($form_id, 20);
  $node = node_load($nid);
  $form_info = array(
    'title' => t('@name form', array('@name' => $node->title)),
    'mode' => MOLLOM_MODE_ANALYSIS,
    'bypass access' => array('edit all dquarks submissions', 'edit any dquarks content'),
    'entity' => 'dquarks',
    'elements' => array(),
    'mapping' => array(
      'post_id' => 'details][sid',
      'author_id' => 'details][uid',
    ),
  );
  // Add components as elements.
  // These components can be enabled for textual analysis (when not using a
  // CAPTCHA-only protection) in Mollom's form configuration.
  foreach ($node->dquarks['components'] as $cid => $component) {
    if (dquarks_component_feature($component['type'], 'spam_analysis')) {
      $parents = implode('][', dquarks_component_parent_keys($node, $component));
      $form_info['elements']['submitted][' . $parents] = check_plain(t($component['name']));
    }
  }
  // Assign field mappings based on dquarks configuration.
  // Since multiple emails can be configured, we iterate over all and take
  // over the assigned component for the field mapping in any email, unless
  // we already assigned one. We are not interested in administratively
  // configured static strings, only user-submitted values.
  foreach ($node->dquarks['emails'] as $email) {
    // Subject (post_title).
    if (!isset($form_info['mapping']['post_title'])) {
      $cid = $email['subject'];
      if (is_numeric($cid)) {
        $parents = implode('][', dquarks_component_parent_keys($node, $node->dquarks['components'][$cid]));
        $form_info['mapping']['post_title'] = 'submitted][' . $parents;
      }
    }
    // From name (author_name).
    if (!isset($form_info['mapping']['author_name'])) {
      $cid = $email['from_name'];
      if (is_numeric($cid)) {
        $parents = implode('][', dquarks_component_parent_keys($node, $node->dquarks['components'][$cid]));
        $form_info['mapping']['author_name'] = 'submitted][' . $parents;
      }
    }
    // From address (author_mail).
    if (!isset($form_info['mapping']['author_mail'])) {
      $cid = $email['from_address'];
      if (is_numeric($cid)) {
        $parents = implode('][', dquarks_component_parent_keys($node, $node->dquarks['components'][$cid]));
        $form_info['mapping']['author_mail'] = 'submitted][' . $parents;
      }
    }
  }

  return $form_info;
}

/**
 * Determine which one are appropriate for a particular use.
 *
 * @param array $components
 *   An array of components.
 * @param string $type
 *   Either 'email' or 'string' (for use as subject or from value).
 */
function _dquarks_component_options($components, $type) {
  // Given a set of components, determine which one are appropriate for a
  // particular use, such as an email address or subject.
  $acceptable_types = $type == 'email' ? array('email') : array('textfield');
  $options = array();
  foreach ((array) $components as $cid => $component) {
    if (in_array($component['type'], $acceptable_types)) {
      $options[$cid] = $component['name'];
    }
  }
  return $options;
}

/**
 * Load the next page of a multipage quizz.
 *
 * @param array $form_state
 *   The current form values of a submission, used in multipage dquarks.
 * @param array $components
 *   An array of components.
 * @param array $direction
 *   An array of form items describing the component.
 * @param array $pages_links
 *   An array of page links
 * @param int $page_num
 *   The current number page
 *
 * @return int
 *   The id of the next page
 */
function _dquarks_direction_get_next_page($form_state, $components, $direction, $pages_links, $page_num) {
  $return = $pages_links[$direction['extra']['default_jump']];
  $listes_des_tests = array();
  _dquarks_direction_load_tests($listes_des_tests, $direction);

  foreach ($listes_des_tests as $test) {
    if (empty($test['tested_field'])) {
      continue;
    }
    $test_field = $components[$test['tested_field']];
    $value = _dquarks_direction_find_value($form_state['storage']['submitted'], $test_field['form_key']);

    switch ($test['test_type']) {
      case 0:
        if (strcmp(strtolower($test['testvalue']), strtolower($value)) == 0) {
          $return = $pages_links[$test['next_jump']];
          break 2;
        }
        break;

      case 1:
        if (strcmp(strtolower($test['testvalue']), strtolower($value)) != 0) {
          $return = $pages_links[$test['next_jump']];
          break 2;
        }
        break;

      case 2:
        if (strpos(strtolower($test['testvalue']), strtolower($value)) !== FALSE) {
          $return = $pages_links[$test['next_jump']];
          break 2;
        }
        break;

      case 3:
        if (strpos(strtolower($test['testvalue']), strtolower($value)) === FALSE) {
          $return = $pages_links[$test['next_jump']];
          break 2;
        }
        break;

      case 4:
        if ((int) $test['testvalue'] < (int) strtolower($value)) {
          $return = $pages_links[$test['next_jump']];
          break 2;
        }
        break;

      case 5:
        if ((int) $test['testvalue'] > (int) strtolower($value)) {
          $return = $pages_links[$test['next_jump']];
          break 2;
        }
        break;

      case 6:
        if (DateTime($test['testvalue']) < DateTime(strtolower($value))) {
          $return = $pages_links[$test['next_jump']];
          break 2;
        }
        break;

      case 7:
        if (DateTime($test['testvalue']) > DateTime(strtolower($value))) {
          $return = $pages_links[$test['next_jump']];
          break 2;
        }
        break;
    }
  }
  return ($return == 0) ? ++$page_num : $return;
}

/**
 * Creating a submit or a next page button depending on the user's current page.
 *
 * @param object $node
 *   The dquarks node object.
 * @param array $form
 *   An array of form items.
 * @param array $form_state
 *   An array of form items.
 * @param int $page_num
 *   The current page num.
 * @param int $page_count
 *   The number of pages.
 * @param string $next_page
 *   The number of next page
 * @param array $quiz_pages
 *   An array of the page numbers of quiz
 */
function dquarks_client_form_add_submit_button($node, &$form, $form_state, $page_num, $page_count, $next_page, $quiz_pages) {
  if (($node->dquarks['result_pos'] == 1) && ((!isset($form_state['storage'])) || (isset($form_state['storage']) && isset($form_state['storage']["shown_result"][$page_num]) && $form_state['storage']["shown_result"][$page_num] < 1))) {
    if (isset($quiz_pages[$page_num]) && ($quiz_pages[$page_num])) {
      $next_page = t('Submit response');
    }
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => $next_page,
      '#weight' => 1001,
    );
    return;
  }
  if (
          ($page_num == $page_count) &&
          (
          (!$node->dquarks['result_pos']) ||
          ($node->dquarks['result_pos'] && isset($form_state['storage']["shown_result"][$page_num]) && $form_state['storage']["shown_result"][$page_num] >= 1)
          )
  ) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => empty($node->dquarks['submit_text']) ? t('Submit') : $node->dquarks['submit_text'],
      '#weight' => 1001,
    );
    return;
  }
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => $next_page,
    '#weight' => 1001,
  );
}

/**
 * Find value in the direction component.
 *
 * @param array $submitted_values
 *   All the submitted values
 * @param string $name
 *   The name of direction component
 *
 * @return int
 *   The value in the direction component.
 */
function _dquarks_direction_find_value($submitted_values, $name) {
  if (array_key_exists($name, $submitted_values)) {

    if (is_array($submitted_values[$name])) {
      $keys = array_keys($submitted_values[$name]);
      return $submitted_values[$name][$keys[0]];
    }
    else {
      return $submitted_values[$name];
    }
  }

  foreach ($submitted_values as $next_values) {
    if (!is_array($next_values)) {
      continue;
    }
    else {
      $value = _dquarks_direction_find_value($next_values, $name);
      if ($value != NULL) {
        return $value;
      }
    }
  }
  return NULL;
}

/**
 * Post processes the submission tree with any updates from components.
 *
 * @param object $node
 *   The full dquarks node.
 * @param array $form_values
 *   The form values for the form.
 * @param bool $score_only
 *   Display only score or also results
 * @param string $types
 *   Optional. Specific types to perform processing.
 * @param int $parent
 *   Internal use. The current parent CID whose children are being processed.
 */
function _dquarks_client_form_submit_process($node, &$form_values, $score_only = FALSE, $types = NULL, $parent = 0) {
  $return = array('messages' => array(), 'note' => 0, 'max_score' => 0);
  if (is_array($form_values)) {
    foreach ($form_values as $form_key => $value) {
      $cid = dquarks_get_cid($node, $form_key, $parent);
      if (is_array($value) && isset($node->dquarks['components'][$cid]['type']) && $node->dquarks['components'][$cid]['type'] == 'fieldset') {
        _dquarks_client_form_submit_process($node, $form_values[$form_key], $score_only, $types, $cid);
      }
      if (isset($node->dquarks['components'][$cid])) {
        $component = $node->dquarks['components'][$cid];
        $submit_function = '_dquarks_submit_' . $component['type'];
        if (function_exists($submit_function) && (!isset($types) || in_array($component['type'], $types))) {
          // Call the component process submission function.
          $result = $submit_function($form_values[$component['form_key']], $component);
          $return["messages"] = array_merge($return["messages"], $result["message"]);
          $return["note"] += $result["note"];
          $return["max_score"] += $result["max_score"];
        }
        elseif (function_exists($submit_function) && $score_only) {
          $data = $form_values[$component['form_key']];
          $result = $submit_function($data, $component);
          $return["messages"] = array_merge($return["messages"], $result["message"]);
          $return["note"] += $result["note"];
          $return["max_score"] += $result["max_score"];
        }
      }
    }
  }
  return $return;
}

/**
 * Call to the function of delete rule of direction component type.
 *
 * @param array $form
 *   An array of form items.
 * @param array $form_state
 *   An array of form items.
 * @param object $node
 *   The dquarks node object.
 * @param array $component
 *   The component of the dquarks node.
 * @param string $rule
 *   The rule to delete.
 *
 * @return Array
 *   Call another function or display message
 */
function dquarks_component_delrule_form($form, $form_state, $node, $component, $rule) {
  // Load all component types.
  dquarks_load_components();
  $delrule_function = '_dquarks_delrule_' . $component['type'];
  if (function_exists($delrule_function)) {
    // Call the component render function.
    return $delrule_function($form_state, $node, $component, $rule);
  }
  else {
    drupal_set_message(t('The Quiz component of type @type does not have an delrule function defined.', array(
              '@type' => $component['type'],
            )));
  }
}

/**
 * Delete rule of direction component.
 *
 * @param array $form
 *   An array of form items.
 * @param array $form_state
 *   An array of form items.
 */
function dquarks_component_delrule_form_submit($form, &$form_state) {
  drupal_set_message(t('The %name rule deleted.', array('%name' => $form_state['values']['rule']->test_name)));
  // Load all component types.
  dquarks_load_components();
  $delrule_function = '_dquarks_delrule_submit_' . $form_state['values']['component']['type'];
  if (function_exists($delrule_function)) {
    // Call the component render function.
    $delrule_function($form, $form_state);
  }
  else {
    drupal_set_message(t('The Quiz component of type @type does not have an delrule function defined.', array(
              '@type' => $form_state['values']['component']['type'],
            )));
  }
  $form_state['redirect'] = array('node/' . $form_state['values']['node']->nid . '/dquarks/components/' . $form_state['values']['component']['cid']);
}

/**
 * Load a specific rules of direction component.
 *
 * @param object $node
 *   The dquarks node object.
 * @param object $component
 *   The direction component of quizz.
 * @param int $ruleid
 *   Id of rule.
 *
 * @return Array
 *   The rule of direction component
 */
function dquarks_component_loadrule($node, $component, $ruleid) {
  // Load all component types.
  dquarks_load_components();
  $loadrule_function = '_dquarks_loadrule_' . $component['type'];
  if (function_exists($loadrule_function)) {
    // Call the component render function.
    return $loadrule_function($node, $component, $ruleid);
  }
  else {
    return NULL;
  }
}
