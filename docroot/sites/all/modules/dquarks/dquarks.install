<?php

/**
 * @file
 * dquarks module install/schema hooks.
 */

/**
 * Implements hook_schema().
 */
function dquarks_schema() {
  $schema = array();

  $schema['dquarks'] = array(
    'description' => 'Table for storing additional properties for dquarks nodes.',
    'fields' => array(
      'nid' => array(
        'description' => 'The node identifier of a dquarks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'confirmation' => array(
        'description' => 'The confirmation message or URL displayed to the user after submitting a form.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'result_pos' => array(
        'description' => 'Show result position',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'show_score' => array(
        'description' => 'Show score',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'mail_add_result' => array(
        'description' => 'Add rÃ©sult on mails',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'teaser' => array(
        'description' => 'Boolean value for whether the entire form should be displayed on the teaser.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'submit_text' => array(
        'description' => 'The title of the submit button on the form.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'submit_limit' => array(
        'description' => 'The number of submissions a single user is allowed to submit within an interval. -1 is unlimited.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => -1,
      ),
      'submit_interval' => array(
        'description' => 'The amount of time in seconds that must pass before a user can submit another submission within the set limit.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => -1,
      ),
      'email' => array(
        'description' => 'The primary e-mail address for receiving submission results.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'email_from_name' => array(
        'description' => 'The name of the sender in sent submission e-mails.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'email_from_address' => array(
        'description' => 'The address of the sender in sent submission e-mails.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'email_subject' => array(
        'description' => 'The subject of sent submission e-mails',
        'type' => 'varchar',
        'length' => 255,
      ),
      'block' => array(
        'description' => 'Boolean value for whether this form be available as a block.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'quiz_notify_message_subject' => array(
        'description' => 'Message object of notification mail.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
      ),
      'quiz_notify_message_content' => array(
        'description' => 'Default notification message content.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'quiz_notify_mails_list' => array(
        'description' => 'Mails list',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['dquarks_component'] = array(
    'description' => 'Stores information about components for dquarks nodes.',
    'fields' => array(
      'nid' => array(
        'description' => 'The node identifier of a dquarks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'description' => 'The identifier for this component within this node, starts at 0 for each node.',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'If this component has a parent fieldset, the cid of that component.',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'form_key' => array(
        'description' => 'When the form is displayed and processed, this key can be used to reference the results.',
        'type' => 'varchar',
        'length' => 128,
      ),
      'name' => array(
        'description' => 'The label for this component.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'type' => array(
        'description' => 'The field type of this component (textfield, select, hidden, etc.).',
        'type' => 'varchar',
        'length' => 16,
      ),
      'value' => array(
        'description' => 'The default value of the component when displayed to the end-user.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'extra' => array(
        'description' => 'Additional information unique to the display or processing of this component.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'email' => array(
        'description' => 'Boolean flag for if submitted values for this component will be included in sent e-mails.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'mandatory' => array(
        'description' => 'Boolean flag for if this component is required.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'Determines the position of this component in the form.',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'cid'),
  );

  $schema['dquarks_roles'] = array(
    'description' => 'Holds access information regarding which roles are allowed to submit which dquarks nodes. Does not prevent access to the dquarks node entirely, use the {node_access} table for that purpose.',
    'fields' => array(
      'nid' => array(
        'description' => 'The node identifier of a dquarks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rid' => array(
        'description' => 'The role identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'rid'),
  );

  $schema['dquarks_submissions'] = array(
    'description' => 'Holds general information about submissions outside of field values.',
    'fields' => array(
      'sid' => array(
        'description' => 'The unique identifier for this submission.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The node identifier of a dquarks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The id of the user that completed this submission.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'is_draft' => array(
        'description' => 'Is this a draft of the submission?',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'submitted' => array(
        'description' => 'Timestamp of when the form was submitted.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'remote_addr' => array(
        'description' => 'The IP address of the user that submitted the form.',
        'type' => 'varchar',
        'length' => 128,
      ),
      'score' => array(
        'description' => 'Score submission',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_score' => array(
        'description' => 'Max score',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('sid'),
    'unique keys' => array(
      'sid_nid' => array('sid', 'nid'),
    ),
    'indexes' => array(
      'nid_uid_sid' => array('nid', 'uid', 'sid'),
    ),
  );

  $schema['dquarks_submitted_data'] = array(
    'description' => 'Stores all submitted field data for dquarks submissions.',
    'fields' => array(
      'nid' => array(
        'description' => 'The node identifier of a dquarks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'sid' => array(
        'description' => 'The unique identifier for this submission.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'description' => 'The identifier for this component within this node, starts at 0 for each node.',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'no' => array(
        'description' => 'Usually this value is 0, but if a field has multiple values (such as a time or date), it may require multiple rows in the database.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '0',
      ),
      'data' => array(
        'description' => 'The submitted value of this field, may be serialized for some components.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('nid', 'sid', 'cid', 'no'),
    'indexes' => array(
      'nid' => array('nid'),
      'sid_nid' => array('sid', 'nid'),
    ),
  );

  $schema['dquarks_direction_tests'] = array(
    'description' => 'Save tests related to direction components',
    'fields' => array(
      'nid' => array(
        'description' => 'The node identifier',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'description' => 'The node identifier of the component',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'testid' => array(
        'description' => 'The identifier for the test to do',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'test_name' => array(
        'description' => 'The name of the test to do',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'tested_field' => array(
        'description' => 'The field to test',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'test_type' => array(
        'description' => 'The type of the test to do',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'The test weight',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'testvalue' => array(
        'description' => 'Test value',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'next_jump' => array(
        'description' => 'Test value',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'testid_cid' => array('nid', 'testid', 'cid'),
    ),
    'primary key' => array('nid', 'cid', 'testid'),
  );


  return $schema;
}

/**
 * Implements hook_install().
 */
function dquarks_install() {
  module_load_include('inc', 'node', 'content_types');

  // Create the default dquarks type.
  $dquarks_type = array(
    'type' => 'dquarks',
    'name' => 'dquarks',
    'base' => 'node_content',
    'description' => 'Create a new form or questionnaire accessible to users. Submission results and statistics are recorded and accessible to privileged users.',
    'custom' => TRUE,
    'modified' => TRUE,
    'locked' => FALSE,
  );
  $dquarks_type = node_type_set_defaults($dquarks_type);
  node_type_save($dquarks_type);
  node_add_body_field($dquarks_type);
}

/**
 * Implements hook_uninstall().
 */
function dquarks_uninstall() {
  // Unset dquarks variables.
  variable_del('dquarks_node_types');
  variable_del('dquarks_node_types_primary');
  variable_del('dquarks_use_cookies');
  variable_del('dquarks_default_from_address');
  variable_del('dquarks_default_from_name');
  variable_del('dquarks_default_subject');
  variable_del('dquarks_default_format');
  variable_del('dquarks_format_override');
  variable_del('dquarks_csv_delimiter');
  variable_del('dquarks_allowed_tags');
  variable_del('dquarks_blocks');

  $component_list = array();
  $path = drupal_get_path('module', 'dquarks') . '/components';
  $files = file_scan_directory($path, '/^.*\.inc$/');
  foreach ($files as $filename => $file) {
    variable_del('dquarks_enable_' . $file->name, 1);
  }

  // Delete uploaded files.
  $filepath = file_build_uri('dquarks');
  file_unmanaged_delete_recursive($filepath);
}

/**
 * Set the minimum upgrade version.
 *
 * Currently you cannot upgrade from 2.x in Drupal 6 to 3.x in Drupal 7. However
 * there are no database changes between the 3.x versions, so no update is
 * needed at all to move from 3.x in Drupal 6 to Drupal 7.
 */
function dquarks_update_last_removed() {
  return 6313;
}

/**
 * Add field for block feature and redirection setting.
 */
function dquarks_update_7304() {
  if (!db_field_exists('dquarks', 'block')) {
    db_add_field('dquarks', 'block', array(
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE, 'default' => 0)
    );
    db_change_field('dquarks', 'redirect_url', 'redirect_url', array(
      'type' => 'varchar',
      'length' => 255,
      'default' => '<confirmation>')
    );
    db_update('dquarks')
            ->fields(array('redirect_url' => 'confirmation'))
            ->condition('redirect_url', '')
            ->execute();
  }
}

/**
 * Remove orphaned and unnecessary rows in the dquarks table.
 */
function dquarks_update_7310() {
  $result = db_query("SELECT nid FROM {dquarks} WHERE
    nid NOT IN
    (SELECT DISTINCT(w1.nid) FROM {dquarks} w1 INNER JOIN {dquarks_component} wc ON w1.nid = wc.nid)
    AND nid NOT IN
    (SELECT w2.nid FROM {dquarks} w2 INNER JOIN {node} n ON w2.nid = n.nid WHERE n.type = 'dquarks')"
  );
  $empty_nids = array();
  foreach ($result as $row) {
    $empty_nids[] = $row->nid;
  }
  if (!empty($empty_nids)) {
    db_delete('dquarks')->condition('nid', $empty_nids, 'IN')->execute();
  }
}

/**
 * Add an index for sid_nid_uid to dquarks_submissions.
 */
function dquarks_update_7311() {
  if (!db_index_exists('dquarks_submissions', 'nid_uid_sid')) {
    db_add_index('dquarks_submissions', 'nid_uid_sid', array(
      'nid',
      'uid',
      'sid',
            )
    );
  }
}

/**
 * Remove unused dquarks variables.
 */
function dquarks_update_7312() {
  variable_del('node_types');
  variable_del('components');
}

/**
 * Convert the Date component start and end year options to start and end date.
 */
function dquarks_update_7313() {
  $result = db_select('dquarks_component', 'wc', array('fetch' => PDO::FETCH_ASSOC))
          ->fields('wc')
          ->condition('type', 'date')
          ->execute();
  foreach ($result as $component) {
    $component['extra'] = unserialize($component['extra']);
    if (!isset($component['extra']['start_date']) && !isset($component['end_date'])) {
      foreach (array('year_start' => 'start_date', 'year_end' => 'end_date') as $key => $replacement) {
        $value = isset($component['extra'][$key]) ? trim($component['extra'][$key]) : '';
        // Relative years.
        if (preg_match('/[-+][ ]*[0-9]+/', $value)) {
          $component['extra'][$replacement] = ($value == 1) ? ($value . ' year') : ($value . ' years');
        }
        // Absolute years.
        elseif (is_numeric($value)) {
          $component['extra'][$replacement] = 'Dec 31 ' . $value;
        }
        unset($component['extra'][$key]);
      }
      $component['extra'] = serialize($component['extra']);
      drupal_write_record('dquarks_component', $component, array('nid', 'cid'));
    }
  }
}

/**
 * Add dquarks_last_download table to store last downloaded sid per user.
 */
function dquarks_update_7314() {
  // Safety check to prevent recreating the dquarks_last_download table.
  if (db_table_exists('dquarks_last_download')) {
    return;
  }

  $schema['dquarks_last_download'] = array(
    'description' => 'Stores last submission number per user download.',
    'fields' => array(
      'nid' => array(
        'description' => 'The node identifier of a dquarks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The user identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'sid' => array(
        'description' => 'The last downloaded submission number.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'uid'),
  );
  db_create_table('dquarks_last_download', $schema['dquarks_last_download']);
}

/**
 * Add column for timestamp of last requested CSV download.
 */
function dquarks_update_7315() {
  if (!db_field_exists('dquarks_last_download', 'requested')) {
    db_add_field('dquarks_last_download', 'requested', array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      ));
  }
}

/**
 * Add additional columns for total submission limit.
 */
function dquarks_update_7316() {
  if (!db_field_exists('dquarks', 'total_submit_interval')) {
    db_add_field('dquarks', 'total_submit_interval', array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => -1,
    ));
  }
}
