<?php

/**
 * Implements hook_menu().
 *
 * @return array
 */
function infodesk_summer_reading_menu() {
  $url = variable_get('infodesk_summer_reading_url', 'summer-reading');
  $items[$url . '/register'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_register_form'),
    'access callback' => 'user_register_access',
  );
  $items['admin/config/user-interface/summer-reading'] = array(
    'title' => 'Summer Reading Program',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('infodesk_summer_reading_admin_form'),
    'access arguments' => 'administer summer reading message',
  );
  return $items;
}

/**
 * Custom admin form for changing summer reading time tracker submission message.
 *
 * @return array system_settings_form
 */
function infodesk_summer_reading_admin_form() {
  $form = array();

  $url = variable_get('infodesk_summer_reading_url', 'summer-reading');
  $form['infodesk_summer_reading_url'] = array(
    '#type' => 'text',
    '#title' => t('Summer Reading Program URL'),
    '#description' => 'Path to summer reading program login',
    '#default_value' => $url,
  );

  $submit_message = variable_get('infodesk_summer_reading_submit_message', '');
  $form['infodesk_summer_reading_submit_message'] = array(
    '#type' => 'text_format',
    '#title' => t('Message to display to user after time tracker submission'),
    '#default_value' => $submit_message['value'],
    '#format' => $submit_message['format'],
  );

  return system_settings_form($form);
}

/**
 * Implements hook_page_build().
 *
 * @param $page
 */
function infodesk_summer_reading_page_build(&$page) {
  $path = current_path();
  $path_alias = drupal_lookup_path('alias', $path);
  $infodesk_summer_reading_url = variable_get('infodesk_summer_reading_url', 'summer-reading');

  if ($path_alias == $infodesk_summer_reading_url) {
    $block = drupal_get_form('user_login');
    $blocks['summer_reading_login'] = array('#markup' => render($block));
    $blocks['summer_reading_or_register'] = array(
      '#markup' =>
        '<span id="register_or">or</span>
         <form action="' . $infodesk_summer_reading_url . '/register" method="get">
           <div class="form-actions">
             <input type="submit" value="Register" id="register_submit"/>
           </div>
         </form>'
    );

    if (is_array($page['content'])) {
      // Add to top of array in reverse order
      array_unshift($page['content'], $blocks['summer_reading_or_register']);
      array_unshift($page['content'], $blocks['summer_reading_login']);
    }
    else {
      $page['content'] = $blocks['summer_reading_login'];
    }
  }

  $path_array = explode('/', $path);
  if (reset($path_array) == 'user' && isset($page['content']['system_main']['summary'])) {
    unset($page['content']['system_main']['summary']);
    unset($page['content']['system_main']['time_tracker']['entries']);
    unset($page['content']['system_main']['time_tracker']['time_tracker_summary']);

    /*
     * Hide all fields
     */
    foreach ($page['content']['system_main'] as $display_item => $data) {
      if (strpos($display_item, 'field_') === 0) {
        unset($page['content']['system_main'][$display_item]);
      }
    }

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @FORM_ID time_tracker_time_entry_form
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function infodesk_summer_reading_form_time_tracker_time_entry_form_alter(&$form, &$form_state, $form_id) {
  $form['time_tracker']['time_entry']['duration']['#title'] = 'Minutes';
  $form['time_tracker']['time_entry']['duration']['#description'] = 'Time spent reading.';
  $form['#validate'][] = 'infodesk_summer_reading_time_entry_validate';
  $form['#validate'][] = 'infodesk_summer_reading_time_entry_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @FORM_ID user_register_form
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function infodesk_summer_reading_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $infodesk_summer_reading_url = variable_get('infodesk_summer_reading_url', 'summer-reading');
  if (arg(0) == $infodesk_summer_reading_url) {
    $form['account']['roles']['#access'] = FALSE;
    $form['#submit'][] = 'infodesk_summer_reading_assign_reader_role';
    $ldap_fields = infodesk_summer_reading_preg_grep_keys('/(ldap_)/is', $form);
    foreach ($ldap_fields as $key => $ldap_field) {
      $form[$key]['#access'] = FALSE;
    }
    $form['field_subuser_limit']['#access'] = FALSE;
    $form['subuser_relation']['#title'] = 'This is my child';
  }
}

/**
 * Runs a match on the array's keys rather than the values.
 *
 * @param $pattern
 * @param $input
 * @param int $flags
 * @return array
 */
function infodesk_summer_reading_preg_grep_keys($pattern, $input, $flags = 0) {
  return array_intersect_key($input, array_flip(preg_grep($pattern, array_keys($input), $flags)));
}

/**
 * Implements hook_block_info().
 */
function infodesk_summer_reading_block_info() {
  $blocks['summer_reading_user_minutes'] = array(
    'info' => t('Summer Reading User Minutes')
  );

  $blocks['summer_reading_total_minutes'] = array(
    'info' => t('Summer Reading Total Minutes'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function infodesk_summer_reading_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
    case 'summer_reading_user_minutes':
      if ($user->uid) {
        $block['content'] = infodesk_summer_reading_get_total_minutes($user->uid) . ' minutes';
      }
      break;
    case 'summer_reading_total_minutes':
      $block['content'] = infodesk_summer_reading_get_total_minutes() . ' minutes';
      break;
  }

  return $block;
}

/**
 * Returns sum of all logged summer reading minutes.
 *
 * @param null $uid if provided, returns specific user's total minutes
 * @return float
 */
function infodesk_summer_reading_get_total_minutes($uid = NULL) {
  if ($uid) { // Get user's minutes
    $result = db_query('SELECT t.duration FROM {time_tracker_entry} t WHERE t.uid= :uid', array(':uid' => $uid));
  }
  else { // Get all minutes
    $result = db_query('SELECT t.duration FROM {time_tracker_entry} t');
  }
  $total_minutes = round(array_sum($result->fetchCol()) * 60); // Convert hours to minutes
  return $total_minutes;
}

/**
 * Custom validate callback for parsing duration.
 *
 * @param $form
 * @param $form_state
 */
function infodesk_summer_reading_time_entry_validate($form, &$form_state) {
  $minutes = $form_state['values']['duration'];
  if (!$form_state['values']['duration'] = infodesk_summer_reading_format_minutes_to_hours_and_minutes($minutes)) {
    form_set_error('duration', 'Please enter a value greater than 1 for Minutes.');
  };
}

/**
 * Custom submit callback for displaying encouragement message.
 *
 * @param $form
 * @param $form_state
 */
function infodesk_summer_reading_time_entry_submit($form, &$form_state) {
  $message = variable_get('infodesk_summer_reading_submit_message');
  drupal_set_message($message['value']);
}

/**
 * Custom submit callback for adding reader role to new user.
 *
 * @param $form
 * @param $form_state
 */
function infodesk_summer_reading_assign_reader_role($form, &$form_state) {
  $role = user_role_load_by_name('reader');
  user_multiple_role_edit(array($form_state['user']->uid), 'add_role', $role->rid);
}

/**
 * Converts time from minutes to hours and minutes.
 * e.g. input => 90 output => 1:30
 *
 * @param $time
 * @param string $format
 * @return string
 */
function infodesk_summer_reading_format_minutes_to_hours_and_minutes($minutes, $format = '%d:%d') {
  settype($minutes, 'integer');
  if ($minutes < 1) {
    return FALSE;
  }
  $hours = floor($minutes / 60);
  $minutes = ($minutes % 60);
  return sprintf($format, $hours, $minutes);
}

/**
 * Converts time from hours to minutes.
 * e.g. input => 1.25 output => 75
 *
 * @param $hours
 * @return string
 */
function infodesk_summer_reading_format_hours_to_minutes($hours) {
  return isset($hours) ? $hours * 60 : 0;
}
