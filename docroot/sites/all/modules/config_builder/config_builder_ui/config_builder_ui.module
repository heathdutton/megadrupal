<?php
/**
 * @file
 * Contains administration functions for the Configuration Builder module.
 */

/**
 * Include additional files.
 */
foreach (module_list() as $module) {
  if (file_exists($file = dirname(__FILE__) . "/includes/{$module}.inc")) {
    require_once $file;
  }
}

/**
 * Implements hook_init().
 */
function config_builder_ui_init() {
  if (strstr(request_uri(), 'system/ajax') && 'config_builder_export_ui_export_form' == $_POST['form_id']) {
    require_once drupal_get_path('module', 'config_builder_ui') . '/plugins/export_ui/config_builder_ui.inc';
  }
}

/**
 * Implements hook_theme().
 */
function config_builder_ui_theme() {
  $items = array();

  $items['config_builder_export'] = array(
    'variables' => array(
      'item' => NULL,
      'module' => NULL,
    ),
    'template' => 'templates/config_builder_export',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function config_builder_ui_permission() {
  return array(
    'administer config builder' => array(
      'title' => t('Administer Configuration builder'),
    ),
  );
}

/**
 * Implements hook_flush_caches().
 */
function config_builder_flush_caches() {
//  db_delete('form_builder_cache')
//    ->condition('type', 'config_builder')
//    ->execute();
  form_builder_crud_index_save();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function config_builder_ui_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/{$plugin}";
  }
}

/**
 * Preprocess function for 'config_builder_export'.
 */
function config_builder_ui_preprocess_config_builder_export(&$vars) {
  // Inject 'variable_get' placeholder into default values.
  $form = $vars['item']->fapi;
  _config_builder_ui_recurse_export_default_value($form);

  // Turn $form into a string and cleaup.
  module_load_include('module', 'form_builder_examples');
  $lines = explode("\n", form_builder_examples_export($form));
  foreach ($lines as &$line) {
    $line = "  {$line}\n";
    if (strstr($line, '#default_value')) {
      $line = preg_replace('/(.*?=> )(\')(.*?)(,\')/', "$1$3", $line);
      $line = str_replace("\'", "'", $line);
    }
  }
  $lines[count($lines) - 1] = "  return system_settings_form(\$form);\n";
  $vars['form'] = implode('', $lines);

  // Get index for individual FAPI elements.
  $vars['index'] = config_builder_crud_index_load(NULL, $vars['item']->name);
  if (empty($vars['index'])) {
    _config_builder_recurse_index($vars['item']->fapi, $vars['item']);
    $vars['index'] = config_builder_crud_index_load(NULL, $vars['item']->name);
    form_builder_crud_index_save();
  }

  // Access settings.
  switch ($vars['item']->access['type']) {
    case 'config_builder_role_access':
      $vars['access'] = array(
        'type' => "{$vars['module']}_role_access",
        "{$vars['module']}_role_access" => "array('" . implode("', '", element_children($vars['item']->access['config_builder_role_access'])) . "')",
      );
      break;

    case 'user_access':
      $vars['access'] = array(
        'type' => 'user_access',
        'user_access' => "'{$vars['item']->access['user_access']}'",
      );
      break;
  }
}

/**
 * Recursively inject 'variable_get' placeholder into default values.
 */
function _config_builder_ui_recurse_export_default_value(&$form) {
  foreach (element_children($form) as $key) {
    $recurse = TRUE;

    // Standard fields.
    if (!in_array($form[$key]['#type'], array('fieldset')) && isset($form[$key]['#title'])) {
      $form[$key]['#default_value'] = is_array($form[$key]['#default_value'])
        ? "array('" . implode("', '", array_values($form[$key]['#default_value'])) . "')"
        : $form[$key]['#default_value'] = "'{$form[$key]['#default_value']}'";
      $form[$key]['#default_value'] = "variable_get('{$key}', {$form[$key]['#default_value']}),";
    }

    // Index #tree fieldsets.
    // @TODO - Add default values for children of fieldset.
    elseif ('fieldset' == $form[$key]['#type'] && isset($form[$key]['#tree']) && $form[$key]['#tree']) {
      $recurse = FALSE;
    }

    // Recurse through element children.
    if (TRUE == $recurse) {
      _config_builder_ui_recurse_export_default_value($form[$key]);
    }
  }
}
