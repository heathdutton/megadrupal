<?php
/**
 * @file
 * The icopyright module, which integrates with the third-party iCopyright service.
 */
include_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'icopyright') . '/icopyright-common.php');

/**
 * There are two interface elements that are potentially visible on the site: an article toolbar (with
 * email, print, post, and republish links) and an interactive copyright notice (a copyright notice with
 * a hyperlink). These defines specify how those elements should be displayed: both, one, or neither.
 */
define('ICOPYRIGHT_DISPLAY_NEITHER', 0);
define('ICOPYRIGHT_DISPLAY_TOOLBAR', 1);
define('ICOPYRIGHT_DISPLAY_COPYRIGHT_NOTICE', 2);
define('ICOPYRIGHT_DISPLAY_BOTH', 3);

/**
 * Under normal circumstances this plugin automatically adds the user interface elements to a node
 * when it's loaded. However, if display 7is set to manual, then it's up to the themer to add appropriately.
 */
define('ICOPYRIGHT_DISPLAY_MANUAL', 0);
define('ICOPYRIGHT_DISPLAY_AUTOMATIC', 1);

/**
 * Implements hook_help
 * @param $path the path to get help for
 * @param $arg additional arguments
 * @return the help HTML
 */
function icopyright_help($path, $arg) {
  switch ($path) {
    case 'admin/help#icopyright':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The icopyright module adds the iCopyright Toolbar and Interactive Copyright Notice to a ' .
        'site. For more information, see the <a href="@help">iCopyright help page</a> for this plugin.',
        array('@help' => 'http://info.icopyright.com/drupal')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Signing up for a free account with the iCopyright service') . '</li>';
      $output .= '<li>' . t('Defining on what content the article tools should be attached to, and how they should appear') . '</li>';
      $output .= '<li>' . t('Automatically adding the article tools to the right nodes') . '</li>';
      $output .= '<li>' . t('Providing a machine-readable version of the node that the iCopyright servers can read') . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 *
 * @return an array of permissions
 */
function icopyright_permission() {
  return array(
    'administer iCopyright' => array(
      'title' => t('Administer iCopryight'),
      'description' => t('Administer the iCopyright Toolbar and Interactive Copyright Notice'),
    )
  );
}

/**
 * Implementation of hook_menu().
 *
 * @return an associative array with menu items
 */
function icopyright_menu() {
  $items = array();
  $items['admin/config/content/icopyright/general'] = array(
    'title' => 'iCopyright Settings',
    'description' => 'Administer the iCopyright Toolbar and Interactive Copyright Notice',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icopyright_admin_settings'),
    'access arguments' => array('administer iCopyright'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'icopyright.admin.inc',
    'weight' => 0,
  );
  $items['admin/config/content/icopyright/signup'] = array(
    'title' => 'iCopyright Signup',
    'description' => 'Sign up to get a publication ID',
    'page callback' => 'icopyright_admin_signup',
    'access arguments' => array('administer iCopyright'),
    'file' => 'icopyright.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['icopyright/%'] = array(
    'title' => 'iCopyright Feed',
    'page callback' => 'icopyright_feed',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}


/**
 * Implements hook_admin_paths().
 * @return the admin path for this module
 */
function icopyright_admin_paths() {
  $paths = array(
    'admin/config/content/icopyright/*' => TRUE,
  );
  return $paths;
}

/**
 * Implementation of hook_node_view(). When a node is being viewed, see if it's the kind of node
 * that is supposed to get the iCopyright tools automatically appended to it. If so, add them.
 *
 * @param node
 *      the node in question
 * @param view_mode
 *      are we displaying in teaser mode?
 * @param lang_code
 *      the language code (ignored here)
 */
function icopyright_node_view($node, $view_mode, $lang_code) {
  // No publication ID yet? Nothing to attach so return immediately
  $pubid = variable_get('icopyright_publication_id', NULL);
  if (!isset($pubid)) return;

  // Not automatically deploying? Then just return immediately
  $automatic = variable_get('icopyright_automatic_deployment', ICOPYRIGHT_DISPLAY_AUTOMATIC);
  if ($automatic != 1) return;

  // Node is being loaded for viewing and we're supposed to attach the icopyright stuff automatically. Do so.
  $server = icopyright_get_server();
  $addcss = FALSE;
  $teaser = ($view_mode == 'teaser');
  if (icopyright_show_article_tools($node, $teaser)) {
    // Attach the themed article tools to the node, per the current settings
    $orientation = variable_get('icopyright_article_tools_orientation', 'horizontal');
    $alignment = variable_get('icopyright_article_tools_alignment', 'right');
    $node->content['icopyright_article_tools'] = array(
      '#markup' => theme('icopyright_article_tools', array('node' => $node, 'pubid' => $pubid, 'server' => $server,
          'orientation' => $orientation, 'alignment' => $alignment)),
      '#weight' => -10,
    );
    $addcss = TRUE;
  }
  if (icopyright_show_interactive_copyright_notice($node, $teaser)) {
    // Attach the themed interactive copyright notice
    $node->content['icopyright_interactive_copyright_notice'] = array(
      '#markup' => theme('icopyright_interactive_copyright_notice', array('node' => $node, 'pubid' => $pubid,
          'server' => $server)),
      '#weight' => 10,
    );
    $addcss = TRUE;
  }
  // If we are showing one or the other on the node, load up the CSS
  if ($addcss) {
    drupal_add_css(drupal_get_path('module', 'icopyright') . '/icopyright.css', 'module');
  }
}

/**
 * Implementation of hook_form_node_form_alter. If the form is a node form, and the node is one that the iCopyright tools might
 * appear on, add a field that allows the user to turn on or off the tools on a per-node basis.
 *
 * @param  $form
 *      the form
 * @param  $form_state
 *      the current state of the form
 */
function icopyright_form_node_form_alter(&$form, $form_state) {
  global $user;
  if (user_access('administer iCopyright', $user)) {

    // Is this node the right type?
    $type = $form['type']['#value'];
    if (!icopyright_type_check($type, 'article_tools') && !icopyright_type_check($type, 'interactive_copyright_notice'))
      return;

    // Add a fieldset for turning on and off the article tools for this story
    $form['icopyright'] = array(
      '#type' => 'fieldset',
      '#title' => t('iCopyright settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $names = node_type_get_names();
    $form['icopyright']['disallow_display'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not offer iCopyright article tools on this %type', array('%type' => $names[$type])),
      '#default_value' => icopyright_disallow_node_option($form['nid']['#value']),
    );
    $form['#submit'][] = 'icopyright_node_form_submit';
  }
}

/**
 * Returns whether the article tools are disallowed for that node. (It's check disallow instead of check
 * allow because allow is the standard; we assume that all nodes that match the node type and taxonomic check
 * are allowed.)
 *
 * @param  $nid
 *      a node ID
 * @return true if the article tools are DISALLOWED.
 */
function icopyright_disallow_node_option($nid) {
  $query = 'SELECT disallow_display AS display FROM {icopyright_node} WHERE nid=:nid';
  $rv = db_query($query, array(':nid' => $nid))->fetchField();
  return (is_null($rv) ? FALSE : $rv);
}

/**
 * Persist the user's selections for the node form: if the user checked or unchecked the box, update the
 * icopyright_node table accordingly.
 *
 * @param  $form
 *      the form in question
 * @param  $form_state
 *      the form state
 */
function icopyright_node_form_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  db_query('DELETE FROM {icopyright_node} WHERE nid=:nid', array(':nid' => $nid));
  $val = $form_state['values']['disallow_display'];
  if ($val == 1) {
    $data = array('nid' => $nid, 'disallow_display' => $val);
    drupal_write_record('icopyright_node', $data);
  }
}

/**
 * Implementation of hook_theme(). There are three themable items: the article tools (print, email, etc.),
 * the interactive copyright notice, and the feed of the content, which the iCopyright system will call back to get.
 *
 * @return an array of theme functions
 */
function icopyright_theme() {
  $path = drupal_get_path('module', 'icopyright') . "/theme";
  $funcs = array(
    'icopyright_article_tools' => array(
      'template' => 'icopyright-article-tools',
      'arguments' => array('node' => NULL, 'pubid' => NULL, 'server' => NULL, 'orientation' => 'horizontal', 'alignment' => 'right'),
      'path' => $path,
    ),
    'icopyright_interactive_copyright_notice' => array(
      'template' => 'icopyright-interactive-copyright-notice',
      'arguments' => array('node' => NULL, 'pubid' => NULL, 'server' => NULL),
      'path' => $path,
    ),
    'icopyright_feed' => array(
      'template' => 'icopyright-feed',
      'arguments' => array('node' => NULL),
      'path' => $path,
    ),
  );
  return $funcs;
}

/**
 * Implements hook_preprocess. Create useful variables for the icopyright_feed template; these are used in the
 * icopyright-feed.tpl.php template to send data about the node to the iCopyright servers.
 *
 * @param $variables
 *      A reference to variables set up by the theming layer
 */
function icopyright_preprocess_icopyright_feed(&$variables) {
  $node = $variables['node'];
  $author = user_load($node->uid);
  $variables['icx_authors'] = check_plain($author->name);
  $variables['icx_copyright'] = date('Y', $node->created) . ' ' . check_plain(variable_get('site_name', ''));
  $variables['icx_headline'] = check_plain($node->title);
  $variables['icx_pubdate'] = date('M d, Y', $node->created);
  $variables['icx_story'] = $node->body[$node->language][0]['safe_value'];
  if(drupal_strlen($variables['icx_story']) == 0) {
    // Safe value not yet generated so have it built from the fields
    $body = field_get_items('node', $node, 'body');
    $text = field_view_value('node', $node, 'body', $body[0], 'safe_value');
    $variables['icx_story'] = $text['#markup'];
  }
  $variables['icx_url'] = url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => TRUE));
}

/**
 * Build and return an array of active term ID -> term names. Administrators can elect to turn the tools on only
 * for nodes in specific terms.
 *
 * @return an array of term ID to names
 */
function icopyright_get_terms() {
  $types = array();
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vocabulary) {
    $tree = taxonomy_get_tree($vocabulary->vid);
    foreach ($tree as $term) {
      $types[$term->tid] = $term->name;
    }
  }
  return $types;
}

/**
 * Return true if the article tools should be displayed on this node
 *
 * @param node
 *      the node in question
 * @param teaser
 *      if this is teaser mode
 * @return true if the article tools should be shown for this node in this mode
 */
function icopyright_show_article_tools($node, $teaser) {
  // Are we supposed to show the article tools at all here?
  if ($teaser) {
    $mode = variable_get('icopyright_teaser_display_option', ICOPYRIGHT_DISPLAY_COPYRIGHT_NOTICE);
  }
  else {
    $mode = variable_get('icopyright_full_display_option', ICOPYRIGHT_DISPLAY_BOTH);
  }
  if (($mode == ICOPYRIGHT_DISPLAY_COPYRIGHT_NOTICE) || ($mode == ICOPYRIGHT_DISPLAY_NEITHER))
    return FALSE;
  else
    return icopyright_show_tools($node, 'article_tools');
}

/**
 * Return true if the interactive copyright notice should be displayed on this node
 *
 * @param node
 *      the node in question
 * @param teaser
 *      if this is teaser mode
 * @return true if the article tools should be shown for this node in this mode
 */
function icopyright_show_interactive_copyright_notice($node, $teaser) {
  // Are we supposed to show the article tools at all here?
  if ($teaser) {
    $mode = variable_get('icopyright_teaser_display_option', ICOPYRIGHT_DISPLAY_COPYRIGHT_NOTICE);
  }
  else {
    $mode = variable_get('icopyright_full_display_option', ICOPYRIGHT_DISPLAY_BOTH);
  }
  if (($mode == ICOPYRIGHT_DISPLAY_TOOLBAR) || ($mode == ICOPYRIGHT_DISPLAY_NEITHER))
    return FALSE;
  else
    return icopyright_show_tools($node, 'interactive_copyright_notice');
}

/**
 * Checks to see if the passed-in node should have that style of interface element included with it.
 * It simply obeys the parameters chosen by the admin in the settings page, and makes sure that no
 * one has explicitly restricted the tools being added.
 *
 * @param $node
 *      the node in question
 * @param $style
 *      the style of tools: article tools or copyright notice?
 * @return true
 *      if the tools should be shown on the node
 */
function icopyright_show_tools($node, $style) {
  // Is the type enabled?
  if (!icopyright_type_check($node->type, $style))
    return FALSE;

  // Is the term enabled?
  if (!icopyright_term_check($node, 'icopyright_' . $style . '_category_types'))
    return FALSE;

  // Are the tools DISABLED for this particular content?
  if (icopyright_disallow_node_option($node->nid))
    return FALSE;

  // Got this far? Then it's OK to show the tools
  return TRUE;
}

/**
 * Returns true if the passed-in node type should get the style of toolbar. Admins can select
 * the type of nodes that get the icopyright tools in the settings screen.
 *
 * @param  $type
 *      The node type
 * @param  $style
 *      The style of tools
 * @return true if the tools should show on this type of node
 */
function icopyright_type_check($type, $style) {
  return in_array($type, variable_get('icopyright_' . $style . '_node_types', array()), TRUE);
}

/**
 * Returns TRUE if the passed-in node passes a check for term inclusion specified
 * by the variable. If no terms have been selected then we can show the UI widget for
 * that node; if one or more terms has been selected, then the node must have that
 * term to be shown.
 *
 * @param node
 *      The node in question
 * @param var
 *      The variable to check
 * @return true if the UI widget can be shown
 */
function icopyright_term_check($node, $var) {
  // If the user doesn't have taxonomy enabled consider this a pass
  if (!module_exists('taxonomy'))
    return TRUE;

  // If no terms are checked at all, user wants all of them through
  $showterms = variable_get($var, array());
  if (count($showterms) == 0)
    return TRUE;

  // Iterate over the terms; the node must be in at least one
  $show = FALSE;
  $nodetids = icopyright_node_get_tids($node);
  foreach ($nodetids as $tid) {
    $show |= in_array($tid, $showterms, FALSE);
  }
  return $show;
}

/**
 * Given a node, returns all of the terms that are associated with this node. See http://drupal.org/node/959984 for
 * discussion and where this code was swiped from, specifically http://drupal.org/node/959984#comment-4028200.
 *
 * @param $node node in question
 * @return mixed an array of unique TIDs
 */
function icopyright_node_get_tids($node) {
  $tids = array();
  if (!isset($terms[$node->vid]['tid'])) {
    $query = db_select('taxonomy_index', 'r');
    $t_alias = $query->join('taxonomy_term_data', 't', 'r.tid = t.tid');
    $v_alias = $query->join('taxonomy_vocabulary', 'v', 't.vid = v.vid');
    $query->fields( $t_alias );
    $query->condition("r.nid", $node->nid);
    $result = $query->execute();
    foreach ($result as $term) {
      $tids[] = $term->tid;
    }
  }
  return array_unique($tids);
}

/**
 * Render the story as an iCopyright feed format if there's an active publication ID and the story
 * has at least some kind of article tools on it. The iCopyright servers will call into this
 * when it needs information about the node -- to actually create the print version, or email the story,
 * or what have you..
 *
 * Because the feed is by default open and unprotected -- that is, anyone with a browser can view that
 * node at the iCopyright URL --  we never show a feed for an unpublished node or a node that is not
 * visible to anonymous users. We also refuse to show if there's not some user
 * interface widget on the node that can spawn the service.
 *
 * TODO: Add a hook here so others can implement different logic
 *
 * @param nid
 *      The node ID
 * @return the full XML format of the story
 */
function icopyright_feed($nid) {
  $pubid = variable_get('icopyright_publication_id', '');
  if (isset($pubid)) {
    $node = node_load($nid);
    if ($node != FALSE) {

      // Unpublished node? Then don't allow the feed to be shown
      if ($node->status == 0)
        return drupal_access_denied();

      // Anonymous users can't access? Then don't allow through feed
      if (!node_access('view', $node))
        return drupal_access_denied();

      // Make sure there's at least one display option for article
      $teaserDisplay = variable_get('icopyright_teaser_display_option', ICOPYRIGHT_DISPLAY_BOTH);
      $fullDisplay = variable_get('icopyright_full_display_option', ICOPYRIGHT_DISPLAY_BOTH);
      if (($teaserDisplay == ICOPYRIGHT_DISPLAY_NEITHER) && ($fullDisplay == ICOPYRIGHT_DISPLAY_NEITHER))
        return drupal_not_found();

      // At least one of the article styles must be bisible
      if (icopyright_show_tools($node, 'article_tools') ||
              (icopyright_show_tools($node, 'interactive_copyright_notice'))
      ) {
        // We're good to go; write out the node in the expected format. The iCopyright
        // servers will take it from here.
        drupal_add_http_header('Content-type', 'text/xml');
        drupal_add_http_header('charset', 'utf-8');
        print theme('icopyright_feed', array('node' => $node));
        return;
      }
    }
  }

  // Got this far? Then no-go; consider this a 404
  return drupal_not_found();
}

/**
 * Returns the user agent string to pass along with the iCopyright calls. It's basically
 * the current version number of the system
 *
 * @return the user agent string
 */
function icopyright_user_agent() {
  $version = '7.x-1.x';
  $module = drupal_parse_info_file(drupal_get_path('module', 'icopyright') . '/icopyright.info');
  if (isset($module['version'])) {
    $version = $module['version'];
  }
  return "iCopyright Drupal Plugin $version";
}

