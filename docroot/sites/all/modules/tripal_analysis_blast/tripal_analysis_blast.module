<?php

require_once "api/tripal_analysis_blast.api.inc";
require_once "includes/tripal_analysis_blast.xml_parser.inc";
require_once "includes/tripal_analysis_blast.admin.inc";
require_once "includes/tripal_analysis_blast.chado_node.inc";

require_once "theme/tripal_analysis_blast.theme.inc";

/**
 * Implements hook_menu().
 */
function tripal_analysis_blast_menu() {

  $items['admin/tripal/extension/tripal_blast_analysis'] = array(
    'title' => 'BLAST Analyses',
    'description' => 'Administrative pages for the Tripal Blast Analysis module.',
    'page callback' => 'tripal_analysis_blast_admin_view',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/tripal/extension/tripal_blast_analysis/configuration'] = array(
    'title' => 'Settings',
    'description' => 'Settings for the displays of BLAST analysis results.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_analysis_blast_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  $items['admin/tripal/extension/tripal_blast_analysis/sync'] = array(
    'title' => ' Sync',
    'description' => 'Create pages on this site for BLAST analyses',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chado_node_sync_form', 'tripal_analysis_blast', 'chado_analysis_blast'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );
  return $items;
}
/**
 *
 *
 * @ingroup tripal_analysis_blast
 */
function tripal_analysis_blast_block($op = 'list',   $delta = 0, $edit=array()) {
   switch ($op) {
      case 'list':
         $blocks['blast_base']['info'] = t('Analysis: Blast Details');
         $blocks['blast_base']['cache'] = BLOCK_NO_CACHE;

         $blocks['featureblast']['info'] = t('Tripal Feature Blast Results');
         $blocks['featureblast']['cache'] = BLOCK_NO_CACHE;

         return $blocks;


      case 'view':
         if (user_access('access chado_analysis_blast content') and arg(0) == 'node' and is_numeric(arg(1))) {
            $nid = arg(1);
            $node = node_load($nid);

            $block = array();
            switch ($delta) {
               case 'blast_base':
                  $block['subject'] = t('Blast Details');
                  $block['content'] = theme('tripal_analysis_blast_base',  $node);
                  break;
               case 'featureblast':
                  $block['subject'] = t('Homology');
                  $block['content'] = theme('tripal_feature_blast_results',  $node);
                  break;
               default :
            }

            return $block;
         }
   }
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 */
function tripal_analysis_blast_theme($existing, $type, $theme, $path) {
  $core_path = drupal_get_path('module', 'tripal_core');
  $items = array (
    'node__chado_analysis_blast' => array (
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme/templates"
    ),
    'tripal_analysis_blast_base' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_analysis_blast_base',
      'path' => "$path/theme/templates",
    ),
    'tripal_analysis_blast_teaser' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_analysis_blast_teaser',
      'path' => "$path/theme/templates",
    ),

    // tripal_feature theme
    'tripal_feature_blast_results' => array (
        'template' => 'tripal_feature_blast_results',
        'variables' => array ('node' => NULL),
        'path' => "$path/theme/templates"
    ),
  );

  return $items;
}

/**
*
*/
function chado_analysis_blast_submit_jobs($node) {
  global $user;

   // add a job if the user wants to parse the XML
  if ($node->blastjob) {
    $job_args = array(
      $node->analysis_id,
      $node->blastdb,
      $node->blastfile,
      $node->no_parsed,
      $node->blastfile_ext,
      $node->query_re,
      $node->query_type,
      $node->query_uniquename,
      $node->is_concat,
      $node->search_keywords,
    );
    tripal_add_job("Parse blast: $node->blastfile", 'tripal_analysis_blast',
      'tripal_analysis_blast_parseXMLFile', $job_args, $user->uid);
  }
}


/*******************************************************************************
 * Set the permission types that the chado module uses.  Essentially we
 * want permissionis that protect creation,  editing and deleting of chado
 * data objects
 */
function tripal_analysis_blast_permission() {
  return array(
    'access chado_analysis_blast content' => array(
      'title' => t('View Chado Analysis Blast'),
      'description' => t('Allow users to view chado analysis blast pages.'),
    ),
    'create chado_analysis_blast content' => array(
      'title' => t('Create Chado Analysis Blast'),
      'description' => t('Allow users to create new chado analysis blast pages.'),
    ),
    'delete chado_analysis_blast content'=> array(
      'title' => t('Delete Chado Analysis Blast'),
      'description' => t('Allow users to delete chado analysis blast pages.'),
    ),
    'edit chado_analysis_blast content'=> array(
      'title' => t('Edit Chado Analysis Blast'),
      'description' => t('Allow users to edit chado analysis blast pages.'),
    ),
  );
}

/**
 *
 *
 * @ingroup tripal_feature
 */
function tripal_analysis_blast_job_describe_args($callback, $args) {

   $new_args = array();
   if ($callback == 'tripal_analysis_blast_parseXMLFile') {

      // add in the analysis
      if ($args[0]) {
         $analysis = chado_select_record('analysis', array('name'), array('analysis_id' => $args[0]));
      }
      $new_args['Analysis'] = $analysis[0]->name;

      // add in the database
      if ($args[1]) {
         $db = chado_select_record('db', array('name'), array('db_id' => $args[1]));
      }
      $new_args['Database'] = $db[0]->name;

      $new_args['File or Directory Name'] = $args[2];
      if ($args[8] == 1) {
        $new_args['Is XML file concatenated'] = 'Yes';
      }
      else {
        $new_args['Is XML file concatenated'] = 'No';
      }
      $new_args['File Extension (if directory)'] = $args[4];
      $new_args['Number matches parsed per query'] = $args[3];
      $new_args['Query name regular expression'] = $args[5];
      $new_args['Query type'] = $args[6];
      if ($args[7] == 1) {
        $new_args['Feature identifier'] = 'feature unique name';
      }
      else {
        $new_args['Feature identifier'] = 'feature name';
      }
      if ($args[9]) {
         $new_args['Tripal Views Integration'] = 'Yes';
      }
      else {
         $new_args['Tripal Views Integration'] = 'No';
      }
   }
   return $new_args;
}
/**
 * Implementation of hook_form_alter()
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 *
 */
function tripal_analysis_blast_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == "chado_analysis_blast_node_form") {
    // turn of preview button for insert/updates
    $form['actions']['preview']['#access'] = FALSE;
  }
}
