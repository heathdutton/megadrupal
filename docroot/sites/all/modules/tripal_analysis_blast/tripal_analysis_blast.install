<?php
/**
 * @file
 * Contains functions used to install/uninstall tripal_analysis_blast.
 */


/*******************************************************************************
 * Implementation of hook_install().
 */
function tripal_analysis_blast_install() {

   // Register this analysis.
   tripal_register_analysis_child('tripal_analysis_blast');

   // Add cvterms.
   tripal_analysis_blast_add_cvterms();

   // add custom tables.
   tripal_analysis_blast_add_custom_tables();

   // Create default parser for swissprot,  DB:genbank, and go-seqdb.
   $sql_db = "SELECT db_id,  name FROM {db} WHERE lower(name) like :name";
   $sql_parser = "INSERT INTO {tripal_analysis_blast} ".
                 "  (db_id,  displayname, regex_hit_id, regex_hit_def, ".
                 "   regex_hit_accession,  genbank_style, regex_hit_organism) ".
                 "VALUES (:db_id,  :displayname,  :regex_hit_id, :regex_hit_def, :regex_hit_accession, :genbank_style, :regex_hit_organism)";

   // Add swissprot parser.
   $results = chado_query($sql_db,  array(':name' => "%swissprot%"));
   foreach ($results AS $db) {
    db_query(
      $sql_parser,
      array(
        ':db_id' => $db->db_id,
        ':displayname' => 'ExPASy Swissprot',
        ':regex_hit_id' => '^sp\|.*?\|(.*?)\s.*?$',
        ':regex_hit_def' => '^sp\|.*?\|.*?\s(.*)$',
        ':regex_hit_accession' => 'sp\|(.*?)\|.*?\s.*?$',
        ':genbank_style' => 0,
        ':regex_hit_organism' => '^.*?OS=(.*?)\s\w\w=.*$')
      );
    }

   // Add trembl parser.
   $results = chado_query($sql_db,  array(':name' => "%trembl%"));
   foreach ($results AS $db) {
     db_query(
     $sql_parser,
     array(
       ':db_id' => $db->db_id,
       ':displayname' => 'ExPASy TrEMBL',
       ':regex_hit_id' => '^.*?\|(.*?)\s.*?$',
       ':regex_hit_def' => '^.*?\|.*?\s(.*)$',
       ':regex_hit_accession' => '^(.*?)\|.*?\s.*?$',
       ':genbank_style' => 0,
       ':regex_hit_organism' => '^.*?OS=(.*?)\s\w\w=.*$')
     );
   }

   // Add NCBI genbank parser.
   $results = chado_query($sql_db, array(':name' => "%genbank%"));
   foreach ($results AS $db) {
     db_query(
     $sql_parser,
     array(
       ':db_id' => $db->db_id,
       ':displayname' => 'Genbank',
       ':regex_hit_id' => '',
       ':regex_hit_def' => '',
       ':regex_hit_accession' => '',
       ':genbank_style' => 1,
       ':regex_hit_organism' => '')
     );
   }
}

/*******************************************************************************
 * Implementation of hook_uninstall().
 */
function tripal_analysis_blast_uninstall() {

   // Delete all information associate with the module
   // Drupal complains when the user tries to uninstall tripal_analysis
   // and tripal_analysis_blast at the same time. This is because Drupal drops
   // the {tripal_analysis} table before we can delete anything from it. Thus,
   // we perform a db_table_exists() check before the deletion

   //Delete the settings from {tripal_analysis} table
   tripal_unregister_analysis_child('tripal_analysis_blast');

   // Delete module's variables from variables table.
   db_query("DELETE FROM {variable} WHERE name = :name",
     array('name' => 'tripal_analysis_blast_setting'));

}
/*******************************************************************************
*  The blast analysis module creates it's own custom table for storing
*  blast results in a format more condusive for fine-grained searching.
*  Therefore,  we must define the hook_schema function, as recoginzed by
*  the Tripal core API,  for specifying the details for this table.
*/
function tripal_analysis_blast_add_custom_tables() {
   // the blast_organisms table is used to help when integrating with
   // Drupal Views.  Trying to get a list of organisms for a drop down
   // in Views would require querying the blast_hit_data table which has
   // a lot of redunancy and takes too long.  This table was created
   // to speed up the query the popluates a drop down list
   $schema = array(
      'table' => 'blast_organisms',
      'fields' => array(
         'blast_org_id'     => array('type' => 'serial',   'not null' => TRUE),
         'blast_org_name'   => array('type' => 'varchar',   'length' => 1025, 'not null' => FALSE),
      ),
      'primary key' => array('blast_org_id'),
      'indexes' => array(
         'blast_org_name_idx' => array('blast_org_name'),
      ),
      'unique keys' => array(
         'blast_org_name_uq' => array('blast_org_name'),
      )
   );
   chado_create_custom_table('blast_organisms', $schema);

   // the schema for our custom Chado tables are in the .module file
   // so that they integrate properly with everything else Chado.
   $ret = array();
   $schema = array(
      'table' => 'blast_hit_data',
      'fields' => array(
         'analysisfeature_id'  => array('type' => 'int',   'not null' => TRUE),
         'analysis_id'         => array('type' => 'int',   'not null' => TRUE),
         'feature_id'          => array('type' => 'int',   'not null' => TRUE),
         'db_id'               => array('type' => 'int',   'not null' => TRUE),
         'hit_num'             => array('type' => 'int',   'not null' => TRUE),
         'hit_name'            => array('type' => 'varchar',   'length' => 1025, 'not null' => FALSE),
         'hit_url'             => array('type' => 'text',    'not null' => FALSE),
         'hit_description'     => array('type' => 'text',    'not null' => FALSE),
         'hit_organism'        => array('type' => 'varchar',   'length' => 1025, 'not null' => FALSE),
         'blast_org_id'        => array('type' => 'int',   'not null' => FALSE),
         'hit_accession'       => array('type' => 'varchar',   'length' => '255', 'not null' => FALSE),
         'hit_best_eval'       => array('type' => 'float',   'size' => 'big', 'not null' => FALSE),
         'hit_best_score'      => array('type' => 'float',   'size' => 'big', 'not null' => FALSE),
         'hit_pid'             => array('type' => 'float',   'size' => 'big', 'not null' => FALSE),
      ),
      'indexes' => array(
         'analysisfeature_id' => array('analysisfeature_id'),
         'feature_id' => array('feature_id'),
         'analysis_id' => array('analysis_id'),
         'blast_org_id' => array('blast_org_id'),
         'db_id' => array('db_id'),
         'hit_organism' => array('hit_organism'),
         'hit_name' => array('hit_organism'),
         'hit_accession' => array('hit_accession'),
         'hit_best_eval' => array('hit_best_eval'),
      ),
     'foreign keys' => array(
        'db' => array(
           'table' => 'db',
           'columns' => array(
              'db_id' => 'db_id',
           ),
        ),
        'analysisfeature' => array(
           'table' => 'analysisfeature',
           'columns' => array(
              'analysisfeature_id' => 'analysisfeature_id',
           ),
        ),
        'analysis' => array(
           'table' => 'analysis',
           'columns' => array(
              'analysis_id' => 'analysis_id',
           ),
        ),
       'feature' => array(
          'table' => 'feature',
          'columns' => array(
             'feature_id' => 'feature_id',
          ),
        ),
        'blast_organisms' => array(
           'table' => 'blast_organisms',
           'columns' => array(
              'blast_org_id' => 'blast_org_id',
           ),
        ),
     )
  );
  chado_create_custom_table('blast_hit_data', $schema);
}
/*******************************************************************************
* Implementation of hook_schema(). This table stores the parsers for blast xml
* xml results.
*/
function tripal_analysis_blast_schema() {
   $schema = array();
   $schema['tripal_analysis_blast'] = array(
      'fields' => array(
         'db_id'               => array('type' => 'int',  'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
         'displayname'         => array('type' => 'varchar',  'length' => 255, 'not null' => TRUE, ),
         'regex_hit_id'        => array('type' => 'varchar',  'length' => 255, ),
         'regex_hit_def'       => array('type' => 'varchar',  'length' => 255, ),
         'regex_hit_accession' => array('type' => 'varchar',  'length' => 255, ),
         'regex_hit_organism'  => array('type' => 'varchar',  'length' => 255, ),
         'hit_organism'        => array('type' => 'varchar',  'length' => 255, ),
         'genbank_style'       => array('type' => 'int',  'unsigned' => TRUE, 'default' => 0),
      ),
      'indexes' => array(
         'db_id' => array('db_id')
      ),
      'primary key' => array('db_id'),
  );

  return $schema;
}

/*******************************************************************************
 * Implementation of hook_requirements(). Make sure 'Tripal Core' and 'Tripal
 * Analysis' are enabled before installation
 */
function tripal_analysis_blast_requirements($phase) {
   $requirements = array();
   if ($phase == 'install') {
      if (!function_exists('tripal_register_analysis_child')) {
         $requirements ['tripal_analysis_blast'] = array(
            'title' => "tripal_analysis_blast",
            'value' => "error. Some required modules are just being installed. Please try again.",
            'severity' => REQUIREMENT_ERROR,
         );
      }
   }
   return $requirements;
}

/*******************************************************************************
 * Provide update script for adding new cvterms
 */
function tripal_analysis_blast_update_7200() {
  if (chado_table_exists('tripal_analysis_blast')) {
    try {
      $sql = "ALTER TABLE chado.tripal_analysis_blast SET schema public";
      db_query($sql);
    }
    catch (\PDOException $e) {
      $error = $e->getMessage();
      throw new DrupalUpdateException('Failed to change the vocabulary from tripal_library_types to library_type: '. $error);
    }
  }
}

/*******************************************************************************
 * Function for adding cvterms
 */
function tripal_analysis_blast_add_cvterms() {

   // Add the cvterms for the anlysisprop table
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_settings',
    'definition' => 'Settings of a blast analysis, including db_id, output file, and run parameters separated by a bar |',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_blastdb',
    'def' => 'The database used for blasting',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_blastfile',
    'def' => 'The input file or directory that contains the XML blast output',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_blastparameters',
    'def' => 'The parameters used when performing blast.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_no_parsed',
    'def' => 'Indicates if the input file should be parsed to map results to features',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_query_re',
    'def' => 'The regular expression for finding the feature name in the query definition line of the blast results',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_query_type',
    'def' => 'The feature type (e.g. mRNA, polypeptide) of the query input file. This type is used to identify the query feature when multiple features have the same name',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_query_uniquename',
    'def' => 'Indicates if the matched name in the query definition line of the blast results is feature uniquename',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_blastfile_ext',
    'def' => 'Indicates the extension of the blast files. This is required if the blastfile setting is a directory.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_is_concat',
    'def' => 'Indicates if the blast results XML file is a series of concatenated XML results.  Such is the case, for example, if Blast2GO was used to perform the analysis.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_blast_search_keywords',
    'def' => 'Indicates the fields that should be stored in the analysisfeatureprop table for the blast results.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  // add cvterms for the blast search keywords
  tripal_insert_cvterm(array(
    'name' => 'blast_match_name',
    'def' => 'The blast match name',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'blast_match_description',
    'def' => 'The match description',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'blast_match_organism',
    'def' => 'The organism the blast match belongs to',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'blast_match_accession',
    'def' => 'The accession of the blast match',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'blast_database',
    'def' => 'The name of the database blasted against',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'blast_evalue',
    'def' => 'The blast match e-valuue score (best e-value if multiple HSPs',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'blast_score',
    'def' => 'The blast hit match bit score',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
  tripal_insert_cvterm(array(
    'name' => 'blast_pid',
    'def' => 'The blast hit match percent identity',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

   // Add cvterm 'analysis_blast_output_iteration_hits' for inserting into featureprop table
   tripal_insert_cvterm(array(
    'name' => 'analysis_blast_output_iteration_hits',
    'def' => 'Hits of a blast '.
      'output iteration. Each iteration corresponds to a chado feature,  and is '.
      'the content between <iteration> and </iteration> tags in the blast xml '.
      'output file. This cvterm represents all hits in the iteration',
     'cv_name' => 'tripal',
     'db_name' => 'tripal',
   ));

   // Add cvterms for the best hits report
   tripal_insert_cvterm(array(
    'name' => 'analysis_blast_besthit_query',
    'def' => 'query name of the best hit associated with a feature and a blast analysis ',
     'cv_name' => 'tripal',
     'db_name' => 'tripal',
   ));
   tripal_insert_cvterm(array(
    'name' => 'analysis_blast_besthit_match',
    'def' => 'match name of the best hit associated with a feature and a blast analysis ',
     'cv_name' => 'tripal',
     'db_name' => 'tripal',
   ));
   tripal_insert_cvterm(array(
    'name' => 'analysis_blast_besthit_description',
    'def' => 'description of the best hit associated with a feature and a blast analysis ',
     'cv_name' => 'tripal',
     'db_name' => 'tripal',
   ));
   tripal_insert_cvterm(array(
    'name' => 'analysis_blast_besthit_evalue',
    'def' => 'evalue of the best hit associated with a feature and a blast analysis ',
     'cv_name' => 'tripal',
     'db_name' => 'tripal',
   ));
   tripal_insert_cvterm(array(
    'name' => 'analysis_blast_besthit_identity',
    'def' =>  'identity (%) of the best hit associated with a feature and a blast analysis ',
     'cv_name' => 'tripal',
     'db_name' => 'tripal',
   ));
   tripal_insert_cvterm(array(
    'name' => 'analysis_blast_besthit_length',
    'def' =>  'length of the best hit associated with a feature and a blast analysis ',
     'cv_name' => 'tripal',
     'db_name' => 'tripal',
   ));
}

/**
 * Adds missing foreign key constraints
 *
 */
function tripal_analysis_blast_update_7201() {

  // there was a bug in the function for creating a custom table that
  // kept foreign key constraints from being added.  So, we need to add those
  // to keep from error messages appear, we will drop the FK if it already
  // exists and then re-add it.
  try {
    db_query('
      ALTER TABLE chado.blast_hit_data
      DROP CONSTRAINT IF EXISTS blast_hit_data_db_id_fkey CASCADE
    ');
    db_query('
      ALTER TABLE chado.blast_hit_data
      DROP CONSTRAINT IF EXISTS blast_hit_data_analysisfeature_id_fkey CASCADE
    ');
    db_query('
      ALTER TABLE chado.blast_hit_data
      DROP CONSTRAINT IF EXISTS blast_hit_data_analysis_id_fkey CASCADE
    ');
    db_query('
      ALTER TABLE chado.blast_hit_data
      DROP CONSTRAINT IF EXISTS blast_hit_data_feature_id_fkey CASCADE
    ');
    db_query('
      ALTER TABLE chado.blast_hit_data
      DROP CONSTRAINT IF EXISTS blast_hit_data_blast_org_id_fkey CASCADE
    ');

    db_query('
      ALTER TABLE chado.blast_hit_data
      ADD CONSTRAINT blast_hit_data_db_id_fkey
      FOREIGN KEY (db_id) REFERENCES chado.db (db_id)
      ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
    ');
    db_query('
      ALTER TABLE chado.blast_hit_data
      ADD CONSTRAINT blast_hit_data_analysisfeature_id_fkey
      FOREIGN KEY (analysisfeature_id) REFERENCES chado.analysisfeature (analysisfeature_id)
      ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
    ');
    db_query('
      ALTER TABLE chado.blast_hit_data
      ADD CONSTRAINT blast_hit_data_analysis_id_fkey
      FOREIGN KEY (analysis_id) REFERENCES chado.analysis (analysis_id)
      ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
    ');
    db_query('
      ALTER TABLE chado.blast_hit_data
      ADD CONSTRAINT blast_hit_data_feature_id_fkey
      FOREIGN KEY (feature_id) REFERENCES chado.feature (feature_id)
      ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
    ');
    db_query('
      ALTER TABLE chado.blast_hit_data
      ADD CONSTRAINT blast_hit_data_blast_org_id_fkey
      FOREIGN KEY (blast_org_id) REFERENCES chado.blast_organisms (blast_org_id)
      ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
    ');
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Failed to update foriegn key: '. $error);
  }
}

/**
 * Adds the blast property terms to the correct vocabulary.
 *
 */
function tripal_analysis_blast_update_7202() {
  try {
    module_load_include('inc', 'tripal_cv', 'api/tripal_cv.api');

    tripal_insert_cvterm(array(
      'name' => 'analysis_blast_blastdb',
      'def' => 'The database used for blasting',
      'cv_name' => 'tripal',
      'db_name' => 'tripal',
    ));

    tripal_insert_cvterm(array(
      'name' => 'analysis_blast_blastfile',
      'def' => 'The input file or directory that contains the XML blast output',
      'cv_name' => 'tripal',
      'db_name' => 'tripal',
    ));
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Failed to update terms: '. $error);
  }

}
