<?php
/**
 * @file
 * Field label format.
 */

/**
 * Implements hook_theme().
 */
function field_label_format_theme() {
  return array(
    'field_label_format_wrapper' => array(
      'render element' => 'element',
      'template' => 'field-label-format-wrapper',
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function field_label_format_field_formatter_info_alter(&$info) {
  // Enumerate all existing formatters.
  $new_info = array();
  foreach ($info as $key => $formatter) {
    $new_key = 'field_label_format_' . $key;
    $new_info[$new_key] = array(
      'label' => t('Formatted label: !formatter', array('!formatter' => $formatter['label'])),
      'module' => 'field_label_format',
      'original formatter' => $key,
    );
    $new_info[$new_key] += $formatter;
    $new_info[$new_key]['settings']['field_label_format'] = array(
      'element' => 'div',
      'css_id' => '',
      'css_class' => '',
      'override_label' => '',
    );
  }

  // Add new formatters.
  $info += $new_info;
}

/**
 * Builds the formatter settings form with custom label settings.
 */
function field_label_format_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];

  // Add original formatter settings.
  if ($original_display = _field_label_format_get_original_display($display)) {
    if (function_exists($function = $original_display['module'] . '_field_formatter_settings_form')) {
      $original_instance = $instance;
      $original_instance['display'][$view_mode] = $original_display;
      $form = $function($field, $original_instance, $view_mode, $form, $form_state);
    }
  }

  // Add label format settings.
  $label_settings = $display['settings']['field_label_format'];
  $form['field_label_format'] = array(
    '#type' => 'fieldset',
    '#title' => t('Extra label'),
    '#description' => t('Set the original label to "Hidden" when configuring the custom label.'),
    '#tree' => TRUE,
  );
  $form['field_label_format']['element'] = array(
    '#type' => 'select',
    '#title' => t('Label element'),
    '#options' => field_label_format_label_elements(),
    '#default_value' => $label_settings['element'],
  );
  $form['field_label_format']['css_id'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS ID'),
    '#default_value' => $label_settings['css_id'],
  );
  $form['field_label_format']['css_class'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS classes'),
    '#default_value' => $label_settings['css_class'],
  );
  $form['field_label_format']['override_label'] = array(
  '#type' => 'textfield',
  '#title' => t('Override label text'),
  '#default_value' => $label_settings['override_label'],
  '#description' => t('If left blank, the default label is used.'),
  );

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_label_format_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];

  // Add original summary.
  $summary = array();
  if ($original_display = _field_label_format_get_original_display($display)) {
    if (function_exists($function = $original_display['module'] . '_field_formatter_settings_summary')) {
      $original_instance = $instance;
      $original_instance['display'][$view_mode] = $original_display;
      $original_summary = $function($field, $original_instance, $view_mode);
      if ($original_summary) {
        $summary[] = $original_summary;
      }
    }
  }

  // Add summary for field label.
  $label_settings = $instance['display'][$view_mode]['settings']['field_label_format'] + array(
    'element' => '',
    'css_id' => '',
    'css_class' => '',
    'override_label' => '',
  );
  $summary[] = t('Label element: !element', array('!element' => '<code>' . $label_settings['element'] . '</code>'));
  if ($label_settings['css_id']) {
    $summary[] = t('CSS ID: !id', array('!id' => '<code>' . check_plain($label_settings['css_id']) . '</code>'));
  }
  if ($label_settings['css_class']) {
    $summary[] = t('CSS classes: !class', array('!class' => '<code>' . check_plain($label_settings['css_class']) . '</code>'));
  }
  if (strlen($label_settings['override_label'])) {
    $summary[] = t('Overridden label: %label', array('%label' => check_plain($label_settings['override_label'])));
  }

  return implode('<br/>', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function field_label_format_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  foreach ($displays as $display) {
    if ($original_display = _field_label_format_get_original_display($display)) {
      field_default_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $original_display);
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function field_label_format_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($original_display = _field_label_format_get_original_display($display)) {
    if (function_exists($function = $original_display['module'] . '_field_formatter_view')) {
      // Render using original formatter and attach label settings.
      $element = $function($entity_type, $entity, $field, $instance, $langcode, $items, $original_display);
      $element['#field_label_format'] = $display['settings']['field_label_format'];
      return $element;
    }
  }

  // Return blank renderable on error.
  return array();
}

/**
 * Implements hook_field_attach_view_alter().
 */
function field_label_format_field_attach_view_alter(&$output, $context) {
  // Wrap field output in label wrapper.
  foreach (element_children($output) as $key) {
    if (!empty($output[$key]['#field_label_format'])) {
      $output[$key]['#theme_wrappers'][] = 'field_label_format_wrapper';
    }
  }
}

/**
 * Theme preprocess function for field-label-format-wrapper.tpl.php.
 *
 * @see field-label-format-wrapper.tpl.php
 */
function template_preprocess_field_label_format_wrapper(&$variables) {
  $variables['wrapper_attributes_array']['class'][] = 'field-label-format-wrapper';
  $variables['label_attributes_array']['class'][] = 'field-label-format-text';
  $variables['field_content'] = $variables['element']['#children'];

  // Apply label format.
  $format = $variables['element']['#field_label_format'] + array(
    'element' => 'div',
    'css_id' => '',
    'css_class' => '',
    'override_label' => '',
  );
  $variables['label_element'] = $format['element'];
  if ($format['css_id']) {
    $variables['label_attributes_array']['id'] = $format['css_id'];
  }
  if ($format['css_class']) {
    $variables['label_attributes_array']['class'][] = $format['css_class'];
  }
  if (strlen($format['override_label'])) {
    $variables['label_text'] = $format['override_label'];
  }
  else {
    $variables['label_text'] = $variables['element']['#title'];
  }
}

/**
 * Theme process function for field-label-format-wrapper.tpl.php.
 *
 * @see field-label-format-wrapper.tpl.php
 */
function template_process_field_label_format_wrapper(&$variables) {
  $variables['wrapper_attributes'] = drupal_attributes($variables['wrapper_attributes_array']);
  $variables['label_attributes'] = drupal_attributes($variables['label_attributes_array']);
}

/**
 * Returns the original display for a view mode.
 */
function _field_label_format_get_original_display($display) {
  if (isset($display['type'])) {
    $label_formatter = field_info_formatter_types($display['type']);
    if (isset($label_formatter['original formatter'])) {
      $original_formatter = field_info_formatter_types($label_formatter['original formatter']);

      // Create a spoof display for original formatter.
      $original_display = $display;
      $original_display['type'] = $label_formatter['original formatter'];
      $original_display['module'] = $original_formatter['module'];
      return $original_display;
    }
  }

  // Return nothing on error.
  return NULL;
}

/**
 * Default HTML elements.
 */
function field_label_format_label_elements() {
  static $defaults = array('div', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'strong', 'em');
  $elements = drupal_map_assoc($defaults);
  drupal_alter('field_label_format_elements', $elements);
  return $elements;
}
