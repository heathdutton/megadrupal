<?php

function something_menu() {
  $items = array();
  $items['admin/structure/something'] = array(
    'title' => 'Something entity types',
    'access arguments' => array('administer content types'),
    'page callback' => 'something_type_list',
    'file' => 'something.admin.inc',
    'description' => 'Manage Something entity types, including Fields and display modes',
  );

  $items['admin/structure/something/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/something/add'] = array(
    'title' => 'Add Something entity type',
    'access arguments' => array('administer content types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('something_type_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'something.admin.inc',
  );
  $items['admin/structure/something/manage/%something_type'] = array(
    'title' => 'Edit Something entity type',
    'title callback' => 'something_type_page_title',
    'title arguments' => array(4),
    'access arguments' => array('administer content types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('something_type_form', 4),
    'file' => 'something.admin.inc',
  );
  $items['admin/structure/something/manage/%something_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/something/manage/%something_type/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('something_type_delete_confirm', 4),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'something.admin.inc',
    'weight' => 20,
  );

  $items['something/%something'] = array(
    'title' => 'Something entity',
    'access arguments' => array('access content'),
    'page callback' => 'something_page',
    'page arguments' => array(1),
  );

  $items['something/%something/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['something/%something/edit'] = array(
    'title' => 'Edit',
    'access arguments' => array('administer content types'),
    'page callback' => 'something_page_edit',
    'page arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['something/%something/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('something_delete_confirm', 1),
    'access arguments' => array('administer content types'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  $items['something/add/%'] = array(
    'title' => 'Crate Something entity test form',
    'page callback' => 'something_add',
    'page arguments' => array(2),
    'access arguments' => array('administer content types'),
  );

  return $items;
}

function something_page($something) {
  $view_mode = 'full';
  $entity_type = 'something';
  $entity = $something;
  $entities = array($something->sid => $something);

  field_attach_prepare_view($entity_type, $entities, $view_mode);
  entity_prepare_view($entity_type, $entities);
  $build = field_attach_view($entity_type, $entity, $view_mode);
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, LANGUAGE_NONE);
  drupal_alter('entity_view', $build, $entity_type);
  return $build;
}

function something_entity_info() {
  $entities['something'] = array(
    'label' => 'Something entity',
    'controller class' => 'DrupalDefaultEntityController',
    'base table' => 'something',
    'revision table' => 'something_revision',
    'load hook' => 'something_load',
    'uri callback' => 'something_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'sid',
      'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'sid', // We have no label
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'view modes' => array(),
  );

  foreach (something_get_types() as $type => $info) {
    $entities['something']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/something/manage/%something_type',
        'real path' => 'admin/structure/something/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer content types'),
      ),
    );
  }

  return $entities;
}

function something_type_load($type) {
  $types = something_get_types(array($type));
  return isset($types[$type]) ? $types[$type] : FALSE;
}

function something_type_delete($type) {
  db_delete('something_type')->condition('type', $type)->execute();
  field_attach_delete_bundle('something', $type);

  entity_info_cache_clear();
  menu_rebuild();
}

function something_get_types($types = array()) {
  $query = db_select('something_type', 'cit')
    ->fields('cit', array('type', 'name', 'description', 'help'));
  if ($types) {
    $query->condition('type', $types);
  }
  $results = $query->execute();
  $types = array();
  foreach ($results as $type) {
    $types[$type->type] = $type;
  }
  return $types;
}

function something_forms() {
  $forms = array();
  if ($types = something_get_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_something_form']['callback'] = 'something_form';
    }
  }
  return $forms;
}

function something_type_save($something_type, $write_record_keys = array()) {
  // Make sure all keys are populated.
  $something_type = something_type_create($something_type);

  drupal_write_record('something_type', $something_type, $write_record_keys);

  entity_info_cache_clear();
  menu_rebuild();
}

function something_type_create($info = array()) {
  $info = (array) $info;
  if (empty($info['type'])) {
    return FALSE;
  }
  $info += array(
    'help' => '',
    'description' => '',
  );
  if (empty($info['label'])) {
    $info['label'] = $info['type'];
  }

  return (object) $info;
}


function something_load($sid, $vid = NULL, $reset = FALSE) {
  $conditions = (isset($vid) ? array('vid' => $vid) : array());
  $somethings = something_load_multiple(array($sid), $conditions, $reset);
  return reset($somethings);
}

function something_load_multiple($sids, $conditions = array(), $reset = FALSE) {
  // Entity load handles field_attach_load for us.
  return entity_load('something', $sids, $conditions, $reset);
}

function something_create($type) {
  $something = new stdClass();
  $something->is_new = TRUE;
  $something->type = $type;
  return $something;
}

function something_save($something) {
  try {
    field_attach_validate('something', $something);
  }
  catch (FieldValidationException $e) {
    return FALSE;
  }
  $something->changed = time();
  if (empty($something->is_new) && !empty($something->sid)) {
    $keys = array('sid');
    $op = 'update';
  }
  else {
    $something->created = time();
    $keys = array();
    $op = 'insert';
  }
  field_attach_presave('something', $something);
  module_invoke_all('entity_presave', $something, 'something');
  unset($something->vid); // Force new revision
  drupal_write_record('something', $something, $keys);
  drupal_write_record('something_revision', $something);

  // Make sure we record new version
  db_update('something')
    ->fields(array('vid' => $something->vid))
    ->condition('sid', $something->sid)
    ->execute();

  call_user_func("field_attach_$op", 'something', $something);
  module_invoke_all('entity_' . $op, $something, 'something');
  return $something->sid;
}

function something_insert($type) {
  $something = something_create($type);
  something_save($something);
}

function something_update($something) {
  something_save($something);
}

/**
 * Deletes a something.
 *
 * @param $sid
 *   The numeric id of the something to be deleted.
 */
function something_delete($sid) {
  something_multiple_delete(array($sid));
}

/**
 * Deletes a something.
 *
 * @param $sid
 *   An array of numeric ids of the something to be deleted.
 */
function something_multiple_delete($sids) {
  $somethings = something_load_multiple($sids);
  foreach ($somethings as $sid => $something) {
    db_delete('something')->condition('sid', $sid)->execute();
    db_delete('something_revision')->condition('sid', $sid)->execute();
    module_invoke_all('entity_delete', $something, 'something');
    field_attach_delete('something', $something);
  }
}

/**
 * Menu callback: ask for confirmation of something deletion.
 */
function something_delete_confirm($form, &$form_state, $something) {
  $form['#something'] = $something;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['sid'] = array('#type' => 'value', '#value' => $something->sid);
  return confirm_form($form,
    t('Are you sure you want to delete something %sid?', array('%sid' => $something->sid)),
    'something/' . $something->sid,
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Executes something deletion.
 */
function something_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $something = $form['#something'];
    something_delete($form_state['values']['sid']);
    watchdog('something', '@type: deleted %title.', array('@type' => $something->type, '%title' => $something->sid));
    drupal_set_message(t('@type %title has been deleted.', array('@type' => $something->type, '%title' => $something->sid)));
  }

  $form_state['redirect'] = '<front>';
}


function something_add($type) {
  global $user;

  $something_types = something_get_types($type);
  if (empty($something_types)) {
    return 'Invalid Something entity type sepecified';
  }
  $something = something_create($type);
  drupal_set_title(t('Create @name', array('@name' => $something_types[$type]->name)), PASS_THROUGH);
  $output = drupal_get_form($type . '_something_form', $something);

  return $output;
}

/**
 * Menu callback; presents the editing form.
 */
function something_page_edit($something) {
  $something_types = something_get_types($something->type);
  drupal_set_title(t('Edit @name', array('@name' => $something_types[$something->type]->name)), PASS_THROUGH);
  return drupal_get_form($something->type . '_something_form', $something);
}

/**
 * Generate the something add/edit form array.
 */
function something_form($form, &$form_state, $something) {
  if (!isset($form_state['something'])) {
    $form_state['something'] = $something;
  }


  field_attach_form('something', $something, $form, $form_state);

  // Add the buttons.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('something_form_submit'),
  );
  return $form;
}

function something_form_submit($form, &$form_state) {
  $something = $form_state['something'];
  entity_form_submit_build_entity('something', $something, $form, $form_state);
  $sid = something_save($something);

  if ($sid) {
    $link = l($something->type, "something/$sid");
    $message = t('Created new !link', array('!link' => $link));
    drupal_set_message($message);
  }
  else {
    drupal_set_message('Something not created.', 'error');
  }
}

/**
 * Implements hook_views_api().
 */
function something_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'something') . '/views',
  );
}

