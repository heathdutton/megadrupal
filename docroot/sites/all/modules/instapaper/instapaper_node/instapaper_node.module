<?php
// $Id$
/**
 *
 * @file
 * Allows users to add selected node to their Instapaper que
 */

/**
 * Implements hook_perm().
 */
function instapaper_node_perm() {
  return array(
    'manage instapaper settings',
  );
}

/**
 *
 * Implements hook_menu().
 */
function instapaper_node_menu() {
  $items['admin/config/services/instapaper'] = array(
    'title' => 'Instapaper Settings',
    'description' => 'Administer the settings for Instapaper',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instapaper_node_settings_form'),
    'access arguments' => array('manage instapaper settings'),
    'file' => 'instapaper_node.admin.inc'
  );

  return $items;
}

/**
 * 
 * Implements hook_user_view_alter
 */
function instapaper_node_user_view_alter(&$build) {
  $account = $build['#account'];
  $ip_user = instapaper_node_get_login($account->uid);
  
  if ($ip_user->username != '') {
    $build['summary']['instapaper'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Instapaper Username'),
      '#markup' => $ip_user->username,
      '#weight' => 10
    );
    
  }
  
  /*
  if ($account->instapaper_username != '') {
    $social .= "Instapaper ";
  }

  $account->content['social_media'] = array(
    '#type' => 'user_profile_category',
    '#title' => t('Active Sharing Accounts'),
    '#weight' => 5,
  );

  $account->content['social_media']['items'] = array(
    '#type' => 'user_profile_item',
    '#value' => $social,
  );
  */
}

/**
 *
 * Implements hook_form_alter().
 * Creates a Form for the User view
 */
function instapaper_node_form_alter(&$form, &$form_state, $form_id) {
  // Check to see if it's the user form
  if (!($form_id == 'user_register_form' || $form_id == 'user_profile_form')) {
    return;
  }
  
  $user = $form['#user'];
  
  $ip_user = instapaper_node_get_login($user->uid);
  
  $form['#validate'][] = 'instapaper_node_auth_form_validate';
  
  $form['instapaper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Instapaper Account Information'),
    '#weight' => 10,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['instapaper']['instapaper_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => filter_xss($ip_user->username),
    '#description' => t('Please enter your Instapaper Username or Email Address'),
    '#weight' => 0,
  );
  $form['instapaper']['instapaper_password'] = array(
    '#type' => 'textfield',
     '#title' => t('Password'),
    '#default_value' => filter_xss($ip_user->password),
    '#description' => t('Password, if you have one'),
    '#weight' => 1,
  );

  //  Finds Node Types and stores in Array
  return $form;
}

/**
 *
 * Implements hook_form_validate() for instapaper_node_user_form().
 * Validates the User Information
 */
function instapaper_node_auth_form_validate($form, &$form_state) {

  $user = $form['#user'];
  $ip_username = $form['instapaper']['instapaper_username']['#value'];
  $ip_password = $form['instapaper']['instapaper_password']['#value'];
  
  if ($ip_username != '') { //Instapaper, at a minimum, requires a username, so if one isn't put in, there's no point in authenticating!
    $op = 'AUTH';
    $data = array(
      'username' => filter_xss($ip_username),
      'password' => filter_xss($ip_password),
    );
  
    $results = instapaper_api_call($op, $data);

    switch ($results->code) {
      case 200: // Correct Username and Password Combination
        break;
      case 403:
        form_set_error('instapaper_username', 'Invalid Username or Password');
        form_set_error('instapaper_password', '');
        break;
      case 500:
        form_set_error('instapaper_username', 'An error has occurred, please try again later');
        form_set_error('instapaper_password', '');
        break;
    } 
  }
  instapaper_node_save_login($user->uid, $ip_username, $ip_password);
}

/**
 * Function to insert Instapaper Usernames and Passwords into the database
 * @param uid -> User's UID
 * @param username -> Instapaper username
 * @param password -> Instapaper password
 **/
function instapaper_node_save_login($uid, $username, $password) {
  $ip_uid = db_query("SELECT uid FROM {instapaper} where uid = :uid", array(':uid' => $uid))->fetchField();
  
  if(!$ip_uid) { 
    $iid = db_insert('instapaper')->fields(array(
      'uid' => $uid,
      'username' => $username,
      'password' => $password,
    ))->execute();
  } else {
    if ($username != '') {
      $iid = db_update('instapaper')->fields(array(
        'uid' => $uid,
        'username' => $username,
        'password' => $password,
      ))->execute();
    } else { //If the user removes their Instapaper username, we will delete the record as they've removed the one vital piece of information for their account
      $iid = db_delete('instapaper')->condition('uid', $uid)->execute();
    } 
  }
}

/**
 * Function to retreive Instapaper Usernames and Passwords from the database
 * @param uid -> User's UID
 **/
function instapaper_node_get_login($uid) {
  $ip_uid = db_query("SELECT uid FROM {instapaper} where uid = :uid", array(':uid' => $uid))->fetchField();
  
  if($ip_uid) {
    $ip_user->username = db_query("SELECT username FROM {instapaper} where uid = :uid", array(':uid' => $uid))->fetchField();
    $ip_user->password = db_query("SELECT password FROM {instapaper} where uid = :uid", array(':uid' => $uid))->fetchField();
  } else {
    $ip_user->username = '';
    $ip_user->password = '';
  }
  
  return $ip_user;
}

/**
 * Implements hook_node_view()
 **/
function instapaper_node_node_view($node, $view_mode, $langcode) {
  $types = variable_get('instapaper_node_types', array());
  
  if ($types[$node->type]) { // Only display if it's a type that's allowed
    $node->content['instapaper'] = instapaper_node_page_additions($node);
  }
}

/**
 * Builds the Instapaper Submit form
 **/
function instapaper_node_page_additions($node) {
  global $base_url;
  // Get pieces for Instapaper
  $url = $base_url.'/'.$node->uri['path'];
  $title = $node->title;
  $teaser = $node->body['und']['0']['summary'];
  
  $build = drupal_get_form("instapaper_node_form", (object) array('url' => $url, 'title' => $title, 'teaser' => $teaser));
  $additions['instapaper_form'] = $build;
  return $additions;
}

/**
 *
 * Implements hook_form().
 * Creates a Form for the Node view
 */
function instapaper_node_form($form, $form_state, $node_info) {
  if (user_is_anonymous()) {
    $form['instapaper'] = array(
      '#type' => 'fieldset',
      '#title' => t('Instapaper Account Information'),
      '#weight' => 0,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['instapaper']['instapaper_username'] = array(
      '#type' => 'textfield',
      '#title' => t('Username'),
      '#description' => t('Please enter your Instapaper Username or Email Address'),
      '#weight' => 0,
    );
    $form['instapaper']['instapaper_password'] = array(
      '#type' => 'textfield',
      '#title' => t('Password'),
      '#description' => t('Password, if you have one'),
      '#weight' => 1,
    );
  }

  $form['instapaper']['instapaper_url'] = array(
    '#type' => 'hidden',
    '#title' => t('URL'),
    '#value' => $node_info->url,
    '#weight' => 2,
  );
  $form['instapaper']['instapaper_title'] = array(
    '#type' => 'hidden',
    '#title' => t('Title'),
    '#value' => $node_info->title,
    '#weight' => 3,
  );
  $form['instapaper']['instapaper_selection'] = array(
    '#type' => 'hidden',
    '#title' => t('Selection'),
    '#value' => $node_info->teaser,
    '#weight' => 4,
  );
  $form['instapaper_add'] = array(
    '#type' => 'button',
    '#default_value' => variable_get('instapaper_node_label', array()),
    '#weight' => 5,
    '#op' => 'ADD'
  );
  
  return $form;
}

/**
 *
 * Implements hook_form_validate() for instapaper_node_form().
 * Validates the Submission for Instapaper
 */
function instapaper_node_form_validate(&$element, &$form_state) {
  $url = $element['instapaper']['instapaper_url']['#value'];
  $title = $element['instapaper']['instapaper_title']['#value'];
  $teaser = $element['instapaper']['instapaper_selection']['#value'];
  
  if (!user_is_anonymous()) {
    global $user;
    $ip_user = instapaper_node_get_login($user->uid);
  } else {
    $ip_user->username = $element['instapaper']['instapaper_username']['#value'];
    $ip_user->password = $element['instapaper']['instapaper_password']['#value'];
  }
  
  $op = 'ADD';
  $data = array(
    'username' => $ip_user->username,
    'password' => $ip_user->password,
    'url' => $url,
    'title' => $title,
    'selection' => $teaser,
  );

  $results = instapaper_api_call($op, $data);

  switch ($results->code) {
    case 201:
      drupal_set_message($results->url . ' saved as ' . $results->title . ' in your Instapaper account!');
      break;
    case 400:
      form_set_error('instapaper_username', 'A bad request was made to Instapaper');
      break;
    case 403:
      if ($user->uid != 0) {
        form_set_error('instapaper_username', 'Invalid Username or Password');
      }
      else {
        form_set_error('instapaper_username', 'Invalid Username or Password. Please check your Instapaper account information in your profile');
      }
      break;
    case 500:
      form_set_error('instapaper_username', 'An error has occurred, please try again later');
      break;
  }
  return $results;
  
}