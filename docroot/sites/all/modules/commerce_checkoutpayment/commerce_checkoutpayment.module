<?php

/**
 * @file
 * This module provides Checkout.com payment gateway integration to Commerce,
 * Commerce Checkoutpayment offers a PCI-compliant way to process payments.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_checkoutpayment_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_checkoutpayment'] = array(
    'base' => 'commerce_checkoutpayment',
    'title' => t('Credit / Debit cards (Checkout.com)'),
    'short_title' => t('Credit / Debit cards (Checkout.com)'),
    'description' => t('Payment method for Checkout.com'),
    'terminal' => FALSE,
    'offsite' => commerce_checkoutpayment_check_method_type(),
    'offsite_autoredirect' => FALSE,
    'callbacks' => array(
      'submit_form_submit' => 'commerce_checkoutpayment_submit_charge',
    ),
  );

  return $payment_methods;
}

/**
 * Return TRUE or FALSE indicating whether or not
 * the customer must be redirected.
 */
function commerce_checkoutpayment_check_method_type(){

  $payment_method = commerce_payment_method_instance_load('commerce_checkoutpayment|commerce_payment_commerce_checkoutpayment');
  if (isset($payment_method['settings']['type']) && $payment_method['settings']['type'] == 'pci') {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Returns the default settings for the Checkout.Com payment method.
 */
function commerce_checkoutpayment_settings_default() {

  return array(
    'mode' => 'live',
    'type' => 'pci',
    'localpayment' => 'false',
    'iconcolor' => '',
    'logourl' => '',
    'buttoncolor' => '',
    'themecolor' => '',
    'currencycode' => 'true',
    'timeout' => 60,
    'card_types' => array(),
    'payment_action' => COMMERCE_CREDIT_AUTH_ONLY,
    'autocaptime' => 0,
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_checkoutpayment_settings_form($settings = array()) {
  $form = array();

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_checkoutpayment_settings_default();
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Key'),
    '#required' => TRUE,
    '#description' => t('The Checkout.com account secret API key to use .'),
    '#default_value' => isset($settings['private_key']) ? $settings['private_key'] : '',
  );

  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Publishable API Key'),
    '#required' => TRUE,
    '#description' => t('The Checkout.com account publishable API key to use.'),
    '#default_value' => isset($settings['public_key']) ? $settings['public_key'] : '',
  );

  $form['mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction Server'),
    '#description' => t('Perform transactions on the production server or on the testing server.'),
    '#default_value' => $settings['mode'],
    '#options' => array(
      'live' => t('Live - use for processing real transactions'),
      'sandbox' => t('Test - sandbox for testing. Require a test account'),
    ),
  );

  $form['payment_action'] = array(
    '#type' => 'select',
    '#title' => t('Transaction Method'),
    '#description' => t('The processing method to use for each transaction.'),
    '#default_value' => $settings['payment_action'],
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual capture after checkout)'),
    ),
  );

  $form['autocaptime'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Gateway auto capture time.'),
    '#description' => t('Set how long will the payment be capture.'),
    '#default_value' => $settings['autocaptime'],
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types (PCI only)'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );
  $form['localpayment'] = array(
    '#type' => 'select',
    '#title' => t('Enable LocalPayment'),
    '#options' => array(
      'true' => t('Yes'),
      'false' => t('No'),
    ),
    '#default_value' => $settings['localpayment'],
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Method Type (Pci enabled)'),
    '#description' => t('Verify gateway server SSL certificate on connection?'),
    '#options' => array(
      'pci' => t('Yes'),
      'nonpci' => t('No'),
    ),
    '#default_value' => $settings['type'],
  );

  $form['timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Gateway timeout.'),
    '#description' => t('Set how long request timeout on server.'),
    '#default_value' => $settings['timeout'],
  );

  $form['logourl'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo URL'),
    '#description' => t('This is the setting to display the logo on checkout.js (Max size: 180 x 36)'),
    '#default_value' => $settings['logourl'],
  );

  $form['themecolor'] = array(
    '#type' => 'textfield',
    '#title' => t('Theme color'),
    '#description' => t('Set theme color for checkout.js'),
    '#default_value' => $settings['themecolor'],
  );

  $form['buttoncolor'] = array(
    '#type' => 'textfield',
    '#title' => t('Button color'),
    '#description' => t('Set color for Pay now button'),
    '#default_value' => $settings['buttoncolor'],
  );

  $form['iconcolor'] = array(
    '#type' => 'textfield',
    '#title' => t('Icon color'),
    '#description' => t('Set icon color for checkout.js'),
    '#default_value' => $settings['iconcolor'],
  );

  $form['currencycode'] = array(
    '#type' => 'select',
    '#title' => t('Widget currency format'),
    '#description' => t('Display currency code or currency symbol on the checkout.js'),
    '#options' => array(
      'true' => t('Code'),
      'false' => t('Symbol'),
    ),
    '#default_value' => $settings['currencycode'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_checkoutpayment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $instance = commerce_checkoutpayment_get_instance($payment_method);
  return $instance->submitForm($payment_method, $pane_values, $checkout_pane, $order);
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_checkoutpayment_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

  $instance = commerce_checkoutpayment_get_instance($payment_method);
  $data = $instance->getExtraInit($order, $payment_method);

  if ($payment_method['settings']['type'] == 'pci') {
    // Validate the credit card fields.
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

    $settings = array(
      'form_parents' => array_merge($form_parents, array('credit_card')),
    );

    if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
      return FALSE;
    }
  }
  else {
    if (empty($pane_values['credit_card']['cko-cc-paymenToken'])) {
      drupal_set_message($data['paymentToken']['message'], 'error');
      return FALSE;
    }
    return TRUE;
  }
}

/**
 * Retrieves all active instances definitions.
 */
function commerce_checkoutpayment_get_instance($settings) {

  module_load_include('php', 'commerce_checkoutpayment', 'includes/autoload');

  switch ($settings['settings']['type']) {
    case 'pci':
      $_instance = CheckoutApi_Lib_Factory::getInstance('methods_creditcardpci');
      break;

    default:
      $_instance = CheckoutApi_Lib_Factory::getInstance('methods_creditcard');
      break;
  }

  return $_instance;
}

/**
 * Imitates the checkout form submission callback.
 */
function commerce_checkoutpayment_submit_charge($payment_method, $pane_form, $pane_values, $order, $charge) {

  if ($payment_method['settings']['type'] == 'pci') {
    $instance = commerce_checkoutpayment_get_instance($payment_method);

    return $instance->submitFormCharge($payment_method, $pane_form, $pane_values, $order, $charge);
  }
  else {

    return TRUE;
  }
}

/**
 * Implements hook_menu().
 */
function commerce_checkoutpayment_menu() {

  $items = array();

  $items['checkoutapi/process'] = array(
    'title' => 'Ipn checkout',
    'page callback' => 'commerce_checkoutpayment_process_order',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['commerce_checkoutpayment/success'] = array(
    'title' => 'Success page',
    'page callback' => 'commerce_checkoutpayment_success_order',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Update order status through webhook url : example.com/checkoutapi/process.
 */
function commerce_checkoutpayment_process_order() {

  $payment_method = commerce_payment_method_instance_load('commerce_checkoutpayment|commerce_payment_commerce_checkoutpayment');
  $post_data = file_get_contents('php://input');
  if ($post_data) {
    $api = CheckoutApi_Api::getApi(array('mode' => $payment_method['settings']['mode']));
    $object_charge = $api->chargeToObj($post_data);

    if ($object_charge->isValid()) {

      /*
       * Need to get track id
       */
      $order_id = $object_charge->getTrackId();

      $order = commerce_order_load($order_id);
      $charge = $order->commerce_order_total[LANGUAGE_NONE][0];

      $transaction = commerce_payment_transaction_new('commerce_checkoutpayment', $order->order_id);
      $transaction->instance_id = $payment_method['instance_id'];
      $transaction->amount = $charge['amount'];
      $transaction->currency_code = $charge['currency_code'];

      if ($object_charge->getCaptured()) {

        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = 'Your transaction has been successfully captured';
        commerce_payment_transaction_save($transaction);
        commerce_order_status_update($order, 'processing', FALSE, TRUE, 'Your payment has been successfully completed');
      }
      elseif ($object_charge->getRefunded()) {

        $transaction->message = 'Your payment has been refunded';
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        commerce_payment_transaction_save($transaction);
        commerce_order_status_update($order, 'canceled', FALSE, TRUE, 'Your payment has been refunded');
      }
      elseif (!$object_charge->getAuthorised()) {

        $transaction->message = 'Your payment has been canceled';
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        commerce_payment_transaction_save($transaction);
        commerce_order_status_update($order, 'canceled', FALSE, TRUE, 'Your payment has been canceled');
      }
    }
    else {
      watchdog('commerce_checkoutpayment', '!charge', array('!charge' => $object_charge->getRawRespond()), WATCHDOG_WARNING);
    }
  }
  return NULL;
}

/**
 * Mobile Redirect to success url:
 * example.com/commerce_checkoutpayment/success.
 */
function commerce_checkoutpayment_success_order() {

  if (!isset($_POST['cko-payment-token'])) {
    drupal_goto();
  }

  module_load_include('php', 'commerce_checkoutpayment', 'includes/autoload');

  $payment_method = commerce_payment_method_instance_load('commerce_checkoutpayment|commerce_payment_commerce_checkoutpayment');

  $config['authorization'] = $payment_method['settings']['private_key'];
  $config['paymentToken'] = $_POST['cko-payment-token'];

  $api = CheckoutApi_Api::getApi(array('mode' => $payment_method['settings']['mode']));
  $object_charge = $api->verifyChargePaymentToken($config);

  $order_id = $object_charge->getTrackId();
  $order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = $order_wrapper->commerce_order_total->value();

  $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order_total['amount'];
  $transaction->currency_code = $order_total['currency_code'];
  $transaction->payload[REQUEST_TIME] = $object_charge->getCreated();

  $default_currency = commerce_default_currency();
  $amount = number_format(commerce_currency_convert($order_total['amount'], $order_total['currency_code'], $default_currency), 0, '', '');
  $to_validate = array(
    'currency' => $default_currency,
    'value' => $amount,
    'trackId' => $order_id,
  );
  $validate_request = $api::validateRequest($to_validate, $object_charge);

  if (preg_match('/^1[0-9]+$/', $object_charge->getResponseCode())) {
    $transaction->message = 'Your transaction has been successfully authorized with transaction id : ' . $object_charge->getId();
    if(!$validate_request['status']){
      foreach($validate_request['message'] as $errormessage){
        $transaction->message .= $errormessage . '. ';
      }
    }
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

    commerce_payment_transaction_save($transaction);
    $order = commerce_order_status_update($order, 'checkout_complete', FALSE, TRUE, 'Your payment has been successfully completed');

  }
  else {
    watchdog('checkoutpayment_return_url', '!charge', array('!charge' => $object_charge->getRawRespond()), WATCHDOG_WARNING);
  }

  // Calling this method order status will be changed to "Checkout_complete".
  commerce_checkout_complete($order);

  // Redirect to order completed page or review page.
  return drupal_goto(commerce_checkout_order_uri($order));
}

/**
 * Payment method callback: redirect form.
 */
function commerce_checkoutpayment_redirect_form ($form, &$form_state, $order, $payment_method) {

  $instance = commerce_checkoutpayment_get_instance($payment_method);
  $data = $instance->getExtraInit($order, $payment_method);

  $form['pay_method_container'] = array(
    '#type' => 'hidden',
    '#attributes' => array(
      'class' => array('widget-container'),
    ),
  );
  $form['cko-cc-redirectUrl'] = array(
    '#type' => 'hidden',
    '#value' => '',
    '#attributes' => array(
      'id' => array('cko-cc-redirectUrl'),
    ),
  );
  $form['cko-cc-paymenToken'] = array(
    '#type' => 'hidden',
    '#value' => '',
    '#attributes' => array(
      'id' => array('cko-cc-paymenToken'),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Checkout.Com'),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'commerce_checkoutpayment') . '/includes/methods/js/checkoutapi.js' => array(
          'type' => 'file',
        ),
        array(
          'data' => array('commerce_checkoutpayment' => $data['script']),
          'type' => 'setting',
        ),
      ),
    ),
  );

  $form['#action'] = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key']);

  return $form;
}

/**
 * Payment method callback: redirect form return submission.
 */
function commerce_checkoutpayment_redirect_form_submit($order, $payment_method) {

  $instance = commerce_checkoutpayment_get_instance($payment_method);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = $order_wrapper->commerce_order_total->value();
  $charge['amount'] = $order_total['amount'];
  $charge['currency_code'] = $order_total['currency_code'];
  $pane_values = array();
  if($payment_method['method_id'] == 'commerce_checkoutpayment'){

    if(!empty($_POST['cko-cc-paymenToken'])){
      $pane_values['cko-cc-paymenToken'] = $_POST['cko-cc-paymenToken'];
    }
    else {
      if(!empty($_POST['cko-cc-redirectUrl'])) {
        $pane_values['cko-cc-redirectUrl'] = $_POST['cko-cc-redirectUrl'];
      }
      else {
        drupal_goto('checkout/'. $order->order_id.'/payment');
      }
    }
  }

  return $instance->submitFormCharge($payment_method, NULL, $pane_values, $order, $charge);
}
