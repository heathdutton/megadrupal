<?php

/**
 * @file
 * Provides a private simple commenting system for nodes.
 *
 * This module is intended to help administrators and staff to leave notes
 * on a node without tying up the core comment module on the same node type.
 */

/**
 * Callback function to see if a node is acceptable for notes menu items.
 */
function _node_notes_menu_access($node, $op, $note = NULL) {
  switch ($op) {
    case 'view':
      return (variable_get('node_notes_use_' . $node->type) && (user_access('view ' . $node->type . ' notes') || user_access('administer notes')));

      break;
    case 'delete':
      global $user;

      $delete_own_notes = (user_access('delete own ' . $node->type . ' notes') && ($note->uid == $user->uid));
      $delete_any_notes = user_access('delete any ' . $node->type . ' notes');
      $administer_notes = user_access('administer notes');

      return ($delete_own_notes || $delete_any_notes || $administer_notes);

      break;
  }
}

function _node_notes_get_configured_types() {
  $types = array();

  foreach (node_permissions_get_configured_types() as $type) {
    $info = node_type_get_type($type);
    $info->node_notes_use = variable_get('node_notes_use_' . $type);
    $types[] = $info;
  }

  return $types;
}

/**
 * Implements hook_permission().
 * TODO: Add edit capability
 * TODO: Add permissions per content type
 */
function node_notes_permission() {
  $perms = array(
    'administer notes' => array(
      'title' => t('Administer notes'),
    ),
  );

  // Generate standard node permissions for all applicable node types.
  foreach (_node_notes_get_configured_types() as $type) {
    if ($type->node_notes_use) {
      $perms += array(
        "view $type->type notes" => array(
          'title' => t('%type_name: View notes', array('%type_name' => $type->name)),
        ),
        "create $type->type notes" => array(
          'title' => t('%type_name: Create new notes', array('%type_name' => $type->name)),
        ),
        "delete own $type->type notes" => array(
          'title' => t('%type_name: Delete own notes', array('%type_name' => $type->name)),
        ),
        "delete any $type->type notes" => array(
          'title' => t('%type_name: Delete any notes', array('%type_name' => $type->name)),
        ),
      );
    }
    else {
      continue;
    }
  }

  return $perms;
}

/**
 * Implements hook_menu().
 */
function node_notes_menu() {
  $items['node/%node/notes'] = array(
    'title' => 'Notes',
    'page callback' => 'node_notes_view',
    'page arguments' => array(1),
    'access callback' => '_node_notes_menu_access',
    'access arguments' => array(1, 'view'),
    'file' => 'node_notes.pages.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/notes/%node_notes/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_notes_confirm_delete', 3),
    'access callback' => '_node_notes_menu_access',
    'access arguments' => array(1, 'delete', 3),
    'file' => 'node_notes.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function node_notes_form_node_type_form_alter(&$form, $form_state) {
  $form['node_note'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Notes'),
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 32,
  );
  $form['node_note']['node_notes_use'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add notes to this content type.'),
    '#default_value' => variable_get('node_notes_use_' . $form['#node_type']->type, FALSE),
  );
}

/**
 * Implements hook_node_type_update().
 */
function node_notes_node_type_update($info) {
  if (!empty($info->old_type) && $info->old_type != $info->type) {
    $setting = variable_get('node_notes_use_' . $info->old_type, 1);
    variable_del('node_notes_use_' . $info->old_type);
    variable_set('node_notes_use_' . $info->type, $setting);
  }
}

/**
 * Loads a note object
 */
function node_notes_load($noteid) {
  return db_select('node_notes', 'n')
    ->fields('n')
    ->condition('noteid', $noteid, '=')
    ->execute()
    ->fetchObject();
}

/**
 * Implements hook_node_type_delete().
 */
function node_notes_node_type_delete($info) {
  variable_del('node_notes_use_' . $info->type);
}

/**
 * Provides the form for a note.
 */
function node_notes_form($form, &$form_state, $node) {
  $form_state['node'] = $node;

  $form['add_note'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a note'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['add_note']['body'] = array(
    '#type' => 'text_format',
    '#format' => variable_get('node_notes_default_format', NULL),
    '#required' => TRUE,
  );

  $form['add_note']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Note'),
  );

  return $form;
}

/**
 * Validation handler for node_notes_form().
 *   Requires note body to be filled to pass.
 */
function node_notes_form_validate($form, &$form_state) {
  if (!$form_state['values']['body']['value']) {
    form_set_error('body', t('Your note cannot be empty.'));
  }
}

/**
 * Submit handler for node_notes_form().
 *   Calls node_notes_save().
 */
function node_notes_form_submit($form, &$form_state) {
  $value = $form_state['values']['body']['value'];
  $format = $form_state['values']['body']['format'];
  node_notes_save($form_state['node'], $value, $format);
}

/**
 * Saves a note in the database.
 *
 * @param object $node
 *   The node object the note will be attached to.
 *
 * @param string $body
 *   The body content of the note.
 *
 * @param string $format (optional)
 *   The body format of the note. Defaults to NULL.
 */
function node_notes_save($node, $body, $format = NULL) {
  global $user;

  $fields = array(
    'noteid' => NULL,
    'nid' => $node->nid,
    'uid' => $user->uid,
    'created' => REQUEST_TIME,
    'body' => $body,
    'format' => $format,
  );

  if (drupal_write_record('node_notes', $fields)) {
    drupal_set_message(t('Your note has been saved.'));
  }
  else {
    drupal_set_message(t('There was a problem saving the note.'), 'error');
  }
}

/**
 * Deletes a note from the database.
 *
 * @param int $noteid
 *   The ID of the note to be deleted.
 */
function node_notes_delete($noteid = 0) {
  db_delete('node_notes')
    ->condition('noteid', $noteid)
    ->execute();
}

/**
 * Implements hook_theme().
 */
function node_notes_theme() {
  return array(
    'node_notes_form' => array(
      'render element' => 'form',
    ),
    'node_notes_note' => array(
      'variables' => array('note' => NULL),
      'file' => 'node_notes.pages.inc',
      'template' => 'templates/node_notes-note',
    ),
    'node_notes_wrapper' => array(
      'variables' => array('notes' => NULL, 'node' => NULL),
      'file' => 'node_notes.pages.inc',
      'template' => 'templates/node_notes-wrapper',
    ),
  );
}
