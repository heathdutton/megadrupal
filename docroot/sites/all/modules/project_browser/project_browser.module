<?php
/**
 * @file
 * Project Browser module.
 *
 * Authored by Leighton Whiting to improve site builder UX.
 *
 * This module provides a new UI for admins to easily browse modules and themes
 * from their admin pages, and install them.
 *
 * TODO - Add a context to pages showing the filters currently used
 * TODO - Create a test for the get releases HTML page
 */

/**
 * Implements hook_help().
 */
function project_browser_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#project_browser":
      $output .= '<p>' . t("Provides a UI for users to browse for and install new modules and themes from within their Drupal admin interface.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function project_browser_permission() {
  return array(
    'use project browser' => array(
      'title' => t('Use Project Browser'),
      'description' => t('This allows the user to browse for and install new modules and themes using Project Browser.'),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implements hook_menu().
 */
function project_browser_menu() {
  $items = array();
  $items['admin/config/development/project_browser'] = array(
    'title' => 'Project Browser settings',
    'description' => 'Add new repositories and set other settings for Project Browser.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_browser_admin'),
    'access arguments' => array('access administration pages'),
    'file' => 'project_browser.admin.inc',
  );

  $items['admin/modules/project-browser'] = array(
    'title' => 'Project Browser',
    'description' => 'Browse and search for new modules',
    'page callback' => 'project_browser_page',
    'page arguments' => array('module'),
    'access arguments' => array('use project browser'),
    'file' => 'project_browser.pages.inc',
  );

  $items['admin/modules/project-browser/modules'] = array(
    'title' => 'Modules',
    'description' => 'Browse and search for new modules',
    'page callback' => 'project_browser_page',
    'page arguments' => array('module'),
    'access arguments' => array('use project browser'),
    'file' => 'project_browser.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/modules/project-browser/themes'] = array(
    'title' => 'Themes',
    'description' => 'Browse and search for new themes',
    'page callback' => 'project_browser_page',
    'page arguments' => array('theme'),
    'access arguments' => array('use project browser'),
    'file' => 'project_browser.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/modules/project-browser/install/%'] = array(
    'title' => 'Install',
    'page callback' => 'project_browser_installation_page',
    'page arguments' => array(4),
    'access arguments' => array('use project browser'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'project_browser.pages.inc',
  );

  $items['admin/project-browser/%/install-queue/%/%'] = array(
    'page callback' => 'project_browser_install_queue_callback',
    'page arguments' => array(2, 4, 5),
    'access arguments' => array('use project browser'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Page callback: Allows for adding to and removing from the install queue.
 */
function project_browser_install_queue_callback($method, $op, $project_name) {
  module_load_include('inc', 'project_browser', 'project_browser');

	switch ($op) {
    case 'add':
			$projects = project_browser_get_listed_projects();

		  if (isset($projects[$project_name])) {
		    $project = $projects[$project_name];
		    project_browser_install_queue_add($project);
		  }
		  else {
		    drupal_set_message(t('Error: The project was not found.'), 'error');
		  }
      break;

    case 'remove':
      project_browser_install_queue_remove($project_name);
      break;
  }

  switch ($method) {
    case 'nojs':
      // Redirect to the page it came from.
      $redirect = (isset($_GET['destination'])) ? $_GET['destination'] : 'admin/modules/project-browser';

      drupal_goto($redirect);
      break;

    case 'ajax':
      $commands = array();

      // Refresh the install queue.
      $commands[] = ajax_command_replace('#project-browser-install-queue', project_browser_get_install_list());
      // Refresh the add to queue link.
      $commands[] = ajax_command_replace('#add-to-queue-link-' . $project_name, project_browser_add_remove_queue_link($project_name));

      ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
      break;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * This is used to put the 'Project Browser' action on the 'Modules' page.
 */
function project_browser_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    case 'admin/modules':
      // Unset the install theme page.
      foreach ($data['actions']['output'] as $num => $item) {
        if ($item['#link']['path'] == 'admin/modules/install') {
          unset($data['actions']['output'][$num]);
        }
      }
      $item = menu_get_item('admin/modules/project-browser/modules');
      if ($item['access']) {
        $item['title'] = t('Install new modules');
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;

    case 'admin/modules/project-browser':
    case 'admin/modules/project-browser/modules':
    case 'admin/modules/project-browser/themes':
      $item = menu_get_item('admin/modules/install');
      if ($item['access']) {
        $item['title'] = t('Install manually');
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;

    case 'admin/appearance':
      // Unset the install theme page
      foreach ($data['actions']['output'] as $num => $item) {
        if ($item['#link']['path'] == 'admin/appearance/install') {
          unset($data['actions']['output'][$num]);
        }
      }
      $item = menu_get_item('admin/modules/project-browser/themes');
      if ($item['access']) {
        $item['title'] = t('Install new themes');
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function project_browser_theme($existing, $type, $theme, $path) {
  return array(
    // Template for installation page.
    'project_browser_install' => array(
      'variables' => array('current_task' => NULL, 'main_content' => NULL),
      'path' => $path . '/theme',
      'template' => 'project-browser-install',
    ),
    // Template for list of projects.
    'project_browser_list' => array(
      'variables' => array('projects_list' => NULL, 'type' => NULL),
      'path' => $path . '/theme',
      'template' => 'project-browser-list',
    ),
    // Template for block.
    'project_browser_block' => array(
      'render element' => 'element',
      'path' => $path . '/theme',
      'template' => 'project-browser-block',
    ),
    // Template for single project.
    'project_browser_project' => array(
      'variables' => array('project' => NULL, 'first' => NULL),
      'path' => $path . '/theme',
      'template' => 'project-browser-project',
    ),
    // Template for install queue item.
    'project_browser_install_queue' => array(
      'variables' => array('projects' => NULL),
      'path' => $path . '/theme',
      'template' => 'project-browser-install-queue',
    ),
  );
}

/**
 * Add some variables for the projects install theme.
 *
 * @param $variables
 *   An associative array containing:
 *     - current_task : the current task
 */
function project_browser_preprocess_project_browser_install(&$variables) {
  module_load_include('inc', 'project_browser', 'project_browser.pages');
  // Add the themed list.
  $variables['task_list'] = project_browser_installation_task_list($variables['current_task']);
}

/**
 * Add some variables for the projects install queue theme.
 */
function project_browser_preprocess_project_browser_install_queue(&$variables) {
  $build = array();
  if (empty($variables['projects'])) {
    $build['empty_text'] = array(
      '#markup' => t('Install queue is empty.'),
    );
  }
  else {
    foreach ($variables['projects'] as $project) {
      $build['queued-item-' . $project['name']] = array(
        '#prefix' => "<div class='project-browser-install-queue-item'>",
        '#markup' => project_browser_add_remove_queue_link($project['name'], $project['title'], 'remove-queue-link'),
        '#suffix' => "</div>",
      );
    }
    $build['install-link'] = drupal_get_form('project_browser_install_button_form');
  }

  // Add the install button.
  $variables['queue_html'] = drupal_render($build);
}

/**
 * Add some variables for the project browser block theme.
 *
 * @param $variables
 */
function project_browser_preprocess_project_browser_block(&$variables) {
  // Add the title and content variables.
  $variables['title'] = $variables['element']['title'];
  $variables['content'] = $variables['element']['content'];
}

/**
 * Add some variables for the projects list theme.
 *
 * @param $variables
 *   An associative array containing:
 *     - projects_list : array of all projects.
 */
function project_browser_preprocess_project_browser_list(&$variables) {
  module_load_include('inc', 'project_browser', 'project_browser');
  drupal_add_css(drupal_get_path('module', 'project_browser') . '/css/project_browser.css');

  if (is_array($variables['projects_list']) AND !empty($variables['projects_list'])) {
    $content = '';
    $first = TRUE;
    // Theme each individual project and add to the list.
    foreach ($variables['projects_list'] as $project) {
      $content .= theme('project_browser_project', array('project' => $project, 'first' => $first));
      $first = FALSE;
    }
  }
  else {
    $content = t('No results found.');
  }

  switch ($variables['type']) {
    case 'module':
      $title = t('Modules');
      break;
    case 'theme':
      $title = t('Themes');
      break;
    default:
      $title = t('Projects');
      break;
  }

  $main_content['project_browser_main_block'] = array(
    '#theme' => 'project_browser_block',
    'title' => $title,
    'content' => $content,
    '#contextual_links' => array(
      'project_browser' => array('admin/config/development/project_browser', array()),
    ),
  );
  $variables['main_content'] = render($main_content);

  // Add the pager.
  $variables['pager'] = theme('pager', array('tags' => NULL));

  // Add the filters.
  $filters['project_browser_filters_block'] = array(
    '#theme' => 'project_browser_block',
    'title' => t('Filters'),
    'content' => drupal_render(drupal_get_form('project_browser_filters_form', $variables['type'])),
  );
  $variables['filters'] = render($filters);

  // Add the install list.
  $install_list['project_browser_filters_block'] = array(
    '#theme' => 'project_browser_block',
    'title' => t('Install queue'),
    'content' => project_browser_get_install_list(),
  );
  $variables['install_list'] = render($install_list);
}

/**
 * Add some variables for the project theme.
 *
 * @param $variables
 *   An associative array containing:
 *     - project : associative array of project variables.
 */
function project_browser_preprocess_project_browser_project(&$variables) {
  module_load_include('inc', 'project_browser', 'project_browser');
  $project = $variables['project'];

  $variables['title'] = l($project['title'], check_url($project['project url']),
  	array('attributes' => array('target' => '_blank'), 'html' => TRUE));
  $variables['author'] = t('Author: @author', array('@author' => $project['author']));
  $variables['description'] = _filter_htmlcorrector(filter_xss($project['description']));
  $variables['image'] = $project['image'];
  $variables['last_updated'] = ($project['last updated']) ? t('Last Updated: @date', array('@date' => format_date($project['last updated'], 'long'))) : '';

  $extras = array();

  if ($project['maintenance status']) {
    $extras[] = check_plain($project['maintenance status']);
  }
  if ($project['development status']) {
    // We are not showing this because it isn't a good indicator right now.
    // $extras[] = check_plain($project['development status']);
  }
  if ($project['usage'] AND is_numeric($project['usage'])) {
    $extras[] = format_plural($project['usage'], '1 Install', '@count Installs');
  }
  if ($project['rating']) {
    $extras[] = check_plain($project['rating']);
  }

  $variables['extras'] = implode(' | ', $extras);

  // Check if the project is installed.
  if (_project_browser_is_project_enabled($project['type'], $project['name'])) {
    $variables['status'] = '<div class="install-disabled">Already installed</div>';
    $variables['install'] = '';
  }
  elseif (drupal_get_filename($project['type'], $project['name'])) {
    $variables['status'] = '<div class="install-disabled">Already downloaded</div>';
    $variables['install'] = '';
  }
  else {
    $variables['status'] = '';
    $variables['install'] = project_browser_add_remove_queue_link($project['name']);
  }
}

/**
 * Builds the add/remove project to install queue link.
 */
function project_browser_add_remove_queue_link($project_name, $title = NULL, $id_prefix = 'add-to-queue-link') {
  $queued_projects = project_browser_get_queued_projects();
  if (!$title) {
    $title = isset($queued_projects[$project_name]) ? t('Remove from Install queue') : t('Add to Install queue');
  }
  $op = isset($queued_projects[$project_name]) ? 'remove' : 'add';

  $build['ajax_link'] = array(
    '#type' => 'link',
    '#title' => $title,
    '#href' => 'admin/project-browser/nojs/install-queue/' . $op . '/'. $project_name,
    '#options' => array(
      'query' => drupal_get_destination(),
    ),
    '#id' => $id_prefix . '-' . $project_name,
    '#ajax' => array(
      'effect' => 'fade',
      'speed' => 1000,
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ),
    ),
  );

  return drupal_render($build);
}

/**
 * Implements hook_library().
 *
 * This is used for the categories multiselect widget library.
 */
function project_browser_library() {
  // Library One.
  $libraries['multiselect'] = array(
    'title' => 'jQuery MultiSelect',
    'website' => 'http://example.com/library-1',
    'version' => '1.10a',
    'js' => array(
      drupal_get_path('module', 'project_browser') . '/js/jquery.multiselect.min.js' => array(),
    ),
    'css' => array(
      drupal_get_path('module', 'project_browser') . '/css/jquery.multiselect.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('system', 'ui.widget'),
      array('system', 'ui.dialog'),
      array('system', 'ui.position'),
    ),
  );
  return $libraries;
}
