<?php

/**
 * @file
 * Quiz_progress module file.
 */

/**
 * Implementation of hook_menu()
 */
function quiz_progress_menu() {
  $items['admin/quiz/settings/quiz_progress'] = array(
    'title' => '@quiz progress configuration',
    'title arguments' => array('@quiz' => QUIZ_NAME),
    'description' => 'Configure @quiz settings.', array('@quiz' => QUIZ_NAME),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quiz_progress_config_form'),
    'access arguments' => array('administer quiz configuration'),
    'type' => MENU_NORMAL_ITEM, // optional
    'file' => 'quiz_progress.admin.inc',
  );
  $items['node/%node/quiz_progress_set_filter'] = array(
    'title' => '',
    'page callback' => '_quiz_progress_set_filter',
    'page arguments' => array(1),
    'access callback' => 'quiz_take_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_permission()
 */
function quiz_progress_permission() {
  return array(
    'access_quiz_progress' => array(
      'title' => t('Access quiz progress'),
      'description' => t('Allows to access quiz progress block'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function quiz_progress_theme() {
  return array(
    'quiz_progress_question_block' => array(
    'variables' => array('quiz' => NULL, 'questions' => NULL),
    )
  );
}

/**
 * Implementation of hook_help()
 */
function quiz_progress_help($path, $arg) {
  switch ($path) {
    case 'admin/help#quiz_progress':
      return '' . '<h3>' . t('About') . '</h3>' . '<p>' . t('The Quiz Progress module implements a block to switch between the questions.') . '<p>';
  }
}

/**
 * Function to sets session variable for showing skipped questions
 *
 * @param $quiz
 *  quiz node object
 */
function _quiz_progress_set_filter($quiz) {
  if (!isset($_SESSION['quiz_progress_show_kipped'])) {
    $_SESSION['quiz_progress_show_kipped'] = TRUE;
  }

  $_SESSION['quiz_progress_show_kipped'] = !$_SESSION['quiz_progress_show_kipped'];
  drupal_goto("node/{$quiz->nid}/take");
}

/**
 * Implementation of hook_perm()
 */
function quiz_progress_perm() {
  return array('access quiz progress');
}

/**
 * Implementation of hook_block_info()
 */
function quiz_progress_block_info() {
  $blocks['quiz_progress_block'] = array(
    'info' => t('Quiz Progress Block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view()
 */
function quiz_progress_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'quiz_progress_block':
      if (user_access('access_quiz_progress')) {
        $quiz_nid = arg(1);
        $quiz = node_load($quiz_nid);
        if (quiz_progress_block_access($quiz)) {
          $questions = quiz_progress_block_content_load($quiz);
          $block['content'] = array(
            '#theme' => 'quiz_progress_question_block',
            '#quiz' => $quiz,
            '#questions' => $questions,
          );
          $block['subject'] = check_plain($quiz->title);
        }
      }
      break;
    }
  return $block;
}

/**
 * Function to load module css, js files
 * and fetch questions in the quiz.
 *
 * @param $quiz
 */
function quiz_progress_block_content_load($quiz) {
  $questions = NULL;
  _quiz_progress_block_load_styles();
  $questions = array_merge($_SESSION['quiz_' . $quiz->nid]['previous_quiz_questions'] , $_SESSION['quiz_' . $quiz->nid]['quiz_questions']);
  return $questions;
}

/**
 * Function to decide availability of quiz progress block
 *
 * @param $quiz
 *
 * @return boolean value
 *   -true or false
 */
function quiz_progress_block_access($quiz) {
  if (arg(0) == 'node' &&  arg(2) == 'take' && is_object($quiz) && isset($_SESSION['quiz_' . $quiz->nid]['result_id'])) {
    if ($_SESSION['quiz_' . $quiz->nid]['result_id'] > 0) {
      return TRUE;
    }
    return FALSE;
  }
}

function quiz_progress_get_questions($quiz) {
  if (
      !isset($_SESSION['quiz_'. $quiz->nid]['quiz_progress_questions']) ||
      (count($_SESSION['quiz_'. $quiz->nid]['quiz_progress_questions']) != quiz_get_number_of_questions($quiz->vid))
    ) {
    $_SESSION['quiz_'. $quiz->nid]['quiz_progress_questions'] = $_SESSION['quiz_'. $quiz->nid]['quiz_questions'];
  }
  return $_SESSION['quiz_'. $quiz->nid]['quiz_progress_questions'];
}

/**
 * Function to build links to be displayed in quiz progress block
 * e.g. Show all, Show only skipped questions
 *
 * @param quiz object
 * @return link
 *   e.g. Show all, Show only skipped questions
 */
function quiz_progress_block_skipped_filter($quiz) {
  if (isset($_SESSION['quiz_progress_show_kipped']) &&  $_SESSION['quiz_progress_show_kipped']) {
    $text = t('Show all');
  }
  else {
    $text = t('Show only the skipped questions');
  }
  return l($text, "node/{$quiz->nid}/quiz_progress_set_filter");
}

/**
 * Function to build Question links to be displayed in quiz progress block
 *
 * @param
 *   status - status of the question e.g. skipped, answered, queued
 *   question - question details
 *   question_title - Text to be displayed on mouse hover
 *
 * @return array of attributes of a question
 */
function quiz_progress_get_link_options($status, $question, $question_title) {
  $color = variable_get('quiz_progress_output_text_color_' . $status, '');
  return array(
    'fragment' => ' ',
    'external' => TRUE,
    'query' => array(
      'jump_to_question' => $question['number'],
    ),
    'attributes' => array(
      'class' => 'quiz-progress ' . $status,
      'id' => 'quiz-progress-id-' . $question['number'],
      'title' => $question_title,
      'absolute' => TRUE,
      'style' => "color: $color;"
    ),
  );
}

/**
 * Returns HTML for the content of quiz progress block
 *
 * @param $variables
 *   An associative array containing:
 *   - quiz: quiz object
 *   - questions: - questions in the quiz
 */
function theme_quiz_progress_question_block($variables) {
  $quiz = $variables['quiz'];
  $questions = $variables['questions'];
  _quiz_progress_block_load_styles();

  if (isset($_SESSION['quiz_progress_show_kipped']) &&  $_SESSION['quiz_progress_show_kipped']) {
    $items = array();
    drupal_add_js(array('quiz_progress' => array('show_kipped' => 1)), 'setting');
    $title_length = variable_get('quiz_progress_title_style_length', 32);
    foreach ($questions as $question) {
      if (empty($question)) {
        continue;
      }
      $status = _quiz_progress_get_question_status($quiz, $question);
      if ($status != 'skipped') {
        continue;
      }
      $question_title = _quiz_progress_get_question_title($question);
      $status = _quiz_progress_get_question_status($quiz, $question);
      $options = quiz_progress_get_link_options($status, $question, $question_title);
      $items[$question['nid']] = l(drupal_substr($question_title, 0, $title_length), '', $options);
    }
    if (empty($items)) {
      return '<p>' . t('You have no skipped questions') . '</p>';
    }
    $output = quiz_progress_block_skipped_filter($quiz);
    $output .= '<div class="quiz-progress-block-wrapper">';
    $output .= theme('item_list', array('items' => $items, 'title' => t('Questions'), 'type' => 'ol', 'attributes' => array('class' => 'quiz-progress-item-list'))) . '</div>';
    return $output;
  }
  $output_style = variable_get('quiz_progress_output_style', 'number');
  if ($output_style == 'number') {
    $rows = array();
    $row = 0;
    $col_size = variable_get('quiz_progress_number_style_col_size', 4);
    foreach ($questions as $question) {
      if (empty($question)) {
       continue;
      }
      $question_title = _quiz_progress_get_question_title($question);
      $status = _quiz_progress_get_question_status($quiz, $question);
      $bg_color = variable_get('quiz_progress_output_bg_color_' . $status, '');
      $options = quiz_progress_get_link_options($status, $question, $question_title);
      $rows[$row][$question['number']] = array(
        'data' => l($question['number'], '', $options),
        'class' => $status,
        'style' => "background-color: $bg_color;"
      );
      $row = $question['number'] % $col_size != 0 ? $row : $row + 1;
    }
    // TODO : Use hook_theme to allow other module to override the output.
    $output = quiz_progress_block_skipped_filter($quiz);
    $output .= '<div class="quiz-progress-block-wrapper">';
    $output .= theme('table', array('rows' => $rows, 'attributes' => array('class' => 'quiz-progress-item-table')));
    $output .= '</div>';
    return $output;
  }
  elseif ($output_style == 'title') {
    $items = array();
    $title_length = variable_get('quiz_progress_title_style_length', 32);
    foreach ($questions as $question) {
      if (empty($question)) {
        continue;
      }
      $question_title = _quiz_progress_get_question_title($question);
      $status = _quiz_progress_get_question_status($quiz, $question);
      $options = quiz_progress_get_link_options($status, $question, $question_title);
      $bg_color = variable_get('quiz_progress_output_bg_color_' . $status, '');
      $items[$question['number']] = array(
        'data' => l(drupal_substr($question_title, 0, $title_length), '', $options),
        'class' => $status,
        'style' => "background-color: $bg_color;"
      );
    }
    $output = quiz_progress_block_skipped_filter($quiz);
    $output .= '<div class="quiz-progress-block-wrapper">';
    $output .= theme('item_list', array('items' => $items, 'title' => t('Questions'), 'type' => 'ol', 'attributes' => array('class' => 'quiz-progress-item-list'))) . '</div>';
    return $output;
  }
  return '';
}

/**
 * Function to retrun question status
 *
 * @param $quiz, $question
 *   -quiz: quiz object
 *   -question: array of question details e.g. nid, vid, etc.
 *
 * @return status of question queued, skipped or answered
 */
function _quiz_progress_get_question_status($quiz, $question) {
  $rid = $_SESSION['quiz_' . $quiz->nid]['result_id'];
  $answer = db_query('SELECT is_correct, is_skipped FROM {quiz_node_results_answers}
    WHERE result_id = :rid AND question_nid = :nid AND question_vid = :vid',
    array(':rid' => $rid, ':nid' => $question['nid'], ':vid' => $question['vid']))->fetch();
  if (empty($answer)) {
    return 'queued';
  }
  else {
    if ($answer->is_skipped) {
      return 'skipped';
    }
    else {
      return 'answered';
    }
  }
}

/**
 * Function to fetch the question title
 *
 * @param $question
 *   -question: details of question node. e.g. nid, vid
 *
 * @return $question_title
 */
function _quiz_progress_get_question_title($question) {
  $question_title = db_query('SELECT title FROM {node_revision}
    WHERE nid = :nid AND vid = :vid',
    array( ':nid' => $question['nid'], ':vid' => $question['vid']))->fetch();
  $question_title = isset($question_title->title) ? $question_title->title : '';
  return $question_title;
}

/**
 * Function to load quiz module css and js files
 */
function _quiz_progress_block_load_styles() {
  $module_path = drupal_get_path('module', 'quiz_progress');
  drupal_add_css($module_path . '/css/quiz_progress.css');
  drupal_add_js($module_path . '/js/jquery.dimensions.js');
  drupal_add_js($module_path . '/js/jquery.tooltip.js');
  drupal_add_js($module_path . '/js/quiz_progress.js');
}
