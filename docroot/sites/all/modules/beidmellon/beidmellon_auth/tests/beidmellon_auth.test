<?php

/**
 * @file
 * Tests for beidmellon_auth.module.
 */

// This will be used for the test user who can bypass the beID authentication.
define('BEIDMELLON_FEDID_TEST_1', '1234567890112345678901123456789015678901');

// This will be used for the test user.
define('BEIDMELLON_FEDID_TEST_2', '1234567890212345678901123456789015678902');

// This will be used for the manually created user.
define('BEIDMELLON_FEDID_TEST_3', '1234567890312345678901123456789012678903');

// These will be used for the manual registration.
define('BEIDMELLON_FEDID_TEST_4', '1234567890312345678901123456789012678904');
define('BEIDMELLON_FEDID_TEST_5', '1234567890312345678901123456789012678905');

// Invalid FedID with 50 characters (should have 40 characters max).
define('BEIDMELLON_FEDID_TEST_TOOLONG', '123456789011234567890112345678901123424890112345678901');

class BeidMellonAuthTest extends DrupalWebTestCase {

  /**
   * @var Test user object (with FedID BEIDMELLON_FEDID_TEST_2).
   */
  protected $testUser = NULL;

  /**
   * @var Test user object that can bypass eID login (with FedID
   * BEIDMELLON_FEDID_TEST_1).
   */
  protected $testUserBypassAuth = NULL;

  /**
   * @var Admin user object.
   */
  protected $adminUser;

  /**
   * @var User 1 object (super admin).
   */
  protected $user1;

  /**
   * Module info.
   */
  public static function getInfo() {
    return array(
      'name' => 'beID Mellon authentication',
      'description' => 'Test beID Mellon authentication.',
      'group' => 'beID Mellon',
      'dependencies' => array(
        'logintoboggan', 
        'globalredirect',
      ),
    );
  }

  /**
   * Set up.
   */
  protected function setUp() {
    $GLOBALS['beidmellon_fedid_salt'] = 'test';
    parent::setUp(
      'field_sql_storage',
      'field',
      'field_test',
      'text',
      'contact',
      'globalredirect',
      'logintoboggan',
      'beidmellon_fedid',
      'beidmellon_auth',
      'beidmellon_auth_test'
    );

    // Create test user who can bypass eID login.
    $test_user_bypass_auth = $this->drupalCreateUser(array('bypass beid authentication'));
    $test_user_bypass_auth->field_fedid[LANGUAGE_NONE][0]['beidmellon_fedid'] = _beidmellon_fedid_hash(BEIDMELLON_FEDID_TEST_1);
    $test_user_bypass_auth->field_eid_given_name[LANGUAGE_NONE][0]['value'] = $this->randomName();
    $test_user_bypass_auth->field_eid_surname[LANGUAGE_NONE][0]['value'] = $this->randomName();
    $this->testUserBypassAuth = user_save($test_user_bypass_auth);
    $this->testUserBypassAuth->fedid_raw = BEIDMELLON_FEDID_TEST_1;

    // Create test user.
    $test_user = $this->drupalCreateUser(array());
    $test_user->field_fedid[LANGUAGE_NONE][0]['beidmellon_fedid'] = _beidmellon_fedid_hash(BEIDMELLON_FEDID_TEST_2);
    $test_user->field_eid_given_name[LANGUAGE_NONE][0]['value'] = $this->randomName();
    $test_user->field_eid_surname[LANGUAGE_NONE][0]['value'] = $this->randomName();
    $this->testUser = user_save($test_user);
    $this->testUser->fedid_raw = BEIDMELLON_FEDID_TEST_2;

    // Create admin user.
    $this->adminUser = $this->drupalCreateUser(array(
      'administer users',
      'access user profiles',
      'administer blocks',
      'bypass beid authentication',
    ));
    // Make sure a FedID salt is set up in settings.php.
    $salt_empty = empty($GLOBALS['beidmellon_fedid_salt']);
    $this->assertFalse($salt_empty, t('FedID salt has been set up in settings.php.'));

    $admin_rid = user_role_load_by_name('administrator')->rid;
    user_role_grant_permissions($admin_rid, array('bypass beid authentication'));

    // Set up user 1 so we can later log in as this user.
    $user1 = user_load(1);
    $user1->pass_raw = user_password();
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    $user1->pass = user_hash_password(trim($user1->pass_raw));
    db_query("UPDATE {users} SET pass = :pass WHERE uid = :uid", array(':pass' => $user1->pass, ':uid' => $user1->uid));
    $this->user1 = $user1;
  }

  /**
   * User creation tests.
   */
  protected function testCreateUser() {
    $this->drupalLogin($this->adminUser);

    // Create another user with the same FedID.
    $edit = array();

    $this->drupalGet('user/' . $this->adminUser->uid . '/edit');
    $edit["field_fedid[und][0][beidmellon_fedid]"] = BEIDMELLON_FEDID_TEST_2;

    $this->drupalPost(NULL, $edit, t('Save'));

    $admin_user = user_load($this->adminUser->uid);

    $this->assertText('FedID error: The submitted FedID is already being used', 'Duplicate error shows up.');
    $admin_user = user_load($this->adminUser->uid);
    $fedid_empty = empty($admin_user->field_fedid[LANGUAGE_NONE][0]['beidmellon_fedid']);
    $this->assertTrue($fedid_empty, t('FedID duplicate check successful.'));

    $edit["field_fedid[und][0][beidmellon_fedid]"] = BEIDMELLON_FEDID_TEST_TOOLONG;
    $this->drupalPost('user/' . $this->adminUser->uid . '/edit', $edit, t('Save'));
    $this->assertText('Belgian FedID cannot be longer than', 'FedID too long error shows up.');

    $edit["field_fedid[und][0][beidmellon_fedid]"] = BEIDMELLON_FEDID_TEST_3;
    $this->drupalPost('user/' . $this->adminUser->uid . '/edit', $edit, t('Save'));
    $this->assertNoText('FedID error', 'No FedID error shows up.');

    // Load from database.
    $admin_user = user_load($this->adminUser->uid, TRUE);
    $hash = $admin_user->field_fedid[LANGUAGE_NONE][0]['beidmellon_fedid'];
    $match = beidmellon_fedid_match(BEIDMELLON_FEDID_TEST_3, $hash);
    $this->assertTrue($match, t('Successfully changed FedID.'));
  }

  /**
   * Login tests (beID).
   */
  protected function testLoginUser() {
    // Test one time login link.
    $link = user_pass_reset_url($this->testUserBypassAuth);
    $this->drupalPost($link, array(), t('Log in'));
    $this->assertLink(t('Log out'), 0, t('User %name successfully logged in.', array('%name' => $this->testUser->name)), t('User login'));

    $this->drupalLogout();
    $link = user_pass_reset_url($this->testUser);
    $this->drupalPost($link, array(), t('Log in'));
    $this->assertNoLink(t('Log out'), 0, t('User %name successfully disallowed login.', array('%name' => $this->testUser->name)), t('User login'));

    // Test username/password login.
    $auth = array(
      'name' => $this->testUserBypassAuth->name,
      'pass' => $this->testUserBypassAuth->pass_raw,
    );
    $this->drupalPost('user/login', $auth, t('Log in'));
    $this->assertLink(t('Log out'), 0, t('User %name successfully logged in (bypassing beID).', array('%name' => $auth['name'])), t('User login'));

    // Attempt to log in with erroneous password.
    $this->drupalLogout();
    $auth_err = array(
      'name' => $this->testUserBypassAuth->name,
      'pass' => $this->testUserBypassAuth->pass_raw . 'not',
    );
    $this->drupalPost('user/login', $auth_err, t('Log in'));
    $this->assertNoLink(t('Log out'), 0, t('User %name successfully disallowed log in.', array('%name' => $auth_err['name'])), t('User login'));

    // Attempt to log in without permission.
    $auth_no_permission = array(
      'name' => $this->testUser->name,
      'pass' => $this->testUser->pass_raw,
    );
    $this->drupalPost('user/login', $auth_no_permission, t('Log in'));
    $this->assertNoLink(t('Log out'), 0, t('User %name successfully disallowed login.', array('%name' => $this->testUser->name)), t('User login'));

    // Test eID login functionality.
    $account = user_load(1);
    $this->drupalLogin($account);
    variable_set('beidmellon_auth_fedid_debug', $this->testUser->fedid_raw);
    variable_set('beidmellon_auth_given_name_debug', 'John');
    variable_set('beidmellon_auth_surname_debug', 'Doe');

    // Log in using eID.
    $this->drupalGet('beid/login', array('query' => array('destination' => 'contact')));
    $this->assertLink(t('Log out'), 0, t('User successfully logged in.'), t('User login'));
    $this->assertEqual($this->getUrl(), url('contact', array('absolute' => TRUE)), t('Redirect after login succesful'));
    $this->drupalGet('user');
    $this->clickLink(t('Edit'));

    // Make sure we have successfully changed users (from user 1).
    $this->assertEqual(url('user/' . $this->testUser->uid . '/edit', array('absolute' => TRUE)), $this->getUrl(), t('User ID is correct.'));

    // Make sure log out works.
    $this->drupalLogout();
    $this->drupalGet('/contact');
    $this->assertNoLink(t('Log out'), 0, t('Pages for unauthenticated users are not automatically logged in'));
  }

  /**
   * Test hashing funciton.
   */
  protected function testHash() {
    // Add FedID to user through admin interface.
    $fedid = BEIDMELLON_FEDID_TEST_1;
    $hash = _beidmellon_fedid_hash($fedid);
    $match = beidmellon_fedid_match($fedid, $hash);
    $this->assertEqual($match && !empty($match), TRUE, t('Hashing of FedIDs succeeded.'));
  }

  /**
   * Test manual registration.
   */
  protected function testRegistration() {
    $account = user_load(1);
    $this->drupalLogin($account);
    variable_set('beidmellon_auth_fedid_debug', BEIDMELLON_FEDID_TEST_4);
    variable_set('beidmellon_auth_given_name_debug', 'John');
    variable_set('beidmellon_auth_surname_debug', 'Doe');
    $this->drupalGet('beid/login');
    $edit = array();
    $edit['email'] = 'test@example.com';
    $this->drupalPost(NULL, $edit, t('Next'));
    $this->assertText(t('Thank you for applying for an account. Your account is currently pending approval by the user manager.'), t('Registration successful'));
    $this->drupalGet('beid/login');
    // Look for message "Hi John Doe, you cannot login yet. Your account is
    // still pending approval by the user manager.
    $this->assertText('you cannot login yet. Your account is still pending approval by the user manager.', t('Inactive user receives activation notice successfully.'));
    $this->drupalGet('beid/registration');
    $edit = array();
    $edit['email'] = 'test@example.com';
    $this->drupalPost(NULL, $edit, t('Next'));
    $this->assertText('An account for your eID number is already pending approval by the user manager', t('User can only register once.'));

    // Test second user with same name.
    $account = user_load(1);
    $this->drupalLogin($account);
    variable_set('beidmellon_auth_fedid_debug', BEIDMELLON_FEDID_TEST_5);
    $this->drupalGet('beid/login');
    $edit = array();
    $edit['email'] = 'test@example.com';
    $this->drupalPost(NULL, $edit, t('Next'));
    $this->assertText('The e-mail address', t('Duplicate email check successful.'));
    $this->drupalGet('beid/login');
    $edit['email'] = 'test2@example.com';
    $this->drupalPost(NULL, $edit, t('Next'));
    $account = beidmellon_auth_user_load_by_fedid(BEIDMELLON_FEDID_TEST_5);
    $exists = is_object($account) && isset($account->name);
    $this->assertTrue($exists, t('Correctly loaded user by FedID.'));
    $this->assertEqual('John Doe 2', $account->name, t('Username of new account is correct.'));
  }

  /**
   * Run tests while Logintoboggan is disabled.
   */
  protected function testLogintobogganDisabled() {
    module_disable(array('logintoboggan'));
    $this->testLoginUser();
    $this->testRegistration();
  }
}
