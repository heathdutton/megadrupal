<?php
/**
 * @file
 * Belgian FedID Field Module. Based on Password Field module.
 */

/**
 * Implements hook_field_info().
 */
function beidmellon_fedid_field_info() {
  return array(
    'beidmellon_fedid' => array(
      'label' => t('FedID'),
      'description' => t('A Belgian FedID (hashed)'),
      'default_widget' => 'beidmellon_fedid',
      'default_formatter' => 'beidmellon_fedid_formatter',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function beidmellon_fedid_field_formatter_info() {
  return array(
    'beidmellon_fedid_formatter' => array(
      'label'       => t('Belgian FedID field formatter'),
      'field types' => array('beidmellon_fedid'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function beidmellon_fedid_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] === 'beidmellon_fedid') {
    $dsc_key     = '#description';
    $default_dsc = t('Belgian FedID will remain unchanged if left blank.');
    $description = (empty($element[$dsc_key])) ? $default_dsc : $element[$dsc_key];
    $weight      = (isset($element['#weight'])) ? $element['#weight'] : 0;

    // Set up title.
    $fed_id_field = field_get_items($element['#entity_type'], $element['#entity'], $element['#field_name']);
    if (isset($fed_id_field[$delta]['beidmellon_fedid'])) {
      $title = filter_xss($element['#title']) . ' (' . t('Already defined. Will remain unchanged if left blank') . '.)';
    }
    else {
      $title = filter_xss($element['#title']);
    }

    // Set up default value.
    $field_name = $field['field_name'];
    $field_type = $field['type'];
    $default_fed_id_ = $instance['default_value'][0][$field_type][$field_type];

    $element['beidmellon_fedid'] = array(
      '#type'             => 'textfield',
      '#title'            => $title,
      '#description'      => filter_xss($description),
      '#maxlength'        => 40,
      '#default_value'    => $default_fed_id_,
      '#required'         => $element['#required'],
      '#weight'           => $weight,
      '#delta'            => $delta,
      '#element_validate' => array('_beidmellon_fedid_validate'),
    );
  }
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function beidmellon_fedid_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'beidmellon_fedid_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function beidmellon_fedid_field_is_empty($item, $field) {
  if (empty($item['beidmellon_fedid'])) {
    return TRUE;
  }
}

/**
 * Implements hook_field_widget_info().
 */
function beidmellon_fedid_field_widget_info() {
  return array(
    'beidmellon_fedid' => array(
      'label' => t('Belgian FedID'),
      'field types' => array('beidmellon_fedid'),
    ),
  );
}

/**
 * Gets field instance details.
 *
 * Given an element and form state, loads details of the field instance
 * and the entity type it is attached to.
 */
function _beidmellon_fedid_get_instance_details($element, $form_state) {
  // Parse the element name to determine field name, language, and delta.
  $pattern = '/^([^\[]+)\[([^\[]+)]\[([^\[]+)\]/';
  if (!preg_match($pattern, $element['#name'], $matches)) {
    return;
  }
  list($full_match, $field_name, $langcode, $delta) = $matches;

  // Get the entity type and the entity itself.
  $field_instance = $form_state['field'][$field_name][$langcode]['instance'];
  $entity_type    = $field_instance['entity_type'];

  return array(
    'field_name'  => $field_name,
    'langcode'    => $langcode,
    'delta'       => $delta,
    'entity_type' => $entity_type,
  );
}

/**
 * Loads field value.
 *
 * Given an element and form state, load the current value of the field
 * instance.
 */
function _beidmellon_fedid_load_current_value($element, $form_state) {
  // Get field details.
  $field_details = _beidmellon_fedid_get_instance_details($element, $form_state);
  $entity_type   = $field_details['entity_type'];

  // If there is no entity, then there can't be a value.
  if (empty($form_state[$entity_type])) {
    return;
  }

  $entity        = $form_state[$entity_type];
  $field_name    = $field_details['field_name'];
  $delta         = $field_details['delta'];

  // Load the field instance from DB and get the value.
  $fed_id_field   = field_get_items($entity_type, $entity, $field_name);
  $fed_id_value   = (isset($fed_id_field[$delta]['beidmellon_fedid'])) ? $fed_id_field[$delta]['beidmellon_fedid'] : NULL;
  return $fed_id_value;
}

/**
 * Validation callback for FedID field.
 */
function _beidmellon_fedid_validate($element, &$form_state) {
  // If no value to encrypt, get out of here.
  if (!isset($element['#value'])) {
    return;
  }

  // If FedID value exists, but is empty, load old value and store that. This
  // means that if the field is left blank, then the value will be unchanged.
  if (empty($element['#value']) && !empty($form_state['field'])) {
    $fed_id_value = _beidmellon_fedid_load_current_value($element, $form_state);
    form_set_value($element, $fed_id_value, $form_state);
    return;
  }

  // Validate number, hash it and set it in the form.
  try {
    $fedid = $element['#value'];

    // Check for non-allowed characters (not numbers, spaces, dots or dashes).
    $allowed_characters_pattern = "/^[0-9a-z]+$/i";

    if (preg_match($allowed_characters_pattern, $fedid) != 1) {
      throw new Exception(t("Non allowed character in FedID."));
    }

    // Length must be 40 characters or less.
    if (strlen($fedid) > 40) {
      throw new Exception(t("Length of the FedID is not 40 characters or less."));
    }

    // Hash the fedid.
    $value = _beidmellon_fedid_hash($fedid);

    // If this is a user field, make sure it's unique.
    $field_details = _beidmellon_fedid_get_instance_details($element, $form_state);
    $entity_type   = $field_details['entity_type'];
    if ($entity_type == 'user') {
      if (!empty($form_state['user']->uid)) {
        $account_uid = $form_state['user']->uid;
      }
      else {
        $account_uid = NULL;
      }
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'user')
        ->fieldCondition($field_details['field_name'], 'beidmellon_fedid', $value)
        ->propertyCondition('uid', $account_uid, '!=')
        ->count();
      $count = $query->execute();
      if ($count > 0) {
        throw new Exception(t('The submitted FedID is already being used by another account. It is not possible to have more than one account with the same FedID.'));
      }
    }

    form_set_value($element, $value, $form_state);

  }
  catch (Exception $e) {
    form_error($element, t('FedID error') . ': ' . $e->getMessage());
  }
}

/**
 * Match FedID against user input.
 *
 * Hook to be called by other modules to match a user-inputted string against
 * a stored (hashed and salted) number.
 *
 * @param string $fedid
 *   Plain-text string to compare the hashed string against. Previous validation
 *   through beidmellon_fedid_validate_and_sanitize() is recommendend.
 * @param string $stored_hash
 *   Hashed string to compare the plain-text string against.
 *
 * @return bool
 *   TRUE if match, FALSE if no match.
 */
function beidmellon_fedid_match($fedid, $stored_hash) {
  $pbkd2f = _beidmellon_fedid_get_BeidmellonFedidPBKDF2();
  return $pbkd2f->validatePassword($fedid, $stored_hash);
}

/**
 * Hashes the FedID.
 *
 * Uses the same hashing algorithm as Drupal passwords, but uses the
 * global variable defined in settings.php in order to generate peppered
 * version of the FedID.  This way, not only database access but also
 * PHP code access or settings.php access is needed for an attack.
 *
 * @param string $fedid
 *   The plain-text FedID.
 *
 * @return string
 *   The hashed and salted FedID.
 */
function _beidmellon_fedid_hash($fedid) {
  $pbkd2f = _beidmellon_fedid_get_BeidmellonFedidPBKDF2();
  return $pbkd2f->createHash($fedid);
}

/**
 * Helper function to return PBKDF2 class.
 *
 * Instantiates a BeidmellonFedidPBKDF2FixedSalt class using the
 * $beidmellon_fedid_salt global variable.
 *
 * @return object
 *   The instantiated PBDKF2 class.
 */
function _beidmellon_fedid_get_BeidmellonFedidPBKDF2() {
  $pbkd2f = new BeidmellonFedidPBKDF2FixedSalt($GLOBALS['beidmellon_fedid_salt']);
  return $pbkd2f;
}
