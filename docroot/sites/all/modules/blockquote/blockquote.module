<?php
// $Id: blockquote.module,v 1.3 2010/12/06 00:54:21 zeta Exp $

/**
 * @file
 * The Blockquote module is a filter that can be used to insert and style, blockquotes.
 */
define( 'OPEN_BQ', '<code>&lt;blockquote&gt;</code>');
define('CLOSE_BQ', '<code>&lt;/blockquote&gt;</code>');

/**
 * Implementation of hook_help().
 */
function blockquote_help($section) {
  switch ($section) {
    case 'admin/help#blockquote':
      return t('A filter to allow, and style, blockquotes in your text.') . '&ensp;' .
        t('This will particulally suit the core Garland theme.') . '&ensp;' .
        t('If you use another theme you might need to over-ride some styles to avoid a clash.');
  }
}

/**
 * Implementation of hook_filter_info().
 */
function blockquote_filter_info() {
  $filters['blockquote'] = array(
    'title' => t('Blockquote'),
    'description' => t('This version of the filter gives better performance, but requires you to add !tag to the &ldquo;!filter&rdquo; filter.', array('!tag' => OPEN_BQ, '!filter' => t('Limit allowed HTML tags'))),
    'process callback'  => '_blockquote_tag_process',
    'default settings' => array(
      'help_text' =>
        t('This needs you to add !tag to the &ldquo;!filter&rdquo; filter.', array('!tag' => OPEN_BQ, '!filter' => t('Limit allowed HTML tags'))) . '</li><li>' .
        t('If this filter is placed before the &ldquo;!filter&rdquo; filter, you will need to also add !tag to the that filter.',
          array('!tag' => '<code>&lt;div&gt;</code>', '!filter' => t('Limit allowed HTML tags'))) . '</li></ul>' .
        t('Use this section.') . '<ul>',
      'blockquote_pair' => 0,
    ),
    'settings callback' => '_blockquote_settings',
    'tips callback' => '_blockquote_filter_tips',
  );
  $filters['blockquote_'] = array(
    'title' => t('Blockquote'),
    'description' => t('This version of the filter will work even if &ldquo;!filter&rdquo; filter doesn&rsquo;t permit the !tag tag, provided that it is arranged after that filter.', array('!tag' => OPEN_BQ, '!filter' => t('Limit allowed HTML tags'))),
    'prepare callback' => '_blockquote_ph_prepare',
    'process callback' => '_blockquote_ph_process',
    'default settings' => array(
      'help_text' => t('This should be arranged after the &ldquo;!filter&rdquo; filter.', array('!filter' => t('Limit allowed HTML tags'))) . '</li>',
      'blockquote_pair' => 0,
    ),
    'settings callback' => '_blockquote_settings',
    'tips callback' => '_blockquote_filter_tips',
  );
  return $filters;
}

function _blockquote_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['blockquote_help'] = array(
    '#markup' => '<h2 style="text-align: center;">' . t('Use !tag&hellip;!ctag to insert styled blockquote.', array('!tag' => OPEN_BQ, '!ctag' => CLOSE_BQ)) . '</h2>' .
      '<ul><li>' . $defaults['help_text'] . '<li>' .
      t('You might also find spurious !tag tags if the &ldquo;!filter&rdquo; filter is placed after this filter.',
        array('!tag' => '<code>&lt;p&gt;</code>', '!filter' => t('Convert line breaks into HTML'))) . '</li></ul>' .
      t('Use !section.', array('!section' => t('Filter processing order'))) .
      '<p style="text-align: center;"><strong>' . t('You need only one of the two Blockquote filters') . '</strong></p>',
  );
  $settings['blockquote_pair'] = array(
    '#type' => 'checkbox',
    '#title' => t('corner image pair'),
    '#default_value' => isset($filter->settings['blockquote_pair']) ? $filter->settings['blockquote_pair'] : $defaults['blockquote_pair'],
    '#description' => t('Two corner images that form a symetrical pair.')
  );
  return $settings;
}

function _blockquote_ph_prepare($in_text, $filter, $format) {
  $text = str_replace( '<blockquote>',  '[blockquote]', $in_text);
  $text = str_replace('</blockquote>', '[/blockquote]', $text);
  return $text;
}

function _blockquote_ph_process($text, $filter, $format) {
  $text = str_replace('[/blockquote]', '</blockquote>', $text);
  return _blockquote_rep('[blockquote]', $text, $filter->settings['blockquote_pair']);
}

function _blockquote_tag_process($text, $filter, $format) {
  return _blockquote_rep('<blockquote>', $text, $filter->settings['blockquote_pair']);
}

function _blockquote_rep($orig, $text, $pair_setting) {
  $pair = ($pair_setting == 1) ? ' class="pair"': '';
  return str_replace($orig, '<blockquote><div class="quote_start"><div'. $pair .'></div></div><div class="quote_end"><div'. $pair .'></div></div>', $text);
}

/**
* Implementation of hook_init()
*/
function blockquote_init() {
  drupal_add_css(drupal_get_path('module', 'blockquote') .'/blockquote.css');
  if (variable_get('theme_default', '') != 'garland') drupal_add_css(drupal_get_path('module', 'blockquote') .'/blockquote-neutralise.css', 'theme');
}
