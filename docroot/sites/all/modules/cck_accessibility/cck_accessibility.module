<?php

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form.
 */
function cck_accessibility_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id){
  if (!cf_has_array_key('#instance', $form) || !cf_has_array_key('instance', $form)){
    return;
  }

  $current_values = &$form['#instance'];
  $instance_form = &$form['instance'];

  if (!is_array($current_values)){
    if (class_exists('cf_error')) {
      cf_error::invalid_array('form[#instance]');
    }

    return;
  }

  if (!is_array($instance_form)){
    if (class_exists('cf_error')) {
      cf_error::invalid_array('form[instance]');
    }

    return;
  }

  $instance_form['field_attributes'] = array(
    '#type' => 'fieldset',
    '#title' => t("Field Attributes"),
    '#description' => t("Provides the standard html functionality that is used for accessibility support."),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $instance_form['field_attributes']['editable'] = array(
    '#type' => 'checkboxes',
    '#title' => t("Field Editability"),
    '#description' =>
      t("This directly affects interactivity and is therefore considered needed for accessibility.") .
      "<br>\n" .
      t("See: <a href='@w3form_disabled'>http://www.w3.org/TR/html401/interact/forms.html#adef-disabled</a>", array('@w3form_disabled' => 'http://www.w3.org/TR/html401/interact/forms.html#adef-disabled')) .
      "<br>\n" .
      t("See: <a href='@w3form_readonly'>http://www.w3.org/TR/html401/interact/forms.html#adef-readonly</a>", array('@w3form_readonly' => 'http://www.w3.org/TR/html401/interact/forms.html#adef-readonly')),
    '#default_value' => isset($current_values['field_attributes']['editable']) && is_array($current_values['field_attributes']['editable']) ? $current_values['field_attributes']['editable'] : array(NULL, NULL),
    '#options' => array(
      'disabled' => t("Disable the field"),
      'readonly' => t("Make the field readonly"),
    ),
  );

  $instance_form['field_attributes']['tooltip'] = array(
    '#type' => 'textfield',
    '#title' => t("Tooltip"),
    '#description' =>
      t("Provide a tooltip (aka: title attribute).") .
      "<br>\n" .
      t("There is a practice where the title attribute gets set as the same as the field label such that a screen reader will properly identify the field.") .
      "<br>\n" .
      t("See: <a href='@aria_names'>http://www.w3.org/TR/wai-aria/roles#namecalculation</a>", array('@aria_names' => 'http://www.w3.org/TR/wai-aria/roles#namecalculation')),
    '#default_value' => isset($current_values['field_attributes']['tooltip']) ? $current_values['field_attributes']['tooltip'] : '',
  );

  $instance_form['field_attributes']['alt'] = array(
    '#type' => 'textfield',
    '#title' => t("Alternate Text"),
    '#description' =>
      t("Provide alternate text (aka: alt attribute).") .
      "<br>\n" .
      t("This is normally a short description of the field and is similar to aria-label.") .
      "<br>\n" .
      t("This is only useful for non-text fields such as an image.") .
      "<br>\n" .
      t("See: <a href='@wcag_text'>http://www.w3.org/TR/WCAG20/#text-equiv</a>", array('@wcag_text' => 'http://www.w3.org/TR/WCAG20/#text-equiv')),
    '#default_value' => isset($current_values['field_attributes']['alt']) ? $current_values['field_attributes']['alt'] : '',
  );
}

/**
 * Implements hook_form_alter().
 */
function cck_accessibility_form_alter(&$form, &$form_state, $form_id){
  if (!is_array($form)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('form');
    }

    return;
  }

  if (!isset($form['#after_build']) || !is_array($form['#after_build'])){
    $form['#after_build'] = array('cck_accessibility_field_attributes_after_build');
  }
  else {
    $form['#after_build'] = array_merge(array('cck_accessibility_field_attributes_after_build'), $form['#after_build']);
  }
}

/**
 * #after_build callback for field elements in a form.
 * This is used to add field_attributes into all fields on a form as specified by that fields instance.
 *
 * @param $elements
 *   Contains all elements for a given form.
 * @param $form_state
 *   The form state for all elements on a given form.
 *
 * @return
 *   Returns the elements array, with any changes.
 */
function cck_accessibility_field_attributes_after_build($elements, &$form_state){
  if (!cf_has_array_key('#bundle', $elements) || !cf_has_array_key('#entity_type', $elements)){
    return $elements;
  }

  if (cf_is_empty_or_non_string('elements[#bundle]', $elements['#bundle'])){
    return $elements;
  }

  if (cf_is_empty_or_non_string('elements[#entity_type]', $elements['#entity_type'])){
    return $elements;
  }

  foreach (element_children($elements) as $child){
    $instance = field_read_instance($elements['#entity_type'], $child, $elements['#bundle']);

    if (!empty($instance) && cf_has_array_key('field_attributes', $instance)){
      foreach (element_children($elements[$child]) as $grandchild){

        foreach (array_keys($elements[$child][$grandchild]) as $key){
          if (preg_match('/^(#)/i', $key) == 0){
            $element = &$elements[$child][$grandchild][$key];

            if (array_key_exists('columns', $element) && is_array($element['columns'])){
              foreach (array_keys($element) as $column){
                cck_accessibility_modify_field_attributes($element[$column], $instance['field_attributes']);
              }
            }
            else if (array_key_exists('value', $element)) {
              cck_accessibility_modify_field_attributes($element['value'], $instance['field_attributes']);
            }
            else {
              cck_accessibility_modify_field_attributes($element, $instance['field_attributes']);
            }
          }
          else if ($key == '#columns') {
            $element = &$elements[$child][$grandchild];

            cck_accessibility_modify_field_attributes($element, $instance['field_attributes']);
          }
        }
      }
    }
  }

  return $elements;
}

/**
 * This is used to add field_attributes for a given field as specified by the field_attributes from the instance parameter.
 *
 * @param $field
 *   This is the field element to act on.
 * @param $field_attributes
 *   This is the field_attributes from the instance settings of the passed field.
 */
function cck_accessibility_modify_field_attributes(&$field, $field_attributes){
  if (!is_array($field)){
    if (class_exists('cf_error')) {
      cf_error::invalid_array('field');
    }

    return;
  }

  if (!is_array($field_attributes)){
    if (class_exists('cf_error')) {
      cf_error::invalid_array('field_attributes');
    }

    return;
  }

  if (array_key_exists('tooltip', $field_attributes) && is_string($field_attributes['tooltip'])){
    if (empty($field_attributes['tooltip'])){
      unset($field['#attributes']['title']);
    }
    else {
      $field['#attributes']['title'] = $field_attributes['tooltip'];
    }
  }

  if (array_key_exists('alt', $field_attributes) && is_string($field_attributes['alt'])){
    if (empty($field_attributes['alt'])){
      unset($field['#attributes']['alt']);
    }
    else {
      $field['#attributes']['alt'] = $field_attributes['alt'];
    }
  }

  if (array_key_exists('editable', $field_attributes) && is_array($field_attributes['editable'])){
    if (array_key_exists('disabled', $field_attributes['editable']) && is_string($field_attributes['editable']['disabled'])){
      if ($field_attributes['editable']['disabled'] == 'disabled'){
        $field['#attributes']['disabled'] = 'disabled';
      }
      else {
        unset($field['#attributes']['disabled']);
      }
    }

    if (array_key_exists('readonly', $field_attributes['editable']) && is_string($field_attributes['editable']['readonly'])){
      if ($field_attributes['editable']['readonly'] == 'readonly'){
        $field['#attributes']['readonly'] = 'readonly';
      }
      else {
        unset($field['#attributes']['readonly']);
      }
    }
  }
}
