<?php
/**
 * @file
 * cakemail_api.module
 */

use Drupal\cakemail_api\APIException;

define('CAKEMAIL_API_DEFAULT_ENDPOINT', 'https://api.wbsrvc.com');
define('CAKEMAIL_API_DEFAULT_CACHE_MAXAGE', 600);


/**
 * Factory for the CakeMail API.
 *
 * Example usage:
 * <code>
 *  cakemail_api()
 *    ->List
 *    ->SubscribeEmail(array(
 *      'user_key' => $user_key,
 *      'list_id' =>  $list_id,
 *      'email' => 'john.snmith@example.com',
 *    ));
 * </code>
 *
 * @return \Drupal\cakemail_api\DrupalHttpRequestAPI
 *   A CakeMailAPIInterface instance ready to use.
 */
function cakemail_api() {
  $instance =& drupal_static(__FUNCTION__);
  if (!$instance) {
    $instance = new \Drupal\cakemail_api\DrupalHttpRequestAPI();
  }
  return $instance;
}

/**
 * Logs a CakeMail API exception.
 *
 * This is a wrapper function for watchdog_exception() which automatically
 * decodes a CakeMail API exception.
 *
 * @param $type
 *   The category to which this message belongs.
 * @param $exception
 *   The CakeMail API exception that is going to be logged.
 * @param $message
 *   The message to store in the log. If empty, a text that contains all useful
 *   information about the passed-in exception is used.
 * @param $variables
 *   Array of variables to replace in the message on display. Defaults to the
 *   return value of drupal_decode_exception().
 * @param $severity
 *   The severity of the message, as per RFC 3164.
 * @param $link
 *   A link to associate with the message.
 *
 * @see watchdog_exception()
 */
function cakemail_api_watchdog_exception($type, APIException $exception, $message = NULL, $variables = array(), $severity = WATCHDOG_ERROR, $link = NULL) {
  // Use a default value if $message is not set.
  if (empty($message)) {
    // The exception message is run through check_plain() by _drupal_decode_exception().
    $message = '%type while calling !service/!method with !post_data: "!message" in %function (line %line of %file).';
  }
  $variables += array(
    'service' => $exception->getService(),
    'method' => $exception->getMethod(),
    'post_data' => drupal_http_build_query($exception->getPostData()),
  );
  watchdog_exception($type, $exception, $message, $variables, $severity, $link);
}

/**
 * Helper function to debug a CakeMail API HTTP request.
 *
 * Set the cakemail_api_debug_callback configuration variable to 'cakemail_api_debug_callback_message' to use.
 *
 * @param $url
 *   The URL of the HTTP request.
 * @param $options
 *   The options of the HTTP request.
 * @param $response
 *   The received response
 */
function cakemail_api_debug_callback_message($url, $options, $response) {
  $message = array();
  $message[] = '<p>' . t('CakeMail API HTTP request to %url.', array('%url' => $url));
  $message[] = '<dl>';
  $message[] = '<dt>' . t('Options') . '</dt>';
  $message[] = '<dd>' . highlight_string('<?php ' . var_export($options, TRUE), TRUE) . '</dd>';
  $message[] = '<dt>' . t('Response') . '</dt>';
  $message[] = '<dd>' . highlight_string('<?php ' . var_export($response, TRUE), TRUE) . '</dd>';
  $message[] = '<dt>' . t('Trace') . '</dt>';
  $message[] = '<dd><ol>';
  $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS | DEBUG_BACKTRACE_PROVIDE_OBJECT);
  array_shift($trace);
  foreach ($trace as $trace_element) {
    $message[] = format_string('<li>!class!type!function (!file:!line)</li>', array(
      '!function' => $trace_element['function'],
      '!line' => isset($trace_element['line']) ? $trace_element['line'] : '?',
      '!file' => isset($trace_element['file']) ? $trace_element['file'] : '?',
      '!class' => isset($trace_element['class']) ? $trace_element['class'] : '',
      '!type' => isset($trace_element['type']) ? $trace_element['type'] : '',
    ));
  }
  $message[] = '</ol></dd>';
  $message[] = '</dl>';
  drupal_set_message(implode($message, "\n"), 'warning');
}

/**
 * Implement hook_menu().
 */
function cakemail_api_menu() {
  return array(
    'admin/config/services/cakemail' => array(
      'title' => 'CakeMail',
      'description' => 'Administer CakeMail settings',
      'file' => 'cakemail_api.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cakemail_api_settings_page'),
      'access arguments' => array('administer cakemail settings'),
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/config/services/cakemail/settings' => array(
      'title' => 'API Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -1,
    ),
  );
}

/**
 * Implement hook_permission().
 */
function cakemail_api_permission() {
  return array(
    'administer cakemail settings' => array(
      'title' => t('Administer CakeMail settings'),
      'restrict access' => TRUE,
    ),
  );
}