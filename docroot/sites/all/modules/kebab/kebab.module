<?php

/**
 * @file
 *   Provides kebab module functionality.
 */

/**
 * Implements hook_field_formatter_info().
 */
function kebab_field_formatter_info() {
  return array(
    'kebab_reference_as_block' => array(
      'label' => t('Bean as block'),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function kebab_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  return entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function kebab_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, &$items, $display) {
  $result = array();
  $settings = $display['settings'];

  // Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }

  foreach ($items as $delta => $item) {
    // Protect ourselves from recursive rendering.
    static $depth = 0;
    $depth++;
    if ($depth > 20) {
      throw new EntityReferenceRecursiveRenderingException(t('Recursive rendering detected when rendering entity @entity_type(@entity_id). Aborting rendering.', array('@entity_type' => $entity_type, '@entity_id' => $item['target_id'])));
    }

    // Should we get this info from a hook, maybe?
    if ($field['settings']['target_type'] == 'bean') {
      $result[$delta] = kebab_get_block('bean', $item['entity']->delta);
    }

    $depth = 0;
  }

  return $result;
}


/**
 * Retrieve the render array representation for the given block.
 *
 * @param $module
 *   The module that provides the block.
 * @param $delta
 *   The block delta.
 *
 * @return array|null
 *   A render array, suitable for passing to render(). If no block is
 *   available, NULL is returned.
 */
function kebab_get_block($module, $delta) {
  $block = block_load($module, $delta);
  $block->region = isset($block->region) ? $block->region : NULL;
  if ($blocks = _block_render_blocks(array($block))) {
    return _block_get_renderable_array(array_values($blocks));
  }
  return NULL;
}
