<?php


include_once (drupal_get_path('module', 'take_control') . '/includes/common.inc');

/**
 * Implementation of hook_perm().
 */
function take_control_qp_permission() {
  return array(
      'access quick permissions' => array ('title' => 'Access quick permissions module'),
  );
}

/**
 * Implementation of hook_menu().
 */
function take_control_qp_menu() {
  $items = array();

  take_control_menu_build_first_item($items, array(
      'title' => 'Quick Permissions',
      'description' => 'Allows you to delete a file or folder(recursively) in your Drupal installation.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
          'take_control_qp_admin_form',
          NULL),
      'access arguments' => array(
          'access quick permissions')), 'qp');

  return $items;
}

/**
 * take control admin configuration form.
 */
function take_control_qp_admin_form($form, $form_state) {
  $form['take_control_qp_header'] = array(
      '#type' => 'item',
      '#title' => t('Please read'),
      '#value' => t('Any attempt to modify permissions/delete files/directories not owned by Drupal (e.g. created through FTP or CPanel) would generate errors. Also, never specify permissions less than 700 that might cause the owner to loose control of file/directory.'));

  $form['take_control_qp_path'] = array(
      '#type' => 'textfield',
      '#title' => t('File / Directory path to delete'),
      '#required' => TRUE,
      '#description' => t('The file or directory to delete. Note that the directory would be deleted recursively. Enter the full path e.g. /home/domain/public_html/domain.com/sites/default/files/images. Remember not to give a trailing slash.'));

  $form['take_control_qp_perm'] = array(
      '#type' => 'textfield',
      '#title' => t('Permission to set for the file / directory'),
      '#required' => TRUE,
      '#description' => t('The permission to set. The permission must be in octal (of the form xxx).'));

  $form['take_control_qp_recurse'] = array(
      '#type' => 'checkbox',
      '#title' => t('Recurse directory'),
      '#default_value' => FALSE,
      '#description' => t('Check this checkbox to perform recursive permission modification / deletion. Valid only if a Directory path is entered above.'));

  $form['take_control_qp_delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete file/folder'),
      '#default_value' => FALSE,
      '#description' => t('Check this checkbox to delete the file/folder entered after modifying their permissions. CAUTION: use with care. Prefer to use this module for modifying permissions only, while deletion should be handled by FTP or CPanel.'));

  $form['take_control_qp_logarea'] = array(
      '#type' => 'item',
      '#title' => t('Log Area'),
      '#value' => t(''));

  $form['#submit'][] = 'take_control_qp_admin_submit_handler';

  return system_settings_form($form);
}

/**
 * Implementation of hook_validate().
 */
function take_control_qp_admin_form_validate($form, &$form_state) {
  $path = $form_state['values']['take_control_qp_path'];
  if (!is_file($path) && !is_dir($path)) {
    form_set_error('take_control_qp_path', t('The path is neither a file nor a directory.'));
  }

  $perm = (int) $form_state['values']['take_control_qp_perm'];
  if ($perm < 700 || $perm > 777) {
    form_set_error('take_control_qp_perm', t('Permission should be between 700 and 777.'));
  }
}

/**
 * Custom submit handler to process custom form data.
 */
function take_control_qp_admin_submit_handler($form, &$form_state) {
  $path = $form_state['values']['take_control_qp_path'];

  $perm_str = $form_state['values']['take_control_qp_perm'];
  $perm_oct = (int) $perm_str;
  $perm_dec = octdec($perm_str);

  $recurse = $form_state['values']['take_control_qp_recurse'];
  $delete = $form_state['values']['take_control_qp_delete'];

  $log = '';
  take_control_qp_begin_process($path, $perm_oct, $perm_dec, $delete, $recurse, $log);

  /*
	 * Could not figure out how to change a Form filed in submit handler.
	 *
	$form ['take_control_qp_logarea'] ['#value'] = $log;
	unset ( $form ['take_control_qp_logarea'] ['#printed'] );
	$form ['take_control_qp_logarea'] ['#printed'] = drupal_render ( $form ['take_control_qp_logarea'] );
	*/
  drupal_set_message($log);
  drupal_set_message(t('Please check Drupal Log for any errors.'));
}

/**
 * Delete a file or folder (recursively).
 *
 * @path string
 * @perm_oct int
 * @perm_dec int
 * @delete boolean
 * @log string
 *
 */
function take_control_qp_begin_process($path, $perm_oct, $perm_dec, $delete, $recurse, &$log) {
  if (is_file($path)) {
    take_control_qp_del_file($path, $perm_oct, $perm_dec, $delete, $log);
    return;
  }

  if (!$recurse) {
    take_control_qp_change_dir_perm($path, $perm_oct, $perm_dec, $delete, $log);
    take_control_qp_del_dir($path, $perm_oct, $perm_dec, $delete, $log);
  }
  else {
    take_control_qp_del_tree($path, $perm_oct, $perm_dec, $delete, $log);
  }
}

/**
 * Delete a file or folder (recursively).
 *
 * @path string
 * @perm_oct int
 * @perm_dec int
 * @delete boolean
 * @log string
 *
 */
function take_control_qp_del_tree($path, $perm_oct, $perm_dec, $delete, &$log) {
  take_control_qp_change_dir_perm($path, $perm_oct, $perm_dec, $delete, $log);

  if ($dh = opendir($path)) {
    while (($file = readdir($dh)) !== false) {
      if ($file == "." || $file == "..")
        continue;

      $file = $path . "/" . $file;

      if (is_dir($file)) {
        take_control_qp_del_tree($file, $perm_oct, $perm_dec, $delete, $log);
      }
      else {
        take_control_qp_del_file($file, $perm_oct, $perm_dec, $delete, $log);
      }

    }
    closedir($dh);
  }

  take_control_qp_del_dir($path, $perm_oct, $perm_dec, $delete, $log);
}

function take_control_qp_del_file($file, $perm_oct, $perm_dec, $delete, &$log) {
  if (chmod($file, $perm_dec))
    $log = $log . t('File permission for "!file" set to !perm successfully.<br />', array(
        '!file' => $file,
        '!perm' => $perm_oct));
  else
    $log = $log . t('Error setting permission for file "!file" to !perm.<br />', array(
        '!file' => $file,
        '!perm' => $perm_oct));

  if (!$delete)
    return;

  if (unlink($file))
    $log = $log . t('File deleted "!file".<br />', array(
        '!file' => $file));
  else
    $log = $log . t('Error deleting "!file". Check log.<br />', array(
        '!file' => $file));
}

function take_control_qp_del_dir($dir, $perm_oct, $perm_dec, $delete, &$log) {
  if (!$delete)
    return;

  if (rmdir($dir))
    $log = $log . t('Directory removed "!dir".<br />', array(
        '!dir' => $dir));
  else
    $log = $log . t('Error removing "!dir".<br />', array(
        '!dir' => $dir));
}

function take_control_qp_change_dir_perm($path, $perm_oct, $perm_dec, $delete, &$log) {
  if (chmod($path, $perm_dec))
    $log = $log . t('Directory permission for "!path" set to !perm successfully.<br />', array(
        '!path' => $path,
        '!perm' => $perm_oct));
  else
    $log = $log . t('Error setting permission for directory "!path" to !perm.<br />', array(
        '!path' => $path,
        '!perm' => $perm_oct));
}

