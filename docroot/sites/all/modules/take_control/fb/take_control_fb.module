<?php


require_once (drupal_get_path('module', 'take_control') . '/includes/security.inc');
require_once (drupal_get_path('module', 'take_control') . '/includes/common.inc');
require_once (drupal_get_path('module', 'take_control') . '/includes/filesystem.inc');

/**
 * Implementation of hook_perm().
 */
function take_control_fb_permission() {
  return array(
      'administer file browser' => array ('title' => 'Administer file browser settings'),
      'access file browser' => array ('title' => 'Access file browser'),
  );
}

/**
 * Implementation of hook_menu().
 */
function take_control_fb_menu() {
  $items = array();

  take_control_admin_menu_build_first_item($items, array(
      'title' => 'File Browser',
      'description' => 'File Browser add-on module administration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
          'take_control_fb_settings_form',
          NULL),
      'access arguments' => array(
          'administer file browser'),
      'file' => 'take_control_fb.admin.inc',
      'type' => MENU_LOCAL_TASK), 'fb');

  take_control_menu_build_first_item($items, array(
      'title' => 'File Browser',
      'description' => 'Complete File system management for your Drupal installation.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
          'take_control_fb_form',
          NULL),
      'access arguments' => array('access file browser')), 'fb');

  $items['admin/build/take_control/fb/getfiles'] = array(
      'type' => MENU_CALLBACK,
      'page callback' => 'take_control_fb_getfiles',
      'access arguments' => array('access file browser'),
      'file' => 'get-files.php');

  return $items;
}

function take_control_fb_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if(user_access('administer take control') && user_access('administer file browser')) {
    $id = 'take_control_fb_user_path' . $form['#user']->uid;
	$form['take_control_fb'] = array (
      '#type' => 'fieldset',
      '#title' => t('Take Control File Browser'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE);

	$form['take_control_fb'][$id] = array(
	  '#type' => 'textfield',
	  '#default_value' => variable_get($id, ''),
	  '#title' => t('Base file browser path for this user'),
	  '#description' => t('The path should be relative to Drupal\'s root and should <b>not</b> contain leading or trailing slashes.'));

    $form['#validate'][] = 'take_control_fb_form_user_profile_form_validate_handler';
	$form['#submit'][] = 'take_control_fb_form_user_profile_form_submit_handler';
  }
}

function take_control_fb_form_user_profile_form_validate_handler($form, &$form_state) {
  if(user_access('administer take control') && user_access('administer file browser')) {
    $id = 'take_control_fb_user_path' . $form['#user']->uid;
	if (strpos($form_state['values'][$id], '..') !== false) {
	  form_set_error($id, t('Path cannot contain ".."'));
    }	
  }
}

function take_control_fb_form_user_profile_form_submit_handler($form, &$form_state) {
  if(user_access('administer take control') && user_access('administer file browser')) {
    $id = 'take_control_fb_user_path' . $form['#user']->uid;
	$path = $form_state['values'][$id];
	if(!empty($path)) {
	  variable_set($id, $path);
	} else {
	  variable_del($id);
	}
  }
}

function take_control_fb_form($form, $form_state) {
  return ($form);
}

function take_control_fb_block_info() {
  $numBlocks = intval(variable_get('take_control_fb_num_browser_blocks', '1'));
  
  $blocks = array();
  for($i = 1; $i <= $numBlocks; $i++) {
	  $block = array(
		  'info' => t('Take Control File Browser block'),
		  'cache' => DRUPAL_NO_CACHE,
	  );
	  
	  if ($i == 1) {
		//Enable the first block by default.
		$block['status'] = 1;
		$block['visibility'] = BLOCK_VISIBILITY_LISTED;
		$block['region'] = 'content';
		$block['pages'] = "admin/structure/take_control\r\nadmin/structure/take_control/fb";
	  }

	  $blocks['take-control-fb-browser-block-' . $i] = $block;
  }

  return $blocks;
}

function take_control_fb_block_view($delta = '') {
  $block['subject'] = t('File Browser');
  $block['content'] = drupal_get_form('_take_control_fb_form');
  return ($block);
}

function _take_control_fb_form($form, $form_state) {
  $rootFolder = _take_control_get_user_root_accessible_dir();
  $extpath = _take_control_fb_ext_client_path();
  
  $validationString = take_control_random_string(20);
  
  drupal_add_js(array(
      'take_control_fb' => array(
          'dataUrl' => base_path() . '?q=admin/build/take_control/fb/getfiles',
          'appUrl' => take_control_app_url(),
          'rootFolder' => $rootFolder,
          'extPath' => $extpath,
          'zipMimes' => take_control_zip_mimes(),
          'dirSeparator' => DIRECTORY_SEPARATOR,
          'validationString' => $validationString,
          'validationToken' => drupal_get_token($validationString),
          'curUserId' => fileowner(variable_get('file_public_path', conf_path() . '/files')))), 'setting');

  //Need to render FileBrowser in an iframe to prevent css conflict with Drupal code.
  $fbpath = take_control_client_path(drupal_get_path('module', 'take_control_fb') . '/fb.html?extpath=' . $extpath);
  $form['take_control_fb_container'] = array(
      '#type' => 'markup',
      '#markup' => '<iframe frameborder="0" width="100%" height="500px" src="' . $fbpath . '"></iframe>');
  
  return ($form);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// private helper functions
function _take_control_fb_ext_path() {
  $extdir = variable_get('take_control_fb_extjs_ver', NULL);
  if (is_null($extdir)) {
    $dirs = take_control_extjs_dirs();
    $extdir = $dirs[0];
  }
  return ('sites/all/libraries/extjs/' . $extdir);
}

function _take_control_fb_ext_client_path() {
  return take_control_client_path(_take_control_fb_ext_path());
}

function _take_control_fb_get_allowed_roles () {
  //Anonymous role is explicitly denied file browser access even if the rolw has "access file browser" permission.
  return (user_roles(TRUE, 'access file browser'));
}

function _take_control_get_user_root_accessible_dir () {
	global $user;	
    $id = 'take_control_fb_user_path' . $user->uid;

	$rootPath = variable_get($id, '');

	if(empty($rootPath)) {
      //user_roles returns roles ordered on weight, so highest weighted role with a custom base path specified automatically gets highest precedence below.
	  foreach(_take_control_fb_get_allowed_roles() as $rid => $name) {
	    if (take_control_user_has_role($name)) {
	      $id = 'take_control_fb_role_path' . $rid;
	      $basePath = variable_get($id, '');
		
		  if(!empty($basePath)) {
		    $rootPath = $basePath;
		  }
	    }
	  }
	  
	  if(!empty($rootPath)) {
		//Replace tokens in role path.
		$rootPath = token_replace($rootPath, array('current-user' => $user));
	  }
	}
	
	$appDir = take_control_app_dir();
	//User ID 1 always has access to entire file-system.
	if (!empty($rootPath) && $user->uid != 1) {
	  if(substr($appDir, strlen($appDir) -1) != DIRECTORY_SEPARATOR) {
	    $appDir = $appDir . DIRECTORY_SEPARATOR;
	  }
	  
	  $appDir = $appDir . str_replace('/', DIRECTORY_SEPARATOR, $rootPath);
	}
	
	return ($appDir);
}
