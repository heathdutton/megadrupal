<?php

/**
 * @file
 * Allows blocks to have specific html elements assigned to them as their
 * wrapper.
 * Some of the code is a modified copy of the Block Class module.
 * Full credit to Todd Nienkerk and all those who contributed to Block Class.
 */

/**
 * Implements hook_help().
 */
function semantic_blocks_help($path, $arg) {
  switch ($path) {
    case 'admin/help#semantic_blocks':
      $output = '<h3>' . t('ABOUT') . '</h3><p>' . t('The Semantic Blocks
      module was created to enable the easy selection and use of the newer HTML5
      elements for blocks within the admin interface.') . '</p> <p>' . t('This
      module is essentially a modified version of the Block Class module.') . '</p>'
      . '<h3>' . t('INSTALLATION') . '</h3> <p>' . t('If your theme is already
      using a block.tpl.php template file, open this file in an editor and replace
      the div opening and closing tag with $tag. Remember to replace the closing
      tag!') . '</p> <p>' . t("If your theme doesn't use a block.tpl.php
      template file, you can enable the automatic override by visiting the modules
      configuration page.") . '</p> <h3>' . t('WARNING') . '</h3> <p>' . t('This
      module assumes you are dealing with browser support outside of the module.
      If you are not currently using the HTML5 shiv then older IE browsers will
      not display the new elements. See
      <a href="http://code.google.com/p/html5shiv/">
      http://code.google.com/p/html5shiv/</a> for details on fixing this.') .
      '<h3>' . t('TROUBLESHOOTING') . '</h3> <p>' . t('Not working? Try
      flushing the cache, checking user permission and ensuring you have a
      correct / modified version of block.tpl.php in your theme folder.') .
      '</p>';
      return $output;
      break;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function semantic_blocks_preprocess_block(&$vars) {
  $module = $vars['block']->module;
  $delta = $vars['block']->delta;
  // Load the element as a string.
  $element = semantic_blocks_get_element($module, $delta);
  $vars['tag'] = $element ? $element : 'div';
}


/**
 * Return element from database
 *
 * @param string $module
 *   The module to which the block belongs.
 * @param string $delta
 *   The ID of the module's block.
 */
function semantic_blocks_get_element($module, $delta) {
  $select = db_select('semantic_blocks', 'sb');
  $select->addField('sb', 'element');
  $select->condition('module', $module, '=');
  $select->condition('delta', $delta, '=');
  $result = $select->execute()->fetchField();
  return $result;
}


/**
 * Alter block edit form to include new fieldset.
 *
 * Implements hook_form_alter
 */
function semantic_blocks_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'block_admin_configure' ||
  $form_id == 'block_add_block_form') {
    // Check user access.
    if (user_access('administer block element')) {
      $module = $form['module']['#value'];
      $delta = $form['delta']['#value'];
      $element = semantic_blocks_get_element($module, $delta);

      $form['semantic_blocks'] = array(
        '#type' => 'fieldset',
        '#title' => t('Semantic Blocks settings'),
        '#collapsible' => TRUE,
        '#weight' => 1,
        '#description' => t('Select the HTML element to use as the wrapper for this block.'),
      );
      $form['semantic_blocks']['element'] = array(
        '#type' => 'select',
        '#title' => t('Element'),
        '#default_value' => $element ? $element : 'div',
        '#description' => t('Select the block html element.'),
        // Load the elements.
        '#options' => semantic_blocks_elements(),
      );
      $form['#submit'][] = 'semantic_blocks_save_element';
      $form['visibility_title']['#weight'] = 2;
      $form['visibility']['#weight'] = 3;
    }
  }
}

/**
 * Save element to the database
 *
 * @param string $form
 *   The ID of the form.
 * @param array $form_state
 *   An array which stores information about the form.
 */
function semantic_blocks_save_element($form, &$form_state) {
  if (isset($form_state['values']['element'])) {
    $module = $form_state['values']['module'];
    $delta = $form_state['values']['delta'];
    $element = $form_state['values']['element'];
    $record = array(
      'module' => $module,
      'delta' => $delta,
      'element' => $element,
    );
    $primary_keys = array(
      'module',
      'delta');
    if (semantic_blocks_get_element($module, $delta) == NULL) {
      drupal_write_record('semantic_blocks', $record);
    }
    else {
      drupal_write_record('semantic_blocks', $record, $primary_keys);
    }

  }
}

/**
 * List of available elements
 *
 * @return array
 *   Array of elements
 */
function semantic_blocks_elements() {
  $elements = drupal_map_assoc(
    array(
      'address',
      'article',
      'aside',
      'div',
      'figure',
      'footer',
      'header',
      'hgroup',
      'nav',
      'section',
    )
  );
  return $elements;
}

/**
 * Add permission for altering element
 *
 * Implements hook_permission
 */
function semantic_blocks_permission() {
  return array(
    'administer block element' => array(
      'title' => t('Administer element'),
      'description' => t('Use the semantic blocks module to alter the html wrapper element of a block.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function semantic_blocks_menu() {
  $items['admin/config/development/semantic-blocks'] = array(
    'title' => 'Semantic Blocks',
    'description' => 'Enable overriding the block template.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('semantic_blocks_admin'),
    'access arguments' => array('administer block element'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Configuration form to set variable that overrides the default template.
 */
function semantic_blocks_admin() {
  $form['semantic_blocks_override_template'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('semantic_blocks_override_template', FALSE),
    '#title' => t('Override block template'),
    '#description' => t('Replaces block.tpl.php with modified version to output the
    selected tag. Please refer to the help section if your theme or other module uses
    a custom template. ONLY use this if there is no other module / theme modifying
    the block template.'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_theme_registry_alter().
 */
function semantic_blocks_theme_registry_alter(&$theme_registry) {
  if (variable_get('semantic_blocks_override_template') == TRUE) {
    $theme_registry['block']['template'] = drupal_get_path('module', 'semantic_blocks') . '/block';
  }
}
