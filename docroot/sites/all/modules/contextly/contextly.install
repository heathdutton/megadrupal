<?php

// Required Kit versions.
define('CONTEXTLY_SUPPORTED_KIT_VERSION', 2);

function _contextly_requirement_key() {
  $t = get_t();

  // Check API key existence.
  $requirement = array(
    'title' => $t('Contextly API key'),
    'description' => $t('The Contextly module requires an API key to operate properly.'),
  );

  $key = variable_get('contextly_api_key', '');
  if (empty($key)) {
    $requirement += array(
      'value' => $t('Not set'),
      'severity' => REQUIREMENT_ERROR,
    );
    $requirement['description'] .= $t(' !settings to set it.', array(
      '!settings' => l($t('Visit the settings page'), 'admin/config/content/contextly')
    ));
  }
  else {
    $requirement += array(
      'value' => $t('Set'),
      'severity' => REQUIREMENT_OK,
    );
  }

  return $requirement;
}

/**
 * Returns TRUE if the Kit is properly installed or error message.
 */
function _contextly_requirement_kit_installed() {
  $t = get_t();

  $path = _contextly_kit_path();
  if ($path === FALSE) {
    return $t('Unable to determine the Kit path.');
  }

  // Class file existence.
  $class_path = $path . '/server/Kit.php';
  if (!file_exists($class_path)) {
    return $t("The Kit file not found at %path", array(
      '%path' => $class_path,
    ));
  }

  require_once $class_path;
  $class_name = 'ContextlyKit';
  if (!class_exists($class_name, FALSE)) {
    return $t("%class class not found at %path", array(
      '%class' => $class_name,
      '%path' => $class_path,
    ));
  }

  return TRUE;
}

/**
 * Returns TRUE when passed Kit version is supported by module.
 *
 * @param $version
 *
 * @return bool
 */
function _contextly_requirement_kit_version_supported($version) {
  // Dev version should pass this check.
  if (strpos($version, 'dev') === 0) {
    return TRUE;
  }

  $major = intval($version);
  if ($major === CONTEXTLY_SUPPORTED_KIT_VERSION) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function _contextly_requirement_kit($phase) {
  // Make sure we have the Contextly module and the Library API module files
  // included before retrieving path of the Kit.
  module_load_include('module', 'contextly');
  if (module_exists('libraries')) {
    module_load_include('module', 'libraries');
  }

  $t = get_t();

  $requirement = array(
    'title' => $t('Contextly Kit version'),
  );

  $exists = _contextly_requirement_kit_installed();
  $is_installation = $phase === 'install';
  if ($exists === TRUE) {
    $version = ContextlyKit::version();
    $supported = _contextly_requirement_kit_version_supported($version);

    if ($supported) {
      $requirement += array(
        'severity' => REQUIREMENT_OK,
        'value' => $version,
        'description' => $t('Supported version found in %path', array(
          '%path' => _contextly_kit_path(),
        )),
      );
      return $requirement;
    }
    else {
      // Unsupported version found.
      $requirement += array(
        'value' => $version,
      );
      $requirement += _contextly_requirement_kit_error();
    }
  }
  else {
    // No Kit found.
    if (!$is_installation) {
      $requirement += array(
        'value' => $exists,
      );
    }
    $requirement += _contextly_requirement_kit_error();
  }

  return $requirement;
}

function _contextly_requirement_kit_error() {
  $t = get_t();
  return array(
    'severity' => REQUIREMENT_ERROR,
    'description' => $t('The Contextly module requires %version version of the Integration Kit.<br />See <a href="@url">documentation</a> for details.', array(
      '%version' => CONTEXTLY_SUPPORTED_KIT_VERSION . '.x',
      '@url' => 'https://www.drupal.org/node/2093671',
    )),
  );
}

/**
 * Implements hook_requirements().
 */
function contextly_requirements($phase) {
  $requirements = array();

  switch ($phase) {
    case 'runtime':
      $requirements['contextly_api_key'] = _contextly_requirement_key();
      // no break;

    case 'install':
    case 'update':
      // Contextly Kit becomes required from 7.x-2.0, check it on update too.
      $requirements['contextly_kit'] = _contextly_requirement_kit($phase);
      break;
  }

  return $requirements;
}

/**
 * Implements hook_enable().
 */
function contextly_enable() {
  $key = variable_get('contextly_api_key', '');
  if (empty($key)) {
    drupal_set_message(t('The Contextly module requires an API key to operate properly. Please, !settings to enter your key or get a new one.', array(
      '!settings' => l(t('visit the settings page'), 'admin/config/content/contextly'),
    )), 'warning');
  }
}

/**
 * Implements hook_uninstall().
 */
function contextly_uninstall() {
  $vars = array(
    'contextly_api_key',
    'contextly_node_types',
    'contextly_all_node_types',
    'contextly_all_tags',
    'contextly_mode',
  );
  foreach (array_keys(node_type_get_types()) as $type) {
    $vars[] = 'contextly_tags__' . $type;
    $vars[] = 'contextly_featured_image__' . $type;
  }

  foreach ($vars as $var_name) {
    variable_del($var_name);
  }
}

function contextly_schema() {
  $schema = array();
  $schema['contextly_node_settings'] = array(
    'description' => 'Settings for each node revision.',
    'fields' => array(
      'nid' => array(
        'description' => 'Node identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Node revision identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'disabled' => array(
        'description' => 'Non-zero value means all Contextly widgets will be disabled on the node revision.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vid'),
    'indexes' => array(
      'nid_vid' => array('nid', 'vid'),
    ),
    'foreign keys' => array(
      'node_revision' => array(
        'table' => 'node_revision',
        'columns' => array('vid' => 'vid'),
      ),
      'node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
  );
  return $schema;
}

// TODO Upgrade path from D6 version.

/**
 * Create storage for the per-node widgets toggle.
 */
function contextly_update_7101() {
  $table = 'contextly_node_settings';
  $specs = array(
    'description' => 'Settings for each node revision.',
    'fields' => array(
      'nid' => array(
        'description' => 'Node identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Node revision identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'disabled' => array(
        'description' => 'Non-zero value means all Contextly widgets will be disabled on the node revision.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vid'),
    'indexes' => array(
      'nid_vid' => array('nid', 'vid'),
    ),
    'foreign keys' => array(
      'node_revision' => array(
        'table' => 'node_revision',
        'columns' => array('vid' => 'vid'),
      ),
      'node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
  );
  if (!db_table_exists($table)) {
    db_create_table($table, $specs);
  }
}
