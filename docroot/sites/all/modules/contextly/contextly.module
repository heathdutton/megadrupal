<?php

/**
 * Widget external assets version.
 */
define("CONTEXTLY_CLIENT_VERSION", "1.3.1");

/**
 * Implements hook_permission().
 */
function contextly_permission() {
  return array(
    'administer contextly' => array(
      'title' => t('Administer Contextly settings'),
      'description' => t('Change API keys, modify Contextly-enabled node types, etc.'),
    ),
    'manage contextly links' => array(
      'title' => t('Manage Contextly links and sidebars'),
      'description' => t("Add and remove related posts, sidebars, etc."),
    ),
  );
}

/**
 * Returns value that is suitable for security token generation or validation.
 *
 * @param stdClass $node
 *
 * @return string
 */
function _contextly_node_edit_token_value($node) {
  return 'contextly/node-edit/' . $node->nid;
}

/**
 * Access callback for the settings loading on the node edit form.
 *
 * @param stdClass $node
 *
 * @return bool
 */
function _contextly_ajax_node_edit_access($node) {
  // First of all, check anti-CSRF token.
  $token_value = _contextly_node_edit_token_value($node);
  if (empty($_GET['token']) || !drupal_valid_token($_GET['token'], $token_value)) {
    return FALSE;
  }

  if (!user_access('manage contextly links')) {
    return FALSE;
  }

  if (!_contextly_is_api_key_set()) {
    return FALSE;
  }

  if (!_contextly_is_node_type_enabled($node->type)) {
    return FALSE;
  }

  return node_access('update', $node);
}

/**
 * Implements hook_menu().
 */
function contextly_menu() {
  $items = array();

  // AJAX callback for the editor actions.
  $items['contextly-ajax/%/%node'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => '_contextly_ajax_node_edit_access',
    'access arguments' => array(2),
    'page callback' => 'contextly_ajax_editor_request_callback',
    'page arguments' => array(1, 2),
    'file' => 'contextly.pages.inc',
  );

  // Callbacks for the overlay editors.
  $editor_base = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'contextly_overlay_editor_page',
    'page arguments' => array(1, 2),
    'file' => 'contextly.pages.inc',
    'access callback' => '_contextly_ajax_node_edit_access',
    'access arguments' => array(2),
  );
  $items['contextly-editor/snippet/%node'] = $editor_base;
  $items['contextly-editor/link/%node'] = $editor_base;
  $items['contextly-editor/sidebar/%node'] = $editor_base;

  // Settings.
  $items['admin/config/content/contextly'] = array(
    'title' => 'Contextly',
    'description' => 'Contextly integration options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contextly_settings_form'),
    'file' => 'contextly.admin.inc',
    'access arguments' => array('administer contextly'),
  );
  $items['admin/config/content/contextly/general'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'General',
    'description' => 'General settings',
    'access arguments' => array('administer contextly'),
  );
  $items['admin/config/content/contextly/node-types'] = array(
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'title' => 'Node types',
    'description' => 'Contextly-enabled node types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contextly_settings_node_types_form'),
    'file' => 'contextly.admin.inc',
    'access arguments' => array('administer contextly'),
  );

  if (module_exists('taxonomy')) {
    $items['admin/config/content/contextly/tags'] = array(
      'type' => MENU_LOCAL_TASK,
      'weight' => 15,
      'title' => 'Tags',
      'description' => 'Term reference sent to Contextly',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('contextly_settings_tags_form'),
      'file' => 'contextly.admin.inc',
      'access arguments' => array('administer contextly'),
    );
  }

  if (module_exists('image')) {
    $items['admin/config/content/contextly/featured-images'] = array(
      'type' => MENU_LOCAL_TASK,
      'weight' => 20,
      'title' => 'Featured images',
      'description' => 'Featured images sent to Contextly',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('contextly_settings_featured_images_form'),
      'file' => 'contextly.admin.inc',
      'access arguments' => array('administer contextly'),
    );
  }

  $items['admin/config/content/contextly/cp-tour'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'contextly_settings_cp_tour_redirect',
    'file' => 'contextly.admin.inc',
    'access arguments' => array('administer contextly'),
  );
  $items['admin/config/content/contextly/set-api-key'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'contextly_settings_set_api_key_redirect',
    'file' => 'contextly.admin.inc',
    'access arguments' => array('administer contextly'),
  );

  return $items;
}

/**
 * Returns TRUE if passed node type is Contextly-enabled.
 *
 * @param string $type_name
 *
 * @return bool
 */
function _contextly_is_node_type_enabled($type_name) {
  if (variable_get('contextly_all_node_types', TRUE)) {
    return TRUE;
  }

  $enabled_types = variable_get('contextly_node_types', array());
  if (in_array($type_name, $enabled_types, TRUE)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Returns TRUE if API key was set.
 *
 * @return bool
 */
function _contextly_is_api_key_set() {
  $key = variable_get('contextly_api_key', array());
  return !empty($key);
}

/**
 * Saves Contextly settings of the node.
 *
 * @param $node
 */
function _contextly_save_node_revision_settings($node) {
  $fields = array(
    'disabled' => $node->contextly_disabled,
  );
  $key = array(
    'nid' => $node->nid,
    'vid' => $node->vid,
  );
  db_merge('contextly_node_settings')
    ->key($key)
    ->fields($fields)
    ->execute();
}

function _contextly_remove_node_revision_settings($node) {
  db_delete('contextly_node_settings')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_node_update().
 */
function contextly_node_update($node) {
  _contextly_node_changed($node);

  if (!empty($node->contextly_disabled)) {
    _contextly_save_node_revision_settings($node);
  }
  else {
    _contextly_remove_node_revision_settings($node);
  }
}

/**
 * Implements hook_node_insert().
 */
function contextly_node_insert($node) {
  _contextly_node_changed($node);

  if (!empty($node->contextly_disabled)) {
    _contextly_save_node_revision_settings($node);
  }
}

/**
 * Implements hook_node_revision_delete().
 */
function contextly_node_revision_delete($node) {
  _contextly_remove_node_revision_settings($node);
}

/**
 * Implements hook_node_delete().
 */
function contextly_node_delete($node) {
  db_delete('contextly_node_settings')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_load().
 */
function contextly_node_load($nodes, $types) {
  // Re-map nodes by revision ID.
  $revisions = array();
  foreach ($nodes as $node) {
    $revisions[$node->vid] = $node;
  }

  $result = db_select('contextly_node_settings', 'cns')
    ->fields('cns', array('vid', 'disabled'))
    ->condition('vid', array_keys($revisions))
    ->execute();

  // Add our extra data to the node objects.
  foreach ($result as $record) {
    $revisions[$record->vid]->contextly_disabled = $record->disabled;
  }
}

/**
 * Callback for both node update and insert.
 *
 * Send node of enabled type to the Contextly.
 *
 * @param object $node
 */
function _contextly_node_changed($node) {
  if (_contextly_is_api_key_set() && _contextly_is_node_type_enabled($node->type)) {
    try {
      ContextlyDrupalKit::getInstance()
        ->newDrupalNodeEditor()
        ->putNode($node);
    }
    catch (ContextlyKitException $e) {
      _contextly_watchdog_exception($e, 'Unable to send the node to the Contextly');

      if (user_access('manage contextly links')) {
        drupal_set_message('Unable to send the node to the Contextly. See log for details.', 'error');
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * Adds display mode to the node.
 */
function contextly_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['contextly'] = array(
    'label' => t('Contextly'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_theme().
 */
function contextly_theme() {
  $theme_path = drupal_get_path('module', 'contextly') . '/theme';

  return array(
    'contextly_node' => array(
      'render element' => 'elements',
      'path' => $theme_path,
      'template' => 'contextly-node',
    ),
    'contextly_metadata' => array(
      'variables' => array(
        'metadata' => array(),
      ),
    ),
    'contextly_snippet_edit' => array(
      'render element' => 'element',
    ),
  );
}

function theme_contextly_metadata($vars) {
  $attributes = array(
    'name' => 'contextly-page',
    'id' => 'contextly-page',
  );

  // All special characters are encoded inside JSON (<, >, ', &, and "). Double
  // quotes around JSON property names and values are fine here, because we use
  // single quotes around HTML attribute value.
  $metadata = $vars['metadata'];
  $metadata = drupal_json_encode($metadata);
  return '<meta' . drupal_attributes($attributes) . " content='" . $metadata . "' />\n";
}

function theme_contextly_snippet_edit($vars) {
  $output = '<input type="button" class="d-ctx-snippet-button form-submit" value="" />' . "\n";
  $output .= '<div class="d-ctx-snippet-status description"></div>' . "\n";
  $output = '<div class="d-ctx-snippet-edit form-actions" style="display: none;">' . $output . "</div>\n";
  return $output;
}

/**
 * Implements hook_preprocess_node().
 *
 * Adds template suggestions for the contextly view mode.
 */
function contextly_preprocess_node(&$variables) {
  if ($variables['view_mode'] === 'contextly') {
    $node = $variables['node'];

    $variables['theme_hook_suggestions'][] = 'contextly_node';
    $variables['theme_hook_suggestions'][] = 'contextly_node__' . $node->type;
    $variables['theme_hook_suggestions'][] = 'contextly_node__' . $node->nid;
  }
}

/**
 * Returns field names of selected types for the passed node type.
 *
 * @param string $node_type
 * @param array $field_types
 *
 * @return array
 */
function _contextly_get_node_type_fields($node_type, array $field_types) {
  $fields = array();
  $instances = field_info_instances('node', $node_type);
  foreach ($instances as $instance) {
    $field_info = field_info_field($instance['field_name']);
    if (in_array($field_info['type'], $field_types, TRUE)) {
      $fields[] = $instance['field_name'];
    }
  }
  return $fields;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Adds edit elements to the node edit form.
 */
function contextly_form_node_form_alter(&$form) {
  $node = $form['#node'];

  // Make sure that API key is set.
  if (!_contextly_is_api_key_set()) {
    return;
  }

  // Check if node type is enabled.
  if (!_contextly_is_node_type_enabled($node->type)) {
    return;
  }

  $has_access = user_access('manage contextly links');

  // Add per-post settings (even if user has no access to edit links).
  $form['contextly'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contextly widgets'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#weight' => 50,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'contextly') . '/js/contextly-node-form.js',
      ),
    ),
  );
  $form['contextly']['contextly_disabled'] = array(
    '#type' => 'checkbox',
    '#disabled' => !$has_access,
    '#title' => t('Disable the recommendation module and all sidebars on this node'),
    '#default_value' => !empty($node->contextly_disabled),
  );

  // Stop at this point if user has no access.
  if (!$has_access) {
    return;
  }

  // For now we support node edit only.
  if (empty($node->nid)) {
    // Instead of showing the message now we add after build handler to check
    // if the form was submitted and show the message if it wasn't. We can't do
    // it here, because "process_input" form state variable is not set yet.
    $form['#after_build'][] = '_contextly_create_node_form_after_build';
    return;
  }

  $form['#attached']['library'][] = array('contextly', 'editor');
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => _contextly_node_edit_settings($node),
  );

  if (!empty($form['actions']['#weight'])) {
    $weight = $form['actions']['#weight'];
  }
  else {
    $weight = element_info_property('actions', '#weight', 100);
    if (!$weight) {
      $weight = 100;
    }
  }
  $weight -= 0.001;

  $form['contextly_snippet_edit'] = array(
    '#theme' => 'contextly_snippet_edit',
    '#weight' => $weight,
  );
}

/**
 * Returns JS settings for the node edit form.
 *
 * @param $node
 *
 * @return array
 */
function _contextly_node_edit_settings($node) {
  return array(
    'contextlyEditor' => array(
      'token' => drupal_get_token(_contextly_node_edit_token_value($node)),
      'nid' => $node->nid,
      'baseUrl' => $GLOBALS['base_url'] . '/',
    ),
  );
}

/**
 * Form API after build callback for the create node form.
 *
 * Adds warning message about saving the node first, but only if the form was
 * not submitted yet (to avoid the message appearing on the node page after
 * saving it first time).
 */
function _contextly_create_node_form_after_build($form, $form_state) {
  if (!$form_state['programmed'] && !$form_state['process_input']) {
    drupal_set_message(t('Save the node to be able to manage the Contextly links.'), 'warning', FALSE);
  }

  return $form;
}

/**
 * Returns the list of Contextly-enabled node types (machine names).
 *
 * @return array
 */
function _contextly_get_enabled_types() {
  if (variable_get('contextly_all_node_types', TRUE)) {
    $enabled_types = array_keys(node_type_get_types());
  }
  else {
    $enabled_types = variable_get('contextly_node_types', array());
  }
  return $enabled_types;
}

/**
 * Implements hook_field_extra_fields().
 */
function contextly_field_extra_fields() {
  $enabled_types = _contextly_get_enabled_types();
  $extra = array();
  foreach ($enabled_types as $type) {
    $extra['node'][$type]['display']['contextly_widget'] = array(
      'label' => t('Contextly widget'),
      'description' => t('Widget displaying the list of related posts and links. Visible on the full node view only.'),
      'weight' => 0,
    );
  }
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function contextly_node_view($node, $view_mode, $langcode) {
  // Make sure that API key is set.
  if (!_contextly_is_api_key_set()) {
    return;
  }

  if (!_contextly_is_node_type_enabled($node->type)) {
    return;
  }

  // Show widget on the node view page only.
  if ($view_mode !== 'full' || !node_is_page($node)) {
    return;
  }

  // Add Contextly meta-data to the post at this point.
  $metadata = ContextlyDrupalKit::getInstance()
    ->newDrupalNodeData($node)
    ->getMetadata();
  $metadata_tag = array(
    '#theme' => 'contextly_metadata',
    '#metadata' => $metadata,
  );
  $node->content['contextly_metadata'] = array(
    '#attached' => array(
      'drupal_add_html_head' => array(
        array($metadata_tag, 'contextly_metadata'),
      ),
    ),
  );

  $node->content['contextly_widget'] = array(
    '#weight' => 0,
    '#attached' => array(
      'library' => array(
        array('contextly', 'widget'),
      ),
      'js' => array(
        drupal_get_path('module', 'contextly') . '/js/contextly-node-view.js',
        array(
          'type' => 'setting',
          'data' => _contextly_node_widgets_settings($node),
        ),
      ),
    ),

    'storyline_subscribe' => array(
      '#theme_wrappers' => array('container'),
      '#attributes' => array(
        'id' => 'ctx-sl-subscribe',
        'class' => array('ctx-clearfix'),
      ),
    ),
    'module' => array(
      '#theme_wrappers' => array('container'),
      '#attributes' => array(
        'id' => 'ctx-module',
        'class' => array('ctx-module-container', 'ctx-clearfix'),
      ),
    ),
  );
}

/**
 * Returns JS settings required for the widgets.
 *
 * @param object $node
 *
 * @return array
 */
function _contextly_node_widgets_settings($node) {
  $app_id = '';
  $api_key = variable_get('contextly_api_key', array());
  if (isset($api_key['appID'])) {
    $app_id = $api_key['appID'];
  }

  $isHttps = ContextlyDrupalKit::getInstance()->isHttps();

  return array(
    'contextlyWidgets' => array(
      'version' => CONTEXTLY_CLIENT_VERSION,
      'appId' => $app_id,
      'apiServerURL' => _contextly_server_url('api', $isHttps),
      'mainServerURL' => _contextly_server_url('main', $isHttps),
      'renderLinkWidgets' => empty($node->contextly_disabled),
    ),
  );
}

/**
 * Implements hook_library().
 */
function contextly_library() {
  $libraries = array();

  $module_path = drupal_get_path('module', 'contextly');
  $js_path = $module_path . '/js/';

  $libraries['editor'] = array(
    'title' => 'Contextly: editor',
    'version' => '1.0',
    'js' => array(
      $js_path . 'contextly-editor.js' => array(),
    ),
    'dependencies' => array(
      array('contextly', 'editor-overlay'),
    ),
  );

  // Libraries from the Kit.
  $map = array(
    'editor-overlay' => array(
      'package' => 'overlay-dialogs/overlay',
      'ignore' => array(
        'libraries/jquery' => TRUE,
      ),
      'library' => array(
        'title' => 'Contextly: overlay',
        'dependencies' => array(
          array('system', 'jquery'),
        ),
      ),
    ),
    'easy-xdm' => array(
      'package' => 'libraries/easy-xdm',
      'library' => array(
        'title' => 'EasyXDM',
      ),
    ),
    'widget' => array(
      'package' => 'widgets/page-view',
      'ignore' => array(
        'libraries/jquery' => TRUE,
        'libraries/easy-xdm' => TRUE,
      ),
      'library' => array(
        'title' => 'Contextly: widgets',
        'dependencies' => array(
          array('system', 'jquery'),
          array('contextly', 'easy-xdm'),
        ),
      ),
    ),
  );
  $kit = ContextlyDrupalKit::getInstance();
  $assets_manager = $kit->newAssetsManager();
  foreach ($map as $key => $info) {
    $info += array(
      'ignore' => array(),
      'library' => array(),
    );
    $info['library'] += array(
      'version' => ContextlyDrupalKit::version(),
    );

    $assets = $kit->newAssetsList();
    $assets_manager->extractPackageAssets($info['package'], $assets, $info['ignore']);
    $library = $kit->newDrupalAssetsLibraryRenderer($assets)
      ->renderAll();
    $library += $info['library'];

    $libraries[$key] = $library;
  }

  // Add runtime json2 loading to the EasyXDM.
  $assets = $kit->newAssetsList();
  $assets_manager->extractPackageAssets('libraries/json2', $assets);
  $script = array();
  foreach ($assets->buildJsUrls() as $url) {
    $script[] = 'easyXDM.DomHelper.requiresJSON(' . drupal_json_encode($url) . ');';
  }
  $libraries['easy-xdm']['js'][] = array(
    'type' => 'inline',
    'data' => implode("\n", $script),
  );

  return $libraries;
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function contextly_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'tinymce':
      if (version_compare($version, '3.4', '>=') && version_compare($version, '4', '<')) {
        return array(
          'contextly' => array(
            'url' => 'http://contextly.com',
            'path' => drupal_get_path('module', 'contextly') . '/tinymce',
            'filename' => 'tinymce.js',
            'load' => TRUE,
            'buttons' => array(
              'contextlylink' => t('Contextly link'),
              'contextlysidebar' => t('Contextly sidebar'),
            ),
            // TinyMCE-specific: Additional HTML elements to allow in the markup.
            'extended_valid_elements' => array(
              'img[class|src|border=0|alt|title|width|height|align|name|style]',
            ),
          ),
        );
      }
      break;

    case 'ckeditor':
      if (version_compare($version, '3.6.1', '>=')) {
        return array(
          'contextly' => array(
            'url' => 'http://contextly.com',
            'path' => drupal_get_path('module', 'contextly') . '/ckeditor',
            'filename' => 'plugin.js',
            'load' => TRUE,
            'buttons' => array(
              'ContextlyLink' => t('Contextly link'),
              'ContextlySidebar' => t('Contextly sidebar'),
            ),
          ),
        );
      }
      break;
  }
}

/**
 * Implements hook_ckeditor_plugin().
 */
function contextly_ckeditor_plugin() {
  return array(
    'contextly' => array(
      'name' => 'contextly',
      'desc' => t('Contextly'),
      'path' => drupal_get_path('module', 'contextly') . '/ckeditor/',
      'buttons' => array(
        'ContextlyLink' => array(
          'icon' => 'icons/link.png',
          'label' => t('Contextly link'),
        ),
        'ContextlySidebar' => array(
          'icon' => 'icons/sidebar.png',
          'label' => t('Contextly sidebar'),
        ),
      )
    )
  );
}

/**
 * Returns base URL of the Contextly server.
 *
 * URL depends on current mode: dev or production.
 *
 * @param string $server_type
 *   Possible types:
 *   - main: primary server with Contextly admin UI
 *   - api: server for API calls
 *   - cp: control panel (secure variant of the main server)
 *
 * @return string
 *
 * @todo Use the kit for this.
 */
function _contextly_server_url($server_type, $secure = TRUE) {
  $scheme = $secure ? 'https:' : 'http:';

  switch (variable_get('contextly_mode', '')) {
    case 'dev':
      switch ($server_type) {
        case 'main':
          return "$scheme//dev.contextly.com/";

        case 'cp':
          return "$scheme//dev.contextly.com/";

        case 'api':
          return "$scheme//devrest.contextly.com/";
      }
      break;

    default:
      // Production mode by default.
      switch ($server_type) {
        case 'main':
          return "$scheme//contextly.com/";

        case 'cp':
          return "$scheme//contextly.com/";

        case 'api':
          return "$scheme//rest.contextly.com/";
      }
  }

  return '';
}

/**
 * Implements hook_filter_info().
 */
function contextly_filter_info() {
  $filters = array();
  $filters['contextly_sidebars'] = array(
    'title' => t('Contextly sidebars'),
    'description' => t('Renders Contextly sidebars.'),
    'process callback' => 'contextly_filter_sidebars_process',
    'settings callback' => 'contextly_filter_sidebars_settings',
    'default settings' => array(
      'element' => 'span',
    ),
  );
  return $filters;
}

/**
 * Sets, returns or removes stored value of the current Contextly filter.
 *
 * @param array|null $settings
 * @param bool $cleanup
 *
 * @return array|null
 */
function _contextly_filter_settings($settings = NULL, $cleanup = FALSE) {
  $stored =& drupal_static(__FUNCTION__);

  if ($cleanup) {
    drupal_static_reset(__FUNCTION__);
  }
  elseif (isset($settings)) {
    $stored = $settings;
  }
  else {
    return $stored;
  }
}

/**
 * Replaces HTML comment with the SPAN element.
 *
 * Callback for the preg_replace_callback() within
 * contextly_filter_sidebars_process().
 */
function _contextly_filter_sidebars_callback($matches) {
  $settings = _contextly_filter_settings();
  $tag = !empty($settings['element']) ? $settings['element'] : 'span';
  $attributes = array(
    'id' => 'contextly-' . $matches[1],
    'class' => array('ctx-sidebar-container'),
  );
  return '<' . $tag . drupal_attributes($attributes) . '></' . $tag . '>';
}

/**
 * Filter callback for HTML processing.
 *
 * Replaces special HTML comment generated by WYSIWYG-editor plugin with the
 * SPAN element that will be expanded into the sidebar.
 */
function contextly_filter_sidebars_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  _contextly_filter_settings($filter->settings);
  $result = preg_replace_callback('/\<\!--contextly-sidebar\s+(\S+)--\>/iu', '_contextly_filter_sidebars_callback', $text);
  _contextly_filter_settings(NULL, TRUE);
  return $result;
}

/**
 * Filter callback for the settings form.
 */
function contextly_filter_sidebars_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;

  $elements = array();
  $elements['element'] = array(
    '#required' => TRUE,
    '#type' => 'textfield',
    '#title' => t('Sidebar tag name'),
    '#description' => t('Set tag name that can pass all subsequent filters in the text format without removal of the "class" attribute.'),
    '#default_value' => $filter->settings['element'],
    '#element_validate' => array('_contextly_tag_name_validate'),
  );
  return $elements;
}

/**
 * Form API callback: element validation for the tag name.
 */
function _contextly_tag_name_validate($element, &$form_state, $form) {
  if (!empty($element['#value']) && !preg_match('/^[a-z0-9]+$/i', $element['#value'])) {
    form_error($element, t('Tag name should only contain alphanumeric symbols.'));
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 *
 * Moves Contextly link button next to the traditional link button.
 */
function contextly_wysiwyg_editor_settings_alter(&$settings, $context) {
  if (module_exists('wysiwyg_button_order')) {
    // Let administrator to choose the order of buttons if there is a module to
    // change it.
    return;
  }

  switch ($context['profile']->editor) {
    case 'ckeditor':
      // Get the list of buttons.
      if (!isset($settings['toolbar'][0])) {
        return;
      }
      $buttons =& $settings['toolbar'][0];

      // Adjust order of buttons.
      $buttons = _contextly_adjust_link_button_position($buttons, 'ContextlyLink', array(
        'Link' => TRUE,
        'Unlink' => FALSE,
        'Anchor' => FALSE,
      ));

      // Cleanup reference.
      unset($buttons);
      break;

    case 'tinymce':
      // TODO: Support for multiple filled panels when WYSIWYG will implement it.
      if (empty($settings['theme_advanced_buttons1'])) {
        return;
      }
      $buttons = explode(',', $settings['theme_advanced_buttons1']);

      // Adjust position of the link button.
      $buttons = _contextly_adjust_link_button_position($buttons, 'contextlylink', array(
        'link' => TRUE,
        'unlink' => FALSE,
        'anchor' => FALSE,
      ));

      // Set buttons back to the settings.
      $settings['theme_advanced_buttons1'] = implode(',', $buttons);
      break;
  }
}

/**
 * Moves Contextly Link button to the internal link button.
 *
 * @param array $buttons
 * @param string $contextly_link
 * @param array $internal_buttons
 *   Keys are button names, values are TRUE if Contextly Link should be inserted
 *   after the button, FALSE otherwise.
 *
 * @return array
 *   Updated buttons list.
 */
function _contextly_adjust_link_button_position($buttons, $contextly_link, $internal_buttons) {
  // Reset buttons indexes to be equal to the item offset. We need it for
  // changing Contextly link button position, but do it before searchin for
  // the button itself.
  $buttons = array_values($buttons);

  // Make sure Contextly Link button is in toolbar and get its position.
  $contextly_position = array_search($contextly_link, $buttons, TRUE);
  if ($contextly_position === FALSE) {
    return $buttons;
  }

  // Find offset of any traditional link/unlink/anchor button to insert
  // Contextly Link next to it.
  foreach ($internal_buttons as $internal_button => $insert_after) {
    $offset = array_search($internal_button, $buttons, TRUE);
    if ($offset !== FALSE) {
      // Remove Contextly Link from its current position.
      unset($buttons[$contextly_position]);

      // Adjust insertion position if necessary.
      if ($insert_after) {
        $offset++;
      }

      array_splice($buttons, $offset, 0, $contextly_link);

      break;
    }
  }

  return $buttons;
}

/**
 * Returns path to the Kit.
 *
 * @return bool|string
 */
function _contextly_kit_path() {
  $path =& drupal_static(__FUNCTION__, NULL);

  if (!isset($path)) {
    if (module_exists('libraries')) {
      $path = libraries_get_path('contextly-kit');
    }
    else {
      // Fallback to hard-coded path.
      $path = 'sites/all/libraries/contextly-kit';
    }
  }

  return $path;
}

/**
 * Implements hook_registry_files_alter().
 */
function contextly_registry_files_alter(&$files, $modules) {
  $directory = _contextly_kit_path() . '/server';
  if (!is_dir($directory)) {
    watchdog('contextly', 'Contextly Kit directory %path not exists.', array(
      '%path' => $directory,
    ), WATCHDOG_ERROR);
    return;
  }

  $filepaths = glob($directory . '/*.php');
  if (empty($filepaths)) {
    watchdog('contextly', 'Contextly Kit classes not found in %path.', array(
      '%path' => $directory,
    ), WATCHDOG_ERROR);
    return;
  }

  foreach ($filepaths as $filepath) {
    $files[$filepath] = array(
      'module' => 'contextly',
      'weight' => -1,
    );
  }
}

/**
 * Logs passed exception using Drupal watchdog.
 *
 * @param ContextlyKitException $exception
 */
function _contextly_watchdog_exception($exception, $message = NULL) {
  $details = (string) $exception;
  if (isset($message)) {
    $details = "{$message}\n\n{$details}";
  }
  $details = nl2br(check_plain($details));
  watchdog('contextly', $details, NULL, WATCHDOG_ERROR);
}

/**
 * Formats timestamp before sending to the Contextly API.
 *
 * As a temporary solution, the date and time are formatted with website
 * default timezone for consistency independent from user timezone.
 *
 * @param int $timestamp
 *
 * @return string
 */
function _contextly_format_date($timestamp) {
  $timezone = variable_get('date_default_timezone', date_default_timezone_get());
  return format_date($timestamp, 'custom', 'Y-m-d H:i:s', $timezone);
}

// TODO React on node type removal, on term reference and image field instances
// removal.
