<?php

/**
 * @file
 * Storage API Stream Wrapper module file.
 */

const STORAGE_STREAM_WRAPPER_SCHEME='storage-api';

/**
 * Gets the storage selector for our stream wrapper.
 */
function storage_stream_wrapper_selector() {
  return storage_selector('storage_stream_wrapper');
}

/**
 * Implements hook_stream_wrappers().
 */
function storage_stream_wrapper_stream_wrappers() {
  $wrappers[STORAGE_STREAM_WRAPPER_SCHEME] = array(
    'name' => t("Storage class (default file scheme)"),
    'class' => 'StorageApiStreamWrapper',
    'description' => 'Storage class - default file scheme (set at /admin/config/media/file-system)',
  );

  return $wrappers;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function storage_stream_wrapper_form_system_file_system_settings_alter(array &$form, array &$form_state) {
  // Add the option to use Storage API.
  unset($form['file_default_scheme']['#options'][STORAGE_STREAM_WRAPPER_SCHEME]);
  $form['file_default_scheme']['#options'][STORAGE_STREAM_WRAPPER_SCHEME] = t("Storage class (select below)");

  // Add the class selector widget.
  $form['storage_class'] = storage_stream_wrapper_selector()->formItem();
  $form['storage_class']['#states'] = array(
    'enabled' => array(
      ':input[name=' . STORAGE_STREAM_WRAPPER_SCHEME . ']' => array('value' => 'storage-api'),
    ),
  );
  $form['#submit'][] = 'storage_stream_wrapper_system_file_system_settings_submit';
}

function storage_stream_wrapper_system_file_system_settings_submit(array $form, array &$form_state) {
  storage_stream_wrapper_selector()
  ->submit($form_state['values']['storage_class']);
}

/**
 * Loads a storage from its URI.
 *
 * @param $uri
 *   The URI of the storage to load.
 *
 * @return
 *   The storage.
 *
 * @throws StorageException
 *   When it isn't possible to load the storage.
 */
function storage_stream_wrapper_load($uri) {
  $storage_id = db_select('storage_stream_wrapper', 'ssw')
    ->fields('ssw', array('storage_id'))
    ->condition('uri', $uri)
    ->execute()
    ->fetchField();

  return storage_load($storage_id);
}

/**
 * Checks if an uri corresponds to an image derivative and creates its storage.
 *
 * @param $uri
 *   The URI of the storage to be created.
 *
 * @return
 *   The storage of the styled image.
 *
 * @throws BadImageStyleStorageException()
 *   When the image style is unknown
 * @throws StorageException
 *   When it isn't possible to create the storage.
 *
 * @see storage_stream_wrapper_storage_generate().
 */
function storage_stream_wrapper_create_derivative_image($uri) {
  // The uri has the form scheme://styles/thumbnail/scheme-original/path/to/image.png
  $scheme = file_uri_scheme($uri);
  $target = file_uri_target($uri);
  $components = explode('/', $target);

  // Check this is a styled image uri.
  if ((count($components) < 3) || ($components[0] != 'styles')) {
    // Not a styled image uri, or not one of our concern.
    return;
  }
  // Check the style is valid.
  $style_name = $components[1];
  $style = image_style_load($style_name);
  if (!$style) {
    throw new BadImageStyleStorageException($style);
  }
  // Obtain the original image.
  $original_scheme = $components[2];
  $original_target = implode('/', array_slice($components, 3));
  $original_uri = $original_scheme . '://' . $original_target;
  try {
    $parent = storage_stream_wrapper_load($original_uri);
  }
  catch (StorageException $e) {
    throw new StorageException("Unable to load original image for $uri");
  }

  // Create the derivative image.
  // TODO: use image_style_deliver().
  if (!image_style_create_derivative($style, $original_uri, $uri)) {
    throw new StorageException("Unable to create image derivative for $uri");
  }

  // Set the parent.
  $storage = storage_stream_wrapper_load($uri);
  $storage->parent_id = $parent->storage_id;
  $storage->update();

  return $storage;
}

/**
 * Implements hook_image_style_flush().
 */
function storage_stream_wrapper_image_style_flush(array $style) {
  $uri_like = db_like('://styles/' . $style['name'] . '/');
  $storage_ids = db_select('storage_stream_wrapper')
    ->fields('storage_stream_wrapper', array('storage_id'))
    ->condition('uri', '%' . $uri_like . '%', 'LIKE')
    ->execute()
    ->fetchCol();

  foreach ($storage_ids as $storage_id) {
    try {
      storage_load($storage_id)->remove();
    }
    catch (StorageException $e) {
    }
  }
}

/**
 * Implements hook_storage_remove().
 */
function storage_stream_wrapper_storage_remove(Storage $storage) {
  db_delete('storage_stream_wrapper')
    ->condition('storage_id', $storage->storage_id)
    ->execute();
}

