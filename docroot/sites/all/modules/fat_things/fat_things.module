<?php

/**
 * Implements hook_menu().
 */
function fat_things_menu() {

  $items = array();

  $items['admin/structure/fat_things'] = array(
    'title' => 'Field all the Things',
    'description' => 'Manage the fielding of things.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fat_things_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

} // fat_things_menu

/**
 * Implements hook_menu_alter().
 */
function fat_things_menu_alter(&$items) {

  $entity_types = entity_get_info();
  $fat_things_entity_types = fat_things_ids_from_type('entity_type');

  foreach ($fat_things_entity_types as $entity_type) {

    $items['admin/structure/fat_things/entity_type/' . $entity_type] = array(
      'title' => $entity_types[$entity_type]['label'],
      'description' => 'Fields for ' . $entity_types[$entity_type]['label'] . ' things.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fat_things_entity_field_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );

  } // foreach
  
} // fat_things_menu_alter

/**
 * Implements hook_entity_info().
 */
function fat_things_entity_info() {

  $return = array(
    'fat_things' => array(
      'label' => t('Fielded Thing'),
      'controller class' => 'EntityAPIController',
      'base table' => 'fat_things',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'thing_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'view modes' => array(),
      'module' => 'fat_things',
    ),
    'fat_things_entity' => array(
      'label' => t('Fielded Thing Entity'),
      'controller class' => 'EntityAPIController',
      'base table' => 'fat_things_entity',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'entity_id',
        'bundle' => 'bundle',
        'name' => 'entity_name',
      ),
      'bundle keys' => array(
        'bundle' => 'bundle',
      ),
      'bundles' => array(),
      'view modes' => array(),
      'module' => 'fat_things',
    ),
  );
  
  // Bundles must provide a human readable name so we can create help and error
  // messages, and the path to attach Field admin pages to.

  $entity_types = array();

  foreach (module_implements('entity_info') as $module) {

    if ($module != 'fat_things') {

      $callback = $module . '_entity_info';
      $entity_types += $callback();

    } // if

  } // foreach

  foreach (fat_things_ids_from_type('entity_type') as $type) {

    $return['fat_things_entity']['bundles']['entity_type:' . $type] = array(
      'label' => $entity_types[$type]['label'],
      'admin' => array(
        'path' => 'admin/structure/fat_things/entity_type/' . $type,
        'real path' => 'admin/structure/fat_things/entity_type/' . $type,
        'access arguments' => array('administer site configuration'),
      ),
    );

  } // foreach

  return $return;

} // fat_things_entity_info


/**
 * Creates entity type field form.
 */
function fat_things_entity_field_form($form, &$form_state) {

  $form = array();
  return $form;
  
} // fat_things_entity_field_form

/**
 * Creates form for settings.
 */
function fat_things_settings_form($form, &$form_state) {

  $form = array();

  $entity_types = entity_get_info();
  $fat_things_entity_types = fat_things_ids_from_type('entity_type');

  $form['entity_types'] = array(
    '#type' => 'markup',
    '#markup' => '<h2>' . t('Entity types') . '</h2>',
  );

  foreach ($entity_types as $type_id => $entity_type) {

    if (
      ($type_id == 'node') ||
      ($type_id == 'taxonomy_term')
    ) {

      $bundle_labels = array();

      foreach ($entity_type['bundles'] as $bundle) {
        $bundle_labels[] = $bundle['label'];
      } // foreach

      $form['entity_type:' . $type_id] = array(
        '#type' => 'checkbox',
        '#title' => $entity_type['label'] . ' things, e.g. ' . implode(', ', $bundle_labels),
      );

      if (in_array($type_id, $fat_things_entity_types)) {

        $form['entity_type:' . $type_id]['#default_value'] = 1;
        $form['entity_type:' . $type_id]['#description'] = l(t('Manage fields for @label things', array('@label' => $entity_type['label'])), 'admin/structure/fat_things/entity_type/' . $type_id . '/fields');

      } // if

    } // if

  } // foreach
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;

} // fat_things_settings_form

/**
 * Handles submission.
 */
function fat_things_settings_form_submit($form, $form_state) {

  $entity_types = entity_get_info();

  foreach ($entity_types as $type_id => $entity_type) {

    if ($form_state['values']['entity_type:' . $type_id]) {

      db_merge('fat_things')
        ->key(array(
          'thing_id' => 'entity_type:' . $type_id,
          'type' => 'entity_type',
        ))
        ->fields(array(
          'thing_id' => 'entity_type:' . $type_id,
          'type' => 'entity_type',
        ))
        ->execute();

    } // if
    else {

      db_delete('fat_things')
        ->condition('thing_id', 'entity_type:' . $type_id)
        ->condition('type', 'entity_type')
        ->execute();

    } // else

  } // foreach

  drupal_set_message('Things saved.');          

} // fat_things_settings_form_submit

/**
 * Loads an entity type fieldable thing.
 */
function fat_things_load($thing_id) {

  $things = entity_load('fat_things', array($thing_id));
  return $things ? reset($things) : FALSE;

} // fat_things_load

function fat_things_entity_load_by_name($entity_name) {
  
  $query = new EntityFieldQuery();
  
  $query->entityCondition('entity_type', 'fat_things_entity')
    ->propertyCondition('entity_name', $entity_name);
  
  $result = $query->execute();
  
  if (isset($result['fat_things_entity'])) {
    
    $entity_ids = array_keys($result['fat_things_entity']);      
    $entities = entity_load('fat_things_entity', $entity_ids);
    return reset($entities); 

  } // if

  return FALSE;

} // fat_things_entity_load_by_name

/**
 * Returns list of thing IDs for given type.
 */
function fat_things_ids_from_type($type) {
  
  $thing_ids = &drupal_static(__FUNCTION__);

  if (!isset($thing_ids)) {
    $thing_ids[] = array();
  } // if
  
  if (!isset($thing_ids[$type])) {
  
    $fat_result = db_select('fat_things', 'f')
      ->fields('f', array('thing_id'))
      ->condition('type', $type)
      ->execute();
  
    $thing_ids[$type] = array();
    
    foreach ($fat_result as $fat_record) {

      list(,$id) = explode(':', $fat_record->thing_id);
      $thing_ids[$type][] = $id;

    } // foreach

  } // if

  return $thing_ids[$type];
  
} // fat_things_ids_from_type

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function fat_things_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, $form_id) {
  
  $bundle = 'entity_type:taxonomy_term';

  $fat_things = fat_things_load($bundle);

  if ($fat_things) {

    $form['fat_things'] = fat_things_standard_fieldset();

    $entity_name = $bundle . ':' . $form['#vocabulary']->machine_name;
    $entity = fat_things_entity_load_by_name($entity_name);

    if (!$entity) {
      $entity = entity_create('fat_things_entity', array('entity_name' => $entity_name, 'bundle' => $bundle));
    } // if

    $form['fat_things']['#fat_things_entity'] = $entity;
    field_attach_form('fat_things_entity', $entity, $form['fat_things']['fields'], $form_state);
    $form['#validate'][] = 'fat_things_entity_type_form_validate';
    $form['#submit'][] = 'fat_things_entity_type_form_submit';

  } // if
  
} // fat_things_form_alter

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function fat_things_form_node_type_form_alter(&$form, &$form_state, $form_id) {

  $bundle = 'entity_type:node';

  $fat_things = fat_things_load($bundle);

  if ($fat_things) {

    $form['fat_things'] = fat_things_standard_fieldset() + array(
      '#group' => 'additional_settings',
    );

    $entity_name = $bundle . ':' . $form['#node_type']->type;
    $entity = fat_things_entity_load_by_name($entity_name);

    if (!$entity) {
      $entity = entity_create('fat_things_entity', array('entity_name' => $entity_name, 'bundle' => $bundle));
    } // if

    $form['fat_things']['#fat_things_entity'] = $entity;
    field_attach_form('fat_things_entity', $entity, $form['fat_things']['fields'], $form_state);
    $form['#validate'][] = 'fat_things_entity_type_form_validate';
    $form['#submit'][] = 'fat_things_entity_type_form_submit';

  } // if

} // fat_things_form_alter

/**
 * Returns default fieldset.
 */
function fat_things_standard_fieldset() {

  return array(
    '#type' => 'fieldset',
    '#title' => 'Field all the Things',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    'fields' => array(),
  );

} // fat_things_standard_fieldset

/**
 * Handles form validation for fieldable entity type.
 */
function fat_things_entity_type_form_validate($form, &$form_state) {

  $entity = $form['fat_things']['#fat_things_entity'];
  field_attach_form_validate('fat_things_entity', $entity, $form['fat_things']['fields'], $form_state);

} // fat_things_entity_type_form_submit

/**
 * Handles form submission for fieldable entity type.
 */
function fat_things_entity_type_form_submit($form, &$form_state) {

  $entity = $form['fat_things']['#fat_things_entity'];
  field_attach_submit('fat_things_entity', $entity, $form['fat_things']['fields'], $form_state);
  entity_save('fat_things_entity', $entity);

} // fat_things_entity_type_form_submit
