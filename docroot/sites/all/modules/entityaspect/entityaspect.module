<?php


/**
 * Implements hook_menu().
 */
function entityaspect_menu() {
  return entityaspect('info')->hook_menu();
}


/**
 * Implements hook_pagapi()
 */
function entityaspect_pageapi($api) {
  entityaspect('pageInfoCache')->hook_pageapi($api);
}


/**
 * Implements hook_menu_alter()
 */
function entityaspect_menu_alter(&$items) {
  entityaspect('info')->hook_menu_alter($items);
  return;
  $collect = array();
  foreach ($items as $route => $item) {
    if (preg_match('#^taxonomy/term/#', $route)) {
      $collect[$route] = $item;
    }
  }
  dpm($collect);
}


/**
 * Implements hook_entityaspect_page__(), for [entity]/%.
 *
 * TODO: Is this really safe for arbitrary entity type?
 *
function entityaspect_entityaspect_page__($entity_type, $entity, $api) {
  // This is the main [entity]/% route, with emtpy suffix.
  $api->title($entity->title);
  $api->pageTitle(check_plain($entity->title));
  $api->viewMode('full');
  // We make this easy to override, by setting a low override weight.
  $api->override(-10);
}
 */


/**
 * Implements hook_entityaspect_page____view(), for [entity]/%/view.
 *
 * TODO: Is this really safe for arbitrary entity type?
 *
function entityaspect_entityaspect_page____view($entity, $api) {
  // This is the main [entity]/% route, with emtpy suffix.
  $api->title(t('View'));
  // We make this easy to override, by setting a low override weight.
  $api->override(-10);
}
 */


/**
 * Implements hook_entity_info_alte().
 */
function entityaspect_entity_info_alter(&$entity_info) {
  entityaspect('info')->hook_entity_info_alter($entity_info);
}


/**
 * Implements hook_preprocess_page()
 */
function entityaspect_preprocess_page(&$vars) {
  entityaspect('pageInfoCache')->hook_preprocess_page($vars);
}


/**
 * Implements hook_menu_local_tasks_alter()
 */
function entityaspect_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  entityaspect('pageInfoCache')->hook_menu_local_tasks_alter($data, $router_item, $root_path);
}


// Access, title and page callbacks
// -----------------------------------------------------------------------------


/**
 * Wildcard loader callback for %_entityaspect_entity.
 *
 * Unfortunately, we cannot just use entity_load(), because the arguments are
 * in the wrong order.
 *
 * Also we need the leading underscore, because otherwise we would nameclash
 * with hook_entity_load().
 *
 * @param int $etid
 *   The entity id
 * @param string $entity_type
 *   The entity type
 */
function _entityaspect_entity_load($etid, $entity_type) {
  return entity_load($entity_type, $etid);
}


/**
 * Access callback for $route
 *
 * @param int $etid
 *   The entity id
 * @param string $entity_type
 *   The entity type
 * @param string $route
 *   The route, e.g. taxonomy/term/%taxonomy_term
 *
 * @return boolean
 *   TRUE, if access is granted
 */
function entityaspect_page_access($entity_type, $entity, $route) {
  return entityaspect_page_info($entity_type, $entity, $route)->access();
}


/**
 * Title callback for $route
 *
 * @param int $etid
 *   The entity id
 * @param string $entity_type
 *   The entity type
 * @param string $route
 *   The route, e.g. taxonomy/term/%taxonomy_term
 *
 * @return string
 *   The title
 */
function entityaspect_page_title($entity_type, $entity, $route) {
  return entityaspect_page_info($entity_type, $entity, $route)->title();
}


/**
 * Page callback for $route
 *
 * @param int $etid
 *   The entity id
 * @param string $entity_type
 *   The entity type
 * @param string $route
 *   The route, e.g. taxonomy/term/%taxonomy_term
 *
 * @return string
 *   The title
 */
function entityaspect_page($entity_type, $entity, $route) {
  return entityaspect('pageInfoCache')->page($entity_type, $entity, $route);
}


// Static cache stuff
// -----------------------------------------------------------------------------


/**
 * Get information collected from
 *   hook_entityaspect_page__{$entity_type}() and
 *   hook_entityaspect_page()
 *
 * @param stdClass $entity
 *   The entity object
 * @param string $route
 *   The route for the entity aspect page, e.g. taxonomy/term/% or
 *   taxonomy/term/%/about
 *
 * @return entityaspect_PageWrapper
 *   Object that implements access, title and page callback.
 */
function entityaspect_page_info($entity_type, $entity, $route) {
  return entityaspect('pageInfoCache')->pageInfo($entity_type, $entity, $route);
}


function _entityaspect_page_info_build($entity_type, $entity, $route) {

  $info = array();
  $info_tmp = array();
  $api = new entityaspect_InjectedAPI_hookEntityAspectPage($info_tmp);
  if (preg_match('#^[a-zA-Z0-9_]+$#', $entity_type)) {
    // $entity_type is a valid function suffix.
    // Try the type-specific hook.
    foreach (module_implements('entityaspect_page__' . $entity_type) as $module) {
      $f = $module . '_entityaspect_page__' . $entity_type;
      $info_tmp = array('override' => 0, 'module' => $module);
      $f($api, $entity, $route);
      if (!isset($info['override']) || $info_tmp['override'] > $info['override']) {
        if (!empty($info_tmp['access']) || strlen(@$info_tmp['title'])) {
          $info = $info_tmp;
        }
      }
    }
  }

  // Try the generic hook that goes for all entity types.
  foreach (module_implements('entityaspect_page') as $module) {
    $f = $module . '_entityaspect_page';
    $info_tmp = array('override' => 0, 'module' => $module);
    $f($entity_type, $entity, $route, $api);
    if (!isset($info['override']) || $info_tmp['override'] > $info['override']) {
      if (!empty($info_tmp['access']) || @strlen($info_tmp['title'])) {
        $info = $info_tmp;
      }
    }
  }
  $info['access'] = @$info['access'] && entity_access('view', $entity_type, $entity);
  $info += array(
    'render as page' => TRUE,
    'tab' => TRUE,
    'weight' => 0,
  );
  return new entityaspect_PageInfo($info, $entity_type, $entity, $route);
}


// Static registry cache
// -----------------------------------------------------------------------------


function entityaspect($key) {
  return entityaspect_registry()->get($key);
}


function entityaspect_registry() {
  static $registry;
  if (!isset($registry)) {
    // $config = variable_get('entityaspect', array());
    $config = array();
    $factory = new entityaspect_ServiceFactory($config);
    $registry = new entityaspect_ServiceRegistry($factory);
  }
  return $registry;
}
