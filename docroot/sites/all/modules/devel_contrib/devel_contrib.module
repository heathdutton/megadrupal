<?php
/**
 * @file devel_contrib.module
 * Useful devel things related to contrib modules.
 */

/**
 * Implements hook_menu().
 */
function devel_contrib_menu() {
  $items = array();

  // Core-ish stuff.

  // Devel tab on Field UI bundle pages.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable']) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Extract path information from the bundle.
          $path = $bundle_info['admin']['path'];
          // Different bundles can appear on the same path (e.g. %node_type and
          // %comment_node_type). To allow field_ui_menu_load() to extract the
          // actual bundle object from the translated menu router path
          // arguments, we need to identify the argument position of the bundle
          // name string ('bundle argument') and pass that position to the menu
          // loader. The position needs to be casted into a string; otherwise it
          // would be replaced with the bundle name string.
          if (isset($bundle_info['admin']['bundle argument'])) {
            $bundle_arg = $bundle_info['admin']['bundle argument'];
            $bundle_pos = (string) $bundle_arg;
          }
          else {
            $bundle_arg = $bundle_name;
            $bundle_pos = '0';
          }

          $items["$path/devel"] = array(
            'title' => 'Devel',
            'page callback' => 'devel_contrib_field_info_page',
            'page arguments' => array($entity_type, $bundle_arg),
            'access arguments' => array('access devel information'),
            'type' => MENU_LOCAL_TASK,
            'weight' => 10,
            'file' => 'devel_contrib.pages.inc',
          );
        }
      }
    }
  }

  $items['devel/permissions/info'] = array(
    'title' => 'Permissions info',
    'description' => 'Permissions info.',
    'page callback' => 'devel_contrib_permissions_info_page',
    'access arguments' => array('access devel information'),
    'menu_name' => 'devel',
    'weight' => 10,
    'file' => 'devel_contrib.pages.inc',
  );

  // Contrib proper.

  if (module_exists('token')) {
    $items['devel/token/info'] = array(
      'title' => 'Tokens',
      'description' => 'Tokens info.',
      'page callback' => 'devel_contrib_token_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('libraries')) {
    $items['devel/libraries/info'] = array(
      'title' => 'Libraries info',
      'description' => 'Libraries info.',
      'page callback' => 'devel_contrib_info_page',
      'page arguments' => array(array('libraries_info' => 'Libraries')),
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('ctools')) {
    $items['devel/ctools/info'] = array(
      'title' => 'CTools plugins',
      'description' => 'View CTools data.',
      'page callback' => 'devel_contrib_ctools_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('views')) {
    $items['devel/views/info'] = array(
      'title' => 'Views data',
      'description' => 'View Views data.',
      'page callback' => 'devel_contrib_views_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
    $items['admin/structure/views/view/%views_ui_cache/devel'] = array(
      'title' => 'Devel',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'devel_contrib_views_devel_page',
      'page arguments' => array(4),
      'access callback' => 'user_access',
      'access arguments' => array('access devel information'),
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('entity')) {
    $items['devel/entity-metadata/info'] = array(
      'title' => 'Entity metadata',
      'description' => 'View Entity API metadata.',
      'page callback' => 'devel_contrib_entity_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('views_bulk_operations')) {
    $items['devel/vbo/info'] = array(
      'title' => 'Views Bulk Operations data',
      'description' => 'Views Bulk Operations data.',
      'page callback' => 'devel_contrib_vbo_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('features')) {
    $items['devel/features/info'] = array(
      'title' => 'Features components',
      'description' => 'Features components.',
      'page callback' => 'devel_contrib_features_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('og')) {
    $items['devel/og/info'] = array(
      'title' => 'Organic Groups info',
      'description' => 'Organic Groups info.',
      'page callback' => 'devel_contrib_og_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('commerce_order')) {
    $items['devel/commerce/order/states'] = array(
      'title' => 'Commerce order states and statuses',
      'description' => 'List of commerce order states and statuses.',
      'page callback' => 'devel_contrib_commerce_order_states_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('commerce_checkout')) {
    $items['devel/commerce/checkout-panes'] = array(
      'title' => 'Commerce checkout panes',
      'description' => 'List of commerce chenckout pages.',
      'page callback' => 'devel_contrib_commerce_checkout_panes_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('flag')) {
    $items['devel/flag/info'] = array(
      'title' => 'Flag info',
      'description' => 'View Flag info.',
      'page callback' => 'devel_contrib_flag_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('services')) {
    $items['devel/services/info'] = array(
      'title' => 'Services',
      'description' => 'Services information.',
      'page callback' => 'devel_contrib_services_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('clients')) {
    $items['devel/clients'] = array(
      'title' => 'Clients',
      'description' => 'Clients information.',
      'page callback' => 'devel_contrib_clients_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('migrate')) {
    $items['devel/migrate/info'] = array(
      'title' => 'Migrations',
      'description' => 'Migrate information.',
      'page callback' => 'devel_contrib_migrate_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('facetapi')) {
    $items['devel/facetapi/info'] = array(
      'title' => 'Facet API info',
      'description' => 'Facet API information.',
      'page callback' => 'devel_contrib_facetapi_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('entity_operations')) {
    $items['devel/entity_operations/info'] = array(
      'title' => 'Entity operations info',
      'description' => 'Entity operations info.',
      'page callback' => 'devel_contrib_entity_operations_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  if (module_exists('remote_entity')) {
    $items['devel/remote_entity/info'] = array(
      'title' => 'Remote entity info',
      'description' => 'Remote entity info.',
      'page callback' => 'devel_contrib_remote_entity_info_page',
      'access arguments' => array('access devel information'),
      'menu_name' => 'devel',
      'weight' => 10,
      'file' => 'devel_contrib.pages.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter(): field_ui_field_overview_form
 *
 * Add an extra column to Field UI admin forms to show the feature that a field
 * is exported to, if any.
 */
function devel_contrib_form_field_ui_field_overview_form_alter(&$form, &$form_state, $form_id) {
  if (module_exists('features')) {
    // Get the list of fields in features.
    $components_map = features_get_component_map('field_instance');
    foreach ($components_map as $component_name => $feature) {
      list($entity_type, $bundle_name, $field_name) = explode('-', $component_name);
      // Skip components that are not relevant to this form.
      if ($form['#entity_type'] != $entity_type) {
        continue;
      }
      if ($form['#bundle'] != $bundle_name) {
        continue;
      }
      if (!isset($form['fields'][$field_name])) {
        continue;
      }

      // Add a column for an exported field's feature.
      $feature_name = $feature[0];
      $form['fields'][$field_name]['features'] = array(
        '#markup' => l($feature_name, 'admin/structure/features/' . $feature_name),
      );

    }

    // Now fill in a blank cell for all other rows.
    foreach (element_children($form['fields']) as $field_name) {
      switch ($form['fields'][$field_name]['#row_type']) {
        case 'field':
          if (!isset($form['fields'][$field_name]['features'])) {
            $form['fields'][$field_name]['features'] = array(
              '#markup' => t('Not exported'),
            );
          }
          break;
        case 'extra_field':
          $form['fields'][$field_name]['features'] = array();
          break;
        case 'add_new_field':
          $form['fields'][$field_name]['features'] = array();
          break;
      }
    }

    // Add the header for our column.
    $form['fields']['#header'][] = t('Feature');
  }
}
