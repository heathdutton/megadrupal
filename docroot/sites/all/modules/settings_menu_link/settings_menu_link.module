<?php
/**
 * @file
 * Main hooks and functions for settings_menu_link.module.
 */

/**
 * Implements hook_menu().
 */
function settings_menu_link_menu() {
  $items = array();
  $items['admin/structure/menu/manage/%menu/add_settings_menu_link'] = array(
    'title' => 'Add settings link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_edit_item', 'add', NULL, 4),
    'access arguments' => array('administer settings menu link'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'menu.admin.inc',
    'file path' => drupal_get_path('module', 'menu'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function settings_menu_link_permission() {
  return array(
    'administer settings menu link' => array(
      'title' => t('administer settings menu link'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function settings_menu_link_theme() {
  return array(
    'settings_menu_link_overview_page' => array(
      'variables' => array('blocks' => NULL),
      'file' => 'settings_menu_link.overview.inc',
    ),
    'settings_menu_link_overview_block' => array(
      'variables' => array('title' => NULL, 'description' => NULL, 'content' => NULL),
      'file' => 'settings_menu_link.overview.inc',
    ),
    'settings_menu_link_overview_block_content' => array(
      'variables' => array('items' => NULL),
      'file' => 'settings_menu_link.overview.inc',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 *
 * Add our setting menu links.
 * Note: This does override existing paths.
 */
function settings_menu_link_menu_alter(&$items) {
  // Query for the items that we are responsible for.
  $results = db_select('menu_links')
    ->fields('menu_links')
    ->condition('module', 'settings_menu_link')
    ->execute()
    ->fetchAll();
  foreach ($results as $result) {
    $item = array(
      'title' => $result->link_title,
      'page callback' => 'settings_menu_link_overview',
      'access callback' => 'settings_menu_link_overview_access',
      'access arguments' => array($result->link_path),
      'file' => 'settings_menu_link.overview.inc',
      'file path' => drupal_get_path('module', 'settings_menu_link'),
      'type' => MENU_CALLBACK,
    );
    $items[$result->link_path] = $item;
  }
}

/**
 * Access callback.
 *
 * Decides if we may see the overview page.
 */
function settings_menu_link_overview_access($path) {

  // Administrators have access on all pages. Difficult to maintain otherwise.
  if ($admin_access = user_access('administer settings menu link')) {
    return $admin_access;
  }

  // Avoid loop and run a query (and not via menu_get_item).
  $parent = db_select('menu_links')
    ->fields('menu_links')
    ->condition('module', 'settings_menu_link')
    ->condition('router_path', $path)
    ->execute()
    ->fetchAssoc();
  $parent['tab_root'] = NULL;
  $parent['path'] = NULL;
  $content = settings_menu_link_menu_block($parent);
  return (empty($content)?FALSE:TRUE);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function settings_menu_link_form_menu_edit_item_alter(&$form, &$form_state) {

  $item =& $form_state['build_info']['args'][1];

  // Determine if we need to alter the form.
  $is_settings_menu_link = FALSE;
  // Is this the add link for out item?
  if (arg(5) == 'add_settings_menu_link') {
    $is_settings_menu_link = TRUE;
  }
  elseif (!empty($form['module']['#value']) && $form['module']['#value'] == 'settings_menu_link') {
    $is_settings_menu_link = TRUE;
  }

  // We should alter the form.
  if ($is_settings_menu_link) {

    // Claim the module column.
    $form['module']['#value'] = 'settings_menu_link';

    // Add better description, for this case.
    $form['link_path']['#description'] = t('The path for this settings menu link. The overview page of the childeren is rendered at this path. Must be an path that not exists or it will be overridden.');
    $form['description']['#description'] = t('Shown when hovering over the link and at the top of the overview page.');

    // Not sure about this, but why shoud you expand this?
    $form['expanded']['#access'] = FALSE;

    // Override the default validate.
    foreach ($form['#validate'] as $key => $callback) {
      if ($callback == 'menu_edit_item_validate') {
        $form['#validate'][$key] = 'settings_menu_link_edit_item_validate';
      }
    }

    // On edit we want to be able to edit the path.
    if (!empty($form['_path'])) {
      unset($form['_path']);
      $path = $item['link_path'];
      if (isset($item['options']['query'])) {
        $path .= '?' . drupal_http_build_query($item['options']['query']);
      }
      if (isset($item['options']['fragment'])) {
        $path .= '#' . $item['options']['fragment'];
      }
      $form['link_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Path'),
        '#maxlength' => 255,
        '#default_value' => $path,
        '#description' => t('The path for this menu link. This can be an internal Drupal path such as %add-node or an external URL such as %drupal. Enter %front to link to the front page.', array('%front' => '<front>', '%add-node' => 'node/add', '%drupal' => 'http://drupal.org')),
        '#required' => TRUE,
      );
      $form['actions']['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#access' => $item['mlid'],
        '#submit' => array('menu_item_delete_submit'),
        '#weight' => 10,
      );
    }

    // Add our submit callback, so that we can act upon it.
    $form['#submit'][] = 'settings_menu_link_edit_item_submit';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add delete link to operations.
 * Or don't show the operations.
 */
function settings_menu_link_form_menu_overview_form_alter(&$form, &$form_state) {
  if ($children = element_children($form)) {
    foreach ($children as $child) {
      if (substr($child, 0, 5) == 'mlid:') {
        $item =& $form[$child];
        if ($item['#item']['module'] == 'settings_menu_link') {
          if (!user_access('administer settings menu link')) {
            $item['operations'] = array();
          }
          else {
            $item['operations']['delete'] = array('#type' => 'link', '#title' => t('delete'), '#href' => 'admin/structure/menu/item/' . $item['#item']['mlid'] . '/delete');
          }
        }
      }
    }
  }
}
/**
 * Validate callback for form 'menu_edit_item'.
 *
 * Mostly copied from menu_edit_item_validate.
 * We just need another way of testing the path.
 */
function settings_menu_link_edit_item_validate($form, &$form_state) {
  $item = &$form_state['values'];
  $normal_path = drupal_get_normal_path($item['link_path']);
  if ($item['link_path'] != $normal_path) {
    drupal_set_message(t('The menu system stores system paths only, but will use the URL alias for display. %link_path has been stored as %normal_path', array('%link_path' => $item['link_path'], '%normal_path' => $normal_path)));
    $item['link_path'] = $normal_path;
  }
  if (url_is_external($item['link_path'])) {
    form_set_error('link_path', t("The path '@link_path' is an external path. We cannot render overview pages on an external path.", array('@link_path' => $item['link_path'])));
  }
  elseif (!trim($item['link_path']) || !preg_match('/[0-9a-z][\/\%a-z0-9_-]+/i', $item['link_path'])) {
    form_set_error('link_path', t("The path '@link_path' is invalid.", array('@link_path' => $item['link_path'])));
  }
}

/**
 * Submit callback for form 'menu_edit_item'.
 */
function settings_menu_link_edit_item_submit($form, &$form_state) {

  // We need to rebuild the menu, because we not only add/edit a menu item,
  // we also add a page (The overview page).
  menu_rebuild();
}


/**
 * Provide a single block on the settings overview page.
 *
 * @param $item
 *   The menu item to be displayed.
 *
 * Most of it is a copy from system_admin_menu_block.
 */
function settings_menu_link_menu_block($item) {
  $cache = &drupal_static(__FUNCTION__, array());
  // If we are calling this function for a menu item that corresponds to a
  // local task (for example, admin/tasks), then we want to retrieve the
  // parent item's child links, not this item's (since this item won't have
  // any).
  if ($item['tab_root'] != $item['path']) {
    $item = menu_get_item($item['tab_root_href']);
  }

  if (!isset($item['mlid'])) {
    $item += db_select('menu_links')
        ->fields('menu_links')
        ->condition('router_path', $item['path'])
        ->execute()
        ->fetchAssoc();
  }

  if (isset($cache[$item['mlid']])) {
    return $cache[$item['mlid']];
  }

  $content = array();
  $query = db_select('menu_links', 'ml', array('fetch' => PDO::FETCH_ASSOC));
  $query->join('menu_router', 'm', 'm.path = ml.router_path');
  $query
    ->fields('ml')
    // Weight should be taken from {menu_links}, not {menu_router}.
    ->fields('m', array_diff(drupal_schema_fields_sql('menu_router'), array('weight')))
    ->condition('ml.plid', $item['mlid'])
    ->condition('ml.menu_name', $item['menu_name'])
    ->condition('ml.hidden', 0);

  foreach ($query->execute() as $link) {
    _menu_link_translate($link);
    if ($link['access']) {
      // The link description, either derived from 'description' in
      // hook_menu() or customized via menu module is used as title attribute.
      if (!empty($link['localized_options']['attributes']['title'])) {
        $link['description'] = $link['localized_options']['attributes']['title'];
        unset($link['localized_options']['attributes']['title']);
      }
      // Prepare for sorting as in function _menu_tree_check_access().
      // The weight is offset so it is always positive, with a uniform 5-digits.
      $key = (50000 + $link['weight']) . ' ' . drupal_strtolower($link['title']) . ' ' . $link['mlid'];
      $content[$key] = $link;
    }
  }
  ksort($content);
  $cache[$item['mlid']] = $content;
  return $content;
}