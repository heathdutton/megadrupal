<?php

/**
 * @file
 * tips_tooltipster.module
 */

// Default library location.
define('TIPS_TOOLTIPSTER_LIBRARY_PATH', 'sites/all/libraries/tooltipster');

/**
 * Implements hook_library().
 */
function tips_tooltipster_library() {
  $libraries['tooltipster'] = array(
    'title' => 'Tooltipster',
    'website' => '',
    'version' => array(),
    'js' => array(
      TIPS_TOOLTIPSTER_LIBRARY_PATH . '/js/jquery.tooltipster.min.js' => array(
        'scope' => 'header',
      ),
    ),
    'css' => array(
      TIPS_TOOLTIPSTER_LIBRARY_PATH . '/css/tooltipster.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      TIPS_TOOLTIPSTER_LIBRARY_PATH . '/css/themes/tooltipster-light.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      TIPS_TOOLTIPSTER_LIBRARY_PATH . '/css/themes/tooltipster-noir.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      TIPS_TOOLTIPSTER_LIBRARY_PATH . '/css/themes/tooltipster-punk.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      TIPS_TOOLTIPSTER_LIBRARY_PATH . '/css/themes/tooltipster-shadow.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_tips_info().
 */
function tips_tooltipster_tips_info() {
  // Define title & default settings.
  $tips['tooltipster'] = array(
    'title' => t('Tooltipster'),
    'library' => 'tooltipster',
    'settings' => array(
      'animation' => 'fade',
      'delay' => 200,
      'theme' => 'tooltipster-default',
    ),
    'content' => 'option',
    'content_option' => 'content',
  );

  return $tips;
}

/**
 * Per instance form settings.
 */
function tips_tooltipster_settings_form() {
  $form['animation'] = array(
    '#type' => 'textfield',
    '#title' => t('Animation'),
    '#description' => t('Determines how the tooltip will animate in and out. Feel free to modify or create custom transitions in the tooltipster.css file. 
      In IE9 and 8, all animations default to a JavaScript generated, fade animation. Default: fade'),
    '#default_value' => 'fade',
    '#value_type' => 'string',
  );
  $form['arrow'] = array(
    '#type' => 'select',
    '#title' => t('Arrow'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Adds the "speech bubble arrow" to the tooltip. Default: true'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['arrowColor'] = array(
    '#type' => 'textfield',
    '#title' => t('Arrow Color'),
    '#description' => t('Select a specific color for the "speech bubble arrow". Default: will inherit the tooltips background color'),
    '#default_value' => '',
    '#value_type' => 'string',
  );
  $form['autoClose'] = array(
    '#type' => 'select',
    '#title' => t('Auto Close'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If autoClose is set to false, the tooltip will never close unless you call the close method yourself. Default: true'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['content'] = array(
    '#type' => 'textfield',
    '#title' => t('Content'),
    '#description' => t('If set, this will override the content of the tooltip. Default: null'),
    '#default_value' => NULL,
    '#value_type' => 'string',
  ); 
  $form['contentAsHTML'] = array(
    '#type' => 'select',
    '#title' => t('Content As HTML'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If the content of the tooltip is provided as a string, it is displayed as plain text by default. 
      If this content should actually be interpreted as HTML, set this option to true. Default: false'),
    '#default_value' => 0,
    '#value_type' => 'boolean',
  );
  $form['contentCloning'] = array(
    '#type' => 'select',
    '#title' => t('Content Cloning'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If you provide a jQuery object to the option, this sets if it is a clone of this object that should actually be used. Default: true'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Delay'),
    '#description' => t('Delay how long it takes (in milliseconds) for the tooltip to start animating in. Default: 200'),
    '#default_value' => 200,
    '#value_type' => 'int',
  );
  $form['fixedWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Fixed Width'),
    '#description' => t('Set a fixed width for the tooltip. The tooltip will always be a consistent width - no matter your content size. Default: 0 (auto width)'),
    '#default_value' => 0,
    '#value_type' => 'int',
  );
  $form['maxWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Width'),
    '#description' => t('Set a max width for the tooltip. If the tooltip ends up being smaller than the set max width, 
      the tooltips width will be set automatically. Default: 0 (no max width)'),
    '#default_value' => 0,
    '#value_type' => 'int',
  );
  $form['icon'] = array(
    '#type' => 'textfield',
    '#title' => t('Icon'),
    '#description' => t('If using the iconDesktop or iconTouch options, this sets the content for your icon. Default: (?)'),
    '#default_value' => '(?)',
    '#value_type' => 'string',
  );
  $form['iconCloning'] = array(
    '#type' => 'select',
    '#title' => t('Icon Cloning'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If you provide a jQuery object to the icon option, this sets if it is a clone of this object that should actually be used. Default: true'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['iconDesktop'] = array(
    '#type' => 'select',
    '#title' => t('Icon Desktop'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Generate an icon next to your content that is responsible for activating the tooltip on non-touch devices. Default: false'),
    '#default_value' => 0,
    '#value_type' => 'boolean',
  );
  $form['iconTheme'] = array(
    '#type' => 'textfield',
    '#title' => t('Icon Theme'),
    '#description' => t('If using the iconDesktop or iconTouch options, this sets the class on the icon (used to style the icon). Default: tooltipster-icon'),
    '#default_value' => 'tooltipster-icon',
    '#value_type' => 'string',
  );
  $form['iconTouch'] = array(
    '#type' => 'select',
    '#title' => t('Icon Touch'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Generate an icon next to your content that is responsible for activating the tooltip on touch devices (tablets, phones, etc). Default: false'),
    '#default_value' => 0,
    '#value_type' => 'boolean',
  );
  $form['interactive'] = array(
    '#type' => 'select',
    '#title' => t('Interactive'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Give users the possibility to interact with the tooltip. Unless autoClose is set to false, 
      the tooltip will still close if the user moves away from or clicks out of the tooltip. Default: false'),
    '#default_value' => 0,
    '#value_type' => 'boolean',
  );
  $form['interactiveTolerance'] = array(
    '#type' => 'textfield',
    '#title' => t('Interactive Tolerance'),
    '#description' => t('If the tooltip is interactive and activated by a hover event, set the amount of time (milliseconds) allowed for a user to hover off of 
      the tooltip activator (origin) on to the tooltip itself - keeping the tooltip from closing. Default: 350'),
    '#default_value' => 350,
    '#value_type' => 'int',
  );
  $form['offsetX'] = array(
    '#type' => 'textfield',
    '#title' => t('offsetX'),
    '#description' => t('Offsets the tooltip (in pixels) farther left/right from the origin. Default: 0'),
    '#default_value' => 0,
    '#value_type' => 'int',
  );
  $form['offsetY'] = array(
    '#type' => 'textfield',
    '#title' => t('offsetY'),
    '#description' => t('Offsets the tooltip (in pixels) farther up/down from the origin. Default: 0'),
    '#default_value' => 0,
    '#value_type' => 'int',
  );
  $form['onlyOne'] = array(
    '#type' => 'select',
    '#title' => t('Only One'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If true, only one tooltip will be allowed to be active at a time. Non-autoclosing tooltips will not be closed though. Default: false'),
    '#default_value' => 0,
    '#value_type' => 'boolean',
  );
  $form['position'] = array(
    '#type' => 'select',
    '#title' => t('Position'),
    '#options' => array(
      'right' => t('Right'),
      'left' => t('Left'),
      'top' => t('Top'),
      'top-right' => t('Top Right'),
      'top-left' => t('Top Left'),
      'bottom' => t('Bottom'),
      'bottom-right' => t('Bottom Right'),
      'bottom-left' => t('Bottom Left'),
    ),
    '#description' => t('If true, only one tooltip will be allowed to be active at a time. Non-autoclosing tooltips will not be closed though. Default: false'),
    '#default_value' => 'top',
    '#value_type' => 'string',
  );
  $form['positionTracker'] = array(
    '#type' => 'select',
    '#title' => t('Position Tracker'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Will reposition the tooltip if the origin moves. As this option may have an impact on performance, 
      we suggest you enable it only if you need to. Default: false'),
    '#default_value' => 0,
    '#value_type' => 'boolean',
  );
  $form['speed'] = array(
    '#type' => 'textfield',
    '#title' => t('Speed'),
    '#description' => t('Set the speed of the animation. Default: 350'),
    '#default_value' => 350,
    '#value_type' => 'int',
  );
  $form['timer'] = array(
    '#type' => 'textfield',
    '#title' => t('Timer'),
    '#description' => t('How long the tooltip should be allowed to live before closing. Default: 0 (disabled)'),
    '#default_value' => 0,
    '#value_type' => 'int',
  );
  $form['theme'] = array(
    '#type' => 'textfield',
    '#title' => t('Theme'),
    '#description' => t('Set the theme used for your tooltip. Default: tooltipster-default'),
    '#default_value' => 'tooltipster-default',
    '#value_type' => 'string',
  );
  $form['touchDevices'] = array(
    '#type' => 'select',
    '#title' => t('Touch Devices'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If set to false, tooltips will not show on pure-touch devices, unless you open them yourself with the show method. 
      Touch gestures on devices which also have a mouse will still open the tooltips though. Default: true'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['trigger'] = array(
    '#type' => 'select',
    '#title' => t('Trigger'),
    '#options' => array(
      'hover' => t('Hover'),
      'click' => t('Click'),
      'custom' => t('Custom'),
    ),
    '#description' => t('Set how tooltips should be activated and closed. See the advanced section to learn how to build custom triggers. Default: hover'),
    '#default_value' => 'hover',
    '#value_type' => 'string',
  );
  $form['updateAnimation'] = array(
    '#type' => 'select',
    '#title' => t('Update Animation'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If a tooltip is open while its content is updated, play a subtle animation when the content changes. Default: true'),
    '#default_value' => 1,
    '#value_type' => 'int',
  );  

  return $form;
}
