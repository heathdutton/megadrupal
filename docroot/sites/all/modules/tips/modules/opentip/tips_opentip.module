<?php

/**
 * @file
 * tips_opentip.module
 */

// Default library location.
define('TIPS_OPENTIP_LIBRARY_PATH', 'sites/all/libraries/opentip');

/**
 * Implements hook_library().
 *
 * @todo, Allow excanvas (IE support) & alternatives.
 */
function tips_opentip_library() {
  $libraries['opentip'] = array(
    'title' => 'Opentip',
    'website' => 'http://www.opentip.org',
    'version' => array(),
    'js' => array(
      TIPS_OPENTIP_LIBRARY_PATH . '/downloads/opentip-jquery.min.js' => array(
        'scope' => 'header',
      ),
    ),
    'css' => array(
      TIPS_OPENTIP_LIBRARY_PATH . '/css/opentip.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_tips_info().
 */
function tips_opentip_tips_info() {
  // Define title & default settings.
  $tips['opentip'] = array(
    'title' => t('Opentip'),
    'library' => 'opentip',
    'settings' => array(
      'animation' => 'fade',
      'autoOffset' => TRUE,
      'shadow' => TRUE,
    ),
    'content' => 'param',
    'content_param' => '',
    'content_param_first' => TRUE,
  );

  return $tips;
}

/**
 * Per instance form settings.
 */
function tips_opentip_settings_form() {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('You can pass the title in the constructor, or as option.'),
    '#default_value' => NULL,
    '#value_type' => 'string',
  );
  $form['escapeTitle'] = array(
    '#type' => 'select',
    '#title' => t('Escape Title'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Whether the provided title should be html escaped.'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['escapeContent'] = array(
    '#type' => 'select',
    '#title' => t('Escape Content'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Whether the content should be html escaped.'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['className'] = array(
    '#type' => 'textfield',
    '#title' => t('Class Name'),
    '#description' => t('The class name of the style. Opentip will get this class prefixed with style-.'),
    '#default_value' => 'standard',
    '#value_type' => 'string',
  );
  $form['stem'] = array(
    '#type' => 'select',
    '#title' => t('Stem'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Defines the stem.'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Delay'),
    '#description' => t('The delay after which the opentip should be shown in seconds. If null Opentip decides which time to use (0.2 for mouseover, 0 for click).'),
    '#default_value' => NULL,
    '#value_type' => 'float',
  );
  $form['hideDelay'] = array(
    '#type' => 'textfield',
    '#title' => t('Hide Delay'),
    '#description' => t('The delay after which an opentip should be hidden in seconds.'),
    '#default_value' => 0.1,
    '#value_type' => 'float',
  );
  $form['fixed'] = array(
    '#type' => 'select',
    '#title' => t('Fixed'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If the target is not null, elements are always fixed. 
      Fixed Opentips without target appear at the position of the cursor but don’t follow the mouse when visible.'),
    '#default_value' => 0,
    '#value_type' => 'boolean',
  );
  $form['showOn'] = array(
    '#type' => 'textfield',
    '#title' => t('Show On'),
    '#description' => t('The tooltip will show when created null if you want to handle it yourself (Opentip will not register any events).'),
    '#default_value' => 'mouseover',
    '#value_type' => 'string',
  );
  $form['hideTrigger'] = array(
    '#type' => 'select',
    '#title' => t('Hide Trigger'),
    '#options' => array(
      'trigger' => t('Trigger'),
      'tip' => t('Tip'),
      'target' => t('Target'),
      'closeButton' => t('Close Button'),
    ),
    '#description' => t('This is just a shortcut, and will be added to the hideTriggers array.'),
    '#default_value' => 'trigger',
    '#value_type' => 'string',
  );
  $form['hideOn'] = array(
    '#type' => 'textfield',
    '#title' => t('Hide On'),
    '#description' => t('If null Opentip decides which event is best based on the hideTrigger.'),
    '#default_value' => NULL,
    '#value_type' => 'string',
  );
  $form['removeElementsOnHide'] = array(
    '#type' => 'select',
    '#title' => t('Remove Elements On Hide'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Removes all HTML elements when the tooltip is hidden. this can be useful when you generate lots of Opentips during a long period.'),
    '#default_value' => 0,
    '#value_type' => 'boolean',
  );
  /*$form['offset'] = array(
    '#type' => 'textfield',
    '#title' => t('Offset'),
    '#description' => t('Additional offset of the tooltip.'),
    '#default_value' => '[0, 0]',
    '#value_type' => 'array',
  );*/
  $form['containInViewport'] = array(
    '#type' => 'select',
    '#title' => t('Contains In Viewport'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Whether the targetJoint/tipJoint should be changed if the tooltip is not in the viewport anymore.'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['autoOffset'] = array(
    '#type' => 'select',
    '#title' => t('Auto Offset'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If set to true, offsets are calculated automatically to position the tooltip (pixels are added if there are stems for example). 
    This should stay true unless you manually position the tooltip.'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['showEffect'] = array(
    '#type' => 'textfield',
    '#title' => t('Show Effect'),
    '#description' => t('Will be added as class to the Opentip element with "show-effect-" as prefix.'),
    '#default_value' => 'appear',
    '#value_type' => 'string',
  );
  $form['hideEffect'] = array(
    '#type' => 'textfield',
    '#title' => t('Hide Effect'),
    '#description' => t('Will be added as class to the Opentip element with "hide-effect-" as prefix.'),
    '#default_value' => 'fade',
    '#value_type' => 'string',
  );
  $form['showEffectDuration'] = array(
    '#type' => 'textfield',
    '#title' => t('Show Effect Duration'),
    '#default_value' => 0.3,
    '#value_type' => 'float',
  );
  $form['hideEffectDuration'] = array(
    '#type' => 'textfield',
    '#title' => t('Hide Effect Duration'),
    '#default_value' => 0.2,
    '#value_type' => 'float',
  );
  $form['stemLength'] = array(
    '#type' => 'textfield',
    '#title' => t('Stem Length'),
    '#default_value' => 5,
    '#value_type' => 'int',
  );
  $form['stemBase'] = array(
    '#type' => 'textfield',
    '#title' => t('Stem Base'),
    '#default_value' => 8,
    '#value_type' => 'int',
  );
  /*$form['tipJoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Tip Joint'),
    '#default_value' => 'top left',
    '#value_type' => 'string',
  );*/
  $form['target'] = array(
    '#type' => 'textfield',
    '#title' => t('Target'),
    '#default_value' => NULL,
    '#value_type' => 'string',
  );
  $form['targetJoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Target Joint'),
    '#default_value' => NULL,
    '#value_type' => 'string',
  );
  $form['cache'] = array(
    '#type' => 'select',
    '#title' => t('Cache'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('If false, the content will be downloaded (or the content function will be executed) every time the tooltip is shown.
      Previously ajaxCache which still works for backwards compatibilty.'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['ajax'] = array(
    '#type' => 'textfield',
    '#title' => t('Ajax'),
    '#description' => t('empty No AJAX, true Opentip uses the href attribute of the trigger element if the trigger element is a link. 
      String An URL to download the content from.'),
    '#default_value' => FALSE,
    '#value_type' => 'string',
  );
  $form['ajaxMethod'] = array(
    '#type' => 'select',
    '#title' => t('Ajax Method'),
    '#options' => array(
      'GET' => t('GET'),
      'POST' => t('POST'),
    ),
    '#description' => t('If false, the content will be downloaded (or the content function will be executed) every time the tooltip is shown.
      Previously ajaxCache which still works for backwards compatibilty.'),
    '#default_value' => 'GET',
    '#value_type' => 'string',
  );
  $form['ajaxErrorMessage'] = array(
    '#type' => 'textfield',
    '#title' => t('Ajax Error Message'),
    '#description' => t('The message displayed when downloading the content with AJAX fails.'),
    '#default_value' => t('There was a problem downloading the content.'),
    '#value_type' => 'string',
  );
  $form['group'] = array(
    '#type' => 'textfield',
    '#title' => t('Group'),
    '#description' => t('You can group opentips together. So when a tooltip shows, it looks if there are others in the same group, and hides them.'),
    '#default_value' => NULL,
    '#value_type' => 'string',
  );
  /*$form['style'] = array(
    '#type' => 'textfield',
    '#title' => t('Style'),
    '#description' => t('If null, Opentip.defaultStyle is used (which is standard if you don’t change it).'),
    '#default_value' => NULL,
    '#value_type' => 'string',
  );
  $form['extends'] = array(
    '#type' => 'textfield',
    '#title' => t('Extends'),
    '#description' => t('Exactly the same as style but used when creating styles because the name fits better.'),
    '#default_value' => NULL,
    '#value_type' => 'string',
  );
  $form['background'] = array(
    '#type' => 'textfield',
    '#title' => t('Background'),
    '#description' => t('The background color of the tip.'),
    '#default_value' => '#fff18f',
    '#value_type' => 'string',
  );
  $form['closeButtonOffset'] = array(
    '#type' => 'textfield',
    '#title' => t('Close Button Offset'),
    '#description' => t('Positive values offset inside the tooltip.'),
    '#default_value' => '[5, 5]',
    '#value_type' => 'array',
  );*/
  $form['closeButtonRadius'] = array(
    '#type' => 'textfield',
    '#title' => t('Close Button Radius'),
    '#description' => t('The little circle that stick out of a tip.'),
    '#default_value' => 7,
    '#value_type' => 'float',
  );
  $form['closeButtonCrossSize'] = array(
    '#type' => 'textfield',
    '#title' => t('Close Button Cross Size'),
    '#description' => t('Size of the cross.'),
    '#default_value' => 4,
    '#value_type' => 'float',
  );
  $form['closeButtonCrossColor'] = array(
    '#type' => 'textfield',
    '#title' => t('Close Button Cross Color'),
    '#description' => t('Size of the cross.'),
    '#default_value' => '#d2c35b',
    '#value_type' => 'string',
  );
  $form['closeButtonCrossLineWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Close Button Cross Line Width'),
    '#description' => t('The stroke width of the cross.'),
    '#default_value' => 1.5,
    '#value_type' => 'float',
  );
  $form['closeButtonLinkOverscan'] = array(
    '#type' => 'textfield',
    '#title' => t('Close Button Link Overscan'),
    '#description' => t('You will most probably never want to change this. It specifies how many pixels the invisible 
      element should be larger than the actual cross.'),
    '#default_value' => 6,
    '#value_type' => 'float',
  );
  $form['borderRadius'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Radius'),
    '#default_value' => 5,
    '#value_type' => 'float',
  );
  $form['borderWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Width'),
    '#default_value' => 1,
    '#value_type' => 'float',
  );
  $form['borderColor'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Color'),
    '#default_value' => '#f2e37b',
    '#value_type' => 'string',
  );
  $form['shadow'] = array(
    '#type' => 'select',
    '#title' => t('Shadow'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#description' => t('Set to false if you dont want a shadow.'),
    '#default_value' => 1,
    '#value_type' => 'boolean',
  );
  $form['shadowBlur'] = array(
    '#type' => 'textfield',
    '#title' => t('Shadow Blur'),
    '#default_value' => 10,
    '#value_type' => 'float',
  );
  /*$form['shadowOffset'] = array(
    '#type' => 'textfield',
    '#title' => t('Shadow Offset'),
    '#default_value' => '[3, 3]',
    '#value_type' => 'float',
  );*/
  $form['shadowColor'] = array(
    '#type' => 'textfield',
    '#title' => t('Shadow Color'),
    '#default_value' => 'rgba(0,0,0,0.1)',
    '#value_type' => 'string',
  );

  return $form;
}
