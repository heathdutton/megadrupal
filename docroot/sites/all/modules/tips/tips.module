<?php

/**
 * @file
 * tips.module
 *
 * TIPS is a library agnostic tooltip management framework.
 */

/**
 * Implements hook_menu().
 */
function tips_menu() {
  // Selectors.
  $items['admin/config/user-interface/tips'] = array(
    'title' => 'Tips',
    'description' => 'Control TIP collections.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tips_settings_form'),
    'access arguments' => array('administer tips'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tips.admin.inc',
  );
  $items['admin/config/user-interface/tips/%/delete'] = array(
    'title' => 'Delete selector',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tips_delete_selector_form', 4),
    'access arguments' => array('administer tips'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tips.admin.inc',
  );

  // Settings groups.
  $items['admin/config/user-interface/tips/settings/add/%'] = array(
    'title' => 'Add settings group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tips_add_settings_group_form', 6),
    'access arguments' => array('administer tips settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tips.admin.inc',
  );
  $items['admin/config/user-interface/tips/settings/%/edit'] = array(
    'title' => 'Edit settings group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tips_form_settings_form', 5),
    'access arguments' => array('administer tips settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tips.admin.inc',
  );
  $items['admin/config/user-interface/tips/settings/%/delete'] = array(
    'title' => 'Delete settings group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tips_delete_settings_group_form', 5),
    'access arguments' => array('administer tips settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tips.admin.inc',
  );

  // Content groups.
  $items['admin/config/user-interface/tips/content/add'] = array(
    'title' => 'Add content group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tips_form_content_form'),
    'access arguments' => array('administer tips content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tips.admin.inc',
  );
  $items['admin/config/user-interface/tips/content/%/edit'] = array(
    'title' => 'Edit content group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tips_form_content_form', 5),
    'access arguments' => array('administer tips content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tips.admin.inc',
  );
  $items['admin/config/user-interface/tips/content/%/delete'] = array(
    'title' => 'Delete content group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tips_delete_content_group_form', 5),
    'access arguments' => array('administer tips content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tips.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tips_permission() {
  return array(
    'administer tips' => array(
      'title' => t('Administer Tips'),
      'description' => t('Administration overview for tooltips.'),
    ),
    'administer tips settings' => array(
      'title' => t('Administer Tips settings'),
      'description' => t('Administrate settings for tooltips.'),
    ),
    'administer tips content' => array(
      'title' => t('Administer Tips content'),
      'description' => t('Administrate content for tooltips.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tips_theme() {
  return array(
    'tips_admin_settings_form' => array(
      'render element' => 'form',
    ),
    'tips_admin_settings_form_fields' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Define TIPS module(s) & their associated libraries.
 */
function tips_info($name = NULL) {
  $tips = &drupal_static(__FUNCTION__);

  if (!isset($tips)) {
    foreach (module_implements('tips_info') as $module) {
      foreach (module_invoke($module, 'tips_info') as $machine_name => $properties) {
        $properties['module'] = $module;
        $tips[$machine_name] = $properties;
      }
    }
  }

  drupal_alter('tips_info', $tips);

  // If Tips name is passed.
  if (isset($tips[$name])) {
    return $tips[$name];
  }

  return $tips;
}

/**
 * Load a tooltip library & default settings.
 *
 * Called for each tips library enabled. Each settings group is bundled with
 * the associated library. @see tips_add.
 */
function tips_load_library($settings) {
  if (is_numeric($settings)) {
    module_load_include('inc', 'tips', 'includes/tips.database');

    $settings = tips_load_settings($settings);
    $library = isset($settings['library']) ? $settings['library'] : '';
  }
  else {
    $library = $settings['library'];
  }

  // Can haz info?
  $tips = tips_info($library);

  // If settings are passed we override defaults.
  if (!empty($settings['settings'])) {
    // Associate tip_id with settings group.
    $tips['id'] = $settings['tip_id'];
    $tips['settings'] = $settings['settings'];
  }

  return $tips;
}

/**
 * Add a tooltip.
 *
 * @param $selector
 *  String HTML selector, normally #id.
 * @param $pages
 *  The pages to add this tip to
 * @param $settings
 *  Array of settings to be associated or id of
 *  settings to load.
 *  array(
 *    'library' => '',
 *    'settings' => array(),
 *  );
 *
 * @param $content
 *  Raw markup or content_id.
 */
function tips_add($selector, $pages, $settings, $content) {
  $pages = preg_replace('/[, ]/', "\n", $pages);
  if ($pages) {
    $path = current_path();
    $path_alias = drupal_get_path_alias($path);
    if (!drupal_match_path($path, $pages) && !drupal_match_path($path_alias, $pages)) {
      return;
    }
  }

  // Load required prerequisite library & settings.
  $settings = tips_load_library($settings);

  if (isset($settings['library'])) {
    drupal_add_library($settings['module'], $settings['library']);

    // Build tooltip content & pass as either
    // a parameter or option.
    tips_build($settings, $content);

    // Correct settings variable type.
    tips_force_type_cast($settings['settings']);

    // Alter settings before display.
    drupal_alter('tips_settings', $settings);

    // Group tooltip settings by selector.
    drupal_add_js(array(
      'tips' => array(
        $selector => array(
          $settings,
        ),
      ),
    ), 'setting');
    // Specifying a scope of 'footer' has bad side-effects on some sites.
    drupal_add_js(drupal_get_path('module', 'tips') . '/js/tips.settings.js');
  }
}

/**
 * Build tooltip content.
 *
 * @todo, Move content location logic to here from tips_add.
 */
function tips_build(&$settings, $content) {
  if (is_numeric($content)) {
    module_load_include('inc', 'tips', 'includes/tips.database');
    $content = tips_load_content($content);
  }

  // Alter settings before display.
  drupal_alter('tips_content', $content, $settings['id']);

  // Replace tokens.
  $token_content = tips_token_replace($content);

  if (isset($settings['content_option'])) {
    // Pass content as an attribute.
    $settings['settings']{$settings['content_option']} = $token_content;
  }
  else {
    // Or we pass content as a param.
    $settings['content_param'] = $token_content;
  }
}

/**
 * Implements hook_page_build().
 *
 * @todo, Provide context for when appropriate to
 * include tooltips.
 */
function tips_page_build(&$page) {
  module_load_include('inc', 'tips', 'includes/tips.database');
  $tooltips = tips_load_all();

  if ($tooltips) {
    foreach ($tooltips as $tooltip) {
      tips_add($tooltip->selector, $tooltip->pages, $tooltip->settings_id, $tooltip->content_id);
    }
  }
}
 
/**
 * Required before tooltip settings are passed, force type cast.
 */
function tips_force_type_cast(&$settings) {
  foreach ($settings as $name => $setting) {
    $type = explode('::', $setting);

    if (isset($type[1])) {
      switch ($type[1]) {
        case 'int':
        case 'integer':
          $settings[$name] = (int)$type[0];
        break;
        case 'float':
          $settings[$name] = (float)$type[0];
        break;
        case 'boolean':
          $settings[$name] = (boolean)$type[0];
        break;
        default:
          $settings[$name] = (string)$type[0];
      }
    }
  }
}

/**
 * Implements hook_filter_info().
 */
function tips_filter_info() {
  $filters['tips_tokens'] = array(
    'title' => t('Tips tokens'),
    'description' => t('The usage of this filter should be restricted to trusted users only as tokens with sensitive data could be exposed.'),
    'process callback' => 'tips_token_replace',
    'cache' => FALSE,
  );

  return $filters;
}

/**
 * Process tokens on render.
 *
 * Note, we are limited to entities assigned to 
 * the current menu item =(.
 */
function tips_token_replace($content) {
  $data = array();
  $options = array();

  $args = arg();
  if (isset($args[1]) && is_numeric($args[1])) {
    $entity = entity_load_single($args[0], $args[1]);
  }
  if (!empty($entity)) {
    $token_type = token_get_entity_mapping('entity', $args[0]);
    $data = array($token_type => $entity);
  }
  return token_replace($content, $data, $options);
}

/**
 * Implements hook_flush_caches().
 */
function tips_flush_caches() {
  return array('cache_tips');
}
