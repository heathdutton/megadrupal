<?php

function face_detection_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#face_detection':
      $output .= '<p>' . t('<a href="@face_detection">Face Detection</a> is a free media and image viewer jQuery plugin. It is easy to use and feature-rich.'
      , array('@face_detection' => 'https://github.com/jaysalvat/jquery.facedetection')) . '</p>';
      $output .= theme('item_list', array(
        'title' => t('Instructions'),
        'type' => 'ol',
        'items' => array(
          t('Add an image field to one of your <a href="@types">content types</a>.', array('@types' => url('admin/structure/types/manage'))),
          t('Select Face Detection for its display setting.'),
        ),
      ));
  }
  return $output;
}

/**
 * Implements hook_library().
 */
function face_detection_library() {
  // face_detection
  $path = drupal_get_path('module', 'face_detection');
  $libraries['face_detection'] = array(
    'title' => 'face_detection',
    'website' => 'https://github.com/jaysalvat/jquery.facedetection',
    'version' => '2011.03.24',
    'js' => array(
      // face_detection itself.
      $path . '/ccv.js' => array(
        'weight' => JS_LIBRARY,
      ),
      $path . '/face.js' => array(
        'weight' => JS_LIBRARY + 1,
      ),
      $path . '/jquery.facedetection.js' => array(
        'weight' => JS_LIBRARY + 2,
      ),
      // The Drupal behavior.
      $path . '/face_detection.js' => array(),
    ),
    'css' => array(
      $path . '/face.css' => array(
        'type' => 'file',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_field_formatter_info().
 */
function face_detection_field_formatter_info() {
  // The straight image with face_detection ontop of it.
  $formatters = array(
    'face_detection' => array(
      'label' => t('Face Detection'),
      // Provides a display ontop of the image field.
      'field types' => array('image'),
      'settings' => array(
        // The Image Style that will provide the preview image.
        'image_style' => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function face_detection_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Provide the image style.
  $image_styles = image_style_options(FALSE);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  // @TODO: Provide some additional options as found from face_detection.
  // http://www.yoxigen.com/face_detection/usage.aspx#options

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function face_detection_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function face_detection_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    // Render each image with a link to the original image.
    $element[$delta] = array(
      '#theme' => 'face_detection_image_formatter',
      '#item' => $item,
      '#path' => $item['uri'],
      '#alt' => $item['alt'],
      '#title' => $item['title'],
    );
    $element[$delta]['#attached']['library'][] = array('face_detection', 'face_detection');
    if (isset($display['settings']['image_style']) && !empty($display['settings']['image_style'])) {
      $element[$delta]['#style_name'] = $display['settings']['image_style'];
    }
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function face_detection_theme() {
  return array(
    'face_detection_image_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'alt' => NULL, 'title' => NULL, 'style_name' => NULL),
    ),
  );
}

/**
 * Returns HTML for the face_detection image formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: The array of element data.
 *   - path: The path of the image to use.
 *   - alt: The alt tag for the image.
 *   - title: The title tag for the image.
 *   - style_name: The name of the image style for the image tag.
 *
 * @ingroup themeable
 */
function theme_face_detection_image_formatter($variables) {
  // Render the image first.
  $output = '';
  $variables['attributes']['class'] = array('face_detection');
  if (isset($variables['style_name']) && !empty($variables['style_name'])) {
    $output = theme('image_style', $variables);
  }
  else {
    $output = theme('image', $variables);
  }

  return $output;
}

