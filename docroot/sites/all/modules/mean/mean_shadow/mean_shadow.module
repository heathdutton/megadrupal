<?php

/*
* Implements hook_menu().
*/

/**
 * @return array
 */
function mean_shadow_menu() {
  $items = array();

  $items['admin/config/mean/shadow'] = array(
    'title'             => 'MEAN Shadow',
    'description'       => '',
    'page callback' => 'drupal_get_form',
    'page arguments'     => array('mean_shadow_settings_form'),
    'access arguments'  => array('administer mean shadow'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/mean_shadow.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mean_shadow_permission() {
  return array(
    'administer mean shadow' => array(
      'title' => t('Administer MEAN Shadow configuration'),
      'description' => t('Configure the settings for MEAN Shadow module.'),
    ),
  );
}

/**
 * Implements hook_user_insert().
 *
 * @param $edit
 * @param $account
 * @param $category
 */
function mean_shadow_user_insert(&$edit, $account, $category) {
  if (mean_shadow_should_shadow('user')) {
    mean_shadow_request('insert', 'user', 'uid', $account);
  }
}

/**
 * Implements hook_user_update().
 *
 * @param $edit
 * @param $account
 * @param $category
 */
function mean_shadow_user_update(&$edit, $account, $category) {
  if (mean_shadow_should_shadow('user')) {
    mean_shadow_request('insert', 'user', 'uid', $account);
  }
}

/**
 * Implements hook_node_insert().
 *
 * @param $node
 */
function mean_shadow_node_insert($node) {
  if (mean_shadow_should_shadow($node->type)) {
    mean_shadow_request('insert', 'node', 'nid', $node);
  }
}

/**
 * Implements hook_node_update().
 *
 * @param $node
 */
function mean_shadow_node_update($node) {
  if (mean_shadow_should_shadow($node->type)) {
    mean_shadow_request('insert', 'node', 'nid', $node);
  }
}

/**
 * @param $type
 * @return mixed
 */
function mean_shadow_should_shadow($type) {
  return variable_get('mean_shadow_entities_' . $type, FALSE);
}

/**
 * @param $action
 * @param $schema
 * @param $key
 * @param $entity
 */
function mean_shadow_request($action, $schema, $key = '', $entity = NULL) {
  static $protocol, $host, $port;

  if (empty($protocol)) {
    $protocol = variable_get('mean_integration_settings_protocol', MEAN_DEFAULT_PROTOCOL);
  }
  if (empty($host)) {
    $host = variable_get('mean_integration_settings_host', MEAN_DEFAULT_ADDRESS);
  }
  if (empty($port)) {
    $port = variable_get('mean_integration_settings_port', MEAN_DEFAULT_PORT);
  }

  if (!empty($protocol) && !empty($host) && !empty($port)) {
    if (is_array($entity)) {
      $entity = json_decode(
        json_encode($entity), FALSE
      );
    }

    // Allow alter before the request
    mean_shadow_invoke_all_request_alter($entity);

    $json = '';
    $parts = array($port, $action, $schema);
    $url = $protocol . '://' . $host . ':' . implode('/', $parts);
    if (!empty($entity)) {

      if (version_compare(phpversion(), '5.4', '<')) {
        //convmap since 0x80 char codes so it takes all multibyte codes (above ASCII 127). So such characters are being "hidden" from normal json_encoding
        mean_shadow_walk_obj($entity, mean_shadow_mb_decode);

        $json = mb_decode_numericentity(json_encode($entity), array (0x80, 0xffff, 0, 0xffff), 'UTF-8');

      }
      else {
        $json = json_encode($entity, JSON_UNESCAPED_UNICODE);
      }


      if ($json !== FALSE) {
        $id = $entity->{$key};

        $parts = array($key, $id);
        $url .= '/' . implode('/', $parts);
      }
    }

    $request_headers = array('Content-Type' => 'application/json');
    drupal_http_request($url, array(
      'headers' => $request_headers,
      'method' => 'POST',
      'data' => $json,
      'max_redirects' => 3,
      'timeout' => 30.0
    ));
  }
}

/**
 * @param $entity
 * @return array|null
 */
function mean_shadow_invoke_all_request_alter($entity) {
  $return = NULL;

  foreach (module_implements('shadow_request_alter') as $name) {
    $function = $name . '_' . 'shadow_request_alter';
    $args = array(&$entity);
    $result = call_user_func_array($function, $args);
    if (isset($result) && is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }

  return $return;
}

/**
 * @param $type
 * @param $id
 * @param $bundle
 * @return array|null
 */
function mean_shadow_invoke_all_drush($type, $id, $bundle) {
  $return = NULL;

  foreach (module_implements('shadow_entities_post_drush') as $name) {
    $function = $name . '_' . 'shadow_entities_post_drush';
    $result = $function($type, $id, $bundle);
    if (isset($result) && is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }

  return $return;
}

/**
 * @param $obj
 * @param $func
 */
function mean_shadow_walk_obj(&$obj, $func) {
  foreach ($obj as &$prop) {
    if (is_string($prop)) {
      $func($prop);
    }
    else if (is_array($prop) || is_object($prop)) {
      mean_shadow_walk_obj($prop, $func);
    }
  }
}

/**
 * @param $prop
 */
function mean_shadow_mb_decode(&$prop) {
  $prop = mb_encode_numericentity($prop, array (0x80, 0xffff, 0, 0xffff), 'UTF-8');
}
