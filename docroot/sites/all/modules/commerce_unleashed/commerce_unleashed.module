<?php

/**
 * @file
 *   commerce_unleashed.module
 */

/**
 * Implements hook_permission().
 */
function commerce_unleashed_permission() {
  return array(
    'administer unleashed' => array(
      'title' => t('Administer Unleashed'),
      'description' => t('Manage settings for the Commerce Unleashed Module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_unleashed_menu() {
  $items = array();

  $items['admin/config/services/unleashed'] = array(
    'title' => 'Unleashed Software API',
    'description' => 'Unleashed Connection Details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_unleashed_settings_form'),
    'file' => 'commerce_unleashed.admin.inc',
    'access arguments' => array('administer unleashed'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function commerce_unleashed_get_signature($request, $key) {
  return base64_encode(hash_hmac('sha256', $request, $key, true));
}

function commerce_unleashed_get_culr($id, $key, $signature, $endpoint, $requestUrl, $format) {
  $api = variable_get('commerce_unleashed_url', 'https://api.unleashedsoftware.com/');

  $curl = curl_init($api . $endpoint . $requestUrl);
  curl_setopt($curl, CURLOPT_FRESH_CONNECT, true);
  curl_setopt($curl, CURLINFO_HEADER_OUT, true);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($curl, CURLOPT_HTTPHEADER, array("Content-Type: application/$format",
  "Accept: application/$format", "api-auth-id: $id", "api-auth-signature: $signature"));
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 20);
  // these options allow us to read the error message sent by the API
  curl_setopt($curl, CURLOPT_FAILONERROR, false);
  curl_setopt($curl, CURLOPT_HTTP200ALIASES, range(400, 599));

  return $curl;
}

function commerce_unleashed_get($endpoint, $request, $format) {
  $requestUrl = "";
  if (!empty($request)) $requestUrl = "?$request";

  try {
    // calculate API signature
    $signature = commerce_unleashed_get_signature($request, $key);
    // create the curl object
    $curl = commerce_unleashed_get_culr($id, $key, $signature, $endpoint, $requestUrl, $format);
    // GET something
    $curl_result = curl_exec($curl);
    error_log($curl_result);
    curl_close($curl);
    return $curl_result;
  }
  catch (Exception $e) {
    error_log('Error: ' + $e);
  }
}

function commerce_unleashed_post($endpoint, $format, $data_uuid, $data) {
  if (!isset($data_uuid, $data)) {
    return null;
  }

  $id = variable_get('commerce_unleashed_id');
  $key = variable_get('commerce_unleashed_key');

  try {
    // calculate API signature
    $signature = commerce_unleashed_get_signature("", $key);
    // create the curl object.
    // - POST always requires the object's id
    $curl = commerce_unleashed_get_culr($id, $key, $signature, "$endpoint/$data_uuid", "", $format);
    // set extra curl options required by POST
    curl_setopt($curl, CURLOPT_POST, 1);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
    // POST something
    $curl_result = curl_exec($curl);
    error_log($curl_result);
    curl_close($curl);
    return $curl_result;
  }
  catch (Exception $e) {
    error_log('Error: ' + $e);
  }
}

function commerce_unleashed_get_json($endpoint, $request) {
  // GET it, decode it, return it
  return json_decode(commerce_unleashed_get($endpoint, $request, "json"));
}

function commerce_unleashed_post_json($endpoint, $data_uuid, $data) {
  // POST it, return the API's response
  return commerce_unleashed_post($endpoint, "json", $data_uuid, json_encode($data));
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_unleashed_field_formatter_info() {
  return array(
    'commerce_unleashed_amount_without_currency' => array(
      'label' => t('Amount without currency'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'calculation' => FALSE,
      ),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function commerce_unleashed_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // Loop through each price value in this field.
  foreach ($items as $delta => $item) {
    // Do not render a price if the amount is NULL (i.e. non-zero empty value).
    if (is_null($item['amount'])) {
      continue;
    }

    // Theme the display of the price based on the display type.
    switch ($display['type']) {
      case 'commerce_unleashed_amount_without_currency':
        $element[$delta] = array(
        '#markup' => commerce_currency_amount_to_decimal($item['amount'], $item['currency_code']),
        );
        break;
    }
  }

  return $element;
}
