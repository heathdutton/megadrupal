<?php
// $Id: translatablecomments.module,v 1.8 2011/01/06 03:38:33 davetrainer Exp $

/**
 * @file
 *
 * Makes comments translatable via the Google AJAX Language API.
 */

/**
 * Implements hook_init().
 * Build the translator widget, and add the relevant css and js on every page load.
 */
function translatablecomments_init() {
  $path = drupal_get_path('module', 'translatablecomments');
  drupal_add_css("$path/translatablecomments.css");
  drupal_add_js("$path/jquery-translate/jquery.translate-core.min.js");
  drupal_add_js("$path/jquery.translatablecomments.js");
  drupal_add_html_head('<script type="text/javascript" src="http://www.google.com/jsapi"></script>');
  drupal_add_js('google.load("language", "1");', 'inline');
  drupal_add_js('var languages = ' . drupal_json_encode(variable_get('translatablecomments_languages', array('en' => 'English'))) . ';', 'inline');
  $selectors = variable_get('translatablecomments_selection', '.comment .content');
  $selectors = trim($selectors, '\'";()');
  $selectors = str_replace("\r\n", ",",  $selectors);
  drupal_add_js('var selectors = "' . $selectors . '";', 'inline');
}

/**
 * Implements hook_menu().
 */
function translatablecomments_menu() {
  $items['admin/settings/translatablecomments'] = array(
    'title' => 'Translatable Comments',
    'description' => 'Gives users the ability to view translated comments via the Google AJAX Language API.',
    'page callback' => 'translatablecomments_page',
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

function translatablecomments_page() {
  return drupal_get_form('translatablecomments_form');
}

/**
 * Build the form for the admin page.
 */
function translatablecomments_form($form_state) {
  $form['selection'] = array(
    '#type' => 'textarea',
    '#title' => t('Select Content'),
    '#description' => t('Configure which content will be made translatable,  using CSS selectors. Enter one selector per line.'),
    '#default_value' => variable_get('translatablecomments_selection', '.comment .content'),
    '#tree' => true
  );
  $form['languages'] = array(
    '#type' => 'fieldset',
    '#title' => t('Languages'),
    '#description' => t('Choose which languages to be displayed as options for translating content.'),
    '#tree' => true
  );
  foreach (_translatablecomments_languages() as $code => $language) {
    $form['languages'][$code] = array(
      '#type' => 'checkbox',
      '#title' => t($language) . ' (' . $code . ')',
      '#default_value' => _translatablecomments_is_active($code),
    );
  }
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

/**
 * Submit the configuration form.
 */
function translatablecomments_form_submit($form, &$form_state) {
  $languages = array();
  $language_names = _translatablecomments_languages();
  foreach ($form_state['values']['languages'] as $key => $value) {
    if ($value) {
      $languages[$key] = $language_names[$key];
    }
  }
  variable_set('translatablecomments_languages', $languages);
  variable_set('translatablecomments_selection', filter_xss($form_state['values']['selection']));
  drupal_set_message(t('The configuration options have been saved.'));
}

function _translatablecomments_is_active($lang) {
  $active = variable_get('translatablecomments_languages', array('en' => 'English'));
  if ($active[$lang]) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function _translatablecomments_languages() {
  return array(
    'af' => 'Afrikaans',
    'sq' => 'Albanian',
    'am' => 'Amharic',
    'ar' => 'Arabic',
    'hy' => 'Armenian',
    'az' => 'Azerbaijani',
    'eu' => 'Basque',
    'be' => 'Belarusian',
    'bn' => 'Bengali',
    'bh' => 'Bihari',
    'bg' => 'Bulgarian',
    'my' => 'Burmese',
    'ca' => 'Catalan',
    'chr' => 'Cherokee',
    'zh' => 'Chinese',
    'zh-CN' => 'Simplified Chinese',
    'zh-TW' => 'Traditional Chinese',
    'hr' => 'Croatian',
    'cs' => 'Czech',
    'da' => 'Danish',
    'dv' => 'Dhivehi',
    'nl' => 'Dutch',
    'en' => 'English',
    'eo' => 'Esperanto',
    'et' => 'Estonian',
    'tl' => 'Filipino',
    'fi' => 'Finnish',
    'fr' => 'French',
    'gl' => 'Galician',
    'ka' => 'Georgian',
    'de' => 'German',
    'el' => 'Greek',
    'gn' => 'Guarani',
    'gu' => 'Gujerati',
    'iw' => 'Hebrew',
    'hi' => 'Hindi',
    'hu' => 'Hungarian',
    'is' => 'Icelandic',
    'id' => 'Indonesian',
    'iu' => 'Inuktitut',
    'ga' => 'Irish',
    'it' => 'Italian',
    'ja' => 'Japanese',
    'kn' => 'Kannada',
    'kk' => 'Kazakh',
    'km' => 'Khmer',
    'ko' => 'Korean',
    'ku' => 'Kurdish',
    'ky' => 'Kyrgyz',
    'lo' => 'Laothian',
    'lv' => 'Latvian',
    'lt' => 'Lithuanian',
    'mk' => 'Macedonian',
    'ms' => 'Malay',
    'ml' => 'Malayalam',
    'mt' => 'Maltese',
    'mr' => 'Marathi',
    'mn' => 'Mongolian',
    'ne' => 'Nepali',
    'no' => 'Norwegian',
    'or' => 'Oriya',
    'ps' => 'Pashto',
    'fa' => 'Persian',
    'pl' => 'Polish',
    'pt-PT' => 'Portuguese',
    'pa' => 'Punjabi',
    'ro' => 'Romanian',
    'ru' => 'Russian',
    'sa' => 'Sanskrit',
    'sr' => 'Serbian',
    'sd' => 'Sindhi',
    'si' => 'Sinhalese',
    'sk' => 'Slovak',
    'sl' => 'Slovenian',
    'es' => 'Spanish',
    'sw' => 'Swahili',
    'sv' => 'Swedish',
    'tg' => 'Tajik',
    'ta' => 'Tamil',
    'tl' => 'Tagalog',
    'te' => 'Telugu',
    'th' => 'Thai',
    'bo' => 'Tibetan',
    'tr' => 'Turkish',
    'uk' => 'Ukranian',
    'ur' => 'Urdu',
    'uz' => 'Uzbek',
    'ug' => 'Uighur',
    'vi' => 'Vietnamese',
    'cy' => 'Welsh',
    'yi' => 'Yiddish'
  );
}
