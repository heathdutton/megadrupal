<?php

/**
 *  Implementation of hook_init
 */
function message_docs_init() {
drupal_add_css(drupal_get_path('module', 'message_docs') . '/css/message_docs.css',
          array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  drupal_add_js(drupal_get_path('module', 'message_docs') .'/js/message_docs.js');
}

/**
 * Implements hook_menu().
 */
function message_docs_menu() {
  // Admin settings for the site.
  $items['admin/config/development/message_docs'] = array(
    'title' => 'message_docs Settings',
    'description' => 'Settings for message_docs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_docs_admin_settings'),
    'file' => 'message_docs.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['message_docs/message_request/%'] = array(
    'title' => 'message_docs redirection',
    'description' => 'Redirection to the message_docs server.',
    'page callback' => 'message_docs_redirect_server',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('use error reporting'), /*@TODO Create new permission*/
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_preprocess_HOOK
 *
 * @param array &$variables
 */
function message_docs_preprocess_status_messages(&$variables) {
  if (!user_access('use error reporting')) {
    return NULL;
  }
  $display = $variables['display'];
  $assoc = drupal_get_messages($display);
  foreach ($assoc as $type => $messages) {

    //placing the messages wich helps the user to recognize that he can click on
    //the other messages
    $m_count = count($messages);
    if (($m_count)&&(variable_get('message_docs_helper_messages',FALSE))) {
      drupal_set_message('Click on the message'.(($m_count>1)?'s':'').' to create a report','status');
    }
    foreach ($messages as $message) {
      $message = message_docs_create_anchor($message);
      drupal_set_message($message,$type);
    }
  }
}

/**
 * Implementation of hook_permission()
 */
function message_docs_permission() {
  $perms = array
  (
    'use error reporting' => array(
      'title' => t('Use error reporting'),
      'description' => t('Use message_docs module for report errors.'),
    ),
  );

  return $perms;
}

/**
 * Gets a variable from $_POST
 *
 * @param string $var If set, $_POST[$name] will be returned
 * @param mixed $default If the requested variable not set, the function will
 * return with this valie
 * @return mixed
 */
function message_docs_get_postdata($var, $default = '') {
  if (isset($_POST[$var])) {
    return $_POST[$var];
  }
  else {
    return $default;
  }
}

function message_docs_return_error($error_message, $mode = 'normal') {
  if ($mode == 'normal') {
    drupal_set_message($error_message, 'error');
    return '&nbsp';
  }
  else {
    print ($message);
    return NULL;
  }
}

/**
 * Page callback wich does a drupal_http_request call to the server wich is
 * set in the settings. The server should create (or find) a report node about
 * the error message, then gives back the node id for this function. If the
 * answer is valid the user will be redirected to the node on the server. Other
 * way an error message will be printed out to inform the user about the failure.
 * 
 */
function message_docs_redirect_server($message_get) {
  //Verbose error messages on common error codes
  $error_codes = array(
    '-1002' =>
      'Maybe you have forgotten the protocol prefix [http:// or https://] from the server url',
    '403' =>
      'Access denied! Check if you have the permission to report a message on the server',
    '404' =>
      'File not found - check if you given the good server url',

  );

  //$message = message_docs_get_postdata('message',FALSE);
  $message = $message_get;
  //normal = this page callback acts like a normal page callback
  //service = this page callback acts as a service and doesn't render the full site
  //just return with the most imprtant data
  $mode = 'normal';

  if (!user_access('use error reporting')) {
    return message_docs_return_error('Access denied', $mode);
  }

  if (!$message) {
    return message_docs_return_error('No error message specified!', $mode);
  }
  $options = array(
    'method' => 'POST',
    'data' => 'message='.urlencode($message).'&site_id='.variable_get('message_docs_site_id','').'&site_name='.variable_get('site_name','n.a.'),
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );
  $url = variable_get('message_docs_server_url','').'/message_server/request';
  $http_request = drupal_http_request($url, $options);
  //var_dump($options['data']);
  //print '<pre>';
  //print 'url:'.$url.'|';
  //var_dump($http_request);
  //print '</pre>';
  if ($http_request->code != 200) {
    $error_code_message = '';
    if (isset($error_codes[$http_request->code])) {
      $error_code_message = $error_codes[$http_request->code];
    }
    //drupal_set_message('Error during reporting the message. HTTP code:'.$http_request->code.' '.$error_code_message,'error');
    return message_docs_return_error('Error during reporting the message. HTTP code:'.$http_request->code.' '.$error_code_message, $mode);
  }
  $return_array = unserialize($http_request->data);
  $report_id = (int)$return_array['id'];
  $status = $return_array['status'];
  if (!$report_id) {
    //drupal_set_message('Couldn create the report on the server','error');
    return message_docs_return_error('no data', 'normal');
  }
  //print variable_get('message_docs_server_url','').'/node/'.$report_id.'/'.$status;
  drupal_goto(variable_get('message_docs_server_url','').'/node/'.$report_id.'/status/'.$status);
  return NULL;//'Redirecting, please wait...';
}

/**
 * Creates a url from a message pointing to the server. If there is already an
 * html tag in the message, then the url (with some text) will be just appended
 * after the message
 *
 * @param string $string
 * @todo refactor
 */
function message_docs_create_anchor($message) {
  global $base_url;
  //$server_url = 'http://error_server.pronovix.net';
  //$server_url = variable_get('message_docs_server_url');
  $request_url = $base_url.'/?q=message_docs/message_request/'.(message_docs_message2url($message));
  $stripped_message = addslashes(strip_tags($message));
  if ($message != strip_tags($message)) {
    //There is at least 1 html tags in the message
    $message .= '&nbsp;<a message_text="'.$stripped_message.'" class="message_docs_href" href="'.$request_url.'"  target="_blank">'.t('Read more').'&nbsp;&raquo;</a>';
  }
  else {
    $message = '<a message_text="'.$stripped_message.'" class="message_docs_href" href="'.$request_url.'"  target="_blank">'.check_plain($message).'</a>';
  }
  return $message;
}


/**
 * Converts a random string to be a parameter of an url
 *
 * @param string $string
 * @return string
 */
function message_docs_message2url($string) {

  $string = strip_tags($string);
  //$string = preg_replace("/[^a-zA-Z0-9\s]/", "", $string);
  //$string = mb_strtolower($string);
  $string = substr($string, 0, 1024);
  $string = urlencode($string);
  return $string;
}

/**
 * Generates a hash from url safe characters, which cannot cause errors used in most formating (for example html).
 *
 * I only use characters that's not getting converted by urlencode()
 * Example code to get them:
 * @code
 * for ($i=0; $i<255; $i++) {
 *   $chr = chr($i);
 *   if ($chr == urlencode($chr)) {
 *     print $chr;
 *   }
 * }
 * @endcode
 *
 * @see user_password()
 */
function message_docs_generate_random_hash($hash_length) {
  $allowable_characters = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

  $len = strlen($allowable_characters) - 1;
  $hash = '';

  for ($i=0; $i<$hash_length; $i++) {
    $hash .= $allowable_characters[mt_rand(0, $len)];
  }

  return $hash;
}

function message_docs_get_site_id() {
  return variable_get('message_docs_site_id');
}

/**
 * @todo remove hard-coded server url
 * @todo check message_docs_message2url in non-english languages
 * @todo message should be insterted into the report node of the server with no
 * urlencode and slash removing, etc.
 * @todo for the previous task some jquery magic needed on the clickable status
 * messages
 */
