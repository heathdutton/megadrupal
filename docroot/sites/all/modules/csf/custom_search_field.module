<?php

/**
 * @file
 * Bring customizations to the default search box.
 *
 * Adds field options to the search form
 */

/**
 * Implements hook_menu().
 */
function custom_search_field_menu() {
  $items['admin/config/search/custom_search/field'] = array(
    'title'             => 'Fields',
    'description'       => 'Select the fields to present as search options in the search block.',
    'page arguments'    => array('custom_search_field_admin'),
    'access arguments'  => array('administer custom search'),
    'file'              => 'custom_search_field.admin.inc',
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 2,
  );
  return $items;
}

/**
 * Implements hook_custom_search_box().
 */
function custom_search_field_custom_search_box(&$form, $form_id, $delta = '') {
  $myfields = array();
  foreach (node_type_get_names() as $nodename) {
    $myfields[] = field_info_instances('node', $nodename);
  }
  foreach ($myfields as $myfield) {
    foreach ($myfield as $myf) {
      if (variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector', 'disabled') != 'disabled') {
        $options = array();
        $options['c-all'] = variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_all', CUSTOM_SEARCH_ALL_TEXT_DEFAULT);
        if ($myf['display']['teaser_extended']['module'] == 'entityreference') {
          $query = new EntityFieldQuery();
          $entities = $query->entityCondition('entity_type', 'node')
                            ->propertyCondition('type', 'Contributor')
                            ->propertyOrderBy('title', 'ASC')
                            ->execute();
          if (!empty($entities['node'])) {
            foreach ($entities['node'] as $nid => $v) {
              $node = node_load($nid);
              $options['c-' . $nid] = (drupal_substr(variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector', 'disabled'), 0, 6) == 'select') ? $node->title : $node->title;
            }
          }
        }
        $selector_type = variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector', 'select');
        if ($selector_type == 'selectmultiple') {
          $selector_type = 'select';
          $multiple = TRUE;
        }
        else {
          $multiple = FALSE;
        }
        $form['custom_search_field_' . $myf['field_id']] = array(
          '#type'           => $selector_type,
          '#multiple'       => $multiple,
          '#title'          => variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_label', $myf['field_name']),
          '#options'        => $options,
          '#default_value'  => ($selector_type == 'checkboxes') ? array('c-all') : 'c-all',
          '#attributes'     => array('class' => array('custom-search-selector', 'custom-search-myfields')),
          '#weight'         => variable_get('custom_search_' . $delta . 'field' . $myf['field_id'] . '_weight', 2),
        );
        if (variable_get('custom_search_' . $delta . 'field' . $myf['field_id'] . '_region', 'block') == 'popup') {
          $form['popup']['custom_search_myfields_' . $myf['field_id']] = $form['custom_search_myfields_' . $myf['field_id']];
          unset($form['custom_search_myfields_' . $myf['field_id']]);
        }
        if (!variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_label_visibility', TRUE)) {
          $form['custom_search_myfields_' . $myf['field_id']]['#title_display'] = 'invisible';
        }
      }
    }
  }

  // Custom paths.
  if (variable_get('custom_search_' . $delta . 'paths', '') != '') {
    $form['custom_search_paths_fields_separator'] = array(
      '#type'           => 'hidden',
      '#default_value'  => variable_get('custom_search_' . $delta . 'paths_fields_separator', '+'),
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function custom_search_field_form_alter(&$form, &$form_state, $form_id) {

  // Filter the form_id value to identify all the custom blocks.
  $form_id_processed = $form_id;
  $delta = '';
  for ($a = 1; $a <= variable_get('custom_search_blocks_number', 1); $a++) {
    if ($form_id == 'custom_search_blocks_form_' . $a) {
      $form_id_processed = 'custom_search_blocks_form';
      $delta = 'blocks_' . $a . '_';
    }
  }

  switch ($form_id_processed) {

    case 'block_admin_configure':
      if (isset($form['module']) && $form['module']['#value'] == 'custom_search_blocks') {

        $delta = $form['delta']['#value'];
        $myfields = array();
        foreach (node_type_get_names() as $nodename) {
          $myfields[] = field_info_instances('node', $nodename);
        }
        if (count($myfields)) {
          $form['settings']['field'] = array(
            '#type'         => 'fieldset',
            '#title'        => t('field'),
            '#description'  => t('Select the fields to present as search options in the search block. If none is selected, no selector will be displayed.'),
            '#collapsible'  => TRUE,
          );
          // Get myfields forms.
          $form['settings']['field'] = _custom_search_field_admin_form($myfields, $delta);
          $form['settings']['order']['custom_search_blocks_' . $delta . '_order'] = array_merge($form['settings']['order']['custom_search_blocks_' . $delta . '_order'], _custom_search_field_sort_form($myfields, $delta));
          $collapsed = TRUE;
          foreach ($myfields as $myfield) {
            foreach ($myfield as $myf) {
              if (variable_get('custom_search_blocks_' . $delta . '_myf' . $myf['field_id'] . '_selector', 'disabled') != 'disabled') {
                $collapsed = FALSE;
              }
            }
          }
          $form['settings']['field']['#collapsed'] = $collapsed;
        }
      }
    break;
  }
}

/**
 * Default admin form.
 */
function _custom_search_field_admin_form($myfields, $delta = '') {
  if ($delta != '') {
    $delta = 'blocks_' . $delta . '_';
  }
  $form = array();
  foreach ($myfields as $myfield) {
    foreach ($myfield as $myf) {
      $form[$myf['field_name']] = array(
        '#type'         => 'fieldset',
        '#title'        => check_plain($myf['field_name']) . ' - ' . check_plain($myf['bundle']),
        '#collapsible'  => TRUE,
        '#collapsed'    => (variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector', 'disabled') == 'disabled') ? TRUE : FALSE,
      );
      $form[$myf['field_name']]['custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector'] = array(
        '#type'           => 'select',
        '#title'          => t('Selector type'),
        '#options'        => array(
          'disabled'        => t('Disabled'),
          'select'          => t('Drop-down list'),
          'selectmultiple'  => t('Drop-down list with multiple choices'),
          'radios'          => t('Radio buttons'),
          'checkboxes'      => t('Checkboxes'),
        ),
        '#description'    => t('Choose which selector type to use.'),
        '#default_value'  => variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector', 'disabled'),
      );
      $form[$myf['field_name']]['custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_label_visibility'] = array(
        '#type'           => 'checkbox',
        '#title'          => t('Display label'),
        '#default_value'  => variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_label_visibility', TRUE),
      );
      $form[$myf['field_name']]['custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_label'] = array(
        '#type'           => 'textfield',
        '#title'          => t('Label text'),
        '#default_value'  => variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_label', $myf['field_name']),
        '#description'    => t('Enter the label text for the selector. The default value is "@default".', array('@default' => $myf['field_name'])),
        '#states' => array(
          'visible' => array(
            ':input[name="custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_label_visibility"]' => array('checked' => TRUE),
          ),
        ),
      );

      $form[$myf['field_name']]['custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_all'] = array(
        '#type'           => 'textfield',
        '#title'          => t('-Any- text'),
        '#default_value'  => variable_get('custom_search_' . $delta . 'myf' . $myf['field_id'] . '_selector_all', CUSTOM_SEARCH_ALL_TEXT_DEFAULT),
        '#required'       => TRUE,
        '#description'    => t('Enter the text for "any term" choice. The default value is "!default".', array('!default' => CUSTOM_SEARCH_ALL_TEXT_DEFAULT)),
      );

    }
  }
  return $form;
}

/**
 * Sort form.
 */
function _custom_search_field_sort_form($myfields, $delta = '') {
  if ($delta != '') {
    $delta = 'blocks_' . $delta . '_';
  }
  $form = array();
  $w = 1;
  foreach ($myfields as $myfield) {
    foreach ($myfield as $myf) {
      if (isset($myf['field_id'])) {

        $form['field' . $myf['field_id']] = array(
          '#title'  => t('field') . ': ' . check_plain($myf['field_name']) . ' - ' . check_plain($myf['bundle']),
          '#weight' => variable_get('custom_search_' . $delta . 'field' . $myf['field_id'] . '_weight', $w),
        );
        $form['field' . $myf['field_id']]['sort'] = array(
          '#type'           => 'weight',
          '#default_value'  => variable_get('custom_search_' . $delta . 'field' . $myf['field_id'] . '_weight', $w),
          '#attributes'     => array(
            'class' => array(
              'sort-select',
              'sort-select-' . variable_get('custom_search_' . $delta . 'field' . $myf['field_id'] . '_region', 'block'),
            ),
          ),
        );
        $form['field' . $myf['field_id']]['region'] = array(
          '#type'           => 'select',
          '#options'        => array(
            'block' => t('Block'),
            'popup' => t('Popup'),
          ),
          '#default_value'  => variable_get('custom_search_' . $delta . 'field' . $myf['field_id'] . '_region', 'block'),
          '#attributes'     => array(
            'class' => array(
              'region-select',
              'region-select-' . variable_get('custom_search_' . $delta . 'field' . $myf['field_id'] . '_region', 'block'),
            ),
          ),
        );
      }
      $w++;
    }
  }

  return $form;
}

/**
 * Custom Search Fields Filter Hook.
 */
function custom_search_field_custom_search_filter($form, $form_state, $other) {
  $myfields = array();
  foreach (node_type_get_names() as $nodename) {
    $myfields[] = field_info_instances('node', $nodename);
  }

  foreach ($myfields as $myfield) {
    foreach ($myfield as $myf) {
      if (isset($form_state['values']['custom_search_field_' . $myf['field_id']])) {
        $other[$myf['field_name']] = $form_state['values']['custom_search_field_' . $myf['field_id']];
      }
    }
    // If one or more -Any- is selected, delete them.
    while (($index = array_search('all', $other)) !== FALSE) {
      array_splice($other, $index, 1);
    }
  }
  return $other;
}
/**
 * Apache Solr Custom Search Fields Processing Hook.
 */
function custom_search_field_custom_search_apachesolr_processing(&$keys, $fields, $variables) {
  foreach ($fields as $name => $settings) {
    if ($settings['type'] == 'entityreference') {
      $name2 = $settings['field_name'];
      if (isset($variables[$name2])) {
        $reference = 'node';
        $vval = $variables[$name2];
        $t = substr($vval, strpos($vval, "-") + 1);
        if ($t == 'all') {
        }
        else {
          $keys['f[' . count($keys) . ']'] = 'sm_' . $name2 . ':' . $reference . ':' . $t;
        }
      }
    }
  }
  return $keys;
}
