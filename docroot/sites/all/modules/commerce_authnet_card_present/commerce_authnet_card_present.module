<?php

/**
 * @file
 * Implements Authorize.Net Card Present payments for use in Drupal Commerce.
 */

define('COMMERCE_AUTHNET_CARD_PRESENT_RESPONSE_CODE_LOC', 1);

/**
 * Implements hook_menu().
 */
function commerce_authnet_card_present_menu() {
  $items = array();

  // Add a menu item for voiding transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/authnet-cp-aim-void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'commerce_authnet_card_present_aim_void_form',
      3,
      5,
    ),
    'access callback' => 'commerce_authnet_card_present_aim_void_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_authnet_card_present.void.inc',
  );

  // Add a menu item for issuing credits.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/authnet-cp-aim-credit'] = array(
    'title' => 'Credit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'commerce_authnet_card_present_aim_credit_form',
      3,
      5,
    ),
    'access callback' => 'commerce_authnet_card_present_aim_credit_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_authnet_card_present.credit.inc',
  );

  return $items;
}

/**
 * Determines void form access.
 *
 * @param object $order
 *   The order the transaction is on.
 * @param object $transaction
 *   The payment transaction object to be voided.
 *
 * @return bool
 *   TRUE or FALSE indicating void access.
 */
function commerce_authnet_card_present_aim_void_access($order, $transaction) {
  if ($transaction->payment_method != 'authnet_aim_card_present' || empty($transaction->remote_id)) {
    return FALSE;
  }

  // Return FALSE if it is more than 24 hours since the last update to the
  // transaction, as it will already have been settled.
  if (REQUEST_TIME - $transaction->changed > 2600 * 24) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determines credit form access.
 *
 * @param object $order
 *   The order the transaction is on.
 * @param object $transaction
 *   The payment transaction object to be credited.
 *
 * @return bool
 *   TRUE or FALSE indicating credit access.
 */
function commerce_authnet_card_present_aim_credit_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Authorize.Net AIM, doesn't have a
  // success status or has an amount of 0 or less.
  if ($transaction->payment_method != 'authnet_aim_card_present' || $transaction->status != 'success' || $transaction->amount <= 0) {
    return FALSE;
  }

  // Return FALSE if it is more than 120 days past the original capture.
  if (REQUEST_TIME - $transaction->created > 86400 * 120) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_authnet_card_present_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['authnet_aim_card_present'] = array(
    'base' => 'commerce_authnet_card_present_aim',
    'title' => t('Authorize.Net AIM - Card Present'),
    'short_title' => t('Authorize.Net CP'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates Authorize.Net Advanced Integration Method for card present CC transactions.'),
    'checkout' => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_method_info_alter().
 */
function commerce_authnet_card_present_commerce_payment_method_info_alter(&$payment_methods) {
  $commerce_payment_authnet_aim = rules_config_load('commerce_payment_authnet_aim');
  if (!empty($commerce_payment_authnet_aim->active)) {
    $payment_methods['authnet_aim_card_present']['display_title'] = t('Credit card (card present)');
  }
}

/**
 * Returns the default settings for the Authorize.Net AIM payment method.
 */
function commerce_authnet_card_present_aim_default_settings() {
  return array(
    'login' => '',
    'tran_key' => '',
    'txn_mode' => AUTHNET_TXN_MODE_LIVE_TEST,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'continuous' => FALSE,
    'email_customer' => FALSE,
    'log' => array('request' => '0', 'response' => '0'),
    'card_types' => array(),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_authnet_card_present_aim_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_authnet_card_present_aim_default_settings();

  $form = array();

  $form['login'] = array(
    '#type' => 'textfield',
    '#title' => t('API Login ID'),
    '#description' => t('Your API Login ID is different from the username you use to login to your Authorize.Net account. Once you login, browse to your Account tab and click the API Login ID and Transaction Key link to find your API Login ID. If you are using a new Authorize.Net account, you may still need to generate an ID.'),
    '#default_value' => $settings['login'],
    '#required' => TRUE,
  );
  $form['tran_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Key'),
    '#description' => t('Your Transaction Key can be found on the same screen as your API Login ID. However, it will not be readily displayed. You must answer your security question and submit a form to see your Transaction Key.'),
    '#default_value' => $settings['tran_key'],
    '#required' => TRUE,
  );
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.') . '<br />' . t('Only specify a developer test account if you login to your account through https://test.authorize.net.'),
    '#options' => array(
      AUTHNET_TXN_MODE_LIVE => t('Live transactions in a live account'),
      AUTHNET_TXN_MODE_LIVE_TEST => t('Test transactions in a live account'),
      AUTHNET_TXN_MODE_DEVELOPER => t('Developer test account transactions'),
    ),
    '#default_value' => $settings['txn_mode'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );

  $form['email_customer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tell Authorize.net to e-mail the customer a receipt based on your account settings.'),
    '#default_value' => $settings['email_customer'],
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_authnet_card_present_aim_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  return commerce_authnet_card_present_aim_default_form();
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_authnet_card_present_aim_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  if (empty($pane_values['card_present']['track']) && empty($pane_values['card_present']['manual_entry']['card_num'])) {
    form_set_error('track', t('Must either swipe credit card or enter data manually'));
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_authnet_card_present_aim_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $currency_data = commerce_currency_load($charge['currency_code']);

  // If the charge amount is 0...
  if ($charge['amount'] == 0) {
    // Create a transaction to log the skipped transaction and display a
    // helpful message to the customer.
    $transaction = commerce_payment_transaction_new('authnet_aim_card_present', $order->order_id);
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t('Invalid @amount transaction not attempted.', array('@amount' => commerce_currency_format($charge['amount'], $charge['currency_code'])));
    commerce_payment_transaction_save($transaction);

    drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
    return FALSE;
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get the default transaction type from the payment method settings.
  $txn_type = $payment_method['settings']['txn_type'];

  // If txn_type has been specified in the pane values array, such as through
  // the special select element we alter onto the payment terminal form, use
  // that instead.
  if (!empty($pane_values['txn_type'])) {
    $txn_type = $pane_values['txn_type'];
  }

  // Build a name-value pair array for this transaction.
  $nvp = array(
    'x_type' => commerce_authnet_txn_type($txn_type),
    'x_method' => 'CC',
    'x_amount' => number_format(commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']), $currency_data['decimals'], $currency_data['decimal_separator'], $currency_data['thousands_separator']),
    'x_currency_code' => $charge['currency_code'],
    'card_present' => TRUE,
  );

  // If there is no track data then fallback to the manual entry option.
  if (!empty($pane_values['card_present']['track'])) {
    $nvp['x_track1'] = $pane_values['card_present']['track'];
  }
  else {
    $exp_date = $pane_values['card_present']['manual_entry']['exp_month'] . substr($pane_values['card_present']['manual_entry']['exp_year'], 2);
    // Only used when trackdata not present.
    $nvp['x_card_num'] = $pane_values['card_present']['manual_entry']['card_num'];
    $nvp['x_exp_date'] = $exp_date;
  }

  // Build a description for the order.
  $description = array();
  // Check for product descriptions. Not all environments have them.
  if (function_exists('commerce_product_line_item_types')) {
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
        $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
      }
    }
  }

  // Add additional transaction information to the request array.
  $nvp += array(
    // Order Information.
    'x_invoice_num' => $order->order_number,
    'x_description' => substr(implode(', ', $description), 0, 255),

    // Customer Information.
    'x_email' => substr($order->mail, 0, 255),
    'x_cust_id' => substr($order->uid, 0, 20),
    'x_customer_ip' => substr(ip_address(), 0, 15),
  );

  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }

    $nvp += array(
      // Customer Billing Address.
      'x_first_name' => substr($billing_address['first_name'], 0, 50),
      'x_last_name' => substr($billing_address['last_name'], 0, 50),
      'x_company' => substr($billing_address['organisation_name'], 0, 50),
      'x_address' => substr($billing_address['thoroughfare'], 0, 60),
      'x_city' => substr($billing_address['locality'], 0, 40),
      'x_state' => substr($billing_address['administrative_area'], 0, 40),
      'x_zip' => substr($billing_address['postal_code'], 0, 20),
      'x_country' => $billing_address['country'],
    );
  }
  else {
    $billing_address = array();
  }

  // Submit the request to Authorize.Net.
  $response = commerce_authnet_aim_request($payment_method, $nvp);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('authnet_aim_card_present', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response[7];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($response[COMMERCE_AUTHNET_CARD_PRESENT_RESPONSE_CODE_LOC] != '1') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($txn_type) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;

      case COMMERCE_CREDIT_CAPTURE_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $response[11];

  // Build a meaningful response message.
  $message = array(
    '<b>' . commerce_authnet_reverse_txn_type($response[11]) . '</b>',
    '<b>' . ($response[COMMERCE_AUTHNET_CARD_PRESENT_RESPONSE_CODE_LOC] != '1' ? t('REJECTED') : t('ACCEPTED')) . ':</b> ' . check_plain($response[3]),
    t('AVS response: @avs', array('@avs' => commerce_authnet_avs_response($response[5]))),
  );

  // Add the CVV response if enabled.
  if (isset($nvp['x_card_code'])) {
    $message[] = t('CVV match: @cvv', array('@cvv' => commerce_authnet_cvv_response($response[38])));
  }

  $transaction->message = implode('<br />', $message);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($response[COMMERCE_AUTHNET_CARD_PRESENT_RESPONSE_CODE_LOC] != '1') {
    drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
    drupal_set_message(check_plain($response[3]), 'error');
    return FALSE;
  }
}

/**
 * Implements hook_commerce_authnet_aim_request_alter().
 */
function commerce_authnet_card_present_commerce_authnet_aim_request_alter(&$nvp) {
  if (!empty($nvp['card_present'])) {
    unset($nvp['card_present']);
    $nvp['x_encap_char'] = '~';
    $nvp += array(
      'x_cpversion' => '1.0',
      'x_market_type' => '2',
      'x_device_type' => '8',
      'x_card_num' => '',
      'x_exp_date' => '',
      'x_solution_id' => 'A1000009',
      'x_response_format' => '1',
      'x_delim_char' => '|',
    );
  }
}

/**
 * Payment method checkout form.
 *
 * @return array
 *   Returns the checkout form array.
 */
function commerce_authnet_card_present_aim_default_form() {
  // Build a year select list that uses a 4 digit key with a 2 digit value.
  $options = array();
  $current_month = date('m');
  $current_year_2 = date('y');
  $current_year_4 = date('Y');
  for ($i = 0; $i < 20; $i++) {
    $options[$current_year_4 + $i] = str_pad($current_year_2 + $i, 2, '0', STR_PAD_LEFT);
  }

  $form['card_present'] = array(
    '#tree' => TRUE,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'commerce_payment') . '/theme/commerce_payment.theme.css'),
    ),
  );
  $form['card_present']['track'] = array(
    '#type' => 'textfield',
    '#title' => 'trackdata',
  );
  $form['card_present']['manual_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manual credit card entry'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['card_present']['manual_entry']['card_num'] = array(
    '#type' => 'textfield',
    '#title' => t('Card number'),
  );

  $form['card_present']['manual_entry']['exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Start date'),
    '#options' => drupal_map_assoc(array_keys(commerce_months())),
    '#default_value' => $current_month,
    '#prefix' => '<div class="commerce-credit-card-start">',
    '#suffix' => '<span class="commerce-month-year-divider">/</span>',
  );
  $form['card_present']['manual_entry']['exp_year'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $current_year_4,
    '#suffix' => '</div>',
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'commerce_authnet_card_present') . '/js/card-swipe.js',
  );

  return $form;
}
