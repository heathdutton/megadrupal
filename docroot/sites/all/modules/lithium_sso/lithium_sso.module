<?php

/**
 * @file
 * Enables shared login between Drupal and Lithium.
 */

/**
 * Implements hook_help().
 */
function lithium_sso_help($path, $arg) {
  switch ($path) {
    case 'admin/help#lithium_sso':
      $path = dirname(__FILE__) . '/README.txt';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = ($function($readme, NULL));
        }
        else {
          $output = '<pre>' . ($readme) . '</pre>';
        }
      }
      else {
        $output = '<pre>' . ($readme) . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_libraries_info().
 */
function lithium_sso_libraries_info() {
  $libraries['lithium_sso'] = array(
    'name' => 'Lithium SSO',
    'vendor url' => 'https://community.lithium.com',
    'download url' => 'https://community.lithium.com',
    'version arguments' => array(
      'file' => 'lithium_sso.php',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
      'lines' => 5,
    ),
    'files' => array(
      'php' => array('lithium_sso.php'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function lithium_sso_menu() {
  $items = array();

  $items['admin/config/services/lithium-sso'] = array(
    'title' => 'Lithium SSO',
    'description' => 'Configure Single-Sign-On with Lithium.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lithium_sso_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'lithium_sso.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lithium_sso_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'lithium_sso_user_register_redirect_submit';
}

/**
 * Submit callback to redirect back to the forum after a user registration.
 */
function lithium_sso_user_register_redirect_submit($form, &$form_state) {
  // Check $_GET['referer'] and redirect back to Lithium if it's set.
  if (isset($_GET['referer']) && !empty($_GET['referer'])) {
    $form_state['redirect'] = $_GET['referer'];
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function lithium_sso_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $paths = array(
    'user',
    'user/login',
    'user/register',
    'user/password',
  );
  if (in_array($_GET['q'], $paths)) {
    // Check $_GET['referer'] is set from Lithium and store it in $_SESSION.
    if (isset($_GET['referer']) && !empty($_GET['referer'])) {
      // @todo We should have the $_GET['referer'] value whitelisted.
      $_SESSION['referer'] = $_GET['referer'];
      foreach ($data['tabs'][0]['output'] as $key => $tab) {
        $data['tabs'][0]['output'][$key]['#link']['localized_options']['query'] = array(
          'referer' => $_GET['referer'],
        );
      }
    }
  }
}

/**
 * Implements hook_user_login().
 */
function lithium_sso_user_login(&$edit, $account) {
  lithium_sso_auth_token($account);

  // Check $_SESSION['referer'] and redirect back to Lithium if it's set.
  if (isset($_SESSION['referer']) && !empty($_SESSION['referer'])) {
    $edit['redirect'] = $_SESSION['referer'];
    unset($_SESSION['referer']);
  }
}

/**
 * Implements hook_user_presave().
 */
function lithium_sso_user_presave(&$edit, $account, $category) {
  if ($account->uid > 0) {
    lithium_sso_auth_token($account);
  }
}

/**
 * Implements hook_user_logout().
 */
function lithium_sso_user_logout($account) {
  $lithium_sso_client = lithium_sso_get_client();

  $sso_value = $lithium_sso_client->get_auth_token(
    $lithium_sso_client->ANONYMOUS_UNIQUE_ID,
    $account->name,
    $account->mail
  );
  setrawcookie(
    $lithium_sso_client->lithium_cookie_name . $lithium_sso_client->client_id,
    $sso_value,
    0,
    '/',
    $lithium_sso_client->client_domain
  );
}

/**
 * Get SSO auth token from Lithium PHP library.
 *
 * @return bool
 *   Whether the cookie was set or not.
 */
function lithium_sso_auth_token($user) {
  if (variable_get('lithium_sso_enable_sso', 0)) {
    $lithium_client = lithium_sso_get_client();
    // @see sites/all/libraries/lithium_sso/lithium_sso.php for valid settings.
    $user_settings = array();

    // Create the authentication token.
    $auth_token = $lithium_client->get_auth_token(
      $user->uid,
      $user->name,
      $user->mail,
      $user_settings
    );
    $cookie_expire = (int) variable_get('lithium_sso_cookie_expire', 0);
    if ($cookie_expire > 0) {
      $cookie_expire = time() + 60 * 60 * 24 * $cookie_expire;
    }
    else {
      $cookie_expire = time() + 60 * 60 * 24 * 30;
    }

    return setrawcookie(
      $lithium_client->lithium_cookie_name . $lithium_client->client_id,
      $auth_token,
      $cookie_expire,
      '/',
      $lithium_client->client_domain
    );
  }

  return FALSE;
}

/**
 * Loads the library and prepares Lithium instance variables.
 *
 * @return object
 *   The object containing the Lithium client's properties.
 */
function lithium_sso_get_client() {
  $library = libraries_load('lithium_sso');

  if ((empty($library['loaded']) || $library['loaded'] !== 1)) {
    $msg = 'Failed to load Lithium SSO library. Please refer to the installation requirements.';
    watchdog('lithium_sso', $msg, array(), WATCHDOG_ERROR);
    drupal_set_message($msg, 'error');
    return FALSE;
  }

  // Prepare the lithium instance variables.
  $client_id = variable_get('lithium_sso_client_id', '');
  $client_domain = variable_get('lithium_sso_client_domain', '');
  $sso_key = variable_get('lithium_sso_sso_key', '');

  // Initialize lithium sso client.
  return new lithium_sso($client_id, $client_domain, $sso_key);
}
