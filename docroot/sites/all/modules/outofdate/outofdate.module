<?php
/**
 * @file
 * Out of date module.
 *
 * Avoid confusion by showing users when they're viewing old content.
 * Adds a (configurable) message to the top of content that is older than a
 * predetermined age, saying "This content is more than X months old, so may
 * not be up to date."
 */

// Default "Out of date" message if shown on content more than 180 days old (age in seconds).
define('OUTOFDATE_DEFAULT_AGE', 15552000);

// Default "Out of date" message if not configured.
define('OUTOFDATE_DEFAULT_MESSAGE', 'This @contenttype_lowercase is more than @interval old, so the content may be out of date.');

/**
 * Implements hook_theme().
 */
function outofdate_theme() {
  return array(
    'outofdate_message' => array(
      'render element' => 'element',
      'file' => 'outofdate.theme.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function outofdate_permission() {
  return array(
    'configure outofdate' => array(
      'title' => t('Configure the "Out of date" message and content-age settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function outofdate_menu() {
  return array(
    'admin/config/content/outofdate' => array(
      'title' => 'Out of date',
      'description' => "Set the message to be displayed when content is out of date, and how old content needs to be before it's displayed.",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('outofdate_admin_form'),
      'access arguments' => array('configure outofdate'),
      'file' => 'outofdate.admin.inc',
    ),
  );
}
/**
 * Implements hook_node_view().
 *
 * To make changes to the message (or remove it completely), implement
 * hook_node_view_alter().
 */
function outofdate_node_view($node, $view_mode, $langcode) {
  if (outofdate__show_message($node, $view_mode, $langcode)) {
    $message = outofdate__get_message($node, $view_mode, $langcode);
    $node->content['out_of_date'] = array(
      '#markup' => '<p>' . $message  . '</p>',
      '#weight' => -11, 
      '#theme_wrappers' => array('outofdate_message'),
    );
  }
}

/**
 * Implements hook_node_type_delete($info).
 */
function outofdate_node_type_delete($info) {
  // Remove any configuration beginning:
  // - outofdate_content_age__{$=type}
  // - outofdate_message__{$type}
  outofdate__cleanup_variables("outofdate_content_age__{$info->type}");
  outofdate__cleanup_variables("outofdate_message__{$info->type}");
}

/**
 * Implements hook_node_type_update($info).
 */
function outofdate_node_type_update($info) {
  if (!empty($info->old_type) && $info->old_type != $info->type) {
    $vars  = outofdate__find_variables_by_prefix("outofdate_content_age__{$info->old_type}");
    $vars += outofdate__find_variables_by_prefix("outofdate_message__{$info->old_type}");
 
    foreach ($vars as $old_var_name) {
      $new_var_name = str_replace("outofdate_content_age__{$info->old_type}", "outofdate_content_age__{$info->type}", $old_var_name);
      $setting = variable_get($old_var_name);
      variable_del($old_var_name);
      variable_set($new_var_name, $setting);
    }
  }
}

/**
 * Should the 'out of date' message be displayed?
 * 
 * @param $node
 *   The node that is being assembled for rendering.
 * @param $view_mode
 *   The $view_mode parameter from node_view().
 * @param $langcode
 *   The language code used for rendering.
 *
 * @return Boolean
 */
function outofdate__show_message($node, $view_mode, $langcode) {
  // Check whether the content is older than a specific value (by default,
  // 180 days).
  // A value of 0 stops the "Out of date" message from being displayed.

  // The global and content-type specific settings only apply to the 'full'
  // view-mode. Other view-modes default to disabled.
  if ($view_mode == 'full') {
    // Load the default age.
    $age = variable_get('outofdate_content_age', OUTOFDATE_DEFAULT_AGE);

    // Check for a node-type-specific age,
    $age = variable_get("outofdate_content_age__{$node->type}", $age);
  }
  else {
    $age = 0;
  }

  // Check for a node-type-view-mode-specific age,
  $age = variable_get("outofdate_content_age__{$node->type}__{$view_mode}", $age);

  if ($age == 0) {
    return FALSE;
  }
  else {
    $interval = REQUEST_TIME - $node->created;
    return $interval > $age;
  }
}

/**
 * Get the 'out of date' message for a particular node.
 * 
 * @param $node
 *   The node that is being assembled for rendering.
 * @param $view_mode
 *   The $view_mode parameter from node_view().
 * @param $langcode
 *   The language code used for rendering.
 *
 * @return String
 */
function outofdate__get_message($node, $view_mode, $langcode) {
  // Load the default message.
  $source_message = variable_get('outofdate_message', OUTOFDATE_DEFAULT_MESSAGE);

  // Check for a node-type-specific message,
  $source_message = variable_get("outofdate_message__{$node->type}", $source_message);

  // Check for a node-type-view-mode-specific message,
  $source_message = variable_get("outofdate_message__{$node->type}__{$view_mode}", $source_message);


  $age = REQUEST_TIME - $node->created;
  $message = t($source_message, array(
    '@interval' => format_interval($age, 1, $langcode),
    '@contenttype' => node_type_get_name($node),
    '@contenttype_lowercase' => strtolower(node_type_get_name($node)),
    ),
    array(
      'langcode' => $langcode,
    )
  );

  return $message;
}

/**
 * Remove variables that begin with the specified prefix.
 *
 * @param String $prefix
 *   Text that the name of the variable begins with.
 */
function outofdate__cleanup_variables($prefix) {
  foreach (outofdate__find_variables_by_prefix($prefix) as $var_name) {
    variable_del($var_name);
  }
}

/**
 * Find variables that begin with the specified prefix.
 *
 * @param String $prefix
 *   Text that the name of the variable begins with.
 *
 * @return Array
 *   An array of variable names.
 */
function outofdate__find_variables_by_prefix($prefix) {
  $vars = db_query("SELECT name FROM {variable} WHERE name LIKE ':prefix%'", array(':prefix' => $prefix));
  while ($var_name = db_result($result)) {
    $vars[] = $var_name;
  }
  return $vars;
}
