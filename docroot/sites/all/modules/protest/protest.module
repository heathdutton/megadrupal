<?php

/**
 * @file
 * Display a blackout modal (ie: website proteset) during configuratble times.
 */


/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function protest_permission() {
  return array(
    'bypass protest blackout' => array(
      'title' => t('bypass protest blackout'),
      'description' => t('Navigate site without experiencing the modal blackout.'),
    ),
    'administer protest' => array(
      'title' => t('administer protest'),
      'description' => t('Access to Protest administration page.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function protest_menu() {
  $items = array();

  $items['admin/config/user-interface/protest'] = array(
    'title' => 'Protest',
    'description' => 'Configure a site-wide blackout modal (ie: website protest).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('protest_admin_settings'),
    'access arguments' => array('administer protest'),
    'file' => 'protest.admin.inc',
   );

  return $items;
}

/**
 * Implements hook_init().
 */
function protest_init() {
  global $user;

  // Check if we should display the blackout modal.
  $from_time = (int) variable_get('protest_from_time', FALSE);
  $to_time = (int) variable_get('protest_to_time', FALSE);
  $now = strtotime('now');

  if (($from_time <= $now) && ($now <= $to_time) && (user_access('bypass protest blackout', $user) == FALSE)) {
    if (variable_get('protest_once', TRUE) && !protest_session_get()) {
      protest_session_set();
      display_protest_modal();
    }
    if (!variable_get('protest_once', TRUE)) {
      display_protest_modal();
    }
  }
}

/**
 * Display the protest modal.
 */
function display_protest_modal() {
  /* TODO: I'm not really sure this is the right way to get code from a template inside Drupal.settings */
  //$clean_widget = str_replace(array("\r\n", "\n", "\r", '"'), array("", "", "", '\"'), protest_widget());
  $clean_widget = protest_widget();

  $module_path = drupal_get_path('module', 'protest');

  drupal_add_css(
    $module_path . '/protest.css',
    array(
      'group' => CSS_DEFAULT,
      'every_page' => TRUE
    )
  );

  drupal_add_js(
    array('protest' => array('widget' => $clean_widget)),
    array(
      'scope' => 'header',
      'type' => 'setting',
      'weight' => JS_THEME,
    )
  );
  drupal_add_js(
    $module_path . '/protest.js',
    array(
      'scope' => 'header',
      'type' => 'file',
      'weight' => JS_THEME,
    )
  );
}

/**
* Implements hook_theme()
*/
function protest_theme() {
  return array(
    'protest_widget' => array(
      'variables' => array('overlay' => NULL, 'body' => NULL),
      'template' => 'protest-widget',
    ),
  );
}

/**
* Create the protest widget to display after the page is loaded.
*/
function protest_widget() {
  $overlay = variable_get('protest_overlay', TRUE);
  $allowed_tags = array('a', 'em', 'strong', 'cite', 'blockquote', 'code', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'img');
  $body = filter_xss(variable_get('protest_body', variable_get('protest_body_default', FALSE)), $allowed_tags);

  return theme('protest_widget', array('overlay' => $overlay, 'body' => $body));
}

/**
 * Check if protest session is set.
 */
function protest_session_get() {
  if (isset($_SESSION['protest_once'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Set protest session.
 */
function protest_session_set() {
  $_SESSION['protest_once'] = TRUE;
}
