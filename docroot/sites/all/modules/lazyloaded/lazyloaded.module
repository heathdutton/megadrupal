<?php

/**
 * Implements hook_menu().
 */
function lazyloaded_menu() {
  $menu = array();

  $menu['lazyloaded/%node/%'] = array(
    'page callback' => 'lazyloaded_page',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'file' => 'lazyloaded.page.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['admin/config/media/lazyloaded'] = array(
    'title' => 'LazyLoaded settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lazyloaded_settings_form'),
    'access arguments' => array('administer site settings'),
    'file' => 'lazyloaded.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $menu;
}

/**
 * Implements hook_node_update().
 */
function lazyloaded_node_update($node) {
  db_update('lazyloaded_data')
    ->fields(array(
      'last_sync' => 0,
    ))
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_delete().
 */
function lazyloaded_node_delete($node) {
  db_delete('lazyloaded_data')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_view().
 */
function lazyloaded_node_view($node) {
  $node->content['lazyloaded'] = array();
  $node->content['lazyloaded']['#theme'] = 'lazyloaded_vertical';
  $node->content['lazyloaded']['element']['elements'] = array();

  $plugins = lazyloaded_get_plugins();
  $names = array();
  foreach ($plugins as $name => $plugin) {
    $types = variable_get("lazyloaded_{$name}_types", array());
    if (!empty($types[$node->type])) {
      $names[] = $name;
      if (!empty($plugin->css)) {
        drupal_add_css($plugin->css);
        drupal_add_js(drupal_get_path('module', 'lazyloaded') .'/lazyloaded.js');
      }
      drupal_add_css(drupal_get_path('module', 'lazyloaded') . '/css/lazyloaded.css');
    }
  }
  if ($names) {
    // There are plugins active for this node. Fetch data.
    $plugin_data = db_select('lazyloaded_data', 'd')
      ->fields('d', array('plugin', 'data', 'last_sync'))
      ->condition('d.nid', $node->nid)
      ->execute()
      ->fetchAll();
    $data = array();
    foreach ($plugin_data as $row) {
      $data[$row->plugin] = unserialize($row->data);
    }
    foreach ($names as $name) {
      $html = '';
      $html .= '<div class="lazyloaded lazyloaded-' . check_plain($name) . '" data-plugin="' . check_plain($name) . '" data-nid="' . $node->nid . '">';
      $html .= theme("lazyloaded_{$name}_lazy", array(
        'node' => $node,
        'data' => isset($data[$name]) ? $data[$name] : NULL
      ));
      $html .= '</div>';
      $node->content['lazyloaded']['elements'][$name] = array(
        '#markup' => $html,
      );
    }
  }
}

/**
 * Get the list of plugins.
 */
function lazyloaded_get_plugins() {
  static $plugins = NULL;
  if (!is_null($plugins)) {
    return $plugins;
  }
  $plugins = array();
  foreach (module_implements('lazyloaded') as $module) {
    if ($module_plugins = module_invoke($module, 'lazyloaded')) {
      foreach ($module_plugins as $name => $plugin) {
        $module_plugins[$name]->name = $name;
        $module_plugins[$name]->module = $module;
      }
      $plugins = array_merge($module_plugins, $plugins);
    }
  }
  return $plugins;
}

/**
 * Implements hook_lazyloaded().
 *
 * @see lazyloaded_get_widgets()
 */
function lazyloaded_lazyloaded() {
  $plugins = array();

  $plugins['facebook'] = new stdClass();
  $plugins['facebook']->title = 'Facebook like';
  $plugins['facebook']->data = 'lazyloaded_facebook_data';
  $plugins['facebook']->css = drupal_get_path('module', 'lazyloaded') . '/css/lazyloaded-facebook.css';
  $plugins['facebook']->data_expire_time = 3600;
  $plugins['facebook']->data_on_insert = FALSE;

  $plugins['twitter'] = new stdClass();
  $plugins['twitter']->title = 'Twitter';
  $plugins['twitter']->data = 'lazyloaded_twitter_data';
  $plugins['twitter']->css = drupal_get_path('module', 'lazyloaded') . '/css/lazyloaded-twitter.css';
  $plugins['twitter']->data_expire_time = 3600;
  $plugins['twitter']->data_on_insert = FALSE;

  $plugins['googleplus'] = new stdClass();
  $plugins['googleplus']->title = 'Google+';
  $plugins['googleplus']->data = 'lazyloaded_googleplus_data';
  $plugins['googleplus']->css = drupal_get_path('module', 'lazyloaded') . '/css/lazyloaded-googleplus.css';
  $plugins['googleplus']->data_expire_time = 3600;
  $plugins['googleplus']->data_on_insert = FALSE;

  return $plugins;
}

/**
 * Implements hook_theme().
 */
function lazyloaded_theme() {
  $plugins = lazyloaded_get_plugins();
  $themes = array();

  $themes['lazyloaded_vertical'] = array(
    'render element' => 'element',
    'template' => 'lazyloaded-vertical',
    'path' => drupal_get_path('module', 'lazyloaded') . '/templates',
  );
  $themes['lazyloaded_horizontal'] = array(
    'render element' => 'element',
    'template' => 'lazyloaded-horizontal',
    'path' => drupal_get_path('module', 'lazyloaded') . '/templates',
  );

  foreach ($plugins as $name => $plugin) {
    $themes["lazyloaded_{$name}_lazy"] = array(
      'arguments' => array('node' => NULL, 'data' => NULL),
      'template' => "lazyloaded-$name-lazy",
      'path' => drupal_get_path('module', $plugin->module) . '/templates',
    );
    $themes["lazyloaded_{$name}_loaded"] = array(
      'arguments' => array('node' => NULL, 'data' => NULL),
      'template' => "lazyloaded-$name-loaded",
      'path' => drupal_get_path('module', $plugin->module) . '/templates',
    );
  }

  return $themes;
}

/**
 * Implements hook_cron().
 */
function lazyloaded_cron() {
  module_load_include('inc', 'lazyloaded', 'lazyloaded.cron');
  _lazyloaded_cron();
}

/**
 * Sync data.
 */
function lazyloaded_sync($nid, $plugin) {
  if (!empty($plugin->data)) {
    $function = $plugin->data;
    $data = serialize($function($nid));
    $sql = 'INSERT INTO {lazyloaded_data} (nid, plugin, data, last_sync)
    VALUES (%d, \'%s\', \'%s\', UNIX_TIMESTAMP())
    ON DUPLICATE KEY UPDATE data = \'%s\', last_sync = UNIX_TIMESTAMP()';
    db_query($sql, $nid, $plugin->name, $data, $data);
  }
}

/**
 * Data callback for Facebook plugin.
 */
function lazyloaded_facebook_data($nid) {
  $data = array();

  $url = url("node/$nid", array('absolute' => TRUE));
  $data['count'] = 0;

  $data = drupal_http_request('http://graph.facebook.com/?ids=' . urlencode($url));
  if ($data->code == 200) {
    $json = json_decode($data->data, TRUE);
    $data['count'] = intval($json[$url]['shares']);
  }

  return $data;
}

/**
 * Data callback for Twitter plugin.
 */
function lazyloaded_twitter_data($nid) {
  $data = array();

  $url = url("node/$nid", array('absolute' => TRUE));
  $data['count'] = 0;

  $data = drupal_http_request('http://urls.api.twitter.com/1/urls/count.json?url=' . urlencode($url));
  if ($data->code == 200) {
    $json = json_decode($data->data, TRUE);
    $data['count'] = intval($json['count']);
  }

  return $data;
}

/**
 * Data callback for Google+ plugin.
 */
function lazyloaded_googleplus_data($nid) {
  $data = array();

  $url = url("node/$nid", array('absolute' => TRUE));
  $data['count'] = 0;

  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, "https://clients6.google.com/rpc");
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, '[{"method":"pos.plusones.get","id":"p","params":{"nolog":true,"id":"' . $url . '","source":"widget","userId":"@viewer","groupId":"@self"},"jsonrpc":"2.0","key":"p","apiVersion":"v1"}]');
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
  $curl_results = curl_exec($curl);
  curl_close($curl);
  $json = json_decode($curl_results, true);
  $data['count'] = intval( $json[0]['result']['metadata']['globalCounts']['count'] );

  return $data;
}

function lazyloaded_preprocess_lazyloaded_facebook_lazy(&$variables) {
  $variables['count'] = empty($variables['data']['count']) ? 0 : (int) $variables['data']['count'];
  $url = url('node/' . $variables['node']->nid, array('absolute' => TRUE));
  $variables['url'] = 'http://www.facebook.com/sharer.php?u=' . urlencode($url) . '&t=' . urlencode($variables['node']->title);
}

function lazyloaded_preprocess_lazyloaded_facebook_loaded(&$variables) {
  $variables['count'] = empty($variables['data']['count']) ? 0 : (int) $variables['data']['count'];
  $variables['url'] = url('node/' . $variables['node']->nid, array('absolute' => TRUE));
}

function lazyloaded_preprocess_lazyloaded_twitter_lazy(&$variables) {
  $variables['count'] = empty($variables['data']['count']) ? 0 : (int) $variables['data']['count'];
  $url = url('node/' . $variables['node']->nid, array('absolute' => TRUE));
  $variables['url'] = 'http://twitter.com/?status=' . urlencode($url);
}

function lazyloaded_preprocess_lazyloaded_twitter_loaded(&$variables) {
  $variables['count'] = empty($variables['data']['count']) ? 0 : (int) $variables['data']['count'];
  $variables['url'] = url('node/' . $variables['node']->nid, array('absolute' => TRUE));
}

function lazyloaded_preprocess_lazyloaded_googleplus_lazy(&$variables) {
  $variables['count'] = empty($variables['data']['count']) ? 0 : (int) $variables['data']['count'];
  $url = url('node/' . $variables['node']->nid, array('absolute' => TRUE));
  $variables['url'] = 'https://plus.google.com/share?url=' . urlencode($url);
}

function lazyloaded_preprocess_lazyloaded_googleplus_loaded(&$variables) {
  $variables['count'] = empty($variables['data']['count']) ? 0 : (int) $variables['data']['count'];
  $variables['url'] = url('node/' . $variables['node']->nid, array('absolute' => TRUE));
}
