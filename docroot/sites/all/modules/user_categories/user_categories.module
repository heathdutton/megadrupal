<?php
/**
 * @file
 * Drupal hooks for user_profile_form and user crud.
 */

/**
 * Implements hook_user_categories().
 */
function user_categories_user_categories() {
  $categories = variable_get('user_categories_list', array());
  $categories = array_values($categories);
  return $categories;
}

/**
 * Implements hook_theme()
 */
function user_categories_theme() {
  $themes = array();
  $themes['user_categories_category'] = array(
    'template' => 'user_categories_category',
    'variables' => array(
      'title' => '',
      'category' => array(),
      'name' => '',
    ),
  );
  $themes['user_categories_edit'] = array(
    'render element' => 'form',
  );
  return $themes;
}

/**
 * Implements hook_preprocess_user_categories_category
 */
function template_preprocess_user_categories_category(&$variables) {
  $variables['classes_array'][] = 'category-' . $variables['name'];
  $variables['theme_hook_suggestions'] = array(
    'user_categories_category__' . $variables['name'],
  );
}
/**
 * Implements hook_entity_info().
 * Defining user_category entity.
 */
function user_categories_entity_info() {
  $user_category = array(
    'label' => t('User Category'),
    'base table' => 'user_categories',
    'uri callback' => 'user_categories_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'cat_id',
      'bundle' => 'category',
    ),
    'bundle keys' => array('bundle' => 'category'),
    'bundles' => array(),
  );

  $bundles = &$user_category['bundles'];

  // A bundle for each category.
  $categories = _user_categories();
  foreach ($categories as $category) {
    if ($category['name'] == 'account') {
      continue;
    }
    $bundles[$category['name']] = array(
      'label' => $category['title'],
      'admin' => array(
        'path' => 'admin/config/people/categories/%',
        'real path' => 'admin/config/people/categories/' . $category['name'],
        'bundle argument' => 4,
        'access arguments' => array('administer users'),
      ),
    );
  }
  $info = array(
    'user_category' => $user_category,
  );
  return $info;
}
/**
 * Implements hook_entity_info_alter().
 * Adding user view modes to user_category.
 */
function user_categories_entity_info_alter(&$entity_info) {
  $entity_info['user_category']['view modes'] = $entity_info['user']['view modes'];
}

/**
 * Entity uri
 * provided for hook_entity_info for generating url of the entity.
 */
function user_categories_uri($category) {
  return array('path' => 'user/' . $category->uid);
}

/**
 * Implements hook_menu().
 * Defining entity admin pages.
 */
function user_categories_menu() {
  // List all bundles.
  $items['admin/config/people/categories'] = array(
    'title' => 'Categories',
    'description' => 'Category entites',
    'access arguments' => array('administer users'),
    'page callback' => 'user_categories_manage',
    'file' => 'user_categories.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  // Bundle configuration and field ui.
  $items['admin/config/people/categories/%'] = array(
    'title' => 'configure',
    'page callback' => 'user_categories_configure',
    'page arguments' => array(4),
    'access arguments' => array('administer users'),
    'file' => 'user_categories.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  // Configure a bundle.
  $items['admin/config/people/categories/%/configure'] = array(
    'title' => 'configure',
    'access arguments' => array('administer users'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Load category by uid and category name.
 *
 * @param int $uid
 *   user uid
 * @param string $category
 *   category name
 *
 * @return object
 *   Returns a category object on success or NULL on failure.
 */
function user_categories_category_load($uid, $category) {
  $cat_id = db_select('user_categories', 'uc')
    ->fields('uc', array('cat_id'))
    ->condition('uid', $uid)
    ->condition('category', $category)
    ->execute()->fetchCol();

  if ($cat_id) {
    $cat_id = $cat_id[0];
    $user_category = entity_load('user_category', array($cat_id));
    return $user_category[$cat_id];
  }
  return NULL;
}

/**
 * Load all entities regardless of category property.
 * mainly used for deleting user, since hook_user_categories may change.
 *
 * @param int $uid
 *   user uid
 *
 * @return array
 *   An array of fully loaded category entities indexed by cat_id
 */
function user_categories_loaduser($uid) {
  $cat_ids = db_select('user_categories', 'uc')
    ->fields('uc', array('cat_id'))
    ->condition('uid', $uid)
    ->execute()->fetchCol();
  return entity_load('user_category', $cat_ids);
}

/**
 * Implements hook_form_FORM_ID_alter.
 * Register form will be supported after adding admin configuration page.
 */
function user_categories_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#user_category'] == 'account') {
    return;
  }
  $account = $form_state['user'];
  $user_category = user_categories_category_load($account->uid, $form['#user_category']);
  if (!$user_category) {
    $user_category = new stdClass();
    $user_category->uid = $account->uid;
    $user_category->category = $form['#user_category'];
  }
  // Form hierarchy to hold the category.
  $form['user_categories'] = array(
    '#type' => 'item',
    '#tree' => TRUE,
    '#parents' => array('user_categories'),
  );
  // Category object.
  $form['user_categories']['user_category'] = array(
    '#type' => 'value',
    '#value' => $user_category,
  );
  // Fields.
  field_attach_form('user_category', $user_category, $form['user_categories'], $form_state);
  // Builds the category under the user object.
  $form['#entity_builders'][] = 'user_categories_category_build';
  // No hook_user_validate.
  $form['#validate'][] = 'user_categories_category_validate';
  $form['#theme'][] = 'user_categories_edit__' . $user_category->category;
}

/**
 * Default user_categories_edit
 * theme may override by category using : hook_user_categories_edit__CAT
 */
function theme_user_categories_edit($variables) {
  return drupal_render_children($variables['form']);
}
/**
 * The profile form builds the user entity using
 * entity_form_submit_build_entity.
 * Which in turn will call this function to build category from the
 * user_categories hierarchy.
 * Parameters parallel to entity_form_submit_build_entity.
 */
function user_categories_category_build($entity_type, $entity, $form, $form_state) {
  $form = $form['user_categories'];
  $user_category = $form_state['values']['user_categories']['user_category'];
  entity_form_submit_build_entity('user_category', $user_category, $form, $form_state);
  $entity->user_categories['user_category'] = $user_category;
}

/**
 * Implements hook_user_insert().
 * The category object is built and sent via user_save to _insert and _update.
 */
function user_categories_user_insert(&$edit, $account, $category) {
  if ($category == 'account') {
    return;
  }
  $user_category = $edit['user_categories']['user_category'];
  drupal_write_record('user_categories', $user_category);
  field_attach_insert('user_category', $user_category);
}

/**
 * Implements hook_user_update().
 */
function user_categories_user_update(&$edit, $account, $category) {
  if ($category == 'account') {
    return;
  }
  $user_category = $edit['user_categories']['user_category'];
  if (isset($user_category->cat_id)) {
    drupal_write_record('user_categories', $user_category, array('cat_id'));
    field_attach_update('user_category', $user_category);
  }
  else {
    drupal_write_record('user_categories', $user_category);
    field_attach_insert('user_category', $user_category);
  }
}

/**
 * Category form field validation().
 */
function user_categories_category_validate($form, &$form_state) {
  $user_category = $form_state['values']['user_categories']['user_category'];
  field_attach_form_validate('user_category', $user_category, $form['user_categories'], $form_state);
}

/**
 * Implements hook_user_delete().
 * Given hook_user_categories may change in source , then all entities are
 * loaded from table when deleting and not from the hook.
 */
function user_categories_user_delete($user) {
  $categories = user_categories_loaduser($user->uid);
  foreach ($categories as $cat_id => $user_category) {
    field_attach_delete('user_category', $user_category);
  }
  $cat_ids = array_keys($categories);
  db_delete('user_categories')
    ->condition('cat_id', $cat_ids, 'IN')
    ->execute();
}

/**
 * Implements hook_user_view().
 * views category entity, view_mode is the same that is defined for user entity.
 * there should be a utility function like node_view and user_view to allow
 * viewing categories separately.
 *
 * @see hook_user_view_alter
 */
function user_categories_user_view($user, $view_mode, $langcode) {
  $categories = _user_categories();
  $categories_build = array();
  foreach ($categories as $category) {
    if ($category['name'] != 'account') {
      $name = $category['name'];
      $user_category = user_categories_category_load($user->uid, $name);
      if (!$user_category) {
        continue;
      }
      $category_view = user_categories_category_view($user_category, $view_mode, $langcode);
      $categories_build[$name] = array(
	'#theme' => 'user_categories_category',
	'#title' => check_plain($category['title']),
	'#category' => $category_view,
	'#name' => $name,
      );
    }
  }
  if ($categories_build) {
    $user->content['user_categories'] = $categories_build;
  }
}

/**
 * Category entity view
 * @param object $user_category
 *   fully loaded category entity
 * @param string $view_mode
 *   entity view mode
 * @param string $langcode
 *   optional language code ,defaults to global language of current request
 *
 * @return array
 *   the category's render array include title and fields
 *
 * @see hook_field_attach_view_alter
 */
function user_categories_category_view($user_category, $view_mode = 'full', $langcode = NULL) {
  $entities = array($user_category->cat_id => $user_category);
  field_attach_prepare_view('user_category', $entities, $view_mode, $langcode);
  entity_prepare_view('user_category', $entities, $langcode);
  $fields = field_attach_view('user_category', $user_category, $view_mode, $langcode);
  return $fields;
}
