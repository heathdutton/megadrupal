<?php

/**
 * @file
 * Tests for the commerce_subscription module.
 */

class CommerceSubscriptionTestCase extends DrupalWebTestCase {

  function setUp() {
    parent::setUp('commerce', 'commerce_product', 'commerce_product_reference', 'commerce_subscription', 'rules');
  }

  function createTestUser() {
    // Make a user.
    $account = user_save(FALSE, array(
      'name' => 'test',
      'pass' => 'foo',
      'mail' => 'test@example.com',
      'status' => 1,
    ));

    return $account;
  }
}

/**
 * Test the Rules integration.
 */
class CommerceSubscriptionRulesTestCase extends CommerceSubscriptionTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Subscription rules integration',
      'description' => 'Tests the susbscription rules integration.',
      'group' => 'Commerce Subscription',
    );
  }


  /**
   * Test if we can call commerce_subscription_rules_update_subscription_status in isolation
   */

  function testRulesUpdateSubscriptionStatus() {

    $membership = $this->getTestSubscription();

    commerce_subscription_save($membership);

    // This is what we're actually here to test:
    commerce_subscription_rules_update_subscription_status($membership->subscription_id, COMMERCE_SUBSCRIPTION_FINISHED);

    // Reload it so we can see if the data's saved.
    $membership = commerce_subscription_load($membership->subscription_id);

    $this->assertTrue(($membership->status == COMMERCE_SUBSCRIPTION_FINISHED), 'Subscription status updated successfully');
  }

  /**
   * Test if we can call commerce_subscription_rules_update_subscription_status from rules
   */

  function testRulesUpdateSubscriptionStatusIntegration() {

    $membership = $this->getTestSubscription();

    commerce_subscription_save($membership);

    $rule = rule();
    $rule->action(
      'commerce_subscription_update_subscription_status',
      array(
        'subscription_id' => $membership->subscription_id,
        'status' => COMMERCE_SUBSCRIPTION_FINISHED,
      )
    );

    $rule->access();
    $rule->integrityCheck()->execute();

    /*
    $text = RulesLog::logger()->render();
    debug($text);
    */

    // Reload it so we can see if the rule ran
    $membership = commerce_subscription_load($membership->subscription_id);

    $this->assertTrue(($membership->status == COMMERCE_SUBSCRIPTION_FINISHED), 'Subscription status updated successfully via rules');
  }

  function getTestSubscription() {

    $membership = commerce_subscription_new('membership');

    $membership->subscription_role[LANGUAGE_NONE][0]['rid'] = 1;
    $membership->price        = rand(1, 500);
    $membership->product_id   = 1;
    $membership->uid          = 1;
    $membership->period       = rand(1, 10000);
    $membership->trial_period = rand(1, 10000);

    return $membership;
  }
}

/**
 * Test the Entity integration.
 */
class CommerceSubscriptionProductTestCase extends CommerceSubscriptionTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Subscription product entity integration',
      'description' => 'Tests the subscription product entity integration.',
      'group' => 'Commerce Subscription',
    );
  }

  function testEntityMetadataWrappers() {

    // Create a products without a trial period
    $product = commerce_product_new('subscription');
    $product_wrapper = entity_metadata_wrapper('commerce_product', $product);

    // Fields provided by commerce.module:
    $product_wrapper->title->set('Test product 1');
    $product_wrapper->sku->set('TEST-PROD-1');
    $product_wrapper->uid->set(2);
    $product_wrapper->commerce_price->amount->set(100);
    $product_wrapper->commerce_price->currency_code->set('USD');

    // Fields provided by commerce_subscription.module:
    $product_wrapper->subscription_role->set(3);
    $product_wrapper->subscription_period->set(7);
    $product_wrapper->subscription_units->set(4);
    $product_wrapper->subscription_trial_period->set(7);
    $product_wrapper->subscription_trial_units->set(4);
    $product_wrapper->subscription_trial_2_period->set(7);
    $product_wrapper->subscription_trial_2_units->set(4);
    $product_wrapper->subscription_recurs->set(1);
    $product_wrapper->subscription_recur_limit->set(1234);

    // Save our new subscription product to the DB
    commerce_product_save($product);

    $product2 = commerce_product_load($product->product_id);
    $product_wrapper_2 = entity_metadata_wrapper('commerce_product', $product2);

    // Price is a smidge different:
    $price2 = $product_wrapper_2->commerce_price->value();

    // Check the values match
    $this->assertTrue($product_wrapper_2->title->value()                       == 'Test product 1', 'Title matches');
    $this->assertTrue($product_wrapper_2->sku->value()                         == 'TEST-PROD-1',    'SKU matches');
    $this->assertTrue($product_wrapper_2->uid->value()                         == 2,                'UID matches');
    $this->assertTrue($price2['amount']                                        == 100,              'Price amount matches');
    $this->assertTrue($price2['currency_code']                                 == 'USD',            'Price currency matches');
    $this->assertTrue($product_wrapper_2->subscription_role->value()           == 3,                'Role matches');
    $this->assertTrue($product_wrapper_2->subscription_period->value()         == 7,                'Period matches');
    $this->assertTrue($product_wrapper_2->subscription_units->value()          == 4,                'Units matches');
    $this->assertTrue($product_wrapper_2->subscription_trial_period->value()   == 7,                'Trial period matches');
    $this->assertTrue($product_wrapper_2->subscription_trial_units->value()    == 4,                'Trial units matches');
    $this->assertTrue($product_wrapper_2->subscription_trial_2_period->value() == 7,                'Trial period 2 matches');
    $this->assertTrue($product_wrapper_2->subscription_trial_2_units->value()  == 4,                'Trial units 2 matches');
    $this->assertTrue($product_wrapper_2->subscription_recurs->value()         == 1,                'Recurs matches');
    $this->assertTrue($product_wrapper_2->subscription_recur_limit->value()    == 1234,             'Recur limit matches');
  }
}

/**
 * Test the Entity integration.
 */
class CommerceSubscriptionEntityTestCase extends CommerceSubscriptionTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Subscription entity integration',
      'description' => 'Tests the subscription entity integration.',
      'group' => 'Commerce Subscription',
    );
  }

  function testEntityMetadataWrappers() {

    $membership = commerce_subscription_new('membership');

    // Make a new subscription entity:
    $membership_wrapper = entity_metadata_wrapper('commerce_subscription', $membership);
    $membership_wrapper->role->set(rand(1, 500));
    $membership_wrapper->price->set(array(
      'amount' => rand(1, 500),
      'currency_code' => 'USD',
    ));
    $membership_wrapper->product->set(rand(1, 500));
    $membership_wrapper->uid->set(rand(1, 500));

    $now = date('U');
    $period = rand(1, 500);

    $membership_wrapper->start_time->set(date(DATE_FORMAT_DATETIME, $now));
    $membership_wrapper->end_time->set(date(DATE_FORMAT_DATETIME, $now + $period));
    $membership_wrapper->trial_end_time->set(date(DATE_FORMAT_DATETIME, $now));

    $membership_wrapper->status->set(COMMERCE_SUBSCRIPTION_ACTIVE);

    commerce_subscription_save($membership);

    // Load another copy
    $membership_2 = commerce_subscription_load($membership->subscription_id);
    $membership_wrapper_2 = entity_metadata_wrapper('commerce_subscription', $membership_2);

    // Check the values match
    $this->assertTrue(($membership_wrapper->role->value()           == $membership_wrapper_2->role->value()),           'Role matches');
    $this->assertTrue(($membership_wrapper->product->value()        == $membership_wrapper_2->product->value()),        'Product ID matches');
    $this->assertTrue(($membership_wrapper->uid->value()            == $membership_wrapper_2->uid->value()),            'UID matches');
    $this->assertTrue(($membership_wrapper->start_time->value()     == $membership_wrapper_2->start_time->value()),     'Start time matches');
    $this->assertTrue(($membership_wrapper->end_time->value()       == $membership_wrapper_2->end_time->value()),       'End time matches');
    $this->assertTrue(($membership_wrapper->trial_end_time->value() == $membership_wrapper_2->trial_end_time->value()), 'Trial end time matches');
    $this->assertTrue(($membership_wrapper->status->value()         == $membership_wrapper_2->status->value()),         'Status matches');

    // Price is a smidge different:
    $price1 = $membership_wrapper->price->value();
    $price2 = $membership_wrapper_2->price->value();
    $this->assertTrue(($price1['amount'] == $price2['amount']) && ($price1['currency_code'] == $price2['currency_code']), 'Price matches');
  }
}

/**
 * Test the Entity integration.
 */
class CommerceSubscriptionRecurranceEntityTestCase extends CommerceSubscriptionTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Subscription recurrance entity integration',
      'description' => 'Tests the subscription recurrance entity integration.',
      'group' => 'Commerce Subscription',
    );
  }

  function testEntityMetadataWrappers() {

    // Make a new entity:
    $recurrance = commerce_subscription_recurrance_new();
    $recurrance_wrapper = entity_metadata_wrapper('commerce_subscription_recurrance', $recurrance);

    $now = date('U');
    $period = rand(1, 500);

    $recurrance_wrapper->start_time->set(date(DATE_FORMAT_DATETIME, $now));
    $recurrance_wrapper->end_time->set(date(DATE_FORMAT_DATETIME, $now + $period));
    $recurrance_wrapper->type->set(rand(1, 500));
    $recurrance_wrapper->sequence->set(rand(1, 500));
    $recurrance_wrapper->payment->set(rand(1, 500));
    $recurrance_wrapper->subscription->set(rand(1, 500));

    commerce_subscription_recurrance_save($recurrance);

    // Load another copy
    $recurrance_2 = commerce_subscription_recurrance_load($recurrance->subscription_recurrance_id);
    $recurrance_wrapper_2 = entity_metadata_wrapper('commerce_subscription_recurrance', $recurrance_2);

    // Check the values match
    $this->assertTrue(($recurrance_wrapper->start_time->value()   == $recurrance_wrapper_2->start_time->value()),   'Role matches');
    $this->assertTrue(($recurrance_wrapper->end_time->value()     == $recurrance_wrapper_2->end_time->value()),     'Product ID matches');
    $this->assertTrue(($recurrance_wrapper->type->value()         == $recurrance_wrapper_2->type->value()),         'UID matches');
    $this->assertTrue(($recurrance_wrapper->sequence->value()     == $recurrance_wrapper_2->sequence->value()),        'Start time matches');
    $this->assertTrue(($recurrance_wrapper->payment->value()      == $recurrance_wrapper_2->payment->value()),      'End time matches');
    $this->assertTrue(($recurrance_wrapper->subscription->value() == $recurrance_wrapper_2->subscription->value()), 'Trial end time matches');
  }
}

/**
 * Test the Role granting/removal
 */
class CommerceSubscriptionRolesTestCase extends CommerceSubscriptionTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Subscription roles grant',
      'description' => 'Tests if we can grant roles correctly.',
      'group' => 'Commerce Subscription',
    );
  }

  function testRoles() {

    // Make a user:
    $account = $this->createTestUser();

    // Make a role:
    $role = new stdClass();
    $role->name = 'member';
    user_role_save($role);

    // Grant the role:
    commerce_subscription_grant_role($account->uid, $role->rid);

    // Reload user from the DB:
    $account = user_load($account->uid, TRUE);

    $this->assertTrue(isset($account->roles[$role->rid]), 'Granted role');

    // Remove the role:
    commerce_subscription_grant_role($account->uid, $role->rid, FALSE);

    // Reload user from the DB:
    $account = user_load($account->uid, TRUE);

    $this->assertFalse(isset($account->roles[$role->rid]), 'Removed role');
  }
}

/**
 * Test the status change code
 */
class CommerceSubscriptionStatusChangeTestCase extends CommerceSubscriptionTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Subscription status change',
      'description' => 'Tests the logic around status changes',
      'group' => 'Commerce Subscription',
    );
  }

  function testStatusChangeNoTrial() {

    // Make a role to sell
    $role = new stdClass();
    $role->name = 'member';
    user_role_save($role);

    // Create a product without a trial period
    $product_with_trial = commerce_product_new('subscription');
    $product_wrapper = entity_metadata_wrapper('commerce_product', $product_with_trial);

    $product_wrapper->title->set('Test product 1');
    $product_wrapper->sku->set('TEST-PROD-1');
    $product_wrapper->uid->set(1);
    $product_wrapper->subscription_role->set($role->rid);
    $product_wrapper->subscription_period->set(86400);
    $product_wrapper->subscription_trial_period->set(0);
    $product_wrapper->commerce_price->amount->set(100);
    $product_wrapper->commerce_price->currency_code->set('USD');

    commerce_product_save($product_with_trial);

    // Create a user
    $account = $this->createTestUser();

    $membership = commerce_subscription_create_subscription($product_with_trial, $account->uid);

    // Update the subscription status to see if it kicks off properly:
    commerce_subscription_rules_update_subscription_status($membership->subscription_id, COMMERCE_SUBSCRIPTION_ACTIVE);

    // Reload the subscription from the DB:
    $membership = commerce_subscription_load($membership->subscription_id);
    $membership_wrapper = entity_metadata_wrapper('commerce_subscription', $membership);

    // Are the timings correct?
    $this->assertTrue($membership_wrapper->start_time->value()     == date(DATE_FORMAT_DATETIME, REQUEST_TIME), 'Start time correct');
    $this->assertTrue($membership_wrapper->trial_end_time->value() == date(DATE_FORMAT_DATETIME, REQUEST_TIME), 'Trial end time correct');
    $this->assertTrue($membership_wrapper->end_time->value()       == date(DATE_FORMAT_DATETIME, REQUEST_TIME + 86400), 'End time correct');

    // Reload the user from the db
    $account = user_load($account->uid, TRUE);

    // Did the user get their role?
    $this->assertTrue(isset($account->roles[$role->rid]), 'Role was granted');

    // Update the subscription status to see if it ends properly:
    commerce_subscription_rules_update_subscription_status($membership->subscription_id, COMMERCE_SUBSCRIPTION_FINISHED);

    // Reload the user from the db
    $account = user_load($account->uid, TRUE);

    // Did the user get the role removed?
    $this->assertFalse(isset($account->roles[$role->rid]), 'Role was removed');
  }
}

