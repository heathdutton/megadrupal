<?php

/**
 * @file
 * Provides an example payment method for Drupal Commerce for PayPal
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_subscription_paypal_wps_commerce_payment_method_info() {
  $payment_methods = array();

  $icons = commerce_subscription_paypal_wps_icons();
  $display_title = t('!logo PayPal - pay securely without sharing your financial information', array('!logo' => $icons['paypal']));
  $display_title .= '<div class="commerce-paypal-icons"><span class="label">' . t('Includes:') . '</span>' . implode(' ', $icons) . '</div>';

  $payment_methods['commerce_subscription_paypal_wps'] = array(
    'title' => t('PayPal WPS subscription payment'),
    'description' => t('Payment method for PayPal WPS using IPN.'),
    'active' => TRUE,
    'base' => 'commerce_subscription_paypal_wps',
    'short_title' => t('PayPal'),
    'display_title' => $display_title,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_subscription_paypal_wps_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $default_currency = variable_get('commerce_default_currency', 'USD');

  $settings = (array) $settings + array(
    'business' => '',
    'currency_code' => in_array($default_currency, array_keys(commerce_subscription_paypal_wps_currencies())) ? $default_currency : 'USD',
    'language' => 'US',
    'server' => 'sandbox',
    'payment_action' => 'sale',
    'ipn_logging' => 'notification',
  );

  $form['business'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal e-mail address'),
    '#description' => t('The e-mail address you use for the PayPal account you want to receive payments.'),
    '#default_value' => $settings['business'],
    '#required' => TRUE,
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => commerce_subscription_paypal_wps_currencies(),
    '#default_value' => $settings['currency_code'],
  );
  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('PayPal login page language'),
    '#options' => commerce_subscription_paypal_wps_languages(),
    '#default_value' => $settings['language'],
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('PayPal server'),
    '#options' => array(
      'sandbox' => ('Sandbox - use for testing, requires a PayPal Sandbox account'),
      'live' => ('Live - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );
  $form['payment_action'] = array(
    '#type' => 'radios',
    '#title' => t('Payment action'),
    '#options' => array(
      'sale' => t('Sale - authorize and capture the funds at the time the payment is processed'),
      'authorization' => t('Authorization - reserve funds on the card to be captured later through your PayPal account'),
    ),
    '#default_value' => $settings['payment_action'],
  );
  $form['ipn_logging'] = array(
    '#type' => 'radios',
    '#title' => t('IPN logging'),
    '#options' => array(
      'notification' => t('Log notifications during IPN validation and processing.'),
      'full_ipn' => t('Log notifications with the full IPN during validation and processing (used for debugging).'),
    ),
    '#default_value' => $settings['ipn_logging'],
  );

  return $form;
}

/**
 * Returns an array of PayPal payment method icon img elements.
 *
 * @return
 *   The array of themed payment method icons keyed by name: visa, mastercard,
 *   amex, discover, echeck, paypal
 */
function commerce_subscription_paypal_wps_icons() {
  $icons = array();

  $payment_methods = array(
    'visa' => t('Visa'),
    'mastercard' => t('Mastercard'),
    'amex' => t('American Express'),
    'discover' => t('Discover'),
    'paypal' => t('PayPal'),
  );

  foreach ($payment_methods as $name => $title) {
    $variables = array(
      'path' => drupal_get_path('module', 'commerce_subscription_paypal_wps') . '/images/' . $name . '.gif',
      'title' => $title,
      'alt' => $title,
      'attributes' => array(
        'class' => array('commerce-paypal-icon'),
      ),
    );
    $icons[$name] = theme('image', $variables);
  }

  return $icons;
}

/**
 * Payment method callback: adds a message and CSS to the submission form.
 *
 * @see commerce_subscription_paypal_wps_commerce_payment_method_info()
 */
function commerce_subscription_paypal_wps_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['paypal_wps_information'] = array(
    '#markup' => '<span class="commerce-subscription-paypal-wps-info">' . t('(Continue with checkout to complete payment via Paypal.)') . '</span>',
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'commerce_subscription_paypal_wps') . '/theme/commerce_subscription_paypal_wps.css'),
    ),
  );

  return $form;
}

/**
 * Payment method callback: A wrapper around the general purpose WPS form.
 *
 * @see commerce_subscription_paypal_wps_commerce_payment_method_info()
 */
function commerce_subscription_paypal_wps_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['business'])) {
    drupal_set_message(t('PayPal WPS is not configured for use. No PayPal e-mail address has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_susbcription_paypal_wps_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Builds a Website Payments Standard form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - server: which server to use, either sandbox or live
 *   - business: the PayPal e-mail address the payment submits to
 *   - cancel_return: the URL PayPal should send the user to on cancellation
 *   - return: the URL PayPal should send the user to on successful payment
 *   - currency_code: the PayPal currency code to use for this payment if the
 *     total for the order is in a non-PayPal supported currency
 *   - language: the PayPal language code to use on the payment form
 *   - payment_action: the PayPal payment action to use: sale, authorization,
 *     or order
 *   - payment_method: optionally the name of the Commerce payment method to
 *     include in the IPN notify_url
 *
 * @return
 *   A renderable form array.
 */
function commerce_susbcription_paypal_wps_order_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  // Build the data array that will be translated into hidden form values.
  $data = array(
    // Specify the checkout experience to present to the user.
    'cmd' => '_cart',

    // Signify we're passing in a shopping cart from our system.
    'upload' => 1,

    // The store's PayPal e-mail address
    'business' => $settings['business'],

    // The path PayPal should send the IPN to
    'notify_url' => commerce_subscription_paypal_wps_ipn_url($settings['payment_method']),

    // Set the correct character set
    'charset' => 'utf-8',

    // Do not display a comments prompt at PayPal
    'no_note' => 1,

    // Do not display a shipping address prompt at PayPal
    'no_shipping' => 1,

    // Return to the review page when payment is canceled
    'cancel_return' => $settings['cancel_return'],

    // Return to the payment redirect page for processing successful payments
    'return' => $settings['return'],

    // Return to this site with payment data in the POST
    'rm' => 2,

    // The type of payment action PayPal should take with this order
    'paymentaction' => $settings['payment_action'],

    // Set the currency and language codes
    'currency_code' => in_array($currency_code, array_keys(commerce_subscription_paypal_wps_currencies())) ? $currency_code : $settings['currency_code'],
    'lc' => $settings['language'],

    // Use the timestamp to generate a unique invoice number
    //'invoice' => commerce_paypal_ipn_invoice($order),

    // Define a single item in the cart representing the whole order
    'amount_1' => round(commerce_currency_amount_to_decimal($amount, $currency_code), 2),
    'item_name_1' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
    'on0_1' => t('Product count'),
    'os0_1' => commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()),
  );

  $form['#action'] = commerce_subscription_paypal_wps_server_url($settings['server']);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to PayPal'),
  );

  return $form;
}

/**
 * Returns the URL to the specified PayPal WPS server.
 *
 * @param $server
 *   Either sandbox or live indicating which server to get the URL for.
 *
 * @return
 *   The URL to use to submit requests to the PayPal WPS server.
 */
function commerce_subscription_paypal_wps_server_url($server) {
  switch ($server) {
    case 'sandbox':
      return 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    case 'live':
      return 'https://www.paypal.com/cgi-bin/webscr';
  }
}

/**
 * Returns the IPN URL.
 *
 * @param $method_id
  *   Optionally specify a payment method ID to include in the URL.
 */
function commerce_subscription_paypal_wps_ipn_url($method_id = NULL) {
  $parts = array(
    'commerce_paypal',
    'ipn',
  );

  if (!empty($method_id)) {
    $parts[] = $method_id;
  }

  return url(implode('/', $parts), array('absolute' => TRUE));
}


/**
 * Returns an array of all possible language codes.
 */
function commerce_subscription_paypal_wps_languages() {
  return drupal_map_assoc(array('AU', 'DE', 'FR', 'IT', 'GB', 'ES', 'US'));
}

/**
 * Returns an array of all possible currency codes.
 */
function commerce_subscription_paypal_wps_currencies() {
  return drupal_map_assoc(array('AUD', 'BRL', 'CAD', 'CHF', 'CZK', 'DKK', 'EUR', 'GBP', 'HKD', 'HUF', 'ILS', 'JPY', 'MXN', 'MYR', 'NOK', 'NZD', 'PHP', 'PLN', 'SEK', 'SGD', 'THB', 'TWD', 'USD'));
}

/**
 * Implementation of hook_entity_info()
 */
function commerce_subscription_paypal_wps_entity_info() {
  $entity_info = array();

  $entity_info['commerce_subscription'] = array(
    'label' => t('Subscription'),
    'controller class' => 'EntityAPIController',
    'base table' => 'commerce_subscription_paypal_wps',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'subscription_id',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
  );

  return $entity_info;
}

/**
 * Implementation of hook_subscription_product_type_info()
 */
function commerce_subscription_paypal_wps_subscription_product_type_info() {
  $fields = array('paypal_wps' => array(
    'payment_provider_name'         => 'PayPal WPS Subscription',
    'payment_provider_description'  => 'Subscription product managed by PayPal website payments standard (supports trial periods, weekly, monthly & yearly subscriptions).',
    'payment_provider_help'         => '',
    'fields'                        => array(
      'form' => array(
        'test' => array(
          'label' => t('Test Field'),
          'description' => t('Test Field Description'),
          'weight' => -10,
        ),
      ),
    ),
  ));

  return $fields;
}

/**
 * Implements hook_enable().
 *
 * The module commerce_product will have created our subscription bundle. We'll
 * add a few more fields that we require here.
 */
function commerce_subscription_paypal_wps_enable() {
  // Create the fields first:
  commerce_subscription_paypal_wps_set_up_fields();

  // Then create field instances:
  commerce_subscription_paypal_wps_set_up_field_instances();
}

/**
 * Creates the additional fields.
 */
function commerce_subscription_paypal_wps_set_up_fields() {
  $fields = commerce_subscription_paypal_wps_get_default_fields();

  foreach ($fields as $field) {
    // Check if this field exists already.
    if (!field_info_field($field['field_name'])) {
      // If not, create it.
      field_create_field($field);
    }
  }
}

/**
 * Defines the additional subscription fields.
 *
 * @return array
 *   Array of fields formatted for field_create_field().
 */
function commerce_subscription_paypal_wps_get_default_fields() {
  $fields = array(
    array(
      'field_name' => 'subscription_role',
      'type' => 'rolereference',
      'settings' => array(
        'referenceable_roles' => user_roles(),
      ),
    ),
    array(
      'field_name' => 'subscription_period',
      'type' => 'number_integer',
    ),
    array(
      'field_name' => 'subscription_units',
      'type' => 'number_integer',
    ),
    array(
      'field_name' => 'subscription_trial_period',
      'type' => 'number_integer',
      'cardinality' => 2,
    ),
    array(
      'field_name' => 'subscription_trial_units',
      'type' => 'number_integer',
      'cardinality' => 2,
    ),
    array(
      'field_name' => 'subscription_recurs',
      'type' => 'list_boolean',
    ),
    array(
      'field_name' => 'subscription_recur_limit',
      'type' => 'number_integer',
    ),

    /*
    array(
      'field_name' => 'subscription_start_time',
      'type' => 'datetime',
    ),
    array(
      'field_name' => 'subscription_end_time',
      'type' => 'datetime',
    ),
    array(
      'field_name' => 'subscription_trial_end_time',
      'type' => 'datetime',
    ),
    */

    array(
      'field_name' => 'subscription_product',
      'type' => 'commerce_product_reference',
      'locked' => TRUE,
    ),
  );

  return $fields;
}

/**
 * Set up field instances.
 */
function commerce_subscription_paypal_wps_set_up_field_instances() {
  $instances = commerce_subscription_paypal_wps_get_default_field_instances();

  // Set up any instances that don't already exist.
  foreach ($instances as $instance) {
    if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }

  // Product module contains a handy function for adding a price field instance,
  // so we'll use it to add our trial period prices.

  // Cost of trial period 1:
  commerce_price_create_instance('subscription_trial_price', 'commerce_product', 'subscription', t('Trial period price'), 0, 'calculated_sell_price');

  // Cost of trial period 2:
  commerce_price_create_instance('subscription_trial_2_price', 'commerce_product', 'subscription', t('Trial period 2 price'), 0, 'calculated_sell_price');
}

/**
 * Get existing field instances.
 *
 * @return array
 *   Array of instances formatted for field_create_instance().
 */
function commerce_subscription_paypal_wps_get_default_field_instances() {
  // Instances for subscription product:
  $instances = array(
    array(
      'field_name' => 'subscription_role',
      'entity_type' => 'commerce_product',
      'bundle' => 'paypal_wps',
      'label' => t('Role'),
      'description' => 'The role that buying this subscription will give the user who purchased it.',
      'required' => TRUE,
    ),
    array(
      'field_name' => 'subscription_period',
      'entity_type' => 'commerce_product',
      'bundle' => 'paypal_wps',
      'label' => t('Period'),
      'description' => 'The length of time that a single period of this subscription runs for, in the units chosen by the field below.',
      'required' => TRUE,
    ),
    array(
      'field_name' => 'subscription_units',
      'entity_type' => 'commerce_product',
      'bundle' => 'paypal_wps',
      'label' => t('Period units'),
      'description' => 'The units the subscription period is expressed in. 1=Days, 2=Weeks, 3=Months, 4=Years',
      'required' => TRUE,
      'widget' => array(
        'type' => 'list_text',
        'options' => array(
          COMMERCE_SUBSCRIPTION_DURATION_DAYS   => 'Days',
          COMMERCE_SUBSCRIPTION_DURATION_WEEKS  => 'Weeks',
          COMMERCE_SUBSCRIPTION_DURATION_MONTHS => 'Months',
          COMMERCE_SUBSCRIPTION_DURATION_YEARS  => 'Years',
        ),
      ),
    ),
    array(
      'field_name' => 'subscription_trial_period',
      'entity_type' => 'commerce_product',
      'bundle' => 'paypal_wps',
      'label' => t('Trial Period'),
      'description' => 'If the subscription should have a trial period, enter the length in here. Units are as per "Trial period units".',
      'required' => TRUE,
    ),
    array(
      'field_name' => 'subscription_trial_units',
      'entity_type' => 'commerce_product',
      'bundle' => 'paypal_wps',
      'label' => t('Trial period units'),
      'description' => 'The units the subscription trial period is expressed in. 1=Days, 2=Weeks, 3=Months, 4=Years',
      'required' => TRUE,
      /* @todo - Nice options. Below code doesn't work.
      'widget' => array(
        'type' => 'options_select',
        'options' => array(
          COMMERCE_SUBSCRIPTION_DURATION_DAYS   => 'Days',
          COMMERCE_SUBSCRIPTION_DURATION_WEEKS  => 'Weeks',
          COMMERCE_SUBSCRIPTION_DURATION_MONTHS => 'Months',
          COMMERCE_SUBSCRIPTION_DURATION_YEARS  => 'Years',
        ),
      ),
      */
    ),
    array(
      'field_name' => 'subscription_recurs',
      'entity_type' => 'commerce_product',
      'bundle' => 'paypal_wps',
      'label' => t('Subscription recurs'),
      'description' => 'This subscription recurs.',
      'required' => FALSE,
      'widget' => array(
        'type' => 'options_onoff',
      ),
    ),
    array(
      'field_name' => 'subscription_recur_limit',
      'entity_type' => 'commerce_product',
      'bundle' => 'paypal_wps',
      'label' => t('Subscription recur limit'),
      'description' => 'If the subscription should recur a limited number of times, enter the number here. To recur an unlimited number of times, enter zero here.',
      'required' => TRUE,
    ),
  );

  return $instances;
}

