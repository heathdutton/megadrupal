<?php
/**
 * @file
 * Using tokens, users can specify an arbitrary value to replace the default
 * weight values of items such as taxonomy terms and menu items.
 *
 * The module evaluates the pattern supplied by the user then stores the value
 * as the weight for that item.  Thus, weights may be manually overridden by
 * the user and reset to alphabetical order by clearing the custom weights.
 */

define('AUTOWEIGHT_SKIP_ITEM', 0);
define('AUTOWEIGHT_RESET_ITEM', 1);

/**
 * Save an autoweight record.
 */
function autoweight_save($module, $name, array $autoweight) {
  variable_set("autoweight_{$module}_{$name}", $autoweight);
}

/**
 * Determine if we are performing substitutions on a given object.
 */
function autoweight_get_setting($module, $name) {
  $autoweight = variable_get("autoweight_{$module}_{$name}", array());
  return (empty($autoweight) || empty($autoweight['pattern']) ? FALSE : $autoweight);
}

/**
 * Invoke the appropriate module's sorting function.
 */
function autoweight_sort($autoweight) {
  module_invoke($autoweight['module'], 'autoweight_sort', $autoweight);
}

/**
 * Process the token replacement and filter the value to the proper result.
 */
function autoweight_process_weight($autoweight, $data, $original = NULL) {
  // Get the token replaced value.
  $weight = token_replace($autoweight['pattern'], $data);

  // Strip out tokens that were not replaced.
  $weight = preg_replace('/\[[a-z0-9\:\-\_\,]*\]/i', '', $weight);

  // Remove any other non-numeric characters
  $weight = preg_replace('/[^0-9]/e', '', $weight);

  // If the resulting value is empty, follow the settings chosen by the
  // user as to whether the value should be changed.
  if (empty($weight) && !is_numeric($weight) && $autoweight['fallback'] == AUTOWEIGHT_SKIP_ITEM) {
    return (int) $original;
  }
  else {
    return (int) $weight;
  }
}

/**
 * Provide the form fields to append to an existing form to collect an
 * autoweight item.
 */
function autoweight_add_collection_form(&$form, &$form_state, $autoweight, $module, $name, $token_types = array()) {
  $token_types[] = 'random';

  $form['#submit'][] = 'autoweight_pattern_submit';

  $form['autoweight'] = array(
    '#type' => 'fieldset',
    '#title' => t('Auto Weight'),
    '#collapsible' => TRUE,
    '#collapsed' => (empty($autoweight['label']) && empty($autoweight['pattern'])),
    '#tree' => TRUE,
  );
  $form['autoweight']['pattern'] = array(
    '#type' => 'textfield',
    '#title' => t('Auto Weight Pattern'),
    '#description' => t('Use the tokens below to generate a pattern that can be evaulated to set the weight for each item.'),
    '#default_value' => (isset($autoweight['pattern']) ? $autoweight['pattern'] : ''),
  );
  $form['autoweight']['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#description' => t('Create a label for this pattern.'),
    '#default_value' => (isset($autoweight['label']) ? $autoweight['label'] : ''),
  );
  $form['autoweight']['fallback'] = array(
    '#type' => 'select',
    '#title' => t('Fallback Value'),
    '#description' => t('If the pattern returns empty, should the weight be changed?'),
    '#options' => array(
      AUTOWEIGHT_SKIP_ITEM  => t('Don\'t change weight value'),
      AUTOWEIGHT_RESET_ITEM => t('Reset weight to 0'),
    ),
    '#default_value' => (isset($autoweight['fallback']) ? $autoweight['fallback'] : AUTOWEIGHT_SKIP_ITEM),
  );
  $form['autoweight']['tokens'] = array(
    '#type' => 'fieldset',
    '#title' => t('Replacement Patterns'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['autoweight']['tokens']['tree'] = array(
    '#type' => 'markup',
    '#markup' => theme('token_tree', array('token_types' => $token_types, 'global_types' => FALSE)),
  );
  $form['autoweight']['name'] = array(
    '#type' => 'hidden',
    '#value' => $name,
  );
  $form['autoweight']['module'] = array(
    '#type' => 'hidden',
    '#value' => $module,
  );
}

/**
 * Submit handler for the pattern creation form section.
 */
function autoweight_pattern_submit($form, &$form_state) {
  autoweight_save($form_state['values']['autoweight']['module'], $form_state['values']['autoweight']['name'], $form_state['values']['autoweight']);
}

/**
 * Add a sorting button to a form.
 */
function autoweight_add_sort_button(&$form, &$form_state, $autoweight) {
  $form_state['#autoweight'] = $autoweight;
  $form_state['#autoweight_submit_label'] = t('Sort by !label', array('!label' => filter_xss($autoweight['label'])));
  $form['#submit'][] = 'autoweight_sort_submit';
  $form['actions']['autoweight'] = array(
    '#type' => 'submit',
    '#value' => $form_state['#autoweight_submit_label'],
  );
}

/**
 * Submit handler for sorting button.
 */
function autoweight_sort_submit($form, &$form_state) {
  if ($form_state['values']['op'] == $form_state['#autoweight_submit_label']) {
    autoweight_sort($form_state['#autoweight']);
  }
}
