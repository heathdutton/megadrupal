<?php

/**
 * @file
 * Multi-Step Registration module main file.
 */

/**
 * The first registration step.
 */
define('STEP_REGISTER', 'register');

/**
 * Tell if Profile2 module is enabled.
 */
define('STEP_PROFILE2', module_exists('profile2'));

if (STEP_PROFILE2) {
  module_load_include('inc', 'step', 'includes/profile2');
}

/**
 * Implements hook_help().
 */
function step_help($path, $arg) {
  switch ($path) {
    case 'admin/help#step':
      return '<p>' . t("With Multi-Step Registration module you can create multi-step wizard registration forms. Each step of the wizard can be configured to expose one ore many Profile2 types.") . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function step_theme() {
  return array(
    'step_list_form' => array(
      'render element' => 'form',
      'file' => 'includes/theme.inc',
    ),
    'step_description' => array(
      'file' => 'includes/theme.inc',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function step_menu_alter(&$items) {
  $items['user/register']['page callback'] = 'step_wizard';
  $items['user/register']['page arguments'] = array(STEP_REGISTER);
  $items['user/register']['file path'] = drupal_get_path('module', 'step') . '/includes';
  $items['user/register']['file'] = 'wizard.inc';
}

/**
 * Implements hook_menu().
 */
function step_menu() {
  $items = array();

  $items['admin/config/people/step'] = array(
    'title' => 'Multi-Step Registration',
    'description' => 'Configure registration steps to be used by multi-step registration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('step_list_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
  );
  $items['admin/config/people/step/%step/edit'] = array(
    'title' => 'Edit registration step',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('step_form', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
  );
  $items['admin/config/people/step/%step/delete'] = array(
    'title' => 'Delete registration step',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('step_delete_form', 4),
    'access callback' => 'step_delete_access',
    'access arguments' => array(4),
    'file' => 'includes/admin.inc',
  );
  // Registration step page.
  $items['user/register/%'] = array(
    'page callback' => 'step_wizard',
    'page arguments' => array(2),
    'access callback' => 'step_access',
    'access arguments' => array(2),
    'file path' => drupal_get_path('module', 'step') . '/includes',
    'file' => 'wizard.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_forms().
 */
function step_forms($form_id, $args) {
  $forms = array();
  foreach (variable_get('step_steps', step_default()) as $step) {
    $forms['step_step_' . $step] = array(
      'callback' => 'step_step',
    );
  }
  return $forms;
}

/**
 * Access callback for registration step deletion.
 */
function step_delete_access($step) {
  return user_access('administer site configuration') && $step != STEP_REGISTER;
}

/**
 * Access callback for user registration steps.
 */
function step_access($step = STEP_REGISTER) {
  //print 1;
  global $user;

  // Registration is available only for anonymous.
  if (!empty($user->uid)) {
    return FALSE;
  }

  // Get the registration process cache.
  $cache = StepCache::get('data');

  return !empty($cache['uid']);
}

/**
 * Load register step from database by object machine name.
 *
 * @param string $step
 *   Object machine name.
 *
 * @return array|bool
 *   Loaded array or FALSE if the array was not loaded.
 */
function step_load($step) {
  $steps = variable_get('step_steps', step_default());
  return in_array($step, $steps) ? $step : FALSE;
}

/**
 * Gets a list with default registration steps.
 */
function step_default() {
  return array(STEP_REGISTER);
}

/**
 * Gets a list of registration step titles.
 *
 * @return array
 *   An associative array having registration steps IDs as keys and titles as
 *   values.
 */
function step_steps() {
  $return = array();
  foreach (variable_get('step_steps', step_default()) as $step) {
    $return[$step] = variable_get("step_title_$step", step_default_title($step));
  }

  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function step_form_user_register_form_alter(&$form, &$form_state) {
  // Multi-step Registration is available only for anonymous registration
  // process. Registering new users by admin is done in a common way.
  if (empty($form_state['step'])) {
    return;
  }

  // Remove default form buttons.
  unset($form['actions']);
  // Add the CTools submit callback.
  $step_submits = array(
    'user_register_submit',
    'ctools_wizard_submit',
    'step_user_register_submit',
  );
  foreach (array_diff($form['#submit'], $step_submits) as $key => $submit_handler) {
    array_push($step_submits, $submit_handler);
  }
  $form['#submit'] = $step_submits;

  // Add description, if case.
  step_add_description($form, $form_state);

  // @todo
  //   Check the possibility to allow "Back" to this form by hiding somehow the
  //   user credentials and allow only the custom content.
}

/**
 * Adds the registration step description on top of wizard step form.
 *
 * @param $form
 *   Nested array of form elements that comprise the form.
 * @param $form_state
 *   A keyed array containing the current state of the form.
 *
 * @see step_form_user_register_form_alter()
 * @see step_step()
 */
function step_add_description(&$form, &$form_state) {
  if (variable_get('step_show_description', FALSE)) {
    if (!empty($form_state['step'])) {
      $step = $form_state['step'];
      $description = variable_get("step_description_$step", step_empty_description());
      if (!empty($description['value'])) {
        $variables = $description + array(
          'id' => $step,
          'title' => variable_get("step_title_$step", step_default_title($step))
        );
        $form['step_description'] = array(
          '#type' => 'markup',
          '#markup' => theme('step_description', $variables),
          '#weight' => -500,
        );
      }
    }
  }
}

/**
 * Implements hook_mail_alter().
 */
function step_mail_alter(&$message) {
  $ids = array(
    'user_register_no_approval_required',
    'user_register_register_pending_approval',
  );

  if (in_array($message['id'], $ids) && empty($message['params']['account']->step_finish)) {
    $message['send'] = FALSE;
  }
}

/**
 * Form API submit callback.
 *
 * Performs additional tasks after first step. user_register_submit() registers
 * status messages to inform about the success of user registration. We want to
 * inhibit the display of such messages after the first step. We will display
 * those messages later, on the 'Finish' step.
 *
 * @see user_register_submit().
 */
function step_user_register_submit($form, &$form_state) {
  if (empty($_SESSION['messages']['status'])) {
    return;
  }

  $messages = array(
    t('A welcome message with further instructions has been sent to your e-mail address.'),
    t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.'),
    t('Registration successful. You are now logged in.'),
  );
  foreach ($messages as $message) {
    if (($delta = array_search($message, $_SESSION['messages']['status'])) !== FALSE) {
      unset($_SESSION['messages']['status'][$delta]);
    }
  }

  // Cleanup.
  if (empty($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
}

/**
 * Gets the default title.
 *
 * Used in variable_get().
 *
 * @param string $step
 *   The step ID.
 *
 * @return string
 *   The default string.
 *
 * @see variable_get()
 */
function step_default_title($step) {
  return $step == STEP_REGISTER ? 'Register' : '';
}

/**
 * Gets the empty step description.
 *
 * @return array
 *   The default description array.
 *
 * @see variable_get()
 */
function step_empty_description() {
  return array('value' => '', 'format' => filter_default_format());
}
