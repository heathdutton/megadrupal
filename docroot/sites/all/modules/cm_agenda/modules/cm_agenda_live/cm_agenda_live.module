<?php
/**
 * @file
 * Code for the cm_agenda_live.
 */

/**
 * Implements hook_menu().
 */
function cm_agenda_live_menu() {
  $items = array();
  $items['node/%node/live'] = array(
    'title' => 'Live',
    'page callback' => 'cm_agenda_live',
    'page arguments' => array(1),
    'access callback' => 'cm_agenda_live_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cm_agenda_live.live.inc',
    'weight' => 40,
  );

  $items['node/%node/admin'] = array(
    'title' => 'Live Admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'cm_agenda_live_admin_form',
      1,
    ),
    'access callback' => 'cm_agenda_live_admin_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cm_agenda_live.admin.inc',
    'weight' => 41,
  );

  $items['ajax/agenda/%node'] = array(
    'title' => 'AJAX Agenda presenter',
    'page callback' => 'cm_agenda_live_presenter_ajax',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cm_agenda_live.ajax.inc',
  );

  $items['ajax/agenda/%node/countdown'] = array(
    'title' => 'AJAX Agenda presenter',
    'page callback' => 'cm_agenda_live_countdown_ajax',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cm_agenda_live.ajax.inc',
  );

  $items['ajax/agenda_speaker_autocomplete'] = array(
    'title' => 'AJAX Speaker complete',
    'page callback' => 'cm_agenda_live_taxonomy_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cm_agenda_live.ajax.inc',
  );

  $items['admin/config/communitymedia/agenda-live'] = array(
    'title' => 'Agenda Live',
    'description' => 'Configure pre, live, post behavior and messages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_agenda_live_admin_settings'),
    'access arguments' => array('administer agendas'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function cm_agenda_live_menu_alter(&$items) {
  unset($items['node/%node/view']['title']);
  $items['node/%node/view']['title callback'] = 'cm_agenda_live_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
  $items['node/%node/view']['weight'] = 43;
  $items['node/%node/log']['weight'] = 50;
}

/**
 * Callback function for settings title on view tab.
 */
function cm_agenda_live_view_tab_title($node) {
  if ($node->type == 'cm_agenda') {
    return t('VOD');
  }
  return t('View');
}

/**
 * Page callback for admin/appearance/backstretch.
 */
function cm_agenda_live_admin_settings() {
  $form = array();

  $form['cm_agenda_live_not_started_message'] = array(
    '#title' => t('Not Started Message'),
    '#type' => 'textarea',
    '#default_value' => variable_get('cm_agenda_live_not_started_message', 'This event has not started.'),
  );

  $form['cm_agenda_live_ended_message'] = array(
    '#title' => t('Has Ended Message'),
    '#type' => 'textarea',
    '#default_value' => variable_get('cm_agenda_live_ended_message', 'This event has ended.  The recorded versions will be avilable shortly.'),
  );

  return system_settings_form($form);
}

/**
 * Access callback if allowed to view agenda.
 */
function cm_agenda_live_access_callback($node) {
  return $node->type == 'cm_agenda' && node_access('view', $node);
}

/**
 * Access callback if allowed to edit agenda.
 */
function cm_agenda_live_admin_access_callback($node) {
  return $node->type == 'cm_agenda' && node_access('update', $node);
}

/**
 * Returns the offset from now and the agendas start time.
 */
function cm_agenda_get_timeoffset($agenda) {
  $date = new DateObject($agenda->field_cm_agenda_start_time[LANGUAGE_NONE][0]['value'], $agenda->field_cm_agenda_start_time[LANGUAGE_NONE][0]['timezone_db']);
  $offset = time() - $date->getTimestamp();
  return $offset;
}

/**
 * Returns all active event for an agenda
 */
function cm_agenda_live_get_active_event($agenda, $type = 'cm_agenda_speaker') {
  if (empty($agenda->field_cm_agenda_live[LANGUAGE_NONE][0]['fid'])) {
    return NULL;
  }
  $fid = $agenda->field_cm_agenda_live[LANGUAGE_NONE][0]['fid'];
  // Get all events for the agendas file.
  $query = db_select('field_data_field_media_event_media_ref', 'f');
  $query->condition('f.field_media_event_media_ref_target_id', $agenda->field_cm_agenda_live[LANGUAGE_NONE][0]['fid']);
  $query->fields('f', array('entity_id'));
  // With speaker type.
  $query->innerJoin('field_data_field_media_event_type', 't', 'f.entity_id = t.entity_id');
  $query->condition('t.field_media_event_type_value', $type);
  // Has a starting time.
  $query->innerJoin('field_data_field_media_event_start', 's', 'f.entity_id = s.entity_id');
  $query->condition('s.field_media_event_start_value', 0, '>');
  // Does not have stoping time.
  $query->leftJoin('field_data_field_media_event_end', 'e', 'f.entity_id = e.entity_id');
  $query->isNull('e.field_media_event_end_value');

  $result = $query->execute();
  $eids = $result->fetchCol();
  if (count($eids) > 0) {
    $events = entity_load('media_event', array($eids[0]));
    return $events[$eids[0]];
  }
  return NULL;
}

/**
 * Implements hook_theme().
 */
function cm_agenda_live_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['cm_agenda'] = array(
    'template' => 'cm-agenda',
    'path' => drupal_get_path('module', 'cm_agenda') . '/templates',
  );
  $theme['cm_agenda_live_admin_form'] = array(
    'render element' => 'form',
    'template' => 'cm-agenda',
    'path' => drupal_get_path('module', 'cm_agenda') . '/templates',
  );
  return $theme;
}

/**
 * Implements hook_preprocess_cm_agenda().
 */
function cm_agenda_live_preprocess_cm_agenda(&$var) {
  drupal_add_css(drupal_get_path('module', 'cm_agenda') . '/css/cm_agenda.css');
  $var['theme_hook_suggestions'][] = 'node__cm_agenda';
  if (!empty($var['more_classes'])) {
    $var['classes_array'] = array_merge($var['classes_array'], $var['more_classes']);
  }
  $agenda = $var['node'];
  $state = cm_agenda_get_state($agenda);
  if ($state == 'live') {
    $now = new DateObject();
    $now->setTimezone(new DateTimeZone('UTC'));
    $start = new DateObject($agenda->field_cm_agenda_start_time[LANGUAGE_NONE][0]['value'], $agenda->field_cm_agenda_start_time[LANGUAGE_NONE][0]['timezone_db']);
    $start->setTimezone(new DateTimeZone('UTC'));
    $startdiff = clone $start;
    $offset = !empty($agenda->field_cm_agenda_start_viewer[LANGUAGE_NONE][0]['value']) ? $agenda->field_cm_agenda_start_viewer[LANGUAGE_NONE][0]['value'] : 0;
    $startdiff->sub(new DateInterval('PT' . $offset . 'S'));
    if ($startdiff >= $now) {
      $var['video'] = '<div class="cm-agenda-countdown-container">' . t('The broadcast starts in') . '<div class="cm-agenda-countdown" id="countdown"></div></div>';
      unset($var['speakers']);
      unset($var['chapter_info_list']);
      $settings = array('cm_agenda_live' => array(
          'countdown' => TRUE,
          'start' => $start->format('D M d Y H:i:s O'),
          'diff' => 0,
          'viewer_offset' => $offset,
        ));
      drupal_add_js($settings, 'setting');
    }
  }
}

/**
 * Implements hook_preprocess_FORMID().
 */
function cm_agenda_live_preprocess_cm_agenda_live_admin_form(&$var) {
  drupal_add_css(drupal_get_path('module', 'cm_agenda') . '/css/cm_agenda.css');

  if (!empty($var['form']['agenda_node']['#node'])) {
    $var['node'] = $var['form']['agenda_node']['#node'];
    $var['video'] = $var['form']['video'];
    hide($var['form']['video']);
    $var['speaker_form'] = $var['form']['speaker'];
    hide($var['form']['speaker']);
    $var['workflow'] = $var['form']['workflow'];
    hide($var['form']['workflow']);
    $var['settings'] = $var['form']['metadata'];
    hide($var['form']['metadata']);
    $var['chapter_form'] = $var['form']['chapter-list'];
    hide($var['form']['chapter-list']);
  }
  else {
    $node = new stdClass();
    $node->nid = 0;
    $var['node'] = $node;
  }
}

/**
 * Return the agendas state.
 */
function cm_agenda_get_state($agenda) {
  $state = !empty($agenda->field_cm_agenda_workflow_state[LANGUAGE_NONE][0]['value']) ? $agenda->field_cm_agenda_workflow_state[LANGUAGE_NONE][0]['value'] : 'restrict';
  return $state;
}

/**
 * Implements template_preprocess_node().
 */
function cm_agenda_live_preprocess_node(&$var) {
  if ($var['type'] != 'cm_agenda') {
    return;
  }
  $state = cm_agenda_get_state($var['node']);
  if ($state == 'post_live') {
    if (!user_access('administer agendas')) {
      $var['video'] = array('#markup' => '<div class="alert alert-info">' . t('Live show have ended. Replay will be ready soon.') . '</div>');
    } else {
      $var['message'] = array('#markup' => '<div class="alert alert-info">' . t('Normal users will see post-live message. Go to <a href="@eventslink">Events editor</a> to edit events.', array('@eventslink' => url('node/' . $var['node']->nid . '/events'))). '</div>');
      $var['video'] = field_view_field('node', $var['node'], 'field_cm_agenda_video', 'default');
    }
    unset($var['chapters']);
  }
  if ($state == 'restrict' || $state == 'live') {
    if (!user_access('administer agendas')) {
      drupal_goto('node/' . $var['node']->nid . '/live');
      return;
    }
    if ($state == 'restrict') {
      $var['message'] = array('#markup' => '<div class="alert alert-warning">' . t('Agenda is not published. Anonymous users will get access denied.') . '</div>');
    }
    else {
      $var['message'] = array('#markup' => '<div class="alert alert-warning">' . t('Show is currently live. Normal users will be redirected to') . ' ' . l(t('live'), 'node/' . $var['node']->nid . '/live') . '</div>');
    }
    $var['video'] = field_view_field('node', $var['node'], 'field_cm_agenda_video', 'default');
  }
}
