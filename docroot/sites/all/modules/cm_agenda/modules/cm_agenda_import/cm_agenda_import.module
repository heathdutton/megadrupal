<?php
/**
 * @file
 * Code for the cm_agenda_import.
 */

/**
 * Implements hook_menu().
 */
function cm_agenda_import_menu() {
  $items['node/%node/import_events'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'cm_agenda_import_form',
      1,
    ),
    'access callback' => 'cm_agenda_import_admin_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 43,
  );
  return $items;
}

/**
 * Access callback for updating agenda.
 */
function cm_agenda_import_admin_access_callback($node) {
  return $node->type == 'cm_agenda' && node_access('update', $node);
}

/**
 * Form for importing external xml data.
 */
function cm_agenda_import_form($form, &$form_state, $node) {
  if (empty($node->field_cm_agenda_video[LANGUAGE_NONE][0]['fid'])) {
    $form['error'] = array('#markup' => 'No video selected for node');
    return $form;
  }
  $fid = $node->field_cm_agenda_video[LANGUAGE_NONE][0]['fid'];
  $media = entity_load_single('file', $fid);
  if (empty($media)) {
    $form['error'] = array('#markup' => 'Video could not be loaded.');
    return $form;
  }
  $form['fid'] = array(
    '#type' => 'value',
    '#value' => $fid,
  );
  $form['media'] = array('#markup' => '<h2>' . $media->filename . ' (' . $media->fid . ')</h2>');

  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Choose a file'),
  );

  $form['format'] = array(
    '#type' => 'select',
    '#title' => t('File format'),
    '#options' => array('ability' => 'Ability'),
    '#default_value' => 'ability',
    '#description' => t('Set which format of import file'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/**
 * Validate handler.
 */
function cm_agenda_import_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array('file_validate_extensions' => array('xml')));
  // If the file passed validation:
  if (empty($file)) {
    form_set_error('file', t('No file was uploaded.'));
  }
  else {
    $form_state['storage']['file'] = $file;
  }
}

/**
 * Submit handler.
 */
function cm_agenda_import_form_submit($form, &$form_state) {
  $media = entity_load_single('file', $form_state['values']['fid']);
  $file = $form_state['storage']['file'];
  $count = 0;
  switch ($form_state['values']['format']) {
    case 'ability' :
      $count = cm_agenda_import_handler_ability($file, $media->fid);
      break;
  }
  drupal_set_message(t('@count media events imported.', array('@count' => $count)));
}

/**
 * Importer function for Ability xml files.
 */
function cm_agenda_import_handler_ability($file, $media_file_id) {
  $count = 0;
  $handle = fopen(drupal_realpath($file->uri), "r");

  $nrchapter = 0;
  $nrspeaker = 0;
  $lastsec = 0;
  if ($handle) {
    $chapters = array();
    $speakers = array();
    while (($line = fgets($handle)) !== FALSE) {
      $line = utf8_encode($line);
      /*
       * Speakers
       */
      preg_match("/(?P<sec>\d+)\tsetinter\('advertisement','(?P<title>[^']*)'/", $line, $output_array);
      if (isset($output_array['sec'])) {
        if (!empty($output_array['title'])) {
          if (empty($speakers[$nrspeaker - 1]['title']) || $output_array['title'] != $speakers[$nrspeaker - 1]['title']) {
            if ($nrspeaker > 0 && empty($speakers[$nrspeaker - 1]['end'])) {
              $speakers[$nrspeaker - 1]['end'] = $output_array['sec'];
            }
            $chapter = array();
            $chapter['type'] = 'cm_agenda_speaker';
            $chapter['title'] = $output_array['title'];
            $chapter['start'] = $output_array['sec'];
            $speakers[$nrspeaker++] = $chapter;
          }
        }
        else {
          if ($nrspeaker > 0 && empty($speakers[$nrspeaker - 1]['end'])) {
            $speakers[$nrspeaker - 1]['end'] = $output_array['sec'];
          }
        }
        $lastsec = $output_array['sec'];
        continue;
      }
      /*
       * Chapters
       */
      preg_match("/(?P<sec>\d+)\tsetinter\('chapter','(?P<title>[^']*)'/", $line, $output_array);
      if (isset($output_array['sec'])) {
        $title = preg_replace('/\{[^\}]*\}/', '', $output_array['title']);
        if (!empty($title)) {
          if (empty($chapters[$nrchapter - 1]['title']) || $title != $chapters[$nrchapter - 1]['title']) {
            if ($nrchapter > 0 && empty($chapters[$nrchapter - 1]['end'])) {
              $chapters[$nrchapter - 1]['end'] = $output_array['sec'];
            }
            $chapter = array();
            $chapter['type'] = 'cm_agenda_chapter';
            $chapter['title'] = $title;
            $chapter['start'] = $output_array['sec'];
            $chapters[$nrchapter++] = $chapter;
          }
        }
        else {
          if ($nrchapter > 0 && empty($chapters[$nrchapter - 1]['end'])) {
            $chapters[$nrchapter - 1]['end'] = $output_array['sec'];
          }
        }
        $lastsec = $output_array['sec'];
        continue;
      }
    }
    fclose($handle);
    if (empty($chapters[$nrchapter - 1]['end'])) {
      $chapters[$nrchapter - 1]['end'] = $lastsec;
    }
    if (empty($speakers[$nrspeaker - 1]['end'])) {
      $speakers[$nrspeaker - 1]['end'] = $lastsec;
    }
    foreach (array_merge($chapters, $speakers) as $event) {
      $newentity = entity_create('media_event', array());
      $newentity->field_media_event_type[LANGUAGE_NONE][0]['value'] = $event['type'];
      $newentity->field_media_event_title[LANGUAGE_NONE][0]['value'] = $event['title'];
      $newentity->field_media_event_media_ref[LANGUAGE_NONE][0]['target_id'] = $media_file_id;
      $newentity->field_media_event_start[LANGUAGE_NONE][0]['value'] = $event['start'];
      $newentity->field_media_event_end[LANGUAGE_NONE][0]['value'] = $event['end'];
      $newentity->save();
      $count++;
    }
  }
  return $count;
}
