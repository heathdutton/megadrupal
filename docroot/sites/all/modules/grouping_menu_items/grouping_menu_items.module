<?php

/**
 * @file
 * Module to enable groups menu link in inline.
 */

/**
 * Implements hook_menu().
 */
function grouping_menu_items_menu() {
  $items['<group>'] = array(
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_link().
 */
function grouping_menu_items_link(array $variables) {
  if (arg(0) == 'admin' && $variables['path'] == '<group>') {
    $variables['text'];
  }
  // Call the original theme function for normal menu link.
  return theme('grouping_menu_items_menu_link_default', $variables);
}

/**
 * Implements hook_menu_link().
 */
function grouping_menu_items_menu_link(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';
  if (($element['#href'] == '<group>' && $element['#below'])) {
    foreach ($element['#attributes']['class'] as $key => $class) {
      if ($class == 'expanded') {
        $element['#attributes']['class'][$key] = 'leaf';
        break;
      }
    }
    $title = array();
    foreach ($element['#below'] as $key => $item) {
      if (is_numeric($key)) {
        if (!$item['#original_link']['hidden']) {
          $title[] = l($item['#title'], $item['#href']);
        }
      }
    }
    $output = implode(' ', $title);
    return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . "</li>\n";
  }
  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Implements hook_init().
 */
function grouping_menu_items_init() {
  // Make breadcrumb of group menu item nonlinkable.
  $breadcrumb = drupal_get_breadcrumb();
  foreach ($breadcrumb as $key => $crumb) {
    if (substr_count(urldecode($crumb), '<group>') > 0) {
      $breadcrumb[$key] = drupal_get_title();
    }
  }
  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Implements hook_theme_registry_alter().
 *
 * We replace theme_menu_item_menu_link with our own function.
 */
function grouping_menu_items_theme_registry_alter(&$registry) {
  // Save previous value from registry in case another theme overwrites
  // menu_item_menu_link.
  $registry['grouping_menu_items_menu_link_default'] = $registry['link'];
  $registry['link']['function'] = 'grouping_menu_items_link';
  $registry['menu_link']['function'] = 'grouping_menu_items_menu_link';
}

/**
 * Implements hook_form_FROM_ID_alter().
 *
 * Description changed, added group as path types.
 */
function grouping_menu_items_form_menu_edit_item_alter(&$form, &$form_state) {
  // Some menu items have a pre-defined path which cannot be modified hence
  // no default_value
  if (isset($form['link_path']['#default_value'])) {
    $default_value = $form['link_path']['#default_value'];

    if (preg_match('/^<group>\/[0-9]+$/', $default_value)) {
      $default_value = '<group>';
    }
    $form['link_path']['#default_value'] = $default_value;
    $form['link_path']['#description'] .= ' ' . t('Enter "%group" to generate inline item.', array('%group' => '<group>'));
  }
}
