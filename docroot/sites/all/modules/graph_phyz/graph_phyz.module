<?php

/**
 * Implements hook_graphapi_settings_form().
 */
function graph_phyz_graphapi_settings_form($values) {
  $engine = 'graph_phyz';
  $values += graph_phyz_default_settings();

  $form[$engine] = array(
    '#title' => t('Graph Phyz settings'),
    '#type' => 'fieldset',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form[$engine]['menu'] = array(
    '#title' => t('Show menu'),
    '#type' => 'checkbox',
    '#default_value' => $values['menu'],
  );
  $form[$engine]['showLinks'] = array(
    '#title' => t('Show link labels'),
    '#type' => 'checkbox',
    '#default_value' => $values['showLinks'],
  );
  $form[$engine]['animate'] = array(
    '#title' => t('Start animation'),
    '#type' => 'checkbox',
    '#default_value' => $values['animate'],
  );
  $form[$engine]['randomize'] = array(
    '#title' => t('Randomize positions'),
    '#type' => 'checkbox',
    '#default_value' => $values['animate'],
  );
  $form[$engine]['rankType'] = array(
    '#title' => t('What ranking direction'),
    '#type' => 'select',
    '#options' => array('TopBottom', 'BottomTop', 'LeftRight', 'RightLeft'),
    '#default_value' => $values['rankType'],
  );
  $form[$engine]['rankDepth'] = array(
    '#title' => t('Maximum rank to use.'),
    '#type' => 'textfield',
    '#default_value' => $values['rankDepth'],
  );
  $form[$engine]['initScale'] = array(
    '#title' => t('Initial scale.'),
    '#type' => 'textfield',
    '#default_value' => $values['initScale'],
  );

  $form[$engine]['physics'] = array(
    '#title' => t('Physics settings'),
    '#type' => 'fieldset',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  foreach (graph_phyz_physics() as $key => $title) {
    $form[$engine]['physics'][$key] = array(
      '#title' => t($title),
      '#type' => 'checkbox',
      '#default_value' => $values['physics'][$key],
    );
  }
  return $form;
}

function graph_phyz_default_settings() {
  $defaults = array(
    'menu' => TRUE,
    'showLinks' => FALSE,
    'animate' => TRUE,
    'randomize' => TRUE,
    'rankType' => 'TopBottom',
    'rankDepth' => 2,
    'initScale' => 2,
    'physics' => array(
      'showForces' => FALSE,
      'applyAttractToCenter' => TRUE,
      'applyBoundingBox' => FALSE,
      'applyBoxOverlap' => FALSE,
      'applyCoulombsLaw' => TRUE,
      'applyDamping' => TRUE,
      'applyHookesLaw' => TRUE,
      'applyCompass' => FALSE,
    ),
  );
  // TODO: remove this dependency with graphapi
  $global_defaults = graphapi_default_config();
  $defaults += $global_defaults;
  return $defaults;
}

function graph_phyz_physics() {
  return array(
    'showForces' => 'Show forces applied',
    'applyAttractToCenter' => 'Attract to center',
    'applyBoundingBox' => 'Bounding box',
    'applyBoxOverlap' => 'Do not overlap',
    'applyCoulombsLaw' => 'Apply Coulombs law',
    'applyDamping' => 'Use damping',
    'applyHookesLaw' => 'Apply Hookes law',
    'applyCompass' => 'Apply compass on directed links',
  );
}

/**
 * Implementations of theme_FORMAT_graphapi
 * 
 * @param type $vars 
 */
function theme_graph_phyz_graphapi($vars) {
  return theme('graph_phyz_container', $vars);
}

/**
 * Implements hook_graphapi_default_settings().
 *
 * @see graph_phyz_default_settings()
 * @see views_object::option_definition()
 */
function graph_phyz_graphapi_default_settings() {
  $engine = 'graph_phyz';
  $values = graph_phyz_default_settings(FALSE);
  return graphapi_settings_to_views($engine, $values);
}

/**
 * Implements hook_graphapi_formats().
 */
function graph_phyz_graphapi_formats() {
  return array(
    'graph_phyz' => t('Graph Phyz'),
  );
}

function graph_phyz_theme() {
  return array(
    'graph_phyz_graphapi' => array(
      'variables' => array(
        'graph' => NULL,
        'config' => NULL,
      ),
    ),
    'graph_phyz_container' => array(
      'variables' => array(
        'graph' => NULL,
        'config' => NULL,
      ),
    ),
    'graph_phyz_links' => array(
      'variables' => array(
        'graph' => NULL,
        'config' => NULL,
      ),
    ),
    'graph_phyz_node' => array(
      'variables' => array(
        'dom_id' => NULL,
        'data' => NULL,
        'config' => NULL,
      ),
    ),
    'graph_phyz_title' => array(
      'variables' => array(
        'title' => NULL,
        'data' => NULL,
      ),
    ),
    'graph_phyz_link' => array(
      'variables' => array(
        'to_id' => NULL,
        'from_id' => NULL,
        'title' => NULL,
        'data' => NULL,
      ),
    ),
  );
}

/**
 * Theme implementation, returns graph_phyz container as HTML.
 */
function theme_graph_phyz_container($variables) {
  return graph_phyz_container($variables['graph'], $variables['config']);
}

/**
 * Theme implementation, returns graph title as HTML.
 */
function theme_graph_phyz_title($variables) {
  $title = $variables['title'];
  $data = $variables['data'];

  $attributes = array(
    'class' => 'graph-phyz-title',
  );
  if (isset($data['background-color'])) {
    $attributes['style'] = 'background-color: ' . $data['background-color'] . ';';
  }
  $a = drupal_attributes($attributes);

  if (isset($data['uri'])) {
    $title = '<a href="' . $data['uri'] . '">' . $title . '</a>';
  }
  return '<div ' . $a . '>' . $title . '</div>';
}

/**
 * Theme implementation, returns graph node as HTML.
 */
function theme_graph_phyz_node($variables) {
  $dom_id = $variables['dom_id'];
  $data = $variables['data'];
  $config = $variables['config'];

  $attributes = array(
    'id' => $dom_id,
    'class' => 'graph-phyz-node',
  );
  // We always add a rank ... all ranks < 0 are not used for layout
  $attributes['rank'] = isset($data['rank']) ? $data['rank'] : -1;

  if (isset($data['x'])) {
    $attributes['left'] = $data['x'];
  }
  if (isset($data['y'])) {
    $attributes['top'] = $data['y'];
  }
  $a = drupal_attributes($attributes);

  if (isset($data['content'])) {
    $content = '<div class="graph-phyz-content" title="' . $data['title'] . '">' . $data['content'] . '</div>';
  }
  else {
    $content = '';
  }
  return '<div ' . $a . '>'
      . theme('graph_phyz_title', array('title' => $data['title'], 'data' => $data))
      . $content . '</div>';
}

/**
 * Theme implementation, returns graph edge as HTML.
 */
function theme_graph_phyz_link($variables) {
  $html = '<edge';
  $html.= ' from="' . $variables['from'] . '"';
  $html.= ' to="' . $variables['to'] . '"';
  if (isset($link['data']['type'])) {
    $html.= ' type="' . $variables['data']['type'] . '"';
  }
  if (isset($variables['data']['color'])) {
    $html.= ' color="' . $variables['data']['color'] . '"';
  }
  if (isset($variables['data']['classes'])) {
    $classes = $variables['data']['classes'];
    $class = join(" ", $classes);
    $html.= ' class="' . $class . '"';
  }
  $html.= '>';
  if (isset($variables['title'])) {
    $html.= '<a href="#" title="' . check_plain($variables['title']) . '">&curren;</a>';
  }
  $html.='</edge>';

  return $html;
}

/**
 * Returns the <edge> canvas node for the given graph.
 *
 * @param $graph
 *   Graph array.
 * @param $config
 *   Graph config array (see graph_phyz_default_config() for details).
 */
function theme_graph_phyz_links($variables) {
  $graph = $variables['graph'];
  $config = $variables['config'];
  $result = '<edges>';
  foreach ($graph as $from => $data) {
    foreach ($data['edges'] as $to => $link_data) {
      $link = array(
        'from' => _graphapi_uniform_id($config, $from),
        'to' => _graphapi_uniform_id($config, $to),
      );
      if (isset($link_data['title'])) {
        $link['title'] = $link_data['title'];
      }
      if (isset($link_data['data'])) {
        $link['data'] = $link_data['data'];
      }
      $result.= theme('graph_phyz_link', $link);
    }
  }
  $result.= '</edges>';
  return $result;
}

function graph_phyz_graphapi_node_properties() {
  return array(
    'background-color' => 'Background Color',
    'shape' => 'Shape',
    'rank' => 'Rank',
    'x' => 'X coordinate',
    'y' => 'Y coordinate',
  );
}

function graph_phyz_graphapi_link_properties() {
  return array(
    'title' => 'Title',
    'color' => 'Color',
  );
}

/**
 * Renders the HTML for the given graph containing the canvas and divs
 *
 * @param $graph
 *   Graph array.
 * @param $config
 *   Graph config array (see graphapi_default_config() for details).
 */
function graph_phyz_container($graph, $config = array()) {
  $config+= graph_phyz_default_settings();
  $config['id'] = 'graph-phyz-' . $config['id'];
  $config['canvas-id'] = $config['id'] . '-canvas';

  $styles = array(
    'width' => $config['width'] . 'px',
    'height' => $config['height'] . 'px',
    'background-color' => $config['background-color'],
    '-webkit-user-select' => 'none',
    '-moz-user-select' => 'none',
    'overflow' => 'hidden',
    'position' => 'relative',
  );
  $s = '';
  foreach ($styles as $style => $value) {
    $s .= "$style: $value; ";
  }
  $attributes = array(
    'id' => $config['id'],
    'class' => 'graph-phyz',
    'style' => $s,
  );
  $a = drupal_attributes($attributes);
  $nl = "\n";
  $result = '';
  $result.= '<div ' . $a . '>';
  $result.= $nl . '<noscript>' . t('This page element requires JavaScript to be enabled.') . '</noscript>';
  $result.= $nl . theme('graph_phyz_links', array('graph' => $graph, 'config' => $config));
  $result.= $nl . '<div class="graph-phyz-nodes">';
  $nodes = array();
  foreach ($graph as $id => $data) {
    $dom_id = _graphapi_uniform_id($config, $id);
    if (!(isset($data['data']) && isset($data['data']['title']))) {
      $data['data']['title'] = $id;
    }
    $result .= $nl . theme('graph_phyz_node', array('dom_id' => $dom_id, 'data' => $data['data'], 'config' => $config));
  }
  $result .= $nl . '</div>';
  $result .= $nl . '</div>';
  $result = _graph_phyz_add_graph($graph, $config) . $result;
  return $result;
}

/**
 * Helper function. Adds javascript and css on to drupal pages.
 */
function _graph_phyz_add_graph($graph, $config) {
  $dom_prefix = $config['id'];
  $path = drupal_get_path('module', 'graph_phyz');
  $conf = drupal_json_encode($config);
  $id = '#' . $config['id'];
  $script = 'jQuery(document).ready( function() {'
      . "\n" . '  var config = ' . $conf . ';'
      . "\n" . '  jQuery("' . $id . '").graphapi(config);'
      . "\n" . '});';

  if (isset($config['inline']) && $config['inline']) {
    return '<script>' . $script . '</script>';
  }
  else {
    drupal_add_js($script, 'inline');
    return;
  }
}

function graph_phyz_init() {
  $path = drupal_get_path('module', 'graph_phyz');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.droppable');
  if (function_exists('libraries_get_path')) {
    $touch = libraries_get_path('jquery-ui-touch-punch') . '/jquery.ui.touch-punch.min.js';
    drupal_add_js($touch);
  }
  drupal_add_js($path . '/js/jquery-graphapi.js');
  drupal_add_js($path . '/js/graph-phyz.js');
  drupal_add_css($path . '/css/graph-phyz.css');
}

/**
 * Implements hook_libraries().
 *
 * TODO: this is currently not used.
 */
function graph_phyz_library() {
  if (function_exists('libraries_get_path')) {
    $libraries['jquery.ui.touch-punch'] = array(
      'title' => 'jQuery UI Touch Punch',
      'website' => 'https://github.com/furf/jquery-ui-touch-punch',
      'version' => 'master',
      'js' => array(
        libraries_get_path('jquery-ui-touch-punch') . '/jquery.ui.touch-punch.min.js' => array(),
      ),
      'dependencies' => array(
        array('system', 'ui.mouse'),
      )
    );
  }

  return $libraries;
}
