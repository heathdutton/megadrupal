<?php
/**
 * @file
 * Install, update, uninstall and requirement functions for the PHPIDS module.
 */

/**
 * Implementation of hook_requirements().
 * 
 * @return
 *      Returns requirements array for install and runtime phase.
 *
 * todo: check and optimize code
 */
function phpids_requirements($phase) {
  $t = get_t();
  
  if ($phase == 'install') {
    $requirements['phpids'] = array(
      'title' => $t('PHPIDS'),  
      'value' => $t('Found PHPIDS package'),
    );

    if (version_compare(PHP_VERSION, '5.1.6', '<')) {
      $requirements['phpids']['value'] = $t('Unsupported PHP version found');
      $requirements['phpids']['description'] = $t('To use PHPIDS your webhost must running with PHP 5.1.6 or higher. Your current PHP version: '. PHP_VERSION);
      $requirements['phpids']['severity'] = REQUIREMENT_ERROR;
    }
  }
  elseif ($phase == 'runtime') {
    global $base_path;
    $requirements['phpids'] = array(
      'title' => $t('PHPIDS'),  
      'value' => $t('Found PHPIDS package and PHP-IDS Temp is writable'),
    );

    if (!file_exists(variable_get('phpids_path', realpath(dirname(__FILE__))) .'/IDS/Config/Config.ini.php') && !file_exists(variable_get('phpids_path', realpath(dirname(__FILE__))) .'/IDS/Config/Config.ini')) {
      $requirements['phpids']['value'] = $t('No PHPIDS package found');
      $requirements['phpids']['description'] = $t('You must dowload the latest <a href="http://www.php-ids.org" target="_blank">PHPIDS package</a> and place in a php searchable path or the phpids module folder. Current configured PHPIDS path: '. variable_get('phpids_path', realpath(dirname(__FILE__))));
      $requirements['phpids']['severity'] = REQUIREMENT_ERROR;
      return $requirements;
    }
    // Test PHPIDS-Temp directory exits
    elseif (!file_exists(variable_get('phpids_tmppath', ini_get('upload_tmp_dir') .'phpids'))) {
      $requirements['phpids']['value'] = $t('PHP-IDS Temp directory not found');
      $requirements['phpids']['description'] = $t('Please check if their exists the configured PHP-IDS Temp directory. Current configured PHPIDS-Temp path: '. variable_get('phpids_tmppath', ini_get('upload_tmp_dir') .'phpids'));
      $requirements['phpids']['severity'] = REQUIREMENT_ERROR;
      return $requirements;
    }
    // Test PHPIDS-Temp directory is writable
    elseif (!is_writable(variable_get('phpids_tmppath', ini_get('upload_tmp_dir') .'phpids'))) {
      $requirements['phpids']['value'] = $t('PHP-IDS Temp is not writable');
      $requirements['phpids']['description'] = $t('Please check if the configured PHP-IDS Temp directory is writable. Current configured PHPIDS-Temp path: '. variable_get('phpids_tmppath', ini_get('upload_tmp_dir') .'phpids'));
      $requirements['phpids']['severity'] = REQUIREMENT_ERROR;
      return $requirements;
    }
    // Test for an existing robots.txt file
    elseif (!file_exists('./robots.txt')) {
      $requirements['phpids']['value'] = $t('PHPIDS couldn\'t find robots.txt file');
      $requirements['phpids']['description'] = $t('Please copy actual robots.txt file from drupal package to your drupal base directory.');
      $requirements['phpids']['severity'] = REQUIREMENT_WARNING;
      return $requirements;
    }
    // Test PHPIDS required lines in robots.txt are included
    elseif (file_exists('./robots.txt')) {
      $file = file_get_contents('./robots.txt');
      if (!(strpos($file, 'Disallow: /warning.html') && strpos($file, 'Disallow: /?q=warning.html'))) {
        $requirements['phpids']['value'] = $t('PHPIDS needs changes in robots.txt file');
        $requirements['phpids']['description'] = $t('Please check your robots.txt file for following 2 entries and enter them, if they are missing:<br />Disallow: /warning.html<br />Disallow: /?q=warning.html');
        $requirements['phpids']['severity'] = REQUIREMENT_WARNING;
        return $requirements;
      }
    }

  }
  return $requirements;
}

/**
 * Implementation of hook_install().
 */
function phpids_install() {
  variable_set('phpids_path', realpath(dirname(__FILE__)));
  variable_set('phpids_tmppath', ini_get('upload_tmp_dir') .'phpids');
  variable_set('phpids_loglevel', 1);
  variable_set('phpids_warnlevel', 9);
  variable_set('phpids_blocklevel', 27);
  variable_set('phpids_mail', '');
  variable_set('phpids_authenticated', 2);
  variable_set('phpids_anonymous', 2);
  variable_set('phpids_html_fields', '');
  variable_set('phpids_json_fields', '');
  variable_set('phpids_excl_fields', '');
  variable_set('phpids_warn_title', 'Security warning');
  variable_set('phpids_warn_text', t('We have detected malicious input and blocked your attempt.<br />If you keep experiencing problems but feel like you are doing nothing wrong, please contact the site administrator.'));
  variable_set('phpids_testonly_activated', FALSE);
  variable_set('phpids_testonly_withmail', FALSE);
}

/**
 *  Implementation of hook_uninstall().
 */
function phpids_uninstall() {
  variable_del('phpids_path');
  variable_del('phpids_tmppath');
  variable_del('phpids_loglevel');
  variable_del('phpids_warnlevel');
  variable_del('phpids_blocklevel');
  variable_del('phpids_mail');
  variable_del('phpids_authenticated');
  variable_del('phpids_anonymous');
  variable_del('phpids_html_fields');
  variable_del('phpids_json_fields');
  variable_del('phpids_excl_fields');
  variable_del('phpids_warn_title');
  variable_del('phpids_warn_text');
  variable_del('phpids_testonly_activated');
  variable_del('phpids_testonly_withmail');
}

switch (substr(VERSION, 0, 1)) {
  case '5':
    require_once('phpids.update5.inc');
    break;
  case '6':
    require_once('phpids.update6.inc');
    break;
  case '7':
    require_once('phpids.update7.inc');
    break;
}