<?php

/**
 * @file
 *   Integration with the PagerDuty API to create PagerDuty Trigger Events when
 *   Watchdog log messages are created.
 *
 * @todo
 *   Rules Action
 *   SimpleTests
 */

/**
 * The Pager Duty JSON API URL
 */
define('PAGERDUTY_URL_API', 'https://events.pagerduty.com/generic/2010-04-15/create_event.json');

/**
 * The Pager Duty HTTP Resonses
 *
 * @see http://developer.pagerduty.com/documentation/rest/errors
 */
define('PAGERDUTY_HTTP_OK', 200);
define('PAGERDUTY_HTTP_CREATED', 201);
define('PAGERDUTY_HTTP_NO_CONTENT', 204);
define('PAGERDUTY_HTTP_BAD_REQUEST', 400);
define('PAGERDUTY_HTTP_SERVER_ERROR', 500);

/**
 * Implements hook_help.
 */
function pagerduty_help($path, $arg) {
  switch ($path) {
    // Main module help
    case 'admin/help#pagerduty':
      $output = '';
      $output .= '<p>' . t('The Drupal PagerDuty module allows you to generate PagerDuty Trigger Events when Watchdog log messages are created.') . '</p>';
      $output .= '<p>' . t('A Service API key is required for the module to connect to your account.') . '</p>';

      $list[] = t('Create a Service API Key by loggin on your PagerDuty account (http://example.pagerduty.com)');
      $list[] = t('Click the <em>Services</em> menu tab.');
      $list[] = t('Click the green <em>Add New Service</em> button.');
      $list[] = t('Fill in the <em>Service name</em field. Example: Drupal Site Monitoring.');
      $list[] = t('Set the <em>Service Type</em> radio button to <em>Generic API System</em>.');
      $list[] = t('Click <em>Add Service</em>. The Service is created and the page redirects to the Service View page.');
      $list[] = t('In the <em>Integration Settings</em> fieldset, copy the <em>Service API key</em>.');
      $settings = l(t('PagerDuty Settings'), 'admin/config/system/pagerduty');
      $list[] = t('Paste the key into the !settings and click save.', array('!settings' => $settings));

      $vars['items'] = $list;
      $vars['title'] = t('How to create a PagerDuty Service API Key:');
      $vars['type'] = 'ol';

      $output .= theme('item_list', $vars);

      return $output;
    case 'admin/config/system/pagerduty':
      $output = '';
      $help = l(t('How to create a PagerDuty Service API Key.'), 'admin/help/pagerduty');
      $output .= '<p>' . t('This page provides settings for PagerDuty integration to specify the Service API Key and adjust the notification log severity filter. !help', array('!help' => $help)) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 *
 * Provides configuration options for the module.
 */
function pagerduty_menu() {
 $items['admin/config/system/pagerduty'] = array(
    'title' => 'PagerDuty Settings',
    'description' => t('Manage settings for PagerDuty integration.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pagerduty_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
 return $items;
}

/**
 * Creates the admin settings form.
 *
 * @param type $form
 *   A form
 * @param type $form_state
 *   The form state
 */
function pagerduty_settings($form, &$form_state) {
  $form['pagerduty_service_key'] = array(
    '#title' => t('Service API key'),
    '#description' => t('Unique service identifier, used by the PagerDuty API.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('pagerduty_service_key', NULL),
    '#required' => TRUE,
  );
  $form['pagerduty_severity'] = array(
    '#title' => t('Log message severity'),
    '#description' => t('The watchdog log message severity levels to send to PagerDuty. Unselected options will be ignored.'),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#size' => 8,
    '#options' => watchdog_severity_levels(),
    '#default_value' => pagerduty_get_severity_levels(),
  );


  $form = system_settings_form($form);
  if (!is_null(variable_get('pagerduty_service_key', NULL))) {
    $form['actions']['pagerduty_test'] = array(
      '#type' => 'submit',
      '#value' => t('Generate test trigger event'),
      '#submit' => array('pagerduty_settings_test'),
    );
  }
  return $form;
}

/**
 * Secondary submit function for the admin settings page to generate a test message.
 */
function pagerduty_settings_test() {
  $message = t('Drupal PagerDuty module test message. Timestamp: ' . time());
  $result = pagerduty_trigger_event($message);
  if ($result) {
    drupal_set_message(t('PagerDuty Trigger Event creation successful. Check your PagerDuty control panel for the message.'));
  }
  else {
    drupal_set_message(t('PagerDuty Trigger Event creation failure. Check the Drupal log messages for futher details.'), 'error');
  }
}
/**
 * Returns the current serverity level filter.
 */
function pagerduty_get_severity_levels() {
  // Default to sending most important messages.
  $defaults = array(WATCHDOG_EMERGENCY, WATCHDOG_ALERT, WATCHDOG_CRITICAL, WATCHDOG_ERROR, WATCHDOG_WARNING);
  return variable_get('pagerduty_severity', $defaults);
}

/**
 * Implements hook_watchdog().
 *
 * @todo Infinite log message loop detection. Event with same description only once per minute?
 */
function pagerduty_watchdog(array $log_entry)  {
  // Ignore self generated messages.
  if ($log_entry['type'] == 'pagerduty') {
    return;
  }

  // Should we be concerned with this? (Is it in the list of selected levels)
  if (in_array($log_entry['severity'], pagerduty_get_severity_levels())) {
    $watchdog_levels = watchdog_severity_levels();
    $severity = $watchdog_levels[$log_entry['severity']];
    // Create a detailed description
    $description = $severity . ' - ' . $log_entry['type'] . ' - ' .
        strip_tags(t($log_entry['message'], $log_entry['variables']));

    // Don't send user data
    unset($log_entry['user']);
    // Send the event.
    pagerduty_trigger_event($description, $log_entry);
  }
}

/**
 * Create a PagerDuty Trigger Event
 *
 * @param string $description
 *   A short description of the problem that led to this trigger. This field
 *   (or a truncated version) will be used when generating phone calls, SMS
 *   messages and alert emails. It will also appear on the incidents tables
 *   in the PagerDuty UI.
 * @param array $details
 *   An associative array of key value pairs for additional problem details
 * @param string $incident_key
 *   Identifies the incident to which this trigger event should be applied. If
 *   there's no open (i.e. unresolved) incident with this key, a new one will
 *   be created. If there's already an open incident with a matching key, this
 *   event will be appended to that incident's log. The event key provides an
 *   easy way to "de-dup" problem reports. If this field isn't provided,
 *   PagerDuty will automatically open a new incident with a unique key.
 *
 * @return bool/string
 *   The PagerDuty in on sucess, FALSE on failure.
 */
function pagerduty_trigger_event($description, array $details = array(), $incident_key = NULL) {
  $loop_detect = &drupal_static(__FUNCTION__);

  // If loop detect is TRUE, then exit. Only one call to PagerDuty per page load.
  if (isset($loop_detect)) {
    return FALSE;
  }
  $loop_detect = TRUE;

  $service_key = variable_get('pagerduty_service_key', NULL);

  // If service key is not set, set an error.
  if (is_null($service_key)) {
    watchdog('pagerduty', t('The PagerDuty Service API key is not set, a Trigger Event cannot be created.'), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Set the Service API key.
  $data['service_key'] = $service_key;

  // Set the Event Type.
  $data['event_type'] = 'trigger';

  // Set the description.
  $data['description'] = $description;

  // If incident key is specified, set the incident key.
  if (!is_null($incident_key)) {
    $data['incident_key'] = $incident_key;
  }

  // If details is set, set the details.
  if (!empty($details)) {
    // Must be an array.
    if (!is_array($details)) {
      watchdog('pagerduty', t('Details specified, but not array.'), array(), WATCHDOG_WARNING);
    }

    $data['details'] = $details;
  }

  // Create the HTTP request options
  $options = array(
    'method' => 'POST',
    'data' => json_encode($data),
  );

  // Perform the HTTP request.
  $response = drupal_http_request(PAGERDUTY_URL_API, $options);

  // On success, code 200 and data available.
  // @todo Whats with PAGERDUTY_HTTP_CREATED and PAGERDUTY_HTTP_NO_CONTENT?, http://developer.pagerduty.com/documentation/rest/errors
  if ($response->code == PAGERDUTY_HTTP_OK && isset($response->data)) {
    $data = json_decode($response->data);

    // Get the incident key
    $incident_key = $data->incident_key;
    return $incident_key;
  }
  // On failure
  else {

    $message = t('Error sending a request to the PagerDuty API');
    $args = array();
    // If there is a HTTP error, add HTTP data to the log message.
    if (isset($response->error)) {
      $message .= PHP_EOL . ' <br /> HTTP status !http_code: !http_error';
      $args += array(
        '!http_code' => $response->code,
        '!http_error' => $response->error,
      );
    }
    // If there is PagerDuty error data, add it to the log message.
    if (isset($response->data)) {
      if($data = json_decode($response->data)) {
        $message .= PHP_EOL . ' <br /> PagerDuty Status: !status' .
                    PHP_EOL . ' <br /> PagerDuty Message:!msg' .
                    PHP_EOL . ' <br /> PagerDuty Errors: !errors';
        $args += array(
          '!status' => $data->status,
          '!msg' => $data->message,
          '!errors' => implode(', ', $data->errors),
        );
      }
    }
    watchdog('pagerduty', $message, $args, WATCHDOG_ERROR);

    return FALSE;
  }
}