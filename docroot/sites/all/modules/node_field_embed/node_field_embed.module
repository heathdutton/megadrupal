<?php

/**
 * @filesource node_field_embed.module
 *
 * This module defines an input filter for taking an embed code
 * [[field:fieldname]] and removing the embed code and replacing it with the
 * rendered field at that position in the text field.
 * Parameters can also be passed as follows:
 * [[field:fieldname foo=bar&baz=bom]]
 */

/**
 * Implementation of hook_filter_info()
 */
function node_field_embed_filter_info() {

  $filters['node_field_embed'] = array(
    'title' => t('Insert node field'),
    'description' => t('By including the syntax [[field:fieldname]], this filter will embed the field from this node'),
    'prepare callback' => 'node_field_embed_embed_prepare',
    'process callback' => 'node_field_embed_embed_process',
    'tips callback'  => 'node_field_embed_embed_tips',
    'cache' => FALSE,
  );

  return $filters;
}

/**
 * Prepare callback for hook_filter
 */
function node_field_embed_embed_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {

  return $text;

}

/**
 * Process callback for hook_filter
 */
function node_field_embed_embed_process($text, $filter, $format, $langcode, $cache, $cache_id) {

  return preg_replace_callback('/\[\[field:(\w+)(\s.*?)?\]\]/', 'node_field_embed_make_replacements', $text);

}

/**
 * Tips callback for hook_filter
 */
function node_field_embed_embed_tips($filter, $format, $long) {

  return t('[[field:fieldname]] - Inserts the field');

}

/**
 * Provides the rendered field to be used in place of the embed code.
 *
 * @param $matches
 *    field name that has been captured by preg_replace_callback
 *    any embedded parameters in a query string type format
 * @return
 *    The rendered HTML replacing the embed code
 */
function node_field_embed_make_replacements($matches) {

  $render = '';
  $original_node = $node = menu_get_object();

  // Extract any embed parameters.
  $embed_parameters = array();
  if (isset($matches[2]) && trim($matches[2]) != '') {
    $match = html_entity_decode($matches[2]);
    parse_str(trim(str_replace('&nbsp;', ' ', $match)), $embed_parameters);
  }

  if ($node) {
    $field = "field_" . $matches[1];
    $viewMode = 'default';
    $entityType = 'node';

    // Include only a certain items if a delta is specified in the params.
    if (isset($embed_parameters['delta'])) {
      $langcode = field_language($entityType, $node, $field);

      $field_values = array();

      // We accept multiple deltas or delta ranges separated by comma.
      $deltas = explode(',', $embed_parameters['delta']);
      foreach ($deltas as $delta) {
        // Get the start and end of the delta range if specified.
        $range = explode('-', $delta);


        // If there is no end compontent of the range, then we just need 1 item.
        if (isset($range[1]) && $range[1] > $range[0]) {
          $length = $range[1] - $range[0] + 1;
        }
        else {
          $length = 1;
        }

        // Adjust the offset to zero-based.
        $offset = $range[0] - 1;

        // Retrieve only the specified deltas.
        $field_values = array_merge($field_values, array_slice($node->{$field}[$langcode], $offset, $length));
      }

      // If there where valid delta ranges specified, limit the field to just those items.
      if ($field) {
        // We're going to modify the node so we make a copy first.
        $node = clone $node;
        $node->{$field}[$langcode] = $field_values;
      }
    }

    // Change the view-mode if specified
    if (isset($embed_parameters['viewmode'])) {
      $viewMode = $embed_parameters['viewmode'];
    }

    // Allow for custom dispay settings (json encoded).
    if (isset($embed_parameters['display'])) {
      $viewMode = drupal_json_decode($embed_parameters['display']);
    }

    $embed = field_view_field($entityType, $node, $field, $viewMode);
    $render = drupal_render($embed);

    // Remove the field unless otherwise specified in the options.
    if (empty($embed_parameters['delete']) || $embed_parameters['delete'] == 'yes') {
      unset($original_node->$field);
    }
  }

  return $render;
}
