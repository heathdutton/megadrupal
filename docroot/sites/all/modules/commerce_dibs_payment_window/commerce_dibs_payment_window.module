<?php

/**
 * @file
 * Provides DIBS (Mobile) Payment Window as a payment method.
 */


define('COMMERCE_DIBS_PAYMENT_WINDOW_STATUS_UNDEFINED', NULL);

define('COMMERCE_DIBS_PAYMENT_WINDOW_REMOTE_STATUS_CAPTURED', 'captured');

define('COMMERCE_DIBS_PAYMENT_WINDOW_REMOTE_STATUS_AUTHORIZED', 'authorized');

define('COMMERCE_DIBS_PAYMENT_WINDOW_REMOTE_STATUS_FAILURE', 'failure');

define('COMMERCE_DIBS_PAYMENT_WINDOW_REMOTE_STATUS_CANCELED', 'canceled');

define('COMMERCE_DIBS_PAYMENT_WINDOW_REMOTE_STATUS_REFUNDED', 'refunded');

/**
 * Implements hook_permission().
 */
function commerce_dibs_payment_window_permission() {
  return array();
}

/**
 * Implements hook_menu().
 */
function commerce_dibs_payment_window_menu() {
  $items = array();

  // Capture an transaction.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/dibs-payment-window-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'commerce_dibs_payment_window_transaction_operation',
    'page arguments' => array('capture', 3, 5),
    'access callback' => 'commerce_dibs_payment_window_transaction_operation_access',
    'file' => 'commerce_dibs_payment_window.admin.inc',
    'access arguments' => array('capture', 3, 5),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // Cancel an authorization.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/dibs-payment-window-cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'commerce_dibs_payment_window_transaction_operation',
    'page arguments' => array('cancel', 3, 5),
    'access callback' => 'commerce_dibs_payment_window_transaction_operation_access',
    'access arguments' => array('cancel', 3, 5),
    'file' => 'commerce_dibs_payment_window.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // Refund an capture.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/dibs-payment-window-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'commerce_dibs_payment_window_transaction_operation',
    'page arguments' => array('refund', 3, 5),
    'access callback' => 'commerce_dibs_payment_window_transaction_operation_access',
    'access arguments' => array('refund', 3, 5),
    'file' => 'commerce_dibs_payment_window.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // Callback for DIBS.
  $items['commerce-dibs-payment-window-callback/%commerce_order/%commerce_payment_transaction/%'] = array(
    'title' => 'DIBS Callback',
    'page callback' => 'commerce_dibs_payment_window_callback',
    'page arguments' => array(1, 2, 3),
    'access callback' => 'commerce_dibs_payment_window_callback_access',
    'access arguments' => array(1, 2, 3),
    'file' => 'commerce_dibs_payment_window.admin.inc',
    'delivery callback' => 'commerce_dibs_payment_window_api_delivery',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * @param $result
 * @throws \Exception
 */
function commerce_dibs_payment_window_api_delivery($result) {
  if (is_int($result)) {
    switch ($result) {
      case MENU_NOT_FOUND:
        // Print a 404 page.
        drupal_add_http_header('Status', '404 Not Found');
        $result = 'error';
        break;

      case MENU_ACCESS_DENIED:
        // Print a 403 page.
        drupal_add_http_header('Status', '403 Forbidden');
        $result = 'error';
        break;

      case MENU_SITE_OFFLINE:
        // Print a 503 page.
        drupal_maintenance_theme();
        drupal_add_http_header('Status', '503 Service unavailable');
        drupal_set_title(t('Site under maintenance'));
        print theme('maintenance_page', array(
          'content' => filter_xss_admin(variable_get('maintenance_mode_message',
            t('@site is currently under maintenance. We should be back shortly. Thank you for your patience.', array('@site' => variable_get('site_name', 'Drupal')))))
        ));
        break;
    }
  }
  drupal_json_output($result);
}

/**
 * Checks if the transaction is in a state that allows it to be operated on.
 *
 * @param string $op
 *   Operation to perform on the transaction.
 * @param object $order
 *   Order associated with the transaction.
 * @param object $transaction
 *   The transaction.
 */
function commerce_dibs_payment_window_transaction_operation_access($op, $order, $transaction) {

  // Ensure we are trying to operate on our payment method.
  if (!_commerce_dibs_payment_window_transaction_has_dibs($transaction)) {
    return FALSE;
  }

  switch ($op) {
    case 'capture':
      if (!_commerce_dibs_payment_window_transaction_can_be_captured($transaction)) {
        return FALSE;
      }
      break;

    case 'cancel':
      if (!_commerce_dibs_payment_window_transaction_can_be_captured($transaction)) {
        return FALSE;
      }
      break;

    case 'refund':
      if (!_commerce_dibs_payment_window_transaction_can_be_refunded($transaction)) {
        return FALSE;
      }
      break;
  }

  // Allow only if user has access to update the transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Checks if payment_redirect_key matches order.
 *
 * @param object $order
 *   Order object.
 * @param object $transaction
 *   Transaction object.
 * @param string $payment_redirect_key
 *   Payment redirect key.
 */
function commerce_dibs_payment_window_callback_access($order, $transaction, $payment_redirect_key) {
  watchdog('commerce_dibs_payment_window', 'DIBS is reaching callback endpoint. query=%q', array('%q' => $_GET['q']), WATCHDOG_ALERT);
  if ($order->data['payment_redirect_key'] !== $payment_redirect_key) {
    watchdog('commerce_dibs_payment_window', 'Payment redirect key mismatch.', array(), WATCHDOG_ALERT);
    return MENU_NOT_FOUND;
  }

  if ($transaction->order_id !== $order->order_id) {
    watchdog('commerce_dibs_payment_window', 'DIBS Callback, mismatch between order and transaction (transaction belongs to order: %transaction_order_id). Order: %order_id and transaction_id: %transaction_id',
      array(
        '%transaction_order_id' => $transaction->order_id,
        '%order_id' => $order->order_id,
        '%transaction_id' => $transaction->transaction_id,
      ),
      WATCHDOG_ERROR
    );
    return MENU_NOT_FOUND;
  }

  return MENU_FOUND;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_dibs_payment_window_commerce_payment_method_info() {
  $payment_methods = array();

  // Get sent to the DIBS Payment Window.
  $payment_methods['commerce_dibs_payment_window'] = array(
    'title' => 'DIBS Payment Window',
    'description' => 'Provides DIBS (Mobile) Payment Windows as a payment method.',
    'display_title' => t('Credit Card'),
    'short_title' => 'DIBS',
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'file' => 'commerce_dibs_payment_window.inc',
    'terminal' => FALSE,
  );

  return $payment_methods;
}

/**
 * Checks if a transaction has DIBS Payment Window as Payment Method.
 *
 * @param object $transaction
 *   The transaction to check.
 *
 * @return bool
 *   True if transaction has DIBS Payment Window, false if not.
 */
function _commerce_dibs_payment_window_transaction_has_dibs($transaction) {
  return $transaction->payment_method === 'commerce_dibs_payment_window';
}

/**
 * Checks if a transaction can be captured.
 *
 *
 * @param object $transaction
 *   The transaction to check.
 *
 * @return bool
 *   True if transaction has DIBS Payment Window, false if not.
 */
function _commerce_dibs_payment_window_transaction_can_be_captured($transaction) {
  return !empty($transaction->remote_id) && $transaction->remote_status == COMMERCE_DIBS_PAYMENT_WINDOW_REMOTE_STATUS_AUTHORIZED;
}

/**
 * Checks if a transaction can be refunded.
 *
 *
 * @param object $transaction
 *   The transaction to check.
 *
 * @return bool
 *   True if transaction can be refunded, false if not.
 */
function _commerce_dibs_payment_window_transaction_can_be_refunded($transaction) {
  return !empty($transaction->remote_id) && $transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS && $transaction->remote_status == COMMERCE_DIBS_PAYMENT_WINDOW_REMOTE_STATUS_CAPTURED;
}
