<?php
/**
 * @file
 * Provide pgp encryption for user contact pages
 *
 * TODO Force SSL using http://stackoverflow.com/questions/5106313/redirecting-from-http-to-https-with-php for instance - do this on ajax key, contact form and key upload pages
 */

/**
 * Implements hook_help().
 */
function pgp_contact_help($path, $arg) {
  global $user;

  switch ($path) {
    case 'admin/help#pgp_contact':
      return '<p>' . t('PGP public keys can be uploaded from !user, and may then be used to encrypt messages sent from !contact. You can configure this module on !admin', array('!user' => l(t('your account'), "user/{$user->uid}/pgp-key"), '!contact' => l(t('your contact form'), "user/{$user->uid}/contact"), '!admin' => l(t('this settings page'), 'admin/structure/contact/pgp'))) . '</p>';
      break;
    case 'admin/structure/contact/pgp':
      return '<p>' . t('This page lets you specify where to find the OpenPGP.js library downloaded from !link, among other things.', array('!link' => l(t('GitHub'), 'https://github.com/openpgpjs/openpgpjs/releases'))) . '</p>';
      break;
    case 'admin/structure/contact/pgp-key':
      return '<p>' . t('You may upload a public key for use with the site-wide contact form here.') . '</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function pgp_contact_menu() {
  $items = array();

  $items['admin/structure/contact/pgp'] = array(
    'title' => t('PGP settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgp_contact_settings'),
    'access arguments' => array('administer contact forms'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/pgp_contact.admin.inc',
  );

  $items['admin/structure/contact/pgp-key'] = array(
    'title' => t('PGP public key'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgp_contact_pubkey', 2, 4),
    'access arguments' => array('administer contact forms'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/pgp_contact.forms.inc',
  );

  $items['user/%user/pgp-key'] = array(
    'title' => 'PGP public key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgp_contact_pubkey', 0, 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/pgp_contact.forms.inc',
  );

  $items['user/%user/ajax-key'] = array(
    'page callback' => 'pgp_contact_ajax_key',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function pgp_contact_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'pgp_contact') . '/inc',
  );
}

/**
 * Implements hook_libraries_info().
 */
function pgp_contact_libraries_info() {
  $libs = array();

  $libs['openpgpjs'] = array(
    'name' => 'OpenPGP.js',
    'vendor url' => 'http://openpgpjs.org/',
    'download url' => 'https://github.com/openpgpjs/openpgpjs/releases/tag/v0.7.2',
    'version arguments' => array(
      'file' => 'openpgp.min.js',
      'pattern' => '/v(([0-9]\.?)+)/',
      'lines' => 1,
      'cols' => 128,
    ),
    'files' => array(
      'js' => array('openpgp.min.js'),
    ),
  );

  return $libs;
}

/**
 * Implementation of hook_form_alter
 * This is where pgp_contact actually enables encryption on contact forms
 */
function pgp_contact_form_alter(&$form, &$form_state, $form_id) {
  $affected_forms = array('contact_personal_form', 'contact_site_form');
  global $user;

  if (in_array($form_id, $affected_forms)) {

    _pgp_contact_secure_form(t('Your connection is unsecured.'));

    switch ($form_id) {
      case 'contact_personal_form':
        $id = arg(1);
        $key_info = _pgp_contact_user_key($id);
        if ($user->uid == 0 && variable_get('pgp_contact_anon_contact', 0)) {
          $form['from']['#value'] = theme('username', $user) . ' &lt;' . check_plain(variable_get('site_mail', ini_get('sendmail_from'))) . '&gt;';
          // Unset the send yourself a copy checkbox
          unset($form['copy']);
        }
        break;
      case 'contact_site_form':
        $id = 0;
        $key_info = _pgp_contact_user_key(NULL, 'contact');
        break;
    }
    if ($key_info) {
      _pgp_contact_lib_load();
      
      $form['pgp_contact_token'] = array(
        '#type' => 'hidden',
        '#value' => drupal_get_token()
      );

      drupal_add_js(array('pgpContact' => array(
        'user' => $id,
        'message' => t('Encrypting...'),
      )), array(
        'type' => 'setting',
      ));

      drupal_add_js(drupal_get_path('module', 'pgp_contact') . '/js/pgp_contact.encrypt.js', array(
        'type' => 'file',
        'scope' => 'footer',
      ));

      $form['actions']['encrypt'] = array(
        '#type' => 'submit',
        '#value' => t('Encrypt & send e-mail'),
        '#disabled' => TRUE,
      );

      if ($key_info->policy == 'always') {
        unset($form['actions']['submit']);
      }
    }
  }
}

/**
 * AJAX callback to return user keys
 *
 * @param $account object
 *   A user object from Drupal.
 */
function pgp_contact_ajax_key($account) {
  global $user;

  $data = new stdClass();

  if ($account->uid) $type = 'user';
  else $type = 'contact';

  $data->type = $type;

  $submitted_form_token = check_plain($_POST['token']);

  $data->tokenCheck = drupal_valid_token($submitted_form_token);

  // Verify the form token and either return the public key or not
  if (($submitted_form_token == 'undefined' && $user->uid == 0) || drupal_valid_token($submitted_form_token)) {
    $key_info = _pgp_contact_user_key($account->uid, $type);
    $data->publicKey = $key_info->public_key;
  }
  else {
    $data->publicKey = t('You stink.');
  }
  return drupal_json_output($data);
}

/**
 * Helper to check the library, optionally uses libraries API.
 */
function _pgp_contact_lib_info($existing = array(), $path = FALSE) {
  static $lib;
  $path = ($path) ? $path : variable_get('pgp_contact_library_path', 'sites/all/libraries/openpgpjs');
  if (!isset($lib)) {
    $lib = $existing;
    if (function_exists('libraries_detect')) {
      $lib = libraries_detect("openpgpjs");
    }
    else {
      $lib['installed'] = FALSE;
      $file = $path . '/openpgp.min.js';
      if (is_readable($file)) {
        $data = substr(file_get_contents($file), 0, 128);
        $matches = array();
        if (preg_match('/v(([0-9]\.?)+)/', $data, $matches)) {
          $lib['installed'] = TRUE;
          $lib['version'] = $matches[1];
        }
        else {
          $lib['error'] = 'not supported';
          $lib['error message'] = t('Library version not found.');
        }
      }
    }
  }
  return $lib;
}

/**
 * Helper to check the library version
 */
function _pgp_contact_is_lib_supported() {
  static $lib;
  if (!isset($lib))
    $lib = _pgp_contact_lib_info();

  $ver = explode('.', $lib['version']);
  if ($ver[0] == 0 && $ver[1] < 8) 
    return TRUE;
  else
    return FALSE;
}

/**
 * Display any warnings needed on admin pages
 */
function _pgp_contact_warnings() {
  if (!_pgp_contact_is_lib_supported())
    drupal_set_message(t('An unsupported version of OpenPGP.js was detected.'), 'error');
}

/**
 * Helper to load the library.
 */
function _pgp_contact_lib_load() {
  $lib = array('loaded' => FALSE);
  if (function_exists('libraries_load')) {
    $lib = libraries_load('openpgpjs');
  }
  else {
    $lib = _pgp_contact_lib_info($lib);
    if ($lib['installed']) {
      drupal_add_js(variable_get('pgp_contact_library_path', 'sites/all/libraries/openpgpjs') . '/openpgp.min.js');
      $lib['loaded'] = TRUE;
    }
  }
  return $lib;
}

/**
 * Helper function to get a user's key.
 *
 * @param int $id
 *   The numeric user id or contact id to check
 * @param string $type
 *   Either 'user' or 'contact'. Defaults to 'user'.
 */
function _pgp_contact_user_key($id, $type = 'user') {
  $qry = db_select('pgp_contact_pub_keys', 'pk')
    ->fields('pk')
    ->condition('type', $type, '=')
    ->range(0,1);

  switch ($type) {

    case 'user':
      $qry->condition('uid', $id, '=');
      break;

	default:
      break;

  }

  return $qry->execute()->fetchObject();
}

/**
 * Helper to secure forms
 */
function _pgp_contact_secure_form($msg) {
  _pgp_contact_ssl_redirect();
  _pgp_contact_ssl_check($msg);
}

/**
 * Helper to check ssl, an display a warning message if it is absent
 */
function _pgp_contact_ssl_check($msg) {
  global $is_https;
  if (!variable_get('pgp_contact_disable_ssl_check', 0) && !$is_https) {
    drupal_set_message($msg, 'error');
  }
}

/**
 * Redirect to an SSL enabled version of the page, if possible
 */
function _pgp_contact_ssl_redirect() {
  global $is_https, $language;
  if (variable_get('pgp_contact_force_ssl') && !$is_https) {
    $path = current_path();
    $options = array('https' => TRUE, 'language' => $language, 'absolute' => TRUE);
    drupal_goto($path, $options);
  }
}


