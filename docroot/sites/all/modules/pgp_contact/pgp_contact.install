<?php
/**
 * @file
 * Set up a structure for storing pgp keys and settings info.
 */

/**
 * Implements hook_schema().
 */
function pgp_contact_schema() {
  $schema = array();

  $schema['pgp_contact_pub_keys'] = array(
    'description' => 'Stores public keys and info on a per user basis',
    'fields' => array(
      'uid' => array(
        'description' => 'User id from the users table.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'Whether the key is for a user or a contact form.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 12,
      ),
      'fingerprint' => array(
        'description' => 'The key fingerprint',
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 52,
      ),
      'policy' => array(
        'description' => 'How to handle encryption - either "always" or "user".',
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 12,
      ),
      'algorithm' => array(
        'description' => 'PGP key type.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 12,
      ),
      'key_data' => array(
        'description' => 'Serialized data for use by the js libraries.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
      ),
      'display_info' => array(
        'description' => 'Serialized info about the key for display in user profiles and on forms.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
      ),
      'public_key' => array(
        'description' => 'Full PGP public key.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Check module requirements.
 */
function pgp_contact_requirements($phase) {
  $t = get_t();
  switch ($phase) {
    case 'runtime':
      $lib = _pgp_contact_lib_info();
      $req = array(
        'pgp' => array(
          'title' => $t('PGP.js'),
          'value' => '',
          'description' => '',
          'severity' => REQUIREMENT_INFO,
        ),
      );
      if ($lib['installed']) {
        $ver = explode('.', $lib['version']);
        $req['pgp']['description'] = $t('Version @version of OpenPGP.js is installed.', array('@version' => $lib['version']));
        if (_pgp_contact_is_lib_supported()) {
          $req['pgp']['severity'] = REQUIREMENT_OK;
          $req['pgp']['value'] = $t('Found supported version of OpenPGP.js');
        }
        else {
          $req['pgp']['severity'] = REQUIREMENT_WARNING;
          $req['pgp']['value'] = $t('Found unsupported version of OpenPGP.js');
        }
      }
      else {
        $req['pgp']['value'] = $t('OpenPGP.js not found');
        $req['pgp']['description'] = $t('Library not found, please download it from !link and install it in @path.', array(
          '!link' => l($t('GitHub'), 'https://github.com/openpgpjs/openpgpjs/releases/tag/v0.7.2'),
          '@path' => variable_get('pgp_contact_library_path', 'sites/all/libraries/openpgpjs'),
        ));
        $req['pgp']['severity'] = REQUIREMENT_ERROR;
        if (isset($lib['error'])) {
          $req['pgp']['description'] .= "\nError: {$lib['error']} - {$lib['error message']}";
        }
      }
      return $req;

    default:
      break;

  }
}

/**
 * Implements hook_install().
 */
function pgp_contact_install() {
  variable_set('pgp_contact_library_path', 'sites/all/libraries/openpgpjs');
  variable_set('pgp_contact_sitewide_policy', 'user');
  variable_get('pgp_contact_disable_ssl_check', 0);
  variable_get('pgp_contact_force_ssl', 0);
}

/**
 * Implements hook_uninstall().
 */
function pgp_contact_uninstall() {
  variable_del('pgp_contact_library_path');
  variable_del('pgp_contact_sitewide_policy');
  variable_del('pgp_contact_force_ssl');
  variable_del('pgp_contact_disable_ssl_check');
}

/**
 * Implements hook_update_N for upgrades to drupal 7
 */
function pgp_contact_update_7000() {
  db_add_field('pgp_contact_pub_keys', 'fingerprint', array(
    'description' => 'The key fingerprint',
    'type' => 'varchar',
    'not null' => FALSE,
    'length' => 52,
  ));
  db_change_field('pgp_contact_pub_keys', 'key_type', 'algorithm', array(
    'description' => 'PGP key type.',
    'type' => 'varchar',
    'not null' => TRUE,
    'length' => 12,
  ));
}
