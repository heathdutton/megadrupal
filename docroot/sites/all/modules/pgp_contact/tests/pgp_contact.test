<?php

/**
 * @file
 * SimpleTest tests for PGP Contact
 */

/**
 * Test library upload and detection.
 */
class PgpContactLibraryTestCase extends DrupalWebTestCase {
  protected $privileged;

  /**
   * Return info about the test.
   */
  public static function getInfo() {
    return array(
      'name' => t('Library test'),
      'description' => t('Test OpenPGP.js library detection with and without libraries API'),
      'group' => t('PGP Contact'),
    );
  }

  /**
   * Enable pgp_contact and create a user with the appropriate permissions.
   */
  function setUp() {
    parent::setUp('contact', 'pgp_contact');
    //$this->varStore = array();
    //$this->varStore['pgp_contact_library_path'] = variable_get('pgp_contact_library_path', 'sites/all/libraries/openpgpjs');

    // Setup both users and login as the privileged user.
    $this->privileged = $this->drupalCreateUser(array('access content', 'administer site configuration'));
    $this->drupalLogin($this->privileged);
  }

  /**
   * Clean up.
   */
  function tearDown() {
    //variable_set('pgp_contact_library_path', $this->varStore['pgp_contact_library_path']);
    parent::tearDown();
  }

  /**
   * Access the report page.
   */
  public function testStatusReport() {
    $this->drupalGet('admin/reports/status');
    $this->assertText(t('Found supported version of OpenPGP.js'));
  }

}

/**
 * Test the submission of pgp-keys for users
 */
class PgpContactUserTestCase extends DrupalWebTestCase {
  // The users
  protected $privileged_user;
  protected $other_user;

  public static function getInfo() {
    return array(
      'name' => t('PGP keys for users'),
      'description' => t('Uploads a pgp-key and checks the policies. Makes sure permissions are working properly for user pgp keys.'),
      'group' => t('PGP Contact'),
    );
  }
  
  /**
   * Enable pgp_contact and create a user with the appropriate permissions
   */
  function setUp() {
    parent::setUp('contact', 'pgp_contact');

    // Setup both users and login as the privileged user
    $this->privileged_user = $this->drupalCreateUser(array('access content', 'administer users'));
    $this->other_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($this->privileged_user);
  }

  /**
   * Make sure we can't access another user's key upload page
   */
  public function testPgpContactAccess() {

    // Privileged user should be able to access other user's key upload page
    $this->drupalGet("user/{$this->other_user->uid}/pgp-key");
    $this->assertResponse(200, t('User accessed own key upload form.'));

    // Other user should be denied access to privileged user's key upload page
    $this->drupalLogin($this->other_user);
    $this->drupalGet("user/{$this->privileged_user->uid}/pgp-key");
    $this->assertResponse(403, t("User denied access other user's key upload form."));

    // Other user should be able to access their own page
    $this->drupalGet("user/{$this->other_user->uid}/pgp-key");
    $this->assertResponse(200, t("Admin accessed other user's key upload form."));
  }

  /**
   * Test an RSA key
   */
  public function testPgpContactRSAKey() {
    $key_form = array();
    $key_form['public_key'] = file_get_contents(drupal_get_path('module', 'pgp_contact') . '/tests/RSA0x77B8CE7Bpub.asc');
    $key_form['key_info[algorithm]'] = 'RSA';
    $key_form['pgp_contact_policy'] = 'user';
    $this->drupalPost("user/{$this->privileged_user->uid}/pgp-key", $key_form, t('Submit key'));
    $this->assertText(t('Public key successfully uploaded.'));

    // Check that the policy is correctly implemented
    $this->drupalGet("user/{$this->privileged_user->uid}/contact");
    $this->assertFieldById('edit-submit', t('Send message'), t('User policy verified.'));

    // Now try the always policy
    $key_form['pgp_contact_policy'] = 'always';
    $this->drupalPost("user/{$this->privileged_user->uid}/pgp-key", $key_form, t('Submit key'));  
    $this->drupalGet("user/{$this->privileged_user->uid}/contact");
    $this->assertNoFieldById('edit-submit', t('Send message'), t('Always policy verified.'));
  }

  /**
   * Test a DSA key
   */
  public function testPgpContactDSAKey() {
    $key_form = array();
    $key_form['public_key'] = file_get_contents(drupal_get_path('module', 'pgp_contact') . '/tests/DSA0xF6FB8209pub.asc');
    $key_form['key_info[algorithm]'] = 'DSA';
    $key_form['pgp_contact_policy'] = 'user';
    $this->drupalPost("user/{$this->privileged_user->uid}/pgp-key", $key_form, t('Submit key'));
    $this->assertText(t('Public key successfully uploaded.'));

    // Check that the policy is correctly implemented
    $this->drupalGet("user/{$this->privileged_user->uid}/contact");
    $this->assertFieldById('edit-submit', t('Send message'), t('User policy verified.'));

    // Now try the always policy
    $key_form['pgp_contact_policy'] = 'always';
    $this->drupalPost("user/{$this->privileged_user->uid}/pgp-key", $key_form, t('Submit key'));  
    $this->drupalGet("user/{$this->privileged_user->uid}/contact");
    $this->assertNoFieldById('edit-submit', t('Send message'), t('Always policy verified.'));
  }
}

/**
 * Test the submission of pgp-keys for the site-wide contact form
 */
class PgpContactSiteWideTestCase extends DrupalWebTestCase {
  // The users
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => t('Site-wide PGP keys'),
      'description' => t('Uploads a pgp-key and checks the site-wide contact form policy implementations.'),
      'group' => t('PGP Contact'),
    );
  }
  
  /**
   * Enable pgp_contact and create a user with the appropriate permissions
   */
  function setUp() {
    parent::setUp('contact', 'pgp_contact');

    // Setup both users and login as the privileged user
    $this->admin_user = $this->drupalCreateUser(array('access content', 'administer contact forms', 'access site-wide contact form', 'administer site configuration'));
    $this->drupalLogin($this->admin_user);

    // Configure a contact form category so that we can do things with it
    $contact_cat = array(
      'category' => 'testing',
      'recipients' => 'test@php-contact.com',
      'selected' => 1,
    );
    $this->drupalPost('admin/structure/contact/add', $contact_cat, t('Save'));
  }

  /**
   * Test an RSA key
   */
  public function testPgpContactRSAKey() {
    $key_form = array();
    $key_form['public_key'] = file_get_contents(drupal_get_path('module', 'pgp_contact') . '/tests/RSA0x77B8CE7Bpub.asc');
    $key_form['key_info[algorithm]'] = 'RSA';
    $key_form['pgp_contact_policy'] = 'user';
    $this->drupalPost('admin/structure/contact/pgp-key', $key_form, t('Submit key'));
    $this->assertText(t('Public key successfully uploaded.'));

    // Check that the policy is correctly implemented
    $this->drupalGet('contact');
    $this->assertFieldById('edit-submit', t('Send message'), t('User policy verified.'));

    // Now try the always policy
    $key_form['pgp_contact_policy'] = 'always';
    $this->drupalPost('admin/structure/contact/pgp-key', $key_form, t('Submit key'));  
    $this->drupalGet('contact');
    $this->assertNoFieldById('edit-submit', t('Send message'), t('Always policy verified.'));
  }

  /**
   * Test a DSA key
   */
  public function testPgpContactDSAKey() {
    $key_form = array();
    $key_form['public_key'] = file_get_contents(drupal_get_path('module', 'pgp_contact') . '/tests/DSA0xF6FB8209pub.asc');
    $key_form['key_info[algorithm]'] = 'DSA';
    $key_form['pgp_contact_policy'] = 'user';
    $this->drupalPost('admin/structure/contact/pgp-key', $key_form, t('Submit key'));
    $this->assertText(t('Public key successfully uploaded.'));

    // Check that the policy is correctly implemented
    $this->drupalGet('contact');
    $this->assertFieldById('edit-submit', t('Send message'), t('User policy verified.'));

    // Now try the always policy
    $key_form['pgp_contact_policy'] = 'always';
    $this->drupalPost('admin/structure/contact/pgp-key', $key_form, t('Submit key'));  
    $this->drupalGet('contact');
    $this->assertNoFieldById('edit-submit', t('Send message'), t('Always policy verified.'));
  }
}

/**
 * Test the settings form and administrative permissions
 */
class PgpContactSettingsTestCase extends DrupalWebTestCase {
  // The users
  protected $admin_user;
  protected $other_user;
  protected $library_path;

  public static function getInfo() {
    return array(
      'name' => t('PGP contact form settings'),
      'description' => t('Checks access to the settings and makes sure that site-wide policies are correctly implemented.'),
      'group' => t('PGP Contact'),
    );
  }

  /**
   * Enable pgp_contact and create a user with the appropriate permissions
   */
  function setUp() {
    $this->library_path = variable_get('pgp_contact_library_path', '');
    parent::setUp('contact', 'pgp_contact');

    // Setup both users and login as the privileged user
    $this->admin_user = $this->drupalCreateUser(array('access content', 'administer contact forms', 'access site-wide contact form', 'administer site configuration'));
    $this->other_user = $this->drupalCreateUser(array('access content', 'access site-wide contact form'));
    $this->drupalLogin($this->admin_user);

    // Configure a contact form category so that we can do things with it
    $contact_cat = array(
      'category' => 'testing',
      'recipients' => 'test@php-contact.com',
      'selected' => 1,
    );
    $this->drupalPost('admin/structure/contact/add', $contact_cat, t('Save'));

    // Upload an RSA key we will use for testing
    $key_form = array();
    $key_form['public_key'] = file_get_contents(drupal_get_path('module', 'pgp_contact') . '/tests/RSA0x77B8CE7Bpub.asc');
    $key_form['key_info[algorithm]'] = 'RSA';
    $key_form['pgp_contact_policy'] = 'user';
    $this->drupalPost('admin/structure/contact/pgp-key', $key_form, t('Submit key'));
  }

  /**
   * Verify some options on the settings page
   */
  public function testPgpContactSettings () {
    $this->drupalLogin($this->other_user);
    $this->drupalGet('admin/structure/contact/pgp');
    $this->assertResponse(403, t("User denied access to settings."));
    $this->drupalLogin($this->admin_user);
    $this->assertResponse(200, t("Admin granted access to settings."));

    // First try to pass the wrong path
    $settings_form = array (
      'pgp_contact_library_path' => 'a/wrong/path',
    );
    $this->drupalPost('admin/structure/contact/pgp', $settings_form, t('Save configuration'));    
    $this->assertText(t('The OpenPGP.js library was not found.'));

    // Now the correct path.
    $settings_form = array (
      'pgp_contact_library_path' => $this->library_path,
    );
    $this->drupalPost('admin/structure/contact/pgp', $settings_form, t('Save configuration'));

    // Test the policy
    $settings_form['pgp_contact_sitewide_policy'] = 'always';
    $this->drupalPost('admin/structure/contact/pgp', $settings_form, t('Save configuration'));

    // Make sure the encryption policy choices are absent from the upload form
    $this->drupalGet('admin/structure/contact/pgp-key');
    $this->assertNoFieldByName('pgp_contact_policy', 'user', t('Check the user policy radio button.'));
    $this->assertNoFieldByName('pgp_contact_policy', 'always', t('Check the always policy radio button.'));

    // Make sure the policy is correctly applied on the contact form
    $this->drupalGet('contact');
    $this->assertNoFieldById('edit-submit', t('Send message'), t('Always policy has been correctly applied.'));

  }
}

