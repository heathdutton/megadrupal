<?php
/**
 * @file
 * Install, update and uninstall functions for media_theplatform_mpx.
 */

/**
 * Implements hook_schema().
 */
function media_theplatform_mpx_schema() {

  $schema['mpx_player'] = array(
    'description' => 'Stores imported mpxPlayers.',
    'fields' => array(
      'player_id' => array(
        'description' => 'The primary identifier for a mpxPlayer.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Title in thePlatform',
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Description in thePlatform',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'id' => array(
        'description' => 'Id in thePlatform',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'PID in thePlatform',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'guid' => array(
        'description' => 'Guid in thePlatform',
        'type' => 'varchar',
        'length' => 512,
        'not null' => TRUE,
        'default' => 0,
      ),
      'fid' => array(
        'description' => 'Fid in file_managed',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'parent_account' => array(
        'description' => 'Top-Level Account in thePlatform',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'account' => array(
        'description' => 'Sub-Account in thePlatform',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'timestamp of created',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'timestamp of import',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Player status',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('player_id'),
    'indexes' => array(
      'fid' => array('fid'),
      'guid' => array(array('guid', 255)),
    ),
  );

  $schema['mpx_video'] = array(
    'description' => 'Stores imported mpx Videos.',
    'fields' => array(
      'video_id' => array(
        'description' => 'The primary identifier for a Video.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Title in thePlatform',
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Description in thePlatform',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'id' => array(
        'description' => 'Id in thePlatform',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'guid' => array(
        'description' => 'Guid in thePlatform',
        'type' => 'varchar',
        'length' => 512,
        'not null' => TRUE,
        'default' => 0,
      ),
      'fid' => array(
        'description' => 'Fid in file_managed',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'player_id' => array(
        'description' => 'player_id field in mpx_video.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'parent_account' => array(
        'description' => 'Top-Level Account in thePlatform',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'account' => array(
        'description' => 'Sub-Account in thePlatform',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'thumbnail_url' => array(
        'description' => 'thumbnail URL',
        'type' => 'varchar',
        'length' => '2048',
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'timestamp of created',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'timestamp of import',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Video status',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      // Additional default mpx fields.
      'released_file_pids' => array(
        'description' => 'Released File Public IDs',
        'type' => 'blob',
        'size' => 'normal',
        'not null' => FALSE,
        'default' => NULL,
        'serialize' => TRUE,
      ),
      'default_released_file_pid' => array(
        'description' => 'Default Video Public ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'categories' => array(
        'description' => 'Video Categories',
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'default' => NULL,
        'serialize' => TRUE,
      ),
      'author' => array(
        'description' => 'Video Author',
        'type' => 'varchar',
        'length' => 512,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'airdate' => array(
        'description' => 'Video Air Date',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'available_date' => array(
        'description' => 'Video Available Date',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'expiration_date' => array(
        'description' => 'Video Expiration Date',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'keywords' => array(
        'description' => 'Video Keywords',
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'copyright' => array(
        'description' => 'Video Copyright',
        'type' => 'varchar',
        'length' => 512,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'related_link' => array(
        'description' => 'Video Related Link',
        'type' => 'varchar',
        'length' => 2048,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'fab_rating' => array(
        'description' => 'Video Film Advisory Board Rating',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'fab_sub_ratings' => array(
        'description' => 'Video Film Advisory Board Sub-Ratings',
        'type' => 'blob',
        'size' => 'normal',
        'not null' => FALSE,
        'default' => NULL,
        'serialize' => TRUE,
      ),
      'mpaa_rating' => array(
        'description' => 'Video MPAA Rating',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'mpaa_sub_ratings' => array(
        'description' => 'Video MPAA Sub-Ratings',
        'type' => 'blob',
        'size' => 'normal',
        'not null' => FALSE,
        'default' => NULL,
        'serialize' => TRUE,
      ),
      'vchip_rating' => array(
        'description' => 'Video V-Chip Rating',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'vchip_sub_ratings' => array(
        'description' => 'Video V-Chip Sub-Ratings',
        'type' => 'blob',
        'size' => 'normal',
        'not null' => FALSE,
        'default' => NULL,
        'serialize' => TRUE,
      ),
      'exclude_countries' => array(
        'description' => 'Exclude the countries in the "countries" field.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'countries' => array(
        'description' => 'Video Countries',
        'type' => 'blob',
        'size' => 'normal',
        'not null' => FALSE,
        'default' => NULL,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('video_id'),
    'indexes' => array(
      'fid' => array('fid'),
      'id' => array('id'),
      'guid' => array(array('guid', 255)),
    ),
  );

  $schema['mpx_accounts'] = array(
    'description' => 'Stores mpx account data.',
    'fields' => array(
      'id' => array(
        'description' => 'Internal Account ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'username' => array(
        'description' => 'thePlatform Account Username',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'password' => array(
        'description' => 'thePlatform Account Password',
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'import_account' => array(
        'description' => 'thePlatform Import Sub-Account',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'account_id' => array(
        'description' => 'thePlatform Account ID',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'account_pid' => array(
        'description' => 'thePlatform Public Account ID',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'default_player' => array(
        'description' => 'ID From mpx_player Table.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['mpx_account_data'] = array(
    'description' => 'Stores variable mpx account data.',
    'fields' => array(
      'account_id' => array(
        'description' => 'Internal Account ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => "The name of the variable.",
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
      ),
      'value' => array(
        'description' => "The value of the variable.",
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('account_id', 'name'),
  );

  $schema['cache_mpx'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_mpx']['description'] = 'Cache table for the media_theplatform_mpx module.';

  return $schema;
}

/**
 * Implements hook_enable().
 */
function media_theplatform_mpx_enable() {
  _media_theplatform_mpx_copy_icons();
}

/**
 * Copy the default mpx image for use with the 'Large filetype icon' display.
 */
function _media_theplatform_mpx_copy_icons() {
  $destination = variable_get('media_icon_base_directory', 'public://media-icons') . '/' . variable_get('media_icon_set', 'default');
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  $source = drupal_get_path('module', 'media_theplatform_mpx') . '/images/icons/' . variable_get('media_icon_set', 'default');
  $files = file_scan_directory($source, '/.*\.png$/');
  foreach ($files as $file) {
    $result = file_unmanaged_copy($file->uri, $destination, FILE_EXISTS_REPLACE);
    if (!$result) {
      throw new Exception("Unable to copy {$file->uri} to $destination.");
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function media_theplatform_mpx_uninstall() {
  drupal_load('module', 'media_theplatform_mpx');

  // Remove accounts.
  if ($ids = db_query("SELECT id FROM {mpx_accounts}")->fetchCol()) {
    foreach ($ids as $id) {
      _media_theplatform_mpx_delete_account($id, FALSE);
    }
  }

  // Remove variables.
  variable_del('media_theplatform_mpx__cron_players');
  variable_del('media_theplatform_mpx__cron_videos');
  variable_del('media_theplatform_mpx__cron_videos_per_run');
  variable_del('media_theplatform_mpx__cron_videos_timeout');
  variable_del('media_theplatform_mpx__cron_queue_processing_time');
  variable_del('media_theplatform_mpx__output_message_watchdog_severity');
  variable_del('media_theplatform_mpx__watchdog_severity');
  variable_del('media_theplatform_mpx__token_ttl');
  variable_del('media_theplatform_mpx_notification_size');
  variable_del('media_theplatform_mpx_debug');

  variable_del('media_theplatform_mpx__cron_next_to_last');
  variable_del('media_theplatform_mpx__running_total_videos_processed');
  variable_del('media_theplatform_mpx__running_total_video_processing_time');
  variable_del('media_theplatform_mpx__backup_last_notification_value');
  variable_del('media_theplatform_mpx__default_player_fid');

  variable_del('media_theplatform_mpx__drush_video_ingestion_request_item_limit');
  variable_del('media_theplatform_mpx__drush_video_notification_ingestion_request_item_limit');
  variable_del('media_theplatform_mpx__drush_video_ingestion_notification_timeout');
  variable_del('media_theplatform_mpx__drush_video_ingestion_request_timeout');
  variable_del('media_theplatform_mpx_assets_protocol_fallback');

  // Deprecated variables.
  variable_del('media_theplatform_mpx__username');
  variable_del('media_theplatform_mpx__password');
  variable_del('media_theplatform_mpx__token');
  variable_del('media_theplatform_mpx__date_idletimeout');
  variable_del('media_theplatform_mpx__import_account');
  variable_del('media_theplatform_mpx__account_id');
  variable_del('media_theplatform_mpx__account_pid');
  variable_del('media_theplatform_mpx__last_notification');

  // Delete the cron queue.
  /** @var DrupalReliableQueueInterface $queue */
  $queue = DrupalQueue::get('media_theplatform_mpx_video_cron_queue', TRUE);
  $queue->deleteQueue();
}

/**
 * Add player_id field to mpx_video table.
 */
function media_theplatform_mpx_update_7200() {

  $default_player_fid = media_theplatform_mpx_variable_get('default_player_fid', '');
  $default_player_id = db_query('SELECT player_id FROM {mpx_player} WHERE fid = :fid',
    array(':fid' => $default_player_fid))->fetchField();

  $player_id_field = array(
    'description' => 'player_id field in mpx_video.',
    'type' => 'int',
    'not null' => FALSE,
  );

  db_add_field('mpx_video', 'player_id', $player_id_field);
}

/**
 * Encrypt existing sensitive variables.
 */
function media_theplatform_mpx_update_7201() {

  if (db_table_exists('cache_libraries')) {
    cache_set('module_implements', array(), 'cache_bootstrap');
    drupal_static_reset('module_implements');
    cache_clear_all('*', 'cache_libraries', TRUE);
    drupal_static_reset('libraries_info');
  }

  if ($username = variable_get('media_theplatform_mpx__username', NULL)) {
    variable_set('media_theplatform_mpx__username', base64_decode($username));
  }
  if ($password = variable_get('media_theplatform_mpx__password', NULL)) {
    variable_set('media_theplatform_mpx__password', base64_decode($password));
  }
  if ($token = variable_get('media_theplatform_mpx__token', NULL)) {
    variable_set('media_theplatform_mpx__token', base64_decode($token));
  }
}

/**
 * Add the mpx_accounts table.  Add parent_account column to the mpx_player and
 * mpx_video tables.  Convert existing mpx data to multi-account configuration.
 */
function media_theplatform_mpx_update_7202() {

  // Add a parent_account reference column to the mpx_player and mpx_video players.
  $parent_account_field = array(
    'description' => 'Top-Level Account in thePlatform',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  );
  db_add_field('mpx_player', 'parent_account', $parent_account_field);
  db_add_field('mpx_video', 'parent_account', $parent_account_field);

  // Create the mpx_accounts table.
  db_create_table('mpx_accounts', drupal_get_schema_unprocessed('media_theplatform_mpx', 'mpx_accounts'));

  // Convert mpx account system variables to a single entry in the mpx_accounts
  // table.
  $account_inserted = FALSE;
  if (($current_username = media_theplatform_mpx_variable_get('username')) &&
      ($current_password = media_theplatform_mpx_variable_get('password')) &&
      ($current_token = media_theplatform_mpx_variable_get('token')) &&
      ($current_idle_timeout = media_theplatform_mpx_variable_get('date_idletimeout'))) {
    db_query('INSERT INTO {mpx_accounts} (username, password, token, idle_timeout)
      VALUES (:username, :password, :token, :idle_timeout)',
      array(
        ':username' => _media_theplatform_mpx_encrypt_value($current_username),
        ':password' => _media_theplatform_mpx_encrypt_value($current_password),
        ':token' => _media_theplatform_mpx_encrypt_value($current_token),
        ':idle_timeout' => $current_idle_timeout,
      ));
    $account_inserted = TRUE;
  }

  if (!$account_inserted) {
    drupal_set_message(t('Old thePlatform mpx account were not carried over into the new multi-account configuration'));
  }

  $update_fields = array();

  if (($current_import_account = media_theplatform_mpx_variable_get('import_account')) &&
      ($current_account_id = media_theplatform_mpx_variable_get('account_id')) &&
      ($current_account_pid = media_theplatform_mpx_variable_get('account_pid'))) {
    $update_fields['import_account'] = $current_import_account;
    $update_fields['account_id'] = $current_account_id;
    $update_fields['account_pid'] = $current_account_pid;
  }
  if ($current_player_fid = media_theplatform_mpx_variable_get('default_player_fid')) {
    $current_player = media_theplatform_mpx_get_mpx_player_by_fid($current_player_fid);
    $update_fields['default_player'] = $current_player['player_id'];
  }
  if ($current_last_notification = media_theplatform_mpx_variable_get('last_notification')) {
    $update_fields['last_notification'] = $current_last_notification;
  }
  if (($current_proprocessing_batch_url = media_theplatform_mpx_variable_get('proprocessing_batch_url')) &&
      ($current_proprocessing_batch_item_count = media_theplatform_mpx_variable_get('proprocessing_batch_item_count')) &&
      ($current_proprocessing_batch_current_item = media_theplatform_mpx_variable_get('proprocessing_batch_current_item'))) {
    $update_fields['proprocessing_batch_url'] = $current_proprocessing_batch_url;
    $update_fields['proprocessing_batch_item_count'] = $current_proprocessing_batch_item_count;
    $update_fields['proprocessing_batch_current_item'] = $current_proprocessing_batch_current_item;
  }

  if (!empty($update_fields)) {
    db_update('mpx_accounts')
      ->fields($update_fields)
      ->condition('id', 1)
      ->execute();
  }

  // Set the new parent_account column in the mpx_player and mpx_video tables
  // to the id of the record added above.
  db_query('UPDATE {mpx_player} SET parent_account = 1');
  db_query('UPDATE {mpx_video} SET parent_account = 1');
}

/**
 * Add default mpx fields to mpx_video table.
 */
function media_theplatform_mpx_update_7203() {

  $default_mpx_fields = array(
    'released_file_pids',
    'default_released_file_pid',
    'categories',
    'author',
    'airdate',
    'available_date',
    'expiration_date',
    'keywords',
    'copyright',
    'related_link',
    'fab_rating',
    'fab_sub_ratings',
    'mpaa_rating',
    'mpaa_sub_ratings',
    'vchip_rating',
    'vchip_sub_ratings',
    'exclude_countries',
    'countries',
  );
  $mpx_video_schema = drupal_get_schema_unprocessed('media_theplatform_mpx', 'mpx_video');

  foreach ($default_mpx_fields as $field_name) {
    db_add_field('mpx_video', $field_name, $mpx_video_schema['fields'][ $field_name ]);
  }
}

/**
 * Increase the length of the mpx_video thumbnail_url column.
 */
function media_theplatform_mpx_update_7204() {

  db_change_field('mpx_video', 'thumbnail_url', 'thumbnail_url',
    array(
      'type' => 'varchar',
      'length' => '1024',
      'not null' => TRUE,
    )
  );
}

/**
 * Increase the length of the mpx_accounts proprocessing_batch_url column.
 */
function media_theplatform_mpx_update_7205() {

  db_change_field('mpx_accounts', 'proprocessing_batch_url', 'proprocessing_batch_url',
    array(
      'type' => 'varchar',
      'length' => '512',
      'not null' => FALSE,
    )
  );
}

/**
 * Add an index to the db table in order to improve query performance.
 */
function media_theplatform_mpx_update_7206() {
  db_add_index('mpx_player', 'fid', array('fid'));
  db_add_index('mpx_video', 'fid', array('fid'));
}

/**
 * Remove the mpx_log table.
 */
function media_theplatform_mpx_update_7207() {

  db_drop_table('mpx_log');
}

/**
 * Increase the length of the mpx_accounts proprocessing_batch_url column (again).
 */
function media_theplatform_mpx_update_7208() {

  db_change_field('mpx_accounts', 'proprocessing_batch_url', 'proprocessing_batch_url',
    array(
      'type' => 'varchar',
      'length' => '1024',
      'not null' => FALSE,
    )
  );
}

/**
 * Upping default mpx field length limits with latest findings from thePlatform.
 */
function media_theplatform_mpx_update_7209() {

  // mpx_player table
  db_change_field('mpx_player', 'title', 'title',
    array(
     'description' => 'Title in thePlatform',
     'type' => 'varchar',
     'length' => 2048,
     'not null' => TRUE,
     'default' => '',
    )
  );
  db_change_field('mpx_player', 'description', 'description',
    array(
     'description' => 'Description in thePlatform',
     'type' => 'text',
     'size' => 'medium',
     'not null' => TRUE,
    )
  );
  db_change_field('mpx_player', 'guid', 'guid',
    array(
     'description' => 'Guid in thePlatform',
     'type' => 'varchar',
     'length' => 512,
     'not null' => TRUE,
     'default' => 0,
    )
  );

  // mpx_video table
  db_change_field('mpx_video', 'title', 'title',
    array(
     'description' => 'Title in thePlatform',
     'type' => 'varchar',
     'length' => 2048,
     'not null' => TRUE,
     'default' => '',
    )
  );
  db_change_field('mpx_video', 'description', 'description',
    array(
     'description' => 'Description in thePlatform',
     'type' => 'text',
     'size' => 'medium',
     'not null' => TRUE,
    )
  );
  db_change_field('mpx_video', 'guid', 'guid',
    array(
     'description' => 'Guid in thePlatform',
     'type' => 'varchar',
     'length' => 512,
     'not null' => TRUE,
     'default' => 0,
    )
  );
  db_change_field('mpx_video', 'thumbnail_url', 'thumbnail_url',
    array(
     'description' => 'thumbnail URL',
     'type' => 'varchar',
     'length' => '2048',
     'not null' => TRUE,
     'default' => '',
    )
  );
  db_change_field('mpx_video', 'default_released_file_pid', 'default_released_file_pid',
    array(
     'description' => 'Default Video Public ID',
     'type' => 'varchar',
     'length' => 64,
     'not null' => FALSE,
     'default' => NULL,
    )
  );
  db_change_field('mpx_video', 'categories', 'categories',
    array(
     'description' => 'Video Categories',
     'type' => 'blob',
     'size' => 'big',
     'not null' => FALSE,
     'default' => NULL,
    )
  );
  db_change_field('mpx_video', 'author', 'author',
    array(
     'description' => 'Video Author',
     'type' => 'varchar',
     'length' => 512,
     'not null' => FALSE,
     'default' => NULL,
    )
  );
  db_change_field('mpx_video', 'keywords', 'keywords',
    array(
     'description' => 'Video Keywords',
     'type' => 'text',
     'size' => 'medium',
     'not null' => FALSE,
     'default' => NULL,
    )
  );
  db_change_field('mpx_video', 'copyright', 'copyright',
    array(
      'description' => 'Video Related Link',
      'type' => 'varchar',
      'length' => 2048,
      'not null' => FALSE,
      'default' => NULL,
    )
  );
}

/**
 * Appending account id to mpx video file entity URIs.
 */
function media_theplatform_mpx_update_7210(&$sandbox) {
  // db_update() doesn't allow for multiple tables, so we fall back to
  // db_query().
  $tables = array('file_managed');
  if (db_table_exists('file_managed_revisions')) {
    $tables[] = 'file_managed_revisions';
  }
  foreach ($tables as $table) {
    db_query("UPDATE " . $table . " f, mpx_accounts m SET f.uri = CONCAT(f.uri, '/a/', SUBSTRING(m.account_id, 50)) WHERE f.type = CONCAT('mpx_video_', m.id);");
  }
}

/**
 * Change Last Notification ID column Type.
 */
function media_theplatform_mpx_update_7211(&$sandbox) {
  // Changing to bigint over int (& varchar).
  db_change_field('mpx_accounts', 'last_notification', 'last_notification',
    array(
      'description' => 'Last Notification Sequence ID',
      'type' => 'int',
      'size' => 'big',
      'not null' => FALSE,
    )
  );
}

/**
 * Change Available Date, Expiration Date, and Air Date column type to int.
 */
function media_theplatform_mpx_update_7212(&$sandbox) {
  db_change_field('mpx_video', 'airdate', 'airdate',
    array(
     'description' => 'Video Air Date',
     'type' => 'int',
     'not null' => TRUE,
     'unsigned' => TRUE,
     'default' => 0,
    )
  );
  db_change_field('mpx_video', 'available_date', 'available_date',
    array(
     'description' => 'Video Available Date',
     'type' => 'int',
     'not null' => TRUE,
     'unsigned' => TRUE,
     'default' => 0,
    )
  );
  db_change_field('mpx_video', 'expiration_date', 'expiration_date',
    array(
     'description' => 'Video Expiration Date',
     'type' => 'int',
     'not null' => TRUE,
     'unsigned' => TRUE,
     'default' => 0,
    )
  );
}

/**
 * Increase the size of the {mpx_players}.player_data column.
 */
function media_theplatform_mpx_update_7213() {
  db_change_field('mpx_player', 'player_data', 'player_data', array(
    'type' => 'blob',
    'description' => 'Serialized array of player data',
    'size' => 'big',
  ));
}

/**
 * Add indexes on mpx_player.guid and mpx_video.guid.
 */
function media_theplatform_mpx_update_7214() {
  db_add_index('mpx_player', 'guid', array(array('guid', 255)));
  db_add_index('mpx_video', 'guid', array(array('guid', 255)));
}

/**
 * Decrypt account username and token values.
 */
function media_theplatform_mpx_update_7215() {
  // Include functions needed if the module is currently disabled.
  drupal_load('module', 'media_theplatform_mpx');

  $records = db_query("SELECT id, username, token FROM {mpx_accounts}")->fetchAll();
  foreach ($records as $record) {
    $record->username = _media_theplatform_mpx_decrypt_value($record->username);
    if (empty($record->username)) {
      throw new DrupalUpdateException("Unable to decode mpx_accounts.username for id $record->id");
    }
    if (!empty($record->token)) {
      $record->token = _media_theplatform_mpx_decrypt_value($record->token);
    }
    drupal_write_record('mpx_accounts', $record, array('id'));
  }
}

/**
 * Switch to the encrypt module.
 */
function media_theplatform_mpx_update_7216() {
  // Include functions needed if the module is currently disabled.
  drupal_load('module', 'media_theplatform_mpx');

  // Enable the encrypt module. We know this will be available since it was
  // added as a dependency in our info file, and updates cannot be run until
  // dependencies have been fulfilled.
  if (!module_exists('encrypt')) {
    module_enable(array('encrypt'));
  }

  // Fetch all the accounts before changing the database columns.
  $records = db_query("SELECT id, username, password FROM {mpx_accounts}")->fetchAll();

  // The password field now stores serialized encrypted data, change to a blob.
  db_change_field('mpx_accounts', 'password', 'password', array(
    'description' => 'thePlatform Account Password',
    'type' => 'blob',
    'not null' => TRUE,
    'size' => 'big',
    'serialize' => TRUE,
  ));

  // Re-encrypt all the passwords using the Encrypt API.
  foreach ($records as $record) {
    $record->password = _media_theplatform_mpx_decrypt_value($record->password);
    $record->password = encrypt($record->password);
    db_update('mpx_accounts')
      ->fields(array('password' => $record->password))
      ->condition('id', $record->id)
      ->execute();
  }
}

/**
 * Use cache to store tokens instead of the mpx_accounts table.
 */
function media_theplatform_mpx_update_7217() {
  if (!db_table_exists('cache_mpx')) {
    $schema = drupal_get_schema_unprocessed('system', 'cache');
    $schema['description'] = 'Cache table for the media_theplatform_mpx module.';
    db_create_table('cache_mpx', $schema);
  }

  if (db_field_exists('mpx_accounts', 'token')) {
    db_drop_field('mpx_accounts', 'token');
    db_drop_field('mpx_accounts', 'idle_timeout');
  }
}

/**
 * Convert mpx_accounts.import_account to not be URL-encoded.
 */
function media_theplatform_mpx_update_7218() {
  $accounts = db_query("SELECT import_account FROM {mpx_accounts}")->fetchAllKeyed(0, 0);
  $accounts = array_map('rawurldecode', array_filter($accounts));

  foreach ($accounts as $old => $new) {
    if ($old === $new) {
      continue;
    }
    db_update('mpx_accounts')
      ->fields(array('import_account' => $new))
      ->condition('import_account', $old)
      ->execute();
    db_update('mpx_player')
      ->fields(array('account' => $new))
      ->condition('account', $old)
      ->execute();
    db_update('mpx_video')
      ->fields(array('account' => $new))
      ->condition('account', $old)
      ->execute();
  }
}

/**
 * Add the mpx_account_data table.
 */
function media_theplatform_mpx_update_7219() {
  // A non-empty value indicates that an import process is currently running.
  if (db_query("SELECT 1 FROM {mpx_accounts} WHERE proprocessing_batch_url <> '' AND proprocessing_batch_url IS NOT NULL")->fetchField()) {
    throw new DrupalUpdateException("Cannot run media_theplatform_mpx_update_7219() while mpx import is currently running.");
  }

  if (!db_table_exists('mpx_account_data')) {
    $schema = array(
      'description' => 'Stores variable mpx account data.',
      'fields' => array(
        'account_id' => array(
          'description' => 'Internal Account ID',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'name' => array(
          'description' => "The name of the variable.",
          'type' => 'varchar',
          'length' => '64',
          'not null' => TRUE,
        ),
        'value' => array(
          'description' => "The value of the variable.",
          'type' => 'blob',
          'not null' => FALSE,
        ),
      ),
      'primary key' => array('account_id', 'name'),
    );
    db_create_table('mpx_account_data', $schema);
  }

  $results = db_query("SELECT id, last_notification FROM {mpx_accounts} WHERE last_notification IS NOT NULL")->fetchAll();
  foreach ($results as $result) {
    db_insert('mpx_account_data')->fields(array(
      'account_id' => $result->id,
      'name' => 'last_notification',
      'value' => $result->last_notification,
    ))->execute();
  }

  db_drop_field('mpx_accounts', 'last_notification');
  db_drop_field('mpx_accounts', 'proprocessing_batch_url');
  db_drop_field('mpx_accounts', 'proprocessing_batch_item_count');
  db_drop_field('mpx_accounts', 'proprocessing_batch_current_item');
}

/**
 * Drop player_data, body_html, and head_html columns.
 */
function media_theplatform_mpx_update_7220() {
  db_drop_field('mpx_player', 'player_data');
  db_drop_field('mpx_player', 'body_html');
  db_drop_field('mpx_player', 'head_html');
}

/**
 * Ensure the default mpx icon is copied to the media icon directory.
 */
function media_theplatform_mpx_update_7221() {
  _media_theplatform_mpx_copy_icons();
}

/**
 * Add index on mpx_video.id.
 */
function media_theplatform_mpx_update_7222() {
  db_add_index('mpx_video', 'id', array('id'));
}

/**
 * Serialize the data in the mpx_account_data.value column.
 */
function media_theplatform_mpx_update_7223() {
  db_change_field('mpx_account_data', 'value', 'value', array(
    'description' => "The value of the variable.",
    'type' => 'blob',
    'not null' => FALSE,
    'size' => 'big',
    'serialize' => TRUE,
  ));

  $records = db_query("SELECT account_id, name, value FROM {mpx_account_data}")->fetchAll();
  foreach ($records as $record) {
    db_update('mpx_account_data')
      ->fields(array(
        'value' => serialize($record->value),
      ))
      ->condition('account_id', $record->account_id)
      ->condition('name', $record->name)
      ->execute();
  }
}
