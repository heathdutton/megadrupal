<?php

/**
 * Implements hook_menu().
 */
function cvent_menu() {
  $items = array();

  $items['admin/config/cvent'] = array(
    'title' => 'Cvent',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cvent_settings_form'),
    'access arguments' => array('administer cvent'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function cvent_permission() {
  return array(
    'administer cvent' => array(
      'title' => t('administer cvent'),
      'description' => t('TODO Add a description for \'administer cvent\''),
    ),
  );
}

/**
 * Admin configuration form.
 */
function cvent_settings_form($form, &$form_state) {
  $form['cvent_account_number'] = array(
    '#title' => 'Cvent account number',
    '#type' => 'textfield',
    '#default_value' => variable_get('cvent_account_number', NULL),
  );

  $form['cvent_user_name'] = array(
    '#title' => 'Cvent username',
    '#type' => 'textfield',
    '#default_value' => variable_get('cvent_user_name', NULL),
  );

  $form['cvent_password'] = array(
    '#title' => 'Cvent password',
    '#type' => 'textfield',
    '#default_value' => variable_get('cvent_password', NULL),
  );

  $form['cvent_wsdl_url'] = array(
    '#title' => 'Cvent WSDL URL',
    '#type' => 'textfield',
    '#description' => 'e.g. https://api.cvent.com/soap/V200611.ASMX?WSDL',
    '#default_value' => variable_get('cvent_wsdl_url', NULL),
  );

  return system_settings_form($form);
}

/**
 * Login to Cvent API.
 *
 * @param SoapClient $client
 *   An initialized Cvent SOAP client.
 *
 * @return SoapClient|bool
 *   An authenticated SoapClient, or FALSE if failed authentication.
 */
function cvent_login($client) {
  $login = new stdClass;
  $login->AccountNumber = variable_get('cvent_account_number', $default = NULL);
  $login->UserName = variable_get('cvent_user_name', $default = NULL);
  $login->Password = variable_get('cvent_password', $default = NULL);

  try {
    $result = $client->Login($login);
  } catch (SoapFault $e) {
    // Check for login failure.  If so return error message.
    cvent_error($e, 'Login', $login);
    drupal_set_message('There was a problem with your Cvent login.  Please make sure your login information is correct, and make sure your server IP address is cleared for API access.', 'error');
  }

  if ($result->LoginResult->CventSessionHeader) {
    $CventSessionValue = array('CventSessionValue' => $result->LoginResult->CventSessionHeader);
    $expire = REQUEST_TIME + (60 * 19);
    cache_set('custom:cvent_key', $CventSessionValue, 'cache', $expire);
    return $client;
  }

  return FALSE;
}

/**
 * Get a Cvent client, with session headers.
 *
 * @return SoapClient
 */
function cvent_set_client() {
  static $client = NULL;

  if (!$client) {
    $wsdl = variable_get('cvent_wsdl_url', 'https://api.cvent.com/soap/V200611.ASMX?WSDL');
    $client = new SoapClient($wsdl, array(
      'trace' => 1,
      'exceptions' => 1,
      'features' => SOAP_SINGLE_ELEMENT_ARRAYS,
    ));
    // retrieve session ID from cache if it exists and it has not expired.  Pass on the ID, otherwise login and set ID
    $cache = cache_get('custom:cvent_key');
    if (!$cache or REQUEST_TIME > $cache->expire) {
      cvent_login($client);
      $cache = cache_get('custom:cvent_key');
    }
    $soap_header = new SOAPHeader(variable_get('cvent_session_header', 'http://api.cvent.com/2006-11'), 'CventSessionHeader', $cache->data);
    $client->__setSoapHeaders($soap_header);
  }

  return $client;
}

/**
 * Retrieve objects by a simple search.
 *
 * @param string $object_type
 *   The object type to retrieve.
 * @param array $filters
 *   An array of filters.
 * @param string $search_type
 *   Treat the search filters as 'AndSearch' or 'OrSearch'.
 *
 *   $filters[] = array(
 *     'field' => 'EventCode',
 *     'operator' => 'Contains',
 *     'value' => 'ABCDEFG13345465',
 *     // OR: 'value' => array('12345', 'ABCDEFGHI')
 *       @todo multivalue not working
 *   );
 *
 * @see https://api.cvent.com/soap/V200611.ASMX?op=Search
 */
function cvent_search_retrieve($object_type, $filters, $search_type = 'OrSearch') {
  $search = new stdClass;
  $search->ObjectType = $object_type;
  $search->CvSearchObject->SearchType = $search_type;
  foreach ($filters as $filter) {
    if (!is_array($filter['value'])) {
      $filter['value'] = array($filter['value']);
    }

    $new_filter = new stdClass();

    $new_filter->Field = $filter['field'];
    $new_filter->Operator = $filter['operator'];
    foreach ($filter['value'] as $value) {
      // @todo what is the proper syntax to make it work with ValueArray ?
      $new_filter->Value = $value;
    }

    $search->CvSearchObject->Filter[] = $new_filter;
  }

  $ids = cvent_call_search($search)->SearchResult;

  if ($ids) {
    $objects = cvent_retrieve($object_type, $ids)->RetrieveResult->CvObject;
    return $objects;
  }

  return FALSE;
}

/**
 * Search with criteria.
 *
 * @param object $criteria
 *   Criteria object.
 *
 * @return array
 *   An array of object IDs.
 *
 * @see https://api.cvent.com/soap/V200611.ASMX?op=Search
 */
function cvent_call_search($criteria) {
  $response = cvent_call('Search', $criteria);

  if (!$response->SearchResult) {
    return;
  }

  return $response;
}

/**
 * Retrieve by IDs.
 *
 * @param string $type
 *   Type of CvObject to retrieve.
 * @param array $ids
 *   Array of object IDs.
 *
 * @return array
 *   An array of CvObjects.
 *
 * @see https://api.cvent.com/soap/V200611.ASMX?op=Retrieve
 */
function cvent_retrieve($type, $ids) {
  $retrieve = new stdClass;
  $retrieve->ObjectType = $type;
  $retrieve->Ids = $ids;
  $response = cvent_call('Retrieve', $retrieve);

  if (!$response->RetrieveResult) {
    return;
  }

  return $response;
}

/**
 * Log handler for SoapFaults.
 *
 * @param SoapFault $e
 *   An Exception
 * @param mixed $data
 *   The data causing the Exception
 */
function cvent_error($e, $call, $data) {
  watchdog('cvent', nl2br('Cvent SOAP Fault!
    Call: %call
    Message: %message
    Data: %data'), array('%call' => $call, '%message' => $e->getMessage(), '%data' => print_r($data, TRUE)));
}

/**
 * Make a call using the Cvent SOAP client.
 *
 * @param type $method
 *   The method to call.
 * @param type $data
 *   Data to send.
 */
function cvent_call($method, $data) {
  $client = cvent_set_client();
  try {
    $response = $client->$method($data);
    watchdog('cvent', 'Cvent called %call with %data', array('%call' => $method, '%data' => print_r($data, TRUE)));
    return $response;
  } catch (SoapFault $e) {
    cvent_error($e, $method, $data);
  }
}
