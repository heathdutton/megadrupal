<?php

/**
 * @file
 * Enables full website page loads (page.tpl.php) with Ajax.
 */

/**
 * Implements hook_library().
 */
function ajax_pages_library() {
  $libraries = array();

  $libraries['ajax_pages'] = array(
    'title' => 'Ajax pages',
    'version' => '7.x-1.x',
    'js' => array(
      drupal_get_path('module', 'ajax_pages') . '/ajax_pages.js' => array(
        'weight' => 5,
      ),
    ),
    'dependencies' => array(
      array('system', 'jquery.form'),
      array('system', 'drupal.ajax'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_init().
 */
function ajax_pages_init() {
  $suppress_paths = trim(variable_get('ajax_pages_suppress_paths', ''));
  if (!path_is_admin(current_path()) && !drupal_match_path(current_path(), $suppress_paths)) {
    // Add the Ajax pages library.
    drupal_add_library('ajax_pages', 'ajax_pages', TRUE);

    // Let the client side know which paths are administrative.
    // @see overlay_overlay_parent_initialize()
    $paths = path_get_admin_paths();
    // Add custom suppression paths to the client's 'admin' list.
    if (!empty($suppress_paths)) {
      $paths['admin'] .= "\n" . $suppress_paths;
    }
    foreach ($paths as &$type) {
      $type = str_replace('<front>', variable_get('site_frontpage', 'node'), $type);
    }
    drupal_add_js(array('ajaxPages' => array('paths' => $paths)), 'setting');
    $path_prefixes = array();
    if (module_exists('locale')) {
      // locale_init() hasn't run by now so include locale.inc manually to get
      // the LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX constant.
      include_once DRUPAL_ROOT . '/includes/locale.inc';
      if (variable_get('locale_language_negotiation_url_part', LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
        // Get languages grouped by status and select only the enabled ones.
        $languages = language_list('enabled');
        $languages = $languages[1];

        $path_prefixes = array();
        foreach ($languages as $language) {
          if ($language->prefix) {
            $path_prefixes[] = $language->prefix;
          }
        }
      }
    }
    drupal_add_js(array('ajaxPages' => array('pathPrefixes' => $path_prefixes)), 'setting');

    // Add module settings pertaining to the client.
    $settings = array(
      'linksSelector' => variable_get('ajax_pages_links_selector', NULL),
    );
    drupal_add_js(array('ajaxPages' => $settings), 'setting');
  }

  // Store information about whether this page request is an Ajax pages one
  // and remove it from request parameter arrays.
  if (isset($_REQUEST['_ajax_pages'])) {
    ajax_pages_is_ajax_pages_request(TRUE);
    unset($_GET['_ajax_pages']);
    unset($_REQUEST['_ajax_pages']);
  }
  else {
    ajax_pages_is_ajax_pages_request(FALSE);
  }
}

/**
 * Implements hook_menu().
 */
function ajax_pages_menu() {
  $items = array();

  $items['admin/config/user-interface/ajax-pages'] = array(
    'title' => 'Ajax pages',
    'description' => 'Configuration for setting up Ajax page loads.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajax_pages_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: Ajax pages settings.
 *
 * @see ajax_pages_menu()
 */
function ajax_pages_settings_form($form, &$form_state) {
  $form['ajax_pages_wrapper_selector'] = array(
    '#type' => 'textfield',
    '#title' => t('Page wrapper selector'),
    '#default_value' => variable_get('ajax_pages_wrapper_selector', '#page-wrapper'),
    '#size' => 60,
    '#description' => t("A jQuery selector that specifies the wrapper element of your page. You add this element in your theme's html.tpl.php file so that it wraps the output of the <code>page_top</code>, <code>page</code> and <code>page_bottom</code> regions.<br />Example: <code>@example</code>", array('@example' => '#page-wrapper')),
    '#required' => TRUE,
  );
  $form['ajax_pages_links_selector'] = array(
    '#type' => 'textfield',
    '#title' => t('Ajax links selector'),
    '#default_value' => variable_get('ajax_pages_links_selector', NULL),
    '#size' => 60,
    '#description' => t('A jQuery selector that specifies all of the links that you want to enable Ajax page loads for.<br />Example: <code>#page-wrapper a</code>'),
    '#required' => FALSE,
  );
  $form['ajax_pages_suppress_paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Suppress Ajax page loading on specific pages'),
    '#default_value' => variable_get('ajax_pages_suppress_paths', ''),
    '#description' => t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
    '#required' => FALSE,
  );

  return system_settings_form($form);
}

/**
 * Sets the flag for whether this page request is an Ajax pages one.
 */
function ajax_pages_is_ajax_pages_request($ajax_pages = NULL) {
  $is_ajax_pages_request = &drupal_static(__FUNCTION__, FALSE);

  if (isset($ajax_pages)) {
    $is_ajax_pages_request = $ajax_pages;
  }

  return $is_ajax_pages_request;
}

/**
 * Implements hook_form_alter().
 */
function ajax_pages_form_alter(&$form, &$form_state, $form_id) {
  // By default, form #action is set to request_uri(), which is carrying the
  // _ajax_pages parameter in an Ajax pages request. Stripping the parameter
  // from request_uri() via altering $_SERVER['REQUEST_URI'] in
  // ajax_pages_init() is not good because it brings up various side effects,
  // so we're just doing it locally in a hook_form_alter() implementation.
  if (ajax_pages_is_ajax_pages_request() && $form['#action'] == request_uri()) {
    $form['#action'] = _ajax_pages_remove_querystring_var($form['#action'], '_ajax_pages');
  }
}

/**
 * Implements hook_drupal_goto_alter().
 */
function ajax_pages_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if (ajax_pages_is_ajax_pages_request()) {
    $options['query']['_ajax_pages'] = 1;
  }
}

/**
 * Implements hook_page_delivery_callback_alter().
 */
function ajax_pages_page_delivery_callback_alter(&$callback) {
  // When serving Ajax page requests, deliver just the main page
  // without the html.tpl.php wrapper.
  if (ajax_pages_is_ajax_pages_request() && $callback == 'drupal_deliver_html_page') {
    $callback = 'ajax_pages_deliver_page';
  }
}

/**
 * Delivers the content of the requested page, for Ajax pages requests.
 */
function ajax_pages_deliver_page($page_callback_result) {
  global $base_root;

  if (is_int($page_callback_result)) {
    // Pass over to drupal_deliver_html_page() to deal with errors.
    drupal_deliver_html_page($page_callback_result);
  }
  else {
    $output = array();

    // Render the page as usual. This will store the final html.tpl.php
    // $variables in _ajax_pages_html_variables().
    drupal_render_page($page_callback_result);

    // Synchronize the current page state in the client.
    $url = _ajax_pages_remove_querystring_var($base_root . request_uri(), '_ajax_pages');
    $output[] = ajax_pages_ajax_command_synchronize_state($url);

    // Get the list of CSS and JS files to be loaded with the page.
    $items = ajax_pages_get_files();

    // Load CSS files.
    // This is as hackish as it gets, but it mostly works: Render the CSS files
    // one by one and grab rendered filename from the resulting HTML. This
    // allows for aggregation/compression-friendly processing of CSS and JS.
    $css_files = array();
    foreach ($items['css'] as $key => $item) {
      if (preg_match('/(url\(|href=)"(.*?)"/', drupal_get_css(array($key => $item), TRUE), $matches)) {
        $css_files[$key] = $matches[2];
      }
    }
    $output[] = ajax_pages_ajax_command_load_files('css', $css_files);

    // Load JS header and footer files.
    $js_header_files = array();
    $js_footer_files = array();
    foreach ($items['js'] as $key => $item) {
      if (preg_match('/src="(.*?)"/', drupal_get_js($item['scope'], array($key => $item), TRUE), $matches)) {
        if ($item['scope'] == 'header') {
          $js_header_files[$key] = $matches[1];
        }
        elseif ($item['scope'] == 'footer') {
          $js_footer_files[$key] = $matches[1];
        }
      }
    }
    $output[] = ajax_pages_ajax_command_load_files('js', $js_header_files, 'header');
    $output[] = ajax_pages_ajax_command_load_files('js', $js_footer_files, 'footer');

    // Retrieve the variables.
    $html_variables = _ajax_pages_html_variables();

    $attributes = $html_variables['attributes_array'];
    $attributes['class'] = $html_variables['classes_array'];
    // Preserve Administration menu body element classes.
    $preserve_classes = array('admin-menu', 'admin-menu-with-shortcuts');
    $output[] = ajax_pages_ajax_command_attributes('body', $attributes, $preserve_classes);

    $output[] = ajax_pages_ajax_command_set_title($html_variables['head_title']);
    $content = $html_variables['page_top'] . $html_variables['page'] . $html_variables['page_bottom'];
    $output[] = ajax_pages_ajax_command_page_html(variable_get('ajax_pages_wrapper_selector', '#page-wrapper'), $content);

    $page = array(
      '#type' => 'ajax',
      '#commands' => $output,
    );

    ajax_deliver($page);
  }
}

/**
 * Returns the list of CSS and JS files to be loaded with the page.
 */
function ajax_pages_get_files() {
  foreach (array('css', 'js') as $type) {
    $function = 'drupal_add_' . $type;
    $items[$type] = $function();
    drupal_alter($type, $items[$type]);
    // @todo Inline CSS and JS items are indexed numerically. These can't be
    //   reliably diffed with array_diff_key(), since the number can change
    //   due to factors unrelated to the inline content, so for now, we strip
    //   the inline items from Ajax responses, and can add support for them
    //   when drupal_add_css() and drupal_add_js() are changed to using md5()
    //   or some other hash of the inline content.
    foreach ($items[$type] as $key => $item) {
      if (is_numeric($key)) {
        unset($items[$type][$key]);
      }
    }
  }

  // Settings are handled separately.
  if (isset($items['js']['settings'])) {
    unset($items['js']['settings']);
  }

  return $items;
}

/**
 * Implements hook_ajax_render_alter().
 */
function ajax_pages_ajax_render_alter(&$commands) {
  if (ajax_pages_is_ajax_pages_request()) {
    // Handle updating Drupal.settings ourselves.
    foreach ($commands as &$command) {
      if ($command['command'] == 'settings') {
        $command['command'] = 'ajaxPagesSettings';
        break;
      }
    }
  }
}

/**
 * Ajax command to synchronize the current browser state (URL) for the page.
 *
 * @return array
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_pages_ajax_command_synchronize_state($url) {
  return array(
    'command' => 'ajaxPagesSynchronizeState',
    'url' => $url,
  );
}

/**
 * Ajax command to load extra CSS/JS files.
 *
 * @return array
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_pages_ajax_command_load_files($type, $files, $scope = '') {
  return array(
    'command' => 'ajaxPagesLoadFiles',
    'type' => $type,
    'files' => $files,
    'scope' => $scope,
  );
}

/**
 * Ajax command to set the page title.
 *
 * @return array
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_pages_ajax_command_set_title($title) {
  return array(
    'command' => 'ajaxPagesSetTitle',
    'title' => $title,
  );
}

/**
 * Ajax command to set element attributes.
 *
 * @return array
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_pages_ajax_command_attributes($selector, array $attributes = array(), array $preserve_classes = array()) {
  // @see drupal_attributes()
  foreach ($attributes as $attribute => &$data) {
    $data = implode(' ', (array) $data);
  }
  return array(
    'command' => 'ajaxPagesAttributes',
    'selector' => $selector,
    'attributes' => $attributes,
    'preserveClasses' => $preserve_classes,
  );
}

/**
 * Ajax command to set the page content HTML.
 *
 * @return array
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_pages_ajax_command_page_html($selector, $html, $settings = NULL) {
  return array(
    'command' => 'ajaxPagesPageHtml',
    'selector' => $selector,
    'data' => $html,
    'settings' => $settings,
  );
}

/**
 * Implements hook_process_html().
 *
 * Stores the final html.tpl.php $variables array for later retrieval
 * by ajax_pages_deliver_page().
 */
function ajax_pages_process_html(&$variables) {
  if (ajax_pages_is_ajax_pages_request()) {
    _ajax_pages_html_variables($variables);
  }
}

/**
 * Stores render array variables to allow for later retrieval.
 */
function _ajax_pages_html_variables($variables = NULL) {
  $stored_variables = &drupal_static(__FUNCTION__, array());

  if (isset($variables)) {
    $stored_variables = $variables;
  }

  return $stored_variables;
}

/**
 * Removes querystring variable from the URL.
 */
function _ajax_pages_remove_querystring_var($url, $varname) {
  list($urlpart, $qspart) = array_pad(explode('?', $url), 2, '');
  parse_str($qspart, $qsvars);
  unset($qsvars[$varname]);
  $newqs = http_build_query($qsvars);
  return $urlpart . (!empty($newqs) ? '?' . $newqs : '');
}
