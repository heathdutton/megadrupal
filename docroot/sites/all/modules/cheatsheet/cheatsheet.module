<?php
/**
 * @file
 * Cheat Sheet Generator.
 *
 * Allows you to generate cheat sheets for Drupal 7 API.
 */

/**
 * Implements hook_menu().
 */
function cheatsheet_menu() {
  $items = array();
  // Add menu path for configuration page.
  $items['admin/reports/cheatsheet'] = array(
    'title' => 'Cheat Sheet Generator',
    'description' => 'A tool to generate Drupal API Cheat Sheets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cheatsheet_generator_form'),
    'access arguments' => array('access cheat sheet generator'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function cheatsheet_permission() {
  // Set a permission for accessing the configuration page.
  return array(
    'access cheat sheet generator' => array(
      'title' => t('Access Cheat Sheet generator'),
      'description' => t('Access and generate Cheat Sheets.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function cheatsheet_theme($existing, $type, $theme, $path) {
  return array(
    'cheatsheet_hooklist_table' => array(
      'variables' => array(
        'data' => array(),
      ),
    ),
  );
}

/**
 * Form callback for Cheat Sheet generator.
 */
function cheatsheet_generator_form($form, &$form_state) {

  // Set vertical tabs.
  $form['cheatsheet'] = array(
    '#type' => 'vertical_tabs',
  );

  // Add hooklist generator fieldset.
  $form['cheatsheet']['hooklist'] = array(
    '#type' => 'fieldset',
    '#title' => t('Hooklist'),
  );

  // XML File list.
  $form['cheatsheet']['hooklist']['xml_files'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available XML files'),
    '#options' => cheatsheet_get_xml_files('hooks'),
  );

  // Ignorable hook list.
  $form['cheatsheet']['hooklist']['ignore_list'] = array(
    '#type' => 'textarea',
    '#title' => t('Hook type ignore list'),
    '#description' => t('List of hook types to ignore. (eg. "node" will filter all "hook_node_" beginning hooks)'),
  );

  // CSS customisation field.
  $form['cheatsheet']['hooklist']['css_customisation'] = array(
    '#type' => 'textarea',
    '#title' => t('Modify default CSS markup'),
    '#default_value' => file_get_contents(
      drupal_get_path('module', 'cheatsheet') . DIRECTORY_SEPARATOR . 'hooklist-default.css'
    ),
  );

  // Hooklist generation submit button.
  $form['cheatsheet']['hooklist']['generate_hooklist'] = array(
    '#type' => 'submit',
    '#value' => t('Generate Hooklist'),
    '#submit' => array('cheatsheet_generate_hooklist_submit'),
  );

  // Render generated hooklist.
  if (isset($form_state['hooklist'])) {
    $form['hooklist'] = array(
      '#markup' => theme('cheatsheet_hooklist_table', array('data' => $form_state['hooklist'])),
    );
  }

  return $form;
}

/**
 * Form submission callback for Cheat Sheet Hooklist generator.
 */
function cheatsheet_generate_hooklist_submit($form, &$form_state) {

  // Rebuild the form directly.
  $form_state['rebuild'] = TRUE;

  // Create ignorables list.
  $ignorables = explode("\r\n", $form['cheatsheet']['hooklist']['ignore_list']['#value']);

  // Add style data.
  drupal_add_css(
    check_plain($form['cheatsheet']['hooklist']['css_customisation']['#value']),
    array(
      'type' => 'inline',
    )
  );

  // Generate hook list and store it for until form is rendered.
  $form_state['hooklist'] = cheatsheet_hooklist_generator(
    $form['cheatsheet']['hooklist']['xml_files']['#value'],
    $ignorables
  );

}

/**
 * Get list XML files of specific type.
 */
function cheatsheet_get_xml_files($type) {
  // Scan for fitting XML files in xml directory.
  $files = file_scan_directory(drupal_get_path('module', 'cheatsheet') . '/xml', '/drupal7.' . $type . '/');

  // Create an array of filenames (which can be used by form API).
  $xml_files = array();
  foreach ($files as $file) {
    $xml_files[$file->uri] = check_plain($file->name);
  }

  return $xml_files;
}

/**
 * Returns HTML of a hooklist table.
 *
 * @param array $variables
 *   An associative array containing hooklist data.
 */
function theme_cheatsheet_hooklist_table($variables) {

  $out = '<table class="cheatsheet-hooklist">';

  $count = 0;
  foreach ($variables['data'] as $hookname => $hook) {
    $count++;

    // Begin a new table row.
    $out .= '<tr class="hook-row ' . ($count % 2 === 0 ? 'odd' : 'even') . '" id="hook-' . $count . '">';
    $out .= '<td class="hook-data">';

    // Construct the hook name.
    $out .= '<span class="hook-name">';
    $out_hooknames = array();
    foreach ($hook['name'] as $num => $part) {
      $out_hooknames[] = '<span class="hook-name-part part-' . $num . '">' . $part . '</span>';
    }
    $out .= implode('<span class="hook-name-part-spacer">_</span>', $out_hooknames);
    $out .= '</span>';

    // Construct the hook parameters.
    $out .= '<span class="hook-param-open">(</span><span class="hook-param">';
    $out_parameters = array();

    if (isset($hook['params'])) {
      foreach ($hook['params'] as $num => $param) {
        $out_parameters[] = '<span class="hook-param-part part-' . $num
          . '"><span class="hook-param-part-type">' . $param['type']
          . '</span><span class="hook-param-part-name">'
          . $param['name'] . '</span></span>';
      }
      $out .= implode('<span class="hook-param-part-spacer">,</span>', $out_parameters);
    }

    $out .= '</span><span class="hook-param-open">)</span>';
    $out .= '</td>';

    // Add description in next column.
    $out .= '<td class="hook-description">' . $hook['description'] . '</td>';

    $out .= '</tr>';
  }

  $out .= '</table>';

  return $out;
}

/**
 * Hooklist Cheat Sheet Generator.
 *
 * This function reads the needed doxygen hook group
 * xml files, collects desired hook information and
 * returns everything as array.
 *
 * @param array $xml_files
 *   An array containing the list of doxygen xml files
 *   used to generate the cheat sheet hooklist.
 *   Array key must be used for the file URI.
 * @param array $ignorables
 *   An optional array containing a list of hook types
 *   to ignore while generation.
 *
 * @return array
 *   An alphabetical sorted array with hook information.
 */
function cheatsheet_hooklist_generator($xml_files, $ignorables = array()) {

  $hooklist = array();

  // Load each xml file.
  foreach ($xml_files as $uri => $filename) {
    $xml = simplexml_load_file($uri);

    // Digg out the useful hook information of each hook.
    foreach ($xml->compounddef->sectiondef->memberdef as $hook) {

      $hook_data = array();

      // Split the hook name to determine more information / add some markup.
      $hook_data['name'] = explode('_', check_plain((string) $hook->name));

      // Check wether the hook should be ignored.
      if (array_search($hook_data['name'][1], $ignorables) !== FALSE) {
        continue;
      }

      // Get parameter information.
      foreach ($hook->param as $param) {
        $hook_data['params'][] = array(
          'type' => check_plain($param->type),
          'name' => check_plain($param->declname),
        );
      }

      // Get hook description.
      $hook_data['description'] = check_plain((string) $hook->detaileddescription->para[0]);

      // Get hook location.
      $hook_data['location']['uri'] = check_plain((string) $hook->location->attributes['file']);
      $hook_data['location']['line'] = check_plain((string) $hook->location->attributes['line']);

      // Add hook information to list.
      $hooklist[check_plain((string) $hook->name)] = $hook_data;
    }
  }

  // Sort list by name.
  ksort($hooklist);

  return $hooklist;
}
