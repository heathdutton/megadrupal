<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.3">
  <compounddef id="group__node__api__hooks" kind="group">
    <compoundname>node_api_hooks</compoundname>
    <title>Node API Hooks</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__node__api__hooks_1ga66ea0473a9950dc961802e801e5042e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_delete</definition>
        <argsstring>($node)</argsstring>
        <name>hook_node_delete</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to node deletion.</para><para>This hook is invoked from node_delete_multiple() after the type-specific <ref refid="group__node__api__hooks_1ga8588d8a814e8aef059d9e0f842904b35" kindref="member">hook_delete()</ref> has been invoked, but before hook_entity_delete and <ref refid="group__field__attach_1gac2e3658c9c02d0d0e71359f9ef2f207a" kindref="member">field_attach_delete()</ref> are called, and before the node is removed from the node table in the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is being deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="474" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="474" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gad7e8c6941181366016058771ae841bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_revision_delete</definition>
        <argsstring>($node)</argsstring>
        <name>hook_node_revision_delete</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to deletion of a node revision.</para><para>This hook is invoked from node_revision_delete() after the revision has been removed from the node_revision table, and before <ref refid="group__field__attach_1gaa9eae65e6d9f1996cb27a55ba25b56e9" kindref="member">field_attach_delete_revision()</ref> is called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node revision (node object) that is being deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="492" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="492" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga8b40dc62e46e5055c205d2a723dc3548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_insert</definition>
        <argsstring>($node)</argsstring>
        <name>hook_node_insert</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to creation of a new node.</para><para>This hook is invoked from node_save() after the node is inserted into the node table in the database, after the type-specific <ref refid="group__node__api__hooks_1ga3c6a28d33e07d3506e1eb99718ef4e39" kindref="member">hook_insert()</ref> is invoked, and after <ref refid="group__field__attach_1gad7c37d577b97db5e0c182bc570ed7cf4" kindref="member">field_attach_insert()</ref> is called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is being created. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="510" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="510" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gad48bb14b68ed38526029d1f7ac2d2de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_load</definition>
        <argsstring>($nodes, $types)</argsstring>
        <name>hook_node_load</name>
        <param>
          <type>$</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>$</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on nodes being loaded from the database.</para><para>This hook is invoked during node loading, which is handled by <ref refid="common_8inc_1a78b89cf93f9710a68d02f86adccf1898" kindref="member">entity_load()</ref>, via classes NodeController and <ref refid="class_drupal_default_entity_controller" kindref="compound">DrupalDefaultEntityController</ref>. After the node information is read from the database or the entity cache, <ref refid="group__node__api__hooks_1ga49065b040d7fb3e02889eda6361dac34" kindref="member">hook_load()</ref> is invoked on the node&apos;s content type module, then field_attach_node_revision() or <ref refid="group__field__attach_1ga1e92543395961c912eb293b50e991586" kindref="member">field_attach_load()</ref> is called, then <ref refid="group__hooks_1ga1f594647c8cbb27f75b77cc4118da8d6" kindref="member">hook_entity_load()</ref> is invoked on all implementing modules, and finally <ref refid="group__node__api__hooks_1gad48bb14b68ed38526029d1f7ac2d2de4" kindref="member">hook_node_load()</ref> is invoked on all implementing modules.</para><para>This hook should only be used to add information that is not in the node or node revisions table, not to replace information that is in these tables (which could interfere with the entity cache). For performance reasons, information for all available nodes should be loaded in a single query where possible.</para><para>The $types parameter allows for your module to have an early return (for efficiency) if your module only supports certain node types. However, if your module defines a content type, you can use <ref refid="group__node__api__hooks_1ga49065b040d7fb3e02889eda6361dac34" kindref="member">hook_load()</ref> to respond to loading of just that content type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$nodes</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of the nodes being loaded, keyed by nid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$types</parametername>
</parameternamelist>
<parameterdescription>
<para>An array containing the types of the nodes.</para></parameterdescription>
</parameteritem>
</parameterlist>
For a detailed usage example, see nodeapi_example.module. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="550" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="550" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga4bbe7320bd52fc6183920c8be2d9d4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_prepare</definition>
        <argsstring>($node)</argsstring>
        <name>hook_node_prepare</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on a node object about to be shown on the add/edit form.</para><para>This hook is invoked from node_object_prepare() after the type-specific <ref refid="group__node__api__hooks_1ga2dff6dd92802df6b776a4eeb0b1a737c" kindref="member">hook_prepare()</ref> is invoked.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is about to be shown on the add/edit form. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="630" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="630" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga8644320a0e04e3a503c99626d4223725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_search_result</definition>
        <argsstring>($node)</argsstring>
        <name>hook_node_search_result</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on a node being displayed as a search result.</para><para>This hook is invoked from node_search_execute(), after node_load() and node_view() have been called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node being displayed in a search result.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Extra information to be displayed with search result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="650" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="650" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gab339b1a1ce0e235d4a9c5a05e410dcd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_presave</definition>
        <argsstring>($node)</argsstring>
        <name>hook_node_presave</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on a node being inserted or updated.</para><para>This hook is invoked from node_save() before the node is saved to the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is being inserted or updated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="666" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="666" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gac66c767cc922fcbfdaf17252e5d87d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_update</definition>
        <argsstring>($node)</argsstring>
        <name>hook_node_update</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to updates to a node.</para><para>This hook is invoked from node_save() after the node is updated in the node table in the database, after the type-specific <ref refid="group__node__api__hooks_1gaf9c98e3839e9405df42b50c8cdfa9dca" kindref="member">hook_update()</ref> is invoked, and after <ref refid="group__field__attach_1ga8d15efdca36306ea04552bed4986e77b" kindref="member">field_attach_update()</ref> is called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is being updated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="687" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="687" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gac8420f204c69a4dc641f4d809a870b05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_update_index</definition>
        <argsstring>($node)</argsstring>
        <name>hook_node_update_index</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on a node being indexed for searching.</para><para>This hook is invoked during search indexing, after node_load(), and after the result of node_view() is added as $node-&gt;rendered to the node object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node being indexed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array of additional information to be indexed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="708" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="708" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gad26227eaf0dd513134767a11be40ab1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_validate</definition>
        <argsstring>($node, $form, &amp;$form_state)</argsstring>
        <name>hook_node_validate</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>$</type>
          <declname>form</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>form_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform node validation before a node is created or updated.</para><para>This hook is invoked from node_validate(), after a user has has finished editing the node and is previewing or submitting it. It is invoked at the end of all the standard validation steps, and after the type-specific <ref refid="group__node__api__hooks_1gacaf7cff104c642c28f76ce7ec5f33f40" kindref="member">hook_validate()</ref> is invoked.</para><para>To indicate a validation error, use <ref refid="group__form__api_1ga6f4ecbec42e905390e521b393417f97f" kindref="member">form_set_error()</ref>.</para><para>Note: Changes made to the $node object within your hook implementation will have no effect. The preferred method to change a node&apos;s content is to use <ref refid="group__node__api__hooks_1gab339b1a1ce0e235d4a9c5a05e410dcd6" kindref="member">hook_node_presave()</ref> instead. If it is really necessary to change the node at the validate stage, you can use <ref refid="group__form__api_1ga2a377a1fcccea79d06d1a735dea433f3" kindref="member">form_set_value()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node being validated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>The form being used to edit the node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The form state array. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="741" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="741" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga1b479b731ecb3f9eec0c92e3e1a8e01d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_submit</definition>
        <argsstring>($node, $form, &amp;$form_state)</argsstring>
        <name>hook_node_submit</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>$</type>
          <declname>form</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>form_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on a node after validated form values have been copied to it.</para><para>This hook is invoked when a node form is submitted with either the &quot;Save&quot; or &quot;Preview&quot; button, after form values have been copied to the form state&apos;s node object, but before the node is saved or previewed. It is a chance for modules to adjust the node&apos;s properties from what they are simply after a copy from $form_state[&apos;values&apos;]. This hook is intended for adjusting non-field-related properties. See <ref refid="group__field__attach_1ga368ea58ca800b1e1f69f4b88e82f9ae0" kindref="member">hook_field_attach_submit()</ref> for customizing field-related properties.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node being updated in response to a form submission. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>The form being used to edit the node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The form state array. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="769" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="769" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga475290ee8e81a2373ea17c512cc3f9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_view</definition>
        <argsstring>($node, $view_mode, $langcode)</argsstring>
        <name>hook_node_view</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>$</type>
          <declname>view_mode</declname>
        </param>
        <param>
          <type>$</type>
          <declname>langcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on a node that is being assembled before rendering.</para><para>The module may add elements to $node-&gt;content prior to rendering. This hook will be called after <ref refid="group__node__api__hooks_1gab1f229603b5e0f2f9d9e2a3ab53dcbda" kindref="member">hook_view()</ref>. The structure of $node-&gt;content is a renderable array as expected by <ref refid="common_8inc_1a05798b44e8d6c496d4bee5cc32fa7851" kindref="member">drupal_render()</ref>.</para><para>When $view_mode is &apos;rss&apos;, modules can also add extra RSS elements and namespaces to $node-&gt;rss_elements and $node-&gt;rss_namespaces respectively for the RSS item generated for this node. For details on how this is used, see node_feed().</para><para><simplesect kind="see"><para>blog_node_view() </para><simplesectsep/><para>forum_node_view() </para><simplesectsep/><para>comment_node_view()</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is being assembled for rendering. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$view_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The $view_mode parameter from node_view(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$langcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The language code used for rendering.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gae273ba271c2ef1192fe135afa9da5d49" kindref="member">hook_entity_view()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="804" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="804" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gad5ece824736be57bf0020af900398b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_view_alter</definition>
        <argsstring>(&amp;$build)</argsstring>
        <name>hook_node_view_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>build</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the results of node_view().</para><para>This hook is called after the content has been assembled in a structured array and may be used for doing processing which requires that the complete node content structure has been built.</para><para>If the module wishes to act on the rendered HTML of the node rather than the structured content array, it may use this hook to add a #post_render callback. Alternatively, it could also implement hook_preprocess_node(). See <ref refid="common_8inc_1a05798b44e8d6c496d4bee5cc32fa7851" kindref="member">drupal_render()</ref> and <ref refid="includes_2theme_8inc_1a7c25609a935874541a19657affd30fff" kindref="member">theme()</ref> documentation respectively for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$build</parametername>
</parameternamelist>
<parameterdescription>
<para>A renderable array representing the node content.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>node_view() </para><simplesectsep/><para><ref refid="group__hooks_1ga2c2be6c70815b426f0eb13b0b68edb40" kindref="member">hook_entity_view_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="832" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="832" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga3b6ad51d7815d1cdd093b0e0f350cbd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_info</definition>
        <argsstring>()</argsstring>
        <name>hook_node_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define module-provided node types.</para><para>This hook allows a module to define one or more of its own node types. For example, the blog module uses it to define a blog node-type named &quot;Blog
 entry.&quot; The name and attributes of each desired node type are specified in an array returned by the hook.</para><para>Only module-provided node types should be defined through this hook. User- provided (or &apos;custom&apos;) node types should be defined only in the &apos;node_type&apos; database table, and should be maintained by using the node_type_save() and node_type_delete() functions.</para><para><simplesect kind="return"><para>An array of information defining the module&apos;s node types. The array contains a sub-array for each node type, with the machine-readable type name as the key. Each sub-array has up to 10 attributes. Possible attributes:<itemizedlist>
<listitem><para>&quot;name&quot;: the human-readable name of the node type. Required.</para></listitem><listitem><para>&quot;base&quot;: the base string used to construct callbacks corresponding to this node type. (i.e. if base is defined as example_foo, then example_foo_insert will be called when inserting a node of that type). This string is usually the name of the module, but not always. Required.</para></listitem><listitem><para>&quot;description&quot;: a brief description of the node type. Required.</para></listitem><listitem><para>&quot;help&quot;: help information shown to the user when creating a node of this type.. Optional (defaults to &apos;&apos;).</para></listitem><listitem><para>&quot;has_title&quot;: boolean indicating whether or not this node type has a title field. Optional (defaults to TRUE).</para></listitem><listitem><para>&quot;title_label&quot;: the label for the title field of this content type. Optional (defaults to &apos;Title&apos;).</para></listitem><listitem><para>&quot;locked&quot;: boolean indicating whether the administrator can change the machine name of this type. FALSE = changeable (not locked), TRUE = unchangeable (locked). Optional (defaults to TRUE).</para></listitem></itemizedlist>
</para></simplesect>
The machine-readable name of a node type should contain only letters, numbers, and underscores. Underscores will be converted into hyphens for the purpose of constructing URLs.</para><para>All attributes of a node type that are defined through this hook (except for &apos;locked&apos;) can be edited by a site administrator. This includes the machine-readable name of a node type, if &apos;locked&apos; is set to FALSE. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="887" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="887" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gaf7a28ce3230dc96833ea5338fd26f43c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_ranking</definition>
        <argsstring>()</argsstring>
        <name>hook_ranking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide additional methods of scoring for core search results for nodes.</para><para>A node&apos;s search score is used to rank it among other nodes matched by the search, with the highest-ranked nodes appearing first in the search listing.</para><para>For example, a module allowing users to vote on content could expose an option to allow search results&apos; rankings to be influenced by the average voting score of a node.</para><para>All scoring mechanisms are provided as options to site administrators, and may be tweaked based on individual sites or disabled altogether if they do not make sense. Individual scoring mechanisms, if enabled, are assigned a weight from 1 to 10. The weight represents the factor of magnification of the ranking mechanism, with higher-weighted ranking mechanisms having more influence. In order for the weight system to work, each scoring mechanism must return a value between 0 and 1 for every node. That value is then multiplied by the administrator-assigned weight for the ranking mechanism, and then the weighted scores from all ranking mechanisms are added, which brings about the same result as a weighted average.</para><para><simplesect kind="return"><para>An associative array of ranking data. The keys should be strings, corresponding to the internal name of the ranking mechanism, such as &apos;recent&apos;, or &apos;comments&apos;. The values should be arrays themselves, with the following keys available:<itemizedlist>
<listitem><para>&quot;title&quot;: the human readable name of the ranking mechanism. Required.</para></listitem><listitem><para>&quot;join&quot;: part of a query string to join to any additional necessary table. This is not necessary if the table required is already joined to by the base query, such as for the {node} table. Other tables should use the full table name as an alias to avoid naming collisions. Optional.</para></listitem><listitem><para>&quot;score&quot;: part of a query string to calculate the score for the ranking mechanism based on values in the database. This does not need to be wrapped in parentheses, as it will be done automatically; it also does not need to take the weighted system into account, as it will be done automatically. It does, however, need to calculate a decimal between 0 and 1; be careful not to cast the entire score to an integer by inadvertently introducing a variable argument. Required.</para></listitem><listitem><para>&quot;arguments&quot;: if any arguments are required for the score, they can be specified in an array here. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="940" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="940" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga8588d8a814e8aef059d9e0f842904b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_delete</definition>
        <argsstring>($node)</argsstring>
        <name>hook_delete</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to node deletion.</para><para>This hook is invoked only on the module that defines the node&apos;s content type (use <ref refid="group__node__api__hooks_1ga66ea0473a9950dc961802e801e5042e9" kindref="member">hook_node_delete()</ref> to respond to all node deletions).</para><para>This hook is invoked from node_delete_multiple() after the node has been removed from the node table in the database, before <ref refid="group__node__api__hooks_1ga66ea0473a9950dc961802e801e5042e9" kindref="member">hook_node_delete()</ref> is invoked, and before <ref refid="group__field__attach_1gac2e3658c9c02d0d0e71359f9ef2f207a" kindref="member">field_attach_delete()</ref> is called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is being deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="1017" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="1017" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga2dff6dd92802df6b776a4eeb0b1a737c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_prepare</definition>
        <argsstring>($node)</argsstring>
        <name>hook_prepare</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on a node object about to be shown on the add/edit form.</para><para>This hook is invoked only on the module that defines the node&apos;s content type (use <ref refid="group__node__api__hooks_1ga4bbe7320bd52fc6183920c8be2d9d4f6" kindref="member">hook_node_prepare()</ref> to act on all node preparations).</para><para>This hook is invoked from node_object_prepare() before the general <ref refid="group__node__api__hooks_1ga4bbe7320bd52fc6183920c8be2d9d4f6" kindref="member">hook_node_prepare()</ref> is invoked.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is about to be shown on the add/edit form. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="1037" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="1037" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga52618ef4643a60878dd5a76ff9bbff30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_form</definition>
        <argsstring>($node, &amp;$form_state)</argsstring>
        <name>hook_form</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>form_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display a node editing form.</para><para>This hook, implemented by node modules, is called to retrieve the form that is displayed to create or edit a node. This form is displayed at path node/add/[node type] or node/[node ID]/edit.</para><para>The submit and preview buttons, administrative and display controls, and sections added by other modules (such as path settings, menu settings, comment settings, and fields managed by the Field UI module) are displayed automatically by the node module. This hook just needs to return the node title and form editing fields specific to the node type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node being added or edited. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The form state array.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array containing the title and any custom form elements to be displayed in the node editing form. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="1079" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="1079" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga3c6a28d33e07d3506e1eb99718ef4e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_insert</definition>
        <argsstring>($node)</argsstring>
        <name>hook_insert</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to creation of a new node.</para><para>This hook is invoked only on the module that defines the node&apos;s content type (use <ref refid="group__node__api__hooks_1ga8b40dc62e46e5055c205d2a723dc3548" kindref="member">hook_node_insert()</ref> to act on all node insertions).</para><para>This hook is invoked from node_save() after the node is inserted into the node table in the database, before <ref refid="group__field__attach_1gad7c37d577b97db5e0c182bc570ed7cf4" kindref="member">field_attach_insert()</ref> is called, and before <ref refid="group__node__api__hooks_1ga8b40dc62e46e5055c205d2a723dc3548" kindref="member">hook_node_insert()</ref> is invoked.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is being created. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="1125" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="1125" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1ga49065b040d7fb3e02889eda6361dac34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_load</definition>
        <argsstring>($nodes)</argsstring>
        <name>hook_load</name>
        <param>
          <type>$</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on nodes being loaded from the database.</para><para>This hook is invoked only on the module that defines the node&apos;s content type (use <ref refid="group__node__api__hooks_1gad48bb14b68ed38526029d1f7ac2d2de4" kindref="member">hook_node_load()</ref> to respond to all node loads).</para><para>This hook is invoked during node loading, which is handled by <ref refid="common_8inc_1a78b89cf93f9710a68d02f86adccf1898" kindref="member">entity_load()</ref>, via classes NodeController and <ref refid="class_drupal_default_entity_controller" kindref="compound">DrupalDefaultEntityController</ref>. After the node information is read from the database or the entity cache, <ref refid="group__node__api__hooks_1ga49065b040d7fb3e02889eda6361dac34" kindref="member">hook_load()</ref> is invoked on the node&apos;s content type module, then field_attach_node_revision() or <ref refid="group__field__attach_1ga1e92543395961c912eb293b50e991586" kindref="member">field_attach_load()</ref> is called, then <ref refid="group__hooks_1ga1f594647c8cbb27f75b77cc4118da8d6" kindref="member">hook_entity_load()</ref> is invoked on all implementing modules, and finally <ref refid="group__node__api__hooks_1gad48bb14b68ed38526029d1f7ac2d2de4" kindref="member">hook_node_load()</ref> is invoked on all implementing modules.</para><para>This hook should only be used to add information that is not in the node or node revisions table, not to replace information that is in these tables (which could interfere with the entity cache). For performance reasons, information for all available nodes should be loaded in a single query where possible.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$nodes</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of the nodes being loaded, keyed by nid.</para></parameterdescription>
</parameteritem>
</parameterlist>
For a detailed usage example, see node_example.module. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="1161" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="1161" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gaf9c98e3839e9405df42b50c8cdfa9dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_update</definition>
        <argsstring>($node)</argsstring>
        <name>hook_update</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to updates to a node.</para><para>This hook is invoked only on the module that defines the node&apos;s content type (use <ref refid="group__node__api__hooks_1gac66c767cc922fcbfdaf17252e5d87d9d" kindref="member">hook_node_update()</ref> to act on all node updates).</para><para>This hook is invoked from node_save() after the node is updated in the node table in the database, before <ref refid="group__field__attach_1ga8d15efdca36306ea04552bed4986e77b" kindref="member">field_attach_update()</ref> is called, and before <ref refid="group__node__api__hooks_1gac66c767cc922fcbfdaf17252e5d87d9d" kindref="member">hook_node_update()</ref> is invoked.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that is being updated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="1183" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="1183" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gacaf7cff104c642c28f76ce7ec5f33f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_validate</definition>
        <argsstring>($node, $form, &amp;$form_state)</argsstring>
        <name>hook_validate</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>$</type>
          <declname>form</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>form_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform node validation before a node is created or updated.</para><para>This hook is invoked only on the module that defines the node&apos;s content type (use <ref refid="group__node__api__hooks_1gad26227eaf0dd513134767a11be40ab1d" kindref="member">hook_node_validate()</ref> to act on all node validations).</para><para>This hook is invoked from node_validate(), after a user has finished editing the node and is previewing or submitting it. It is invoked at the end of all the standard validation steps, and before <ref refid="group__node__api__hooks_1gad26227eaf0dd513134767a11be40ab1d" kindref="member">hook_node_validate()</ref> is invoked.</para><para>To indicate a validation error, use <ref refid="group__form__api_1ga6f4ecbec42e905390e521b393417f97f" kindref="member">form_set_error()</ref>.</para><para>Note: Changes made to the $node object within your hook implementation will have no effect. The preferred method to change a node&apos;s content is to use <ref refid="group__node__api__hooks_1gab339b1a1ce0e235d4a9c5a05e410dcd6" kindref="member">hook_node_presave()</ref> instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node being validated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>The form being used to edit the node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The form state array. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="1216" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="1216" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="group__node__api__hooks_1gab1f229603b5e0f2f9d9e2a3ab53dcbda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_view</definition>
        <argsstring>($node, $view_mode)</argsstring>
        <name>hook_view</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>$</type>
          <declname>view_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display a node.</para><para>This is a hook used by node modules. It allows a module to define a custom method of displaying its nodes, usually by displaying extra information particular to that node type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to be displayed, as returned by node_load(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$view_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>View mode, e.g. &apos;full&apos;, &apos;teaser&apos;, ... </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>$node. The passed $node parameter should be modified as necessary and returned so it can be properly presented. Nodes are prepared for display by assembling a structured array, formatted as in the Form API, in $node-&gt;content. As with Form API arrays, the #weight property can be used to control the relative positions of added elements. After this hook is invoked, node_view() calls <ref refid="group__field__attach_1ga6d5ce721bf25a4ff9e15cbecac0f8cf5" kindref="member">field_attach_view()</ref> to add field views to $node-&gt;content, and then invokes <ref refid="group__node__api__hooks_1ga475290ee8e81a2373ea17c512cc3f9a9" kindref="member">hook_node_view()</ref> and <ref refid="group__node__api__hooks_1gad5ece824736be57bf0020af900398b94" kindref="member">hook_node_view_alter()</ref>, so if you want to affect the final view of the node, you might consider implementing one of these hooks instead.</para></simplesect>
For a detailed usage example, see node_example.module. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="1251" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="1251" bodyend="1266"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Functions to define and modify content types.</para><para>Each content type is maintained by a primary module, which is either node.module (for content types created in the user interface) or the module that implements <ref refid="group__node__api__hooks_1ga3b6ad51d7815d1cdd093b0e0f350cbd0" kindref="member">hook_node_info()</ref> to define the content type.</para><para>During node operations (create, update, view, delete, etc.), there are several sets of hooks that get invoked to allow modules to modify the base node operation:<itemizedlist>
<listitem><para>Node-type-specific hooks: These hooks are only invoked on the primary module, using the &quot;base&quot; return component of <ref refid="group__node__api__hooks_1ga3b6ad51d7815d1cdd093b0e0f350cbd0" kindref="member">hook_node_info()</ref> as the function prefix. For example, poll.module defines the base for the Poll content type as &quot;poll&quot;, so during creation of a poll node, <ref refid="group__node__api__hooks_1ga3c6a28d33e07d3506e1eb99718ef4e39" kindref="member">hook_insert()</ref> is only invoked by calling poll_insert().</para></listitem><listitem><para>All-module hooks: This set of hooks is invoked on all implementing modules, to allow other modules to modify what the primary node module is doing. For example, <ref refid="group__node__api__hooks_1ga8b40dc62e46e5055c205d2a723dc3548" kindref="member">hook_node_insert()</ref> is invoked on all modules when creating a poll node.</para></listitem><listitem><para>Field hooks: Hooks related to the fields attached to the node. These are invoked from the field operations functions described below, and can be either field-type-specific or all-module hooks.</para></listitem><listitem><para>Entity hooks: Generic hooks for &quot;entity&quot; operations. These are always invoked on all modules.</para></listitem></itemizedlist>
</para><para>Here is a list of the node and entity hooks that are invoked, field operations, and other steps that take place during node operations:<itemizedlist>
<listitem><para>Creating a new node (calling node_save() on a new node):<itemizedlist>
<listitem><para><ref refid="group__field__attach_1ga8f3ecf532dc49f8aed138695489fc81d" kindref="member">field_attach_presave()</ref></para></listitem><listitem><para><ref refid="group__node__api__hooks_1gab339b1a1ce0e235d4a9c5a05e410dcd6" kindref="member">hook_node_presave()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga1837f8059e89f6b0c00826f3e06e24f7" kindref="member">hook_entity_presave()</ref> (all)</para></listitem><listitem><para>Node and revision records are written to the database</para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga3c6a28d33e07d3506e1eb99718ef4e39" kindref="member">hook_insert()</ref> (node-type-specific)</para></listitem><listitem><para><ref refid="group__field__attach_1gad7c37d577b97db5e0c182bc570ed7cf4" kindref="member">field_attach_insert()</ref></para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga8b40dc62e46e5055c205d2a723dc3548" kindref="member">hook_node_insert()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga38882255a4252e0e87d77ecd9c75a0dd" kindref="member">hook_entity_insert()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga3fe7744d74446e40e9b9ad2a782b4269" kindref="member">hook_node_access_records()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga37c90bf0e1dccad0deefa368dd94cc83" kindref="member">hook_node_access_records_alter()</ref> (all)</para></listitem></itemizedlist>
</para></listitem><listitem><para>Updating an existing node (calling node_save() on an existing node):<itemizedlist>
<listitem><para><ref refid="group__field__attach_1ga8f3ecf532dc49f8aed138695489fc81d" kindref="member">field_attach_presave()</ref></para></listitem><listitem><para><ref refid="group__node__api__hooks_1gab339b1a1ce0e235d4a9c5a05e410dcd6" kindref="member">hook_node_presave()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga1837f8059e89f6b0c00826f3e06e24f7" kindref="member">hook_entity_presave()</ref> (all)</para></listitem><listitem><para>Node and revision records are written to the database</para></listitem><listitem><para><ref refid="group__node__api__hooks_1gaf9c98e3839e9405df42b50c8cdfa9dca" kindref="member">hook_update()</ref> (node-type-specific)</para></listitem><listitem><para><ref refid="group__field__attach_1ga8d15efdca36306ea04552bed4986e77b" kindref="member">field_attach_update()</ref></para></listitem><listitem><para><ref refid="group__node__api__hooks_1gac66c767cc922fcbfdaf17252e5d87d9d" kindref="member">hook_node_update()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga4b7c83c8b2e4f3719327ae794d0964ef" kindref="member">hook_entity_update()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga3fe7744d74446e40e9b9ad2a782b4269" kindref="member">hook_node_access_records()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga37c90bf0e1dccad0deefa368dd94cc83" kindref="member">hook_node_access_records_alter()</ref> (all)</para></listitem></itemizedlist>
</para></listitem><listitem><para>Loading a node (calling node_load(), node_load_multiple(), or <ref refid="common_8inc_1a78b89cf93f9710a68d02f86adccf1898" kindref="member">entity_load()</ref> with $entity_type of &apos;node&apos;):<itemizedlist>
<listitem><para>Node and revision information is read from database.</para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga49065b040d7fb3e02889eda6361dac34" kindref="member">hook_load()</ref> (node-type-specific)</para></listitem><listitem><para><ref refid="group__field__attach_1gac79dd0f29910835c653b068233fa429b" kindref="member">field_attach_load_revision()</ref> and <ref refid="group__field__attach_1ga1e92543395961c912eb293b50e991586" kindref="member">field_attach_load()</ref></para></listitem><listitem><para><ref refid="group__hooks_1ga1f594647c8cbb27f75b77cc4118da8d6" kindref="member">hook_entity_load()</ref> (all)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1gad48bb14b68ed38526029d1f7ac2d2de4" kindref="member">hook_node_load()</ref> (all)</para></listitem></itemizedlist>
</para></listitem><listitem><para>Viewing a single node (calling node_view() - note that the input to node_view() is a loaded node, so the Loading steps above are already done):<itemizedlist>
<listitem><para><ref refid="group__node__api__hooks_1gab1f229603b5e0f2f9d9e2a3ab53dcbda" kindref="member">hook_view()</ref> (node-type-specific)</para></listitem><listitem><para><ref refid="group__field__attach_1ga8531cd5f033e885a69b555d8521a71a4" kindref="member">field_attach_prepare_view()</ref></para></listitem><listitem><para><ref refid="group__hooks_1ga7e60ef817e60b20497bda315d2f30163" kindref="member">hook_entity_prepare_view()</ref> (all)</para></listitem><listitem><para><ref refid="group__field__attach_1ga6d5ce721bf25a4ff9e15cbecac0f8cf5" kindref="member">field_attach_view()</ref></para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga475290ee8e81a2373ea17c512cc3f9a9" kindref="member">hook_node_view()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1gae273ba271c2ef1192fe135afa9da5d49" kindref="member">hook_entity_view()</ref> (all)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1gad5ece824736be57bf0020af900398b94" kindref="member">hook_node_view_alter()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga2c2be6c70815b426f0eb13b0b68edb40" kindref="member">hook_entity_view_alter()</ref> (all)</para></listitem></itemizedlist>
</para></listitem><listitem><para>Viewing multiple nodes (calling node_view_multiple() - note that the input to node_view_multiple() is a set of loaded nodes, so the Loading steps above are already done):<itemizedlist>
<listitem><para><ref refid="group__field__attach_1ga8531cd5f033e885a69b555d8521a71a4" kindref="member">field_attach_prepare_view()</ref></para></listitem><listitem><para><ref refid="group__hooks_1ga7e60ef817e60b20497bda315d2f30163" kindref="member">hook_entity_prepare_view()</ref> (all)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1gab1f229603b5e0f2f9d9e2a3ab53dcbda" kindref="member">hook_view()</ref> (node-type-specific)</para></listitem><listitem><para><ref refid="group__field__attach_1ga6d5ce721bf25a4ff9e15cbecac0f8cf5" kindref="member">field_attach_view()</ref></para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga475290ee8e81a2373ea17c512cc3f9a9" kindref="member">hook_node_view()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1gae273ba271c2ef1192fe135afa9da5d49" kindref="member">hook_entity_view()</ref> (all)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1gad5ece824736be57bf0020af900398b94" kindref="member">hook_node_view_alter()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1ga2c2be6c70815b426f0eb13b0b68edb40" kindref="member">hook_entity_view_alter()</ref> (all)</para></listitem></itemizedlist>
</para></listitem><listitem><para>Deleting a node (calling node_delete() or node_delete_multiple()):<itemizedlist>
<listitem><para>Node is loaded (see Loading section above)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga8588d8a814e8aef059d9e0f842904b35" kindref="member">hook_delete()</ref> (node-type-specific)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga66ea0473a9950dc961802e801e5042e9" kindref="member">hook_node_delete()</ref> (all)</para></listitem><listitem><para><ref refid="group__hooks_1gac329b7f9d18e7fbccb6057e6f4bc4cb9" kindref="member">hook_entity_delete()</ref> (all)</para></listitem><listitem><para><ref refid="group__field__attach_1gac2e3658c9c02d0d0e71359f9ef2f207a" kindref="member">field_attach_delete()</ref></para></listitem><listitem><para>Node and revision information are deleted from database</para></listitem></itemizedlist>
</para></listitem><listitem><para>Deleting a node revision (calling node_revision_delete()):<itemizedlist>
<listitem><para>Node is loaded (see Loading section above)</para></listitem><listitem><para>Revision information is deleted from database</para></listitem><listitem><para><ref refid="group__node__api__hooks_1gad7e8c6941181366016058771ae841bc9" kindref="member">hook_node_revision_delete()</ref> (all)</para></listitem><listitem><para><ref refid="group__field__attach_1gaa9eae65e6d9f1996cb27a55ba25b56e9" kindref="member">field_attach_delete_revision()</ref></para></listitem></itemizedlist>
</para></listitem><listitem><para>Preparing a node for editing (calling <ref refid="node_8pages_8inc_1a267299500e205db099ee4e8396769d3f" kindref="member">node_form()</ref> - note that if it&apos;s an existing node, it will already be loaded; see the Loading section above):<itemizedlist>
<listitem><para><ref refid="group__node__api__hooks_1ga2dff6dd92802df6b776a4eeb0b1a737c" kindref="member">hook_prepare()</ref> (node-type-specific)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga4bbe7320bd52fc6183920c8be2d9d4f6" kindref="member">hook_node_prepare()</ref> (all)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga52618ef4643a60878dd5a76ff9bbff30" kindref="member">hook_form()</ref> (node-type-specific)</para></listitem><listitem><para><ref refid="group__field__attach_1ga5be616bb085356119e2f486979909057" kindref="member">field_attach_form()</ref></para></listitem></itemizedlist>
</para></listitem><listitem><para>Validating a node during editing form submit (calling node_form_validate()):<itemizedlist>
<listitem><para><ref refid="group__node__api__hooks_1gacaf7cff104c642c28f76ce7ec5f33f40" kindref="member">hook_validate()</ref> (node-type-specific)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1gad26227eaf0dd513134767a11be40ab1d" kindref="member">hook_node_validate()</ref> (all)</para></listitem><listitem><para><ref refid="group__field__attach_1ga7022bc10190e16fd43dee82850473dbf" kindref="member">field_attach_form_validate()</ref></para></listitem></itemizedlist>
</para></listitem><listitem><para>Searching (calling node_search_execute()):<itemizedlist>
<listitem><para><ref refid="group__node__api__hooks_1gaf7a28ce3230dc96833ea5338fd26f43c" kindref="member">hook_ranking()</ref> (all)</para></listitem><listitem><para><ref refid="class_query" kindref="compound">Query</ref> is executed to find matching nodes</para></listitem><listitem><para>Resulting node is loaded (see Loading section above)</para></listitem><listitem><para>Resulting node is prepared for viewing (see Viewing a single node above)</para></listitem><listitem><para>comment_node_update_index() is called.</para></listitem><listitem><para><ref refid="group__node__api__hooks_1ga8644320a0e04e3a503c99626d4223725" kindref="member">hook_node_search_result()</ref> (all)</para></listitem></itemizedlist>
</para></listitem><listitem><para>Search indexing (calling node_update_index()):<itemizedlist>
<listitem><para>Node is loaded (see Loading section above)</para></listitem><listitem><para>Node is prepared for viewing (see Viewing a single node above)</para></listitem><listitem><para><ref refid="group__node__api__hooks_1gac8420f204c69a4dc641f4d809a870b05" kindref="member">hook_node_update_index()</ref> (all) </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
