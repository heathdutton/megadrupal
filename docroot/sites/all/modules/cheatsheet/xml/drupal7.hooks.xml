<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.3">
  <compounddef id="group__hooks" kind="group">
    <compoundname>hooks</compoundname>
    <title>Hooks</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__hooks_1ga0d7a0b03039c561b63424b2a6cf6103f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>module_hook</definition>
        <argsstring>($module, $hook)</argsstring>
        <name>module_hook</name>
        <param>
          <type>$</type>
          <declname>module</declname>
        </param>
        <param>
          <type>$</type>
          <declname>hook</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether a module implements a hook.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$module</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the module (without the .module extension). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$hook</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the hook (e.g. &quot;help&quot; or &quot;menu&quot;).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the module is both installed and enabled, and the hook is implemented in that module. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/includes/module.inc" line="596" bodyfile="/srv/www/htdocs/drupal-7-test/includes/module.inc" bodystart="596" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga9191200072f2a641829e9d3c2759561f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>module_implements</definition>
        <argsstring>($hook, $sort=FALSE, $reset=FALSE)</argsstring>
        <name>module_implements</name>
        <param>
          <type>$</type>
          <declname>hook</declname>
        </param>
        <param>
          <type>$</type>
          <declname>sort</declname>
          <defval>FALSE</defval>
        </param>
        <param>
          <type>$</type>
          <declname>reset</declname>
          <defval>FALSE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine which modules are implementing a hook.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$hook</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the hook (e.g. &quot;help&quot; or &quot;menu&quot;). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$sort</parametername>
</parameternamelist>
<parameterdescription>
<para>By default, modules are ordered by weight and filename, settings this option to TRUE, module list will be ordered by module name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$reset</parametername>
</parameternamelist>
<parameterdescription>
<para>For internal use only: Whether to force the stored list of hook implementations to be regenerated (such as after enabling a new module, before processing hook_enable).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array with the names of the modules which are implementing this hook.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1ga993e46e78bf9dfb0e940c0dcccf5e33d" kindref="member">module_implements_write_cache()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/includes/module.inc" line="631" bodyfile="/srv/www/htdocs/drupal-7-test/includes/module.inc" bodystart="631" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga30e72b1391cfa4c282fe98e0dabe02f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>module_hook_info</definition>
        <argsstring>()</argsstring>
        <name>module_hook_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a list of what hooks are explicitly declared. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/includes/module.inc" line="717" bodyfile="/srv/www/htdocs/drupal-7-test/includes/module.inc" bodystart="717" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga993e46e78bf9dfb0e940c0dcccf5e33d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>module_implements_write_cache</definition>
        <argsstring>()</argsstring>
        <name>module_implements_write_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes the hook implementation cache.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga9191200072f2a641829e9d3c2759561f" kindref="member">module_implements()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/includes/module.inc" line="765" bodyfile="/srv/www/htdocs/drupal-7-test/includes/module.inc" bodystart="765" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gabd6f189b7bcc74d05755d41ec1dfdfc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>module_invoke</definition>
        <argsstring>()</argsstring>
        <name>module_invoke</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a hook in a particular module.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$module</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the module (without the .module extension). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$hook</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the hook to invoke. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments to pass to the hook implementation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value of the hook implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/includes/module.inc" line="789" bodyfile="/srv/www/htdocs/drupal-7-test/includes/module.inc" bodystart="789" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga85e2028954b5e23c5ba2c5f1bd4e3e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>module_invoke_all</definition>
        <argsstring>()</argsstring>
        <name>module_invoke_all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke a hook in all enabled modules that implement it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$hook</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the hook to invoke. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments to pass to the hook.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of return values of the hook implementations. If modules return arrays from their implementations, those are merged into one array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/includes/module.inc" line="811" bodyfile="/srv/www/htdocs/drupal-7-test/includes/module.inc" bodystart="811" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga459db08cc062e9ea3bf1f526daf91a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_aggregator_fetch</definition>
        <argsstring>($feed)</argsstring>
        <name>hook_aggregator_fetch</name>
        <param>
          <type>$</type>
          <declname>feed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implement this hook to create an alternative fetcher for aggregator module.</para><para>A fetcher downloads feed data to a Drupal site. The fetcher is called at the first of the three aggregation stages: data is downloaded by the active fetcher, it is converted to a common format by the active parser and finally, it is passed to all active processors which manipulate or store the data.</para><para>Modules that define this hook can be set as active fetcher on admin/config/services/aggregator. Only one fetcher can be active at a time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$feed</parametername>
</parameternamelist>
<parameterdescription>
<para>The $feed object that describes the resource to be downloaded. $feed-&gt;url contains the link to the feed. Download the data at the URL and expose it to other modules by attaching it to $feed-&gt;source_string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if fetching was successful, FALSE otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1gaa9eb0b672b7f66eb5aaccf27e8ff995f" kindref="member">hook_aggregator_fetch_info()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gae27163e729bb531cc527ec6f0ad16943" kindref="member">hook_aggregator_parse()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaf5da0f420ab3b27c1bc33f339c979ac7" kindref="member">hook_aggregator_process()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" line="39" bodyfile="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaa9eb0b672b7f66eb5aaccf27e8ff995f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_aggregator_fetch_info</definition>
        <argsstring>()</argsstring>
        <name>hook_aggregator_fetch_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implement this hook to expose the title and a short description of your fetcher.</para><para>The title and the description provided are shown on admin/config/services/aggregator among other places. Use as title the human readable name of the fetcher and as description a brief (40 to 80 characters) explanation of the fetcher&apos;s functionality.</para><para>This hook is only called if your module implements <ref refid="group__hooks_1ga459db08cc062e9ea3bf1f526daf91a4a" kindref="member">hook_aggregator_fetch()</ref>. If this hook is not implemented aggregator will use your module&apos;s file name as title and there will be no description.</para><para><simplesect kind="return"><para>An associative array defining a title and a description string.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1ga459db08cc062e9ea3bf1f526daf91a4a" kindref="member">hook_aggregator_fetch()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" line="63" bodyfile="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" bodystart="63" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gae27163e729bb531cc527ec6f0ad16943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_aggregator_parse</definition>
        <argsstring>($feed)</argsstring>
        <name>hook_aggregator_parse</name>
        <param>
          <type>$</type>
          <declname>feed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implement this hook to create an alternative parser for aggregator module.</para><para>A parser converts feed item data to a common format. The parser is called at the second of the three aggregation stages: data is downloaded by the active fetcher, it is converted to a common format by the active parser and finally, it is passed to all active processors which manipulate or store the data.</para><para>Modules that define this hook can be set as active parser on admin/config/services/aggregator. Only one parser can be active at a time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$feed</parametername>
</parameternamelist>
<parameterdescription>
<para>The $feed object that describes the resource to be parsed. $feed-&gt;source_string contains the raw feed data as a string. Parse data from $feed-&gt;source_string and expose it to other modules as an array of data items on $feed-&gt;items.</para></parameterdescription>
</parameteritem>
</parameterlist>
Feed format:<itemizedlist>
<listitem><para>$feed-&gt;description (string) - description of the feed</para></listitem><listitem><para>$feed-&gt;image (string) - image for the feed</para></listitem><listitem><para>$feed-&gt;etag (string) - value of feed&apos;s entity tag header field</para></listitem><listitem><para>$feed-&gt;modified (UNIX timestamp) - value of feed&apos;s last modified header field</para></listitem><listitem><para>$feed-&gt;items (Array) - array of feed items.</para></listitem></itemizedlist>
</para><para>By convention, the common format for a single feed item is: $item[key-name] = value;</para><para>Recognized keys: TITLE (string) - the title of a feed item DESCRIPTION (string) - the description (body text) of a feed item TIMESTAMP (UNIX timestamp) - the feed item&apos;s published time as UNIX timestamp AUTHOR (string) - the feed item&apos;s author GUID (string) - RSS/Atom global unique identifier LINK (string) - the feed item&apos;s URL</para><para><simplesect kind="return"><para>TRUE if parsing was successful, FALSE otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1ga4cf79b336cf009dee9487ae9d2249d9d" kindref="member">hook_aggregator_parse_info()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga459db08cc062e9ea3bf1f526daf91a4a" kindref="member">hook_aggregator_fetch()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaf5da0f420ab3b27c1bc33f339c979ac7" kindref="member">hook_aggregator_process()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" line="116" bodyfile="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" bodystart="116" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4cf79b336cf009dee9487ae9d2249d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_aggregator_parse_info</definition>
        <argsstring>()</argsstring>
        <name>hook_aggregator_parse_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implement this hook to expose the title and a short description of your parser.</para><para>The title and the description provided are shown on admin/config/services/aggregator among other places. Use as title the human readable name of the parser and as description a brief (40 to 80 characters) explanation of the parser&apos;s functionality.</para><para>This hook is only called if your module implements <ref refid="group__hooks_1gae27163e729bb531cc527ec6f0ad16943" kindref="member">hook_aggregator_parse()</ref>. If this hook is not implemented aggregator will use your module&apos;s file name as title and there will be no description.</para><para><simplesect kind="return"><para>An associative array defining a title and a description string.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1gae27163e729bb531cc527ec6f0ad16943" kindref="member">hook_aggregator_parse()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" line="144" bodyfile="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" bodystart="144" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf5da0f420ab3b27c1bc33f339c979ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_aggregator_process</definition>
        <argsstring>($feed)</argsstring>
        <name>hook_aggregator_process</name>
        <param>
          <type>$</type>
          <declname>feed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implement this hook to create a processor for aggregator module.</para><para>A processor acts on parsed feed data. Active processors are called at the third and last of the aggregation stages: data is downloaded by the active fetcher, it is converted to a common format by the active parser and finally, it is passed to all active processors which manipulate or store the data.</para><para>Modules that define this hook can be activated as processor on admin/config/services/aggregator.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$feed</parametername>
</parameternamelist>
<parameterdescription>
<para>The $feed object that describes the resource to be processed. $feed-&gt;items contains an array of feed items downloaded and parsed at the parsing stage. See <ref refid="group__hooks_1gae27163e729bb531cc527ec6f0ad16943" kindref="member">hook_aggregator_parse()</ref> for the basic format of a single item in the $feed-&gt;items array. For the exact format refer to the particular parser in use.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga4eaa2eeeddbc3909bab31e1dc4c44db5" kindref="member">hook_aggregator_process_info()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga459db08cc062e9ea3bf1f526daf91a4a" kindref="member">hook_aggregator_fetch()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gae27163e729bb531cc527ec6f0ad16943" kindref="member">hook_aggregator_parse()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" line="176" bodyfile="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" bodystart="176" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4eaa2eeeddbc3909bab31e1dc4c44db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_aggregator_process_info</definition>
        <argsstring>($feed)</argsstring>
        <name>hook_aggregator_process_info</name>
        <param>
          <type>$</type>
          <declname>feed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implement this hook to expose the title and a short description of your processor.</para><para>The title and the description provided are shown most importantly on admin/config/services/aggregator. Use as title the natural name of the processor and as description a brief (40 to 80 characters) explanation of the functionality.</para><para>This hook is only called if your module implements <ref refid="group__hooks_1gaf5da0f420ab3b27c1bc33f339c979ac7" kindref="member">hook_aggregator_process()</ref>. If this hook is not implemented aggregator will use your module&apos;s file name as title and there will be no description.</para><para><simplesect kind="return"><para>An associative array defining a title and a description string.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1gaf5da0f420ab3b27c1bc33f339c979ac7" kindref="member">hook_aggregator_process()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" line="202" bodyfile="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf2f3e401371efb540b050208df5400eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_aggregator_remove</definition>
        <argsstring>($feed)</argsstring>
        <name>hook_aggregator_remove</name>
        <param>
          <type>$</type>
          <declname>feed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implement this hook to remove stored data if a feed is being deleted or a feed&apos;s items are being removed.</para><para>Aggregator calls this hook if either a feed is deleted or a user clicks on &quot;remove items&quot;.</para><para>If your module stores feed items for example on <ref refid="group__hooks_1gaf5da0f420ab3b27c1bc33f339c979ac7" kindref="member">hook_aggregator_process()</ref> it is recommended to implement this hook and to remove data related to $feed when called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$feed</parametername>
</parameternamelist>
<parameterdescription>
<para>The $feed object whose items are being removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" line="225" bodyfile="/srv/www/htdocs/drupal-7-test/modules/aggregator/aggregator.api.php" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_block_info</definition>
        <argsstring>()</argsstring>
        <name>hook_block_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define all blocks provided by the module.</para><para>This hook declares to Drupal what blocks are provided by your module and can optionally specify initial block configuration settings.</para><para>In <ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref>, each block your module provides is given a unique identifier referred to as &quot;delta&quot; (the array key in the return value). Delta values only need to be unique within your module, and they are used in the following ways:<itemizedlist>
<listitem><para>Passed into the other block hooks in your module as an argument to identify the block being configured or viewed.</para></listitem><listitem><para>Used to construct the default HTML ID of &quot;block-MODULE-DELTA&quot; applied to each block when it is rendered (which can then be used for CSS styling or JavaScript programming).</para></listitem><listitem><para>Used to define a theming template suggestion of block__MODULE__DELTA, for advanced theming possibilities.</para></listitem><listitem><para>Used by other modules to identify your block in <ref refid="group__hooks_1ga6a57bda0a2640ccadef4d7c8b6d2a26f" kindref="member">hook_block_info_alter()</ref> and other alter hooks. The values of delta can be strings or numbers, but because of the uses above it is preferable to use descriptive strings whenever possible, and only use a numeric identifier if you have to (for instance if your module allows users to create several similar blocks that you identify within your module code with numeric IDs). The maximum length for delta values is 32 bytes.</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>An associative array whose keys define the delta for each block and whose values contain the block descriptions. Each block description is itself an associative array, with the following key-value pairs:<itemizedlist>
<listitem><para>&apos;info&apos;: (required) The human-readable administrative name of the block. This is used to identify the block on administration screens, and is not displayed to non-administrative users.</para></listitem><listitem><para>&apos;cache&apos;: (optional) A bitmask describing what kind of caching is appropriate for the block. Drupal provides the following bitmask constants for defining cache granularity:<itemizedlist>
<listitem><para>DRUPAL_CACHE_PER_ROLE (default): The block can change depending on the roles the user viewing the page belongs to.</para></listitem><listitem><para>DRUPAL_CACHE_PER_USER: The block can change depending on the user viewing the page. This setting can be resource-consuming for sites with large number of users, and should only be used when DRUPAL_CACHE_PER_ROLE is not sufficient.</para></listitem><listitem><para>DRUPAL_CACHE_PER_PAGE: The block can change depending on the page being viewed.</para></listitem><listitem><para>DRUPAL_CACHE_GLOBAL: The block is the same for every user on every page where it is visible.</para></listitem><listitem><para>DRUPAL_NO_CACHE: The block should not get cached.</para></listitem></itemizedlist>
</para></listitem><listitem><para>&apos;properties&apos;: (optional) Array of additional metadata to add to the block. Common properties include:<itemizedlist>
<listitem><para>&apos;administrative&apos;: Boolean which categorizes this block as usable in an administrative context. This might include blocks which help an administrator approve/deny comments, or view recently created user accounts.</para></listitem></itemizedlist>
</para></listitem><listitem><para>&apos;weight&apos;: (optional) Initial value for the ordering weight of this block. Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen.</para></listitem><listitem><para>&apos;status&apos;: (optional) Initial value for block enabled status. (1 = enabled, 0 = disabled). Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen.</para></listitem><listitem><para>&apos;region&apos;: (optional) Initial value for theme region within which this block is set. Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen. Note: If you set a region that isn&apos;t available in the currently enabled theme, the block will be disabled.</para></listitem><listitem><para>&apos;visibility&apos;: (optional) Initial value for the visibility flag, which tells how to interpret the &apos;pages&apos; value. Possible values are:<itemizedlist>
<listitem><para>BLOCK_VISIBILITY_NOTLISTED: Show on all pages except listed pages. &apos;pages&apos; lists the paths where the block should not be shown.</para></listitem><listitem><para>BLOCK_VISIBILITY_LISTED: Show only on listed pages. &apos;pages&apos; lists the paths where the block should be shown.</para></listitem><listitem><para>BLOCK_VISIBILITY_PHP: Use custom PHP code to determine visibility. &apos;pages&apos; gives the PHP code to use. Most modules do not provide an initial value for &apos;visibility&apos; or &apos;pages&apos;, and any value provided can be modified by a user on the block configuration screen.</para></listitem></itemizedlist>
</para></listitem><listitem><para>&apos;pages&apos;: (optional) See &apos;visibility&apos; above.</para></listitem></itemizedlist>
</para></simplesect>
For a detailed usage example, see block_example.module.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gacc86fefd1e0299f387f79a37dd1a48b7" kindref="member">hook_block_configure()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga622024ce4f818c241ca7a765e829f928" kindref="member">hook_block_save()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaa14092a3e74cdc57aa295100cfd6860d" kindref="member">hook_block_view()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga6a57bda0a2640ccadef4d7c8b6d2a26f" kindref="member">hook_block_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" line="97" bodyfile="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" bodystart="97" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga6a57bda0a2640ccadef4d7c8b6d2a26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_block_info_alter</definition>
        <argsstring>(&amp;$blocks, $theme, $code_blocks)</argsstring>
        <name>hook_block_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>$</type>
          <declname>theme</declname>
        </param>
        <param>
          <type>$</type>
          <declname>code_blocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change block definition before saving to the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>A multidimensional array of blocks keyed by the defining module and delta; the values are blocks returned by <ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref>. This hook is fired after the blocks are collected from <ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref> and the database, right before saving back to the database. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$theme</parametername>
</parameternamelist>
<parameterdescription>
<para>The theme these blocks belong to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$code_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>The blocks as defined in <ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref> before being overwritten by the database data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" line="128" bodyfile="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gacc86fefd1e0299f387f79a37dd1a48b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_block_configure</definition>
        <argsstring>($delta= &apos;&apos;)</argsstring>
        <name>hook_block_configure</name>
        <param>
          <type>$</type>
          <declname>delta</declname>
          <defval>&apos;&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a configuration form for a block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Which block is being configured. This is a unique identifier for the block within the module, defined in <ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A configuration form, if one is needed for your block beyond the standard elements that the block module provides (block title, visibility, etc.).</para></simplesect>
For a detailed usage example, see block_example.module.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga622024ce4f818c241ca7a765e829f928" kindref="member">hook_block_save()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" line="149" bodyfile="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" bodystart="149" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga622024ce4f818c241ca7a765e829f928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_block_save</definition>
        <argsstring>($delta= &apos;&apos;, $edit=array())</argsstring>
        <name>hook_block_save</name>
        <param>
          <type>$</type>
          <declname>delta</declname>
          <defval>&apos;&apos;</defval>
        </param>
        <param>
          <type>$</type>
          <declname>edit</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save the configuration options from <ref refid="group__hooks_1gacc86fefd1e0299f387f79a37dd1a48b7" kindref="member">hook_block_configure()</ref>.</para><para>This hook allows you to save the block-specific configuration settings defined within your <ref refid="group__hooks_1gacc86fefd1e0299f387f79a37dd1a48b7" kindref="member">hook_block_configure()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Which block is being configured. This is a unique identifier for the block within the module, defined in <ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$edit</parametername>
</parameternamelist>
<parameterdescription>
<para>The submitted form data from the configuration form.</para></parameterdescription>
</parameteritem>
</parameterlist>
For a detailed usage example, see block_example.module.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gacc86fefd1e0299f387f79a37dd1a48b7" kindref="member">hook_block_configure()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" line="180" bodyfile="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" bodystart="180" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaa14092a3e74cdc57aa295100cfd6860d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_block_view</definition>
        <argsstring>($delta= &apos;&apos;)</argsstring>
        <name>hook_block_view</name>
        <param>
          <type>$</type>
          <declname>delta</declname>
          <defval>&apos;&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a rendered or renderable view of a block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Which block to render. This is a unique identifier for the block within the module, defined in <ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array containing the following elements:<itemizedlist>
<listitem><para>subject: The default localized title of the block. If the block does not have a default title, this should be set to NULL.</para></listitem><listitem><para>content: The content of the block&apos;s body. This may be a renderable array (preferable) or a string containing rendered HTML content.</para></listitem></itemizedlist>
</para></simplesect>
For a detailed usage example, see block_example.module.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga65868e8e24bb04e5eb9e533c4d413b10" kindref="member">hook_block_view_alter()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga8888fb6b153c6a93238eebf2be51eb18" kindref="member">hook_block_view_MODULE_DELTA_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" line="207" bodyfile="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" bodystart="207" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga65868e8e24bb04e5eb9e533c4d413b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_block_view_alter</definition>
        <argsstring>(&amp;$data, $block)</argsstring>
        <name>hook_block_view_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>data</declname>
        </param>
        <param>
          <type>$</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations to the content of a block.</para><para>This hook allows you to modify any data returned by <ref refid="group__hooks_1gaa14092a3e74cdc57aa295100cfd6860d" kindref="member">hook_block_view()</ref>.</para><para>Note that instead of <ref refid="group__hooks_1ga65868e8e24bb04e5eb9e533c4d413b10" kindref="member">hook_block_view_alter()</ref>, which is called for all blocks, you can also use <ref refid="group__hooks_1ga8888fb6b153c6a93238eebf2be51eb18" kindref="member">hook_block_view_MODULE_DELTA_alter()</ref> to alter a specific block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$data</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of data, as returned from the <ref refid="group__hooks_1gaa14092a3e74cdc57aa295100cfd6860d" kindref="member">hook_block_view()</ref> implementation of the module that defined the block:<itemizedlist>
<listitem><para>subject: The default localized title of the block.</para></listitem><listitem><para>content: Either a string or a renderable array representing the content of the block. You should check that the content is an array before trying to modify parts of the renderable structure. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$block</parametername>
</parameternamelist>
<parameterdescription>
<para>The block object, as loaded from the database, having the main properties:<itemizedlist>
<listitem><para>module: The name of the module that defined the block.</para></listitem><listitem><para>delta: The unique identifier for the block within that module, as defined in <ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref>.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga8888fb6b153c6a93238eebf2be51eb18" kindref="member">hook_block_view_MODULE_DELTA_alter()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaa14092a3e74cdc57aa295100cfd6860d" kindref="member">hook_block_view()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" line="263" bodyfile="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" bodystart="263" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga8888fb6b153c6a93238eebf2be51eb18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_block_view_MODULE_DELTA_alter</definition>
        <argsstring>(&amp;$data, $block)</argsstring>
        <name>hook_block_view_MODULE_DELTA_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>data</declname>
        </param>
        <param>
          <type>$</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations to a specific block.</para><para>Modules can implement <ref refid="group__hooks_1ga8888fb6b153c6a93238eebf2be51eb18" kindref="member">hook_block_view_MODULE_DELTA_alter()</ref> to modify a specific block, rather than implementing <ref refid="group__hooks_1ga65868e8e24bb04e5eb9e533c4d413b10" kindref="member">hook_block_view_alter()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$data</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of data, as returned from the <ref refid="group__hooks_1gaa14092a3e74cdc57aa295100cfd6860d" kindref="member">hook_block_view()</ref> implementation of the module that defined the block:<itemizedlist>
<listitem><para>subject: The localized title of the block.</para></listitem><listitem><para>content: Either a string or a renderable array representing the content of the block. You should check that the content is an array before trying to modify parts of the renderable structure. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$block</parametername>
</parameternamelist>
<parameterdescription>
<para>The block object, as loaded from the database, having the main properties:<itemizedlist>
<listitem><para>module: The name of the module that defined the block.</para></listitem><listitem><para>delta: The unique identifier for the block within that module, as defined in <ref refid="group__hooks_1ga2bd926c3e90deeba0c3ba64fb3c64d73" kindref="member">hook_block_info()</ref>.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga65868e8e24bb04e5eb9e533c4d413b10" kindref="member">hook_block_view_alter()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaa14092a3e74cdc57aa295100cfd6860d" kindref="member">hook_block_view()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" line="297" bodyfile="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" bodystart="297" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf38c7633b52b18831e3ec0459d8e9f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_block_list_alter</definition>
        <argsstring>(&amp;$blocks)</argsstring>
        <name>hook_block_list_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>blocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on blocks prior to rendering.</para><para>This hook allows you to add, remove or modify blocks in the block list. The block list contains the block definitions, not the rendered blocks. The blocks are rendered after the modules have had a chance to manipulate the block list.</para><para>You can also set $block-&gt;content here, which will override the content of the block and prevent <ref refid="group__hooks_1gaa14092a3e74cdc57aa295100cfd6860d" kindref="member">hook_block_view()</ref> from running.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of $blocks, keyed by the block ID. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" line="321" bodyfile="/srv/www/htdocs/drupal-7-test/modules/block/block.api.php" bodystart="321" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaaa06736884e98ef79711f70af9d1a266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_comment_presave</definition>
        <argsstring>($comment)</argsstring>
        <name>hook_comment_presave</name>
        <param>
          <type>$</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The comment passed validation and is about to be saved.</para><para>Modules may make changes to the comment before it is saved to the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$comment</parametername>
</parameternamelist>
<parameterdescription>
<para>The comment object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" line="21" bodyfile="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3f972e92f09b1c9e8797fc9037e8c75d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_comment_insert</definition>
        <argsstring>($comment)</argsstring>
        <name>hook_comment_insert</name>
        <param>
          <type>$</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The comment is being inserted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$comment</parametername>
</parameternamelist>
<parameterdescription>
<para>The comment object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" line="32" bodyfile="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga63e0b41e7dbaadbf352b0a9c246d5ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_comment_update</definition>
        <argsstring>($comment)</argsstring>
        <name>hook_comment_update</name>
        <param>
          <type>$</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The comment is being updated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$comment</parametername>
</parameternamelist>
<parameterdescription>
<para>The comment object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" line="43" bodyfile="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gafc29ce3a5bfc4778125ee3099850d96c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_comment_load</definition>
        <argsstring>($comments)</argsstring>
        <name>hook_comment_load</name>
        <param>
          <type>$</type>
          <declname>comments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Comments are being loaded from the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$comments</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of comment objects indexed by cid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" line="54" bodyfile="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab162cbd3dc1b0395011df47ca3f98aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_comment_view</definition>
        <argsstring>($comment, $view_mode, $langcode)</argsstring>
        <name>hook_comment_view</name>
        <param>
          <type>$</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>$</type>
          <declname>view_mode</declname>
        </param>
        <param>
          <type>$</type>
          <declname>langcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The comment is being viewed. This hook can be used to add additional data to the comment before theming.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$comment</parametername>
</parameternamelist>
<parameterdescription>
<para>Passes in the comment the action is being performed on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$view_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>View mode, e.g. &apos;full&apos;, &apos;teaser&apos;... </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$langcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The language code used for rendering.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gae273ba271c2ef1192fe135afa9da5d49" kindref="member">hook_entity_view()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" line="73" bodyfile="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga092d794b204b6db107a5f763ac1be659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_comment_view_alter</definition>
        <argsstring>(&amp;$build)</argsstring>
        <name>hook_comment_view_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>build</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The comment was built; the module may modify the structured content.</para><para>This hook is called after the content has been assembled in a structured array and may be used for doing processing which requires that the complete comment content structure has been built.</para><para>If the module wishes to act on the rendered HTML of the comment rather than the structured content array, it may use this hook to add a #post_render callback. Alternatively, it could also implement hook_preprocess_comment(). See <ref refid="common_8inc_1a05798b44e8d6c496d4bee5cc32fa7851" kindref="member">drupal_render()</ref> and <ref refid="includes_2theme_8inc_1a7c25609a935874541a19657affd30fff" kindref="member">theme()</ref> documentation respectively for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$build</parametername>
</parameternamelist>
<parameterdescription>
<para>A renderable array representing the comment.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>comment_view() </para><simplesectsep/><para><ref refid="group__hooks_1ga2c2be6c70815b426f0eb13b0b68edb40" kindref="member">hook_entity_view_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" line="96" bodyfile="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" bodystart="96" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4c4be9019e5cc7f92e8ccc03b595a64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_comment_publish</definition>
        <argsstring>($comment)</argsstring>
        <name>hook_comment_publish</name>
        <param>
          <type>$</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The comment is being published by the moderator.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$comment</parametername>
</parameternamelist>
<parameterdescription>
<para>Passes in the comment the action is being performed on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nothing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" line="115" bodyfile="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaed97e1a1eaedd7b482f881ea2b8a3876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_comment_unpublish</definition>
        <argsstring>($comment)</argsstring>
        <name>hook_comment_unpublish</name>
        <param>
          <type>$</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The comment is being unpublished by the moderator.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$comment</parametername>
</parameternamelist>
<parameterdescription>
<para>Passes in the comment the action is being performed on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nothing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" line="127" bodyfile="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab8d94c5665313a2d174628cc219f0395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_comment_delete</definition>
        <argsstring>($comment)</argsstring>
        <name>hook_comment_delete</name>
        <param>
          <type>$</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The comment is being deleted by the moderator.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$comment</parametername>
</parameternamelist>
<parameterdescription>
<para>Passes in the comment the action is being performed on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nothing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" line="139" bodyfile="/srv/www/htdocs/drupal-7-test/modules/comment/comment.api.php" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga30ebdd98be1d239b608b769bda0ca9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_contextual_links_view_alter</definition>
        <argsstring>(&amp;$element, $items)</argsstring>
        <name>hook_contextual_links_view_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>element</declname>
        </param>
        <param>
          <type>$</type>
          <declname>items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter a contextual links element before it is rendered.</para><para>This hook is invoked by contextual_pre_render_links(). The renderable array of #type &apos;contextual_links&apos;, containing the entire contextual links data that is passed in by reference. Further links may be added or existing links can be altered.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$element</parametername>
</parameternamelist>
<parameterdescription>
<para>A renderable array representing the contextual links. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$items</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing the original contextual link items, as generated by <ref refid="group__menu_1gad524d9a3415e24d27c7dbcb333d96cf8" kindref="member">menu_contextual_links()</ref>, which were used to build $element[&apos;#links&apos;].</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga2731120f62502453acd650710f8252b9" kindref="member">hook_menu_contextual_links_alter()</ref> </para><simplesectsep/><para>contextual_pre_render_links() </para><simplesectsep/><para>contextual_element_info() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/contextual/contextual.api.php" line="32" bodyfile="/srv/www/htdocs/drupal-7-test/modules/contextual/contextual.api.php" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga533120daedea0c0bfd332400aab41ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_dashboard_regions</definition>
        <argsstring>()</argsstring>
        <name>hook_dashboard_regions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds regions to the dashboard.</para><para><simplesect kind="return"><para>An array whose keys are the names of the dashboard regions and whose values are the titles that will be displayed in the blocks administration interface. The keys are also used as theme wrapper functions. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/dashboard/dashboard.api.php" line="21" bodyfile="/srv/www/htdocs/drupal-7-test/modules/dashboard/dashboard.api.php" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf5148b413ca475e8d5246dad5357b918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_dashboard_regions_alter</definition>
        <argsstring>($regions)</argsstring>
        <name>hook_dashboard_regions_alter</name>
        <param>
          <type>$</type>
          <declname>regions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter dashboard regions provided by modules.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$regions</parametername>
</parameternamelist>
<parameterdescription>
<para>An array containing all dashboard regions, in the format provided by <ref refid="group__hooks_1ga533120daedea0c0bfd332400aab41ae2" kindref="member">hook_dashboard_regions()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/dashboard/dashboard.api.php" line="35" bodyfile="/srv/www/htdocs/drupal-7-test/modules/dashboard/dashboard.api.php" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf2a2f2a46589420df896a0d42247f15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_filter_info</definition>
        <argsstring>()</argsstring>
        <name>hook_filter_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define content filters.</para><para>User submitted content is passed through a group of filters before it is output in HTML, in order to remove insecure or unwanted parts, correct or enhance the formatting, transform special keywords, etc. A group of filters is referred to as a &quot;text format&quot;. Administrators can create as many text formats as needed. Individual filters can be enabled and configured differently for each text format.</para><para>This hook is invoked by filter_get_filters() and allows modules to register input filters they provide.</para><para>Filtering is a two-step process. First, the content is &apos;prepared&apos; by calling the &apos;prepare callback&apos; function for every filter. The purpose of the &apos;prepare callback&apos; is to escape HTML-like structures. For example, imagine a filter which allows the user to paste entire chunks of programming code without requiring manual escaping of special HTML characters like &lt; or &amp;. If the programming code were left untouched, then other filters could think it was HTML and change it. For many filters, the prepare step is not necessary.</para><para>The second step is the actual processing step. The result from passing the text through all the filters&apos; prepare steps gets passed to all the filters again, this time with the &apos;process callback&apos; function. The process callbacks should then actually change the content: transform URLs into hyperlinks, convert smileys into images, etc.</para><para>For performance reasons content is only filtered once; the result is stored in the cache table and retrieved from the cache the next time the same piece of content is displayed. If a filter&apos;s output is dynamic, it can override the cache mechanism, but obviously this should be used with caution: having one filter that does not support caching in a particular text format disables caching for the entire format, not just for one filter.</para><para>Beware of the filter cache when developing your module: it is advised to set your filter to &apos;cache&apos; =&gt; FALSE while developing, but be sure to remove that setting if it&apos;s not needed, when you are no longer in development mode.</para><para><simplesect kind="return"><para>An associative array of filters, whose keys are internal filter names, which should be unique and therefore prefixed with the name of the module. Each value is an associative array describing the filter, with the following elements (all are optional except as noted):<itemizedlist>
<listitem><para>title: (required) An administrative summary of what the filter does.</para></listitem><listitem><para>description: Additional administrative information about the filter&apos;s behavior, if needed for clarification.</para></listitem><listitem><para>settings callback: The name of a function that returns configuration form elements for the filter. See <ref refid="filter_8api_8php_1a837780b316af7dd59400013607511f68" kindref="member">hook_filter_FILTER_settings()</ref> for details.</para></listitem><listitem><para>default settings: An associative array containing default settings for the filter, to be applied when the filter has not been configured yet.</para></listitem><listitem><para>prepare callback: The name of a function that escapes the content before the actual filtering happens. See <ref refid="filter_8api_8php_1abdfac31cc43f11ec63bdddd155d5702d" kindref="member">hook_filter_FILTER_prepare()</ref> for details.</para></listitem><listitem><para>process callback: (required) The name the function that performs the actual filtering. See <ref refid="filter_8api_8php_1af0783be6cc7aa0d6a2d6efe918299c02" kindref="member">hook_filter_FILTER_process()</ref> for details.</para></listitem><listitem><para>cache (default TRUE): Specifies whether the filtered text can be cached. Note that setting this to FALSE makes the entire text format not cacheable, which may have an impact on the site&apos;s overall performance. See filter_format_allowcache() for details.</para></listitem><listitem><para>tips callback: The name of a function that returns end-user-facing filter usage guidelines for the filter. See <ref refid="filter_8api_8php_1ac17bd9b5daa1b7b5b352e2459e1bd3eb" kindref="member">hook_filter_FILTER_tips()</ref> for details.</para></listitem><listitem><para>weight: A default weight for the filter in new text formats.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para>filter_example.module </para><simplesectsep/><para><ref refid="group__hooks_1ga7404a5c9b0c1cfe68383ae528bc8ebd4" kindref="member">hook_filter_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" line="80" bodyfile="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" bodystart="80" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga7404a5c9b0c1cfe68383ae528bc8ebd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_filter_info_alter</definition>
        <argsstring>(&amp;$info)</argsstring>
        <name>hook_filter_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations on filter definitions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$info</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of information on filters exposed by <ref refid="group__hooks_1gaf2a2f2a46589420df896a0d42247f15a" kindref="member">hook_filter_info()</ref> implementations. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" line="109" bodyfile="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" bodystart="109" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3729c44379f4e5298c067795e9aca481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_filter_format_insert</definition>
        <argsstring>($format)</argsstring>
        <name>hook_filter_format_insert</name>
        <param>
          <type>$</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform actions when a new text format has been created.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format object of the format being updated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gaf9e4490f3ca224c161481754a3332c92" kindref="member">hook_filter_format_update()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gae4873bf6d76c33475296917d304719e9" kindref="member">hook_filter_format_disable()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" line="287" bodyfile="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" bodystart="287" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf9e4490f3ca224c161481754a3332c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_filter_format_update</definition>
        <argsstring>($format)</argsstring>
        <name>hook_filter_format_update</name>
        <param>
          <type>$</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform actions when a text format has been updated.</para><para>This hook allows modules to act when a text format has been updated in any way. For example, when filters have been reconfigured, disabled, or re-arranged in the text format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format object of the format being updated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga3729c44379f4e5298c067795e9aca481" kindref="member">hook_filter_format_insert()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gae4873bf6d76c33475296917d304719e9" kindref="member">hook_filter_format_disable()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" line="304" bodyfile="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gae4873bf6d76c33475296917d304719e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_filter_format_disable</definition>
        <argsstring>($format)</argsstring>
        <name>hook_filter_format_disable</name>
        <param>
          <type>$</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform actions when a text format has been disabled.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format object of the format being disabled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga3729c44379f4e5298c067795e9aca481" kindref="member">hook_filter_format_insert()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaf9e4490f3ca224c161481754a3332c92" kindref="member">hook_filter_format_update()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" line="317" bodyfile="/srv/www/htdocs/drupal-7-test/modules/filter/filter.api.php" bodystart="317" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5589c2714a782738e8851c4c90231f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_help</definition>
        <argsstring>($path, $arg)</argsstring>
        <name>hook_help</name>
        <param>
          <type>$</type>
          <declname>path</declname>
        </param>
        <param>
          <type>$</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide online user help.</para><para>By implementing <ref refid="group__hooks_1ga5589c2714a782738e8851c4c90231f0e" kindref="member">hook_help()</ref>, a module can make documentation available to the user for the module as a whole, or for specific paths. Help for developers should usually be provided via function header comments in the code, or in special API example files.</para><para>For a detailed usage example, see page_example.module.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>The router menu path, as defined in <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref>, for the help that is being requested; e.g., &apos;admin/people&apos; or &apos;user/register&apos;. If the router path includes a wildcard, then this will appear in $path as %, even if it is a named autoloader wildcard in the <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref> implementation; for example, node pages would have $path equal to &apos;node/&apos; or &apos;node//view&apos;. To provide a help page for a whole module with a listing on admin/help, your hook implementation should match a path with a special descriptor after a &quot;#&quot; sign: &apos;admin/help#modulename&apos; The main module help text, displayed on the admin/help/modulename page and linked to from the admin/help page. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An array that corresponds to the return value of the <ref refid="bootstrap_8inc_1afd40bf1dc5dc1f68fb326a8f6e0b88da" kindref="member">arg()</ref> function, for modules that want to provide help that is specific to certain values of wildcards in $path. For example, you could provide help for the path &apos;user/1&apos; by looking for the path &apos;user/&apos; and $arg[1] == &apos;1&apos;. This given array should always be used rather than directly invoking <ref refid="bootstrap_8inc_1afd40bf1dc5dc1f68fb326a8f6e0b88da" kindref="member">arg()</ref>, because your hook implementation may be called for other purposes besides building the current page&apos;s help. Note that depending on which module is invoking hook_help, $arg may contain only empty strings. Regardless, $arg[0] to $arg[11] will always be set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A localized string containing the help text. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/help/help.api.php" line="48" bodyfile="/srv/www/htdocs/drupal-7-test/modules/help/help.api.php" bodystart="48" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga9681816aeb01a316e98457b40a01f8ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_image_effect_info</definition>
        <argsstring>()</argsstring>
        <name>hook_image_effect_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define information about image effects provided by a module.</para><para>This hook enables modules to define image manipulation effects for use with an image style.</para><para><simplesect kind="return"><para>An array of image effects. This array is keyed on the machine-readable effect name. Each effect is defined as an associative array containing the following items:<itemizedlist>
<listitem><para>&quot;label&quot;: The human-readable name of the effect.</para></listitem><listitem><para>&quot;effect callback&quot;: The function to call to perform this image effect.</para></listitem><listitem><para>&quot;help&quot;: (optional) A brief description of the effect that will be shown when adding or configuring this image effect.</para></listitem><listitem><para>&quot;form callback&quot;: (optional) The name of a function that will return a $form array providing a configuration form for this image effect.</para></listitem><listitem><para>&quot;summary theme&quot;: (optional) The name of a theme function that will output a summary of this image effect&apos;s configuration.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1gaf48ed66489194afdf3e5bce6b3e28768" kindref="member">hook_image_effect_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" line="34" bodyfile="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" bodystart="34" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf48ed66489194afdf3e5bce6b3e28768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_image_effect_info_alter</definition>
        <argsstring>(&amp;$effects)</argsstring>
        <name>hook_image_effect_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>effects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the information provided in <ref refid="group__hooks_1ga9681816aeb01a316e98457b40a01f8ed" kindref="member">hook_image_effect_info()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$effects</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of image effects, keyed on the machine-readable effect name.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga9681816aeb01a316e98457b40a01f8ed" kindref="member">hook_image_effect_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" line="56" bodyfile="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gad403dde0a7859e160772ae696ab35cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_image_style_save</definition>
        <argsstring>($style)</argsstring>
        <name>hook_image_style_save</name>
        <param>
          <type>$</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to image style updating.</para><para>This hook enables modules to update settings that might be affected by changes to an image. For example, updating a module specific variable to reflect a change in the image style&apos;s name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$style</parametername>
</parameternamelist>
<parameterdescription>
<para>The image style array that is being updated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" line="72" bodyfile="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga376a3d4a9427d6a8dad73d68bdd140dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_image_style_delete</definition>
        <argsstring>($style)</argsstring>
        <name>hook_image_style_delete</name>
        <param>
          <type>$</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to image style deletion.</para><para>This hook enables modules to update settings when a image style is being deleted. If a style is deleted, a replacement name may be specified in $style[&apos;name&apos;] and the style being deleted will be specified in $style[&apos;old_name&apos;].</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$style</parametername>
</parameternamelist>
<parameterdescription>
<para>The image style array that being deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" line="91" bodyfile="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gac3c4d53e1323d4e140625e214d3a5f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_image_style_flush</definition>
        <argsstring>($style)</argsstring>
        <name>hook_image_style_flush</name>
        <param>
          <type>$</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to image style flushing.</para><para>This hook enables modules to take effect when a style is being flushed (all images are being deleted from the server and regenerated). Any module-specific caches that contain information related to the style should be cleared using this hook. This hook is called whenever a style is updated, deleted, or any effect associated with the style is update or deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$style</parametername>
</parameternamelist>
<parameterdescription>
<para>The image style array that is being flushed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" line="111" bodyfile="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf5549b8e546e9484c0de3093b49fea7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_image_styles_alter</definition>
        <argsstring>(&amp;$styles)</argsstring>
        <name>hook_image_styles_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>styles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify any image styles provided by other modules or the user.</para><para>This hook allows modules to modify, add, or remove image styles. This may be useful to modify default styles provided by other modules or enforce that a specific effect is always enabled on a style. Note that modifications to these styles may negatively affect the user experience, such as if an effect is added to a style through this hook, the user may attempt to remove the effect but it will be immediately be re-added.</para><para>The best use of this hook is usually to modify default styles, which are not editable by the user until they are overridden, so such interface contradictions will not occur. This hook can target default (or user) styles by checking the $style[&apos;storage&apos;] property.</para><para>If your module needs to provide a new style (rather than modify an existing one) use <ref refid="group__hooks_1ga856096251574b0df42813f6aff0d62ab" kindref="member">hook_image_default_styles()</ref> instead.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga856096251574b0df42813f6aff0d62ab" kindref="member">hook_image_default_styles()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" line="136" bodyfile="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" bodystart="136" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga856096251574b0df42813f6aff0d62ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_image_default_styles</definition>
        <argsstring>()</argsstring>
        <name>hook_image_default_styles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide module-based image styles for reuse throughout Drupal.</para><para>This hook allows your module to provide image styles. This may be useful if you require images to fit within exact dimensions. Note that you should attempt to re-use the default styles provided by Image module whenever possible, rather than creating image styles that are specific to your module. Image provides the styles &quot;thumbnail&quot;, &quot;medium&quot;, and &quot;large&quot;.</para><para>You may use this hook to more easily manage your site&apos;s changes by moving existing image styles from the database to a custom module. Note however that moving image styles to code instead storing them in the database has a negligible effect on performance, since custom image styles are loaded from the database all at once. Even if all styles are pulled from modules, Image module will still perform the same queries to check the database for any custom styles.</para><para><simplesect kind="return"><para>An array of image styles, keyed by the style name. </para></simplesect>
<simplesect kind="see"><para>image_image_default_styles() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" line="170" bodyfile="/srv/www/htdocs/drupal-7-test/modules/image/image.api.php" bodystart="170" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga7d8968676deb891e4838c2d3173de7f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_locale</definition>
        <argsstring>($op= &apos;groups&apos;)</argsstring>
        <name>hook_locale</name>
        <param>
          <type>$</type>
          <declname>op</declname>
          <defval>&apos;groups&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows modules to define their own text groups that can be translated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$op</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of operation. Currently, only supports &apos;groups&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" line="19" bodyfile="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga6db3413f657addb6ebb32ac7d2561076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_language_init</definition>
        <argsstring>()</argsstring>
        <name>hook_language_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows modules to act after language initialization has been performed.</para><para>This is primarily needed to provide translation for configuration variables in the proper bootstrap phase. Variables are user-defined strings and therefore should not be translated via t(), since the source string can change without notice and any previous translation would be lost. Moreover, since variables can be used in the bootstrap phase, we need a bootstrap hook to provide a translation early enough to avoid misalignments between code using the original values and code using the translated values. However modules implementing <ref refid="group__hooks_1ga9ac1dfffdc69471a3d00d67503c71577" kindref="member">hook_boot()</ref> should be aware that language initialization did not happen yet and thus they cannot rely on translated variables. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" line="39" bodyfile="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" bodystart="39" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga77186f4d805f77a8edc3bd8dd6041339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_language_switch_links_alter</definition>
        <argsstring>(array &amp;$links, $type, $path)</argsstring>
        <name>hook_language_switch_links_alter</name>
        <param>
          <type>array &amp;$</type>
          <declname>links</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <param>
          <type>$</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations on language switcher links.</para><para>A language switcher link may need to point to a different path or use a translated link text before going through <ref refid="common_8inc_1ad3b36c06dc46250b8d22b8d0d2e7bd97" kindref="member">l()</ref>, which will just handle the path aliases.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$links</parametername>
</parameternamelist>
<parameterdescription>
<para>Nested array of links keyed by language code. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The language type the links will switch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>The current path. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" line="67" bodyfile="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" bodystart="67" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga8932d2167557c18966cd033cfbe0f37e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_language_types_info</definition>
        <argsstring>()</argsstring>
        <name>hook_language_types_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to define their own language types.</para><para><simplesect kind="return"><para>An array of language type definitions. Each language type has an identifier key. The language type definition is an associative array that may contain the following key-value pairs:<itemizedlist>
<listitem><para>&quot;name&quot;: The human-readable language type identifier.</para></listitem><listitem><para>&quot;description&quot;: A description of the language type.</para></listitem><listitem><para>&quot;fixed&quot;: An array of language provider identifiers. Defining this key makes the language type non-configurable. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" line="89" bodyfile="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" bodystart="89" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga9752378ca7c389892fea3fb2960263dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_language_types_info_alter</definition>
        <argsstring>(array &amp;$language_types)</argsstring>
        <name>hook_language_types_info_alter</name>
        <param>
          <type>array &amp;$</type>
          <declname>language_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations on language types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$language_types</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of language type definitions. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" line="107" bodyfile="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gabcac4b239272ba30c6320a0af2fab46e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_language_negotiation_info</definition>
        <argsstring>()</argsstring>
        <name>hook_language_negotiation_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to define their own language providers.</para><para><simplesect kind="return"><para>An array of language provider definitions. Each language provider has an identifier key. The language provider definition is an associative array that may contain the following key-value pairs:<itemizedlist>
<listitem><para>&quot;types&quot;: An array of allowed language types. If a language provider does not specify which language types it should be used with, it will be available for all the configurable language types.</para></listitem><listitem><para>&quot;callbacks&quot;: An array of functions that will be called to perform various tasks. Possible key-value pairs are:<itemizedlist>
<listitem><para>&quot;language&quot;: Required. The callback that will determine the language value.</para></listitem><listitem><para>&quot;switcher&quot;: The callback that will determine the language switch links associated to the current language provider.</para></listitem><listitem><para>&quot;url_rewrite&quot;: The callback that will provide URL rewriting.</para></listitem></itemizedlist>
</para></listitem><listitem><para>&quot;file&quot;: A file that will be included before the callback is invoked; this allows callback functions to be in separate files.</para></listitem><listitem><para>&quot;weight&quot;: The default weight the language provider has.</para></listitem><listitem><para>&quot;name&quot;: A human-readable identifier.</para></listitem><listitem><para>&quot;description&quot;: A description of the language provider.</para></listitem><listitem><para>&quot;config&quot;: An internal path pointing to the language provider configuration page.</para></listitem><listitem><para>&quot;cache&quot;: The value Drupal&apos;s page cache should be set to for the current language provider to be invoked. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" line="140" bodyfile="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" bodystart="140" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gacaed046505a0a8470514731b86910089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_language_negotiation_info_alter</definition>
        <argsstring>(array &amp;$language_providers)</argsstring>
        <name>hook_language_negotiation_info_alter</name>
        <param>
          <type>array &amp;$</type>
          <declname>language_providers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations on language providers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$language_providers</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of language provider definitions. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" line="164" bodyfile="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga87a996b741bb1787b2451a2b842e20e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_multilingual_settings_changed</definition>
        <argsstring>()</argsstring>
        <name>hook_multilingual_settings_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to react to language settings changes.</para><para>Every module needing to act when the number of enabled languages changes should implement this. This is an &quot;internal&quot; hook and should not be invoked elsewhere. The typical implementation would trigger some kind of rebuilding, this way system components could properly react to the change of the enabled languages number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" line="179" bodyfile="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gad5f456f0d7ae7ddc81a0f49ce66fb1a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_language_fallback_candidates_alter</definition>
        <argsstring>(array &amp;$fallback_candidates)</argsstring>
        <name>hook_language_fallback_candidates_alter</name>
        <param>
          <type>array &amp;$</type>
          <declname>fallback_candidates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations on the language fallback candidates.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$fallback_candidates</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of language codes whose order will determine the language fallback order. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" line="190" bodyfile="/srv/www/htdocs/drupal-7-test/modules/locale/locale.api.php" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga8459a7c61564db3b5ccd53d39ada1555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_insert</definition>
        <argsstring>($menu)</argsstring>
        <name>hook_menu_insert</name>
        <param>
          <type>$</type>
          <declname>menu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Informs modules that a custom menu was created.</para><para>This hook is used to notify modules that a custom menu has been created. Contributed modules may use the information to perform actions based on the information entered into the menu system.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$menu</parametername>
</parameternamelist>
<parameterdescription>
<para>An array representing a custom menu:<itemizedlist>
<listitem><para>menu_name: The unique name of the custom menu.</para></listitem><listitem><para>title: The human readable menu title.</para></listitem><listitem><para>description: The custom menu description.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga21331911abfc25de5921af04a76a0921" kindref="member">hook_menu_update()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaef8c43d600c4efbae913dc3841a93199" kindref="member">hook_menu_delete()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/menu/menu.api.php" line="29" bodyfile="/srv/www/htdocs/drupal-7-test/modules/menu/menu.api.php" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga21331911abfc25de5921af04a76a0921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_update</definition>
        <argsstring>($menu)</argsstring>
        <name>hook_menu_update</name>
        <param>
          <type>$</type>
          <declname>menu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Informs modules that a custom menu was updated.</para><para>This hook is used to notify modules that a custom menu has been updated. Contributed modules may use the information to perform actions based on the information entered into the menu system.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$menu</parametername>
</parameternamelist>
<parameterdescription>
<para>An array representing a custom menu:<itemizedlist>
<listitem><para>menu_name: The unique name of the custom menu.</para></listitem><listitem><para>title: The human readable menu title.</para></listitem><listitem><para>description: The custom menu description.</para></listitem><listitem><para>old_name: The current &apos;menu_name&apos;. Note that internal menu names cannot be changed after initial creation.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga8459a7c61564db3b5ccd53d39ada1555" kindref="member">hook_menu_insert()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaef8c43d600c4efbae913dc3841a93199" kindref="member">hook_menu_delete()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/menu/menu.api.php" line="54" bodyfile="/srv/www/htdocs/drupal-7-test/modules/menu/menu.api.php" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaef8c43d600c4efbae913dc3841a93199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_delete</definition>
        <argsstring>($menu)</argsstring>
        <name>hook_menu_delete</name>
        <param>
          <type>$</type>
          <declname>menu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Informs modules that a custom menu was deleted.</para><para>This hook is used to notify modules that a custom menu along with all links contained in it (if any) has been deleted. Contributed modules may use the information to perform actions based on the information entered into the menu system.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$link</parametername>
</parameternamelist>
<parameterdescription>
<para>An array representing a custom menu:<itemizedlist>
<listitem><para>menu_name: The unique name of the custom menu.</para></listitem><listitem><para>title: The human readable menu title.</para></listitem><listitem><para>description: The custom menu description.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga8459a7c61564db3b5ccd53d39ada1555" kindref="member">hook_menu_insert()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga21331911abfc25de5921af04a76a0921" kindref="member">hook_menu_update()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/menu/menu.api.php" line="78" bodyfile="/srv/www/htdocs/drupal-7-test/modules/menu/menu.api.php" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaa973f2ab6ab14c3fa14e5138c6d69ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_grants</definition>
        <argsstring>($account, $op)</argsstring>
        <name>hook_node_grants</name>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <param>
          <type>$</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inform the node access system what permissions the user has.</para><para>This hook is for implementation by node access modules. In this hook, the module grants a user different &quot;grant IDs&quot; within one or more &quot;realms&quot;. In <ref refid="group__hooks_1ga3fe7744d74446e40e9b9ad2a782b4269" kindref="member">hook_node_access_records()</ref>, the realms and grant IDs are associated with permission to view, edit, and delete individual nodes.</para><para>The realms and grant IDs can be arbitrarily defined by your node access module; it is common to use role IDs as grant IDs, but that is not required. Your module could instead maintain its own list of users, where each list has an ID. In that case, the return value of this hook would be an array of the list IDs that this user is a member of.</para><para>A node access module may implement as many realms as necessary to properly define the access privileges for the nodes. Note that the system makes no distinction between published and unpublished nodes. It is the module&apos;s responsibility to provide appropriate realms to limit access to unpublished content.</para><para>Node access records are stored in the {node_access} table and define which grants are required to access a node. There is a special case for the view operation -- a record with node ID 0 corresponds to a &quot;view all&quot; grant for the realm and grant ID of that record. If there are no node access modules enabled, the core node module adds a node ID 0 record for realm &apos;all&apos;. Node access modules can also grant &quot;view all&quot; permission on their custom realms; for example, a module could create a record in {node_access} with: <programlisting><codeline><highlight class="normal"><sp/>$record<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;nid&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;gid&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>888,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;realm&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;example_realm&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;grant_view&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;grant_update&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;grant_delete&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><ref refid="group__schemaapi_1ga96f707de751a962bf21b6cb0cb4f2ae6" kindref="member">drupal_write_record</ref>(</highlight><highlight class="stringliteral">&apos;node_access&apos;</highlight><highlight class="normal">,<sp/>$record);</highlight></codeline>
</programlisting> And then in its <ref refid="group__hooks_1gaa973f2ab6ab14c3fa14e5138c6d69ecf" kindref="member">hook_node_grants()</ref> implementation, it would need to return: <programlisting><codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>($op<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;view&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$grants[</highlight><highlight class="stringliteral">&apos;example_realm&apos;</highlight><highlight class="normal">]<sp/>=<sp/>array(888);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting> If you decide to do this, be aware that the node_access_rebuild() function will erase any node ID 0 entry when it is called, so you will need to make sure to restore your {node_access} record after node_access_rebuild() is called.</para><para><simplesect kind="see"><para>node_access_view_all_nodes() </para><simplesectsep/><para>node_access_rebuild()</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user object whose grants are requested. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$op</parametername>
</parameternamelist>
<parameterdescription>
<para>The node operation to be performed, such as &quot;view&quot;, &quot;update&quot;, or &quot;delete&quot;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array whose keys are &quot;realms&quot; of grants, and whose values are arrays of the grant IDs within this realm that this user is being granted.</para></simplesect>
For a detailed example, see node_access_example.module. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="196" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="196" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3fe7744d74446e40e9b9ad2a782b4269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_access_records</definition>
        <argsstring>($node)</argsstring>
        <name>hook_node_access_records</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set permissions for a node to be written to the database.</para><para>When a node is saved, a module implementing <ref refid="group__hooks_1ga3fe7744d74446e40e9b9ad2a782b4269" kindref="member">hook_node_access_records()</ref> will be asked if it is interested in the access permissions for a node. If it is interested, it must respond with an array of permissions arrays for that node.</para><para>Node access grants apply regardless of the published or unpublished status of the node. Implementations must make sure not to grant access to unpublished nodes if they don&apos;t want to change the standard access control behavior. Your module may need to create a separate access realm to handle access to unpublished nodes.</para><para>Note that the grant values in the return value from your hook must be integers and not boolean TRUE and FALSE.</para><para>Each permissions item in the array is an array with the following elements:<itemizedlist>
<listitem><para>&apos;realm&apos;: The name of a realm that the module has defined in <ref refid="group__hooks_1gaa973f2ab6ab14c3fa14e5138c6d69ecf" kindref="member">hook_node_grants()</ref>.</para></listitem><listitem><para>&apos;gid&apos;: A &apos;grant ID&apos; from <ref refid="group__hooks_1gaa973f2ab6ab14c3fa14e5138c6d69ecf" kindref="member">hook_node_grants()</ref>.</para></listitem><listitem><para>&apos;grant_view&apos;: If set to 1 a user that has been identified as a member of this gid within this realm can view this node. This should usually be set to $node-&gt;status. Failure to do so may expose unpublished content to some users.</para></listitem><listitem><para>&apos;grant_update&apos;: If set to 1 a user that has been identified as a member of this gid within this realm can edit this node.</para></listitem><listitem><para>&apos;grant_delete&apos;: If set to 1 a user that has been identified as a member of this gid within this realm can delete this node.</para></listitem><listitem><para>&apos;priority&apos;: If multiple modules seek to set permissions on a node, the realms that have the highest priority will win out, and realms with a lower priority will not be written. If there is any doubt, it is best to leave this 0.</para></listitem></itemizedlist>
</para><para>When an implementation is interested in a node but want to deny access to everyone, it may return a &quot;deny all&quot; grant:</para><para><programlisting><codeline><highlight class="normal"><sp/>$grants[]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;realm&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;all&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;gid&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;grant_view&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;grant_update&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;grant_delete&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;priority&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para>Setting the priority should cancel out other grants. In the case of a conflict between modules, it is safer to use <ref refid="group__hooks_1ga37c90bf0e1dccad0deefa368dd94cc83" kindref="member">hook_node_access_records_alter()</ref> to return only the deny grant.</para><para>Note: a deny all grant is not written to the database; denies are implicit.</para><para><simplesect kind="see"><para>node_access_write_grants()</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that has just been saved.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of grants as defined above. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="269" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="269" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga37c90bf0e1dccad0deefa368dd94cc83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_access_records_alter</definition>
        <argsstring>(&amp;$grants, $node)</argsstring>
        <name>hook_node_access_records_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>grants</declname>
        </param>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter permissions for a node before it is written to the database.</para><para>Node access modules establish rules for user access to content. Node access records are stored in the {node_access} table and define which permissions are required to access a node. This hook is invoked after node access modules returned their requirements via <ref refid="group__hooks_1ga3fe7744d74446e40e9b9ad2a782b4269" kindref="member">hook_node_access_records()</ref>; doing so allows modules to modify the $grants array by reference before it is stored, so custom or advanced business logic can be applied.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga3fe7744d74446e40e9b9ad2a782b4269" kindref="member">hook_node_access_records()</ref></para></simplesect>
Upon viewing, editing or deleting a node, <ref refid="group__hooks_1gaa973f2ab6ab14c3fa14e5138c6d69ecf" kindref="member">hook_node_grants()</ref> builds a permissions array that is compared against the stored access records. The user must have one or more matching permissions in order to complete the requested operation.</para><para>A module may deny all access to a node by setting $grants to an empty array.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gaa973f2ab6ab14c3fa14e5138c6d69ecf" kindref="member">hook_node_grants()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga21e95e2bd0b4ed12d861aa83426a8ba3" kindref="member">hook_node_grants_alter()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$grants</parametername>
</parameternamelist>
<parameterdescription>
<para>The $grants array returned by <ref refid="group__hooks_1ga3fe7744d74446e40e9b9ad2a782b4269" kindref="member">hook_node_access_records()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node for which the grants were acquired.</para></parameterdescription>
</parameteritem>
</parameterlist>
The preferred use of this hook is in a module that bridges multiple node access modules with a configurable behavior, as shown in the example with the &apos;is_preview&apos; field. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="336" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="336" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga21e95e2bd0b4ed12d861aa83426a8ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_grants_alter</definition>
        <argsstring>(&amp;$grants, $account, $op)</argsstring>
        <name>hook_node_grants_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>grants</declname>
        </param>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <param>
          <type>$</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter user access rules when trying to view, edit or delete a node.</para><para>Node access modules establish rules for user access to content. <ref refid="group__hooks_1gaa973f2ab6ab14c3fa14e5138c6d69ecf" kindref="member">hook_node_grants()</ref> defines permissions for a user to view, edit or delete nodes by building a $grants array that indicates the permissions assigned to the user by each node access module. This hook is called to allow modules to modify the $grants array by reference, so the interaction of multiple node access modules can be altered or advanced business logic can be applied.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gaa973f2ab6ab14c3fa14e5138c6d69ecf" kindref="member">hook_node_grants()</ref></para></simplesect>
The resulting grants are then checked against the records stored in the {node_access} table to determine if the operation may be completed.</para><para>A module may deny all access to a user by setting $grants to an empty array.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga3fe7744d74446e40e9b9ad2a782b4269" kindref="member">hook_node_access_records()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga37c90bf0e1dccad0deefa368dd94cc83" kindref="member">hook_node_access_records_alter()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$grants</parametername>
</parameternamelist>
<parameterdescription>
<para>The $grants array returned by <ref refid="group__hooks_1gaa973f2ab6ab14c3fa14e5138c6d69ecf" kindref="member">hook_node_grants()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user account requesting access to content. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation being performed, &apos;view&apos;, &apos;update&apos; or &apos;delete&apos;.</para></parameterdescription>
</parameteritem>
</parameterlist>
Developers may use this hook to either add additional grants to a user or to remove existing grants. These rules are typically based on either the permissions assigned to a user role, or specific attributes of a user account. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="384" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="384" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gadedee7943c08aeed54ea520c34471a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_operations</definition>
        <argsstring>()</argsstring>
        <name>hook_node_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add mass node operations.</para><para>This hook enables modules to inject custom operations into the mass operations dropdown found at admin/content, by associating a callback function with the operation, which is called when the form is submitted. The callback function receives one initial argument, which is an array of the checked nodes.</para><para><simplesect kind="return"><para>An array of operations. Each operation is an associative array that may contain the following key-value pairs:<itemizedlist>
<listitem><para>&apos;label&apos;: Required. The label for the operation, displayed in the dropdown menu.</para></listitem><listitem><para>&apos;callback&apos;: Required. The function to call for the operation.</para></listitem><listitem><para>&apos;callback arguments&apos;: Optional. An array of additional arguments to pass to the callback function. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="421" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="421" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga75a280ea1fbe0fb6ca034f8aad06d58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_access</definition>
        <argsstring>($node, $op, $account)</argsstring>
        <name>hook_node_access</name>
        <param>
          <type>$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>$</type>
          <declname>op</declname>
        </param>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Control access to a node.</para><para>Modules may implement this hook if they want to have a say in whether or not a given user has access to perform a given operation on a node.</para><para>The administrative account (user ID #1) always passes any access check, so this hook is not called in that case. Users with the &quot;bypass node access&quot; permission may always view and edit content through the administrative interface.</para><para>Note that not all modules will want to influence access on all node types. If your module does not want to actively grant or block access, return NODE_ACCESS_IGNORE or simply return nothing. Blindly returning FALSE will break other node access modules.</para><para><ref refid="" kindref="compound">More on the node access system </ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node on which the operation is to be performed, or, if it does not yet exist, the type of node to be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation to be performed. Possible values:<itemizedlist>
<listitem><para>&quot;create&quot;</para></listitem><listitem><para>&quot;delete&quot;</para></listitem><listitem><para>&quot;update&quot;</para></listitem><listitem><para>&quot;view&quot; </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>A user object representing the user for whom the operation is to be performed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NODE_ACCESS_ALLOW if the operation is to be allowed; NODE_ACCESS_DENY if the operation is to be denied; NODE_ACCESS_IGNORE to not affect this operation at all. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="593" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="593" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga8941b418846350a7edbd67ac388a5dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_type_insert</definition>
        <argsstring>($info)</argsstring>
        <name>hook_node_type_insert</name>
        <param>
          <type>$</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to node type creation.</para><para>This hook is invoked from node_type_save() after the node type is added to the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$info</parametername>
</parameternamelist>
<parameterdescription>
<para>The node type object that is being created. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="969" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="969" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga7518f336bfbd131259f520fcd45ba710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_type_update</definition>
        <argsstring>($info)</argsstring>
        <name>hook_node_type_update</name>
        <param>
          <type>$</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to node type updates.</para><para>This hook is invoked from node_type_save() after the node type is updated in the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$info</parametername>
</parameternamelist>
<parameterdescription>
<para>The node type object that is being updated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="981" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="981" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga35ae5b1a494322b02d03ae00a98ac77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_node_type_delete</definition>
        <argsstring>($info)</argsstring>
        <name>hook_node_type_delete</name>
        <param>
          <type>$</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to node type deletion.</para><para>This hook is invoked from node_type_delete() after the node type is removed from the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$info</parametername>
</parameternamelist>
<parameterdescription>
<para>The node type object that is being deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" line="998" bodyfile="/srv/www/htdocs/drupal-7-test/modules/node/node.api.php" bodystart="998" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga965f1ea7c6181118bd6d417c0f6db530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_openid</definition>
        <argsstring>($op, $request)</argsstring>
        <name>hook_openid</name>
        <param>
          <type>$</type>
          <declname>op</declname>
        </param>
        <param>
          <type>$</type>
          <declname>request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to modify the OpenID request parameters.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation to be performed. Possible values:<itemizedlist>
<listitem><para>request: Modify parameters before they are sent to the OpenID provider. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$request</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array of parameter defaults to which to modify or append. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An associative array of parameters to be merged with the default list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" line="26" bodyfile="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gabc9e3b65c80d0d90001a8eebec8b5464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_openid_response</definition>
        <argsstring>($response, $account)</argsstring>
        <name>hook_openid_response</name>
        <param>
          <type>$</type>
          <declname>response</declname>
        </param>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to act upon a successful OpenID login.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$response</parametername>
</parameternamelist>
<parameterdescription>
<para>Response values from the OpenID Provider. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The Drupal user account that logged in </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" line="42" bodyfile="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaec6cbfdd913d8ba670c991b87bbf9676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_openid_discovery_method_info</definition>
        <argsstring>()</argsstring>
        <name>hook_openid_discovery_method_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to declare OpenID discovery methods.</para><para>The discovery function callbacks will be called in turn with an unique parameter, the claimed identifier. They have to return an array of services, in the same form returned by openid_discover().</para><para>The first discovery method that succeed (return at least one services) will stop the discovery process.</para><para><simplesect kind="return"><para>An associative array which keys are the name of the discovery methods and values are function callbacks. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1ga0b118d8fd00181113e6925c08c9dfb91" kindref="member">hook_openid_discovery_method_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" line="63" bodyfile="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga0b118d8fd00181113e6925c08c9dfb91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_openid_discovery_method_info_alter</definition>
        <argsstring>(&amp;$methods)</argsstring>
        <name>hook_openid_discovery_method_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>methods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to alter discovery methods. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" line="72" bodyfile="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga53b4878d46aae5aea7de146ab543c585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_openid_normalization_method_info</definition>
        <argsstring>()</argsstring>
        <name>hook_openid_normalization_method_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to declare OpenID normalization methods.</para><para>The discovery function callbacks will be called in turn with an unique parameter, the identifier to normalize. They have to return a normalized identifier, or NULL if the identifier is not in a form they can handle.</para><para>The first normalization method that succeed (return a value that is not NULL) will stop the normalization process.</para><para><simplesect kind="return"><para>An array with a set of function callbacks, that will be called in turn when normalizing an OpenID identifier. The normalization functions have to return a normalized identifier, or NULL if the identifier is not in a form they can handle. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1ga5600b490e79b0dd8bfff68558df53370" kindref="member">hook_openid_normalization_method_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" line="94" bodyfile="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5600b490e79b0dd8bfff68558df53370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_openid_normalization_method_info_alter</definition>
        <argsstring>(&amp;$methods)</argsstring>
        <name>hook_openid_normalization_method_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>methods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to alter normalization methods. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" line="103" bodyfile="/srv/www/htdocs/drupal-7-test/modules/openid/openid.api.php" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4f7d60aad2768e7b8fac11839ea9b874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_overlay_parent_initialize</definition>
        <argsstring>()</argsstring>
        <name>hook_overlay_parent_initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to act when an overlay parent window is initialized.</para><para>The parent window is initialized when a page is displayed in which the overlay might be required to be displayed, so modules can act here if they need to take action to accomodate the possibility of the overlay appearing within a Drupal page. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/overlay/overlay.api.php" line="21" bodyfile="/srv/www/htdocs/drupal-7-test/modules/overlay/overlay.api.php" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga7bf562d101128af70a3eff0a0364342b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_overlay_child_initialize</definition>
        <argsstring>()</argsstring>
        <name>hook_overlay_child_initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to act when an overlay child window is initialized.</para><para>The child window is initialized when a page is displayed from within the overlay, so modules can act here if they need to take action to work from within the confines of the overlay. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/overlay/overlay.api.php" line="33" bodyfile="/srv/www/htdocs/drupal-7-test/modules/overlay/overlay.api.php" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaa0decf43e13f49d88850786b00290d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_path_insert</definition>
        <argsstring>($path)</argsstring>
        <name>hook_path_insert</name>
        <param>
          <type>$</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to respond to a path being inserted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing the following keys:<itemizedlist>
<listitem><para>source: The internal system path.</para></listitem><listitem><para>alias: The URL alias.</para></listitem><listitem><para>pid: Unique path alias identifier.</para></listitem><listitem><para>language: The language of the alias.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="path_8inc_1a2560e9e01e6d4f6b38c4e55c39715e25" kindref="member">path_save()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/path/path.api.php" line="26" bodyfile="/srv/www/htdocs/drupal-7-test/modules/path/path.api.php" bodystart="26" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga317c17e152ebb4fc477bb8bfe9294960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_path_update</definition>
        <argsstring>($path)</argsstring>
        <name>hook_path_update</name>
        <param>
          <type>$</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to respond to a path being updated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing the following keys:<itemizedlist>
<listitem><para>source: The internal system path.</para></listitem><listitem><para>alias: The URL alias.</para></listitem><listitem><para>pid: Unique path alias identifier.</para></listitem><listitem><para>language: The language of the alias.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="path_8inc_1a2560e9e01e6d4f6b38c4e55c39715e25" kindref="member">path_save()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/path/path.api.php" line="47" bodyfile="/srv/www/htdocs/drupal-7-test/modules/path/path.api.php" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga1d7d28de5542f0a6364604ae0b122b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_path_delete</definition>
        <argsstring>($path)</argsstring>
        <name>hook_path_delete</name>
        <param>
          <type>$</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to respond to a path being deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing the following keys:<itemizedlist>
<listitem><para>source: The internal system path.</para></listitem><listitem><para>alias: The URL alias.</para></listitem><listitem><para>pid: Unique path alias identifier.</para></listitem><listitem><para>language: The language of the alias.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="path_8inc_1adbe589627a12c7be338700a1df1bc357" kindref="member">path_delete()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/path/path.api.php" line="66" bodyfile="/srv/www/htdocs/drupal-7-test/modules/path/path.api.php" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gae3e7f047bdcb9309b323e2af09966765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_rdf_mapping</definition>
        <argsstring>()</argsstring>
        <name>hook_rdf_mapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to define RDF mappings for field bundles.</para><para>Modules defining their own field bundles can specify which RDF semantics should be used to annotate these bundles. These mappings are then used for automatic RDFa output in the HTML code.</para><para><simplesect kind="return"><para>A list of mapping structures, where each mapping is an associative array:<itemizedlist>
<listitem><para>type: The name of an entity type (e.g., &apos;node&apos;, &apos;comment&apos;, and so on.)</para></listitem><listitem><para>bundle: The name of the bundle (e.g., &apos;page&apos;, &apos;blog&apos;, or RDF_DEFAULT_BUNDLE for default mappings.)</para></listitem><listitem><para>mapping: The mapping structure which applies to the entity type and bundle. A mapping structure is an array with keys corresponding to existing field instances in the bundle. Each field is then described in terms of the RDF mapping:<itemizedlist>
<listitem><para>predicates: An array of RDF predicates which describe the relation between the bundle (RDF subject) and the value of the field (RDF object). This value is either some text, another bundle, or a URI in general.</para></listitem><listitem><para>datatype: Is used along with &apos;callback&apos; to format data so that it is readable by machines. A typical example is a date which can be written in many different formats but should be translated into a uniform format for machine consumption.</para></listitem><listitem><para>callback: A function name to invoke for &apos;datatype&apos;.</para></listitem><listitem><para>type: A string used to determine the type of RDFa markup which will be used in the final HTML output, depending on whether the RDF object is a literal text or another RDF resource.</para></listitem><listitem><para>rdftype: A special property used to define the type of the instance. Its value should be an array of RDF classes. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/rdf/rdf.api.php" line="46" bodyfile="/srv/www/htdocs/drupal-7-test/modules/rdf/rdf.api.php" bodystart="46" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga32e59c5e172304a5f49ec7d76ee6bf3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_rdf_namespaces</definition>
        <argsstring>()</argsstring>
        <name>hook_rdf_namespaces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow modules to define namespaces for RDF mappings.</para><para>Many common namespace prefixes are defined in rdf_rdf_namespaces(). However, if a module implements <ref refid="group__hooks_1gae3e7f047bdcb9309b323e2af09966765" kindref="member">hook_rdf_mapping()</ref> and uses a prefix that is not defined in rdf_rdf_namespaces(), this hook should be used to define the new namespace prefix.</para><para><simplesect kind="return"><para>An associative array of namespaces where the key is the namespace prefix and the value is the namespace URI. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/rdf/rdf.api.php" line="90" bodyfile="/srv/www/htdocs/drupal-7-test/modules/rdf/rdf.api.php" bodystart="90" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga37b761616f2cad4796891008f2b374f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_search_info</definition>
        <argsstring>()</argsstring>
        <name>hook_search_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a custom search type.</para><para>This hook allows a module to tell search.module that it wishes to perform searches on content it defines (custom node types, users, or comments for example) when a site search is performed.</para><para>In order for the search to do anything, your module must also implement <ref refid="group__hooks_1ga00be3e4a3b64ad73f8ad1304a450cee5" kindref="member">hook_search_execute()</ref>, which is called when someone requests a search on your module&apos;s type of content. If you want to have your content indexed in the standard search index, your module should also implement <ref refid="group__hooks_1ga23d6f6642bd53c4f033f10e9c1b12d43" kindref="member">hook_update_index()</ref>. If your search type has settings, you can implement <ref refid="group__hooks_1gae7c7a4e3d4ee63b5aab3742b0e12624e" kindref="member">hook_search_admin()</ref> to add them to the search settings page. You can also alter the display of your module&apos;s search results by implementing <ref refid="group__hooks_1ga422b9506b3dfd8ed5aa8bfaea98844b9" kindref="member">hook_search_page()</ref>. You can use <ref refid="group__hooks_1ga8d4a4089551493d55911bd5c4f218264" kindref="member">hook_form_FORM_ID_alter()</ref>, with FORM_ID set to &apos;search&apos;, to add fields to the search form (see node_form_search_form_alter() for an example). You can use <ref refid="group__hooks_1gac49e6fd7370e65efeaf484ec992de1f0" kindref="member">hook_search_access()</ref> to limit access to searching, and <ref refid="group__hooks_1ga422b9506b3dfd8ed5aa8bfaea98844b9" kindref="member">hook_search_page()</ref> to override how search results are displayed.</para><para><simplesect kind="return"><para>Array with optional keys:<itemizedlist>
<listitem><para>&apos;title&apos;: Title for the tab on the search page for this module. Defaults to the module name if not given.</para></listitem><listitem><para>&apos;path&apos;: Path component after &apos;search/&apos; for searching with this module. Defaults to the module name if not given.</para></listitem><listitem><para>&apos;conditions_callback&apos;: Name of a callback function that is invoked by <ref refid="search_8pages_8inc_1aa4798bb08a1df2c280b943182d53892e" kindref="member">search_view()</ref> to get an array of additional search conditions to pass to search_data(). For example, a search module may get additional keywords, filters, or modifiers for the search from the query string. Sample callback function: <ref refid="group__hooks_1ga4537cb23d02376e3002a6d2195417a5c" kindref="member">sample_search_conditions_callback()</ref>. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="47" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4537cb23d02376e3002a6d2195417a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sample_search_conditions_callback</definition>
        <argsstring>($keys)</argsstring>
        <name>sample_search_conditions_callback</name>
        <param>
          <type>$</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An example conditions callback function for search.</para><para>This example pulls additional search keywords out of the $_REQUEST variable, (i.e. from the query string of the request). The conditions may also be generated internally - for example based on a module&apos;s settings.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga37b761616f2cad4796891008f2b374f3" kindref="member">hook_search_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="65" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="65" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gac49e6fd7370e65efeaf484ec992de1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_search_access</definition>
        <argsstring>()</argsstring>
        <name>hook_search_access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define access to a custom search routine.</para><para>This hook allows a module to define permissions for a search tab. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="87" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaefc7ab0e4a53a2752371dcccaec41deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_search_reset</definition>
        <argsstring>()</argsstring>
        <name>hook_search_reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Take action when the search index is going to be rebuilt.</para><para>Modules that use <ref refid="group__hooks_1ga23d6f6642bd53c4f033f10e9c1b12d43" kindref="member">hook_update_index()</ref> should update their indexing bookkeeping so that it starts from scratch the next time <ref refid="group__hooks_1ga23d6f6642bd53c4f033f10e9c1b12d43" kindref="member">hook_update_index()</ref> is called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="100" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gafb7f508058afed4fe670974b82b072f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_search_status</definition>
        <argsstring>()</argsstring>
        <name>hook_search_status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Report the status of indexing.</para><para><simplesect kind="return"><para>An associative array with the key-value pairs:<itemizedlist>
<listitem><para>&apos;remaining&apos;: The number of items left to index.</para></listitem><listitem><para>&apos;total&apos;: The total number of items to index. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="117" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gae7c7a4e3d4ee63b5aab3742b0e12624e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_search_admin</definition>
        <argsstring>()</argsstring>
        <name>hook_search_admin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add elements to the search settings form.</para><para><simplesect kind="return"><para>Form array for the Search settings page at admin/config/search/settings. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="131" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="131" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga00be3e4a3b64ad73f8ad1304a450cee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_search_execute</definition>
        <argsstring>($keys=NULL, $conditions=NULL)</argsstring>
        <name>hook_search_execute</name>
        <param>
          <type>$</type>
          <declname>keys</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>$</type>
          <declname>conditions</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute a search for a set of key words.</para><para>Use database API with the &apos;PagerDefault&apos; query extension to perform your search.</para><para>If your module uses <ref refid="group__hooks_1ga23d6f6642bd53c4f033f10e9c1b12d43" kindref="member">hook_update_index()</ref> and search_index() to index its items, use table &apos;search_index&apos; aliased to &apos;i&apos; as the main table in your query, with the &apos;SearchQuery&apos; extension. You can join to your module&apos;s table using the &apos;i.sid&apos; field, which will contain the $sid values you provided to search_index(). Add the main keywords to the query by using method searchExpression(). The functions search_expression_extract() and search_expression_insert() may also be helpful for adding custom search parameters to the search expression.</para><para>See node_search_execute() for an example of a module that uses the search index, and user_search_execute() for an example that doesn&apos;t ues the search index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$keys</parametername>
</parameternamelist>
<parameterdescription>
<para>The search keywords as entered by the user. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$conditions</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional array of additional conditions, such as filters.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of search results. To use the default search result display, each item should have the following keys&apos;:<itemizedlist>
<listitem><para>&apos;link&apos;: Required. The URL of the found item.</para></listitem><listitem><para>&apos;type&apos;: The type of item (such as the content type).</para></listitem><listitem><para>&apos;title&apos;: Required. The name of the item.</para></listitem><listitem><para>&apos;user&apos;: The author of the item.</para></listitem><listitem><para>&apos;date&apos;: A timestamp when the item was last modified.</para></listitem><listitem><para>&apos;extra&apos;: An array of optional extra information items.</para></listitem><listitem><para>&apos;snippet&apos;: An excerpt or preview to show with the result (can be generated with search_excerpt()).</para></listitem><listitem><para>&apos;language&apos;: Language code for the item (usually two characters). </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="194" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="194" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga422b9506b3dfd8ed5aa8bfaea98844b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_search_page</definition>
        <argsstring>($results)</argsstring>
        <name>hook_search_page</name>
        <param>
          <type>$</type>
          <declname>results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Override the rendering of search results.</para><para>A module that implements <ref refid="group__hooks_1ga37b761616f2cad4796891008f2b374f3" kindref="member">hook_search_info()</ref> to define a type of search may implement this hook in order to override the default theming of its search results, which is otherwise themed using theme(&apos;search_results&apos;).</para><para>Note that by default, theme(&apos;search_results&apos;) and theme(&apos;search_result&apos;) work together to create an ordered list (OL). So your <ref refid="group__hooks_1ga422b9506b3dfd8ed5aa8bfaea98844b9" kindref="member">hook_search_page()</ref> implementation should probably do this as well.</para><para><simplesect kind="see"><para><ref refid="search-result_8tpl_8php" kindref="compound">search-result.tpl.php</ref>, <ref refid="search-results_8tpl_8php" kindref="compound">search-results.tpl.php</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$results</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of search results.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A renderable array, which will render the formatted search results with a pager included. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="270" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="270" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3c935c295da9103bc7184f6ec869c533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_search_preprocess</definition>
        <argsstring>($text)</argsstring>
        <name>hook_search_preprocess</name>
        <param>
          <type>$</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Preprocess text for search.</para><para>This hook is called to preprocess both the text added to the search index and the keywords users have submitted for searching.</para><para>Possible uses:<itemizedlist>
<listitem><para>Adding spaces between words of Chinese or Japanese text.</para></listitem><listitem><para>Stemming words down to their root words to allow matches between, for instance, walk, walked, walking, and walks in searching.</para></listitem><listitem><para>Expanding abbreviations and acronymns that occur in text.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text to preprocess. This is a single piece of plain text extracted from between two HTML tags or from the search query. It will not contain any HTML entities or HTML tags.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The text after preprocessing. Note that if your module decides not to alter the text, it should return the original text. Also, after preprocessing, words in the text should be separated by a space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="309" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga23d6f6642bd53c4f033f10e9c1b12d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_update_index</definition>
        <argsstring>()</argsstring>
        <name>hook_update_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the search index for this module.</para><para>This hook is called every cron run if search.module is enabled, your module has implemented <ref refid="group__hooks_1ga37b761616f2cad4796891008f2b374f3" kindref="member">hook_search_info()</ref>, and your module has been set as an active search module on the Search settings page (admin/config/search/settings). It allows your module to add items to the built-in search index using search_index(), or to add them to your module&apos;s own indexing mechanism.</para><para>When implementing this hook, your module should index content items that were modified or added since the last run. PHP has a time limit for cron, though, so it is advisable to limit how many items you index per run using variable_get(&apos;search_cron_limit&apos;) (see example below). Also, since the cron run could time out and abort in the middle of your run, you should update your module&apos;s internal bookkeeping on when items have last been indexed as you go rather than waiting to the end of indexing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" line="334" bodyfile="/srv/www/htdocs/drupal-7-test/modules/search/search.api.php" bodystart="334" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5fe90af5e2617387b8b14dc51fc356ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_shortcut_default_set</definition>
        <argsstring>($account)</argsstring>
        <name>hook_shortcut_default_set</name>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the name of a default shortcut set for the provided user account.</para><para>This hook allows modules to define default shortcut sets for a particular user that differ from the site-wide default (for example, a module may want to define default shortcuts on a per-role basis).</para><para>The default shortcut set is used only when the user does not have any other shortcut set explicitly assigned to them.</para><para>Note that only one default shortcut set can exist per user, so when multiple modules implement this hook, the last (i.e., highest weighted) module which returns a valid shortcut set name will prevail.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user account whose default shortcut set is being requested. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The name of the shortcut set that this module recommends for that user, if there is one. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/shortcut/shortcut.api.php" line="33" bodyfile="/srv/www/htdocs/drupal-7-test/modules/shortcut/shortcut.api.php" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga0e2bc56b600a923dff7c800e644e0d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_simpletest_alter</definition>
        <argsstring>(&amp;$groups)</argsstring>
        <name>hook_simpletest_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>groups</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the list of tests.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$groups</parametername>
</parameternamelist>
<parameterdescription>
<para>A two dimension array, the first key is the test group (as defined in getInfo) the second is the name of the class and the value is the return value of the getInfo method. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/simpletest/simpletest.api.php" line="21" bodyfile="/srv/www/htdocs/drupal-7-test/modules/simpletest/simpletest.api.php" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf2cec6422b14cc1d0cace3ee2b26de6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_test_group_started</definition>
        <argsstring>()</argsstring>
        <name>hook_test_group_started</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A test group has started.</para><para>This hook is called just once at the beginning of a test group. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/simpletest/simpletest.api.php" line="33" bodyfile="/srv/www/htdocs/drupal-7-test/modules/simpletest/simpletest.api.php" bodystart="33" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga9470b40a0a03f248e7cd9a44930c155e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_test_group_finished</definition>
        <argsstring>()</argsstring>
        <name>hook_test_group_finished</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A test group has finished.</para><para>This hook is called just once at the end of a test group. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/simpletest/simpletest.api.php" line="41" bodyfile="/srv/www/htdocs/drupal-7-test/modules/simpletest/simpletest.api.php" bodystart="41" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaebaf3196cbd4a76ad40603762443e9c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_test_finished</definition>
        <argsstring>($results)</argsstring>
        <name>hook_test_finished</name>
        <param>
          <type>$</type>
          <declname>results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An individual test has finished.</para><para>This hook is called when an individual test has finished.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$results</parametername>
</parameternamelist>
<parameterdescription>
<para>The results of the test as gathered by <ref refid="class_drupal_web_test_case" kindref="compound">DrupalWebTestCase</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>DrupalWebTestCase-&gt;results </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/simpletest/simpletest.api.php" line="54" bodyfile="/srv/www/htdocs/drupal-7-test/modules/simpletest/simpletest.api.php" bodystart="54" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga65142e7864f445483786087d180a2010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_hook_info</definition>
        <argsstring>()</argsstring>
        <name>hook_hook_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines one or more hooks that are exposed by a module.</para><para>Normally hooks do not need to be explicitly defined. However, by declaring a hook explicitly, a module may define a &quot;group&quot; for it. Modules that implement a hook may then place their implementation in either $module.module or in $module.$group.inc. If the hook is located in $module.$group.inc, then that file will be automatically loaded when needed. In general, hooks that are rarely invoked and/or are very large should be placed in a separate include file, while hooks that are very short or very frequently called should be left in the main module file so that they are always available.</para><para><simplesect kind="return"><para>An associative array whose keys are hook names and whose values are an associative array containing:<itemizedlist>
<listitem><para>group: A string defining the group to which the hook belongs. The module system will determine whether a file with the name $module.$group.inc exists, and automatically load it when required.</para></listitem></itemizedlist>
</para></simplesect>
See system_hook_info() for all hook groups defined by Drupal core.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gaa02e3983f86b09fc29d5e795fd943cb1" kindref="member">hook_hook_info_alter()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="37" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="37" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaa02e3983f86b09fc29d5e795fd943cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_hook_info_alter</definition>
        <argsstring>(&amp;$hooks)</argsstring>
        <name>hook_hook_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>hooks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter information from <ref refid="group__hooks_1ga65142e7864f445483786087d180a2010" kindref="member">hook_hook_info()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$hooks</parametername>
</parameternamelist>
<parameterdescription>
<para>Information gathered by <ref refid="group__hooks_1ga30e72b1391cfa4c282fe98e0dabe02f9" kindref="member">module_hook_info()</ref> from other modules&apos; implementations of <ref refid="group__hooks_1ga65142e7864f445483786087d180a2010" kindref="member">hook_hook_info()</ref>. Alter this array directly. See <ref refid="group__hooks_1ga65142e7864f445483786087d180a2010" kindref="member">hook_hook_info()</ref> for information on what this may contain. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="55" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf02318e9d0e8cdbf6d187b271b9969a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_info</definition>
        <argsstring>()</argsstring>
        <name>hook_entity_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inform the base system and the Field API about one or more entity types.</para><para>Inform the system about one or more entity types (i.e., object types that can be loaded via <ref refid="common_8inc_1a78b89cf93f9710a68d02f86adccf1898" kindref="member">entity_load()</ref> and, optionally, to which fields can be attached).</para><para><simplesect kind="return"><para>An array whose keys are entity type names and whose values identify properties of those types that the system needs to know about:<itemizedlist>
<listitem><para>label: The human-readable name of the type.</para></listitem><listitem><para>controller class: The name of the class that is used to load the objects. The class has to implement the <ref refid="interface_drupal_entity_controller_interface" kindref="compound">DrupalEntityControllerInterface</ref> interface. Leave blank to use the <ref refid="class_drupal_default_entity_controller" kindref="compound">DrupalDefaultEntityController</ref> implementation.</para></listitem><listitem><para>base table: (used by <ref refid="class_drupal_default_entity_controller" kindref="compound">DrupalDefaultEntityController</ref>) The name of the entity type&apos;s base table.</para></listitem><listitem><para>revision table: The name of the entity type&apos;s revision table (if any).</para></listitem><listitem><para>static cache: (used by <ref refid="class_drupal_default_entity_controller" kindref="compound">DrupalDefaultEntityController</ref>) FALSE to disable static caching of entities during a page request. Defaults to TRUE.</para></listitem><listitem><para>field cache: (used by Field API loading and saving of field data) FALSE to disable Field API&apos;s persistent cache of field data. Only recommended if a higher level persistent cache is available for the entity type. Defaults to TRUE.</para></listitem><listitem><para>load hook: The name of the hook which should be invoked by <ref refid="class_drupal_default_entity_controller" kindref="compound">DrupalDefaultEntityController</ref>:attachLoad(), for example &apos;node_load&apos;.</para></listitem><listitem><para>uri callback: A function taking an entity as argument and returning the uri elements of the entity, e.g. &apos;path&apos; and &apos;options&apos;. The actual entity uri can be constructed by passing these elements to <ref refid="common_8inc_1a43b2a0594431556db49df980801d8807" kindref="member">url()</ref>.</para></listitem><listitem><para>label callback: (optional) A function taking an entity and an entity type as arguments and returning the label of the entity. The entity label is the main string associated with an entity; for example, the title of a node or the subject of a comment. If there is an entity object property that defines the label, use the &apos;label&apos; element of the &apos;entity keys&apos; return value component to provide this information (see below). If more complex logic is needed to determine the label of an entity, you can instead specify a callback function here, which will be called to determine the entity label. See also the <ref refid="common_8inc_1aa9868513964b440f8206571573b833b3" kindref="member">entity_label()</ref> function, which implements this logic.</para></listitem><listitem><para>fieldable: Set to TRUE if you want your entity type to accept fields being attached to it.</para></listitem><listitem><para>translation: An associative array of modules registered as field translation handlers. Array keys are the module names, array values can be any data structure the module uses to provide field translation. Any empty value disallows the module to appear as a translation handler.</para></listitem><listitem><para>entity keys: An array describing how the Field API can extract the information it needs from the objects of the type. Elements:<itemizedlist>
<listitem><para>id: The name of the property that contains the primary id of the entity. Every entity object passed to the Field API must have this property and its value must be numeric.</para></listitem><listitem><para>revision: The name of the property that contains the revision id of the entity. The Field API assumes that all revision ids are unique across all entities of a type. This entry can be omitted if the entities of this type are not versionable.</para></listitem><listitem><para>bundle: The name of the property that contains the bundle name for the entity. The bundle name defines which set of fields are attached to the entity (e.g. what nodes call &quot;content type&quot;). This entry can be omitted if this entity type exposes a single bundle (all entities have the same collection of fields). The name of this single bundle will be the same as the entity type.</para></listitem><listitem><para>label: The name of the property that contains the entity label. For example, if the entity&apos;s label is located in $entity-&gt;subject, then &apos;subject&apos; should be specified here. If complex logic is required to build the label, a &apos;label callback&apos; should be defined instead (see the &apos;label callback&apos; section above for details).</para></listitem></itemizedlist>
</para></listitem><listitem><para>bundle keys: An array describing how the Field API can extract the information it needs from the bundle objects for this type. This entry is required if the &apos;path&apos; provided in the &apos;bundles&apos;/&apos;admin&apos; section identifies the bundle using a named menu placeholder whose loader callback returns an object (e.g., $vocabulary for taxonomy terms, or $node_type for nodes). If the path does not include the bundle, or the bundle is just a string rather than an automatically loaded object, then this can be omitted. Elements:<itemizedlist>
<listitem><para>bundle: The name of the property of the bundle object that contains the name of the bundle object.</para></listitem></itemizedlist>
</para></listitem><listitem><para>bundles: An array describing all bundles for this object type. Keys are bundles machine names, as found in the objects&apos; &apos;bundle&apos; property (defined in the &apos;entity keys&apos; entry above). Elements:<itemizedlist>
<listitem><para>label: The human-readable name of the bundle.</para></listitem><listitem><para>uri callback: Same as the &apos;uri callback&apos; key documented above for the entity type, but for the bundle only. When determining the URI of an entity, if a &apos;uri callback&apos; is defined for both the entity type and the bundle, the one for the bundle is used.</para></listitem><listitem><para>admin: An array of information that allows Field UI pages to attach themselves to the existing administration pages for the bundle. Elements:<itemizedlist>
<listitem><para>path: the path of the bundle&apos;s main administration page, as defined in <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref>. If the path includes a placeholder for the bundle, the &apos;bundle argument&apos; and &apos;real path&apos; keys below are required.</para></listitem><listitem><para>bundle argument: The position of the bundle placeholder in &apos;path&apos;, if any.</para></listitem><listitem><para>real path: The actual path (no placeholder) of the bundle&apos;s main administration page. This will be used to generate links.</para></listitem><listitem><para>access callback: As in <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref>. &apos;user_access&apos; will be assumed if no value is provided.</para></listitem><listitem><para>access arguments: As in <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref>.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem><listitem><para>view modes: An array describing the view modes for the entity type. View modes let entities be displayed differently depending on the context. For instance, a node can be displayed differently on its own page (&apos;full&apos; mode), on the home page or taxonomy listings (&apos;teaser&apos; mode), or in an RSS feed (&apos;rss&apos; mode). Modules taking part in the display of the entity (notably the Field API) can adjust their behavior depending on the requested view mode. An additional &apos;default&apos; view mode is available for all entity types. This view mode is not intended for actual entity display, but holds default display settings. For each available view mode, administrators can configure whether it should use its own set of field display settings, or just replicate the settings of the &apos;default&apos; view mode, thus reducing the amount of display configurations to keep track of. Keys of the array are view mode names. Each view mode is described by an array with the following key/value pairs:<itemizedlist>
<listitem><para>label: The human-readable name of the view mode</para></listitem><listitem><para>custom settings: A boolean specifying whether the view mode should by default use its own custom field display settings. If FALSE, entities displayed in this view mode will reuse the &apos;default&apos; display settings by default (e.g. right after the module exposing the view mode is enabled), but administrators can later use the Field UI to apply custom display settings specific to the view mode.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="common_8inc_1a78b89cf93f9710a68d02f86adccf1898" kindref="member">entity_load()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga0394a72e4872603e91ce22440195ab45" kindref="member">hook_entity_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="182" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="182" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga0394a72e4872603e91ce22440195ab45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_info_alter</definition>
        <argsstring>(&amp;$entity_info)</argsstring>
        <name>hook_entity_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>entity_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the entity info.</para><para>Modules may implement this hook to alter the information that defines an entity. All properties that are available in <ref refid="group__hooks_1gaf02318e9d0e8cdbf6d187b271b9969a8" kindref="member">hook_entity_info()</ref> can be altered here.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$entity_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity info array, keyed by entity name.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gaf02318e9d0e8cdbf6d187b271b9969a8" kindref="member">hook_entity_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="264" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga1f594647c8cbb27f75b77cc4118da8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_load</definition>
        <argsstring>($entities, $type)</argsstring>
        <name>hook_entity_load</name>
        <param>
          <type>$</type>
          <declname>entities</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on entities when loaded.</para><para>This is a generic load hook called for all entity types loaded via the entity API.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$entities</parametername>
</parameternamelist>
<parameterdescription>
<para>The entities keyed by entity ID. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of entities being loaded (i.e. node, user, comment). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="281" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="281" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga1837f8059e89f6b0c00826f3e06e24f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_presave</definition>
        <argsstring>($entity, $type)</argsstring>
        <name>hook_entity_presave</name>
        <param>
          <type>$</type>
          <declname>entity</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on an entity before it is about to be created or updated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$entity</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of entity being saved (i.e. node, user, comment). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="295" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="295" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga38882255a4252e0e87d77ecd9c75a0dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_insert</definition>
        <argsstring>($entity, $type)</argsstring>
        <name>hook_entity_insert</name>
        <param>
          <type>$</type>
          <declname>entity</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on entities when inserted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$entity</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of entity being inserted (i.e. node, user, comment). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="307" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="307" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4b7c83c8b2e4f3719327ae794d0964ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_update</definition>
        <argsstring>($entity, $type)</argsstring>
        <name>hook_entity_update</name>
        <param>
          <type>$</type>
          <declname>entity</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on entities when updated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$entity</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of entity being updated (i.e. node, user, comment). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="329" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="329" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gac329b7f9d18e7fbccb6057e6f4bc4cb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_delete</definition>
        <argsstring>($entity, $type)</argsstring>
        <name>hook_entity_delete</name>
        <param>
          <type>$</type>
          <declname>entity</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on entities when deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$entity</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of entity being deleted (i.e. node, user, comment). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="350" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="350" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga22d97ef7297e17697cdaa8b32483f412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_query_alter</definition>
        <argsstring>($query)</argsstring>
        <name>hook_entity_query_alter</name>
        <param>
          <type>$</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter or execute an <ref refid="class_entity_field_query" kindref="compound">EntityFieldQuery</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype><ref refid="class_entity_field_query" kindref="compound">EntityFieldQuery</ref></parametertype>
<parametername>$query</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="class_entity_field_query" kindref="compound">EntityFieldQuery</ref>. One of the most important properties to be changed is EntityFieldQuery::executeCallback. If this is set to an existing function, this function will get the query as its single argument and its result will be the returned as the result of <ref refid="class_entity_field_query_1a1909f4b7f8129c7790cb75de2ffbe1e4" kindref="member">EntityFieldQuery::execute()</ref>. This can be used to change the behavior of <ref refid="class_entity_field_query" kindref="compound">EntityFieldQuery</ref> entirely. For example, the default implementation can only deal with one field storage engine, but it is possible to write a module that can query across field storage engines. Also, the default implementation presumes entities are stored in SQL, but the execute callback could instead query any other entity storage, local or remote.</para></parameterdescription>
</parameteritem>
</parameterlist>
Note the $query-&gt;altered attribute which is TRUE in case the query has already been altered once. This happens with cloned queries. If there is a pager, then such a cloned query will be executed to count all elements. This query can be detected by checking for ($query-&gt;pager &amp;&amp; $query-&gt;count), allowing the driver to return 0 from the count query and disable the pager. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="382" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="382" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gae273ba271c2ef1192fe135afa9da5d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_view</definition>
        <argsstring>($entity, $type, $view_mode, $langcode)</argsstring>
        <name>hook_entity_view</name>
        <param>
          <type>$</type>
          <declname>entity</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <param>
          <type>$</type>
          <declname>view_mode</declname>
        </param>
        <param>
          <type>$</type>
          <declname>langcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on entities being assembled before rendering.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$entity</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of entity being rendered (i.e. node, user, comment). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$view_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The view mode the entity is rendered in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$langcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The language code used for rendering.</para></parameterdescription>
</parameteritem>
</parameterlist>
The module may add elements to $entity-&gt;content prior to rendering. The structure of $entity-&gt;content is a renderable array as expected by <ref refid="common_8inc_1a05798b44e8d6c496d4bee5cc32fa7851" kindref="member">drupal_render()</ref>.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga2c2be6c70815b426f0eb13b0b68edb40" kindref="member">hook_entity_view_alter()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gab162cbd3dc1b0395011df47ca3f98aa3" kindref="member">hook_comment_view()</ref> </para><simplesectsep/><para><ref refid="group__node__api__hooks_1ga475290ee8e81a2373ea17c512cc3f9a9" kindref="member">hook_node_view()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaafb9e35d1f82a33918437ad7acf29541" kindref="member">hook_user_view()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="407" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="407" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2c2be6c70815b426f0eb13b0b68edb40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_view_alter</definition>
        <argsstring>(&amp;$build, $type)</argsstring>
        <name>hook_entity_view_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>build</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the results of ENTITY_view().</para><para>This hook is called after the content has been assembled in a structured array and may be used for doing processing which requires that the complete entity content structure has been built.</para><para>If a module wishes to act on the rendered HTML of the entity rather than the structured content array, it may use this hook to add a #post_render callback. Alternatively, it could also implement hook_preprocess_ENTITY(). See <ref refid="common_8inc_1a05798b44e8d6c496d4bee5cc32fa7851" kindref="member">drupal_render()</ref> and <ref refid="includes_2theme_8inc_1a7c25609a935874541a19657affd30fff" kindref="member">theme()</ref> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$build</parametername>
</parameternamelist>
<parameterdescription>
<para>A renderable array representing the entity content. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of entity being rendered (i.e. node, user, comment).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gae273ba271c2ef1192fe135afa9da5d49" kindref="member">hook_entity_view()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga092d794b204b6db107a5f763ac1be659" kindref="member">hook_comment_view_alter()</ref> </para><simplesectsep/><para><ref refid="group__node__api__hooks_1gad5ece824736be57bf0020af900398b94" kindref="member">hook_node_view_alter()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gad02862e477fbc925f70a7f91d2916820" kindref="member">hook_taxonomy_term_view_alter()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga31a81ec1419afc31ebb77a9a86afe754" kindref="member">hook_user_view_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="438" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="438" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3fe6d93afc8bb04afbd9e3c326d1bdc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_admin_paths</definition>
        <argsstring>()</argsstring>
        <name>hook_admin_paths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define administrative paths.</para><para>Modules may specify whether or not the paths they define in <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref> are to be considered administrative. Other modules may use this information to display those pages differently (e.g. in a modal overlay, or in a different theme).</para><para>To change the administrative status of menu items defined in another module&apos;s <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref>, modules should implement <ref refid="group__hooks_1ga027fc321194ec7bbc226ed6aff587e68" kindref="member">hook_admin_paths_alter()</ref>.</para><para><simplesect kind="return"><para>An associative array. For each item, the key is the path in question, in a format acceptable to <ref refid="path_8inc_1a1299e390360982cc8fbebe06f0232e18" kindref="member">drupal_match_path()</ref>. The value for each item should be TRUE (for paths considered administrative) or FALSE (for non- administrative paths).</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref> </para><simplesectsep/><para><ref refid="path_8inc_1a1299e390360982cc8fbebe06f0232e18" kindref="member">drupal_match_path()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga027fc321194ec7bbc226ed6aff587e68" kindref="member">hook_admin_paths_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="469" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="469" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga027fc321194ec7bbc226ed6aff587e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_admin_paths_alter</definition>
        <argsstring>(&amp;$paths)</argsstring>
        <name>hook_admin_paths_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Redefine administrative paths defined by other modules.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$paths</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array of administrative paths, as defined by implementations of <ref refid="group__hooks_1ga3fe6d93afc8bb04afbd9e3c326d1bdc1" kindref="member">hook_admin_paths()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga3fe6d93afc8bb04afbd9e3c326d1bdc1" kindref="member">hook_admin_paths()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="486" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="486" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga7e60ef817e60b20497bda315d2f30163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_entity_prepare_view</definition>
        <argsstring>($entities, $type, $langcode)</argsstring>
        <name>hook_entity_prepare_view</name>
        <param>
          <type>$</type>
          <declname>entities</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <param>
          <type>$</type>
          <declname>langcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on entities as they are being prepared for view.</para><para>Allows you to operate on multiple entities as they are being prepared for view. Only use this if attaching the data during the <ref refid="common_8inc_1a78b89cf93f9710a68d02f86adccf1898" kindref="member">entity_load()</ref> phase is not appropriate, for example when attaching other &apos;entity&apos; style objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$entities</parametername>
</parameternamelist>
<parameterdescription>
<para>The entities keyed by entity ID. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of entities being loaded (i.e. node, user, comment). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$langcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The language to display the entity in. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="508" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="508" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf07f1e3d98112fc2ba6920cf7ee6fb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_cron</definition>
        <argsstring>()</argsstring>
        <name>hook_cron</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform periodic actions.</para><para>Modules that require some commands to be executed periodically can implement <ref refid="group__hooks_1gaf07f1e3d98112fc2ba6920cf7ee6fb16" kindref="member">hook_cron()</ref>. The engine will then call the hook whenever a cron run happens, as defined by the administrator. Typical tasks managed by <ref refid="group__hooks_1gaf07f1e3d98112fc2ba6920cf7ee6fb16" kindref="member">hook_cron()</ref> are database maintenance, backups, recalculation of settings or parameters, automated mailing, and retrieving remote data.</para><para>Short-running or non-resource-intensive tasks can be executed directly in the <ref refid="group__hooks_1gaf07f1e3d98112fc2ba6920cf7ee6fb16" kindref="member">hook_cron()</ref> implementation.</para><para>Long-running tasks and tasks that could time out, such as retrieving remote data, sending email, and intensive file tasks, should use the queue API instead of executing the tasks directly. To do this, first define one or more queues via <ref refid="group__hooks_1gae161ed78fd5e8775ffc9264346a64320" kindref="member">hook_cron_queue_info()</ref>. Then, add items that need to be processed to the defined queues. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="536" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="536" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gae161ed78fd5e8775ffc9264346a64320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_cron_queue_info</definition>
        <argsstring>()</argsstring>
        <name>hook_cron_queue_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare queues holding items that need to be run periodically.</para><para>While there can be only one <ref refid="group__hooks_1gaf07f1e3d98112fc2ba6920cf7ee6fb16" kindref="member">hook_cron()</ref> process running at the same time, there can be any number of processes defined here running. Because of this, long running tasks are much better suited for this API. Items queued in <ref refid="group__hooks_1gaf07f1e3d98112fc2ba6920cf7ee6fb16" kindref="member">hook_cron()</ref> might be processed in the same cron run if there are not many items in the queue, otherwise it might take several requests, which can be run in parallel.</para><para><simplesect kind="return"><para>An associative array where the key is the queue name and the value is again an associative array. Possible keys are:<itemizedlist>
<listitem><para>&apos;worker callback&apos;: The name of the function to call. It will be called with one argument, the item created via DrupalQueue::createItem() in <ref refid="group__hooks_1gaf07f1e3d98112fc2ba6920cf7ee6fb16" kindref="member">hook_cron()</ref>.</para></listitem><listitem><para>&apos;time&apos;: (optional) How much time Drupal should spend on calling this worker in seconds. Defaults to 15.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1gaf07f1e3d98112fc2ba6920cf7ee6fb16" kindref="member">hook_cron()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gac9c5a8cc07a343c560e5ffac4a7de41f" kindref="member">hook_cron_queue_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="579" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="579" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gac9c5a8cc07a343c560e5ffac4a7de41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_cron_queue_info_alter</definition>
        <argsstring>(&amp;$queues)</argsstring>
        <name>hook_cron_queue_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>queues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter cron queue information before cron runs.</para><para>Called by <ref refid="common_8inc_1a1d4a4362b30215023a7120b627a9fd4f" kindref="member">drupal_cron_run()</ref> to allow modules to alter cron queue settings before any jobs are processesed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>array</parametertype>
<parametername>$queues</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of cron queue information.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gae161ed78fd5e8775ffc9264346a64320" kindref="member">hook_cron_queue_info()</ref> </para><simplesectsep/><para><ref refid="common_8inc_1a1d4a4362b30215023a7120b627a9fd4f" kindref="member">drupal_cron_run()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="599" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="599" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3c5182432eddc82f8b7845e66a365d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_element_info</definition>
        <argsstring>()</argsstring>
        <name>hook_element_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows modules to declare their own Forms API element types and specify their default values.</para><para>This hook allows modules to declare their own form element types and to specify their default values. The values returned by this hook will be merged with the elements returned by <ref refid="group__node__api__hooks_1ga52618ef4643a60878dd5a76ff9bbff30" kindref="member">hook_form()</ref> implementations and so can return defaults for any Form APIs keys in addition to those explicitly mentioned below.</para><para>Each of the form element types defined by this hook is assumed to have a matching theme function, e.g. theme_elementtype(), which should be registered with <ref refid="group__hooks_1ga013ccb45c7aaab1c16cf9691428c910d" kindref="member">hook_theme()</ref> as normal.</para><para>For more information about custom element types see the explanation at <ulink url="http://drupal.org/node/169815.">http://drupal.org/node/169815.</ulink></para><para><simplesect kind="return"><para>An associative array describing the element types being defined. The array contains a sub-array for each element type, with the machine-readable type name as the key. Each sub-array has a number of possible attributes:<itemizedlist>
<listitem><para>&quot;#input&quot;: boolean indicating whether or not this element carries a value (even if it&apos;s hidden).</para></listitem><listitem><para>&quot;#process&quot;: array of callback functions taking $element, $form_state, and $complete_form.</para></listitem><listitem><para>&quot;#after_build&quot;: array of callback functions taking $element and $form_state.</para></listitem><listitem><para>&quot;#validate&quot;: array of callback functions taking $form and $form_state.</para></listitem><listitem><para>&quot;#element_validate&quot;: array of callback functions taking $element and $form_state.</para></listitem><listitem><para>&quot;#pre_render&quot;: array of callback functions taking $element and $form_state.</para></listitem><listitem><para>&quot;#post_render&quot;: array of callback functions taking $element and $form_state.</para></listitem><listitem><para>&quot;#submit&quot;: array of callback functions taking $form and $form_state.</para></listitem><listitem><para>&quot;#title_display&quot;: optional string indicating if and how #title should be displayed, see <ref refid="group__themeable_1gafa399c53da3c042edf3863f222d036aa" kindref="member">theme_form_element()</ref> and <ref refid="group__themeable_1gaf3ba527e41db52bfb82c3fc42207540d" kindref="member">theme_form_element_label()</ref>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1gaf83b34170f31d93a7cfed56afa60007a" kindref="member">hook_element_info_alter()</ref> </para><simplesectsep/><para>system_element_info() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="643" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="643" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf83b34170f31d93a7cfed56afa60007a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_element_info_alter</definition>
        <argsstring>(&amp;$type)</argsstring>
        <name>hook_element_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the element type information returned from modules.</para><para>A module may implement this hook in order to alter the element type defaults defined by a module.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>All element type defaults as collected by <ref refid="group__hooks_1ga3c5182432eddc82f8b7845e66a365d51" kindref="member">hook_element_info()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga3c5182432eddc82f8b7845e66a365d51" kindref="member">hook_element_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="661" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="661" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaab945bbc2e651510aee460dcc8691366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_exit</definition>
        <argsstring>($destination=NULL)</argsstring>
        <name>hook_exit</name>
        <param>
          <type>$</type>
          <declname>destination</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform cleanup tasks.</para><para>This hook is run at the end of each page request. It is often used for page logging and specialized cleanup. This hook MUST NOT print anything.</para><para>Only use this hook if your code must run even for cached page views. If you have code which must run once on all non cached pages, use hook_init instead. Thats the usual case. If you implement this hook and see an error like &apos;Call to undefined function&apos;, it is likely that you are depending on the presence of a module which has not been loaded yet. It is not loaded because Drupal is still in bootstrap mode.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$destination</parametername>
</parameternamelist>
<parameterdescription>
<para>If this hook is invoked as part of a <ref refid="group__http__handling_1ga5b68d7a934713d1d623b2b32a732235d" kindref="member">drupal_goto()</ref> call, then this argument will be a fully-qualified URL that is the destination of the redirect. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="685" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="685" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4e6dc7148292e5d6ce1754927a5ff06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_js_alter</definition>
        <argsstring>(&amp;$javascript)</argsstring>
        <name>hook_js_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>javascript</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform necessary alterations to the JavaScript before it is presented on the page.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$javascript</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of all JavaScript being presented on the page.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="common_8inc_1a623370a2c3c2de0390dab078d17dca02" kindref="member">drupal_add_js()</ref> </para><simplesectsep/><para><ref refid="common_8inc_1ac4d279ffd40eae67ace8459cd3e6e3b5" kindref="member">drupal_get_js()</ref> </para><simplesectsep/><para><ref refid="common_8inc_1a55203a07884e02b18a3be2a630c3fab3" kindref="member">drupal_js_defaults()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="703" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="703" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga6bf3f83fa2e373836f5aa78fd143d1cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_library</definition>
        <argsstring>()</argsstring>
        <name>hook_library</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers JavaScript/CSS libraries associated with a module.</para><para>Modules implementing this return an array of arrays. The key to each sub-array is the machine readable name of the library. Each library may contain the following items:</para><para><itemizedlist>
<listitem><para>&apos;title&apos;: The human readable name of the library.</para></listitem><listitem><para>&apos;website&apos;: The URL of the library&apos;s web site.</para></listitem><listitem><para>&apos;version&apos;: A string specifying the version of the library; intentionally not a float because a version like &quot;1.2.3&quot; is not a valid float. Use PHP&apos;s version_compare() to compare different versions.</para></listitem><listitem><para>&apos;js&apos;: An array of JavaScript elements; each element&apos;s key is used as $data argument, each element&apos;s value is used as $options array for <ref refid="common_8inc_1a623370a2c3c2de0390dab078d17dca02" kindref="member">drupal_add_js()</ref>. To add library-specific (not module-specific) JavaScript settings, the key may be skipped, the value must specify &apos;type&apos; =&gt; &apos;setting&apos;, and the actual settings must be contained in a &apos;data&apos; element of the value.</para></listitem><listitem><para>&apos;css&apos;: Like &apos;js&apos;, an array of CSS elements passed to <ref refid="common_8inc_1a2c5bb2667efb44b02f1a105c0bfdebe5" kindref="member">drupal_add_css()</ref>.</para></listitem><listitem><para>&apos;dependencies&apos;: An array of libraries that are required for a library. Each element is an array listing the module and name of another library. Note that all dependencies for each dependent library will also be added when this library is added.</para></listitem></itemizedlist>
</para><para>Registered information for a library should contain re-usable data only. Module- or implementation-specific data and integration logic should be added separately.</para><para><simplesect kind="return"><para>An array defining libraries associated with a module.</para></simplesect>
<simplesect kind="see"><para>system_library() </para><simplesectsep/><para><ref refid="common_8inc_1a10d0b7349429391743b9ffc49b48908a" kindref="member">drupal_add_library()</ref> </para><simplesectsep/><para><ref refid="common_8inc_1aa535ac5edd443308d3b2812caf1a1b85" kindref="member">drupal_get_library()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="743" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="743" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga7256c50068666c9c02f43a08efcefae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_library_alter</definition>
        <argsstring>(&amp;$libraries, $module)</argsstring>
        <name>hook_library_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>libraries</declname>
        </param>
        <param>
          <type>$</type>
          <declname>module</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters the JavaScript/CSS library registry.</para><para>Allows certain, contributed modules to update libraries to newer versions while ensuring backwards compatibility. In general, such manipulations should only be done by designated modules, since most modules that integrate with a certain library also depend on the API of a certain library version.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$libraries</parametername>
</parameternamelist>
<parameterdescription>
<para>The JavaScript/CSS libraries provided by $module. Keyed by internal library name and passed by reference. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$module</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the module that registered the libraries.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga6bf3f83fa2e373836f5aa78fd143d1cd" kindref="member">hook_library()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="799" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="799" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5337e8bfa5713fb37c132f039c0169da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_css_alter</definition>
        <argsstring>(&amp;$css)</argsstring>
        <name>hook_css_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>css</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter CSS files before they are output on the page.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$css</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of all CSS items (files and inline CSS) being requested on the page.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="common_8inc_1a2c5bb2667efb44b02f1a105c0bfdebe5" kindref="member">drupal_add_css()</ref> </para><simplesectsep/><para><ref refid="common_8inc_1a2e308371f339fbb54967045ccbe4e88c" kindref="member">drupal_get_css()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="822" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="822" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga52f3fed51f62747155cfd2b373de4ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_ajax_render_alter</definition>
        <argsstring>($commands)</argsstring>
        <name>hook_ajax_render_alter</name>
        <param>
          <type>$</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the commands that are sent to the user through the Ajax framework.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$commands</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of all commands that will be sent to the user.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__ajax_1ga241c2426bdde049c55b05b7bf5d714a2" kindref="member">ajax_render()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="835" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="835" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga16d8d8ae818dc759bbe539e16ff5b93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_page_build</definition>
        <argsstring>(&amp;$page)</argsstring>
        <name>hook_page_build</name>
        <param>
          <type>&amp;$</type>
          <declname>page</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add elements to a page before it is rendered.</para><para>Use this hook when you want to add elements at the page level. For your additions to be printed, they have to be placed below a top level array key of the $page array that has the name of a region of the active theme.</para><para>By default, valid region keys are &apos;page_top&apos;, &apos;header&apos;, &apos;sidebar_first&apos;, &apos;content&apos;, &apos;sidebar_second&apos; and &apos;page_bottom&apos;. To get a list of all regions of the active theme, use system_region_list($theme). Note that $theme is a global variable.</para><para>If you want to alter the elements added by other modules or if your module depends on the elements of other modules, use <ref refid="group__hooks_1gaa965aa8f38b48aed1a19c556c199145f" kindref="member">hook_page_alter()</ref> instead which runs after this hook.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$page</parametername>
</parameternamelist>
<parameterdescription>
<para>Nested array of renderable elements that make up the page.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gaa965aa8f38b48aed1a19c556c199145f" kindref="member">hook_page_alter()</ref> </para><simplesectsep/><para><ref refid="common_8inc_1ad85d021b660f070849ed7c215d9758fe" kindref="member">drupal_render_page()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="862" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="862" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga452b92c6bb89d61eefe0a86430c62d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_get_item_alter</definition>
        <argsstring>(&amp;$router_item, $path, $original_map)</argsstring>
        <name>hook_menu_get_item_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>router_item</declname>
        </param>
        <param>
          <type>$</type>
          <declname>path</declname>
        </param>
        <param>
          <type>$</type>
          <declname>original_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter a menu router item right after it has been retrieved from the database or cache.</para><para>This hook is invoked by <ref refid="group__menu_1ga855b1ca6ef9e44eb6107a2b9d0f581df" kindref="member">menu_get_item()</ref> and allows for run-time alteration of router information (page_callback, title, and so on) before it is translated and checked for access. The passed-in $router_item is statically cached for the current request, so this hook is only invoked once for any router item that is retrieved via <ref refid="group__menu_1ga855b1ca6ef9e44eb6107a2b9d0f581df" kindref="member">menu_get_item()</ref>.</para><para>Usually, modules will only want to inspect the router item and conditionally perform other actions (such as preparing a state for the current request). Note that this hook is invoked for any router item that is retrieved by <ref refid="group__menu_1ga855b1ca6ef9e44eb6107a2b9d0f581df" kindref="member">menu_get_item()</ref>, which may or may not be called on the path itself, so implementations should check the $path parameter if the alteration should fire for the current request only.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$router_item</parametername>
</parameternamelist>
<parameterdescription>
<para>The menu router item for $path. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>The originally passed path, for which $router_item is responsible. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$original_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The path argument map, as contained in $path.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__menu_1ga855b1ca6ef9e44eb6107a2b9d0f581df" kindref="member">menu_get_item()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="897" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="897" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5c95244fea59b25666e409759e133ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu</definition>
        <argsstring>()</argsstring>
        <name>hook_menu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define menu items and page callbacks.</para><para>This hook enables modules to register paths in order to define how URL requests are handled. Paths may be registered for URL handling only, or they can register a link to be placed in a menu (usually the Navigation menu). A path and its associated information is commonly called a &quot;menu router item&quot;. This hook is rarely called (for example, when modules are enabled), and its results are cached in the database.</para><para><ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref> implementations return an associative array whose keys define paths and whose values are an associative array of properties for each path. (The complete list of properties is in the return value section below.)</para><para>The definition for each path may include a page callback function, which is invoked when the registered path is requested. If there is no other registered path that fits the requested path better, any further path components are passed to the callback function. For example, your module could register path &apos;abc/def&apos;: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>function<sp/>mymodule_menu()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>$items[</highlight><highlight class="stringliteral">&apos;abc/def&apos;</highlight><highlight class="normal">]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;page<sp/>callback&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;mymodule_abc_view&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>$items;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>function<sp/>mymodule_abc_view($ghi<sp/>=<sp/>0,<sp/>$jkl<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> When path &apos;abc/def&apos; is requested, no further path components are in the request, and no additional arguments are passed to the callback function (so $ghi and $jkl would take the default values as defined in the function signature). When &apos;abc/def/123/foo&apos; is requested, $ghi will be &apos;123&apos; and $jkl will be &apos;foo&apos;. Note that this automatic passing of optional path arguments applies only to page and theme callback functions.</para><para>In addition to optional path arguments, the page callback and other callback functions may specify argument lists as arrays. These argument lists may contain both fixed/hard-coded argument values and integers that correspond to path components. When integers are used and the callback function is called, the corresponding path components will be substituted for the integers. That is, the integer 0 in an argument list will be replaced with the first path component, integer 1 with the second, and so on (path components are numbered starting from zero). This substitution feature allows you to re-use a callback function for several different paths. For example: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>function<sp/>mymodule_menu()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>$items[</highlight><highlight class="stringliteral">&apos;abc/def&apos;</highlight><highlight class="normal">]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;page<sp/>callback&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;mymodule_abc_view&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;page<sp/>arguments&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>array(1,<sp/></highlight><highlight class="stringliteral">&apos;foo&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>$items;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> When path &apos;abc/def&apos; is requested, the page callback function will get &apos;def&apos; as the first argument and (always) &apos;foo&apos; as the second argument.</para><para>Note that if a page or theme callback function has an argument list array, these arguments will be passed first to the function, followed by any any arguments generated by optional path arguments as described above.</para><para>Special care should be taken for the page callback <ref refid="group__form__api_1ga720df81a837b06dfe19daf1c1eea3437" kindref="member">drupal_get_form()</ref>, because your specific form callback function will always receive $form and &amp;$form_state as the first function arguments: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>function<sp/>mymodule_abc_form($form,<sp/>&amp;$form_state)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>$form;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> See <ref refid="group__form__api" kindref="compound">Form API documentation </ref> for details.</para><para>Wildcards within paths also work with integer substitution. For example, your module could register path &apos;my-module//edit&apos;: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>$items[</highlight><highlight class="stringliteral">&apos;my-module/%/edit&apos;</highlight><highlight class="normal">]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;page<sp/>callback&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;mymodule_abc_edit&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;page<sp/>arguments&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>array(1),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
</programlisting> When path &apos;my-module/foo/edit&apos; is requested, integer 1 will be replaced with &apos;foo&apos; and passed to the callback function.</para><para>Registered paths may also contain special &quot;auto-loader&quot; wildcard components in the form of &apos;mymodule_abc&apos;, where the &apos;&apos; part means that this path component is a wildcard, and the &apos;mymodule_abc&apos; part defines the prefix for a load function, which here would be named mymodule_abc_load(). When a matching path is requested, your load function will receive as its first argument the path component in the position of the wildcard; load functions may also be passed additional arguments (see &quot;load arguments&quot; in the return value section below). For example, your module could register path &apos;my-module/mymodule_abc/edit&apos;: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>$items[</highlight><highlight class="stringliteral">&apos;my-module/%mymodule_abc/edit&apos;</highlight><highlight class="normal">]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;page<sp/>callback&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;mymodule_abc_edit&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;page<sp/>arguments&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>array(1),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
</programlisting> When path &apos;my-module/123/edit&apos; is requested, your load function mymodule_abc_load() will be invoked with the argument &apos;123&apos;, and should load and return an &quot;abc&quot; object with internal id 123: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>function<sp/>mymodule_abc_load($abc_id)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__database_1gafa3b6cb2b2f61479cc63a4150c62da9b" kindref="member">db_query</ref>(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>*<sp/>FROM<sp/>{mymodule_abc}<sp/>WHERE<sp/>abc_id<sp/>=<sp/>:abc_id&quot;</highlight><highlight class="normal">,<sp/>array(</highlight><highlight class="stringliteral">&apos;:abc_id&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>$abc_id))-&gt;fetchObject();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> This &apos;abc&apos; object will then be passed into the page callback function mymodule_abc_edit() to replace the integer 1 in the page arguments.</para><para>You can also make groups of menu items to be rendered (by default) as tabs on a page. To do that, first create one menu item of type MENU_NORMAL_ITEM, with your chosen path, such as &apos;foo&apos;. Then duplicate that menu item, using a subdirectory path, such as &apos;foo/tab1&apos;, and changing the type to MENU_DEFAULT_LOCAL_TASK to make it the default tab for the group. Then add the additional tab items, with paths such as &quot;foo/tab2&quot; etc., with type MENU_LOCAL_TASK. Example: <programlisting><codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>&quot;Foo<sp/>settings&quot;<sp/>appear<sp/>on<sp/>the<sp/>admin<sp/>Config<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>$items[</highlight><highlight class="stringliteral">&apos;admin/config/foo&apos;</highlight><highlight class="normal">]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;title&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;Foo<sp/>settings&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/><ref refid="group__menu__item__types_1gac42144282c42a943b05511b38c451e4c" kindref="member">MENU_NORMAL_ITEM</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Page<sp/>callback,<sp/>etc.<sp/>need<sp/>to<sp/>be<sp/>added<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>&quot;Global<sp/>settings&quot;<sp/>the<sp/>main<sp/>tab<sp/>on<sp/>the<sp/>&quot;Foo<sp/>settings&quot;<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>$items[</highlight><highlight class="stringliteral">&apos;admin/config/foo/global&apos;</highlight><highlight class="normal">]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;title&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;Global<sp/>settings&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/><ref refid="group__menu__item__types_1ga251e324e062f2e4c703f51231c0d7dc5" kindref="member">MENU_DEFAULT_LOCAL_TASK</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>callback,<sp/>page<sp/>callback,<sp/>and<sp/>theme<sp/>callback<sp/>will<sp/>be<sp/>inherited</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>&apos;admin/config/foo&apos;,<sp/>if<sp/>not<sp/>specified<sp/>here<sp/>to<sp/>override.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>an<sp/>additional<sp/>tab<sp/>called<sp/>&quot;Node<sp/>settings&quot;<sp/>on<sp/>&quot;Foo<sp/>settings&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>$items[</highlight><highlight class="stringliteral">&apos;admin/config/foo/node&apos;</highlight><highlight class="normal">]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;title&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;Node<sp/>settings&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/><ref refid="group__menu__item__types_1ga4dc67226400f237bd3c0a5ef7126008b" kindref="member">MENU_LOCAL_TASK</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Page<sp/>callback<sp/>and<sp/>theme<sp/>callback<sp/>will<sp/>be<sp/>inherited<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;admin/config/foo&apos;,<sp/>if<sp/>not<sp/>specified<sp/>here<sp/>to<sp/>override.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>add<sp/>access<sp/>callback<sp/>or<sp/>access<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>An array of menu items. Each menu item has a key corresponding to the Drupal path being registered. The corresponding array value is an associative array that may contain the following key-value pairs:<itemizedlist>
<listitem><para>&quot;title&quot;: Required. The untranslated title of the menu item.</para></listitem><listitem><para>&quot;title callback&quot;: Function to generate the title; defaults to t(). If you require only the raw string to be output, set this to FALSE.</para></listitem><listitem><para>&quot;title arguments&quot;: Arguments to send to t() or your custom callback, with path component substitution as described above.</para></listitem><listitem><para>&quot;description&quot;: The untranslated description of the menu item.</para></listitem><listitem><para>&quot;page callback&quot;: The function to call to display a web page when the user visits the path. If omitted, the parent menu item&apos;s callback will be used instead.</para></listitem><listitem><para>&quot;page arguments&quot;: An array of arguments to pass to the page callback function, with path component substitution as described above.</para></listitem><listitem><para>&quot;delivery callback&quot;: The function to call to package the result of the page callback function and send it to the browser. Defaults to <ref refid="common_8inc_1a05ab0d6e81d6cbe2a6b9f645b9e710ec" kindref="member">drupal_deliver_html_page()</ref> unless a value is inherited from a parent menu item. Note that this function is called even if the access checks fail, so any custom delivery callback function should take that into account. See <ref refid="common_8inc_1a05ab0d6e81d6cbe2a6b9f645b9e710ec" kindref="member">drupal_deliver_html_page()</ref> for an example.</para></listitem><listitem><para>&quot;access callback&quot;: A function returning TRUE if the user has access rights to this menu item, and FALSE if not. It can also be a boolean constant instead of a function, and you can also use numeric values (will be cast to boolean). Defaults to user_access() unless a value is inherited from the parent menu item; only MENU_DEFAULT_LOCAL_TASK items can inherit access callbacks. To use the user_access() default callback, you must specify the permission to check as &apos;access arguments&apos; (see below).</para></listitem><listitem><para>&quot;access arguments&quot;: An array of arguments to pass to the access callback function, with path component substitution as described above. If the access callback is inherited (see above), the access arguments will be inherited with it, unless overridden in the child menu item.</para></listitem><listitem><para>&quot;theme callback&quot;: (optional) A function returning the machine-readable name of the theme that will be used to render the page. If not provided, the value will be inherited from a parent menu item. If there is no theme callback, or if the function does not return the name of a current active theme on the site, the theme for this page will be determined by either <ref refid="group__hooks_1gab83dce4ef80bc5005ee0de98fc005b1f" kindref="member">hook_custom_theme()</ref> or the default theme instead. As a general rule, the use of theme callback functions should be limited to pages whose functionality is very closely tied to a particular theme, since they can only be overridden by modules which specifically target those pages in <ref refid="group__hooks_1ga4c37deddcf48dbfe6f3081df1652f6fa" kindref="member">hook_menu_alter()</ref>. Modules implementing more generic theme switching functionality (for example, a module which allows the theme to be set dynamically based on the current user&apos;s role) should use <ref refid="group__hooks_1gab83dce4ef80bc5005ee0de98fc005b1f" kindref="member">hook_custom_theme()</ref> instead.</para></listitem><listitem><para>&quot;theme arguments&quot;: An array of arguments to pass to the theme callback function, with path component substitution as described above.</para></listitem><listitem><para>&quot;file&quot;: A file that will be included before the page callback is called; this allows page callback functions to be in separate files. The file should be relative to the implementing module&apos;s directory unless otherwise specified by the &quot;file path&quot; option. Does not apply to other callbacks (only page callback).</para></listitem><listitem><para>&quot;file path&quot;: The path to the directory containing the file specified in &quot;file&quot;. This defaults to the path to the module implementing the hook.</para></listitem><listitem><para>&quot;load arguments&quot;: An array of arguments to be passed to each of the wildcard object loaders in the path, after the path argument itself. For example, if a module registers path node/node/revisions//view with load arguments set to array(3), the &apos;node&apos; in the path indicates that the loader function node_load() will be called with the second path component as the first argument. The 3 in the load arguments indicates that the fourth path component will also be passed to node_load() (numbering of path components starts at zero). So, if path node/12/revisions/29/view is requested, node_load(12, 29) will be called. There are also two &quot;magic&quot; values that can be used in load arguments. &quot;%index&quot; indicates the index of the wildcard path component. &quot;%map&quot; indicates the path components as an array. For example, if a module registers for several paths of the form &apos;user/user_category/edit/*&apos;, all of them can use the same load function user_category_load(), by setting the load arguments to array(&apos;map&apos;, &apos;index&apos;). For instance, if the user is editing category &apos;foo&apos; by requesting path &apos;user/32/edit/foo&apos;, the load function user_category_load() will be called with 32 as its first argument, the array (&apos;user&apos;, 32, &apos;edit&apos;, &apos;foo&apos;) as the map argument, and 1 as the index argument (because user_category is the second path component and numbering starts at zero). user_category_load() can then use these values to extract the information that &apos;foo&apos; is the category being requested.</para></listitem><listitem><para>&quot;weight&quot;: An integer that determines the relative position of items in the menu; higher-weighted items sink. Defaults to 0. Menu items with the same weight are ordered alphabetically.</para></listitem><listitem><para>&quot;menu_name&quot;: Optional. Set this to a custom menu if you don&apos;t want your item to be placed in Navigation.</para></listitem><listitem><para>&quot;context&quot;: (optional) Defines the context a tab may appear in. By default, all tabs are only displayed as local tasks when being rendered in a page context. All tabs that should be accessible as contextual links in page region containers outside of the parent menu item&apos;s primary page context should be registered using one of the following contexts:<itemizedlist>
<listitem><para>MENU_CONTEXT_PAGE: (default) The tab is displayed as local task for the page context only.</para></listitem><listitem><para>MENU_CONTEXT_INLINE: The tab is displayed as contextual link outside of the primary page context only. Contexts can be combined. For example, to display a tab both on a page and inline, a menu router item may specify: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;context&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/><ref refid="group__menu__context__types_1gaf4e86a5b19191e3dcad0257912df38cf" kindref="member">MENU_CONTEXT_PAGE</ref><sp/>|<sp/><ref refid="group__menu__context__types_1gad814d6900713af2b410c9d347462b923" kindref="member">MENU_CONTEXT_INLINE</ref>,</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para></listitem><listitem><para>&quot;tab_parent&quot;: For local task menu items, the path of the task&apos;s parent item; defaults to the same path without the last component (e.g., the default parent for &apos;admin/people/create&apos; is &apos;admin/people&apos;).</para></listitem><listitem><para>&quot;tab_root&quot;: For local task menu items, the path of the closest non-tab item; same default as &quot;tab_parent&quot;.</para></listitem><listitem><para>&quot;position&quot;: Position of the block (&apos;left&apos; or &apos;right&apos;) on the system administration page for this item.</para></listitem><listitem><para>&quot;type&quot;: A bitmask of flags describing properties of the menu item. Many shortcut bitmasks are provided as constants in menu.inc:<itemizedlist>
<listitem><para>MENU_NORMAL_ITEM: Normal menu items show up in the menu tree and can be moved/hidden by the administrator.</para></listitem><listitem><para>MENU_CALLBACK: Callbacks simply register a path so that the correct information is generated when the path is accessed.</para></listitem><listitem><para>MENU_SUGGESTED_ITEM: Modules may &quot;suggest&quot; menu items that the administrator may enable.</para></listitem><listitem><para>MENU_LOCAL_ACTION: Local actions are menu items that describe actions on the parent item such as adding a new user or block, and are rendered in the action-links list in your theme.</para></listitem><listitem><para>MENU_LOCAL_TASK: Local tasks are menu items that describe different displays of data, and are generally rendered as tabs.</para></listitem><listitem><para>MENU_DEFAULT_LOCAL_TASK: Every set of local tasks should provide one &quot;default&quot; task, which should display the same page as the parent item. If the &quot;type&quot; element is omitted, MENU_NORMAL_ITEM is assumed.</para></listitem></itemizedlist>
</para></listitem><listitem><para>&quot;options&quot;: An array of options to be passed to <ref refid="common_8inc_1ad3b36c06dc46250b8d22b8d0d2e7bd97" kindref="member">l()</ref> when generating a link from this menu item.</para></listitem></itemizedlist>
</para></simplesect>
For a detailed usage example, see page_example.module. For comprehensive documentation on the menu system, see <ulink url="http://drupal.org/node/102338.">http://drupal.org/node/102338.</ulink> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1173" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1173" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4c37deddcf48dbfe6f3081df1652f6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_alter</definition>
        <argsstring>(&amp;$items)</argsstring>
        <name>hook_menu_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the data being saved to the {menu_router} table after hook_menu is invoked.</para><para>This hook is invoked by <ref refid="group__menu_1ga1f6713b93173302fb29d7bc9578b7530" kindref="member">menu_router_build()</ref>. The menu definitions are passed in by reference. Each element of the $items array is one item returned by a module from hook_menu. Additional items may be added, or existing items altered.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$items</parametername>
</parameternamelist>
<parameterdescription>
<para>Associative array of menu router definitions returned from <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1201" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1201" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga53f6d87f599e7f585ca84a7e0874df81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_link_alter</definition>
        <argsstring>(&amp;$item)</argsstring>
        <name>hook_menu_link_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the data being saved to the {menu_links} table by <ref refid="group__menu_1ga4fe84fbe31b5a3b6c7fa43e8fe912fb0" kindref="member">menu_link_save()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$item</parametername>
</parameternamelist>
<parameterdescription>
<para>Associative array defining a menu link as passed into <ref refid="group__menu_1ga4fe84fbe31b5a3b6c7fa43e8fe912fb0" kindref="member">menu_link_save()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga5b5395b90c4987e29c6f6430fc066e8c" kindref="member">hook_translated_menu_link_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1214" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1214" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5b5395b90c4987e29c6f6430fc066e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_translated_menu_link_alter</definition>
        <argsstring>(&amp;$item, $map)</argsstring>
        <name>hook_translated_menu_link_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>item</declname>
        </param>
        <param>
          <type>$</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter a menu link after it has been translated and before it is rendered.</para><para>This hook is invoked from <ref refid="group__menu_1ga75bf09f752589011fc9256b041cf7cc0" kindref="member">_menu_link_translate()</ref> after a menu link has been translated; i.e., after dynamic path argument placeholders (%) have been replaced with actual values, the user access to the link&apos;s target page has been checked, and the link has been localized. It is only invoked if $item[&apos;options&apos;][&apos;alter&apos;] has been set to a non-empty value (e.g., TRUE). This flag should be set using <ref refid="group__hooks_1ga53f6d87f599e7f585ca84a7e0874df81" kindref="member">hook_menu_link_alter()</ref>.</para><para>Implementations of this hook are able to alter any property of the menu link. For example, this hook may be used to add a page-specific query string to all menu links, or hide a certain link by setting: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;hidden&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>1,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$item</parametername>
</parameternamelist>
<parameterdescription>
<para>Associative array defining a menu link after <ref refid="group__menu_1ga75bf09f752589011fc9256b041cf7cc0" kindref="member">_menu_link_translate()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$map</parametername>
</parameternamelist>
<parameterdescription>
<para>Associative array containing the menu $map (path parts and/or objects).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga53f6d87f599e7f585ca84a7e0874df81" kindref="member">hook_menu_link_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1255" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1255" bodyend="1259"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga834a576b88ca7a08ce1244469fabb116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_link_insert</definition>
        <argsstring>($link)</argsstring>
        <name>hook_menu_link_insert</name>
        <param>
          <type>$</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inform modules that a menu link has been created.</para><para>This hook is used to notify modules that menu items have been created. Contributed modules may use the information to perform actions based on the information entered into the menu system.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$link</parametername>
</parameternamelist>
<parameterdescription>
<para>Associative array defining a menu link as passed into <ref refid="group__menu_1ga4fe84fbe31b5a3b6c7fa43e8fe912fb0" kindref="member">menu_link_save()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gafd2d5cc2a49cf37a637201eb76a41d1d" kindref="member">hook_menu_link_update()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaf08037b21bd31aa8d2b12e988da7e2fb" kindref="member">hook_menu_link_delete()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1274" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1274" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gafd2d5cc2a49cf37a637201eb76a41d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_link_update</definition>
        <argsstring>($link)</argsstring>
        <name>hook_menu_link_update</name>
        <param>
          <type>$</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inform modules that a menu link has been updated.</para><para>This hook is used to notify modules that menu items have been updated. Contributed modules may use the information to perform actions based on the information entered into the menu system.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$link</parametername>
</parameternamelist>
<parameterdescription>
<para>Associative array defining a menu link as passed into <ref refid="group__menu_1ga4fe84fbe31b5a3b6c7fa43e8fe912fb0" kindref="member">menu_link_save()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga834a576b88ca7a08ce1244469fabb116" kindref="member">hook_menu_link_insert()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaf08037b21bd31aa8d2b12e988da7e2fb" kindref="member">hook_menu_link_delete()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1296" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1296" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf08037b21bd31aa8d2b12e988da7e2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_link_delete</definition>
        <argsstring>($link)</argsstring>
        <name>hook_menu_link_delete</name>
        <param>
          <type>$</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inform modules that a menu link has been deleted.</para><para>This hook is used to notify modules that menu items have been deleted. Contributed modules may use the information to perform actions based on the information entered into the menu system.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$link</parametername>
</parameternamelist>
<parameterdescription>
<para>Associative array defining a menu link as passed into <ref refid="group__menu_1ga4fe84fbe31b5a3b6c7fa43e8fe912fb0" kindref="member">menu_link_save()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga834a576b88ca7a08ce1244469fabb116" kindref="member">hook_menu_link_insert()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gafd2d5cc2a49cf37a637201eb76a41d1d" kindref="member">hook_menu_link_update()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1320" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1320" bodyend="1325"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gac828fb6b28f1a8bb01c444a9b2331f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_local_tasks_alter</definition>
        <argsstring>(&amp;$data, $router_item, $root_path)</argsstring>
        <name>hook_menu_local_tasks_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>data</declname>
        </param>
        <param>
          <type>$</type>
          <declname>router_item</declname>
        </param>
        <param>
          <type>$</type>
          <declname>root_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter tabs and actions displayed on the page before they are rendered.</para><para>This hook is invoked by <ref refid="group__menu_1gadb8bb3644e114166950142280085cf3e" kindref="member">menu_local_tasks()</ref>. The system-determined tabs and actions are passed in by reference. Additional tabs or actions may be added, or existing items altered.</para><para>Each tab or action is an associative array containing:<itemizedlist>
<listitem><para><ref refid="includes_2theme_8inc_1a7c25609a935874541a19657affd30fff" kindref="member">theme</ref>: The theme function to use to render.</para></listitem><listitem><para>#link: An associative array containing:<itemizedlist>
<listitem><para>title: The localized title of the link.</para></listitem><listitem><para>href: The system path to link to.</para></listitem><listitem><para>localized_options: An array of options to pass to <ref refid="common_8inc_1a43b2a0594431556db49df980801d8807" kindref="member">url()</ref>.</para></listitem></itemizedlist>
</para></listitem><listitem><para>#active: Whether the link should be marked as &apos;active&apos;.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$data</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing:<itemizedlist>
<listitem><para>actions: An associative array containing:<itemizedlist>
<listitem><para>count: The amount of actions determined by the menu system, which can be ignored.</para></listitem><listitem><para>output: A list of of actions, each one being an associative array as described above.</para></listitem></itemizedlist>
</para></listitem><listitem><para>tabs: An indexed array (list) of tab levels (up to 2 levels), each containing an associative array:<itemizedlist>
<listitem><para>count: The amount of tabs determined by the menu system. This value does not need to be altered if there is more than one tab.</para></listitem><listitem><para>output: A list of of tabs, each one being an associative array as described above. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$router_item</parametername>
</parameternamelist>
<parameterdescription>
<para>The menu system router item of the page. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$root_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the root item for this set of tabs. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1360" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1360" bodyend="1392"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5a6dd6ead08b6dab4fe1307eb599e34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_breadcrumb_alter</definition>
        <argsstring>(&amp;$active_trail, $item)</argsstring>
        <name>hook_menu_breadcrumb_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>active_trail</declname>
        </param>
        <param>
          <type>$</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter links in the active trail before it is rendered as the breadcrumb.</para><para>This hook is invoked by <ref refid="group__menu_1ga009731c4b3e736ebb620ba90e7f04207" kindref="member">menu_get_active_breadcrumb()</ref> and allows alteration of the breadcrumb links for the current page, which may be preferred instead of setting a custom breadcrumb via <ref refid="common_8inc_1a666113d06fa6ea461aff580e5c511eb0" kindref="member">drupal_set_breadcrumb()</ref>.</para><para>Implementations should take into account that <ref refid="group__menu_1ga009731c4b3e736ebb620ba90e7f04207" kindref="member">menu_get_active_breadcrumb()</ref> subsequently performs the following adjustments to the active trail *after* this hook has been invoked:<itemizedlist>
<listitem><para>The last link in $active_trail is removed, if its &apos;href&apos; is identical to the &apos;href&apos; of $item. This happens, because the breadcrumb normally does not contain a link to the current page.</para></listitem><listitem><para>The (second to) last link in $active_trail is removed, if the current $item is a MENU_DEFAULT_LOCAL_TASK. This happens in order to do not show a link to the current page, when being on the path for the default local task; e.g. when being on the path node//view, the breadcrumb should not contain a link to node/%.</para></listitem></itemizedlist>
</para><para>Each link in the active trail must contain:<itemizedlist>
<listitem><para>title: The localized title of the link.</para></listitem><listitem><para>href: The system path to link to.</para></listitem><listitem><para>localized_options: An array of options to pass to <ref refid="common_8inc_1a43b2a0594431556db49df980801d8807" kindref="member">url()</ref>.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$active_trail</parametername>
</parameternamelist>
<parameterdescription>
<para>An array containing breadcrumb links for the current page. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$item</parametername>
</parameternamelist>
<parameterdescription>
<para>The menu router item of the current page.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="common_8inc_1a666113d06fa6ea461aff580e5c511eb0" kindref="member">drupal_set_breadcrumb()</ref> </para><simplesectsep/><para><ref refid="group__menu_1ga009731c4b3e736ebb620ba90e7f04207" kindref="member">menu_get_active_breadcrumb()</ref> </para><simplesectsep/><para><ref refid="group__menu_1ga55105d602c5c5ea5b39aae25aa47f8c5" kindref="member">menu_get_active_trail()</ref> </para><simplesectsep/><para><ref refid="group__menu_1ga9328a9a4f297d8bb095d924e75a8abd7" kindref="member">menu_set_active_trail()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1428" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1428" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2731120f62502453acd650710f8252b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_contextual_links_alter</definition>
        <argsstring>(&amp;$links, $router_item, $root_path)</argsstring>
        <name>hook_menu_contextual_links_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>links</declname>
        </param>
        <param>
          <type>$</type>
          <declname>router_item</declname>
        </param>
        <param>
          <type>$</type>
          <declname>root_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter contextual links before they are rendered.</para><para>This hook is invoked by <ref refid="group__menu_1gad524d9a3415e24d27c7dbcb333d96cf8" kindref="member">menu_contextual_links()</ref>. The system-determined contextual links are passed in by reference. Additional links may be added or existing links can be altered.</para><para>Each contextual link must at least contain:<itemizedlist>
<listitem><para>title: The localized title of the link.</para></listitem><listitem><para>href: The system path to link to.</para></listitem><listitem><para>localized_options: An array of options to pass to <ref refid="common_8inc_1a43b2a0594431556db49df980801d8807" kindref="member">url()</ref>.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$links</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing contextual links for the given $root_path, as described above. The array keys are used to build CSS class names for contextual links and must therefore be unique for each set of contextual links. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$router_item</parametername>
</parameternamelist>
<parameterdescription>
<para>The menu router item belonging to the $root_path being requested. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$root_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The (parent) path that has been requested to build contextual links for. This is a normalized path, which means that an originally passed path of &apos;node/123&apos; became &apos;node/&apos;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga30ebdd98be1d239b608b769bda0ca9f0" kindref="member">hook_contextual_links_view_alter()</ref> </para><simplesectsep/><para><ref refid="group__menu_1gad524d9a3415e24d27c7dbcb333d96cf8" kindref="member">menu_contextual_links()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref> </para><simplesectsep/><para>contextual_preprocess() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1470" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1470" bodyend="1483"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaa965aa8f38b48aed1a19c556c199145f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_page_alter</definition>
        <argsstring>(&amp;$page)</argsstring>
        <name>hook_page_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>page</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations before a page is rendered.</para><para>Use this hook when you want to remove or alter elements at the page level, or add elements at the page level that depend on an other module&apos;s elements (this hook runs after <ref refid="group__hooks_1ga16d8d8ae818dc759bbe539e16ff5b93b" kindref="member">hook_page_build()</ref>.</para><para>If you are making changes to entities such as forms, menus, or user profiles, use those objects&apos; native alter hooks instead (<ref refid="group__hooks_1ga6df3cea27ae1407aeef4eae5444cb213" kindref="member">hook_form_alter()</ref>, for example).</para><para>The $page array contains top level elements for each block region: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;page_top&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;header&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;sidebar_first&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;content&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;sidebar_second&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;page_bottom&apos;</highlight><highlight class="normal">]</highlight></codeline>
</programlisting></para><para>The &apos;content&apos; element contains the main content of the current page, and its structure will vary depending on what module is responsible for building the page. Some legacy modules may not return structured content at all: their pre-rendered markup will be located in $page[&apos;content&apos;][&apos;main&apos;][&apos;#markup&apos;].</para><para>Pages built by Drupal&apos;s core Node and Blog modules use a standard structure:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Node<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;content&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;system_main&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;nodes&apos;</highlight><highlight class="normal">][$nid][</highlight><highlight class="stringliteral">&apos;body&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>links<sp/>attached<sp/>to<sp/>the<sp/>node<sp/>(add<sp/>comments,<sp/>read<sp/>more).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;content&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;system_main&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;nodes&apos;</highlight><highlight class="normal">][$nid][</highlight><highlight class="stringliteral">&apos;links&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>node<sp/>object<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;content&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;system_main&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;nodes&apos;</highlight><highlight class="normal">][$nid][</highlight><highlight class="stringliteral">&apos;#node&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>results<sp/>pager.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;content&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;system_main&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;pager&apos;</highlight><highlight class="normal">]</highlight></codeline>
</programlisting></para><para>Blocks may be referenced by their module/delta pair within a region: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>login<sp/>block<sp/>in<sp/>the<sp/>first<sp/>sidebar<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$page[</highlight><highlight class="stringliteral">&apos;sidebar_first&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;user_login&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;#block&apos;</highlight><highlight class="normal">];</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$page</parametername>
</parameternamelist>
<parameterdescription>
<para>Nested array of renderable elements that make up the page.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga16d8d8ae818dc759bbe539e16ff5b93b" kindref="member">hook_page_build()</ref> </para><simplesectsep/><para><ref refid="common_8inc_1ad85d021b660f070849ed7c215d9758fe" kindref="member">drupal_render_page()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1536" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1536" bodyend="1542"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga6df3cea27ae1407aeef4eae5444cb213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_form_alter</definition>
        <argsstring>(&amp;$form, &amp;$form_state, $form_id)</argsstring>
        <name>hook_form_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>form</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>form_state</declname>
        </param>
        <param>
          <type>$</type>
          <declname>form_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations before a form is rendered.</para><para>One popular use of this hook is to add form elements to the node form. When altering a node form, the node object can be accessed at $form[&apos;#node&apos;].</para><para>Note that instead of <ref refid="group__hooks_1ga6df3cea27ae1407aeef4eae5444cb213" kindref="member">hook_form_alter()</ref>, which is called for all forms, you can also use <ref refid="group__hooks_1ga8d4a4089551493d55911bd5c4f218264" kindref="member">hook_form_FORM_ID_alter()</ref> to alter a specific form. For each module (in system weight order) the general form alter hook implementation is invoked first, then the form ID specific alter implementation is called. After all module hook implementations are invoked, the <ref refid="group__hooks_1ga6df3cea27ae1407aeef4eae5444cb213" kindref="member">hook_form_alter()</ref> implementations from themes are invoked in the same manner.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>Nested array of form elements that comprise the form. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>A keyed array containing the current state of the form. The arguments that <ref refid="group__form__api_1ga720df81a837b06dfe19daf1c1eea3437" kindref="member">drupal_get_form()</ref> was originally called with are available in the array $form_state[&apos;build_info&apos;][&apos;args&apos;]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_id</parametername>
</parameternamelist>
<parameterdescription>
<para>String representing the name of the form itself. Typically this is the name of the function that generated the form.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga8d4a4089551493d55911bd5c4f218264" kindref="member">hook_form_FORM_ID_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1569" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1569" bodyend="1578"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga8d4a4089551493d55911bd5c4f218264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_form_FORM_ID_alter</definition>
        <argsstring>(&amp;$form, &amp;$form_state, $form_id)</argsstring>
        <name>hook_form_FORM_ID_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>form</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>form_state</declname>
        </param>
        <param>
          <type>$</type>
          <declname>form_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide a form-specific alteration instead of the global <ref refid="group__hooks_1ga6df3cea27ae1407aeef4eae5444cb213" kindref="member">hook_form_alter()</ref>.</para><para>Modules can implement <ref refid="group__hooks_1ga8d4a4089551493d55911bd5c4f218264" kindref="member">hook_form_FORM_ID_alter()</ref> to modify a specific form, rather than implementing <ref refid="group__hooks_1ga6df3cea27ae1407aeef4eae5444cb213" kindref="member">hook_form_alter()</ref> and checking the form ID, or using long switch statements to alter multiple forms.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>Nested array of form elements that comprise the form. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>A keyed array containing the current state of the form. The arguments that <ref refid="group__form__api_1ga720df81a837b06dfe19daf1c1eea3437" kindref="member">drupal_get_form()</ref> was originally called with are available in the array $form_state[&apos;build_info&apos;][&apos;args&apos;]. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_id</parametername>
</parameternamelist>
<parameterdescription>
<para>String representing the name of the form itself. Typically this is the name of the function that generated the form.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga6df3cea27ae1407aeef4eae5444cb213" kindref="member">hook_form_alter()</ref> </para><simplesectsep/><para><ref refid="group__form__api_1ga79309515217249c16c7e4a7117141120" kindref="member">drupal_prepare_form()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1600" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1600" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf0cfc224a88c8823da68856c30a4841a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_form_BASE_FORM_ID_alter</definition>
        <argsstring>(&amp;$form, &amp;$form_state, $form_id)</argsstring>
        <name>hook_form_BASE_FORM_ID_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>form</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>form_state</declname>
        </param>
        <param>
          <type>$</type>
          <declname>form_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide a form-specific alteration for shared forms.</para><para>Modules can implement <ref refid="group__hooks_1gaf0cfc224a88c8823da68856c30a4841a" kindref="member">hook_form_BASE_FORM_ID_alter()</ref> to modify a specific form belonging to multiple form_ids, rather than implementing <ref refid="group__hooks_1ga6df3cea27ae1407aeef4eae5444cb213" kindref="member">hook_form_alter()</ref> and checking for conditions that would identify the shared form constructor.</para><para>Examples for such forms are <ref refid="node_8pages_8inc_1a267299500e205db099ee4e8396769d3f" kindref="member">node_form()</ref> or comment_form().</para><para>Note that this hook fires after <ref refid="group__hooks_1ga8d4a4089551493d55911bd5c4f218264" kindref="member">hook_form_FORM_ID_alter()</ref> and before <ref refid="group__hooks_1ga6df3cea27ae1407aeef4eae5444cb213" kindref="member">hook_form_alter()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>Nested array of form elements that comprise the form. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>A keyed array containing the current state of the form. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_id</parametername>
</parameternamelist>
<parameterdescription>
<para>String representing the name of the form itself. Typically this is the name of the function that generated the form.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga8d4a4089551493d55911bd5c4f218264" kindref="member">hook_form_FORM_ID_alter()</ref> </para><simplesectsep/><para><ref refid="group__form__api_1ga79309515217249c16c7e4a7117141120" kindref="member">drupal_prepare_form()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1637" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1637" bodyend="1648"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaa764fee74b85797f75c0c923cad628d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_forms</definition>
        <argsstring>($form_id, $args)</argsstring>
        <name>hook_forms</name>
        <param>
          <type>$</type>
          <declname>form_id</declname>
        </param>
        <param>
          <type>$</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map form_ids to form builder functions.</para><para>By default, when <ref refid="group__form__api_1ga720df81a837b06dfe19daf1c1eea3437" kindref="member">drupal_get_form()</ref> is called, the system will look for a function with the same name as the form ID, and use that function to build the form. This hook allows you to override that behavior in two ways.</para><para>First, you can use this hook to tell the form system to use a different function to build certain forms in your module; this is often used to define a form &quot;factory&quot; function that is used to build several similar forms. In this case, your hook implementation will likely ignore all of the input arguments. See node_forms() for an example of this.</para><para>Second, you could use this hook to define how to build a form with a dynamically-generated form ID. In this case, you would need to verify that the $form_id input matched your module&apos;s format for dynamically-generated form IDs, and if so, act appropriately.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$form_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique string identifying the desired form. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$args</parametername>
</parameternamelist>
<parameterdescription>
<para>An array containing the original arguments provided to <ref refid="group__form__api_1ga720df81a837b06dfe19daf1c1eea3437" kindref="member">drupal_get_form()</ref> or <ref refid="group__form__api_1ga4312d7fe0602f6359153fc62cba1ca24" kindref="member">drupal_form_submit()</ref>. These are always passed to the form builder and do not have to be specified manually in &apos;callback arguments&apos;.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An associative array whose keys define form_ids and whose values are an associative array defining the following keys:<itemizedlist>
<listitem><para>callback: The name of the form builder function to invoke.</para></listitem><listitem><para>callback arguments: (optional) Additional arguments to pass to the function defined in &apos;callback&apos;, which are prepended to $args.</para></listitem><listitem><para>wrapper_callback: (optional) The name of a form builder function to invoke before the form builder defined in &apos;callback&apos; is invoked. This wrapper callback may prepopulate the $form array with form elements, which will then be already contained in the $form that is passed on to the form builder defined in &apos;callback&apos;. For example, a wrapper callback could setup wizard-alike form buttons that are the same for a variety of forms that belong to the wizard, which all share the same wrapper callback. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1690" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1690" bodyend="1713"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga9ac1dfffdc69471a3d00d67503c71577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_boot</definition>
        <argsstring>()</argsstring>
        <name>hook_boot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform setup tasks. See also, hook_init.</para><para>This hook is run at the beginning of the page request. It is typically used to set up global parameters which are needed later in the request.</para><para>Only use this hook if your code must run even for cached page views.This hook is called before modules or most include files are loaded into memory. It happens while Drupal is still in bootstrap mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1725" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1725" bodyend="1729"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga74edef0c463436fdbb1f92ef367db051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_init</definition>
        <argsstring>()</argsstring>
        <name>hook_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform setup tasks. See also, hook_boot.</para><para>This hook is run at the beginning of the page request. It is typically used to set up global parameters which are needed later in the request. when this hook is called, all modules are already loaded in memory.</para><para>This hook is not run on cached pages.</para><para>To add CSS or JS that should be present on all pages, modules should not implement this hook, but declare these files in their .info file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1743" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1743" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga9abe202036afcc6a3cc97ccc2c13ab29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_image_toolkits</definition>
        <argsstring>()</argsstring>
        <name>hook_image_toolkits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define image toolkits provided by this module.</para><para>The file which includes each toolkit&apos;s functions must be declared as part of the files array in the module .info file so that the registry will find and parse it.</para><para>The toolkit&apos;s functions must be named image_toolkitname_operation(). where the operation may be:<itemizedlist>
<listitem><para>&apos;load&apos;: Required. See <ref refid="group__image_1gaa3b2912916ff9cfec8c7c8df8f3f1d75" kindref="member">image_gd_load()</ref> for usage.</para></listitem><listitem><para>&apos;save&apos;: Required. See <ref refid="group__image_1ga840179ad0e5ef2ea7619de19cab2d225" kindref="member">image_gd_save()</ref> for usage.</para></listitem><listitem><para>&apos;settings&apos;: Optional. See <ref refid="group__image_1ga2a492c31e41c59af2b7e976e28886b15" kindref="member">image_gd_settings()</ref> for usage.</para></listitem><listitem><para>&apos;resize&apos;: Optional. See <ref refid="group__image_1ga8d0c1abb541e01ec7a76a57add14a0b2" kindref="member">image_gd_resize()</ref> for usage.</para></listitem><listitem><para>&apos;rotate&apos;: Optional. See <ref refid="group__image_1gadfe1dec9bcb15c4b223acc64f35631d2" kindref="member">image_gd_rotate()</ref> for usage.</para></listitem><listitem><para>&apos;crop&apos;: Optional. See <ref refid="group__image_1ga80d6e99f7b538e40dac6b917bfff1bb1" kindref="member">image_gd_crop()</ref> for usage.</para></listitem><listitem><para>&apos;desaturate&apos;: Optional. See <ref refid="group__image_1ga2cb8090035dbb1a1e6a9c82cb52c9789" kindref="member">image_gd_desaturate()</ref> for usage.</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>An array with the toolkit name as keys and sub-arrays with these keys:<itemizedlist>
<listitem><para>&apos;title&apos;: A string with the toolkit&apos;s title.</para></listitem><listitem><para>&apos;available&apos;: A Boolean value to indicate that the toolkit is operating properly, e.g. all required libraries exist.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para>system_image_toolkits() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1776" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1776" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaad1d55a8e7b359933f462a9ca5b2ede0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_mail_alter</definition>
        <argsstring>(&amp;$message)</argsstring>
        <name>hook_mail_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter an email message created with the <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> function.</para><para><ref refid="group__hooks_1gaad1d55a8e7b359933f462a9ca5b2ede0" kindref="member">hook_mail_alter()</ref> allows modification of email messages created and sent with <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref>. Usage examples include adding and/or changing message text, message fields, and message headers.</para><para>Email messages sent using functions other than <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> will not invoke <ref refid="group__hooks_1gaad1d55a8e7b359933f462a9ca5b2ede0" kindref="member">hook_mail_alter()</ref>. For example, a contributed module directly calling the <ref refid="mail_8inc_1a6ba240b2e368447935c9bcb114f59a1a" kindref="member">drupal_mail_system()</ref>-&gt;mail() or PHP mail() function will not invoke this hook. All core modules use <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> for messaging, it is best practice but not mandatory in contributed modules.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$message</parametername>
</parameternamelist>
<parameterdescription>
<para>An array containing the message data. Keys in this array include:<itemizedlist>
<listitem><para>&apos;id&apos;: The <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> id of the message. Look at module source code or <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> for possible id values.</para></listitem><listitem><para>&apos;to&apos;: The address or addresses the message will be sent to. The formatting of this string must comply with RFC 2822.</para></listitem><listitem><para>&apos;from&apos;: The address the message will be marked as being from, which is either a custom address or the site-wide default email address.</para></listitem><listitem><para>&apos;subject&apos;: Subject of the email to be sent. This must not contain any newline characters, or the email may not be sent properly.</para></listitem><listitem><para>&apos;body&apos;: An array of strings containing the message text. The message body is created by concatenating the individual array strings into a single text string using &quot;\n\n&quot; as a separator.</para></listitem><listitem><para>&apos;headers&apos;: Associative array containing mail headers, such as From, Sender, MIME-Version, Content-Type, etc.</para></listitem><listitem><para>&apos;params&apos;: An array of optional parameters supplied by the caller of <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> that is used to build the message before <ref refid="group__hooks_1gaad1d55a8e7b359933f462a9ca5b2ede0" kindref="member">hook_mail_alter()</ref> is invoked.</para></listitem><listitem><para>&apos;language&apos;: The language object used to build the message before <ref refid="group__hooks_1gaad1d55a8e7b359933f462a9ca5b2ede0" kindref="member">hook_mail_alter()</ref> is invoked.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1832" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1832" bodyend="1836"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab71c322e6487a3b99bd04c5b9adb13f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_module_implements_alter</definition>
        <argsstring>(&amp;$implementations, $hook)</argsstring>
        <name>hook_module_implements_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>implementations</declname>
        </param>
        <param>
          <type>$</type>
          <declname>hook</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the registry of modules implementing a hook.</para><para>This hook is invoked during <ref refid="group__hooks_1ga9191200072f2a641829e9d3c2759561f" kindref="member">module_implements()</ref>. A module may implement this hook in order to reorder the implementing modules, which are otherwise ordered by the module&apos;s system weight.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$implementations</parametername>
</parameternamelist>
<parameterdescription>
<para>An array keyed by the module&apos;s name. The value of each item corresponds to a $group, which is usually FALSE, unless the implementation is in a file named $module.$group.inc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$hook</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the module hook being implemented. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1852" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1852" bodyend="1862"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga7dd7f887131916d5bbbb02ae87a9113e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_system_info_alter</definition>
        <argsstring>(&amp;$info, $file, $type)</argsstring>
        <name>hook_system_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>info</declname>
        </param>
        <param>
          <type>$</type>
          <declname>file</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the information parsed from module and theme .info files</para><para>This hook is invoked in _system_rebuild_module_data() and in _system_rebuild_theme_data(). A module may implement this hook in order to add to or alter the data generated by reading the .info file with <ref refid="common_8inc_1a277955232059631211fcfde533ea89d6" kindref="member">drupal_parse_info_file()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$info</parametername>
</parameternamelist>
<parameterdescription>
<para>The .info file contents, passed by reference so that it can be altered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>Full information about the module or theme, including $file-&gt;name, and $file-&gt;filename </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>Either &apos;module&apos; or &apos;theme&apos;, depending on the type of .info file that was passed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1881" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1881" bodyend="1886"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2b22b45f4925f2478412477bae329713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_permission</definition>
        <argsstring>()</argsstring>
        <name>hook_permission</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define user permissions.</para><para>This hook can supply permissions that the module defines, so that they can be selected on the user permissions page and used to grant or restrict access to actions the module performs.</para><para>Permissions are checked using user_access().</para><para>For a detailed usage example, see page_example.module.</para><para><simplesect kind="return"><para>An array whose keys are permission names and whose corresponding values are arrays containing the following key-value pairs:<itemizedlist>
<listitem><para>title: The human-readable name of the permission, to be shown on the permission administration page. This should be wrapped in the t() function so it can be translated.</para></listitem><listitem><para>description: (optional) A description of what the permission does. This should be wrapped in the t() function so it can be translated.</para></listitem><listitem><para>restrict access: (optional) A boolean which can be set to TRUE to indicate that site administrators should restrict access to this permission to trusted users. This should be used for permissions that have inherent security risks across a variety of potential use cases (for example, the &quot;administer filters&quot; and &quot;bypass node access&quot; permissions provided by Drupal core). When set to TRUE, a standard warning message defined in <ref refid="group__forms_1gabcf8ce0bd54bdce14e7abeea7ed2bad9" kindref="member">user_admin_permissions()</ref> and output via <ref refid="group__themeable_1ga459815f84e50a6416f625577c99b9017" kindref="member">theme_user_permission_description()</ref> will be associated with the permission and displayed with it on the permission administration page. Defaults to FALSE.</para></listitem><listitem><para>warning: (optional) A translated warning message to display for this permission on the permission administration page. This warning overrides the automatic warning generated by &apos;restrict access&apos; being set to TRUE. This should rarely be used, since it is important for all permissions to have a clear, consistent security warning that is the same across the site. Use the &apos;description&apos; key instead to provide any information that is specific to the permission you are defining.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group__themeable_1ga459815f84e50a6416f625577c99b9017" kindref="member">theme_user_permission_description()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="1927" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="1927" bodyend="1934"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga013ccb45c7aaab1c16cf9691428c910d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_theme</definition>
        <argsstring>($existing, $type, $theme, $path)</argsstring>
        <name>hook_theme</name>
        <param>
          <type>$</type>
          <declname>existing</declname>
        </param>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <param>
          <type>$</type>
          <declname>theme</declname>
        </param>
        <param>
          <type>$</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a module (or theme&apos;s) theme implementations.</para><para>The following parameters are all optional.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>array</parametertype>
<parametername>$existing</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of existing implementations that may be used for override purposes. This is primarily useful for themes that may wish to examine existing implementations to extract data (such as arguments) so that it may properly register its own, higher priority implementations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether a theme, module, etc. is being processed. This is primarily useful so that themes tell if they are the actual theme being called or a parent theme. May be one of:<itemizedlist>
<listitem><para>&apos;module&apos;: A module is being checked for theme implementations.</para></listitem><listitem><para>&apos;base_theme_engine&apos;: A theme engine is being checked for a theme that is a parent of the actual theme being used.</para></listitem><listitem><para>&apos;theme_engine&apos;: A theme engine is being checked for the actual theme being used.</para></listitem><listitem><para>&apos;base_theme&apos;: A base theme is being checked for theme implementations.</para></listitem><listitem><para>&apos;theme&apos;: The actual theme in use is being checked. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$theme</parametername>
</parameternamelist>
<parameterdescription>
<para>The actual name of theme, module, etc. that is being being processed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory path of the theme or module, so that it doesn&apos;t need to be looked up.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>array An associative array of theme hook information. The keys on the outer array are the internal names of the hooks, and the values are arrays containing information about the hook. Each array may contain the following elements:<itemizedlist>
<listitem><para>variables: (required if &quot;render element&quot; not present) An array of variables that this theme hook uses. This value allows the theme layer to properly utilize templates. Each array key represents the name of the variable and the value will be used as the default value if it is not given when <ref refid="includes_2theme_8inc_1a7c25609a935874541a19657affd30fff" kindref="member">theme()</ref> is called. Template implementations receive these arguments as variables in the template file. Function implementations are passed this array data in the $variables parameter.</para></listitem><listitem><para>render element: (required if &quot;variables&quot; not present) A string that is the name of the sole renderable element to pass to the theme function. The string represents the name of the &quot;variable&quot; that will hold the renderable array inside any optional preprocess or process functions. Cannot be used with the &quot;variables&quot; item; only one or the other, not both, can be present in a hook&apos;s info array.</para></listitem><listitem><para><ulink url="file:">file:</ulink> The file the implementation resides in. This file will be included prior to the theme being rendered, to make sure that the function or preprocess function (as needed) is actually loaded; this makes it possible to split theme functions out into separate files quite easily.</para></listitem><listitem><para>path: Override the path of the file to be used. Ordinarily the module or theme path will be used, but if the file will not be in the default path, include it here. This path should be relative to the Drupal root directory.</para></listitem><listitem><para>template: If specified, this theme implementation is a template, and this is the template file without an extension. Do not put .tpl.php on this file; that extension will be added automatically by the default rendering engine (which is PHPTemplate). If &apos;path&apos;, above, is specified, the template should also be in this path.</para></listitem><listitem><para>function: If specified, this will be the function name to invoke for this implementation. If neither file nor function is specified, a default function name will be assumed. For example, if a module registers the &apos;node&apos; theme hook, &apos;theme_node&apos; will be assigned to its function. If the chameleon theme registers the node hook, it will be assigned &apos;chameleon_node&apos; as its function.</para></listitem><listitem><para>pattern: A regular expression pattern to be used to allow this theme implementation to have a dynamic name. The convention is to use __ to differentiate the dynamic portion of the theme. For example, to allow forums to be themed individually, the pattern might be: &apos;forum__&apos;. Then, when the forum is themed, call: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="includes_2theme_8inc_1a7c25609a935874541a19657affd30fff" kindref="member">theme</ref>(array(</highlight><highlight class="stringliteral">&apos;forum__&apos;</highlight><highlight class="normal"><sp/>.<sp/>$tid,<sp/></highlight><highlight class="stringliteral">&apos;forum&apos;</highlight><highlight class="normal">),<sp/>$forum)</highlight></codeline>
</programlisting></para></listitem><listitem><para>preprocess functions: A list of functions used to preprocess this data. Ordinarily this won&apos;t be used; it&apos;s automatically filled in. By default, for a module this will be filled in as template_preprocess_HOOK. For a theme this will be filled in as phptemplate_preprocess and phptemplate_preprocess_HOOK as well as themename_preprocess and themename_preprocess_HOOK.</para></listitem><listitem><para>override preprocess functions: Set to TRUE when a theme does NOT want the standard preprocess functions to run. This can be used to give a theme FULL control over how variables are set. For example, if a theme wants total control over how certain variables in the page.tpl.php are set, this can be set to true. Please keep in mind that when this is used by a theme, that theme becomes responsible for making sure necessary variables are set.</para></listitem><listitem><para>type: (automatically derived) Where the theme hook is defined: &apos;module&apos;, &apos;theme_engine&apos;, or &apos;theme&apos;.</para></listitem><listitem><para>theme path: (automatically derived) The directory path of the theme or module, so that it doesn&apos;t need to be looked up. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2026" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2026" bodyend="2049"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gadd6cabb9ce825efccefb4918321932a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_theme_registry_alter</definition>
        <argsstring>(&amp;$theme_registry)</argsstring>
        <name>hook_theme_registry_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>theme_registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the theme registry information returned from <ref refid="group__hooks_1ga013ccb45c7aaab1c16cf9691428c910d" kindref="member">hook_theme()</ref>.</para><para>The theme registry stores information about all available theme hooks, including which callback functions those hooks will call when triggered, what template files are exposed by these hooks, and so on.</para><para>Note that this hook is only executed as the theme cache is re-built. Changes here will not be visible until the next cache clear.</para><para>The $theme_registry array is keyed by theme hook name, and contains the information returned from <ref refid="group__hooks_1ga013ccb45c7aaab1c16cf9691428c910d" kindref="member">hook_theme()</ref>, as well as additional properties added by <ref refid="includes_2theme_8inc_1a473fae348447b091f0d8e677820d30c3" kindref="member">_theme_process_registry()</ref>.</para><para>For example: <programlisting><codeline><highlight class="normal"><sp/>$theme_registry[</highlight><highlight class="stringliteral">&apos;user_profile&apos;</highlight><highlight class="normal">]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;variables&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;account&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>NULL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;template&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;modules/user/user-profile&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;file&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;modules/user/user.pages.inc&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;module&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;theme<sp/>path&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;modules/user&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;preprocess<sp/>functions&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>0<sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;template_preprocess&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>1<sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;template_preprocess_user_profile&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>),</highlight></codeline>
<codeline><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$theme_registry</parametername>
</parameternamelist>
<parameterdescription>
<para>The entire cache of theme registry information, post-processing.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga013ccb45c7aaab1c16cf9691428c910d" kindref="member">hook_theme()</ref> </para><simplesectsep/><para><ref refid="includes_2theme_8inc_1a473fae348447b091f0d8e677820d30c3" kindref="member">_theme_process_registry()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2088" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2088" bodyend="2095"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab83dce4ef80bc5005ee0de98fc005b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_custom_theme</definition>
        <argsstring>()</argsstring>
        <name>hook_custom_theme</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the machine-readable name of the theme to use for the current page.</para><para>This hook can be used to dynamically set the theme for the current page request. It should be used by modules which need to override the theme based on dynamic conditions (for example, a module which allows the theme to be set based on the current user&apos;s role). The return value of this hook will be used on all pages except those which have a valid per-page or per-section theme set via a theme callback function in <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref>; the themes on those pages can only be overridden using <ref refid="group__hooks_1ga4c37deddcf48dbfe6f3081df1652f6fa" kindref="member">hook_menu_alter()</ref>.</para><para>Since only one theme can be used at a time, the last (i.e., highest weighted) module which returns a valid theme name from this hook will prevail.</para><para><simplesect kind="return"><para>The machine-readable name of the theme that should be used for the current page request. The value returned from this function will only have an effect if it corresponds to a currently-active theme on the site. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2117" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2117" bodyend="2122"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga9debe627e55ecff58ffaf71689dbec2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_xmlrpc</definition>
        <argsstring>()</argsstring>
        <name>hook_xmlrpc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register XML-RPC callbacks.</para><para>This hook lets a module register callback functions to be called when particular XML-RPC methods are invoked by a client.</para><para><simplesect kind="return"><para>An array which maps XML-RPC methods to Drupal functions. Each array element is either a pair of method =&gt; function or an array with four entries:<itemizedlist>
<listitem><para>The XML-RPC method name (for example, module.function).</para></listitem><listitem><para>The Drupal callback function (for example, module_function).</para></listitem><listitem><para>The method signature is an array of XML-RPC types. The first element of this array is the type of return value and then you should write a list of the types of the parameters. XML-RPC types are the following (See the types at <ulink url="http://www.xmlrpc.com/spec">http://www.xmlrpc.com/spec</ulink>):<itemizedlist>
<listitem><para>&quot;boolean&quot;: 0 (false) or 1 (true).</para></listitem><listitem><para>&quot;double&quot;: a floating point number (for example, -12.214).</para></listitem><listitem><para>&quot;int&quot;: a integer number (for example, -12).</para></listitem><listitem><para>&quot;array&quot;: an array without keys (for example, array(1, 2, 3)).</para></listitem><listitem><para>&quot;struct&quot;: an associative array or an object (for example, array(&apos;one&apos; =&gt; 1, &apos;two&apos; =&gt; 2)).</para></listitem><listitem><para>&quot;date&quot;: when you return a date, then you may either return a timestamp (time(), mktime() etc.) or an ISO8601 timestamp. When date is specified as an input parameter, then you get an object, which is described in the function xmlrpc_date</para></listitem><listitem><para>&quot;base64&quot;: a string containing binary data, automatically encoded/decoded automatically.</para></listitem><listitem><para>&quot;string&quot;: anything else, typically a string.</para></listitem></itemizedlist>
</para></listitem><listitem><para>A descriptive help string, enclosed in a t() function for translation purposes. Both forms are shown in the example. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2157" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2157" bodyend="2166"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga78ca7e3728a28b5d22152168b2b264cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_xmlrpc_alter</definition>
        <argsstring>(&amp;$methods)</argsstring>
        <name>hook_xmlrpc_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>methods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters the definition of XML-RPC methods before they are called.</para><para>This hook allows modules to modify the callback definition of declared XML-RPC methods, right before they are invoked by a client. Methods may be added, or existing methods may be altered.</para><para>Note that <ref refid="group__hooks_1ga9debe627e55ecff58ffaf71689dbec2e" kindref="member">hook_xmlrpc()</ref> supports two distinct and incompatible formats to define a callback, so care must be taken when altering other methods.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$methods</parametername>
</parameternamelist>
<parameterdescription>
<para>An asssociative array of method callback definitions, as returned from <ref refid="group__hooks_1ga9debe627e55ecff58ffaf71689dbec2e" kindref="member">hook_xmlrpc()</ref> implementations.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga9debe627e55ecff58ffaf71689dbec2e" kindref="member">hook_xmlrpc()</ref> </para><simplesectsep/><para><ref refid="xmlrpcs_8inc_1aff1b954dfb418c8c13f2432e15a86dab" kindref="member">xmlrpc_server()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2185" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2185" bodyend="2200"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab2b8bf0289fad4b39485e933012f290c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_watchdog</definition>
        <argsstring>(array $log_entry)</argsstring>
        <name>hook_watchdog</name>
        <param>
          <type>array $</type>
          <declname>log_entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Log an event message</para><para>This hook allows modules to route log events to custom destinations, such as SMS, Email, pager, syslog, ...etc.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$log_entry</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing the following keys:<itemizedlist>
<listitem><para>type: The type of message for this entry. For contributed modules, this is normally the module name. Do not use &apos;debug&apos;, use severity WATCHDOG_DEBUG instead.</para></listitem><listitem><para>user: The user object for the user who was logged in when the event happened.</para></listitem><listitem><para>request_uri: The Request URI for the page the event happened in.</para></listitem><listitem><para>referer: The page that referred the use to the page where the event occurred.</para></listitem><listitem><para>ip: The IP address where the request for the page came from.</para></listitem><listitem><para>timestamp: The UNIX timestamp of the date/time the event occurred</para></listitem><listitem><para>severity: One of the following values as defined in RFC 3164 <ulink url="http://www.faqs.org/rfcs/rfc3164.html">http://www.faqs.org/rfcs/rfc3164.html</ulink> WATCHDOG_EMERGENCY Emergency: system is unusable WATCHDOG_ALERT Alert: action must be taken immediately WATCHDOG_CRITICAL Critical: critical conditions WATCHDOG_ERROR Error: error conditions WATCHDOG_WARNING Warning: warning conditions WATCHDOG_NOTICE Notice: normal but significant condition WATCHDOG_INFO Informational: informational messages WATCHDOG_DEBUG Debug: debug-level messages</para></listitem><listitem><para>link: an optional link provided by the module that called the <ref refid="bootstrap_8inc_1acb7338e6740302727043d64e3ae1257b" kindref="member">watchdog()</ref> function.</para></listitem><listitem><para>message: The text of the message to be logged. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2229" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2229" bodyend="2277"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gacdeb1cba0d0a86ac4de3fff7d4765777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_mail</definition>
        <argsstring>($key, &amp;$message, $params)</argsstring>
        <name>hook_mail</name>
        <param>
          <type>$</type>
          <declname>key</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>message</declname>
        </param>
        <param>
          <type>$</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepare a message based on parameters; called from <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref>.</para><para>Note that <ref refid="group__hooks_1gacdeb1cba0d0a86ac4de3fff7d4765777" kindref="member">hook_mail()</ref>, unlike <ref refid="group__hooks_1gaad1d55a8e7b359933f462a9ca5b2ede0" kindref="member">hook_mail_alter()</ref>, is only called on the $module argument to <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref>, not all modules.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$key</parametername>
</parameternamelist>
<parameterdescription>
<para>An identifier of the mail. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$message</parametername>
</parameternamelist>
<parameterdescription>
<para>An array to be filled in. Elements in this array include:<itemizedlist>
<listitem><para>id: An ID to identify the mail sent. Look at module source code or <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> for possible id values.</para></listitem><listitem><para>to: The address or addresses the message will be sent to. The formatting of this string must comply with RFC 2822.</para></listitem><listitem><para>subject: Subject of the e-mail to be sent. This must not contain any newline characters, or the mail may not be sent properly. <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> sets this to an empty string when the hook is invoked.</para></listitem><listitem><para>body: An array of lines containing the message to be sent. Drupal will format the correct line endings for you. <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> sets this to an empty array when the hook is invoked.</para></listitem><listitem><para>from: The address the message will be marked as being from, which is set by <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> to either a custom address or the site-wide default email address when the hook is invoked.</para></listitem><listitem><para>headers: Associative array containing mail headers, such as From, Sender, MIME-Version, Content-Type, etc. <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref> pre-fills several headers in this array. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$params</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of parameters supplied by the caller of <ref refid="mail_8inc_1ab80781fd7273975a77cbbd13300eddbf" kindref="member">drupal_mail()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2308" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2308" bodyend="2344"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga66531e6e564157b7ca45ed07549c9b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_flush_caches</definition>
        <argsstring>()</argsstring>
        <name>hook_flush_caches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a list of cache tables to be cleared.</para><para>This hook allows your module to add cache table names to the list of cache tables that will be cleared by the Clear button on the Performance page or whenever drupal_flush_all_caches is invoked.</para><para><simplesect kind="return"><para>An array of cache table names.</para></simplesect>
<simplesect kind="see"><para><ref refid="common_8inc_1ac119432cefbdbb25647944d4ca3f82f8" kindref="member">drupal_flush_all_caches()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2358" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2358" bodyend="2360"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga71b7268520567cac1a2f296c205e5227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_modules_installed</definition>
        <argsstring>($modules)</argsstring>
        <name>hook_modules_installed</name>
        <param>
          <type>$</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform necessary actions after modules are installed.</para><para>This function differs from <ref refid="group__hooks_1ga1ecdb5a2a046ea63dc790c3ed90338e5" kindref="member">hook_install()</ref> in that it gives all other modules a chance to perform actions when a module is installed, whereas <ref refid="group__hooks_1ga1ecdb5a2a046ea63dc790c3ed90338e5" kindref="member">hook_install()</ref> is only called on the module actually being installed. See <ref refid="module_8inc_1a4b2c9ea60d7c88595eaebfc4abd5f1bf" kindref="member">module_enable()</ref> for a detailed description of the order in which install and enable hooks are invoked.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$modules</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of the modules that were installed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8inc_1a4b2c9ea60d7c88595eaebfc4abd5f1bf" kindref="member">module_enable()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga0eb7c67333e0f40b4a46c0dc4c4a92f3" kindref="member">hook_modules_enabled()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga1ecdb5a2a046ea63dc790c3ed90338e5" kindref="member">hook_install()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2378" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2378" bodyend="2382"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga0eb7c67333e0f40b4a46c0dc4c4a92f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_modules_enabled</definition>
        <argsstring>($modules)</argsstring>
        <name>hook_modules_enabled</name>
        <param>
          <type>$</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform necessary actions after modules are enabled.</para><para>This function differs from <ref refid="group__hooks_1gaedcfb58c08d5c5f8ffcd1059ceeb39e4" kindref="member">hook_enable()</ref> in that it gives all other modules a chance to perform actions when modules are enabled, whereas <ref refid="group__hooks_1gaedcfb58c08d5c5f8ffcd1059ceeb39e4" kindref="member">hook_enable()</ref> is only called on the module actually being enabled. See <ref refid="module_8inc_1a4b2c9ea60d7c88595eaebfc4abd5f1bf" kindref="member">module_enable()</ref> for a detailed description of the order in which install and enable hooks are invoked.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$modules</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of the modules that were enabled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gaedcfb58c08d5c5f8ffcd1059ceeb39e4" kindref="member">hook_enable()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga71b7268520567cac1a2f296c205e5227" kindref="member">hook_modules_installed()</ref> </para><simplesectsep/><para><ref refid="module_8inc_1a4b2c9ea60d7c88595eaebfc4abd5f1bf" kindref="member">module_enable()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2400" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2400" bodyend="2405"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga591c577fba8ca8dc8ec17f8bf80bdc4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_modules_disabled</definition>
        <argsstring>($modules)</argsstring>
        <name>hook_modules_disabled</name>
        <param>
          <type>$</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform necessary actions after modules are disabled.</para><para>This function differs from <ref refid="group__hooks_1ga5872573d2180aa4b306e7d6c08a74c10" kindref="member">hook_disable()</ref> in that it gives all other modules a chance to perform actions when modules are disabled, whereas <ref refid="group__hooks_1ga5872573d2180aa4b306e7d6c08a74c10" kindref="member">hook_disable()</ref> is only called on the module actually being disabled.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$modules</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of the modules that were disabled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga5872573d2180aa4b306e7d6c08a74c10" kindref="member">hook_disable()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga4f29c7343438068a922459cbe0810279" kindref="member">hook_modules_uninstalled()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2420" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2420" bodyend="2424"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4f29c7343438068a922459cbe0810279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_modules_uninstalled</definition>
        <argsstring>($modules)</argsstring>
        <name>hook_modules_uninstalled</name>
        <param>
          <type>$</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform necessary actions after modules are uninstalled.</para><para>This function differs from <ref refid="group__hooks_1ga3fb24f6923b3e585d6326ff5abdcc57c" kindref="member">hook_uninstall()</ref> in that it gives all other modules a chance to perform actions when a module is uninstalled, whereas <ref refid="group__hooks_1ga3fb24f6923b3e585d6326ff5abdcc57c" kindref="member">hook_uninstall()</ref> is only called on the module actually being uninstalled.</para><para>It is recommended that you implement this hook if your module stores data that may have been set by other modules.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$modules</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of the modules that were uninstalled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga3fb24f6923b3e585d6326ff5abdcc57c" kindref="member">hook_uninstall()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga591c577fba8ca8dc8ec17f8bf80bdc4c" kindref="member">hook_modules_disabled()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2442" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2442" bodyend="2449"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga6fadcf625a4766e7f0d97b1628b294dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_stream_wrappers</definition>
        <argsstring>()</argsstring>
        <name>hook_stream_wrappers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers PHP stream wrapper implementations associated with a module.</para><para>Provide a facility for managing and querying user-defined stream wrappers in PHP. PHP&apos;s internal stream_get_wrappers() doesn&apos;t return the class registered to handle a stream, which we need to be able to find the handler for class instantiation.</para><para>If a module registers a scheme that is already registered with PHP, it will be unregistered and replaced with the specified class.</para><para><simplesect kind="return"><para>A nested array, keyed first by scheme name (&quot;public&quot; for &quot;public://&quot;), then keyed by the following values:<itemizedlist>
<listitem><para>&apos;name&apos; A short string to name the wrapper.</para></listitem><listitem><para>&apos;class&apos; A string specifying the PHP class that implements the <ref refid="interface_drupal_stream_wrapper_interface" kindref="compound">DrupalStreamWrapperInterface</ref> interface.</para></listitem><listitem><para>&apos;description&apos; A string with a short description of what the wrapper does.</para></listitem><listitem><para>&apos;type&apos; (Optional) A bitmask of flags indicating what type of streams this wrapper will access - local or remote, readable and/or writeable, etc. Many shortcut constants are defined in <ref refid="stream__wrappers_8inc" kindref="compound">stream_wrappers.inc</ref>. Defaults to STREAM_WRAPPERS_NORMAL which includes all of these bit flags:<itemizedlist>
<listitem><para>STREAM_WRAPPERS_READ</para></listitem><listitem><para>STREAM_WRAPPERS_WRITE</para></listitem><listitem><para>STREAM_WRAPPERS_VISIBLE</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group__file_1ga0cd34cfd1bacb36b8ff82d01fb9a6f79" kindref="member">file_get_stream_wrappers()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gab7e34e537f28b019b04ab1b1d90d52c1" kindref="member">hook_stream_wrappers_alter()</ref> </para><simplesectsep/><para>system_stream_wrappers() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2481" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2481" bodyend="2517"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab7e34e537f28b019b04ab1b1d90d52c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_stream_wrappers_alter</definition>
        <argsstring>(&amp;$wrappers)</argsstring>
        <name>hook_stream_wrappers_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>wrappers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters the list of PHP stream wrapper implementations.</para><para><simplesect kind="see"><para><ref refid="group__file_1ga0cd34cfd1bacb36b8ff82d01fb9a6f79" kindref="member">file_get_stream_wrappers()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga6fadcf625a4766e7f0d97b1628b294dc" kindref="member">hook_stream_wrappers()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2525" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2525" bodyend="2528"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga9f6bf6919600b83a565421f6a7faf678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_load</definition>
        <argsstring>($files)</argsstring>
        <name>hook_file_load</name>
        <param>
          <type>$</type>
          <declname>files</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load additional information into file objects.</para><para><ref refid="group__file_1ga32afa29695b6da3f5d86cad18f063bfc" kindref="member">file_load_multiple()</ref> calls this hook to allow modules to load additional information into each file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$files</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of file objects, indexed by fid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__file_1ga32afa29695b6da3f5d86cad18f063bfc" kindref="member">file_load_multiple()</ref> </para><simplesectsep/><para>upload_file_load() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2542" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2542" bodyend="2550"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab1491b52a117229913448d787156e013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_validate</definition>
        <argsstring>($file)</argsstring>
        <name>hook_file_validate</name>
        <param>
          <type>$</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that files meet a given criteria.</para><para>This hook lets modules perform additional validation on files. They&apos;re able to report a failure by returning one or more error messages.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file object being validated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of error messages. If there are no problems with the file return an empty array.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__file_1ga9edf58fdc552d61247bbf8322c434abf" kindref="member">file_validate()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2566" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2566" bodyend="2577"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga7350980f3f4679989f9c5aa2b7f0df05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_presave</definition>
        <argsstring>($file)</argsstring>
        <name>hook_file_presave</name>
        <param>
          <type>$</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on a file being inserted or updated.</para><para>This hook is called when a file has been added to the database. The hook doesn&apos;t distinguish between files created as a result of a copy or those created by an upload.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file that has just been created.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__file_1ga80327cb23d8d384b827b2637cd8cc4ba" kindref="member">file_save()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2591" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2591" bodyend="2594"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gac40fa27583fc4cba927f486098eaa79b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_insert</definition>
        <argsstring>($file)</argsstring>
        <name>hook_file_insert</name>
        <param>
          <type>$</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to a file being added.</para><para>This hook is called before a file has been added to the database. The hook doesn&apos;t distinguish between files created as a result of a copy or those created by an upload.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file that is about to be saved.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__file_1ga80327cb23d8d384b827b2637cd8cc4ba" kindref="member">file_save()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2608" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2608" bodyend="2610"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga604abda1f5df3f041f7ef748b9762475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_update</definition>
        <argsstring>($file)</argsstring>
        <name>hook_file_update</name>
        <param>
          <type>$</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to a file being updated.</para><para>This hook is called when <ref refid="group__file_1ga80327cb23d8d384b827b2637cd8cc4ba" kindref="member">file_save()</ref> is called on an existing file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file that has just been updated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__file_1ga80327cb23d8d384b827b2637cd8cc4ba" kindref="member">file_save()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2622" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2622" bodyend="2624"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga49e2e5f9993e98da69c3434999242711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_copy</definition>
        <argsstring>($file, $source)</argsstring>
        <name>hook_file_copy</name>
        <param>
          <type>$</type>
          <declname>file</declname>
        </param>
        <param>
          <type>$</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to a file that has been copied.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The newly copied file object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$source</parametername>
</parameternamelist>
<parameterdescription>
<para>The original file before the copy.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__file_1gae49a2da7203ef43ae7adcf128d58d860" kindref="member">file_copy()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2636" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2636" bodyend="2638"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga7053514a7a923b43960b31cacfa9ce95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_move</definition>
        <argsstring>($file, $source)</argsstring>
        <name>hook_file_move</name>
        <param>
          <type>$</type>
          <declname>file</declname>
        </param>
        <param>
          <type>$</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to a file that has been moved.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The updated file object after the move. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$source</parametername>
</parameternamelist>
<parameterdescription>
<para>The original file object before the move.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__file_1gad6f4eec44e0c32bf0cde6c602d5da38f" kindref="member">file_move()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2650" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2650" bodyend="2652"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gafa88683ad014451b3fbc9ca9bb80afdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_delete</definition>
        <argsstring>($file)</argsstring>
        <name>hook_file_delete</name>
        <param>
          <type>$</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to a file being deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file that has just been deleted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__file_1gac7503f0dcdea965d68e4a242e7760921" kindref="member">file_delete()</ref> </para><simplesectsep/><para>upload_file_delete() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2663" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2663" bodyend="2666"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab73f0e658d6630220ba7836ccd011ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_download</definition>
        <argsstring>($uri)</argsstring>
        <name>hook_file_download</name>
        <param>
          <type>$</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Control access to private file downloads and specify HTTP headers.</para><para>This hook allows modules enforce permissions on file downloads when the private file download method is selected. Modules can also provide headers to specify information like the file&apos;s name or MIME type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI of the file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the user does not have permission to access the file, return -1. If the user has permission, return an array with the appropriate headers. If the file is not controlled by the current module, the return value should be NULL.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__file_1ga91226299fab7e95a673f6461bbc19b02" kindref="member">file_download()</ref> </para><simplesectsep/><para>upload_file_download() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2686" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2686" bodyend="2701"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga996bb014bd4944c0e468c1525768a96c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_url_alter</definition>
        <argsstring>(&amp;$uri)</argsstring>
        <name>hook_file_url_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the URL to a file.</para><para>This hook is called from <ref refid="group__file_1gaee57f47d60bda90961a2e19d580d4908" kindref="member">file_create_url()</ref>, and is called fairly frequently (10+ times per page), depending on how many files there are in a given page. If CSS and JS aggregation are disabled, this can become very frequently (50+ times per page) so performance is critical.</para><para>This function should alter the URI, if it wants to rewrite the file URL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The URI to a file for which we need an external URL, or the path to a shipped file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2718" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2718" bodyend="2761"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3cff06c700ccb873cfce71fc378e7675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_requirements</definition>
        <argsstring>($phase)</argsstring>
        <name>hook_requirements</name>
        <param>
          <type>$</type>
          <declname>phase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check installation requirements and do status reporting.</para><para>This hook has three closely related uses, determined by the $phase argument:<itemizedlist>
<listitem><para>Checking installation requirements ($phase == &apos;install&apos;).</para></listitem><listitem><para>Checking update requirements ($phase == &apos;update&apos;).</para></listitem><listitem><para>Status reporting ($phase == &apos;runtime&apos;).</para></listitem></itemizedlist>
</para><para>Note that this hook, like all others dealing with installation and updates, must reside in a module_name.install file, or it will not properly abort the installation of the module if a critical requirement is missing.</para><para>During the &apos;install&apos; phase, modules can for example assert that library or server versions are available or sufficient. Note that the installation of a module can happen during installation of Drupal itself (by <ref refid="install_8php" kindref="compound">install.php</ref>) with an installation profile or later by hand. As a consequence, install-time requirements must be checked without access to the full Drupal API, because it is not available during <ref refid="install_8php" kindref="compound">install.php</ref>. For localization you should for example use $t = <ref refid="group__sanitization_1gaa50232f577883a48731fc93530628a79" kindref="member">get_t()</ref> to retrieve the appropriate localization function name (t() or <ref refid="group__sanitization_1gabc78d1b88aa8081093abbbf71a516c7c" kindref="member">st()</ref>). If a requirement has a severity of REQUIREMENT_ERROR, <ref refid="install_8php" kindref="compound">install.php</ref> will abort or at least the module will not install. Other severity levels have no effect on the installation. Module dependencies do not belong to these installation requirements, but should be defined in the module&apos;s .info file.</para><para>The &apos;runtime&apos; phase is not limited to pure installation requirements but can also be used for more general status information like maintenance tasks and security issues. The returned &apos;requirements&apos; will be listed on the status report in the administration section, with indication of the severity level. Moreover, any requirement with a severity of REQUIREMENT_ERROR severity will result in a notice on the the administration overview page.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$phase</parametername>
</parameternamelist>
<parameterdescription>
<para>The phase in which requirements are checked:<itemizedlist>
<listitem><para>install: The module is being installed.</para></listitem><listitem><para>update: The module is enabled and <ref refid="update_8php" kindref="compound">update.php</ref> is run.</para></listitem><listitem><para>runtime: The runtime requirements are being checked and shown on the status report page.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A keyed array of requirements. Each requirement is itself an array with the following items:<itemizedlist>
<listitem><para>title: The name of the requirement.</para></listitem><listitem><para>value: The current value (e.g., version, time, level, etc). During install phase, this should only be used for version numbers, do not set it if not applicable.</para></listitem><listitem><para>description: The description of the requirement/status.</para></listitem><listitem><para>severity: The requirement&apos;s result/severity level, one of:<itemizedlist>
<listitem><para>REQUIREMENT_INFO: For info only.</para></listitem><listitem><para>REQUIREMENT_OK: The requirement is satisfied.</para></listitem><listitem><para>REQUIREMENT_WARNING: The requirement failed with a warning.</para></listitem><listitem><para>REQUIREMENT_ERROR: The requirement failed with an error. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2818" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2818" bodyend="2863"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4a00aaeabd6903f707d8385476b9ae2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_schema_alter</definition>
        <argsstring>(&amp;$schema)</argsstring>
        <name>hook_schema_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations to existing database schemas.</para><para>When a module modifies the database structure of another module (by changing, adding or removing fields, keys or indexes), it should implement <ref refid="group__hooks_1ga4a00aaeabd6903f707d8385476b9ae2a" kindref="member">hook_schema_alter()</ref> to update the default $schema to take its changes into account.</para><para>See <ref refid="group__schemaapi_1ga9abd926ddaf68a22e6dca28a25d0c6f5" kindref="member">hook_schema()</ref> for details on the schema definition structure.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$schema</parametername>
</parameternamelist>
<parameterdescription>
<para>Nested array describing the schemas for all modules. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2953" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2953" bodyend="2961"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf166f6375e9f7b5919d719eb91198d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_query_alter</definition>
        <argsstring>(QueryAlterableInterface $query)</argsstring>
        <name>hook_query_alter</name>
        <param>
          <type><ref refid="interface_query_alterable_interface" kindref="compound">QueryAlterableInterface</ref> $</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations to a structured query.</para><para>Structured (aka dynamic) queries that have tags associated may be altered by any module before the query is executed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$query</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="class_query" kindref="compound">Query</ref> object describing the composite parts of a SQL query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga12527037deeb76adcab1000e984fdfce" kindref="member">hook_query_TAG_alter()</ref> </para><simplesectsep/><para>node_query_node_access_alter() </para><simplesectsep/><para><ref refid="interface_query_alterable_interface" kindref="compound">QueryAlterableInterface</ref> </para><simplesectsep/><para><ref refid="interface_select_query_interface" kindref="compound">SelectQueryInterface</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2977" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2977" bodyend="2981"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga12527037deeb76adcab1000e984fdfce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_query_TAG_alter</definition>
        <argsstring>(QueryAlterableInterface $query)</argsstring>
        <name>hook_query_TAG_alter</name>
        <param>
          <type><ref refid="interface_query_alterable_interface" kindref="compound">QueryAlterableInterface</ref> $</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform alterations to a structured query for a given tag.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$query</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="class_query" kindref="compound">Query</ref> object describing the composite parts of a SQL query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gaf166f6375e9f7b5919d719eb91198d47" kindref="member">hook_query_alter()</ref> </para><simplesectsep/><para>node_query_node_access_alter() </para><simplesectsep/><para><ref refid="interface_query_alterable_interface" kindref="compound">QueryAlterableInterface</ref> </para><simplesectsep/><para><ref refid="interface_select_query_interface" kindref="compound">SelectQueryInterface</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="2994" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="2994" bodyend="3025"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga1ecdb5a2a046ea63dc790c3ed90338e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_install</definition>
        <argsstring>()</argsstring>
        <name>hook_install</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform setup tasks when the module is installed.</para><para>If the module implements <ref refid="group__schemaapi_1ga9abd926ddaf68a22e6dca28a25d0c6f5" kindref="member">hook_schema()</ref>, the database tables will be created before this hook is fired.</para><para>This hook will only be called the first time a module is enabled or after it is re-enabled after being uninstalled. The module&apos;s schema version will be set to the module&apos;s greatest numbered update hook. Because of this, anytime a <ref refid="group__hooks_1ga908950689e6b85cd0fae3b780d69a41f" kindref="member">hook_update_N()</ref> is added to the module, this function needs to be updated to reflect the current version of the database schema.</para><para>See the Schema API documentation at <ref refid="" kindref="compound"><ulink url="http://drupal.org/node/146843">http://drupal.org/node/146843</ulink> </ref> for details on hook_schema and how database tables are defined.</para><para>Note that since this function is called from a full bootstrap, all functions (including those in modules enabled by the current page request) are available when this hook is called. Use cases could be displaying a user message, or calling a module function necessary for initial setup, etc.</para><para>Please be sure that anything added or modified in this function that can be removed during uninstall should be removed with <ref refid="group__hooks_1ga3fb24f6923b3e585d6326ff5abdcc57c" kindref="member">hook_uninstall()</ref>.</para><para><simplesect kind="see"><para><ref refid="group__schemaapi_1ga9abd926ddaf68a22e6dca28a25d0c6f5" kindref="member">hook_schema()</ref> </para><simplesectsep/><para><ref refid="module_8inc_1a4b2c9ea60d7c88595eaebfc4abd5f1bf" kindref="member">module_enable()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaedcfb58c08d5c5f8ffcd1059ceeb39e4" kindref="member">hook_enable()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga5872573d2180aa4b306e7d6c08a74c10" kindref="member">hook_disable()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga3fb24f6923b3e585d6326ff5abdcc57c" kindref="member">hook_uninstall()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga71b7268520567cac1a2f296c205e5227" kindref="member">hook_modules_installed()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3058" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3058" bodyend="3070"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga908950689e6b85cd0fae3b780d69a41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_update_N</definition>
        <argsstring>(&amp;$sandbox)</argsstring>
        <name>hook_update_N</name>
        <param>
          <type>&amp;$</type>
          <declname>sandbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a single update.</para><para>For each patch which requires a database change add a new <ref refid="group__hooks_1ga908950689e6b85cd0fae3b780d69a41f" kindref="member">hook_update_N()</ref> which will be called by <ref refid="update_8php" kindref="compound">update.php</ref>. The database updates are numbered sequentially according to the version of Drupal you are compatible with.</para><para>Schema updates should adhere to the Schema API: <ref refid="" kindref="compound"><ulink url="http://drupal.org/node/150215">http://drupal.org/node/150215</ulink> </ref></para><para><ref refid="class_database" kindref="compound">Database</ref> updates consist of 3 parts:<itemizedlist>
<listitem><para>1 digit for Drupal core compatibility</para></listitem><listitem><para>1 digit for your module&apos;s major release version (e.g. is this the 5.x-1.* (1) or 5.x-2.* (2) series of your module?)</para></listitem><listitem><para>2 digits for sequential counting starting with 00</para></listitem></itemizedlist>
</para><para>The 2nd digit should be 0 for initial porting of your module to a new Drupal core API.</para><para>Examples:<itemizedlist>
<listitem><para>mymodule_update_5200()<itemizedlist>
<listitem><para>This is the first update to get the database ready to run mymodule 5.x-2.*.</para></listitem></itemizedlist>
</para></listitem><listitem><para>mymodule_update_6000()<itemizedlist>
<listitem><para>This is the required update for mymodule to run with Drupal core API 6.x.</para></listitem></itemizedlist>
</para></listitem><listitem><para>mymodule_update_6100()<itemizedlist>
<listitem><para>This is the first update to get the database ready to run mymodule 6.x-1.*.</para></listitem></itemizedlist>
</para></listitem><listitem><para>mymodule_update_6200()<itemizedlist>
<listitem><para>This is the first update to get the database ready to run mymodule 6.x-2.*. Users can directly update from 5.x-2.* to 6.x-2.* and they get all 60XX and 62XX updates, but not 61XX updates, because those reside in the 6.x-1.x branch only.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>A good rule of thumb is to remove updates older than two major releases of Drupal. See <ref refid="group__hooks_1ga2fc0f6e61d252afa19e87804dbfdb558" kindref="member">hook_update_last_removed()</ref> to notify Drupal about the removals.</para><para>Never renumber update functions.</para><para>Further information about releases and release numbers:<itemizedlist>
<listitem><para><ref refid="" kindref="compound"><ulink url="http://drupal.org/handbook/version-info">http://drupal.org/handbook/version-info</ulink> </ref></para></listitem><listitem><para><ref refid="" kindref="compound"><ulink url="http://drupal.org/node/93999">http://drupal.org/node/93999</ulink> </ref> (Overview of contributions branches and tags)</para></listitem><listitem><para><ref refid="" kindref="compound"><ulink url="http://drupal.org/handbook/cvs/releases">http://drupal.org/handbook/cvs/releases</ulink> </ref></para></listitem></itemizedlist>
</para><para>Implementations of this hook should be placed in a mymodule.install file in the same directory as mymodule.module. Drupal core&apos;s updates are implemented using the system module as a name and stored in database/updates.inc.</para><para>If your update task is potentially time-consuming, you&apos;ll need to implement a multipass update to avoid PHP timeouts. Multipass updates use the $sandbox parameter provided by the batch API (normally, $context[&apos;sandbox&apos;]) to store information between successive calls, and the $sandbox[&apos;#finished&apos;] value to provide feedback regarding completion level.</para><para>See the batch operations page for more information on how to use the batch API: <ref refid="" kindref="compound"><ulink url="http://drupal.org/node/180528">http://drupal.org/node/180528</ulink> </ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$sandbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores information for multipass updates. See above for more information.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_drupal_update_exception" kindref="compound">DrupalUpdateException</ref></parametername>
<parametername>PDOException</parametername>
</parameternamelist>
<parameterdescription>
<para>In case of error, update hooks should throw an instance of <ref refid="class_drupal_update_exception" kindref="compound">DrupalUpdateException</ref> with a meaningful message for the user. If a database query fails for whatever reason, it will throw a PDOException.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Optionally update hooks may return a translated string that will be displayed to the user. If no message is returned, no message will be presented to the user. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3139" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3139" bodyend="3184"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga23e9e019b7ec64d95bafbeaffd295483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_update_dependencies</definition>
        <argsstring>()</argsstring>
        <name>hook_update_dependencies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an array of information about module update dependencies.</para><para>This can be used to indicate update functions from other modules that your module&apos;s update functions depend on, or vice versa. It is used by the update system to determine the appropriate order in which updates should be run, as well as to search for missing dependencies.</para><para>Implementations of this hook should be placed in a mymodule.install file in the same directory as mymodule.module.</para><para><simplesect kind="return"><para>A multidimensional array containing information about the module update dependencies. The first two levels of keys represent the module and update number (respectively) for which information is being returned, and the value is an array of information about that update&apos;s dependencies. Within this array, each key represents a module, and each value represents the number of an update function within that module. In the event that your update function depends on more than one update from a particular module, you should always list the highest numbered one here (since updates within a given module always run in numerical order).</para></simplesect>
<simplesect kind="see"><para><ref refid="update_8inc_1aa931d6cdddc2e9e0ec96d240523056e9" kindref="member">update_resolve_dependencies()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga908950689e6b85cd0fae3b780d69a41f" kindref="member">hook_update_N()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3211" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3211" bodyend="3229"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2fc0f6e61d252afa19e87804dbfdb558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_update_last_removed</definition>
        <argsstring>()</argsstring>
        <name>hook_update_last_removed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a number which is no longer available as <ref refid="group__hooks_1ga908950689e6b85cd0fae3b780d69a41f" kindref="member">hook_update_N()</ref>.</para><para>If you remove some update functions from your mymodule.install file, you should notify Drupal of those missing functions. This way, Drupal can ensure that no update is accidentally skipped.</para><para>Implementations of this hook should be placed in a mymodule.install file in the same directory as mymodule.module.</para><para><simplesect kind="return"><para>An integer, corresponding to <ref refid="group__hooks_1ga908950689e6b85cd0fae3b780d69a41f" kindref="member">hook_update_N()</ref> which has been removed from mymodule.install.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1ga908950689e6b85cd0fae3b780d69a41f" kindref="member">hook_update_N()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3247" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3247" bodyend="3251"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3fb24f6923b3e585d6326ff5abdcc57c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_uninstall</definition>
        <argsstring>()</argsstring>
        <name>hook_uninstall</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove any information that the module sets.</para><para>The information that the module should remove includes:<itemizedlist>
<listitem><para>variables that the module has set using <ref refid="bootstrap_8inc_1a9859faa6fcd56ca6048be93dace95999" kindref="member">variable_set()</ref> or system_settings_form()</para></listitem><listitem><para>modifications to existing tables</para></listitem></itemizedlist>
</para><para>The module should not remove its entry from the {system} table. <ref refid="class_database" kindref="compound">Database</ref> tables defined by <ref refid="group__schemaapi_1ga9abd926ddaf68a22e6dca28a25d0c6f5" kindref="member">hook_schema()</ref> will be removed automatically.</para><para>The uninstall hook will fire when the module gets uninstalled but before the module&apos;s database tables are removed, allowing your module to query its own tables during this routine.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga1ecdb5a2a046ea63dc790c3ed90338e5" kindref="member">hook_install()</ref> </para><simplesectsep/><para><ref refid="group__schemaapi_1ga9abd926ddaf68a22e6dca28a25d0c6f5" kindref="member">hook_schema()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga5872573d2180aa4b306e7d6c08a74c10" kindref="member">hook_disable()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga4f29c7343438068a922459cbe0810279" kindref="member">hook_modules_uninstalled()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3272" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3272" bodyend="3274"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaedcfb58c08d5c5f8ffcd1059ceeb39e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_enable</definition>
        <argsstring>()</argsstring>
        <name>hook_enable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform necessary actions after module is enabled.</para><para>The hook is called every time the module is enabled.</para><para><simplesect kind="see"><para><ref refid="module_8inc_1a4b2c9ea60d7c88595eaebfc4abd5f1bf" kindref="member">module_enable()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga1ecdb5a2a046ea63dc790c3ed90338e5" kindref="member">hook_install()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga0eb7c67333e0f40b4a46c0dc4c4a92f3" kindref="member">hook_modules_enabled()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3285" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3285" bodyend="3287"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5872573d2180aa4b306e7d6c08a74c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_disable</definition>
        <argsstring>()</argsstring>
        <name>hook_disable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform necessary actions before module is disabled.</para><para>The hook is called every time the module is disabled.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga3fb24f6923b3e585d6326ff5abdcc57c" kindref="member">hook_uninstall()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga591c577fba8ca8dc8ec17f8bf80bdc4c" kindref="member">hook_modules_disabled()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3297" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3297" bodyend="3299"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5b1201bb1afca26333900cd9aca6a2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_registry_files_alter</definition>
        <argsstring>(&amp;$files, $modules)</argsstring>
        <name>hook_registry_files_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>files</declname>
        </param>
        <param>
          <type>$</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform necessary alterations to the list of files parsed by the registry.</para><para>Modules can manually modify the list of files before the registry parses them. The $modules array provides the .info file information, which includes the list of files registered to each module. Any files in the list can then be added to the list of files that the registry will parse, or modify attributes of a file.</para><para>A necessary alteration made by the core SimpleTest module is to force .test files provided by disabled modules into the list of files parsed by the registry.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$files</parametername>
</parameternamelist>
<parameterdescription>
<para>List of files to be parsed by the registry. The list will contain files found in each enabled module&apos;s info file and the core includes directory. The array is keyed by the file path and contains an array of the related module&apos;s name and weight as used internally by <ref refid="group__registry_1ga5008c77b133d55af7f1f4442d9e51167" kindref="member">_registry_update()</ref> and related functions.</para></parameterdescription>
</parameteritem>
</parameterlist>
For example: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>$files[</highlight><highlight class="stringliteral">&quot;modules/system/system.module&quot;</highlight><highlight class="normal">]<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;module&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;system&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;weight&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$modules</parametername>
</parameternamelist>
<parameterdescription>
<para>An array containing all module information stored in the {system} table. Each element of the array also contains the module&apos;s .info file information in the property &apos;info&apos;. An additional &apos;dir&apos; property has been added to the module information which provides the path to the directory in which the module resides. The example shows how to take advantage of both properties.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__registry_1ga5008c77b133d55af7f1f4442d9e51167" kindref="member">_registry_update()</ref> </para><simplesectsep/><para>simpletest_test_get_all() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3339" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3339" bodyend="3352"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga206584456e487832a8d701aa3c3d3715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_install_tasks</definition>
        <argsstring>()</argsstring>
        <name>hook_install_tasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an array of tasks to be performed by an installation profile.</para><para>Any tasks you define here will be run, in order, after the installer has finished the site configuration step but before it has moved on to the final import of languages and the end of the installation. You can have any number of custom tasks to perform during this phase.</para><para>Each task you define here corresponds to a callback function which you must separately define and which is called when your task is run. This function will receive the global installation state variable, $install_state, as input, and has the opportunity to access or modify any of its settings. See the <ref refid="install_8core_8inc_1ab52bef71652d133045e4182da84a33b8" kindref="member">install_state_defaults()</ref> function in the installer for the list of $install_state settings used by Drupal core.</para><para>At the end of your task function, you can indicate that you want the installer to pause and display a page to the user by returning any themed output that should be displayed on that page (but see below for tasks that use the form API or batch API; the return values of these task functions are handled differently). You should also use <ref refid="bootstrap_8inc_1a1994d49eb621df71fe1306e13b7e4910" kindref="member">drupal_set_title()</ref> within the task callback function to set a custom page title. For some tasks, however, you may want to simply do some processing and pass control to the next task without ending the page request; to indicate this, simply do not send back a return value from your task function at all. This can be used, for example, by installation profiles that need to configure certain site settings in the database without obtaining any input from the user.</para><para>The task function is treated specially if it defines a form or requires batch processing; in that case, you should return either the form API definition or batch API array, as appropriate. See below for more information on the &apos;type&apos; key that you must define in the task definition to inform the installer that your task falls into one of those two categories. It is important to use these APIs directly, since the installer may be run non-interactively (for example, via a command line script), all in one page request; in that case, the installer will automatically take care of submitting forms and processing batches correctly for both types of installations. You can inspect the $install_state[&apos;interactive&apos;] boolean to see whether or not the current installation is interactive, if you need access to this information.</para><para>Remember that a user installing Drupal interactively will be able to reload an installation page multiple times, so you should use <ref refid="bootstrap_8inc_1a9859faa6fcd56ca6048be93dace95999" kindref="member">variable_set()</ref> and <ref refid="bootstrap_8inc_1a1be2160d5e5a1a9b9a0c90944c4f5252" kindref="member">variable_get()</ref> if you are collecting any data that you need to store and inspect later. It is important to remove any temporary variables using <ref refid="bootstrap_8inc_1a7850bff5f313f85335f418e6d87606b1" kindref="member">variable_del()</ref> before your last task has completed and control is handed back to the installer.</para><para><simplesect kind="return"><para>A keyed array of tasks the profile will perform during the final stage of the installation. Each key represents the name of a function (usually a function defined by this profile, although that is not strictly required) that is called when that task is run. The values are associative arrays containing the following key-value pairs (all of which are optional):<itemizedlist>
<listitem><para>&apos;display_name&apos; The human-readable name of the task. This will be displayed to the user while the installer is running, along with a list of other tasks that are being run. Leave this unset to prevent the task from appearing in the list.</para></listitem><listitem><para>&apos;display&apos; This is a boolean which can be used to provide finer-grained control over whether or not the task will display. This is mostly useful for tasks that are intended to display only under certain conditions; for these tasks, you can set &apos;display_name&apos; to the name that you want to display, but then use this boolean to hide the task only when certain conditions apply.</para></listitem><listitem><para>&apos;type&apos; A string representing the type of task. This parameter has three possible values:<itemizedlist>
<listitem><para>&apos;normal&apos;: This indicates that the task will be treated as a regular callback function, which does its processing and optionally returns HTML output. This is the default behavior which is used when &apos;type&apos; is not set.</para></listitem><listitem><para>&apos;batch&apos;: This indicates that the task function will return a batch API definition suitable for <ref refid="group__batch_1ga9ff3f18b3bdd1d62ab7ac681a22a7170" kindref="member">batch_set()</ref>. The installer will then take care of automatically running the task via batch processing.</para></listitem><listitem><para>&apos;form&apos;: This indicates that the task function will return a standard form API definition (and separately define validation and submit handlers, as appropriate). The installer will then take care of automatically directing the user through the form submission process.</para></listitem></itemizedlist>
</para></listitem><listitem><para>&apos;run&apos; A constant representing the manner in which the task will be run. This parameter has three possible values:<itemizedlist>
<listitem><para>INSTALL_TASK_RUN_IF_NOT_COMPLETED: This indicates that the task will run once during the installation of the profile. This is the default behavior which is used when &apos;run&apos; is not set.</para></listitem><listitem><para>INSTALL_TASK_SKIP: This indicates that the task will not run during the current installation page request. It can be used to skip running an installation task when certain conditions are met, even though the task may still show on the list of installation tasks presented to the user.</para></listitem><listitem><para>INSTALL_TASK_RUN_IF_REACHED: This indicates that the task will run on each installation page request that reaches it. This is rarely necessary for an installation profile to use; it is primarily used by the Drupal installer for bootstrap-related tasks.</para></listitem></itemizedlist>
</para></listitem><listitem><para>&apos;function&apos; Normally this does not need to be set, but it can be used to force the installer to call a different function when the task is run (rather than the function whose name is given by the array key). This could be used, for example, to allow the same function to be called by two different tasks.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="install_8core_8inc_1ab52bef71652d133045e4182da84a33b8" kindref="member">install_state_defaults()</ref> </para><simplesectsep/><para><ref refid="group__batch_1ga9ff3f18b3bdd1d62ab7ac681a22a7170" kindref="member">batch_set()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3458" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3458" bodyend="3517"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3c043f34f18e1c77daa341038a28e1ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_drupal_goto_alter</definition>
        <argsstring>(&amp;$path, &amp;$options, &amp;$http_response_code)</argsstring>
        <name>hook_drupal_goto_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>path</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>options</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>http_response_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the page the user is sent to by <ref refid="group__http__handling_1ga5b68d7a934713d1d623b2b32a732235d" kindref="member">drupal_goto()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>A Drupal path or a full URL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array of additional URL options to pass to <ref refid="common_8inc_1a43b2a0594431556db49df980801d8807" kindref="member">url()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$http_response_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The HTTP status code to use for the redirection. See <ref refid="group__http__handling_1ga5b68d7a934713d1d623b2b32a732235d" kindref="member">drupal_goto()</ref> for more information. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3530" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3530" bodyend="3533"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga0769a87ac64497be6b87aea2b640839c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_html_head_alter</definition>
        <argsstring>(&amp;$head_elements)</argsstring>
        <name>hook_html_head_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>head_elements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter XHTML HEAD tags before they are rendered by <ref refid="common_8inc_1acdee011d76859a5a9280209df1175188" kindref="member">drupal_get_html_head()</ref>.</para><para>Elements available to be altered are only those added using <ref refid="common_8inc_1aad501b017775a67b155fe5e441f1ad9d" kindref="member">drupal_add_html_head_link()</ref> or <ref refid="common_8inc_1a39eab16a83904b845fccc922a0c5c2cf" kindref="member">drupal_add_html_head()</ref>. CSS and JS files are handled using <ref refid="common_8inc_1a2c5bb2667efb44b02f1a105c0bfdebe5" kindref="member">drupal_add_css()</ref> and <ref refid="common_8inc_1a623370a2c3c2de0390dab078d17dca02" kindref="member">drupal_add_js()</ref>, so the head links for those files will not appear in the $head_elements array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$head_elements</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of renderable elements. Generally the values of the #attributes array will be the most likely target for changes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3547" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3547" bodyend="3554"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga71d761aa86808ce445157b271cb77a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_install_tasks_alter</definition>
        <argsstring>(&amp;$tasks, $install_state)</argsstring>
        <name>hook_install_tasks_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>tasks</declname>
        </param>
        <param>
          <type>$</type>
          <declname>install_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the full list of installation tasks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of all available installation tasks, including those provided by Drupal core. You can modify this array to change or replace any part of the Drupal installation process that occurs after the installation profile is selected. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$install_state</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of information about the current installation state. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3567" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3567" bodyend="3571"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaac5bb0122941c0b10df08d65ec358e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_file_mimetype_mapping_alter</definition>
        <argsstring>(&amp;$mapping)</argsstring>
        <name>hook_file_mimetype_mapping_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>mapping</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter MIME type mappings used to determine MIME type from a file extension.</para><para>This hook is run when <ref refid="file_8mimetypes_8inc_1a92dcd553bb93d58cd4e25c1dc64c7386" kindref="member">file_mimetype_mapping()</ref> is called. It is used to allow modules to add to or modify the default mapping from <ref refid="file_8mimetypes_8inc_1a8a8064ffcafb048d0c7dd61ba261b876" kindref="member">file_default_mimetype_mapping()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$mapping</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of mimetypes correlated to the extensions that relate to them. The array has &apos;mimetypes&apos; and &apos;extensions&apos; elements, each of which is an array.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="file_8mimetypes_8inc_1a8a8064ffcafb048d0c7dd61ba261b876" kindref="member">file_default_mimetype_mapping()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3587" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3587" bodyend="3594"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga21102314b21e33695c3967922b4d9efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_actions_delete</definition>
        <argsstring>($aid)</argsstring>
        <name>hook_actions_delete</name>
        <param>
          <type>$</type>
          <declname>aid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Executes code after an action is deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$aid</parametername>
</parameternamelist>
<parameterdescription>
<para>The action ID. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3675" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3675" bodyend="3679"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga141677d430a340c375bea9e1098a7a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_action_info_alter</definition>
        <argsstring>(&amp;$actions)</argsstring>
        <name>hook_action_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>actions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters the actions declared by another module.</para><para>Called by <ref refid="actions_8inc_1ad0dbf276d4ca1834760cffc7e1b1be53" kindref="member">actions_list()</ref> to allow modules to alter the return values from implementations of <ref refid="group__actions_1ga3df26c5d6496c91fcd0edd8648023fb4" kindref="member">hook_action_info()</ref>.</para><para><simplesect kind="see"><para>trigger_example_action_info_alter() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3689" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3689" bodyend="3691"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga1c5bd8d11e7d54242528f85434e5b260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_archiver_info</definition>
        <argsstring>()</argsstring>
        <name>hook_archiver_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare archivers to the system.</para><para>An archiver is a class that is able to package and unpackage one or more files into a single possibly compressed file. Common examples of such files are zip files and tar.gz files. All archiver classes must implement <ref refid="interface_archiver_interface" kindref="compound">ArchiverInterface</ref>.</para><para>Each entry should be keyed on a unique value, and specify three additional keys:<itemizedlist>
<listitem><para>class: The name of the PHP class for this archiver.</para></listitem><listitem><para>extensions: An array of file extensions that this archiver supports.</para></listitem><listitem><para>weight: This optional key specifies the weight of this archiver. When mapping file extensions to archivers, the first archiver by weight found that supports the requested extension will be used.</para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="group__hooks_1ga4e6f6f94acbd7a21c4a4a2cc6916356d" kindref="member">hook_archiver_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3711" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3711" bodyend="3718"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4e6f6f94acbd7a21c4a4a2cc6916356d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_archiver_info_alter</definition>
        <argsstring>(&amp;$info)</argsstring>
        <name>hook_archiver_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter archiver information declared by other modules.</para><para>See <ref refid="group__hooks_1ga1c5bd8d11e7d54242528f85434e5b260" kindref="member">hook_archiver_info()</ref> for a description of archivers and the archiver information structure.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$info</parametername>
</parameternamelist>
<parameterdescription>
<para>Archiver information to alter (return values from <ref refid="group__hooks_1ga1c5bd8d11e7d54242528f85434e5b260" kindref="member">hook_archiver_info()</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3729" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3729" bodyend="3731"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaadde7af71d0b4f827cf7aac1c88c4d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_date_format_types</definition>
        <argsstring>()</argsstring>
        <name>hook_date_format_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define additional date types.</para><para>Next to the &apos;long&apos;, &apos;medium&apos; and &apos;short&apos; date types defined in core, any module can define additional types that can be used when displaying dates, by implementing this hook. A date type is basically just a name for a date format.</para><para>Date types are used in the administration interface: a user can assign date format types defined in <ref refid="group__hooks_1ga2a190ba304193ab7752bfc489463a0d7" kindref="member">hook_date_formats()</ref> to date types defined in this hook. Once a format has been assigned by a user, the machine name of a type can be used in the <ref refid="group__format_1ga40553742a67f9c79c4669b9053fe202c" kindref="member">format_date()</ref> function to format a date using the chosen formatting.</para><para>To define a date type in a module and make sure a format has been assigned to it, without requiring a user to visit the administrative interface, use <programlisting><codeline><highlight class="normal"><sp/><ref refid="bootstrap_8inc_1a9859faa6fcd56ca6048be93dace95999" kindref="member">variable_set</ref>(</highlight><highlight class="stringliteral">&apos;date_format_&apos;</highlight><highlight class="normal"><sp/>.<sp/>$type,<sp/>$format);<sp/></highlight></codeline>
</programlisting> where $type is the machine-readable name defined here, and $format is a PHP date format string.</para><para>To avoid namespace collisions with date types defined by other modules, it is recommended that each date type starts with the module name. A date type can consist of letters, numbers and underscores.</para><para><simplesect kind="return"><para>An array of date types where the keys are the machine-readable names and the values are the human-readable labels.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1ga2a190ba304193ab7752bfc489463a0d7" kindref="member">hook_date_formats()</ref> </para><simplesectsep/><para><ref refid="group__format_1ga40553742a67f9c79c4669b9053fe202c" kindref="member">format_date()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3764" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3764" bodyend="3771"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga22573783fb241b759f4e3e2c211d13bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_date_format_types_alter</definition>
        <argsstring>(&amp;$types)</argsstring>
        <name>hook_date_format_types_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify existing date types.</para><para>Allows other modules to modify existing date types like &apos;long&apos;. Called by _system_date_format_types_build(). For instance, A module may use this hook to apply settings across all date types, such as locking all date types so they appear to be provided by the system.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$types</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of date types. Each date type is keyed by the machine-readable name and the values are associative arrays containing:<itemizedlist>
<listitem><para>is_new: Set to FALSE to override previous settings.</para></listitem><listitem><para>module: The name of the module that created the date type.</para></listitem><listitem><para>type: The machine-readable date type name.</para></listitem><listitem><para>title: The human-readable date type name.</para></listitem><listitem><para>locked: Specifies that the date type is system-provided. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3790" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3790" bodyend="3794"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2a190ba304193ab7752bfc489463a0d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_date_formats</definition>
        <argsstring>()</argsstring>
        <name>hook_date_formats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define additional date formats.</para><para>This hook is used to define the PHP date format strings that can be assigned to date types in the administrative interface. A module can provide date format strings for the core-provided date types (&apos;long&apos;, &apos;medium&apos;, and &apos;short&apos;), or for date types defined in <ref refid="group__hooks_1gaadde7af71d0b4f827cf7aac1c88c4d23" kindref="member">hook_date_format_types()</ref> by itself or another module.</para><para>Since date formats can be locale-specific, you can specify the locales that each date format string applies to. There may be more than one locale for a format. There may also be more than one format for the same locale. For example d/m/Y and Y/m/d work equally well in some locales. You may wish to define some additional date formats that aren&apos;t specific to any one locale, for example, &quot;Y m&quot;. For these cases, the &apos;locales&apos; component of the return value should be omitted.</para><para>Providing a date format here does not normally assign the format to be used with the associated date type -- a user has to choose a format for each date type in the administrative interface. There is one exception: locale initialization chooses a locale-specific format for the three core-provided types (see <ref refid="locale_8inc_1a1e11debad1c66255e8a096ef09dde589" kindref="member">locale_get_localized_date_format()</ref> for details). If your module needs to ensure that a date type it defines has a format associated with it, call <programlisting><codeline><highlight class="normal"><sp/><ref refid="bootstrap_8inc_1a9859faa6fcd56ca6048be93dace95999" kindref="member">variable_set</ref>(</highlight><highlight class="stringliteral">&apos;date_format_&apos;</highlight><highlight class="normal"><sp/>.<sp/>$type,<sp/>$format);<sp/></highlight></codeline>
</programlisting> where $type is the machine-readable name defined in <ref refid="group__hooks_1gaadde7af71d0b4f827cf7aac1c88c4d23" kindref="member">hook_date_format_types()</ref>, and $format is a PHP date format string.</para><para><simplesect kind="return"><para>A list of date formats to offer as choices in the administrative interface. Each date format is a keyed array consisting of three elements:<itemizedlist>
<listitem><para>&apos;type&apos;: The date type name that this format can be used with, as declared in an implementation of <ref refid="group__hooks_1gaadde7af71d0b4f827cf7aac1c88c4d23" kindref="member">hook_date_format_types()</ref>.</para></listitem><listitem><para>&apos;format&apos;: A PHP date format string to use when formatting dates. It can contain any of the formatting options described at <ulink url="http://php.net/manual/en/function.date.php">http://php.net/manual/en/function.date.php</ulink></para></listitem><listitem><para>&apos;locales&apos;: (optional) An array of 2 and 5 character locale codes, defining which locales this format applies to (for example, &apos;en&apos;, &apos;en-us&apos;, etc.). If your date format is not language-specific, leave this array empty.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1gaadde7af71d0b4f827cf7aac1c88c4d23" kindref="member">hook_date_format_types()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3838" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3838" bodyend="3856"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga0adddc1a49ca34ded3f081894de9d4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_date_formats_alter</definition>
        <argsstring>(&amp;$formats)</argsstring>
        <name>hook_date_formats_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>formats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter date formats declared by another module.</para><para>Called by _system_date_format_types_build() to allow modules to alter the return values from implementations of <ref refid="group__hooks_1ga2a190ba304193ab7752bfc489463a0d7" kindref="member">hook_date_formats()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3864" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3864" bodyend="3868"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaee6a1d02d5046d47069a8e385385ef15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_page_delivery_callback_alter</definition>
        <argsstring>(&amp;$callback)</argsstring>
        <name>hook_page_delivery_callback_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters the delivery callback used to send the result of the page callback to the browser.</para><para>Called by <ref refid="common_8inc_1a1537b4ccc064fb7d8106effcac8caac3" kindref="member">drupal_deliver_page()</ref> to allow modules to alter how the page is delivered to the browser.</para><para>This hook is intended for altering the delivery callback based on information unrelated to the path of the page accessed. For example, it can be used to set the delivery callback based on a HTTP request header (as shown in the code sample). To specify a delivery callback based on path information, use <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref> or <ref refid="group__hooks_1ga4c37deddcf48dbfe6f3081df1652f6fa" kindref="member">hook_menu_alter()</ref>.</para><para>This hook can also be used as an API function that can be used to explicitly set the delivery callback from some other function. For example, for a module named MODULE: <programlisting><codeline><highlight class="normal"><sp/>function<sp/>MODULE_page_delivery_callback_alter(&amp;$callback,<sp/>$set<sp/>=<sp/>FALSE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>$stored_callback;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>($set)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>$stored_callback<sp/>=<sp/>$callback;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>elseif<sp/>(isset($stored_callback))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>$callback<sp/>=<sp/>$stored_callback;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>function<sp/>SOMEWHERE_ELSE()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>$desired_delivery_callback<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;foo&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>MODULE_page_delivery_callback_alter($desired_delivery_callback,<sp/>TRUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of a function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="common_8inc_1a1537b4ccc064fb7d8106effcac8caac3" kindref="member">drupal_deliver_page()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3906" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3906" bodyend="3913"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga710e94821a231299d36b2405008121d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_system_themes_page_alter</definition>
        <argsstring>(&amp;$theme_groups)</argsstring>
        <name>hook_system_themes_page_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>theme_groups</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters theme operation links.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$theme_groups</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing groups of themes.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="system_8admin_8inc_1a4e0d7dd2d258e827cc3195b95151cd59" kindref="member">system_themes_page()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3923" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3923" bodyend="3930"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga32da9c3f1486c293818f30fa4037e33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_url_inbound_alter</definition>
        <argsstring>(&amp;$path, $original_path, $path_language)</argsstring>
        <name>hook_url_inbound_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>path</declname>
        </param>
        <param>
          <type>$</type>
          <declname>original_path</declname>
        </param>
        <param>
          <type>$</type>
          <declname>path_language</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters inbound URL requests.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path being constructed, which, if a path alias, has been resolved to a Drupal path by the database, and which also may have been altered by other modules before this one. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$original_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The original path, before being checked for path aliases or altered by any modules. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$path_language</parametername>
</parameternamelist>
<parameterdescription>
<para>The language of the path.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="path_8inc_1a59781811cbcdef4c64ccd1d55e1ae9f8" kindref="member">drupal_get_normal_path()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3947" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3947" bodyend="3953"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaae456dc4459a029bc099079814ded61f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_url_outbound_alter</definition>
        <argsstring>(&amp;$path, &amp;$options, $original_path)</argsstring>
        <name>hook_url_outbound_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>path</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>options</declname>
        </param>
        <param>
          <type>$</type>
          <declname>original_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters outbound URLs.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>The outbound path to alter, not adjusted for path aliases yet. It won&apos;t be adjusted for path aliases until all modules are finished altering it, thus being consistent with hook_url_alter_inbound(), which adjusts for all path aliases before allowing modules to alter it. This may have been altered by other modules before this one. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of URL options for the URL so elements such as a fragment or a query string can be added to the URL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$original_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The original path, before being altered by any modules.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="common_8inc_1a43b2a0594431556db49df980801d8807" kindref="member">url()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="3972" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="3972" bodyend="3986"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga877faf93c9acc42bb54cbd01cd8d9453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_username_alter</definition>
        <argsstring>(&amp;$name, $account)</argsstring>
        <name>hook_username_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>name</declname>
        </param>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the username that is displayed for a user.</para><para>Called by <ref refid="group__format_1ga7124a026ecfacc51c57a75fcc083f136" kindref="member">format_username()</ref> to allow modules to alter the username that&apos;s displayed. Can be used to ensure user privacy in situations where $account-&gt;name is too revealing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$name</parametername>
</parameternamelist>
<parameterdescription>
<para>The string that <ref refid="group__format_1ga7124a026ecfacc51c57a75fcc083f136" kindref="member">format_username()</ref> will return.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The account object passed to <ref refid="group__format_1ga7124a026ecfacc51c57a75fcc083f136" kindref="member">format_username()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__format_1ga7124a026ecfacc51c57a75fcc083f136" kindref="member">format_username()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4003" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4003" bodyend="4008"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3bfd87d9a19b2397b0f970e1cff7ea4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_tokens</definition>
        <argsstring>($type, $tokens, array $data=array(), array $options=array())</argsstring>
        <name>hook_tokens</name>
        <param>
          <type>$</type>
          <declname>type</declname>
        </param>
        <param>
          <type>$</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>array $</type>
          <declname>data</declname>
          <defval>array()</defval>
        </param>
        <param>
          <type>array $</type>
          <declname>options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide replacement values for placeholder tokens.</para><para>This hook is invoked when someone calls <ref refid="includes_2token_8inc_1a47eb294b05ca8d04439a9a82ccc4d82a" kindref="member">token_replace()</ref>. That function first scans the text for [type:token] patterns, and splits the needed tokens into groups by type. Then <ref refid="group__hooks_1ga3bfd87d9a19b2397b0f970e1cff7ea4f" kindref="member">hook_tokens()</ref> is invoked on each token-type group, allowing your module to respond by providing replacement text for any of the tokens in the group that your module knows how to process.</para><para>A module implementing this hook should also implement <ref refid="group__hooks_1gab868597197cf36911f95dcd29ae0b954" kindref="member">hook_token_info()</ref> in order to list its available tokens on editing screens.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$type</parametername>
</parameternamelist>
<parameterdescription>
<para>The machine-readable name of the type (group) of token being replaced, such as &apos;node&apos;, &apos;user&apos;, or another type defined by a <ref refid="group__hooks_1gab868597197cf36911f95dcd29ae0b954" kindref="member">hook_token_info()</ref> implementation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of tokens to be replaced. The keys are the machine-readable token names, and the values are the raw [type:token] strings that appeared in the original text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$data</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) An associative array of data objects to be used when generating replacement values, as supplied in the $data parameter to <ref refid="includes_2token_8inc_1a47eb294b05ca8d04439a9a82ccc4d82a" kindref="member">token_replace()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) An associative array of options for token replacement; see <ref refid="includes_2token_8inc_1a47eb294b05ca8d04439a9a82ccc4d82a" kindref="member">token_replace()</ref> for possible values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An associative array of replacement values, keyed by the raw [type:token] strings from the original text.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1gab868597197cf36911f95dcd29ae0b954" kindref="member">hook_token_info()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaeeea438e74b29e5603f0ed3f1967a257" kindref="member">hook_tokens_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4044" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4044" bodyend="4098"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaeeea438e74b29e5603f0ed3f1967a257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_tokens_alter</definition>
        <argsstring>(array &amp;$replacements, array $context)</argsstring>
        <name>hook_tokens_alter</name>
        <param>
          <type>array &amp;$</type>
          <declname>replacements</declname>
        </param>
        <param>
          <type>array $</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter replacement values for placeholder tokens.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$replacements</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array of replacements returned by <ref refid="group__hooks_1ga3bfd87d9a19b2397b0f970e1cff7ea4f" kindref="member">hook_tokens()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$context</parametername>
</parameternamelist>
<parameterdescription>
<para>The context in which <ref refid="group__hooks_1ga3bfd87d9a19b2397b0f970e1cff7ea4f" kindref="member">hook_tokens()</ref> was called. An associative array with the following keys, which have the same meaning as the corresponding parameters of <ref refid="group__hooks_1ga3bfd87d9a19b2397b0f970e1cff7ea4f" kindref="member">hook_tokens()</ref>:<itemizedlist>
<listitem><para>&apos;type&apos;</para></listitem><listitem><para>&apos;tokens&apos;</para></listitem><listitem><para>&apos;data&apos;</para></listitem><listitem><para>&apos;options&apos;</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga3bfd87d9a19b2397b0f970e1cff7ea4f" kindref="member">hook_tokens()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4116" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4116" bodyend="4138"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab868597197cf36911f95dcd29ae0b954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_token_info</definition>
        <argsstring>()</argsstring>
        <name>hook_token_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide information about available placeholder tokens and token types.</para><para>Tokens are placeholders that can be put into text by using the syntax [type:token], where type is the machine-readable name of a token type, and token is the machine-readable name of a token within this group. This hook provides a list of types and tokens to be displayed on text editing screens, so that people editing text can see what their token options are.</para><para>The actual token replacement is done by <ref refid="includes_2token_8inc_1a47eb294b05ca8d04439a9a82ccc4d82a" kindref="member">token_replace()</ref>, which invokes <ref refid="group__hooks_1ga3bfd87d9a19b2397b0f970e1cff7ea4f" kindref="member">hook_tokens()</ref>. Your module will need to implement that hook in order to generate token replacements from the tokens defined here.</para><para><simplesect kind="return"><para>An associative array of available tokens and token types. The outer array has two components:<itemizedlist>
<listitem><para>types: An associative array of token types (groups). Each token type is an associative array with the following components:<itemizedlist>
<listitem><para>name: The translated human-readable short name of the token type.</para></listitem><listitem><para>description: A translated longer description of the token type.</para></listitem><listitem><para>needs-data: The type of data that must be provided to <ref refid="includes_2token_8inc_1a47eb294b05ca8d04439a9a82ccc4d82a" kindref="member">token_replace()</ref> in the $data argument (i.e., the key name in $data) in order for tokens of this type to be used in the $text being processed. For instance, if the token needs a node object, &apos;needs-data&apos; should be &apos;node&apos;, and to use this token in <ref refid="includes_2token_8inc_1a47eb294b05ca8d04439a9a82ccc4d82a" kindref="member">token_replace()</ref>, the caller needs to supply a node object as $data[&apos;node&apos;]. Some token data can also be supplied indirectly; for instance, a node object in $data supplies a user object (the author of the node), allowing user tokens to be used when only a node data object is supplied.</para></listitem></itemizedlist>
</para></listitem><listitem><para>tokens: An associative array of tokens. The outer array is keyed by the group name (the same key as in the types array). Within each group of tokens, each token item is keyed by the machine name of the token, and each token item has the following components:<itemizedlist>
<listitem><para>name: The translated human-readable short name of the token.</para></listitem><listitem><para>description: A translated longer description of the token.</para></listitem><listitem><para>type (optional): A &apos;needs-data&apos; data type supplied by this token, which should match a &apos;needs-data&apos; value from another token type. For example, the node author token provides a user object, which can then be used for token replacement data in <ref refid="includes_2token_8inc_1a47eb294b05ca8d04439a9a82ccc4d82a" kindref="member">token_replace()</ref> without having to supply a separate user object.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group__hooks_1ga87392434688c9f52c4066de4ab9d73a8" kindref="member">hook_token_info_alter()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga3bfd87d9a19b2397b0f970e1cff7ea4f" kindref="member">hook_tokens()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4184" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4184" bodyend="4221"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga87392434688c9f52c4066de4ab9d73a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_token_info_alter</definition>
        <argsstring>(&amp;$data)</argsstring>
        <name>hook_token_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the metadata about available placeholder tokens and token types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$data</parametername>
</parameternamelist>
<parameterdescription>
<para>The associative array of token definitions from <ref refid="group__hooks_1gab868597197cf36911f95dcd29ae0b954" kindref="member">hook_token_info()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gab868597197cf36911f95dcd29ae0b954" kindref="member">hook_token_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4231" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4231" bodyend="4248"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gafb9b375716a0ad02d35250dc252b3c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_updater_info</definition>
        <argsstring>()</argsstring>
        <name>hook_updater_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provide information on Updaters (classes that can update Drupal).</para><para>An <ref refid="class_updater" kindref="compound">Updater</ref> is a class that knows how to update various parts of the Drupal file system, for example to update modules that have newer releases, or to install a new theme.</para><para><simplesect kind="return"><para>An associative array of information about the updater(s) being provided. This array is keyed by a unique identifier for each updater, and the values are subarrays that can contain the following keys:<itemizedlist>
<listitem><para>class: The name of the PHP class which implements this updater.</para></listitem><listitem><para>name: Human-readable name of this updater.</para></listitem><listitem><para>weight: Controls what order the <ref refid="class_updater" kindref="compound">Updater</ref> classes are consulted to decide which one should handle a given task. When an update task is being run, the system will loop through all the <ref refid="class_updater" kindref="compound">Updater</ref> classes defined in this registry in weight order and let each class respond to the task and decide if each <ref refid="class_updater" kindref="compound">Updater</ref> wants to handle the task. In general, this doesn&apos;t matter, but if you need to override an existing <ref refid="class_updater" kindref="compound">Updater</ref>, make sure your <ref refid="class_updater" kindref="compound">Updater</ref> has a lighter weight so that it comes first.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="common_8inc_1a0fa53aa7b4cdefaccb5283da37ad75df" kindref="member">drupal_get_updaters()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaf697fc432c34c994712849afa70c1b89" kindref="member">hook_updater_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4302" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4302" bodyend="4315"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf697fc432c34c994712849afa70c1b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_updater_info_alter</definition>
        <argsstring>(&amp;$updaters)</argsstring>
        <name>hook_updater_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>updaters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the <ref refid="class_updater" kindref="compound">Updater</ref> information array.</para><para>An <ref refid="class_updater" kindref="compound">Updater</ref> is a class that knows how to update various parts of the Drupal file system, for example to update modules that have newer releases, or to install a new theme.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>array</parametertype>
<parametername>$updaters</parametername>
</parameternamelist>
<parameterdescription>
<para>Associative array of updaters as defined through <ref refid="group__hooks_1gafb9b375716a0ad02d35250dc252b3c99" kindref="member">hook_updater_info()</ref>. Alter this array directly.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="common_8inc_1a0fa53aa7b4cdefaccb5283da37ad75df" kindref="member">drupal_get_updaters()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gafb9b375716a0ad02d35250dc252b3c99" kindref="member">hook_updater_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4331" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4331" bodyend="4335"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaceba413e5b878b5f04668d1aa4fcb804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_countries_alter</definition>
        <argsstring>(&amp;$countries)</argsstring>
        <name>hook_countries_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>countries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the default country list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$countries</parametername>
</parameternamelist>
<parameterdescription>
<para>The associative array of countries keyed by ISO 3166-1 country code.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="locale_8inc_1a53c04ad515e4f3eace3532fcdbedb834" kindref="member">country_get_list()</ref> </para><simplesectsep/><para><ref refid="iso_8inc_1aff85d3f51026d7fd9d19b7db14d85c0d" kindref="member">_country_get_predefined_list()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4346" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4346" bodyend="4349"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga3096be11aad61c8b342ade94789f6137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_menu_site_status_alter</definition>
        <argsstring>(&amp;$menu_site_status, $path)</argsstring>
        <name>hook_menu_site_status_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>menu_site_status</declname>
        </param>
        <param>
          <type>$</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Control site status before menu dispatching.</para><para>The hook is called after checking whether the site is offline but before the current router item is retrieved and executed by <ref refid="group__menu_1gae33bae24fcac6126aa272d1c437f947c" kindref="member">menu_execute_active_handler()</ref>. If the site is in offline mode, $menu_site_status is set to MENU_SITE_OFFLINE.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$menu_site_status</parametername>
</parameternamelist>
<parameterdescription>
<para>Supported values are MENU_SITE_OFFLINE, MENU_ACCESS_DENIED, MENU_NOT_FOUND and MENU_SITE_ONLINE. Any other value than MENU_SITE_ONLINE will skip the default menu handling system and be passed for delivery to <ref refid="common_8inc_1a1537b4ccc064fb7d8106effcac8caac3" kindref="member">drupal_deliver_page()</ref> with a NULL $default_delivery_callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$path</parametername>
</parameternamelist>
<parameterdescription>
<para>Contains the system path that is going to be loaded. This is read only, use <ref refid="group__hooks_1ga32da9c3f1486c293818f30fa4037e33f" kindref="member">hook_url_inbound_alter()</ref> to change the path. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4369" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4369" bodyend="4374"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gacecdedb61704444382417e6ec8da240d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_filetransfer_info</definition>
        <argsstring>()</argsstring>
        <name>hook_filetransfer_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register information about <ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> classes provided by a module.</para><para>The <ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> class allows transfering files over a specific type of connection. Core provides classes for FTP and SSH. Contributed modules are free to extend the <ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> base class to add other connection types, and if these classes are registered via <ref refid="group__hooks_1gacecdedb61704444382417e6ec8da240d" kindref="member">hook_filetransfer_info()</ref>, those connection types will be available to site administrators using the Update manager when they are redirected to the <ref refid="authorize_8php" kindref="compound">authorize.php</ref> script to authorize the file operations.</para><para><simplesect kind="return"><para>array Nested array of information about <ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> classes. Each key is a <ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> type (not human readable, used for form elements and variable names, etc), and the values are subarrays that define properties of that type. The keys in each subarray are:<itemizedlist>
<listitem><para>&apos;title&apos;: Required. The human-readable name of the connection type.</para></listitem><listitem><para>&apos;class&apos;: Required. The name of the <ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> class. The constructor will always be passed the full path to the root of the site that should be used to restrict where file transfer operations can occur (the $jail) and an array of settings values returned by the settings form.</para></listitem><listitem><para>&apos;file&apos;: Required. The include file containing the <ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> class. This should be a separate .inc file, not just the .module file, so that the minimum possible code is loaded when <ref refid="authorize_8php" kindref="compound">authorize.php</ref> is running.</para></listitem><listitem><para>&apos;file path&apos;: Optional. The directory (relative to the Drupal root) where the include file lives. If not defined, defaults to the base directory of the module implementing the hook.</para></listitem><listitem><para>&apos;weight&apos;: Optional. Integer weight used for sorting connection types on the <ref refid="authorize_8php" kindref="compound">authorize.php</ref> form.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> </para><simplesectsep/><para><ref refid="authorize_8php" kindref="compound">authorize.php</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga96aeda9756a48de73dacbf8bf1745266" kindref="member">hook_filetransfer_info_alter()</ref> </para><simplesectsep/><para><ref refid="common_8inc_1a9530d4fd3eee97770ebaaa5103d24bf4" kindref="member">drupal_get_filetransfer_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4411" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4411" bodyend="4419"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga96aeda9756a48de73dacbf8bf1745266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_filetransfer_info_alter</definition>
        <argsstring>(&amp;$filetransfer_info)</argsstring>
        <name>hook_filetransfer_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>filetransfer_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the <ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> class registry.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>array</parametertype>
<parametername>$filetransfer_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a nested array containing information about the <ref refid="class_file_transfer" kindref="compound">FileTransfer</ref> class registry.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gacecdedb61704444382417e6ec8da240d" kindref="member">hook_filetransfer_info()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" line="4430" bodyfile="/srv/www/htdocs/drupal-7-test/modules/system/system.api.php" bodystart="4430" bodyend="4437"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2426242aecd7bc83f3201d2e87093b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_vocabulary_load</definition>
        <argsstring>($vocabularies)</argsstring>
        <name>hook_taxonomy_vocabulary_load</name>
        <param>
          <type>$</type>
          <declname>vocabularies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on taxonomy vocabularies when loaded.</para><para>Modules implementing this hook can act on the vocabulary objects before they are returned by taxonomy_vocabulary_load_multiple().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$vocabulary</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of taxonomy vocabulary objects. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="22" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="22" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga8ec7aaf710eacd639ce92443139089d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_vocabulary_presave</definition>
        <argsstring>($vocabulary)</argsstring>
        <name>hook_taxonomy_vocabulary_presave</name>
        <param>
          <type>$</type>
          <declname>vocabulary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on taxonomy vocabularies before they are saved.</para><para>Modules implementing this hook can act on the vocabulary object before it is inserted or updated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$vocabulary</parametername>
</parameternamelist>
<parameterdescription>
<para>A taxonomy vocabulary object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="38" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga438bdb494fe8b75625b9451e94165065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_vocabulary_insert</definition>
        <argsstring>($vocabulary)</argsstring>
        <name>hook_taxonomy_vocabulary_insert</name>
        <param>
          <type>$</type>
          <declname>vocabulary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on taxonomy vocabularies when inserted.</para><para>Modules implementing this hook can act on the vocabulary object when saved to the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$vocabulary</parametername>
</parameternamelist>
<parameterdescription>
<para>A taxonomy vocabulary object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="51" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf7e614327d1d3826d208fd6528df4a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_vocabulary_update</definition>
        <argsstring>($vocabulary)</argsstring>
        <name>hook_taxonomy_vocabulary_update</name>
        <param>
          <type>$</type>
          <declname>vocabulary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on taxonomy vocabularies when updated.</para><para>Modules implementing this hook can act on the vocabulary object when updated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$vocabulary</parametername>
</parameternamelist>
<parameterdescription>
<para>A taxonomy vocabulary object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="65" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga76a12ce251cd46c0b33f73a190f77d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_vocabulary_delete</definition>
        <argsstring>($vocabulary)</argsstring>
        <name>hook_taxonomy_vocabulary_delete</name>
        <param>
          <type>$</type>
          <declname>vocabulary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to the deletion of taxonomy vocabularies.</para><para>Modules implementing this hook can respond to the deletion of taxonomy vocabularies from the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$vocabulary</parametername>
</parameternamelist>
<parameterdescription>
<para>A taxonomy vocabulary object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="81" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga043d5ebe3d15a7ff5a84e8016a96467f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_term_load</definition>
        <argsstring>($terms)</argsstring>
        <name>hook_taxonomy_term_load</name>
        <param>
          <type>$</type>
          <declname>terms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on taxonomy terms when loaded.</para><para>Modules implementing this hook can act on the term objects returned by taxonomy_term_load_multiple().</para><para>For performance reasons, information to be added to term objects should be loaded in a single query for all terms where possible.</para><para>Since terms are stored and retrieved from cache during a page request, avoid altering properties provided by the {taxonomy_term_data} table, since this may affect the way results are loaded from cache in subsequent calls.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$terms</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of term objects, indexed by tid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="103" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2dad7857b3613834314f694e183e1fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_term_presave</definition>
        <argsstring>($term)</argsstring>
        <name>hook_taxonomy_term_presave</name>
        <param>
          <type>$</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on taxonomy terms before they are saved.</para><para>Modules implementing this hook can act on the term object before it is inserted or updated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$term</parametername>
</parameternamelist>
<parameterdescription>
<para>A term object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="119" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gabab3537accc8ce17fe2cd0f73f4bb817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_term_insert</definition>
        <argsstring>($term)</argsstring>
        <name>hook_taxonomy_term_insert</name>
        <param>
          <type>$</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on taxonomy terms when inserted.</para><para>Modules implementing this hook can act on the term object when saved to the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$term</parametername>
</parameternamelist>
<parameterdescription>
<para>A taxonomy term object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="132" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="132" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga5c2477516245f0b9d6b04b8a8d227592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_term_update</definition>
        <argsstring>($term)</argsstring>
        <name>hook_taxonomy_term_update</name>
        <param>
          <type>$</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on taxonomy terms when updated.</para><para>Modules implementing this hook can act on the term object when updated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$term</parametername>
</parameternamelist>
<parameterdescription>
<para>A taxonomy term object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="155" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="155" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab55fa1f290f3d43ea59795123154cf32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_term_delete</definition>
        <argsstring>($term)</argsstring>
        <name>hook_taxonomy_term_delete</name>
        <param>
          <type>$</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to the deletion of taxonomy terms.</para><para>Modules implementing this hook can respond to the deletion of taxonomy terms from the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$term</parametername>
</parameternamelist>
<parameterdescription>
<para>A taxonomy term object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="180" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gad02862e477fbc925f70a7f91d2916820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_taxonomy_term_view_alter</definition>
        <argsstring>(&amp;$build)</argsstring>
        <name>hook_taxonomy_term_view_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>build</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the results of taxonomy_term_view().</para><para>This hook is called after the content has been assembled in a structured array and may be used for doing processing which requires that the complete taxonomy term content structure has been built.</para><para>If the module wishes to act on the rendered HTML of the term rather than the structured content array, it may use this hook to add a #post_render callback. Alternatively, it could also implement hook_preprocess_taxonomy_term(). See <ref refid="common_8inc_1a05798b44e8d6c496d4bee5cc32fa7851" kindref="member">drupal_render()</ref> and <ref refid="includes_2theme_8inc_1a7c25609a935874541a19657affd30fff" kindref="member">theme()</ref> documentation respectively for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$build</parametername>
</parameternamelist>
<parameterdescription>
<para>A renderable array representing the node content.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga2c2be6c70815b426f0eb13b0b68edb40" kindref="member">hook_entity_view_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" line="202" bodyfile="/srv/www/htdocs/drupal-7-test/modules/taxonomy/taxonomy.api.php" bodystart="202" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga6796483976be1fa22589582444c6fdbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_trigger_info</definition>
        <argsstring>()</argsstring>
        <name>hook_trigger_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare triggers (events) for users to assign actions to.</para><para>This hook is used by the trigger module to create a list of triggers (events) that users can assign actions to. Your module is responsible for detecting that the events have occurred, calling trigger_get_assigned_actions() to find out which actions the user has associated with your trigger, and then calling <ref refid="group__actions_1gacfece93b3453da7c572057dde3453122" kindref="member">actions_do()</ref> to fire off the actions.</para><para><simplesect kind="return"><para>A nested associative array.<itemizedlist>
<listitem><para>The outermost key is the name of the module that is defining the triggers. This will be used to create a local task (tab) in the trigger module&apos;s user interface. A contrib module may supply a trigger for a core module by giving the core module&apos;s name as the key. For example, you could use the &apos;node&apos; key to add a node-related trigger.<itemizedlist>
<listitem><para>Within each module, each individual trigger is keyed by a hook name describing the particular trigger (this is not visible to the user, but can be used by your module for identification).<itemizedlist>
<listitem><para>Each trigger is described by an associative array. Currently, the only key-value pair is &apos;label&apos;, which contains a translated human-readable description of the triggering event. For example, the trigger set for the &apos;node&apos; module has &apos;node&apos; as the outermost key and defines triggers for &apos;node_insert&apos;, &apos;node_update&apos;, &apos;node_delete&apos; etc. that fire when a node is saved, updated, etc.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="group__actions_1ga3df26c5d6496c91fcd0edd8648023fb4" kindref="member">hook_action_info()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gae39072ea60b8856675663f51d5355d57" kindref="member">hook_trigger_info_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/trigger/trigger.api.php" line="42" bodyfile="/srv/www/htdocs/drupal-7-test/modules/trigger/trigger.api.php" bodystart="42" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gae39072ea60b8856675663f51d5355d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_trigger_info_alter</definition>
        <argsstring>(&amp;$triggers)</argsstring>
        <name>hook_trigger_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>triggers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter triggers declared by <ref refid="group__hooks_1ga6796483976be1fa22589582444c6fdbb" kindref="member">hook_trigger_info()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$triggers</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of trigger information returned by <ref refid="group__hooks_1ga6796483976be1fa22589582444c6fdbb" kindref="member">hook_trigger_info()</ref> implementations. Modify this array in place. See <ref refid="group__hooks_1ga6796483976be1fa22589582444c6fdbb" kindref="member">hook_trigger_info()</ref> for information on what this might contain. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/trigger/trigger.api.php" line="72" bodyfile="/srv/www/htdocs/drupal-7-test/modules/trigger/trigger.api.php" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaed261bce503f9437df042668cc070bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_update_projects_alter</definition>
        <argsstring>(&amp;$projects)</argsstring>
        <name>hook_update_projects_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>projects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the list of projects before fetching data and comparing versions.</para><para>Most modules will never need to implement this hook. It is for advanced interaction with the update status module: mere mortals need not apply. The primary use-case for this hook is to add projects to the list, for example, to provide update status data on disabled modules and themes. A contributed module might want to hide projects from the list, for example, if there is a site-specific module that doesn&apos;t have any official releases, that module could remove itself from this list to avoid &quot;No available
 releases found&quot; warnings on the available updates report. In rare cases, a module might want to alter the data associated with a project already in the list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$projects</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to an array of the projects installed on the system. This includes all the metadata documented in the comments below for each project (either module or theme) that is currently enabled. The array is initially populated inside <ref refid="update_8compare_8inc_1a7e1ea49d91f2d2b81b8101d481d10300" kindref="member">update_get_projects()</ref> with the help of <ref refid="update_8compare_8inc_1a37eb8774bbb961b5d1113c116aba2f3b" kindref="member">_update_process_info_list()</ref>, so look there for examples of how to populate the array with real values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="update_8compare_8inc_1a7e1ea49d91f2d2b81b8101d481d10300" kindref="member">update_get_projects()</ref> </para><simplesectsep/><para><ref refid="update_8compare_8inc_1a37eb8774bbb961b5d1113c116aba2f3b" kindref="member">_update_process_info_list()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/update/update.api.php" line="38" bodyfile="/srv/www/htdocs/drupal-7-test/modules/update/update.api.php" bodystart="38" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga62b22dcd7e2e14b061cedd46a7862352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_update_status_alter</definition>
        <argsstring>(&amp;$projects)</argsstring>
        <name>hook_update_status_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>projects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the information about available updates for projects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$projects</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to an array of information about available updates to each project installed on the system.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="update_8compare_8inc_1aa0663304dc4634e4109c896f214ea791" kindref="member">update_calculate_project_data()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/update/update.api.php" line="86" bodyfile="/srv/www/htdocs/drupal-7-test/modules/update/update.api.php" bodystart="86" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga68a5dd6bec824909f46d9458991eaf42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_verify_update_archive</definition>
        <argsstring>($project, $archive_file, $directory)</argsstring>
        <name>hook_verify_update_archive</name>
        <param>
          <type>$</type>
          <declname>project</declname>
        </param>
        <param>
          <type>$</type>
          <declname>archive_file</declname>
        </param>
        <param>
          <type>$</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify an archive after it has been downloaded and extracted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>string</parametertype>
<parametername>$project</parametername>
</parameternamelist>
<parameterdescription>
<para>The short name of the project that has been downloaded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>string</parametertype>
<parametername>$archive_file</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename of the unextracted archive. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>string</parametertype>
<parametername>$directory</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory that the archive was extracted into.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If there are any problems, return an array of error messages. If there are no problems, return an empty array.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__update__manager__file_1ga8c352241e56ce6de6b1064725d84801b" kindref="member">update_manager_archive_verify()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/update/update.api.php" line="122" bodyfile="/srv/www/htdocs/drupal-7-test/modules/update/update.api.php" bodystart="122" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga81027843e38de3a899fa6e72f876d6b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_load</definition>
        <argsstring>($users)</argsstring>
        <name>hook_user_load</name>
        <param>
          <type>$</type>
          <declname>users</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on user objects when loaded from the database.</para><para>Due to the static cache in user_load_multiple() you should not use this hook to modify the user properties returned by the {users} table itself since this may result in unreliable results when loading from cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$users</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of user objects, indexed by uid.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>user_load_multiple() </para><simplesectsep/><para>profile_user_load() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="26" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2c0755857e486e8a770b44b496da9929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_delete</definition>
        <argsstring>($account)</argsstring>
        <name>hook_user_delete</name>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Respond to user deletion.</para><para>This hook is invoked from user_delete_multiple() before <ref refid="group__field__attach_1gac2e3658c9c02d0d0e71359f9ef2f207a" kindref="member">field_attach_delete()</ref> is called and before users are actually removed from the database.</para><para>Modules should additionally implement <ref refid="group__hooks_1gad6223ddd2f0f52c331df8a3315d9a41e" kindref="member">hook_user_cancel()</ref> to process stored user data for other account cancellation methods.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The account that is being deleted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>user_delete_multiple() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="47" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gad6223ddd2f0f52c331df8a3315d9a41e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_cancel</definition>
        <argsstring>($edit, $account, $method)</argsstring>
        <name>hook_user_cancel</name>
        <param>
          <type>$</type>
          <declname>edit</declname>
        </param>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <param>
          <type>$</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on user account cancellations.</para><para>This hook is invoked from user_cancel() before a user account is canceled. Depending on the account cancellation method, the module should either do nothing, unpublish content, or anonymize content. See <ref refid="user_8pages_8inc_1a11f0201b4e77086622c55fd3ed13bb93" kindref="member">user_cancel_methods()</ref> for the list of default account cancellation methods provided by User module. Modules may add further methods via <ref refid="group__hooks_1gadbac37235bb01361bf8b3d375ea417a5" kindref="member">hook_user_cancel_methods_alter()</ref>.</para><para>This hook is NOT invoked for the &apos;user_cancel_delete&apos; account cancellation method. To react on this method, implement <ref refid="group__hooks_1ga2c0755857e486e8a770b44b496da9929" kindref="member">hook_user_delete()</ref> instead.</para><para>Expensive operations should be added to the global account cancellation batch by using <ref refid="group__batch_1ga9ff3f18b3bdd1d62ab7ac681a22a7170" kindref="member">batch_set()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$edit</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of form values submitted by the user. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user object on which the operation is being performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$method</parametername>
</parameternamelist>
<parameterdescription>
<para>The account cancellation method.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="user_8pages_8inc_1a11f0201b4e77086622c55fd3ed13bb93" kindref="member">user_cancel_methods()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gadbac37235bb01361bf8b3d375ea417a5" kindref="member">hook_user_cancel_methods_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="78" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="78" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gadbac37235bb01361bf8b3d375ea417a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_cancel_methods_alter</definition>
        <argsstring>(&amp;$methods)</argsstring>
        <name>hook_user_cancel_methods_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>methods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify account cancellation methods.</para><para>By implementing this hook, modules are able to add, customize, or remove account cancellation methods. All defined methods are turned into radio button form elements by <ref refid="user_8pages_8inc_1a11f0201b4e77086622c55fd3ed13bb93" kindref="member">user_cancel_methods()</ref> after this hook is invoked. The following properties can be defined for each method:<itemizedlist>
<listitem><para>title: The radio button&apos;s title.</para></listitem><listitem><para>description: (optional) A description to display on the confirmation form if the user is not allowed to select the account cancellation method. The description is NOT used for the radio button, but instead should provide additional explanation to the user seeking to cancel their account.</para></listitem><listitem><para>access: (optional) A boolean value indicating whether the user can access a method. If #access is defined, the method cannot be configured as default method.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$methods</parametername>
</parameternamelist>
<parameterdescription>
<para>An array containing user account cancellation methods, keyed by method id.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="user_8pages_8inc_1a11f0201b4e77086622c55fd3ed13bb93" kindref="member">user_cancel_methods()</ref> </para><simplesectsep/><para><ref refid="group__forms_1ga75a9df042449e7fc294c418083052114" kindref="member">user_cancel_confirm_form()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="135" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="135" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga1b2c2630f79b64b0673d0a9a0983f447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_operations</definition>
        <argsstring>()</argsstring>
        <name>hook_user_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add mass user operations.</para><para>This hook enables modules to inject custom operations into the mass operations dropdown found at admin/people, by associating a callback function with the operation, which is called when the form is submitted. The callback function receives one initial argument, which is an array of the checked users.</para><para><simplesect kind="return"><para>An array of operations. Each operation is an associative array that may contain the following key-value pairs:<itemizedlist>
<listitem><para>&quot;label&quot;: Required. The label for the operation, displayed in the dropdown menu.</para></listitem><listitem><para>&quot;callback&quot;: Required. The function to call for the operation.</para></listitem><listitem><para>&quot;callback arguments&quot;: Optional. An array of additional arguments to pass to the callback function. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="168" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="168" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga166a3fe9d203a99560d10413a880ed08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_categories</definition>
        <argsstring>()</argsstring>
        <name>hook_user_categories</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a list of user setting or profile information categories.</para><para><simplesect kind="return"><para>An array of associative arrays. Each inner array has elements:<itemizedlist>
<listitem><para>&quot;name&quot;: The internal name of the category.</para></listitem><listitem><para>&quot;title&quot;: The human-readable, localized name of the category.</para></listitem><listitem><para>&quot;weight&quot;: An integer specifying the category&apos;s sort ordering.</para></listitem><listitem><para>&quot;access callback&quot;: Name of the access callback function to use to determine whether the user can edit the category. Defaults to using user_edit_access(). See <ref refid="group__hooks_1ga5c95244fea59b25666e409759e133ded" kindref="member">hook_menu()</ref> for more information on access callbacks.</para></listitem><listitem><para>&quot;access arguments&quot;: Arguments for the access callback function. Defaults to array(1). </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="200" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="200" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab6b224c35d7d97259d4350a7849f1e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_presave</definition>
        <argsstring>(&amp;$edit, $account, $category)</argsstring>
        <name>hook_user_presave</name>
        <param>
          <type>&amp;$</type>
          <declname>edit</declname>
        </param>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <param>
          <type>$</type>
          <declname>category</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A user account is about to be created or updated.</para><para>This hook is primarily intended for modules that want to store properties in the serialized {users}.data column, which is automatically loaded whenever a user account object is loaded, modules may add to $edit[&apos;data&apos;] in order to have their data serialized on save.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$edit</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of form values submitted by the user. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user object on which the operation is performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$category</parametername>
</parameternamelist>
<parameterdescription>
<para>The active category of user information being edited.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gaa3e2c4c972ee796d216b15da7aaf9c2c" kindref="member">hook_user_insert()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gab71262402336071ef7c3d08f4c36e887" kindref="member">hook_user_update()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="226" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="226" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaa3e2c4c972ee796d216b15da7aaf9c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_insert</definition>
        <argsstring>(&amp;$edit, $account, $category)</argsstring>
        <name>hook_user_insert</name>
        <param>
          <type>&amp;$</type>
          <declname>edit</declname>
        </param>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <param>
          <type>$</type>
          <declname>category</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A user account was created.</para><para>The module should save its custom additions to the user object into the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$edit</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of form values submitted by the user. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user object on which the operation is being performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$category</parametername>
</parameternamelist>
<parameterdescription>
<para>The active category of user information being edited.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gab6b224c35d7d97259d4350a7849f1e56" kindref="member">hook_user_presave()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gab71262402336071ef7c3d08f4c36e887" kindref="member">hook_user_update()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="249" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="249" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gab71262402336071ef7c3d08f4c36e887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_update</definition>
        <argsstring>(&amp;$edit, $account, $category)</argsstring>
        <name>hook_user_update</name>
        <param>
          <type>&amp;$</type>
          <declname>edit</declname>
        </param>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <param>
          <type>$</type>
          <declname>category</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A user account was updated.</para><para>Modules may use this hook to update their user data in a custom storage after a user account has been updated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$edit</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of form values submitted by the user. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user object on which the operation is performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$category</parametername>
</parameternamelist>
<parameterdescription>
<para>The active category of user information being edited.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1gab6b224c35d7d97259d4350a7849f1e56" kindref="member">hook_user_presave()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gaa3e2c4c972ee796d216b15da7aaf9c2c" kindref="member">hook_user_insert()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="274" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga8cce712a39ee6e57bd506b5a0c457d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_login</definition>
        <argsstring>(&amp;$edit, $account)</argsstring>
        <name>hook_user_login</name>
        <param>
          <type>&amp;$</type>
          <declname>edit</declname>
        </param>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The user just logged in.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$edit</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of form values submitted by the user. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user object on which the operation was just performed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="291" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="291" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga49a4bb63d4b643cf9e3feb2266fe4865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_logout</definition>
        <argsstring>($account)</argsstring>
        <name>hook_user_logout</name>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The user just logged out.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user object on which the operation was just performed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="304" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="304" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaafb9e35d1f82a33918437ad7acf29541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_view</definition>
        <argsstring>($account, $view_mode, $langcode)</argsstring>
        <name>hook_user_view</name>
        <param>
          <type>$</type>
          <declname>account</declname>
        </param>
        <param>
          <type>$</type>
          <declname>view_mode</declname>
        </param>
        <param>
          <type>$</type>
          <declname>langcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The user&apos;s account information is being displayed.</para><para>The module should format its custom additions for display and add them to the $account-&gt;content array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$account</parametername>
</parameternamelist>
<parameterdescription>
<para>The user object on which the operation is being performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$view_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>View mode, e.g. &apos;full&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$langcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The language code used for rendering.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga31a81ec1419afc31ebb77a9a86afe754" kindref="member">hook_user_view_alter()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gae273ba271c2ef1192fe135afa9da5d49" kindref="member">hook_entity_view()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="329" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="329" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga31a81ec1419afc31ebb77a9a86afe754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_view_alter</definition>
        <argsstring>(&amp;$build)</argsstring>
        <name>hook_user_view_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>build</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The user was built; the module may modify the structured content.</para><para>This hook is called after the content has been assembled in a structured array and may be used for doing processing which requires that the complete user content structure has been built.</para><para>If the module wishes to act on the rendered HTML of the user rather than the structured content array, it may use this hook to add a #post_render callback. Alternatively, it could also implement hook_preprocess_user_profile(). See <ref refid="common_8inc_1a05798b44e8d6c496d4bee5cc32fa7851" kindref="member">drupal_render()</ref> and <ref refid="includes_2theme_8inc_1a7c25609a935874541a19657affd30fff" kindref="member">theme()</ref> documentation respectively for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$build</parametername>
</parameternamelist>
<parameterdescription>
<para>A renderable array representing the user.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>user_view() </para><simplesectsep/><para><ref refid="group__hooks_1ga2c2be6c70815b426f0eb13b0b68edb40" kindref="member">hook_entity_view_alter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="358" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="358" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga0b603e56348f9a8ab31505cc7e7acd36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_role_presave</definition>
        <argsstring>($role)</argsstring>
        <name>hook_user_role_presave</name>
        <param>
          <type>$</type>
          <declname>role</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inform other modules that a user role is about to be saved.</para><para>Modules implementing this hook can act on the user role object before it has been saved to the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$role</parametername>
</parameternamelist>
<parameterdescription>
<para>A user role object.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__hooks_1ga79141c13b24e953eac78d810b530e96e" kindref="member">hook_user_role_insert()</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga4c71374906f72f8a80b0c954202f86da" kindref="member">hook_user_role_update()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="381" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="381" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga79141c13b24e953eac78d810b530e96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_role_insert</definition>
        <argsstring>($role)</argsstring>
        <name>hook_user_role_insert</name>
        <param>
          <type>$</type>
          <declname>role</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inform other modules that a user role has been added.</para><para>Modules implementing this hook can act on the user role object when saved to the database. It&apos;s recommended that you implement this hook if your module adds additional data to user roles object. The module should save its custom additions to the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$role</parametername>
</parameternamelist>
<parameterdescription>
<para>A user role object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="399" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="399" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4c71374906f72f8a80b0c954202f86da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_role_update</definition>
        <argsstring>($role)</argsstring>
        <name>hook_user_role_update</name>
        <param>
          <type>$</type>
          <declname>role</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inform other modules that a user role has been updated.</para><para>Modules implementing this hook can act on the user role object when updated. It&apos;s recommended that you implement this hook if your module adds additional data to user roles object. The module should save its custom additions to the database.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$role</parametername>
</parameternamelist>
<parameterdescription>
<para>A user role object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="420" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="420" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf2a69f678861a227e36de13b87c340a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_user_role_delete</definition>
        <argsstring>($role)</argsstring>
        <name>hook_user_role_delete</name>
        <param>
          <type>$</type>
          <declname>role</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inform other modules that a user role has been deleted.</para><para>This hook allows you act when a user role has been deleted. If your module stores references to roles, it&apos;s recommended that you implement this hook and delete existing instances of the deleted role in your module database tables.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$role</parametername>
</parameternamelist>
<parameterdescription>
<para>The $role object being deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" line="441" bodyfile="/srv/www/htdocs/drupal-7-test/modules/user/user.api.php" bodystart="441" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gabf72394db945a88a3dfa44c42b206aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_info</definition>
        <argsstring>()</argsstring>
        <name>hook_upgrade_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declares upgrade sets for an API (or set of APIs).</para><para>This hook allows contributed modules to declare upgrade sets for an API supplied by their module, another contributed module, or a core module. To be able to apply the upgrade routines independently, the upgrade routines should be contained in separate files.</para><para>For example, if your module is called &apos;your_module_name&apos; and its upgrade routines are in &apos;your_module_name.upgrade&apos; (the default file name), then declare an upgrade set as: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>function<sp/><ref refid="coder__upgrade_8api_8php_1a735bbbd18b4d97bd1c17afe3f63f3368" kindref="member">your_module_name_upgrade_info</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>$upgrade<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;title&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>t(</highlight><highlight class="stringliteral">&apos;Your<sp/>module<sp/>API<sp/>changes<sp/>from<sp/>6.x<sp/>to<sp/>7.x&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;link&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/></highlight><highlight class="stringliteral">&apos;http://...&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array(</highlight><highlight class="stringliteral">&apos;your_module_name&apos;</highlight><highlight class="normal"><sp/>=&gt;<sp/>$upgrade);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>An associative array (keyed on the module name) with each element being an associative array with the following elements:<itemizedlist>
<listitem><para>&apos;title&apos;: A description of the upgrade routines provided by the upgrade set.</para></listitem><listitem><para>&apos;link&apos;: An optional link to an issue describing the upgrade routines.</para></listitem><listitem><para>&apos;files&apos;: An optional array of file names containing the upgrade routines. The name includes any relative path inside the module directory. Defaults to &apos;your_module_name.upgrade&apos;. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="46" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="46" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga77923393052ca28042d30a40500d07cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_call_FUNCTION_NAME_alter</definition>
        <argsstring>(&amp;$node, &amp;$reader)</argsstring>
        <name>hook_upgrade_call_FUNCTION_NAME_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters a function call using the grammar parser.</para><para>This hook allows contributed modules to alter a function call object using the grammar parser. The function call may be a stand-alone statement or part of an expression in another statement. For example: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>foo($bar);<sp/></highlight><highlight class="comment">//<sp/>Stand-alone.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foo($bar))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Embedded.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Coder Upgrade will call this alter hook for each function call in the file that was parsed. However, the function name must be a string, not a variable expression. To modify the latter, use <ref refid="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" kindref="member">hook_upgrade_file_alter()</ref>. Refer to the grammar parser documentation for details of the function call object.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" kindref="member">hook_upgrade_file_alter</ref> </para><simplesectsep/><para>PGPFunctionCall</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>PGPFunctionCall</parametertype>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>A node object containing a function call object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>PGPReader</parametertype>
<parametername>$reader</parametername>
</parameternamelist>
<parameterdescription>
<para>The object containing the grammar statements of the file to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="83" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="83" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gafd746fd4010baabf85ba69033ce60a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_call_alter</definition>
        <argsstring>(&amp;$node, &amp;$reader, $name)</argsstring>
        <name>hook_upgrade_call_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>$</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters function calls using the grammar parser.</para><para>This hook allows contributed modules to alter any function call object using the grammar parser. The function call may be a stand-alone statement or part of an expression in another statement. For example: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>foo($bar);<sp/></highlight><highlight class="comment">//<sp/>Stand-alone.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foo($bar))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Embedded.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Coder Upgrade will call this alter hook for each function call in the file that was parsed. However, the function name must be a string, not a variable expression. To modify the latter, use <ref refid="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" kindref="member">hook_upgrade_file_alter()</ref>. Refer to the grammar parser documentation for details of the function call object.</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" kindref="member">hook_upgrade_file_alter</ref> </para><simplesectsep/><para>PGPFunctionCall</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>PGPFunctionCall</parametertype>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>A node object containing a function call object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>PGPReader</parametertype>
<parametername>$reader</parametername>
</parameternamelist>
<parameterdescription>
<para>The object containing the grammar statements of the file to convert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="124" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="124" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga6157a4d184ff5a2b9659ad511934354c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_hook_HOOK_NAME_alter</definition>
        <argsstring>(&amp;$node, &amp;$reader)</argsstring>
        <name>hook_upgrade_hook_HOOK_NAME_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters a hook function using the grammar parser.</para><para>This hook allows contributed modules to alter a function object using the grammar parser. The function block may be inside an interface or class, or a stand-alone statement block. For example: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>function<sp/>foo($bar)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Stand-alone.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>($bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>function<sp/>foo($bar)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Embedded.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>($bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Coder Upgrade will call this alter hook for each hook function in the file that was parsed. However, the function name must follow the naming convention for a hook, i.e, your_module_name_hook. If your module declares a hook for another module or otherwise digresses from the standard naming convention, then use <ref refid="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" kindref="member">hook_upgrade_file_alter()</ref> to alter this function.</para><para>Refer to the grammar parser documentation for details of the function object (i.e. PGPClass).</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" kindref="member">hook_upgrade_file_alter</ref> </para><simplesectsep/><para>PGPClass</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>PGPNode</parametertype>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>A node object containing a PGPClass (or function) item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>PGPReader</parametertype>
<parametername>$reader</parametername>
</parameternamelist>
<parameterdescription>
<para>The object containing the grammar statements of the file to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="177" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="177" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gadc583ae02cf6d899a150241bdebfcb11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_hook_alter</definition>
        <argsstring>(&amp;$node, &amp;$reader, &amp;$hook)</argsstring>
        <name>hook_upgrade_hook_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>node</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>hook</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters hook functions using the grammar parser.</para><para>This hook allows contributed modules to alter any function object using the grammar parser. The function block may be inside an interface or class, or a stand-alone statement block. For example: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>function<sp/>foo($bar)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Stand-alone.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>($bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">example<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>function<sp/>foo($bar)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Embedded.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>($bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Coder Upgrade will call this alter hook for each hook function in the file that was parsed. However, the function name must follow the naming convention for a hook, i.e, your_module_name_hook. If your module declares a hook for another module or otherwise digresses from the standard naming convention, then use <ref refid="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" kindref="member">hook_upgrade_file_alter()</ref> to alter this function.</para><para>Refer to the grammar parser documentation for details of the function object (i.e. PGPClass).</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" kindref="member">hook_upgrade_file_alter</ref> </para><simplesectsep/><para>PGPClass</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>PGPNode</parametertype>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>A node object containing a PGPClass (or function) item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>PGPReader</parametertype>
<parametername>$reader</parametername>
</parameternamelist>
<parameterdescription>
<para>The object containing the grammar statements of the file to convert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$hook</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function (excluding the module name). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="237" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="237" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_file_alter</definition>
        <argsstring>(&amp;$reader)</argsstring>
        <name>hook_upgrade_file_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters a code file using the grammar parser.</para><para>This hook allows contributed modules to alter a code file object using the grammar parser. If a module defines a class, then the calls to its methods are not included in the calls to hook_upgrade_hook_HOOK_NAME_alter or hook_upgrade_hook_alter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>PGPReader</parametertype>
<parametername>$reader</parametername>
</parameternamelist>
<parameterdescription>
<para>The object containing the grammar statements of the file to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="276" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="276" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga0daf6721fa9ed97fb8ee3fb2c9dc98e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_parser_install_alter</definition>
        <argsstring>(&amp;$reader)</argsstring>
        <name>hook_upgrade_parser_install_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters an install file using the grammar parser.</para><para>This hook allows contributed modules to alter an install file object using the grammar parser. This hook allows for segregation of upgrade routines that only apply to an install file (e.g. the database schema API).</para><para><simplesect kind="see"><para><ref refid="group__hooks_1gaa39e31006292f30c55bb3abda0d53ada" kindref="member">hook_upgrade_file_alter</ref> </para><simplesectsep/><para><ref refid="group__hooks_1ga6157a4d184ff5a2b9659ad511934354c" kindref="member">hook_upgrade_hook_HOOK_NAME_alter</ref> </para><simplesectsep/><para><ref refid="group__hooks_1gadc583ae02cf6d899a150241bdebfcb11" kindref="member">hook_upgrade_hook_alter</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>PGPReader</parametertype>
<parametername>$reader</parametername>
</parameternamelist>
<parameterdescription>
<para>The object containing the grammar statements of the file to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="327" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="327" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga56f9cd2484f33d7f2c24c3ba0fc94d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_begin_alter</definition>
        <argsstring>($item)</argsstring>
        <name>hook_upgrade_begin_alter</name>
        <param>
          <type>$</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Processes the directory before upgrade routines are applied.</para><para>This hook can be used to cache information needed by other routines. For example, core changes need to know about hook_theme or hook_menu to make theme changes and form API changes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>array</parametertype>
<parametername>$item</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of a directory containing the files to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="341" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="341" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga6e9be7718ede83c4426b49d436ebc748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_end_alter</definition>
        <argsstring>($dirname)</argsstring>
        <name>hook_upgrade_end_alter</name>
        <param>
          <type>$</type>
          <declname>dirname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Processes the directory after upgrade routines are applied.</para><para>This hook can be used to apply finishing touches to the directory of converted files. For example, a D7 core change is to add file entries to the .info files.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>string</parametertype>
<parametername>$dirname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the directory with the converted files. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="355" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="355" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga8995fa7677c1c58163916f2d1fc9ac09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_regex_alter</definition>
        <argsstring>(&amp;$file)</argsstring>
        <name>hook_upgrade_regex_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters the text of a code file using regular expressions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>string</parametertype>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The text of the file to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="365" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="365" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga8e074d8cf05cd35deda50c642f9fba25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_regex_info_alter</definition>
        <argsstring>(&amp;$file)</argsstring>
        <name>hook_upgrade_regex_info_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters the text of an info file using regular expressions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>string</parametertype>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The text of the file to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="387" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="387" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga220e0d84522b466e1cb14b9a3bc58ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_upgrade_regex_install_alter</definition>
        <argsstring>(&amp;$file)</argsstring>
        <name>hook_upgrade_regex_install_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alters the text of an install file using regular expressions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>string</parametertype>
<parametername>$file</parametername>
</parameternamelist>
<parameterdescription>
<para>The text of the file to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" line="409" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/coder/coder_upgrade/coder_upgrade.api.php" bodystart="409" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1gaf17a0de7a7ca6e6c30c766ea1e44715e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_ctools_plugin_directory</definition>
        <argsstring>($owner, $plugin_type)</argsstring>
        <name>hook_ctools_plugin_directory</name>
        <param>
          <type>$</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>$</type>
          <declname>plugin_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This hook is used to inform the CTools plugin system about the location of a directory that should be searched for files containing plugins of a particular type. CTools invokes this same hook for all plugins, using the two passed parameters to indicate the specific type of plugin for which it is searching.</para><para>The $plugin_type parameter is self-explanatory - it is the string name of the plugin type (e.g., Panels&apos; &apos;layouts&apos; or &apos;styles&apos;). The $owner parameter is necessary because CTools internally namespaces plugins by the module that owns them. This is an extension of Drupal best practices on avoiding global namespace pollution by prepending your module name to all its functions. Consequently, it is possible for two different modules to create a plugin type with exactly the same name and have them operate in harmony. In fact, this system renders it impossible for modules to encroach on other modules&apos; plugin namespaces.</para><para>Given this namespacing, it is important that implementations of this hook check BOTH the $owner and $plugin_type parameters before returning a path. If your module does not implement plugins for the requested module/plugin combination, it is safe to return nothing at all (or NULL). As a convenience, it is also safe to return a path that does not exist for plugins your module does not implement - see form 2 for a use case.</para><para>Note that modules implementing a plugin also must implement this hook to instruct CTools as to the location of the plugins. See form 3 for a use case.</para><para>The conventional structure to return is &quot;plugins/$plugin_type&quot; - that is, a &apos;plugins&apos; subdirectory in your main module directory, with individual directories contained therein named for the plugin type they contain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>string</parametertype>
<parametername>$owner</parametername>
</parameternamelist>
<parameterdescription>
<para>The system name of the module owning the plugin type for which a base directory location is being requested. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>string</parametertype>
<parametername>$plugin_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the plugin type for which a base directory is being requested. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string The path where CTools&apos; plugin system should search for plugin files, relative to your module&apos;s root. Omit leading and trailing slashes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/ctools/ctools.api.php" line="56" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/ctools/ctools.api.php" bodystart="56" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga4ae530d112605c111f7bdead789ed91d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_ctools_plugin_pre_alter</definition>
        <argsstring>(&amp;$plugin, &amp;$info)</argsstring>
        <name>hook_ctools_plugin_pre_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter a plugin before it has been processed.</para><para>This hook is useful for altering flags or other information that will be used or possibly overriden by the process hook if defined.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$plugin</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array defining a plugin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$info</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array of plugin type info. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/ctools/ctools.api.php" line="95" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/ctools/ctools.api.php" bodystart="95" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga2f8a7bad70a9bcb0748a13463a32d362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_ctools_plugin_post_alter</definition>
        <argsstring>(&amp;$plugin, &amp;$info)</argsstring>
        <name>hook_ctools_plugin_post_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>plugin</declname>
        </param>
        <param>
          <type>&amp;$</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter a plugin after it has been processed.</para><para>This hook is useful for overriding the final values for a plugin after it has been processed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$plugin</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array defining a plugin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$info</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array of plugin type info. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/ctools/ctools.api.php" line="113" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/ctools/ctools.api.php" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__hooks_1ga133fb5b53380291a3348feffb3dd3364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_ctools_math_expression_functions_alter</definition>
        <argsstring>(&amp;$functions)</argsstring>
        <name>hook_ctools_math_expression_functions_alter</name>
        <param>
          <type>&amp;$</type>
          <declname>functions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the available functions to be used in ctools math expression api.</para><para>One usecase would be to create your own function in your module and allow to use it in the math expression api.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$functions</parametername>
</parameternamelist>
<parameterdescription>
<para>An array which has the functions as value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/srv/www/htdocs/drupal-7-test/sites/all/modules/ctools/ctools.api.php" line="130" bodyfile="/srv/www/htdocs/drupal-7-test/sites/all/modules/ctools/ctools.api.php" bodystart="130" bodyend="133"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Allow modules to interact with the Drupal core.</para><para>Drupal&apos;s module system is based on the concept of &quot;hooks&quot;. A hook is a PHP function that is named foo_bar(), where &quot;foo&quot; is the name of the module (whose filename is thus foo.module) and &quot;bar&quot; is the name of the hook. Each hook has a defined set of parameters and a specified result type.</para><para>To extend Drupal, a module need simply implement a hook. When Drupal wishes to allow intervention from modules, it determines which modules implement a hook and calls that hook in all enabled modules that implement it.</para><para>The available hooks to implement are explained here in the Hooks section of the developer documentation. The string &quot;hook&quot; is used as a placeholder for the module name in the hook definitions. For example, if the module file is called example.module, then <ref refid="group__hooks_1ga5589c2714a782738e8851c4c90231f0e" kindref="member">hook_help()</ref> as implemented by that module would be defined as example_help().</para><para>The example functions included are not part of the Drupal core, they are just models that you can modify. Only the hooks implemented within modules are executed when running Drupal.</para><para>See also <ref refid="group__themeable" kindref="compound">the themeable group page. </ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>
