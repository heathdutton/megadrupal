<?php

/**
 * @file
 * Apache Solr local files index module
 */
define('APACHESOLR_LOCALFILES_ID', 'localfiles_index');

/**
 * implements hook_menu().
 */
function apachesolr_localfiles_menu() {
  $items = array();
  $items['admin/config/search/apachesolr/localfiles'] = array(
    'title' => t('Local files'),
    'description' => t('Configure local files search'),
    'access arguments' => array('administer search'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'apachesolr_localfiles.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_localfiles_settings_form'),
  );
  return $items;
}

/**
 * implements hook_theme().
 */
function apachesolr_localfiles_theme() {
  return array(
    'apachesolr_localfiles_results' => array(
      'variables' => array('results' => NULL),
    ),
    'apachesolr_localfiles_result_item' => array(
      'variables' => array('vars' => NULL),
      'template' => 'result_item',
    ),
  );
}

function theme_apachesolr_localfiles_results($variables) {
  $items = array();
  foreach ($variables['results'] as $doc) {
    $item = array(
      'snippet' => $doc['snippet'],
      'filepath' => translate_server_to_client_folder($doc['fields']['filepath']),
      'filename' => $doc['fields']['filename'],
      'created' => $doc['fields']['attr_creation_date'][0],
      'changed' => !empty($doc['fields']['last_modified']) ? $doc['fields']['last_modified'] : $doc['fields']['attr_creation_date'][0],
      'size' => !empty($doc['fields']['stream_size']) ? ceil($doc['fields']['stream_size'] / 1000) . 'KB' : '',
    );
    $items[] = array(
      'data' => theme('apachesolr_localfiles_result_item', array('vars' => $item)),
      'class' => array('localfile-result', 'type-' . str_replace('.', '', transliteration_clean_filename($doc['fields']['content_type'])))
    );
  }

  $output = '';
  if (apachesolr_has_searched(APACHESOLR_LOCALFILES_ID)) {

    $query = apachesolr_current_query(APACHESOLR_LOCALFILES_ID);
    $response = apachesolr_static_response_cache($query->getSearcher());
    $keywords = $query->getParam('q');
    $num_found = $response->response->numFound;
    $output .= '<div id="search-results">' . t('There are @number results for "@keywords"', array(
        '@number' => $num_found,
        '@keywords' => $keywords)
      ) . '</div>';
  }
  $output .= theme('item_list', array('items' => $items));
  $output .= theme('pager');

  return $output;
}

function translate_server_to_client_folder($filepath) {
  $stored_localfile_folders = variable_get('apachesolr_localfiles_folder', array());
  $filepath_folder_separator = strpos($filepath, '/') !== false ? '/' : '\\';

  foreach ($stored_localfile_folders as $folders_pair) {

    $server_folder = $folders_pair['from'];

    if (strpos($filepath, ($server_folder . '/')) !== false) {
      $client_folder = $folders_pair['to'];
      $translated_folder = str_replace($server_folder, $client_folder, $filepath);

      $client_folder_separator = strpos($client_folder, '/') !== false ? '/' : '\\';
      if ($filepath_folder_separator != $client_folder_separator) {
        $translated_folder = str_replace($filepath_folder_separator, $client_folder_separator, $translated_folder);
      }
      return $translated_folder;
    }
  }
  drupal_set_message(t('There is no mapped folder from server to client.'), 'error');
}

/**
 * implements hook_apachesolr_search_page_alter().
 */
function apachesolr_localfiles_apachesolr_search_page_alter(&$build, $search_page) {

  try {

    $solr = apachesolr_get_solr(APACHESOLR_LOCALFILES_ID);
    $solr->clearCache();
    $data = $solr->getLuke();

    if ($data->index->numDocs == 0) {
      drupal_set_message(t("There is no data indexed on Solr."), 'error');
    }
  } catch (Exception $e) {
    watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
    drupal_set_message(nl2br(check_plain(t($e->getMessage()))), "warning");
    $data = new stdClass;
    $data->fields = array();
  }

  // Look for a hard-coded env_id
  if ($search_page['env_id'] == APACHESOLR_LOCALFILES_ID && isset($build['search_results']['#theme']) && $build['search_results']['#theme'] == 'search_results') {
    $build['search_results']['#theme'] = 'apachesolr_localfiles_results';
  }
}

/**
 * implements hook_apachesolr_query_alter().
 */
function apachesolr_localfiles_apachesolr_query_alter($query) {
  if ($query->solr('getId') == APACHESOLR_LOCALFILES_ID) {

    // Get stored fields.
    $query->replaceParam('fl', array(
      'id', 'filename', 'filepath', 'stream_size', 'content_type'
      , 'last_modified', 'attr_creation_date'
    ));

    $query->addParam('hl', TRUE);
    $query->addParam('hl.fragsize', 80);
    $query->addParam('hl.fl', 'text');
    $query->addParam('hl.simple.pre', '<strong>');
    $query->addParam('hl.simple.post', '</strong>');
  }
}

/**
 * implements hook_apachesolr_search_result_alter().
 */
function apachesolr_localfiles_apachesolr_search_result_alter($doc, $extra, $query) {
  if ($query->solr('getId') == APACHESOLR_LOCALFILES_ID) {
    // apachesolr_search module expects entity_type to be set.
    $doc->entity_type = 'localfile';
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function apachesolr_localfiles_ctools_plugin_api($module, $api) {
  if ($module == 'apachesolr' && $api == 'apachesolr_environments') {
    return array('version' => 1);
  }
  if ($module == 'apachesolr_search' && $api == 'apachesolr_search_defaults') {
    return array('version' => 3);
  }
  if ($module == 'facetapi' && $api == 'facetapi_defaults') {
    return array('version' => 1);
  }
}

function apachesolr_localfiles_facetapi_facet_info(array $searcher_info) {
  $facets = array();
  $facets['content_type'] = array(
    'label' => t('File type'),
    'description' => t('Filter by file type.'),
    'field' => 'content_type',
    'facet mincount allowed' => TRUE,
    'map callback' => 'apachesolr_localfiles_facetapi_content_type_map',
  );
  return $facets;
}

function apachesolr_localfiles_facetapi_content_type_map(array $values) {
  $map = array();
  foreach ($values as $facet) {
    switch ($facet) {
      case 'application/pdf':
        $map[$facet] = 'PDF';
        break;
      case 'application/msword':
        $map[$facet] = 'DOC';
        break;
      case 'application/vnd.oasis.opendocument.text':
        $map[$facet] = 'DOCX';
        break;
      case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        $map[$facet] = 'ODT';
        break;
    }
  }
  return $map;
}