<?php

/**
 * @file
 * Extends Simplenews by providing a visitor log by user.
 *
 * Date: ven 28 giu 2013, 10.10.53, CEST
 * File: simplenews_visitor.module
 * Author: stefano
 */

/**
 * Named constant at runtime.
 *
 * SC Tue Oct 15 00:03:32 CEST 2013 stefano
 */
define('SIMPLENEWS_VISITOR_REGEX_NEW_URL', "|(<a.*href\s*=\s*[\"']?)([^\s>\"']+)([\"'].*>)([^<]+)((?:<.*>)?</a>)|i");
define('SIMPLENEWS_VISITOR_REGEX_NEW_URL_PLAIN', "|(\S+)(\s)(http://\S+)|i");

/**
 * Implements hook_help().
 *
 * SC 18/mag/2011 16.44.26 stefano
 */
function simplenews_visitor_help($path, $arg) {

  $help = "";

  switch ($path) {
    case 'admin/help#simplenews_visitor':
      $help = "<p>" . t('Simplenews Visitor allows you to collect the data from the newsletter visitors by following the links in the newsletter.') . "</p>";
      break;

    case 'admin/config/services/simplenews/visitor':
      $help = "<p>" . t('The values of <i>Max values</i> will be:') . "</p>";
      $help .= "<ul>";
      $help .= "<li>" . t('= 0 without limit (sends anyway);') . "</li>";
      $help .= "<li>" . t('> 0 with limit (sends until "max").') . "</li>";
      $help .= "</ul>";
      break;
  }

  return $help;
}

/**
 * Implements hook_permission().
 *
 * SC 25/mag/2011 13.07.05 stefano
 */
function simplenews_visitor_permission() {

  return array(
    'newsletter visitor resend' => array(
      'title' => t('Newsletter visitor resend'),
    ),
    'administer simplenews visitor subscription' => array(
      'title' => t('Administer simplenews visitor subscription'),
    ),
    'administer simplenews visitor statistic' => array(
      'title' => t('Administer simplenews visitor statistic'),
    ),
    'newsletter visitor admin setting' => array(
      'title' => t('Newsletter visitor admin setting'),
    ),
  );
}

/**
 * Implements hook_node_view_alter().
 *
 * Search URLs for change them.
 *
 * D7 hasn't hook_nodeapi() anymore.
 *
 * SC 03/lug/2013 16:08:36
 */
function simplenews_visitor_node_view_alter(&$build) {
  if (!in_array($build['#node']->type, variable_get('simplenews_content_types', array(
      'simplenews'))) || $build['#view_mode'] != 'full') {
    return;
  }

  global $user;

  if (isset($user->mail)) {
    $build['#post_render'][] = '_simplenews_visitor_post_render';
  }
}

/**
 * Post render callback.
 *
 * SC 12/lug/2013 10:15:57
 */
function _simplenews_visitor_post_render(&$output, $node) {
  if ($output) {
    global $user;

    $node_id = $node['#node']->nid;
    $to = $user->mail;
    $visitor = new SimplenewsVisitorPregCallbackWrap($to, $node_id);
    $foo_callback = array($visitor, 'NewUrl');
    $output = preg_replace_callback(SIMPLENEWS_VISITOR_REGEX_NEW_URL, $foo_callback, $output);
  }

  return $output;
}

/**
 * Implements hook_taxonomy_term_insert().
 *
 * SC 15/lug/2013 19:26:56
 */
function simplenews_visitor_taxonomy_term_insert($term) {
  if ($term->vid == variable_get('simplenews_vid', '')) {
    $object = array('tid' => $term->tid);

    drupal_write_record('simplenews_visitor_max_sent', $object);
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 *
 * SC 15/lug/2013 19:29:05
 */
function simplenews_visitor_taxonomy_term_delete($term) {
  db_delete('{simplenews_visitor_max_sent}')->condition('tid', $term->tid)->execute();
}

/**
 * Implements hook_mail_alter().
 *
 * Change inside <a>...</a> to add the references
 * to user and newsletter
 *
 * SC 24/mag/2011 09.24.11 stefano
 */
function simplenews_visitor_mail_alter(&$message) {

  if (strpos($message['id'], 'simplenews') !== FALSE && isset($message['params']['simplenews_source'])) {
    $node = $message['params']['simplenews_source']->getNode();
    $node_id = $node->nid;
    $subscriber = $message['params']['simplenews_source']->getSubscriber();
    $to = isset($subscriber) ? $subscriber->mail : $message['to'];
    $category = $message['params']['simplenews_source']->getCategory();

    $visitor = new SimplenewsVisitorPregCallbackWrap($to, $node_id);

    if ($category->format == "html") {

      /* SC 12/lug/2013 11:32:22
       * remove plaintext
       */
      $message['params']['plaintext'] = "";

      $foo_callback = array($visitor, 'NewUrl');

      if (is_array($message['body'])) {
        $message['body']['body'] = preg_replace_callback(SIMPLENEWS_VISITOR_REGEX_NEW_URL, $foo_callback, $message['body']['body']);
      }
      else {
        $message['body'] = preg_replace_callback(SIMPLENEWS_VISITOR_REGEX_NEW_URL, $foo_callback, $message['body']);
      }
    }
    else {
      $foo_callback = array($visitor, 'NewUrlPlain');

      if (is_array($message['body'])) {
        $message['body']['body'] = preg_replace_callback(SIMPLENEWS_VISITOR_REGEX_NEW_URL_PLAIN, $foo_callback, $message['body']['body']);
      }
      else {
        $message['body'] = preg_replace_callback(SIMPLENEWS_VISITOR_REGEX_NEW_URL_PLAIN, $foo_callback, $message['body']);
      }
    }
  }
}

/**
 * Implements hook_menu().
 *
 * SC 24/mag/2011 09.41.17 stefano
 */
function simplenews_visitor_menu() {
  $items = array();
  $items['redirect/%/%/%/%/%'] = array(
    'title' => 'Newsletter',
    'type' => MENU_CALLBACK,
    'page callback' => 'simplenews_visitor_redirect',
    'page arguments' => array(1, 2, 3, 4, 5),
    'access callback' => '_simplenews_visitor_redirect_menu',
    'access arguments' => array(1),
  );

  $weight = 1;
  $items['node/%node/visitor/by_email'] = array(
    'title' => 'By email',
    'page callback' => 'simplenews_visitor_listby',
    'page arguments' => array(1, 3),
    'access callback' => '_simplenews_visitor_listby_access',
    'access arguments' => array(1),
    'weight' => $weight++,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'simplenews_visitor.lists.inc',
  );

  /* SC 14/giu/2011 10.46.38 stefano
   *
   * makes the submenu with the order
   */
  $visitor_by = array(
    'by_date' => 'By date',
    'by_url' => 'By url',
    'most_email' => 'Group email',
    'most_url' => 'Group url',
  );
  foreach ($visitor_by as $key => $value) {
    $items['node/%node/visitor/' . $key] = array(
      'title' => $value,
      'page callback' => 'simplenews_visitor_listby',
      'page arguments' => array(1, 3),
      'access callback' => '_simplenews_visitor_listby_access',
      'access arguments' => array(1),
      'weight' => $weight++,
      'type' => MENU_LOCAL_TASK,
      'file' => 'simplenews_visitor.lists.inc',
    );
  }
  $items['node/%node/visitor/reverse_email'] = array(
    'title' => 'No visitors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_visitor_listby_no_visitor', 1),
    'access callback' => '_simplenews_visitor_listby_access',
    'access arguments' => array(1),
    'weight' => $weight++,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simplenews_visitor.lists.inc',
  );
  $items['node/%node/visitor/exports'] = array(
    'title' => 'Exports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_visitor_exports', 1),
    'access callback' => '_simplenews_visitor_listby_access',
    'access arguments' => array(1),
    'weight' => $weight++,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simplenews_visitor.export.inc',
  );
  $items['admin/config/services/simplenews/visitor'] = array(
    'title' => 'Visitor',
    'description' => 'Newsletter visitor management.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_visitor_admin_setting'),
    'access arguments' => array('newsletter visitor admin setting'),
    'weight' => 10,
    'file' => 'simplenews_visitor.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Add the tab
 *
 * SC 21/giu/2011 10.03.54 stefano
 */
function simplenews_visitor_menu_alter(&$items) {
  $items['node/%node/visitor'] = array(
    'title' => 'Visitor',
    'page callback' => 'simplenews_visitor_listby',
    'page arguments' => array(1),
    'access callback' => '_simplenews_visitor_listby_access',
    'access arguments' => array(1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'file' => 'simplenews_visitor.lists.inc',
    'file path' => drupal_get_path('module', 'simplenews_visitor'),
  );
}

/**
 * Save the link visited and redirect to original url.
 *
 * SC 21/giu/2011 10.05.25 stefano
 *
 * @param int $nid
 *   the node/newsletter
 * @param string $email
 *   user email
 * @param string $url
 *   the coded url
 * @param string $link
 *   the url link
 * @param string $key
 *   the url key
 */
function simplenews_visitor_redirect($nid, $email, $url, $link, $key) {
  $url_decode = htmlspecialchars_decode(base64_decode($url));

  /* SC 24/mag/2011 10.29.46 stefano
   *
   * Writes the record of the user visit.
   */
  /* SC Tue Oct 22 19:16:34 CEST 2013 stefano
   *
   * Added rawurldecode to decode for $link and $email
   */
  $values = array(
    "nid" => $nid,
    "mail" => rawurldecode($email),
    "url" => $url_decode,
    "link" => rawurldecode($link),
    "date" => date("Y-m-d H:i:s"),
  );

  $visitor = new SimplenewsVisitorPregCallbackWrap($values['mail'], $nid);

  /* SC Tue Oct 22 20:09:43 CEST 2013 stefano
   *
   * Checks if $key is good.
   */
  if ($visitor->GetNewUrlKey() != $key) {
    watchdog('simplenews_visitor', 'Wrong url key.', array(), WATCHDOG_ERROR);

    /* SC Wed Oct 23 00:02:43 CEST 2013 stefano
     *
     * TODO: Thinks to going out better.
     */
    die();
  }

  drupal_write_record('simplenews_visitor', $values);

  /* SC 24/mag/2011 10.30.38 stefano
   * redirects to the original url
   */
  drupal_goto($url_decode);
}

/**
 * Implements hook_simplenews_issue_operations().
 *
 * Used in admin/content/simplenews "UPDATE OPTIONS"
 */
function simplenews_visitor_simplenews_issue_operations() {
  $operations = array();

  if (user_access('newsletter visitor resend')) {
    $operations = array(
      'disactivate' => array(
        'label' => t('De-sent'),
        'callback' => '_simplenews_visitor_issue_desend',
      ),
    );
  }

  return $operations;
}

/**
 * Alters newsletter mail callback.
 *
 * SC Fri Oct 11 09:38:52 CEST 2013 stefano
 */
function simplenews_visitor_simplenews_spooled($node) {
  $conditions = array('nid' => $node->nid);
  $spool_mail = simplenews_get_spool(SIMPLENEWS_UNLIMITED, $conditions);
  $count_mail = count($spool_mail);

  $query = db_select('{simplenews_visitor_max_sent}', 's');
  $query->fields('s', array('max', 'amount'));
  $query->condition('tid', $node->simplenews->tid);

  $result = $query->execute()->fetchObject();
  /* SC Fri Oct 11 09:42:57 CEST 2013 stefano
   *
   * checks the limits of mails left
   */
  /* Not check if max == 0 (unlimited sent).
   *
   * SC Fri Nov 29 12:29:22 CET 2013 stefano
   */
  if ($result->max && ($result->max - $result->amount - $count_mail) < 0) {
    simplenews_newsletter_update_sent_status($node, SIMPLENEWS_STATUS_SEND_NOT);
    simplenews_delete_spool(array('msid' => array_keys($spool_mail)));
    $spool_mail = array();

    drupal_set_message(t('Newsletter %title has blocked by Visitor.', array('%title' => $node->title)), 'warning');
  }
  elseif ($result->max > 0) {
    /* SC Fri Oct 11 09:46:34 CEST 2013 stefano
     *
     * updates the limits
     */
    $record = array(
      'amount' => $result->amount + $count_mail,
      'tid' => $node->simplenews->tid,
    );
    $update = 'tid';

    drupal_write_record('simplenews_visitor_max_sent', $record, $update);
  }

  /* Back to status.
   *
   * SC Fri Nov 29 17:49:04 CET 2013 stefano
   */
  if (!empty($spool_mail)) {
    simplenews_update_spool(array_keys($spool_mail), array('status' => SIMPLENEWS_STATUS_SEND_PENDING));
  }

  return TRUE;
}

/**
 * Controls to send callback.
 *
 * SC 18/lug/2013 13:13:12
 *
 * @param array $nids
 *   list of nid to sent
 */
function _simplenews_visitor_issue_desend($nids) {
  foreach (node_load_multiple($nids) as $node) {
    $newsletter = simplenews_newsletter_load($node->nid);
    if ($newsletter->status == SIMPLENEWS_STATUS_SEND_NOT) {
      continue;
    }
    if ($node->status != NODE_NOT_PUBLISHED) {
      simplenews_newsletter_update_sent_status($node, SIMPLENEWS_STATUS_SEND_NOT);
      drupal_set_message(t('Newsletter %title is unsent.', array('%title' => $node->title)));
      continue;
    }
  }
}

/**
 * Redirect menu access callback.
 *
 * SC 21/giu/2011 10.30.10 stefano
 *
 * @param int $nid
 *   id node/newsletter
 *
 * @return bool
 *   redirect menu permission
 */
function _simplenews_visitor_redirect_menu($nid) {
  $query = db_select('{node}', 'n');
  $query->addField('n', 'type');
  $query->condition('nid', $nid);
  $result = $query->execute();
  $node = $result->fetchField();

  return strpos($node, 'simplenews') !== FALSE;
}

/**
 * List menu access callback.
 *
 * SC 21/giu/2011 10.32.10 stefano
 *
 * @param object $node
 *   node data
 *
 * @return bool
 *   if user has permission to admin
 */
function _simplenews_visitor_listby_access($node) {
  if (user_access('administer simplenews visitor statistic') && $node->type == "simplenews") {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
