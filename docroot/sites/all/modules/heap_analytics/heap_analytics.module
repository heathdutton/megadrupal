<?php

/**
 * @file
 * Drupal Module: Heap Analytics.
 *
 * @author: Iztok Smolič <http://drupal.org/user/123987>
 */

/**
 * Define default path exclusion list to remove tracking from admin pages.
 *
 * See http://drupal.org/node/34970 for more information.
 */
define('HEAP_ANALYTICS_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_help().
 */
function heap_analytics_help($path, $arg) {
  switch ($path) {
    case 'admin/config/system/heap-analytics':
      return t('<a href="@heap_url">Heap</a> is an instant, retroactive analytics for web and iOS. No code for event tracking required.', array('@heap_url' => 'https://heapanalytics.com'));
  }
}

/**
 * Implements hook_menu().
 */
function heap_analytics_menu() {
  $items = array();
  $items['admin/config/system/heap-analytics'] = array(
    'title' => 'Heap Analytics',
    'description' => 'Configure Heap Analytics module settings with your account code.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('heap_analytics_admin_settings_form'),
    'access arguments' => array('administer heap analytics'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'heap_analytics.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function heap_analytics_permission() {
  return array(
    'administer heap analytics' => array(
      'title' => t('Administer Heap Analytics'),
      'description' => t('Perform maintenance tasks for Heap Analytics.'),
    ),
    'use php for heap tracking visibility' => array(
      'title' => t('Use PHP for tracking visibility'),
      'description' => t('Enter PHP code in the field for tracking visibility settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function heap_analytics_page_alter(&$page) {
  global $user;

  $id = variable_get('heap_analytics_environment_id', NULL);

  // Get page status code for visibility filtering.
  $status = drupal_get_http_header('Status');
  $trackable_status_codes = array(
    '403 Forbidden',
    '404 Not Found',
  );

  // 1. Check if the Heap environment ID is set.
  // 2. Track page views based on visibility value.
  // 3. Check if we should track the currently active user's role.
  // 4. Ignore pages visibility filter for 404 or 403 status codes.
  if (!empty($id) && (_heap_analytics_visibility_pages() || in_array($status, $trackable_status_codes)) && _heap_analytics_visibility_user($user)) {
    // Build tracker code.
    $script = 'window.heap=window.heap||[],heap.load=function(t,e){window.heap.appid=t,window.heap.config=e;var a=document.createElement("script");a.type="text/javascript",a.async=!0,a.src=("https:"===document.location.protocol?"https:":"http:")+"//cdn.heapanalytics.com/js/heap.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(a,n);for(var o=function(t){return function(){heap.push([t].concat(Array.prototype.slice.call(arguments,0)))}},p=["clearEventProperties","identify","setEventProperties","track","unsetEventProperty"],c=0;c<p.length;c++)heap[p[c]]=o(p[c])};';
    $script .= 'heap.load("' . $id . '");';
    drupal_add_js($script, array('scope' => 'header', 'type' => 'inline'));
  }
}

/**
 * Tracking visibility check for an user object.
 */
function _heap_analytics_visibility_user($account) {

  $enabled = FALSE;

  // Is current user a member of a role that should be tracked?
  if (_heap_analytics_visibility_header($account) && _heap_analytics_visibility_roles($account)) {
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Tracking visibility check for an user object based on the role.
 */
function _heap_analytics_visibility_roles($account) {

  $visibility = variable_get('heap_analytics_visibility_roles', 0);
  $enabled = $visibility;
  $roles = variable_get('heap_analytics_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that should be included/excluded.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Tracking visibility check based on the current page url.
 */
function _heap_analytics_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('heap_analytics_visibility_pages', 0);
    $setting_pages = variable_get('heap_analytics_pages', HEAP_ANALYTICS_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

/**
 * Tracking visibility check based on headers send by clients.
 */
function _heap_analytics_visibility_header($account) {

  if (($account->uid || variable_get('cache', 0) == 0) && variable_get('heap_analytics_privacy_donottrack', 1) && !empty($_SERVER['HTTP_DNT'])) {
    // Disable tracking if caching is disabled or a visitors is logged in and
    // have opted out from tracking via DNT (Do-Not-Track) header.
    return FALSE;
  }

  return TRUE;
}
