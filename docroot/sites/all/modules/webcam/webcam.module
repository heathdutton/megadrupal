<?php
// $Id$

/**
 * @file
 * Defines webcam field types.
 */

define('WEBCAM_DEFAULT_DELAY',   30);
define('WEBCAM_DEFAULT_HEIGHT',  240);
define('WEBCAM_DEFAULT_WIDTH',   320);
define('WEBCAM_DEFAULT_TIMEOUT', 0);

/**
 * URL verification and cleanup.
 */
define('WEBCAM_LINK_EXTERNAL', 'external');
define('WEBCAM_LINK_INTERNAL', 'internal');
define('WEBCAM_LINK_FRONT', 'front');
define('WEBCAM_LINK_EMAIL', 'email');
define('WEBCAM_LINK_NEWS', 'news');
define('WEBCAM_LINK_DOMAINS', 'aero|arpa|asia|biz|com|cat|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel|mobi|local');

define('WEBCAM_LINK_TARGET_DEFAULT', 'default');
define('WEBCAM_LINK_TARGET_NEW_WINDOW', '_blank');
define('WEBCAM_LINK_TARGET_TOP', '_top');
define('WEBCAM_LINK_TARGET_USER', 'user');

/**
 * Maximum URLs length.
 */
define('WEBCAM_URL_MAX_LENGTH', 2048);

/**
 * Implements hook_field_info().
 */
function webcam_field_info() {
  return array(
    'webcam' => array(
      'label' => t('Webcam'),
      'description' => t('This field stores a webcam in the database.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'webcam_field',
      'default_formatter' => 'default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function webcam_field_settings_form($field, $instance, $has_data) {
  $form = array();
  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function webcam_field_instance_settings_form($field, $instance) {
  $form = array();
  return $form;
}

/**
 * Implement hook_field_is_empty().
 */
function webcam_field_is_empty($item, $field) {
  return empty($item['title']) && empty($item['url']);
}

/**
 * Implements hook_field_load().
 */
function webcam_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // @todo
    }
  }
}

/**
 * Implements hook_field_validate().
 */
function webcam_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $optional_field_found = FALSE;
  foreach ($items as $delta => $value) {
    // Validate the url.
    if (link_validate_url(trim($value['url'])) == FALSE) {
      form_set_error($field['field_name'] .']['. $delta .'][url', t('Not a valid URL.'));
    }
    // Validate the url.
    $url_default = trim($value['url_default']);
    if (!empty($url_default) && link_validate_url($url_default) == FALSE) {
      form_set_error($field['field_name'] .']['. $delta .'][url', t('Not a valid Default URL.'));
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function webcam_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $value) {
    // @todo
  }
}

/**
 * Implements hook_field_prepare_view().
 */
function webcam_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($items as $entity_id => $entity_items) {
    foreach ($entity_items as $delta => $value) {
      // Make sure we have a default url.
      $items[$entity_id][$delta]['url'] = webcam_process_url($value['url']);
      if (empty($value['url_default'])) {
        $items[$entity_id][$delta]['url_default'] = $items[$entity_id][$delta]['url'];
      }
      else {
        $items[$entity_id][$delta]['url_default'] = webcam_process_url($value['url_default']);
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function webcam_field_widget_info() {
  return array(
    'webcam_field' => array(
      'label' => t('Webcam'),
      'field types' => array('webcam'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function webcam_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implements hook_theme().
 */
function webcam_theme() {
  return array(
    'webcam_formatter_default' => array(
      'variables' => array('element' => NULL),
    ),
    'webcam_field' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function webcam_element_info() {
  $elements = array();
  $elements['webcam_field'] =  array(
    '#input' => TRUE,
    '#process' => array('webcam_field_process'),
    '#theme' => 'webcam_field',
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Process the webcam type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $complete_form['#field_info'][$element['#field_name']].
 */
function webcam_field_process($element, $form_state, $complete_form) {
  $settings = &$form_state['field'][$element['#field_name']][$element['#language']]['instance']['settings'];

  // Allow default value for the widget to be empty.
  $required = (isset($element['#array_parents'][1]) && $element['#array_parents'][1] == 'default_value_widget' ? FALSE : TRUE);

  $element['title'] = array(
    '#type' => 'textfield',
    '#maxlength' => '255',
    '#title' => t('Title'),
    '#required' => $required,
    '#default_value' => isset($element['#value']['title']) ? $element['#value']['title'] : NULL,
  );
  $element['url'] = array(
    '#type' => 'textfield',
    '#maxlength' => WEBCAM_URL_MAX_LENGTH,
    '#title' => t('URL'),
    '#required' => $required,
    '#default_value' => isset($element['#value']['url']) ? $element['#value']['url'] : NULL,
    '#description' => t('This image is displayed while the webcam image is loading, and when an error occurs.'),
  );
  $element['url_default'] = array(
    '#type' => 'textfield',
    '#maxlength' => WEBCAM_URL_MAX_LENGTH,
    '#title' => t('Default URL'),
    '#default_value' => isset($element['#value']['url_default']) ? $element['#value']['url_default'] : NULL,
  );
  $element['width'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#title' => t('Width'),
    '#required' => $required,
    '#default_value' => isset($element['#value']['width']) ? $element['#value']['width'] : WEBCAM_DEFAULT_WIDTH,
    '#field_suffix' => 'x&#160;',
    '#prefix' => '<div class="form-items-wrapper">',
  );
  $element['height'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#title' => t('Height'),
    '#required' => $required,
    '#default_value' => isset($element['#value']['height']) ? $element['#value']['height'] : WEBCAM_DEFAULT_HEIGHT,
    '#suffix' => '</div>',
  );
  $element['lightbox'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enlarge with Colorbox'),
    '#default_value' => isset($element['#value']['lightbox']) ? $element['#value']['lightbox'] : 0,
    '#description' => t('Enlarge the webcam to its original size using Colorbox. This will override the Link field.'),
  );
  if (!module_exists('colorbox')) {
    $element['lightbox']['#type'] = 'hidden';
  }
  $element['link'] = array(
    '#type' => 'textfield',
    '#maxlength' => WEBCAM_URL_MAX_LENGTH,
    '#title' => t('Link URL'),
    '#default_value' => isset($element['#value']['link']) ? $element['#value']['link'] : NULL,
    '#description' => t('Make your webcam image a link to another page, or leave blank if you don\'t wish to use this functionality. The link can be relative (e.g. <strong>node/23</strong>) or absolute (e.g. <strong>http://www.site.com/page.html</strong>).'),
  );
  $element['delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Delay'),
    '#size' => 4,
    '#maxlength' => 3,
    '#required' => $required,
    '#default_value' => isset($element['#value']['delay']) ? $element['#value']['delay'] : WEBCAM_DEFAULT_DELAY,
    '#description' => t('The amount of seconds to wait before refreshing the webcam image.'),
  );
  $element['timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Timeout'),
    '#size' => 4,
    '#maxlength' => 3,
    '#required' => $required,
    '#default_value' => isset($element['#value']['timeout']) ? $element['#value']['timeout'] : WEBCAM_DEFAULT_TIMEOUT,
    '#description' => t('The amount of times the webcam is allowed to refresh before timing out, and no longer update itself. Set to <strong>0</strong> to disable timing out.'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function webcam_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Title, as link (default)'),
      'field types' => array('webcam_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function webcam_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  $settings = array();
  foreach ($items as $delta => $item) {
    // Theme the item.
    $elements[$delta] = array(
      '#markup' => theme('webcam_formatter_'. $display['type'], array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Returns a unique webcam id to be used with JS.
 */
function _webcam_id() {
  static $counter = 0;
  return 'webcam-' . ($counter++);
}

/**
 * Returns a unique webcam id to be used with JS.
 */
function template_preprocess_webcam_formatter_default(&$variables) {
  // Create a unique id for use with JS.
  $id = _webcam_id();

  // Add CSS file.
  drupal_add_css(drupal_get_path('module', 'webcam') .'/webcam.css');

  // Send item data to JS.
  webcam_add_js();
  drupal_add_js(array('webcam' => array('webcams' => array($id => $variables['element']))), 'setting');

  $variables['id'] = $id;
}

/**
 * Adds JS file and settings for webcam, but only once.
 */
function webcam_add_js() {
  static $added;

  if (is_null($added)) {
    drupal_add_js(drupal_get_path('module', 'webcam') . '/webcam.js');
    // @todo Fix errorId.
    drupal_add_js(array('webcam' => array('errorId' => '')), 'setting');
    $added = TRUE;
  }
}

/**
 * Implements hook_views_api().
 *
 * @todo Actually implement views support.
 */
function webcam_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'webcam') .'/views',
  );
}

/**
 * Clean up user-entered values for a url.
 *
 * @param $url
 *   The url to clean up.
 * @return
 *   A clean url.
 */
function webcam_process_url($url) {
  // Don't try to process empty links.
  if (empty($url)) {
    return;
  }

  $url = webcam_cleanup_url($url);

  // Separate out the anchor if any.
  if (strpos($url, '#') !== FALSE) {
    $item['fragment'] = substr($url, strpos($url, '#') + 1);
    $url = substr($url, 0, strpos($url, '#'));
  }
  // Separate out the query string if any.
  if (strpos($url, '?') !== FALSE) {
    $query = substr($url, strpos($url, '?') + 1);
    parse_str($query, $query_array);
    $item['query'] = $query_array;
    $url = substr($url, 0, strpos($url, '?'));
  }

  $url = url($url, array(
    'query' => isset($item['query']) ? $item['query'] : NULL,
    'fragment' => isset($item['fragment']) ? $item['fragment'] : NULL,
    'absolute' => TRUE));
  return $url;
}

/**
 * Forms a valid URL from an entered address, if possible.
 *
 * Trims whitespace and automatically adds an http:// to addresses without
 * a protocol specified.
 *
 * @param $url
 * @param $protocol
 *   The protocol to be prepended to the url if one is not specified.
 */
function webcam_cleanup_url($url, $protocol = "http") {
  $url = trim($url);
  $type = webcam_validate_url($url);

  if ($type === WEBCAM_LINK_EXTERNAL) {
    // Check if there is no protocol specified.
    $protocol_match = preg_match("/^([a-z0-9][a-z0-9\.\-_]*:\/\/)/i", $url);
    if (empty($protocol_match)) {
      // But should there be? Add an automatic http:// if it starts with a domain name.
      $domain_match = preg_match('/^(([a-z0-9]([a-z0-9\-_]*\.)+)('. WEBCAM_LINK_DOMAINS .'|[a-z]{2}))/i', $url);
      if (!empty($domain_match)) {
        $url = $protocol ."://". $url;
      }
    }
  }

  return $url;
}

/**
 * A lenient verification for URLs.
 *
 * Accepts all URLs following RFC 1738 standard for URL formation and all email
 * addresses following the RFC 2368 standard for mailto address formation.
 * Borrowed from link module.
 *
 * @param $text
 * @return
 *   Returns boolean FALSE if the URL is not valid. On success, returns an
 *   object with the following attributes: protocol, hostname, ip, and port.
 */
function webcam_validate_url($text) {
  $WEBCAM_LINK_ICHARS_DOMAIN = (string) html_entity_decode(implode("", array(
    "&#x00E6;", // æ
    "&#x00C6;", // Æ
    "&#x00F8;", // ø
    "&#x00D8;", // Ø
    "&#x00E5;", // å
    "&#x00C5;", // Å
    "&#x00E4;", // ä
    "&#x00C4;", // Ä
    "&#x00F6;", // ö
    "&#x00D6;", // Ö
    "&#x00FC;", // ü
    "&#x00DC;", // Ü
    "&#x00D1;", // Ñ
    "&#x00F1;", // ñ
  )), ENT_QUOTES, 'UTF-8');

  $WEBCAM_LINK_ICHARS = $WEBCAM_LINK_ICHARS_DOMAIN . (string) html_entity_decode(implode("", array(
    "&#x00DF;", // ß
  )), ENT_QUOTES, 'UTF-8');
  $allowed_protocols = variable_get('filter_allowed_protocols', array('http', 'https', 'ftp', 'news', 'nntp', 'telnet', 'mailto', 'irc', 'ssh', 'sftp', 'webcal'));

  $protocol = '(('. implode("|", $allowed_protocols) .'):\/\/)';
  $authentication = '(([a-z0-9%' . $WEBCAM_LINK_ICHARS . ']+(:[a-z0-9%'. $WEBCAM_LINK_ICHARS . '!]*)?)?@)';
  $domain = '(([a-z0-9' . $WEBCAM_LINK_ICHARS_DOMAIN . ']([a-z0-9'. $WEBCAM_LINK_ICHARS_DOMAIN . '\-_\[\]])*)(\.(([a-z0-9' . $WEBCAM_LINK_ICHARS_DOMAIN . '\-_\[\]])+\.)*('. WEBCAM_LINK_DOMAINS .'|[a-z]{2}))?)';
  $ipv4 = '([0-9]{1,3}(\.[0-9]{1,3}){3})';
  $ipv6 = '([0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7})';
  $port = '(:([0-9]{1,5}))';

  // Pattern specific to external links.
  $external_pattern = '/^'. $protocol .'?'. $authentication .'?('. $domain .'|'. $ipv4 .'|'. $ipv6 .' |localhost)'. $port .'?';

  // Pattern specific to internal links.
  $internal_pattern = "/^([a-z0-9". $WEBCAM_LINK_ICHARS ."_\-+\[\]]+)";
  $internal_pattern_file = "/^([a-z0-9". $WEBCAM_LINK_ICHARS ."_\-+\[\]\.]+)$/i";

  $directories = "(\/[a-z0-9". $WEBCAM_LINK_ICHARS ."_\-\.~+%=&,$'!():;*@\[\]]*)*";
  // Yes, four backslashes == a single backslash.
  $query = "(\/?\?([?a-z0-9". $WEBCAM_LINK_ICHARS ."+_|\-\.\/\\\\%=&,$'():;*@\[\]{} ]*))";
  $anchor = "(#[a-z0-9". $WEBCAM_LINK_ICHARS ."_\-\.~+%=&,$'():;*@\[\]\/\?]*)";

  // The rest of the path for a standard URL.
  $end = $directories .'?'. $query .'?'. $anchor .'?'.'$/i';

  $message_id = '[^@].*@'. $domain;
  $newsgroup_name = '([0-9a-z+-]*\.)*[0-9a-z+-]*';
  $news_pattern = '/^news:('. $newsgroup_name .'|'. $message_id .')$/i';

  $user = '[a-zA-Z0-9'. $WEBCAM_LINK_ICHARS .'_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\'\[\]]+';
  $email_pattern = '/^mailto:'. $user .'@'.'('. $domain .'|'. $ipv4 .'|'. $ipv6 .'|localhost)'. $query .'?$/';

  if (strpos($text, '<front>') === 0) {
    return WEBCAM_LINK_FRONT;
  }
  if (in_array('mailto', $allowed_protocols) && preg_match($email_pattern, $text)) {
    return WEBCAM_LINK_EMAIL;
  }
  if (in_array('news', $allowed_protocols) && preg_match($news_pattern, $text)) {
    return WEBCAM_LINK_NEWS;
  }
  if (preg_match($internal_pattern . $end, $text)) {
    return WEBCAM_LINK_INTERNAL;
  }
  if (preg_match($external_pattern . $end, $text)) {
    return WEBCAM_LINK_EXTERNAL;
  }
  if (preg_match($internal_pattern_file, $text)) {
    return WEBCAM_LINK_INTERNAL;
  }

  return FALSE;
}

/**
 * Theme function for webcam field element.
 *
 * @ingroup themeable
 */
function theme_webcam_field($variables) {
  drupal_add_css(drupal_get_path('module', 'webcam') .'/webcam.css');
}

/**
 * Theme function for 'default' text field formatter.
 *
 * @ingroup themeable
 * @todo Add imagecache support.
 */
function theme_webcam_formatter_default($variables) {
  $element = $variables['element'];

  $output = '<div class="webcam" id="' . $variables['id'] . '" style="width: ' . check_plain($element['width']) . 'px;" alt="' . check_plain($element['title']) . '">' . "\n";

  $img  = '<img src="' . $element['url_default'] . '" width="' . $element['width'] . '" height="' . $element['height'] . '" class="webcam-image" />';

  if (module_exists('colorbox') && $element['lightbox']) {
    $zoom = '<img src="' . base_path() . drupal_get_path('module', 'webcam') . '/zoom.png" width="32" height="32" class="webcam-zoom iefix" alt="' . $element['title'] .'" />';

    $output .= l($zoom, $element['url_default'], array('attributes' => array('title' => $element['title'], 'class' => 'colorbox', 'id' => $variables['id'] .'-zoom'), 'html' => TRUE));
    $output .= l($img, $element['url_default'], array('attributes' => array('title' => $element['title'], 'class' => 'colorbox', 'id' => $variables['id'] .'-link'), 'html' => TRUE));
  }
  elseif ($element['link']) {
    $output .= l($img, $element['link'], array('attributes' => array('title' => $element['title']), 'html' => TRUE));
  }
  else {
    $output .= $img;
  }
  $output .= '<span class="webcam-title">' . $element['title'] . '</span>';
  $output .= '</div>' . "\n";

  return $output;
}
