<?php

/**
 * @file
 * Module that provides to print out class lists
 */

/**
 * implementation of hook_help.
 */
function class_lists_help($path, $arg) {
  if ($path == 'admin/help#class_list') {
   return t('<p>This module is to prepare class list with extended 
    information of students to print out.</p>');
  }
}

/**
 * Implementation of hook_permission()
 */
function class_lists_permission() {
  return array(
    'view all class lists' => array(
      'title' => t('View all class lists'),
      'description' => t('Allow users to view all class lists.'),
    ),
    'view own class lists' => array(
      'title' => t('View own class lists'),
      'description' => t('Allow users to view class lists which are teaching.'),
    ),
  );
}

/**
 * Implements hook_menu()
 */
function class_lists_menu() {
  $items['class_lists'] = array(
    'title' => 'Class Lists',
    'description' => 'Prepare Class Lists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('class_lists_prepare_form'),
    'access callback' => 'class_lists_access',
    'weight' => 0,
  );
  $items['class_lists/%'] = array(
    'title' => 'Display Classes',
    'description' => 'Lists of Classes',
    'page callback' => 'class_lists_display_class_lists',
    'page_arguments' => array(1),
    'access callback' => 'class_lists_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * To limit access to menu callbacks
 */
function class_lists_access() {
  GLOBAL $user;
  if (user_access('view all class lists') || user_access('view own class lists')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * To get available columns for class lists
 *
 * @return
 *   associative array of options which is keyed by field names
 */
function class_lists_form_options() {
  $options = array(
    'no' => t("No"),
    'uid' => t("Student ID"),
    'full_name' => t("Full Name"),
    'national_id_no' => t("National ID Number"),
    'nationality' => t("Nationality"),
    'level' => t("Grade Level"),
    'dob' => t("Date of Birth"),
    'pob' => t("Place of Birth"),
    'gender' => t("Gender"),
    'fathers_name' => t("Father's Name"),
    'mothers_name' => t("Mother's Name"),
    'home_address' => t("Home Address"),
    'enrollment_date' => t("Enrollment Date"),
    'scholarship' => t("Scholarship"),
  );
/*
  $school_no = db_query("
    SELECT school_no 
    FROM {school_administration_student_main} 
    WHERE academic_year = :cyear",
    array(':cyear' => SCHOOL_ADMINISTRATION_C_YEAR)
  )
  ->fetchField();
  if (empty($school_no)) {
    drupal_set_message(t('Register at least one student.'), 'warning', FALSE);
  }
  else {
    $opt = array();
    $info = user_load($school_no);
    $rid = array_keys($info->roles);
    $categories = db_query("SELECT category FROM {profile_role} WHERE rid IN (:rid)", array(':rid' => $rid))->fetchCol();
    foreach ($categories AS $category) {
      $opt[] = db_query("SELECT name, CONCAT_WS(' / ', category, title) FROM {profile_field} WHERE category=:category", array(':category' => $category))->fetchAllKeyed();
    }
    foreach ($opt AS $val) {
      foreach ($val AS $key => $res) {
      $options[$key] = $res;
      }
    }
  }
  */
  return $options;
}

/**
 * Menu callback; class list preperation form
 */
function class_lists_prepare_form($form, &$form_state) {
  $form['class_list'] = array(
    '#type' => 'checkboxes',
    '#title' => t("Columns to display"),
    '#default_value' => array('uid', 'full_name'),
    '#options' => class_lists_form_options(),
    '#description' => t("Select column names to include the class list table"),
    '#weight' => -1,
  );
  $form['empty_columns'] = array(
    '#type' => 'textarea',
    '#title' => t('Empty column names'),
    '#default_value' => variable_get('class_lists_empty_columns', ''),
    '#size' => 5,
    '#weight' => 0,
    '#description' => t("To print out the class lists, you can add empty columns like Homework or Signature"),
  );
/*
  $form['group_by'] = array(
    '#type' => 'radios',
    '#title' => t("Group By"),
    '#options' => array('class', 'level', 'gender'),
    '#description' => t("Select column names to include the class list table"),
    '#weight' => 1,
  );
*/
  if (module_exists('PDF-IDCard')) {
    $form['show_pdf'] = array(
      '#type' => 'checkbox',
      '#title' => t("Show as PDF Document"),
      '#description' => t("Check this if you plan to print out the list. If you have plan to copy and paste to a word processor or a spread sheet (like MS Excel) it is better not to use it."),
      '#weight' => -2,
    );
  }
  $form['photo_list'] = array(
    '#type' => 'submit',
    '#value' => t("Photo List"),
    '#weight' => -3,
  );
  $form['show_pdf'] = array(
    '#type' => 'submit',
    '#value' => t("PDF"),
    '#weight' => -3,
  );
  $form['class_by_class'] = array(
    '#weight' => -3,
    '#type' => 'submit',
    '#value' => t('Display class lists'),
  );
  if (user_access('view all class lists')) {
    $form['all_students'] = array(
      '#weight' => -3,
      '#type' => 'submit',
      '#value' => t('Show all students'),
    );
  }
  return $form;
}

/**
 * Form submit function
 */
function class_lists_prepare_form_submit($form, &$form_state) {
  foreach ($form_state['values']['class_list'] as $value) {
    if ($value != '0') {
      $column[] = $value;
    }
  }
  $options = class_lists_form_options();
  foreach ($column AS $name) {
    $fields[$name] = $options[$name];
  }
  variable_set('class_lists_table_columns', $fields);
  variable_set('class_lists_empty_columns', $form_state['values']['empty_columns']);
  if ($form_state['clicked_button']['#id'] == 'edit-class-by-class') {
    drupal_goto('class_lists/table');
  }
  elseif ($form_state['clicked_button']['#id'] == 'edit-photo-list') {
    drupal_goto('class_lists/photo');
  }
  elseif ($form_state['clicked_button']['#id'] == 'edit-all-students') {
    drupal_goto('class_lists/all_students');
  }
  elseif ($form_state['clicked_button']['#id'] == 'edit-show-pdf') {
    drupal_goto('class_lists/pdf');
  }
}


/**
 * 
 */
function class_lists_display_all_students() {
  //table header
  $columns = variable_get('class_lists_table_columns');
  $cols = array_filter(explode("\n", variable_get('class_lists_empty_columns', '')));
  $table = array();
  $header[] = array('data' => 'No');
  $header[] = array('data' => 'Grade Level');
  foreach ($columns AS $column => $title) {
    $header[] = array('data' => $title);
  }
  foreach ($cols as $col) {
    $header[] = array('data' => $col);
  }
  //table data
  foreach (school_administration_browse_student_levels() as $level) {
    $students[$level] = school_administration_student_list($level);
  }
  $rows = array();
  $i = 1;
  foreach ($students as $level => $sts) {
    foreach ($sts as $st) {
      $student = user_load($st);
      $row = array();
      $row[] = $i;
      $i++;
      $row[] = $level;
      foreach ($columns as $column => $title) {
         if (isset($student->student->$column)) {
           $row[] = $student->student->$column;
         }
         elseif (isset($student->identity->$column)) {
           $row[] = $student->identity->$column;
        }
        else {
          $row[] = ' ';
        }
      }
      foreach ($cols as $col) {
        $row[] = ' ';
      }
      $rows[] = $row;
    }
  }
  $table = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => 0,
    'empty' => t("There is no registered student yet"),
  );
  return theme_table($table);
}

/**
 * Get list of classes.
 *
 * @return
 *   themed tables of available classes
 */
function class_lists_display_class_lists() {
  $op = array_pop(explode('/', current_path()));
  if ($op == 'all_students') {
    return class_lists_display_all_students();
  }
  $classes = array();
  if (user_access('view all class lists')) {
    foreach (classes_and_lessons_listof_all_classes() as $class) {
      $classes[$class] = classes_and_lessons_class_list($class);
    }
  }
  else {
    GLOBAL $user;
    $cl = classes_and_lessons_teaching($user->uid);
    if (count($cl) > 0) {
      foreach ($cl as $class) {
        $classes[$class] = classes_and_lessons_class_list($class);
      }
    }
  }
  if ($op == 'table') {
    return class_lists_display_class_lists_as_table($classes); 
  }
  if ($op == 'photo') {
    return class_lists_display_class_lists_as_photo($classes); 
  }
  if ($op == 'pdf') {
    return class_lists_display_class_lists_pdf($classes); 
  }
}

/**
 * Get list of classes in pdf
 *
 * @return
 *   paged tables of available classes
 */
function class_lists_display_class_lists_pdf($classes) {
  if (!pdf_forms_tcpdf_init()) {
    drupal_set_message(t("PDF Generation is not configured correctly PDFs are unavailable"));
    return;
  }
  $columns = variable_get('class_lists_table_columns');
  $cols = array_filter(explode("\n", variable_get('class_lists_empty_columns', '')));
  $image_path = 'sites/default/files/pdf_forms/';

  $pdf = new PDFIDCARD('P', 'mm', 'A4');
  $pdf->Open();
  //Set Margins to zero (Left, Top, Right) bottom is included in footer
  $pdf->SetMargins(5, 25, 5);
  //Prevent header and footer from being printed
  $pdf->setPrintHeader(true);
  $pdf->setPrintFooter(false);
  //Turn off auto page breaks
  $pdf->SetAutoPageBreak(false);
  //Return the PDF object

  $pdf->SetDisplayMode('fullpage');
  foreach ($classes AS $class => $students) {
    $h = 9; //height of a row;
    $pdf->AddPage();
    $pdf->Image($image_path . 'letter_head.png', -10, -13, 230);
    //$pdf->SetFont('arial', '', 22);
    $pdf->SetFontSize(22);
    $pdf->Cell(0, 7, t("Class !class", array('!class' => $class)), 0, 1, 'C');
    $m = count($cols) * 15;
    $pdf->SetLeftMargin(45 - $m);
    $pdf->Ln(5);
    //$pdf->SetFont('arial', '', 11);
    $pdf->SetFontSize(14);
    foreach ($columns AS $column => $title) {
      switch ($column) {
        case 'no' :
          $w = 10; 
          break;
        case 'uid' :
          $w = 30; 
          break;
        default : 
          $w = 83;
      }
      $pdf->Cell($w, $h, $title, 1, 0, 'L');
    }
    foreach ($cols as $col) {
      $pdf->Cell(30, $h, $col, 1, 0, 'L');
    }
    $pdf->Ln();
    $i = 1;
    foreach ($students AS $school_no) {
      $student = user_load($school_no);
      foreach ($columns AS $column => $title) {
        switch ($column) {
          case 'no' :
            $w = 10; 
            break;
          case 'uid' :
            $w = 30; 
            break;
          default : 
            $w = 83;
        }
        $al = 'L';
        if (isset($student->identity->$column)) {
          $content = $student->identity->$column;
        }
        elseif ($column == 'no') {
          $content = $i;
          $al = 'C';
        }
        else {
          $content = ' ';
        }
        $pdf->Cell($w, $h, $content, 1, 0, $al);
      }
      foreach ($cols as $col) {
        $pdf->Cell(30, $h, ' ', 1, 0, 'L');
      }
      $pdf->Ln();
      $i++;
    }
    $pdf->Write($h, variable_get('pdf_class_list_text'));
  }
  $pdf->Output();
}


/**
 *
 */
function class_lists_display_class_lists_as_table($classes) {
  $columns = variable_get('class_lists_table_columns');
  $cols = array_filter(explode("\n", variable_get('class_lists_empty_columns', '')));
  $header[] = array('data' => 'No');
  foreach ($columns AS $column => $title) {
    $header[] = array('data' => $title);
  }
  foreach ($cols as $col) {
    $header[] = array('data' => $col);
  }
  $output = '';
  foreach ($classes AS $class => $students) {
    $output .= '<h1 style="text-align:center">' . $class . '</h1>';
    $rows = array();
    $table = array();
    $i = 1;
    foreach ($students AS $school_no) {
      $student = user_load($school_no);
      $row = array();
      $row[] = $i;
      $i++;
      foreach ($columns as $column => $title) {
        $row[] = (isset($student->identity->$column)) ? $student->identity->$column : ' ';
      }
      foreach ($cols as $col) {
        $row[] = ' ';
      }
      $rows[] = $row;
    }
    $table = array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array(),
      'caption' => '',
      'colgroups' => array(),
      'sticky' => 0,
      'empty' => t("There is no registered student yet"),
    );
    $output .= theme_table($table);
  }
  return $output;
}

function class_lists_display_class_lists_as_photo($classes) {
  $output = '';
  foreach ($classes AS $class => $students) {
    $output .= '<div style="height: 50px; clear: both;vertical-align:bottom"><br><h1 style="text-align:center">' . $class . '</h1></div>';
    $i = 1;
    foreach ($students AS $school_no) {
      $output .= '
        <div style="
          border: solid 1px;
          padding: 3px;
          margin: 3px;
          width: 150px;
          height: 220px;
          float: left; 
          text-align:center;">' 
        . school_administration_portrait_photo_link($school_no, array('width' => 110))
        . '<br />'
        . $school_no
        . '<br />'
        . school_administration_formatted_full_name($school_no)
        . '</div>'
      ;
    }
  }
  return $output;
}