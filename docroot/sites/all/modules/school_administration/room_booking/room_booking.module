<?php

/**
 * @file
 *
 * This module can be used for booking coomon room at a school to organize 
 * usage of the room by teachers or administrators. Administrator can schedule 
 * a room for a session in a week day, and other users who has permission, can 
 * book a room for a session which is not scheduled.
 *
 * Copyright 2009 by Murat Tutumlu ("tutumlum", http://drupal.org/user/413570)
 */

/**
 * implementation of hook_help.
 */
function room_booking_help($path, $arg) {
  if ($path == 'admin/help#room_booking') {
    return t('<p>This module can be used for booking common room at a school to organize
      usage of the room by teachers or administrators. Administrator can schedule a room
      for a session in a week day, and other users who has permission, can book a room for
      a session which is not scheduled. Booking table will be renewed weekly by start day.
      Start day and number of displying days can be customized via settings page.</p>');
  }
}

/**
 * Implementation of hook_permission()
 */
function room_booking_permission() {
  return array(
    'book a room' => array(
      'title' => t('Book a room'),
      'description' => t('Allow users to to book a room for sessions'),
    ),
    'room scheduling' => array(
      'title' => t('Room scheduling'),
      'description' => t('Allow users to schedule a room for whole year'),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function room_booking_menu() {
  $items['room_booking'] = array(
    'title' => 'Book a room',
    'description' => 'Book a room',
    'page callback' => 'room_booking_info',
    'access arguments' => array('book a room'),
    'weight' => 0,
  );
  $items['room_booking/schedule'] = array(
    'title' => 'Room Schedule',
    'description' => 'Schedule rooms',
    'page callback' => 'room_booking_info',
    'page arguments' => array(1),
    'access arguments' => array('book a room'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['room_booking/settings'] = array(
    'title' => 'Settings',
    'description' => 'Schedule rooms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('room_booking_settings_form'),
    'access arguments' => array('book a room'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['room_booking/book/%'] = array(
    'title' => 'Room Booking',
    'description' => 'Schedule rooms',
    'page callback' => 'room_booking_book_room_info',
    'page arguments' => array(1, 2),
    'access arguments' => array('book a room'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
  );
  $items['room_booking/cancel/%'] = array(
    'title' => 'Room Booking',
    'description' => 'Schedule rooms',
    'page callback' => 'room_booking_book_room_info',
    'page arguments' => array(1, 2),
    'access arguments' => array('book a room'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
  );
  $items['room_booking/schedule/%'] = array(
    'title' => 'Room Scheduling',
    'description' => 'Schedule rooms',
    'page callback' => 'room_booking_schedule_room_info',
    'page arguments' => array(2),
    'access arguments' => array('room scheduling'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

// ======================================
// Page Callback Functions:
// ======================================

/**
 * Menu normal item;
 */
function room_booking_info($op = 'book') {
  $output = 'Select a room:<br />';
  foreach(explode("\n", variable_get('room_booking_room_names', '')) as $id => $name) {
    $output .= l($name, "room_booking/$op/$id") . '<br />';
  }
  return $output;
}

// ======================================
// Helper Functions:
// ======================================

/**
 * It can be used to get tcl_id fom room_schedule. 0 is used for administration.
 *
 * @param $room
 *   id of selected room.
 * @param $date
 *   integer value of given date.
 * @param $session
 *   session id of selected date.
 *
 * @return tcl id.
 */
function room_booking_get_tcl_id($room, $date, $session) {
  return db_query("
    SELECT tcl_id FROM room_booking 
    WHERE book_date=:date
    AND session_no=:session
    AND room=:room",
    array(':date' => $date,
      ':room' => $room,
      ':session' => $session,
    )
  )
  ->fetchField();
}

/**
 * It produces available dates array.
 *
 * @return array of available dates
 */
function room_booking_available_dates() {
  $num_days = variable_get('room_booking_display_days', 14);
  $start_day = variable_get('room_booking_start_day', 1);
  //$sday = mktime(0, 0, 0,(int)date('m'),(int)date('d'),(int)date('Y'));
  $sday = mktime(0, 0, 0, (int)date('m'), (int)date('d')+($start_day-(int)date('w')), (int)date('Y'));
  for ($n=0; $n < $num_days; $n++) {
    $available_dates[] = $sday+$n*60*60*24;
  }
  return $available_dates;
}

/**
 * It shows selected room's booking info.
 *
 * @param $room
 *   id of selected room.
 *
 * @return themed table
 */
function room_booking_book_room_info($op, $room) {
  GLOBAL $user;
  $room_schedules = variable_get('room_booking_rooms_schedules', '');
  //print_r($room_schedules);
  $room_names = explode("\n", variable_get('room_booking_room_names', ''));
  $output = $room_names[$room];
  $path_arr = explode('/', current_path());
  if (count($path_arr) > 3) {
    $values = array(
      'teacher' => $user->uid,
      'room' => $path_arr[2],
      'date' => $path_arr[3],
      'session' => $path_arr[4],
    );
    if ($op == 'book') {
      $output .= drupal_render(drupal_get_form('room_booking_book_room_form', $values));
    }
    if ($op == 'cancel') {
      room_booking_book_room_cancel($values);
    }
  }
  $header = array(
    array('data' => t('Days'))
  );
  for ($i=1; $i <= variable_get('room_booking_daily_number_of_sessions', 9); $i++) {
    $header[$i]['data'] = "Session $i";
  }
  foreach (room_booking_available_dates() AS $id => $date) {
    $rows[$id][] = format_date($date, 'custom', 'd M Y l');
    for($session=1; $session <= variable_get('room_booking_daily_number_of_sessions', 9); $session++) {
      $tcl = room_booking_get_tcl_id($room, $date, $session);
      if ($room_schedules[$room][date('w', $date)][$session-1] == 1) {
        $rows[$id][] = '<span style="color:red">Scheduled</span>';
      }
      elseif ($tcl !== FALSE) {
        if($tcl == 0) {
          $title = t('Administration');
          $cancel_link = '<br/>' . l(t('Cancel'), "room_booking/cancel/$room/$date/$session", array('attributes' => array('style' => 'color:maroon')));
          $rows[$id][] = l(t('Booked'), current_path(), array('attributes' => array('title' => $title))) . $cancel_link;
          continue;
        }
        $tcl_info = classes_and_lessons_tcl_by_id($tcl);
        $title = "$tcl_info->class $tcl_info->lesson " . school_administration_formatted_full_name($tcl_info->teacher);
        if($tcl_info->teacher == $user->uid) {
          $cancel_link = '<br/>' . l(t('Cancel'), "room_booking/cancel/$room/$date/$session", array('attributes' => array('style' => 'color:maroon')));
        }
        else {
          $cancel_link = '';
        }
        $rows[$id][] = l(t('Booked'), current_path(), array('attributes' => array('title' => $title))) . $cancel_link;
      }
      else {
        $rows[$id][] = l(t('Available'), "room_booking/book/$room/$date/$session", array('attributes' => array('style' => 'color:green')));
      }
    }
  }
  $table = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => 1,
    'empty' => '',
  );
  $output .= theme_table($table);
  return $output;
}

/**
 * It cancels booked session.
 *
 * @param $values
 *   cancel booking data
 */
function room_booking_book_room_cancel($values) {
  $tcl = room_booking_get_tcl_id($values['room'], $values['date'], $values['session']);
  $tcl_info = classes_and_lessons_tcl_by_id($tcl);
  $del = db_delete('room_booking')
  ->condition('room', $values['room'], '=')
  ->condition('book_date', $values['date'], '=')
  ->condition('session_no', $values['session'], '=');
  if ($tcl == 0 && user_access('room scheduling')) {
    $del->execute();
    return;
  }
  if($tcl_info->teacher != $values['teacher']) {
    return drupal_set_message(t("Cannot delete, You didn't book it."), 'warning');
  }
  $del->execute();
}

/**
 * It shows selected room schedule.
 *
 * @param $room
 *   id of selected room.
 *
 * @return themed table
 */
function room_booking_schedule_room_info($room) {
  $path_arr = explode('/', current_path());
  if (count($path_arr) > 3) {
    $data = array(
      'room' => $path_arr[2],
      'day' => $path_arr[3],
      'session' => $path_arr[4],
    );
    room_booking_schedule_room($data);
  }
  $room_schedules = variable_get('room_booking_rooms_schedules', '');
  $room_names = explode("\n", variable_get('room_booking_room_names', ''));
  $output = $room_names[$room];
  $output .= t('Schedule table:');
  $header[0]['data'] = t('Days');
  for ($session=1; $session <= variable_get('room_booking_daily_number_of_sessions', 9); $session++) {
    $header[$session]['data'] = "Session $session";
  }
  for ($i= 5; $i < 12; $i++) {
  $days[] = date('l', mktime(0, 0, 0, 0, $i, 0));
  }
  foreach ($days as $day_id => $day) {
    $rows[$day_id][0] = $day;
    for($session=1; $session <= variable_get('room_booking_daily_number_of_sessions', 9); $session++) {
      if ($room_schedules[$room][$day_id][ $session-1 ]  == 1) {
        $rows[$day_id][$session] = l(t('Unschedule it'), "room_booking/schedule/$room/$day_id/$session", array('attributes' => array('style' => 'color:red')));
      }
      else {
        $rows[$day_id][$session] = l(t('Schedule it'), "room_booking/schedule/$room/$day_id/$session", array('attributes' => array('style' => 'color:green')));
      }
    }
  }
  $table = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => 1,
    'empty' => '',
  );
  $output .= theme_table($table);
  return $output;
}

/**
 * It records room schedule.
 *
 * @param $op
 *   used for scheduling or unscheduling.
 * @param $data
 *   scheduling/unscheduling data.
 */
function room_booking_schedule_room($data) {
  $room_schedules = variable_get('room_booking_rooms_schedules', ''); 
  $set = ($room_schedules[$data['room']][$data['day']][$data['session']-1]) == 1 ? 0 : 1;
  $room_schedules[$data['room']][$data['day']][$data['session']-1] = $set;
  variable_set('room_booking_rooms_schedules', $room_schedules);
}

// ======================================
// Form generation Functions:
// ======================================

function room_booking_book_room_form($empty, $form_state, $values) {
  $room_names = explode("\n", variable_get('room_booking_room_names', ''));
  $options = (user_access('room scheduling')) ? array(t('Administration')) : array();
  foreach (classes_and_lessons_tcl_details('teacher', $values['teacher']) as $key => $val) {
    $options[$key] = "$val->value1 $val->value2";
  }
  $form['book'] = array(
    '#type' => 'fieldset',
    '#title' => t("Booking !room for <b>!date</b>, Session <b>!session</b>", array(
      '!room' => $room_names[$values['room']],
      '!date' => date('d M Y l', $values['date']),
      '!session' => $values['session'],
    )),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['book']['tclid'] = array(
    '#type' => 'select',
    '#title' => t('Book for'),
    '#weight' => 1,
    '#required' => TRUE,
    '#options' => $options,
  );
  $form['teacher'] = array(
    '#type' => 'value',
    '#value' => $values['teacher'],
  );
  $form['date'] = array(
    '#type' => 'value',
    '#value' => $values['date'],
  );
  $form['room'] = array(
    '#type' => 'value',
    '#value' => $values['room'],
  );
  $form['session'] = array(
    '#type' => 'value',
    '#value' => $values['session'],
  );
  $form['book']['submit'] = array(
    '#type' => 'submit',
    '#weight' => 2,
    '#value' => t('Submit'),
  );
  return $form;
}

function room_booking_cancel_booking_form($empty, $form_state, $booking_id) {
  $form['booking_id'] = array(
    '#type' => 'value',
    '#value' => $booking_id,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#weight' => 2,
    '#value' => t('Cancel Booking'),
  );
  return $form;
}

function room_booking_settings_form($form_state) {
  for ($i= 5; $i < 12; $i++) {
  $days[] = date('l', mktime(0, 0, 0, 0, $i, 0));
  }
  $form['sessions'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of available sessions for each room'),
    '#default_value' => variable_get('room_booking_daily_number_of_sessions', 9),
    '#required' => TRUE,
    '#size' => 2,
    '#maxlength' => 2,
    '#weight' => 0,
  );
  $form['display_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of display days for each room'),
    '#default_value' => variable_get('room_booking_display_days', 14),
    '#required' => TRUE,
    '#size' => 2,
    '#maxlength' => 2,
    '#weight' => 1,
  );
  $form['start_day'] = array(
    '#type' => 'select',
    '#title' => t('Start day of booking tables'),
    '#default_value' => variable_get('room_booking_start_day', 1),
    '#required' => TRUE,
    '#options' => $days,
    '#weight' => 2,
  );
  $form['room_names'] = array(
    '#type' => 'textarea',
    '#title' => t('Room Names'),
    '#default_value' => variable_get('room_booking_room_names', ''),
    '#required' => TRUE,
    '#size' => 5,
    '#weight' => 3,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Configuration'),
    '#weight' => 10,
  );
  return $form;
}

// ======================================
// Form Submit Functions:
// ======================================

function room_booking_settings_form_submit($form_id, &$form_state) {
  //number of sessions
  $sessions = variable_get('room_booking_daily_number_of_sessions', 9);
  $diff = $form_state['values']["sessions"] - $sessions;
  if ($diff != 0) {
    $room_schedules = variable_get('room_booking_rooms_schedules', '');
    if ($diff > 0){
      foreach ($room_schedules as $room => $schedule) {
        foreach ($schedule as $days => $sessions) {
          for ($i = $diff; $i > 0; $i--) {
            $room_schedules[$room][$days][] = 0;
          }
        }
      }
    }
    if ($diff < 0){
      foreach ($room_schedules as $room => $schedule) {
        foreach ($schedule as $days => $sessions) {
          for ($i = $diff; $i < 0; $i++) {
            array_pop($room_schedules[$room][$days]);
          }
        }
      }
    }
    variable_set('room_booking_rooms_schedules', $room_schedules);
    variable_set('room_booking_daily_number_of_sessions', $form_state['values']["sessions"]);
  }
  //room names
  $rooms = count(explode("\n", variable_get('room_booking_room_names', '')));
  $diff = count(explode("\n", trim($form_state['values']["room_names"]))) - $rooms;
  if ($diff != 0) {
    $room_schedules = variable_get('room_booking_rooms_schedules', '');
    $sessions = variable_get('room_booking_daily_number_of_sessions', 9);
    if ($diff > 0){
      for ($j=0; $j < 7; $j++) {
        for ($k=0; $k < $sessions; $k++) {
          $room_arr[$j][$k] = 0;
        }
      }
      for (; $diff > 0; $diff--) {
        $room_schedules[] = $room_arr;
      }
    }
    if ($diff < 0){
      for (; $diff < 0; $diff++) {
        array_pop($room_schedules);
      }
    }
    variable_set('room_booking_rooms_schedules', $room_schedules);
    variable_set('room_booking_room_names', $form_state['values']["room_names"]);
  }
  variable_set('room_booking_display_days', $form_state['values']["display_days"]);
  variable_set('room_booking_start_day', $form_state['values']["start_day"]);

}

function room_booking_book_room_form_submit($form_id, &$form_state) {
  $fields = array(
    'room' => $form_state['values']["room"],
    'book_date' => $form_state['values']["date"],
    'session_no' => $form_state['values']["session"],
    'tcl_id' => $form_state['values']["tclid"],
  );
  db_insert('room_booking')
  ->fields($fields)
  ->execute();
  $form_state['redirect'] = 'room_booking/book/' . $form_state['values']["room"];
}

// ======================================
// Form Validation Functions:
// ======================================

function room_booking_book_room_form_validate($form_id, &$form_state) {
  $room_schedules = variable_get('room_booking_rooms_schedules', '');
  $date = $form_state['values']["date"];
  $room = $form_state['values']["room"];
  $tclid = $form_state['values']["tclid"];
  $session = $form_state['values']["session"];
  $tcl_id_arr = (user_access('room scheduling')) ? array(t('Administration')) : array();
  $tcl_id_arr += classes_and_lessons_tcl_details('teacher', $form_state['values']['teacher']);
  $valid = FALSE;
  if (room_booking_get_tcl_id($room, $date, $session) == '' 
    && $session <= variable_get('room_booking_daily_number_of_sessions', 9)
    && in_array($date, room_booking_available_dates()) 
    && $room_schedules[$room][date('w', $date)][$session-1]  == 0
    && array_key_exists($tclid, $tcl_id_arr) 
  ) {
      $valid = TRUE;
  }
  if(!$valid)
  form_set_error('tclid', t('Not available'));
}