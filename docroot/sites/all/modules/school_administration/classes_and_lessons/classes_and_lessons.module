<?php

/**
 * @file
 *
 * This module is a base module for grading. With this module school 
 * administrator can assign lessons and classes to teachers. 
 *
 * Author: Murat Tutumlu ("tutumlum", http://drupal.org/user/413570)
 */

/**
 * Maybe because of core bug, functions are not included
 * if there is no include file. Will be deleted soon
 */
include_once 'classes_and_lessons.inc';

/**
 * implementation of hook_help.
 */
function classes_and_lessons_help($path, $arg) {
  if ($path == 'admin/help#classes_and_lessons') {
    return '<p>' . t('This module is designed to arrange classes for students; and lessons and
      teachers for classes. You can keep and view detailed information for classes including
      homeroom teacher system and you can assign one or more class to each students. 
      The most important part of this module is matching teacher-class-lesson. You can organize 
      which teacher is teaching which lesson to which class.') . '</p>';
  }
}

/**
 * Implements hook_permission()
 */
function classes_and_lessons_permission() {
  return array(
    'administer classes and lessons' => array(
      'title' => t('Administer classes and lessons'),
      'description' => t('Allow users to edit or delete details of classes and lessons.'),
    ),
    'view classes and lessons details' => array(
      'title' => t('View all details'),
      'description' => t('Allow users to view details of classes and lessons.'),
    ),
  );
}

/**
 * Implements hook_menu()
 */
function classes_and_lessons_menu() {
  $items['classes_and_lessons'] = array(
    'title' => 'Classes',
    'description' => 'Recorded Classes',
    'page callback' => 'classes_and_lessons_classes_summary',
    'access callback' => 'classes_and_lessons_access',
    'weight' => -1,
  );
  $items['classes_and_lessons/lessons'] = array(
    'title' => 'Lessons',
    'description' => 'Recorded Lessons',
    'page callback' => 'classes_and_lessons_lessons',
    'access arguments' => array('administer classes and lessons'),
    'weight' => 2,
  );
  $items['classes_and_lessons/student_classes'] = array(
    'title' => 'Students Classes',
    'description' => "Edit a student's classes",
    'page callback' => 'classes_and_lessons_student_detail',
    'access arguments' => array('view classes and lessons details'),
    'weight' => -1,
  );
  $items['classes_and_lessons/student_classes/noclass'] = array(
    'title' => 'Students Classes',
    'description' => "Students without any class",
    'page callback' => 'classes_and_lessons_student_classes_no_class_view',
    'access arguments' => array('view classes and lessons details'),
    'weight' => -1,
    'type' => MENU_CALLBACK,
  );
  $items['classes_and_lessons/student_classes/delete/%/%'] = array(
    'title' => 'Students',
    'description' => "Edit a student's classes",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('classes_and_lessons_student_class_delete_form', 3, 4),
    'access arguments' => array('administer classes and lessons'),
    'weight' => -1,
    'type' => MENU_CALLBACK,
  );
  $items['classes_and_lessons/tcl'] = array(
    'title' => 'TCL',
    'description' => 'Teacher-Class-Lesson Matching',
    'page callback' => 'classes_and_lessons_tcl_view',
    'access arguments' => array('administer classes and lessons'),
    'weight' => 0,
  );
  $items['classes_and_lessons/tcl/edit'] = array(
    'title' => 'Edit / Delete',
    'description' => 'Edit teacher-class-lesson triads',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['classes_and_lessons/tcl/add'] = array(
    'title' => 'Add new',
    'description' => 'Add new teacher-class-lesson triad',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('classes_and_lessons_tcl_edit_form'),
    'access arguments' => array('administer classes and lessons'),
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['classes_and_lessons/tcl/lesson/%'] = array(
    'title' => 'Edit',
    'description' => 'Edit new teacher-class-lesson triad',
    'page callback' => 'classes_and_lessons_tcl_view',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer classes and lessons'),
    'weight' => -1,
    'type' => MENU_CALLBACK,
  );
  $items['classes_and_lessons/tcl/teacher/%'] = array(
    'title' => 'Edit',
    'description' => 'Edit new teacher-class-lesson triad',
    'page callback' => 'classes_and_lessons_tcl_view',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer classes and lessons'),
    'weight' => -1,
    'type' => MENU_CALLBACK,
  );
  $items['classes_and_lessons/tcl/class/%'] = array(
    'title' => 'Edit',
    'description' => 'Edit new teacher-class-lesson triad',
    'page callback' => 'classes_and_lessons_tcl_view',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer classes and lessons'),
    'weight' => -1,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function classes_and_lessons_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form_id == 'class_node_form') {
    drupal_set_title(t('Add New Class'));
    //echo '<pre>';print_r($node);exit;
    $node = $form['#node'];
    $nid = isset($node->nid) ? $node->nid : NULL;
    $form['title']['#description'] = t('Name of the class must be unique for current academic year');
    $form['options']['promote']['#default_value'] = 0;
    $form['class'] = classes_and_lessons_class_edit_form($form_id, $form_state, $nid);
  }
  if (isset($form['type']) && isset($form['#node']) && $form_id == 'lesson_node_form') {
    drupal_set_title(t('Add New Lesson'));
    $form['options']['promote']['#default_value'] = 0;
  }
}

/**
 * Implements hook_node_validate().
 */
function classes_and_lessons_node_validate($node, $form) {
  if ($node->type == 'class' && !isset($node->nid)) {
    $result = db_query("
      SELECT name
      FROM {classes_and_lessons_class_info}
      WHERE name = :name
      AND academic_year = :cyear
      AND term = :term",
      array(
        ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
        ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
        ':name' => $node->title,
      )
    )
    ->fetchCol();
    if (count($result) > 0) {
      form_set_error('title', t('Class name must be unique'));
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function classes_and_lessons_node_insert($node) {
  if ($node->type == 'class' && isset($node->form_id)) {
    $values = array(
      'nid' => $node->nid,
      'name' => $node->title,
      'academic_year' => SCHOOL_ADMINISTRATION_C_YEAR,
      'term' => SCHOOL_ADMINISTRATION_C_TERM,
      'hr_teacher1' => $node->hr_teacher,
      'hr_teacher2' => $node->hr_teacher2,
      'supervisor1' => $node->supervisor1,
      'supervisor2' => $node->supervisor2,
      'supervisor3' => $node->supervisor3,
      'for_gender' => $node->for_gender,
      'capacity' => $node->class_capacity,
      'notes' => $node->class_notes,
    );
    drupal_write_record('classes_and_lessons_class_info', $values);
    drupal_set_message(t('New class is saved..'));
    drupal_goto('classes_and_lessons');
  }
  if ($node->type == 'lesson' && isset($node->form_id)) {
    drupal_goto('classes_and_lessons/lessons');
  }
}

/**
 * Implements hook_node_delete().
 */
function classes_and_lessons_node_delete($node) {
  $total = count($node->class_info->teachers);
  if ($total > 0) {
    drupal_set_message(t("%class cannot be deleted. There are !total students registered to %class", 
      array('%class' => $node->title, '!total' => $total)), 'warning'
    );
    drupal_goto("node/$node->nid/edit");
  }
  $total = count(classes_and_lessons_class_list($node->title));
  if ($total > 0) {
    drupal_set_message(t("%class cannot be deleted. There are teachers teaching to %class", 
      array('%class' => $node->title, '!total' => $total)), 'warning'
    );
    drupal_goto("node/$node->nid/edit");
  }
  db_delete('classes_and_lessons_class_info')
  ->condition('name', $node->title, '=')
  ->condition('academic_year', SCHOOL_ADMINISTRATION_C_YEAR, '=')
  ->condition('term', SCHOOL_ADMINISTRATION_C_TERM, '=')
  ->execute();
  drupal_set_message(t('%class is deleted..', array('%class' => $node->title)));
}

/**
 * Implements hook_node_update().
 */
function classes_and_lessons_node_update($node) {
  //update if node type is class and data is coming from a form
  if ($node->type == 'class' && isset($node->form_id)) {
    $values = array(
      'name' => $node->title,
      'academic_year' => SCHOOL_ADMINISTRATION_C_YEAR,
      'term' => SCHOOL_ADMINISTRATION_C_TERM,
      'hr_teacher1' => $node->hr_teacher,
      'hr_teacher2' => $node->hr_teacher2,
      'supervisor1' => $node->supervisor1,
      'supervisor2' => $node->supervisor2,
      'supervisor3' => $node->supervisor3,
      'for_gender' => $node->for_gender,
      'capacity' => $node->class_capacity,
      'notes' => $node->class_notes,
    );
    drupal_write_record('classes_and_lessons_class_info', $values, array('name', 'academic_year', 'term'));
    drupal_set_message(t('%class is updated..', array('%class' => $node->title)));
    drupal_goto('classes_and_lessons');
  }
  //update if node type is lesson and data is coming from a form
  if ($node->type == 'lesson' && isset($node->form_id)) {
    drupal_goto('classes_and_lessons/lessons');
  }
}

/**
 * Implements hook_node_load().
 */
function classes_and_lessons_node_load($nodes, $form) {
  foreach ($nodes as $node) {
    if ($node->type == 'class' && isset($node->nid)) {
      $nodes[$node->nid]->class_info = classes_and_lessons_class_load($node->nid);
    }
  }
}

/**
 * Implements hook_node_view().
 */
function classes_and_lessons_node_view($node, $build_mode = 'full') {
  // Make sure to set a view, also for nodes saved previously and not yet rated.
  if ($node->type == 'class') {
    $node->content['class'] = array(
      '#markup' => theme('classes_and_lessons_class_detail', array('class' => $node->class_info)),
      '#weight' => -1,
    );
  }
}

/**
 * To limit access to menu callbacks
 * TODO: add homeroom teachers view and edit on class
 */
function classes_and_lessons_access($op = 'view') {
  GLOBAL $user;
  switch ($op) {
    case 'view' :
      if(user_access('view classes and lessons details') || user_access('access administration pages')) {
        return TRUE;
      }
  }
  return FALSE;
}

/**
 * set limit = NULL if you want to get all
 */
function classes_and_lessons_last_terms($limit = 4) {
  $query = db_select('classes_and_lessons_class_info', 'c');
  $query->fields('c', array('academic_year', 'term'));
  $query->distinct();
  $query->orderBy('academic_year', 'DESC');
  $query->orderBy('term', 'DESC');
  if ($limit != NULL) {
    $query->range(0, $limit);
  }
  return $query->execute()->fetchAll();
}

/**
 * Menu callback; Main Classes Link
 */
function classes_and_lessons_classes_summary($term = NULL) {
  list($year, $term) = ($term == NULL) ? array(SCHOOL_ADMINISTRATION_C_YEAR, SCHOOL_ADMINISTRATION_C_TERM) : explode('-', $term);
  $output = l(t('Add New Class'), 'node/add/class');
  $link_terms = classes_and_lessons_last_terms();
  $links = array();
  foreach ($link_terms as $link) {
    $links[] = ' [ '. l("$link->academic_year/$link->term", "classes_and_lessons/$link->academic_year-$link->term") . ' ] ';
  }
  $output .= '<br /><br />' . t('View Recent Terms:') . implode(' ', $links) . '<br /><br />';
  $output .= '<h3>' . t('Recorded classes for !acad-year / !term:', array('!acad-year' => $year - 1 . '-' . $year, '!term' => $term)) . '</h3>';

  $header = array(
    array('data' => t('Class'), 'field' => 'name', 'sort' => 'asc'),
    array('data' => t('Capacity'), 'field' => 'capacity'),
    array('data' => t('Population')),
    array('data' => t('Supervisor'), 'field' => 'supervisor1'),
    array('data' => t('Homeroom Teacher'), 'field' => 'hr_teacher1'),
  );

  $query = db_select('classes_and_lessons_class_info', 'c');
  $query->fields('c');
  $query->condition('academic_year', $year);
  $query->condition('term', $term);
  $query = $query->extend('TableSort')->orderByHeader($header);
  $classes = $query->execute();

  $i = 0;
  $rows = array();
  foreach ($classes as $class) {
    $rows[$i][] = l($class->name, 'node/' . $class->nid);
    $rows[$i][] = $class->capacity;
    $rows[$i][] = count(classes_and_lessons_class_list($class->name, $year, $term));
    $rows[$i][] = school_administration_formatted_full_name($class->supervisor1);
    $rows[$i][] = school_administration_formatted_full_name($class->hr_teacher1);
    $i++;
  }
  $table = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => 1,
    'empty' => t("There is no registered class yet"),
  );
  $output .= theme_table($table);
  return $output;
}

/**
 * Menu callback; View student classes
 */
function classes_and_lessons_student_detail($path = NULL) {
  $output = '';
  if (!is_numeric($school_no = array_pop(explode('/', current_path())))) {
    foreach(classes_and_lessons_listof_student_classes() as $class) {
      //$output .= ' [ ' . l($class, "classes_and_lessons/student_classes/$class") . ' ] ';
    }
    $output .= '<br>[ ' . l(t("Click to see students without any class"), "classes_and_lessons/student_classes/noclass") . ' ] ';
    return $output;
  }
  $student_classes = classes_and_lessons_listof_student_classes($school_no);
  foreach($student_classes as $class) {
    $cls[] = $class . ' [ ' . l(t('DELETE'), "classes_and_lessons/student_classes/delete/$class/$school_no") . ' ] ';
  }
  if (isset($cls)) {
    $output .= t('Classes of !name:<br />', array('!name' => school_administration_formatted_full_name($school_no)));
    $output .= implode('<br/>', $cls);
  }
  else {
    $output = '';
  }
  $output .= drupal_render(drupal_get_form('classes_and_lessons_student_class_add_form', $school_no));
  return $output;
}

function classes_and_lessons_st_no_cl_form($form_id, $form_state) {
  $options = array();
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Register Students to Selected Class'),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $options = array();
  foreach (classes_and_lessons_listof_all_classes() as $class) {
    $classes[$class] = $class;
  }

  $form['options']['class'] = array(
    '#type' => 'select',
    '#options' => $classes,
  );
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Register'),
  );
  $students = array();
  $header = array(
    'uid' => array('data' => t('ID Number'), 'field' => 'school_no'),
    'username' => array('data' => t('Name Surname'), 'field' => 'names'),
  );
  foreach(classes_and_lessons_student_classes_no_class() as $student) {
    $students[$student] = array(
      'uid' => $student,
      'username' => school_administration_formatted_full_name($student),
    );
  }
  $form['students'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $students,
    '#empty' => t('All students are member of at least one class.'),
  );
  //TODO: add pager
  $form['pager'] = array('#theme' => 'pager');

  return $form;
}

function classes_and_lessons_st_no_cl_form_validate($form, &$form_state) {
  if (count(array_filter($form_state['values']['students'])) == 0) {
    form_set_error('', t('No students selected.'));
  }
}

function classes_and_lessons_st_no_cl_form_submit($form, &$form_state) {
  $values = array(
    'class' => $form_state['values']['class'],
    'academic_year' => SCHOOL_ADMINISTRATION_C_YEAR,
    'term'          => SCHOOL_ADMINISTRATION_C_TERM,
  );
  // Filter out unchecked students and perform registration.
  $students = array_filter($form_state['values']['students']);
  foreach ($students as $student) {
    $values['school_no'] = $student;
    drupal_write_record('classes_and_lessons_student_classes', $values);
  }
  drupal_set_message(format_plural(
    count($students), 
    '@count student is added to %class.',
    '@count students are added to %class.', 
    array('%class' => $form_state['values']['class'])));
}

/**
 * Menu callback; list of students who have no class.
 */
function classes_and_lessons_student_classes_no_class_view() {
  drupal_set_title('Students without any class');
  return drupal_render(drupal_get_form('classes_and_lessons_st_no_cl_form'));
}

/**
 * Menu callback; tcl view
 */
function classes_and_lessons_tcl_view($op = NULL, $val = NULL, $tcl = NULL) {
  $details = NULL;
  $edit = NULL;
  $tch = array();
  $teachers = array();
  $classes = array();
  $lessons = array();
  foreach(classes_and_lessons_tcl_teachers() as $teacher => $credit) {
    $tch[school_administration_formatted_full_name($teacher)] = array($teacher, $credit);
  }
  ksort($tch);
  foreach($tch as $teacher => $info) {
    $teachers[l($teacher, "classes_and_lessons/tcl/teacher/$info[0]")] = $info[1];
  }
  foreach(classes_and_lessons_tcl_classes() as $class => $credit) {
    $classes[l($class, "classes_and_lessons/tcl/class/$class")] = $credit;
  }
  foreach(classes_and_lessons_tcl_lessons() as $lesson => $credit) {
    $lessons[l($lesson, "classes_and_lessons/tcl/lesson/$lesson")] = $credit;
  }
  switch ($op) {
    case 'teacher' :
      $details->name = school_administration_formatted_full_name($val);
      $teacher = classes_and_lessons_tcl_details('teacher', $val);
      foreach ($teacher as $key => $value) {
        $result[$key] = array(
          'value' => l("$value->value1 $value->value2", "classes_and_lessons/tcl/teacher/$val/$key"),
          'lesson_hour' => $value->lesson_hour,
        );
      }
      $details->values = $result;
      break;

    case 'class' :
      $details->name = $val;
      $class = classes_and_lessons_tcl_details('class', $val);
      foreach ($class as $key => $value) {
        $result[$key] = array(
          'value' => l("$value->value1 " .
            school_administration_formatted_full_name($value->value2),
            "classes_and_lessons/tcl/class/$val/$key"),
          'lesson_hour' => $value->lesson_hour,
        );
      }
      $details->values = $result;
      break;

    case 'lesson' :
      $details->name = $val;
      $lesson = classes_and_lessons_tcl_details('lesson', $val);
      foreach ($lesson as $key => $value) {
        $result[$key] = array(
          'value' => l("$value->value1 " .
            school_administration_formatted_full_name($value->value2),
            "classes_and_lessons/tcl/lesson/$val/$key"),
          'lesson_hour' => $value->lesson_hour,
        );
      }
      $details->values = $result;
      break;
  }
  if($tcl != NULL) {
    $edit = drupal_render(drupal_get_form('classes_and_lessons_tcl_edit_form', $tcl));
  }
  return theme('classes_and_lessons_tcl', array(
    'teachers' => $teachers, 
    'classes'  => $classes, 
    'lessons'  => $lessons, 
    'details'  => $details, 
    'edit'     => $edit,
  ));
}

/**
 * Implementation of hook_block_info
 * Block to display list of classes
 */
function classes_and_lessons_block_info() {
  $blocks['class_list'] = array(
    'info'       => t('List of classes'),
    'status'     => 1,
    'weight'     => -1,
    'visibility' => 1,
    'region'     => 'content',
    'pages'      => "classes_and_lessons/class*\n"
      . "classes_and_lessons/student_classes*\n"
      . "school_administration/browse/students*\n"
      . "school_administration/browse/parents*",
    'cache'      => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['student_list'] = array(
    'info'       => t('List of Students'),
    'status'     => 1,
    'weight'     => -1,
    'visibility' => 1,
    'region'     => 'sidebar_second',
    'pages'      => "classes_and_lessons/student_classes*\n"
      . "school_administration/browse/students*\n"
      . "school_administration/browse/parents*",
    'cache'      => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_configure
 */
function classes_and_lessons_block_configure($delta = '') {
  if ($delta == 'class_list') {
    $form['vertical_or_horizontal'] = array(
      '#type' => 'select',
      '#title' => t('Vertical or Horizontal'),
      '#default_value' => variable_get('classes_and_lessons_vertical_or_horizontal', 'Horizontal'),
      '#options' => array('Horizontal', 'Vertical'),
    );
    return $form;
  }
}

/**
 * Implementation of hook_block_save
 */
function classes_and_lessons_block_save($delta = '', $edit = array()) {
  if ($delta == 'class_list') {
    variable_set('classes_and_lessons_vertical_or_horizontal', $edit['vertical_or_horizontal']);
  }
}

/**
 * Implementation of hook_block_view
 */
function classes_and_lessons_block_view($delta = '') {
  global $user;
  if (user_access('administer classes and lessons')) {
    $classes = classes_and_lessons_listof_all_classes();
  }
  elseif ($classes = classes_and_lessons_teaching($user->uid)) {
    
  }
  else {
    $classes = array();
  }
  $result = array();
  switch ($delta) {
    case 'class_list':
      $path_arr = explode('/', current_path());
      if (in_array('add', $path_arr)) {
        $block = array();
      }
      else {
        $result_class = array_values(array_intersect($path_arr, $classes));
        if (count($result_class) > 0) {
          $key = array_search($result_class[0], $path_arr);
          $path_arr = array_slice($path_arr, 0, $key);
        }
        $path = implode('/', $path_arr);
        foreach($classes as $class) {
          $result[$class] = l($class, $path . '/' . $class);
        }
        $block = array(
          'subject' => '<none>',
          'content' => theme('classes_and_lessons_list_block', array('op' => 'classes', 'data' => $result)),
        );
      }
      break;

    case 'student_list':
      $path_arr = explode('/', current_path());
      if (in_array('add', $path_arr)) {
        return array();
      }
      else {
        $result_class = array_intersect($path_arr, $classes);
        if(count($result_class) > 0) {
          $class = reset($result_class);
        }
        else {
          return array();
        }
        $students = classes_and_lessons_class_list($class);
        if (in_array(end($path_arr), $students)) {
          array_pop($path_arr);
        }
        $path = implode('/', $path_arr);
        foreach($students as $student) {
          $result[$student] = l(school_administration_formatted_full_name($student), $path . '/' . $student);
        }
        usort($result, 'school_administration_sort_link');
        $block = array(
          'subject' => $class,
          'content' => theme('classes_and_lessons_list_block', array( 'op' => 'students', 'data' => $result)),
        );
      }
      break;
  }
  return $block;
}

/**
 * Implementation of hook_theme
 */
function classes_and_lessons_theme() {
  return
  array(
    'classes_and_lessons_list_block' =>
      array(
        'variables' =>
          array(
            'classes' => array()
          )
      ),
    'classes_and_lessons_class_detail' =>
      array(
        'variables' =>
          array(
            'class' => array()
          )
      ),
    'classes_and_lessons_tcl' =>
      array(
        'variables' =>
          array(
            'teachers' => array(),
            'classes' => array(),
            'lessons' => array(),
            'details' => NULL,
            'edit' => NULL
          )
      )
  );
}

/**
 * Theming TCL (Teacher-Class-Lesson Matching)
 */
function theme_classes_and_lessons_tcl($input) {
  $out_array = array(
    t('CLASSES')  => $input['classes'],
    t('LESSONS')  => $input['lessons'],
    t('TEACHERS') => $input['teachers'],
  );
  $output = '<table border="2"><tr>';
  foreach ($out_array as $name => $value) {
    $output .= '<td valign="top">' . $name . '<br />';
    $output .= '<table>';
    foreach ($value as $group => $credit) {
      $output .= "<tr><td>$group</td><td>" . t('!cr hours',array('!cr' => $credit)) .'</td></tr>';
    }
    $output .= '<tr><td>' . t('TOTAL') . '</td><td>' . t('!cr hours', array('!cr' => array_sum($value))) . '</td></tr>';
    $output .= '</table>';
    $output .= '</td>';
  }
  $output .= '<td valign="top">' . t('DETAILS OF SELECTION') . '<br />';
  $output .= $input['edit'];
  if($input['details'] != NULL) {
    $output .= '<table>';
    $output .= '<tr><td colspan="3"><b><u>' . $input['details']->name . '</u></b></td></tr>';
    $sum = 0;
    foreach ($input['details']->values as $row) {
      $output .= '<tr><td>' . $row['value'] . '</td><td>' . t('!cr hours',array('!cr' => $row['lesson_hour'])) . '</td></tr>';
      $sum += $row['lesson_hour'];
    }
    $output .= '<tr><td>' . t('TOTAL') . '</td><td>' . t('!cr hours',array('!cr' => $sum)) . '</td></tr>';
    $output .= '</table>';
  }
  $output .= '</td></tr></table>';
  return $output;
}

/**
 * Theming Class List Block
 */
function theme_classes_and_lessons_list_block($input) {
  switch ($input['op']) {
    case 'classes' :
      $cls = array();
      foreach ($input['data'] as $class) {
        $cls[] = '[' . $class . ']';
      }
      return implode(' ', $cls);

    case 'students' :
      $output = array();
      $i = 1;
      foreach($input['data'] as $member) {
        $output[] = $i . ') ' . $member;
        $i++;
      }
      return (empty($input['data'])) ? t("No student") : implode('<br />', $output);
   }
}

/**
 * Theming Class  info detail with pictures page
 */
function theme_classes_and_lessons_class_detail($variables) {
  $class = $variables['class'];
  $photo_width = 110;
  $output = '
  <table border="1">
    <tr>
      <td align="center" valign="top">' .
        t('<h1>Class !name</h1>', array('!name' => $class->name)) .
        '<table>
          <tr>
            <td colspan="6" align="center">' .
              t('Homeroom Teacher:') .
              '<br/>' .
              school_administration_portrait_photo_link($class->hr_teacher1, array('width' => $photo_width)) .
              '<br/>' .
              school_administration_formatted_full_name($class->hr_teacher1) .
            '</td>
          </tr>
          <tr>
            <td colspan="3" align="center">' .
              t('Supervisor 1:') .
              '<br/>' .
              school_administration_portrait_photo_link($class->supervisor1, array('width' => $photo_width)) .
              '<br/>' .
              school_administration_formatted_full_name($class->supervisor1) .
            '</td>
            <td colspan="3" align="center">' .
              t('Supervisor 2:') .
              '<br/>' .
              school_administration_portrait_photo_link($class->supervisor2, array('width' => $photo_width)) .
              '<br/>' .
              school_administration_formatted_full_name($class->supervisor2) .
            '</td>
          </tr>
          <tr>
            <td colspan="2" align="center">' .
              t('<br/>Monitor:') .
              '<br/>' .
              school_administration_portrait_photo_link($class->monitor, array('width' => $photo_width)) .
              '<br/>' .
              $class->monitor .
              '<br/>' .
              school_administration_formatted_full_name($class->monitor) .
            '</td>
            <td colspan="2" align="center">' .
              t('Student Council<br/>Member 1:') .
              '<br/>' .
              school_administration_portrait_photo_link($class->council_member1, array('width' => $photo_width)) .
              '<br/>' .
              $class->council_member1 . '<br/>' .
              school_administration_formatted_full_name($class->council_member1) .
            '</td>
            <td colspan="2" align="center">' .
              t('Student Council<br/>Member 2:') .
              '<br/>' .
              school_administration_portrait_photo_link($class->council_member2, array('width' => $photo_width)) .
              '<br/>' .
              $class->council_member2 .
              '<br/>' .
              school_administration_formatted_full_name($class->council_member2) .
           '</td>
         </tr>
       </table>
     </td>
     <td>' .
       t('Teachers') .
     '<table>
        <tr>';
  $i = 0;
  foreach ($class->teachers as $lesson => $teacher) {
    $output .=
    '<td align="center">' .
      school_administration_portrait_photo_link($teacher, array('width' => $photo_width)) .
      '<br/>' .
      school_administration_formatted_full_name($teacher) .
      '<br/>' .
      $lesson .
    '</td>';
    $s = ($i+1) / 4;
    if(is_int($s)) {
      $output .= '</tr><tr>';
    }
    $i++;
  }
  $output .= '</tr>
        </table>
      </td>
    </tr>
  </table>
  ';
  return $output;
}

/**
 * Get list of classes with any student registered.
 *
 * @return
 *   linear array of classes
 */
function classes_and_lessons_listof_all_classes() {
  return db_query("
    SELECT *
    FROM {classes_and_lessons_class_info}
    WHERE academic_year = :cyear
    AND term = :term",
    array(
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
    )
  )
  ->fetchCol();
}

/**
 * Get list of currently teaching teachers with weekly teaching hours.
 *
 * @return
 *   associative array of teacher user id's and weekly teaching hours
 */
function classes_and_lessons_tcl_teachers() {
  return db_query("
    SELECT teacher, SUM(lesson_hour) 
    FROM {classes_and_lessons_tcl} 
    WHERE academic_year = :cyear 
    AND term = :term
    GROUP BY teacher 
    ORDER BY 1", 
    array(
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
    )
  )
  ->fetchAllKeyed();
}

/**
 * Get list of classes with weekly teaching hours.
 *
 * @return
 *   associative array of classes and weekly teaching hours
 */
function classes_and_lessons_tcl_classes() {
  return db_query("
    SELECT class, SUM(lesson_hour) 
    FROM {classes_and_lessons_tcl} 
    WHERE academic_year = :cyear 
    AND term = :term
    GROUP BY class 
    ORDER BY 1",
    array(
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
    )
  )
  ->fetchAllKeyed();
}

/**
 * Get list of lessons with weekly teaching hours.
 *
 * @return
 *   associative array of lessons and weekly teaching hours
 */
function classes_and_lessons_tcl_lessons() {
  return db_query("
    SELECT lesson, SUM(lesson_hour) 
    FROM {classes_and_lessons_tcl} 
    WHERE academic_year = :cyear 
    AND term = :term
    GROUP BY lesson 
    ORDER BY 1",
    array(
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
    )
  )
  ->fetchAllKeyed();
}


/**
 * Menu callback; Lessons
 */
function classes_and_lessons_lessons() {
  $output = l(t('Add New Lesson'), 'node/add/lesson');
  $output .= '<h3>' . t('Recorded Lessons:') . '</h3>';

  $header = array(
    array('data' => t('Lesson'), 'field' => 'name', 'sort' => 'asc'),
  );

  $sql = 'SELECT nid, title FROM {node} n WHERE n.type = :type AND n.status = :status ORDER BY nid DESC';
  $lessons = db_query($sql, array(':type' => 'lesson', ':status' => 1));
  $i = 0;
  $rows = array();
  foreach ($lessons as $lesson) {
    $rows[$i][] = l($lesson->title, 'node/' . $lesson->nid);
    $i++;
  }
  $table = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => 1,
    'empty' => t("There is no registered lesson yet"),
  );
  $output .= theme_table($table);
  return $output;

}

/**
 * Populate class-lesson-teacher triad information for any triad members.
 *
 * @param $op
 *   name of one of tcl triad member
 * @param $value
 *   name of triad member
 * @return
 *   id associated 2-dimentional array of selected tcl triads
 */
function classes_and_lessons_tcl_details($op, $value) {
  switch ($op) {
    case 'teacher' :
      return db_query("SELECT id, class AS value1, lesson AS value2, lesson_hour 
        FROM {classes_and_lessons_tcl} 
        WHERE teacher = :val
        AND academic_year = :cyear
        AND term = :term",
        array(
          ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
          ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
          ':val' => $value,
        )
      )
      ->fetchAllAssoc('id');
    
    case 'class' :
      return db_query("
        SELECT id, lesson AS value1, teacher AS value2, lesson_hour 
        FROM {classes_and_lessons_tcl} 
        WHERE class = :val
        AND academic_year = :cyear
        AND term = :term",
        array(
          ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
          ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
          ':val' => $value,
        )
      )
      ->fetchAllAssoc('id');
    
    case 'lesson' :
      return db_query("
        SELECT id, class AS value1, teacher AS value2, lesson_hour 
        FROM {classes_and_lessons_tcl} 
        WHERE lesson = :val
        AND academic_year = :cyear
        AND term = :term",
        array(
          ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
          ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
          ':val' => $value,
        )
      )
      ->fetchAllAssoc('id');
  }
}

/**
 * tcl info by id
 *
 * @param $tcl
 *   teacher-class-lesson triad id
 * @return
 *   stdClass Object for tcl triad row
 */
function classes_and_lessons_tcl_by_id($tcl) {
  return db_query("
    SELECT * 
    FROM {classes_and_lessons_tcl} 
    WHERE id = :id", 
    array(':id' => $tcl))->fetch();
}

/**
 * Get list of classes which a student belong to.
 *
 * @param $school_no
 *   uid of student
 * @return
 *   linear array of classes
 */
function classes_and_lessons_listof_student_classes($school_no = NULL) {
  $query = db_select('classes_and_lessons_student_classes', 'c');
  $query->addField('c', 'class');
  $query->condition('academic_year', SCHOOL_ADMINISTRATION_C_YEAR);
  $query->condition('term', SCHOOL_ADMINISTRATION_C_TERM);
  if ($school_no == NULL) {
    $query->groupBy('class');
  }
  else {
    $query->condition('school_no', $school_no);
  }
  $query->orderBy('class');
  return $query->execute()->fetchCol();
}

/**
 * Get list of students registered to given class.
 *
 * @param $class
 *   suggested class
 * @return
 *   linear array of students' uid's
 */
function classes_and_lessons_class_list($class, $year = SCHOOL_ADMINISTRATION_C_YEAR, $term = SCHOOL_ADMINISTRATION_C_TERM) {
  return db_query("
    SELECT cl.id, cl.school_no 
    FROM {classes_and_lessons_student_classes} cl, {school_administration_users_identities} i
    WHERE NOT EXISTS 
    (SELECT * 
      FROM {school_administration_withdrawal} wt
      WHERE cl.school_no = wt.school_no
      AND academic_year = :cyear
    )
    AND cl.school_no = i.uid
    AND academic_year = :cyear
    AND term = :term
    AND class = :class
    ORDER BY i.names",
    array(
      ':cyear' => $year, 
      ':term'  => $term,
      ':class' => $class,
    )
  )
  ->fetchAllKeyed();
}

/**
 * Check user is homeroom teacher or not.
 *
 * @param $uid
 *   uid of user
 * @return
 *   if user is homeroom teacher of any class returns array of classes else returns FALSE
 */
function classes_and_lessons_hr_teacher($uid) {
  $result = db_query("
    SELECT name
    FROM {classes_and_lessons_class_info} 
    WHERE (hr_teacher1 = :uid1 OR hr_teacher2 = :uid2)
    AND academic_year = :cyear
    AND term = :term",
    array(
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
      ':uid1' => $uid, 
      ':uid2' => $uid,
    )
  )
  ->fetchCol();
  return ($result) ? $result : FALSE;
}

/**
 * Check user is supervisor of any class or not.
 *
 * @param $uid
 *   uid of user
 * @return
 *   if user is supervisor of any class returns array of classes else returns FALSE
 */
function classes_and_lessons_supervisor($uid) {
  $result = db_query("
    SELECT class
    FROM {classes_and_lessons_class_info} 
    WHERE (supervisor1 = :uid1 OR supervisor2 = :uid2 OR supervisor3 = :uid3)
    AND academic_year = :cyear
    AND term = :term",
    array(
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
      ':uid1' => $uid,
      ':uid2' => $uid,
      ':uid3' => $uid,
    )
  )
  ->fetchColl();
  return ($result) ? $result : FALSE;
}

/**
 * Check user is teaching to any class or not.
 *
 * @param $uid
 *   uid of user
 * @return
 *   if user is teaching to any class returns array of classes else returns FALSE
 */
function classes_and_lessons_teaching($uid) {
  $result = db_query("
    SELECT id, class 
    FROM {classes_and_lessons_tcl}
    WHERE teacher = :uid
    AND academic_year = :cyear
    AND term = :term",
    array(
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
      ':uid'   => $uid,
    )
  )
  ->fetchAllKeyed();
  return ($result) ? $result : FALSE;
}


/**
 * Get whole information of a class or classes.
 *
 * @param $class
 *   class name or NULL for all classes
 * @return
 *   associative array of classes info keyed by class name
 */
function classes_and_lessons_class_load($nid) {
  $result = db_query("
    SELECT *
    FROM {classes_and_lessons_class_info}
    WHERE nid = :nid",
    array(
      ':nid' => $nid
    )
  )
  ->fetch();
  if (empty($result)) {
    //since it produce error just after node is created
    //the reason should be found 
    return FALSE;
  }
  $result->teachers = db_query("
    SELECT lesson, teacher
    FROM {classes_and_lessons_tcl}
    WHERE class = :class
    AND academic_year = :cyear
    AND term = :term",
    array(
      ':cyear' => $result->academic_year, 
      ':term'  => $result->term,
      ':class' => $result->name,
    )
  )
  ->fetchAllKeyed();
  return $result;
}

/**
 * Get school_no of students who have no class.
 *
 * @return
 *   array of student id numbers
 */
function classes_and_lessons_student_classes_no_class() {
  return db_query("
    SELECT sm.school_no
    FROM {school_administration_student_main} sm
    WHERE NOT EXISTS 
    (SELECT * 
      FROM {classes_and_lessons_student_classes} sc
      WHERE sm.school_no = sc.school_no
      AND sc.academic_year = :cyear
      AND term = :term
    )
    AND NOT EXISTS 
    (SELECT * 
      FROM {school_administration_withdrawal} wt
      WHERE sm.school_no = wt.school_no
      AND academic_year = :cyear
    )
    AND sm.academic_year = :cyear",
    array(
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
    )
  )
  ->fetchCol();
}

function classes_and_lessons_student_lesons($uid) {
  return db_query("
    SELECT 
      t.id, 
      c.class, 
      lesson, 
      teacher, 
      c.term, 
      c.academic_year
    FROM 
      {classes_and_lessons_tcl} t,
      {classes_and_lessons_student_classes} c
    WHERE t.class = c.class
    AND c.school_no = :uid
    AND c.academic_year = :cyear
    AND c.term = :term
    ", array(
      ':uid' => $uid,
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
    )
  )->fetchAllAssoc('id');
}

/**
 * Get list of currently teaching teachers with weekly teaching hours.
 *
 * @return
 *   associative array of teacher user id's and weekly teaching hours
 */
function classes_and_lessons_tcl_all() {
  return db_query("
    SELECT *
    FROM {classes_and_lessons_tcl} 
    WHERE academic_year = :cyear 
    AND term = :term
    ORDER BY 1", 
    array(
      ':cyear' => SCHOOL_ADMINISTRATION_C_YEAR, 
      ':term'  => SCHOOL_ADMINISTRATION_C_TERM,
    )
  )
  ->fetchAllAssoc('id');
}

