<?php
/**
 * @file
 *   tmgmt_server automated tests.
 */

class TMGMTServerTest extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'TMGMT Server',
      'description' => t('Tests covering TMGMT Server.'),
      'group' => 'TMGMT Server',
    );
  }

  function setUp() {
    parent::setUp(array('tmgmt_server', 'tmgmt_local'));

    // This setting is preset in the tmgmt server installation profile.
    variable_set('user_register', USER_REGISTER_VISITORS);
  }

  function testTCRegistration() {
    $this->drupalGet('user/register');
    $this->assertFieldByName('label');
    $this->assertFieldByName('description');
    $this->assertFieldByName('uuid');

    $name = $this->randomName();
    $mail = 'tc@example.com';
    $uuid = $this->randomName();
    $label = $this->randomName();
    $description = $this->randomName();

    // Register new TC user
    $this->drupalPost(NULL, array(
      'name' => $name,
      'mail' => $mail,
      'label' => $label,
      'description' => $description,
      'uuid' => $uuid,
    ), t('Create new account'));

    /**
     * @var TMGMTClientController $controller
     */
    $controller = entity_get_controller('tmgmt_server_client');

    // Test if TC entity has been created.
    $tc = $controller->loadByUUID($uuid);
    $this->assertEqual($tc->label, $label);
    $this->assertEqual($tc->description, $description);
    $this->assertEqual($tc->uuid, $uuid);

    // Test if new account has been associated with the TC entity.
    $tc_user = user_load_by_mail($mail);
    $this->assertEqual($tc_user->uid, $tc->uid);
    $this->assertTrue(in_array(variable_get('tmgmt_server_tc_rid'), array_keys($tc_user->roles)));

    $key = tmgmt_auth_issuer_controller()->loadByEntity('tmgmt_server_client', $tc->cid);
    $this->assertNotNull($key, t('Key must be created'));

    user_save($tc_user, array('pass' => 'q'));
    $tc_user->pass_raw = 'q';
    $this->drupalLogin($tc_user);

    $this->drupalGet('user/' . $tc_user->uid . '/remote-clients');
    $this->assertText($tc->label);
    $this->assertText($tc->uuid);

    $this->clickLink(t('manage'));
    $this->assertFieldByName('label', $tc->label);
    $this->assertFieldByName('description', $tc->description);
    $this->assertFieldByName('uuid', $tc->uuid);
    $this->assertFieldByName('pub', $key->pub);
    $this->assertFieldByName('private', $key->private);
  }

  function testJobTranslation() {

    // Add DE language as it is needed by the lang capabilities.
    locale_add_language('de');

    // We need to set this setting to false to prevent the
    // tmgmt_server_client_form() to become a part of the registration form.
    //
    // - We will create a local admin account for which we do not want
    //   the TC entity
    //
    // - This thread we are as uid 1 and the form would output the uid field
    //   which is required and the process of creating the user via
    //   createOnTheFly would fail on its validation error. On the other hand
    //   createOnTheFly() can deal with usecase when TC entity is not created
    //   upon registration process.
    //
    variable_set('tmgmt_server_override_registration_form', FALSE);

    // --------------------
    // Prerequisites:
    // - Add language capabilities for the admin account
    // - Create user with TC role and the TC entity itself
    // - Mimic the key exchange - create a mock remote enity locally

    // Create a user that is able to provide as well as use translation services
    // and administer tmgmt as we use it for each purpose.
    $admin_account = $this->drupalCreateUser(array(
      'administer tmgmt',
      'use translation services',
      'provide translation services',
    ));

    // Add translator role so that we can update capabilities.
    $ts_rid = variable_get('tmgmt_local_ts_rid');
    $roles = $admin_account->roles + array($ts_rid => $ts_rid);
    user_save($admin_account, array('roles' => $roles));

    $this->drupalLogin($admin_account);

    // Configure tmgmt server to use local translator.
    $this->drupalPost('admin/config/regional/tmgmt_settings',
      array('tmgmt_server_translator' => 'local'), t('Save configuration'));

    // Add language capabilities.
    $data = array(
      'tmgmt_translation_skills[und][0][language_from]' => 'en',
      'tmgmt_translation_skills[und][0][language_to]' => 'de',
    );
    $this->drupalPost('user/' . $admin_account->uid . '/edit', $data, t('Save'));

    /**
     * @var TMGMTClientController $client_controller
     */
    $client_controller = entity_get_controller('tmgmt_server_client');

    // Create user and TC entity.
    $mail = 'example@example.com';
    $client = $client_controller->createOnTheFly(1,
      url('tmgmt_mock_client', array('absolute' => TRUE)), $mail);
    $tc_user = user_load_by_mail($mail);

    $this->assertNotNull($client, t('Client entity was created on the fly.'));
    $this->assertNotNull($tc_user, t('Client user was created on the fly.'));
    $this->assertTrue(in_array(variable_get('tmgmt_server_tc_rid'), array_keys($tc_user->roles)), t('Client user has TC role.'));

    $key = tmgmt_auth_issuer_controller()->loadByEntity('tmgmt_server_client', $client->cid);

    $this->assertNotNull($key, t('Client key was generated'));

    // Mimic receiving the key by a remote client.
    tmgmt_auth_receiver_controller()->receive(array(
      'pub' => $key->pub,
      'private' => $key->private,
      'created' => $key->created,
      'expires' => $key->expires,
    ), 'mock_remote_entity', 1);

    // ---------------------
    // Translation workflow

    $source_content_data = $this->sourceData();

    // Submit a translation job.
    $connector = new TMGMTRemoteGenericConnector(url('', array('absolute' => TRUE)));
    $connector->setEntityInfo('mock_remote_entity', 1);
    $available_languages = $connector->get('language-pairs', array('source_language' => 'en'));
    $this->assertEqual($available_languages, array(array('source_language' => 'en', 'target_language' => 'de')));

    $response = $connector->post('translation-job', $source_content_data);

    // Load job and job item from received response.
    /**
     * @var TMGMTJob $job
     */
    $job = tmgmt_job_load($response['reference']);

    // Test if job has been created with job comment.
    $this->assertEqual($job->getSetting('job_comment'), $source_content_data['job_comment']);

    $job_items = $job->getItems();
    /**
     * @var TMGMTJobItem $job_item
     */
    $job_item = array_shift($job_items);

    // Get job data and test if they correspond with source data.
    $this->assertEqual($job_item->getData(), $source_content_data['items'][1]['data']);
    // Get remote source and test data.
    $remote_source = tmgmt_server_remote_source_load($job_item->tjiid);
    $this->assertEqual($remote_source->data, $source_content_data['items'][1]['data']);

    // Translate
    $update = array(
      '#status' => TMGMT_DATA_ITEM_STATE_TRANSLATED,
      '#translation' => array(
        '#text' => 'Hello world translated',
      ),
    );
    $job_item->updateData('wrapper', $update);
    $job_item->save();

    $job_item->needsReview();
    $job_item->acceptTranslation();

    entity_get_controller('tmgmt_job_item')->resetCache();
    // Check if text has been translated.
    $job_item = tmgmt_job_item_load($job_item->tjiid);

    $job_item_data = $job_item->getData();
    $this->assertEqual($job_item_data['wrapper']['#translation']['#text'], 'Hello world translated');
    // Update remote source as well.
    $remote_source->state = TMGMT_SERVER_REMOTE_SOURCE_TRANSLATED;
    $remote_source->data = $job_item->getData();

    /**
     * @var TMGMTRemoteSourceController $remote_source_controller
     */
    $remote_source_controller = entity_get_controller('tmgmt_server_remote_source');
    $remote_source_controller->save($remote_source);
    $remote_source_controller->resetCache();

    // Now test if pulled data is the same as the data in the remote source
    // object.
    $connector = new TMGMTRemoteGenericConnector(url('', array('absolute' => TRUE)));
    $connector->setEntityInfo('mock_remote_entity', 1);
    $response = $connector->get('translation-job/' . $remote_source->rsid . '/item');

    $this->assertEqual($remote_source->data, $response);
  }

  protected function sourceData() {
    return array(
      'items' =>
      array(
        1 =>
        array(
          'data' =>
          array(
            'wrapper' =>
            array(
              '#label' => 'Wrapper label',
              '#text' => 'Hello world',
              '#status' => 0,
              '#parent_label' =>
              array(
                0 => 'Wrapper label',
              ),
            ),
          ),
          'label' => 'Wrapper label',
          'callback' => url('tmgmt_server_test_tc/tmgmt-drupal-callback/1', array('absolute' => TRUE)),
        ),
      ),
      'source_language' => 'en',
      'target_language' => 'de',
      'job_comment' => 'Dummy job comment',
    );
  }
}
