<?php

/**
 * A remote source that is waiting to be translated/processed.
 *
 * Normally, this is a new remote source entity that has just been generated by
 * a translation service plugin. However, remote source entities can also return
 * to this state in case the provided translation was rejected by the client.
 */
define('TMGMT_SERVER_REMOTE_SOURCE_PENDING', 0);

/**
 * A remote source that has been translated. This is the final state for a
 * successfully processed translation process. However, a remote source entity
 * can also be set back to the 'pending' state in case the client rejects the
 * provided translation.
 *
 * When a client rejects a translation and sends it back to the server a new
 * revision of the remote source entity is generated in order to allow the
 * translation provider to track the translation process up to the point when
 * then translation is completed and finally accepted by the client.
 */
define('TMGMT_SERVER_REMOTE_SOURCE_TRANSLATED', 1);

/**
 * A remote source that has been cancelled by the client.
 */
define('TMGMT_SERVER_REMOTE_SOURCE_CANCELLED', 2);

define('TMGMT_SERVER_DEFAULT_DS_URL', 'https://www.tmgmt.org');


/**
 * Implements hook_entity_info().
 */
function tmgmt_server_entity_info() {
  // This is source entity that maps the remote translation jobs to the
  // translation jobs on the server.
  $info['tmgmt_server_remote_source'] = array(
    'label' => t('Translation Management Remote Source'),
    'module' => 'tmgmt_server',
    'entity class' => 'TMGMTRemoteSource',
    'controller class' => 'TMGMTRemoteSourceController',
    'metadata controller class' => 'TMGMTRemoteSourceMetadataController',
    'views controller class' => 'TMGMTRemoteSourceViewsController',
    'base table' => 'tmgmt_server_remote_source',
    'access callback' => 'tmgmt_server_remote_source_access',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'rsid',
      'label' => 'label',
    ),
  );
  $info['tmgmt_directory_server'] = array(
    'label' => t('TMGMT Directory'),
    'module' => 'tmgmt_server',
    'controller class' => 'TMGMTDirectoryServerController',
    'entity class' => 'TMGMTDirectoryServer',
    'base table' => 'tmgmt_directory_server',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'sid',
    ),
    'bundles' => array(
      'tmgmt_directory_server' => array(
        'label' => t('TMGMT Directory'),
      ),
    ),
  );

  $info['tmgmt_server_client'] = array(
    'label' => t('Remote client'),
    'module' => 'tmgmt_server',
    'entity class' => 'TMGMTClient',
    'controller class' => 'TMGMTClientController',
    'metadata controller class' => 'TMGMTClientMetadataController',
    'views controller class' => 'TMGMTClientViewsController',
    'base table' => 'tmgmt_server_client',
    'access callback' => 'tmgmt_server_client_access',
    'label callback' => 'entity_class_label',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'cid',
      'label' => 'label',
    ),
    'admin ui' => array(
      'controller class' => 'TMGMTClientUIController',
      'path' => 'admin/config/regional/tmgmt/clients',
      'file' => 'tmgmt_server.forms.inc',
    ),
  );

  $info = array_merge($info, tmgmt_auth_get_entity_info('issuer', 'tmgmt_server'));

  $info = array_merge($info, tmgmt_auth_get_entity_info('receiver', 'tmgmt_server'));

  return $info;
}

/**
 * Implements hook_menu().
 */
function tmgmt_server_menu() {
  $items['user/%user/remote-clients'] = array(
    'title' => 'Remote clients',
    'page callback' => 'tmgmt_server_client_profile_page',
    'page arguments' => array(1),
    'access callback' => 'tmgmt_server_client_profile_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tmgmt_server.pages.inc',
  );
  $items['user/%user/remote-clients/%tmgmt_server_client'] = array(
    'title' => 'Remote client details',
    'page callback' => 'tmgmt_server_client_details_profile_page',
    'page arguments' => array(1, 3),
    'access callback' => 'tmgmt_server_client_profile_page_access',
    'access arguments' => array(1, 3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tmgmt_server.pages.inc',
  );
  $items['user/%user/remote-clients/add'] = array(
    'title' => 'Add remote client',
    'page callback' => 'tmgmt_server_client_add_profile_page',
    'page arguments' => array(1),
    'access callback' => 'tmgmt_server_client_profile_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'tmgmt_server.pages.inc',
  );
  $items['admin/directory-server'] = array(
    'title' => 'TMGMT Directory',
    'page callback' => 'tmgmt_server_ds_status_overview',
    'access arguments' => array('administer tmgmt'),
    'file' => 'tmgmt_server.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/directory-server/status'] = array(
    'title' => 'Status',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/directory-server/settings'] = array(
    'title' => 'Connection credentials',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_server_ds_settings_form'),
    'access arguments' => array('administer tmgmt'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tmgmt_server.forms.inc',
    'weight' => 2,
  );
  $items['admin/directory-server/lang-skills-sync'] = array(
    'title' => 'Lang skills sync',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_server_ds_lang_sync_form'),
    'access arguments' => array('administer tmgmt'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'tmgmt_server.forms.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tmgmt_server_permission() {
  $perms['use translation services'] = array(
    'title' => t('Use translation services'),
    'description' => t('Use translation services provided via the web services interface.'),
  );

  $perms['administer remote sources'] = array(
    'title' => t('Administer remote sources'),
    'restrict access' => TRUE,
  );

  // This is the limit for translation clients per user.
  $count = variable_get('tmgmt_server_client_limit', 5);

  $perms['manage own remote clients'] = array(
    'title' => t('Manage own remote clients'),
    'description' => t('Manage up to <a href="!link">@count</a> in your user profile.', array('!link' => url('admin/config/regional/tmgmt/settings'), '@count' => format_plural($count, '1 remote client', '@count remote clients'))),
  );

  $perms['use translation services'] = array(
    'title' => t('Use translation services'),
    'description' => t('Use translation services provided via the web services interface.'),
  );

  $perms['administer translation server'] = array(
    'title' => t('Administer translation server'),
    'restrict access' => TRUE,
  );

  return $perms;
}

function tmgmt_server_theme() {
  return array(
    'tmgmt_server_ds_todo' => array(
      'variables' => array('status' => NULL, 'identifier' => NULL),
      'template' => 'tmgmt-server-ds-todo',
      'path' => drupal_get_path('module', 'tmgmt_server') . '/theme',
    ),
  );
}

function tmgmt_server_process_tmgmt_server_ds_todo(&$vars) {
  if (!is_array($vars['status'])) {
    $vars['status'] = array(
      'reachability' => NULL,
      'api_connection' => NULL,
      'profile' => NULL,
      'capabilities_sync' => NULL,
      'online_status' => NULL,
      'premium' => NULL,
    );
  }

  $status = $vars['status'];

  if ($status['reachability'] == 'unreachable' || $status['api_connection'] == 'not_connected') {
    $vars['register_msg'] = t('To make use of the TMGMT Directory features, please register at <a href="@ds_url">@ds_url</a> and configure the <a href="@credentials_url">credentials</a>. If you manage to connect successfuly but still get reachability error, make sure your Translation server is reachable form the Internet.',
      array('@ds_url' => variable_get('tmgmt_ds_url'), '@credentials_url' => url('admin/directory-server/settings')));
    $vars['register_class'] = 'crossed';
  }
  elseif($status['reachability'] == 'reachable' && $status['api_connection'] == 'connected') {
    $vars['register_msg'] = t('Your Translation server is connected and reachable.');
    $vars['register_class'] = 'checked';
  }
  else {
    $vars['register_msg'] = t('Error retrieving connectivity status.');
    $vars['register_class'] = 'crossed';
  }

  if ($status['profile'] == 'incomplete') {
    $vars['finish_profile_msg'] = t('Provide your company description, pricing and other company specific information to complete <a href="@ts_profile_url">your profile at the TMGMT Directory</a>.',
      array('@ts_profile_url' => variable_get('tmgmt_ds_url') . '/translation-servers/' . $vars['identifier'] . '/edit'));
    $vars['finish_profile_class'] = 'crossed';
  }
  elseif ($status['profile'] == 'complete') {
    $vars['finish_profile_msg'] = t('Your <a href="@ts_profile_url">profile at the TMGMT Directory</a> is complete.',
      array('@ts_profile_url' => variable_get('tmgmt_ds_url') . '/translation-servers/' . $vars['identifier']));
    $vars['finish_profile_class'] = 'checked';
  }
  else {
    $vars['finish_profile_msg'] = t('Error retrieving profile status.');
    $vars['finish_profile_class'] = 'crossed';
  }

  if ($status['capabilities_sync'] == 'sync_required') {
    $vars['sync_msg'] = t('Create translator accounts at your Translation server, configure language skills and <a href="@sync_url">sync them</a> with the TMGMT Directory.',
      array('@sync_url' => url('admin/directory-server/lang-skills-sync')));
    $vars['sync_class'] = 'crossed';
  }
  elseif ($status['capabilities_sync'] == 'synced') {
    $vars['sync_msg'] = t('Your language skills are synchronised.');
    $vars['sync_class'] = 'checked';
  }
  else {
    $vars['sync_msg'] = t('Error retrieving capabilities sync status.');
    $vars['sync_class'] = 'crossed';
  }

  if ($status['online_status'] == 'unpublished') {
    $vars['go_live_msg'] = t('Make your Translation server available at the TMGMT Directory by <a href="@golive_url">publishing it live</a> and start offering translation services.',
      array('@golive_url' => variable_get('tmgmt_ds_url') . '/translation-servers/' . $vars['identifier'] . '/go-online'));
    $vars['go_live_class'] = 'crossed';
  }
  elseif ($status['online_status'] == 'published') {
    $vars['go_live_msg'] = t('Your Translation server is published live.');
    $vars['go_live_class'] = 'checked';
  }
  else {
    $vars['go_live_msg'] = t('Error retrieving online status.');
    $vars['go_live_class'] = 'crossed';
  }

  if ($status['premium'] == 'go_premium') {
    $vars['go_premium_msg'] = t('<a href="@go_premium_url">Upgrade your Translation server to premium</a> to take advantage of all the premium features offered by the TMGMT Directory.',
      array('@go_premium_url' => variable_get('tmgmt_ds_url') . '/translation-servers/' . $vars['identifier'] . '/go-premium'));
    $vars['go_premium_class'] = 'crossed';
  }
  elseif ($status['premium'] == 'premium') {
    $vars['go_premium_msg'] = t('Your Translation server is premium.');
    $vars['go_premium_class'] = 'checked';
  }
  else {
    $vars['go_premium_msg'] = t('Error retrieving premium status.');
    $vars['go_premium_class'] = 'crossed';
  }
}

/**
 * Implements hook_tmgmt_source_plugin_info().
 */
function tmgmt_server_tmgmt_source_plugin_info() {
  $info['remote'] = array(
    'label' => t('Remote'),
    'description' => t('Source handler for remote data handled via a web services interface.'),
    'plugin controller class' => 'TMGMTRemoteSourcePluginController',
    'ui controller class' => 'TMGMTRemoteSourceUIController',
  );

  return $info;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_server_form_tmgmt_ui_settings_form_alter(&$form, &$form_state) {

  $form['clients'] = array(
    '#type' => 'fieldset',
    '#title' => t('Remote clients'),
  );

  $form['clients']['tmgmt_server_client_limit'] = array(
    '#type' => 'select',
    '#title' => t('Limit for remote clients'),
    '#description' => t('This is the maximum number of remote clients that is allowed per user.'),
    '#options' => drupal_map_assoc(range(1, 20, 1)),
    '#default_value' => variable_get('tmgmt_server_client_limit', 5),
  );

  $options = array();
  foreach (tmgmt_translator_load_multiple(FALSE) as $translator) {
    $options[$translator->name] = $translator->label();
  }

  $form['tmgmt_server'] = array(
    '#type' => 'fieldset',
    '#title' => t('Translation server'),
  );

  $form['tmgmt_server']['tmgmt_server_translator'] = array(
    '#type' => 'select',
    '#title' => t('Translator plugin'),
    '#description' => t('Select the translator plugin that incoming translation orders should be forwarded to.'),
    '#options' => $options,
    '#empty_option' => t('None'),
    '#default_value' => variable_get('tmgmt_server_translator', 'local'),
  );
  $form['tmgmt_server']['tmgmt_server_override_registration_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Drupal user registration form for registration of Remote Client users.'),
    '#default_value' => variable_get('tmgmt_server_override_registration_form', TRUE),
  );
}

/**
 * Implements of hook_ctools_plugin_api().
 */
function tmgmt_server_ctools_plugin_api($module, $api) {
  if ($module == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'tmgmt_server.services.inc',
      'path' => drupal_get_path('module', 'tmgmt_server') . '/includes',
    );
  }
}

/**
 * Implements hook_services_authentication_info().
 */
function tmgmt_server_services_authentication_info() {
  return array(
    'title' => t('Remote client authentication'),
    'description' => t('API authorization via public and private API keys managed in client entities.'),
    'authenticate_call' => 'tmgmt_server_authentication_callback',
    'file' => 'includes/tmgmt_server.auth.inc',
  );
}

/**
 * Implements hook_services_resources().
 */
function tmgmt_server_services_resources() {

  $resources = array();

  $resources['status'] = array(
    'index' => array(
      'file' => array('type' => 'inc', 'module' => 'tmgmt_server', 'name' => 'includes/tmgmt_server.srv_callbacks'),
      'help' => t('Provides status info about the TS'),
      'callback' => '_tmgmt_server_srv_status_index',
      'access callback' => '_tmgmt_server_srv_status_access',
    ),
  );

  $resources['remote-clients'] = array(
    'create' => array(
      'file' => array('type' => 'inc', 'module' => 'tmgmt_server', 'name' => 'includes/tmgmt_server.srv_callbacks'),
      'help' => t('Receive a token from a client to be verified by DS to provide the client with a key.'),
      'callback' => '_tmgmt_server_remote_client_create',
      'access callback' => '_tmgmt_server_remote_client_access',
      'access arguments' => array('create'),
      'access arguments append' => TRUE,
      'args' => array(
        array(
          'name' => 'tc_data',
          'source' => 'data',
          'type' => 'array',
          'description' => 'Remote client data.',
          'optional' => FALSE,
        ),
      ),
    ),
  );

  $resources['language-pairs'] = array(
    'index' => array(
      'file' => array('type' => 'inc', 'module' => 'tmgmt_server', 'name' => 'includes/tmgmt_server.srv_callbacks'),
      'help' => t('Provides available languages'),
      'callback' => '_tmgmt_server_srv_language_pairs_index',
      'access callback' => '_tmgmt_server_srv_language_pairs_access',
      'args' => array(
        array(
          'name' => 'source_language',
          'optional' => TRUE,
          'source' => array('param' => 'source_language'),
          'type' => 'string',
          'description' => 'Source language',
        ),
      ),
    ),
  );

  $resources['translation-job'] = array(
    'retrieve' => array(
      'file' => array('type' => 'inc', 'module' => 'tmgmt_server', 'name' => 'includes/tmgmt_server.srv_callbacks'),
      'help' => t('Retrieves a translated job.'),
      'callback' => '_tmgmt_server_srv_job_retrieve',
      'access callback' => '_tmgmt_server_srv_job_access',
      'access arguments' => array('retrieve'),
      'access arguments append' => TRUE,
      'args' => array(
        array(
          'name' => 'rsid',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'int',
          'description' => 'Remote source id.',
        ),
      ),
    ),
    'create' => array(
      'file' => array('type' => 'inc', 'module' => 'tmgmt_server', 'name' => 'includes/tmgmt_server.srv_callbacks'),
      'help' => t('Create new translation job.'),
      'callback' => '_tmgmt_server_srv_job_create',
      'access callback' => '_tmgmt_server_srv_job_access',
      'access arguments' => array('create'),
      'access arguments append' => TRUE,
      'args' => array(
        array(
          'name' => 'job_data',
          'source' => 'data',
          'type' => 'array',
          'description' => 'Job data.',
          'optional' => FALSE,
        ),
      ),
    ),
  );

  $resources['translation-job']['actions'] = array(
    'cancel' => array(
      'file' => array('type' => 'inc', 'module' => 'tmgmt_server', 'name' => 'includes/tmgmt_server.srv_callbacks'),
      'help'   => t('Cancels the whole translation job.'),
      'callback' => '_tmgmt_server_srv_job_cancel',
      'access callback' => '_tmgmt_server_srv_job_access',
      'access arguments' => array('act_cancel'),
      'access arguments append' => TRUE,
      'args'     => array(
        array(
          'name' => 'reference',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'int',
          'description' => 'The reference identifier under which the job is available.',
        ),
        array(
          'name' => 'comment',
          'source' => 'data',
          'type' => 'array',
          'description' => 'Client comment.',
          'optional' => TRUE,
        ),
      ),
    ),
    'reject' => array(
      'file' => array('type' => 'inc', 'module' => 'tmgmt_server', 'name' => 'includes/tmgmt_server.srv_callbacks'),
      'help'   => t('Reject a translation.'),
      'callback' => '_tmgmt_server_srv_job_reject',
      'access callback' => '_tmgmt_server_srv_job_access',
      'access arguments' => array('act_reject'),
      'access arguments append' => TRUE,
      'args'     => array(
        array(
          'name' => 'reference',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'int',
          'description' => 'The reference identifier under which the job is available.',
        ),
        array(
          'name' => 'comment',
          'source' => 'data',
          'type' => 'array',
          'description' => 'Client comment.',
          'optional' => FALSE,
        ),
      ),
    ),
  );

  $resources['translation-job']['relationships'] = array(
    'item' => array(
      'file' => array('type' => 'inc', 'module' => 'tmgmt_server', 'name' => 'includes/tmgmt_server.srv_callbacks'),
      'help'   => t('Retrieve translation of a job item'),
      'callback' => '_tmgmt_server_srv_job_item_translation_retrieve',
      'access callback' => '_tmgmt_server_srv_job_access',
      'access arguments' => array('rel_get_item'),
      'access arguments append' => TRUE,
      'args'     => array(
        array(
          'name' => 'tjiid',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'int',
          'description' => 'Translation job item id.',
        ),
      ),
    ),
  );

  return $resources;

}

/**
 * Implements hook_views_api().
 */
function tmgmt_server_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'tmgmt_server') . '/views',
  );
}

/**
 * Implements hook_views_default_views().
 */
function tmgmt_server_views_default_views() {
  return _tmgmt_load_exports('tmgmt_server', 'views', 'view.inc', 'view');
}

/**
 * Entity access callback for the remote source entity.
 */
function tmgmt_server_remote_source_access($op, $entity = NULL, $account = NULL) {
  // Only administrators are allowed to directly access remote source entities.
  if (user_access('administer translation server', $account) || user_access('administer remote source', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Menu system access callback for the client entity management page on the user
 * profile.
 */
function tmgmt_server_client_profile_page_access($user, $account = NULL) {
  // Fall back to the currently logged in user if not explicitly defined
  // otherwise.
  $account = isset($account) ? $account : $GLOBALS['user'];

  // Administrators are allowed to do anything.
  if (user_access('administer translation server')) {
    return TRUE;
  }

  // The personal translation client listing is only visible to the user himself
  // and only if he has the 'use translation services' permission.
  if ($user->uid == $account->uid && user_access('use translation services')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Entity access callback for the client entity.
 */
function tmgmt_server_client_access($op, $entity = NULL, $account = NULL) {
  // Administrators are allowed to do anything.
  if (user_access('administer translation server', $account)) {
    return TRUE;
  }

  // Fall back to the currently logged in user if not explicitly defined
  // otherwise.
  $account = isset($account) ? $account : $GLOBALS['user'];

  // Any other operation ('view', 'update', 'delete') is only allowed by the
  // owner of the client entity (the user that it is attached to).
  if ($entity && $entity->uid == $account->uid) {
    return user_access('manage own remote clients', $account);
  }

  // More complex access checks have to be implemented differently as 'create'
  // operations, for example, are only allowed if the owner of the client
  // entity (which is normally not available at this point) is set to the
  // user itself.
  return FALSE;
}

/**
 * Implements hook_enable().
 *
 * Creates addressfield for user entity if module addressfield exists.
 */
function tmgmt_server_enable() {
  if (module_exists('addressfield')) {

    $addressfield = variable_get('tmgmt_server_remote_client_addressfield', 'remote_client_addressfield');

    if (!field_info_field($addressfield)) {
      field_create_field(array(
        'translatable' => FALSE,
        'field_name' => $addressfield,
        'type' => 'addressfield',
        'locked' => TRUE,
        'cardinality' => 1,
      ));
    }

    if (!field_info_instance('user', $addressfield, 'user')) {
      field_create_instance(array(
        'label' => 'Address',
        'field_name' => $addressfield,
        'entity_type' => 'user',
        'bundle' => 'user',
        'settings' => array(
          'user_register_form' => FALSE,
        ),
      ));
    }
  }
}

/**
 * Implements hook_field_update().
 *
 * Runs lang sync with DS on tmgmt_language_combination lang update.
 */
function tmgmt_server_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($entity_type != 'user' || !array_intersect_key(user_roles(TRUE, 'provide translation services'), $entity->roles)) {
    return;
  }

  // Sync languages if set so.
  if (variable_get('tmgmt_server_auto_lc_sync')) {
    foreach ($items as $item) {
      tmgmt_server_ds_language_capability_update($item['language_from'], $item['language_to'], 'create');
    }
  }
}

/**
 * Implements hook_field_delete().
 *
 * Sets lang capabilities to be deleted from DS on tmgmt_language_combination delete.
 */
function tmgmt_server_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $del_lcs = &drupal_static('tmgmt_delete_language_capabilities');

  if ($entity_type != 'user' || !array_intersect_key(user_roles(TRUE, 'provide translation services'), $entity->roles)) {
    return;
  }

  if (module_exists('tmgmt_local') && variable_get('tmgmt_server_auto_lc_sync')) {
    foreach ($items as $item) {
      $del_lcs[$item['language_from']] = $item['language_to'];
    }
  }
}

/**
 * Implements hook_field_attach_delete().
 *
 * Deletes lang capabilities form DS.
 */
function tmgmt_server_field_attach_delete($entity_type, $entity) {
  $del_lcs = &drupal_static('tmgmt_delete_language_capabilities');

  if ($entity_type != 'user' || !array_intersect_key(user_roles(TRUE, 'provide translation services'), $entity->roles)) {
    return;
  }

  foreach ($del_lcs as $language_from => $language_to) {
    tmgmt_server_ds_language_capability_update($language_from, $language_to, 'delete');
  }
}

/**
 * Implements hook_user_delete().
 */
function tmgmt_server_user_delete($account) {
  // Delete all client entities for this user.
  foreach (tmgmt_server_client_load_multiple_by_owner($account->uid) as $client) {
    $client->delete();
  }
}

/**
 * Implements hook_form_ID_alter().
 *
 * We alter the Drupal registration form to add TC specific fields.
 */
function tmgmt_server_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // If set to not override registration form just return.
  if (!variable_get('tmgmt_server_override_registration_form', TRUE)) {
    return;
  }

  // Add TC form only if admin is not creating user and the user is registering.
  if (empty($form['administer_users']['#value']) && $form['#user']->uid == 0) {

    module_load_include('inc', 'tmgmt_server', 'tmgmt_server.forms');

    $tc_form['tc'] = array(
      '#type' => 'fieldset',
      '#title' => t('Remote client')
    );

    $tc_form['tc'] += tmgmt_server_client_form(NULL, $form_state);
    unset($tc_form['tc']['actions']);

    $form['account'] += $tc_form;
  }

}

/**
 * Implements hook_user_presave().
 *
 * Adds TC user role into the $edit value array.
 */
function tmgmt_server_user_presave(&$edit, $account, $category) {
  // If set to not override registration form just return.
  if (!variable_get('tmgmt_server_override_registration_form', TRUE)) {
    return;
  }

  // Add TC role only if admin is not creating a user and the account is new.
  if (empty($edit['administer_users']) && $account->is_new) {
    $tc_rid = variable_get('tmgmt_server_tc_rid');
    $edit['roles'][$tc_rid] = $tc_rid;
  }
}

/**
 * Implements hook_user_insert().
 *
 * Creates TC entity.
 */
function tmgmt_server_user_insert(&$edit, $account, $category) {
  // If set to not override registration form just return.
  if (!variable_get('tmgmt_server_override_registration_form', TRUE)) {
    return;
  }

  // Add TC entity only if not being inserted by admin => user is registering.
  if (empty($edit['administer_users'])) {
    /**
     * @var TMGMTClientController $controller
     */
    $controller = entity_get_controller('tmgmt_server_client');
    $client = $controller->create(array(
      'label' => !empty($edit['label']) ? $edit['label'] : t('Auto created Remote Client'),
      'description' => !empty($edit['description']) ? $edit['description'] : NULL,
      'uuid' => $edit['uuid'],
      'uid' => $edit['uid'],
      // This data will be available only in case user is being created
      // during TC keys negotiation with DS.
      'ds_uid' => isset($edit['ds_uid']) ? $edit['ds_uid'] : NULL,
    ));

    $controller->save($client);
  }
}

/**
 * Validation callback for TC UUID form element.
 */
function tmgmt_server_client_form_element_validate_uuid($element, &$form_state) {
  // If we are adding new client validate for duplicate url.
  if (empty($form_state['tmgmt_server_client']->cid)) {
    $existing_client = entity_get_controller('tmgmt_server_client')
        ->loadByUUID($form_state['values']['uuid']);

    if (!empty($existing_client)) {
      form_set_error('uuid', t('Client with provided UUID already exists.'));
    }
  }
}

/**
 * Validation callback for TC uid form element.
 */
function tmgmt_server_client_form_element_validate_uid($element, &$form_state) {
  $value = $element['#value'];
  if (!$user = user_load_by_name($value)) {
    form_set_error('uid', t('Enter a valid username.'));
  }
  else {
    // Username can change, so we need to store the ID, not the username.
    form_set_value($element, $user->uid, $form_state);
  }
}

/**
 * Gets job item by the referenced object.
 *
 * @param string $item_type
 * @param int $item_id
 *
 * @return TMGMTJobItem
 */
function tmgmt_server_job_item_load_by_reference($item_type, $item_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'tmgmt_job_item');
  $query->propertyCondition('item_type', $item_type);
  $query->propertyCondition('item_id', $item_id);
  $result = $query->execute();

  if (!empty($result['tmgmt_job_item'])) {
    $result = array_keys($result['tmgmt_job_item']);
    return entity_load_single('tmgmt_job_item', array_shift($result));
  }

  return NULL;
}

/**
 * Loads all remoet client entities of a particular user.
 *
 * @param $uid
 *   The id of the user to load all client entities for.
 *
 * @return array
 *   An array of remote client entities.
 */
function tmgmt_server_client_load_multiple_by_owner($uid) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'tmgmt_server_client')
      ->propertyCondition('uid', $uid)
      ->execute();

  if (!empty($result['tmgmt_server_client'])) {
    return tmgmt_server_client_load_multiple(array_keys($result['tmgmt_server_client']));
  }

  // Return an empty array if no client entities could be found.
  return array();
}

/**
 * Loads a remote client entity by its id.
 *
 * @param $cid
 *   The id of the remote client to load.
 *
 * @return TMGMTClient
 *   A remote client entity.
 */
function tmgmt_server_client_load($cid) {
  return entity_load_single('tmgmt_server_client', $cid);
}

/**
 * Loads multiple remote client entities by their ids.
 *
 * @param $cids
 *   An array of ids of the remote clients to load.
 *
 * @return array
 *   An array of remote client entities.key($result['tmgmt_client'])
 */
function tmgmt_server_client_load_multiple($cids) {
  return entity_load('tmgmt_server_client', $cids);
}

/**
 * Loads a remote source entity by its primary identifier.
 *
 * @param $rsid
 *   The primary identifier of a remote source entity.
 *
 * @return TMGMTRemoteSource
 *   A remote source entity.
 */
function tmgmt_server_remote_source_load($rsid) {
  return entity_load_single('tmgmt_server_remote_source', $rsid);
}

/**
 * Receives and processes a translation request.
 *
 * @param TMGMTClient $client
 * @param array $items
 *   Translation items.
 * @param $source_language
 *   Source language in ISO format.
 * @param $target_language
 *   Target language in ISO format.
 * @param TMGMTTranslator $translator
 *   Translator.
 * @param string $user_agent
 *   User-Agent sent via headers.
 * @param string $job_comment
 *   Additional info or instructions provided by the customer.
 *
 * @return array
 *   Processed translation request.
 *
 * @throws TMGMTServerTranslationOrderException
 *   In the local request translation process fails.
 */
function tmgmt_server_receive_translation_request(
  TMGMTClient $client, array $items, $source_language, $target_language, TMGMTTranslator $translator, $user_agent, $job_comment = NULL) {

  $sources = array();
  $transaction = db_transaction();
  $processed_request = array();

  // For each translation item create a remote source entity.
  foreach ($items as $key => $item) {
    $item['cid'] = $client->cid;
    $item['source_language'] = $source_language;
    $item['target_language'] = $target_language;
    $item['uid'] = $GLOBALS['user']->uid;
    $item['user_agent'] = $user_agent;

    // TODO we might do:
    // - matching of duplicates
    // - matching of already translated text
    // - setting it into $processed_request
    $sources[$key] = entity_create('tmgmt_server_remote_source', $item);
    $sources[$key]->save();

    // Run alter hook after the save operation so that we already have rsid.
    drupal_alter('tmgmt_server_remote_source', $sources[$key], $item);
  }

  // Create translation job for this translation request.
  $job = tmgmt_job_create($source_language, $target_language, $GLOBALS['user']->uid, array(
    'translator' => $translator->name,
  ));
  // This will be saved in the following addItem() call.
  $job->settings['job_comment'] = $job_comment;

  // Create job items for each remote source.
  foreach ($sources as $source) {
    $job->addItem('remote', 'tmgmt_server_remote_source', $source->rsid);
  }

  // Request translation locally.
  if ($job->requestTranslation() === FALSE) {
    $transaction->rollback();
    watchdog('tmgmt_server', 'Error processing translation request. Job: @job',
      array('@job' => var_export($job, TRUE)), WATCHDOG_ERROR);
    throw new TMGMTServerTranslationOrderException('Unable to process translation request');
  }

  // Invoke rules when job is successfully received.
  rules_invoke_event_by_args('tmgmt_server_new_job_request', array(
    'tmgmt_job' => $job,
    'tmgmt_server_client' => $client,
  ));

  $processed_request['reference'] = $job->tjid;

  // Allow other modules to alter the processed request that will be sent back
  // to the client in the response.
  drupal_alter('tmgmt_server_processed_request', $processed_request, $job, $sources);

  return $processed_request;
}

/**
 * Implements hook_tmgmt_server_processed_request_alter().
 *
 * Adds job message of job being created by remote client.
 */
function tmgmt_server_tmgmt_server_processed_request_alter($processed_request, TMGMTJob $job, $sources) {
  $authenticated_entity = tmgmt_auth_issuer_controller()->getAuthenticatedEntity();

  // If we do not have an authenticated entity job has been created not via
  // services and therefore do not log job message as it is the responsibility
  // of the other party that took over the process of creating the job.
  if (empty($authenticated_entity)) {
    return;
  }

  $job->addMessage('Translation requested by client @uuid with authenticated user @user.', array(
    '@uuid' => $authenticated_entity->uuid,
    '@user' => l($GLOBALS['user']->name, 'user/' . $GLOBALS['user']->uid),
  ));
}

/**
 * Will sync given language capability with DS.
 *
 * - It will not push capability that is present at DS.
 * - It will not delete capability that is not present at DS.
 * - It will not delete capability that is still provided by some other source.
 *
 * @param string $source_language
 *   Source language code.
 * @param $target_language
 *   Target language code.
 * @param string $action
 *   Action to perform - either create or delete.
 */
function tmgmt_server_ds_language_capability_update($source_language, $target_language, $action) {
  $ds_language_pairs = &drupal_static(__FUNCTION__);

  if (empty($ds_language_pairs)) {
    $ds_connector = new TMGMTServerDSConnector(variable_get('tmgmt_ds_url', TMGMT_SERVER_DEFAULT_DS_URL));
    $ds_language_pairs = $ds_connector->getLangPairs();
  }

  $language_pairs = tmgmt_server_get_language_pairs();
  $capability_exists_at_ds = tmgmt_server_lang_pair_exists($ds_language_pairs, $source_language, $target_language);
  $capability_exists_locally = tmgmt_server_lang_pair_exists($language_pairs, $source_language, $target_language);

  // Language capability exists, so no need to recreate.
  if ($capability_exists_at_ds && $action == 'create') {
    return;
  }

  // We do not delete if:
  // - the pair is not present at DS
  // - we still have the pair here - some other source than the one deleted
  //   provides it
  if ((!$capability_exists_at_ds || $capability_exists_locally) && $action == 'delete') {
    return;
  }

  $ds_connector = new TMGMTServerDSConnector(variable_get('tmgmt_ds_url', TMGMT_SERVER_DEFAULT_DS_URL));

  try {
    if ($action == 'delete') {
      $ds_connector->removeLangCapability($source_language, $target_language);
    }
    elseif ($action == 'create') {
      $capabilities[] = array(
        'source_language' => $source_language,
        'target_language' => $target_language
      );
      $ds_connector->addLangCapabilities($capabilities);
    }
  }
  catch (TMGMTRemoteException $e) {
    watchdog_exception('tmgmt_server', $e);
  }
}

/**
 * Gets TS language pairs.
 *
 * @return array
 *   - if no args provided - language pairs of source => array of target
 *   - if source language provided it returns array of target languages
 */
function tmgmt_server_get_language_pairs() {
  $language_pairs = &drupal_static(__FUNCTION__);

  if (!empty($language_pairs)) {
    return $language_pairs;
  }

  /* @var TMGMTTranslator $translator */
  $translator = NULL;
  $language_pairs = array();
  $existing = array();

  foreach (tmgmt_translator_load_multiple(FALSE) as $translator) {
    foreach ($translator->getSupportedLanguagePairs($translator) as $language_pair) {
      if (isset($existing[$language_pair['source_language']][$language_pair['target_language']])) {
        continue;
      }

      $existing[$language_pair['source_language']][$language_pair['target_language']] = TRUE;
      $language_pairs[] = $language_pair;
    }
  }

  return $language_pairs;
}

/**
 * Helper function to create user account that is active and approved.
 *
 * @param string $name
 *   User login.
 * @param $mail
 *   User email
 * @param array $roles
 *   Additional roles.
 * @param array $edit
 *   Additional values to be passed into user_save().
 *
 * @return object
 *   User object.
 * @throws TMGMTException
 *   In case account data validation fails.
 */
function tmgmt_server_create_user($name, $mail, array $roles, array $edit = array()) {

  // Run validations

  if ($error = user_validate_name($name)) {
    throw new TMGMTException($error);
  }

  if ($error = user_validate_mail($mail)) {
    throw new TMGMTException($error);
  }

  if (user_load_by_mail($mail)) {
    throw new TMGMTException(t('User with email address @mail exists.', array('@mail' => $mail)));
  }

  if (user_load_by_name($name)) {
    throw new TMGMTException(t('User with name @name exists.', array('@name' => $name)));
  }

  // Create new account.

  $account = new stdClass();
  $account->is_new = TRUE;
  $account->status = TRUE;

  $pass = user_password();

  $edit['name'] = $name;
  $edit['mail'] = $mail;
  $edit['pass'] = $pass;
  $edit['status'] = 1;
  $edit['init'] = $name;
  $edit['roles'] = $roles;

  $new_account = user_save($account, $edit);
  $new_account->password = $pass;

  // We notify the user using text for no approval required.
  //_user_mail_notify('register_no_approval_required', $new_account);

  return $new_account;
}

/**
 * Implements hook_tmgmt_response_messages().
 */
function tmgmt_server_tmgmt_response_messages() {
  return array(
    // Info messages.
    '#4001' => t('Translation job cancelled'),
    '#4002' => t('Pick up your key at the TMGMT Directory'),

    // Error messages.
    '#5001' => t('Requested job item is not yet translated'),
    '#5002' => t('No finished translations available'),
    '#5003' => t('Source and/or target language not specified'),
    '#5004' => t('Translation server cannot translate for specified language pair'),
    '#5005' => t('Unable to process translation request'),
    '#5006' => t('Attempt to cancel non existing job'),
    '#5007' => t('Unable to cancel translation job'),
    '#5008' => t('TMGMT Directory did not approved identity'),
    '#5009' => t('Unable to register client entity'),
    '#5010' => t('Unable to transfer the client key to the TMGMT Directory'),
    '#5011' => t('The TMGMT Directory did not provide sufficient data to create a client entity'),
  );
}

/**
 * Static method to retrieve a keyed list of all available states.
 *
 * @return array
 *   A list of all available states.
 */
function tmgmt_server_remote_source_states() {
  return array(
    TMGMT_SERVER_REMOTE_SOURCE_PENDING => t('Pending'),
    TMGMT_SERVER_REMOTE_SOURCE_TRANSLATED => t('Translated'),
    TMGMT_SERVER_REMOTE_SOURCE_CANCELLED => t('Cancelled'),
  );
}

/**
 * Implements hook_tmgmt_server_client_created_via_service().
 */
function tmgmt_server_tmgmt_server_client_created_via_service($account, TMGMTClient $remote_client, array $user_info) {
  if (module_exists('addressfield')) {
    $addressfield = variable_get('tmgmt_server_remote_client_addressfield', 'remote_client_addressfield');
    // Reload the user to init fields.
    $account = user_load($account->uid);
    if (isset($account->{$addressfield})) {
      $account->{$addressfield}[LANGUAGE_NONE][0] = $user_info;
      entity_metadata_user_save($account);
    }
  }
}

/**
 * Gets DS key.
 *
 * @return TMGMTAuthReceivedKey
 *   DS key.
 */
function tmgmt_server_get_ds_key() {
  /**
   * @var TMGMTDirectoryServerController $ds_controller
   */
  $ds_controller = entity_get_controller('tmgmt_directory_server');
  $ds = $ds_controller->loadByUrl(variable_get('tmgmt_ds_url'));

  if (empty($ds)) {
    return NULL;
  }

  return tmgmt_auth_receiver_controller()->loadByEntity('tmgmt_directory_server', $ds->sid);
}

/**
 * Gets unique login from email address.
 *
 * @param string $email
 * @return string
 */
function tmgmt_server_get_user_login_from_email($email) {
  if (!valid_email_address($email)) {
    return FALSE;
  }

  $parts = explode('@', $email);
  // Change any non-word characters used in the email address (such as +)
  // to underscores so that the username validation passes.
  $parts[0] = preg_replace('/[^a-zA-Z0-9.-]/', '_', $parts[0]);
  $name = $login = $parts[0];
  $i = 0;

  do {
    if ($i > 0) {
      $login = $name . $i;
    }
    $i++;
    $existing = user_load_by_name($login);
  }
  while (!empty($existing));

  return $login;
}

/**
 * Prepares a language code list for a select form item with all languages.
 */
function tmgmt_server_languages_predefined_list() {
  $predefined = &drupal_static(__FUNCTION__);

  if (!isset($predefined)) {
    include_once DRUPAL_ROOT . '/includes/iso.inc';
    $predefined = _locale_get_predefined_list();

    foreach ($predefined as $key => $value) {

      // Include native name in output, if possible
      if (count($value) > 1) {
        $tname = t($value[0]);
        $predefined[$key] = ($tname == $value[1]) ? $tname : "$tname ($value[1])";
      }
      else {
        $predefined[$key] = t($value[0]);
      }
    }

    // Add custom languages that are not part of the iso.inc definition.
    $installed_languages = language_list();
    foreach ($installed_languages as $lang => $info) {
      if (!isset($predefined[$lang])) {
        $predefined[$lang] = $info->name;
      }
    }

    asort($predefined);
  }

  return $predefined;
}

/**
 * Tests connection to DS and stores the remote identifier.
 */
function tmgmt_server_ds_settings_test() {
  /**
   * @var TMGMTDirectoryServerController $ds_controller
   */
  $ds_controller = entity_get_controller('tmgmt_directory_server');
  $ds = $ds_controller->loadByUrl(variable_get('tmgmt_ds_url'));

  // Test the connection.
  try {
    $connector = new TMGMTServerDSConnector(variable_get('tmgmt_ds_url'));
    $response = $connector->testConnection();

    $ds->remote_identifier = $response['identifier'];
    $ds_controller->save($ds);
  }
  catch (TMGMTRemoteException $e) {
    drupal_set_message(t('Unable to connect to the TMGMT Directory. Please check if the url and keys are correct.'), 'error');
    return;
  }

  drupal_set_message(t('Connection successfully verified.'));
}

function tmgmt_server_sync_ds_lang_definitions($enable = 0) {

  $ds_connector = new TMGMTServerDSConnector(variable_get('tmgmt_ds_url', TMGMT_SERVER_DEFAULT_DS_URL));

  try {
    $ds_supported_languages = $ds_connector->getSupportedLanguages();

    $new_ds_languages = array_diff(array_keys($ds_supported_languages), array_keys(language_list()));
    if (!empty($new_ds_languages)) {
      foreach ($new_ds_languages as $new_ds_language) {
        $lang_definition = $ds_supported_languages[$new_ds_language];
        locale_add_language(
          $new_ds_language, $lang_definition['name'], $lang_definition['native'], $lang_definition['direction'], '', $new_ds_language, $enable);

        drupal_set_message(t('Language definitions for language %code has been synced with the TMGMT Directory. Visit the <a href="@url">languages page</a> for more info.',
          array('%code' => $new_ds_language, '@url' => url('admin/config/regional/language'))), 'status');
      }
    }
  }
  catch (Exception $e) {
    watchdog_exception('tmgmt_server', $e);
    drupal_set_message(t('Error occurred while syncing language definitions from the TMGMT Directory. %error',
      array('%error' => $e->getMessage())), 'error');
  }

}

function tmgmt_server_lang_pair_exists($lang_pairs, $source_language, $target_language) {
  foreach ($lang_pairs as $pair) {
    if ($pair['source_language'] == $source_language && $pair['target_language'] == $target_language) {
      return TRUE;
    }
  }

  return FALSE;
}
