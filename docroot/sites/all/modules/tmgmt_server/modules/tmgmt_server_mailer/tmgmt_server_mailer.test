<?php

class TMGMTServerMailerTest extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'TMGMT Server Mailer',
      'description' => t('Tests the translation workflow done via the mailer module.'),
      'group' => 'TMGMT Server',
      'dependencies' =>  array('maillog'),
    );
  }

  function setUp() {
    parent::setUp(array('tmgmt_server_mailer', 'maillog'));

    $mail_system = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
    $mail_system['default-system'] = 'MaillogMailSystem';
    variable_set('mail_system', $mail_system);

    variable_set('maillog_log', TRUE);
  }

  /**
   * Tests the mailer workflow.
   */
  function testMailerWorkflow() {

    $translator = tmgmt_translator_load('file_mailer');
    $translator->settings['new_job_notification']['translator_email'] = 'translator@example.com';
    $translator->save();
    // Create client entity at the server.
    /** @var TMGMTClientController $client_controller */
    $client_controller = entity_get_controller('tmgmt_server_client');
    $client = $client_controller->createOnTheFly(rand(1, 10), 'http://tc.example.com', 'tc@example.com');
    // "Receive" a translation job from the client entity.
    $source_data = $this->sourceData();
    $processed_request = tmgmt_server_receive_translation_request(
      $client, $source_data['items'], $source_data['source_language'], $source_data['target_language'], $translator, 'i am user agent');

    // Load the translation job that has been just "received".
    /** @var TMGMTJob $job */
    $job = tmgmt_job_load($processed_request['reference']);

    // Test if the notification has been sent.
    $maillog = db_select('maillog')->fields('maillog')->execute()->fetchAll();
    $notification = array_shift($maillog);
    // The to address defaults to site_mail variable.
    $this->assertEqual($notification->header_to, 'translator@example.com');
    // Test notification email subject.
    $this->assertTrue(strpos($notification->subject, tmgmt_server_mailer_get_job_xliff_filename($job)) !== FALSE);
    // Test notification email body.
    $this->assertTrue(strpos($notification->body, tmgmt_server_mailer_download_url($job)) !== FALSE);
    $this->assertTrue(strpos($notification->body, tmgmt_server_mailer_import_url($job)) !== FALSE);

    // Test access to the import form.
    $this->drupalGet(tmgmt_server_mailer_import_url($job));
    $this->assertResponse(200);
    $this->drupalGet(tmgmt_server_mailer_import_url($job) . 'eee');
    $this->assertResponse(403);

    // Test importing the translation.
    $xliff = file_get_contents(tmgmt_server_mailer_download_url($job));
    $translated_xliff = str_replace('<target xml:lang="de">Hello world</target>', '<target xml:lang="de">Hello world translated</target>', $xliff);
    $tmp_path = file_directory_temp() . '/translated_xliff.xlf';
    file_put_contents($tmp_path, $translated_xliff);
    // Submit the xliff file and test for the messages.
    $this->drupalPost(tmgmt_server_mailer_import_url($job), array('files[file]' => $tmp_path), t('Import'));
    $this->assertText(t('The translation file has been successfully imported.'));
    // We already should get the info saying it is not possible to import new
    // translation for the job.
    $this->assertText(t('The translation of this job has been already imported, it is not possible to import a new translation.'));

    // Reload the job and test if it is in needs review state.
    entity_get_controller('tmgmt_job')->resetCache();
    entity_get_controller('tmgmt_job_item')->resetCache();
    $job = tmgmt_job_load($job->tjid);

    /** @var TMGMTJobItem $item */
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isNeedsReview());
    }

    // Test if translation has been added.
    $data = $job->getData();
    $this->assertEqual($data['1']['wrapper']['#translation']['#text'], 'Hello world translated');

    // Test that the upload page does not allow to import further translations.
    $this->drupalGet(tmgmt_server_mailer_import_url($job));
    $this->assertText(t('The translation of this job has been already imported, it is not possible to import a new translation.'));

    // Test for private filesystem.
    variable_set('file_private_path', variable_get('file_public_path') . '/private');
    $translator->settings['scheme'] = 'private';
    $translator->save();

    $processed_request = tmgmt_server_receive_translation_request(
      $client, $source_data['items'], $source_data['source_language'], $source_data['target_language'], $translator, 'i am user agent');

    // Load the translation job that has been just "received".
    /** @var TMGMTJob $job */
    $job = tmgmt_job_load($processed_request['reference']);

    // Test if the url contains the access token.
    $this->assertTrue(strpos(tmgmt_server_mailer_download_url($job), tmgmt_server_mailer_job_token($job)));
    // Test if the file is accessible.
    $this->drupalGet(tmgmt_server_mailer_download_url($job));
    $this->assertResponse(200);
    // Test if the file is not accessible to wrong token.
    $this->drupalGet(tmgmt_server_mailer_download_url($job) . 'nn');
    $this->assertResponse(403);
  }

  protected function sourceData() {
    return array(
      'items' =>
          array(
            1 =>
                array(
                  'data' =>
                      array(
                        'wrapper' =>
                            array(
                              '#label' => 'Wrapper label',
                              '#text' => 'Hello world',
                              '#status' => 0,
                              '#parent_label' =>
                                  array(
                                    0 => 'Wrapper label',
                                  ),
                            ),
                      ),
                  'label' => 'Wrapper label',
                  'callback' => url('tmgmt_server_test_tc/tmgmt-drupal-callback/1', array('absolute' => TRUE)),
                ),
          ),
      'source_language' => 'en',
      'target_language' => 'de',
      'job_comment' => 'Dummy job comment',
    );
  }
}
