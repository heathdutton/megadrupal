<?php
/**
 * @file
 * TMGMT Server Mailer bootstrap file.
 */


/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_server_mailer_tmgmt_translator_plugin_info() {
  return array(
    'file_mailer' => array(
      'label' => t('File mailer translator'),
      'description' => t('File translator that sends notifications of new jobs and provides simple import UI.'),
      'plugin controller class' => 'TMGMTFileTranslatorPluginController',
      'ui controller class' => 'TMGMTFileMailerTranslatorUIController',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tmgmt_server_mailer_menu() {
  $items['tmgmt-server-mailer-import/%tmgmt_job/%'] = array(
    'title' => 'TMGMT Server Mailer Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_server_mailer_import_form', 1),
    'access callback' => 'tmgmt_server_mailer_token_access',
    'access arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
    'file' => 'tmgmt_server_mailer.pages.inc',
  );

  return $items;
}

/**
 * Access callback to mailer user actions.
 *
 * @param TMGMTJob $job
 *   Job for which to determine the access.
 * @param $token
 *   Token to verify.
 *
 * @return bool
 *   Access check.
 */
function tmgmt_server_mailer_token_access(TMGMTJob $job, $token) {
  return $token == tmgmt_server_mailer_job_token($job);
}

/**
 * Implements hook_tmgmt_translator_plugin_info_alter().
 */
function tmgmt_server_mailer_tmgmt_translator_plugin_info_alter(&$info) {
  $info['file']['ui controller class'] = 'TMGMTFileMailerTranslatorUIController';
}

/**
 * Implements hook_mail().
 */
function tmgmt_server_mailer_mail($key, &$message, $params) {
  /** @var TMGMTJob $job */
  $job = $params['job'];
  $message['subject'] = token_replace(tmgmt_server_mailer_notification_subject_template($job->getTranslator()), array('tmgmt_job' => $job));
  $message['body'][] = token_replace(tmgmt_server_mailer_notification_body_template($job->getTranslator()), array('tmgmt_job' => $job));
}

/**
 * Implements hook_file_download().
 */
function tmgmt_server_mailer_file_download($uri) {

  // Check if we have token available. If not, return as there is nothing to do.
  if (!isset($_GET['token'])) {
    return;
  }
  $token = $_GET['token'];

  // Get the file record based on the URI. If not in the database just return.
  $files = file_load_multiple(array(), array('uri' => $uri));
  if (count($files)) {
    foreach ($files as $item) {
      // Since some database servers sometimes use a case-insensitive comparison
      // by default, double check that the filename is an exact match.
      if ($item->uri === $uri) {
        $file = $item;
        break;
      }
    }
  }
  if (!isset($file)) {
    return;
  }

  // Check if this file belongs to a job.
  $usage_list = file_usage_list($file);
  if (!isset($usage_list['tmgmt_file']['tmgmt_job'])) {
    return;
  }

  // Verify access based on provided token.
  foreach (tmgmt_job_load_multiple(array_keys($usage_list['tmgmt_file']['tmgmt_job'])) as $job) {
    if (tmgmt_server_mailer_job_token($job) == $token) {
      // Access is granted.
      $headers = file_get_content_headers($file);
      return $headers;
    }
  }
}

/**
 * Implements hook_token_info().
 */
function tmgmt_server_mailer_token_info() {
  return array(
    'types' => array(
      'tmgmt_server_mailer_job_info' => array(
        'name' => t('Translation Job info'),
        'description' => t('TMGMT Server Mailer extra translation job info.'),
      ),
    ),
    'tokens' => array(
      'tmgmt_server_mailer_job_info' => array(
        'import_url' => array(
          'name' => t('Import URL'),
          'description' => t('Import URL to submit the job xliff file.'),
        ),
        'download_url' => array(
          'name' => t('Download URL'),
          'description' => t('Download URL to get the source xliff file'),
        ),
        'file_name' => array(
          'name' => t('Xliff file name'),
          'description' => t('The translation job xliff file name.'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function tmgmt_server_mailer_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'tmgmt_server_mailer_job_info' && !empty($data['tmgmt_job'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'import_url':
          $replacements[$original] = tmgmt_server_mailer_import_url($data['tmgmt_job']);
          break;
        case 'download_url':
          $replacements[$original] = tmgmt_server_mailer_download_url($data['tmgmt_job']);
          break;
        case 'file_name':
          $replacements[$original] = tmgmt_server_mailer_get_job_xliff_filename($data['tmgmt_job']);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Helper to compose the xliff filename.
 *
 * @param TMGMTJob $job
 *   Job for which to get the filename.
 *
 * @return string
 *   Filename.
 */
function tmgmt_server_mailer_get_job_xliff_filename(TMGMTJob $job) {
  return "JobID" . $job->tjid . '_' . $job->source_language . '_' . $job->target_language;
}

/**
 * Gets access token for given job.
 *
 * @param TMGMTJob $job
 *   Translation job.
 *
 * @return string
 *   The access token.
 */
function tmgmt_server_mailer_job_token(TMGMTJob $job) {
  return drupal_hmac_base64($job->tjid, drupal_get_private_key() . drupal_get_hash_salt());
}

/**
 * Helper to get job xliff download url.
 *
 * @param TMGMTJob $job
 *   The translation job.
 *
 * @return string
 *   The file path.
 */
function tmgmt_server_mailer_download_url(TMGMTJob $job) {
  $url = file_create_url($job->getSetting('scheme') . '://tmgmt_file/' . tmgmt_server_mailer_get_job_xliff_filename($job) . '.' .  $job->getSetting('export_format'));
  if ($job->getSetting('scheme') == 'private') {
    $url .= '?token=' . tmgmt_server_mailer_job_token($job);
  }
  return $url;
}

/**
 * Helper to get the import url for a translated xliff.
 *
 * @param TMGMTJob $job
 *   Job for which to get the import form.
 *
 * @return string
 *   Import form url.
 */
function tmgmt_server_mailer_import_url(TMGMTJob $job) {
  return url('tmgmt-server-mailer-import/' . $job->tjid . '/' . tmgmt_server_mailer_job_token($job), array('absolute' => TRUE));
}

/**
 * Gets translator email address to which to send new job notification.
 *
 * @param TMGMTTranslator $translator
 *   The current translator.
 *
 * @return string
 *   Email address.
 */
function tmgmt_server_mailer_notification_email(TMGMTTranslator $translator) {
  $notification_settings = $translator->getSetting('new_job_notification');
  return !empty($notification_settings['translator_email']) ? check_plain($notification_settings['translator_email']) : NULL;
}

/**
 * Helper to get the notification body template.
 *
 * @param TMGMTTranslator $translator
 *   The current translator.
 *
 * @return string
 *   Notification email body template.
 */
function tmgmt_server_mailer_notification_body_template(TMGMTTranslator $translator) {
  $notification_settings = $translator->getSetting('new_job_notification');
  return !empty($notification_settings['body']) ? check_plain($notification_settings['body']) :
      t("Dear translator,\n\na new translation job has been submitted. You can download translation xliff file here: [tmgmt_server_mailer_job_info:download_url]\n\nWhen you finish the job, please import the translation as the xliff file here: [tmgmt_server_mailer_job_info:import_url]");
}

/**
 * Helper to get the notification subject template.
 *
 * @param TMGMTTranslator $translator
 *   The current translator.
 *
 * @return string
 *   Notification email subject template.
 */
function tmgmt_server_mailer_notification_subject_template(TMGMTTranslator $translator) {
  $notification_settings = $translator->getSetting('new_job_notification');
  return !empty($notification_settings['subject']) ? check_plain($notification_settings['subject']) : t('New translation job file [tmgmt_server_mailer_job_info:file_name]');
}
