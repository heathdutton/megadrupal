<?php
/**
 * @file
 * Defines the SoColissimo flexibility shipping method.
 */

/**
 * Implements hook_entity_info().
 */
function commerce_socolissimo_entity_info() {
  $return = array(
    // The label "commerce_socolissimo_rate" is too long, only 32
    // characters is allowed.
    'commerce_socolissimo_rate' => array(
      'label' => t(
        'SoColissimo Flexibility Rate', array(), array('context' => 'a ColiPoste SoColissimo flexibility rate relative to a shipping service')
      ),
      'controller class' => 'DrupalCommerceEntityController',
      'locking mode' => 'pessimistic',
      'base table' => 'commerce_socolissimo_rate',
      'load hook' => 'commerce_socolissimo_rate_load',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'rate_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'flexibility_rate' => array(
          'label' => t('So Colissimo Flexibility Rate', array(), array('context' => 'a ColiPoste SoColissimo flexibility rate relative to a shipping service')),
          'admin' => array(
            'path' => 'admin/commerce/config/socolissimo-flexibility',
            'real path' => 'admin/commerce/config/socolissimo-flexibility',
            'access arguments' => array('administer shipping'),
          ),
        ),
      ),
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
        'customer' => array(
          'label' => t('Customer'),
          'custom settings' => FALSE,
        ),
      ),
      'token type' => 'commerce-socolissimo-rate',
      'metadata controller class' => '',
      'access callback' => 'commerce_entity_access',
      'access arguments' => array('administer shipping'),
      'permission labels' => array(
        'singular' => t('So Colissimo Flexibility rate'),
        'plural' => t('So Colissimo Flexibility rates'),
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_menu().
 */
function commerce_socolissimo_menu() {
  $items = array();

  foreach (commerce_shipping_services('socolissimo_flexibility') as $service_name => $shipping_service) {
    // Convert underscores to hyphens for the menu item argument.
    $service_name_arg = 'socolissimo-flexibility' . '-' . strtr($service_name, '_', '-');

    // Shipping services links.
    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rates'] = array(
      'title' => 'manage rates',
      'page callback' => 'views_embed_view',
      'page arguments' => array(
        'socolissimo_flexibility_rates',
        'default',
        $service_name,
      ),
      'access callback' => 'commerce_entity_access',
      'access arguments' => array(
        'view',
        NULL,
        NULL,
        'commerce_socolissimo_rate',
      ),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 0,
    );

    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/status'] = array(
      'title callback' => 'commerce_socolissimo_status_title',
      'title arguments' => array($service_name),
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'commerce_socolissimo_status_form',
        $service_name,
      ),
      'access arguments' => array('administer shipping'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 50,
      'file' => 'includes/commerce_socolissimo.forms.inc',
    );

    // Shipping service rate CRUD Links.
    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rates/add'] = array(
      'title' => 'add a rate',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'commerce_socolissimo_rate',
        commerce_socolissimo_rate_new($service_name),
      ),
      'access callback' => 'commerce_entity_access',
      'access arguments' => array(
        'create',
        commerce_socolissimo_rate_new($service_name),
        NULL,
        'commerce_socolissimo_rate',
      ),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 1,
      'file' => 'includes/commerce_socolissimo.forms.inc',
    );

    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rate/%commerce_socolissimo_rate'] = array(
      'title callback' => 'commerce_socolissimo_rate_title',
      'title arguments' => array(7),
      'page callback' => 'commerce_socolissimo_view_rate_wrapper',
      'page arguments' => array(7),
      'access callback' => 'commerce_entity_access',
      'access arguments' => array('view', 7, NULL, 'commerce_socolissimo_rate'),
      'weight' => 48,
    );

    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rate/%commerce_socolissimo_rate/edit'] = array(
      'title' => 'edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_socolissimo_rate', 7),
      'access callback' => 'commerce_entity_access',
      'access arguments' => array(
        'update',
        7,
        NULL,
        'commerce_socolissimo_rate',
      ),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'weight' => 49,
      'file' => 'includes/commerce_socolissimo.forms.inc',
    );

    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rate/%commerce_socolissimo_rate/delete'] = array(
      'title' => 'delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'commerce_socolissimo_delete_rate',
        7,
      ),
      'access callback' => 'commerce_entity_access',
      'access arguments' => array(
        'delete',
        7,
        NULL,
        'commerce_socolissimo_rate',
      ),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'weight' => 50,
      'file' => 'includes/commerce_socolissimo.forms.inc',
    );
  }

  // Settings route entry.
  $items['admin/commerce/config/socolissimo-flexibility'] = array(
    'title' => 'So Colissimo configuration',
    'description' => 'Configure SoColissimo flexibility settings, fields, and displays.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_socolissimo_settings_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'includes/commerce_socolissimo.settings.inc',
  );

  $items['admin/commerce/config/socolissimo-flexibility/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/commerce/config/socolissimo-flexibility/import'] = array(
    'title' => 'Import',
    'description' => 'Import rates for socolissimo flexibility shipping services.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_socolissimo_import_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'includes/commerce_socolissimo.settings.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  return $items;
}

/**
 * Implements hook_element_info().
 */
function commerce_socolissimo_element_info() {
  $types['commerce_socolissimo_map'] = array(
    '#input' => FALSE,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'commerce_socolissimo') . '/theme/js/commerce_socolissimo_gmap.js',
      ),
      'css' => array(
        drupal_get_path('module', 'commerce_socolissimo') . '/theme/css/commerce_socolissimo_point_details.css',
      ),
    ),
    '#theme' => 'commerce_socolissimo_map',
  );
  $types['commerce_socolissimo_point'] = array(
    '#input' => TRUE,
    '#theme' => 'commerce_socolissimo_point',
  );
  $types['commerce_socolissimo_point_details'] = array(
    '#input' => FALSE,
    '#theme' => 'commerce_socolissimo_point_details',
  );
  $types['commerce_socolissimo_point_wrapper'] = array(
    '#input' => FALSE,
    '#theme' => 'commerce_socolissimo_point_wrapper',
  );

  return $types;
}

/**
 * Implements hook_theme().
 */
function commerce_socolissimo_theme() {
  return array(
    'commerce_socolissimo_map' => array(
      'render element' => 'element',
    ),
    'commerce_socolissimo_selected_point' => array(
      'path' => drupal_get_path('module', 'commerce_socolissimo') . '/theme',
      'template' => 'commerce-socolissimo-selected-point',
      'render element' => 'element',
    ),
    'commerce_socolissimo_point' => array(
      'path' => drupal_get_path('module', 'commerce_socolissimo') . '/theme',
      'template' => 'commerce-socolissimo-point',
      'render element' => 'element',
    ),
    'commerce_socolissimo_point_details' => array(
      'path' => drupal_get_path('module', 'commerce_socolissimo') . '/theme',
      'template' => 'commerce-socolissimo-point-details',
      'render element' => 'element',
    ),
    'commerce_socolissimo_point_wrapper' => array(
      'path' => drupal_get_path('module', 'commerce_socolissimo') . '/theme',
      'template' => 'commerce-socolissimo-point-wrapper',
      'render element' => 'content',
    ),
    'views_data_export_expeditor_inet' => array(
      'path' => drupal_get_path('module', 'commerce_socolissimo') . '/theme',
      'render elements' => 'rows',
    ),
  );
}

/**
 * Preprocess theme callback.
 *
 * Adds CSS informations on a colissimo point.
 *
 * @param array $variables
 *   Theme variables.
 */
function template_preprocess_commerce_socolissimo_point_details(&$variables) {
  $variables['classes_array'][] = 'field field-name-commerce-customer-shipping';
  drupal_add_css(drupal_get_path('module', 'commerce_socolissimo') . '/theme/css/commerce_socolissimo_point_details.css');
}

/**
 * Implements hook_forms().
 */
function commerce_socolissimo_forms($form_id, $args) {
  $forms['commerce_socolissimo_rate'] = array(
    'callback' => 'commerce_socolissimo_rate_form',
  );

  $forms['commerce_socolissimo_delete_rate'] = array(
    'callback' => 'commerce_socolissimo_delete_rate_form',
  );

  return $forms;
}

/**
 * Implements hook_libraries_info().
 */
function commerce_socolissimo_libraries_info() {
  $libraries['infobox'] = array(
    'name' => 'InfoBox',
    'vendor url' => 'https://code.google.com/p/google-maps-utility-library-v3/wiki/Libraries#InfoBox',
    'download url' => 'http://google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.12/src/infobox_packed.js',
    'version arguments' => array(
      'file' => 'infobox_packed.js',
      'pattern' => '#InfoBox\s((:?\d\.?)+)#',
    ),
    'files' => array(
      'js' => array(
        'infobox_packed.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_socolissimo_form_commerce_checkout_form_shipping_alter(&$form, &$form_state, $form_id) {
  if (isset($form['commerce_shipping']['shipping_service'])) {
    // Add description on So Colissimo services.
    // TODO: http://drupal.org/node/2010738 solved but we need a new release
    // to make a dependency on it.
    $socolissimo_services = commerce_shipping_services('socolissimo_flexibility');
    $has_socolissimo_service = FALSE;
    foreach ($form['commerce_shipping']['shipping_service']['#options'] as $shipping_service_name => $shipping_service) {
      if (array_key_exists($shipping_service_name, $socolissimo_services)) {
        $has_socolissimo_service = TRUE;
        $form['commerce_shipping']['shipping_service'][$shipping_service_name] = array(
          '#description' => $socolissimo_services[$shipping_service_name]['description'],
        );
      }
    }

    if ($has_socolissimo_service) {
      // Load Google Map API.
      global $language;
      $socolissimo_map = _commerce_socolissimo_map_settings();
      $query = array(
        'v' => '3',
        'language' => $language->language,
        'sensor' => 'false',
      );
      if (!empty($socolissimo_map['google_api_key'])) {
        $query += array(
          'key' => $socolissimo_map['google_api_key'],
        );
      }
      $form['#attached']['js'][url(
        'http://maps.googleapis.com/maps/api/js', array(
          'query' => $query,
          'external' => TRUE,
        )
      )] = array('type' => 'external', 'group' => JS_LIBRARY);
      $form['#attached']['css'][] = drupal_get_path('module', 'commerce_socolissimo') . '/theme/css/commerce_socolissimo.css';

      // Add So Colissimo logo.
      $form['#attached']['js'][] = drupal_get_path('module', 'commerce_socolissimo') . '/theme/js/commerce_socolissimo_logo.js';
      $socolissimo_logo = theme('image', array(
          'path' => drupal_get_path('module', 'commerce_socolissimo') . '/theme/images/socolissimo_logo.png',
          'attributes' => array('class' => array('commerce-socolissimo-logo')),
        )) . '<span>' . t('With So Colissimo, choose your favorite delivery service !') . '</span>';
      drupal_add_js(array('commerce_socolissimo_logo' => $socolissimo_logo), array('type' => 'setting'));
    }
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_socolissimo_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_socolissimo') . '/includes/views',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the customer shipping profile pane if specific socolissimo shipping
 * services have been selected by customer.
 */
function commerce_socolissimo_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  if ($wrapper_order = entity_metadata_wrapper('commerce_order', $form_state['order'])) {
    // For the shipping services bellow, we need to hide the customer shipping
    // profile pane.
    $shipping_services = array(
      'socolissimo_cityssimo',
      'socolissimo_local_store',
      'socolissimo_post_office',
    );

    // Looking for the shipping service selected in that order.
    foreach ($wrapper_order->commerce_line_items as $wrapper_line_item) {
      if ($wrapper_line_item->getBundle() == 'shipping') {
        $shipping_service = $wrapper_line_item->commerce_shipping_service->value();

        if (array_search($shipping_service, $shipping_services) !== FALSE) {
          // Remove the customer shipping profile pane.
          unset($form['checkout_review']['review']['#data']['customer_profile_shipping']);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 * Alter the commerce_order entity type display when it contains a socolissimo
 * shipping service.
 */
function commerce_socolissimo_entity_view_alter(&$build, $type) {
  if ($type == 'commerce_order') {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $build['#entity']);

    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      // If this line item is a shipping line item...
      if ($line_item_wrapper->getBundle() == 'shipping') {
        $line_item = $line_item_wrapper->value();
        $point = isset($line_item->data['service_details']['commerce_socolissimo_point']) ? $line_item->data['service_details']['commerce_socolissimo_point'] : NULL;
      }
    }

    if (isset($point)) {
      $customer_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
      $element = _commerce_socolissimo_convert_into_render_array($point);
      $element['#phone_number'] = $customer_address['phone_number'];
      $element['#delivery_delay'] = _commerce_socolissimo_delivery_delay();

      $build['commerce_customer_shipping'] = array(
        '#theme' => 'commerce_socolissimo_point_details',
        '#title' => t('Shipping information'),
      ) + $element;
    }
  }
}

/**
 * Map theme hook.
 */
function theme_commerce_socolissimo_map($variables) {
  $element = $variables['element'];
  $socolissimo_map = $element['#map'];
  $attributes = array(
    'id' => $socolissimo_map['id'],
    'class' => 'commerce-socolissimo-map',
    'style' => 'width: ' . $socolissimo_map['width'] . '; height: ' . $socolissimo_map['height'],
  );
  $output = '<div' . drupal_attributes($attributes) . '>' . t('Fail to load google map') . '<noscript>' . t('Javascript is required to view this map.') . '</noscript></div>';

  return $output;
}

/**
 * Theme callback: Format export rows as Expeditor INET format.
 *
 * @param array $variables
 *   Rows to be formatted.
 *
 * @return null|string
 *   Returns the formatted export as a simple text file.
 */
function theme_views_data_export_expeditor_inet($variables) {
  $rows = $variables['rows'];
  $output = NULL;
  foreach ($rows as $row) {
    $line = str_repeat(' ', 1000);
    foreach ($row as $value) {
      $converted = _commerce_socolissimo_convert_from_utf8($value['value'], "WINDOWS-1252");
      $line = substr_replace($line, ($converted) ? $converted : $value['value'], $value['position'], $value['length']);
    }
    $line_test = trim($line);
    if (!empty($line_test)) {
      $output .= $line;
      if ($row != end($rows)) {
        $output .= "\r\n";
      }
    }
  }

  return $output;
}

/**
 * Returns the payment details element for display via AJAX.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   The element to display via ajax.
 */
function commerce_socolissimo_pane_checkout_form_details_refresh($form, $form_state) {
  return $form['commerce_shipping']['service_details'];
}

/**
 * Element validation callback.
 *
 * We need to store form_state values somewhere else since
 * commerce_shipping_pane_checkout_form() reset pane values.
 */
function _commerce_socolissimo_pane_value_hack($element, &$form_state, $form) {
  $form_state['values']['commerce_shipping']['commerce_socolissimo'] = $form_state['values']['commerce_shipping']['service_details'];
}


/**
 * Call socolissimo api.
 *
 * @param string $method
 *   Socolissimo SOAP function.
 * @param array $arguments
 *   Socolissimo SOAP arguments.
 * @param string $point_types
 *   Type of point to filter on.
 * @param string $error
 *   The PHP error raised.
 *
 * @return array
 *   An array containing all points results.
 */
function commerce_socolissimo_api($method, $arguments, $point_types, &$error = NULL) {
  $results = array();
  $socolissimo_api = variable_get('commerce_socolissimo_api', array());
  $socolissimo_settings = variable_get('commerce_socolissimo_settings', array());

  if (!empty($socolissimo_api['username']) && !empty($socolissimo_api['password']) && !empty($socolissimo_api['url'])) {
    $arguments += array(
      'accountNumber' => $socolissimo_api['username'],
      'password' => $socolissimo_api['password'],
    );
    try {
      // Record debug information
      if ($socolissimo_settings['debug']) {
        $message = 'request !url using !method => !params';
        watchdog('commerce_socolissimo', $message, array('!url' => $socolissimo_api['url'], '!method' => $method, '!params' => print_r($arguments, 1)));
      }

      // Get delivery points.
      $client = new SoapClient($socolissimo_api['url'], array('connection_timeout' => 30));
      $result = $client->$method($arguments);

      // Record debug information
      if ($socolissimo_settings['debug']) {
        $message = 'response is !result';
        watchdog('commerce_socolissimo', $message, array('!result' => print_r($result, 1)));
      }
      switch ($method) {
        case 'findRDVPointRetraitAcheminement':
          $delevery_points = isset($result->return->listePointRetraitAcheminement) ? $result->return->listePointRetraitAcheminement : array();
          if (!empty($delevery_points)) {
            // Set delevery points on map.
            foreach ($delevery_points as $delevery_point) {
              if (in_array($delevery_point->typeDePoint, $point_types)) {
                $point = _commerce_socolissimo_build_point($delevery_point);
                $results[$delevery_point->identifiant] = $point;
              }
            }
          }
          break;
      }
    }
    catch (SoapFault $e) {
      $error = filter_xss_admin($e->getMessage());
    }
  }
  else {
    $error = t('So Colissimo API not configured. Go to !config_page to configure it.', array('!config_page' => l(t('So Colissimo configuration'), 'admin/commerce/config/socolissimo-flexibility')));
  }

  return $results;
}

/**
 * Provide google map default settings.
 */
function _commerce_socolissimo_map_settings() {
  $socolissimo_map = variable_get('commerce_socolissimo_map', array());
  $default_settings = array(
    'google_api_key' => '',
    'id' => 'google-map',
    'width' => '70%',
    'height' => '400px',
    'zoom' => 12,
    'autozoom' => 1,
    'street_view_control' => 0,
    'map_type_control' => 0,
  );
  if (!empty($socolissimo_map['zoom'])) {
    $socolissimo_map['zoom'] = (int) $socolissimo_map['zoom'];
  }

  return $socolissimo_map + $default_settings;
}

/**
 * Verification for phone number.
 *
 * @param string $phone_number
 *   The phone number to check.
 *
 * @param string $country
 *   Country code
 *
 * @return mixed
 *   Returns TRUE if correct, otherwise returns an error code:
 *   - 0: $phone_number is not a valid French phone number.
 *   - 1: eight or more numbers are the same.
 */
function _commerce_socolissimo_check_phone_number($phone_number, $country = 'FR') {
  $count = count_chars($phone_number, 1);
  foreach ($count as $instances) {
    if ($instances >= 8) {
      return 1;
    }
  }

  switch ($country) {
    case 'FR':
      // Validate french phone number.
      // Match : begin with +33 or 0 > ^(\+33|0)
      // 6 or 7 > [6-7]
      // eight numbers but not (12345678)   > (?!.*(?:12345678))
      // or not same   > ([0-9])(?!\1+$)[0-9]{7}.
      if (!preg_match('#^(\+33|0)[6-7](?!.*(?:12345678))([0-9])(?!\1+$)[0-9]{7}$#', $phone_number)) {
        return 0;
      }
      break;

    case 'BE':
      // Validate belgian phone number.
      // Match : begin with +324 > ^\+324
      // eight numbers but not (12345678) > (?!.*(?:12345678))
      // or not same > ([0-9])(?!\1+$)[0-9]{7}.
      if (!preg_match('#^\+324(?!.*(?:12345678))([0-9])(?!\1+$)[0-9]{7}$#', $phone_number)) {
        return 0;
      }
      break;

  }

  return TRUE;
}

/**
 * Validation callback: ensure zipcode is a parisian one.
 *
 * @param string $zip_code
 *   zip code from customer address.
 *
 * @return bool
 *   Returns true if valid, false otherwise.
 */
function _commerce_socolissimo_check_parisian_zip_code($zip_code) {
  $valid_zip_code = array(
    '75001',
    '75002',
    '75003',
    '75004',
    '75005',
    '75006',
    '75007',
    '75008',
    '75009',
    '75010',
    '75011',
    '75012',
    '75013',
    '75014',
    '75015',
    '75016',
    '75017',
    '75018',
    '75019',
    '75020',
    '75116',
  );

  return in_array($zip_code, $valid_zip_code);
}

/**
 * Check the passed zip code and returns the country code found.
 *
 * @param int|string $zip_code
 *   Zip code address.
 *
 * @return bool|array
 *   Returns the country code. False otherwise.
 */
function _commerce_socolissimo_check_zip_code($zip_code) {
  if (preg_match('/^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$/', $zip_code) === 1) {
    return "FR";
  }
  elseif (preg_match('/^[1-9]{1}[0-9]{3}$/', $zip_code) === 1) {
    return "BE";
  }

  return FALSE;
}

/**
 * Returns an initialized socolissimo_flexibility_rate object.
 *
 * @param string $service_name
 *   The uid of the owner of the order.
 * @param string $bundle
 *   Bundle name of commerce_socolissimo_rate entity type.
 *
 * @return mixed
 *   A socolissimo_flexibility_rate object with all default fields initialized.
 */
function commerce_socolissimo_rate_new($service_name, $bundle = 'flexibility_rate') {
  if (!array_key_exists($service_name, commerce_shipping_services('socolissimo_flexibility'))) {
    return array();
  }

  return entity_create('commerce_socolissimo_rate',
    array(
      'rate_id' => '',
      'name' => $service_name,
      'type' => $bundle,
      'min_weight' => '',
      'max_weight' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    )
  );
}

/**
 * Saves a socolissimo service rate.
 *
 * @param array $commerce_socolissimo_rate
 *   The full socolissimo flexibility rate object to save.
 *
 * @return int
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_socolissimo_rate_save($commerce_socolissimo_rate) {
  return entity_save('commerce_socolissimo_rate', $commerce_socolissimo_rate);
}

/**
 * Loads a socolissimo service rate by id.
 *
 * @param int|string $rate_id
 *   The primary identifier of a rate.
 *
 * @return object
 *   The fully loaded rate object.
 */
function commerce_socolissimo_rate_load($rate_id) {
  $rates = commerce_socolissimo_rate_load_multiple(array($rate_id));

  return $rates ? reset($rates) : FALSE;
}

/**
 * Loads multiple service rates.
 *
 * @param array $rate_ids
 *   An array of rate_id
 * @param array $conditions
 *   An array of conditions to filter loaded rates by on the
 *   {commerce_socolissimo_rate} table in the form 'field' => $value.
 * @param bool $reset
 *   Whether to reset the internal rate loading cache.
 */
function commerce_socolissimo_rate_load_multiple($rate_ids, $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_socolissimo_rate', $rate_ids, $conditions, $reset);
}

/**
 * Deletes a socolissimo service rate.
 *
 * @param int|string $rate_id
 *   The primary identifier of a rate.
 */
function commerce_socolissimo_rate_delete($rate_id) {
  return entity_delete('commerce_socolissimo_rate', $rate_id);
}

/**
 * Deletes multiple socolissimo service rates.
 *
 * @param array $rates_ids
 *   An array of rate_id.
 */
function commerce_socolissimo_rate_delete_multiple($rates_ids) {
  return entity_delete_multiple('commerce_socolissimo_rate', $rates_ids);
}

/**
 * Return a fully loaded commerce_socolissimo_rate based on a weight parameter.
 *
 * @param string $service_name
 *   The socolissimo shipping service name.
 * @param array $weight
 *   A weight array:
 *   - unit: the weight unit (kg, oz...).
 *   - weight: total weight.
 *
 * @return mixed
 *   A fully loaded commerce_socolissimo_rate. Empty array if an error is found.
 */
function commerce_socolissimo_get_rate_by_weight($service_name, $weight) {
  if (!isset($weight['weight']) || !array_key_exists($service_name, commerce_shipping_services('socolissimo_flexibility'))) {
    return array();
  }

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'commerce_socolissimo_rate')
    ->propertyCondition('name', $service_name, '=')
    ->fieldCondition('socolissimo_flex_min_weight', 'weight', $weight['weight'], '<')
    ->fieldCondition('socolissimo_flex_max_weight', 'weight', $weight['weight'], '>=')
    ->range(0, 1);

  $result = $query->execute();

  if (isset($result['commerce_socolissimo_rate'])) {
    $result = commerce_socolissimo_rate_load(key($result['commerce_socolissimo_rate']));
  }

  return $result;
}

/**
 * Title callback: Returns the title of a commerce_socolissimo_rate entity type.
 *
 * @param object $commerce_socolissimo_rate
 *   A fully loaded commerce_socolissimo_rate object.
 *
 * @return string
 *   The menu title
 */
function commerce_socolissimo_rate_title($commerce_socolissimo_rate) {
  return t('Rate @rate_id', array("@rate_id" => $commerce_socolissimo_rate->rate_id));
}

/**
 * Title callback.
 *
 * Returns "enable" or "disable" depending of the shipping service status.
 *
 * @param string $service_name
 *   The shipping service name
 *
 * @return string
 *   enable|disable
 */
function commerce_socolissimo_status_title($service_name) {
  // Trying to get status of passed shipping service.
  $shipping_service_status = commerce_socolissimo_service_status_load($service_name);

  if ($shipping_service_status) {
    $status = ($shipping_service_status['enabled'] == 0) ? t('enable') : t('disable');
  }
  else {
    $status = t('disable');
  }

  return $status;
}

/**
 * Wrapper callback: Display a socolissimo_flexibility_rate object.
 *
 * @param object $commerce_socolissimo_rate
 *   A fully loaded commerce_socolissimo_rate object.
 *
 * @return array
 *   Returns a renderable array to display a socosolissimo_flexibility_rate
 *   object.
 */
function commerce_socolissimo_view_rate_wrapper($commerce_socolissimo_rate) {
  return entity_view('commerce_socolissimo_rate', array($commerce_socolissimo_rate->rate_id => $commerce_socolissimo_rate), 'full');
}

/**
 * Returns an initialized colissimo flexibility service status array.
 *
 * @param string $name
 *   The machine-name of the shipping service.
 *
 * @return array
 *   An initialized colissimo flexibility service status array.
 */
function commerce_socolissimo_service_status_new($name) {
  return array(
    'name' => $name,
    'enabled' => 1,
    'data' => array(),
    'is_new' => TRUE,
  );
}

/**
 * Load a socolissimo flexibility service status.
 *
 * @param string $name
 *   The machine-name of the shipping service.
 *
 * @return mixed
 *   An assotiative array of shipping service status.
 */
function commerce_socolissimo_service_status_load($name) {
  return db_select('commerce_socolissimo_service_status', 'q')
    ->fields('q')
    ->condition('name', $name, '=')
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves a colissimo flexibility service status to the database.
 *
 * @param array $shipping_service
 *   The colissimo flexibility service status to save.
 *
 * @return int|bool
 *   The return value of the call to drupal_write_record() to save the flat rate
 *   service; either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating
 *   the type of query performed to save the flat rate service.
 */
function commerce_socolissimo_service_status_save($shipping_service) {
  $op = drupal_write_record('commerce_socolissimo_service_status', $shipping_service, empty($shipping_service['is_new']) ? 'name' : array());

  if (!empty($shipping_service['is_new']) && $op !== FALSE) {
    // Notify other modules that a new socolissimo flexibility service status
    // has been created.
    module_invoke_all('commerce_socolissimo_service_status_insert', $shipping_service);
  }
  elseif ($op !== FALSE) {
    // Notify other modules that an existing socolissimo flexibility service
    // status has been updated.
    module_invoke_all('commerce_socolissimo_service_status_update', $shipping_service);
  }

  return $op;
}

/**
 * Deletes a socolissimo flexibility service status.
 *
 * @param string $name
 *   The machine-name of the shipping service.
 */
function commerce_socolissimo_service_status_delete($name) {
  $shipping_service = commerce_shipping_service_load($name);

  db_delete('commerce_socolissimo_service_status')
    ->condition('name', $name)
    ->execute();

  // Notify other modules that this socolissimo flexibility service status has
  // been deleted.
  module_invoke_all('commerce_socolissimo_service_status_delete', $shipping_service);
}

/**
 * Helper function.
 *
 * Checks if a So Colissimo shipping service is available in belgium.
 *
 * @param string $service_name
 *   Shipping service machine name.
 *
 * @return bool
 *   True => service is belgian. False otherwise.
 */
function _commerce_socolissimo_is_belgian_service($service_name) {
  return in_array(
    $service_name, array(
      'socolissimo_home_delivery',
      'socolissimo_post_office',
      'socolissimo_local_store',
    )
  );
}

/**
 * Helper function to calculate the delivery delay.
 *
 * It includes the So Colissimo 2 days default delivery delay plus the mechant
 * order dispatching time.
 *
 * @return int
 *   Dispatching time in days.
 */
function _commerce_socolissimo_delivery_delay() {
  $socolissimo_settings = variable_get('commerce_socolissimo_settings', array());
  $order_dispatching_time = isset($socolissimo_settings['order_dispatching_time']) ? (int) $socolissimo_settings['order_dispatching_time'] : 0;

  return 2 + $order_dispatching_time;
}

/**
 * Helper function to parse CSV from a string or a file.
 *
 * @param array $lines
 *   Data lines to parse and validate
 *
 * @return array
 *   The data array to be saved or the error array.
 */
function _commerce_socolissimo_import_parse_data($lines) {
  $data = array();
  $shipping_services = commerce_shipping_services('socolissimo_flexibility');

  foreach ($lines as $delta => $line) {
    // Sanitize the line value.
    $line = filter_var($line, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_LOW);

    // If line is empty, put the cursor on the next iteration.
    if (empty($line)) {
      continue;
    }

    // Stores found values per line.
    $data[$delta] = str_getcsv($line, ',', '"', '\\');

    $shipping_service_name = trim($data[$delta][0]);
    $number_of_values = count($data[$delta]);
    if (array_key_exists($shipping_service_name, $shipping_services)) {
      if ($number_of_values < 4 || $number_of_values > 5) {
        $error = array(
          'delta' => $delta,
          'message' => t('Incorrect number of values : %number_of_values', array('%number_of_values' => $number_of_values)),
        );
        break;
      }
      if (_commerce_socolissimo_is_belgian_service($shipping_service_name)) {
        if ($number_of_values < 5) {
          $error = array(
            'delta' => $delta,
            'message' => t('Belgium rate is empty for this shipping service %shipping_service_name', array('%shipping_service_name' => $shipping_service_name)),
          );
          break;
        }
      }
      else {
        if ($number_of_values > 4) {
          $error = array(
            'delta' => $delta,
            'message' => t('Belgium rate is forbidden for this shipping service %shipping_service_name', array('%shipping_service_name' => $shipping_service_name)),
          );
          break;
        }
      }
    }
    else {
      $error = array(
        'delta' => $delta,
        'message' => t('Unknow socolissimo shipping service %shipping_service_name', array('%shipping_service_name' => $shipping_service_name)),
      );
      break;
    }
  }

  return isset($error) ? $error : $data;
}

/**
 * Helper function to import rates from CSV.
 *
 * @param array $lines
 *   Data lines to write.
 *
 * @return bool
 *   Returns true if no errors have been raised, false otherwise.
 */
function _commerce_socolissimo_import_save_data($lines) {
  $default_currency = commerce_currency_load();
  $code = $default_currency['code'];

  foreach ($lines as $line) {
    try {
      $commerce_socolissimo_rate = commerce_socolissimo_rate_new(trim($line[0]));
      $commerce_socolissimo_rate->changed = $commerce_socolissimo_rate->created = REQUEST_TIME;
      $commerce_socolissimo_rate->socolissimo_flex_min_weight = array(
        'und' => array(
          array(
            'weight' => (float) trim($line[1]),
            'unit' => 'kg',
          ),
        ),
      );
      $commerce_socolissimo_rate->socolissimo_flex_max_weight = array(
        'und' => array(
          array(
            'weight' => (float) trim($line[2]),
            'unit' => 'kg',
          ),
        ),
      );
      $commerce_socolissimo_rate->socolissimo_flex_rate_fr = array(
        'und' => array(
          array(
            'amount' => (int) (trim($line[3]) * 100),
            'currency_code' => $code,
          ),
        ),
      );
      if (_commerce_socolissimo_is_belgian_service($line[0])) {
        $commerce_socolissimo_rate->socolissimo_flex_rate_be = array(
          'und' => array(
            array(
              'amount' => (int) (trim($line[4]) * 100),
              'currency_code' => $code,
            ),
          ),
        );
      }
      commerce_socolissimo_rate_save($commerce_socolissimo_rate);
    }
    catch (ErrorException $e) {
      drupal_set_message($e->getMessage(), 'error');

      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Find So Colissimo shipping line item on the order.
 *
 * @param object $order
 *   An order object
 *
 * @return mixed
 *   The So Colissimo shipping line item object or FALSE.
 */
function _commerce_socolissimo_get_shipping_line_item($order) {
  $wrapper_order = entity_metadata_wrapper('commerce_order', $order);
  foreach ($wrapper_order->commerce_line_items as $line_item_wrapper) {
    if ($line_item_wrapper->type->value() == 'shipping') {
      $line_item = $line_item_wrapper->value();
      if (!empty($line_item->data['service_details']['commerce_socolissimo_point'])) {
        return $line_item;
      }
    }
  }

  return FALSE;
}

/**
 * Converts data from UTF-8.
 *
 * Requires the iconv, GNU recode or mbstring PHP extension.
 *
 * @param string $data
 *   The data to be converted.
 * @param string $encoding
 *   The encoding that the data is converted into.
 *
 * @return mixed
 *   Converted data or FALSE.
 */
function _commerce_socolissimo_convert_from_utf8($data, $encoding) {
  if (function_exists('iconv')) {
    $out = @iconv('utf-8', $encoding, $data);
  }
  elseif (function_exists('mb_convert_encoding')) {
    $out = @mb_convert_encoding($data, $encoding, 'utf-8');
  }
  elseif (function_exists('recode_string')) {
    $out = @recode_string('utf-8..' . $encoding, $data);
  }
  else {
    watchdog('php', 'Unsupported encoding %s. Please install iconv, GNU recode or mbstring for PHP.', array('%s' => $encoding), WATCHDOG_ERROR);
    return FALSE;
  }

  return $out;
}
