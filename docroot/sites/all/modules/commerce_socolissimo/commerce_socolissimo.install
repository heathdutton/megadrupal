<?php

/**
 * @file
 * Defines the database schema for SoColissimo Flexibility rates.
 */

/**
 * Implements hook_requirements().
 */
function commerce_socolissimo_requirements($phase) {
  $t = get_t();

  $requirements['commerce_socolissimo_soap'] = array(
    'title' => $t('So Colissimo Flexibility: PHP Soap Client'),
  );

  if (class_exists('SoapClient')) {
    $requirements['commerce_socolissimo_soap']['value'] = $t('Installed');
    $requirements['commerce_socolissimo_soap']['severity'] = REQUIREMENT_OK;
  }
  else {
    $requirements['commerce_socolissimo_soap']['value'] = $t('Not Installed');
    $requirements['commerce_socolissimo_soap']['description'] = $t('PHP soap extension is not installed. Please consult the !manual.', array('!manual' => l($t('PHP manual'), "http://php.net/manual/book.soap.php")));
    $requirements['commerce_socolissimo_soap']['severity'] = REQUIREMENT_ERROR;
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function commerce_socolissimo_schema() {
  $schema = array();

  $schema['commerce_socolissimo_rate'] = array(
    'description' => 'Stores information about SoColissimo shipping services rates.',
    'fields' => array(
      'rate_id' => array(
        'description' => 'Primary identifier for a rate.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine-name of the shipping service.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The type of this rate.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the socolissimo flexibility rate was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the socolissimo flexibility rate was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('rate_id'),
    'indexes' => array(
      'name' => array('name'),
    ),
  );

  // Add a table to track the service status for each socolissimo service.
  $schema['commerce_socolissimo_service_status'] = array(
    'description' => 'Stores status information for a specific SoColissimo shipping service.',
    'fields' => array(
      'status_id' => array(
        'description' => 'Primary identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine-name of the shipping service.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'enabled' => array(
        'description' => 'The status of the shipping service.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('status_id'),
    'indexes' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}


/**
 * Implements hook_install().
 *
 * @see commerce_socolissimo_modules_enabled()
 */
function commerce_socolissimo_install() {
  $field = array(
    'field_name' => 'socolissimo_flex_rate_fr',
    'type' => 'commerce_price',
    'cardinality' => 1,
    'entity_types' => array('commerce_socolissimo_rate'),
    'translatable' => FALSE,
    'locked' => TRUE,
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'socolissimo_flex_rate_be',
    'type' => 'commerce_price',
    'cardinality' => 1,
    'entity_types' => array('commerce_socolissimo_rate'),
    'translatable' => FALSE,
    'locked' => TRUE,
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'socolissimo_flex_min_weight',
    'type' => 'physical_weight',
    'cardinality' => 1,
    'entity_types' => array('commerce_socolissimo_rate'),
    'translatable' => FALSE,
    'locked' => TRUE,
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'socolissimo_flex_max_weight',
    'type' => 'physical_weight',
    'cardinality' => 1,
    'entity_types' => array('commerce_socolissimo_rate'),
    'translatable' => FALSE,
    'locked' => TRUE,
  );
  field_create_field($field);

  $t = get_t();
  drupal_set_message($t('Thanks for enabling the So Colissimo Flexibility module. Enter your So Colissimo credentials on !page.', array('!page' => l($t('this page'), 'admin/commerce/config/socolissimo-flexibility'))));
}

/**
 * Implements hook_uninstall().
 */
function commerce_socolissimo_uninstall() {
  commerce_delete_instances('commerce_socolissimo_rate', 'flexibility_rate');
  commerce_delete_field('socolissimo_flex_rate_fr');
  commerce_delete_field('socolissimo_flex_rate_be');
  commerce_delete_field('socolissimo_flex_min_weight');
  commerce_delete_field('socolissimo_flex_max_weight');
  variable_del('commerce_socolissimo_api');
  variable_del('commerce_socolissimo_settings');
  variable_del('commerce_socolissimo_map');
}

/**
 * Implements hook_modules_enabled().
 */
function commerce_socolissimo_modules_enabled($modules) {
  $entity_type = 'commerce_socolissimo_rate';
  $bundle = 'flexibility_rate';
  $t = get_t();

  field_info_cache_clear();

  if (!field_info_instance($entity_type, 'socolissimo_flex_min_weight', $bundle)) {
    $instance = array(
      'field_name' => 'socolissimo_flex_min_weight',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $t('Minimun weight'),
      'required' => FALSE,
      'default_value' => array(array('weight' => 0)),
      'settings' => array(),
      'widget' => array(
        'type' => 'physical_weight_textfield',
        'weight' => 1,
        'settings' => array(
          'default_unit' => 'kg',
          'unit_select_list' => FALSE,
        ),
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

  if (!field_info_instance($entity_type, 'socolissimo_flex_max_weight', $bundle)) {
    $instance = array(
      'field_name' => 'socolissimo_flex_max_weight',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $t('Maximum weight'),
      'required' => TRUE,
      'default_value' => array(array('weight' => 0)),
      'settings' => array(),
      'widget' => array(
        'type' => 'physical_weight_textfield',
        'weight' => 2,
        'settings' => array(
          'default_unit' => 'kg',
          'unit_select_list' => FALSE,
        ),
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

  if (!field_info_instance($entity_type, 'socolissimo_flex_rate_fr', $bundle)) {
    $instance = array(
      'field_name' => 'socolissimo_flex_rate_fr',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $t('French rate amount'),
      'required' => TRUE,
      'settings' => array(),
      'widget' => array(
        'type' => 'commerce_price_simple',
        'weight' => 10,
        'settings' => array(
          'currency_code' => 'default',
        ),
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

  if (!field_info_instance($entity_type, 'socolissimo_flex_rate_be', $bundle)) {
    $instance = array(
      'field_name' => 'socolissimo_flex_rate_be',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $t('Belgium rate amount'),
      'required' => FALSE,
      'settings' => array(),
      'widget' => array(
        'type' => 'commerce_price_simple',
        'weight' => 11,
        'settings' => array(
          'currency_code' => 'default',
        ),
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

  // Adds the phone formatter to the shipping profile, SoColissimo requires the
  // phone number for its shipping services.
  if (in_array('addressfield_phone', $modules)) {
    $instance = field_info_instance('commerce_customer_profile', 'commerce_customer_address', 'shipping');
    $instance['widget']['settings']['format_handlers']['phone'] = 'phone';
    field_update_instance($instance);
  }
}
