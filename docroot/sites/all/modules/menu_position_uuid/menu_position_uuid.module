<?php

/**
 * @file
 * Integrate UUID into menu position
 */

// Add integration with entity_menu_link

/**
 * Implements hook_menu_link_insert().
 */
function menu_position_uuid_menu_link_insert($menu_link) {
  if ($menu_link['module'] == 'menu_position') {
    if (empty($menu_link['uuid'])) {
      $menu_link['uuid'] = uuid_generate();
    }
    $menu_link['vid'] = entity_menu_links_insert_revision($menu_link);
    if (!empty($menu_link['plid']) && $parent_link = menu_link_load($menu_link['plid'])) {
      entity_menu_links_menu_link_update($parent_link);
    }

    db_update('menu_links')
      ->fields(array('uuid' => $menu_link['uuid'], 'vid' => $menu_link['vid']))
      ->condition('mlid', $menu_link['mlid'])
      ->execute();

    $entity = (object) $menu_link;
    module_invoke_all('entity_insert', $entity, 'menu_link');
  }
}

/**
 * Implements hook_menu_link_update().
 */
function menu_position_uuid_menu_link_update($menu_link) {
  if ($menu_link['module'] == 'menu_position') {
    $original = isset($menu_link['original_item']) ? $menu_link['original_item'] : (array) entity_load_unchanged('menu_link', $menu_link['mlid']);
    $menu_link['uuid'] = empty($original['uuid']) ? uuid_generate() : $original['uuid'];
    $menu_link['vid'] = entity_menu_links_insert_revision($menu_link);
    if (!empty($menu_link['plid']) && $parent_link = menu_link_load($menu_link['plid'])) {
      entity_menu_links_menu_link_update($parent_link);
    }

    db_update('menu_links')
      ->fields(array('uuid' => $menu_link['uuid'], 'vid' => $menu_link['vid']))
      ->condition('mlid', $menu_link['mlid'])
      ->execute();

    $entity = (object) $menu_link;
    module_invoke_all('entity_update', $entity, 'menu_link');
  }
}


/**
 * Allow modules to modify an entity before it gets deployed.
 *
 * @param $menu_link
 *   The entity being deployed.
 *
 * @param $entity_type
 *   The entity type; for example 'node' or 'user'.
 */
function menu_position_uuid_deploy_entity_alter(&$menu_link, $entity_type) {
  if ($entity_type === 'menu_link' && $menu_link->module == 'menu_position') {
    // Load the menu position rules for this entity
    $rules = menu_position_uuid_load_rules($menu_link->mlid);
    foreach ($rules as &$rule) {
      $rule->conditions = unserialize($rule->conditions);

      foreach ($rule->conditions as $plugin => &$condition) {
        // Invoke hook_menu_position_uuid_$PLUGIN
        $hook = "menu_position_uuid_outbound_$plugin";
        foreach (module_implements($hook) as $module) {
          $callback = "{$module}_{$hook}";
          $callback($condition, $rule, $menu_link);
        }
      }
    }

    $menu_link->menu_position_rules = $rules;
  }
}

/**
 * Implements hook_menu_position_uuid_outbound_user_role
 */
function menu_position_uuid_menu_position_uuid_outbound_user_role(&$condition, $rule, $menu_link) {
  foreach ($condition['user_role'] as $key => $rid) {
    $condition['user_role'][$key] = user_role_load($rid)->name;
  }
}

/**
 * Implements hook_menu_position_uuid_outbound_taxonomy
 */
function menu_position_uuid_menu_position_uuid_outbound_taxonomy(&$condition, $rule, $menu_link) {
  $condition['vid'] = taxonomy_vocabulary_load($condition['vid'])->machine_name;
  $uuids = entity_get_uuid_by_id('taxonomy_term', $condition['tid']);
  foreach ($condition['tid'] as $key => $tid) {
    $condition['tid'][$key] = $uuids[$tid];
  }
}

/**
 * Implement hook_entity_insert()
 *
 * Add the menu positions rules
 */
function menu_position_uuid_entity_insert($menu_link, $type) {
  if ($type == 'menu_link' && $menu_link->module == 'menu_position') {
    menu_position_uuid_uuid_check();

    // Add the rules this property is only added via deploy
    if (!empty($menu_link->menu_position_rules)) {
      menu_position_uuid_handle_inbound($menu_link);
    }
  }
}

/**
 * Check for UUID's on rules
 */
function menu_position_uuid_uuid_check() {
  menu_position_uuid_uuid_sync();
}

/**
 * Implements hook_entity_update().
 */
function menu_position_uuid_entity_update($menu_link, $type) {
  if ($type == 'menu_link' && $menu_link->module == 'menu_position') {
    menu_position_uuid_uuid_check();

    // Add the rules this property is only added via deploy
    if (!empty($menu_link->menu_position_rules)) {
      menu_position_uuid_handle_inbound($menu_link);
    }
  }
}

/**
 * Handle inbound requests from deploy/services
 */
function menu_position_uuid_handle_inbound($menu_link) {
  $uuids = array();
  foreach ($menu_link->menu_position_rules as $rule) {
    $fields = array(
      'admin_title' => $rule['admin_title'],
      'conditions'  => $rule['conditions'],
      'menu_name'   => $rule['menu_name'],
      'plid'        => $menu_link->plid,
      'mlid'        => $menu_link->mlid,
      'weight'      => $rule['weight'],
      'uuid'        => $rule['uuid']
    );

    // Fix the plugin associations
    foreach ($fields['conditions'] as $plugin => &$condition) {
      // Invoke hook_menu_position_uuid_$PLUGIN
      $hook = "menu_position_uuid_inbound_$plugin";
      foreach (module_implements($hook) as $module) {
        $callback = "{$module}_{$hook}";
        $callback($condition, $rule, $menu_link);
      }
      //$fields['conditions'][$plugin] = $condition;
    }

    $fields['conditions'] = serialize($fields['conditions']);

    // Store these so we remove ones that don't exist later
    $uuids[] = $fields['uuid'];

    db_merge('menu_position_rules')
      ->key(array('uuid' => $fields['uuid']))
      ->fields($fields)
      ->execute();
  }

  db_delete('menu_position_rules')
    ->condition('uuid', $uuids, 'NOT IN')
    ->execute();
}


/**
 * Implements hook_menu_position_uuid_inbound_$PLUGIN
 */
function menu_position_uuid_menu_position_uuid_inbound_user_role(&$condition, $rule, $menu_link) {
  foreach ($condition['user_role'] as $key => $role) {
    $condition['user_role'][$key] = user_role_load_by_name($role)->rid;
  }
}

/**
 * Implements hook_menu_position_uuid_inbound_$PLUGIN
 */
function menu_position_uuid_menu_position_uuid_inbound_taxonomy(&$condition, $rule, $menu_link) {
  $condition['vid'] = taxonomy_vocabulary_machine_name_load($condition['vid'])->vid;
  $tids = entity_get_id_by_uuid('taxonomy_term', $condition['tid']);
  foreach ($condition['tid'] as $key => $uuid) {
    $condition['tid'][$key] = $tids[$uuid];
  }
}

/**
 * Load rules
 */
function menu_position_uuid_load_rules($mlid) {
  return db_query('SELECT uuid, admin_title, conditions, menu_name, weight
    FROM {menu_position_rules} WHERE mlid = :mlid ORDER BY weight', array(':mlid' => $mlid))
    ->fetchAll();
}

/**
 * Implements hook_uuid_sync
 */
function menu_position_uuid_uuid_sync() {
  _uuid_sync_table('menu_position_rules', 'mlid', 'uuid');
}