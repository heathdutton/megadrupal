<?php 

/**
 * @file
 * MonoDialog primary module file.
 */

/**
 * Opens a dialog with the HTML returned by $page_id function.
 * It can be called on hook_menu 'page callback' with 'page arguments'
 * as arguments.
 *
 * @param string $page_id
 *   The function signature that will return the html shown by the dialog
 * @param array $options
 *   Options of jQuery Dialog plugin
 * @param ...
 *   Extra arguments to be passed to drupal_get_form
 *
 * @return array
 *   Ajax Framework Commands generated by _monodialog_get_dialog
 */
function monodialog_get_dialog_page($page_id, $options = array()) {

  // Gets function args.
  $args = func_get_args();
  // Removes $form_id and options from the arguments.
  $args = array_slice($args, 2);
  // Initializes page html.
  $page = '';

  // Checks if callback function is set and exists.
  if (!empty($page_id) && function_exists($page_id)) {
    // Sets the html of the wrapper with the callback function's output.
    $page = call_user_func_array($page_id, $args);
  }
  else {
    // If the functions doesn't exists, set an error message.
    drupal_set_message(t("Function passed to MonoDialog doesn't exists."), 'error');
  }

  return _monodialog_get_dialog($page, $options);

}

/**
 * Opens a form with the FormAPI array returned by $form_id function.
 * It is intended to act as a Dialog replacement for drupal_get_form function,
 * and its usage is analogous to that core function.
 * It can be called on hook_menu 'page callback' with
 * 'page arguments' as arguments.
 *
 * @param string $form_id
 *   The form_id that will return the array shown by the dialog
 * @param array $options
 *   Options of jQuery Dialog plugin
 * @param ...
 *   Extra arguments to be passed to drupal_get_form
 *
 * @return array
 *   Ajax Framework Commands generated by _monodialog_get_dialog
 */
function monodialog_get_dialog_form($form_id, $options = array()) {

  // Gets function args.
  $args = func_get_args();
  // Removes $options from arguments.
  $args = array_slice($args, 2);
  array_unshift($args, $form_id);
  // Gets array form.
  $form_array = call_user_func_array('drupal_get_form', $args);

  // Gets commands array.
  return _monodialog_get_dialog(drupal_render($form_array), $options);
}

/**
 * Replaces the form content with its response after a success submit.
 * It can be used as #ajax['callback'] FormAPI argument directly,
 * or wrapped by other function for more complex behaviour on response:
 * It can replace any element specified by $callback_wrapper CSS selector
 * with the string returned by $callback_func, so it could be use to
 * update, for example, the parent page with new submited values on form submit.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form current state array
 * @param string $callback_wrapper
 *   CSS selector to be replaced with the response from $callback_func
 * @param string $callback_func
 *   Function name that must return HTML code
 * @param ...
 *   Extra arguments to be passed to drupal_get_form
 *
 * @return array
 *   Ajax Framework Commands generated by _monodialog_get_dialog
 */
function monodialog_get_dialog_form_callback($form, &$form_state, $callback_wrapper = '', $callback_func = '') {

  // Returns the form again if there is any error.
  if (form_get_errors()) {
    return $form;
  }

  // Adds Drupal jQuery Form library.
  drupal_add_library('system', 'jquery.form');

  // Gets function args.
  $args = func_get_args();
  // Remove regular args left only those added as extra args.
  $args = array_slice($args, 4);

  // Initializes commands array.
  $commands = array();
  // Adds a replace command to show status messages with the form response.
  $commands[] = ajax_command_replace('#monodialog-dialog-inner', '<div id="monodialog-dialog-inner">' . theme('status_messages') . '</div>');

  // Checks if callback function is set and exists.
  if (!empty($callback_func) && function_exists($callback_func)) {
    // Sets the html of the wrapper with the callback function's output.
    $commands[] = ajax_command_html($callback_wrapper, render(call_user_func_array($callback_func, $args)));
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Generate all the Drupal Ajax Framework commands needed to
 * display an jQuery Dialog.
 * This function is for internal use only, it should not be called directly.
 *
 * @param string $html
 *   HTML code to be displayed on the dialog
 * @param array $options
 *   jQuery dialog plugin customized options
 */
function _monodialog_get_dialog($html = '', $options = array()) {

  // Adds Drupal jQuery Dialog library.
  drupal_add_library('system', 'ui.dialog');

  // Gets function args.
  $args = func_get_args();
  // Removes $form_id and options from the arguments.
  $args = array_slice($args, 2);

  // Gets jQuery dialog options.
  $dialog_options = _monodialog_get_dialog_options($options);

  // Adds a container for the dialog content if it hasn't been added before.
  $commands[] = ajax_command_append('body:not(.monodialog-processed)', '<div id="monodialog-dialog"><div id="monodialog-dialog-inner">' . theme('status_messages') . $html . '</div></div>');
  // Adds status messages and the html argument.
  $commands[] = ajax_command_replace('#monodialog-dialog-inner', '<div id="monodialog-dialog-inner">' . theme('status_messages') . $html . '</div>');
  // Invokes jQuery dialog command.
  $commands[] = ajax_command_invoke('#monodialog-dialog', 'dialog', $dialog_options);
  // Adds the changed flag to dialog div.
  $commands[] = ajax_command_changed('#monodialog-dialog');
  // Adds processed class so the dialog container will not be added again.
  $commands[] = ajax_command_invoke('body:not(.monodialog-processed)', 'addClass', array('monodialog-processed'));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Returns default options for jQuery Dialog plugin.
 * This function is for internal use only, it should not be called directly.
 *
 * @param array $options
 *   jQuery dialog plugin customized options
 *
 * @return array
 *   jQuery dialog options
 */
function _monodialog_get_dialog_options($options = array()) {

  // Initializes dialog options.
  $dialog_options = array();

  // Sets default options.
  $default_options = array(
    'autoOpen' => TRUE,
    'modal' => TRUE,
    'hide' => 'slide',
    'dragabble' => TRUE,
    'resizable' => TRUE,
    'width' => 600,
    'title' => t('MonoDialog'),
  );

  // Merge argument passed options with default ones.
  $dialog_options_merged = array_merge($default_options, $options);

  // Invoke commands needs an array for each option.
  foreach ($dialog_options_merged as $key => $value) {
    $dialog_options[] = array($key => $value);
  }

  return $dialog_options;
}
