<?php 

/**
 * @file
 * MonoDialog Example primary module file.
 */

/**
 * Implements hook_permission().
 */
function monodialog_example_permission() {
  return array(
    'monodialog example view' => array(
      'title' => t('Views example pages'),
      'description' => t('User with this access will see the MonoDialog Example pages.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function monodialog_example_menu() {

  $items = array();

  // Module's home page.
  $items['monodialog_example'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'MonoDialog Examples',
    'description' => 'Shows some links to MonoDialog examples.',
    'page callback' => 'monodialog_example_index_page',
    'access callback' => 'user_access',
    'access arguments' => array('monodialog example view'),
  );

  // No JS menu path for example dialog page.
  $items['monodialog_example/page'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'MonoDialog Page Example',
    'description' => 'Shows a page with some html code in it.',
    'page callback' => 'monodialog_example_page',
    'access callback' => 'user_access',
    'access arguments' => array('monodialog example view'),
  );

  // JS menu path for example dialog page.
  $items['monodialog_example/page/ajax'] = array(
    // Navigation link not needed for example's purpose.
    'type' => MENU_CALLBACK,
    'title' => 'MonoDialog Page Example',
    'description' => 'Shows a dialog window with some html code in it.',
    // Calls the MonoDialog page function.
    'page callback' => 'monodialog_get_dialog_page',
    // Passes the function that will generate the HTML code
    // to be displayed on the dialog
    // as firts parameter, jQuery dialog options array as second one
    // and any argument that form function needed as extra params.
    'page arguments' => array('monodialog_example_page', array('title' => t('MonoDialog Page Example'))),
    // Only users with the propper rights should see the page.
    'access callback' => 'user_access',
    'access arguments' => array('monodialog example view'),
    // Lets drupal executes our generateds Ajax Framework commands.
    'delivery callback' => 'ajax_deliver',
  );

  // No JS menu path for example dialog form.
  $items['monodialog_example/form'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'MonoDialog Form Example',
    'description' => 'Shows a form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monodialog_example_form'),
    'access callback' => 'user_access',
    'access arguments' => array('monodialog example view'),
  );

  // JS menu path for example dialog form.
  // It is similar to example dialog page but with
  // monodialog_get_dialog_form page callback.
  $items['monodialog_example/form/ajax'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'MonoDialog Form Example',
    'description' => 'Shows a dialog window with a form in it.',
    // Calls the MonoDialog form function.
    'page callback' => 'monodialog_get_dialog_form',
    // Passes the function that will generate the form
    // array to be displayed on the dialog
    // as firts parameter, jQuery dialog options array as second one
    // and any argument that form function needed as extra params.
    'page arguments' => array('monodialog_example_form', array('title' => t('MonoDialog Form Example'))),
    // Only users with the propper rights should see the page.
    'access callback' => 'user_access',
    'access arguments' => array('monodialog example view'),
    // Lets drupal executes our generateds Ajax Framework commands.
    'delivery callback' => 'ajax_deliver',
  );

  // No JS menu path for example dialog form with update content.
  $items['monodialog_example/form_update_content'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'MonoDialog Form Update Content Example',
    'description' => 'Shows a form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monodialog_example_update_content_form'),
    'access callback' => 'user_access',
    'access arguments' => array('monodialog example view'),
  );

  // JS menu path for example dialog form with update content.
  $items['monodialog_example/form_update_content/ajax'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'MonoDialog Form Update Content Example',
    'description' => 'Shows a dialog window with a form in it and changes the parent page with a callback function after submit.',
    'page callback' => 'monodialog_get_dialog_form',
    'page arguments' => array('monodialog_example_update_content_form', array('title' => t('MonoDialog Form Update Content Example'))),
    'access callback' => 'user_access',
    'access arguments' => array('monodialog example view'),
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Shows the module's home page
 *
 * @return string
 *   HTML code of module home page
 */
function monodialog_example_index_page() {

  // Adds Drupal Ajax library, needed if you want to use it.
  drupal_add_library('system', 'drupal.ajax');

  // Adds a container for further uses as in Update Content Form.
  $output = '<div id="monodialog-example-response-container"></div>';

  // Adds link to each example dialod with some Drupal magic on it.
  // The key here are the /nojs param and the attribute "class => use-ajax",
  // because Drupal will replace /nojs with /ajax on
  // any link with use-ajax class.
  // If JavaScript is not enabled, it will loads
  // the page/form with an http request.
  $output .= l(t('View Dialog Page'), 'monodialog_example/page/nojs', array('attributes' => array('class' => array('button', 'use-ajax'))));
  $output .= l(t('View Dialog Form'), 'monodialog_example/form/nojs', array('attributes' => array('class' => array('button', 'use-ajax'))));
  $output .= l(t('View Dialog Update Content Form'), 'monodialog_example/form_update_content/nojs',
    array(
      'attributes' => array(
        'class' => array(
          'button',
          'use-ajax',
        ),
      ),
    )
  );

  return $output;
}

/**
 * Shows a simple page
 *
 * @return string
 *   HTML output code
 */
function monodialog_example_page() {

  // Add some html to output.
  $output = '<h1>' . t('This is a page example.') . '</h1>';

  return $output;
}

/**
 * Constructs the form array
 *
 * @return array
 *   Form array
 */
function monodialog_example_form() {

  $form = array();

  // Adds a wrapper for callback function.
  $form['#prefix'] = '<div id="monodialog-example-form-wrapper">';
  // Adds some html for final users.
  $form['#prefix'] .= '<h2>' . t('This is a form example.') . '</h2>';

  // Adds radio buttons to choose the validation response.
  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Select validation result'),
    '#options' => array(
      'success' => t('Success'),
      'error' => t('Error'),
    ),
    '#default_value' => 'success',
  );

  // Submits the form via Ajax and replace the wrapper
  // container with the callback response.
  // It uses default MonoDialog callback function.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#ajax' => array(
      'callback' => 'monodialog_get_dialog_form_callback',
      'wrapper' => 'monodialog-example-form-wrapper',
      'effect' => 'fade',
      'name' => 'submit',
    ),
  );

  // Closes wrapper div.
  $form['#suffix'] = '</div>';

  return $form;
}

/**
 * Validates user submitted form
 */
function monodialog_example_form_validate($form, &$form_state) {

  // Adds a tricky validation rule based on user choose.
  if (!empty($form_state['values']['mode']) && $form_state['values']['mode'] == 'error') {
    form_set_error('mode', t('You has selected to show this error.'));
  }
}

/**
 * Submits user form
 */
function monodialog_example_form_submit($form, &$form_state) {

  // If there are some errors, returns the form with them.
  if (form_get_errors()) {
    return $form;
  }

  /* Otherwise, adds a success message to
   * status for it uses on callback function.
   */
  drupal_set_message(t('Form has been submitted successfully'));

  return $form;
}

/**
 * Constructs the form array with the ability to update
 * parent page after a success response.
 *
 * @return array
 *   Form array
 */
function monodialog_example_update_content_form() {

  $form = array();

  // Adds a wrapper for callback function.
  $form['#prefix'] = '<div id="monodialog-example-form-wrapper">';
  // Adds some html for final users.
  $form['#prefix'] .= '<h2>' . t('This is a form example with update content after success.') . '</h2>';

  // Shows some kind of pet to choose.
  $form['pet'] = array(
    '#type' => 'radios',
    '#title' => t('Select if you want to adopt a rabbit or a cat.'),
    '#options' => array(
      'rabbit' => t('Rabbit'),
      'cat' => t('Cat'),
    ),
    '#default_value' => 'rabbit',
  );

  // Submits the form via Ajax and replace the wrapper
  // container with the callback response.
  // It uses a custom callback function to update parent page
  // on success response.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#ajax' => array(
      'callback' => 'monodialog_example_update_content_form_callback',
      'wrapper' => 'monodialog-example-form-wrapper',
      'effect' => 'fade',
      'name' => 'submit',
    ),
  );

  $form['#suffix'] = '</div>';

  return $form;
}

/**
 * Callback function that returns a call to monodialog_get_dialog_form_callback
 * with extra arguments.
 *
 * @param array $form
 *   FormAPI array
 * @param array $form_state
 *   Form state after form submit
 *
 * @return array
 *   Drupal Ajax Framework commands with callback result
 */
function monodialog_example_update_content_form_callback($form, &$form_state) {

  // Adds a success message to status for it uses on callback function.
  drupal_set_message(t('Form has been submitted successfully'));

  // Returns the default MonoDialog Callback with non default arguments.
  return monodialog_get_dialog_form_callback($form, $form_state,
    // Adds css selector for parent pages wrapper.
    '#monodialog-example-response-container',
    // Adds output generator function.
    'monodialog_example_update_content_add_pet',
    // Adds all the arguments needed by output generator
    // function as extra arguments.
    $form_state['values']['pet']);
}

/**
 * Generates some HTML code that will be shown to user after a success response
 *
 * @param string $pet
 *   Pet string to be added
 *
 * @return string
 *   HTML code
 */
function monodialog_example_update_content_add_pet($pet) {
  // Shows a tiny message to user with the new pet.
  return '<h2>' . t('You have adopted a little @pet', array('@pet' => $pet)) . '</h2>';
}
