<?php

/**
 * @file
 * picture_password.module
 *
 * Drupal interface for the Picture Passwords authentication service from Kaje.
 */

module_load_include('inc', 'picture_password', 'picture_password.kaje');

define('PICTURE_PASSWORD_LOGIN_BUTTON_LABEL', t('Log in with Kaje'));

define('PICTURE_PASSWORD_RESET_KAJE_ACCOUNT', 0x01);
define('PICTURE_PASSWORD_WANTS_KAJE_ACCOUNT', 0x02);

define('PICTURE_PASSWORD_CREATE_KAJE_ACCOUNT', 101);
define('PICTURE_PASSWORD_LOCK_KAJE_ACCOUNT', 102);
define('PICTURE_PASSWORD_UNLOCK_KAJE_ACCOUNT', 103);
define('PICTURE_PASSWORD_SUSPEND_KAJE_ACCOUNT', 104);
define('PICTURE_PASSWORD_UNSUSPEND_KAJE_ACCOUNT', 105);
define('PICTURE_PASSWORD_DELETE_KAJE_ACCOUNT', 106);

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter the login form on the /user page.
 */
function picture_password_form_user_login_alter(&$form, &$form_state) {
  picture_password_form_login($form, $form_state);
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter the login form on the user login BLOCK.
 */
function picture_password_form_user_login_block_alter(&$form, &$form_state) {
  picture_password_form_login($form, $form_state);
}

/**
 * Implements hook_init().
 */
function picture_password_init() {
  if (!user_is_logged_in() && ($kaje_uid = picture_password_auth_token_confirmed())) {
    $form_state['uid'] = picture_password_get_drupal_uid($kaje_uid);
    // This is for picture_password_user_login().
    $form_state['kaje_login'] = TRUE;
    user_login_submit($form = array(), $form_state);
  }
}

/**
 * Alter the login form.
 *
 * @param array $form
 *   The login form as received from core.
 * @param array $form_state
 *   The form state.
 */
function picture_password_form_login(&$form, &$form_state) {
  unset($form_state['uid']);
  picture_password_add_kaje_login_button($form);
}

/**
 * Implements hook_user_login().
 *
 * Called at the end of user_login_finalize(), when session has been opened.
 */
function picture_password_user_login(&$form_state, $account = NULL) {
  if (!empty($form_state['kaje_login'])) {
    // Normally Drupal redirects to the page containing the login form we
    // submitted. However Kaje may be configured to supply its auth_token via
    // another page, i.e. the home page, which is we'll end up.
    // If not redirected otherwise user_login_submit() sends us to '/user'.
    // drupal_goto('user');
  }
}

/**
 * Check whether the URL contains a valid authenticaton token from Kaje.
 *
 * @return mixed
 *   Kaje account id string, or FALSE
 */
function picture_password_auth_token_confirmed() {
  $result = &drupal_static(__FUNCTION__);
  if (!isset($result) && isset($_REQUEST['auth_token'])) {
    picture_password_message(t('Starting authentication via Kaje...'));
    // The Kaje service appears to have granted access. Verify.
    $response = picture_password_kaje_call('id', NULL, check_plain($_REQUEST['auth_token']));
    if (isset($response->user_status)) {
      if ($response->user_status == 'unlocked') {
        $is_authenticated = $response->msg_code == 300;
        if (isset($response->user_id)) {
          picture_password_message($response->msg, $is_authenticated ? 'status' : 'error');
          $result = $is_authenticated ? $response->user_id : FALSE;
          return $result;
        }
      }
      else {
        picture_password_message(picture_password_user_status($response->user_status), 'warning');
      }
    }
    picture_password_message($response->msg, 'error');
  }
  return $result = FALSE;
}

/**
 * Form alter function for /user page and user login block.
 *
 * @param array $form
 *   The login form as received from the core.
 */
function picture_password_add_kaje_login_button(&$form) {

  $response = picture_password_kaje_call('status');
  if ($response->msg_code != 700) {
    // Kaji service has an error. Fail silently without altering the login form.
    return;
  }
  // When using Picture Passwords, filling out the Password field is optional.
  $form['pass']['#required'] = FALSE;

  if ($login_button_std_label = variable_get('picture_password_login_button_std_label')) {
    if ($login_button_std_label == '<no button>') {
      unset($form['actions']['submit']);
    }
    else {
      $form['actions']['submit']['#value'] = check_plain($login_button_std_label);
    }
  }

  $form['kaje_logo'] = array(
    '#prefix' => '<div class="kaje">',
    '#type' => 'markup',
    '#markup' => '<span class="kaje-logo-small-green">&nbsp;</span>',
    '#weight' => 101,
  );
  $button_label = variable_get('picture_password_login_button_label');
  $form['submit_picture_password'] = array(
    '#type' => 'submit',
    '#value' => empty($button_label) ? PICTURE_PASSWORD_LOGIN_BUTTON_LABEL : check_plain($button_label),
    '#weight' => 102,
    '#suffix' => '</div>',
  );

  $form['#submit'][] = 'picture_password_login_submit';

  foreach ($form['#validate'] as $key => $function) {
    if ($function == 'user_login_final_validate') {
      // Final login validation needs to be altered in case of Kaje.
      $form['#validate'][$key] = 'picture_password_login_final_validate';
      break;
    }
  }
  // Only add CSS to the login form when needed.
  $form['#attached']['css'][] = drupal_get_path('module', 'picture_password') . '/css/picture_password_login.css';
}

/**
 * Alters validation function iff "Login with Kaje" was pressed.
 *
 * @param array $form
 *   The login form as received from core.
 * @param array $form_state
 *   The form state.
 */
function picture_password_login_final_validate($form, &$form_state) {
  // If this was a classic password login, then do what that normally does.
  if ($form_state['clicked_button']['#id'] != 'edit-submit-picture-password') {
    user_login_final_validate($form, $form_state);
    return;
  }
  // For Picture Passwords only requirement is that a valid username be entered.
  $account = user_load_by_name($form_state['values']['name']);
  if (!isset($account->uid)) {
    form_set_error('name', t('Sorry, unrecognized username. A valid username must be entered when logging in with Kajeâ„¢ Picture Passwords.'));
  }
  // Specify the uid and make sure it is an int. Some core code depends on it.
  $form_state['uid'] = isset($form_state['uid']) ? (int) $form_state['uid'] : 0;
}

/**
 * Additional form submission handler for login form.
 *
 * This is run after the normal user_login_submit() has run and has potentially
 * logged the user in, if they entered the correct password.
 *
 * @param array $form
 *   The login form as obtained from core.
 * @param array $form_state
 *   The form state.
 */
function picture_password_login_submit($form, &$form_state) {

  // If this was not a "Log in with Kaje" login, then do nothing more, UNLESS
  // the user is registered as "wanting" a password. The latter can only happen
  // when they previously entered their user name WITHOUT password and pressed
  // "Log in with Kaje".
  global $user;

  if ($form_state['clicked_button']['#id'] == 'edit-submit-picture-password' ||
    (user_is_logged_in() && picture_password_has_flags($user->uid, PICTURE_PASSWORD_WANTS_KAJE_ACCOUNT))) {
    $form_state['no_redirect'] = TRUE;
    if ($kaje_url = picture_password_handle_kaje_login_submit($form, $form_state)) {
      // Redirect the user to their Kaje login.
      unset($_GET['destination']);
      drupal_goto($kaje_url);
    }
  }
}

/**
 * Handles the pressing of the "Login with Kaje" button.
 *
 * @param array $form
 *   The login form as received from core.
 * @param array $form_state
 *   The form state.
 *
 * @return mixed
 *   Kaje URL to redirect to or FALSE, in case of an error.
 */
function picture_password_handle_kaje_login_submit($form, &$form_state) {

  // User may not be logged in, but their account name has been validated by
  // picture_password_login_final_validate() or we would not be here.
  $account = user_load_by_name($form_state['values']['name']);

  $response = picture_password_handle_kaje_init($account, $form);

  return empty($response->url) ? FALSE : $response->url;
}


/**
 * Handles the creation of and login to the user's associated Kaje account.
 *
 * @param object $account
 *   User account object of either the logged-in user or a valid user name
 *   without password.
 * @param array $login_form
 *   The login form, if applicable.
 *
 * @return mixed
 *   Returns a response object or FALSE if we didn't get that far.
 */
function picture_password_handle_kaje_init($account, $login_form = NULL) {

  $form_user_label = isset($login_form['name']['#title']) ? $login_form['name']['#title'] : t('Username');
  $form_password_label = isset($login_form['pass']['#title']) ? $login_form['pass']['#title'] : t('Password');
  $form_button_label = isset($login_form['submit_picture_password']['#value']) ? $login_form['submit_picture_password']['#value'] : t('Log in with Kaje');

  $kaje_uid = picture_password_get_kaje_uid($account->uid);
  if (!$kaje_uid && user_is_logged_in()) {
    if ($kaje_uid = picture_password_create_kaje_uid($account->uid)) {
      // If the "wanting" flags was set, make sure to clear it.
      picture_password_unset_flags($account->uid, PICTURE_PASSWORD_WANTS_KAJE_ACCOUNT);
    }
  }
  if (!$kaje_uid) {
    picture_password_message(t('User %name is not yet known to have a Kaje user id. In order to <strong>create</strong> an account on Kaje you must enter both @user-label and @pass-label and press <strong>@button-label</strong>.', array(
      '%name' => $account->name,
      '@user-label' => $form_user_label,
      '@pass-label' => $form_password_label,
      '@button-label' => $form_button_label,
    )));
    picture_password_set_flags($account->uid, PICTURE_PASSWORD_WANTS_KAJE_ACCOUNT);
    return FALSE;
  }

  if (picture_password_has_flags($account->uid, PICTURE_PASSWORD_RESET_KAJE_ACCOUNT)) {
    if (!user_is_logged_in()) {
      picture_password_message(t('Your Kaje account is earmarked for a reset. Please log-in entering both @user-label and @pass-label and press <strong>@button-label</strong> to affectuate the reset.', array(
        '@user-label' => $form_user_label,
        '@pass-label' => $form_password_label,
        '@button-label' => $form_button_label,
      )), 'warning');
      return FALSE;
    }
    $response = picture_password_kaje_call('reset', $kaje_uid);
  }
  else {
    $response = picture_password_kaje_call('request', $kaje_uid);
  }
  if (empty($response->url)) {
    picture_password_message($response->msg, 'error');
  }
  if (empty($response->user_status)) {
    return $response;
  }
  if ($response->user_status == 'reset' && !empty($response->url)) {
    // Iff the 'reset' call was successful, clear the Kaje RESET flag.
    picture_password_unset_flags($account->uid, PICTURE_PASSWORD_RESET_KAJE_ACCOUNT);
  }
  if (!in_array($response->user_status, array('reset', 'unlocked', 'new'))) {
    picture_password_message(picture_password_user_status($response->user_status), 'warning');
  }
  // If the account was created on Kaje, but the user abandoned creation of
  // their password, then the account is in the 'new' status. It cannot yet be
  // used for authentication, so we must make sure the user typed their Drupal
  // password and not just a user name.
  if ($response->user_status == 'new' && !user_is_logged_in()) {
    picture_password_message(t('Congratulations! Your Kaje account has been created.<br/>As you have not created a picture password yet, please enter both @user-label and @pass-label and press <strong>@button-label</strong>.<br/>You can also create your Kaje account and manage options from your user account page.', array(
      '@user-label' => $form_user_label,
      '@pass-label' => $form_password_label,
      '@button-label' => $form_button_label,
    )));
    return FALSE;
  }
  return $response;
}

/**
 * Create a new account on Kaje and link it to the Drupal user id.
 */
function picture_password_create_kaje_uid() {
  $response = picture_password_kaje_call('newUser');
  if (empty($response->user_id)) {
    picture_password_message($response->msg, 'warning');
    return FALSE;
  }
  global $user;
  picture_password_set_kaje_uid($user->uid, $response->user_id);
  picture_password_message(picture_password_user_status($response->user_status));
  return $response->user_id;
}

/**
 * Implements hook_user_delete().
 */
function picture_password_user_delete($account) {
  $kaje_uid = picture_password_get_kaje_uid($account->uid);
  picture_password_delete_uid($account->uid);
  if ($kaje_uid) {
    // This will go wrong if not connected to the internet.
    $response = picture_password_kaje_call('deleteUser', $kaje_uid);
    picture_password_message(empty($response->user_status) ? $response->msg : picture_password_user_status($response->user_status));
  }
}

/**
 * Implements hook_menu().
 */
function picture_password_menu() {
  // Put the administrative settings under System on the Configuration page.
  $items['admin/config/system/picture-password'] = array(
    'title' => 'Kajeâ„¢ Picture Passwords',
    'description' => 'Configure Kajeâ„¢ Picture Passwords.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('picture_password_admin_configure'),
    'access arguments' => array('administer picture passwords'),
    'file' => 'picture_password.admin.inc',
  );
  $items['user/%user/picture-password-admin'] = array(
    'title' => 'Kaje admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('picture_password_admin_user', 1),
    'access arguments' => array('administer picture passwords'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'picture_password.admin.inc',
  );
  $items['user/%user/my-picture-password'] = array(
    'title' => 'Kaje',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('picture_password_user', 1),
    'access callback' => array('picture_password_admin_own_access'),
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'picture_password.admin.inc',
  );
  return $items;
}

/**
 * Access callback for user/%/my-picture-password tab on user profile.
 * 
 * @param object $account
 *   The account object belonging to the profile of the user being accessed.
 * 
 * @return bool
 *   TRUE when the current user has access to the account.
 */
function picture_password_admin_own_access($account) {
  global $user;
  return user_access('administer own picture password', $user) && ($user->uid == $account->uid);
}

/**
 * Implements hook_permission().
 */
function picture_password_permission() {
  return array(
    'administer picture passwords' => array(
      'title' => t('Administer Kajeâ„¢ Picture Passwords setup, as well as any Kaje user account'),
      'description' => t('Allows selected role(s) to enter <em>Requesting Party ID</em> and <em>Secret</em>.'),
    ),
    'administer own picture password' => array(
      'title' => t('Administer own Kajeâ„¢ Picture Password account'),
      'description' => t('Users with this permission only have limited Kaje admin functions available to them.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function picture_password_help($path, $arg) {
  switch ($path) {
    case 'admin/help#picture_password':
      $t = t('Configuration and instructions for use are in this <a target="readme" href="@url_readme">README</a> file.<br/>Known issues and solutions may be found on the <a taget="project" href="@url_picture_password">Kajeâ„¢ Picture Passwords</a> project page.', array(
        '@url_readme' => url(drupal_get_path('module', 'picture_password') . '/README.txt'),
        '@url_picture_password' => url('http://drupal.org/project/picture_password'),
      ));
      break;

    case 'admin/config/system/picture-password':
      global $base_root;
      $t = t("To use Kajeâ„¢ Picture Passwords on this site, you'll need to create or access your <a href='@url_kaje_admin' target='_blank'>Kaje Admin Account</a>.", array(
        '@url_kaje_admin' => url('https://kaje.authenticator.com/index.php/admin'))
      ) . '<br/>';
      $t .= t("Once you've created your account and verified ownership of your domain, you'll be given a Requesting Party <strong>ID</strong> and <strong>Secret</strong>. Enter that info below and Kaje will be enabled on your site.") . '<br/>';
      $t .= t('NOTE 1: when entering in the <strong>Domain</strong> and <strong>Redirect</strong> values on the Kaje Admin Account page, use this for both: %url_this_site', array(
        '%url_this_site' => $base_root)
      ) . '<br/>';
      $t .= t('NOTE 2: Kajeâ„¢ Picture Passwords only works with secure HTTP, i.e. https://');
      break;
  }
  return empty($t) ? '' : '<p>' . $t . '</p>';
}

/**
 * Return the Kaje user id belonging to the supplied Drupal user id.
 *
 * @param int $drupal_uid
 *   The Drupal user id.
 *
 * @return mixed
 *   Returns a Kaje string uid, or FALSE.
 */
function picture_password_get_kaje_uid($drupal_uid) {
  return db_query('SELECT kaje_uid FROM {picture_password} WHERE drupal_uid = :uid', array(':uid' => $drupal_uid))->fetchField();
}

/**
 * Return the Kaje user id belonging to the supplied Drupal user id.
 *
 * @param string $kaje_uid
 *   The Kaje account ID.
 *
 * @return mixed
 *   Returns a Drupal uid, which is a positvie integer, or FALSE.
 */
function picture_password_get_drupal_uid($kaje_uid) {
  return db_query('SELECT drupal_uid FROM {picture_password} WHERE kaje_uid = :uid', array(':uid' => $kaje_uid))->fetchField();
}

/**
 * Sets the Kaje user id belonging to the supplied Drupal user id.
 *
 * @param int $drupal_uid
 *   The Drupal user ID.
 * @param string $kaje_uid
 *   The Kaje account ID.
 */
function picture_password_set_kaje_uid($drupal_uid, $kaje_uid) {
  $result = db_query('SELECT drupal_uid FROM {picture_password} WHERE drupal_uid = :uid', array(':uid' => $drupal_uid))->fetchField();
  if ($result) {
    db_update('picture_password')
      ->fields(array('kaje_uid' => $kaje_uid))
      ->condition('drupal_uid', $drupal_uid)
      ->execute();
  }
  else {
    db_insert('picture_password')
      ->fields(array(
        'drupal_uid' => $drupal_uid,
        'kaje_uid' => $kaje_uid,
        'flags' => 0,
      ))
      ->execute();
  }
}

/**
 * Deletes a pair of Drupal/Kaje user IDs and its flags.
 *
 * @param int $drupal_uid
 *   The Drupal user ID.
 */
function picture_password_delete_uid($drupal_uid) {
  db_delete('picture_password')
    ->condition('drupal_uid', $drupal_uid)
    ->execute();
}

/**
 * Returns whether the supplied flag or mask is set for the supplied account.
 *
 * @param int $drupal_uid
 *   The Drupal user ID to which the Kaje account is linked.
 * @param int $flags
 *   The bitwise OR-ed flag pattern, e.g.
 *   PICTURE_PASSWORD_RESET_KAJE_ACCOUNT + PICTURE_PASSWORD_WANTS_KAJE_ACCOUNT
 *
 * @return int
 *   Bit pattern showing which of the requested flags are set. If none of the
 *   flags in the mask are set on the db, then 0 (FALSE) is returned.
 */
function picture_password_has_flags($drupal_uid, $flags) {
  $db_flags = db_query('SELECT flags FROM {picture_password} WHERE drupal_uid = :uid', array(':uid' => $drupal_uid))->fetchField();
  return $db_flags & $flags;
}

/**
 * Set a flag or flags pertaining to a user.
 *
 * @param int $drupal_uid
 *   The Drupal user ID.
 * @param int $flags
 *   The flags (bits in a word) to set for the supplied user accound ID.
 */
function picture_password_set_flags($drupal_uid, $flags) {
  $db_flags = db_query('SELECT flags FROM {picture_password} WHERE drupal_uid = :uid', array(':uid' => $drupal_uid))->fetchField();
  if ($db_flags === FALSE) {
    // Create a stub. It has a Drupal uid, but no Kaje account id.
    picture_password_set_kaje_uid($drupal_uid, 0);
  }
  db_update('picture_password')
    ->fields(array('flags' => $db_flags | $flags))
    ->condition('drupal_uid', $drupal_uid)
    ->execute();
}

/**
 * Unset a flag or flags pertaining to a user.
 *
 * @param int $drupal_uid
 *   The Drupal user ID.
 * @param int $flags
 *   The flags to unset for the supplied user accound ID.
 */
function picture_password_unset_flags($drupal_uid, $flags) {
  $db_flags = db_query('SELECT flags FROM {picture_password} WHERE drupal_uid = :uid', array(':uid' => $drupal_uid))->fetchField();
  db_update('picture_password')
    ->fields(array('flags' => $db_flags & ~$flags))
    ->condition('drupal_uid', $drupal_uid)
    ->execute();
}

/**
 * Equivalent of drupal_set_message(), but with a Kaje logo.
 * 
 * @param string $message
 *   The message to display. Will be prefixed by Kaje logo.
 * @param string $type
 *   One of 'status', 'warning' or 'error'.
 * @param bool $repeat
 *   Whether to suppress repetition of identical messages
 */
function picture_password_message($message = NULL, $type = 'status', $repeat = TRUE) {
  $message_with_logo = '<span class="kaje-logo-small-' . $type . '">&nbsp;</span><span class="msg-kaje-' . $type . '">' . $message . '</span>';
  drupal_set_message($message_with_logo, $type, $repeat);
}


/**
 * Implements hook_views_api().
 */
function picture_password_views_api() {
  return array(
    'api' => views_api_version(),
    'path' => drupal_get_path('module', 'picture_password') . '/views',
  );
}

/**
 * Returns whether debug is switched on for the current user.
 * 
 * @global type $user
 * @return bool
 */
function picture_password_is_debug() {
  global $user;
  $user_name = empty($user->uid) ? 'anon' : $user->name;
  $debug_users = explode(',', variable_get('picture_password_debug_users', ''));
  foreach ($debug_users as $debug_user) {
    if (trim($debug_user) == $user_name) {
      return TRUE;
    }
  }
  return FALSE;
}
