<?php
// $Id: sanitizable.module,v 1.4 2010/08/23 21:43:00 casey Exp $

/**
 * @file
 * Allows administrators to configure a text format to be applied to formatted text before storage.
 */

/**
 * Implements hook_help().
 */
function sanitizable_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sanitizable':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Sanitize module allows administrators to configure a text format to be applied to formatted text before storage.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring the sanitizable module') . '</dt>';
      $output .= '<dd>';
      $output .= '<p>' . t('Configure the sanitizable text filter on the <a href="@formats">Text formats page</a>. Best practice is to create one or more separate text formats (named something like "Sanitized") that no user has access to.', array('@formats' => url('admin/config/content/formats'))) . '</p>';
      $output .= '<p><em>' . t('Although it is, when used properly, useful to sanitize text before it is stored into the database, please make sure the selected text format won\'t conflict with the text format currently being configured. Best practice is that the sanitize text format only contains filters that correct invalid data (like the HTML corrector), remove obsolete data (like markup from word processors like OpenOffice) or remove data that is never going to be allowed.') . '</em></p>';
      $output .= '<p>' . t('Secondly add the sanitizable filter to the text formats you want to be sanitized before storage and select the newly created sanitize text format on their configuration pages.') . '</p>';
      $output .= '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_filter_info().
 */
function sanitizable_filter_info() {
  $filters['sanitizable'] = array(
    'title' => t('Sanitize text before storage'),
    'settings callback' => '_sanitizable_settings',
    'default settings' => array(
      'format' => 0,
    ),
    'tips callback' => '_sanitizable_tips',
    'weight' => -99,
  );
  return $filters;
}

/**
 * Filter settings callback for the sanitizable filter.
 */
function _sanitizable_settings($form, &$form_state, $filter, $format, $defaults) {
  global $user;

  $formats = filter_formats($user);
  // Remove format being configured.
  unset($formats[$format->format]);
  foreach ($formats as $format_info) {
    $options[$format_info->format] = $format_info->name;
  }

  $settings['format'] = array(
    '#type' => 'select',
    '#title' => t('Sanitize format'),
    '#description' => t('The selected text format will be applied to formatted text before storage.') . '<br/>'
      . t('Although it is, when used properly, useful to sanitize text before it is stored into the database, please make sure the selected text format won\'t conflict with the text format currently being configured. Best practice is that the sanitize text format only contains filters that correct invalid data (like the HTML corrector), remove obsolete data (like markup from word processors like OpenOffice) or remove data that is never going to be allowed.'),
    '#options' => $options,
    '#default_value' => isset($filter->settings['format']) ? $filter->settings['format'] : $defaults['format'],
    '#attributes' => array('class' => array('filter-list')),
  );
  return $settings;
}

/**
 * Filter tips callback for the sanitizable filter.
 */
function _sanitizable_tips($filter, $format, $long = FALSE) {
  return t('The text will be formatted before storage using the following settings.')
    . theme('filter_tips', array('tips' => _filter_tips($filter->settings['format'], FALSE)));
}

/**
 * Implements hook_element_info_alter().
 */
function sanitizable_element_info_alter(&$info) {
  $info['text_format']['#element_validate'][] = '_sanitizable_validate_text_format';
}

/**
 * Validate callback for the text_format element.
 */
function _sanitizable_validate_text_format($element, &$form_state) {
  if (isset($element['value'], $element['#format'])) {
    $format_id = $element['#format'];
    $formats = filter_formats();
    $filters = filter_list_format($format_id);

    if (isset($filters['sanitizable']) && isset($formats[$filters['sanitizable']->settings['format']])) {
      form_set_value($element['value'], check_markup($element['value']['#value'], $filters['sanitizable']->settings['format'], '', FALSE), $form_state);
    }
  }
}
