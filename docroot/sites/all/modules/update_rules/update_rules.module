<?php

/**
 * @file
 * Provides basic rules integration with the core update module
 */

/**
 * Returns an array of options for the rules status variable
 *
 * @return array
 */
function update_rules_status_labels() {
  return array(
    1 => 'UPDATE_NOT_SECURE',
    2 => 'UPDATE_REVOKED',
    3 => 'UPDATE_NOT_SUPPORTED',
    4 => 'UPDATE_NOT_CURRENT',
    5 => 'UPDATE_CURRENT',
    -1 => 'UPDATE_NOT_CHECKED',
    -2 => 'UPDATE_UNKNOWN',
    -3 => 'UPDATE_NOT_FETCHED',
    -4 => 'UPDATE_FETCH_PENDING',
  );
}

/**
 * Returns an array of options for the rules "already processed" group identifier variable
 *
 * @return array
 */
function update_rules_already_processed_group_ids() {
  return array(1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5);
}

/**
 * Returns an array of options for the release type terms.
 */
function update_rules_release_types() {
  return array(
    'Security update' => t('Security update'),
    'Bug fixes' => t('Bug fixes'),
    'New features' => t('New features'),
  );
}

/**
 * Implements hook_update_status_alter().
 *
 * The system has determined which updates are needed.
 */
function update_rules_update_status_alter(&$projects) {
  // Load the releases
  $result = db_query('SELECT project_release, guid FROM {update_rules_release_ids}');
  $stored_releases = $result->fetchAllAssoc('project_release');

  if (!empty($projects)) {
    // Get some helpful information about the server
    $host = '';
    if (function_exists('gethostname')) {
      $host = gethostname();
    }
    elseif (function_exists('php_uname')) {
      $host = php_uname('n');
    }

    // We want to add to the update_rules_release_ids table any new releases we find
    $new_releases_to_store = array();

    foreach ($projects as $project) {
      $args = array(
        'project_name'        => $project['name'],
        'project_title'       => (isset($project['title'])) ? $project['title'] : $project['name'],
        'current_release'     => $project['existing_version'],
        'recommended_release' => (isset($project['recommended'])) ? $project['recommended'] : 'unknown',
        'status'              => $project['status'],
        'host'                => $host,
        'release_link'        => (isset($project['recommended']) && isset($project['releases'][$project['recommended']]['release_link'])) ? $project['releases'][$project['recommended']]['release_link'] : '',
        'release_type'        => (isset($project['recommended']) && isset($project['releases'][$project['recommended']]['terms']['Release type'])) ? $project['releases'][$project['recommended']]['terms']['Release type'] : array(),
      );

      // This is our project_release value for this project + release combination
      $release_identifier = $args['project_name'] . '-' . $args['recommended_release'];

      // Make the release's unique identifier available to rules invoking either event
      // You can use this identifier to, for example, safely (without passing site/module info)
      // check if the ID is already present in some 3rd party system so that you don't
      // re-process the same item multiple times
      if (!isset($stored_releases[$release_identifier])) {
        $args['guid'] = update_rules_uuid_generate();

        // Add this to the array of release ids
        $new_releases_to_store[] = array('project_release' => $release_identifier, 'guid' => $args['guid']);
      }
      else {
        // Use the release id we already generated
        $args['guid'] = $stored_releases[$release_identifier]->guid;
      }

      rules_invoke_event_by_args('update_rules_after_checking_all', $args);

      if ($project['status'] != 5) {
        rules_invoke_event_by_args('update_rules_after_checking_exclude_current', $args);
      }
    }
  }

  // Save the new releases to the update_rules_release_ids table
  if (!empty($new_releases_to_store)) {
    $query = db_insert('update_rules_release_ids')->fields(array('project_release', 'guid'));
    foreach ($new_releases_to_store as $record) {
      $query->values($record);
    }
    $query->execute();
  }
}

/**
 * Rules action to prevent re-processing on a specific project release
 *
 * @param integer $group_identifier
 *   Identifier of the "already processed" group
 * @param string $project_name
 *   Machine name of a project
 * @param string $recommended_release
 *   Release identifier like 7.x-1.3
 */
function update_rules_process_once($group_identifier, $project_name, $recommended_release) {
  $group_variable_name = 'update_rules_already_processed_' . $group_identifier;
  $release_identifier = check_plain($project_name) . '-' . check_plain($recommended_release);

  // Add this release to this group's already-processed array
  $already_processed = variable_get($group_variable_name, array());
  if (!in_array($release_identifier, $already_processed)) {
    $already_processed[] = $release_identifier;
    variable_set($group_variable_name, $already_processed);
  }
}

/**
 * Rules condition to check if a project release has already been processed
 *
 * @param integer $group_identifier
 *   Identifier of the "already processed" group
 * @param string $project_name
 *   Machine name of a project
 * @param string $recommended_release
 *   Release identifier like 7.x-1.3
 *
 * @return bool
 *   TRUE if the release has already been processed within this group
 */
function update_rules_already_processed($group_identifier, $project_name, $recommended_release) {
  $group_variable_name = 'update_rules_already_processed_' . $group_identifier;
  $release_identifier = check_plain($project_name) . '-' . check_plain($recommended_release);

  $already_processed = variable_get($group_variable_name, array());
  if (in_array($release_identifier, $already_processed)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Generates a UUID v4 (RFC 4122 section 4.4) using PHP code.
 *
 * This code is borrowed from the uuid module
 *
 * @see http://www.rfc-editor.org/rfc/rfc4122.txt
 *
 * The UUID layout and fields are defined in section 4.1.2.
 *
 * Note that there are inconsistencies in the RFC with respect to
 * bit numbering. Network Order is correct, so the most significant bit
 * always appears first (in left-to-right sequence). See errata 3546:
 * http://www.rfc-editor.org/errata_search.php?rfc=4122&eid=3546
 *
 * Based on code from http://php.net/uniqid
 */
function update_rules_uuid_generate() {
  // We limit each generated number to 16 bits (maximum value 0xffff)
  // because mt_rand() returns a *signed* integer, and hence a 32-bit
  // value can only have a 31-bit magnitude. Constructing a 32-bit
  // number from two 16-bit random numbers guarantees that all 32 bits
  // are random.
  return sprintf('%04x%04x-%04x-4%03x-%04x-%04x%04x%04x',
    // 32 bits for "time_low".
    mt_rand(0, 0xffff), mt_rand(0, 0xffff),
    // 16 bits for "time_mid".
    mt_rand(0, 0xffff),
    // 12 bits after the initial 0100 (version 4) for "time_hi_and_version".
    mt_rand(0, 0x0fff),
    // 16 bits in total for "clk_seq_hi_res" and "clk_seq_low", with the
    // most significant 2 bits of clk_seq_hi_res set to '10'. We do a
    // bitwise OR of a random 14-bit value (maximum 0x3fff) with 0x8000
    // (a 16-bit integer with only the most significant bit set).
    mt_rand(0, 0x3fff) | 0x8000,
    // 48 bits for "node".
    mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
  );
}