<?php

/**
 * @file
 * Module file for the PM USer Image module.
 */

/**
 * Implements hook_form_alter().
 */
function pm_user_image_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'privatemsg_new') {
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'pm_user_image') . '/pm_user_image.css',      
    );
  }
}

/**
 * Implements hook_menu(). 
 */
function pm_user_image_menu() {
  $items = array();
  $items['admin/config/messaging/privatemsg/pm-user-image'] = array(
    'page callback' => 'drupal_get_form',
    'title' => 'PM User Image',
    'description' => 'Image settings to be shown in private message user auto complete',
    'page arguments' => array('pm_user_image_settings'),
    'access arguments' => array('access pm_user_image settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pm_user_image.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function pm_user_image_menu_alter(&$items) {
  $items['messages/autocomplete']['page callback'] = 'pm_user_image_autocomplete_change';
}

/**
 * Return autocomplete results for usernames.
 * 
 * @param string $string
 *   String that entered in the username textbox.
 */
function pm_user_image_autocomplete_change($string) {
  $names = array();
  // 1: Parse $string and build list of valid user names.
  $fragments = explode(',', $string);
  foreach ($fragments as $name) {
    if ($name = trim($name)) {
      $names[$name] = $name;
    }
  }
  // 2: Find the next user name suggestion.
  $fragment = array_pop($names);
  $matches = array();
  if (!empty($fragment)) {
    $remaining = 10;
    $types = privatemsg_recipient_get_types();
    foreach ($types as $name => $type) {
      if (isset($type['autocomplete']) && is_callable($type['autocomplete']) && privatemsg_recipient_access($name, 'write')) {
        $function = $type['autocomplete'];
        $return = $function($fragment, $names, $remaining);
        if (is_array($return) && !empty($return)) {
          $matches = array_merge($matches, $return);
        }
        $remaining = 10 - count($matches);
        if ($remaining <= 0) {
          break;
        }
      }
    }
  }
  // Allow modules to alter the autocomplete list.
  drupal_alter('privatemsg_autocomplete', $matches, $names, $fragment);
  // Format the suggestions.
  $themed_matches = array();
  $themed_uid = array();
  foreach ($matches as $key => $match) {
    $themed_matches[$key] = privatemsg_recipient_format($match, array('plain' => TRUE));
    // Get the user id of each suggestion.
    $themed_uid[$key] = $match->uid;
  }
  // Check if there are any duplicates.
  if (count(array_unique($themed_matches)) != count($themed_matches)) {
    // Loop over matches, look for duplicates of each one.
    foreach ($themed_matches as $themed_match) {
      $duplicate_keys = array_keys($themed_matches, $themed_match);
      if (count($duplicate_keys) > 1) {
        // There are duplicates, make them unique.
        foreach ($duplicate_keys as $duplicate_key) {
          // Reformat them with unique argument.
          $themed_matches[$duplicate_key] = privatemsg_recipient_format($matches[$duplicate_key], array('plain' => TRUE, 'unique' => TRUE));
        }
      }
    }
  }
  // Prefix the matches and convert them to the correct form for the
  // autocomplete.
  $prefix = count($names) ? implode(", ", $names) . ", " : '';
  $suggestions = array();
  foreach ($themed_matches as $key => $match) {
    $suggestions[$prefix . $match . ', '] = theme('pm_user_image_autocomplete',
            array('display_string' => $match, 'user_object' => user_load($themed_uid[$key])));
  }
  // Convert to object.
  drupal_json_output((object) $suggestions);
}

/**
 * Implements hook_permission(). 
 */
function pm_user_image_permission() {
  return array(
    'access pm_user_image settings' => array(
      'title' => t('Administer Private Message User Image settings'),
      'description' => t('Set the default image if user has no profile image and sets the default
height and width for the image.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function pm_user_image_theme() {
  return array(
    'pm_user_image_autocomplete' => array(
      'variables' => array('display_string' => NULL, 'user_object' => NULL),
      'path' => drupal_get_path('module', 'pm_user_image') . '/templates',
      'template' => 'pm-user-image-output',
    ),
  );
}
