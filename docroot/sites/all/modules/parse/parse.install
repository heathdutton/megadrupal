<?php

/**
 * @file parse.install
 */

/**
 * Implements hook_schema().
 */
function parse_schema() {
  $schema = array();
  $schema['parse_rules'] = array(
    'fields'=> array(
      'rid' => array(
        'type' => 'serial',
        'not null' => TRUE
      ),
      'rule_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'roles' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'comments' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'node_create_types' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'node_update_types' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'notification_message' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'badge_type' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('rid'),
  );
  $schema['parse_automation'] = array(
    'fields'=> array(
      'rid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
       ),
      'rule_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'rule_type' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => FALSE,
      ),
      'geo_based' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'latitude' => array(
        'type' => 'float',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'longitude' => array(
        'type' => 'float',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'radius' => array(
        'type' => 'int',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'send_date_time' => array(
        'mysql_type' => 'datetime',
        'type' => 'datetime',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'message' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'badge_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'is_sent' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('rid'),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 * Delete system variables configured as part of the module setup.
 */
function parse_uninstall() {
  variable_del('parse_application_id');
  variable_del('parse_masterkey');
  variable_del('parse_restkey');
  variable_del('parse_url');
}

/**
 * Add the table for parse automation functionality.
 */
function parse_update_7101() {
  $schema = parse_schema();
  if (!db_table_exists('parse_automation')) {
    db_create_table('parse_automation', $schema['parse_automation']);
  }
}

/**
 * Implementation of hook_requirements().
 */
function parse_requirements($phase) {
  $requirements = array();
  // Just incase translation isn't available to us at this time. (Normally during installation
  // process, but we are being throrough here.
  $t = get_t();
  
  if ($phase == 'runtime') {
    // Get the last run time and the current time for comparison sake.
    $last_run = variable_get('parse_cron_last_run', 'N/A');
    $current_time = time();
    
    if ($last_run != 'N/A') {
      // If we have run in the last day, then this is the minumum is everything is cool.
      if ($current_time - $last_run < 86400) {
        $requirement_status = REQUIREMENT_OK;
      }
      else {
        // If not, then we really should raise the alert level.
        $requirement_status = REQUIREMENT_INFO;
      }
      $last_run = date('m/d/Y H:ia', $last_run);
    }
    else {
      // If we have never run before, then we want this set to an informational status.
      $requirement_status = REQUIREMENT_INFO;
    }
    
    // Set up the requirements display for the info page. 
    $requirements['parse'] = array(
      'title' => $t('Parse: Last Schedule Check'),
      'value' => $last_run,
      'severity' => $requirement_status,
    );
  }
  return $requirements;
}
