<?php

/**
 * @file
 * The main module file for report builder. Contains important hooks and
 * general use functions.
 */

/**
 * Implements hook_views_api().
 *
 * necessary for views to auto-load plugins and other includes.
 */
function report_builder_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_block_info().
 */
function report_builder_block_info() {
  // Load up all reports.
  $reports = report_builder_fetch_all_reports();
  $block_info = array();
  
  // Loop through the reports and set up the block info array for each.
  foreach ($reports as $report) {
    $report->data = unserialize($report->data);
    if (isset($report->data['create_block_chart']) && ($report->data['create_block_chart'])) {
      $block_info[$report->repid . "-chart"] = array(
        'info' => t('Report Builder Chart: @title', array('@title' => $report->title)),
      );
    }
    if (isset($report->data['create_block_table']) && ($report->data['create_block_table'])) {
      $block_info[$report->repid . "-table"] = array(
        'info' => t('Report Builder Table: @title', array('@title' => $report->title)),
      );
    }
  }
  return $block_info;
}

/**
 * Implements hook_block_view().
 */
function report_builder_block_view($delta = '') {

  if ($delta != '') {
    list($repid, $type) = explode('-', $delta);
    $report = report_builder_load($repid);
    $report = report_builder_update_results($report);
    if ($type == 'table') {
      $content = report_builder_get_table($report);
    }
    else {
      $content = report_builder_get_chart($report);
    }

    return array(
      'subject' => check_plain($report->title),
      'content' => $content,
    );
  }
}

/**
 * Implements hook_permission().
 */
function report_builder_permission() {
  return array(
    'view report builder reports' => array(
      'title' => t('View Report Builder reports'),
    ),
    'administer report builder reports' => array(
      'title' => t('Administer Report Builder reports'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function report_builder_menu() {
  // Lists reports.
  $items['admin/structure/report-builder'] = array(
    'page callback' => 'report_builder_list_reports',
    'access arguments' => array('administer report builder reports'),
    'file' => 'report_builder.admin.inc',
    'title' => 'Report Builder Reports',
    'description' => 'List all of the Report Builder reports.',
  );

  // First step of report building - create report.
  $items['report-builder/build'] = array(
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer report builder reports'),
    'page arguments' => array('report_builder_configure_report_form'),
    'file' => 'report_builder.admin.inc',
    'title' => 'Build a Report',
    'description' => 'Create a new report.',
  );

  $items['report-builder/build/%ctools_js/%'] = array(
    'page callback' => 'report_builder_configure_report',
    'access arguments' => array('administer report builder reports'),
    'page arguments' => array(2, 3),
    'file' => 'report_builder.admin.inc',
    'title' => 'Configure a report.',
    'description' => "Set up a report's general options",
  );

  $items['report-builder/%report_builder'] = array(
    'page callback' => 'report_builder_view_report',
    'access arguments' => array('view report builder reports'),
    'file' => 'report_builder.pages.inc',
    'page arguments' => array(1),
    'title callback' => 'report_builder_get_title',
    'title arguments' => array(1),
  );

  $items['report-builder/%report_builder/view'] = array(
    'title' => 'View',
    'weight' => -99,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('view report builder reports'),
  );

  $items['report-builder/%report_builder/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer report builder reports'),
    'page arguments' => array('report_builder_delete_form', 1),
    'file' => 'report_builder.pages.inc',
    'title' => 'Delete Report',
  );

  $items['report-builder/%report_builder/build'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'page callback' => 'report_builder_edit_report',
    'access arguments' => array('administer report builder reports'),
    'file' => 'report_builder.pages.inc',
    'page arguments' => array(1),
  );

  $items['report-builder/%report_builder/build/groupedit/%ctools_js/%'] = array(
    'page callback' => 'report_builder_edit_report_group',
    'access arguments' => array('administer report builder reports'),
    'file' => 'report_builder.ajax.inc',
    'page arguments' => array(1, 4, 5),
    'title' => 'Edit report subgroup',
  );

  return $items;
}

/**
 * Saves the report array to the database. $report is passed in by reference.
 *
 * @param object $report
 *   The report object to be saved.
 *
 * @return array
 *   The newly saved report array.
 */
function report_builder_save(&$report) {
  $report->save();
  return $report;
}

/**
 * Loads a report from the database.
 *
 * @param integer $repid
 *   The report id.
 *
 * @return object
 *   The loaded report.
 */
function report_builder_load($repid) {
  $result = entity_load('report_builder',array($repid));
  if (!isset($result[$repid])) {
    return NULL;
  }
  
  return $result[$repid];
}

/**
 * Extracts the first result from an executed view object.
 *
 * @param object $view
 *   The view object with the results to be extracted.
 *
 * @return string
 *   The first result from the view's result set.
 *
 */
function _report_builder_extract_view_result($view) {
  $result = array_values(get_object_vars($view->result[0]));
  return $result[0];
}

/**
 * Returns an array of form element names that are to be ignored when extracting
 * views exposed filter form elements.
 *
 * @return array
 *   Returns an array of generic form elements to be ignored.
 *
 */
function _report_builder_get_generic_elements() {
  return array(
    'form_build_id',
    'form_id',
    'form_token',
    'submit',
    'op',
  );
}

/**
 * Returns the form element keys of a views exposed form, ignoring the generic
 * elements.
 *
 * @param object $report
 *   The report object.
 *
 * @return array
 *   An array of form keys.
 *
 */
function report_builder_get_exposed_form_keys($report) {
  $view = views_get_view($report->data['view_name']);
  $view->set_display($report->data['display_id']);
  $view->execute();
  $views_form_state = array(
    'view' => $view,
    'display' => $report->data['display_id'],
  );

  $exposed_form = drupal_build_form('views_exposed_form', $views_form_state);
  $all_exposed_form_keys = element_children($exposed_form);
  $generic_elements = _report_builder_get_generic_elements();
  $exposed_form_keys = array();
  foreach ($all_exposed_form_keys as $key) {
    if (!in_array($key, $generic_elements)) {
      $exposed_form_keys[] = $key;
    }
  }

  return $exposed_form_keys;
}

/**
 * Applies the form input from the user to the view's exposed filters and gets
 * the result.
 *
 * @param object $report
 *   The report entity.
 * @param integer $group_num
 *   The index of the data subgroup.
 *
 * @return string
 *   A single view result.
 *
 */
function report_builder_get_view_result($report, $group_num) {
  $view = views_get_view($report->data['view_name']);
  $view->set_display($report->data['display_id']);

  foreach ($report->data['exposed_form_keys'] as $key) {
    if (isset($report->data['form_inputs'][$group_num])) {
      $view->exposed_input[$key] = $report->data['form_inputs'][$group_num][$key];
    }
  }

  $view->preview();

  return _report_builder_extract_view_result($view);
}

/**
 * Returns a renderable chart array.
 *
 * @param object $report
 *   The report object source for the chart.
 *
 * @return array
 *   A renderable chart array.
 *
 */
function report_builder_get_chart($report) {
  $chart = array(
    '#chart_id' => 'report-builder-chart-' . $report->repid,
    '#title' => check_plain($report->title),
    '#type' => $report->data['chart_data']['type'],
    '#theme' => 'chart',
    '#size' => chart_size($report->data['chart_data']['width'], $report->data['chart_data']['height']),
    '#bar_size' => chart_bar_size(round(($report->data['chart_data']['width'] - 20 * $report->data['num_groups']) / $report->data['num_groups']), 20),
    '#adjust_resolution' => TRUE,
  );

  $values = $report->data['results'];

  // Labels are output via the Google Chart picture. Leave the sanitizing to
  // Google.
  $labels = $report->data['headers'];

  $i = 0;
  $num_values = sizeof($values);
  while ($i < $num_values) {
    $chart['#data'][] = $values[$i];
    $chart['#labels'][] = $labels[$i];
    $i++;
  }

  return $chart;
}

/**
 * Returns a renderable table array for the report. Does not include the 'change
 * filter' links. Those are added with _report_builder_table_add_edit_row().
 *
 * @param object $report
 *   The report serving as the data source for the table.
 *
 * @return array
 *   The render array for the table.
 *
 */
function report_builder_get_table($report) {

  // Headers are user inputted text, check plain to prevent XSS.
  $header = $report->data['headers'];
  foreach ($header as &$header_element) {
    $header_element = check_plain($header_element);
  }
  if (isset($report->data['results'])) {
    $rows[0] = $report->data['results'];
  }
  else {
    $rows = array();
  }
  return array(
    'table' => array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => array(
        'id' => 'report-builder-table',
      ),
    ),
  );
}

/**
 * Adds another row to the table that has the 'change filter' button. Links
 * bring up the modal edit subgroup form.
 *
 * @param array $table
 *   The existing render array for the table.
 * @param integer $repid
 *   The report id of the source report.
 *
 * @return array
 *   An updated render array with an additional row of modal links.
 *
 */
function _report_builder_table_add_edit_row($table, $repid) {
  $i = 0;
  foreach ($table['table']['#rows'][0] as $cell) {
    $modal_path = "report-builder/" . $repid . "/build/groupedit/nojs/" . $i++;
    $table['table']['#rows'][1][] = ctools_modal_text_button(t('Change Filters'), $modal_path, t('Edit'), 'change-filters-button');
  }

  return $table;
}

/**
 * Returns the title of the report if it exists.
 *
 * @param object $report
 *   The report whose title is being extracted.
 *
 * @return string
 *   The title of the report.
 *
 */
function report_builder_get_title($report) {
  if (isset($report->title)) {
    return check_plain($report->title);
  }
  else {
    return t("Report not Found");
  }
}

/**
 * Updates the views results of a report.
 *
 * @param object $report
 *   The report to be updated.
 *
 * @return array
 *   The updated report
 *
 */
function report_builder_update_results($report) {
  $group_num = 0;
  while ($group_num < (int) $report->data['num_groups']) {
    $report->data['results'][$group_num] = report_builder_get_view_result($report, $group_num);
    $group_num++;
  }
  return $report;
}

/**
 * Fetches all reports from the database.
 *
 * @return array
 *   An array of all of the reports from the db.
 */
function report_builder_fetch_all_reports() {

  // Query the database for all report builder reports.
  $query = db_select('report_builder', 'r');
  $query->join('users', 'u', 'u.uid = r.uid');
  $query->addField('r', 'title');
  $query->addField('u', 'uid');
  $query->addField('u', 'name');
  $query->addField('r', 'repid');
  $query->addField('r', 'data');
  return $query->execute()->fetchAll();
}


function report_builder_entity_info() {
  $info['report_builder'] = array(
    'label' => t('Report'),
    'entity class' => 'Entity',
    'module' => 'report_builder',
    'controller class' => 'EntityAPIController',
    'base table' => 'report_builder',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'repid',
    ),
    'static cache' => TRUE,
  );
  
  return $info;
}