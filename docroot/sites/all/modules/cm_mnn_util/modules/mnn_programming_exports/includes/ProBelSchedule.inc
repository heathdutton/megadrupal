<?php
class ProBelSchedule extends XMLWriter
{
  //  $db_resource: expects a db resource as generated by
  //    programming_get_playout_data_for_date()
  //
  //  $channels = array(
  //    'primary' => 'Taxonomy Term Name of Channel',
  //    'secondary' => 'Taxonomy Term Name of Chyron Channel',
  //  )
  function buildDataTree($results, $channels) {
    $uid = 1; // first Uid is 1
    $last_primary_uid = 0;
    $e = array(); // current "event"
    $event_tree = array();
    foreach ($results as $d ) {
      $d['uid'] = $uid;

      $channel_name = $d->field_field_airing_channel[0]['rendered']['#title'];

      if ( in_array($channel_name, $channels['secondary']) ) {
        if ( $last_primary_uid == 0 ) {
          continue;
        }
        else {
          $event_tree[$last_primary_uid]['#children'][$d['uid']] = $d;
        }
      }
      else {
        // a regular channel, not a secondary
        $event_tree[$d['uid']] = $d;
        $last_primary_uid = $d['uid'];
      }
      $uid += 1;
    }
    $this->event_tree = $event_tree;
  }
  // Take an array of external data from buildDataTree and make
  // array of XML elements and attributes
  function writeTranslatedData() {
    if ( ! $this->event_tree ) {
      $this->translated_event_data = array();
    }
    else {
      foreach ( $this->event_tree as $uid => $event ) {
        $event['fqt'] = $event['channel_name'];
        $translated = ProBelSchedule::translateEvent($event);
        $translated['PreviousUid'] = -1;
        $translated['OwnerUid'] = -1;
        $translated['IsFixed'] = 'True';
        $this->writeEventElem($translated);
        if ( $event['#children'] ) {
          foreach ( $event['#children'] as $child ) {
            $start_offset = $child['event_start'] - $event['event_start'];
            $child['event_start'] = $start_offset > 0 ? $start_offset : 0;
            $child['#is_child'] = TRUE;
            $child_event = ProBelSchedule::translateEvent($child);
	    $child_event['Type'] = 
	      mnn_programming_exports__xml_chyron_type($child['channel_name']);
            $child_event['OwnerUid'] = $event['uid'];
            $child_event['IsFixed'] = 'True';
            $this->writeEventElem($child_event);
          }
        }
      }
    }
  }

  function translateEvent($d) {
    $dict = array(
		  'title' => 'EventName',
		  'uid' => 'Uid',
		  'event_start' => 'StartTimeOffset',
		  'duration' => 'Duration',
		  'channel_name' => 'PlayoutDevice',
		  'fqt' => 'Type',
		  'project_id' => 'MaterialId',
		  'owner_uid' => 'OwnerUid',
		  '#is_child' => '#is_child',
		  'file_id' => 'FileId',
		  'MainVideoSource' => 'MainVideoSource',
		  'MainAudioSource' => 'MainAudioSource',
		  );
    $ret = array();

    $d['duration'] = $d['event_end'] - $d['event_start'];
   
    // deal with LIVE devices

    if ( 'LIVE' === $d['format_name'] ) {
      $livefeed = $d['livefeed_name'];
      
      //set these to the format name. will be translated later to the correct
      //device string.
      if ( $livefeed ) {
        $d['MainVideoSource'] = $d['MainAudioSource'] = $livefeed;

      }
      else {
        drupal_set_message("Warning: episode with nid = ".
			   l($d['ep_nid'], 'node/'.$d['ep_nid']) .
			   " is missing its device taxonomy term.", 'error');
      }
    }
    foreach ( $d as $key => $value ) {
      // for each field in the data array, we either do a simple tranformation,
      //   or call a function that does a more complex transformation, such as
      //   date formatting.
      // Format of function names is programming_xml_FIELDNAME() 
      //(where FIELDNAME
      //   is a value in one of the key=>value pairs in $dict)
      $funk = 'mnn_programming_exports_xml_'.$dict[$key];
      if ( function_exists($funk) ) {
        $ret[$dict[$key]] = $funk($value, $d);
      }
      else {
        $ret[$dict[$key]] = $value;
      }
    }

    // the following appear to never change:
    $ret['DurationMode'] = "Specified";
    $ret['Enabled'] = "True";
    $ret['PlayoutDeviceGroup'] = "Server Devices";

    if ( 'LIVE' === $d['format_name'] ) {
      unset($ret['PlayoutDevice']);
      unset($ret['PlayoutDeviceGroup']);
    }

    // FIXME: the following field(s) I have no idea how to populate:
    //$ret['StartMode'] = "ReferenceToParentsEnd";

    return $ret;
  }


  function writeAttrFromArray($key, $data) {
    if ( $data[$key] ) {
      $this->writeAttribute($key, $data[$key]);
    }
  }

  function writeRelationshipElements($d) {
    $this->startElement('PreviousUid');
    $this->text('-1');
    $this->endElement();

    $this->startElement('OwnerUid');
    $this->text($d['OwnerUid'] ?
		$d['OwnerUid'] : '-1');
    $this->endElement();

    $this->startElement('IsFixed');
    $this->text($d['IsFixed'] ?
		$d['IsFixed'] : 'False');
    $this->endElement();

    $this->startElement('EventKind');
    if ( !$d['#is_child'] ) {
      $this->text('MainEvent');
    }
    else {
      $this->text('Normal');
    }
    $this->endElement();
  }

  function writeParam($name, $value) {
    if ( $name && $value ) {
      $this->startElement('Parameter');
      $this->writeAttribute('Name', $name);
      $this->writeAttribute('Value', $value);
      $this->endElement();
    }
  }

  function writeEventElem($event_data) {
    $attrs = array(
		   'Uid',
		   'Type',
		   );

    $params = 
      array(
	    //'name' => 'required'
	    // if a field is 'required' it will be written out even if there 
	    // is no  value available
	    // if a field is not required, it will only be written out 
	    // if there is a  non-null value
	    'EventName' => 1,
	    'MaterialId' => 1,
	    'StartMode' => 1,
	    'StartTimeOffset' => 1,
	    'DurationMode' => 1,
	    'Duration' => 1,
	    'PlayoutDeviceGroup' => '0',
	    'PlayoutDevice' => '0',
	    'Enabled' => 1,
	    'FileId' => 1,
	    'MainVideoSource' => 0,
	    'MainAudioSource' => 0,
	    // FIXME: 
	    //   for child events:
	    //<Parameter Name="FileId" Value="0000005" />
	    );

    $this->startElement('Event');
    foreach ( $attrs as $a ) {
      $this->writeAttrFromArray($a, $event_data);
    }

    $this->writeRelationshipElements($event_data);

    $this->startElement('Fields');
    foreach ( $params as $name => $required ) {
      if ( $required ) {
        $this->writeParam($name, $event_data[$name]);
      }
      else {
        if ( $event_data[$name] ) {
          $this->writeParam($name, $event_data[$name]);
        }
      }
    }
    $this->endElement();

    $this->endElement();
  }
}
