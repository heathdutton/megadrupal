<?php

// define term ids of runtime options
define('MNN_AIRING_RUNTIME_28MIN',  850);
define('MNN_AIRING_RUNTIME_58MIN',  851);
define('MNN_AIRING_RUNTIME_88MIN',  852);
define('MNN_AIRING_RUNTIME_118MIN', 853);
define('MNN_AIRING_RUNTIME_OTHER',  854);
define('MNN_AIRING_RUNTIME_NULL',   917);

// define term ids of airing types
define('MNN_AIRING_TYPE_FILL',   970);
define('MNN_AIRING_TYPE_PROMO',   971);
define('MNN_AIRING_TYPE_SERIES',   969);
define('MNN_AIRING_TYPE_MAKEUP',   972);
define('MNN_AIRING_TYPE_SPECIAL',   973);


define('ONCE', 780);
define('MONTHLY', 775);
define('EVERY_TWO_WEEKS', 774);
define('WEEKLY', 781);
define('EVERY_WEEKDAY',771);

define('MNN_AIRING_DEFAULT_LENGTH', 60);

define('MNN_AIRING_FILL_DEST', 'mnn_airing_fill_dest');
/**  
 * Implements hook_init(). 
*/
function mnn_airing_init() {
  drupal_add_css(drupal_get_path('module', 'mnn_airing') .
                 '/mnn_airing.css');
}



/**                                                                            
 * Implementation of hook_menu().                                              
 */
function mnn_airing_menu() {
  $items = array();
  /**
    $items['node/%node/airings'] = 
      array('title' => 'Airings',
	    'description' => 'Takes airing entity and returns airings',
	    'page callback' => 'mnn_airing_tab_display',
	    'page arguments' => array(1),
	    'access callback' => 'mnn_airing_access_menu_tab',
	    'access arguments' => array(1),
	    'type' => MENU_LOCAL_TASK,
	    'weight' => 12,
	    );
  */
  
  return $items;
  }

//FIXME ENABLE MENU ITEM ABOVE AND MAKE THIS WORK SO WE CAN HAVE CORRECT TITLE
function mnn_airing_tab_display($node) {
  $view = views_get_view('cm_cm_show_airings');
  $output .= $view->execute_display('menu_tab');

  if(($node->type == 'cm_project') || ($node->type == 'cm_project'))  {
    return $output;
  }
}

//FIXME ENABLE MENU ITEM ABOVE AND MAKE THIS WORK SO WE CAN HAVE CORRECT TITLE
function mnn_airing_access_menu_tab($node) {
  if(($node->type == 'cm_project') || ($node->type == 'cm_project'))  {
    return user_access('access content');
  }
  return FALSE;
}

function mnn_airing_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'cm_airing_form') {

    //FETCH THE QUERY ARGS THAT WERE PASSED TO THE PROJECT PICKER AND STORED
    //IN THE SESSION BY THE PROJECT PICKER
    $query_args = $_SESSION[CM_PROJECT_PICKET_QUERY_ARGUMENT_SESSION_VARIABLE];
    $_SESSION[CM_PROJECT_PICKET_QUERY_ARGUMENT_SESSION_VARIABLE] = NULL;
    if ($query_args['mode'] == 'at-fill') {
      $_SESSION[MNN_AIRING_FILL_DEST] = TRUE;
    }
    else if (!$_SESSION[MNN_AIRING_FILL_DEST]){
      $_SESSION[MNN_AIRING_FILL_DEST] = FALSE;
    }
    //HIDE AND SET THE TITLE TO A TEMP VALUE, THIS WILL BE SET IN THE presave()
    $form['field_airing_title']['#type'] = "hidden";
    $form['field_airing_title'][LANGUAGE_NONE][0]['value']['#default_value']=
      "temp title";
    
    //FIND THE PROJECT FROM THE QUERY STRING, LOAD IT FIRST TO MAKE SURE ITS
    //REALLY A VALID NID
    $project_id = filter_input(INPUT_GET, CM_PROJECT_ID_QUERY_ARGUMENT_NAME);
    if (isset($project_id)) {
      $project = node_load($project_id);
    }
    if (!isset($project) && !$form['#entity']->airing_id) {
      drupal_goto("admin/project-picker/airing");
    }

    //SINCE NO PROJECT ID WAS FOUND IN THE URL, LOOK FOR AN EXISTING AIRING
    //ENTITY GRAB ITS PROJECT ID
    if (!isset($project_id)) {
      $project_id = $form['#entity']->field_airing_project_ref[LANGUAGE_NONE];
      $project_id = $project_id[0]['target_id'];
    }
    
    //REPLACE THE PROVIDED AUTOCOMPLETE OF SHOWS WITH A DROPDOWN OF THE 
    //SHOWS FOR THE PARTICULAR PROJECT
    $form['field_airing_show_ref']['#type'] = "hidden";  
    if ($project_id && ($query_args['mode'] != 'series')) {
      $shows = mnn_airing_get_shows_for_project_airing($project_id);
    }

    //IF WE HAVE SHOWS, ADD THE DROPDOWN FORM ELEMENT
    if (isset($shows) && $shows) {
      $show_id = $form['#entity']->field_airing_show_ref[LANGUAGE_NONE];
      $show_id = $show_id[0]['target_id'];
      $form['mnn_cm_show'] = 
	array(
	      '#type' => 'select',
	      '#options'=> $shows,
	      '#default_value' => $show_id,
	      '#prefix' => '<div id="mnn_cm_show_wrapper" class="cm-box">'.
	      "<h2>".t('Show')."</h2>",
	      '#suffix' => '</div>',
	      );
    }
   
    // SET DEFAULT CHANNEL 
    if (isset($query_args['channel'])) {
      $types = mnn_airing_get_vocab_terms_array(mnn_airing_get_channels_vid());
      foreach ($types as $tid=>$type) {
	if (($type) == "Channel ".$query_args['channel']) {  
	  $form['field_airing_channel'][LANGUAGE_NONE]['#default_value'][0] = 
	    $tid;
	}
      }
    }

    // SET DEFAULT AIRING TYPE 
    if (isset($query_args['mode'])) {
      $types = mnn_airing_get_vocab_terms_array(mnn_airing_get_types_vid());
      $type_arg = $query_args['mode'];
      if ($type_arg == "at-fill") {
	$type_arg = "fill";
      }
      foreach ($types as $tid=>$type) {
	if (str_replace(" ","-",strtolower($type)) == $type_arg) {
	  $form['field_airing_type'][LANGUAGE_NONE]['#default_value'][0]= $tid;
	}
      }
    }

    //passed in date information and project/show timing infromation
    //will determin which date/time/duration fields show up and what gets
    //prepopulated

    //assign by reference to cut down on clutter later
    $date_default =
      &$form['field_airing_date'][LANGUAGE_NONE][0]['#default_value'];

    //this returns a timestamp as well as filling project and show arrays
    $default_endtime = mnn_airing_default_endtime($project_id, 
						  $query_args['timestamp'],
						  $show_id,
						  $project_array,
						  $show_array);
    $hide_duration = FALSE;
    if (isset($query_args['timestamp'])) {
      //we have a passed in timestamp, set start time
      $date_default['value'] = date('Y-m-d H:i:s', $query_args['timestamp']);

      //SET $hide_duration TO  TRUE AS WE WILL SET THE END TIME BASED ON
      //THE PROJECT OR SHOW
      if ($default_endtime || $project_array['length']) {
	$hide_duration = TRUE;
      }
    }
    //if either the project or the show have timing information hide the 
    //duration
    else if ($project_array['length'] || $show_array['length']) {
      $hide_duration = TRUE;
    }

    //set css attributes to hide the duration
    if ($hide_duration) {
      $form['field_airing_duration']['#prefix'] = 
	'<div class="mnn-hide-duration">';
      $form['field_airing_duration']['#suffix'] = '</div>';
      $duration = &$form['field_airing_duration'][LANGUAGE_NONE][0]['value'];
      $duration['#default_value'] = $show_array['length'] ? 
	$show_array['length'] : $project_array['length'];
    }
    else {
      //add help text to duration
      $form['field_airing_duration'][LANGUAGE_NONE][0]['value']['#description']
	.="<br/><strong>"
	.t("Please note that if you select a Show above using its Episode 
            Number any timing information from that Show will overwrite 
            any duration entered into this field.")."</strong>";

      //prepopulate the duration field if it already exists
      if ($form['#entity']->airing_id) {
	$airing_length = mnn_airing_get_length($form['#entity']);
	$duration = &$form['field_airing_duration'][LANGUAGE_NONE][0]['value'];
	$duration['#default_value'] = $airing_length;
      }
    }    

    //set the default endtime to 100 years in future and then hide the field 
    $temp_endtime = strtotime('now') + 100*365*24*60*60;
    $date_default['value2'] = date('Y-m-d H:i:s', $temp_endtime);
    $form['field_airing_date']['#prefix'] = '<div class="mnn-hide-end">';
    $form['field_airing_date']['#suffix'] = '</div>';
    $form['cm_use_auto_title'] = array('#type'=>'value', '#value'=>TRUE);
    $form['cm_use_auto_endtime'] = array('#type'=>'value', '#value'=>TRUE);
    if (isset($query_args['mode'])) {
      $_SESSION['cm_schedule_mode'] = $query_args['mode'];
    }
  }
}

function mnn_airing_get_length($airing) {
  $date_field = &$airing->field_airing_date[LANGUAGE_NONE][0];
  $start = strtotime($date_field['value']);
  $end = strtotime($date_field['value2']);
		 
  if ($start && $end) {
    return $end-$start;
  }
  return NULL;
}

function mnn_airing_entity_presave($entity) {
  //only fire presave if one of the following custom field have been set
  //on the airing entity.
  if (!isset($entity->cm_use_auto_title) && !isset($entity_cm_use_auto_endtime)
      && !isset($entity->mnn_cm_show)) {
    return;
  }
  //set show on airing from custom show dropdown
  if (isset($entity->mnn_cm_show) && $entity->mnn_cm_show) {
    $entity->field_airing_show_ref[LANGUAGE_NONE][0]['target_id'] = 
      $entity->mnn_cm_show; 
  }

  if ($entity->cm_use_auto_title || $entity->cm_use_auto_endtime) {
    //build all necessary objects to create the auto-title
    $project_id =
      $entity->field_airing_project_ref[LANGUAGE_NONE][0]['target_id'];

    $show_id = $entity->field_airing_show_ref[LANGUAGE_NONE][0]['target_id'];
  
    $show_array = mnn_airing_get_show_array($show_id, $entity);
    $project_array = mnn_airing_get_project_array($project_id);
    
    if ($project_array) {
      $project = $project_array['node'];
    }
    if ($show_array) {
      $show = $show_array['node'];
      $epnum = $show_array['epnum'];
    }
    
    if ($entity->cm_use_auto_title) {
      $channel_tid = $entity->field_airing_channel[LANGUAGE_NONE][0]['tid'];
      $channel = taxonomy_term_load($channel_tid);
      $channel = str_replace('Channel ', 'Ch-', $channel->name);
    
      $day = 
	date('m/d/Y',
	     strtotime($entity->field_airing_date[LANGUAGE_NONE][0]['value']));
    
      $airing_title = $project->title;
      if (isset($epnum)) {
	$airing_title .= " Ep-".$epnum;
      }
      $airing_title .= " ".$channel." ".$day;
      
      $entity->field_airing_title[LANGUAGE_NONE][0]['value'] = $airing_title;
    }
    //SET THE ENDTIME FOR THE AIRING, BASED OFF SHOW, PROJECT, AND DURATION IN
    //THAT ORDER
    //this should prevent this from firing on imports
    if ($entity->cm_use_auto_endtime) {
      $duration = $entity->field_airing_duration[LANGUAGE_NONE][0]['value'];
      $start = 
	strtotime($entity->field_airing_date[LANGUAGE_NONE][0]['value']);

      if (isset($show) && $show_array['length']) {
	$end = $start + $show_array['length']; 
      }
      else if (isset($project) && $project_array['length']) {
	$end = $start + $project_array['length']; 
      }
      else {
	if ($duration) {
	  $end = $start + $duration; 
	}
	else {
	  $end = $start + MNN_AIRING_DEFAULT_LENGTH;
	}
      }
      //setting referenced $duration to zero, just used for helping with inputs
      $duration = 0;
      $end = date('Y-m-d H:i:s',$end);
      $entity->field_airing_date[LANGUAGE_NONE][0]['value2'] = $end;
    }
  }
}

function mnn_airing_entity_delete($entity, $type){
  if ($type == 'airing') {
    $results = mnn_airing_get_existing_conflict_entities($entity);

    while ($existing_conflict = $results->fetchObject()) {
      entity_delete('airingconflict', $existing_conflict->airing_conflict_id);
    }
  }
}

function mnn_airing_entity_update($entity, $type){
  if ($type == 'airing') {
    $results = mnn_airing_get_conflicting_airings($entity);
    $overlap_airings = array();
    while ($overlap_airing = $results->fetchObject()) {
      $overlap_airings[] = $overlap_airing->entity_id;
    }
    
    $results = mnn_airing_get_existing_conflict_entities($entity);
    $existing_conflicts = array();
    $conflict_entity_ids = array();
    while ($existing_conflict = $results->fetchObject()) {
      if ($entity->airing_id != $existing_conflict->original){
	$existing_conflicts[] = $existing_conflict->original;
	$conflict_entity_ids[$existing_conflict->original] = 
	  $existing_conflict->airing_conflict_id;
      }
      if ($entity->airing_id != $existing_conflict->overlap){
	$existing_conflicts[] = $existing_conflict->overlap;
	$conflict_entity_ids[$existing_conflict->overlap] = 
	  $existing_conflict->airing_conflict_id;
      }

    }
    $intersecting_airings = array_intersect($overlap_airings, 
					    $existing_conflicts);

    $new_conflicts = array_diff($overlap_airings, $intersecting_airings);
    foreach($new_conflicts as $airing_id) {
      $conflict = new stdClass();
      $conflict->uid = $user->uid;
      $conflict->created = strtotime('now');
      $conflict->changed = strtotime('now');
      $conflict->type = 'airingconflict';
      $conflict->field_conflict_airing_original[LANGUAGE_NONE][0]['target_id']=
	$airing_id;
      $conflict->field_conflict_airing_overlap[LANGUAGE_NONE][0]['target_id'] =
	$entity->airing_id;
      entity_save('airingconflict',$conflict);      
    }

    $resolved_conflicts = 
      array_diff($existing_conflicts, $intersecting_airings);

    foreach($resolved_conflicts as $airing_id) { 
      entity_delete('airingconflict', $conflict_entity_ids[$airing_id]);
    }

    //dsm($new_conflicts, 'new conflicts');
    //dsm($intersecting_airings, 'intersect');
    //dsm($overlap_airings, 'oairs');
    //dsm($existing_conflicts, 'excons');
    //dsm($resolved_conflicts, 'resoved');
    //dsm($conflict_entity_ids, 'ceids');
  }
}

function mnn_airing_get_existing_conflict_entities(&$airing) {
  $sql = 
    "SELECT ac.airing_conflict_id, 
     field_conflict_airing_overlap_target_id as overlap, 
     field_conflict_airing_original_target_id as original 
     FROM cm_airing_conflict ac 
     INNER JOIN field_data_field_conflict_airing_original o 
       ON o.entity_id=ac.airing_conflict_id 
     INNER JOIN field_data_field_conflict_airing_overlap ov 
       ON ov.entity_id=ac.airing_conflict_id
     WHERE field_conflict_airing_overlap_target_id=:airing_id 
     OR field_conflict_airing_original_target_id=:airing_id";
  return db_query($sql, array(':airing_id' => $airing->airing_id));  
}

function mnn_airing_entity_insert($entity, $type){
  if ($type == 'airing') {
    $project_id =
      $entity->field_airing_project_ref[LANGUAGE_NONE][0]['target_id'];

    //CALL FUNCTION TO GET THE NODE AND METADATA FOR THE PROJECT
    $project_array = mnn_airing_get_project_array($project_id);  
    if ($project_array) {
      $project = $project_array['node'];
    }
    
    //LOOK TO SEE IF WE NEED TO CREATE A AIRING CONFLICT
    $conflicts = mnn_airing_create_conflicts($entity);

    //LOOK TO SEE IF WE SHOULD SCHEDULE MORE SERIES AIRINGS 
    $schedule_mode = $_SESSION['cm_schedule_mode'];
    unset($_SESSION['cm_schedule_mode']);
    //IF WE ARE IN SERIES MODE AND THE PROJECT IS AN ACTIVE SERIES PROJECT
    //THEN SCHEDULE TO THE END OF THE QUARTER
    global $cm_scheduled_first_airing;  
    if (!isset($cm_scheduled_first_airing)) {
      $cm_scheduled_first_airing = TRUE;
    }
    if ($cm_scheduled_first_airing &&
	$airing->cm_airing_schedule_type!='subsequent_airing_series' &&
	$project_array['interval_for_series'] &&
	$project_array['active'] &&
	$project_array['project_type'] == 'Series' &&
	$project_array['length'] &&
	strtolower($schedule_mode) == 'series') {
      $cm_scheduled_first_airing = FALSE;
      
      mnn_airing_create_airings_for_quarter($entity, $project_array,
					    $langcode = NULL);
    }
  }
}


function mnn_airing_get_conflicting_airings(&$airing) {
  $start = $airing->field_airing_date[LANGUAGE_NONE][0]['value'];
  $end = $airing->field_airing_date[LANGUAGE_NONE][0]['value2'];
  $channel = $airing->field_airing_channel[LANGUAGE_NONE][0]['tid'];
  
  $sql = 
    "SELECT d.entity_id 
     FROM {field_data_field_airing_date} d
     INNER JOIN {field_data_field_airing_channel} c
     ON d.entity_id = c.entity_id
     WHERE c.entity_type = 'airing' 
     AND d.entity_type='airing'
     AND c.field_airing_channel_tid = :channel
     AND :start < d.field_airing_date_value2   
     AND :end > d.field_airing_date_value   
     AND :airing_id != d.entity_id
    "; 
  $args = array(
		':channel' => $channel,
		':start' => $start,
		':end' => $end,
		':airing_id' => $airing->airing_id,
		);
 
  return(db_query($sql, $args));
  
}

function mnn_airing_create_conflicts(&$airing){
  global $user;
  $results = mnn_airing_get_conflicting_airings($airing);

  $conflicts = array();
  while ($result = $results->fetchObject()) {
    $conflict = new stdClass();
    $conflict->uid = $user->uid;
    $conflict->created = strtotime('now');
    $conflict->changed = strtotime('now');
    $conflict->type = 'airingconflict';
    $conflict->field_conflict_airing_original[LANGUAGE_NONE][0]['target_id'] =
      $result->entity_id;
    $conflict->field_conflict_airing_overlap[LANGUAGE_NONE][0]['target_id'] =
      $airing->airing_id;
    entity_save('airingconflict',$conflict);
    $conflicts[] = $conflict;
  }
  return $conflicts;
}

function mnn_airing_get_shows_for_project_airing($project_id) {
  $sql = 
    "SELECT epnum.field_episode_number_value, s.nid as show_nid 
     FROM node s
     LEFT JOIN og_membership og_membership 
       ON (s.nid = og_membership.etid AND 
           og_membership.entity_type = 'node') 
     LEFT JOIN node p 
       ON og_membership.gid = p.nid
     INNER JOIN field_data_field_episode_number epnum
       ON epnum.revision_id=s.vid
     WHERE (p.nid = $project_id )
       AND (s.status = '1') 
       AND (s.type IN  ('cm_show'))
     ORDER BY epnum.field_episode_number_value desc";
  $results = db_query($sql);

  $ret = array(0=>"- Select a value -");
  while ($show = $results->fetchObject()) {
    $ret[$show->show_nid] = "Episode #".$show->field_episode_number_value;
  }
  return $ret;
}

function mnn_airing_get_vocab_terms_array($vid) {
  $terms_res = mnn_airing_get_vocab_terms($vid);

  foreach ($terms_res as $term) {
    $tid = $term['id'];
    $array[$tid] = $term['name'];
  }
  return $array;
}

function mnn_airing_get_channels_vid() {
  return mnn_airing_get_vid_for_name("Channel");
}

function mnn_airing_get_vid_for_name($name) {

  $global_var_name = 'vid_cache_'.$name;
  global $$global_var_name;

  if ( $name ) {
    $query = "SELECT vid FROM {taxonomy_vocabulary} WHERE name=:s LIMIT 1";
    $db_result = db_query($query, array(':s' => $name))->fetchField();
    $$global_var_name = $db_result;
    return $db_result;
  }
  else {
    return false;
  }
}


function mnn_airing_get_vocab_terms($vid) {
  $terms = array();
  $result = 
    db_query("SELECT tid, name FROM {taxonomy_term_data} WHERE vid = :d", 
	     array(':d' => $vid));

  foreach ($result as $record) {
    array_push($terms, array('id' => $record->tid, 'name' => $record->name));
  }
  return $terms;
}


function mnn_airing_get_types_vid() {
  return mnn_airing_get_vid_for_name("Airing Type");
}

function mnn_airing_entity_view($airing, $type, $view_mode, $langcode) {

  if ('airing' != $type) {
    return;
  }
  if ($_SESSION[MNN_AIRING_FILL_DEST]) {
    $_SESSION[MNN_AIRING_FILL_DEST] = FALSE;
    drupal_goto("admin/manage/scheduling", 
		array('query'=>array('airing_id'=>$airing->airing_id)));
    return;
  }
  //SEE IF WE NEED TO DISPLAY THE AIRING CONFLICT BLOCK AS A DRUPAL SET MESSAGE
  $view = 
    views_get_view('airing_conflict_block');
  if ($view) {
    //build and execute the view using the content type of the bucket
    $output = $view->execute_display('block');   
    $result_count = count($view->result);
    if ($result_count > 0) {
      drupal_set_message("<h2>".$output['subject']."</h2>".
			 t("There are airings that overlap!".
			   "Please fix them using the links below.").
			 $output['content'], 'error');
    }

  }



  $project_id=$airing->field_airing_project_ref[LANGUAGE_NONE][0]['target_id'];
  $show_id = $airing->field_airing_show_ref[LANGUAGE_NONE][0]['target_id'];
  
  $show_array = mnn_airing_get_show_array($show_id);
  $project_array = mnn_airing_get_project_array($project_id);

  
  $airing->content['field_airing_project_ref'][0]['#markup'] .= 
    " (".$project_id.")";

  //airing has not been resaved after import, doing this will make sure we 
  //write out a duration field
  if (!isset($airing->content['field_airing_duration'])) {
    $airing->field_airing_duration[LANGUAGE_NONE][0]['value'] = 0;
    entity_save('airing', $airing);
    $airing->content['field_airing_duration'] = 
      $airing->content['field_airing_date'];
    
    $airing->content['field_airing_duration']['#title'] = 'Duration';
    $airing->content['field_airing_duration']['#field_name'] = 
      'field_airing_duration';
    $airing->content['field_airing_duration']['#field_type'] = 'hms_field';
    $airing->content['field_airing_duration']['#formatter'] = 
      'hms_default_formatter';
    $airing->content['field_airing_duration']['#items'] = 
      array(array('value'=>0));

    $airing->content['field_airing_duration'][0] = 
      array('#theme' => 'hms',
	    '#value' => mnn_airing_get_length($airing),
	    '#format' => 'h:mm:ss',
	    '#leading_zero' => 1);	    
  }
  else {
    $airing->content['field_airing_duration'][0]['#value'] = 
      mnn_airing_get_length($airing);
  }
}


function mnn_airing_runtime_as_int($tid) {
  $runtimes = array (MNN_AIRING_RUNTIME_28MIN  => 28*60,
                     MNN_AIRING_RUNTIME_58MIN  => 58*60,
                     MNN_AIRING_RUNTIME_88MIN  =>  88*60,
                     MNN_AIRING_RUNTIME_118MIN => 118*60);
  if ($runtimes[$tid]) {
    return $runtimes[$tid];
  }
  return NULL;               
}


/**
 * Get airing show
 */
function mnn_airing_get_show_array($show_id, $entity = NULL) {
  $show_array = array();

  $show = isset($entity->cm_newly_created_show) ?
    $entity->cm_newly_created_show : NULL;

  if ($show) {
    $show_id = $show->nid;
    $show_array['nid'] = $show_id; 
  }
  else if ($show_id) {
    $show_array['nid'] = $show_id;
    $show = node_load($show_id);
  }

  if ($show) {
    $show_array['node'] = $show;
    $show_array['epnum'] = 
      $show->field_episode_number[LANGUAGE_NONE][0]['value'];

    $show_array['runtime_tid']=$show->field_runtime[LANGUAGE_NONE][0]['tid'];  
    
    $show_array['runtime_term_as_int'] = 
      mnn_airing_runtime_as_int($show_array['runtime_tid']);
      
    $show_array['runtime_term_data'] = 
      taxonomy_term_load($show_array['runtime_tid']);

    $in = $show->field_trans_timecode_in[LANGUAGE_NONE][0]['value'];
    $out = $show->field_trans_timecode_out[LANGUAGE_NONE][0]['value'];
    $show_array['transcode_length'] = ($out - $in);
    
    $in = $show->field_timecode_in[LANGUAGE_NONE][0]['value'];
    $out = $show->field_timecode_out[LANGUAGE_NONE][0]['value'];
    $show_array['regular_timed_length'] = ($out - $in);
    
    if ($show_array['transcode_length'] > 0) {
      $show_array['length'] = $show_array['transcode_length']; 
    }
    else if ($show_array['regular_timed_length'] > 0) {
      $show_array['length'] = $show_array['regular_timed_length']; 
    }
    else if ($show_array['runtime_term_as_int'] > 0) {
      $show_array['length'] = $show_array['runtime_term_as_int']; 
    }
    else if ($show_array['transcode_length'] > 0) {
      $show_array['length'] = $show_array['transcode_length']; 
    }    
    else {
      $show_array['length'] = NULL;
    }
  }
  return $show_array;
}

/**
 * Get airing project
 */
function mnn_airing_get_project_array($project_id) {
  
  $project_array = array();
  if ($project_id) {
    $project_array['project_id'] = $project_id;
    
    $project = node_load($project_id);
    $project_array['node'] = $project;
  
    $project_array['runtime_tid'] =
      $project->field_runtime[LANGUAGE_NONE][0]['tid'];  
    
    $project_array['runtime_term_as_int'] = 
      mnn_airing_runtime_as_int($project_array['runtime_tid']);
      
    if ($project_array['runtime_term_as_int'] > 0) {
      $project_array['length'] = $project_array['runtime_term_as_int']; 
    }
    else {
      $project_array['length'] = NULL;
    }
    
    $project_array['runtime_term_data'] = 
      taxonomy_term_load($project_array['runtime_tid']);
  
    $project_array['runtime_tid'] =
      $project->field_interval[LANGUAGE_NONE][0]['tid'];  
    
    $project_array['interval_term_data'] = 
      taxonomy_term_load($project_array['runtime_tid']);

    $project_array['project_type_tid'] = 
      $project->taxonomy_cm_project_types[LANGUAGE_NONE][0]['tid'];
   
    $project_array['project_type_term_data'] = 
      taxonomy_term_load($project_array['project_type_tid']);
    
    $project_array['project_type'] =     
      $project_array['project_type_term_data']->name;


    if ($project_array['interval_term_data']->tid == MONTHLY ||
	$project_array['interval_term_data']->tid == EVERY_TWO_WEEKS ||
	$project_array['interval_term_data']->tid == WEEKLY ||
	$project_array['interval_term_data']->tid == EVERY_WEEKDAY) {
      $project_array['interval_for_series'] = 
	$project_array['interval_term_data']->name;

    }

    $project_array['active'] = 
      $project->group_group[LANGUAGE_NONE][0]['value'];
  }
  return $project_array;
}


function mnn_airing_default_endtime($project_id,$starttime,$show_id = NULL,
				    &$project_array, &$show_array) {
  $endtime = NULL;
  $show_array = mnn_airing_get_show_array($show_id);
  $project_array = mnn_airing_get_project_array($project_id);


  if ($show_array && $show_array['length']) {
    $endtime =  $show_array['length'];   
  }
  else if ($project_array && $project_array['length']) {
    $endtime = $project_array['length'];   
  }
    
  if ($starttime && $endtime) {
    $endtime += $starttime;
    return $endtime;
  }

  return 0;
}

/**
 * Helper functions
 */

/**
 * Create airings for rest of quarter
 */
function mnn_airing_create_airings_for_quarter(&$airing, &$project_array,
					       $langcode = NULL) {
  if (!$langcode) {
    $langcode = LANGUAGE_NONE;
  }

  $project = $project_array['node'];
  $interval = $project_array['interval_term_data']->name;
  $start = $airing->field_airing_date[$langcode][0]['value'];
  $next_start = mnn_airing_get_next_air_date($start, $interval);
  $quarter = timespan_current('mnnquarter',$start);

  $output = "";
  $airing_date_cache = array();
  $airings = array($airing->airing_id=>$airing);
  $airing_date_cache[$airing->airing_id] = $start;
  while ($next_start < $quarter['end']) {
    $new_airing = mnn_airing_clone($airing, $langcode);
    $new_airing->field_airing_date[LANGUAGE_NONE][0]['value'] = $next_start;

    $new_airing->cm_use_auto_title = TRUE;
    $new_airing->cm_use_auto_endtime = TRUE;
    $new_airing->cm_airing_schedule_type = 'subsequent_airing_series';
    entity_save('airing', $new_airing);
    $airings[$new_airing->airing_id] = $new_airing;
    $airing_date_cache[$new_airing->airing_id] = $next_start;
    $next_start = mnn_airing_get_next_air_date($next_start, $interval);
  }
  $output .= 
    "<h2>You've successfully scheduled the series $project->title</h2>";
  $output .= "<table><th>Title</th><th>Times</th><th>Grid</th><th>Edit</th>";

  $quarter_airings = array(strtotime($start)=>$airing->airing_id);
  foreach($airings as $series_airing_id=>$series_airing) {
    $start_time = strtotime($airing_date_cache[$series_airing_id]);
    $end_time = $start_time + $project_array['runtime_term_as_int'];

    $output .=
      "<tr><td>".
      l($series_airing->field_airing_title[LANGUAGE_NONE][0]['value'],
	"airing/$series_airing_id").
      "</td><td> ".
      date('g:i:sa',$start_time)."-".date('g:i:sa', $end_time).
      "</td><td> ".
      $series_airing->field_airing_grid_link[LANGUAGE_NONE][0]['value'].
      "</td><td>".
      l(t('(Edit)'),"airing/$series_airing_id/edit").
      "</td></tr> ";      
    
    $quarter_airings[$start_time] = $series_airing_id;
  }

  $output .= 
    "<tr><td colspan=4>".
    l(t("Cancel Project"), "admin/projects/cancel/$project_id").
    "</td></tr></table>";

  $quarter_start = date('Y-m-d',strtotime($quarter['start']));
  $quarter_end = date('Y-m-d',strtotime($quarter['end']));
  $quarter_string = $quarter_start.'--'.$quarter_end;

  $project->field_replicated_quarters[$langcode][] = 
    array('value'=>$quarter_string);
  $project->field_conflicting_project = array();

  if ($project->field_replication_history) {
    //this will be set to false if the data is unserializable    
    $replication_history = 
      @unserialize($project->field_replication_history[$langcode][0]['value']);
  }
  else {
    $project->field_replication_history[$langcode] = array();
  }

  $replication_history = $replication_history ? $replication_history : 
    array();

  $replication_history[$quarter_string] = 
    $replication_history[$quarter_string] ?
    $replication_history[$quarter_string] : array();
  
  $interval = $project->field_interval[LANGUAGE_NONE][0]['tid'];
  $interval = $interval ? taxonomy_term_load($interval) : NULL;
  $interval = $interval ? $interval->name : NULL;

  $slot_time_string = ($interval == "Every Weekday") ? 
    "DAILY" : date('D', strtotime($start)); 

  $slot_index = $slot_time_string.'-'.date('G:i:s', strtotime($start)).
    '-CH-TID'.$airing->field_airing_channel[$langcode][0]['tid'];

  krsort($quarter_airings);
  $replication_history[$quarter_string][$slot_index] = $quarter_airings;
  $replication_history = serialize($replication_history);

  $project->field_replication_history[$langcode][0] = 
    array('value' => $replication_history);

  node_save($project);
  drupal_set_message($output);
}

/**
 * Clone new airing from existing
 */
function mnn_airing_clone($airing) {
  $new_airing = entity_create('airing', array());
  $arr_fields_to_copy = 
    array('field_airing_date', 'field_airing_channel', 'field_airing_notes', 
	  'field_airing_project_ref', 'field_airing_show_ref', 
	  'field_airing_type');
  foreach ($arr_fields_to_copy as $field) {
    $new_airing->$field = $airing->$field;
  }
  return $new_airing;
}

function computed_field_field_airing_grid_link_compute(&$entity_field, 
						       $entity_type, $entity, 
						       $field, $instance, 
						       $langcode, $items) {

  $entity_field[0]['value'] = l(t("View on Grid"), "admin/manage/scheduling", 
				array('query'=>
				      array('airing_id'=>$entity->airing_id)));
}

/**
 * Get airing next start date/time
 */
function mnn_airing_get_next_air_date($start, $interval) {
  switch($interval) {
    // daily
  case 'Daily':
  case 'Every Day':
    return mnn_airing_datestring($start," + 24 hours");
    // weekdays
  case 'Every Weekday':
    $next_weekday = mnn_airing_next_weekday($start);    
    return $next_weekday;
    // weekly
  case 'Weekly':
    return mnn_airing_datestring($start," + 168 hours");
    // every two weeks
  case 'Fortnightly':
  case 'Every Two Weeks':
    return mnn_airing_datestring($start," + 336 hours");
    // every three weeks
  case 'Every Three Weeks':
    return mnn_airing_datestring($start," + 504 hours");
    // monthly
  case 'Monthly':    
  case 'Monthly 1':
  case 'Monthly 2':
  case 'Monthly 3':
  case 'Monthly 4':
    $next_month = mnn_airing_get_next_month($start);
    return $next_month;
    // these are not series and should not air again
  case NULL:
  case 'Once':
    return mnn_airing_datestring("2069-12-31 00:00:00");     
  }
}

function mnn_airing_datestring($start, $str = NULL, $format = "Y-m-d H:i:s") {
  return date($format, strtotime($start . $str));
}


function mnn_airing_next_weekday($start) {
  $nextdays = array(strtotime($start.' + 1 Days'), 
		    strtotime($start.' + 2 Days'), 
		    strtotime($start.' + 3 Days'));
  for ($i = 0; $i < count($nextdays); $i++) {
    $daynum = (int) date('w', $nextdays[$i]);
    if (($daynum > 0) && ($daynum < 6)) {
      return date('Y-m-d H:i:s', $nextdays[$i]);
    }
  }

  
}
function mnn_airing_get_next_month($start) {
  $timestamp = strtotime($start);
  $week_of_month = mnn_airing_get_week_of_month($timestamp) - 1;
  $day_of_week = date('l', $timestamp);
  $year = date('Y', strtotime('+1 month',$timestamp)); 
  $month = date('F', strtotime('+1 month',$timestamp));
  $time = date('h:i:sa', $timestamp);
  $date_string = "+$week_of_month week $day_of_week $month $year $time";
  $next_month = strtotime($date_string);
  return date('Y-m-d H:i:s',$next_month);

  //return in "Y-m-d H:i:s" format
}

function mnn_airing_get_week_of_month(&$timestamp) {
  $day_of_month = date('j', $timestamp);
  $week_of_month = 0;
  while ($day_of_month > 0) {
    $week_of_month ++;
    $day_of_month = $day_of_month - 7;
  }
  return $week_of_month;
}
