<?php
/**
 * @file
 * Code for the MNN Project feature.
 */

include_once('mnn_project.features.inc');

define('MNN_PROJECT_OG_FIELD_FOR_RESERVATION','og_node1');

/**
 * Implements hook_menu().
 */
function mnn_project_menu() {
  $items = array();
  
  $items['project/autocomplete/single/%/%/%'] = array(
    'title' => 'Entity Reference Autocomplete',
    'page callback' => 'mnn_project_autocomplete_callback',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mnn_project_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'reservations_reservation_node_form') {
    $project_widget = 
      &$form[MNN_PROJECT_OG_FIELD_FOR_RESERVATION][LANGUAGE_NONE][0];

    $default_sub_field =  &$project_widget['default'][0]['target_id'];
    $admin_sub_field =  &$project_widget['admin'][0]['target_id'];

    $admin_sub_field['#default_value'] = 
      $default_sub_field['#default_value'] ? 
      $default_sub_field['#default_value'] : 
      $admin_sub_field['#default_value'];

    $admin_sub_field['#description'] = 'Enter the Project title or Project ID';
    $admin_sub_field['#title'] = "";
    $admin_sub_field['#autocomplete_path']  = 
      'project/autocomplete/single/og_node1/node/reservations_reservation';

    $default_sub_field['#type'] = "hidden";
    $default_sub_field['#default_value'] = array();
  }
}


//functions copied/altered from og_field

 /** 
* Value callback for a node_reference autocomplete element.
 *
 * Replace the node nid with a node title.
 */
function mnn_project_field_audience_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    // We're building the displayed 'default value': expand the raw nid into
    // "Group title [gid:n]".
    if (!empty($element['#default_value']) && $group = og_load($element['#default_value'])) {
      $value = og_label($group->gid);
      $value .= ' [gid:' . $group->gid . ']';
      return $value;
    }
  }
}

/**
 * Validation callback for a group audience autocomplete element.
 */
function mnn_project_field_audience_autocomplete_validate($element, &$form_state, $form) {
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $instance = $form_state['field'][$element['#field_name']][$element['#language']]['instance'];

  $value = $element['#value'];
  $gid = NULL;

  if (!empty($value)) {
    // Check whether we have an explicit "[gid:n]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*gid\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // Explicit gid. Check that the 'title' part matches the actual title for
      // the nid.
      list(, $label, $gid) = $matches;
      if (!empty($label)) {
        if ($label != og_label($gid)) {
          form_error($element, t('%name: label mismatch. Please check your selection.', array('%name' => $instance['label'])));
        }
      }
    }
    else {
      // No explicit gid (the submitted value was not populated by autocomplete
      // selection). Get the gid of a referencable node from the entered title.
      if ($reference = og_field_audience_potential_groups($value, 'equals', NULL, 1)) {
        $gid = key($reference);
      }
      else {
        form_error($element, t('%name: found no valid group with that label.', array('%name' => $instance['label'])));
      }
    }
  }

  // Set the element's value as the node id that was extracted from the entered
  // input.
  form_set_value($element, $gid, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function mnn_project_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Menu callback for the autocomplete results.
 */
function mnn_project_field_audience_autocomplete($field_name, $string = '') {
  $field = field_info_field($field_name);

  $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';
  $matches = array();

  $groups = mnn_project_field_audience_potential_groups($string, $match, array(), 10);
  foreach ($groups as $gid => $label) {
    // Add a class wrapper for a few required CSS overrides.
    $matches[$label . " [gid:$gid]"] = '<div class="group-autocomplete">' . $label . '</div>';
  }
  drupal_json_output($matches);
}

/**
 * Fetch an array of all candidate groups.
 *
 * This info is used in various places (allowed values, autocomplete
 * results, input validation...). Some of them only need the nids,
 * others nid + titles, others yet nid + titles + rendered row (for
 * display in widgets).
 *
 * The array we return contains all the potentially needed information,
 * and lets consumers use the parts they actually need.
 *
 * @param $field
 *   The field description.
 * @param $string
 *   Optional string to filter titles on (used by autocomplete).
 * @param $match
 *   Operator to match filtered name against, can be any of:
 *   'contains', 'equals', 'starts_with'
 * @param $ids
 *   Optional node ids to lookup (the $string and $match arguments will be
 *   ignored).
 * @param $limit
 *   If non-zero, limit the size of the result set.
 *
 * @return
 *   An array of valid nodes in the form:
 *   array(
 *     gid => 'rendered' -- The text to display in widgets (can be HTML)
 *   );
 *  @todo Check whether we still need the 'rendered' value (hook_options_list()
 *  does not need it anymore). Should probably be clearer after the 'Views'
 *  mode is ported.
 */
function mnn_project_field_audience_potential_groups($string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = $match . ':'
    . ($string !== '' ? $string : implode('-', $ids))
    . ':' . $limit;
  if (!isset($results[$cid])) {
    $groups = NULL;
    
    //first try to match the project id
    if (is_numeric($string)) {
      $groups = mnn_project_field_audience_potential_groups_project_id($string, 'equals', $ids, $limit); 
    } 
    
    // if the string wasn't a just a number or the number didn't match a 
    // project id, check the name like a normal og autocomplete
    if (!$groups) {
      $groups = mnn_project_field_audience_potential_groups_standard($string, $match, $ids, $limit);
    }
    
    // Store the results.
    $results[$cid] = !empty($groups) ? $groups : array();
  }

  return $results[$cid];
}

/**
 * Helper function for og_field_audience_potential_groups().
 */
function mnn_project_field_audience_potential_groups_standard($string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  $query = og_get_all_group(array(OG_STATE_ACTIVE), array('return query' => TRUE));

  $query->addField('og', 'label');
  if ($string !== '') {
    $args = array();
    switch ($match) {
      case 'contains':
        $title_clause = 'label LIKE :match';
        $args['match'] = '%' . $string . '%';
        break;

      case 'starts_with':
        $title_clause = 'label LIKE :match';
        $args['match'] = $string . '%';
        break;

      case 'equals':
      default: // no match type or incorrect match type: use "="
        $title_clause = 'label = :match';
        $args['match'] = $string;
        break;
    }
    $query->where($title_clause, $args);
  }
  elseif ($ids) {
    $query->condition('gid', $ids, 'IN');
  }

  $query->orderBy('label');

  if ($limit) {
    $query->range(0, $limit);
  }

  $gids = $query->execute()->fetchAllKeyed();
  $groups = og_load_multiple(array_keys($gids));
  foreach ($groups as $group) {
    $label = og_label($group->gid);
    $return[$group->gid] = $label;
  }
  return $return;
}

/**
 * Helper function for og_field_audience_potential_groups().
 */
function mnn_project_field_audience_potential_groups_project_id($string = '', $match = 'equals', $ids = array(), $limit = NULL) {
  //print 'mnn_project_field_audience_potential_groups_project_id';
  $query = og_get_all_group(array(OG_STATE_ACTIVE), array('return query' => TRUE));
  //print $query;
  $query->addField('og', 'label');
  if ($string !== '') {
    $args = array();
    switch ($match) {
     
      case 'equals':
      default: // no match type or incorrect match type: use "="
        $title_clause = 'etid = :match';
        $args['match'] = $string;
        break;
    }
    $query->where($title_clause, $args);
  }
  elseif ($ids) {
    $query->condition('gid', $ids, 'IN');
  }

  $query->orderBy('label');

  if ($limit) {
    $query->range(0, $limit);
  }

  $gids = $query->execute()->fetchAllKeyed();
  
  $groups = og_load_multiple(array_keys($gids));
  foreach ($groups as $group) {
    $label = og_label($group->gid);
    $return[$group->gid] = $label;
  }
  return $return;
}

/**                                                                             
 * Menu callback: autocomplete the label of an entity.                          
 */
function mnn_project_autocomplete_callback($type, $field_name, $entity_type,
                                           $bundle_name, $string = '') {

  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);
  
  $matches = array();
  
  if (!$field || !$instance || $field['type'] != 'entityreference' ||
      !field_access('edit', $field, $entity_type)) {
    return MENU_ACCESS_DENIED;
  }

  $handler = entityreference_get_selection_handler($field);
  
  $prefix = '';

  $entities = array();
  // Get an array of matching entities.                              
  //                                                    
  //print '<pre>';                             `                               
  //print 'sting = ' . $string;                 `                              
  $nodes = db_query("SELECT nid, title FROM {node} WHERE nid LIKE :string",
		    array('string' => $string));

  foreach ($nodes as $node) {
    $entities[$node->nid] = $node->title;
  }

  if (empty($entities)) {
    $nodes =
      db_query("SELECT nid, title             
                FROM {node}                                        
                WHERE title LIKE :string                    
                AND type='cm_project'",
               array(':string' => db_like($string).'%'));

    foreach ($nodes as $node) {
      $entities[$node->nid] = $node->title;
    }
  }
  
  if (empty($entities)) {
    $nodes =
      db_query("SELECT nid, title  
                FROM {node} 
                WHERE title LIKE :string     
                AND type='cm_project'",
               array(':string' => db_like($string).'%'));

    foreach ($nodes as $node) {
      $entities[$node->nid] = $node->title;
    }
  }
  
  if (empty($entities)) {
    $entities = $handler->getReferencableEntities
      ($string, $instance['widget']['settings']['match_operator'], 10);
  }
  // Loop through the products and convert them into autocomplete output. 
  foreach ($entities as $entity_id => $label) {
    $key = "$label ($entity_id)";
    // Names containing commas or quotes must be wrapped in quotes.    
    if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
      $key = '"' . str_replace('"', '""', $key) . '"';
    }
    $matches[$prefix . $key] = '<div class="reference-autocomplete">' .
      check_plain($label) . '</div>';
  }
  drupal_json_output($matches);
}

function mnn_project_node_view($node, $view_mode, $langcode) {

  if ($node->type == 'cm_project') {
      $cancel_project_link = l(t('Cancel Project'), 'admin/projects/cancel/'.
			       $node->nid);

      $node->content['cm_cancel_project'] = 
	array(
	      '#weight' => 10,
	      '#title' => '',
	      '#theme' => 'text',
	      '#title' => t(''),
	      '#label_display' => 'above',
	      '#language' => 'und',
	      '#items' => array('value' => $cancel_project_link),
	      '#formatter' => 'text_default', 
	      '0' => array('#markup' => $cancel_project_link),
	      );
  }
}