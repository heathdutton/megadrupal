<?php

/**
 * @file
 * Tests for rdfviz.module.
 */

class RdfvizTestCase extends DrupalWebTestCase {
  protected $admin_user;
  protected $any_user;

  public static function getInfo() {
    return array(
      'name' => 'RDFViz functionality',
      'description' => 'Try running RDFViz over the samples and confirm output is as expected.',
      'group' => 'RDFViz',
    );
  }

  /**
   * Enable modules and create users with specific permissions.
   */
  function setUp() {
    parent::setUp('rdfviz');
    // Create users.
    $this->admin_user = $this->drupalCreateUser(array('administer RDFViz', 'access RDFViz'));
    $this->any_user = $this->drupalCreateUser(array('access RDFViz'));
  }


  /**
   * Login users, Access some RDFViz pages, compare with the expected output.
   */
  function testExamples() {
    // Login the admin user.
    $this->drupalLogin($this->admin_user);

    // A predefined list of source files to scan, and the text we expect
    // to see once it's processed.
    $sources = array(
      'site_structure_example.html' => array(
         'xlink:title="Widgets"',
         'xlink:title="Editor"',
         '<title>user:4</title>',
      )
    );

    // Get the SVG-rendered result of all the samples, and see if the result
    // has the expected strings in the output.
    foreach ($sources as $sourcefile => $searchtexts) {
      $path = drupal_get_path('module', 'rdfviz') . '/tests/' . $sourcefile;
      // Copy these sample files into the files dir so that Drupal will
      // allow me to read them.
      $destination_file_uri = file_build_uri($sourcefile);
      file_unmanaged_copy($path, $destination_file_uri);

      $request_path = 'rdfviz/svg/' . file_create_url($destination_file_uri);
      $this->drupalGet($request_path);
      // Do text comparison on the response, find expected substrings
      foreach ($searchtexts as $searchtext) {
        $this->assertRaw($searchtext);
      }

    }
  }

}
