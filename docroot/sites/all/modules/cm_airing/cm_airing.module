<?php

/**
 * Implements hook_entity_info().
 */
function cm_airing_entity_info() {
  $return = array(
    'airing' => array(
      'label' => t('Airing'),
      'entity class' => 'Airing',
      'controller class' => 'AiringController',
      'base table' => 'cm_airing',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'airing_id',
        'title' => 'title',
        'bundle' => 'type',
      ),
       // Attach bundles - i.e. alternative configurations of fields associated with a main entity.
      'bundles' => array(
        'airing' => array(
          'label' => 'Airing',
          // Information below is used by the Field UI - they "attach" themselves here and lets us
          // do the standard field management that all the core entities enjoy.
          'admin' => array(
            'path' => 'admin/structure/cm-airing/manage',
            'access arguments' => array('administer cm_airing'),
          ),
        ),
      ),
      'load hook' => 'cm_airing_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'cm_airing',
      'access callback' => 'cm_airing_access',
    ),
  );

  return $return;
}


/**
 * Implements hook_menu().
 */
function cm_airing_menu() {
  $items = array();

  $items['airing/add'] = array(
    'title' => 'Add airing',
    'page callback' => 'cm_airing_add',
    'access arguments' => array('create cm_airing entities'),
  );

  $airing_uri = 'airing/%cm_airing';
  $airing_uri_argument_position = 1;

  $items[$airing_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('airing', $airing_uri_argument_position),
    'page callback' => 'cm_airing_view',
    'page arguments' => array($airing_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'airing', $airing_uri_argument_position),
    'file' => 'cm_airing.pages.inc',
  );

  $items[$airing_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$airing_uri . '/delete'] = array(
    'title' => 'Delete airing',
    'title callback' => 'cm_airing_label',
    'title arguments' => array($airing_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_airing_delete_form', $airing_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'airing', $airing_uri_argument_position),
    'file' => 'cm_airing.admin.inc',
  );

  $items[$airing_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_airing_form', $airing_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'airing', $airing_uri_argument_position),
    'file' => 'cm_airing.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/content/airing'] = array(
    'title' => 'Airings',
    'description' => 'Manage Airings',
    'page callback' => 'cm_airing_content',
    'access arguments' => array('administer cm_airing'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );
  
  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in airing_entity_info() above.
  $items['admin/structure/cm-airing/manage'] = array(
    'title' => 'Airings',
    'description' => 'Manage Airing Entity Structure',
    'page callback' => 'cm_airing_admin_page',
    'access arguments' => array('administer cm_airing'),
    'weight' => -50,
  );  
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function cm_airing_permission() {
  $permissions = array(
    'administer cm_airing' => array(
      'title' => t('Administer airings'),
      'description' => t('Allows users to configure airing fields.'),
      'restrict access' => TRUE,
    ),
    'create cm_airing entities' => array(
      'title' => t('Create airings'),
      'description' => t('Allows users to create airings.'),
      'restrict access' => TRUE,
    ),
    'view cm_airing entities' => array(
      'title' => t('View airings'),
      'description' => t('Allows users to view airings.'),
      'restrict access' => TRUE,
    ),
    'edit any cm_airing entities' => array(
      'title' => t('Edit any airings'),
      'description' => t('Allows users to edit any airings.'),
      'restrict access' => TRUE,
    ),
    'edit own cm_airing entities' => array(
      'title' => t('Edit own airings'),
      'description' => t('Allows users to edit own airings.'),
      'restrict access' => TRUE,
    ),
    'delete any cm_airing entities' => array(
      'title' => t('Delete any airings'),
      'description' => t('Allows users to delete any airings.'),
      'restrict access' => TRUE,
    ),
    'delete own cm_airing entities' => array(
      'title' => t('Delete own airings'),
      'description' => t('Allows users to Delete own airings.'),
      'restrict access' => TRUE,
    ),

  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function cm_airing_entity_property_info_alter(&$info) {
  $properties = &$info['cm_airing']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer cm_airing',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the airing."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer cm_airing',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}


/*******************************************************************************
 ********************************* Airing API's **********************************
 ******************************************************************************/

/**
 * Access callback for airing.
 */
function cm_airing_access($op, $airing, $account = NULL, $entity_type = NULL) {

  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  
  
  switch ($op) {
    case 'create':
      return user_access('administer cm_airing', $account)
          || user_access('create cm_airing entities', $account);
    case 'view':
      return user_access('administer cm_airing', $account)
          || user_access('view cm_airing entities', $account);
    case 'update':
    case 'edit':
      return user_access('administer cm_airing')
          || user_access('edit any cm_airing entities')
          || (user_access('edit own cm_airing entities') && ($airing->uid == $account->uid));
    case 'delete':
      return user_access('administer cm_airing')
          || user_access('delete any cm_airing entities')
          || (user_access('delete own cm_airing entities') && ($airing->uid == $account->uid));

  }
}

/**
 * Load a airing.
 */
function cm_airing_load($airing_id, $reset = FALSE) {
  $airings = cm_airing_load_multiple(array($airing_id), array(), $reset);
  return reset($airings);
}

/**
 * Load multiple airings based on certain conditions.
 */
function cm_airing_load_multiple($airing_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('airing', $airing_ids, $conditions, $reset);
}

/**
 * Save airing.
 */
function cm_airing_save($airing) {
  entity_save('airing', $airing);
}

/**
 * Delete single airing.
 */
function cm_airing_delete($airing) {
  entity_delete('airing', entity_id('airing' ,$airing));
}

/**
 * Delete multiple airings.
 */
function cm_airing_delete_multiple($airing_ids) {
  entity_delete_multiple('airing', $airing_ids);
}


/**
  * Implements hook_views_api().
  */
function cm_airing_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'cm_airing'),
  );
}

/**
 * Airing Form.
 */
function cm_airing_form($form, &$form_state, $airing) {
  
  //dsm($airing);
  
  $form_state['airing'] = $airing;

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $airing->uid,
  );
  
  field_attach_form('airing', $airing, $form, $form_state);

  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions'] = array(
    '#weight' => 100,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save airing'),
    '#submit' => $submit + array('cm_airing_form_submit'),
  );

  // Show Delete button if we edit airing.
  $airing_id = entity_id('cm_airing' ,$airing);
  if (!empty($airing_id) && cm_airing_access('edit', $airing)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('cm_airing_form_submit_delete'),
    );
  }

  $form['#validate'][] = 'cm_airing_form_validate';

  return $form;
}

function cm_airing_form_validate($form, &$form_state) {

}

/**
 * Airing submit handler.
 */
function cm_airing_form_submit($form, &$form_state) {
  $airing = $form_state['airing'];

  entity_form_submit_build_entity('airing', $airing, $form, $form_state);

  cm_airing_save($airing);

  $airing_uri = entity_uri('airing', $airing);

  $form_state['redirect'] = $airing_uri['path'];

  drupal_set_message(t('Airing %title saved.', array('%title' => entity_label('airing', $airing))));
}

function cm_airing_form_submit_delete($form, &$form_state) {
  $airing = $form_state['airing'];
  $airing_uri = entity_uri('airing', $airing);
  $form_state['redirect'] = $airing_uri['path'] . '/delete';
}

/**
 * Delete confirmation form.
 */
function cm_airing_delete_form($form, &$form_state, $airing) {
  $form_state['airing'] = $airing;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['airing_type_id'] = array('#type' => 'value', '#value' => entity_id('cm_airing' ,$airing));
  $airing_uri = entity_uri('airing', $airing);
  return confirm_form($form,
    t('Are you sure you want to delete airing %title?', array('%title' => entity_label('cm_airing', $airing))),
    $airing_uri['path'],
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Delete form submit handler.
 */
function cm_airing_delete_form_submit($form, &$form_state) {
  $airing = $form_state['airing'];
  cm_airing_delete($airing);

  drupal_set_message(t('Airing %title deleted.', array('%title' => entity_label('cm_airing', $airing))));

  $form_state['redirect'] = '<front>';
}

/**
 * Provide view of airings that appears as a content tab like comments
 */
function cm_airing_content() {
  
  $query = array('destination' => 'admin/content/airing');
  
  $output = '<ul class="action-links"><li>';
  $output .= l('Add Airing', 'airing/add', array('query' => $query));
  $output .= '</li></ul>';
  
  $view = views_get_view('airings');
  $output .= $view->execute_display('default', NULL);

  return $output;
}


/**
 * Just provide some airing info for the entity administration page.
 * This can be expanded to add more information / a list of all created entites, etc.
 */
function cm_airing_admin_page() {
  //$output = 'Welcome to the administration page for your Airing Entities.<br/>';
  //$output .= '<ul class="action-links"><li><a href="/airing/add">Add Airing</a></li></ul>';
  //return $output;
  
  // Not sure why we'd need an admin landing page, so I'm redirectin to field
  
  drupal_goto('admin/structure/cm-airing/manage/fields');
}

/**
 * Creates an airing entity for us - simply intializing the main variables and
 * sending us to a form to add in the rest.
 */
function cm_airing_add() {
/*
  
  $airing = (object) array(
    'airing_id' => '',
    'type' => 'airing',
    'name' => '',
  );
  
*/
  $airing = entity_create('airing', array('type' => 'airing'));

  return drupal_get_form('cm_airing_form', $airing);
}

/**
 * Implementing the uri callback defined
 */
function cm_airing_uri($airing) {
  return array(
    'path' => 'airing/' . $airing->airing_id,
  );
}




/**
 *
 * Implementation of hook_entity_presave()
 *
 * Run through a ruleset to set the airing endtime based on several criteria
 */

function cm_airing_entity_presave($airing, $type) {

  if ('airing' != $type) {
    return;
  }
    
  //Airing times are stored, pulled, and presented in UTC, not local timzone
  //but site and users and airing form default to local timezone from site regional settings
  //so we manually adjust the date here
    
  if ($airing->field_airing_date[LANGUAGE_NONE][0]['timezone'] != 'UTC') {
  
    // DST Check
    $now_dst = localtime(time(), TRUE);
    
    $mod_start_date = strtotime($airing->field_airing_date[LANGUAGE_NONE][0]['value'])+date("Z");
    $mod_end_date = strtotime($airing->field_airing_date[LANGUAGE_NONE][0]['value2'])+date("Z");
    
    $mod_start_date_dst = localtime($mod_start_date, TRUE);  
    $mod_end_date_dst = localtime($mod_end_date, TRUE);
    
    // DST Check
    $now_dst = localtime(time(), TRUE);
    
    $mod_start_date_dst = localtime($mod_start_date, TRUE);  
    $mod_end_date_dst = localtime($mod_end_date, TRUE);
    
    if ($now_dst['tm_isdst'] < $mod_start_date_dst['tm_isdst']) {
      $mod_start_date = $mod_start_date + 3600;
    }
    
    if ($now_dst['tm_isdst'] > $mod_start_date_dst['tm_isdst']) {
      $mod_start_date = $mod_start_date - 3600;
    }
    
    if ($now_dst['tm_isdst'] < $mod_end_date_dst['tm_isdst']) {
      $mod_end_date = $mod_end_date  + 3600;
    }
    
    if ($now_dst['tm_isdst'] > $mod_end_date_dst['tm_isdst']) {
      $mod_end_date = $mod_end_date  - 3600;
    }
    
    $airing->field_airing_date[LANGUAGE_NONE][0]['value'] = date("Y-m-d H:i:s",$mod_start_date);
    $airing->field_airing_date[LANGUAGE_NONE][0]['value2'] = date("Y-m-d H:i:s",$mod_end_date);
  
    $airing->field_airing_date[LANGUAGE_NONE][0]['timezone'] = 'UTC';
    $airing->field_airing_date[LANGUAGE_NONE][0]['timezone_db'] = 'UTC'; 
    $airing->field_airing_date[LANGUAGE_NONE][0]['offset'] = 0;
    $airing->field_airing_date[LANGUAGE_NONE][0]['offset2'] = 0;   
  } 
}

/**
 *  Implementation of hook_entity_vie()
 */
function cm_airing_entity_view($airing, $type, $view_mode, $langcode) {

  if ('airing' != $type) {
    return;
  }

  $langcode = 'und';
    
  if ($airing->field_airing_date['und'][0]['timezone'] != 'UTC') {
      
    $mod_start_date = strtotime($airing->field_airing_date[LANGUAGE_NONE][0]['value'])-date("Z");
    $mod_end_date = strtotime($airing->field_airing_date[LANGUAGE_NONE][0]['value2'])-date("Z");
    
    // DST Check
    $now_dst = localtime(time(), TRUE);
        
    $mod_start_date_dst = localtime($mod_start_date, TRUE);  
    $mod_end_date_dst = localtime($mod_end_date, TRUE);
    
    // THIS IS TO THE RESERSE CONVERSION DONE IN cm_airing_entity_presave

    if ($now_dst['tm_isdst'] > $mod_start_date_dst['tm_isdst']) {
      $mod_start_date = $mod_start_date + 3600;
    }
    
    if ($now_dst['tm_isdst'] < $mod_start_date_dst['tm_isdst']) {
      $mod_start_date = $mod_start_date - 3600;
    }
    
    if ($now_dst['tm_isdst'] > $mod_end_date_dst['tm_isdst']) {
      $mod_end_date = $mod_end_date  + 3600;
    }
    
    if ($now_dst['tm_isdst'] < $mod_end_date_dst['tm_isdst']) {
      $mod_end_date = $mod_end_date  - 3600;
    }
    
    $airing->field_airing_date[LANGUAGE_NONE][0] = array(
       'value' => date("Y-m-d H:i:s", $mod_start_date),
       'value2' => date("Y-m-d H:i:s", $mod_end_date),
       'timezone' => 'UTC',
       'timezone_db' => 'UTC',
    );
      
    $date_view = field_view_field('airing', $airing, 'field_airing_date'); 

    $airing->content['field_airing_date'][0]['#markup'] = $date_view[0]['#markup'];  
  }
  
  $duration_len = strtotime($airing->field_airing_date['und'][0]['value2']) - strtotime($airing->field_airing_date['und'][0]['value']);
  $duration_mins = floor($duration_len / 60);
  $duration_secs = $duration_mins % 60;
   
  $duration = $duration_mins . " minutes " . $duration_secs . " seconds";
  $airing->content['duration'] = array(
    '#weight' => 10,
    '#theme' => 'text',
    '#title' => t('Duration'),
    '#label_display' => 'above',
    '#language' => 'und',
    '#items' => array('value' => t($duration)),
    '#formatter' => 'text_default', 
    '0' => array('#markup' => t('<b>Duration: </b><br>' . $duration)),
  );
}
