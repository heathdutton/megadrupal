<?php
/**
 * @file
 * An experience field using the Field Types API.
 */

module_load_include('theme', 'experience', 'experience');

/**
 * Implements hook_field_info().
 */
function experience_field_info() {
  return array(
    'experience' => array(
      'label' => t('Experience'),
      'description' => t('This field stores the experience.'),
      'default_widget' => 'experience_external',
      'default_formatter' => 'experience_default',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function experience_field_is_empty($item, $field) {
  return empty($item['experience']);
}

/**
 * Implements hook_theme().
 */
function experience_theme() {
  $path = drupal_get_path('module', 'experience');
  module_load_include('theme', 'experience', 'experience');

  $base = array(
    'file' => 'experience.theme',
    'path' => "$path",
  );
  $themes = array(
    'experience_select' => $base + array('render element' => 'element'),
  );

  return $themes;
}

/**
 * Implements hook_field_formatter_info().
 */
function experience_field_formatter_info() {
  return array(
    'experience_default' => array(
      'label' => t('Experience'),
      'field types' => array('experience'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function experience_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'experience_default':
      foreach ($items as $delta => $item) {
        if (!empty($item['experience'])) {
          if (strpos($item['experience'], '.')) {
            if ($item['experience'] == 0.001) {
              if ($instance['widget']['settings']['include_fresher']) {
                $element[$delta] = array(
                  '#markup' => t('Fresher'),
                );
              }
            }
            else {
              $item['experience'] = number_format($item['experience'], 2, '.', '');
              $match = explode('.', $item['experience']);
              if ($match[1] < 10) {
                $match[1] = intval($match[1]);
              }
              if ($match[0]) {
                $element[$delta] = array(
                  '#markup' => t('@year Year(s) @month Month(s)', array('@year' => $match[0], '@month' => $match[1])),
                );
              }
              else {
                $element[$delta] = array(
                  '#markup' => t('@month Month(s)', array('@month' => $match[1])),
                );
              }
            }
          }
          else {
            $element[$delta] = array(
              '#markup' => t('@year Year(s)', array('@year' => $item['experience'])),
            );
          }
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function experience_field_widget_info() {
  $settings = array(
    'settings' => array(
      'label_position' => 'above',
      'include_fresher' => 0,
      'year_start' => 0,
      'year_end' => 30,
    ),
  );

  return array(
    'experience_external' => array(
      'label' => t('Select list'),
      'field types' => array('experience'),
    ) + $settings,
  );
}

/**
 * Implements hook_field_widget_form().
 */
function experience_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['experience']) ? $items[$delta]['experience'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'experience_external':

      if (!empty($value) && $value != 0) {
        if (strpos($value, '.')) {
          if ($value == 0.001) {
            $match = array(0 => 'fresher', 1 => 0);
          }
          else {
            $value = number_format($value, 2, '.', '');
            $match = explode('.', $value);
            if ($match[1] < 10) {
              $match[1] = intval($match[1]);
            }
          }
        }
        else {
          $match = array(0 => $value, 1 => 0);
        }
      }
      else {
        $match = array(0 => '', 1 => '');
      }

      $year_options = array();
      if ($instance['widget']['settings']['include_fresher']) {
        $year_options['fresher'] = t('Fresher');
      }

      $year_start = $instance['widget']['settings']['year_start'];
      $year_end = $instance['widget']['settings']['year_end'];

      $year_options += range($year_start, $year_end);

      $widget += array(
        '#type' => 'div',
        '#element_validate' => array('experience_external_validate'),
        '#delta' => $delta,
      );
      $widget['year'] = array(
        '#type' => 'select',
        '#title' => t('Years'),
        '#options' => $year_options,
        '#empty_option' => '',
        '#default_value' => $match[0],
        '#attributes' => array('class' => array('year-entry')),
      );
      $widget['month'] = array(
        '#type' => 'select',
        '#title' => t('Months'),
        '#options' => range(0, 11),
        '#empty_option' => '',
        '#default_value' => $match[1],
        '#attributes' => array('class' => array('month-entry')),
      );

      if ($instance['widget']['settings']['label_position'] == 'within') {
        $widget['year']['#empty_option'] = t('-Year');
        $widget['month']['#empty_option'] = t('-Month');
        $widget['year']['#title_display'] = 'invisible';
        $widget['month']['#title_display'] = 'invisible';
      }

      break;
  }

  $element['#attached']['js'][] = drupal_get_path('module', 'experience') . '/experience.js';
  $element['#tree'] = TRUE;
  $element['#theme_wrappers'] = array('experience_select');
  $element['#type'] = 'experience-select';
  $element['experience'] = $widget;
  return $element;
}

/**
 * Validate the individual fields and then convert them into a single Float.
 */
function experience_external_validate($element, &$form_state) {
  $input_exists = NULL;
  $input = drupal_array_get_nested_value($form_state['values'], $element['#parents'], $input_exists);

  $entered = array_values(array_filter($input));

  $error_field = implode('][', $element['#parents']);

  if (empty($entered) && $element['#required']) {
    $message = t('Experience field is required.');
    form_set_error($error_field, $message);
    return;
  }
  elseif ($input['year'] != 'fresher') {
    if ($input['year'] === '' && is_numeric($input['month'])) {
      $message = t('The experience field is not valid.');
      form_set_error($error_field, $message);
      return;
    }
    elseif (is_numeric($input['year']) && $input['month'] === '') {
      $message = t('The experience field is not valid.');
      form_set_error($error_field, $message);
      return;
    }
    elseif ($input['year'] !== '' && $input['month'] !== '') {
      if ($input['year'] === '0' && $input['month'] === '0') {
        $message = t('The experience field is not valid.');
        form_set_error($error_field, $message);
        return;
      }
    }
  }

  if (!empty($input)) {
    if ($input['year'] == '' && $input['month'] == '') {
      $value = '';
    }
    else {
      if ($input['year'] == 'fresher') {
        $value = 0.001;
      }
      else {
        $year = $input['year'] ? $input['year'] : 0;
        $month = $input['month'] ? $input['month'] : 0;
        if ($month < 10) {
          $month = '0' . $month;
        }
        $value = $year . '.' . $month;
      }
    }
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Implements hook_field_widget_settings_form().
 */
function experience_field_widget_settings_form($field, $instance) {
  module_load_include('inc', 'experience', 'experience_admin');
  return _experience_field_widget_settings_form($field, $instance);
}

/**
 * Returns all fields created on the system of the type defined in experience.
 */
function experience_get_mymodule_fields() {
  $types = array_keys(experience_field_info());
  $fields = array();
  foreach (field_info_fields() as $field) {
    if (in_array($field['type'], $types)) {
      $fields[] = $field;
    }
  }
  return $fields;
}
