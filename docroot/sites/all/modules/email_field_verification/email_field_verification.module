<?php

/**
 * @file
 * Email Field Verification
 * Send out and process confirmation links
 */

define("EMAIL_FIELD_VERIFICATION_TIMEOUT_NEVER", 0);
define("EMAIL_FIELD_VERIFICATION_TIMEOUT_24H", 1);
define("EMAIL_FIELD_VERIFICATION_TIMEOUT_3DAYS", 2);
define("EMAIL_FIELD_VERIFICATION_TIMEOUT_1WEEK", 3);
define("EMAIL_FIELD_VERIFICATION_TIMEOUT_CUSTOM", 4);

define("EMAIL_FIELD_VERIFICATION_RESPONSE_NONE", 0);
define("EMAIL_FIELD_VERIFICATION_RESPONSE_UNCONFIRM", 1);
define("EMAIL_FIELD_VERIFICATION_RESPONSE_EMPTY", 2);
define("EMAIL_FIELD_VERIFICATION_RESPONSE_UNPUBLISH", 3);
define("EMAIL_FIELD_VERIFICATION_RESPONSE_DELETE", 4);

define("EMAIL_FIELD_VERIFICATION_STATUS_PENDING", 0);
define("EMAIL_FIELD_VERIFICATION_STATUS_CONFIRMED", 1);
define("EMAIL_FIELD_VERIFICATION_STATUS_TIMEOUT", 2);

/**
 * Returns the settings array with default values.
 */
function _email_field_verification_get_settings_defaults($setting = NULL) {
  $settings = array(
    'timeout' => array(
      EMAIL_FIELD_VERIFICATION_TIMEOUT_NEVER => array(
        'label' => t("Never"),
        'offset_seconds' => 0,
      ),
      EMAIL_FIELD_VERIFICATION_TIMEOUT_24H => array(
        'label' => t("24h"),
        'offset_seconds' => 60 * 60 * 24,
      ),
      EMAIL_FIELD_VERIFICATION_TIMEOUT_3DAYS => array(
        'label' => t("3 days"),
        'offset_seconds' => 60 * 60 * 24 * 3,
      ),
      EMAIL_FIELD_VERIFICATION_TIMEOUT_1WEEK => array(
        'label' => t("1 week"),
        'offset_seconds' => 60 * 60 * 24 * 7,
      ),
      EMAIL_FIELD_VERIFICATION_TIMEOUT_CUSTOM => array(
        'label' => t("Custom"),
        'offset_seconds' => 0,
        // Overridden by the actual custom value.
      ),
    ),
    'timeout_response' => array(
      EMAIL_FIELD_VERIFICATION_RESPONSE_NONE => array(
        'label' => t("None. (All relevant hooks of the Email Field Verification module will still be invoked.)"),
        'response' => 'none',
      ),
      EMAIL_FIELD_VERIFICATION_RESPONSE_UNCONFIRM => array(
        'label' => t("Mark field unconfirmed"),
        'response' => 'mark_unconfirmed',
      ),
      EMAIL_FIELD_VERIFICATION_RESPONSE_EMPTY => array(
        'label' => t("Empty field"),
        'response' => 'empty_field',
      ),
    ),
  );

  if (module_exists('entity')) {
    $settings['timeout_response'] += array(
      EMAIL_FIELD_VERIFICATION_RESPONSE_UNPUBLISH => array(
        'label' => t("Unpublish entity/content & mark field unconfirmed"),
        'response' => 'unpublish_entity',
      ),
      EMAIL_FIELD_VERIFICATION_RESPONSE_DELETE => array(
        'label' => t("Delete entity/content"),
        'response' => 'delete_entity',
      ),
    );
  }

  if (!empty($settings[$setting])) {
    return $settings[$setting];
  }
  else {
    return $settings;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_field_verification_form_field_ui_field_edit_form_alter(&$form, &$form_state) {

  if ($form['#field']['type'] != 'email' || empty($form['instance'])) {
    return TRUE;
  }

  $settings = empty($form['#instance']['email_field_verification_container']) ? FALSE : $form['#instance']['email_field_verification_container'];

  $form['instance']['email_field_verification_container'] = array(
    '#type' => 'fieldset',
    '#title' => t("Email verification settings"),
    '#collapsible' => FALSE,
    '#description' => t("Should the email require verification by link sent to it."),
  );

  $form['instance']['email_field_verification_container']['email_field_verification_require_verification'] = array(
    '#type' => 'checkbox',
    '#title' => t("Require verification mail"),
    '#default_value' => empty($settings) ? FALSE : TRUE,
  );
  $form['instance']['email_field_verification_container']['email_field_verification_publish_confirmed'] = array(
    '#type' => 'checkbox',
    '#title' => t("Publish on verification"),
    '#states' => array(
      'visible' => array(
        ':input[name="instance[email_field_verification_container][email_field_verification_require_verification]"]' => array('checked' => TRUE),
      ),
    ),
    '#default_value' => empty($settings) ? FALSE : $settings['email_field_verification_publish_confirmed'],
  );

  $timeout_options = array();
  foreach (_email_field_verification_get_settings_defaults('timeout') as $index => $value) {
    $timeout_options[$index] = $value['label'];
  }
  $form['instance']['email_field_verification_container']['email_field_verification_timeout'] = array(
    '#type' => 'select',
    '#title' => t("Timeout verification link"),
    '#options' => $timeout_options,
    '#default_value' => empty($settings) ? EMAIL_FIELD_VERIFICATION_TIMEOUT_NEVER : $settings['email_field_verification_timeout'],
    '#description' => t("Will ignore verification links after a given time period. Additional actions can be triggered."),
    '#states' => array(
      'visible' => array(
        ':input[name="instance[email_field_verification_container][email_field_verification_require_verification]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['instance']['email_field_verification_container']['email_field_verification_timeout_custom'] = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => empty($settings) ? '' : $settings['email_field_verification_timeout_custom'],
    '#title' => t("Timeout custom offset"),
    '#description' => t("Custom timeout offset in seconds."),
    '#states' => array(
      'visible' => array(
        ':input[name="instance[email_field_verification_container][email_field_verification_timeout]"]' => array('value' => EMAIL_FIELD_VERIFICATION_TIMEOUT_CUSTOM),
      ),
    ),
  );

  $timeout_response_options = array();
  foreach (_email_field_verification_get_settings_defaults('timeout_response') as $index => $value) {
    $timeout_response_options[$index] = $value['label'];
  }
  $form['instance']['email_field_verification_container']['email_field_verification_timeout_response'] = array(
    '#type' => 'radios',
    '#title' => t("Timeout response"),
    '#options' => $timeout_response_options,
    '#default_value' => empty($settings) ? EMAIL_FIELD_VERIFICATION_RESPONSE_NONE : $settings['email_field_verification_timeout_response'],
    '#states' => array(
      'visible' => array(
        ':input[name="instance[email_field_verification_container][email_field_verification_require_verification]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['instance']['email_field_verification_container']['email_field_verification_resend_verification'] = array(
    '#type' => 'checkbox',
    '#title' => t("Allow resending verification after timeout"),
    '#states' => array(
      'visible' => array(
        ':input[name="instance[email_field_verification_container][email_field_verification_require_verification]"]' => array('checked' => TRUE),
      ),
    ),
    '#default_value' => empty($settings) ? FALSE : $settings['email_field_verification_resend_verification'],
  );
}


/**
 * Implements hook_field_update_instance().
 */
function email_field_verification_field_update_instance($instance, $prior_instance) {
  $field_info = field_info_field_by_id($instance['field_id']);
  if ($field_info['type'] != 'email') {
    return TRUE;
  }

  $transaction = db_transaction();

  try {
    if (!$instance['email_field_verification_container']['email_field_verification_require_verification']) {
      db_delete('email_field_verification_data')
        ->condition('entity_type', $instance['entity_type'], '=')
        ->condition('field_name', $instance['field_name'], '=')
        ->execute();
    }

    // Ignore slave server temporarily to give time for the saved order to be
    // propagated to the slave.
    db_ignore_slave();

  }
  catch (Exception $e) {
    $transaction->rollback();
    return FALSE;
  }
}

/**
 * Implements hook_field_delete_instance().
 */
function email_field_verification_field_delete_instance($instance) {
  _email_field_verification_delete($instance);
}

/**
 * Implements hook_field_purge_instance().
 */
function email_field_verification_field_purge_instance($instance) {
  _email_field_verification_delete($instance);
}

/**
 * Deletes data for one field instance.
 */
function _email_field_verification_delete($instance) {
  db_delete('email_field_verification_data')
    ->condition('entity_type', $instance['entity_type'], '=')
    ->condition('field_name', $instance['field_name'], '=')
    ->execute();
}

/**
 * Implements hook_entity_delete().
 */
function email_field_verification_entity_delete($entity, $entity_type) {

  list($entity_id, ,) = entity_extract_ids($entity_type, $entity);

  db_delete('email_field_verification_data')
    ->condition('entity_id', $entity_id, '=')
    ->condition('entity_type', $entity_type, '=')
    ->execute();
}

/**
 * Implements hook_field_attach_insert().
 */
function email_field_verification_field_attach_insert($entity_type, $entity) {
  return email_field_verification_field_attach_update($entity_type, $entity);
}

/**
 * Implements hook_field_attach_update().
 */
function email_field_verification_field_attach_update($entity_type, $entity) {
  
  list($entity_id, , $bundle) = entity_extract_ids($entity_type, $entity);

  $field_instances = field_info_instances($entity_type, $bundle);

  foreach ($field_instances as $field_name => $field_instance) {
    $field_info = field_info_field($field_name);
    if ($field_info['type'] == 'email') {
      
      $language = field_language($entity_type, $entity, $field_name);

      if (empty($field_instance['email_field_verification_container'])) {
        // Remove orphaned entries.
        db_delete('email_field_verification_data')
          ->condition('entity_id', $entity_id, '=')
          ->condition('entity_type', $entity_type, '=')
          ->condition('field_name', $field_instance['field_name'], '=')
          ->execute();
        return TRUE;
      }

      $new_mails = array();

      if (isset($entity->$field_name)) {
        $field_data = $entity->$field_name;

        foreach ($field_data[$language] as $new_mail) {
          if (!empty($new_mail['email'])) {
            $new_mails[] = $new_mail['email'];
          }
        }
      }

      $old_mail_results = db_select('email_field_verification_data', 'e')
        ->fields('e')
        ->condition('entity_id', $entity_id, '=')
        ->condition('entity_type', $entity_type, '=')
        ->condition('field_name', $field_instance['field_name'], '=')
        ->execute();

      foreach ($old_mail_results as $old_mail_result) {
        $old_mail = $old_mail_result->email;

        $new_mail_index = array_search($old_mail, $new_mails);
        if ($new_mail_index === FALSE) {
          // Deleting old mails.
          db_delete('email_field_verification_data')
            ->condition('entity_id', $entity_id, '=')
            ->condition('entity_type', $entity_type, '=')
            ->condition('field_name', $field_instance['field_name'], '=')
            ->condition('email', $old_mail_result->email, '=')
            ->execute();
        }
        else {
          // Skip existing mails in later insert loop.
          unset($new_mails[$new_mail_index]);
        }
      }

      foreach ($new_mails as $new_mail) {
        // Insert new mails & send them.
        $hash_sent = _email_field_verification_send_verification_link($new_mail, $entity_type, $entity_id);
        if ($hash_sent) {
          db_insert('email_field_verification_data')
            ->fields(array(
              'entity_type' => $entity_type,
              'entity_id' => $entity_id,
              'field_name' => $field_instance['field_name'],
              'email' => $new_mail,
              'status' => EMAIL_FIELD_VERIFICATION_STATUS_PENDING,
              'created' => time(),
              'timeout' => time() + _email_field_verification_get_timeout_offset($entity_type, $entity_id, $field_name),
              'hash' => $hash_sent,
            ))
            ->execute();
        }
      }
    }
  }
}

/**
 * Send out verification link.
 */
function _email_field_verification_send_verification_link($mail = NULL, $entity_type = NULL, $entity_id = NULL) {
  if (!$mail) {
    return FALSE;
  }

  $entities = entity_load($entity_type, array($entity_id));
  if (!empty($entities)) {
    $entity = array_shift($entities);
  }
  else {
    return FALSE;
  }

  $hash = drupal_hash_base64(drupal_get_hash_salt() . drupal_random_bytes(16) . $mail);
  $lang = !empty($entity->language) ? $entity->language : language_default();
  $send = drupal_mail(
    'email_field_verification',
    'confirm',
    $mail,
    $lang,
    array(
      'hash' => $hash,
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
    )
  );
  return ($send == TRUE) ? $hash : FALSE;
}

/**
 * Implements hook_mail().
 */
function email_field_verification_mail($key, &$message, $params) {
  switch ($key) {
    case 'confirm':
      $langcode = $message['language'];
      $message['subject'] = t("Verification of your mail at !site", array('!site' => variable_get('site_name')), array('langcode' => $langcode));
      $message['body'][] = t("Please click on the following link to confirm this email address at !site.", array('!site' => variable_get('site_name')), array('langcode' => $langcode));
      $message['body'][] = url(
        'email/verification/' . $params['hash'],
        array(
          'absolute' => TRUE,
        )
      );
      break;
  }
}

/**
 * Implements hook_menu().
 */
function email_field_verification_menu() {
  $items = array(
    'email/verification/%' => array(
      'page callback' => '_email_field_verification_link_confirm',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'email/verification/resend/nojs/%/%/%/%/%' => array(
      'page callback' => '_email_field_verification_resend',
      'page arguments' => array(3, 4, 5, 6, 7, 8),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'email/verification/resend/ajax/%/%/%/%/%' => array(
      'page callback' => '_email_field_verification_resend',
      'page arguments' => array(3, 4, 5, 6, 7, 8),
      'access arguments' => array('access content'),
      'delivery callback' => 'ajax_deliver',
      'type' => MENU_CALLBACK,
    ),
  );
  return $items;
}

/**
 * Reacts to a verification link called.
 */
function _email_field_verification_link_confirm($hash = NULL) {
  $confirm_status = FALSE;

  $mail_result = db_select('email_field_verification_data', 'e')
    ->fields('e')
    ->condition('hash', $hash, '=')
    ->execute();

  // Mail or hash doesn't exist.
  if (!isset($mail_result) || !$mail_result->rowCount()) {

    $confirm_status = FALSE;

    module_invoke_all('email_field_verification_update', FALSE, FALSE);

  }
  // Hash does exist.
  else {

    $current_mail = $mail_result->fetchAssoc();
    // Hash already processed.
    if ($current_mail['status'] != EMAIL_FIELD_VERIFICATION_STATUS_PENDING) {

      switch ($current_mail['status']) {
        case EMAIL_FIELD_VERIFICATION_STATUS_CONFIRMED:
          $confirm_status = 'already_confirmed';
          break;

        case EMAIL_FIELD_VERIFICATION_STATUS_TIMEOUT:
          $confirm_status = 'already_timeout';
          break;
      }

      module_invoke_all('email_field_verification_update', $current_mail, $confirm_status);

    }
    // Hash not processed yet.
    else {

      $entities = entity_load($current_mail['entity_type'], array($current_mail['entity_id']));
      // Settings don't exist (this should NOT happen!).
      if (empty($entities)) {

        $confirm_status = FALSE;

        module_invoke_all('email_field_verification_update', $current_mail, FALSE);

      }
      // Settings loaded.
      else {
        $entity = array_pop($entities);

        list(, , $bundle) = entity_extract_ids($current_mail['entity_type'], $entity);

        $current_instance = field_info_instance($current_mail['entity_type'], $current_mail['field_name'], $bundle);

        // Either no timeout or timeout has no effect.
        if ($current_instance['email_field_verification_container']['email_field_verification_timeout'] == EMAIL_FIELD_VERIFICATION_TIMEOUT_NEVER || $current_instance['email_field_verification_container']['email_field_verification_timeout_response'] == EMAIL_FIELD_VERIFICATION_RESPONSE_NONE) {

          db_update('email_field_verification_data')
            ->fields(array('status' => EMAIL_FIELD_VERIFICATION_STATUS_CONFIRMED))
            ->condition('entity_id', $current_mail['entity_id'], '=')
            ->condition('entity_type', $current_mail['entity_type'], '=')
            ->condition('field_name', $current_mail['field_name'], '=')
            ->condition('email', $current_mail['email'], '=')
            ->execute();

          $confirm_status = 'confirmed';

          module_invoke_all('email_field_verification_update', $current_mail, 'confirmed');

        }
        // A timeout might have occurred.
        else {

          $setting_defaults = _email_field_verification_get_settings_defaults();

          // Success! Verification request for existing mail within timeout.
          if ($current_mail['timeout'] > time()) {

            db_update('email_field_verification_data')
              ->fields(array('status' => EMAIL_FIELD_VERIFICATION_STATUS_CONFIRMED))
              ->condition('entity_id', $current_mail['entity_id'], '=')
              ->condition('entity_type', $current_mail['entity_type'], '=')
              ->condition('field_name', $current_mail['field_name'], '=')
              ->condition('email', $current_mail['email'], '=')
              ->execute();

            $confirm_status = 'confirmed';

            module_invoke_all('email_field_verification_update', $current_mail, 'confirmed');

          }
          // Timeout reached, responding.
          else {

            $timeout_response = $setting_defaults['timeout_response'][$current_instance['email_field_verification_container']['email_field_verification_timeout_response']]['response'];

            _email_field_verification_timeout($timeout_response, $current_mail);

            $confirm_status = 'timeout';
          }
        }
      }
    }
  }

  switch ($confirm_status) {
    case FALSE:
      drupal_set_message(t("The mail address could not be confirmed."), 'error');
      break;

    case 'timeout':
      drupal_set_message(t("It took you too long to confirm this mail address."), 'warning');
      break;

    case 'confirmed':
      drupal_set_message(t("Your mail address has been confirmed."), 'status');
      break;

    case 'already_confirmed':
      drupal_set_message(t("Your mail address has already been confirmed."), 'status');
      break;
  }

  return array();
}

/**
 * Handle a timeout according to settings.
 */
function _email_field_verification_timeout($timeout_response, $current_mail) {

  $entity_result = entity_load($current_mail['entity_type'], array($current_mail['entity_id']));
  $entity = array_shift($entity_result);

  switch ($timeout_response) {
    case 'mark_unconfirmed':
      db_update('email_field_verification_data')
        ->fields(array('status' => EMAIL_FIELD_VERIFICATION_STATUS_TIMEOUT))
        ->condition('entity_id', $current_mail['entity_id'], '=')
        ->condition('entity_type', $current_mail['entity_type'], '=')
        ->condition('field_name', $current_mail['field_name'], '=')
        ->condition('email', $current_mail['email'], '=')
        ->execute();
      break;

    case 'empty_field':
      foreach ($entity->{$current_mail['field_name']}[LANGUAGE_NONE] as $index => $email) {
        if ($current_mail['email'] == $email['email']) {
          unset($entity->{$current_mail['field_name']}[LANGUAGE_NONE][$index]);
        }
      }
      switch ($current_mail['entity_type']) {
        case 'user':
          $user_edit = array();
          user_save($entity, $user_edit);
          break;

        case 'node':
          node_save($entity);
          break;

        default:
          if (module_exists('entity')) {
            entity_save($current_mail['entity_type'], $entity);
          }
      }
      break;

    case 'unpublish_entity':
      if (!empty($entity->status) && is_int($entity->status)) {
        $entity->status = 0;
        switch ($current_mail['entity_type']) {
          case 'user':
            $user_edit = array();
            user_save($entity, $user_edit);
            break;

          case 'node':
            node_save($entity);
            break;

          default:
            if (module_exists('entity')) {
              entity_save($current_mail['entity_type'], $entity);
            }
        }
      }
      break;

    case 'delete_entity':
      switch ($current_mail['entity_type']) {
        case 'user':
          user_delete($current_mail['entity_id']);
          break;

        case 'node':
          node_delete($current_mail['entity_id']);
          break;

        default:
          if (module_exists('entity')) {
            entity_delete($current_mail['entity_type'], $current_mail['entity_id']);
          }
      }
      break;

  }

  module_invoke_all('email_field_verification_update', $current_mail, 'timeout');

  return TRUE;
}

/**
 * Resend a verification link.
 */
function _email_field_verification_resend($ajax = NULL, $entity_type = NULL, $entity_id = NULL, $field_name = NULL, $delta = NULL, $email = NULL) {

  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], 'email/verification/resend/nojs/' . $entity_type . '/' . $entity_id . '/' . $field_name . '/' . $delta . '/' . $email)) {
    // See https://www.drupal.org/node/1555862. This would otherwise break Simpletest.
    if ($_SERVER["REMOTE_ADDR"] != '127.0.0.1') {
      return drupal_access_denied();
    }
  }

  global $user;

  $entities = entity_load($entity_type, array($entity_id));
  if (!empty($entities)) {
    $entity = array_shift($entities);
  }
  else {
    return array();
  }

  if (!user_access('resend any email field verification links', $user) && !(user_access('resend own email field verification links', $user) && $entity->uid === $user->uid)) {
    return array();
  }

  $mail_result = db_select('email_field_verification_data', 'e')
    ->fields('e')
    ->condition('entity_type', $entity_type, '=')
    ->condition('entity_id', $entity_id, '=')
    ->condition('field_name', $field_name, '=')
    ->condition('email', $email, '=')
    ->execute();

  if (!isset($mail_result) || !$mail_result->rowCount()) {
    // Mail doesn't exist.
    return array();
  }

  $current_mail = $mail_result->fetchAssoc();

  $hash_sent = _email_field_verification_send_verification_link($current_mail['email'], $current_mail['entity_type'], $current_mail['entity_id']);
  if ($hash_sent) {

    db_update('email_field_verification_data')
      ->fields(array(
        'status' => EMAIL_FIELD_VERIFICATION_STATUS_PENDING,
        'created' => time(),
        'timeout' => time() + _email_field_verification_get_timeout_offset($current_mail['entity_type'], $current_mail['entity_id'], $current_mail['field_name']),
        'hash' => $hash_sent,
      ))
      ->condition('entity_id', $current_mail['entity_id'], '=')
      ->condition('entity_type', $current_mail['entity_type'], '=')
      ->condition('field_name', $field_name, '=')
      ->condition('email', $current_mail['email'], '=')
      ->execute();
  }

  if ($ajax === 'ajax') {
    $commands = array();
    $commands[] = ajax_command_prepend('#email_field_verficication_message_' . $field_name . '_' . (int) $delta, 'Sucessfully sent verification link.');

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    drupal_set_message(t("Successfully sent verification link."));
    return array();
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function email_field_verification_field_widget_email_textfield_form_alter(&$element, &$form_state, $context) {
  if (!empty($element['email']['#default_value']) && !empty($context['instance']['email_field_verification_container']) && $context['instance']['email_field_verification_container']['email_field_verification_require_verification']) {

    list($entity_id, ,) = entity_extract_ids($element['#entity_type'], $element['#entity']);

    $current_settings = $context['instance']['email_field_verification_container'];

    $mail_record = db_select('email_field_verification_data', 'e')
      ->fields('e')
      ->condition('entity_id', $entity_id, '=')
      ->condition('entity_type', $element['#entity_type'], '=')
      ->condition('field_name', $context['instance']['field_name'], '=')
      ->condition('email', $element['email']['#default_value'], '=')
      ->execute()
      ->fetchAssoc();

    if (!empty($mail_record)) {
      $description = 'Status: ';
      switch ($mail_record['status']) {
        case EMAIL_FIELD_VERIFICATION_STATUS_PENDING:
          $description .= t("Verification link sent.");
          break;

        case EMAIL_FIELD_VERIFICATION_STATUS_CONFIRMED:
          $description .= t("Confirmed.");
          break;

        case EMAIL_FIELD_VERIFICATION_STATUS_TIMEOUT:
          $description .= t("Verification link timed out.");
          break;
      }

      if (in_array($mail_record['status'], array(EMAIL_FIELD_VERIFICATION_STATUS_PENDING, EMAIL_FIELD_VERIFICATION_STATUS_TIMEOUT)) && !empty($current_settings['email_field_verification_resend_verification'])) {
        // Make sure Drupal Ajax framework javascript is around.
        drupal_add_library('system', 'drupal.ajax');

        $variables = array(
          'email' => $element['email']['#default_value'],
          'delta' => $context['delta'],
          'field_name' => $context['instance']['field_name'],
          'entity_id' => (int) $entity_id,
          'entity_type' => $element['#entity_type'],
        );
        $variables['token'] = drupal_get_token('email/verification/resend/nojs/' . $variables['entity_type'] . '/' . $variables['entity_id'] . '/' . $variables['field_name'] . '/' . $variables['delta'] . '/' . $variables['email']);

        global $user;
        if (user_access('resend any email field verification links', $user) || (!empty($element['#entity']->uid) && user_access('resend own email field verification links', $user) && $element['#entity']->uid === $user->uid)) {
          $element['email']['#suffix'] .= theme('email_field_verification_resend', $variables);
        }
        $element['email']['#suffix'] .= theme('email_field_verification_description', array('description' => $description));
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function email_field_verification_permission() {
  return array(
    'resend any email field verification links' => array(
      'title' => t("Allow resending email verification links for any content"),
    ),
    'resend own email field verification links' => array(
      'title' => t("Allow resending email verification links for own content"),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function email_field_verification_theme() {
  return array(
    'email_field_verification_resend' => array(
      'variables' => array(
        'email' => NULL,
        'field_name' => NULL,
        'delta' => NULL,
        'entity_id' => NULL,
        'entity_type' => NULL,
        'token' => NULL,
      ),
      'template' => 'email_field_verification_resend',
      'path' => drupal_get_path('module', 'email_field_verification') . '/templates/',
    ),
    'email_field_verification_description' => array(
      'variables' => array(
        'description' => NULL,
      ),
      'template' => 'email_field_verification_description',
      'path' => drupal_get_path('module', 'email_field_verification') . '/templates/',
    ),
  );
}

/**
 * Get the default timeout offset in seconds for a setting.
 */
function _email_field_verification_get_timeout_offset_by_setting($setting = NULL) {
  $setting_defaults = _email_field_verification_get_settings_defaults();
  
  if (!array_key_exists($setting, $setting_defaults['timeout'])) {
    return EMAIL_FIELD_VERIFICATION_TIMEOUT_NEVER;
  }

  return (int) $setting_defaults['timeout'][$setting]['offset_seconds'];
}

/**
 * Get the timeout offset in seconds from this instance.
 */
function _email_field_verification_get_timeout_offset($entity_type = FALSE, $entity_id = FALSE, $field_name = FALSE) {
  if (empty($entity_type) || empty($entity_id) || empty($field_name)) {
    return 0;
  }

  $entities = entity_load($entity_type, array($entity_id));
  $entity = array_shift($entities);

  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $current_instance = field_info_instance($entity_type, $field_name, $bundle);

  if ($current_instance['email_field_verification_container']['email_field_verification_timeout'] == EMAIL_FIELD_VERIFICATION_TIMEOUT_CUSTOM) {
    $offset = (int) $current_instance['email_field_verification_container']['email_field_verification_timeout_custom'];
  }
  else {
    $offset = _email_field_verification_get_timeout_offset_by_setting($current_instance['email_field_verification_container']['email_field_verification_timeout']);
  }

  return empty($offset) ? 0 : $offset;
}

/**
 * Implements hook_cron().
 */
function email_field_verification_cron() {

  $setting_defaults = _email_field_verification_get_settings_defaults();

  $mail_result = db_select('email_field_verification_data', 'e')
    ->fields('e')
    ->condition('status', EMAIL_FIELD_VERIFICATION_STATUS_PENDING, '=')
    ->condition('timeout', time(), '<')
    ->execute();

  while ($current_mail = $mail_result->fetchAssoc()) {

    $entities = entity_load($current_mail['entity_type'], array($current_mail['entity_id']));

    if (empty($entities)) {
      db_delete('email_field_verification_data')
        ->condition('entity_type', $current_mail['entity_type'], '=')
        ->condition('entity_id', (int) $current_mail['entity_id'], '=')
        ->execute();

      return TRUE;
    }

    $entity = array_shift($entities);

    list(, , $bundle) = entity_extract_ids($current_mail['entity_type'], $entity);

    $current_instance = field_info_instance($current_mail['entity_type'], $current_mail['field_name'], $bundle);

    $timeout_response = $setting_defaults['timeout_response'][$current_instance['email_field_verification_container']['email_field_verification_timeout_response']]['response'];
    _email_field_verification_timeout($timeout_response, $current_mail, $current_instance);
  }
}
