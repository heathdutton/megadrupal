<?php
/**
 * @file
 * An example field using the Field Types API.
 */
/**
 * @see field_types
 * @see field
 */

define('TEMPLATE_FIELD_DISPLAY_MODE_EXPANDED', 'template_field_display_mode_expanded');
define('TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSED', 'template_field_display_mode_collapsed');
define('TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSIBLE', 'template_field_display_mode_collapsible');
define('TEMPLATE_FIELD_MAX_DISPLAY_TITLE_LENGTH', 25);

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function template_field_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'template_field' => array(
      'label' => t('Template Field'),
      'description' => t('Adds Template Functionality to fieldable entities'),
      'default_widget' => 'template_select',
      'default_formatter' => 'template_select',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 *
 */
function template_field_field_is_empty($items, $field) {

  if (empty($items['template_name']) || empty($items['data'])) {
    return TRUE;
  }

  $data = unserialize($items['data']);
  unset($data['template_name']);
  return template_api_empty_check($items['template_name'], $data);
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see template_field_field_formatter_view()
 */
function template_field_field_formatter_info() {
  $formatters = array(
  // This formatter is for the select box.
    'template' => array(
      'label' => t('Template'),
      'field types' => array('template_field'),
    ),
  );

  foreach (template_api_get_template_list(array('formatter')) as $name => $label) {
    $formatters[$name] = array(
      'label' => $label,
      'field types' => array('template_field'),
    );
  }

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see template_field_field_formatter_info()
 */
function template_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $return = array();
  $entity_id = reset(entity_extract_ids($entity_type, $entity));
  if ($display['type'] == 'template') {
    foreach ($items as $key => $item) {
      $item['data'] = unserialize($item['data']);
      $item['data']['entity_type'] = $entity_type;
      $item['data']['entity_id'] = $entity_id;
      $return[$key] = template_api_view($item['template_name'], $item['data']);
    }
  }
  else {
    $vars = $display['settings'];
    $vars['templates'] = array();
    foreach ($items as $key => $item) {
      $item['data'] = unserialize($item['data']);
      $item['data']['entity_type'] = $entity_type;
      $item['data']['entity_id'] = $entity_id;
      $item['rendered'] = drupal_render(template_api_view($item['template_name'], $item['data']));
      $vars['templates'][] = $item;
    }
    $return[] = template_api_view($display['type'], $vars);
  }
  return $return;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function template_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] != 'template') {
    $template_name = $display['type'];
    $element = template_field_get_template_details($template_name, $settings);
  }

  return $element;

}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function template_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] != 'template') {
    $template = template_api_load($display['type']);
    $summary = t('Using template @label', array('@label' => $template->label));
  }

  return $summary;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see template_field_field_widget_form()
 */
function template_field_field_widget_info() {
  return array(
    'template_widget' => array(
      'label' => t('Template Select'),
      'field types' => array('template_field'),
      'settings' => array(
        'template_tags' => array(),
        'template_display_mode' => TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSED,
      ),
      'behaviors' => array(
              'multiple values' => FIELD_BEHAVIOR_CUSTOM,
              'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

function template_field_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $element['template_tags'] = array(
    '#title' => t('Tags to filter by'),
    '#type' => 'select',
    '#options' => drupal_map_assoc(template_api_get_all_tags()),
    '#default_value' => $settings['template_tags'],
    '#multiple' => TRUE,
  );

  $element['template_display_mode'] = array(
    '#title' => t('Node form display mode'),
    '#description' => t('Determines how template fields are displayed on the node add/edit form.') .
                      '<ul><li>' .t('Collapsed') . t(': Display in a collapsible fieldset that defaults to closed(collapsed).') . '</li>' .
                      '<li>' . t('Collapsible') . t(': Display in a collapsible fieldset that defaults to open.') . '</li>' .
                      '<li>' . t('Expanded') . t(': Display full template.  Template is not collapsible.') . '</li></ul>',
    '#type' => 'select',
    '#options' => array(
      TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSED => t('Collapsed'),
      TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSIBLE => t('Collapsible'),
      TEMPLATE_FIELD_DISPLAY_MODE_EXPANDED => t('Expanded'),
    ),
    '#default_value' => isset($settings['template_display_mode']) ? $settings['template_display_mode'] : TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSED,

  );

  return $element;
}

/**
 * Implements of hook_field_load()
 */
function template_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      $item['data'] = unserialize($item['data']);
    }
  }
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 */
function template_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($field['cardinality'] == 1) {
    $item = template_field_get_single_item_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
    $elements = array($item);
  }
  else {
    $elements = template_field_multiple_value_form($field, $instance, $langcode, $items, $form, $form_state);
  }
  return $elements;
}

/**
 * Retrieves the widget for for a single template field value.
 */
function template_field_get_single_item_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Generate a specific key used to identify this element to restore a default
  // value upon AJAX submission regardless of where this element is in the
  // $form array.
  $element_key = implode('|', array($element['#entity_type'], $element['#bundle'], $element['#field_name'], $element['#language'], $element['#delta']));

  // Store the key in the element array as a value so it can be easily retrieved
  // in context in the $form_state['values'] array in the element validator.
  $element['element_key'] = array(
    '#type' => 'value',
    '#value' => $element_key,
  );

  // Populate $items from $form_state values if available.  This is necessary
  // for the #ajax functionality.
  if (!empty($form_state['values'])) {
    $path = array($field['field_name'], $langcode);
    $items = drupal_array_get_nested_value($form_state['values'], $path);
  }

  // Get the default template used to build the widget form elements, looking
  // first in the form state, then in the stored value for the field, and then
  // in the default values of the instance.
  if (isset($items[$delta]) && isset($items[$delta]['data']) && !empty($items[$delta]['data'])) {
    // Use the saved value for the field if available.
    $values = $items[$delta];
  }
  else {
    $values = (array) $instance['default_value'][0];
  }

  // Add in defaults
  $values += array(
    'data' => array(),
    'template_name' => '',
  );

  if (is_string($values['data'])) {
    // unserialize the data
    $values['data'] = unserialize($values['data']);
  }

  // Hidden Data Element
  $element['data'] = array(
    '#type' => 'value',
    '#value' => $values['data'],
  );

  if ($instance['widget']['type'] == 'template_widget') {
    if (!isset($instance['widget']['settings']['template_tags']) ||
      !is_array($instance['widget']['settings']['template_tags'])) {

      $options = array();
    }
    else {
      $options = template_api_get_template_list($instance['widget']['settings']['template_tags']);
      natcasesort($options);
    }

    $display_mode = isset($instance['widget']['settings']['template_display_mode']) ? $instance['widget']['settings']['template_display_mode'] : TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSED;

    $wrapper_id = drupal_html_class($field['field_name']) . '-template-wrapper';

    // See if we can generate a unique title for the template collapsible region
    // by concatenating the text value of the first few fields.
    if (!empty($values['template_name'])) {
      $name_identifier = '';
      $template_name = $values['template_name'];
      $template_title = t('Template: ') . $options[$template_name];

      TEMPLATE_FIELD_MAX_DISPLAY_TITLE_LENGTH;
      if (isset($values['data'])) {
        foreach ($values['data'] as $field_name => $field_info) {
          $text = reset($field_info);
          if (is_object($text)) {
            continue;
          }
          if (is_array($text)) {
            // Special handling for text fields with format info
            if (array_key_exists('value', $text) && array_key_exists('format', $text)) {
              $name_identifier .= strip_tags($text['value']) . ' ';
            }
            else {
              continue;
            }
          }
          else {
            $name_identifier .= reset($field_info) . ' ';
          }
          if (strlen($name_identifier) > TEMPLATE_FIELD_MAX_DISPLAY_TITLE_LENGTH) {
            $name_identifier = substr($name_identifier, 0, TEMPLATE_FIELD_MAX_DISPLAY_TITLE_LENGTH);
            break;
          }
        }
      }
      $name_identifier = trim($name_identifier);
      if (!empty($name_identifier)) {
        $template_title .= " ($name_identifier)";
      }
    }
    else {
      $template_title = t('None: Expand to add a new template');
      $template_name = '';
    }

    // Allow other modules to override the template field's label
    $context = array(
      'instance' => $instance,
      'options' => $options,
      'values' => $values,
      'display_mode' => $display_mode,
      'template_name' => $template_name,
    );

    drupal_alter('template_field_template_title', $template_title, $context);

    $element['#type'] = 'fieldset';
    $element['#prefix'] = '<div id="' . $wrapper_id . '">';
    $element['#suffix'] = '</div>';
    $element['#title'] = check_plain($template_title);
    $element['#collapsible'] = ($display_mode == TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSED || $display_mode == TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSIBLE);
    $element['#collapsed'] = ($display_mode == TEMPLATE_FIELD_DISPLAY_MODE_COLLAPSED);

    // We need to add some extra CSS if the site is using the field group module
    // to handle the case of a template field being inside of a vertical tab.
    // see: http://drupal.org/node/1127988
    $element['#attached']['css'][] = drupal_get_path('module', 'template_field') . '/template_field.css';
    $element['#attached']['js'][] = (drupal_get_path('module', 'template_field') . '/template_field.js');

    $wrapper_id = template_field_html_id($element_key);
    $element['template_name'] = array(
      '#type' => 'select',
      '#title' => t('Layout'),
      '#options' => $options,
      '#default_value' => $values['template_name'],
      '#required' => $element['#required'],
      '#element_validate' => array('template_field_widget_validate'),
      '#empty_option' => t('-Select-'),
      '#empty_value' => '',
      '#weight' => 0,
      '#ajax' => array(
        'callback' => 'template_field_display_template_form_ajax',
        'wrapper' => $wrapper_id,
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    $element['template_removed'] = array(
      '#type' => 'hidden',
      '#default_value' => 0,
      '#prefix' => '<span class="template-field-removed-flag">',
      '#suffix' => '</span>',
    );

    $element['template_fields'] = array(
      '#type' => 'fieldset',
      '#title' => $template_title,
      '#prefix' => '<div id="'. $wrapper_id .'">',
      '#suffix' => '</div>',
      '#weight' => 10,
    );

    $element['template_fields']['inputs'] = template_field_get_template_details($template_name, $values['data']);

    // Hide the empty fieldset on the default/empty template.
    if (empty($template_name)) {
      $element['template_fields']['#attributes']['style'] = 'display: none;';
    }
  }

  if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $element['remove_button'] = array(
      '#type' => 'submit',
      '#value' => t('Remove Template'),
      '#name' => 'template-field-remove-' . $element_key,
      '#limit_validation_errors' => array(array($field['field_name'], $langcode)),
      '#submit' => array('template_field_remove_submit'),
      '#attributes' => array(
        'class' => array('template-field-remove'),
      ),
      '#ajax' => array(
        'callback' => 'template_field_remove_js',
        'wrapper' => template_field_html_id($element['#field_name'] . '-field-ajax-wrapper'),
        'effect' => 'fade',
      ),
    );
  }

  // Allow other modules to alter our element
  drupal_alter('template_field_element', $element, $context);

  return $element;
}

/**
 * Ajax callback to retrieve the edit form for a template.
 */
function template_field_display_template_form_ajax($form, $form_state) {
  $triggering_element = $form_state['triggering_element'];

  // This is the path to the triggering element.
  $path = $triggering_element['#parents'];
  // Pop off the trigger element itself.
  array_pop($path);
  // And finally add the element we're looking for.
  $path[] = 'template_fields';

  // Return only this part of the form.
  return drupal_array_get_nested_value($form, $path);
}

/**
 * Validation callback for element
 */
function template_field_widget_validate($element, &$form_state) {
  // If the plugin was changed rebuild the form
  if ($element['#default_value'] != $element['#value']) {
    $form_state['#rebuild'] = TRUE;
  }

  $template_name = $element['#value'];

  $values = $form_state['values'];

  $parents = $element['#parents'];
  array_pop($parents);

  foreach ($parents as $key) {
    $values = $values[$key];
  }

  // We only want the values from this template
  $original_values = $values;
  $element_key = $values['element_key'];
  $values = isset($values['template_fields']['inputs']) ? $values['template_fields']['inputs'] : array();
  $form_state['template_name'][$element_key] = array_diff_key($values, array('element_key' => ''));

  // Fake a data element
  $element_data = array(
    '#parents' => $parents,
  );

  // Setup the data to be stored
  $data = array(
    'template_name' => $template_name,
    'data' => serialize($values),
  );

  // Make sure we maintain any additional data such as weight.
  $data = array_merge($original_values, $data);

  // Store all of the values in data
  form_set_value($element_data, $data, $form_state);

  template_api_validate_template($template_name, $values, $form_state);

  if ($element['#required']) {
    if (template_api_empty_check($template_name, $values)) {
      form_error($element, t('Layout is required'));
    }
  }

}

function template_field_get_template_details($template_name, $data) {
  return template_api_get_form($template_name, $data);
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see template_field_field_validate()
 * @see form_error()
 */
function template_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'template_field_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_update().
 */
function template_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'template_field') {
    foreach ($items as $item) {
      $input_values = unserialize($item['data']);
      template_api_get_template_controller($item['template_name'])->update($input_values);
    }
  }
}

/**
 * Implements hook_field_insert().
 */
function template_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'template_field') {
    foreach ($items as $item) {
      $input_values = unserialize($item['data']);
      template_api_get_template_controller($item['template_name'])->insert($input_values);
    }
  }
}

/**
 * Implements hook_field_delete().
 */
function template_field_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'template_field') {
    foreach ($items as $item) {
      $input_values = unserialize($item['data']);
      template_api_get_template_controller($item['template_name'])->delete($input_values);
    }
  }
}

/**
 * Replacement function for drupal_html_id().
 *
 * Alternate implementation of drupal_html_id() which does not check for existing elements with the same id.
 *
 * We had to create a custom implementation due to drupal_html_id() returning a different id on every ajax call
 * except in cases where a file field element was included in the template.
 *
 * @see drupal_html_id()
 *
 * @param $id
 * The ID to clean.
 *
 * @return string
 * The cleaned ID.
 */
function template_field_html_id($id) {
  $id = strtr(drupal_strtolower($id), array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));

  // As defined in http://www.w3.org/TR/html4/types.html#type-name, HTML IDs can
  // only contain letters, digits ([0-9]), hyphens ("-"), underscores ("_"),
  // colons (":"), and periods ("."). We strip out any character not in that
  // list. Note that the CSS spec doesn't allow colons or periods in identifiers
  // (http://www.w3.org/TR/CSS21/syndata.html#characters), so we strip those two
  // characters as well.
  $id = preg_replace('/[^A-Za-z0-9\-_]/', '', $id);

  // Removing multiple consecutive hyphens.
  $id = preg_replace('/\-+/', '-', $id);

  return $id;
}

/**
 * Implements hook_theme().
 */
function template_field_theme() {
  return array(
    'template_field_widget_multiple' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Special handling to create form elements for multiple values.
 *
 * Modified version of field_multiple_value_form().
 * @see field_multiple_value_form()
 *
 * Handles generic features for multiple fields:
 * - number of widgets
 * - AHAH-'add more' button
 * - drag-n-drop value reordering
 */
function template_field_multiple_value_form($field, $instance, $langcode, $items, &$form, &$form_state) {
  $field_name = $field['field_name'];
  $parents = $form['#parents'];

  // Determine the number of widgets to display.
  switch ($field['cardinality']) {
    case FIELD_CARDINALITY_UNLIMITED:
      $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
      $max = $field_state['items_count'];
      break;

    default:
      $max = $field['cardinality'] - 1;
      break;
  }

  $title = check_plain($instance['label']);
  $description = field_filter_xss($instance['description']);

  $id_prefix = implode('-', array_merge($parents, array($field_name)));
  $wrapper_id = template_field_html_id($id_prefix . '-field-ajax-wrapper');

  $field_elements = array();

  for ($delta = 0; $delta <= $max; $delta++) {
    $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
    $element = array(
      '#entity_type' => $instance['entity_type'],
      '#bundle' => $instance['bundle'],
      '#field_name' => $field_name,
      '#language' => $langcode,
      '#field_parents' => $parents,
      '#columns' => array_keys($field['columns']),
      // For multiple fields, title and description are handled by the wrapping table.
      '#title' => $multiple ? '' : $title,
      '#description' => $multiple ? '' : $description,
      // Only the first widget should be required.
      '#required' => $delta == 0 && $instance['required'],
      '#delta' => $delta,
      '#weight' => $delta,
    );
    if ($element = template_field_get_single_item_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element)) {
      // Input field for the delta (drag-n-drop reordering).
      if ($multiple) {
        // We name the element '_weight' to avoid clashing with elements
        // defined by widget.
        $element['_weight'] = array(
          '#type' => 'weight',
          '#title' => t('Weight for row @number', array('@number' => $delta + 1)),
          '#title_display' => 'invisible',
           // Note: this 'delta' is the FAPI 'weight' element's property.
          '#delta' => $max,
          '#default_value' => isset($items[$delta]['_weight']) ? $items[$delta]['_weight'] : $delta,
          '#weight' => 100,
        );
      }

      // Allow modules to alter the field widget form element.
      $context = array(
        'form' => $form,
        'field' => $field,
        'instance' => $instance,
        'langcode' => $langcode,
        'items' => $items,
        'delta' => $delta,
      );
      drupal_alter(array('field_widget_form', 'field_widget_' . $instance['widget']['type'] . '_form'), $element, $form_state, $context);

      $field_elements[$delta] = $element;
    }

    if ($field_elements) {
      $field_elements += array(
        '#theme' => 'template_field_widget_multiple',
        '#field_name' => $field['field_name'],
        '#cardinality' => $field['cardinality'],
        '#title' => $title,
        '#required' => $instance['required'],
        '#description' => $description,
        '#prefix' => '<div id="' . $wrapper_id . '">',
        '#suffix' => '</div>',
        '#max_delta' => $max,
      );
    }
  }
  // Add 'add more' button, if not working with a programmed form.
  if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED && empty($form_state['programmed'])) {
    $field_elements['add_more'] = array(
      '#type' => 'submit',
      '#name' => strtr($id_prefix, '-', '_') . '_add_more',
      '#value' => t('Add another item'),
      '#attributes' => array('class' => array('field-add-more-submit')),
      '#limit_validation_errors' => array(array_merge($parents, array($field_name, $langcode))),
      '#submit' => array('field_add_more_submit'),
      '#ajax' => array(
        'callback' => 'field_add_more_js',
        'wrapper' => $wrapper_id,
        'effect' => 'fade',
      ),
    );
  }

  return $field_elements;
}

/**
 * Submit handler for the "Remove Template" button of a field form.
 *
 */
function template_field_remove_submit($form, &$form_state) {
  // During the form rebuild, file_field_widget_form() will create field item
  // widget elements using re-indexed deltas, so clear out $form_state['input']
  // to avoid a mismatch between old and new deltas. The rebuilt elements will
  // have #default_value set appropriately for the current state of the field,
  // so nothing is lost in doing this.
  $parents = array_slice($form_state['triggering_element']['#parents'], 0, -2);
  drupal_array_set_nested_value($form_state['input'], $parents, NULL);

  $button = $form_state['triggering_element'];

  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

  $submitted_values = drupal_array_get_nested_value($form_state['values'], array_slice($button['#array_parents'], 0, -2));
  foreach ($submitted_values as $delta => $submitted_value) {
    // Remove the add_more button and any empty templates from the form_state
    // otherwise we end up with extra empty template rows.
    if ($delta === 'add_more' ||
      (isset($submitted_value['template_name']) && empty($submitted_value['template_name'])) ||
      (isset($submitted_value['template_removed']) && $submitted_value['template_removed'])) {
      unset($submitted_values[$delta]);
    }
  }

  // Re-index deltas after removing empty items.
  $submitted_values = array_values($submitted_values);

  // Update form_state values.
  drupal_array_set_nested_value($form_state['values'], array_slice($button['#array_parents'], 0, -2), $submitted_values);

  // Update items.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  $field_state['items'] = $submitted_values;
  $field_state['items_count'] = count($submitted_values);
  field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);

  // Set the form to rebuild so that $form is correctly updated in response to
  // processing the template removal.
  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax callback in response to a new empty widget being added to the form.
 *
 * This returns the new page content to replace the page content made obsolete
 * by the form submission.
 *
 * @see field_add_more_submit()
 */
function template_field_remove_js($form, $form_state) {
  $button = $form_state['triggering_element'];

  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -2));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);

  $field = $field_state['field'];
  if ($field['cardinality'] != FIELD_CARDINALITY_UNLIMITED) {
    return;
  }

  return $element;
}

/**
 * Returns HTML for a group of file upload widgets.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element representing the widgets.
 *
 * @ingroup themeable
 */
function theme_template_field_widget_multiple($variables) {
  $element = $variables['element'];
  $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

  // Special ID and classes for draggable tables.
  $weight_class = $element['#id'] . '-weight';
  $table_id = $element['#id'] . '-table';

  // Build up a table of applicable fields.
  $headers = array();
  $headers[] = t('!title: !required', array('!title' => $element['#title'], '!required' => $required));
  $headers[] = t('Operations');
  $headers[] = t('Weight');

  // Get our list of widgets in order (needed when the form comes back after
  // preview or failed validation).
  $widgets = array();
  foreach (element_children($element) as $key) {
    $widgets[] = &$element[$key];
  }
  usort($widgets, '_field_sort_items_value_helper');

  $rows = array();
  $add_more_button = '';
  foreach ($widgets as $key => &$widget) {
    // Delay rendering of the buttons, so that they can be rendered later in the
    // "operations" column.
    $operations_elements = array();
    foreach (element_children($widget) as $sub_key) {
      if (isset($widget[$sub_key]['#type']) && $widget[$sub_key]['#type'] == 'submit') {
        hide($widget[$sub_key]);
        $operations_elements[] = &$widget[$sub_key];
      }
    }

    $widget['_weight']['#attributes']['class'] = array($weight_class);
    $weight = render($widget['_weight']);
    hide($widget['_weight']);

    // Render everything else together in a column, without the normal wrappers.
    $information = drupal_render($widget);

    // Render the previously hidden elements, using render() instead of
    // drupal_render(), to undo the earlier hide().
    $operations = '';
    foreach ($operations_elements as $operation_element) {
      $operations .= render($operation_element);
    }

    // Arrange the row with all of the rendered columns.
    $row = array();
    $row[] = $information;

    // Hide the Add Another button so that we can render it at the end of the table.
    if ($widget['#type'] == 'submit' &&
      array_search('field_add_more_submit', $widget['#submit']) !== FALSE) {
      $add_more_button = $information;
      continue;
    }

    $row[] = array(
      'data' => $operations,
      'class' => array('template-field-operations'),
    );

    $row[] = $weight;

    $rows[] = array(
      'data' => $row,
      'class' => isset($widget['#attributes']['class']) ? array_merge($widget['#attributes']['class'], array('draggable')) : array('draggable'),
    );
  }

  drupal_add_tabledrag($table_id, 'order', 'sibling', $weight_class);

  $output = empty($rows) ? '' : theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => $table_id)));
  $output .= drupal_render_children($element);
  $output .= $add_more_button;

  return $output;
}
