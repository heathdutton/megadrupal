<?php

/**
 * Implements hook_field_widget_info().
 *
 * @see template_field_field_widget_form()
 */
function template_chooser_field_widget_info() {
  return array(
    'template_chooser' => array(
      'label' => t('Template Chooser'),
      'field types' => array('template_field'),
      'settings' => array(
        'template_tags' => array(),
      ),
    ),
  );
}

function template_chooser_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $element['template_tags'] = array(
    '#title' => t('Tags to filter by'),
    '#type' => 'select',
    '#options' => drupal_map_assoc(template_api_get_all_tags()),
    '#default_value' => $settings['template_tags'],
    '#multiple' => TRUE,
  );

  return $element;
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 */
function template_chooser_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Generate a specific key used to identify this element to restore a default
  // value upon AJAX submission regardless of where this element is in the
  // $form array.
  $element_key = implode('|', array($element['#entity_type'], $element['#bundle'], $element['#field_name'], $element['#language'], $element['#delta']));

  // Store the key in the element array as a value so it can be easily retrieved
  // in context in the $form_state['values'] array in the element validator.
  $element['element_key'] = array(
    '#type' => 'value',
    '#value' => $element_key,
  );

  // Populate $items from $form_state values if available.  This is necessary
  // for the #ajax functionality.
  if (!empty($form_state['values'])) {
    $path = array($field['field_name'], $langcode);
    $values_to_add = drupal_array_get_nested_value($form_state['values'], $path);
    
    $values_to_add = !empty($values_to_add[0]['template_fields']['inputs']) ? $values_to_add[0]['template_fields']['inputs'] : NULL;
    
    $unserialized_data = unserialize($items[0]['data']);
    $template_name = $items[0]['template_name'];
    $templates = template_api_default_template();
    foreach ($templates as $template_key => $template_object) {
      if ($template_object->name == $template_name) {
        foreach ($template_object->inputs as $input_name => $input_array) {
          if (!empty($input_array['children'])) {
            foreach ($input_array['children'] as $child_index => $child_array) {
              if ($child_array['type'] == 'fieldset') {
                foreach ($child_array['children'] as $fieldset_child_name => $fieldset_child_element) {
                  if (!empty($values_to_add[$input_name][$input_array['type']])) {
                    if (!empty($values_to_add[$input_name][$input_array['type']][$child_index][$child_array['type']])) {
                      if (!empty($values_to_add[$input_name][$input_array['type']][$child_index][$child_array['type']][$fieldset_child_name])) {
                        $field_values = $values_to_add[$input_name][$input_array['type']][$child_index][$child_array['type']][$fieldset_child_name];
                        $unserialized_data[$input_name][$input_array['type']][$child_index][$child_array['type']][$fieldset_child_name] = $field_values;
                      }
                    }
                  }
                }
              } else {
                //TODO: Something when the type isn't fieldset
              }
            }
          } else {
            if (!empty($values_to_add[$input_name])) {
              // This means that this is a regular element and doesn't do ajax.
            }
          }
        }
      }
    }

    $new_serialized_data = serialize($unserialized_data);
    $new_items = array(array('template_name' => $template_name, 'data' => $new_serialized_data));
    $items = $new_items;
  }

  // Get the default template used to build the widget form elements, looking
  // first in the form state, then in the stored value for the field, and then
  // in the default values of the instance.
  $values = array();

  if (!empty($form_state['template_field'][$element_key])) {
    // Use the value from the form_state if available.
    $values = $form_state['template_field'][$element_key];
  }
  elseif (!empty($items[$delta]['data'])) {
    // Else use the saved value for the field.
    $values = $items[$delta];
  }
  else {
    $values = (array) $instance['default_value'][0];
  }

  // Add in defaults
  $values += array(
    'data' => array(),
    'template_name' => '',
  );

  if (is_string($values['data'])) {
    // unserialize the data
    $values['data'] = unserialize($values['data']);
  }

  // Hidden Data Element
  $element['data'] = array(
    '#type' => 'value',
    '#value' => $values['data'],
  );

  if ($instance['widget']['type'] == 'template_chooser') {
    if (!isset($instance['widget']['settings']['template_tags']) ||
      !is_array($instance['widget']['settings']['template_tags'])) {

      $options = array();
    }
    else {
      $options = template_api_get_template_list($instance['widget']['settings']['template_tags']);
      $full_description_options = template_api_get_template_list($instance['widget']['settings']['template_tags'], TRUE);
      natcasesort($options);
      $sort_titles = array();
      foreach ($full_description_options as $key => $properties) {
        $sort_titles[$key] = $properties['label'];
      }
      array_multisort($sort_titles, SORT_REGULAR, $full_description_options);
      unset($sort_titles);
      unset($key);
      unset($properties);
    }

    $wrapper_id = drupal_html_class($field['field_name']) . '-template-wrapper';

    $element['#type'] = 'fieldset';
    $element['#prefix'] = '<div id="' . $wrapper_id . '">';
    $element['#suffix'] = '</div>';
    $element['#attached'] = array(
      'library' => array(
        array('system', 'ui.dialog'),
      ),
      'js' => array(
        drupal_get_path('module', 'template_chooser') .'/template_chooser.js',
      ),
      'css' => array(
        drupal_get_path('module', 'template_chooser') .'/template_chooser.css',
      )
    );

    $wrapper_id = drupal_html_id($element_key);
    $element['template_name'] = array(
      '#type' => 'select',
      //'#title' => t('Layout'),
      '#options' => $options,
      '#default_value' => $values['template_name'],
      '#required' => $element['#required'],
      '#element_validate' => array('template_field_widget_validate'),
      '#ajax' => array(
        'callback' => 'template_field_display_template_form_ajax',
        'wrapper' => $wrapper_id,
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#attributes' => array(
        'class' => array($wrapper_id, 'template-chooser-select-input'),
      ),
    );
    
    $element['open_template_dialog'] = array(
      '#markup' => l('Change template...', '', array('attributes' => array('class' => 'template-chooser-open-dialog', 'data-target' => $wrapper_id .'-modal')))
    );

    $element['templates_dialog'] = array(
      '#type' => 'container',
      '#id' => $wrapper_id .'-modal',
      '#attributes' => array(
        'class' => array(
          'template-chooser-modal',
        ),
        'title' => t('Available Templates'),
      ),
    );

    $template_options = array();
    foreach ($full_description_options as $name => $properties) {
      $template_options[] = theme('template_chooser_option', array('name' => $name, 'properties' => $properties));
    }
    $element['templates_dialog']['list'] = array(
      '#theme' => 'item_list',
      '#items' => array_values($template_options)
    );

    $option_keys = array_keys($options);
    $template_name = !empty($values['template_name']) ? $values['template_name'] : array_shift($option_keys);

    $element['template_fields'] = array(
      '#type' => 'container',
      '#prefix' => '<div id="'. $wrapper_id .'">',
      '#suffix' => '</div>',
    );

    $element['template_fields']['header'] = array(
      '#theme' => 'template_chooser_option',
      '#name' => $template_name,
      '#properties' => $full_description_options[$template_name],
      '#no_select' => TRUE,
    );

    $element['template_fields']['inputs'] = template_field_get_template_details($template_name, $values['data']);
  }

 return $element;

}

/**
 * Implements hook_theme().
 */
function template_chooser_theme($existing, $type, $theme, $path) {
  return array(
    'template_chooser_option' => array(
      'variables' => array('name' => NULL, 'properties' => array(), 'no_select' => FALSE),
    ),
  );
}

/**
 * Theme function to render the chooser option display. Used to display both
 * the currently selected template in the edit form, as well as for the list
 * of available templates in the dialog.
 *
 * @param array $variables
 * @return string
 */
function theme_template_chooser_option($variables) {
  $output = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'template-chooser-option',
      ),
      'data-template' => $variables['name'],
    ),
  );

  if ($variables['properties']['thumbnail']) {
    $output['image'] = array(
      '#theme' => 'image',
      '#path' => $variables['properties']['thumbnail'],
      '#width' => 96,
      '#height' => 96,
    );
  }
  $output['text'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('template-chooser-option-text')
    ),
  );

  $output['text']['title'] = array(
    '#prefix' => '<h3>',
    '#markup' => $variables['properties']['label'],
    '#suffix' => '</h3>',
  );

  $output['text']['description'] = array(
    '#prefix' => '<div>',
    '#markup' => check_markup($variables['properties']['description']),
    '#suffix' => '</div>',
  );

  if (!$variables['no_select']) {
    $output['choose_template'] = array(
      '#markup' => l(t('Select'), '', array('attributes' => array('class' => 'template-chooser-select')))
    );
  }

  return drupal_render($output);
}