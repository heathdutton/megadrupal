<?php

/**
 * @file template api
 * template_api.module
 */

/**
 * Implements hook_ctools_plugin_type().
 */
function template_api_ctools_plugin_type() {
  $plugin_defaults = array(
    'cache'     => TRUE,
    'use hooks' => TRUE,
    'info file' => TRUE,
    'alterable' => TRUE,
  );

  $plugins = array();
  $plugins['renderer'] = array(
    'hook' => 'template_api_renderers',
    'defaults' => array(
      'class' => 'TemplateApiRenderer',
    ),
  ) + $plugin_defaults;

  $plugins['input_type'] = array(
    'hook' => 'template_api_input_types',
    'defaults' => array(
      'class' => 'TemplateApiInputType',
    ),
  ) + $plugin_defaults;

  $plugins['owner_type'] = array(
    'hook' => 'template_api_owner_types',
    'defaults' => array(
      'class' => 'TemplateApiOwnerType',
    ),
  ) + $plugin_defaults;

  return $plugins;
}

/**
 * Implements hook_menu().
 */
function template_api_menu() {
  $items = array();

  $items['template_api/autocomplete/bean'] = array(
    'page callback' => 'template_api_autocomplete_bean',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'plugins/input_types/bean.inc',
  );

  return $items;

}

/**
 * Implements hook_permission().
 */
function template_api_permission() {
  $base = 'template api';
  return array(
    'access template administration pages' => array(
      'title'       => t('Access Template Administration Pages'),
      'description' => t('Gives access to the template administration pages and View Templates'),
    ),
    "$base add" => array(
      'title' => t('Add a template'),
    ),
    "$base edit" => array(
      'title' => t('Edit a template'),
    ),
    "$base import" => array(
      'title' => t('Import a template'),
    ),
    "$base export" => array(
      'title' => t('Export a template'),
    ),
    "$base revert" => array(
      'title' => t('Revert a template'),
    ),
    "$base delete" => array(
      'title' => t('Delete a template'),
    ),
    "$base clone" => array(
      'title' => t('Clone a template'),
    ),
    "$base enable" => array(
      'title' => t('Enable a template'),
    ),
    "$base disable" => array(
      'title' => t('Disable a template'),
    ),
  );
}

/**
 * Get the factory class name
 */
function template_api_get_class_name($type, $default) {
  $class_name = variable_get("template_api_{$type}_name", $default);
  drupal_alter('template_api_{$type}_name', $class_name);
  if (class_exists($class_name)) {
    return $class_name;
  }

  return NULL;
}

/**
 * Get a template controller class
 */
function template_api_get_template_controller($name) {
  return template_api_get_controller($name, 'template');
}

/**
 * Get a template controller class
 */
function template_api_get_renderer_controller($name) {
  return template_api_get_controller($name, 'renderer');
}

/**
 * Get a template controller class
 */
function template_api_get_input_type_controller($name) {
  return template_api_get_controller($name, 'input_type');
}

/**
 * Get a owner controller class
 */
function template_api_get_owner_type_controller($name = NULL) {
  if (!$name) {
    $name = variable_get('template_api_default_owner_type', 'role');
  }
  return template_api_get_controller($name, 'owner_type');
}

/**
 * Control the loading of the class
 *
 * @param either a string or class
 * @param string type the type of controller to load
 * @return controller template
 */
function template_api_get_controller($name, $type) {
  static $classes = array();

  $default_controller_names = array(
    'template'   => 'TemplateApiTemplateController',
    'renderer'   => 'TemplateApiRendererController',
    'input_type' => 'TemplateApiInputTypeController',
    'owner_type' => 'TemplateApiOwnerTypeController',
  );

  if (empty($default_controller_names[$type])) {
    return NULL;
  }

  if (empty($classes[$type])) {
    $classes[$type] = array();
  }

  if (is_object($name)) {
    $arg  = $name;
    $name = $arg->name;
  }

  if (empty($classes[$type][$name])) {
    $controller_class_name = template_api_get_class_name($type, $default_controller_names[$type]);
    if (empty($arg)) {
      $arg = $name;
    }
    $classes[$type][$name] = new $controller_class_name($arg);
  }

  return $classes[$type][$name];
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function template_api_ctools_plugin_directory($module, $plugin) {
  return "plugins/$plugin";
}

/**
 * Get a list of the templates
 *
 * @param array $tags
 * @param $full_description boolean
 *  boolean of whether to return full description information or just title. defaults to FALSE
 *
 * @return array
 *  'template_id' => 'template_name'
 */
function template_api_get_template_list($tags = array(), $full_description = FALSE) {
  $return = array();

  foreach (template_api_load_all() as $template) {
    if(($template->disabled == NULL) || ($template->disabled == FALSE)) {
      if (empty($tags)) {
        if ($full_description) {
          $return[$template->name] = array(
            'label'       => $template->label,
            'description' => property_exists($template, 'description') ? $template->description : '',
            'thumbnail'   => property_exists($template, 'thumbnail') ? $template->thumbnail : '',
          );
        }
        else {
          $return[$template->name] = !empty($template->label) ? $template->label : $template->name;
        }
      }
      else {
        if (is_array($template->tags) && array_intersect($tags, $template->tags)) {
          if ($full_description) {
            $return[$template->name] = array(
              'label'       => $template->label,
              'description' => property_exists($template, 'description') ? $template->description : '',
              'thumbnail'   => property_exists($template, 'thumbnail') ? $template->thumbnail : '',
            );
          }
          else {
            $return[$template->name] = !empty($template->label) ? $template->label : $template->name;
          }
        }
      }
    }
  }

  return $return;
}

/**
 * View the template
 *
 * @param $template_name string
 *  The name of the template
 * @param $data array
 *
 * @return array
 *  A render array
 */
function template_api_view($template_name, $data) {
  if (!empty($template_name)) {
    return template_api_get_template_controller($template_name)->view($data);
  }
}

/**
 * Get the variables from a template
 */
function template_api_get_template_variables($template_name, $data) {
  if (!empty($template_name)) {
    return template_api_get_template_controller($template_name)->getVariables($data);
  }
}

/**
 * Load a template.
 *
 * First checks the database, then the "exported object" then a plugin
 */
function template_api_load($name) {
  ctools_include('export');
  return ctools_export_crud_load('template', $name);
}

/**
 * Load all of the templates
 */
function template_api_load_all() {
  ctools_include('export');
  return ctools_export_crud_load_all('template');
}

/**
 * Get all of the renderers
 */
function template_api_get_renderers() {
  ctools_include('plugins');

  $renderers = ctools_get_plugins('template_api', 'renderer');
  drupal_alter('template_api_renderers', $renderers);

  return $renderers;
}

/**
 * Get all of the intput types
 */
function template_api_get_input_types() {
  ctools_include('plugins');

  $input_types = ctools_get_plugins('template_api', 'input_type');
  drupal_alter('template_api_input_types', $input_types);

  return $input_types;
}

/**
 * Get all of the intput types
 */
function template_api_get_owner_types() {
  ctools_include('plugins');

  $owner_types = ctools_get_plugins('template_api', 'owner_type');
  drupal_alter('template_api_owner_types', $owner_types);

  return $owner_types;
}

/**
 * Implements hook_template_api_input_types().
 */
function template_api_template_api_input_types() {
  $plugins           = array();
  $plugins['select'] = array(
    'class' => 'TemplateApiSelectInputType',
    'label' => t('Select'),
  );

  $plugins['string'] = array(
    'class' => 'TemplateApiStringInputType',
    'label' => t('String'),
  );

  $plugins['text'] = array(
    'class' => 'TemplateApiTextInputType',
    'label' => t('Text'),
  );

  $plugins['text_format'] = array(
    'class' => 'TemplateApiTextFormatInputType',
    'label' => t('Rich Text Area'),
  );

  $plugins['file'] = array(
    'class' => 'TemplateApiFileInputType',
    'label' => t('File'),
  );

  $plugins['fieldset'] = array(
    'class' => 'TemplateApiFieldsetInputType',
    'label' => t('Fieldset'),
  );

  $plugins['vertical_tabs'] = array(
    'class' => 'TemplateApiVerticalTabsInputType',
    'label' => t('Vertical Tabs'),
  );

  $plugins['hidden'] = array(
    'class' => 'TemplateApiHiddenInputType',
    'label' => t('Hidden'),
  );

  $plugins['color'] = array(
    'class' => 'TemplateApiColorInputType',
    'label' => t('Color'),
  );

  if (module_exists('bean')) {
    $plugins['bean'] = array(
      'class' => 'TemplateApiBeanInputType',
      'label' => t('Bean'),
    );
  }

  $plugins['url'] = array(
    'class' => 'TemplateApiURLInputType',
    'label' => t('URL'),
  );

  return $plugins;
}

/**
 * A foo ctools default hook
 */
function template_api_default_template() {
  $templates            = array();
  $template_definitions = module_invoke_all('template_api_templates');

  foreach ($template_definitions as $key => $template_definition) {
    $template = new Template();
    $template->setUp($template_definition);

    $templates[$key] = $template;
  }

  return $templates;
}

/**
 * Implements hook_theme().
 */
function template_api_theme() {
  return array(
    'template_api_template_inputs_form' => array(
      'render element' => 'form',
      'file'           => 'plugins/export_ui/template_api.inc',
    ),
  );
}

/**
 * Get the form for a template
 */
function template_api_get_form($template_name, $input_values) {
  return template_api_get_template_controller($template_name)->getForm($input_values);
}

/**
 * Validate the template
 */
function template_api_validate_template($template_name, $input_values, &$form_state) {
  template_api_get_template_controller($template_name)->validate($input_values, $form_state);
}

/**
 * Check if a template is empty
 */
function template_api_empty_check($template_name, $input_values) {
  return template_api_get_template_controller($template_name)->isEmpty($input_values);
}

/**
 * Get all tags for all templates
 */
function template_api_get_all_tags() {
  $tags = array();
  foreach (template_api_load_all() as $template) {
    if (is_array($template->tags)) {
      $tags = array_merge($tags, $template->tags);
    }
  }

  return $tags;
}

/**
 * Content has being updated
 */
function template_api_content_update($template_name, $input_values) {
  return template_api_get_template_controller($template_name)->update($input_values);
}

/**
 * Content is being inserted
 */
function template_api_content_insert($template_name, $input_values) {
  return template_api_get_template_controller($template_name)->insert($input_values);
}

/**
 * Content is being deleted
 */
function template_api_content_delete($template_name, $input_values) {
  return template_api_get_template_controller($template_name)->delete($input_values);
}

/**
 * Implements hook_template_api_owner_types()
 */
function template_api_template_api_owner_types() {
  $plugins = array();

  if (module_exists('domain')) {
    $plugins['domain'] = array(
      'class' => 'TemplateApiDomainOwnerPlugin',
      'label' => t('Domains'),
    );
  };

  $plugins['role'] = array(
    'class' => 'TemplateAPIRoleOwnerPlugin',
    'label' => t('Role'),
  );

  return $plugins;
}

/**
 * Ajax callback
 */
function template_api_owner_type_ajax($form, $form_state) {
  return $form['owner_wrapper'];
}
