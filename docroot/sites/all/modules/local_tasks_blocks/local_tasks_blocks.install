<?php
/**
 * @file
 * Install, update and uninstall functions for the Local tasks blocks module.
 */

/**
 * Implements hook_uninstall().
 */
function local_tasks_blocks_uninstall() {
  require_once 'local_tasks_blocks.module';
  $deltas = array_keys(local_tasks_blocks_block_info());

  // Clean up any configuration variables we may have set:
  $variables_del = array();
  foreach ($deltas as $delta) {
    $delta_settings = array(
      'local_tasks_blocks_move_active_task_first_' . $delta,
      'local_tasks_blocks_prevent_redundant_system_display_' . $delta,
      'local_tasks_blocks_notext_trigger_' . $delta,
      'local_tasks_blocks_prevent_collapse_on_tabchange_' . $delta,
      'local_tasks_blocks_collapsing_block_' . $delta,
      'local_tasks_blocks_vanishing_trigger_' . $delta,
      'local_tasks_blocks_prevent_admin_display_' . $delta,
      'local_tasks_blocks_start_expanded_' . $delta,
    );
    $variables_del = array_merge($variables_del, $delta_settings);
  }

  // Clean up variables from 1.x versions (copied from 7.x-1.x .install file).
  // These are also cleaned up in hook_update_7200, but there's a possibility
  // that update.php isn't run before this module is uninstalled, so we'll
  // catch these in both places.
  $variables_del[] = 'local_tasks_blocks__theme_alter__primary';
  $variables_del[] = 'local_tasks_blocks__theme_alter__secondary';
  $variables_del[] = 'local_tasks_blocks__theme_alter__combo';
  $variables_del[] = 'local_tasks_blocks__theme_alter__all';

  foreach ($variables_del as $variable) {
    variable_del($variable);
  }
}

/**
 * Update from 1.x to 2.x, removing old settings variables.
 */
function local_tasks_blocks_update_7200(&$sandbox) {
  // Clean up variables from 1.x versions (copied from 7.x-1.x .install file).
  $variables_del = array(
    'local_tasks_blocks__theme_alter__primary',
    'local_tasks_blocks__theme_alter__secondary',
    'local_tasks_blocks__theme_alter__combo',
    'local_tasks_blocks__theme_alter__all',
  );
  foreach ($variables_del as $variable) {
    variable_del($variable);
  }
}

/**
 * Update from 1.x to 2.x, translating old block deltas to new names.
 */
function local_tasks_blocks_update_7201(&$sandbox) {
  // 7.x-1.x -> 7.x-2.x block delta mapping, which we'll use to transfer old
  // 7.x-1.x installations to the new block deltas.
  $delta_map = array(
    'all' => 'menu_local_tasks',
    'combo' => 'menu_menu_local_tasks',
    'primary' => 'menu_menu_local_tasks_primary',
    'secondary' => 'menu_menu_local_tasks_secondary',
  );
  // We need to clear out any new items in the block table before updating old
  // items, to prevent integrity constraint violations.  The new blocks are
  // automatically added to the table whenever the cache is cleared, which may
  // or may not have happened by now.
  $old_blocks = db_select('block', 'b')
    ->fields('b')
    ->condition('module', 'local_tasks_blocks', '=')
    ->condition('delta', array_keys($delta_map), 'IN')
    ->execute();
  $db_or_conflicting_blocks = db_or();
  $conflicting_blocks_exist = FALSE;
  foreach ($old_blocks as $old_block) {
    // Put together a set of OR queries to delete new blocks (if they've been
    // added to the DB already) to prepare for our old -> new update.
    // From block.install: {block} as the unique index:
    // 'tmd' => array('theme', 'module', 'delta').
    $new_delta = $delta_map[$old_block->delta];
    $db_and = db_and();
    // We only care about potential conflicts, in which case theme and delta
    // are the same for the new block and the converted old block.
    $db_and->condition('delta', $new_delta, '=')
      ->condition('theme', $old_block->theme, '=');
    $db_or_conflicting_blocks->condition($db_and);
    $conflicting_blocks_exist = TRUE;
  }
  $deleted_new_blocks = 0;
  if ($conflicting_blocks_exist) {
    $deleted_new_blocks = db_delete('block')
      ->condition('module', 'local_tasks_blocks', '=')
      ->condition($db_or_conflicting_blocks)
      ->execute();
  }
  $blocks_updated = 0;
  foreach ($delta_map as $old => $new) {
    $blocks_updated += db_update('block')
      ->fields(array(
        'delta' => $new,
        'cache' => DRUPAL_NO_CACHE,
      ))
      ->condition('module', 'local_tasks_blocks', '=')
      ->condition('delta', $old, '=')
      ->execute();
  }
  return t('Deleted !deleted_new_blocks new blocks which would have conflicted with old block conversion.  Converted !blocks_updated block references from 7.x-1.x to 7.x-2.x deltas.',
    array(
      '!blocks_updated' => $blocks_updated,
      '!deleted_new_blocks' => $deleted_new_blocks,
    )
  );
}
