<?php
/**
 * @file
 * Change MENU_LOCAL_TASKS into blocks for render/interaction at the theme layer
 */

/**
 * Implements hook_help().
 */
function local_tasks_blocks_help($path, $arg) {
  if ($path == 'admin/help#local_tasks_blocks') {
    $output = file_get_contents(drupal_get_path('module', 'local_tasks_blocks') . '/README.txt');
    return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $output)) : '<pre>' . check_plain($output) . '</pre>';
  }
}

/**
 * Implements hook_block_info().
 *
 * Provides 2 blocks:
 * - Plain MENU_LOCAL_TASKS: normal render of tasks, but in a block
 * - Menu MENU_LOCAL_TASKS: tasks rendered as a menu
 */
function local_tasks_blocks_block_info() {
  $blocks = array(
    'menu_local_tasks' => array(
      'info' => t('Local tasks'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'menu_local_tasks_primary' => array(
      'info' => t('Local tasks: Primary'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'menu_local_tasks_secondary' => array(
      'info' => t('Local tasks: Secondary'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'menu_menu_local_tasks' => array(
      'info' => t('Local tasks menu'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'menu_menu_local_tasks_primary' => array(
      'info' => t('Local tasks menu: Primary'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'menu_menu_local_tasks_secondary' => array(
      'info' => t('Local tasks menu: Secondary'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function local_tasks_blocks_block_view($delta = '') {
  $static = &drupal_static('local_tasks_blocks');

  // Check if we should skip the block based on settings:
  $prevent_admin_display = _local_tasks_blocks_variable_get('local_tasks_blocks_prevent_admin_display', $delta);
  $in_admin = arg(0) == 'admin';
  if ($in_admin && $prevent_admin_display) {
    return FALSE;
  }

  // Get the primary and secondary MENU_LOCAL_TASKS:
  $tasks = menu_local_tabs();

  // If there are no primary tasks, don't bother continuing (result would be
  // empty):
  if (empty($tasks) || !isset($tasks['#primary']) || empty($tasks['#primary'])) {
    return;
  }

  // Determine which block to display:
  $block = FALSE;
  switch ($delta) {
    case 'menu_menu_local_tasks_secondary':
      unset($tasks['#primary']);
      $block = _local_tasks_blocks_block_menu_menu_local_tasks($tasks, $delta);
      break;

    case 'menu_menu_local_tasks_primary':
      // Let this CASE statement fall through after unsetting secondary tasks.
      unset($tasks['#secondary']);
    case 'menu_menu_local_tasks':
      $block = _local_tasks_blocks_block_menu_menu_local_tasks($tasks, $delta);
      break;

    case 'menu_local_tasks_secondary':
      unset($tasks['#primary']);
      $block = _local_tasks_blocks_block_menu_local_tasks($tasks, $delta);
      break;

    case 'menu_local_tasks_primary':
      // Let this CASE statement fall through after unsetting secondary tasks.
      unset($tasks['#secondary']);
    case 'menu_local_tasks':
      $block = _local_tasks_blocks_block_menu_local_tasks($tasks, $delta);
      break;

    default:
      break;

  }

  // If we successfully rendered a block, we've got some unification work to do
  // (merging JavaScript/CSS accross our different blocks):
  if ($block) {
    // Ready the JavaScript attached to this block:
    $js_settings = array(
      'local_tasks_blocks' => array(
        $delta => array(
          'collapsing_block' => _local_tasks_blocks_variable_get('local_tasks_blocks_collapsing_block', $delta),
          'vanishing_trigger' => _local_tasks_blocks_variable_get('local_tasks_blocks_vanishing_trigger', $delta),
          'notext_trigger' => _local_tasks_blocks_variable_get('local_tasks_blocks_notext_trigger', $delta),
          'prevent_collapse_on_tabchange' => _local_tasks_blocks_variable_get('local_tasks_blocks_prevent_collapse_on_tabchange', $delta),
          'start_expanded' => _local_tasks_blocks_variable_get('local_tasks_blocks_start_expanded', $delta),
        ),
      ),
    );

    // Ensure the necessary attachment elements exist (but don't overwrite any
    // block-specific attachments we received from the rendering function):
    $block['content'] += array('#attached' => array());
    $block['content']['#attached'] += array('js' => array(), 'css' => array());
    // Add the universal set of attachments:
    $block['content']['#attached']['js'][] = array(
      'data' => $js_settings,
      'type' => 'setting',
    );

    // If collapsing/accordion behavior is desired, attach those assets.
    if (_local_tasks_blocks_variable_get('local_tasks_blocks_collapsing_block', $delta)) {
      // Make sure jQuery.cookie() is available when using collapsing_block,
      // as our JS will need it.
      drupal_add_library('system', 'jquery.cookie');
      $block['content']['#attached']['js'][] = drupal_get_path('module', 'local_tasks_blocks') . '/js/behavior.collapsing_block.js';
      $block['content']['#attached']['css'][] = drupal_get_path('module', 'local_tasks_blocks') . '/css/behavior.collapsing_block.css';
    }

    // Since a block was rendered, set block_rendered to TRUE (this will inform
    // local_tasks_blocks_process_menu_local_tasks() that it can hide the
    // actual MENU_LOCAL_TASKS tasks):
    $static['block_rendered'] = TRUE;

    // If at least one of our blocks that has been rendered has been set to
    // prevent the system tabs from displaying, pass that message along to
    // local_tasks_blocks_process_menu_local_tasks():
    $prevent_system_display = _local_tasks_blocks_variable_get('local_tasks_blocks_prevent_redundant_system_display', $delta);
    if ($prevent_system_display) {
      $static['prevent_system_display'] = TRUE;
    }
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function local_tasks_blocks_block_configure($delta = '') {
  $form = array();
  $form['local_tasks_blocks_prevent_admin_display'] = array(
    '#title' => t('Prevent hijacking/block-ifying of MENU_LOCAL_TASKS on admin pages.'),
    '#type' => 'checkbox',
    '#description' => t('Prevent this block from rendering on admin pages. Enable this option only if some module/theme incompatibility is causing admin local tasks to disappear from the interface (this may be necessary when enabling both the system Toolbar and !admin-link modules).',
      array('!admin-link' => l(t('Admin'), 'http://drupal.org/project/admin'))),
    '#default_value' => _local_tasks_blocks_variable_get('local_tasks_blocks_prevent_admin_display', $delta),
  );
  $form['local_tasks_blocks_prevent_redundant_system_display'] = array(
    '#title' => t('Prevent redundant rendering of MENU_LOCAL_TASKS by the default system.'),
    '#type' => 'checkbox',
    '#description' => t('If at least one instance of a Local tasks blocks block (of any type) with this enabled has been rendered on a page, the system will be prevented from rendering MENU_LOCAL_TASKS in the default location.'),
    '#default_value' => _local_tasks_blocks_variable_get('local_tasks_blocks_prevent_redundant_system_display', $delta),
  );
  $form['local_tasks_blocks_move_active_task_first'] = array(
    '#title' => t('Put active primary task first.'),
    '#type' => 'checkbox',
    '#description' => t('Re-order the primary tasks so that the active task appears first; this is necessary for some use cases (e.g. auto-expanding the active menu in the !admin-link module).',
      array('!admin-link' => l(t('Admin'), 'http://drupal.org/project/admin'))),
    '#default_value' => _local_tasks_blocks_variable_get('local_tasks_blocks_move_active_task_first', $delta),
  );
  $form['local_tasks_blocks_collapsing_block'] = array(
    '#title' => t('Turn block into accordion.'),
    '#type' => 'checkbox',
    '#description' => t('Collapse this block and provide a handy on-hover icon to expand it (JavaScript required).'),
    '#default_value' => _local_tasks_blocks_variable_get('local_tasks_blocks_collapsing_block', $delta),
  );
  $form['local_tasks_blocks_vanishing_trigger'] = array(
    '#title' => t('Hide accordion trigger unless requested.'),
    '#type' => 'checkbox',
    '#description' => t('(in combination with "Turn block into accordion") Hide the accordion trigger unless the region/area is hovered.'),
    '#default_value' => _local_tasks_blocks_variable_get('local_tasks_blocks_vanishing_trigger', $delta),
  );
  $form['local_tasks_blocks_notext_trigger'] = array(
    '#title' => t('Hide accordion trigger text (only use an icon).'),
    '#type' => 'checkbox',
    '#description' => t('(in combination with "Turn block into accordion") Hide the text of the accordion trigger, representing it only using an icon.'),
    '#default_value' => _local_tasks_blocks_variable_get('local_tasks_blocks_notext_trigger', $delta),
  );
  $form['local_tasks_blocks_start_expanded'] = array(
    '#title' => t('Expand the accordion block by default.'),
    '#type' => 'checkbox',
    '#description' => t('(in combination with "Turn block into accordion") (cookies required to work) Expand the accordion by default; users can choose to collapse the block, and other options (e.g. "Prevent the menu from collapsing when switching primary tabs") will be respected.'),
    '#default_value' => _local_tasks_blocks_variable_get('local_tasks_blocks_start_expanded', $delta),
  );
  $form['local_tasks_blocks_prevent_collapse_on_tabchange'] = array(
    '#title' => t('Prevent the menu from collapsing when switching primary tabs.'),
    '#type' => 'checkbox',
    '#description' => t('(in combination with "Turn block into accordion") (cookies required to work) Prevent an expanded block from collapsing when switching between primary local tasks.'),
    '#default_value' => _local_tasks_blocks_variable_get('local_tasks_blocks_prevent_collapse_on_tabchange', $delta),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function local_tasks_blocks_block_save($delta = '', $edit = array()) {
  $all_configure_options = array(
    // Options shared by all of our blocks:
    'shared' => array(
      'local_tasks_blocks_prevent_admin_display',
      'local_tasks_blocks_prevent_redundant_system_display',
      'local_tasks_blocks_move_active_task_first',
      'local_tasks_blocks_collapsing_block',
      'local_tasks_blocks_vanishing_trigger',
      'local_tasks_blocks_notext_trigger',
      'local_tasks_blocks_prevent_collapse_on_tabchange',
      'local_tasks_blocks_start_expanded',
    ),
    // Options specific to any one (or more) of our blocks:
    'menu_local_tasks' => array(),
    'menu_menu_local_tasks' => array(),
  );

  // Put together all options the form may have (shared options + any
  // per-$delta options):
  $configure_options = $all_configure_options['shared'] + (isset($all_configure_options[$delta]) ? $all_configure_options[$delta] : array());

  // Iterate over all options available and, if they're in the form, save the
  // new value:
  foreach ($configure_options as $option) {
    if (isset($edit[$option])) {
      // We actually store our variables per-block-delta.
      $variable_name = $option . '_' . $delta;
      variable_set($variable_name, $edit[$option]);
    }
  }
}

/**
 * Internal callback from local_tasks_blocks_block_view() - Plain block version.
 *
 * Returns a typically rendered version of MENU_LOCAL_TASKS for our Plain
 * MENU_LOCAL_TASKS block. This should be the same as normal output for
 * MENU_LOCAL_TASKS, except encapsulating it within our block so that it can be
 * moved around on the page or shown/hidden as our configuration allows.
 *
 * @param array $tasks
 *   The array of tasks MENU_LOCAL_TASKS as returned from menu_local_tabs().
 * @param array $delta
 *   The delta of the block currently being rendered (from hook_block_view).
 *
 * @return array
 *   Render array in the style of theme_menu_local_tasks().
 */
function _local_tasks_blocks_block_menu_local_tasks($tasks, $delta) {
  $static = &drupal_static('local_tasks_blocks');
  // Set the semaphore so our hook_process_menu_local_tasks() implementation
  // doesn't kill this block's content:
  $static['block_rendering'] = TRUE;
  $block = array();
  $tasks['#prefix'] = '<div class="tabs">';
  $tasks['#suffix'] = '</div>';
  $block = array(
    'subject' => '',
    // This drupal_render() call will end up invoking theme 'menu_local_tasks',
    // which calls our hook_process_menu_local_tasks() implementation:
    'content' => array('#markup' => drupal_render($tasks)),
  );
  // Unset the semaphore:
  $static['block_rendering'] = FALSE;

  return $block;
}

/**
 * Internal callback from local_tasks_blocks_block_view() - Menu block version.
 *
 * Returns a version of MENU_LOCAL_TASKS rendered as a Drupal menu for our Menu
 * MENU_LOCAL_TASKS block. This should mimic the rendered output from the menu
 * system, built around the items in MENU_LOCAL_TASKS.
 *
 * @param array $tasks
 *   The array of tasks MENU_LOCAL_TASKS as returned from menu_local_tabs().
 * @param array $delta
 *   The delta of the block currently being rendered (from hook_block_view).
 *
 * @return array
 *   A menu_link/menu_tree-style render array representing local task items.
 */
function _local_tasks_blocks_block_menu_menu_local_tasks($tasks, $delta) {
  // Define menu item defaults (merged w/#primary and #secondary task items):
  // Note: These are not overrides, but just guarantee certain properties exist
  // (since they may be required but may not have been defined in the original
  // task).
  $menu_item_defaults = array(
    '#theme' => '',
    '#below' => array(),
    '#localized_options' => array(
      'attributes' => array(
        'class' => array(),
      ),
    ),
    '#attributes' => array(
      'class' => array(),
    ),
    '#title' => '',
    '#href' => '',
    '#active' => FALSE,
    '#link' => array(
      'type' => 0,
      'href' => '',
      'title' => '',
    ),
  );

  // Ensure expected items exist in $tasks and that it is an array.
  $tasks = (array) $tasks + array('#primary' => array(), '#secondary' => array());

  // Define general menu item overrides:
  // Note: These are overrides, not defaults.  These are designed to replace
  // both the original task's value and the defaults set above.
  $menu_item_overrides = array(
    '#theme' => 'menu_link',
  );

  // Rip out the secondary tabs, since we'll need to assign them under the
  // active primary tab later on:
  $secondary = !empty($tasks['#secondary']) ? $tasks['#secondary'] : array();

  $first = FALSE;
  $key = FALSE;
  foreach ($secondary as $key => &$task) {
    $task = $menu_item_overrides + $task + $menu_item_defaults;
    $task['#attributes']['class'][] = 'leaf';
    if ($first === FALSE) {
      $first = $key;
    }
    $task['#title'] = $task['#link']['title'];
    $task['#href'] = $task['#link']['href'];
    // Change the link type from MENU_LOCAL_TASK to MENU_NORMAL_ITEM
    // (see constants defined in /includes/menu.inc):
    $task['#link']['type'] = ($task['#link']['type'] & ~MENU_IS_LOCAL_TASK) | MENU_NORMAL_ITEM;
    if ($task['#active']) {
      $task['#attributes']['class'][] = 'active-trail';
      $task['#localized_options']['attributes']['class'][] = 'active-trail';
    }
  }

  // Assign "first" and "last" classes to the #secondary links:
  if ($first !== FALSE) {
    $secondary[$first]['#attributes']['class'][] = 'first';
  }
  if ($key !== FALSE) {
    $secondary[$key]['#attributes']['class'][] = 'last';
  }
  // Need to unset $task since it was used by-reference earlier
  // (otherwise the next foreach() would assign into the reference
  // for each #primary task, and it totally breaks things.)
  unset($task);

  $content = array();
  foreach ($tasks['#primary'] as $task) {
    $task = $menu_item_overrides + $task + $menu_item_defaults;
    $task['#title'] = $task['#link']['title'];
    $task['#href'] = $task['#link']['href'];

    // Change the link type from MENU_LOCAL_TASK to MENU_NORMAL_ITEM
    // (see constants defined in /includes/menu.inc):
    $task['#link']['type'] = ($task['#link']['type'] & ~MENU_IS_LOCAL_TASK) | MENU_NORMAL_ITEM;

    // Assign special attributes to the active/expanded and
    // inactive/collapsed primary tabs:
    if ($task['#active']) {
      $task['#below'] = $secondary;
      $task['#attributes']['class'][] = 'active-trail';
      $task['#attributes']['class'][] = 'expanded';
      if (!empty($secondary)) {
        $task['#below']['#theme_wrappers'] = array('menu_tree');
      }
      $task['#localized_options']['attributes']['class'][] = 'active-trail';
    }
    else {
      $task['#attributes']['class'][] = 'collapsed';
    }

    // Check if reordering the active tab is in order:
    if ($task['#active'] && _local_tasks_blocks_variable_get('local_tasks_blocks_move_active_task_first', $delta)) {
      // Move the ACTIVE primary task to the top, which auto-expands it in
      // the Admin contrib module (maybe Admin will fix this behavior in the
      // future and ONLY use the "active"/"expanded"/"active-trail" classes,
      // but currently to auto-expand the item in the menu it needs to be both
      // properly classed AND at the top of the list):
      array_unshift($content, $task);
    }
    else {
      // Append INactive primary tasks to the bottom of the list:
      $content[] = $task;
    }
  }

  // If there are secondary tasks but for some reason no primary tasks (such as
  // when the block being displayed is "Secondary only"), merge the secondary
  // tasks into $content.
  if (empty($tasks['#primary']) && !empty($secondary)) {
    $content += $secondary;
  }

  // Assign "first" and "last" classes to the #primary links:
  $last = count($content) - 1;
  if ($last >= 0) {
    $content[0]['#attributes']['class'][] = 'first';
    $content[$last]['#attributes']['class'][] = 'last';
  }

  // Merge in the other necessary components of a root-level menu item:
  $content += array(
    '#theme_wrappers' => array(
      'menu_tree',
    ),
  );

  // Put the block together:
  $block = array(
    'subject' => t('Tasks'),
    'content' => $content,
  );

  return $block;
}

/**
 * Implements hook_process_HOOK() for menu_local_tasks().
 *
 * Unsets MENU_LOCAL_TASKS prior to display, if one of our blocks has been
 * displayed and we're not currently in the process of rendering the
 * Plain MENU_LOCAL_TASKS block.
 */
function local_tasks_blocks_process_menu_local_tasks(&$variables) {
  $static = &drupal_static('local_tasks_blocks');
  // If:
  // a) We're configured to prevent other modules (and the system) from
  // displaying MENU_LOCAL_TASKS, and
  // b) The local tasks have been rendered by at least one of our blocks, and
  // (the "block_rendered" flag)
  // c) We are not currently in the process of rendering one of our blocks
  // (the "block_rendering" semaphore)
  // Then: Clear MENU_LOCAL_TASKS so it is not rendered by anyone else.
  // Check if we are configured to care about redundant system display:
  $prevent_system_display = isset($static['prevent_system_display']) && $static['prevent_system_display'];
  // Check if a Local tasks blocks block has already been rendered:
  $block_already_rendered = isset($static['block_rendered']) && $static['block_rendered'];
  // Check if we are actually in the process of rendering a Local tasks blocks
  // block (if so, we won't interrupt our own internal process):
  $internal_rendering = isset($static['block_rendering']) && $static['block_rendering'];

  if ($prevent_system_display && $block_already_rendered && !$internal_rendering) {
    // Kill the task display dead:
    $variables = array();
  }
}

/**
 * Common interface for interacting with variable_get().
 *
 * Centralize variable defaults, so every usage of variable_get() within the
 * module behaves consistently.
 *
 * @param string $name
 *   Name of the variable to get via variable_get($name, $default).
 * @param array $delta
 *   The delta of the block being viewed or saved.
 * @param null $default
 *   (optional) The default value to return if this variable has never been set.
 */
function _local_tasks_blocks_variable_get($name, $delta, $default = NULL) {
  switch ($name) {
    case 'local_tasks_blocks_move_active_task_first':
    case 'local_tasks_blocks_prevent_redundant_system_display':
    case 'local_tasks_blocks_prevent_collapse_on_tabchange':
    case 'local_tasks_blocks_start_expanded':
      $default = 1;
      break;

    case 'local_tasks_blocks_notext_trigger':
    case 'local_tasks_blocks_collapsing_block':
    case 'local_tasks_blocks_vanishing_trigger':
    case 'local_tasks_blocks_prevent_admin_display':
      $default = 0;
      break;

    default:
      break;

  }
  // We actually store our variables per-block-delta.
  $name .= '_' . $delta;
  return variable_get($name, $default);
}
