<?php

include('TimeEntry.class.php');

/**
 * Implements of hook_menu().
 */
function time_entry_menu() {
  $items = array();

  $items['time_entry/add'] = array(
    'title' => 'Add Time Entry',
    'page callback' => 'time_entry_add_page',

    // @todo: Implements time entry permissions in order to enable this form
    // @todo: Consider moving this to a time_entry_ui.
    'access callback' => 'time_entry_type_access',
    'access arguments' => array('create'),
  );

  $time_entry_types = time_entry_get_types();
  foreach ($time_entry_types as $time_entry_type) {
    $items['time_entry/add/' . $time_entry_type->type] = array(
      'title' => 'Add '.$time_entry_type->label.' entry',
      'page callback' => 'drupal_get_form',
      'page arguments' => array($time_entry_type->type. '_time_entry_form', $time_entry_type->type),
      // @todo: Implements time entry permissions in order to enable this form
      // @todo: Consider moving this to a time_entry_ui.
      'access callback' => 'time_entry_type_access',
      'access arguments' => array('create', $time_entry_type->type),
      'file' => 'time_entry.forms.inc',
    );
  }

  $items['time_entry/%time_entry/edit'] = array(
    'title' => 'Edit Time Entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_entry_form', NULL, 1),
    'access callback' => 'time_entry_access',
    'access arguments' => array('update', 1),
    'file' => 'time_entry.forms.inc',
  );

  $items['time_entry/%time_entry/delete'] = array(
    'title' => 'Delete Time Entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_entry_delete_confirm', 1),
    'access callback' => 'time_entry_access',
    'access arguments' => array('delete', 1),
    'file' => 'time_entry.forms.inc',
  );

  return $items;
}

function time_entry_add_page() {
  $time_entry_types = time_entry_get_types();
  if ((int) count($time_entry_types) == (int) 1) {
    drupal_goto('time_entry/add/' . current($time_entry_types)->type);
  }
  else {
    $items = array();
    foreach ($time_entry_types as $machine_name => $time_entry_type) {
      $items[] = l($time_entry_type->label, 'time_entry/add/' . $machine_name);
    }
    return array('list' => array(
        '#theme' => 'item_list', '#items' => $items
        , '#title' => t('Select the type of time entry you want to create.'))
    );
  }
}

/**
 * Implements of hook_entity_info().
 */
function time_entry_entity_info() {
  $return['time_entry'] = array(
    'label' => t('Time Entry'),
    'base table' => 'time_entry',
    'revision table' => 'time_entry_revision',

    'entity class' => 'TimeEntry',
    'controller class' => 'EntityAPIController',
    'fieldable' => TRUE,
    
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'revision' => 'vid',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'module' => 'time_entry',
  );
  
  $types = db_select('time_entry_type', 'p')
    ->fields('p')
    ->execute()
    ->fetchAllAssoc('type');
    
  foreach ($types as $type => $info) {
    $return['time_entry']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/time_entries/manage/%time_entry_type',
        'real path' => 'admin/structure/time_entries/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer profiles'),
      ),
    );
  }
  
  $return['time_entry_type'] = array(
    'label' => t('Time Entry type'),
    'plural label' => t('Time Entries types'),
    'description' => t('Time Entries types.'),
    'entity class' => 'TimeEntryType',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'time_entry_type',
    'fieldable' => FALSE,
    'bundle of' => 'time_entry',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'time_entry_type_access',
    'module' => 'time_entry',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/time_entries',
      'file' => 'time_entry.admin.inc',
      'controller class' => 'EntityDefaultUIController',
    ),
  );
    
  return $return;
}

function time_entry_load($id, $reset = FALSE) {
  $time_entry = entity_load('time_entry', array($id), array(), $reset);
  return array_pop($time_entry);
}

function time_entry_create(array $values) {
  return new TimeEntry($values);
}

function time_entry_delete(TimeEntry $time_entry) {
  return $time_entry->delete();
}

function time_entry_save(TimeEntry $time_entry) {
  return $time_entry->save();
}

/**
 * Implements hook_permission().
 */
function time_entry_permission() {
  return array(
    'administer time entry types' => array(
      'title' => t('Administer time entry types'),
      'description' => t('Allow user to access Time Entry related administrative pages'),
    ),
  );
}

/**
 * Check if a time entry is in a given range.
 *
 * @param $time
 *   A time entry object of the time you want to search in the range.
 * @param $range
 *   A time entry object of the range (note: you don't need to have this
 *   object stored in the database, you can create it on-the-fly).
 *
 * @return
 *   Time entry object with the matched range or FALSE if the range doesn't match.
 */
function time_entry_in_range($time, $range) {
  $start = ($time->time > $range->time) ? $time->time : $range->time;
  $end = ($range->end > $time->end) ? $time->end : $range->end;
  $duration = $end - $start;

  if ($duration > 0) {
    return time_entry_create(array(
      'time' => $start,
      'duration' => $duration,
    ));
  }

  return FALSE;
}

/**
 * Check access for an individual time entry.
 */
function time_entry_access($op, $time_entry, $account = NULL) {
  return time_entry_type_access($op, $time_entry->type, $account);
}

/**
 * Check access for dealing with time entry type.
 */
function time_entry_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer time entry types', $account);
}

/**
 * Menu argument loader; Load a profile type by string.
 *
 * @param $type
 *   The machine-readable name of a profile type to load.
 * @return
 *   A profile type array or FALSE if $type does not exist.
 */
function time_entry_type_load($type) {
  return time_entry_get_types($type);
}

/**
 * Gets an array of all profile types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return ProfileType[]
 *   Depending whether $type isset, an array of profile types or a single one.
 */
function time_entry_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('time_entry_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Implements hook_views_api().
 */
function time_entry_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'time_entry') . '/includes/views',
  );
}


/**
 * Implements hook_forms().
 */
function time_entry_forms() {
  $forms = array();

  if ($types = time_entry_get_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_time_entry_form']['callback'] = 'time_entry_form';
    }
  }

  return $forms;
}


class TimeEntryEntityFieldQuery extends EntityFieldQuery {
  public $timeEntryConditions = NULL;
  
  /**
   * define some defaults for the class
   */
  public function __construct() {
    $this
      ->entityCondition('entity_type', 'time_entry')
      ->propertyOrderBy('time', 'ASC')
      ->addTag('time_entry_entity'); 
  }

}

/* 
 * Implements hook_query_TAG_alter().
 */
function time_entry_query_time_entry_entity_alter(QueryAlterableInterface $query) {
  $conditions = $query->alterMetaData['entity_field_query']->timeEntryConditions;  
  if ($conditions != NULL) {
    $query->condition($conditions);
  }
}

function _time_entry_build_by_fields_query($bundle, $fields) {
  $query = new TimeEntryEntityFieldQuery();

  if ($bundle) {
    $query->entityCondition('bundle', $bundle);
  }

  foreach ($fields as $field_name => $field) {
    $query->fieldCondition($field_name, $field['column'], $field['value'], $field['operator']);
  }

  return $query;
}

/**
 * Check if there are entries in a given period which matches the parameters.
 *
 * @param $start
 *   Where in time the period starts, can be an epoch or 2012-11-16T12:53:52-02:00.
 * @param $end
 *   Where in time the period ends, can be an epoch or 2012-11-16T12:53:52-02:00.
 * @param $bundle
 *   Return only entities from this given $bundle
 * @param $field
 *   An array where the key is the field_name and value is an array of:
 *     'column': the field column name (i.e. target_id, or value, etc)
 *     'value': the field value
 *     'operator': =, <=, >=, !=
 */
function time_entry_get_time_entry_ids_by_period($start, $end, $bundle = NULL, $fields = array()) {
  $query = _time_entry_build_by_fields_query($bundle, $fields);

  if (!is_int($start)) {
    $start = strtotime($start);
  }

  if (!is_int($end)) {
    $end = strtotime($end);
  }

  $starts_before = db_and();
  $starts_before->condition('time', $start , '<='); //Starts before period starts
  $starts_before->where('time + duration >= :start', array(':start' => $start)); //End after it started

  $starts_during = db_and();
  $starts_during->condition('time', $start, '>='); //Starts after period starts
  $starts_during->condition('time', $end, '<='); //Starts before period ends

  $time_lock_conditions = db_or();
  $time_lock_conditions->condition($starts_before)->condition($starts_during);

  $query->timeEntryConditions = ($time_lock_conditions);

  $result = $query->execute();
  return $result;
}

