<?php

/**
 * Implements hook_install().
 */
function time_entry_install() {
  if (!drupal_installation_attempted()) {
    $type = entity_create('time_entry_type', array(
      'type' => 'default',
      'label' => t('Default'),
      'weight' => 0,
      'data' => array(),
    ));
    $type->save();
  }
}

/**
 * Implements hook_enable().
 */
function time_entry_enable() {
  if(db_table_exists('time_entry_type') == FALSE) {
    drupal_install_schema('time_entry');
  }
}

/**
 * Implements hook_schema().
 */
function time_entry_schema() {
  $schema['time_entry'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Internal identifier for time entry.',
      ),
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The version id.',
      ),
      'time' => array(
        'description' => 'Base time represented as Unix timestamp (on UTC).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'duration' => array(
        'description' => 'Time entry duration, in seconds.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'Type of this time entry.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['time_entry_revision'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {time_entry} this version belongs to.',
      ),
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'Time when this version was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'time' => array(
        'description' => 'Base time represented as Unix timestamp (on UTC).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'duration' => array(
        'description' => 'Time entry duration, in seconds.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'Type of this time entry.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('vid'),
  );

  $schema['time_entry_type'] = array(
    'description' => 'Stores information about all defined time entry types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique profile type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this profile type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this profile type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this profile type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this profile type.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );
  
  return $schema;
}

/**
 * Create revision database structure.
 */
function time_entry_update_7100() {
  if (!db_field_exists('time_entry', 'vid')) {
    $vid = array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'The version id.',
      'initial' => 0,
    );
    db_add_field('time_entry', 'vid', $vid);
  }
  if (!db_table_exists('time_entry_revision')) {
    $time_entry_revision = array(
      'fields' => array(
        'id' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'The {time_entry} this version belongs to.',
        ),
        'vid' => array(
          'description' => 'The primary identifier for this version.',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'time' => array(
          'description' => 'Base time represented as Unix timestamp (on UTC).',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'duration' => array(
          'description' => 'Time entry duration, in seconds.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'type' => array(
          'description' => 'Type of this time entry.',
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
          'default' => '',
        ),
      ),
      'primary key' => array('vid'),
    );
    db_create_table('time_entry_revision', $time_entry_revision);
  }
}

/**
 * Create revisions for each stored time entry.
 */
function time_entry_update_7101(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_id'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(DISTINCT id) FROM {time_entry} WHERE vid=0')->fetchField();
  }

  $time_entries = db_select('time_entry', 't')
    ->fields('t', array('id', 'time', 'duration', 'type', 'vid'))
    ->condition('id', $sandbox['current_id'], '>')
    ->condition('vid', 0, '=')
    ->range(0, 3)
    ->orderBy('id', 'ASC')
    ->execute();

  foreach ($time_entries as $time_entry) {
    // Lazy mode: Since this is a new table, I'm sure that id is available as vid.
    $time_entry->vid = $time_entry->id;

    drupal_write_record('time_entry', $time_entry, 'id');
    drupal_write_record('time_entry_revision', $time_entry);

    $sandbox['progress']++;
    $sandbox['current_id'] = $time_entry->id;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  return t('Created revisions for each stored time entry.');
}

/**
 * Add created and log revision fields.
 */
function time_entry_update_7102() {
  if (!db_field_exists('time_entry_revision', 'created')) {
    $created = array(
      'description' => 'Time when this version was created.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'initial' => 0,
    );
    db_add_field('time_entry_revision', 'created', $created);
  }
  if (!db_field_exists('time_entry_revision', 'log')) {
    $log = array(
      'description' => 'The log entry explaining the changes in this version.',
      'type' => 'text',
      'not null' => TRUE,
      'size' => 'big',
      'initial' => '',
    );
    db_add_field('time_entry_revision', 'log', $log);
  }
}
