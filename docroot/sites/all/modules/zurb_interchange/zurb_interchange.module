<?php

/**
 * Implementation of hook_field_formatter_info_alter().
 */
function zurb_interchange_field_formatter_info_alter(&$info) {
  foreach ($info as &$formatter) {
    if (in_array('image', $formatter['field types']) && $formatter['module'] != 'zurb_clearing') {
      $formatter['settings']['interchange_styles'] = array();
      $formatter['settings']['interchange_set_background'] = FALSE;
    }
  }
}

/**
 * Implementation of hook_theme().
 * @return array
 */
function zurb_interchange_theme() {
  return array(
    'zurb_interchange_options' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implementation of hook_field_formatter_settings_form().
 * @param $settings_form
 * @param $context
 * @return array
 */
function zurb_interchange_field_formatter_settings_form_alter(&$settings_form, &$context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  $settings_form['interchange_styles'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Zurb Interchange Settings'),
    '#theme' => 'zurb_interchange_options',
  );

  $styles = image_styles();

  // sort the image styles based on weights/enabled of interchange settings
  if (!empty($settings['interchange_styles'])) {
    foreach ($styles as $key => $style) {
      $styles[$key]['enabled'] = $settings['interchange_styles'][$key]['enabled'];
      $styles[$key]['weight'] = $settings['interchange_styles'][$key]['weight'];
    }

    uasort($styles, '_zurb_interchange_sort');
  }

  foreach ($styles as $key => $style) {
    $settings_form['interchange_styles'][$key] = array(
      'enabled' => array(
        '#type' => 'checkbox',
        '#default_value' => $settings['interchange_styles'][$key]['enabled'],
      ),

      'name' => array(
        '#markup' => ucwords($key),
      ),

      'style' => array(
        '#type' => 'hidden',
        '#value' => $key,
      ),

      'weight' => array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => $settings['interchange_styles'][$key]['weight'],
        '#delta' => 30,
        '#title_display' => 'invisible',
        '#attributes' => array('class' => array('interchange-style-weight'))
      ),
    );
  }

  $settings_form['interchange_set_background'] = array(
    '#title' => t('Set as a background image with Zurb Interchange (sets the data-interchange attribute in an empty div)'),
    '#type' => 'checkbox',
    '#default_value' => $settings['interchange_set_background'],
  );
}

/**
 * Implementation of hook_field_formatter_settings_summary().
 * @param $summary
 * @param $context
 * @return string
 */
function zurb_interchange_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];
  $styles = array();

  if (isset($settings['interchange_styles'])) {
    uasort($settings['interchange_styles'], '_zurb_interchange_sort');

    foreach ($settings['interchange_styles'] as $key => $style) {
      if ($style['enabled']) {
        $styles[] = $style['style'];
      }
    }

    if (count($styles)) {
      $summary .= '<br />';
      $summary .= t('ZURB Interchange enabled image styles: @value', array('@value' => implode(', ', $styles)));
    }
  }

  if (isset($settings['interchange_set_background']) && $settings['interchange_set_background']) {
    $summary .= '<br />';
    $summary .= t('ZURB Interchange will set as a background image in an empty div.');
  }

  return $summary;
}

/**
 * Implementation of theme_table and tabledrag.js to order our styles from smallest to largest for Interchange.
 * @param $variables
 * @return string
 */
function theme_zurb_interchange_options($variables) {
  $element = $variables['form'];
  $header = array(NULL, t('Enabled'), t('Style'), t('Weight'));
  $rows = array();

  foreach (element_children($element) as $key) {
    $rows[] = array(
      'data' => array(
        array('class' => array('slide-cross')),
        drupal_render($element[$key]['enabled']),
        drupal_render($element[$key]['name']),
        drupal_render($element[$key]['weight']),
      ),
      'class' => array('draggable'),
    );
  }

  drupal_add_tabledrag('interchange-style-table', 'order', 'sibling', 'interchange-style-weight');

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'interchange-style-table')
  ));
}

/**
 * Sort styles by saved weight, lowest to highest.
 * @param $a
 * @param $b
 * @return int
 */
function _zurb_interchange_sort($a, $b) {
  if (!$a['enabled']) {
    return 1;
  }

  if ($a['enabled'] && !$b['enabled']) {
    return -1;
  }

  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

function zurb_interchange_preprocess_field(&$variables) {
  $entity_type = $variables['element']['#entity_type'];
  $field_name  = $variables['element']['#field_name'];
  $bundle      = $variables['element']['#bundle'];
  $view_mode   = $variables['element']['#view_mode'];

  $formatter_info = field_formatter_settings_get_instance_display_settings($entity_type, $field_name, $bundle, $view_mode);

  if (isset($formatter_info['interchange_styles']) && count($formatter_info['interchange_styles'])) {
    uasort($formatter_info['interchange_styles'], '_zurb_interchange_sort');

    foreach ($variables['element']['#items'] as $key => $item) {
      $interchange = array();

      foreach ($formatter_info['interchange_styles'] as $style) {
        if (!$style['enabled']) {
          continue;
        }

        $derivative = image_style_url($style['style'], $item['uri']);
        $style = image_style_load($style['style']);
        image_style_create_derivative($style, $item['uri'], image_style_path($style['name'], $item['uri']));
        $interchange[] = '[' . $derivative . ', (' . $style['name'] . ')]';
      }

      if (count($interchange)) {
        // if selected, format this image field as a div. Interchange will set the images as background-images in css.
        if ($formatter_info['interchange_set_background']) {
          $variables['items'][$key]['#theme'] = 'html_tag';
          $variables['items'][$key]['#tag'] = 'div';
          $variables['items'][$key]['#attributes']['data-interchange'] = implode(', ', $interchange);
        } else {
          $variables['items'][$key]['#item']['attributes']['data-interchange'] = implode(', ', $interchange);
        }

        unset($variables['items'][$key]['#item']['width']);
        unset($variables['items'][$key]['#item']['height']);
      }
    }
  }
}