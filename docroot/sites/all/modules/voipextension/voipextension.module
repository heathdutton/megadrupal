<?php

/**
 * @file
 * Defines VoIP Drupal extension field.
 */

/****
 * Basic core hooks.
 */

/**
 * Implements hook_help().
 */
function voipextension_help($path, $arg) {
  switch ($path) {
    case 'admin/help#voipextension':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The VoIP extension module provides a field for storing, and automatically assigning, Drupal VoIP extension numbers. See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function voipextension_permission() {
  return array(
    'administer voipextension' => array(
      'title' => t('Administer voipextension'),
      'description' => t('Configure voipextension defaults and administer extensions.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function voipextension_menu() {
  $items = array(
    'admin/voip/extension' => array(
      'title' => 'VoIP Extension settings',
      'description' => 'Defaults for extension field.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('voipextension_admin_settings'),
      'access arguments' => array('administer voipextension'),
      'file' => 'voipextension.admin.inc',
    ),
  );

  return $items;
}

/****
 * VoIP Drupal hooks.
 */

/**
 * Implements hook_voipscript_get_script_names().
 */
function voipextension_voipscript_get_script_names() {
  return array(
    'voipextension_basic_menu_script',
    'voipextension_default_extension_script',
  );
}

/**
 * Implements hook_voipscript_load_script().
 */
function voipextension_voipscript_load_script($script_name, $params = NULL) {
  if ($script_name == 'voipextension_basic_menu_script') {
    if (empty($params['field_name'])) {
      $params['field_name'] = variable_get('voipextension_default_field', '');
      if (empty($params['field_name'])) {
        // The extension has not been configured to use a field. If there is
        // only one use it; but set a watchdog message no matter.
        $fields = array();
        foreach(field_info_field_map() as $field_name => $field_info) {
          if ($field_info['type'] == 'voipextension') {
            $fields[$field_name] = $field_name;
          }
        }
        if (count($fields) == 1) {
          $params['field_name'] = reset($fields);
          watchdog('voipextension', 'No VoIP Extension Field set. Visit the VoIP administration extension settings page to set.', array(), WATCHDOG_WARNING);
        }
        else {
          if (count($fields) == 0) {
            watchdog('voipextension', 'No VoIP Extension Field has been made.', array(), WATCHDOG_ERROR);
          }
          else {
            watchdog('voipextension', 'No default VoIP Extension Field has been selected. Visit the VoIP extension settings page to set.', array(), WATCHDOG_ERROR);
          }
          return '';
        }
      }
    }
    module_load_include('inc', 'voipextension', 'voipextension.script');
    return _voipextension_basic_menu_script($params['field_name']);
  }

  if ($script_name == 'voipextension_play_extension_script') {
    module_load_include('inc', 'voipextension', 'voipextension.script');
    return _voipextension_play_extension_script($params['field_name'], $params['extension_number']);
  }

  if ($script_name == 'voipextension_default_extension_script') {
    module_load_include('inc', 'voipextension', 'voipextension.script');
    return _voipextension_default_extension_script($params['entity_type'], $params['entity_id'], $params['field_name'], $params['extension']);
  }
}

/****
 * Field hooks.
 */

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *   - max_length: the (maximum) length for an extension.
 *   - auto: if the extension number is automatically generated.
 * Instance settings:
 *   - min: numerically the lowest valid extension number.
 *   - max: numerically the highest valid extension number.
 *   - prefix: text to show before any extension.
 *   - suffix: text to show after any etension.
 */
function voipextension_field_info() {
  return array(
    'voipextension' => array(
      'label' => t('VoIP Extension'),
      'description' => t('This field stores the VoIP extension number.'),
      'settings' => array('max_length' => 5, 'auto' => TRUE),
      'instance_settings' => array('min' => '', 'max' => '', 'prefix' => '', 'suffix' => '', 'toggle_enabled' => 0, 'script' => '', 'script_selectable' => 0, ),
      'default_widget' => 'voipextension',
      'default_formatter' => 'voipextension_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function voipextension_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();

  $form['max_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum length'),
    '#default_value' => $settings['max_length'],
    '#required' => TRUE,
    '#description' => t('The maximum length of the extension in digits.'),
    '#element_validate' => array('element_validate_integer_positive'),
    '#disabled' => $has_data,
  );
  $form['auto'] = array(
    '#type' => 'select',
    '#title' => t('Automatic'),
    '#options' => array(TRUE => t('Generated automatically'), FALSE => t('Manually entered')),
    '#default_value' => $settings['auto'],
    '#description' => t('If the extension number is automatically created, or if the user enters it'),
    '#disabled' => $has_data,
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function voipextension_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['min'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum'),
    '#default_value' => $settings['min'],
    '#description' => t('The lowest of first extension number that should be given allowed.'),
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum'),
    '#default_value' => $settings['max'],
    '#description' => t('The highest or last extension number that should be given out.'),
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix'),
    '#default_value' => $settings['prefix'],
    '#size' => 60,
    '#description' => t("Define a string that should be prefixed to the extension number. For example the phone number to call. Leave blank for none."),
  );
  $form['suffix'] = array(
    '#type' => 'textfield',
    '#title' => t('Suffix'),
    '#default_value' => $settings['suffix'],
    '#size' => 60,
    '#description' => t("Define a string that should be prefixed to the extension number. Leave blank for none."),
  );
  $form['toggle_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Can be enabled/disabled'),
    '#default_value' => $settings['toggle_enabled'],
    '#description' => t("If enabled the extension status checkbox will be displayed."),
  );
  $form['script_selectable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable script selection'),
    '#default_value' => $settings['script_selectable'],
    '#description' => t("If the associated script selector will be displayed."),
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'voipextension_min': The extension is less than allowed mininum.
 * - 'voipextension_max': The extension is greater than the allowed maximum.
 * - 'voipextension_value_max_length': The extension exceeds the maximum length.
 * - 'voipextension_invalid_characters': The extension contains invalid
 * characters (presently just 0-9, no * or #).
 * - 'voipextension_duplicate': The extension already exists.
 */
function voipextension_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if ($item['value'] != '') {
      // digits - for simplicity for now only allowing digits (no # or *).
      if (preg_match('[^0-9]', $item['value'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'voipextension_invalid_characters',
          'message' => t('%name: contains a non-numeric character.', array('%name' => $instance['label'])),
        );
      }
      // max_length
      if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => "voipextension_value_max_length",
          'message' => t('%name: the extension may not be longer than %max digits.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length'])),
        );
      }
      // min
      if (is_numeric($instance['settings']['min']) && $item['value'] < $instance['settings']['min']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'number_min',
          'message' => t('%name: the value may be no less than %min.', array('%name' => $instance['label'], '%min' => $instance['settings']['min'])),
        );
      }
      // max
      if (is_numeric($instance['settings']['max']) && $item['value'] > $instance['settings']['max']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'number_max',
          'message' => t('%name: the value may be no greater than %max.', array('%name' => $instance['label'], '%max' => $instance['settings']['max'])),
        );
      }

      if ($entity) {
        // Check that the number does not otherwise exist.
        // First get entity_id. See: field_validation_unique_validator.inc for
        // examples where $id might not be returned. These can be added.
        // @todo see if we need any of these cases.
        // See also note on voipextension_get_entity() about bundles.
        list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
        $query = new EntityFieldQuery();
        if ($id) {
          // Exclude the entity itself from the check.
          $query->entityCondition('entity_id', $id, '!=');
        }
        // Check all instances of the field regardless of permissions.
        $count = $query->fieldCondition($field['field_name'], 'value', $item['value'], '=')
              ->addMetaData('account', user_load(1))
              ->count()
              ->execute();
        if ($count) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'voipextension_duplicate',
            'message' => t('%name: is a duplicate extension number.', array('%name' => $instance['label'])),
          );
        }
      }
    }
  }
}


/**
 * Implements hook_replicate_field_FIELD_TYPE().
 *
 * Clone entities with different id need different extensions. If the field
 * is configured to auto generate new extensions will be created. If not
 * it will be empty, and the site needs an additional hook to set a value.
 */
function voipextension_replicate_field_voipextension(&$replica, $entity_type, $field_name) {
  foreach($replica->$field_name as $language => &$values) {
    foreach ($values as $key => &$value) {
      $value['value'] = '';
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function voipextension_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['settings']['auto'] && (! isset($items[0]) || $items[0]['value'] == '')) {
    $items[0]['value'] = _voipextension_generate_extension($field, $instance);
    // Next two shouldn't be triggered but just in case, some legacy cases,
    // fill in defaults.
    if (!isset($items[0]['enabled'])) {
      $items[0]['enabled'] = $instance['default_value'][0]['enabled'];
    }
    if (!isset($items[0]['script'])) {
      $items[0]['script'] = $instance['default_value'][0]['script'];
    }
  }
  // Unset any empty values for whatever reason:
  // Form, or other submission of '', or failed extension generation.
  foreach ($items as $delta => $item) {
    if ($item['value'] == '' || $item['value'] === FALSE) {
      unset($items[$delta]);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function voipextension_field_is_empty($item, $field) {
  // In the case of default_settings auto field with value '' is not necessarily
  // empty. Empty '' value auto fields are otherwise handled.
  if (!isset($item['value']) || ($item['value'] === '' && $field['settings']['auto'] == 0) ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function voipextension_field_formatter_info() {
  return array(
    'voipextension_default' => array(
      'label' => t('Default'),
      'field types' => array('voipextension'),
      'settings' => array(
        'prefix_suffix' => TRUE,
        'status_display' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function voipextension_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'voipextension_default') {
    $element['prefix_suffix'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display prefix and suffix.'),
      '#default_value' => $settings['prefix_suffix'],
    );
    $element['status_display'] = array(
      '#type' => 'radios',
      '#title' => t('Display extension status.'),
      '#default_value' => $settings['status_display'],
      '#options' => array( 0 => t('Hide extension number when disabled'), 1 => t('Display if extension is enabled or disabled'), 2 => t('Do not display extension status'), ),
      '#description' => t("What to display if the extension is enabled on disabled."),
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function voipextension_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';
  if ($display['type'] == 'voipextension_default') {
    if ($settings['prefix_suffix']) {
      $summary[] = t('With prefix and suffix.');
    }
    if ($settings['status_display'] == 0) {
      $summary[] = t('Hidden if disabled.');
    }
    elseif ($settings['status_display'] == 1) {
      $summary[] = t('With status.');
    }
  }

  return implode(' ', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function voipextension_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'voipextension_default':
      foreach ($items as $delta => $item) {
        $output = '';
        if ($item['enabled'] || $settings['status_display'] != 0) {
          $output = check_plain($item['value']);
          if ($display['settings']['status_display'] == 1) {
            $output .= ' ' . $item['enabled'] ? t('(enabled)') : t('(disabled)');
          }
          if ($display['settings']['prefix_suffix']) {
            $prefixes = isset($instance['settings']['prefix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['prefix'])) : array('');
            $suffixes = isset($instance['settings']['suffix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['suffix'])) : array('');
    $prefix = (count($prefixes) > 1) ? format_plural($item['value'], $prefixes[0], $prefixes[1]) : $prefixes[0];
            $suffix = (count($suffixes) > 1) ? format_plural($item['value'], $suffixes[0], $suffixes[1]) : $suffixes[0];
            $output = $prefix . $output . $suffix;
          }
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function voipextension_field_widget_info() {
  return array(
    'voipextension' => array(
      'label' => t('VoIP extension text'),
      'field types' => array('voipextension'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function voipextension_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // All options are show on the field configuration form.
  $configuration_form = $form_state['build_info']['form_id'] == 'field_ui_field_edit_form';
  // Defaults for checkbox and script. Should always be set; but for fallback.

  $element += array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
    '#size' => $field['settings']['max_length'] + 2,
    '#maxlength' => $field['settings']['max_length'],
  );
  // Disable if automatically generated.
  if ($field['settings']['auto']) {
    $element['#disabled'] = TRUE;
    if (! isset($items[$delta]['value'])) {
      $element['#value'] = '';
      $element['#description'] = t('An extension number will be automatically generated.');
    }
  }
  else {
    // Validation.
    $element['#element_validate'][] = 'voipextension_field_widget_validate';
  }
  // Add prefix and suffix.
  if (!empty($instance['settings']['prefix'])) {
    $prefixes = explode('|', $instance['settings']['prefix']);
    $element['#field_prefix'] = field_filter_xss(array_pop($prefixes));
  }
  if (!empty($instance['settings']['suffix'])) {
    $suffixes = explode('|', $instance['settings']['suffix']);
    $element['#field_suffix'] = field_filter_xss(array_pop($suffixes));
  }

  $element_array = array('value' => $element);

  // Enable/disable checkbox.
  $default_enabled = isset($instance['default_value'][$delta]['enabled']) ? $instance['default_value'][$delta]['enabled'] : TRUE;
  if ($configuration_form || $instance['settings']['toggle_enabled']) {
    $element_array['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled'),
      '#default_value' => isset($items[$delta]['enabled']) ? $items[$delta]['enabled'] : $default_enabled,
      '#description' => t('If this extension is enabled.'),
    );
  }
  else {
    $element_array['enabled'] = array(
      '#type' => 'hidden',
      '#value' => isset($items[$delta]['enabled']) ? $items[$delta]['enabled'] : $default_enabled,
    );
  }

  // Script
  if (! $configuration_form) {
    // Use --default-- if the field is the same as the instance default.
    $field_script_default = isset($instance['default_value'][$delta]['script']) ? $instance['default_value'][$delta]['script'] : '';
    if (isset($items[$delta]['script'])) {
      if ($items[$delta]['script'] == $field_script_default) {
        $default_script = '';
      }
      else {
        $default_script = $items[$delta]['script'];
      }
    }
    else {
      $default_script = $field_script_default;
    }
  }
  else {
    $default_script = (isset($items[$delta]['script'])) ? $items[$delta]['script'] : '';
  }
  if ($configuration_form || $instance['settings']['script_selectable']) {
    $element_array['script'] = array(
      '#type' => 'select',
      '#title' => t('Script'),
      '#options' => array('' => t('--default--')) + _voipextension_valid_script_names(),
      '#default_value' => $default_script,
      '#description' => t("VoIP script associated with the extension."),
    );
  }
  else {
    $element_array['script'] = array(
      '#type' => 'hidden',
      '#value' => $default_script,
    );
  }

  return $element_array;
}

/**
 * FAPI validation of an individual number element.
 */
function voipextension_field_widget_validate($element, &$form_state) {
  $instance = field_widget_instance($element, $form_state);

  if (! empty($element['#value'])) {
    if (preg_match('[^0-9]', $element['#value'])) {
      form_error($element, t('%name: contains non-numeric character.', array('%name' => $instance['label'])));
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function voipextension_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}

/****
 * API functions.
 */

/**
 * Get entity field(s) from an entity.
 *
 * @param string $entity_type
 *   The entity type: node, user...
 * @param entity $entity
 *   Drupal entity.
 * @param string $field_name
 *   The name of the extension field.
 * @param string $langcode
 *   (optional) The language code of the field.
 * @param bool $multiple
 *   (optional) Default FALSE. Set to TRUE to return an array of extensions.
 *   Only makes sense should there, or could there be, a multiple field.
 * @return mixed array|bool
 *   Extension field keyed array. Keys:
 *    - 'value', the extension number.
 *    - 'enabled', if the extension is enabled,
 *    - 'script', script associated with extension or '' for default. Use
 *    voipextension_get_script() to retrieve correct default.
 */
function voipextension_get_entity_extension($entity_type, $entity, $field_name, $langcode = NULL, $multiple = FALSE) {
  // If the field is not yet attached to the entity load it.
  if (! isset($entity->$field_name)) {
    $field = field_info_field($field_name);
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    field_attach_load($entity_type, array($id => $entity), FIELD_LOAD_CURRENT, array('field_id', $field['id']));
  }
  // Get the correct extension from the entity.
  $extensions = field_get_items($entity_type, $entity, $field['field_name'], $langcode);

  if (! $multiple && $extensions) {
    return $extensions[0];
  }
  else {
    return $extensions;
  }
}

/**
 * Get entity from extension number.
 *
 * Note this is the minimum id, vid, bundle entity. Use
 * voipexension_get_entity_extension() to retrieve the extension. Or load the
 * entity fields for other values.
 *
 * Presently this relies on EntityFieldQuery() reading an index for the field
 * over all bundles. If this is ever not the case (nosql?) then the query
 * would need to be changed to cycle over all the bundles. Which bundles the
 * extension is attached to is available in the field info.
 *
 * @param string $field_name
 *   The name of the extension field.
 * @param string $extension_number
 *   The extension of the entity you want to retrieve.
 * @return mixed array|bool
 *   Entity array of 0 => entity_type, 1 => entity. Or FALSE.
 */
function voipextension_get_entity($field_name, $extension_number) {
  $result = FALSE;

  $query = new EntityFieldQuery();
  $query->fieldCondition($field_name, 'value', $extension_number, '=');
  foreach ($query->execute() as $entity_type => $entities) {
    $result = array($entity_type, current($entities));
  }
  return $result;
}

/**
 * Get the name of the script for a given extension.
 *
 * @param array $extension
 *   Single extension field array. For example as returned by
 *   voipextension_get_entity_extension().
 * @param string $field_name
 *   The name of the extension field.
 * @return string
 *   The script name.
 */
function voipextension_get_script($entity_type, $entity, $extension, $field_name) {
  if ($extension['script'] != '') {
    return $extension['script'];
  }
  else {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    return voipextension_get_default_script($entity_type, $field_name, $bundle);
  }
}

/**
 * Return the default script for a field instance.
 *
 * @param string $enity_type
 *   The entity type for the instance.
 * @param string $field_name
 *   The extension field name.
 * @param string $bundle_name
 *   The bundle for entity.
 * @return string
 *   The script name.
 */
function voipextension_get_default_script($entity_type, $field_name, $bundle_name) {
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);
  if (isset($instance['default_value'][0]['script']) && $instance['default_value'][0]['script'] != '') {
    // Field instance has a default.
    return $instance['default_value'][0]['script'];
  }
  else {
    // Use site default.
    return variable_get('voipextension_default_script_name', 'voipextension_default_extension_script');
  }
}

/**
 * Return the max length of an extension for a field.
 *
 * @param string $field_name
 *   The name of the extension field.
 * @return int
 *   The maximum number of digits for the extension.
 */
function voipextension_get_maxlength($field_name) {
  $field = field_info_field($field_name);
  return $field['settings']['max_length'];
}


/****
 * Internal helper functions.
 */

/**
 * Return array of valid script names.
 */
function _voipextension_valid_script_names() {
  if (! $scripts = variable_get('voipextension_valid_script_names', FALSE)) {
    $scripts = VoipScript::getScriptNames();
  }

  return $scripts;
}

/**
 * Generate a unique extension number.
 *
 * Restricted to instance min, max; but unique for the field over all instances.
 */
function _voipextension_generate_extension($field, $instance) {
  $id = $min = isset($instance['settings']['min']) && $instance['settings']['min'] != '' ? $instance['settings']['min'] : 1;
  $max = $instance['settings']['max'];
  $len = $field['settings']['max_length'];

  // Retrieve next id if counter is stored.
  if ( ($previous = variable_get('voipextension_' . $field['field_name'] . '_counter', NULL)) !== NULL) {
    $id = $previous + 1;
  }
  // Check valid.
  $id = _voipextension_generate_extension_check($id, $field['field_name'], $field['settings']['max_length'], $min, $max);
  if ($id) {
    // Double check it's not been used.
    // Does an EntityFieldQuery. Direct SQL could make this more efficient?
    while (voipextension_get_entity($field['field_name'], $id)) {
      $id++;
    }
  }
  $id = _voipextension_generate_extension_check($id, $field['field_name'], $field['settings']['max_length'], $min, $max);
  if ($id) {
    variable_set('voipextension_' . $field['field_name'] . '_counter', $id);
  }

  return $id;
}

function _voipextension_generate_extension_check($id, $field_name, $max_length, $min, $max) {
  if (drupal_strlen((string) $id) > $max_length) {
    drupal_set_message(t('Unable to allocate an extension. Maximum length reached.'), 'error');
    watchdog('voipextension', '%field reached maximum extension length, cannot automatically allocate number: %id.', array('%field' => $field_name, '%id' => $id), WATCHDOG_ERROR);
    return FALSE;
  }
  if ($max && $id > $max) {
    drupal_set_message(t('Unable to allocate an extension. Maximum value reached.'), 'error');
    watchdog('voipextension', '%field reached maximum extension, cannot automatically allocate number: %id.', array('%field' => $field_name, '%id' => $id), WATCHDOG_ERROR);
    return FALSE;
  }

  return $id;
}
