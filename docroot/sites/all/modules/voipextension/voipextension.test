<?php

/**
 * @file
 * Tests for voipextension.module.
 */

class VoipExtensionFieldTestCase extends DrupalWebTestCase {
  protected $instance;
  protected $admin_user;
  protected $web_user;

  public static function getInfo() {
    return array(
      'name'  => 'VoIP Extension field',
      'description'  => "Test the creation and validation of fields.",
      'group' => 'VoIP Extension'
    );
  }

  function setUp() {
    parent::setUp('field_test', 'voipextension');

    $this->web_user = $this->drupalCreateUser(array('access field_test content', 'administer field_test content'));
    $this->drupalLogin($this->web_user);

    $this->admin_user = $this->drupalCreateUser(array('administer content types', 'administer voipextension'));
  }

  // Test fields.

  /**
   * Test text field validation.
   */
  function testVoipExtensionFieldValidation() {
    // Create a field with settings to validate.
    $max_length = 3;
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'voipextension',
      'settings' => array(
        'auto' => 0,
        'max_length' => $max_length,
      )
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'voipextension',
      ),
      'display' => array(
        'default' => array(
          'type' => 'text_default',
        ),
      ),
    );
    field_create_instance($this->instance);

    // Test valid and invalid values with field_attach_validate().

    // Maximum length.
    $entity = field_test_create_stub_entity();
    $langcode = LANGUAGE_NONE;
    for ($i = 0; $i <= $max_length + 2; $i++) {
      $entity->{$this->field['field_name']}[$langcode][0]['value'] = str_repeat('1', $i);
      try {
        field_attach_validate('test_entity', $entity);
        $this->assertTrue($i <= $max_length, "Length $i does not cause validation error when max_length is $max_length");
      }
      catch (FieldValidationException $e) {
        $this->assertTrue($i > $max_length, "Length $i causes validation error when max_length is $max_length");
      }
    }

    // Minimum maximum value.
    $min = $this->instance['settings']['min'] = 100;
    $max = $this->instance['settings']['max'] = 300;
    field_update_instance($this->instance);

    for ($i = 1; $i < 400; $i += 100) {
      $entity->{$this->field['field_name']}[$langcode][0]['value'] = $i;
      try {
        field_attach_validate('test_entity', $entity);
        $this->assertTrue($min <= $i && $i <= $max, "Value $i does not cause validation error when min is $min and max is $max");
      }
      catch (FieldValidationException $e) {
        $this->assertTrue($i < $min || $i > $max, "Value $i causes validation error when min is $min and max is $max");
      }
    }

    // Need to save entities to test duplicate value.
    $edit = array("{$this->field['field_name']}[$langcode][0][value]" => 101);

    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));

    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    $this->assertRaw(t('is a duplicate extension number'), t('Duplicate triggers error.'));
  }

  /**
   * Test toggle_enabled and script_selectable
   */
  function testVoipExtensionEnabled() {
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'voipextension',
      'settings' => array(
      ),
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'voipextension',
      ),
      'display' => array(
        'default' => array(
          'type' => 'text_default',
        ),
      ),
      'settings' => array(
        'toggle_enabled' => 1,
      ),
    );
    field_create_instance($this->instance);
    $langcode = LANGUAGE_NONE;

    // Default: enabled; can be toggled. No script selector.
    $this->drupalGet('test-entity/add/test-bundle');
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][value]", '', t('Widget is displayed'));
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][enabled]", '1', t('Enabled on form.'));
    $this->assertRaw(t('If this extension is enabled.'), t('Enabled option visible on form'));
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][script]", '', t('Script selection not displayed.'));
    $this->assertNoRaw(t('VoIP script associated with the extension.'), t('Script option hidden on form'));

    // Disable toggle; Enable script.
    $this->instance['settings']['toggle_enabled'] = 0;
    $this->instance['settings']['script_selectable'] = 1;
    field_update_instance($this->instance);
    $this->drupalGet('test-entity/add/test-bundle');
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][enabled]", '1', t('Enabled option is not displayed.'));
    $this->assertNoRaw(t('If this extension is enabled.'), t('Enabled option hidden on form'));
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][script]", '', t('Script selection displayed.'));
    $this->assertRaw(t('VoIP script associated with the extension.'), t('Script option visible on form'));
  }

  /**
   * Test auto numbering.
   */
  function testVoipExtensionAuto() {
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'voipextension',
      'settings' => array(
        'max_length' => 2,
      ),
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'voipextension',
      ),
      'display' => array(
        'default' => array(
          'type' => 'text_default',
        ),
      ),
      'settings' => array(
        'min' => 97,
        'max' => 98,
      ),
    );
    field_create_instance($this->instance);
    $langcode = LANGUAGE_NONE;

    $edit = array();
    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][value]", '97', t('Initial entity has minimum extension.'));

    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][value]", '98', t('Next entity incremented by one.'));

    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));
    $this->assertRaw(t('Unable to allocate an extension. Maximum value reached.'), t('Maxium value reached, error message displayed.'));
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][value]", '', t('Next entity value not assigned.'));

    $this->instance['settings']['max'] = '';
    field_update_instance($this->instance);

    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][value]", '99', t('Next entity incremented by one.'));

    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));
    $this->assertRaw(t('Unable to allocate an extension. Maximum length reached.'), t('Maximum length reached, error message displayed.'));
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][value]", '', t('Next entity value not assigned.'));
  }

  /**
   * Display: prefix/suffix; enabled status.
   */

  /**
   * Test admin page; script selection.
   */
  function testVoipExtensionAdmin() {
    $this->drupalGet('admin/voip/extension');
    $this->assertResponse(403, 'Access is denied on the administration page');
    $this->drupalLogout();
    
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/voip/extension');
    $this->assertFieldByName('voipextension_default_script_name', 'voipextension_default_extension_script', t('Default script option'));
    $edit = array(
      "voipextension_valid_script_names[voipextension_default_extension_script]" => TRUE,
      'voipextension_default_script_name' => 'voipextension_default_extension_script',
    );
    $this->drupalPost(NULL, $edit, t('Save configuration'));
    $this->assertEqual(variable_get('voipextension_default_script_name', ''), 'voipextension_default_extension_script');
    $this->assertEqual(variable_get('voipextension_valid_script_names', ''), array('voipextension_default_extension_script' => 'voipextension_default_extension_script'));
  }


  /**
   * API functions.
   */
  function testVoipExtensionApi() {
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'voipextension',
      'settings' => array(
        'max_length' => 2,
      ),
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'voipextension',
      ),
      'display' => array(
        'default' => array(
          'type' => 'text_default',
        ),
      ),
      'settings' => array(
        'min' => 97,
        'max' => 98,
        'toggle_enabled' => 1,
        'script_selectable' => 1,
      ),
    );
    field_create_instance($this->instance);
    $langcode = LANGUAGE_NONE;

    // Create two entities with extensions.
    // First default.
    $edit = array();
    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $first_id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $first_id)), t('Entity was created'));
    // Second disabled, with chosen script. Just using a script name we know is
    // there.
    $edit = array(
      "{$this->field['field_name']}[$langcode][0][enabled]" => FALSE,
      "{$this->field['field_name']}[$langcode][0][script]" => 'voipextension_basic_menu_script',
    );
    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $second_id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $second_id)), t('Entity was created'));

    // Retrieve first entity by extension number.
    list($entity_type, $entity) = voipextension_get_entity($this->field['field_name'], 97);
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $this->assertEqual($id, $first_id, t('Correct entity returned for extension 97'));
    // Check extension settings.
    $extension = voipextension_get_entity_extension($entity_type, $entity, $this->field['field_name']);
    $this->assertEqual($extension['value'], 97, t('Correct extension for entity.'));
    $this->assertEqual($extension['enabled'], 1, t('Extension enabled.'));
    // Check default script returned.
    $script_name = voipextension_get_script($entity_type, $entity, $extension, $this->field['field_name']);
    $this->assertEqual($script_name, 'voipextension_default_extension_script', t('Correct default script returned'));

    // Retrieve second entity by extension number.
    list($entity_type, $entity) = voipextension_get_entity($this->field['field_name'], 98);
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $this->assertEqual($id, $second_id, t('Correct entity returned for extension 98'));
    // Check extension settings.
    $extension = voipextension_get_entity_extension($entity_type, $entity, $this->field['field_name']);
    $this->assertEqual($extension['value'], 98, t('Correct extension for entity.'));
    $this->assertEqual($extension['enabled'], 0, t('Extension disabled.'));
    // Check default script returned.
    $script_name = voipextension_get_script($entity_type, $entity, $extension, $this->field['field_name']);
    $this->assertEqual($script_name, 'voipextension_basic_menu_script', t('Correct script returned'));
   }

  /**
   * Test defaults.
   */
  function testVoipExtensionDefaults() {
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'voipextension',
      'settings' => array(
      ),
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'voipextension',
      ),
      'display' => array(
        'default' => array(
          'type' => 'text_default',
        ),
      ),
      'settings' => array(
      ),
      'default_value' => array( array(
        'value' => '',
        'enabled' => 0,
        'script' => '',
      ), ),
    );
    field_create_instance($this->instance);
    $langcode = LANGUAGE_NONE;

    // First default.
    $edit = array();
    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $first_id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $first_id)), t('Entity was created'));
    // Retrieve first entity by extension number, first default without min 
    // should be 1.
    list($entity_type, $entity) = voipextension_get_entity($this->field['field_name'], 1);
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $extension = voipextension_get_entity_extension($entity_type, $entity, $this->field['field_name']);
    $this->assertEqual($extension['enabled'], 0, t('Extension default disabled.'));
    $script_name = voipextension_get_script($entity_type, $entity, $extension, $this->field['field_name']);
    $this->assertEqual($script_name, 'voipextension_default_extension_script', t('Correct site default script returned'));

    // Change site default script.
    variable_set('voipextension_default_script_name', 'voipextension_default_test');
    $script_name = voipextension_get_script($entity_type, $entity, $extension, $this->field['field_name']);
    $this->assertEqual($script_name, 'voipextension_default_test', t('Correct site default script returned'));

    // Change field default script.
    $this->instance['default_value'][0] = array(
      'value' => '',
      'enabled' => 1,
      'script' => 'voipextension_basic_menu_script',
    );
    field_update_instance($this->instance);
    // Check default script has been updated.
    $script_name = voipextension_get_script($entity_type, $entity, $extension, $this->field['field_name']);
    $this->assertEqual($script_name, 'voipextension_basic_menu_script', t('Correct field default script returned'));

    // Second default.
    $edit = array();
    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $second_id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $second_id)), t('Entity was created'));
    // Retrieve by extension number. 
    list($entity_type, $entity) = voipextension_get_entity($this->field['field_name'], 2);
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $extension = voipextension_get_entity_extension($entity_type, $entity, $this->field['field_name']);
    $this->assertEqual($extension['enabled'], 1, t('Extension default enabled.'));
    $script_name = voipextension_get_script($entity_type, $entity, $extension, $this->field['field_name']);
    $this->assertEqual($script_name, 'voipextension_basic_menu_script', t('Correct field default script returned'));

    // Change field default script.
    $this->instance['default_value'][0] = array(
      'value' => '',
      'enabled' => 1,
      'script' => 'voipextension_test_default',
    );
    field_update_instance($this->instance);
    // Both entities should now return this script as they had no explicit
    // script set, and should have defaulted to 'whatever the field is'.
    // But the enabled disabled status should remain.
    list($entity_type, $entity) = voipextension_get_entity($this->field['field_name'], 1);
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $extension = voipextension_get_entity_extension($entity_type, $entity, $this->field['field_name']);
    $this->assertEqual($extension['enabled'], 0, t('Extension default enabled.'));
    $script_name = voipextension_get_script($entity_type, $entity, $extension, $this->field['field_name']);
    $this->assertEqual($script_name, 'voipextension_test_default', t('Correct field default script returned'));

    list($entity_type, $entity) = voipextension_get_entity($this->field['field_name'], 2);
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $extension = voipextension_get_entity_extension($entity_type, $entity, $this->field['field_name']);
    $this->assertEqual($extension['enabled'], 1, t('Extension default enabled.'));
    $script_name = voipextension_get_script($entity_type, $entity, $extension, $this->field['field_name']);
    $this->assertEqual($script_name, 'voipextension_test_default', t('Correct field default script returned'));
  }


  /**
   * Test widget.
   *
  function testVoipExtensionWidget() {
    // Setup a field and instance
    $entity_type = 'test_entity';
    $this->field_name = drupal_strtolower($this->randomName());
    $this->field = array('field_name' => $this->field_name, 'type' => 'voipextension');
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field_name,
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'label' => $this->randomName() . '_label',
      'settings' => array(
        'min' => 1000,
        'max' => 2000,
      ),
      'widget' => array(
        'type' => 'voipextension',
      ),
      'display' => array(
        'full' => array(
          'type' => 'text_default',
        ),
      ),
    );
    field_create_instance($this->instance);
    $langcode = LANGUAGE_NONE;

    // Display creation form.
    $this->drupalGet('test-entity/add/test-bundle');
    $this->assertFieldByName("{$this->field_name}[$langcode][0][value]", '', t('Widget is displayed'));
    $this->assertNoFieldByName("{$this->field_name}[$langcode][0][format]", '1', t('Format selector is not displayed'));

    // Submit with some value.
    $value = $this->randomName();
    $edit = array(
      "{$this->field_name}[$langcode][0][value]" => $value,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));

    // Display the entity.
    $entity = field_test_entity_test_load($id);
    $entity->content = field_attach_view($entity_type, $entity, 'full');
    $this->content = drupal_render($entity->content);
    $this->assertText($value, 'Filtered tags are not displayed');
  }

  /**
   * Test widgets + 'formatted_text' setting.
   *
  function testTextfieldWidgetsFormatted() {
    $this->_testTextfieldWidgetsFormatted('text', 'text_textfield');
    $this->_testTextfieldWidgetsFormatted('text_long', 'text_textarea');
  }

  /**
   * Helper function for testTextfieldWidgetsFormatted().
   *
  function _testTextfieldWidgetsFormatted($field_type, $widget_type) {
    // Setup a field and instance
    $entity_type = 'test_entity';
    $this->field_name = drupal_strtolower($this->randomName());
    $this->field = array('field_name' => $this->field_name, 'type' => $field_type);
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field_name,
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'label' => $this->randomName() . '_label',
      'settings' => array(
        'text_processing' => TRUE,
      ),
      'widget' => array(
        'type' => $widget_type,
      ),
      'display' => array(
        'full' => array(
          'type' => 'text_default',
        ),
      ),
    );
    field_create_instance($this->instance);
    $langcode = LANGUAGE_NONE;

    // Disable all text formats besides the plain text fallback format.
    $this->drupalLogin($this->admin_user);
    foreach (filter_formats() as $format) {
      if ($format->format != filter_fallback_format()) {
        $this->drupalPost('admin/config/content/formats/' . $format->format . '/disable', array(), t('Disable'));
      }
    }
    $this->drupalLogin($this->web_user);

    // Display the creation form. Since the user only has access to one format,
    // no format selector will be displayed.
    $this->drupalGet('test-entity/add/test-bundle');
    $this->assertFieldByName("{$this->field_name}[$langcode][0][value]", '', t('Widget is displayed'));
    $this->assertNoFieldByName("{$this->field_name}[$langcode][0][format]", '', t('Format selector is not displayed'));

    // Submit with data that should be filtered.
    $value = '<em>' . $this->randomName() . '</em>';
    $edit = array(
      "{$this->field_name}[$langcode][0][value]" => $value,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));

    // Display the entity.
    $entity = field_test_entity_test_load($id);
    $entity->content = field_attach_view($entity_type, $entity, 'full');
    $this->content = drupal_render($entity->content);
    $this->assertNoRaw($value, t('HTML tags are not displayed.'));
    $this->assertRaw(check_plain($value), t('Escaped HTML is displayed correctly.'));

    // Create a new text format that does not escape HTML, and grant the user
    // access to it.
    $this->drupalLogin($this->admin_user);
    $edit = array(
      'format' => drupal_strtolower($this->randomName()),
      'name' => $this->randomName(),
    );
    $this->drupalPost('admin/config/content/formats/add', $edit, t('Save configuration'));
    filter_formats_reset();
    $this->checkPermissions(array(), TRUE);
    $format = filter_format_load($edit['format']);
    $format_id = $format->format;
    $permission = filter_permission_name($format);
    $rid = max(array_keys($this->web_user->roles));
    user_role_grant_permissions($rid, array($permission));
    $this->drupalLogin($this->web_user);

    // Display edition form.
    // We should now have a 'text format' selector.
    $this->drupalGet('test-entity/manage/' . $id . '/edit');
    $this->assertFieldByName("{$this->field_name}[$langcode][0][value]", NULL, t('Widget is displayed'));
    $this->assertFieldByName("{$this->field_name}[$langcode][0][format]", NULL, t('Format selector is displayed'));

    // Edit and change the text format to the new one that was created.
    $edit = array(
      "{$this->field_name}[$langcode][0][format]" => $format_id,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertRaw(t('test_entity @id has been updated.', array('@id' => $id)), t('Entity was updated'));

    // Display the entity.
    $entity = field_test_entity_test_load($id);
    $entity->content = field_attach_view($entity_type, $entity, 'full');
    $this->content = drupal_render($entity->content);
    $this->assertRaw($value, t('Value is displayed unfiltered'));
  }
  */
}
