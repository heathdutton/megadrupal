<?php

/**
 * @file
 * Tests for domain curlypages module.
 */

/**
 * Test the existence of domain curlypages form elements.
 */
class DomainCurlypagesFormElementsTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Domain curlypages form elements',
      'description' => 'Ensure the domain curlypages configuration options are present.',
      'group' => 'Domain curlypages',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'domain', 'domain_curlypages');
    $this->admin = $this->drupalCreateUser(array(
      'access administration pages',
      'administer curlypages',
      'administer domains',
      'administer permissions',
    ));
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'access administration pages',
      'administer curlypages',
      'set domain access',
    ));
    $this->drupalLogin($this->admin);
    $this->drupalPost('admin/reports/status/rebuild', array(), t('Rebuild permissions'));
    $this->drupalLogOut();
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * domain_visibility and domain_curlypages
   */
  function testDomainCurlypagesForm() {
    $this->drupalGet('admin/structure/curlypage/1/edit');
    // Confirm curlypage clicks form elements appear on curlypage edit form.
    $this->assertFieldById('edit-domain-visibility-0', 0, t('Domain visibility on curlypage edit form.'));
    $this->assertFieldById('edit-domain-visibility-1', 0, t('Domain visibility on curlypage edit form.'));
    $this->assertFieldById('edit-domain-curlypages-1', 0, t('Domain checkboxes on curlypage edit form.'));
  }

}

/**
 * Test validation of domain curlypages fields.
 */
class DomainCurlypagesValidateTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Domain curlypages validate',
      'description' => 'Ensure the domain curlypages validation works.',
      'group' => 'Domain curlypages',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'domain', 'domain_curlypages');
    $this->admin = $this->drupalCreateUser(array(
      'access administration pages',
      'administer curlypages',
      'administer domains',
      'administer permissions',
    ));
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'access administration pages',
      'administer curlypages',
      'set domain access',
    ));
    $this->drupalLogin($this->admin);
    $this->drupalPost('admin/reports/status/rebuild', array(), t('Rebuild permissions'));
    // create domains
    $this->domain1 = array();
    $this->domain1['subdomain'] = 'one.example.com';
    $this->domain1['sitename'] = 'one';
    $this->drupalPost('admin/structure/domain/create', $this->domain1, t('Save domain record'));
    $this->domain2 = array();
    $this->domain2['subdomain'] = 'two.example.com';
    $this->domain2['sitename'] = 'two';
    $this->drupalPost('admin/structure/domain/create', $this->domain2, t('Save domain record'));
    $this->drupalLogOut();
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * domain curlypages validation
   */
  function testDomainCurlypagesValidate() {

    // wrong value. Show on selected domains and none selected
    $edited_curlypage = array();
    $edited_curlypage['domain_visibility'] = 0;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The domain visibility settings you are configuring means you don\'t want that curlypage to appear in any domain. Please disable the curlypage if you want that, otherwise review your domain visibility settings.'), t('Show on selected and none selected fails validation.'));

    // wrong value. Show except on selected and all selected
    $edited_curlypage = array();
    $edited_curlypage['domain_visibility'] = 1;
    $edited_curlypage['domain_curlypages[-1]'] = TRUE;
    $edited_curlypage['domain_curlypages[2]'] = TRUE;
    $edited_curlypage['domain_curlypages[3]'] = TRUE;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The domain visibility settings you are configuring means you don\'t want that curlypage to appear in any domain. Please disable the curlypage if you want that, otherwise review your domain visibility settings.'), t('Show except on selected and all selected fails validation.'));

    // test show on selected and all selected is changed to domain_site,
    // show except on selected and none selected
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['domain_visibility'] = 0;
    $edited_curlypage['domain_curlypages[-1]'] = TRUE;
    $edited_curlypage['domain_curlypages[2]'] = TRUE;
    $edited_curlypage['domain_curlypages[3]'] = TRUE;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $edited_curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));
    $visibility = db_query("SELECT visibility FROM {domain_curlypages_visibility} WHERE cpid = :cpid", array(':cpid' => $cpid))->fetchField();
    $this->assertTrue($visibility, t('Curlypage domain visibility is set as show except for the selected domains.'));
    $realm = db_query("SELECT realm FROM {domain_curlypages} WHERE cpid = :cpid", array(':cpid' => $cpid))->fetchField();
    $this->assertTrue($realm === 'domain_site', t('Curlypage domain realm is set as domain_site.'));

    // correct value.
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['domain_visibility'] = 0;
    $edited_curlypage['domain_curlypages[2]'] = TRUE;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));

  }

}

/**
 * Test show on selected functionality.
 */
class DomainCurlypagesInclusionTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Domain curlypages inclusion',
      'description' => 'Test show on selected domain curlypages visibility.',
      'group' => 'Domain curlypages',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'domain', 'domain_curlypages');
    $this->admin = $this->drupalCreateUser(array(
      'access administration pages',
      'administer curlypages',
      'administer domains',
      'administer permissions',
    ));
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'access administration pages',
      'administer curlypages',
      'set domain access',
    ));
    $this->drupalLogin($this->admin);
    $this->drupalPost('admin/reports/status/rebuild', array(), t('Rebuild permissions'));

    // this test will fail if the testing environtment is not set properly
    // this variables depend on your testing environtment
    $domain = 'drupal7.webdev.vermudas.lan'; // your domain
    $subdomains = array(
      2 => 'one',
      3 => 'two',
      4 => 'three',
    ); // your subdomains. subdomains start at 2

    // create domains
    foreach ($subdomains as $key => $subdomain) {
      $this->domains[$key] = array();
      $this->domains[$key]['subdomain'] = $subdomain . '.' . $domain;
      $this->domains[$key]['sitename'] = $subdomain;
      $this->drupalPost('admin/structure/domain/create', $this->domains[$key], t('Save domain record'));
    }

    $this->drupalLogOut();
    $this->drupalLogin($this->curlypage_admin);
    $this->curlypageCheckText = 'curlypage_write_curlypages()';
  }

  /**
   * test show on selected
   */
  function testCurlypageShowOn() {

    $edited_curlypage = array();
    $edited_curlypage['status'] = 1;
    $edited_curlypage['domain_visibility'] = 0;
    $edited_curlypage['domain_curlypages[-1]'] = TRUE; // select default
    $edited_curlypage['domain_curlypages[3]'] = TRUE;  // select second subdomain
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));

    // test curlypage is displayed in front page on default domain
    $this->drupalGet('');
    $this->assertRaw($this->curlypageCheckText, t('Curlypage was displayed on the front page.'));
    // test curlypage is displayed in front page on second subdomain
    $this->drupalGet('', array('base_url' => $this->domains[3]['subdomain']));
    $this->assertRaw($this->curlypageCheckText, t('Curlypage was displayed on the front page.'));
    // test curlypage is not displayed in front page on first subdomain
    $this->drupalGet('', array('base_url' => $this->domains[2]['subdomain']));
    $this->assertNoRaw($this->curlypageCheckText, t('Curlypage was displayed on the front page.'));
    // test curlypage is not displayed in front page on third subdomain
    $this->drupalGet('', array('base_url' => $this->domains[4]['subdomain']));
    $this->assertNoRaw($this->curlypageCheckText, t('Curlypage was displayed on the front page.'));

  }

}

/**
 * Test show except on selected functionality.
 */
class DomainCurlypagesExclusionTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Domain curlypages exclusion',
      'description' => 'Test show except on selected domain curlypages visibility.',
      'group' => 'Domain curlypages',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'domain', 'domain_curlypages');
    $this->admin = $this->drupalCreateUser(array(
      'access administration pages',
      'administer curlypages',
      'administer domains',
      'administer permissions',
    ));
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'access administration pages',
      'administer curlypages',
      'set domain access',
    ));
    $this->drupalLogin($this->admin);
    $this->drupalPost('admin/reports/status/rebuild', array(), t('Rebuild permissions'));

    // this variables depend on your testing environment
    $domain = 'drupal7.webdev.vermudas.lan'; // your domain
    $subdomains = array(
      2 => 'one',
      3 => 'two',
      4 => 'three',
    ); // your subdomains. subdomains start at 2

    // create domains
    foreach ($subdomains as $key => $subdomain) {
      $this->domains[$key] = array();
      $this->domains[$key]['subdomain'] = $subdomain . '.' . $domain;
      $this->domains[$key]['sitename'] = $subdomain;
      $this->drupalPost('admin/structure/domain/create', $this->domains[$key], t('Save domain record'));
    }

    $this->drupalLogOut();
    $this->drupalLogin($this->curlypage_admin);
    $this->curlypageCheckText = 'curlypage_write_curlypages()';
  }

  /**
   * test show on selected
   */
  function testCurlypageShowExceptOn() {

    $edited_curlypage = array();
    $edited_curlypage['status'] = 1;
    $edited_curlypage['domain_visibility'] = 1;
    $edited_curlypage['domain_curlypages[-1]'] = TRUE; // select default
    $edited_curlypage['domain_curlypages[3]'] = TRUE;  // select second subdomain
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));

    // test curlypage is not displayed in front page on default domain
    $this->drupalGet('');
    $this->assertNoRaw($this->curlypageCheckText, t('Curlypage was not displayed on the front page.'));
    // test curlypage is not displayed in front page on second subdomain
    $this->drupalGet('', array('base_url' => $this->domains[3]['subdomain']));
    $this->assertNoRaw($this->curlypageCheckText, t('Curlypage was not displayed on the front page.'));
    // test curlypage is displayed in front page on first subdomain
    $this->drupalGet('', array('base_url' => $this->domains[2]['subdomain']));
    $this->assertRaw($this->curlypageCheckText, t('Curlypage was displayed on the front page.'));
    // test curlypage is displayed in front page on third subdomain
    $this->drupalGet('', array('base_url' => $this->domains[4]['subdomain']));
    $this->assertRaw($this->curlypageCheckText, t('Curlypage was displayed on the front page.'));

  }

}
