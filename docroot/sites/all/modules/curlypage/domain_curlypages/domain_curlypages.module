<?php

/**
 * @file
 * Provides domain specific visibility settings for curlypages based on user domain access settings
 * Domain Curlypages does not define any permissions of its own yet it requires user to have
 * set domain access permission in order to define any domain based visibility settings.
 *
 * Acknowledgement: Almost all the code was borrowed from domain blocks module.
 */

/**
 * Implements hook_help().
 *
 * Display help and module information
 *
 * @param $path
 *  Which path of the site we're displaying help
 * @param $arg
 *  Array that holds the current path as would be returned from arg() function
 *
 * @return
 *  Help text for the path
 */
function domain_curlypages_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#domain_curlypages":
      $output = '<p>' . t("Provides domain specific visibility settings for curlypages") . '</p>';
      break;
  }
  return $output;
}

/**
 * Save domain curlypage data
 *
 * @param int $cpid
 *  The curlypage unique identifier.
 * @param array $domain_arr
 *  Array that contains domains selected on domain visibility form.
 *
 * @return
 *  No return value.
 */
function domain_curlypages_save($cpid, $domain_arr) {

  // none of the domains are checked
  if (empty($domain_arr)) {

    db_delete('domain_curlypages')
      ->condition('cpid', $cpid)
      ->execute();
    // Curlypage is visible on all domains (domain_site grant)
    db_insert('domain_curlypages')
      ->fields(array(
        'cpid' => $cpid,
        'realm' => 'domain_site',
        'domain_id' => 0,
      ))
      ->execute();

  }
  else { // some domains are checked

    // remove domain_site grant - curlypage visibility is defined by individual domains
    db_delete('domain_curlypages')
      ->condition('cpid', $cpid)
      ->execute();
    // insert all domains selected
    $insert_domains = db_insert('domain_curlypages')
      ->fields(array(
        'cpid',
        'realm',
        'domain_id',
      ));
    foreach ($domain_arr as $single_domain_id) {
      $new_value = array(
        'cpid' => $cpid,
        'realm' => 'domain_id',
        'domain_id' => $single_domain_id,
      );
      $insert_domains->values($new_value);
    }
    $insert_domains->execute();

  }

}

/**
 * Implements hook_curlypage_form().
 */
function domain_curlypages_curlypage_form(&$form, $form_state) {

  // If the user is a site admin, show the form, otherwise pass it silently.
  if (user_access('set domain access')) {

    $cpid = $form['cpid']['#value'];

    $form['visibility_settings']['#attached']['js'][] = array(
      'data' => drupal_get_path('module', 'domain_curlypages') . '/domain_curlypages_admin.js',
      'type' => 'file',
    );

    $form['visibility_settings']['domain_vis_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Domain specific visibility settings'),
    );

    $curlypage_domain_visibility = db_query("SELECT visibility FROM {domain_curlypages_visibility} WHERE cpid = :cpid", array(':cpid' => $cpid))->fetchField();
    // if this curlypage is still not present in domain_curlypages_visibility table
    // we set the default "show except on the selected domains"
    if ($curlypage_domain_visibility === FALSE) {
      $curlypage_domain_visibility = 1;
    }

    $selected_curlypage_domains = _domain_curlypages_load($cpid, $curlypage_domain_visibility);

    // Cannot pass zero in checkboxes
    $curlypage_domains = array();
    if (isset($selected_curlypage_domains)) {
      foreach ($selected_curlypage_domains as $value) {
        $value == 0 ? $value = -1 : $value = $value;
        $curlypage_domains[] = $value;
      }
    }

    $options = array();
    foreach (domain_domains() as $data) {
      // Cannot pass zero in checkboxes.
      ($data['domain_id'] == 0) ? $key = -1 : $key = $data['domain_id'];
      // The domain must be valid.
      if ($data['valid'] || user_access('administer domains')) {
        $options[$key] = $data['sitename'];
      }
    }

    $form['visibility_settings']['domain_vis_settings']['domain_visibility'] = array(
      '#type' => 'radios',
      '#title' => t('Show curlypage for specific domains'),
      '#options' => array(
        0 => t('Show for each selected domain.'),
        1 => t('Show except for the selected domains.'),
      ),
      '#default_value' => $curlypage_domain_visibility,
    );
    $form['visibility_settings']['domain_vis_settings']['domain_curlypages'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Display on'),
      '#options' => $options,
      '#required' => FALSE,
      '#description' => t('Limit curlypage display to these affiliates. This curlypage is visible on all domains by default.'),
      '#default_value' => $curlypage_domains,
    );

  }

}

/**
 * Implements hook_curlypage_form_validate().
 */
function domain_curlypages_curlypage_form_validate($form, &$form_state) {
  $visibility = $form_state['values']['domain_visibility'];
  $domains_checked = array_filter($form_state['values']['domain_curlypages']);
  if ($visibility) {
    // visibility is set to "show except on the selected domains"
    // all domains checked makes no sense
    if (!in_array(0, $form_state['values']['domain_curlypages'])) {
      form_set_error('domain_visibility', t('The domain visibility settings you are configuring means you don\'t want that curlypage to appear in any domain. Please disable the curlypage if you want that, otherwise review your domain visibility settings.'));
    }
    // if any domain is checked we compute complementary
    if ($domains_checked) {
      $complementary_domains = _domain_curlypages_complementary($form_state['values']['domain_curlypages']);
      form_set_value($form['visibility_settings']['domain_vis_settings']['domain_curlypages'], $complementary_domains, $form_state);
    }
  }
  else {
    // visibility is set to "show on the selected domains"
    // none checked makes no sense
    if (!$domains_checked) {
      form_set_error('domain_visibility', t('The domain visibility settings you are configuring means you don\'t want that curlypage to appear in any domain. Please disable the curlypage if you want that, otherwise review your domain visibility settings.'));
    }
    // all domains checked is equivalent to domain_site
    if (!in_array(0, $form_state['values']['domain_curlypages'])) {
      form_set_value($form['visibility_settings']['domain_vis_settings']['domain_visibility'], 1, $form_state);
      form_set_value($form['visibility_settings']['domain_vis_settings']['domain_curlypages'], array(), $form_state);
    }
  }
}

/**
 * Helper function to get the complementary of domain checkboxes.
 *
 * @param array $domains_checked
 *   The checkboxes selection.
 * @return array
 *   The complementary selection.
 */
function _domain_curlypages_complementary($domains_checked) {
  $complementary = array();
  foreach ($domains_checked as $domain_id => $domain_enabled) {
    if ($domain_enabled) {
      $complementary[$domain_id] = 0;
    }
    else {
      $complementary[$domain_id] = $domain_id;
    }
  }
  return $complementary;
}


/**
 * Implements hook_curlypage_form_submit().
 */
function domain_curlypages_curlypage_form_submit($form, &$form_state) {

  // If the user is a site admin, show the form, otherwise pass it silently.
  if (user_access('set domain access')) {

    $values = $form_state['values'];

    $enabled_domains = array();

    if (!empty($form_state['values']['domain_curlypages'])) {

      foreach ($form_state['values']['domain_curlypages'] as $single_domain_id => $domain_enabled) {

        if ($domain_enabled) {

          if ($single_domain_id == -1) {
            $single_domain_id = 0;
          }

          $enabled_domains[] = $single_domain_id;

        }

      }

    }

    domain_curlypages_save($form_state['values']['cpid'], $enabled_domains);

    db_merge('domain_curlypages_visibility')
      ->key(array('cpid' => $values['cpid']))
      ->fields(array('visibility' => $values['domain_visibility']))
      ->execute();

  }

}

/**
 * Implements hook_curlypage_delete().
 */
function domain_curlypages_curlypage_delete($curlypage) {

  // delete records for that curlypage
  db_delete('domain_curlypages')
    ->condition('cpid', $curlypage->cpid)
    ->execute();
  db_delete('domain_curlypages_visibility')
    ->condition('cpid', $curlypage->cpid)
    ->execute();

}

/**
 * Implements hook_query_TAG_alter().
 */
function domain_curlypages_query_curlypage_alter(QueryAlterableInterface $query) {

  $_domain = domain_get_domain();

  $query->join('domain_curlypages', 'dcp', 'dcp.cpid = cp.cpid');
  $query->condition(db_or()
    ->condition(db_and()
      ->condition('dcp.realm', 'domain_site')
      ->condition('dcp.domain_id', 0)
    )
    ->condition(db_and()
      ->condition('dcp.realm', 'domain_id')
      ->condition('dcp.domain_id', $_domain['domain_id'])
    )
  );

}

/**
 * Curlypage domains visibility.
 * NULL if not available, array() if using domain_site grant, keyed array if
 * using domain_id grant(s).
 *
 * @param int $cpid
 */
function _domain_curlypages_load($cpid, $visibility) {

  $result = db_query("SELECT domain_id, realm FROM {domain_curlypages} WHERE cpid = :cpid", array(':cpid' => $cpid));


  foreach ($result as $row) {
    $curlypage[$row->realm][] = $row->domain_id;
  }

  if (isset($curlypage['domain_site'])) {
    return array();
  }

  if (isset($curlypage)) {
    if ($visibility === '0') {
      return $curlypage['domain_id'];
    }
    if ($visibility === '1') {
      return array_diff(array_keys(domain_domains()), $curlypage['domain_id']);
    }
  }
  else {
    return NULL;
  }
}

/**
 * Implements hook_domainupdate().
 */
function domain_curlypages_domainupdate($op, $domain, $edit = array()) {

  switch ($op) {
    case 'delete':
      // remove records
      _domain_curlypages_delete($domain);
    case 'update':
    case 'insert':
    default:
    break;
  }

}

/**
 * Helper function for domain deletion
 *
 * @param array $domain
 *   The deleted domain
 */
function _domain_curlypages_delete($domain) {

  // delete any record for that domain in domain curlypages table
  db_delete('domain_curlypages')
    ->condition('domain_id', $domain['domain_id'])
    ->condition('realm', 'domain_id')
    ->execute();

  // find enable curlypages that where only enabled on that domain
  $curlypages = db_query("SELECT DISTINCT cp.cpid FROM {curlypages} cp LEFT JOIN {domain_curlypages} dcp ON cp.cpid = dcp.cpid WHERE cp.status = :status AND dcp.cpid IS NULL", array(':status' => 1));

  // disable those curlypages and set realm domain_site, domain_visibility 1
  $insert_domain_site = db_insert('domain_curlypages')
    ->fields(array('cpid', 'realm', 'domain_id'));

  $insert_visibility = db_insert('domain_curlypages_visibility')
    ->fields(array('cpid', 'visibility'));

  $clear_cache = FALSE;

  foreach ($curlypages as $curlypage) {
    $clear_cache = TRUE;
    curlypage_curlypage_disable($curlypage->cpid);
    $insert_domain_site
      ->values(array(
        'cpid' => $curlypage->cpid,
        'realm' => 'domain_site',
        'domain_id' => 0,
      ));
    $insert_visibility
      ->values(array(
        'cpid' => $curlypage->cpid,
        'visibility' => 1,
      ));
  }

  $insert_domain_site->execute();
  $insert_visibility->execute();

  if ($clear_cache) {
    cache_clear_all();
  }

}
