package {	import flash.events.Event;	import flash.display.MovieClip;	import flash.display.Loader;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.media.Sound;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.errors.IOError;	import flash.events.IOErrorEvent;	public class PeelMovie extends MovieClip {		// size of design peel		private const PEELDESIGNSIZE:uint = 500;		// PEEL PARAMETERS		// unique curlypage identifier		private var cpid:uint;				// style of peel		private var peelStyle:String;		// sizes		private var peelWidth:uint;		private var peelHeight:uint;		// peel position on page. Values: topleft || topright || bottomleft || bottomright		private var peelPosition:String;		// ad image on open peel		private var bigURL:String;		// mirror the image on peel. Values: true || false		private var mirror:Boolean;		// color of peel. Values: golden || silver || custom		private var peelColor:String;		// color of peel style. Values: flat || gradient		private var peelColorStyle:String;		// red value of custom color. Values 0-255		private var redValue:uint;		// green value of custom color. Values 0-255		private var greenValue:uint;		// blue value of custom color. Values 0-255		private var blueValue:uint;		// sound to play when peel is opened		private var openSoundURL:String;		// sound to play when peel is closed		private var closeSoundURL:String;		// link enabled. Values: true || false		private var linkEnabled:Boolean;		// where to open ad link, same or new window. Values: _self || _blank		private var linkTarget:String;		// ad link		private var link:String;		// speed of peel movement. Values: 1-9		private var peelSpeed:uint;		// milliseconds to automatic open the peel.		private var automaticOpen:uint;		// milliseconds to automatic close the peel.		private var automaticClose:uint;		// enable a close button on opened peel. Values: true || false		private var close_button_enable:Boolean;		// text on close button		private var text_on_close_button:String;		// red value of close button color		private var close_redValue:uint;		// green value of close button color		private var close_greenValue:uint;		// blue value of close button color		private var close_blueValue:uint;				// enable tracking. Values: true || false		private var tracking:Boolean;		// END PEEL PARAMETERS				// test variables for media load		private var big_opened:Boolean = false;		private var open_sound_opened:Boolean = false;		private var close_sound_opened:Boolean = false;		private var big_loaded:Boolean = false;		private var open_sound_loaded:Boolean = false;		private var close_sound_loaded:Boolean = false;		// loader for big image and mirror image		private var big_ldr:Loader = new Loader();		// loader for open sound		private var openSound:Sound = new Sound();		// loader for close sound		private var closeSound:Sound = new Sound();		// the peel clip		private var thepeel:MovieClip;		/*		 * PeelMovie Constructor		 */		public function PeelMovie () {			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			ExternalInterface.addCallback("startMovie", startMovie);			loadParams();			preload();			// listen for browser resizing			var e = new Event("null");			stage.addEventListener(Event.RESIZE, onStageResize);			onStageResize(e);		}		/**		 * Resize the movie taking into account browser zoom (stage size)		 */		private function onStageResize(e:Event):void {    		var widthScale:Number = stage.stageWidth / this.peelWidth;			var heightScale:Number = stage.stageHeight / this.peelHeight;    		scaleX = widthScale;    		scaleY = heightScale;		}		/*		 * Load Peel Movie Parameters		 */		private function loadParams () {				cpid = this.loaderInfo.parameters.cpid || 0;				peelStyle = this.loaderInfo.parameters.peelStyle || "style1";				peelPosition = this.loaderInfo.parameters.peelPosition || "topright";				bigURL = this.loaderInfo.parameters.bigURL || "big.jpg";				mirror = Boolean(uint(this.loaderInfo.parameters.mirror)) || false;				peelColor = this.loaderInfo.parameters.peelColor || "custom";				peelColorStyle = this.loaderInfo.parameters.peelColorStyle || "gradient";				redValue = this.loaderInfo.parameters.redValue || 0;				greenValue = this.loaderInfo.parameters.greenValue || 0;				blueValue = this.loaderInfo.parameters.blueValue || 0;				openSoundURL = this.loaderInfo.parameters.openSoundURL || "";				closeSoundURL = this.loaderInfo.parameters.closeSoundURL || "";				linkEnabled = Boolean(uint(this.loaderInfo.parameters.linkEnabled)) || false;				linkTarget = this.loaderInfo.parameters.linkTarget || "_blank";				link = this.loaderInfo.parameters.link || "http://www.drupal.org";				peelSpeed = this.loaderInfo.parameters.peelSpeed || 4;				automaticOpen = this.loaderInfo.parameters.automaticOpen * 1000 || 0;				automaticClose = this.loaderInfo.parameters.automaticClose * 1000 || 0;				close_button_enable = Boolean(uint(this.loaderInfo.parameters.close_button_enable)) || false;				text_on_close_button = this.loaderInfo.parameters.text_on_close_button || "close";				close_redValue = this.loaderInfo.parameters.close_redValue || 0;				close_greenValue = this.loaderInfo.parameters.close_greenValue || 0;				close_blueValue = this.loaderInfo.parameters.close_blueValue || 0;				peelWidth = this.loaderInfo.parameters.peelWidth || PEELDESIGNSIZE;				peelHeight = this.loaderInfo.parameters.peelHeight || PEELDESIGNSIZE;				tracking = this.loaderInfo.parameters.tracking || false;		}		/*		 * start the Movie		 */		private function startMovie () {			if (peelStyle == "style1") {				thepeel = new Style1Peel(cpid,										 peelPosition,										 mirror,										 peelColor,										 peelColorStyle,										 redValue,										 greenValue,										 blueValue,										 linkEnabled,										 linkTarget,										 link,										 peelSpeed,										 automaticOpen,										 automaticClose,										 close_button_enable,										 text_on_close_button,										 close_redValue,										 close_greenValue,										 close_blueValue,										 big_ldr,										 openSound,										 closeSound,										 peelWidth,										 peelHeight,										 tracking);			} else if (peelStyle == "style2") {				thepeel = new Style2Peel(cpid,										 peelPosition,										 mirror,										 peelColor,										 peelColorStyle,										 redValue,										 greenValue,										 blueValue,										 linkEnabled,										 linkTarget,										 link,										 peelSpeed,										 automaticOpen,										 automaticClose,										 close_button_enable,										 text_on_close_button,										 close_redValue,										 close_greenValue,										 close_blueValue,										 big_ldr,										 openSound,										 closeSound,										 peelWidth,										 peelHeight,										 tracking);			} else if (peelStyle == "style3") {				thepeel = new Style3Peel(cpid,										 peelPosition,										 mirror,										 peelColor,										 peelColorStyle,										 redValue,										 greenValue,										 blueValue,										 linkEnabled,										 linkTarget,										 link,										 peelSpeed,										 automaticOpen,										 automaticClose,										 close_button_enable,										 text_on_close_button,										 close_redValue,										 close_greenValue,										 close_blueValue,										 big_ldr,										 openSound,										 closeSound,										 peelWidth,										 peelHeight,										 tracking);			}			addChild(thepeel);		}		/*		 * Test if all media is loaded		 */		private function checkAllLoaded () : void {			if (!big_loaded) {				return;			}			if (!open_sound_loaded) {				if (openSoundURL != "") {					return;				}			}			if (!close_sound_loaded) {				if (closeSoundURL != "") {					return;				}			}			ExternalInterface.call("curlypage_notify_peel_loaded", this.cpid);		}		/*		 * Test if all media has started loading		 */		private function checkAllOpened () : void {			if (!big_opened) {				return;			}			if (!open_sound_opened) {				if (openSoundURL != "") {					return;				}			}			if (!close_sound_opened) {				if (closeSoundURL != "") {					return;				}			}			ExternalInterface.call("curlypage_hide_peel", cpid, peelPosition);		}		/*		 * big image load event handler		 */		private function bigImageLoaded (e:Event) : void {			big_loaded = true;			// set FPS			if (big_ldr.contentLoaderInfo.contentType == "application/x-shockwave-flash") {				stage.frameRate = big_ldr.contentLoaderInfo.frameRate;			}			checkAllLoaded();		}		/*		 * big image start load event handler		 */		private function bigImageOpened (e:Event) : void {			big_opened = true;			checkAllOpened();		}		/*		 * open sound load event handler		 */		private function openSoundLoaded (e:Event) : void {			open_sound_loaded = true;			checkAllLoaded();		}		/*		 * open sound start load event handler		 */		private function openSoundOpened (e:Event) : void {			open_sound_opened = true;			checkAllOpened();		}		/*		 * close sound load event handler		 */		private function closeSoundLoaded (e:Event) : void {			close_sound_loaded = true;			checkAllLoaded();		}		/*		 * close sound start load event handler		 */		private function closeSoundOpened (e:Event) : void {			close_sound_opened = true;			checkAllOpened();		}		/*		 * Preload images & sounds		 */		private function preload () {			big_ldr.contentLoaderInfo.addEventListener(Event.OPEN, bigImageOpened);			big_ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, bigImageLoaded);			big_ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			big_ldr.load(new URLRequest(bigURL));			if (openSoundURL != "") {				openSound.addEventListener(Event.OPEN, openSoundOpened);				openSound.addEventListener(Event.COMPLETE, openSoundLoaded);				openSound.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);				openSound.load(new URLRequest(openSoundURL));			} else {				openSound = null;			}			if (closeSoundURL != "") {				closeSound.addEventListener(Event.OPEN, closeSoundOpened);				closeSound.addEventListener(Event.COMPLETE, closeSoundLoaded);				closeSound.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);				closeSound.load(new URLRequest(closeSoundURL));			} else {				closeSound = null;			}		}		/*		 * Error handler		 */		private function ioErrorHandler (e:IOErrorEvent) : void {			// try to close all loads in progress			try {				big_ldr.close();				openSound.close();				closeSound.close();			}			catch (e:IOError) {				trace("Could not close some stream");			}			finally {				// set objects to null				big_ldr = null;				openSound = null;				closeSound = null;							ExternalInterface.call("curlypage_error_destroy", cpid, peelPosition);				trace("ioErrorHandler: " + e);			}		}		}}