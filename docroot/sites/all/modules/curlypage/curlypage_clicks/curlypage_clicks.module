<?php
/**
 * @file
 * Adds a clicks statistics system to curlypage module.
 *
 */

/**
 * Implements hook_help().
 */
function curlypage_clicks_help($path, $arg) {
  $output = "";
  switch ($path) {
    case 'admin/structure/curlypage/clicks':
      $output = '';
      $output .= t('<strong>C</strong> - Clicks');
      $output .= t(', <strong>CV</strong> - Close views');
      $output .= t(', <strong>OV</strong> - Open views');
      $output .= t(', <strong>CT</strong> - Clickthrough');
      $output .= t(', <strong>OC</strong> - OV/CV');
      break;
  }
  return $output;
}


/**
 * Implements hook_menu().
 */
function curlypage_clicks_menu() {
  $items['admin/structure/curlypage/clicks'] = array(
    'title' => 'Clicks',
    'page callback' => 'curlypage_clicks_list',
    'access arguments' => array('administer curlypages'),
    'type' => MENU_LOCAL_TASK,
    'description' => 'Display clicks count of curlypages',
  );
  $items['admin/structure/curlypage/%curlypage/clicks'] = array(
    'title' => 'Detail clicks log for this curlypage',
    'page callback' => 'curlypage_clicks_detail_list',
    'page arguments' => array(3),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/curlypage/%curlypage/resetclicks'] = array(
    'title' => 'Reset clicks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_clicks_reset', 3),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/curlypage/clicks/%curlypage_click/delete'] = array(
    'title' => 'Delete click',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_clicks_delete_click', 4),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Loading one, more or all clicks.
 */
function curlypage_click_load($cpclid = NULL) {
  static $curlypage_clicks;

  if (!is_array($curlypage_clicks)) {

    if (is_numeric($cpclid)) {
      $result = db_query("SELECT * FROM {curlypage_clicks_detail} WHERE cpclid = :cpclid", array(':cpclid' => $cpclid));
      $curlypage_click = $result->fetchObject();
      return $curlypage_click;
    }
    else {
      $result = db_query("SELECT * FROM {curlypage_clicks_detail}");
      $curlypage_clicks = array();

      foreach ($result as $curlypage_click) {
        $curlypage_clicks[$curlypage_click->cpclid] = $curlypage_click;
      }
    }
  }

  if (is_array($curlypage_clicks)) {

    if (is_numeric($cpclid)) {
      return $curlypage_clicks[$cpclid];
    }
    elseif (is_array($cpclid)) {
      return array_intersect_key($curlypage_clicks, array_flip($cpclid));
    }
    else {
      return $curlypage_clicks;
    }
  }
}

/**
 * Implements hook_curlypage_click().
 */
function curlypage_clicks_curlypage_click($curlypage) {

  // Adds one to clicks count if clicks track is enabled for this curlypage
  $result = db_update('curlypage_clicks')
    ->expression('clicks', 'clicks + 1')
    ->condition('cpid', $curlypage->cpid)
    ->condition('enabled', 1)
    ->execute();

  // If the clicks have been updated means clicks track was enabled
  // so we track the click
  if ($result) {

    global $user;

    $click = new stdClass();
    $click->cpid = $curlypage->cpid;
    $click->uid = $user->uid;
    $click->link = $curlypage->link;
    $click->timestamp = REQUEST_TIME;
    drupal_write_record('curlypage_clicks_detail', $click);

  }

}

/**
 * Implements hook_curlypage_view().
 */
function curlypage_clicks_curlypage_view($curlypage, $status) {

  switch ($status) {
    case 'close':
      db_update('curlypage_clicks')
        ->expression('views_close', 'views_close + 1')
        ->condition('cpid', $curlypage->cpid)
        ->condition('enabled', 1)
        ->execute();
      break;
    case 'open':
      db_update('curlypage_clicks')
        ->expression('views_open', 'views_open + 1')
        ->condition('cpid', $curlypage->cpid)
        ->condition('enabled', 1)
        ->execute();
      break;
  }

}

/**
 * Implements hook_curlypage_form().
 */
function curlypage_clicks_curlypage_form(&$form, $form_state) {

  $current_curlypage_id = $form['cpid']['#value'];

  $form['details']['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'curlypage_clicks') . '/curlypage_clicks_admin.js',
    'type' => 'file',
  );

  if ($current_curlypage_id) {
    $result = db_query("SELECT enabled, max_views_close, max_views_open FROM {curlypage_clicks} WHERE cpid = :cpid", array(':cpid' => $current_curlypage_id));
    $record = $result->fetchObject();
    $clicks_enabled = $record->enabled;
    $max_views_close = $record->max_views_close;
    $max_views_open = $record->max_views_open;
  }
  else {
    $clicks_enabled = 0;
    $max_views_close = 0;
    $max_views_open = 0;
  }

  // Tracking Settings.
  $form['details']['tracking_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tracking Settings'),
  );

  // Clicks Enable ( true | false ).
  $form['details']['tracking_settings']['clicks_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track clicks'),
    '#default_value' => $clicks_enabled,
    '#description' => t('Check to enable track clicks for this curlypage.'),
  );

  $form['details']['tracking_settings']['max_views_close'] = array(
    '#type' => 'textfield',
    '#title' => t('Max close views'),
    '#description' => t('Max number of close views before this curlypage is disabled. Set it to 0 if you don\'t want this curlypage disabled when a specific number of close views are reached.'),
    '#required' => TRUE,
    '#default_value' => $max_views_close,
    '#maxlength' => 5,
    '#size' => 8,
  );

  $form['details']['tracking_settings']['max_views_open'] = array(
    '#type' => 'textfield',
    '#title' => t('Max open views'),
    '#description' => t('Max number of open views before this curlypage is disabled. Set it to 0 if you don\'t want this curlypage disabled when a specific number of open views are reached.'),
    '#required' => TRUE,
    '#default_value' => $max_views_open,
    '#maxlength' => 5,
    '#size' => 8,
  );

}

/**
 * Implements hook_curlypage_form_validate().
 */
function curlypage_clicks_curlypage_form_validate($form, &$form_state) {

  // Max close views validation
  if (!is_numeric($form_state['values']['max_views_close']) || $form_state['values']['max_views_close'] < 0) {
    form_set_error('max_views_close', t('Max close views must be a number between 0 and 99999'));
  }

  // Max open views validation
  if (!is_numeric($form_state['values']['max_views_open']) || $form_state['values']['max_views_open'] < 0) {
    form_set_error('max_views_open', t('Max open views must be a number between 0 and 99999'));
  }

}

/**
 * Implements hook_curlypage_form_submit().
 */
function curlypage_clicks_curlypage_form_submit($form, &$form_state) {

  $clicks = new stdClass();
  $clicks->cpid = $form_state['values']['cpid'];
  $clicks->enabled = $form_state['values']['clicks_enabled'];
  $clicks->max_views_close = $form_state['values']['max_views_close'];
  $clicks->max_views_open = $form_state['values']['max_views_open'];

  $result = db_query("SELECT cpid FROM {curlypage_clicks} WHERE cpid = :cpid", array(':cpid' => $clicks->cpid));
  $clicks_exists = $result->fetchField();

  if ($clicks_exists) {
    drupal_write_record('curlypage_clicks', $clicks, 'cpid');
  }
  else {
    drupal_write_record('curlypage_clicks', $clicks);
  }

}

/**
 * Implements hook_curlypage_delete();
 *
 * If a curlypage is deleted, delete all click statistics of that curlypage
 */
function curlypage_clicks_curlypage_delete($curlypage) {

  db_delete('curlypage_clicks')
    ->condition('cpid', $curlypage->cpid)
    ->execute();
  db_delete('curlypage_clicks_detail')
    ->condition('cpid', $curlypage->cpid)
    ->execute();

}

/**
 * Display statistics of curlypages clicks.
 */
function curlypage_clicks_list() {

  $curlypages_per_page = 20;

  $header = array(
    array('data' => t('Curlypage'), 'field' => 'cp.name', 'sort' => 'asc'),
    array('data' => t('Link'), 'field' => 'cp.link'),
    array('data' => t('Track')),
    array('data' => t('C'), 'field' => 'cpcl.clicks'),
    array('data' => t('CV'), 'field' => 'cpcl.views_close'),
    array('data' => t('OV'), 'field' => 'cpcl.views_open'),
    array('data' => t('CT')),
    array('data' => t('OC')),
    array('data' => t('Operations'), 'colspan' => '2'),
  );

  $select = db_select('curlypages', 'cp')->extend('PagerDefault')->extend('TableSort');
  $select->join('curlypage_clicks', 'cpcl', 'cpcl.cpid = cp.cpid');
  $queried_curlypages = $select
    ->fields('cp', array('cpid', 'name', 'link'))
    ->fields('cpcl', array('enabled', 'clicks', 'views_close', 'views_open'))
    ->limit($curlypages_per_page)
    ->orderByHeader($header)
    ->execute();

  $rows = array();

  foreach ($queried_curlypages as $curlypage) {

    $clickthrough_close = $curlypage->views_close ? round($curlypage->clicks/$curlypage->views_close, 4)*100 . '%' : '0%';
    $clickthrough_open = $curlypage->views_open ? round($curlypage->clicks/$curlypage->views_open, 4)*100 . '%' : '0%';
    $clickthrough = $clickthrough_close . '/' . $clickthrough_open;
    $open_to_close = $curlypage->views_close ? round($curlypage->views_open/$curlypage->views_close, 4)*100 . '%' : '0%';

    $rows[] = array(
      array('data' => $curlypage->name ? l($curlypage->name, "admin/structure/curlypage/" . $curlypage->cpid . "/edit") : '&nbsp;'),
      array('data' => $curlypage->link ? check_plain($curlypage->link) : '&nbsp;'),
      array('data' => $curlypage->enabled ? 'enabled' : 'disabled'),
      array('data' => $curlypage->clicks ? $curlypage->clicks : 0),
      array('data' => $curlypage->views_close ? $curlypage->views_close : 0),
      array('data' => $curlypage->views_open ? $curlypage->views_open : 0),
      array('data' => $clickthrough),
      array('data' => $open_to_close),
      array('data' => l(t('reset'), 'admin/structure/curlypage/' . $curlypage->cpid . '/resetclicks')),
      array('data' => l(t('view details'), 'admin/structure/curlypage/' . $curlypage->cpid . '/clicks')),
    );

  }

  $build['curlypages_clicks_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#prefix' => t('This table lists clicks count of curlypages.'),
  );

  $build['curlypages_clicks_pager'] = array('#theme' => 'pager');

  return $build;

}

/**
 * Display clicks on a specific curlypage.
 */
function curlypage_clicks_detail_list($curlypage) {

  $clicks_per_page = 20;

  $header = array(
    array('data' => t('User'), 'field' => 'u.name'),
    array('data' => t('Time'), 'field' => 'cpcldt.timestamp', 'sort' => 'asc'),
    array('data' => t('Link'), 'field' => 'cpcldt.link'),
    array('data' => t('Operations')),
  );

  $select = db_select('users', 'u')->extend('PagerDefault')->extend('TableSort');
  $select->join('curlypage_clicks_detail', 'cpcldt', 'cpcldt.uid = u.uid');
  $queried_clicks = $select
    ->fields('u', array('uid', 'name'))
    ->fields('cpcldt', array('cpclid', 'timestamp', 'link'))
    ->condition('cpcldt.cpid', $curlypage->cpid)
    ->limit($clicks_per_page)
    ->orderByHeader($header)
    ->execute();

  $rows = array();

  foreach ($queried_clicks as $click) {

    $rows[] = array(
      array('data' => $click->name ? l($click->name, "user/" . $click->uid) : 'anonymous'),
      array('data' => $click->timestamp ? format_date($click->timestamp, 'short') : 0),
      array('data' => $click->link ? check_plain($click->link) : '&nbsp;'),
      array('data' => l(t('delete'), 'admin/structure/curlypage/clicks/' . $click->cpclid . '/delete')),
    );

  }

  $build['clicks_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#prefix' => t('This table lists detail clicks for curlypage') . ' ' . l($curlypage->name, "admin/structure/curlypage/" . $curlypage->cpid . "/edit"),
  );

  $build['clicks_pager'] = array('#theme' => 'pager');

  return $build;

}

/**
 * Menu callback; confirm reset clicks count for a curlypage.
 */
function curlypage_clicks_reset($form_state, &$form_state, $curlypage) {
  $form['curlypage'] = array('#type' => 'hidden', '#value' => serialize($curlypage));
  $params = array('%name' => $curlypage->name);
  return confirm_form($form, t('Are you sure you want to reset clicks count for curlypage %name?', $params), 'admin/structure/curlypage/clicks', NULL, t('Reset'), t('Cancel'));
}

function curlypage_clicks_reset_submit($form, &$form_state) {
  $curlypage = unserialize($form_state['values']['curlypage']);

  // delete all click tracks for the curlypage
  db_delete('curlypage_clicks_detail')
    ->condition('cpid', $curlypage->cpid)
    ->execute();
  // reset clicks count to 0 for the curlypage
  $updated_clicks = new stdClass();
  $updated_clicks->cpid = $curlypage->cpid;
  $updated_clicks->clicks = 0;
  $updated_clicks->views_open = 0;
  $updated_clicks->views_close = 0;
  drupal_write_record('curlypage_clicks', $updated_clicks, 'cpid');

  drupal_set_message(t('The curlypage %name clicks count has been reseted.', array('%name' => $curlypage->name)));
  $form_state['redirect'] = 'admin/structure/curlypage/clicks';
  return;
}


/**
 * Menu callback; confirm delete click track.
 */
function curlypage_clicks_delete_click($form_state, &$form_state, $curlypage_click) {
  $form['curlypage_click'] = array('#type' => 'hidden', '#value' => serialize($curlypage_click));
  return confirm_form($form, t('Are you sure you want to delete click?'), 'admin/structure/curlypage/' . $curlypage_click->cpid . '/clicks', NULL, t('Delete'), t('Cancel'));
}

function curlypage_clicks_delete_click_submit($form, &$form_state) {
  $curlypage_click = unserialize($form_state['values']['curlypage_click']);

  // delete click
  db_delete('curlypage_clicks_detail')
    ->condition('cpclid', $curlypage_click->cpclid)
    ->execute();
  // update clicks count
  db_update('curlypage_clicks')
    ->expression('clicks', 'clicks - 1')
    ->condition('cpid', $curlypage_click->cpid)
    ->execute();

  drupal_set_message(t('The click has been deleted.'));
  $form_state['redirect'] = 'admin/structure/curlypage/' . $curlypage_click->cpid . '/clicks';
  return;
}

/**
 * Implements hook_curlypage_parameters().
 */
function curlypage_clicks_curlypage_parameters(&$curlypages) {

  // Add tracking parameter to each curlypage.
  $result = db_query('SELECT cpid, enabled FROM {curlypage_clicks}');
  foreach ($result as $curlypage) {
    if (isset($curlypages[$curlypage->cpid])) {
      $curlypages[$curlypage->cpid]->tracking = $curlypage->enabled;
    }
  }

}

/**
 * Implements hook_cron().
 */
function curlypage_clicks_cron() {

  $clear_cache = FALSE;

  $curlypages = array();

  // get all views count and max views values from DB
  $result = db_query("SELECT * FROM {curlypage_clicks} cpc JOIN {curlypages} cp ON cpc.cpid = cp.cpid WHERE cp.status = :status AND cpc.enabled = :enabled", array(':status' => 1, ':enabled' => 1));
  foreach ($result as $curlypage) {
    $curlypages[] = $curlypage;
  }

  // each record contains a curlypage views values
  foreach ($curlypages as $curlypage) {

    if ($curlypage->max_views_close && ($curlypage->views_close > $curlypage->max_views_close)) {
      curlypage_curlypage_disable($curlypage->cpid);
      $clear_cache = TRUE;
      continue;
    }

    if ($curlypage->max_views_open && ($curlypage->views_open > $curlypage->max_views_open)) {
      curlypage_curlypage_disable($curlypage->cpid);
      $clear_cache = TRUE;
      continue;
    }

  }

  if ($clear_cache) {
    // clear the cache so an anonymous poster can see the curlypage being enabled or disabled
    cache_clear_all();
  }

}
