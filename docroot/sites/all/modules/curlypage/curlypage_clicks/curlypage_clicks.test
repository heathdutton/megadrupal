<?php

/**
 * @file
 * Tests for Curlypage clicks module.
 */

/**
 * Test the existence of clicks links.
 */
class CurlypageClicksLinksTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage clicks links',
      'description' => 'Ensure the curlypage clicks links are present.',
      'group' => 'Curlypage clicks',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_clicks');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * Clicks, reset and view details links
   */
  function testCurlypageClicksOperationLinks() {
    $this->drupalGet('admin/structure/curlypage');
    // Confirm Clicks link appears on curlypage list page.
    $this->assertLink('Clicks', 0, t('Clicks link appears on curlypage list page.'));

    $this->drupalGet('admin/structure/curlypage/clicks');
    // Confirm clicks page.
    $this->assertLinkByHref('admin/structure/curlypage/1/resetclicks', 0, t('Curlypage clicks reset link found.'));
    $this->assertLinkByHref('admin/structure/curlypage/1/clicks', 0, t('Curlypage view details link found.'));

    $this->drupalGet('admin/structure/curlypage/1/clicks');
  }

}

/**
 * Test the existence of clicks form elements.
 */
class CurlypageClicksFormElementsTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage clicks form elements',
      'description' => 'Ensure the curlypage clicks configuration options are present.',
      'group' => 'Curlypage clicks',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_clicks');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * clicks_enabled, max_views_open, max_views_close fields
   */
  function testCurlypageClicksForm() {
    $this->drupalGet('admin/structure/curlypage/1/edit');
    // Confirm curlypage clicks form elements appear on curlypage edit form.
    $this->assertFieldById('edit-clicks-enabled', 0, t('Clicks enable on curlypage edit form.'));
    $this->assertFieldById('edit-max-views-open', 0, t('Max views open on curlypage edit form.'));
    $this->assertFieldById('edit-max-views-close', 0, t('Max views close on curlypage edit form.'));
  }

}

/**
 * Test validation of curlypage clicks fields.
 */
class CurlypageClicksValidateTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage clicks Validate',
      'description' => 'Test curlypage clicks fields validation.',
      'group' => 'Curlypage clicks',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_clicks');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * max_views_close validation
   */
  function testCurlypageClicksMaxViewsClose() {
    $wrong_values = array(
      'abc', // not numeric
      '-25', // <0
    );

    // wrong values
    foreach ($wrong_values as $value) {
      $edited_curlypage = array();
      $edited_curlypage['max_views_close'] = $value;
      $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));
      $this->assertRaw(t('Max close views must be a number between 0 and 99999'), t('Max views close fails validation.'));
    }

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['max_views_close'] = 1000;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
  }

  /**
   * max_views_open validation
   */
  function testCurlypageClicksMaxViewsOpen() {
    $wrong_values = array(
      'abc', // not numeric
      '-25', // <0
    );

    // wrong values
    foreach ($wrong_values as $value) {
      $edited_curlypage = array();
      $edited_curlypage['max_views_open'] = $value;
      $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));
      $this->assertRaw(t('Max open views must be a number between 0 and 99999'), t('Max views open fails validation.'));
    }

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['max_views_open'] = 1000;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
  }

}

/**
 * Test max views close functionality.
 */
class CurlypageClicksMaxViewsCloseTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage clicks max views close',
      'description' => 'Check that curlypage is disabled when max views close are reached.',
      'group' => 'Curlypage clicks',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_clicks');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);
    $this->curlypageCheckText = 'curlypage_write_curlypages()';
  }

  /**
   * clicks_enabled, max_views_open, max_views_close fields
   */
  function testCurlypageClicksMaxCloseViews() {
    $edited_curlypage = array();
    $edited_curlypage['status'] = 1;
    $edited_curlypage['clicks_enabled'] = 1;
    $edited_curlypage['max_views_close'] = 100;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));

    // test curlypage is displayed in front page
    $this->drupalGet('');
    $this->assertRaw($this->curlypageCheckText, t('Curlypage was displayed on the front page.'));

    // update the close views to make them greater than max value
    db_update('curlypage_clicks')
      ->fields(array(
        'cpid' => 1,
        'views_close' => 101,
      ))
      ->execute();

    // run cron so curlypage is disabled cause views_close > max_views_close
    $this->cronRun();
    $this->drupalGet('');
    $this->assertNoRaw($this->curlypageCheckText, t('Curlypage was not displayed on the front page.'));

  }

}

/**
 * Test max views open functionality.
 */
class CurlypageClicksMaxViewsOpenTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage clicks max views open',
      'description' => 'Check that curlypage is disabled when max views open are reached.',
      'group' => 'Curlypage clicks',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_clicks');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);
    $this->curlypageCheckText = 'curlypage_write_curlypages()';
  }

  /**
   * clicks_enabled, max_views_open, max_views_close fields
   */
  function testCurlypageClicksMaxCloseViews() {
    $edited_curlypage = array();
    $edited_curlypage['status'] = 1;
    $edited_curlypage['clicks_enabled'] = 1;
    $edited_curlypage['max_views_open'] = 100;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));

    // test curlypage is displayed in front page
    $this->drupalGet('');
    $this->assertRaw($this->curlypageCheckText, t('Curlypage was displayed on the front page.'));

    // update the open views to make them greater than max value
    db_update('curlypage_clicks')
      ->fields(array(
        'cpid' => 1,
        'views_open' => 101,
      ))
      ->execute();

    // run cron so curlypage is disabled cause views_open > max_views_open
    $this->cronRun();
    $this->drupalGet('');
    $this->assertNoRaw($this->curlypageCheckText, t('Curlypage was not displayed on the front page.'));

  }

}

/**
 * Test reset link.
 */
class CurlypageClicksResetTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage clicks reset',
      'description' => 'Test curlypage reset link.',
      'group' => 'Curlypage clicks',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_clicks');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * reset link
   */
  function testCurlypageClicksMaxCloseViews() {
    $edited_curlypage = array();
    $edited_curlypage['status'] = 1;
    $edited_curlypage['clicks_enabled'] = 1;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));

    $now = REQUEST_TIME;

    // update the close views
    db_update('curlypage_clicks')
      ->fields(array(
        'cpid' => 1,
        'views_close' => 100,
        'views_open' => 500,
        'clicks' => 1,
      ))
      ->execute();

    // insert click
    db_insert('curlypage_clicks_detail')
      ->fields(array(
        'cpid' => 1,
        'uid' => 1,
        'link' => 'http://www.curlypage.co.cc',
        'timestamp' => $now,
      ))
      ->execute();

    // reset clicks
    $this->drupalPost('admin/structure/curlypage/1/resetclicks', array(), t('Reset'));
    $cpid = db_query("SELECT cpid FROM {curlypage_clicks} WHERE views_close = :views_close", array(':views_close' => 100))->fetchField();
    $this->assertFalse($cpid, t('Curlypage clicks not found in database.')); // views_close resetted
    $cpid = db_query("SELECT cpid FROM {curlypage_clicks} WHERE views_open = :views_open", array(':views_open' => 500))->fetchField();
    $this->assertFalse($cpid, t('Curlypage clicks not found in database.')); // views_open resetted
    $cpid = db_query("SELECT cpid FROM {curlypage_clicks} WHERE clicks = :clicks", array(':clicks' => 1))->fetchField();
    $this->assertFalse($cpid, t('Curlypage clicks not found in database.')); // clicks resetted

  }

}

/**
 * Test clicks details.
 */
class CurlypageClicksDetailsTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage clicks details',
      'description' => 'Test clicks details table.',
      'group' => 'Curlypage clicks',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_clicks');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * Testing clicks details table.
   */
  function testCurlypageClicksDetails() {
    $edited_curlypage = array();
    $edited_curlypage['status'] = 1;
    $edited_curlypage['clicks_enabled'] = 1;
    $this->drupalPost('admin/structure/curlypage/1/edit', $edited_curlypage, t('Save'));

    $now = REQUEST_TIME;

    // insert two clicks
    db_insert('curlypage_clicks_detail')
      ->fields(array(
        'cpid',
        'uid',
        'link',
        'timestamp',
      ))
      ->values(array(
        'cpid' => 1,
        'uid' => 1,
        'link' => 'http://www.curlypage.co.cc',
        'timestamp' => $now,
      ))
      ->values(array(
        'cpid' => 1,
        'uid' => 1,
        'link' => 'http://www.curlypage.co.cc',
        'timestamp' => $now + 5000,
      ))
      ->execute();

    db_update('curlypage_clicks')
      ->fields(array(
        'cpid' => 1,
        'clicks' => 2,
      ))
      ->execute();

    // test the details table
    $this->drupalGet('admin/structure/curlypage/1/clicks');
    $this->assertLinkByHref('admin/structure/curlypage/clicks/1/delete', 0, t('Delete link found.'));
    $this->assertLinkByHref('admin/structure/curlypage/clicks/2/delete', 0, t('Delete link found.'));

    // test click deletion
    $this->drupalPost('admin/structure/curlypage/clicks/1/delete', array(), t('Delete'));
    $cpclid = db_query("SELECT cpclid FROM {curlypage_clicks_detail} WHERE timestamp = :timestamp", array(':timestamp' => $now))->fetchField();
    $this->assertFalse($cpclid, t('Click not found in database.'));

  }

}
