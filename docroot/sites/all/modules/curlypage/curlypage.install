<?php

/**
 * @file
 * Install, update and uninstall functions for the curlypage module.
 */

/**
 * Implements hook_install().
 */
function curlypage_install() {
  _db_insert_curlypage();
}

/**
 * Inserts a sample curlypage
 */
function _db_insert_curlypage() {

  $cpid = db_insert('curlypages')
    -> fields(array(
      'status' => 0,
      'name' => 'drupal',
      'peel_position' => 'topright',
      'small_url' => drupal_get_path('module', 'curlypage') . '/curlypage/small.jpg',
      'big_url' => drupal_get_path('module', 'curlypage') . '/curlypage/big.jpg',
      'mirror' => 1,
      'in_transition' => 'Squeeze',
      'transition_duration' => 4,
      'peel_color' => 'custom',
      'red_value' => 255,
      'green_value' => 255,
      'blue_value' => 255,
      'link_target' => '_blank',
      'link' => 'http://www.drupal.org/',
      'load_sound_url' => '',
      'open_sound_url' => '',
      'close_sound_url' => '',
      'flag_speed' => 4,
      'peel_speed' => 4,
      'automatic_open' => 0,
      'automatic_close' => 0,
      'close_button_enable' => 0,
      'text_on_close_button' => 'close',
      'close_red_value' => 100,
      'close_green_value' => 100,
      'close_blue_value' => 100,
      'roles_visibility' => 0,
      'visibility' => 0,
      'pages' => '',
      'flag_width' => 100,
      'flag_height' => 100,
      'peel_width' => 500,
      'peel_height' => 500,
      'flag_style' => 'style1',
      'peel_style' => 'style1',
      'peel_color_style' => 'gradient',
      'weight' => 0,
      'link_enabled' => 1,
      'peel_position_model' => 'absolute',
      'wait_enable' => 0,
      'wait_url' => drupal_get_path('module', 'curlypage') . '/curlypage/wait.gif',
      'wait_width' => 42,
      'wait_height' => 42,
      'curlypage_group' => 0,
      'delay' => 0,
      'time_slot' => 0,
      'repeat_times' => 1,
      'open_onclick' => 0,
    ))
    -> execute();

}

/**
 * Implements hook_enable().
 */
function curlypage_enable() {
  // Update the persistent variable numEnabledCurlypages that tracks number of curlypages enabled
  $num_enabled = db_query("SELECT COUNT(*) FROM {curlypages} WHERE status = :status", array(':status' => 1))->fetchField();
  variable_set('num_enabled_curlypages', $num_enabled);
}

/**
 * Implements hook_disable().
 */
function curlypage_disable() {
  $disable_curlypages = variable_get('curlypage_disable_curlypages', 1);
  // Disable all enabled curlypages when the module is disabled.
  if ($disable_curlypages) {
    $num_updated = db_update('curlypages')
      -> fields(array(
        'status' => 0,
      ))
      -> condition('status', 1)
      -> execute();

    // Update the persistent variable numEnabledCurlypages that tracks number of curlypages enabled
    variable_set('num_enabled_curlypages', 0);
  }
}

/**
 * Deletes images and sounds used by curlypages.
 */
function _curlypage_delete_all_images_sounds() {

  $dir = 'public://' . CURLYPAGE_PATH_IMAGES;
  // if the directory where files reside does not exists nothing to do
  if (file_prepare_directory($dir)) {
    file_unmanaged_delete_recursive($dir);
  }

}

/**
 * Implements hook_uninstall().
 */
function curlypage_uninstall() {
  // Delete all images and sounds used by curlypage
  _curlypage_delete_all_images_sounds();
  // Delete persistent variables.
  $variables = array(
    'num_enabled_curlypages',
    'curlypage_media_textfields',
    'curlypage_external_swfobject',
    'curlypage_swfobject_path',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Implements hook_schema().
 */
function curlypage_schema() {
  $schema['curlypages'] = array(
    'description' => 'Stores curlypages settings.',
    'fields' => array(
      'cpid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique curlypage ID.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Curlypage enabled status. (1 = enabled, 0 = disabled).',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => 'Sample Curlypage',
        'description' => 'Name of the curlypage',
      ),
      'flag_style' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => 'style1',
        'description' => 'Style of flag.',
      ),
      'peel_style' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => 'style1',
        'description' => 'Style of peel.',
      ),
      'peel_position' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => 'topright',
        'description' => 'Position of curlypage. (topleft, topright, bottomleft or bottomright).',
      ),
      'peel_position_model' => array(
        'type' => 'varchar',
        'length' => 9,
        'not null' => TRUE,
        'default' => 'absolute',
        'description' => 'Position Model of curlypage. (absolute or fixed).',
      ),
      'wait_enable' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Wait icon enabled status. (1 = enabled, 0 = disabled).',
      ),
      'wait_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of the image to show while the ad is loading.',
      ),
      'wait_width' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 42,
        'size' => 'normal',
        'description' => 'Width of wait icon.',
      ),
      'wait_height' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 42,
        'size' => 'normal',
        'description' => 'Height of wait icon.',
      ),
      'flag_width' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 100,
        'size' => 'normal',
        'description' => 'Width of flag.',
      ),
      'flag_height' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 100,
        'size' => 'normal',
        'description' => 'Height of flag.',
      ),
      'peel_width' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 500,
        'size' => 'normal',
        'description' => 'Width of peel.',
      ),
      'peel_height' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 500,
        'size' => 'normal',
        'description' => 'Height of peel.',
      ),
      'small_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of the image to show when the ad is not peeled.',
      ),
      'big_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of the image to show when the ad is peeled.',
      ),
      'mirror' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Mirror the ad on the back of the peeled page. (1 = enabled, 0 = disabled).',
      ),
      'in_transition' => array(
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => 'none',
        'description' => 'In Transition when curlypage is loaded.',
      ),
      'transition_duration' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'size' => 'tiny',
        'description' => 'Duration of in transition.',
      ),
      'peel_color_style' => array(
        'type' => 'varchar',
        'length' => 9,
        'not null' => TRUE,
        'default' => 'gradient',
        'description' => 'The color on peel can be a flat color or a gradient.',
      ),
      'peel_color' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => 'custom',
        'description' => 'If the mirror effect is disabled, this color will be used on the back.',
      ),
      'red_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Red value of Custom Color for the Peel (0 - 255).',
      ),
      'green_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Green value of Custom Color for the Peel (0 - 255).',
      ),
      'blue_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Blue value of Custom Color for the Peel (0 - 255).',
      ),
      'link_enabled' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Enabled or disabled link. (1 = enabled, 0 = disabled).',
      ),
      'link_target' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => TRUE,
        'default' => '_blank',
        'description' => 'Where to open the URL.',
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'http://www.drupal.org/',
        'description' => 'URL to go when user click on the ad.',
      ),
      'load_sound_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of mp3 file to play when the ad is loaded.',
      ),
      'open_sound_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of mp3 file to play when the peel is opened.',
      ),
      'close_sound_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'URL of mp3 file to play when the peel is closed.',
      ),
      'open_onclick' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Open curlypage on click.',
      ),
      'flag_speed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'size' => 'tiny',
        'description' => 'Speed for the motion in the unpeeled state.',
      ),
      'peel_speed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 4,
        'size' => 'tiny',
        'description' => 'Speed for the motion in the peeled state.',
      ),
      'automatic_open' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Millisecons to unpeel automatically after the curlypage loads.',
      ),
      'automatic_close' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Millisecons to automatically close after unpeeling.',
      ),
      'close_button_enable' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Show a close button on open peel.',
      ),
      'text_on_close_button' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => 'close',
        'description' => 'Text on clickable close button.',
      ),
      'close_red_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Color red value of close button (0 - 255).',
      ),
      'close_green_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Color green value of close button (0 - 255).',
      ),
      'close_blue_value' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 255,
        'size' => 'tiny',
        'description' => 'Color blue value of close button (0 - 255).',
      ),
      'curlypage_group' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Curlypage group (0 - 100).',
      ),
      'delay' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Delay seconds (0 - 999).',
      ),
      'time_slot' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'normal',
        'description' => 'Time Slot seconds (0 - 999).',
      ),
      'repeat_times' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Repeat times (0 - 9).',
      ),
      'roles_visibility' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Flag to indicate how to show curlypages for roles. (0 = Show for the roles selected, 1 = Show except for the roles selected)',
      ),
      'visibility' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Flag to indicate how to show curlypages on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility)',
      ),
      'pages' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Contents of the "Pages" textarea; contains either a list of paths on which to include/exclude the curlypage or PHP code, depending on "visibility" setting.',
      ),
    ),
    'primary key' => array('cpid'),
    'indexes' => array(
      'list' => array('status', 'weight'),
    ),
  );

  $schema['curlypage_languages'] = array(
    'description' => 'Sets up curlypages visibility based on languages',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The user's role ID from {users_roles}.rid.",
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'description' => 'The language from {locale}.language.',
      ),
    ),
    'primary key' => array(
      'cpid',
      'language'
    ),
    'indexes' => array(
      'cpid' => array('cpid'),
      'language' => array('language'),
    ),
  );

  $schema['curlypage_roles'] = array(
    'description' => 'Sets up curlypages visibility based on user roles',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The user's role ID from {users_roles}.rid.",
      ),
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The curlypage ID from {curlypages}.rid.",
      ),
    ),
    'primary key' => array(
      'cpid',
      'rid'
    ),
    'indexes' => array(
      'cpid' => array('cpid'),
      'rid' => array('rid'),
    ),
  );

  $schema['curlypage_node_types'] = array(
    'description' => 'Sets up display criteria for curlypages based on content types',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The curlypage ID from {curlypages}.cpid.",
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => "The machine-readable name of this type from {node_type}.type.",
      ),
    ),
    'primary key' => array('cpid', 'type'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_N().
 */
function curlypage_update_2301() {

  db_add_field('curlypages', 'roles_visibility', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'description' => 'Flag to indicate how to show curlypages for roles. (0 = Show for the roles selected, 1 = Show except for the roles selected)'));

}

function curlypage_update_2302() {

  // create new tables curlypage_languages and curlypage_roles
  $curlypage_languages_table = array(
    'description' => 'Sets up curlypages visibility based on languages',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The user's role ID from {users_roles}.rid.",
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'description' => 'The language from {locale}.language.',
      ),
    ),
    'primary key' => array(
      'cpid',
      'language'
    ),
    'indexes' => array(
      'cpid' => array('cpid'),
      'language' => array('language'),
    ),
  );

  $curlypage_roles_table = array(
    'description' => 'Sets up curlypages visibility based on user roles',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The user's role ID from {users_roles}.rid.",
      ),
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The curlypage ID from {curlypages}.rid.",
      ),
    ),
    'primary key' => array(
      'cpid',
      'rid'
    ),
    'indexes' => array(
      'cpid' => array('cpid'),
      'rid' => array('rid'),
    ),
  );

  db_create_table('curlypage_languages', $curlypage_languages_table);
  db_create_table('curlypage_roles', $curlypage_roles_table);

  // add current curlypages values to new tables
  $result = db_query("SELECT cpid, languages, roles FROM {curlypages}");
  foreach ($result as $curlypage) {
    $languages = array_filter(explode(',', $curlypage->languages));
    $roles = array_filter(explode(',', $curlypage->roles));
    foreach ($languages as $language) {
      $new_row = new stdClass();
      $new_row->cpid = $curlypage->cpid;
      $new_row->language = $language;
      drupal_write_record('curlypage_languages', $new_row);
    }
    foreach ($roles as $role) {
      $new_row = new stdClass();
      $new_row->cpid = $curlypage->cpid;
      $new_row->rid = $role;
      drupal_write_record('curlypage_roles', $new_row);
    }
  }

  // drop languages and roles fields
  db_drop_field('curlypages', 'languages');
  db_drop_field('curlypages', 'roles');

}

function curlypage_update_2303() {

  db_add_field('curlypages', 'curlypage_group', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'description' => 'Curlypage group (0 - 100).'));
  db_add_field('curlypages', 'delay', array('type' => 'int', 'size' => 'normal', 'not null' => TRUE, 'default' => 0, 'description' => 'Delay seconds (0 - 999).'));
  db_add_field('curlypages', 'time_slot', array('type' => 'int', 'size' => 'normal', 'not null' => TRUE, 'default' => 0, 'description' => 'Time Slot seconds (0 - 999).'));
  db_add_field('curlypages', 'repeat_times', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 1, 'description' => 'Repeat times (0 - 9).'));

}

function curlypage_update_2304() {

  // create new table curlypage_node_types
  $curlypage_node_types_table = array(
    'description' => 'Sets up display criteria for curlypages based on content types',
    'fields' => array(
      'cpid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "The curlypage ID from {curlypages}.cpid.",
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => "The machine-readable name of this type from {node_type}.type.",
      ),
    ),
    'primary key' => array('cpid', 'type'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  db_create_table('curlypage_node_types', $curlypage_node_types_table);

}

function curlypage_update_2305() {

  db_add_field('curlypages', 'open_onclick', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'description' => 'Open curlypage on click.'));

}

function curlypage_update_2306() {

  $actual_value = variable_get('curlypage_external_swfobject', 1);
  if ($actual_value) {
    variable_set('curlypage_internal_swfobject', 0);
  }
  else {
    variable_set('curlypage_internal_swfobject', 1);
  }
  variable_del('curlypage_external_swfobject');

}

function curlypage_update_6300() {
  db_drop_index('curlypages', 'list');
  db_change_field('curlypages', 'status', 'status', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'Curlypage enabled status. (1 = enabled, 0 = disabled).',
  ), array(
    'indexes' => array(
      'list' => array('status', 'weight'),
    ),
  ));
  db_change_field('curlypages', 'name', 'name', array(
    'type' => 'varchar',
    'length' => 64,
    'not null' => TRUE,
    'default' => 'Sample Curlypage',
    'description' => 'Name of the curlypage',
  ));
  db_change_field('curlypages', 'wait_enable', 'wait_enable', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'Wait icon enabled status. (1 = enabled, 0 = disabled).',
  ));
  db_change_field('curlypages', 'mirror', 'mirror', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'Mirror the ad on the back of the peeled page. (1 = enabled, 0 = disabled).',
  ));
  db_change_field('curlypages', 'link_enabled', 'link_enabled', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'Enabled or disabled link. (1 = enabled, 0 = disabled).',
  ));
  db_change_field('curlypages', 'close_button_enable', 'close_button_enable', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'Show a close button on open peel.',
  ));
  db_change_field('curlypages', 'roles_visibility', 'roles_visibility', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'Flag to indicate how to show curlypages for roles. (0 = Show for the roles selected, 1 = Show except for the roles selected)',
  ));
  db_change_field('curlypages', 'visibility', 'visibility', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'Flag to indicate how to show curlypages on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility)',
  ));

}

function curlypage_update_6301() {
  $ret = array();

  $result = db_query("SELECT r.rid, p.perm FROM {role} r INNER JOIN {permission} p ON r.rid = p.rid WHERE p.perm LIKE '%%%s%%' ORDER BY r.name", 'administer curlypages');
  while ($role = db_fetch_object($result)) {
    $new_permissions = $role->perm . ', administer curlypage global settings';
    $ret[] = update_sql("UPDATE {permission} SET perm = '$new_permissions' WHERE rid = $role->rid");
  }

  // this is a flag variable to prevent problems on the upgrade path to drupal 7
  // update 7001 should only be done on updates from an earlier drupal 7 version
  variable_set('curlypage_global_settings_permission', 1);

  return $ret;
}

function curlypage_update_7000() {
  $dir = 'public://' . CURLYPAGE_PATH_IMAGES . '/thumbs';
  // if the directory where thumbnails reside does not exists nothing to do
  if (file_prepare_directory($dir)) {
    file_unmanaged_delete_recursive($dir);
  }
}

/**
 * New permission administer curlypage global settings
 */
function curlypage_update_7001() {

  // this update is only needed in updates from an earlier drupal 7 version
  // on upgrades from drupal 6 should not be done
  $check = variable_get('curlypage_global_settings_permission', 0);

  if (!$check) {

    $roles = user_roles(FALSE, 'administer curlypages');

    foreach ($roles as $rid => $rname) {
      user_role_grant_permissions($rid, array('administer curlypage global settings'));

    }

  }

  variable_del('curlypage_global_settings_permission');
}
