<?php

/**
 * @file
 * Tests for Curlypage module.
 */

/**
 * Test the existence of add, edit, clone, delete links.
 */
class CurlypageOperationLinksTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage operation links',
      'description' => 'Ensure the add, edit, clone, delete links appear on list page.',
      'group' => 'Curlypage',
    );
  }

  public function setUp() {
    parent::setUp('curlypage');
    $this->curlypage_admin = $this->drupalCreateUser(array('administer curlypages', 'access administration pages'));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * Confirm the links appear on curlypage list page.
   */
  function testCurlypageOperationLinks() {
    $this->drupalGet('admin/structure/curlypage');

    $this->assertLink('List', 0, t('List link is present on curlypage list page.'));
    $this->assertLinkByHref('admin/structure/curlypage', 0, t('List link is present on curlypage list page.'));
    $this->assertRaw(l(t('Settings'), 'admin/structure/curlypage/settings'), t('Settings link is present on curlypage list page.'));
    // Confirm that the add curlypage link appears on curlypage list page.
    $this->assertRaw(l(t('Add curlypage'), 'admin/structure/curlypage/add'), t('Add curlypage link is present on curlypage list page.'));
    // Confirm edit, clone, delete links appear on curlypage list page.
    $this->assertLinkByHref('admin/structure/curlypage/1/edit', 0, t('Curlypage edit link found.'));
    $this->assertLinkByHref('admin/structure/curlypage/1/clone', 0, t('Curlypage clone link found.'));
    $this->assertLinkByHref('admin/structure/curlypage/1/delete', 0, t('Curlypage delete link found.'));
  }

}

/**
 * Test curlypage creation.
 */
class CurlypageCreateTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage create',
      'description' => 'Create a curlypage and test saving it.',
      'group' => 'Curlypage',
    );
  }

  public function setUp() {
    parent::setUp('curlypage');
    $this->curlypage_admin = $this->drupalCreateUser(array('administer curlypages', 'access administration pages'));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * Create a curlypage and verify its consistency in the database.
   */
  function testCurlypageCreation() {
    // Create a curlypage.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage["name"])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));
  }
}

/**
 * Test curlypage edition.
 */
class CurlypageEditTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage edit',
      'description' => 'Edit a curlypage and test saving it.',
      'group' => 'Curlypage',
    );
  }

  function setUp() {
    parent::setUp('curlypage');
    $this->curlypage_admin = $this->drupalCreateUser(array('administer curlypages', 'access administration pages'));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * Edit a curlypage and verify its consistency in the database.
   */
  function testCurlypageEdition() {
    // Create a curlypage.
    $curlypage1 = array();
    $curlypage1["name"] = $this->randomName(8);
    $curlypage2 = array();
    $curlypage2["name"] = $this->randomName(8);
    $this->drupalPost('admin/structure/curlypage/add', $curlypage1, t('Save'));
    $this->drupalPost('admin/structure/curlypage/$curlypage1->cpid/edit', $curlypage2, t('Save'));

    // Check that the curlypage has been edited.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage2['name'])), t('Curlypage edited.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage2['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));
  }

}

/**
 * Test curlypage validation.
 */
class CurlypageValidationTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage validation',
      'description' => 'Test curlypage edit form validation.',
      'group' => 'Curlypage',
    );
  }

  function setUp() {
    parent::setUp('curlypage');

    // Create a curlypage admin user
    $this->curlypage_admin = $this->drupalCreateUser(array('administer curlypages', 'access administration pages'));
    $this->drupalLogin($this->curlypage_admin);

    // Create a curlypage.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage['name'])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $this->cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($this->cpid, t('Curlypage found in database.'));
  }

  /**
   * Wait width validation
   */
  function testCurlypageWaitWidthValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['wait_width'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Wait Icon Width must be a number greater than 10'), t('Wait width fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND wait_width = :wait_width", array(':name' => $edited_curlypage['name'], ':wait_width' => $edited_curlypage['wait_width']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <10
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['wait_width'] = '7';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Wait Icon Width must be a number greater than 10'), t('Wait width fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND wait_width = :wait_width", array(':name' => $edited_curlypage['name'], ':wait_width' => $edited_curlypage['wait_width']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['wait_width'] = '32';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND wait_width = :wait_width", array(':name' => $edited_curlypage['name'], ':wait_width' => $edited_curlypage['wait_width']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Wait height validation.
   */
  function testCurlypageWaitHeightValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['wait_height'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Wait Icon Height must be a number greater than 10'), t('Wait height fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND wait_height = :wait_height", array(':name' => $edited_curlypage['name'], ':wait_height' => $edited_curlypage['wait_height']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <10
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['wait_height'] = '7';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Wait Icon Height must be a number greater than 10'), t('Wait height fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND wait_height = :wait_height", array(':name' => $edited_curlypage['name'], ':wait_height' => $edited_curlypage['wait_height']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['wait_height'] = '32';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND wait_height = :wait_height", array(':name' => $edited_curlypage['name'], ':wait_height' => $edited_curlypage['wait_height']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Flag width validation
   */
  function testCurlypageFlagWidthValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['flag_width'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Flag Width must be a number greater than 10'), t('Flag width fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND flag_width = :flag_width", array(':name' => $edited_curlypage['name'], ':flag_width' => $edited_curlypage['flag_width']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <10
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage["flag_width"] = '7';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Flag Width must be a number greater than 10'), t('Flag width fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND flag_width = :flag_width", array(':name' => $edited_curlypage['name'], ':flag_width' => $edited_curlypage['flag_width']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['flag_width'] = '110';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND flag_width = :flag_width", array(':name' => $edited_curlypage['name'], ':flag_width' => $edited_curlypage['flag_width']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Flag height validation
   */
  function testCurlypageFlagHeightValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['flag_height'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Flag Height must be a number greater than 10'), t('Flag height fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND flag_height = :flag_height", array(':name' => $edited_curlypage['name'], ':flag_height' => $edited_curlypage['flag_height']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <10
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['flag_height'] = '7';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Flag Height must be a number greater than 10'), t('Flag height fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND flag_height = :flag_height", array(':name' => $edited_curlypage['name'], ':flag_height' => $edited_curlypage['flag_height']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['flag_height'] = '110';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND flag_height = :flag_height", array(':name' => $edited_curlypage['name'], ':flag_height' => $edited_curlypage['flag_height']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Peel width validation
   */
  function testCurlypagePeelWidthValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['peel_width'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Peel Width must be a number greater than 50'), t('Peel width fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND peel_width = :peel_width", array(':name' => $edited_curlypage['name'], ':peel_width' => $edited_curlypage['peel_width']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <50
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['peel_width'] = '25';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Peel Width must be a number greater than 50'), t('Peel width fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND peel_width = :peel_width", array(':name' => $edited_curlypage['name'], ':peel_width' => $edited_curlypage['peel_width']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['peel_width'] = '550';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage["name"])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND peel_width = :peel_width", array(':name' => $edited_curlypage['name'], ':peel_width' => $edited_curlypage['peel_width']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Peel height validation.
   */
  function testCurlypagePeelHeightValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['peel_height'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Peel Height must be a number greater than 50'), t('Peel height fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND peel_height = :peel_height", array(':name' => $edited_curlypage['name'], ':peel_height' => $edited_curlypage['peel_height']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <50
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['peel_height'] = '7';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Peel Height must be a number greater than 50'), t('Peel height fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND peel_height = :peel_height", array(':name' => $edited_curlypage['name'], ':peel_height' => $edited_curlypage['peel_height']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['peel_height'] = '550';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND peel_height = :peel_height", array(':name' => $edited_curlypage['name'], ':peel_height' => $edited_curlypage['peel_height']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Transition duration validation.
   */
  function testCurlypageTransitionDurationValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['transition_duration'] = 'a';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Transition duration must be a number between 1 and 9'), t('Transition duration fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND transition_duration = :transition_duration", array(':name' => $edited_curlypage['name'], ':transition_duration' => $edited_curlypage['transition_duration']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value 0
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['transition_duration'] = '0';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Transition duration must be a number between 1 and 9'), t('Transition duration fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND transition_duration = :transition_duration", array(':name' => $edited_curlypage['name'], ':transition_duration' => $edited_curlypage['transition_duration']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['transition_duration'] = '9';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND transition_duration = :transition_duration", array(':name' => $edited_curlypage['name'], ':transition_duration' => $edited_curlypage['transition_duration']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Flag speed validation.
   */
  function testCurlypageFlagSpeedValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['flag_speed'] = 'a';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Flag motion speed must be a number between 1 and 9'), t('Flag speed fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND flag_speed = :flag_speed", array(':name' => $edited_curlypage['name'], ':flag_speed' => $edited_curlypage['flag_speed']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value 0
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['flag_speed'] = '0';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Flag motion speed must be a number between 1 and 9'), t('Flag speed fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND flag_speed = :flag_speed", array(':name' => $edited_curlypage['name'], ':flag_speed' => $edited_curlypage['flag_speed']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['flag_speed'] = '9';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND flag_speed = :flag_speed", array(':name' => $edited_curlypage['name'], ':flag_speed' => $edited_curlypage['flag_speed']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Peel speed validation.
   */
  function testCurlypagePeelSpeedValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['peel_speed'] = 'a';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Peel motion speed must be a number between 1 and 9'), t('Peel speed fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND peel_speed = :peel_speed", array(':name' => $edited_curlypage['name'], ':peel_speed' => $edited_curlypage['peel_speed']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value 0
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['peel_speed'] = '0';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Peel motion speed must be a number between 1 and 9'), t('Peel speed fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND peel_speed = :peel_speed", array(':name' => $edited_curlypage['name'], ':peel_speed' => $edited_curlypage['peel_speed']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['peel_speed'] = '9';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND peel_speed = :peel_speed", array(':name' => $edited_curlypage['name'], ':peel_speed' => $edited_curlypage['peel_speed']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Automatic open validation.
   */
  function testCurlypageAutomaticOpenValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['automatic_open'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Automatically peel onload seconds must be a number between 0 and 999'), t('Automatic open fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND automatic_open = :automatic_open", array(':name' => $edited_curlypage['name'], ':automatic_open' => $edited_curlypage['automatic_open']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <0
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['automatic_open'] = '-7';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Automatically peel onload seconds must be a number between 0 and 999'), t('Automatic open fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND automatic_open = :automatic_open", array(':name' => $edited_curlypage['name'], ':automatic_open' => $edited_curlypage['automatic_open']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['automatic_open'] = '257';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND automatic_open = :automatic_open", array(':name' => $edited_curlypage['name'], ':automatic_open' => $edited_curlypage['automatic_open']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Automatic close validation.
   */
  function testCurlypageAutomaticCloseValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['automatic_close'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Automatically peel onclose seconds must be a number between 0 and 999'), t('Automatic close fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND automatic_close = :automatic_close", array(':name' => $edited_curlypage['name'], ':automatic_close' => $edited_curlypage['automatic_close']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <0
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['automatic_close'] = '-7';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Automatically peel onclose seconds must be a number between 0 and 999'), t('Automatic close fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND automatic_close = :automatic_close", array(':name' => $edited_curlypage['name'], ':automatic_close' => $edited_curlypage['automatic_close']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['automatic_close'] = '257';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND automatic_close = :automatic_close", array(':name' => $edited_curlypage['name'], ':automatic_close' => $edited_curlypage['automatic_close']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Close text validation.
   */
  function testCurlypageCloseTextValidation() {

    // invalid values
    $test_cases = array(
      'CloSE',
      '123',
      '#f/ds'
    );

    foreach ($test_cases as $value) {
      $edited_curlypage = array();
      $edited_curlypage['name'] = $this->randomName(8);
      $edited_curlypage['text_on_close_button'] = $value;
      $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
      $this->assertRaw(t('Only lowercase letters and spaces are allowed for text on close button. It must start with a lowercase letter too.'), t('Text on close button fails validation.') . '(' . $value . ')');
      $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND text_on_close_button = :text_on_close_button", array(':name' => $edited_curlypage['name'], ':text_on_close_button' => $edited_curlypage['text_on_close_button']))->fetchField();
      $this->assertFalse($cpid, t('Edited curlypage not found in database.'));
    }

    // correct value only lower case
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['text_on_close_button'] = 'valid';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND text_on_close_button = :text_on_close_button", array(':name' => $edited_curlypage['name'], ':text_on_close_button' => $edited_curlypage['text_on_close_button']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Delay validation
   */
  function testCurlypageDelayValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['delay'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Delay seconds must be a number between 0 and 999'), t('Delay fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND delay = :delay", array(':name' => $edited_curlypage['name'], ':delay' => $edited_curlypage['delay']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <0
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['delay'] = '-7';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Delay seconds must be a number between 0 and 999'), t('Delay fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND delay = :delay", array(':name' => $edited_curlypage['name'], ':delay' => $edited_curlypage['delay']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['delay'] = '257';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND delay = :delay", array(':name' => $edited_curlypage['name'], ':delay' => $edited_curlypage['delay']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Time slot validation.
   */
  function testCurlypageTimeSlotValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['time_slot'] = 'abc';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('TimeSlot seconds must be a number between 0 and 999'), t('TimeSlot fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND time_slot = :time_slot", array(':name' => $edited_curlypage['name'], ':time_slot' => $edited_curlypage['time_slot']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // incorrect value <0
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['time_slot'] = '-7';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('TimeSlot seconds must be a number between 0 and 999'), t('TimeSlot fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND time_slot = :time_slot", array(':name' => $edited_curlypage['name'], ':time_slot' => $edited_curlypage['time_slot']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['time_slot'] = '257';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND time_slot = :time_slot", array(':name' => $edited_curlypage['name'], ':time_slot' => $edited_curlypage['time_slot']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

  /**
   * Repeat times validation.
   */
  function testCurlypageRepeatTimesValidation() {

    // incorrect value not number
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['repeat_times'] = 'a';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('Repeat must be a number between 0 and 9'), t('Repeat times fails validation.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND repeat_times = :repeat_times", array(':name' => $edited_curlypage['name'], ':repeat_times' => $edited_curlypage['repeat_times']))->fetchField();
    $this->assertFalse($cpid, t('Edited curlypage not found in database.'));

    // correct value
    $edited_curlypage = array();
    $edited_curlypage['name'] = $this->randomName(8);
    $edited_curlypage['repeat_times'] = '3';
    $this->drupalPost('admin/structure/curlypage/' . $this->cpid . '/edit', $edited_curlypage, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $edited_curlypage['name'])), t('Curlypage edited.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name AND repeat_times = :repeat_times", array(':name' => $edited_curlypage['name'], ':repeat_times' => $edited_curlypage['repeat_times']))->fetchField();
    $this->assertTrue($cpid, t('Edited curlypage found in database.'));

  }

}

/**
 * Test curlypage deletion.
 */
class CurlypageDeleteTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage delete',
      'description' => 'Delete a curlypage and test it is not on database.',
      'group' => 'Curlypage',
    );
  }

  function setUp() {
    parent::setUp('curlypage');
    $this->curlypage_admin = $this->drupalCreateUser(array('administer curlypages', 'access administration pages'));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * Delete a curlypage and verify it is not in the database.
   */
  function testCurlypageDeletion() {
    // Create a curlypage.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage['name'])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    $this->drupalPost('admin/structure/curlypage/' . $cpid . '/delete', array(), t('Delete'));
    $this->assertRaw(t('The curlypage %name has been removed.', array('%name' => $curlypage['name'])), t('Curlypage successfully deleted.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertFalse($cpid, t('Curlypage not found in database.'));
  }

}

/**
 * Test curlypage clone.
 */
class CurlypageCloneTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage clone',
      'description' => 'Clone a curlypage and test it is on database and has same properties.',
      'group' => 'Curlypage',
    );
  }

  function setUp() {
    parent::setUp('curlypage');
    $this->curlypage_admin = $this->drupalCreateUser(array('administer curlypages', 'access administration pages'));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * Clone a curlypage and verify its consistency in the database.
   */
  function testCurlypageClone() {
    // Create a curlypage.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $curlypage['link'] = 'http://www.curlypage.co.cc/' . $this->randomName(8);
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage['name'])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    // clone the curlypage
    $curlypage_clone['name'] = $this->randomName(8);
    $this->drupalPost('admin/structure/curlypage/' . $cpid . '/clone', $curlypage_clone, t('Save'));
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage_clone['name'])), t('Curlypage created.'));
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage_clone['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    // same properties
    $curlypage_link = db_query("SELECT link FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $curlypage_clone_link = db_query("SELECT link FROM {curlypages} WHERE name = :name", array(':name' => $curlypage_clone['name']))->fetchField();
    $this->assertTrue($curlypage_link === $curlypage_clone_link, t('Curlypages has same properties.'));
  }

}

/**
 * Test curlypage visibility.
 */
class CurlypageVisibilityTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Curlypage visibility',
      'description' => 'Test the visibility settings on a curlypage.',
      'group' => 'Curlypage',
    );
  }

  function setUp() {
    parent::setUp('curlypage');
    $this->curlypage_admin = $this->drupalCreateUser(array('administer curlypages', 'access administration pages'));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * Test roles visibility.
   */
  function testCurlypageRolesVisibility() {
    // Create a curlypage.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage['name'])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    // Set the curlypage to be shown only to authenticated users.
    $curlypage = array();
    $curlypage['status'] = 1;
    $curlypage['roles_visibility'] = 0; // show for selected
    $curlypage['roles[2]'] = TRUE; // authenticated selected
    $this->drupalPost('admin/structure/curlypage/' . $cpid . '/edit', $curlypage, t('Save'));

    $text = 'curlypage_write_curlypages()';

    // displayed to registered
    $this->drupalGet('');
    $this->assertRaw($text, t('Curlypage was displayed to registered user.'));

    // hidden for anonymous users
    $this->drupalLogout();
    $this->drupalGet('');
    $this->assertNoRaw($text, t('Curlypage was not displayed to anonymous users.'));

    // Set the curlypage to be hidden to authenticated users.
    $this->drupalLogin($this->curlypage_admin);
    $curlypage = array();
    $curlypage['status'] = 1;
    $curlypage['roles_visibility'] = 1; // show except for selected
    $curlypage['roles[2]'] = TRUE; // authenticated selected
    $this->drupalPost('admin/structure/curlypage/' . $cpid . '/edit', $curlypage, t('Save'));

    // hidden for registered
    $this->drupalGet('');
    $this->assertNoRaw($text, t('Curlypage was not displayed to registered user.'));

    // displayed to anonymous users
    $this->drupalLogout();
    $this->drupalGet('');
    $this->assertRaw($text, t('Curlypage was displayed to anonymous users.'));
  }

  /**
   * Test content type visibility.
   */
  function testCurlypageContentTypeVisibility() {
    // Create a curlypage.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage['name'])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    // Set the curlypage to be shown only on story content.
    $curlypage = array();
    $curlypage['status'] = 1;
    $curlypage['types[article]'] = TRUE; // story selected
    $this->drupalPost('admin/structure/curlypage/' . $cpid . '/edit', $curlypage, t('Save'));

    $text = 'curlypage_write_curlypages()';

    // hidden on front page
    $this->drupalGet('');
    $this->assertNoRaw($text, t('Curlypage was not displayed on front page.'));

    // shown on story node
    $page_node = $this->drupalCreateNode(array('type' => 'page', 'status' => NODE_PUBLISHED));
    $this->drupalGet('node/' . $page_node->nid);
    $this->assertNoRaw($text, t('Curlypage was not displayed on page node.'));

    // shown on story node
    $story_node = $this->drupalCreateNode(array('type' => 'article', 'status' => NODE_PUBLISHED));
    $this->drupalGet('node/' . $story_node->nid);
    $this->assertRaw($text, t('Curlypage was displayed on story node.'));
  }

  /**
   * Test page visibility.
   */
  function testCurlypagePageVisibility() {
    // Create a curlypage.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage['name'])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    // Set the curlypage to be hidden on any user path
    $curlypage = array();
    $curlypage['status'] = 1;
    $curlypage['pages'] = 'user*';
    $this->drupalPost('admin/structure/curlypage/' . $cpid . '/edit', $curlypage, t('Save'));

    $text = 'curlypage_write_curlypages()';

    // shown on front page
    $this->drupalGet('');
    $this->assertRaw($text, t('Curlypage was displayed on the front page.'));

    // hidden on user path
    $this->drupalGet('user');
    $this->assertNoRaw($text, t('Curlypage was not displayed according to curlypage visibility rules.'));

    // hidden on user pat, no matter case. Roles not in use.
    $this->drupalLogout();
    $this->drupalGet('USER/' . $this->curlypage_admin->uid);
    $this->assertNoRaw($text, t('Curlypage was not displayed according to curlypage visibility rules regardless of path case.'));
  }

}
