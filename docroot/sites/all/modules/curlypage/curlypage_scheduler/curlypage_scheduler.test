<?php

/**
 * @file
 * Tests for Curlypage scheduler module.
 */

/**
 * Test the existence of curlypage scheduler links.
 */
class CurlypageSchedulerLinksTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Operation links',
      'description' => 'Ensure the curlypage scheduler links are present.',
      'group' => 'Curlypage scheduler',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_scheduler');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);

    // Create a curlypage with a schedule.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $curlypage['schedules[1][enable_on]'] = '2011-01-01 00:00';
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage["name"])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));
  }

  /**
   * curlypage scheduler links.
   */
  function testCurlypageSchedulerOperationLinks() {
    $this->drupalGet('admin/structure/curlypage');
    // Confirm Schedule link appears on curlypage list page.
    $this->assertLink('Scheduled', 0, t('Scheduled link appears on curlypage list page.'));
    $this->drupalGet('admin/structure/curlypage/scheduler');
    // Confirm edit, delete links appear on scheduler page
    $this->assertLinkByHref('admin/structure/curlypage/scheduler/1/edit', 0, t('Curlypage scheduler edit link found.'));
    $this->assertLinkByHref('admin/structure/curlypage/scheduler/1/delete', 0, t('Curlypage scheduler delete link found.'));
  }

}

/**
 * Test the existence of curlypage scheduler form elements.
 */
class CurlypageSchedulerFormElementsTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Form fields',
      'description' => 'Ensure the curlypage scheduler configuration options are present.',
      'group' => 'Curlypage scheduler',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_scheduler');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);
  }

  /**
   * Test presence of enable_on, disable_on, repeat_enable, repeat_days, repeat_hours, repeat_until.
   */
  function testCurlypageSchedulerForm() {
    $this->drupalGet('admin/structure/curlypage/1/edit');
    // Confirm curlypage clicks form elements appear on curlypage edit form.
    $this->assertFieldById('edit-schedules-1-enable-on', 0, t('Scheduler enable on curlypage edit form.'));
    $this->assertFieldById('edit-schedules-1-disable-on', 0, t('Scheduler disable on curlypage edit form.'));
    $this->assertFieldById('edit-schedules-1-repeat-enable', 0, t('Scheduler repeat enable on curlypage edit form.'));
    $this->assertFieldById('edit-schedules-1-repeat-days', 0, t('Scheduler repeat days on curlypage edit form.'));
    $this->assertFieldById('edit-schedules-1-repeat-hours', 0, t('Scheduler repeat hours on curlypage edit form.'));
    $this->assertFieldById('edit-schedules-1-repeat-until', 0, t('Scheduler repeat until on curlypage edit form.'));
  }

}

/**
 * Test curlypage scheduler functionality.
 */
class CurlypageSchedulerScheduleTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Functionality',
      'description' => 'Create schedule and confirm it works.',
      'group' => 'Curlypage scheduler',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_scheduler');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);

    // Create a curlypage with a schedule.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $curlypage['schedules[1][enable_on]'] = '2011-01-01 00:00';
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage["name"])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    $this->curlypageCheckText = 'curlypage_write_curlypages()';
  }

  /**
   * Cron run triggers schedules.
   */
  function testCurlypageSchedulerCron() {

    // check it is not enable after creation
    $this->drupalGet('');
    $this->assertNoRaw($this->curlypageCheckText, t('Curlypage was not displayed on the front page.'));

    // run cron to execute enable schedule and confirm curlypage is enabled
    $this->cronRun();
    $this->drupalGet('');
    $this->assertRaw($this->curlypageCheckText, t('Curlypage was displayed on the front page.'));

    // Check that the schedule does not exist in the database.
    $cpschid = db_query("SELECT cpschid FROM {curlypage_scheduler}")->fetchField();
    $this->assertFalse($cpschid, t('Schedule not found in database.'));

    // edit curlypage with disable schedule
    $edited_curlypage = array();
    $edited_curlypage['schedules[1][disable_on]'] = '2011-01-01 00:00';
    $this->drupalPost('admin/structure/curlypage/2/edit', $edited_curlypage, t('Save'));

    // run cron to execute disable schedule and confirm curlypage is disabled
    $this->cronRun();
    $this->drupalGet('');
    $this->assertNoRaw($this->curlypageCheckText, t('Curlypage was not displayed on the front page.'));

    // Check that the schedule does not exist in the database.
    $cpschid = db_query("SELECT cpschid FROM {curlypage_scheduler}")->fetchField();
    $this->assertFalse($cpschid, t('Schedule not found in database.'));
  }

}

/**
 * Test curlypage schedule edit.
 */
class CurlypageSchedulerScheduleEditTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Schedule edit',
      'description' => 'Edit a schedule and confirm it is updated on database.',
      'group' => 'Curlypage scheduler',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_scheduler');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);

  }

  /**
   * Test schedule edition.
   */
  function testCurlypageSchedulerEdit() {
    // Create a curlypage with a schedule.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $curlypage['schedules[1][enable_on]'] = '2011-01-01 00:00';
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage["name"])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    $edited_schedule = array();
    $edited_schedule['schedules[1][enable_on]'] = '2011-01-31 06:00';
    $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

    // Check that the schedule has been edited.
    $this->assertRaw(t('The schedule has been saved.'), t('Schedule edited.'));

    // Check that the schedule exists in the database.
    $now = REQUEST_TIME;
    $timezone = format_date($now, 'custom', 'O');
    $enable_on = $edited_schedule['schedules[1][enable_on]'] . ' ' . $timezone;
    // to UNIX timestamp
    $timestamp = strtotime($enable_on);
    $cpschid = db_query("SELECT cpschid FROM {curlypage_scheduler} WHERE enable_on = :enable_on", array(':enable_on' => $timestamp))->fetchField();
    $this->assertTrue($cpschid, t('Schedule found in database.'));
  }

}

/**
 * Test curlypage schedule delete.
 */
class CurlypageSchedulerScheduleDeleteTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Schedule delete',
      'description' => 'Delete a schedule and confirm it is no more on database.',
      'group' => 'Curlypage scheduler',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_scheduler');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);

  }

  /**
   * Test schedule deletion.
   */
  function testCurlypageSchedulerDelete() {

    // Create a curlypage with a schedule.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $curlypage['schedules[1][enable_on]'] = '2011-01-01 00:00';
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage["name"])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    // Check that the schedule exists in the database.
    $cpschid = db_query("SELECT cpschid FROM {curlypage_scheduler}")->fetchField();
    $this->assertTrue($cpschid, t('Schedule found in database.'));

    $this->drupalPost('admin/structure/curlypage/scheduler/1/delete', array(), t('Delete'));
    $this->assertRaw(t('The schedule has been removed.'), t('Schedule successfully deleted.'));

    // Check that the schedule does not exist in the database.
    $cpschid = db_query("SELECT cpschid FROM {curlypage_scheduler}")->fetchField();
    $this->assertFalse($cpschid, t('Schedule not found in database.'));

  }

}

/**
 * Test curlypage schedule validation.
 */
class CurlypageSchedulerScheduleValidateTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Schedule validate',
      'description' => 'Check curlypage scheduler validation.',
      'group' => 'Curlypage scheduler',
    );
  }

  public function setUp() {
    parent::setUp('curlypage', 'curlypage_scheduler');
    $this->curlypage_admin = $this->drupalCreateUser(array(
      'administer curlypages',
      'access administration pages',
    ));
    $this->drupalLogin($this->curlypage_admin);

    // Create a curlypage with a schedule.
    $curlypage = array();
    $curlypage['name'] = $this->randomName(8);
    $curlypage['schedules[1][enable_on]'] = '2011-01-01 00:00';
    $this->drupalPost('admin/structure/curlypage/add', $curlypage, t('Save'));

    // Check that the curlypage has been created.
    $this->assertRaw(t('The curlypage %name has been saved.', array('%name' => $curlypage["name"])), t('Curlypage created.'));

    // Check that the curlypage exists in the database.
    $cpid = db_query("SELECT cpid FROM {curlypages} WHERE name = :name", array(':name' => $curlypage['name']))->fetchField();
    $this->assertTrue($cpid, t('Curlypage found in database.'));

    // Check that the schedule exists in the database.
    $cpschid = db_query("SELECT cpschid FROM {curlypage_scheduler}")->fetchField();
    $this->assertTrue($cpschid, t('Schedule found in database.'));
  }

  /**
   * Test enable on.
   */
  function testCurlypageSchedulerEnableOn() {

    $now = REQUEST_TIME;
    $wrong_tests = array(
      '2001-13-01 20:22', // month can't be 13
      'abcdef',
    );

    // test wrong values
    foreach ($wrong_tests as $test) {

      $edited_schedule = array();
      $edited_schedule['schedules[1][enable_on]'] = $test;
      $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

      // Check that the schedule has been edited.
      $this->assertRaw($test . ' ' . t('does not match the expected format of'), t('Enable on fails validation.'));

    }

    // correct value
    $edited_schedule = array();
    $edited_schedule['schedules[1][enable_on]'] = '2025-01-01 06:00';
    $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

    // Check that the schedule has been edited.
    $this->assertRaw(t('The schedule has been saved.'), t('Schedule edited.'));

  }

  /**
   * Test disable on.
   */
  function testCurlypageSchedulerDisableOn() {

    $now = REQUEST_TIME;
    $wrong_tests = array(
      '2001-13-01 20:22', // month can't be 13
      'abcdef',
    );

    // test wrong values
    foreach ($wrong_tests as $test) {

      $edited_schedule = array();
      $edited_schedule['schedules[1][disable_on]'] = $test;
      $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

      // Check that the schedule has been edited.
      $this->assertRaw($test . ' ' . t('does not match the expected format of'), t('Disable on fails validation.'));

    }

    // correct value
    $edited_schedule = array();
    $edited_schedule['schedules[1][disable_on]'] = '2025-01-01 06:00';
    $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

    // Check that the schedule has been edited.
    $this->assertRaw(t('The schedule has been saved.'), t('Schedule edited.'));

  }

  /**
   * Test repeat enable.
   */
  function testCurlypageSchedulerRepeatEnable() {

    // wrong value
    $edited_schedule = array();
    $edited_schedule['schedules[1][repeat_enable]'] = 1;
    $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

    // Check that the schedule has been edited.
    $this->assertRaw(t('Repeat every 0 days and 0 hours makes no sense.'), t('Repeat days fails validation.'));

    // correct value
    $edited_schedule = array();
    $edited_schedule['schedules[1][repeat_enable]'] = 1;
    $edited_schedule['schedules[1][repeat_days]'] = '30';
    $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

    // Check that the schedule has been edited.
    $this->assertRaw(t('The schedule has been saved.'), t('Schedule edited.'));

  }

  /**
   * Test repeat days.
   */
  function testCurlypageSchedulerRepeatDays() {

    $wrong_tests = array(
      '-15', // <0
      '415', // >365
      'abc', //  not number
    );

    // test wrong values
    foreach ($wrong_tests as $test) {

      $edited_schedule = array();
      $edited_schedule['schedules[1][repeat_days]'] = $test;
      $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

      // Check that the schedule has been edited.
      $this->assertRaw(t('Days must be a number between 0 and 365'), t('Repeat days fails validation.'));

    }

    // correct value
    $edited_schedule = array();
    $edited_schedule['schedules[1][repeat_days]'] = '30';
    $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

    // Check that the schedule has been edited.
    $this->assertRaw(t('The schedule has been saved.'), t('Schedule edited.'));

  }

  /**
   * Test repeat days.
   */
  function testCurlypageSchedulerRepeatHours() {

    $wrong_tests = array(
      '-5', // <0
      '30', // >23
      'ab', //  not number
    );

    // test wrong values
    foreach ($wrong_tests as $test) {

      $edited_schedule = array();
      $edited_schedule['schedules[1][repeat_hours]'] = $test;
      $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

      // Check that the schedule has been edited.
      $this->assertRaw(t('Hours must be a number between 0 and 23'), t('Repeat hours fails validation.'));

    }

    // correct value
    $edited_schedule = array();
    $edited_schedule['schedules[1][repeat_hours]'] = '12';
    $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

    // Check that the schedule has been edited.
    $this->assertRaw(t('The schedule has been saved.'), t('Schedule edited.'));

  }

  /**
   * Test repeat until.
   */
  function testCurlypageSchedulerRepeatUntil() {

    $now = REQUEST_TIME;
    $wrong_tests = array(
      '2001-13-01 20:22', // month can't be 13
      'abcdef',
    );

    // test wrong values
    foreach ($wrong_tests as $test) {

      $edited_schedule = array();
      $edited_schedule['schedules[1][repeat_until]'] = $test;
      $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

      // Check that the schedule has been edited.
      $this->assertRaw($test . ' ' . t('does not match the expected format of'), t('Enable on fails validation.'));

    }

    // correct value
    $edited_schedule = array();
    $edited_schedule['schedules[1][repeat_until]'] = '2025-01-01 06:00';
    $this->drupalPost('admin/structure/curlypage/scheduler/1/edit', $edited_schedule, t('Save'));

    // Check that the schedule has been edited.
    $this->assertRaw(t('The schedule has been saved.'), t('Schedule edited.'));

  }
}
