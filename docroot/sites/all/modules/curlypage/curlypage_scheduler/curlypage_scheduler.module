<?php
/**
 * @file
 * Adds a scheduler system to curlypage module.
 *
 * Acknowledgement: Some of the code and way of doing things were borrowed from scheduler module.
 */

/**
 * Implement hook_menu().
 */
function curlypage_scheduler_menu() {
  $items['admin/structure/curlypage/scheduler'] = array(
    'title' => 'Scheduled',
    'page callback' => 'curlypage_scheduler_list',
    'access arguments' => array('administer curlypages'),
    'type' => MENU_LOCAL_TASK,
    'description' => 'Display a list of scheduled curlypages',
  );
  $items['admin/structure/curlypage/scheduler/%curlypage_schedule/edit'] = array(
    'title' => 'Edit schedule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_schedule_edit', 4),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/curlypage/scheduler/%curlypage_schedule/delete'] = array(
    'title' => 'Delete schedule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curlypage_schedule_delete', 4),
    'access arguments' => array('administer curlypages'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  return $items;
}

/**
 * Loading one, more or all curlypage schedules.
 */
function curlypage_schedule_load($cpschid = NULL) {
  static $curlypage_schedules;

  if (!is_array($curlypage_schedules)) {

    if (is_numeric($cpschid)) {
      $result = db_query("SELECT * FROM {curlypage_scheduler} WHERE cpschid = :cpschid", array(':cpschid' => $cpschid));
      $schedule = $result->fetchObject();
      return $schedule;

    }
    else {
      $result = db_query("SELECT * FROM {curlypage_scheduler}");
      $curlypage_schedules = array();

      foreach ($result as $schedule) {
        $curlypage_schedules[$schedule->cpschid] = $schedule;
      }
    }
  }

  if (is_array($curlypage_schedules)) {

    if (is_numeric($cpschid)) {
      return $curlypage_schedules[$cpschid];
    }
    elseif (is_array($cpschid)) {
      return array_intersect_key($curlypage_schedules, array_flip($cpschid));
    }
    else {
      return $curlypage_schedules;
    }
  }
}

/**
 * Menu callback to edit a schedule
 */
function curlypage_schedule_edit($form, &$form_state, $curlypage_schedule) {

  $form = array();

  $form['cpid'] = array(
    '#type' => 'value',
    '#value' => $curlypage_schedule->cpid,
  );

  $form['schedule_edit'] = array(
    '#type' => 'value',
    '#value' => TRUE,
  );

  // Scheduler settings.
  $form['scheduler_settings'] = array();

  // number schedules
  $form['scheduler_settings']['number_schedules'] = array(
    '#type' => 'value',
    '#value' => 1,
  );

  // values for the curlypage schedule to edit
  $values[1] = new stdClass();
  $values[1]->cpschid       = $curlypage_schedule->cpschid ? $curlypage_schedule->cpschid : 0;
  $values[1]->enable_on     = $curlypage_schedule->enable_on ? format_date($curlypage_schedule->enable_on, 'custom', 'Y-m-d H:i') : '';
  $values[1]->disable_on    = $curlypage_schedule->disable_on ? format_date($curlypage_schedule->disable_on, 'custom', 'Y-m-d H:i') : '';
  $values[1]->repeat_enable = $curlypage_schedule->repeat_enable ? $curlypage_schedule->repeat_enable : 0;
  $values[1]->repeat_days   = $curlypage_schedule->repeat_days ? $curlypage_schedule->repeat_days : 0;
  $values[1]->repeat_hours  = $curlypage_schedule->cpschid ? $curlypage_schedule->repeat_hours : 0;
  $values[1]->repeat_until  = $curlypage_schedule->repeat_until ? format_date($curlypage_schedule->repeat_until, 'custom', 'Y-m-d H:i') : '';

  // Schedule settings
  _curlypage_schedule_form($form['scheduler_settings'], 1, $values);

  // validate and submit handlers
  $form['submit'] = array(
    '#type' => 'submit',
    '#validate' => array('curlypage_scheduler_curlypage_form_validate'),
    '#submit' => array('curlypage_scheduler_curlypage_form_submit'),
    '#value' => t('Save'),
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), 'admin/structure/curlypage/scheduler'),
  );

  return $form;
}

/**
 * Menu callback; confirm curlypage schedule delete.
 */
function curlypage_schedule_delete($form, &$form_state, $curlypage_schedule) {
  $form['schedule'] = array('#type' => 'hidden', '#value' => serialize($curlypage_schedule));
  return confirm_form($form, t('Are you sure you want to delete the curlypage schedule?'), 'admin/structure/curlypage/scheduler', NULL, t('Delete'), t('Cancel'));
}

/**
 * confirm curlypage schedule delete submit handler
 */
function curlypage_schedule_delete_submit($form, &$form_state) {
  $schedule = unserialize($form_state['values']['schedule']);
  db_delete('curlypage_scheduler')
    ->condition('cpschid', $schedule->cpschid)
    ->execute();

  drupal_set_message(t('The schedule has been removed.'));
  $form_state['redirect'] = 'admin/structure/curlypage/scheduler';
  return;
}

/**
 * Implements hook_curlypage_form().
 */
function curlypage_scheduler_curlypage_form(&$form, $form_state) {

  $current_curlypage_id = $form['cpid']['#value'];
  $number_schedules = 0;
  $schedules = array();

  // Scheduler settings.
  $form['scheduler_title'] = array(
    '#type' => 'item',
    '#title' => t('Curlypage scheduler settings'),
  );

  $form['scheduler_settings'] = array(
    '#type' => 'vertical_tabs',
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'curlypage_scheduler') . '/curlypage_scheduler_admin.js'),
    ),
  );

  // is it a rebuild?
  if (isset($form_state['values']['number_schedules'])) {
    $number_schedules = $form_state['values']['number_schedules'];
    $rebuild = TRUE;
  }
  else {
    // is it an edit?
    if ($current_curlypage_id) {
      // get schedules for this curlypage from DB
      $result = db_query("SELECT * FROM {curlypage_scheduler} s WHERE cpid = :cpid", array(':cpid' => $current_curlypage_id));

      foreach ($result as $schedule) {
        $schedules[] = $schedule;
      }

      $number_schedules = count($schedules);

      // if no schedules then show one blank schedule form
      $number_schedules = $number_schedules ? $number_schedules : 1;
    }
    else {
      // no schedules then show one blank schedule form
      $number_schedules = 1;
    }
    $rebuild = FALSE;
  }

  // number schedules
  $form['scheduler_settings']['number_schedules'] = array(
    '#type' => 'value',
    '#value' => $number_schedules,
  );

  // build schedules
  for ($i=1; $i<=$number_schedules; $i++) {

    // if the form is being rebuilded take values from $form_state
    // else get values from DB if it is an edit
    // or set default values if it is an add or clone
    $values[$i] = new stdClass();
    if ($rebuild) {
      $values[$i]->cpschid       = isset($form_state['values']['schedules'][$i]['cpschid']) ? $form_state['values']['schedules'][$i]['cpschid'] : 0;
      $values[$i]->enable_on     = isset($form_state['values']['schedules'][$i]['enable_on']) ? $form_state['values']['schedules'][$i]['enable_on'] : '';
      $values[$i]->disable_on    = isset($form_state['values']['schedules'][$i]['disable_on']) ? $form_state['values']['schedules'][$i]['disable_on'] : '';
      $values[$i]->repeat_enable = isset($form_state['values']['schedules'][$i]['repeat_enable']) ? $form_state['values']['schedules'][$i]['repeat_enable'] : 0;
      $values[$i]->repeat_days   = isset($form_state['values']['schedules'][$i]['repeat_days']) ? $form_state['values']['schedules'][$i]['repeat_days'] : 0;
      $values[$i]->repeat_hours  = isset($form_state['values']['schedules'][$i]['repeat_hours']) ? $form_state['values']['schedules'][$i]['repeat_hours'] : 0;
      $values[$i]->repeat_until  = isset($form_state['values']['schedules'][$i]['repeat_until']) ? $form_state['values']['schedules'][$i]['repeat_until'] : '';
    }
    else {
      // -1 cause schedules are numbered starting at 1 but arrays starts at 0
      $values[$i]->cpschid       = isset($schedules[$i-1]) && $schedules[$i-1]->cpschid ? $schedules[$i-1]->cpschid : 0;
      $values[$i]->enable_on     = isset($schedules[$i-1]) && $schedules[$i-1]->enable_on ? format_date($schedules[$i-1]->enable_on, 'custom', 'Y-m-d H:i') : '';
      $values[$i]->disable_on    = isset($schedules[$i-1]) && $schedules[$i-1]->disable_on ? format_date($schedules[$i-1]->disable_on, 'custom', 'Y-m-d H:i') : '';
      $values[$i]->repeat_enable = isset($schedules[$i-1]) && $schedules[$i-1]->repeat_enable ? $schedules[$i-1]->repeat_enable : 0;
      $values[$i]->repeat_days   = isset($schedules[$i-1]) && $schedules[$i-1]->repeat_days ? $schedules[$i-1]->repeat_days : 0;
      $values[$i]->repeat_hours  = isset($schedules[$i-1]) && $schedules[$i-1]->cpschid ? $schedules[$i-1]->repeat_hours : 0;
      $values[$i]->repeat_until  = isset($schedules[$i-1]) && $schedules[$i-1]->repeat_until ? format_date($schedules[$i-1]->repeat_until, 'custom', 'Y-m-d H:i') : '';
    }

  }

  // build schedules
  _curlypage_schedule_form($form['scheduler_settings'], $number_schedules, $values);

  // more button
  $form['scheduler_settings']['more'] = array(
    '#type' => 'submit',
    '#value' => '+',
    '#validate' => array('curlypage_scheduler_form_more'),
  );

}

/**
 * Helper function to generate schedule form
 *
 * @param $form
 *   The scheduler form where the schedules need to be added.
 * @param $number_schedules
 *   The number of schedules to add.
 * @param $values
 *   Array with values for each schedule.
 *
 */
function _curlypage_schedule_form(&$form, $number_schedules, $values) {

  $numbered = $number_schedules > 1;
  $now = REQUEST_TIME;

  $form['schedules'] = array(
    '#tree' => TRUE,
  );

  $enable_description  = t('Format: %time. The date format is YYYY-MM-DD. Leave blank if you don\'t need an enable schedule here.', array('%time' => format_date($now, 'custom', 'Y-m-d H:i')));
  $disable_description = t('Format: %time. The date format is YYYY-MM-DD. Leave blank if you don\'t need a disable schedule here.', array('%time' => format_date($now, 'custom', 'Y-m-d H:i')));
  $until_description   = t('The schedule will not be repeated any more when this time is passed. Format: %time. The date format is YYYY-MM-DD. Leave blank if you don\'t need and until time.', array('%time' => format_date($now, 'custom', 'Y-m-d H:i')));
  $repeat_description  = t('Check this if you want to repeat this schedule');

  for ($i=1; $i<=$number_schedules; $i++) {

    // Schedule settings
    $form['schedules'][$i] = array(
      '#type' => 'fieldset',
      '#title' => $numbered ? t('Schedule %i', array('%i' => $i)) : t('Schedule'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    // Unique schedule Identifier
    $form['schedules'][$i]['cpschid'] = array(
      '#type' => 'value',
      '#value' => $values[$i]->cpschid,
    );

    // Enable on date/time
    $form['schedules'][$i]['enable_on'] = array(
      '#type' => 'textfield',
      '#title' => t('Enable on'),
      '#maxlength' => 16,
      '#size' => 40,
      '#default_value' => $values[$i]->enable_on,
      '#description' => $enable_description,
    );

    // Disable on date/time
    $form['schedules'][$i]['disable_on'] = array(
      '#type' => 'textfield',
      '#title' => t('Disable on'),
      '#maxlength' => 16,
      '#size' => 40,
      '#default_value' => $values[$i]->disable_on,
      '#description' => $disable_description,
    );

    // Enable or disable schedule rerun
    $form['schedules'][$i]['repeat_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Repeat'),
      '#default_value' => $values[$i]->repeat_enable,
      '#description' => $repeat_description,
    );

    // Days to the next rerun
    $form['schedules'][$i]['repeat_days'] = array(
      '#type' => 'textfield',
      '#title' => t('days'),
      '#maxlength' => 3,
      '#size' => 40,
      '#default_value' => $values[$i]->repeat_days,
    );

    // Hours to the next rerun
    $form['schedules'][$i]['repeat_hours'] = array(
      '#type' => 'textfield',
      '#title' => t('hours'),
      '#maxlength' => 2,
      '#size' => 40,
      '#default_value' => $values[$i]->repeat_hours,
    );

    // Rerun until this date/time
    $form['schedules'][$i]['repeat_until'] = array(
      '#type' => 'textfield',
      '#title' => t('until'),
      '#maxlength' => 16,
      '#size' => 40,
      '#default_value' => $values[$i]->repeat_until,
      '#description' => $until_description,
    );

  }

}

/**
 * more schedules handler
 */
function curlypage_scheduler_form_more($form, &$form_state) {

  $form_state['scheduler_settings']['more_schedules'] = TRUE;
  form_set_value($form['scheduler_settings']['number_schedules'], $form_state['values']['number_schedules'] + 1, $form_state);
  $form_state['rebuild'] = TRUE;

}

/**
 * Implements hook_curlypage_form_validate().
 */
function curlypage_scheduler_curlypage_form_validate($form, &$form_state) {

  $now = REQUEST_TIME;

  $timezone = format_date($now, 'custom', 'O');

  for ($i=1; $i<=$form_state['values']['number_schedules']; $i++) {

    $enable_on     = $form_state['values']['schedules'][$i]['enable_on'];
    $disable_on    = $form_state['values']['schedules'][$i]['disable_on'];
    $repeat_enable = $form_state['values']['schedules'][$i]['repeat_enable'];
    $repeat_days   = $form_state['values']['schedules'][$i]['repeat_days'];
    $repeat_hours  = $form_state['values']['schedules'][$i]['repeat_hours'];
    $repeat_until  = $form_state['values']['schedules'][$i]['repeat_until'];

    // test enable_on
    if ($enable_on) {

      // append timezone
      $enable_on = $enable_on . ' ' . $timezone;
      // to UNIX timestamp
      $timestamp = strtotime($enable_on);

      if ($timestamp === FALSE) {

        form_set_error('schedules][' . $i . '][enable_on', $form_state['values']['schedules'][$i]['enable_on'] . ' ' . t("does not match the expected format of %time", array('%time' => format_date($now, 'custom', 'Y-m-d H:i'))));

      }
      else {

        form_set_value($form['scheduler_settings']['schedules'][$i]['enable_on'], $timestamp, $form_state);

      }

    }
    else {

      form_set_value($form['scheduler_settings']['schedules'][$i]['enable_on'], 0, $form_state);

    }

    // test disable_on
    if ($disable_on) {

      // append timezone
      $disable_on = $disable_on . ' ' . $timezone;
      // to UNIX timestamp
      $timestamp = strtotime($disable_on);

      if ($timestamp === FALSE) {

        form_set_error('schedules][' . $i . '][disable_on', $form_state['values']['schedules'][$i]['disable_on'] . ' ' . t("does not match the expected format of %time", array('%time' => format_date($now, 'custom', 'Y-m-d H:i'))));

      }
      else {

        form_set_value($form['scheduler_settings']['schedules'][$i]['disable_on'], $timestamp, $form_state);

      }

    }
    else {

      form_set_value($form['scheduler_settings']['schedules'][$i]['disable_on'], 0, $form_state);

    }

    // test days
    if (!is_numeric($repeat_days) || $repeat_days < 0 || $repeat_days > 365) {
      form_set_error('schedules][' . $i . '][repeat_days', t('Days must be a number between 0 and 365'));
    }

    // test hours
    if (!is_numeric($repeat_hours) || $repeat_hours < 0 || $repeat_hours > 23) {
      form_set_error('schedules][' . $i . '][repeat_hours', t('Hours must be a number between 0 and 23'));
    }

    // test - or days or hours must be not 0
    if ($repeat_enable && !$repeat_days && !$repeat_hours) {
      form_set_error('schedules][' . $i . '][repeat_days', t('Repeat every 0 days and 0 hours makes no sense.'));
    }

    // test until
    if ($repeat_until) {

      // append timezone
      $repeat_until = $repeat_until . ' ' . $timezone;
      // to UNIX timestamp
      $timestamp = strtotime($repeat_until);

      if ($timestamp === FALSE) {

        form_set_error('schedules][' . $i . '][repeat_until', $form_state['values']['schedules'][$i]['repeat_until'] . ' ' . t("does not match the expected format of %time", array('%time' => format_date($now, 'custom', 'Y-m-d H:i'))));

      }
      else {

        form_set_value($form['scheduler_settings']['schedules'][$i]['repeat_until'], $timestamp, $form_state);

      }

    }
    else {

      form_set_value($form['scheduler_settings']['schedules'][$i]['repeat_until'], 0, $form_state);

    }

  }

}


/**
 * Implements hook_curlypage_form_submit().
 */
function curlypage_scheduler_curlypage_form_submit($form, &$form_state) {

  $schedule = new stdClass();
  $schedule->cpid = $form_state['values']['cpid'];

  for ($i=1; $i<=$form_state['values']['number_schedules']; $i++) {

    $schedule->cpschid       = $form_state['values']['schedules'][$i]['cpschid'];
    $schedule->enable_on     = $form_state['values']['schedules'][$i]['enable_on'];
    $schedule->disable_on    = $form_state['values']['schedules'][$i]['disable_on'];
    $schedule->repeat_enable = $form_state['values']['schedules'][$i]['repeat_enable'];
    $schedule->repeat_days   = $form_state['values']['schedules'][$i]['repeat_days'];
    $schedule->repeat_hours  = $form_state['values']['schedules'][$i]['repeat_hours'];
    $schedule->repeat_until  = $form_state['values']['schedules'][$i]['repeat_until'];

    // is it an update?
    if ($schedule->cpschid) {
      // is enable on date/time or disable on date/time set?
      if ($schedule->enable_on || $schedule->disable_on) {
        // update schedule
        drupal_write_record('curlypage_scheduler', $schedule, 'cpschid');
      }
      else {
        // delete schedule
        db_delete('curlypage_scheduler')
          ->condition('cpschid', $schedule->cpschid)
          ->execute();
      }
    }
    else {
      // add new schedule to DB if it has an enable on or disable on date/time
      if ($schedule->enable_on || $schedule->disable_on) {
        drupal_write_record('curlypage_scheduler', $schedule);
      }
    }

  }

  if (isset($form_state['values']['schedule_edit']) && $form_state['values']['schedule_edit']) {
    drupal_set_message(t('The schedule has been saved.'));
    $form_state['redirect'] = 'admin/structure/curlypage/scheduler';
  }

}

/**
 * Implements hook_curlypage_delete().
 *   If a curlypage is deleted, delete all schedules of that curlypage
 */
function curlypage_scheduler_curlypage_delete($curlypage) {

  db_delete('curlypage_scheduler')
    ->condition('cpid', $curlypage->cpid)
    ->execute();

}

/**
 * Displays a list of curlypages that are scheduled.
 */
function curlypage_scheduler_list() {

  $schedules_per_page = 20;

  $header = array(
    array('data' => t('Curlypage'), 'field' => 'cp.name'),
    array('data' => t('Enable on'), 'field' => 'cpsch.enable_on', 'sort' => 'asc'),
    array('data' => t('Disable on'), 'field' => 'cpsch.disable_on'),
    array('data' => t('Repeat')),
    array('data' => t('Until'), 'field' => 'cpsch.repeat_until'),
    array('data' => t('Operations'), 'colspan' => '2')
  );

  $select = db_select('curlypage_scheduler', 'cpsch')->extend('PagerDefault')->extend('TableSort');
  $select->join('curlypages', 'cp', 'cpsch.cpid = cp.cpid');
  $queried_schedules = $select
    ->fields('cp', array('cpid', 'name'))
    ->fields('cpsch', array('cpschid', 'enable_on', 'disable_on', 'repeat_enable', 'repeat_days', 'repeat_hours', 'repeat_until'))
    ->limit($schedules_per_page)
    ->orderByHeader($header)
    ->execute();

  $rows = array();

  foreach ($queried_schedules as $curlypage) {

    if ($curlypage->repeat_enable) {
      $repeat_string = t('Every') . ' ' . $curlypage->repeat_days . ' ' . t('days') . ' ' . $curlypage->repeat_hours . ' ' . t('hours');
    }

    $rows[] = array(
      array('data' => $curlypage->name ? l($curlypage->name, "admin/structure/curlypage/" . $curlypage->cpid . "/edit") : '&nbsp;'),
      array('data' => $curlypage->enable_on ? format_date($curlypage->enable_on, 'short') : '&nbsp;'),
      array('data' => $curlypage->disable_on ? format_date($curlypage->disable_on, 'short') : '&nbsp;'),
      array('data' => $curlypage->repeat_enable ? $repeat_string : '&nbsp;'),
      array('data' => ($curlypage->repeat_enable && $curlypage->repeat_until) ? format_date($curlypage->repeat_until, 'short') : '&nbsp;'),
      array('data' => l(t('edit'), 'admin/structure/curlypage/scheduler/' . $curlypage->cpschid . '/edit')),
      array('data' => l(t('delete'), 'admin/structure/curlypage/scheduler/' . $curlypage->cpschid . '/delete')),
    );

  }

  $build['schedules_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#prefix' => t('This table lists all the scheduled curlypages.'),
  );

  $build['schedules_pager'] = array('#theme' => 'pager');

  return $build;

}

/**
 * Implement hook_cron().
 */
function curlypage_scheduler_cron() {

  $clear_cache = FALSE;

  $curlypage_schedules = array();

  // get all schedules from DB
  $result = db_query("SELECT * FROM {curlypage_scheduler}");
  foreach ($result as $curlypage_schedule) {
    $curlypage_schedules[] = $curlypage_schedule;
  }

  // each record contains an schedule for a specific curlypage
  foreach ($curlypage_schedules as $curlypage_schedule) {

    // get curlypage status
    $result = db_query('SELECT c.status FROM {curlypages} c WHERE cpid = :cpid', array(':cpid' => $curlypage_schedule->cpid));
    $isenable = $result->fetchField();

    // if the time now is greater than the time to enable a curlypage, enable it
    if ($curlypage_schedule->enable_on && $curlypage_schedule->enable_on < REQUEST_TIME) {

      // enable the curlypage if it is not enabled
      if (!$isenable) {
        curlypage_curlypage_enable($curlypage_schedule->cpid);
        $clear_cache = TRUE;
      }

      // update the schedule
      // if repeat is enable then compute next enable on run date/time
      if ($curlypage_schedule->repeat_enable && (($curlypage_schedule->repeat_until && $curlypage_schedule->repeat_until > REQUEST_TIME) || !$curlypage_schedule->repeat_until)) {
        $curlypage_schedule->enable_on = $curlypage_schedule->enable_on + $curlypage_schedule->repeat_days * 60 * 60 * 24 + $curlypage_schedule->repeat_hours * 60 * 60;
      }
      else {
        $curlypage_schedule->enable_on = 0;
      }
      // are both enable on and disable on 0?
      if ($curlypage_schedule->enable_on == 0 && $curlypage_schedule->disable_on == 0) {
        // delete schedule from DB
        db_query('DELETE FROM {curlypage_scheduler} WHERE cpschid = :cpschid', array(':cpschid' => $curlypage_schedule->cpschid));
      }
      else {
        // update schedule
        drupal_write_record('curlypage_scheduler', $curlypage_schedule, 'cpschid');
      }

    }

    // if the time now is greater than the time to disable a curlypage, disable it
    if ($curlypage_schedule->disable_on && $curlypage_schedule->disable_on < REQUEST_TIME) {

      // disable the curlypage if it is enabled
      if ($isenable) {
        curlypage_curlypage_disable($curlypage_schedule->cpid);
        $clear_cache = TRUE;
      }

      // update the schedule
      // if repeat is enable then compute next disable on run date/time
      if ($curlypage_schedule->repeat_enable && (($curlypage_schedule->repeat_until && $curlypage_schedule->repeat_until > REQUEST_TIME) || !$curlypage_schedule->repeat_until)) {
        $curlypage_schedule->disable_on = $curlypage_schedule->disable_on + $curlypage_schedule->repeat_days * 60 * 60 * 24 + $curlypage_schedule->repeat_hours * 60 * 60;
      }
      else {
        $curlypage_schedule->disable_on = 0;
      }
      // are both enable on and disable on 0?
      if ($curlypage_schedule->enable_on == 0 && $curlypage_schedule->disable_on == 0) {
        // delete schedule from DB
        db_query('DELETE FROM {curlypage_scheduler} WHERE cpschid = :cpschid', array(':cpschid' => $curlypage_schedule->cpschid));
      }
      else {
        // update schedule
        drupal_write_record('curlypage_scheduler', $curlypage_schedule, 'cpschid');
      }

    }

  }

  if ($clear_cache) {
    // clear the cache so an anonymous poster can see the curlypage being enabled or disabled
    cache_clear_all();
  }

}
