<?php

/**
 * @file
 * Clipped.me module main file.
 */

/**
 * Implements hook_menu().
 */
function clippedme_menu() {
  $items = array();
  $items['admin/config/user-interface/clippedme'] = array(
    'title'            => 'Clipped.me',
    'description'      => 'Configure link previews from Clipped.me',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('clippedme_configure'),
    'file'             => 'clippedme.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['clippedme'] = array(
    'page callback'    => 'clippedme_proxy',
    // Some access control is implemented by the page callback.
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_page_build().
 */
function clippedme_page_build(&$page) {
  $theme = variable_get('clippedme_theme', 'tip-clippedme');
  $plugin_path = libraries_get_path('poshy_tip');
  if ($theme == 'tip-clippedme') {
    $page['content']['#attached']['css'][] = drupal_get_path('module', 'clippedme') . '/assets/tip-clippedme.css';
  }
  elseif ($theme != 'tip-custom') {
    $page['content']['#attached']['css'][] = $plugin_path . '/src/' . $theme . '/' . $theme . '.css';
  }
  $page['content']['#attached']['js'][] = array(
    'data' => $plugin_path . '/src/jquery.poshytip.min.js',
    'scope' => 'footer',
  );
  $page['content']['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'clippedme') . '/assets/clippedme.js',
    'scope' => 'footer',
  );
  $page['content']['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'clippedMe' => array(
        'branding' => file_create_url(drupal_get_path('module', 'clippedme') . '/assets/clipped.png'),
        'selector' => variable_get('clippedme_selector', 'clippedme'),
        'theme' => $theme,
      ),
    ),
  );
}

/**
 * Helper function - get summary data about a path.
 *
 * Looks into cache first.
 *
 * @param string $path
 *   In fact, this is a fully qualified URL, with schema and so.
 */
function clippedme_get_data($path) {
  $cid = md5($path);
  $data = cache_get('clippedme-' . $cid);
  // Got cached data? Return it.
  if ($data) {
    return $data->data;
  }
  // Else contact Clipped.me.
  else {
    $raw = drupal_http_request('http://clipped.me/algorithm/clippedapi.php?url=' . $path);
    if ($raw->code == 200) {
      $data = drupal_json_decode($raw->data);
      if ($data) {
        // Cache only intelligible responses.
        cache_set('clippedme-' . $cid, $data, 'cache', CACHE_TEMPORARY);
      }
      else {
        // This is internal use only and does not need to be translated.
        $data = array('error' => 'bad_response');
      }
    }
    else {
      // This is internal use, too.
      $data = array('error' => 'no_response');
    }
    return $data;
  }
}

/**
 * Page callback for the 'local proxy' to work around same origin policy.
 *
 * This acts as a proxy between jQuery and clippedme_get_data(). URL is passed
 * in as a query string parameter.
 */
function clippedme_proxy() {
  // Deny access to peekers.
  if (parse_url($_SERVER['HTTP_REFERER'], PHP_URL_HOST) !== $_SERVER['HTTP_HOST']) {
    drupal_access_denied();
  }
  // No URL, no results.
  if (empty($_GET['url'])) {
    print drupal_json_encode(array('error' => 'no_url'));
    exit;
  }
  if (url_is_external($_GET['url'])) {
    $path = $_GET['url'];
  }
  else {
    $path = $GLOBALS['base_url'] . '/' . $_GET['url'];
  }
  print drupal_json_encode(clippedme_get_data($path));
  exit;
}
