<?php

/**
 * @file
 * While module.
 */

/**
 * Gets the string to use for the given key.
 */
function while_get_string($key) {
  $static = &drupal_static(__FUNCTION__);

  if (!isset($static)) {
    $static = variable_get('while_strings', array()) + array(
      'entity label' => t('White label entity'),
      'entity plural label' => t('White label entities'),
      'entity description' => 'While label entities are white, but they can be customized.',
      'type label' => t('White label type'),
      'type plural label' => t('White label types'),
      'type description' => 'Types of white label entities.',
      'base path' => 'while',
      'admin menu path' => 'admin/structure/while',
      'admin menu description' => 'Manage white label types, including fields.',
      'admin menu path content' => 'admin/content/while',
    );
  }
  return isset($static[$key]) ? $static[$key] : '';
}

/**
 * Implements hook_entity_info().
 */
function while_entity_info() {
  $return = array(
    'while' => array(
      'label' => while_get_string('entity label'),
      'plural label' => while_get_string('entity plural label'),
      'description' => while_get_string('entity description'),
      'entity class' => 'WhileEntity',
      'controller class' => 'WhileController',
      'base table' => 'while_base',
      'revision table' => 'while_revision',
      'fieldable' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Full page'),
          'custom settings' => FALSE,
        ),
      ),
      'entity keys' => array(
        'id' => 'id',
        'revision' => 'revision_id',
        'bundle' => 'type',
        'label' => 'label',
      ),
      'bundles' => array(),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'while_access',
      'module' => 'while',
      'metadata controller class' => 'WhileMetadataController',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => while_get_string('base path'),
        'file' => 'while.pages.inc',
        'controller class' => 'WhileUIController',
      ),
    ),
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('while_type', 't')
    ->fields('t')
    ->execute()
    ->fetchAllAssoc('name');

  foreach ($types as $type_name => $info) {
    $return['while']['bundles'][$type_name] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => while_get_string('admin menu path') . '/manage/%while_type',
        'real path' => while_get_string('admin menu path') . '/manage/' . $type_name,
        'bundle argument' => 4,
        'access arguments' => array('administer while types'),
      ),
    );
  }

  // Support entity cache module.
  if (module_exists('entitycache')) {
    $return['while']['field cache'] = FALSE;
    $return['while']['entity cache'] = TRUE;
  }

  $return['while_type'] = array(
    'label' => while_get_string('type label'),
    'plural label' => while_get_string('type plural label'),
    'description' => while_get_string('type description'),
    'entity class' => 'WhileType',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'while_type',
    'fieldable' => FALSE,
    'bundle of' => 'while',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
    ),
    'access callback' => 'while_type_access',
    'module' => 'while',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => while_get_string('admin menu path'),
      'file' => 'while.admin.inc',
      'controller class' => 'whileTypeUIController',
    ),
  );
  // Define how to get the bundle-name from a while type object.
  $return['while']['bundle keys']['bundle'] = 'name';

  return $return;
}

/**
 * Access callback for the entity API.
 */
function while_access($op, $entity = NULL, $account = NULL) {
  if (user_access('administer whiles', $account)) {
    return TRUE;
  }
  $account = isset($account) ? $account : $GLOBALS['user'];

  // @todo: Make owner a field?
  if (isset($entity) && user_access('view own whiles', $account)) {
    if ($entity->uid == $account->uid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for the entity API.
 */
function while_type_access($op, $entity = NULL, $account = NULL) {
  return user_access('administer while types', $account);
}

/**
 * Implements hook_permission().
 */
function while_permission() {
  return array(
    'administer whiles' => array(
      'title' => t('Administer white label entities'),
      'description' => t('Created and edit all white label entities.'),
    ),
    'administer while types' => array(
      'title' => t('Administer white label entity types'),
      'description' => t('Create and delete white label entity types and their fields.'),
    ),
    'view own whiles' => array(
      'title' => t('View own white label entities'),
      'description' => t('View own white label entities.'),
    ),
  );
}

/**
 * while type loader.
 *
 * @return whileType
 */
function while_type_load($type_name) {
  return entity_load_single('while_type', $type_name);
}

/**
 * while loader.
 *
 * @return while
 */
function while_load($id) {
  return entity_load_single('while', $id);
}

/**
 * Implements hook_views_api().
 */
function while_views_api() {
  return array("api" => "3.0");
}

/**
 * Implements hook_ctools_plugin_directory()
 */
function while_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array('panelizer', 'ctools', 'page_manager'))) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function while_ctools_plugin_api($module, $api) {
  if (($module == 'page_manager' && $api == 'pages_default') || $module == 'panelizer') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'panelizer') . '/includes',
    );
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function while_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to add whiles on the admin menu content page.
  if ($root_path == while_get_string('admin menu path content')) {
    $item = menu_get_item(while_get_string('base path') . '/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}
