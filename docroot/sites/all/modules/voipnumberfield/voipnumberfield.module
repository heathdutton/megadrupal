<?php

/**
 * Implementation of hook_perm().
 */
//@todo: check why formatter is not set

//TODO: Revise permissions
/**
 * Implements hook_permission().
 */
function voipnumberfield_permission() {
  return array(
    'use default voip number' => array(
      'title' => t('use default voip number'),
      'description' => t('use default voip number'),
    )
  );
}

/**
 * Implementation of hook_menu().
 */
function voipnumberfield_menu() {
  $items['admin/config/voipnumberfield'] = array(
    'title' => 'VoIP Number',
    'description' => 'VoIP Number Field settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voipnumberfield_admin_config_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function voipnumberfield_admin_config_form($form, &$form_state) {
  $form = _voipnumberfield_config_fields($form_state);
  return system_settings_form($form);
}

function _voipnumberfield_config_fields(&$form_state, $field = FALSE) {
  drupal_add_js(drupal_get_path('module', 'voipnumberfield') . '/voipnumberfield.js');

  /*Set stored values, they can come from admin form or from field form*/
  if ($field) {
    $voipnumberfield_choice = !empty($field['voipnumberfield_choice']) ? $field['voipnumberfield_choice'] : variable_get('voipnumberfield_choice', 1);
    $voipnumberfield_default = !empty($field['voipnumberfield_default']) ? $field['voipnumberfield_default'] : variable_get('voipnumberfield_default', '');
    $voipnumberfield_max_length = !empty($field['voipnumberfield_max_length']) ? $field['voipnumberfield_max_length'] : variable_get('voipnumberfield_max_length', 15);
    $voipnumberfield_allow_sip = !empty($field['voipnumberfield_allow_sip']) ? $field['voipnumberfield_allow_sip'] : variable_get('voipnumberfield_allow_sip', TRUE);
    $voipnumberfield_allowed_countries = isset($field['voipnumberfield_allowed_countries']) ? $field['voipnumberfield_allowed_countries'] : variable_get('voipnumberfield_allowed_countries', '');
    $voipnumberfield_unique = isset($field['voipnumberfield_unique_fieldset']['voipnumberfield_unique']) ? $field['voipnumberfield_unique_fieldset']['voipnumberfield_unique'] : variable_get('voipnumberfield_unique', '');
    $prefix = '';
  }
  else {
    $voipnumberfield_choice = variable_get('voipnumberfield_choice', 1);
    $voipnumberfield_default = variable_get('voipnumberfield_default', '');
    $voipnumberfield_max_length = variable_get('voipnumberfield_max_length', 15);
    $voipnumberfield_allowed_countries = variable_get('voipnumberfield_allowed_countries', '');
    $voipnumberfield_allow_sip = variable_get('voipnumberfield_allow_sip', TRUE);
    $voipnumberfield_unique = FALSE;
    $prefix = '<div>' . t('This are global settings, each field can be further adjusted with per field settings.') . '</div>';
  }
  /*Max Length*/
  $form['voipnumberfield_max_length'] = array(
    '#prefix' => $prefix,
    '#type' => 'textfield',
    '#title' => t('Number length'),
    '#default_value' => $voipnumberfield_max_length,
    '#description' => t('Maximum length of international numbers, according to the ITU this is 15.'),
  );

  /*Allow SIP numbers*/
  $form['voipnumberfield_allow_sip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow SIP numbers'),
    '#default_value' => $voipnumberfield_allow_sip,
    '#description' => t('Enable if you want to allow for SIP addresses in VoIP Number field.'),
  );

  $form['voipnumberfield_choice'] = array(
    '#title' => t('Country code settings'),
    '#type' => 'radios',
    '#options' => array(
      1 => t('Allow all'),
      2 => t('Let user select from predefined list'),
      3 => t('Use default country code')
    ),
    '#default_value' => $voipnumberfield_choice,
  );

  $countries = voipnumberfield_dialing_codes();
  $form['voipnumberfield_allowed_countries'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#default_value' => $voipnumberfield_allowed_countries,
    '#options' => $countries,
    '#description' => t('Select which countries will be available. Use CTRL key to select multiple values.'),
    '#size' => 10,
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][voipnumberfield_choice]"]' => array('value' => 2),
      ),
    ),
  );

  $form['voipnumberfield_default'] = array(
    '#type' => 'textfield',
    '#default_value' => $voipnumberfield_default,
    '#size' => 20,
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][voipnumberfield_choice]"]' => array('value' => 3),
      ),
    ),
  );

  $form['voipnumberfield_unique_fieldset'] = array(
    '#title' => t('Uniqueness'),
    '#type' => 'fieldset',
  );
  $form['voipnumberfield_unique_fieldset']['voipnumberfield_unique'] = array(
    '#type' => 'checkbox',
    '#default_value' => $voipnumberfield_unique,
    '#title' => t('Unique'),
    '#description' => t('Check this if the number entered can only be used once for this field.'),
  );

  return $form;
}

/**
 * API Functions
 */

/**
 * Get the entity or entities with a number.
 *
 * Use unique setting if only one field instance should relate to one number.
 *
 * @param string $entity_type
 *   The entity that the number is related to and will be returned.
 * @param string $field_name
 *   The name of the field that the number is stored in.
 * @param string $lookup_number
 *   The number to lookup.
 *
 * @return array|bool
 *   Associative array of stub entities, as returned by
 *   EntityFieldQuery::execute(), or FALSE.
 */
function voipnumberfield_get_instance_by_number($entity_type, $field_name, $lookup_number) {
  // First retrieve the all the VoipNumber IDs of this phone number.
  // It can be multiple, even if they aren't in the field.
  $numbers = VoipNumber::getVoipNumbersByNumber($lookup_number);
  if (!count($numbers)) {
    return FALSE;
  }
  $field = field_info_field($field_name);
  foreach ($numbers as $voipnumber) {
    $vnids[] = $voipnumber->getVnid();
  }

  // Look up all instances of those VoipNumber IDs in this field.
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', $entity_type);
  $efq->fieldCondition($field, 'vnid', $vnids, 'IN');
  return $efq->execute();
}

/*CCK Functions*/
/**
 * Implementation of hook_field_info().
 */
function voipnumberfield_field_info() {
  return array(
    'voipnumberfield' => array(
      'label' => t('VoIP Number'),
      'description' => t('VoIP Number Field.'),
      'default_widget' => 'voipphonenumber_widget',
      'default_formatter' => 'default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function voipnumberfield_field_settings_form($field, $instance, $has_data) {
  $form_state = array();
  $settings = $field['settings'];
  $form = _voipnumberfield_config_fields($form_state, $settings);
  return $form;
}

/**
 * Implements hook_field_validate().
 */
function voipnumberfield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if (!isset($instance['field_id'])) {
    //This is validation for field settings, skip it
    return;
  }
  foreach ($items as $delta => $item) {
    if ($item['vnid'] != '') {
      // If unique check to see if this number been used before.
      if (!empty($field['settings']['voipnumberfield_unique_fieldset']['voipnumberfield_unique'])) {
        $unique = TRUE;
        $numbers = VoipNumber::getVoipNumbersByNumber(VoipCall::NormalizeNumber($item['vnid']));
        if (count($numbers)) {
          foreach ($numbers as $voipnumber) {
            $vnid = $voipnumber->getVnid();
            if ($vnid == $item['real_vnid']) {
              // If this number is (one) that is saved in the database already
              // continue.  This will allow a corrupt db with duplicates,
              // including one already saved to continue to be the same.
              $unique = TRUE;
              break;
            }
            else {
              // The number is not itself. Query the field to see if the
              // number is in use in this field anywhere else.
              $efq = new EntityFieldQuery();
              $efq->entityCondition('entity_type', $entity_type);
              $efq->fieldCondition($field, 'vnid', $vnid);
              $efq->addMetaData('account', user_load(1)); // Run the query as user 1.
              $result = $efq->execute();
              if (isset($result[$entity_type]) && is_array($result[$entity_type]) && count($result[$entity_type])) {
                // It is in use.
                $unique = FALSE;
              }
            }
          }
        }
        if (!$unique) {
         form_set_error($field['field_name'] . '][' . $langcode . '][' . $delta . '][vnid', t('%name is already registered.',
              array('%name' => $instance['label']
              ))
          );
        }
      }
      switch ($item ['advanced']['type']) {
        case VOIPNUMBER_PSTN:
        case VOIPNUMBER_MOBILE:
        case VOIPNUMBER_SMS:
          $phonenumber = VoipCall::NormalizeNumber($item['vnid']);
          //Check phone length
          if (!_voipnumberfield_valid_int_phone_number($phonenumber, $error, $field['settings']['voipnumberfield_max_length'])) {
            form_set_error($field['field_name'] . '][' . $langcode . '][' . $delta . '][vnid', t('"%value" is %error', array(
                '%value' => $item['vnid'],
                '%error' => $error
              )));
          }

          switch ($field['settings']['voipnumberfield_choice']) {
            case 1:
              //Allow all country codes, don't do anything
              //@todo: should we check that its valid country code?
              break;
            case 2:
              //Allow only selected country codes
              $number_country_temp = VoipNumber::getCountryFromNumber($phonenumber);
              $allowed = FALSE;
              if (!is_array($number_country_temp)) {
                //VoipNumber::getCountryFromNumber can return array of countries or string
                $number_countries[] = $number_country_temp;
              }
              else {
                $number_countries = $number_country_temp;
              }
              $countries = $field['settings']['voipnumberfield_allowed_countries'];
              //$country_codes = voipnumberfield_dialing_codes(2);
              //$list_of_countries = array();
              if (is_array($countries)) {
                //Since $number_countries can be multiple countries we need to check each one
                foreach ($number_countries as $number_country) {
                  if (in_array($number_country, $countries)) {
                    $allowed = TRUE;
                  }
                }
                if (!$allowed) {
                  form_set_error($field['field_name'] . '][' . $langcode . '][' . $delta . '][vnid', t('"%value" is not a
                      phone number in allowed countries. Allowed countries
                      are %countries', array(
                      '%value' => $item['vnid'],
                      '%countries' => implode(', ', $countries)
                    )));
                }
              }
              break;
            case 3:
              //Allow only default country
              $countries = VoipNumber::getCountryFromCode($field['settings']['voipnumberfield_default']);
              if (is_array($countries)) {
                $countries = implode(', ', $countries);
              }

              $number_code = VoipNumber::getCodeFromNumber($phonenumber);
              if ($number_code != $field['settings']['voipnumberfield_default']) {
                form_set_error($field['field_name'] . '][' . $langcode . '][' . $delta . '][vnid', t('"%value" is not a
                      phone number in allowed country. Allowed countries
                      are %countries', array(
                    '%value' => $item['vnid'],
                    '%countries' => $countries,
                  )));
              }
              break;
          }
          break;
        case VOIPNUMBER_SIP:
          //Couldn't find regex for SIP validation, therefore using email validation + added ':' as valid character (eg sip:john@test.com)
          $base_sip = str_ireplace('sip://', '', $item['vnid']);
          if (!eregi("^[_a-z0-9:-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", $base_sip)) {
            form_set_error($field['field_name'] . '][' . $langcode . '][' . $delta . '][vnid', t('"%value" is invalid SIP number.', array('%value' => $item['vnid'])));

          }
          break;
      }
    }
  }
}

/**
 * Implements hook_field_load().
 */
function voipnumberfield_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  // Sample code from text.module: precompute sanitized strings so they are
  // stored in the field cache.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {

      if (!isset($item['real_vnid']) && $item['vnid']) {
        $items[$id][$delta]['real_vnid'] = $item['vnid'];
        $vn = VoipNumber::load($item['vnid']);
        $items[$id][$delta]['vnid'] = $vn->getNumber();
      }
    }
  }
}

/**
 * Implements hook_field_insert().
 */
function voipnumberfield_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  _voipnumberfield_field_save($entity, $items);
}

/**
 * Implements hook_field_update().
 */
function voipnumberfield_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  _voipnumberfield_field_save($entity, $items);
}

/**
 * Implements hook_field_presave().
 */
function _voipnumberfield_field_save($entity, &$items) {
  foreach ($items as $delta => $item) {
    if (empty($item['vnid']) && empty($item['real_vnid'])) {
      //This is empty field don't do anything
      continue;
    }
    //Save number as VoIPNumber object
    if (!empty($item['real_vnid'])) {
      //Load existing VoipNumber
      $voipnumber = VoipNumber::load($item['real_vnid']);
    }
    else {
      //Create new VoipNumber
      $voipnumber = new VoipNumber();
    }

    //at this point vnid contains user entered number
    $number = !empty($item['vnid']) ? $item['vnid'] : '';

    if ($item['advanced']['type'] == VOIPNUMBER_SIP) {
      //In case of SIP make sure it starts with sip://
      $number = str_ireplace('sip://', '', $number);
      $number = 'sip://' . $number;
    }

    $number = VoipCall::NormalizeNumber($number);

    $voipnumber->setNumber($number);
    //set type based on type field
    $voipnumber->setType($item['advanced']['type']);

    //@todo: set uid? set nid?
    $voipnumber->setNid($entity->nid);

    //Set country name if set
    if ($item['advanced']['country']) {
      $voipnumber->setCountryName($item['advanced']['country']);
    }

    //Set default number
    if ($item['advanced']['default']) {
      $voipnumber->setDefault(TRUE);
    }

    $voipnumber->setActive(TRUE);
    $voipnumber->save();
    $vnid = $voipnumber->getVnid();
    $items[$delta]['vnid'] = $vnid;
  }
}

/**
 * Implements hook_field_delete().
 */
function voipnumberfield_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (!empty($item['real_vnid'])) {
      $voipnumber = VoipNumber::load($item['real_vnid']);
      if ($voipnumber) {
        $voipnumber->delete();
      }
    }
  }
}

/**
 * Implementation of hook_field_is_empty().
 */
function voipnumberfield_field_is_empty($item, $field) {
  if ($field['settings']['voipnumberfield_choice'] == 3) {
    //If default country is set for this field then consider value empty if
    //its equal to country code
    if ($item['vnid'] == $field['settings']['voipnumberfield_default']) {
      return TRUE;
    }
  }

  if (empty($item['vnid'])) {
    if ($item['real_vnid']) {
      $voipnumber = VoipNumber::load($item['real_vnid']);
      if ($voipnumber) {
        $voipnumber->delete();
      }
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_theme().
 */
function voipnumberfield_theme() {
  return array(
    'voipnumberfield_widget' => array(
      'variables' => array('element' => NULL),
    ),
    'voipphonenumber_widget' => array(
      'variables' => array('element' => NULL),
    ),
    'voipnumberfield_formatter_default' => array(
      'variables' => array('element' => NULL),
    ),
    'voipnumberfield_formatter_numbercountry' => array(
      'variables' => array('element' => NULL),
    ),
    'voipnumberfield_formatter_number_local' => array(
      'variables' => array('element' => NULL),
    ),
    'voipnumberfield_formatter_number_data' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function voipnumberfield_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Full number (E.164 format) (+XXXYYNNNNNNNN)'),
      'field types' => array('voipnumberfield'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'numbercountry' => array(
      'label' => t('Full number (E.164 format) with country name'),
      'field types' => array('voipnumberfield'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'number_local' => array(
      'label' => t('Local number (0YYNNNNNN)'),
      'field types' => array('voipnumberfield'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'number_data' => array(
      'label' => t('Full number (E.164 format) with phone type'),
      'field types' => array('voipnumberfield'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function voipnumberfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('voipnumberfield_formatter_' . $display['type'], array(
          'element' => $item,
          'field' => $instance
        )),
    );
  }
  return $elements;
}

/**
 * FAPI theme for an individual text elements.
 *
 * The textfield or textarea is already rendered by the
 * textfield or textarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
/*function theme_voipphonenumber_widget($variables) {
  return theme('voipnumberfield_widget', $variables);
}

function theme_voipnumberfield_widget($variables) {
  $element = $variables['element'];
  drupal_add_js(drupal_get_path('module', 'voipnumberfield') . '/voipnumberfield.js');
  $output = '';
  $output .= theme('textfield', $element['vnid']);
  $output .= theme('checkbox', $element['default']);
  $output .= theme('select', $element['type']);
  $output .= theme('select', $element['country']);
  return $output;
}*/

/**
 * Theme function for 'default' field formatter.
 * Returns the phone number in E.164 format or sip address
 */
function theme_voipnumberfield_formatter_default($variables) {
  $element = $variables['element'];
  //$voipnumber = VoipNumber::load($element['real_vnid']);
  //return isset($voipnumber) ? $voipnumber->getNumber() : '';
  return $element['vnid'];
}

/**
 * Theme function for 'number with country name' field formatter.
 */
function theme_voipnumberfield_formatter_numbercountry($variables) {
  $element = $variables['element'];
  $voipnumber = VoipNumber::load($element['real_vnid']);
  if (!isset($voipnumber)) {
    return '';
  }
  switch ($voipnumber->getType()) {
    case VOIPNUMBER_SIP:
      //In case of SIP return number only
      return $voipnumber->getNumber();
      break;
    default:
      //Otherwise return Country name  Phone number
      $number = $voipnumber->getNumber();
      //see if this number has stored country
      $voipnumber_country = $voipnumber->getCountryName();
      $country = !empty($voipnumber_country) ? $voipnumber_country : VoipNumber::getCountryFromNumber($number);
      return $country . " " . $number;
      break;
  }
}

/**
 * Theme function for 'number_local' field formatter.
 */
function theme_voipnumberfield_formatter_number_local($variables) {
  $element = $variables['element'];
  $voipnumber = VoipNumber::load($element['real_vnid']);
  if (!isset($voipnumber)) {
    return '';
  }
  switch ($voipnumber->getType()) {
    case VOIPNUMBER_SIP:
      //In case of SIP no additonal processing is needed
      return $voipnumber->getNumber();
      break;
    default:
      //Otherwise return local number
      $number = $voipnumber->getNumber();
      $country_code = VoipNumber::getCodeFromNumber($number);
      $local_number = str_replace('+', '', $number); //substract country code and + sign from number to get local number

      //Remove country code from begining of number
      $pattern = "/^$country_code/";
      $local_number = preg_replace($pattern, 0, $local_number); //replace with zero for local number
      return $local_number;
      break;
  }
}

/**
 * Theme function for 'number_data' field formatter.
 */
function theme_voipnumberfield_formatter_number_data($variables) {
  $element = $variables['element'];

  $voipnumber = VoipNumber::load($element['real_vnid']);
  if (!isset($voipnumber)) {
    return '';
  }
  switch ($voipnumber->getType()) {
    case VOIPNUMBER_PSTN:
      $type = t('PSTN number');
      break;
    case VOIPNUMBER_SIP:
      $type = t('SIP number');
      break;
    case VOIPNUMBER_SMS:
      $type = t('SMS number');
      break;
    case VOIPNUMBER_MOBILE:
      $type = t('Mobile number');
      break;
    case VOIPNUMBER_WORK:
      $type = t('Work number');
      break;
    case VOIPNUMBER_HOME:
      $type = t('Home number');
      break;
    case VOIPNUMBER_FAX:
      $type = t('Fax number');
      break;
  }
  $output = $voipnumber->getNumber() . ' (' . $type . ')';

  return $output;
}

/**
 * Implementation of hook_field_widget_info().
 * Define Phone number, SIP Number widgets (for add/edit forms).
 **/
function voipnumberfield_field_widget_info() {
  return array(
    'voipphonenumber_widget' => array(
      'label' => t('VoIP Number'),
      'field types' => array('voipnumberfield'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
//function voipnumberfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
function voipnumberfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $element = array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    //'#title' => $instance['widget']['label'],
    '#weight' => $instance['widget']['weight'],
    //'#description' => $instance['widget']['description'],
    '#required' => $instance['required'],
    '#field' => $field,
  );
  return $element;
}

/**
 * Implements hook_element_info().
 */
function voipnumberfield_element_info() {
  $elements = array();
  $elements['voipphonenumber_widget'] = array(
    '#input' => TRUE,
    '#process' => array('voipphonenumber_widget_process'),
    //'#theme' => 'link_field',
    //'#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
//function voipphonenumber_widget_process($element, $edit, $form_state, $form) {
function voipphonenumber_widget_process($element, $form_state, $complete_form) {
  drupal_add_js(drupal_get_path('module', 'voipnumberfield') . '/voipnumberfield.js');
  $field_settings = $element["#field"]["settings"];
  $voipnumberfield_choice = !empty($field_settings['voipnumberfield_choice'])
    ? $field_settings['voipnumberfield_choice']
    : variable_get('voipnumberfield_choice', 1);

  if (isset($element["#value"]["real_vnid"])) {
    $vnid = $element["#value"]["real_vnid"];
  }
  else {
    $vnid = $element["#value"];
  }

  $voipnumber = VoipNumber::load($vnid);
  $default_number = isset($voipnumber) ? $voipnumber->getNumber() : NULL;

  $field_name = $element["#field"]["field_name"];

  if(isset($complete_form[$field_name]['und']['#title'])) {
    $title = $complete_form[$field_name]['und']['#title'];
  }
  else {
    $title = t('Phone number');
  }


  if ($voipnumberfield_choice == 3) {
    //Allow only default country
    $default_code = $field_settings['voipnumberfield_default'];
    if (!$default_number) {
      //if voipnumber field is empty then prepopulate with default country code
      $default_number = $default_code;
    }
  }
  //Textfield which shows voipnumber
  $element['vnid'] = array(
    '#type' => 'textfield',
    '#title' => $title,
    '#default_value' => $default_number,
    '#size' => $field_settings["voipnumberfield_max_length"],
    '#description' => isset($complete_form[$field_name]['und']['#description']) ? $complete_form[$field_name]['und']['#description'] : '',
    '#required' => $element['#required'],
    //'#attributes' => array('class' => 'phone-field-textfield'),
  );

  //Hidden field which stores real vnid
  $element['real_vnid'] = array(
    '#type' => 'hidden',
    '#value' => $vnid,
  );

  /*VoIP Number type*/
  $number_types = array(
    VOIPNUMBER_PSTN => t('Landline'),
    VOIPNUMBER_MOBILE => t('Mobile'),
    VOIPNUMBER_SMS => t('SMS only'),
    VOIPNUMBER_WORK => t('Work'),
    VOIPNUMBER_HOME => t('Home'),
    VOIPNUMBER_FAX => t('Fax'),
  );

  if ($field_settings['voipnumberfield_allow_sip']) {
    //Allow SIP addresses only if set by admin
    $number_types[VOIPNUMBER_SIP] = t('SIP');
  }

  if($voipnumberfield_choice == 2) {
    //In case of country selection we open advanced settings fieldset
    $collapsed = FALSE;
  }
  else {
    $collapsed = TRUE;
  }
  $element['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => $collapsed,
  );

  $element['advanced']['default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Default number'),
    '#default_value' => isset($voipnumber) ? $voipnumber->isDefault() : FALSE,
    '#attributes' => array('class' => array('voipnumber-default')),
  );

  $element['advanced']['type'] = array(
    '#type' => 'select',
    '#title' => t('Number type'),
    '#options' => $number_types,
    '#default_value' => isset($voipnumber) ? $voipnumber->getType() : VOIPNUMBER_PSTN,
  );



  if($voipnumberfield_choice == 2) {
    $countries = $field_settings['voipnumberfield_allowed_countries'];
  }
  else {
    $countries = voipnumberfield_dialing_codes();
    array_unshift($countries, '<none>');
  }
  $element['advanced']['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#description' => t('Country this number belongs to. Useful only if you are
     using number with country code which belongs to multiple countries'),
    '#options' => $countries,
    '#default_value' => (isset($voipnumber) && $voipnumber->getCountryName()) ? $voipnumber->getCountryName() : '<none>',
  );

  return $element;
}

function _voipnumberfield_valid_int_phone_number($phonenumber, &$error, $length = '') {
  if (empty($length)) {
    $length = variable_get('voipnumberfield_max_length', 15);
  }
  $phonenumber = trim($phonenumber);
  if ($phonenumber === '') {
    return FALSE;
  }

  $base_phonenumber = str_replace('+', '', $phonenumber);
  if (strlen($base_phonenumber) > $length) {
    $error = t('invalid phone number. Phone number is too long; phone numbers are limited to %length digits.', array('%length' => $length));
    return FALSE;
  }
  // Check if digits are used in the base_phonenumber
  if (!ctype_digit($base_phonenumber)) {
    $error = t('invalid phone number. Phone number contains invalid characters; only allowed characters are numbers and punctuation.');
    return FALSE;
  }

  return TRUE;
}

/*API Functions*/
function voipnumberfield_dialing_codes() {
  $query = db_select('voipnumber_dialing_codes', 'vd')
    ->fields('vd')
    ->orderBy('country')
    ->execute();

  //Return countries with country as key and "country (code)" as value
  while ($country = $query->fetchAssoc()) {
    $countries[$country['country']] = $country['country'] . " (" . $country['code'] . ")";
  }
  return $countries;
}
