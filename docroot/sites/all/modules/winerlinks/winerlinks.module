<?php

/**
 * @file
 * The main module file.
 */

/**
 * Start position for permalink
 */
define('WINERLINKS_POSITION_START', 0);

/**
 * End position for permalink
 */
define('WINERLINKS_POSITION_END', 1);

/**
 * Default permalink symbol value
 */
define('WINERLINKS_SYMBOL', '&para;');

/*
 * Implements hook_filter_info.
 */
function winerlinks_filter_info() {
  $filters['winerlinks'] = array(
    'title' => t('WinerLinks'),
    'description' => t('Creates permalinks for on paragraphs.'),
    'process callback' => '_winerlinks_filter_winerlinks',
    'settings callback' => '_winerlinks_filter_winerlinks_settings',
    'default settings' => array(
      'symbol' => WINERLINKS_SYMBOL,
      'position' => WINERLINKS_POSITION_START,
    ),
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Filter settings callback
 */
function _winerlinks_filter_winerlinks_settings($form, &$form_state, $filter, $format, $defaults) {

  $filter->settings += $defaults;

  $settings['symbol'] = array(
    '#type' => 'textfield',
    '#title' => t('Symbol'),
    '#default_value' => $filter->settings['symbol'],
    '#description' => t('The text you would like to use for the permalink.'),
  );
  $settings['position'] = array(
    '#type' => 'select',
    '#title' => t('Link position'),
    '#options' => array(
      WINERLINKS_POSITION_START => 'Beginning of paragraph',
      WINERLINKS_POSITION_END => 'End of paragraph',
    ),
    '#default_value' => $filter->settings['position'],
  );
  return $settings;
}


/**
 * Filter callback
 */
function _winerlinks_filter_winerlinks( $content, $filter, $format ) {

  // Limit to node content pages.
  if( !$node = menu_get_object('node') ) return $content;

  // Lets check for paragraph tags
  $matches = preg_match_all("/\<p\>(.*?)\<\/p\>/is", $content, $paragraphs);

  // If no paragraph tags are found, return original content
  if ( $matches == 0 ) return $content;

  $output = array();

  $options = array(
    'attributes' => array('class' => array('winerlink')),
    'html' => TRUE,
  );

  foreach ( $paragraphs[1] as $index => $paragraph ) {

    $id = 'p' . substr(md5($node->nid . $index . $paragraph), 0, 6);

    $link = l(
      $filter->settings['symbol'],
      'node/' . $node->nid,
      $options + array('fragment' => $id)
    );

    switch($filter->settings['position']) {
      default:
      case WINERLINKS_POSITION_START:
        $content = $link . $paragraph;
        break;
      case WINERLINKS_POSITION_END:
        $content = $paragraph . $link;
        break;
    }

    $output[] = '<p id="' . $id . '">' . $content . '</p>';
  }

  return implode('', $output);

}
