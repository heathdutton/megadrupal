<?php

/**
 * Implements hook_menu()
 */
function dashboard_notifications_menu() {
  $items = array();

  $items['js/dashboard-notification/get-message'] = array(
      'page callback' => 'dashboard_notifications_display_alert',
      'delivery callback' => 'ajax_deliver',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['js/dashboard-notification/close-message'] = array(
      'page callback' => 'dashboard_notifications_close_message',
      'delivery callback' => 'ajax_deliver',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info()
 */
function dashboard_notifications_block_info() {
  $blocks['dashboard_notifications'] = array(
      'info'   => t('Dashboard Notifications'),
      'cache'  => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function dashboard_notifications_block_view($delta) {
  if ($delta == 'dashboard_notifications') {
    drupal_add_js(drupal_get_path('module', 'dashboard_notifications') . '/js/dashboard-notification.js');
    drupal_add_css(drupal_get_path('module', 'dashboard_notifications') . '/css/dashboard-notification.css');
    drupal_add_js(array('dashboard_notification' => array(
    'url_prefix' => variable_get('clean_url', 0) != 0 ? '' : '?q=',
    )), 'setting');
    $block['subject'] = '<none>';
    $block['content'] = ' ';
    return $block;
  }
}

/**
 * Gather alerts for the current user and return them. Exclude ones already closed.
 *
 * @return string
 *   Returns themed output if there is a message to display.
 */
function dashboard_notifications_display_alert() {
  global $user;

  $output = '';
  $result = db_query("SELECT * FROM (SELECT * FROM {dashboard_notifications} dn WHERE dn.status = :status AND dn.uid = :uid order by changed desc LIMIT 3) AS tmp_table group by message_key", array(':status' => 1, ':uid' => $user->uid));

  foreach ($result as $record) {
    $output .= theme('dashboard_notifications', array('notification' => $record));
  }

  if(!empty($output)){
    $output = '<h2 class="block--title block-title">'.t("Alerts").'</h2>'.$output;
  }

  return $output;
}

/**
 * Respond to a user clicking to close an alert.
 */
function dashboard_notifications_close_message() {
  $aid = $_GET['message'];

  $fields = array('status' => 0);
  db_update('dashboard_notifications')->fields($fields)->condition('aid', $aid, '=')->execute();
}

/**
 * Implements hook_theme()
 */
function dashboard_notifications_theme() {
  return array(
      'dashboard_notifications' => array(
          'template' => 'dashboard-notification',
          'variables' => array('notification' => NULL),
      ),
  );
}

/**
 * Implements hook_preprocess_HOOK()
 */
function dashboard_notifications_preprocess_dashboard_notifications(&$vars) {
  $notification = $vars['notification'];
  $vars['aid'] = $notification->aid;
  $vars['message'] = t($notification->message, unserialize($notification->variables));
}

function dashboard_notifications_api_add_notification($uid, $type, $message_key, $message, $variables=array(), $creator_uid="") {
  if(empty($creator_uid)){
    global $user;
    $creator_uid = $user->uid;
  }
  $fields = array(
      'uid' => $uid,
      'creator_uid' => $creator_uid,
      'type' => $type,
      'message_key' => $message_key,
      'message' => $message,
      'variables' => serialize($variables),
      'status' => 1,
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
  );
  $result = db_insert('dashboard_notifications')->fields($fields)->execute();
}

function dashboard_notifications_api_modify_notification($uid, $type, $message_key, $message, $variables=array(), $creator_uid="") {
  if(empty($creator_uid)){
    global $user;
    $creator_uid = $user->uid;
  }
  if ((bool) db_select('dashboard_notifications')->fields('dashboard_notifications', array('aid'))->condition('uid', $uid)->condition('creator_uid', $creator_uid)->condition('message_key', $message_key)->range(0, 1)->execute()->fetchField()) {
    $fields = array(
      'type' => $type,
      'message' => $message,
      'variables' => serialize($variables),
      'status' => 1,
      'changed' => REQUEST_TIME,
    );
    db_update('dashboard_notifications')->fields($fields)->condition('uid', $uid)->condition('creator_uid', $creator_uid)->condition('message_key', $message_key)->execute();
  }else{
    dashboard_notifications_api_add_notification($uid, $type, $message_key, $message, $variables, $creator_uid);
  }
}

function dashboard_notifications_api_hide_notification($uid, $creator_uid, $message_key = "") {
  $fields = array(
      'status' => 0,
      'changed' => REQUEST_TIME,
  );
  if(!empty($message_key)){
    db_update('dashboard_notifications')->fields($fields)->condition('uid', $uid)->condition('creator_uid', $creator_uid)->condition('message_key', $message_key)->execute();
  }else{
    db_update('dashboard_notifications')->fields($fields)->condition('uid', $uid)->condition('creator_uid', $creator_uid)->execute();
  }
}
