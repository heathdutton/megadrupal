<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Implements hook_field_info_alter().
 */
function field_suppress_field_info_alter(&$info) {
  // Add a setting to all field types.
  foreach ($info as $field_type => $field_type_info) {
    $info[$field_type]['settings'] += array(
      'field_suppress' => 'never',
      'field_suppress_blank' => FALSE,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter(): field_ui_field_settings_form.
 */
function field_suppress_form_field_ui_field_settings_form_alter(&$form, &$form_state) {
  $form['#field'] = field_info_field($form['field']['field_name']['#value']);
  field_suppress_form_field_ui_field_edit_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter(): field_ui_field_edit_form.
 */
function field_suppress_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $field = $form['#field'];
  $settings = $field['settings'];

  // Handle fields without existing settings.
  if (isset($form['field']['settings']['#markup'])) {
    $form['field']['settings'] = array();
  }

  $form['field']['settings']['field_suppress'] = array(
    '#type' => 'select',
    '#title' => t('Suppress field'),
    '#options' => field_suppress_states(),
    '#default_value' => $settings['field_suppress'],
  );
  $form['field']['settings']['field_suppress_blank'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add blank entry for suppressed field'),
    '#description' => t('Add a "blank" entry for the suppressed field. This can be handy if the field display is to be replaced such as with field_group_views.'),
    '#default_value' => $settings['field_suppress_blank'],
  );
}

/**
 * Get field suppression state values.
 *
 * @return
 *   Associative array of suppression state values.
 */
function field_suppress_states() {
  return array(
    'never' => t('Never'),
    'always' => t('Always'),
    'load' => t('During load'),
  );
}

/**
 * Implements hook_field_storage_pre_load().
 */
function field_suppress_field_storage_pre_load($entity_type, $entities, $age, &$skip_fields, $options) {
  if ($blanks = field_suppress_skip_fields($skip_fields, 'load')) {
    foreach ($entities as $entity) {
      foreach ($blanks as $key => $value) {
        $entity->{$key}[LANGUAGE_NONE][] = $value;
      }
    }
  }
}

/**
 * Implements hook_field_storage_pre_insert().
 */
function field_suppress_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  field_suppress_skip_fields($skip_fields, 'insert');
}

/**
 * Implements hook_field_storage_pre_update().
 */
function field_suppress_field_storage_pre_update($entity_type, $entity, &$skip_fields) {
  field_suppress_skip_fields($skip_fields, 'update');
}

/**
 * Implements hook_entity_presave().
 */
function field_suppress_entity_presave($entity, $type) {
  // Remove added blanks during entity save.
  $skip_fields = array();
  if ($blanks = field_suppress_skip_fields($skip_fields, 'load')) {
    foreach ($blanks as $key => $value) {
      $entity->{$key}[LANGUAGE_NONE] = array();
    }
  }
}

/**
 * Fill in skip_fields based on field settings.
 *
 * @param $skip_fields
 *   Reference to array of fields to skip.
 * @return
 *   Associative array of blank if $hook is load, otherwise NULL.
 */
function field_suppress_skip_fields(&$skip_fields, $hook) {
  if (field_suppress_state()) {
    $fields = field_info_fields();
    $blanks = array();
    foreach ($fields as $field) {
      if ($field['settings']['field_suppress'] == 'always' || $field['settings']['field_suppress'] == $hook) {
        $skip_fields[$field['id']] = $field['id'];
        if ($hook == 'load' && $field['settings']['field_suppress_blank']) {
          // @TODO Use cleaner method for providing a "blank" entry.
          $blanks[$field['field_name']]['value'] = '0';
        }
      }
    }
    drupal_alter('field_suppress', $skip_fields, $hook, $fields);
    return $blanks;
  }
}

/**
 * Implements hook_form_alter().
 */
function field_suppress_form_alter(&$form, &$form_state, $form_id) {
  if (field_suppress_state()) {
    $fields = field_info_fields();
    foreach (element_children($form) as $key) {
      // Hide the form element related to a suppressed field that a "blank" has
      // been added for since the value is not real.
      if (isset($fields[$key]) && $fields[$key]['settings']['field_suppress'] != 'never') {
        $form[$key]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Determine the field suppression state.
 *
 * @param $state
 *   (Optional) Suppression state, either TRUE or FALSE.
 * @return
 *   Current suppression state, TRUE if suppression is active otherwise FALSE.
 */
function field_suppress_state($state = NULL) {
  $_state = &drupal_static(__FUNCTION__, TRUE);
  if ($state !== NULL) {
    $_state = $state;
  }
  return $_state;
}

/**
 * Wrapper for entity_load() that temporarily disables field suppression.
 *
 * @see entity_load()
 */
function field_suppress_entity_load_unsuppressed($entity_type, $ids = FALSE, $conditions = array(), $reset = FALSE) {
  field_suppress_state(FALSE);
  // @TODO Remove once resetCache() on the entity control does this.
  foreach ($ids as $id) {
    cache_clear_all('field:' . $entity_type . ':' . $id, 'cache_field');
  }
  entity_get_controller($entity_type)->resetCache($ids);

  $return = entity_load($entity_type, $ids, $conditions, $reset);
  field_suppress_state(TRUE);
  return $return;
}
