<?php
/**
 * @file
 * Mica migration module, Export Studies/networks/datasets.
 */

/*
 * In the export process,  there are a batch process that call operations on
 * each of these included files
 **/
module_load_include('inc', 'mica_migration', 'includes/mica_migration_contact');
module_load_include('inc', 'mica_migration', 'includes/mica_migration_study');
module_load_include('inc', 'mica_migration', 'includes/mica_migration_population');
module_load_include('inc', 'mica_migration', 'includes/mica_migration_dce');
module_load_include('inc', 'mica_migration', 'includes/mica_migration_dataset');
module_load_include('inc', 'mica_migration', 'includes/mica_migration_network');

/**
 * Implements hook_menu().
 */
function mica_migration_menu() {
  $items = array();

  $items['node/%node/export-dto'] = array(
    'title' => 'Export node to Mica-server',
    'access arguments' => array('migrate studies to mica'),
    'page callback' => 'mica_migration_operations',
    'page arguments' => array(1),
  );

  $items['export-all-dto'] = array(
    'title' => 'Export all studies node to Mica-server',
    'access arguments' => array('migrate studies to mica'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mica_migration_select_form_studies'),
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mica_migration_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();
  if ($root_path === 'node/%') {
    $node = $router_item['map']['1'];
    if ($node->type === 'study') {
      $links['export-study-dto'] = array(
        '#theme' => 'menu_local_action',
        '#weight' => 50,
        '#link' => array(
          'title' => t('Export to mica-server'),
          'href' => 'node/' . $node->nid . '/export-dto',
        ),
      );

    }
  }
  if ($root_path === 'studies' && user_access('export study content')) {
    $links['export-all-dto'] = array(
      '#theme' => 'menu_local_action',
      '#weight' => 50,
      '#link' => array(
        'title' => t('Export multiple studies'),
        'href' => 'export-all-dto',
      ),
    );
  }

  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}

/**
 * Implements hook_permission().
 */
function mica_migration_permission() {
  return array(
    'migrate studies to mica' => array(
      'title' => t('Export of studies/Networks/Datasets'),
      'description' => t('Perform migration of studies to export into Mica2 Server.'),
    ),
  );
}

/**
 * The form containing multi select widget to select studies to export.
 *
 * @param array $form
 *   The form array.
 *
 * @return mixed
 *   The drupal select form.
 */
function mica_migration_select_form_studies(array $form) {
  $studies = node_load_multiple(NULL, array('type' => 'study'));
  $opt = array();
  foreach ($studies as $study) {
    $opt[$study->nid] = $study->title;
  }

  $form['studies'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $opt,
  );

  $form['pub'] = array(
    '#type' => 'checkbox',
    '#options' => t('Published'),
    '#title' => t('Published?'),
    '#default_value' => 1,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#submit'][] = 'mica_migration_submit_export';
  return $form;
}

/**
 * The submit callback.
 *
 * @param array $form
 *   The form arguments.
 */
function mica_migration_submit_export(array $form) {
  $operations = array();
  if (!empty($form['studies']['#value'])) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'study')
      ->propertyCondition('status', $form['pub']['#value'])
      // Published nodes.
      ->propertyCondition('nid', array_keys($form['studies']['#value']), 'IN');
    $result = $query->execute();
    if (!empty($result)) {
      foreach ($result['node'] as $id_study => $study_result_wrap) {
        $operations[] = array('mica_migration_multiple', array($id_study));
      }

      // Prepare batch steps.
      batch_set(array(
        'operations' => $operations,
        'finished' => 'mica_migration_dto_batch_finished',
      ));
      $redirect = 'export-all-dto';
      batch_process($redirect);
    }
    else {
      drupal_set_message(t('There are no published Studies to export, please try uncheck  the "Published?" option'));
    }
  }
  else {
    drupal_set_message(t('Please select at least one study from the Select lists'));
  }
  drupal_goto('export-all-dto');
}

/**
 * Convert studies/Network/dataset/ nodes to a Dto Object.
 *
 * @param int $study_node
 *   Node Id.
 */
function mica_migration_multiple($study_node) {
  $context = array();
  _mica_migration_study_dto($study_node, $context);
  _mica_migration_dataset_dto($study_node, $context);
  _mica_migration_network_dto($study_node, $context);
  _mica_migration_save_json_file($context);
}

/**
 * Process bach Convert studies/Network/dataset/ nodes to a Dto Object.
 *
 * @param object $node
 *   The Study node.
 */
function mica_migration_operations($node) {
  $operations = array();
  if ($node->type == 'study') {

    // Get DTO.
    $operations[] = array('_mica_migration_study_dto', array($node));

    $operations[] = array('_mica_migration_dataset_dto', array($node));

    $operations[] = array('_mica_migration_network_dto', array($node));

    $operations[] = array('_mica_migration_save_json_file', array());
  }

  // Prepare batch steps.
  batch_set(array(
    'operations' => $operations,
    'finished' => 'mica_migration_dto_batch_finished',
  ));
  $redirect = 'node/' . $node->nid;
  batch_process($redirect);
}

/**
 * Create tmp folder.
 *
 * @param string $folder_name
 *   The folder name to create.
 *
 * @return string
 *   The path of created folder.
 */
function _mica_migration_create_tmp_folder($folder_name) {
  $tmp_folder_name = file_directory_temp() . '/' . $folder_name;
  drupal_mkdir($tmp_folder_name);
  return $tmp_folder_name;
}

/**
 * Create attachments folder.
 *
 * @param string $tmp_folder_root
 *   The path to root folder.
 *
 * @return string
 *   The path to tmp folder.
 */
function _mica_migration_temp_attachment_folder($tmp_folder_root) {
  $attachment_temp_folder = $tmp_folder_root . '/attachments/';
  if (!is_dir($attachment_temp_folder)) {
    drupal_mkdir($tmp_folder_root . '/attachments/');
  }
  return $attachment_temp_folder;
}

/**
 * Save json Dto's.
 *
 * @param array $context
 *   An array collecting values var during the batch operation.
 */
function _mica_migration_save_json_file(array &$context) {
  global $user;
  $tmp_folder_root = _mica_migration_create_tmp_folder(str_replace(' ', '_', $context['results']['study']['title_study']));
  // Save study json.
  $tmp_file_study_name = $tmp_folder_root . '/' . 'study-' . $context['results']['study']['uuid'];
  file_unmanaged_save_data($context['results']['study']['study_json'], $tmp_file_study_name . '.json', FILE_EXISTS_RENAME);

  if (!empty($context['results']['study']['attachments'])) {
    foreach ($context['results']['study']['attachments'] as $attachment) {
      $attachment_temp_folder = _mica_migration_temp_attachment_folder($tmp_folder_root);
      file_unmanaged_copy($attachment['uri'], $attachment_temp_folder . $attachment['uuid']);
    }
  }

  if (!empty($context['results']['dce']['attachments'])) {
    foreach ($context['results']['dce']['attachments'] as $dce) {
      foreach ($dce as $attachment) {
        $attachment_temp_folder = _mica_migration_temp_attachment_folder($tmp_folder_root);
        file_unmanaged_copy($attachment['uri'], $attachment_temp_folder . $attachment['uuid']);
      }
    }
  }

  foreach ($context['results']['datasets'] as $dataset) {
    $tmp_file_root_dataset_name = $tmp_folder_root . '/' . 'dataset-' . $dataset['uuid'];
    file_unmanaged_save_data($dataset['dataset_json'], $tmp_file_root_dataset_name . '.json', FILE_EXISTS_RENAME);
  }

  if (!empty($context['results']['networks'])) {
    foreach ($context['results']['networks'] as $key_network => $network) {
      if (is_int($key_network)) {
        $tmp_file_root_network_name = $tmp_folder_root . '/' . 'network-' . $network['uuid'];
        file_unmanaged_save_data($network['network_json'], $tmp_file_root_network_name . '.json', FILE_EXISTS_RENAME);
      }
    }
  }
  if (!empty($context['results']['networks']['attachments'])) {
    foreach ($context['results']['networks']['attachments'] as $attachment) {
      $attachment_temp_folder = _mica_migration_temp_attachment_folder($tmp_folder_root);
      file_unmanaged_copy($attachment['uri'], $attachment_temp_folder . $attachment['uuid']);
    }
  }

  $zip_file_to_download = mica_migration_create_zip_file($tmp_folder_root, $context['results']['study']['title_study']);
  // Delete temp files.
  if (!empty($tmp_folder_root)) {
    mica_migration_recurse_rm_dir($tmp_folder_root);
  }

  drupal_set_message(
    t("<a href='@file_url'>Download exported study @title_study yo zip file.//
       </a> This file is also available in your <a href='@file_manager_url'>//
       File manager</a>",
      array(
        '@title_study' => $context['results']['study']['title_study'],
        '@file_url' => file_create_url($zip_file_to_download),
        '@file_manager_url' => url('user/' . $user->uid . '/imce'),
      )),
    'status');
}

/**
 * Create folder/sub-folders.
 *
 * @param string $dir
 *   The folder name.
 *
 * @return bool
 *   Deleted or not.
 */
function mica_migration_recurse_rm_dir($dir) {
  $files = array_diff(scandir($dir), array('.', '..'));
  foreach ($files as $file) {
    (is_dir("$dir/$file")) ? mica_migration_recurse_rm_dir("$dir/$file") : unlink("$dir/$file");
  }
  return rmdir($dir);
}

/**
 * Package the tmp folders in a Zip file.
 *
 * @param string $folder_to_zip
 *   The folder to zip.
 * @param string $name_zip_file
 *   The name of the file zip to generate.
 *
 * @return string
 *   Path to created zip fil.
 */
function mica_migration_create_zip_file($folder_to_zip, $name_zip_file) {
  global $user;

  // Archive the files.
  $name_zip_file = preg_replace('/[^0-9^a-z^_^.]/', '', strtolower(str_replace(' ', '_', $name_zip_file)));
  // Create public drupal folder if not exist.
  $public_folder_drupal = drupal_realpath('public:///' . preg_replace('/[^0-9^a-z^_^.]/', '', strtolower(str_replace(' ', '_', $user->name))) . '/export-mica-server/');

  if (!is_dir($public_folder_drupal)) {
    drupal_mkdir($public_folder_drupal);
  }
  $zip_file_path = $public_folder_drupal . '/' . $name_zip_file . '-' . date('Y-m-d_H_m_s', time()) . '.zip';

  // Retrieve files in directory to archive.
  $scanned_directory = array_diff(scandir($folder_to_zip), array('..', '.'));
  fopen($zip_file_path, 'w');
  $zip = new ZipArchive();
  $zip->open($zip_file_path);
  foreach ($scanned_directory as $file) {
    if (is_dir($folder_to_zip . '/' . $file)) {
      $scanned_subdirectory = array_diff(scandir($folder_to_zip . '/' . $file), array(
        '..',
        '.',
      ));
      $zip->addEmptyDir($file);
      foreach ($scanned_subdirectory as $subfile) {
        $zip->addFile($folder_to_zip . '/' . $file . '/' . $subfile, $name_zip_file . '/' . $file . '/' . $subfile);
      }
    }
    else {
      $zip->addFile($folder_to_zip . '/' . $file, $name_zip_file . '/' . $file);
    }
  }
  fclose($zip_file_path);

  return 'public:///' . $user->name . '/export-mica-server/' . $name_zip_file . '-' . date('Y-m-d_H_m_s', time()) . '.zip';
}

/**
 * Batch fish callback.
 */
function mica_migration_dto_batch_finished() {

}
