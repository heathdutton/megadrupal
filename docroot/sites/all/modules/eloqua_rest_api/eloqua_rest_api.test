<?php

/**
 * @file
 * SimpleTest tests for the Eloqua REST API module.
 */


/**
 * Unit tests for Eloqua REST API.
 */
class EloquaRestApiUnitTest extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Eloqua REST API unit tests',
      'description' => 'Unit tests for the Eloqua REST API client getter.',
      'group' => 'Eloqua',
    );
  }

  public function setUp() {
    parent::setUp();

    // Attempt to load all necessary classes manually. This syntax is necessary
    // because module_load_include() does not work without a DB. Order matters
    // because require_once will call the autoloader, which touches the DB.
    require_once(__DIR__ . '/eloqua_rest_api.module');
  }

  protected function includeMockClient() {
    require_once(__DIR__ . '/test/MockClient.php');
  }

  protected function includeMockAlter() {
    require_once(__DIR__ . '/test/eloqua_rest_api.alter.inc');
  }

  /**
   * Ensure that a Client can be injected via drupal_static().
   */
  function testShouldInjectViaDrupalStatic() {
    $api_version = '2.0';
    $mock_static = &drupal_static('eloqua_rest_api_client', array());
    $mock_static[$api_version] = array(
      'expected' => 'response',
    );

    // Ensure the injected client is returned.
    $client = eloqua_rest_api_client($api_version);
    $this->assertEqual($client, $mock_static[$api_version], 'Client is injectable via drupal_static().');
  }

  /**
   * Ensure the client getter behaves as expected when not yet configured.
   */
  function testShouldReturnNullNoCredentials() {
    // Mock that the site name is empty.
    $GLOBALS['conf']['eloqua_rest_api_site_name'] = '';

    // If not yet configured, NULL should be returned, rather than a client.
    $client = eloqua_rest_api_client('2.0');
    $this->assertIdentical($client, NULL, 'NULL returned when no credentials are missing.');
  }

  /**
   * Ensure the client is instantiated and returned properly.
   */
  function testShouldInstantiateClient() {
    $this->includeMockClient();

    // Mock proper credentials.
    $GLOBALS['conf']['eloqua_rest_api_site_name'] = 'Example.Company';
    $GLOBALS['conf']['eloqua_rest_api_login_name'] = 'Foo';
    $GLOBALS['conf']['eloqua_rest_api_login_password'] = 'Bar123';

    // Ensure the client getter returns as expected.
    $client = eloqua_rest_api_client();
    $this->assertTrue($client instanceof \Eloqua\Client, 'Returned client is of expected type.');
  }

  /**
   * Ensure the correct API version is set on the client, as specified.
   */
  function testShouldSetClientOptionApiVersion() {
    $this->includeMockClient();

    // Mock proper credentials.
    $GLOBALS['conf']['eloqua_rest_api_site_name'] = 'Example.Company';
    $GLOBALS['conf']['eloqua_rest_api_login_name'] = 'Foo';
    $GLOBALS['conf']['eloqua_rest_api_login_password'] = 'Bar123';

    // Test default version.
    $client = eloqua_rest_api_client();
    $this->assertEqual($client->getOption('version'), '2.0', 'Client version properly set to default "2.0".');

    // Test a specific version, passed in via function argument.
    $client = eloqua_rest_api_client('1.0');
    $this->assertEqual($client->getOption('version'), '1.0', 'Client version properly set to specified "1.0".');
  }

  /**
   * Ensure the client authenticates with the expected credentials.
   */
  function testShouldSetAllCredentials() {
    $this->includeMockClient();

    // Mock proper credentials.
    $GLOBALS['conf']['eloqua_rest_api_site_name'] = 'Example.Company';
    $GLOBALS['conf']['eloqua_rest_api_login_name'] = 'Foo';
    $GLOBALS['conf']['eloqua_rest_api_login_password'] = 'Bar123';
    $GLOBALS['conf']['eloqua_rest_api_base_url'] = 'https://login3.secure.eloqua.com';

    // Test authentication as expected.
    $client = eloqua_rest_api_client();
    $auth = $client->getAuthentication();
    $this->assertEqual($auth['site'], $GLOBALS['conf']['eloqua_rest_api_site_name'], 'Authenticated with expected site.');
    $this->assertEqual($auth['login'], $GLOBALS['conf']['eloqua_rest_api_login_name'], 'Authenticated with expected login.');
    $this->assertEqual($auth['password'], $GLOBALS['conf']['eloqua_rest_api_login_password'], 'Authenticated with expected password.');
    $this->assertEqual($auth['base_url'], $GLOBALS['conf']['eloqua_rest_api_base_url'], 'Authenticated with expected base URL');
  }

  /**
   * Ensure the client authenticates with the default base URL.
   */
  function testShouldUseDefaultBaseURL() {
    $this->includeMockClient();

    $GLOBALS['conf']['eloqua_rest_api_site_name'] = 'Example.Company';
    $GLOBALS['conf']['eloqua_rest_api_login_name'] = 'Foo';
    $GLOBALS['conf']['eloqua_rest_api_login_password'] = 'Bar123';
    $GLOBALS['conf']['eloqua_rest_api_base_url'] = '';

    // Test authentication as expected.
    $client = eloqua_rest_api_client();
    $auth = $client->getAuthentication();
    $this->assertEqual($auth['base_url'], 'https://secure.eloqua.com', 'Empty string base URL authenticates with expected default base URL');
  }

  /**
   * Ensure the client is alterable.
   */
  function testShouldAllowClientAlteration() {
    $this->includeMockClient();
    $this->includeMockAlter();

    // Mock proper credentials.
    $GLOBALS['conf']['eloqua_rest_api_site_name'] = 'Example.Company';
    $GLOBALS['conf']['eloqua_rest_api_login_name'] = 'Foo';
    $GLOBALS['conf']['eloqua_rest_api_login_password'] = 'Bar123';

    // Test alterability of the client.
    $client = eloqua_rest_api_client();
    $this->assertTrue($client->getOption('altered'), 'Client can be altered via hook_eloqua_rest_api_client_alter().');
  }

}

/**
 * Behavioral tests for Eloqua REST API.
 */
class EloquaRestApiBehaviourTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Eloqua REST API behavioral tests',
      'description' => 'Behavioral tests for the Eloqua REST API module.',
      'group' => 'Eloqua',
    );
  }

  public function setUp() {
    parent::setUp('eloqua_rest_api');
  }

  /**
   * Ensure only those with permissions have access to the configuration page.
   */
  public function testShouldFollowPermissions() {
    // Create an admin user without proper credentials.
    $account = $this->drupalCreateUser(array('access administration pages'));
    $this->drupalLogin($account);

    // Attempt to visit the configuration page.
    $this->drupalGet('admin/config/services/eloqua');
    $this->assertNoFieldByName('eloqua_rest_api_site_name', NULL, 'Did not find the configuration form.');
    $this->assertEqual($this->drupalGetHeader(':status'), 'HTTP/1.1 403 Forbidden', 'Proper permissions enforced.');

    // Log the user out.
    $this->drupalLogout();

    // Create an admin user WITH proper credentials.
    $account = $this->drupalCreateUser(array(
      'access administration pages',
      'administer eloqua rest api',
    ));
    $this->drupalLogin($account);

    // Attempt to visit the configuration page.
    $this->drupalGet('admin/config/services/eloqua');
    $this->assertFieldByName('eloqua_rest_api_site_name', NULL, 'Found the configuration form.');
  }

  public function testShouldAllowConfigThroughUI() {
    // Create an admin user with proper credentials.
    $account = $this->drupalCreateUser(array(
      'access administration pages',
      'administer eloqua rest api',
    ));
    $this->drupalLogin($account);

    // Attempt to fill out the config form with no values.
    $this->drupalPost('admin/config/services/eloqua', array(), 'Save configuration');

    // Ensure all fields are required.
    $this->assertText('Site name field is required.', 'Site name field required');
    $this->assertText('Login name field is required.', 'Login field required.');
    $this->assertText('Login password field is required.', 'Password field required.');

    // Fill out the form with valid values.
    $this->drupalPost('admin/config/services/eloqua', array(
      'eloqua_rest_api_site_name' => 'Example.Company',
      'eloqua_rest_api_login_name' => 'Foo',
      'eloqua_rest_api_login_password' => 'Bar123',
    ), 'Save configuration');

    // Ensure our provided values were saved properly.
    $this->assertText('The configuration options have been saved.', 'Confirmation message shown.');
    $this->assertFieldByName('eloqua_rest_api_site_name', 'Example.Company', 'Saved the site name.');
    $this->assertFieldByName('eloqua_rest_api_login_name', 'Foo', 'Saved the login name.');
    $this->assertFieldByName('eloqua_rest_api_login_password', 'Bar123', 'Saved the password.');

    // Ensure provided values can be loaded via variable_get() as expected.
    $this->assertEqual(variable_get('eloqua_rest_api_site_name', ''), 'Example.Company', 'Site name loaded programmatically.');
    $this->assertEqual(variable_get('eloqua_rest_api_login_name', ''), 'Foo', 'Login name loaded programmatically.');
    $this->assertEqual(variable_get('eloqua_rest_api_login_password', ''), 'Bar123', 'Password loaded programmatically.');
  }

}
