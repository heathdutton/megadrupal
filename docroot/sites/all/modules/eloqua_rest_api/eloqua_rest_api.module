<?php

/**
 * @file
 * Module hooks and functions for the Eloqua REST API module.
 */

use Eloqua\Client;

/**
 * Implements hook_menu()
 */
function eloqua_rest_api_menu() {
  $items = array();

  $items['admin/config/services/eloqua'] = array(
    'title' => 'Eloqua REST API settings',
    'description' => 'Configure Account information for connecting to the Eloqua REST API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eloqua_rest_api_admin_settings'),
    'access arguments' => array('administer eloqua rest api'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'eloqua_rest_api.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function eloqua_rest_api_permission() {
  return array(
    'administer eloqua rest api' => array(
      'title' => t('Administer the Eloqua REST API module.'),
      'description' => t('Configure Eloqua authentication credentials, etc.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * A procedural wrapper to return an Elomentary client. You should really use
 * this instead of manually instantiating an Elomentary client yourself.
 *
 * @param string $api_version
 *   (Optional) The desired API version (1.0, 2.0, etc.) of the returned client.
 *   Defaults to 2.0.
 *
 * @return \Eloqua\Client|null
 *   If the module is successfully configured, a fully configured Elomentary
 *   client will be returned. Otherwise, NULL will be returned.
 */
function eloqua_rest_api_client($api_version = '2.0') {
  $singleton = &drupal_static(__FUNCTION__, array());

  // Only instantiate a new Elomentary client if one hasn't already been.
  if (!array_key_exists($api_version,  $singleton)) {
    // Base configurations for instantiating an EloquaRequest class.
    $site = variable_get('eloqua_rest_api_site_name', '');
    $login = variable_get('eloqua_rest_api_login_name', '');
    $password = variable_get('eloqua_rest_api_login_password', '');
    $base_url = variable_get('eloqua_rest_api_base_url', NULL);

    // Ensure the $base_url is either a valid base URL string, or NULL.
    $base_url = $base_url === '' ? NULL : $base_url;

    if ($site && $login && $password) {
      // This function may be called earlier than composer manager's autoloader
      // register task is run. So we call it manually here.
      if (function_exists('composer_manager_register_autoloader')) {
        composer_manager_register_autoloader();
      }

      // Instantiate the Elomentary client.
      $singleton[$api_version] = new Client();
      $singleton[$api_version]->setOption('version',  $api_version);
      $singleton[$api_version]->authenticate($site, $login, $password, $base_url);

      // Allow other modules to alter the client before it is used / returned.
      drupal_alter('eloqua_rest_api_client', $singleton[$api_version]);
    }
    else {
      $singleton[$api_version] = NULL;
    }
  }

  return $singleton[$api_version];
}
