<?php

/**
 * Implementation of filedepot_multiupload module().
 *
 * Main module file.
 */

/**
 * Implements hook_theme_registry_alter().
 */
function filedepot_multiupload_theme_registry_alter(&$theme_registry) {
  $theme_registry['filedepot_main_page']['template'] = drupal_get_path('module', 'filedepot_multiupload') . '/theme/filedepot-mainpage';
  $theme_registry['filedepot_main_page']['theme path'] = drupal_get_path('module', 'filedepot_multiupload');
}

/**
 * Implements hook_menu().
 */
function filedepot_multiupload_menu() {
  $items = array();

  $items['filedepot/%ctools_js/multiupload'] = array(
    'title' => 'Add multiple files',
    'page callback' => 'filedepot_multiupload_dialog',
    'page arguments' => array(1),
    'access arguments' => array('access filedepot'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/media/filedepot/default'] = array(
    'title' => 'Filedepot',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/media/filedepot/multiupload'] = array(
    'title' => 'Filedepot Multiupload',
    'description' => 'Configuration for Filedepot Multiupload module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filedepot_multiupload_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'filedepot_multiupload.admin.inc',
  );
  return $items;
}

/**
 * Show the multiupload form.
 */
function filedepot_multiupload_uploadform($form, &$form_state) {
  global $user;

  $filedepot = filedepot_filedepot();

  // Using the ctools cache functionality
  // to save which folder the user has selected.
  ctools_include('object-cache');
  $cid = ctools_object_cache_get('filedepot', 'folder');

  module_load_include('php', 'filedepot', 'lib-common');

  if ($filedepot->ogmode_enabled && $filedepot->checkPermission($filedepot->ogrootfolder, 'admin')) {
    $parent_folders = array($filedepot->ogrootfolder => t('Top Level Folder'));
  } elseif (user_access('administer filedepot', $user)) {
    $parent_folders = array(0 => t('Top Level Folder'));
  } else {
    $parent_folders = array();
  }
  $parent_folders += filedepot_recursiveAccessArray(array('upload_dir', 'upload'));

  $form['filedepot_folder'] = array(
    '#type' => 'select',
    '#title' => t('Folder'),
    '#description' => t('Select the folder where the files will be stored'),
    '#required' => FALSE,
    '#options' => $parent_folders,
    '#default_value' => $cid,
  );

  $default_filter = 'jpg png doc docx xls xlsx pdf ppt pptx';
  $filter = variable_get('filedepot_filetype_filter', $default_filter);

  $form['filedepot_files'] = array(
    '#type' => 'plupload',
    '#title' => t('Upload files'),
    '#description' => t('Add files or drag files and start upload.'),
    '#upload_validators' => array(
      'file_validate_extensions' => array($filter),
    ),
    '#event_callbacks' => array(
      'StateChanged' => 'Drupal.filedepot_multiupload.stateChangedCallback',
      'UploadComplete' => 'Drupal.plupload.uploadCompleteCallback',
    ),
    '#submit_element' => '.plupload-upload-submit'
  );

  $form['buttons'] = array(
    '#prefix' => '<div style="text-align:center;">',
    '#suffix' => '</div>',
  );

  $form['buttons']['close'] = array(
    '#type' => 'submit',
    '#access' => TRUE,
    '#value' => t('Close'),
    '#weight' => 60,
    '#attributes' => array(
      'class' => array('ctools-close-modal')
    ),
    '#submit' => array('filedepot_multiupload_form_close'),
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save file(s)'),
    '#attributes' => array(
      'class' => array('plupload-upload-submit element-invisible'),
    ),
    '#validate' => array('filedepot_multiupload_validate'),
    '#submit' => array('filedepot_multiupload_submit'),
  );

  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'filedepot_multiupload') . '/js/filedepot_multiupload.js',
    ),
  );
  return $form;
}

/**
 * Validate the multiupload form.
 */
function filedepot_multiupload_validate($form, &$form_state) {
  $cid = (int) $form_state['values']['filedepot_folder'];
  if (!$cid) {
    form_set_error('filedepot_folder', t('You must select a valid folder'));
  }

  if (!count($form_state['values']['filedepot_files'])) {
    form_set_error('filedepot_files', t('You did not upload any files'));
  }

  $filedepot = filedepot_filedepot();

  $cid_perms = $filedepot->getPermissionObject($cid);
  if ($cid_perms->canUpload() === FALSE) {
    form_set_error('filedepot_folder', t('Insufficient privileges to upload to this folder'));
  }
}

/**
 * Submit the multiupload form.
 */
function filedepot_multiupload_submit($form, &$form_state) {
  global $user;
  $filedepot = filedepot_filedepot();
  module_load_include('php', 'filedepot', 'lib-common');

  $cid = (int) $form_state['values']['filedepot_folder'];

  // Retrieve the upload location - parent folder node id.
  $folder_nid = db_query("SELECT nid FROM {filedepot_categories} WHERE cid=:cid", array(':cid' => $cid))->fetchField();
  $node = node_load($folder_nid);
  $cid_perms = $filedepot->getPermissionObject($cid);

  // Admin's have all perms so test for users with
  // upload moderated approval only.
  if ($cid_perms->canUploadDirect() === FALSE) {
    $moderated = TRUE;
    $private_destination = 'private://filedepot/' . $node->folder . '/submissions/';
  } else {
    $moderated = FALSE;
    $private_destination = 'private://filedepot/' . $node->folder . '/';
  }

  // Best to call file_prepare_directory() -
  // even if you believe directory exists.
  file_prepare_directory($private_destination, FILE_CREATE_DIRECTORY);

  foreach ($form_state['values']['filedepot_files'] as $upload) {
    $file = plupload_file_uri_to_object($upload['tmppath']);
    $filename = $upload['name'];
    $path_parts = pathinfo($filename);
    $ext = $path_parts['extension'];

    $original_filename = $filename;
    // Save record in submission table and set status to 0 -- not online.
    if ($moderated) {
      // Generate random file name for newly
      // submitted file to hide it until approved.
      $charset = "abcdefghijklmnopqrstuvwxyz";
      $moderated_tmpname = '';
      for ($i = 0; $i < 12; $i++) {
        $moderated_tmpname .= $charset[(mt_rand(0, (drupal_strlen($charset) - 1)))];
      }
      $moderated_tmpname .= '.' . $ext;

      $private_uri = $private_destination . $moderated_tmpname;
      $file = file_move($file, $private_uri, FILE_EXISTS_RENAME);
      $file->filename = $original_filename;
      $mime = file_get_mimetype($file->uri);

      $filetitle = $original_filename;
      $filename = drupal_basename($file->uri);

      // Update folder node - add the file as an attachment.
      $file->display = 1;
      $file->description = '';

      // Doing node_save changes the file status to permanent
      // in the file_managed table.
      $node->filedepot_folder_file[LANGUAGE_NONE][] = (array) $file;
      node_save($node);

      $query = db_insert('filedepot_filesubmissions')
        ->fields(array(
          'cid' => $node->folder,
          'fname' => $filename,
          'tempname' => $moderated_tmpname,
          'title' => $filetitle,
          'description' => '',
          'drupal_fid' => $file->fid,
          'version_note' => '',
          'size' => $file->filesize,
          'mimetype' => $mime,
          'extension' => $ext,
          'submitter' => $user->uid,
          'date' => REQUEST_TIME,
          'tags' => '',
          'notify' => 1,
      ));
      $newrecid = $query->execute();
      if ($newrecid > 0) {
        // Get id for the new file record.
        $newrecid = db_query_range("SELECT id FROM {filedepot_filesubmissions} WHERE cid=:cid AND submitter=:uid ORDER BY id DESC", 0, 1, array(':cid' => $node->folder, ':uid' => $user->uid))->fetchField();
        filedepot_sendNotification($newrecid, FILEDEPOT_NOTIFY_ADMIN);
      } else {
        drupal_set_message(t('Issue saving new file - invalid new file submissions record'), 'warning');
      }
    } else {
      $private_uri = $private_destination . $filename;
      $file = file_move($file, $private_uri, FILE_EXISTS_RENAME);

      $path_parts = pathinfo($filename);
      $ext = $path_parts['extension'];
      $mime = file_get_mimetype($file->uri);

      // Get name of new file in case it was renamed after the file_move().
      $filename = drupal_basename($file->uri);
      $filetitle = $original_filename;

      // Update folder node - add the file as an attachment.
      $file->display = 1;
      $file->description = '';

      // Doing node_save changes the file status to permanent
      // in the file_managed table.
      $node->filedepot_folder_file[LANGUAGE_NONE][] = (array) $file;
      node_save($node);

      // Update the file usage table.
      file_usage_add($file, 'filedepot', 'node', $node->nid);

      // Create filedepot record for file and set status of file to online.
      $query = db_insert('filedepot_files')
        ->fields(array(
          'cid' => $node->folder,
          'fname' => $filename,
          'title' => $filetitle,
          'description' => '',
          'version' => 1,
          'drupal_fid' => $file->fid,
          'size' => $file->filesize,
          'mimetype' => $mime,
          'extension' => $ext,
          'submitter' => $user->uid,
          'status' => 1,
          'date' => REQUEST_TIME,
      ));
      $newrecid = $query->execute();
      if ($newrecid > 0) {
        $query = db_insert('filedepot_fileversions')
          ->fields(array(
            'fid' => $newrecid,
            'fname' => $filename,
            'drupal_fid' => $file->fid,
            'version' => 1,
            'notes' => '',
            'size' => $file->filesize,
            'date' => REQUEST_TIME,
            'uid' => $user->uid,
            'status' => 1,
          ))
          ->execute();

        // Update related folders last_modified_date.
        $workspace_parent_folder = filedepot_getTopLevelParent($node->folder);
        filedepot_updateFolderLastModified($workspace_parent_folder);
      } else {
        drupal_set_message(t('Invalid id returned from insert new file record'), 'error');
      }

      // Need to clear the cache
      // as the node will still have the original file name.
      field_cache_clear();
    }
  }
}

/**
 * Close the multiupload form.
 */
function filedepot_multiupload_form_close() {
  drupal_goto('filedepot');
}

/**
 * Implements hook_dialog().
 *
 * Shows the dialog for uploading multiple files.
 */
function filedepot_multiupload_dialog($js = NULL) {
  // Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('filedepot_multiupload_uploadform');
  }

  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  drupal_add_css(drupal_get_path('module', 'filedepot') . '/css/filedepot_ctools.css');
  $form_state = array(
    'title' => t('New Files'),
    'ajax' => TRUE,
    'has_file_element' => TRUE,
  );
  $output = ctools_modal_form_wrapper('filedepot_multiupload_uploadform', $form_state);

  if ($form_state['executed'] && ($js)) {
    $cid = (int) $form_state['values']['filedepot_folder'];
    $commands = array();
    $commands[] = ctools_ajax_command_redirect("filedepot/folder/$cid");
    $commands[] = ctools_modal_command_dismiss(t('New files success'));
    print ajax_render($commands);
    exit;
  }
  
  print ajax_render($output);
  exit;
}
