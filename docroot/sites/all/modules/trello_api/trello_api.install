<?php
/**
 * @file
 * Install tables and make updates for trello_api module.
 */

/**
 * Implements hook_schema().
 */
function trello_api_schema() {
  $schema['trello_api_board'] = array(
    'description' => 'The base table for trello_api_board entity.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a trello_api_board entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'trello_id' => array(
        'description' => 'The trello id of the board.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'organization_trello_id' => array(
        'description' => 'The trello id of the organization this board belongs to.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human readable name for the board.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'url' => array(
        'description' => 'The url for the board.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'closed' => array(
        'description' => 'Boolean indicating whether the board is closed on trello.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'organization_trello_id' => array('organization_trello_id'),
    ),
    'unique keys' => array(
      'trello_id'     => array('trello_id'),
    ),
    'primary key' => array('id'),
  );

  $schema['trello_api_card'] = array(
    'description' => 'The base table for trello_api_card entity.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a trello_api_card entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'trello_id' => array(
        'description' => 'The trello id of the card.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'board_trello_id' => array(
        'description' => 'The trello id of the board this card belongs to.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label_trello_ids' => array(
        'description' => 'The trello ids of the labels attached to the card. This is stored as serialized data.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'list_trello_id' => array(
        'description' => 'The trello id of the list this card belongs to.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human readable name for the card.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'url' => array(
        'description' => 'The url for the card.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'description' => array(
        'description' => 'The description of the card.',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'board_trello_id' => array('board_trello_id'),
      'list_trello_id' => array('list_trello_id'),
    ),
    'unique keys' => array(
      'trello_id'     => array('trello_id'),
    ),
    'primary key' => array('id'),
  );

  $schema['trello_api_label'] = array(
    'description' => 'The base table for trello_api_label entity.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a trello_api_label entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'trello_id' => array(
        'description' => 'The trello id of the label.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'board_trello_id' => array(
        'description' => 'The trello id of the board this label belongs to.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human readable name for the label.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'color' => array(
        'description' => 'The color for the label.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'indexes' => array(
      'board_trello_id' => array('board_trello_id'),
    ),
    'unique keys' => array(
      'trello_id'     => array('trello_id'),
    ),
    'primary key' => array('id'),
  );

  $schema['trello_api_list'] = array(
    'description' => 'The base table for trello_api_list entity.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a trello_api_list entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'trello_id' => array(
        'description' => 'The trello id of the list.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'board_trello_id' => array(
        'description' => 'The trello id of the board this list belongs to.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human readable name for the label.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'closed' => array(
        'description' => 'Boolean indicating whether the board is closed on trello.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'pos' => array(
        'description' => 'A number used by trello to figure out the position of the list on a board.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'board_trello_id' => array('board_trello_id'),
    ),
    'unique keys' => array(
      'trello_id'     => array('trello_id'),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Install the schemas for trello entities.
 */
function trello_api_update_7000(&$sandbox) {
  $schemas = trello_api_schema();
  foreach ($schemas as $name => $schema) {
    db_create_table($name, $schema);
  }
}

/**
 * Make sure the new TrelloAPIEntityController is registered.
 */
function trello_api_update_7001(&$sandbox) {
  // Include the new file.
  module_load_include('php', 'trello_api', 'includes/TrelloAPIEntityController');
  // Clear the caches to make Drupal register it from the .info file.
  drupal_flush_all_caches();
}

/**
 * Add the label_trello_ids tabel if needed.
 */
function trello_api_update_7002(&$sandbox) {
  $schemas = trello_api_schema();
  try {
    db_add_field('trello_api_card', 'label_trello_ids', $schemas['trello_api_card']['fields']['label_trello_ids']);
  }
  catch (Exception $e) {
    // Catch all fail silently.
  }
}
