<?php

/**
 * @file
 * Administrative page callbacks for the mydigipass module.
 */

/**
 * Page callback: Shows an administration form.
 *
 * Page callback for 'admin/config/services/mydigipass' and for
 * 'admin/config/services/mydigipass/account_settings'. The form allows
 * configuring the mydigipass module.
 *
 * @return array
 *   Admin form generated by system_settings_form().
 */
function mydigipass_admin_settings($form_state) {
  $form = array();

  $form['mydigipass_integration_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable MYDIGIPASS.COM integration'),
    '#default_value' => variable_get('mydigipass_integration_enabled', 0),
  );

  $form['account_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Account settings'),
  );
  $form['account_settings']['mydigipass_environment'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => array(
      'test' => t('Sandbox / developer'),
      'production' => t('Production'),
      'custom' => t('Custom'),
    ),
    '#default_value' => variable_get('mydigipass_environment', ''),
    '#required' => TRUE,
    '#description' => t('Use <i>Sandbox / developer</i> when you are testing the MYDIGIPASS.COM integration. Use <i>Production</i> when you have a formal subscription with MYDIGIPASS.COM. Use <i>Custom</i> when you want to manually specify the endpoint URLs on !url.', array('!url' => l(t('the advanced settings page'), 'admin/config/services/mydigipass/advanced_settings'))),
  );
  $form['account_settings']['mydigipass_client_id'] = array(
    '#type' => 'textfield',
    '#title' => 'Client ID',
    '#default_value' => variable_get('mydigipass_client_id', ''),
    '#description' => t('The client identifier issued by MYDIGIPASS.COM.'),
    '#required' => TRUE,
  );
  // If the client_secret has already been set, we don't show the textfield by
  // default. This is because it is a password field of which it is not possible
  // to set a default_value. In order to avoid accidental overwriting of the
  // client_secret, we hide the input field.
  $client_secret = variable_get('mydigipass_client_secret', '');
  if (empty($client_secret) || (isset($_GET['edit_password']) && ($_GET['edit_password'] == 1))) {
    $form['account_settings']['mydigipass_client_secret'] = array(
      '#type' => 'password',
      '#title' => 'Client secret',
      // For security reasons, the client_secret is never filled in. This is
      // also the default behaviour of a password-type form field.
      // '#default_value' => variable_get('mydigipass_client_secret', ''),
      '#description' => t('The client secret issued by MYDIGIPASS.COM.'),
      '#required' => TRUE,
    );
  }
  else {
    $form['account_settings'][] = array(
      '#type' => 'item',
      '#title' => 'Client secret',
      '#markup' => t('Click <a href="@here">here</a> to edit the Client secret', array('@here' => url('admin/config/services/mydigipass', array('query' => array('edit_password' => 1))))),
    );
  }
  $form['account_settings']['mydigipass_callback_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Callback URL'),
    '#default_value' => variable_get('mydigipass_callback_url', url('mydigipass/callback', array('absolute' => TRUE))),
    '#description' => t('The callback URL of this website. The default value is !url.<br />Ensure that this is the same url which you submitted to MYDIGIPASS.COM!', array('!url' => url('mydigipass/callback', array('absolute' => TRUE)))),
    '#required' => TRUE,
  );

  $form['authentication_mode'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication mode'),
  );
  $form['authentication_mode']['mydigipass_authentication_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Choose authentication mode'),
    '#options' => array(
      'mdp_only' => t('MYDIGIPASS.COM only'),
      'mixed' => t('Mixed mode. The end-user can logon with both MYDIGIPASS.COM and with username/password.'),
    ),
    '#default_value' => variable_get('mydigipass_authentication_mode', 'mdp_only'),
    '#description' => t('The most secure authentication mode is <i>MYDIGIPASS.COM only</i>. In this mode, a user is forced to authenticate using strong authentication from MYDIGIPASS.COM once he/she has linked his/her Drupal account to MYDIGIPASS.COM. In <i>Mixed mode</i>, an end-user still can logon with username/password.<br />Note: users who have not yet linked their account with a MYDIGIPASS.COM account are not affected by this setting.'),
    '#required' => TRUE,
  );

  $form['features'] = array(
    '#type' => 'fieldset',
    '#title' => t('MYDIGIPASS.COM features'),
  );
  $form['features']['mydigipass_logout_feature'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('mydigipass_logout_feature', 0),
    '#title' => t('Enable logout feature'),
    '#description' => t('By enabling the logout feature, users will be prompted whether they also want to log out of MYDIGIPASS.COM when logging out of this site. When logging out, the MYDIGIPASS.COM logout dialog will be shown where users can choose to also logout from MYDIGIPASS.COM or open their MYDIGIPASS.COM Launch Pad.'),
  );

  return system_settings_form($form);
}

/**
 * Page callback for 'admin/config/services/mydigipass/user_profile_fiels'.
 *
 * Shows the admin form which allows the administrator to specify which
 * attributes are being displayed on a user's profile page.
 *
 * @see mydigipass_admin_settings_user_profile_fields_form_validate()
 * @see mydigipass_admin_settings_user_profile_fields_form_submit()
 */
function mydigipass_admin_settings_user_profile_fields_form($form_state) {
  $form = array();

  // Extract all available fields which are currently selected.
  $query = db_select('mydigipass_profile_fields', 'mpf')
    ->fields('mpf', array('name', 'title', 'weight', 'selected'))
    ->orderBy('weight', 'ASC');
  $result = $query->execute();
  $user_data_fields = array();
  foreach ($result as $row) {
    $user_data_fields[] = array(
      'name' => check_plain($row->name),
      'title' => check_plain($row->title),
      'weight' => $row->weight,
      'selected' => $row->selected,
    );
  }

  // Extract all available fields which are currently available in the
  // user_data column which are not yet used in the mydigipass_profile_fields
  // table.
  $query = db_select('mydigipass_user_data', 'mud');
  $query->leftJoin('mydigipass_profile_fields', 'mpf', 'mpf.name = mud.attribute_key');
  $query->condition(db_and()
      ->condition('mud.attribute_key', 'error', '<>')
      ->isNull('mpf.selected'))
    ->fields('mud', array('attribute_key'))
    ->orderBy('attribute_key', 'ASC')
    ->distinct();
  $result = $query->execute();
  foreach ($result as $row) {
    $user_data_fields[] = array(
      'name' => check_plain($row->attribute_key),
      'title' => '',
      'weight' => 0,
      'selected' => FALSE,
    );
  }

  // Construct the form.
  $form = array();
  $form['items'] = array();
  $form['items']['#tree'] = TRUE;

  foreach ($user_data_fields as $item) {
    $form['items'][$item['name']] = array(
      'selected' => array(
        '#type' => 'checkbox',
        '#title' => check_plain($item['name']),
        '#default_value' => isset($item['selected']) ? $item['selected'] : FALSE,
      ),
      'title' => array(
        '#type' => 'textfield',
        '#default_value' => $item['title'],
      ),
      'weight' => array(
        '#type' => 'weight',
        '#delta' => count($user_data_fields),
        '#default_value' => isset($item['weight']) ? $item['weight'] : 0,
      ),
      'name' => array(
        '#type' => 'hidden',
        '#value' => $item['name'],
      ),
    );
  }

  $form[] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Theme callback for the mydigipass_admin_settings_user_profile_fields_form.
 *
 * The theme callback will format the $form data structure into a table and
 * add our tabledrag functionality. (Note that drupal_add_tabledrag should be
 * called from the theme layer, and not from a form declaration. This helps
 * keep template files clean and readable, and prevents tabledrag.js from
 * being added twice accidentally.
 *
 * @return string
 *   The rendered tabledrag form
 */
function theme_mydigipass_admin_settings_user_profile_fields_form($variables) {
  $form = $variables['form'];
  $header = array(t('Show field'), t('Show as'), t('Weight'));
  $rows = array();

  foreach (element_children($form['items']) as $key) {
    $element = &$form['items'][$key];
    $form['items'][$key]['weight']['#attributes']['class'] = array('weight-group');
    $row = array();
    $row[] = drupal_render($form['items'][$key]['selected']);
    $row[] = drupal_render($form['items'][$key]['title']);
    $row[] = drupal_render($form['items'][$key]['weight']) . drupal_render($form['items'][$key]['name']);
    $rows[] = array('data' => $row, 'class' => array('draggable'));
  }
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'draggable-table'),
  ));

  $output .= drupal_render_children($form);
  drupal_add_tabledrag('draggable-table', 'order', 'sibling', 'weight-group');
  return $output;
}

/**
 * Submit handler for mydigipass_admin_settings_user_profile_fields_form().
 *
 * @see mydigipass_admin_settings_user_profile_fields_form_validate()
 */
function mydigipass_admin_settings_user_profile_fields_form_submit($form, &$form_state) {
  $txn = db_transaction();

  try {
    // Delete the previous stored setting.
    db_truncate('mydigipass_profile_fields')->execute();

    // Store the selected attribute names in the database.
    foreach ($form_state['values']['items'] as $item) {
      $fields = array(
        'name' => $item['name'],
        'title' => $item['title'],
        'selected' => $item['selected'],
        'weight' => $item['weight'],
      );
      db_insert('mydigipass_profile_fields')->fields($fields)->execute();
    }
  }
  catch (Exception $e) {
    // Something went wrong, so roll back.
    $txn->rollback();
    // Log the exception to watchdog.
    watchdog_exception('mydigipass', $e);
    drupal_set_message(t('An error occurred while saving the configuration options.'), 'error');
  }
  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Page callback for 'admin/config/services/mydigipass/button_style'.
 *
 * Shows the admin form which allows the administrator to select which
 * button has to be shown within the forms. The administrator can select the
 * layout of three buttons: the one shown on a typical login form, the one
 * shown on a register form and the one shown in the user profile which allows
 * to link to account with a MYDIGIPASS.COM account.
 *
 * @return array
 *   Admin form generated by system_settings_form().
 */
function mydigipass_admin_settings_button_style_form($form_state) {
  // These are the names of the 3 different forms. Their names should be run
  // through t().
  $forms = array(
    'login' => t('Login'),
    'register' => t('Register'),
    'link' => t('Link'),
  );
  // The following array contains fixed default values for radios field-items.
  // As such, this does not have to be run through t().
  $defaults = array(
    'login' => array(
      'style' => 'default',
      'text' => 'secure-login',
      'help' => 'true'),
    'register' => array(
      'style' => 'large',
      'text' => 'sign-up',
      'help' => 'true'),
    'link' => array(
      'style' => 'large',
      'text' => 'connect',
      'help' => 'true'),
  );
  $form_style_options = array(
    'default' => t('default'),
    'large' => t('large'),
    'medium' => t('medium'),
    'small' => t('small'),
    'false' => t('false'),
  );
  $form_text_options = array(
    'connect' => t('connect'),
    'sign-up' => t('sign-up'),
    'secure-login' => t('secure-login'),
  );
  $form_help_options = array(
    'true' => t('true'),
    'false' => t('false'),
  );
  foreach ($forms as $key => $value) {
    $form[$key . '_form'] = array(
      '#type' => 'fieldset',
      '#title' => t("@value form", array('@value' => $value)),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Use the options below to modify the style of the MYDIGIPASS.COM button which is shown in the @key form.', array('@key' => $key)),
    );
    $form[$key . '_form']['mydigipass_' . $key . '_form_style'] = array(
      '#type' => 'radios',
      '#title' => t('Style'),
      '#options' => $form_style_options,
      '#default_value' => variable_get('mydigipass_' . $key . '_form_style', $defaults[$key]['style']),
      '#required' => TRUE,
      '#description' => t("Sets the button style. Use false if you don't want to use the default MYDIGIPASS.COM Secure Login button styling."),
    );
    $form[$key . '_form']['mydigipass_' . $key . '_form_text'] = array(
      '#type' => 'radios',
      '#title' => t('Text'),
      '#options' => $form_text_options,
      '#default_value' => variable_get('mydigipass_' . $key . '_form_text', $defaults[$key]['text']),
      '#required' => TRUE,
      '#description' => t("Specifies the text to appear on the button. Note that this attribute is irrelevant if the style attribute is set to default or small."),
    );
    $form[$key . '_form']['mydigipass_' . $key . '_form_help'] = array(
      '#type' => 'radios',
      '#title' => t('Help'),
      '#options' => $form_help_options,
      '#default_value' => variable_get('mydigipass_' . $key . '_form_help', $defaults[$key]['help']),
      '#required' => TRUE,
      '#description' => t("If set to true, meta-text is used to display information about the button in question."),
    );
  }

  return system_settings_form($form);
}

/**
 * Page callback for 'admin/config/services/mydigipass/advanced_settings'.
 *
 * Shows the admin form which allows to configure advanced settings, such as
 * the MYDIGIPASS.COM API endpoint URLs. Also allows to configure additional
 * security settings like MYDIGIPASS.COM SSL server certificate validation.
 *
 * @return array
 *   Admin form generated by system_settings_form().
 */
function mydigipass_admin_settings_advanced_form($form_state) {
  $form['server_certificate_validation'] = array(
    '#type' => 'fieldset',
    '#title' => t('MYDIGIPASS.COM SSL server certificate validation'),
    '#collapsible' => TRUE,
    '#collapsed' => (variable_get('mydigipass_validate_certificate', 'disabled') == 'disabled'),
    '#description' => t('Configure the validation of the SSL certificate presented by MYDIGIPASS.COM. It is strongly recommended to enable SSL certificate validation.'),
  );

  $validation_options = array(
    'disabled' => t('Disable server certificate validation.'),
    'enabled' => t('Enable server certificate validation.'),
  );
  $form['server_certificate_validation']['mydigipass_validate_certificate'] = array(
    '#type' => 'radios',
    '#title' => t('Configure server certificate validation'),
    '#options' => $validation_options,
    '#default_value' => variable_get('mydigipass_validate_certificate', 'disabled'),
    '#required' => TRUE,
  );

  $form['server_certificate_validation']['mydigipass_validate_certificate_cafile'] = array(
    '#type' => 'textfield',
    '#title' => t('Location of Certificate Authority file'),
    '#default_value' => variable_get('mydigipass_validate_certificate_cafile', ''),
    '#description' => t('The location of Certificate Authority file on the local filesystem which should be used to authenticate the identity of the MYDIGIPASS.COM server. This should only be filled in if the PHP installation does not have access to the list of trusted certificate authorities or if you want to trust fewer certificates then the ones in the operating system trusted certificate store. For the latest instructions on how to enable strict SSL certificate validation, check the module homepage at !url', array('!url' => l(t('http://drupal.org/project/mydigipass'), 'http://drupal.org/project/mydigipass'))),
  );

  $form['endpoint_urls'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configure endpoint URLs'),
    '#collapsible' => TRUE,
    '#collapsed' => (variable_get('mydigipass_environment', '') != 'custom'),
  );

  $form['endpoint_urls'][] = array(
    '#type' => 'item',
    '#markup' => t('The MYDIGIPASS.COM endpoint URLs can only be configured when the "Environment" setting on !url has been set to "Custom". Be very careful when manually setting these URLs! A wrong URL will break the MYDIGIPASS.COM functionality and might lock users out of your website.', array('!url' => l(t('the MYDIGIPASS.COM Account Settings page'), 'admin/config/services/mydigipass'))),
  );

  $form['endpoint_urls']['mydigipass_endpoint_url_dp_connect_js'] = array(
    '#type' => 'textfield',
    '#title' => t('dp_connect.js'),
    '#default_value' => variable_get('mydigipass_endpoint_url_dp_connect_js', ''),
    '#description' => t("The location of the dp_connect.js file.<br />Use the string %lang in the URL if the URL has to be updated dynamically according to the user's preferred language setting."),
    '#required' => TRUE,
  );

  $form['endpoint_urls']['mydigipass_endpoint_url_token_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Token endpoint'),
    '#default_value' => variable_get('mydigipass_endpoint_url_token_endpoint', ''),
    '#description' => t('The location of the token endpoint.'),
    '#required' => TRUE,
  );

  $form['endpoint_urls']['mydigipass_endpoint_url_data_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Data endpoint'),
    '#default_value' => variable_get('mydigipass_endpoint_url_data_endpoint', ''),
    '#description' => t('The location of the data endpoint.'),
    '#required' => TRUE,
  );

  $form['endpoint_urls']['mydigipass_endpoint_url_api_uuids_connected'] = array(
    '#type' => 'textfield',
    '#title' => t('Connected API'),
    '#default_value' => variable_get('mydigipass_endpoint_url_api_uuids_connected', ''),
    '#description' => t('The location of the connected API for UUIDs.'),
    '#required' => TRUE,
  );

  $form['endpoint_urls']['mydigipass_endpoint_url_api_uuids_disconnected'] = array(
    '#type' => 'textfield',
    '#title' => t('Disconnected API'),
    '#default_value' => variable_get('mydigipass_endpoint_url_api_uuids_disconnected', ''),
    '#description' => t('The location of the disconnected API for UUIDs.'),
    '#required' => TRUE,
  );

  if (variable_get('mydigipass_environment', '') != 'custom') {
    $form['endpoint_urls']['mydigipass_endpoint_url_dp_connect_js']['#disabled'] = TRUE;
    $form['endpoint_urls']['mydigipass_endpoint_url_token_endpoint']['#disabled'] = TRUE;
    $form['endpoint_urls']['mydigipass_endpoint_url_data_endpoint']['#disabled'] = TRUE;
    $form['endpoint_urls']['mydigipass_endpoint_url_api_uuids_connected']['#disabled'] = TRUE;
    $form['endpoint_urls']['mydigipass_endpoint_url_api_uuids_disconnected']['#disabled'] = TRUE;
  }

  $form['languages'] = array(
    '#type' => 'fieldset',
    '#title' => t('Supported languages'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['languages'][] = array(
    '#type' => 'item',
    '#markup' => t('The MYDIGIPASS.COM platform is available in multiple languages. The following setting allows to set the languages that are supported by MYDIGIPASS.COM. The setting below should only be changed when the MYDIGIPASS.COM is available in a language that is not yet present in the list below.<br />Important remark: if a language is added that is not supported by MYDIGIPASS.COM and when this site or users are using this language, then the MYDIGIPASS.COM functionality will be broken!', array()),
  );

  $form['languages']['mydigipass_languages'] = array(
    '#type' => 'textfield',
    '#title' => t('Supported languages'),
    '#default_value' => variable_get('mydigipass_languages', 'en'),
    '#description' => t('A comma-separated list of the ISO 639-1 codes of the supported languages.'),
    '#required' => TRUE,
  );

  $url = 'https://www.mydigipass.com';
  $form['test_connectivity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test the connectivity to MYDIGIPASS.COM'),
    '#description' => t('By clicking this button you can test whether this web-server can connect to MYDIGIPASS.COM. In order to do this, it will make an outbound HTTPS connection to the following URL: !url.', array('!url' => $url)),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['test_connectivity']['submit_test_connectivity'] = array(
    '#type' => 'submit',
    '#submit' => array('mydigipass_admin_settings_submit_test_connectivity'),
    '#value' => t('Test connectivity'),
  );

  return system_settings_form($form);
}

/**
 * Validation handler for mydigipass_admin_settings_advanced_form().
 *
 * @see mydigipass_admin_settings_advanced_form()
 */
function mydigipass_admin_settings_advanced_form_validate($form, &$form_state) {
  // The site administrator doesn't want to enable SSL validation, so it is not
  // necessary to check whether the CA file is usable.
  if ($form_state['values']['mydigipass_validate_certificate'] == 'disabled') {
    return;
  }

  // Set the URL to test the SSL validation against.
  $url = 'https://www.mydigipass.com';
  $hostname = 'www.mydigipass.com';

  // If the site administrator tries to enable certificate validation without
  // specifying a cafile, check if it is really not needed. To do this, make a
  // connection to mydigipass.com both with and without requiring certificate
  // validation. If we can setup a connection in both cases, then the PHP
  // application server has been correctly configured for SSL certificate
  // validation.
  if (empty($form_state['values']['mydigipass_validate_certificate_cafile'])) {
    $result_without_validation = drupal_http_request($url);
    // Don't use the _mydigipass_create_ssl_context function to create the
    // params array since it shouldn't contain a cafile!
    $params = array(
      'context' => stream_context_create(array(
        'ssl' => array(
          'verify_peer' => TRUE,
          'allow_self_signed' => FALSE,
          'CN_match' => $hostname,
        ))));
    $result_with_validation = drupal_http_request($url, $params);

    if ($result_without_validation->code <= 0) {
      form_set_error('mydigipass_validate_certificate', t('An error occurred while contacting !url.', array('!url' => $url)));
    }
    elseif (($result_without_validation->code > 0) && ($result_with_validation->code <= 0)) {
      form_set_error('mydigipass_validate_certificate_cafile',
        t('The certificate of !url could not be validated. This probably means that the PHP application server has not been configured to have access to valid SSL root certificates. Either reconfigure PHP or enter the path to a Certificate Authority file. Check the module homepage at !url2 for instructions on where you can obtain a Certificate Authority file.', array(
          '!url' => $url,
          '!url2' => l(t('http://drupal.org/project/mydigipass'), 'http://drupal.org/project/mydigipass'),
        )));
    }
    elseif (($result_without_validation->code > 0) && ($result_with_validation->code > 0)) {
      drupal_set_message(t('The certificate of !url could be successfully validated.', array('!url' => $url)));
    }
  }
  else {
    $cafile = $form_state['values']['mydigipass_validate_certificate_cafile'];
    if (file_exists($cafile)) {
      $params = array(
        'context' => stream_context_create(array(
          'ssl' => array(
            'verify_peer' => TRUE,
            'allow_self_signed' => FALSE,
            'CN_match' => $hostname,
            'cafile' => $cafile,
          ))));
      $result_with_validation = drupal_http_request($url, $params);
      if ($result_with_validation->code <= 0) {
        form_set_error('mydigipass_validate_certificate_cafile',
          t('The Certificate Authority file cannot be used to validate the certificate of !url. This probably means that the Certificate Authority file does not contain the required certificates.', array('!url' => $url)));
      }
      elseif ($result_with_validation->code > 0) {
        drupal_set_message(t('The certificate of !url has been successfully validated.', array('!url' => $url)));
      }
    }
    else {
      form_set_error('mydigipass_validate_certificate_cafile', t('The Certificate Authority file cannot be found. Check the path you have entered.'));
    }
  }
}

/**
 * Submit handler connected to the 'Test connectivity button'.
 *
 * The button is present on 'admin/config/services/mydigipass' and on
 * 'admin/config/services/mydigipass/account_settings'.
 *
 * Tests whether the webserver is able to connect to the MYDIGIPASS.COM
 * service.
 */
function mydigipass_admin_settings_submit_test_connectivity($form, &$form_state) {
  $url = 'https://www.mydigipass.com';
  $ssl_context_array = _mydigipass_create_ssl_context();
  $options = array('context' => stream_context_create($ssl_context_array));
  $result = drupal_http_request($url, $options);

  switch ($result->code) {
    case 200:
    case 301:
    case 302:
      drupal_set_message(t('Connectivity test succeeded: this web server can contact !url.', array('!url' => $url)));
      break;

    default:
      watchdog('mydigipass', 'Connectivity test failed due to "%error".', array('%error' => $result->code . ' ' . $result->error), WATCHDOG_WARNING);
      drupal_set_message(t('Connectivity test failed due to "%error".', array('%error' => $result->code . ' ' . $result->error)));
  }
}
