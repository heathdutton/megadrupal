<?php
/**
 * @file
 * Install, update, and uninstall functions for the mydigipass module.
 */

/**
 * Implements hook_requirements().
 */
function mydigipass_requirements($phase) {
  $requirements = array();
  $t = get_t();
  $title = $t('MYDIGIPASS.COM');

  switch ($phase) {
    case 'install':
      if (!(function_exists('stream_socket_client') && in_array('openssl', get_loaded_extensions()))) {
        $requirements['mydigipass'] = array(
          'title' => $title,
          'description' => $t('This PHP installation lacks the necessary functions to make outbound connections.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      break;

    case 'runtime':
      if (variable_get('mydigipass_integration_enabled', 0) == 1) {
        if (function_exists('stream_socket_client') && in_array('openssl', get_loaded_extensions()) && (variable_get('mydigipass_validate_certificate', 'disabled') == 'enabled')) {
          $requirements['mydigipass'] = array(
            'title' => $title,
            'value' => $t('MYDIGIPASS.COM SSL server certificate validation is enabled.'),
            'severity' => REQUIREMENT_OK,
          );
        }
        elseif (!(function_exists('stream_socket_client') && in_array('openssl', get_loaded_extensions()))) {
          $requirements['mydigipass'] = array(
            'title' => $title,
            'value' => $t('MYDIGIPASS.COM can not be used on this server.'),
            'description' => $t('This PHP installation lacks the necessary functions to make outbound connections.'),
            'severity' => REQUIREMENT_ERROR,
          );
        }
        elseif (variable_get('mydigipass_validate_certificate', 'disabled') == 'disabled') {
          $requirements['mydigipass'] = array(
            'title' => $title,
            'value' => $t('MYDIGIPASS.COM SSL server certificate validation is disabled.'),
            'description' => $t('It is strongly recommended to enable SSL certificate validation to detect and prevent serious attacks. Enable certificate validation !here.', array('!here' => l($t('here'), 'admin/config/services/mydigipass/advanced_settings'))),
            'severity' => REQUIREMENT_WARNING,
          );
        }
      }
      break;
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function mydigipass_uninstall() {
  // Remove the different configuration settings.
  variable_del('mydigipass_environment');
  variable_del('mydigipass_client_id');
  variable_del('mydigipass_client_secret');
  variable_del('mydigipass_callback_url');
  variable_del('mydigipass_authentication_mode');
  variable_del('mydigipass_link_form_help');
  variable_del('mydigipass_link_form_style');
  variable_del('mydigipass_link_form_text');
  variable_del('mydigipass_login_form_help');
  variable_del('mydigipass_login_form_style');
  variable_del('mydigipass_login_form_text');
  variable_del('mydigipass_register_form_help');
  variable_del('mydigipass_register_form_style');
  variable_del('mydigipass_register_form_text');
  variable_del('mydigipass_integration_enabled');
  variable_del('mydigipass_validate_certificate');
  variable_del('mydigipass_validate_certificate_cafile');
  variable_del('mydigipass_connect_api_inconsistency');
  variable_del('mydigipass_endpoint_url_dp_connect_js');
  variable_del('mydigipass_endpoint_url_token_endpoint');
  variable_del('mydigipass_endpoint_url_data_endpoint');
  variable_del('mydigipass_endpoint_url_api_uuids_connected');
  variable_del('mydigipass_endpoint_url_api_uuids_disconnected');
  variable_del('mydigipass_origin');
  variable_del('mydigipass_languages');
  variable_del('mydigipass_logout_feature');
}

/**
 * Implements hook_schema().
 */
function mydigipass_schema() {
  $schema['mydigipass_user_link'] = array(
    'description' => 'Stores the links between Drupal users and MYDIGIPASS.COM users.',
    'fields' => array(
      'drupal_uid' => array(
        'description' => 'Drupal user ID. See {users}.uid',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mdp_uuid' => array(
        'description' => 'MYDIGIPASS.COM user ID. See {mydigipass_user_data}.mdp_uuid',
        'type' => 'varchar',
        'length' => '36',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('mdp_uuid'),
    'unique keys' => array(
      'drupal_uid' => array('drupal_uid'),
    ),
  );

  $schema['mydigipass_profile_fields'] = array(
    'description' => "Stores the attribute keys of which the values have to be shown in a user's profile.",
    'fields' => array(
      'name' => array(
        'description' => 'The attribute key.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'A human readable name given to the attribute key.',
        'type' => 'varchar',
        'length' => '256',
        'default' => '',
        'not null' => FALSE,
      ),
      'selected' => array(
        'description' => 'Indicates whether the attribute must be shown or not.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'The weight of the attribute when being shown.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['mydigipass_user_data'] = array(
    'description' => 'Stores the user attributes received from MYDIGIPASS.COM.',
    'fields' => array(
      'mdp_uuid' => array(
        'description' => 'MYDIGIPASS.COM user ID',
        'type' => 'varchar',
        'length' => '36',
        'not null' => TRUE,
      ),
      'attribute_key' => array(
        'description' => 'The attribute key.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'attribute_value' => array(
        'description' => 'The attribute value.',
        'type' => 'varchar',
        'length' => '1024',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('mdp_uuid', 'attribute_key'),
  );

  return $schema;
}

/**
 * Implements hook_update_N().
 *
 * Changes:
 *  - This update first uses the connected API. All already connected
 *    users should be synchronized with MYDIGIPASS.COM.
 */
function mydigipass_update_7100() {
  // Important to negate the result of sync_connected_users:
  // api_inconsistency = TRUE if sync_connected_users = FALSE!
  variable_set('mydigipass_connect_api_inconsistency', !_mydigipass_sync_connected_users());
}

/**
 * Implements hook_update_N().
 *
 * Changes: sets the new variable mydigipass_origin to the appropriate value
 * depending on the already selected environment. Also sets the new variable
 * mydigipass_languages to the list of languages that are currently supported
 * by MYDIGIPASS.COM.
 */
function mydigipass_update_7101() {
  $environment = variable_get('mydigipass_environment', '');
  switch ($environment) {
    case 'test':
      variable_set('mydigipass_origin', 'https://sandbox.mydigipass.com');
      break;

    case 'production':
      variable_set('mydigipass_origin', 'https://www.mydigipass.com');
      break;
  }

  variable_set('mydigipass_languages', 'en,fr,de,nl,it');
}

/**
 * Implements hook_update_N().
 *
 * Changes: removes the mydigipass_origin variable.
 */
function mydigipass_update_7102() {
  variable_del('mydigipass_origin');
}
