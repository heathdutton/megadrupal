<?php
/**
 * @file
 * MYDIGIPASS provides authentication against the MYDIGIPASS.COM service.
 *
 * For more information about MYDIGIPASS.COM go to https://mydigipass.com
 * To create a free account in the sandbox environment, go to
 * https://developer.mydigipass.com
 */

/**
 * Implements hook_menu().
 */
function mydigipass_menu() {
  $items = array();

  $items['admin/config/services/mydigipass'] = array(
    'title' => 'MYDIGIPASS.COM',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydigipass_admin_settings'),
    'description' => 'Configure MYDIGIPASS.COM settings.',
    'access arguments' => array('administer mydigipass'),
    'file' => 'mydigipass.admin.inc',
  );

  $items['admin/config/services/mydigipass/account_settings'] = array(
    'title' => 'Account settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/services/mydigipass/user_data_fields'] = array(
    'title' => 'User data fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydigipass_admin_settings_user_profile_fields_form'),
    'description' => "Configure the MYDIGIPASS.COM user data fields which are shown in the user's profile.",
    'access arguments' => array('administer mydigipass'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mydigipass.admin.inc',
    'weight' => 30,
  );

  $items['admin/config/services/mydigipass/button_style'] = array(
    'title' => 'Button style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydigipass_admin_settings_button_style_form'),
    'description' => 'Configure the MYDIGIPASS.COM buttons which are shown in different forms.',
    'access arguments' => array('administer mydigipass'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mydigipass.admin.inc',
    'weight' => 20,
  );

  $items['admin/config/services/mydigipass/advanced_settings'] = array(
    'title' => 'Advanced settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydigipass_admin_settings_advanced_form'),
    'description' => 'Configure MYDIGIPASS.COM advanced settings, such as SSL server certificate validation and MYDIGIPASS.COM endpoint API URLs.',
    'access arguments' => array('administer mydigipass'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mydigipass.admin.inc',
    'weight' => 40,
  );

  $items['mydigipass/callback'] = array(
    'title' => 'MYDIGIPASS.COM callback',
    'page callback' => 'mydigipass_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'callback.inc',
  );

  $items['mydigipass/link'] = array(
    'title' => 'Link MYDIGIPASS.COM account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mydigipass_link_user_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['mydigipass/link/new_user'] = array(
    'title' => 'Link to new account',
    'page callback' => 'mydigipass_link_new_user',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['mydigipass/link/existing_user'] = array(
    'title' => 'Link to existing user',
    'page callback' => 'mydigipass_link_existing_user',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mydigipass_permission() {
  return array(
    'administer mydigipass' => array(
      'title' => t('Administer MYDIGIPASS.COM module'),
      'description' => t('Configure the integration of MYDIGIPASS.COM with this website.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function mydigipass_init() {
  // Only include if the integration has been enabled.
  if (variable_get('mydigipass_integration_enabled', 0) == 1) {
    $endpoint = _mydigipass_get_endpoint_url('dp_connect.js');
    if (!empty($endpoint)) {
      drupal_add_js($endpoint, 'external');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see user_profile_form()
 */
function mydigipass_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // If the integration is not enabled, don't alter any forms.
  if (variable_get('mydigipass_integration_enabled', 0) == 0) {
    return;
  }

  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];

    $form['mydigipass'] = array(
      '#type' => 'fieldset',
      '#title' => 'MYDIGIPASS.COM',
    );

    // Check if the user is linked to a MYDIGIPASS.COM account.
    $query = db_select('mydigipass_user_link', 'mul')
      ->fields('mul')
      ->condition('drupal_uid', $account->uid);
    $result = $query->countQuery()->execute()->fetchField();
    if ($result == 1) {
      // The user is linked with a MYDIGIPASS.COM account.
      $query = db_select('mydigipass_user_link', 'mul');
      $query->join('mydigipass_user_data', 'mud', 'mul.mdp_uuid = mud.mdp_uuid');
      $query->fields('mud', array('attribute_value'))
        ->condition(db_and()
          ->condition('mul.drupal_uid', $account->uid)
          ->condition('mud.attribute_key', 'email'));
      $mdp_email = $query->execute()->fetchField();
      $form['mydigipass'][] = array(
        '#type' => 'item',
        '#markup' => (empty($mdp_email) ? t('This user account is linked to MYDIGIPASS.COM.') : t('This user account is linked to the following MYDIGIPASS.COM account: @mdp_email', array('@mdp_email' => $mdp_email))),
      );
      $form['mydigipass'][] = array(
        '#type' => 'submit',
        '#title' => t('Unlink from MYDIGIPASS.COM'),
        '#value' => t('Unlink'),
        '#description' => t('Use the following button to unlink your account from MYDIGIPASS.COM'),
        '#submit' => array('mydigipass_form_profile_unlink'),
      );

    }
    else {
      // The user is not yet linked with a MYDIGIPASS.COM account.
      // Only show the 'Link with MYDIGIPASS.COM'-button if the logged on user
      // is the same as the one who is viewing this profile. This to avoid that
      // an administrator would link his MYDIGIPASS.COM account by accident to
      // another Drupal user's profile.
      global $user;
      if ($user->uid == $account->uid) {
        $form['mydigipass'][] = array(
          '#type' => 'item',
          '#markup' => t('Click on the button below to secure your account with MYDIGIPASS.COM.'),
        );

        // Generate a random 32-char string. This string serves as a csrf token
        // to detect that the click originated from within this session. It will
        // be used as a value for the state parameter and is stored in this
        // user's session. This allows to verify that the end-user
        // effectively clicked the button to link and will avoid that a
        // CSRF-alike attack is being performed on a logged-on end-user by a
        // malicious person.
        if (empty($_SESSION['mydigipass_link_csrf_token'])) {
          $_SESSION['mydigipass_link_csrf_token'] = user_password(32);
        }

        // Prepare the value for the state parameter.
        $state_array = array(
          'csrf_token' => $_SESSION['mydigipass_link_csrf_token'],
          'action' => 'link',
        );
        $state_string = _mydigipass_encode_state_array($state_array);

        // The MYDIGIPASS.COM button also contains the data-state parameter.
        $form['mydigipass'][] = array(
          '#type' => 'item',
          '#markup' => l(t('Connect with MYDIGIPASS.COM'), '', array(
            'fragment' => ' ',
            'external' => TRUE,
            'attributes' => array(
              'class' => array('dpplus-connect'),
              'title' => t('Connect with MYDIGIPASS.COM'),
              'data-client-id' => check_plain(variable_get('mydigipass_client_id', '')),
              'data-redirect-uri' => check_plain(variable_get('mydigipass_callback_url', url('mydigipass/callback', array('absolute' => TRUE)))),
              'data-state' => $state_string,
              'data-style' => variable_get('mydigipass_link_form_style', 'large'),
              'data-text' => variable_get('mydigipass_link_form_text', 'connect'),
              'data-help' => variable_get('mydigipass_login_form_help', 'true'),
              'data-is-sandbox' => (variable_get('mydigipass_environment', '') == 'test' ? 'true' : 'false'),
            ),
          )),
        );
      }
      else {
        // Somebody else than the user himself is viewing the user's profile.
        $form['mydigipass'][] = array(
          '#type' => 'item',
          '#markup' => t('This user account is not linked to a MYDIGIPASS.COM account.'),
        );
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function mydigipass_form_alter(&$form, &$form_state, $form_id) {
  // If the integration is not enabled, don't alter any forms.
  if (variable_get('mydigipass_integration_enabled', 0) == 0) {
    return;
  }

  switch ($form_id) {
    // The standard login form.
    case 'user_login_block':
    case 'user_login':
      // Generate a random 32-char string. This string serves as a csrf token
      // to detect that the click originated from within this session. It will
      // be used as a value for the state parameter and is stored in this user's
      // session. This allows to verify that the end-user effectively clicked
      // the button to link and will avoid that a CSRF-alike attack is being
      // performed on a logged-on end-user by a malicious person.
      if (empty($_SESSION['mydigipass_login_csrf_token'])) {
        $_SESSION['mydigipass_login_csrf_token'] = user_password(32);
      }

      // Prepare the value for the state parameter.
      $state_array = array(
        'csrf_token' => $_SESSION['mydigipass_login_csrf_token'],
        'action' => 'login',
      );
      $state_string = _mydigipass_encode_state_array($state_array);

      // Add the MYDIGIPASS.COM button.
      $form['account']['mydigipass'] = array(
        '#type' => 'item',
        '#markup' => l(t('Connect with MYDIGIPASS.COM'), '', array(
          'fragment' => ' ',
          'external' => TRUE,
          'attributes' => array(
            'class' => array('dpplus-connect'),
            'data-client-id' => check_plain(variable_get('mydigipass_client_id', '')),
            'data-redirect-uri' => check_plain(variable_get('mydigipass_callback_url', url('mydigipass/callback', array('absolute' => TRUE)))),
            'data-state' => $state_string,
            'data-style' => variable_get('mydigipass_login_form_style', 'default'),
            'data-text' => variable_get('mydigipass_login_form_text', 'secure-login'),
            'data-help' => variable_get('mydigipass_login_form_help', 'true'),
            'data-is-sandbox' => (variable_get('mydigipass_environment', '') == 'test' ? 'true' : 'false'),
          ),
        )),
      );
      // Add mydigipass_enforce_authentication_mode_during_login as first
      // validation handler.
      array_unshift($form['#validate'], 'mydigipass_enforce_authentication_mode_during_login');
      break;

    // The form which allows to reset your password.
    case 'user_pass':
      // Add mydigipass_enforce_authentication_mode_during_password_reset as
      // first validation handler.
      array_unshift($form['#validate'], 'mydigipass_enforce_authentication_mode_during_password_reset');
      break;

    // The standard user registration form.
    case 'user_register_form':
      // Generate a random 32-char string. This string serves as a csrf token
      // to detect that the click originated from within this session. It will
      // be used as a value for the state parameter and is stored in this user's
      // session. This allows to verify that the end-user effectively clicked
      // the button to link and will avoid that a CSRF-alike attack is being
      // performed on a logged-on end-user by a malicious person.
      if (empty($_SESSION['mydigipass_register_csrf_token'])) {
        $_SESSION['mydigipass_register_csrf_token'] = user_password(32);
      }

      // Prepare the value for the state parameter.
      $state_array = array(
        'csrf_token' => $_SESSION['mydigipass_register_csrf_token'],
        'action' => 'register',
      );
      $state_string = _mydigipass_encode_state_array($state_array);

      $form['account']['mydigipass'] = array(
        '#type' => 'item',
        '#markup' => l(t('Connect with MYDIGIPASS.COM'), '', array(
          'fragment' => ' ',
          'external' => TRUE,
          'attributes' => array(
            'class' => array('dpplus-connect'),
            'data-client-id' => check_plain(variable_get('mydigipass_client_id', '')),
            'data-redirect-uri' => check_plain(variable_get('mydigipass_callback_url', url('mydigipass/callback', array('absolute' => TRUE)))),
            'data-state' => $state_string,
            'data-style' => variable_get('mydigipass_register_form_style', 'large'),
            'data-text' => variable_get('mydigipass_register_form_text', 'sign-up'),
            'data-help' => variable_get('mydigipass_login_form_help', 'true'),
            'data-is-sandbox' => (variable_get('mydigipass_environment', '') == 'test' ? 'true' : 'false'),
          ),
        )),
      );
      break;

    // The form shown on the mydigipass link page when the end-user indicated
    // that he/she already had a Drupal account.
    case 'mydigipass_user_login_form':
      // Change the text on the submit button.
      $form['submit']['#value'] = t('Link account to MYDIGIPASS.COM');

      // Add a submit handler which links the MYDIGIPASS.COM account to the
      // logged on user. If authentication fails, the submit handler will not be
      // called since the request will be stopped by the validation handler(s).
      $form['#submit'][] = 'mydigipass_link_user_to_logged_on_user';
      // Add a validation handler which verifies whether the entered user is
      // already linked to a MYDIGIPASS.COM account.
      array_unshift($form['#validate'], 'mydigipass_verify_if_user_already_linked');
      break;

    // The form shown on the mydigipass link page when the end-user indicated
    // that he wants to create a new Drupal account.
    case 'mydigipass_user_register_form':
      // Fill in the email address received from MYDIGIPASS.COM
      $uuid = $_SESSION['mydigipass_uuid'];
      $query = db_select('mydigipass_user_data', 'mud')
        ->fields('mud', array('attribute_value'))
        ->condition(db_and()
          ->condition('mdp_uuid', $uuid)
          ->condition('attribute_key', 'email'));
      $mdp_email = $query->execute()->fetchField();
      $form['account']['mail']['#default_value'] = $mdp_email;
      $form['account']['name']['#default_value'] = $mdp_email;
      // The value of the password doesn't really matter since a random
      // password is created and stored when the user is effectively created.
      $form['account']['pass']['#type'] = 'value';
      $form['account']['pass']['#value'] = user_password(32);

      // Change the text on the submit button.
      $form['submit']['#value'] = t('Create new account and link to MYDIGIPASS.COM');

      // Add a submit handler which creates a new user and links the
      // MYDIGIPASS.COM account this new user.
      // If authentication fails, the submit handler will not be called since
      // the request will be stopped by the validation handler(s).
      $form['#submit'][] = 'mydigipass_link_user_to_new_user';
      break;
  }
}

/**
 * Implements hook_forms().
 */
function mydigipass_forms() {
  // mydigipass_user_login_form is a slightly modified user_login form.
  $forms['mydigipass_user_login_form']['callback'] = 'user_login';
  // mydigipass_user_register_form is a slightly modified user_register_form
  // form.
  $forms['mydigipass_user_register_form']['callback'] = 'user_register_form';

  return $forms;
}

/**
 * Implements hook_cron().
 */
function mydigipass_cron() {
  if (variable_get('mydigipass_connect_api_inconsistency', TRUE)) {
    // Important to negate the result of sync_connected_users:
    // api_inconsistency = TRUE if sync_connected_users = FALSE!
    variable_set('mydigipass_connect_api_inconsistency', !_mydigipass_sync_connected_users());
  }
}

/**
 * Implements hook_user_view().
 */
function mydigipass_user_view($account, $view_mode, $langcode) {
  // Don't do anything if the integration is not enabled.
  if (variable_get('mydigipass_integration_enabled', 0) == 0) {
    return;
  }

  // Check if the user is linked to a MYDIGIPASS.COM account.
  $query = db_select('mydigipass_user_link', 'mul')
    ->fields('mul')
    ->condition('drupal_uid', $account->uid);
  $result = $query->countQuery()->execute()->fetchField();
  if ($result == 1) {
    // The user is linked to a MYDIGIPASS.COM account, so extract the email
    // address of the MYDIGIPASS.COM account.
    $query = db_select('mydigipass_user_link', 'mul');
    $query->join('mydigipass_user_data', 'mud', 'mul.mdp_uuid = mud.mdp_uuid');
    $query->fields('mud', array('attribute_value'))
      ->condition(db_and()
        ->condition('mul.drupal_uid', $account->uid)
        ->condition('mud.attribute_key', 'email'));
    $mdp_email = $query->execute()->fetchField();
    $account->content['summary']['mydigipass'] = array(
      '#type' => 'user_profile_item',
      '#title' => 'MYDIGIPASS.COM',
      '#markup' => (empty($mdp_email) ? t('This user account is linked to MYDIGIPASS.COM.') : t('This user account is linked to the following MYDIGIPASS.COM account: @mdp_email', array('@mdp_email' => $mdp_email))),
    );

    // Add the known MYDIGIPASS.COM user data of which the administrator
    // allowed it to be shown.
    $query = db_select('mydigipass_user_link', 'mul');
    $query->leftJoin('mydigipass_user_data', 'mud', 'mul.mdp_uuid = mud.mdp_uuid');
    $query->leftJoin('mydigipass_profile_fields', 'mpf', 'mpf.name = mud.attribute_key');
    $query->fields('mud', array('attribute_key', 'attribute_value'))
      ->fields('mpf', array('title', 'weight'))
      ->condition(db_and()
        ->condition('mul.drupal_uid', $account->uid)
        ->isNotNull('mpf.name'))
        ->condition('mpf.selected', TRUE)
      ->orderBy('mpf.weight', 'ASC');

    // Only add the section if there are attributes to show.
    if ($query->countQuery()->execute()->fetchField() > 0) {
      $account->content['mydigipass_user_data'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('MYDIGIPASS.COM user data'),
        '#description' => t('This data is information which was obtained from MYDIGIPASS.COM.'),
      );
      $result = $query->execute();
      foreach ($result as $row) {
        $account->content['mydigipass_user_data'][$row->attribute_key] = array(
          '#type' => 'user_profile_item',
          '#title' => (empty($row->title) ? t($row->attribute_key) : t($row->title)),
          '#markup' => check_plain($row->attribute_value),
          '#attributes' => array('class' => 'profile-' . check_plain($row->attribute_key)),
          '#weight' => $row->weight,
        );
      }
    }
  }
  else {
    $account->content['summary']['mydigipass'] = array(
      '#type' => 'user_profile_item',
      '#title' => 'MYDIGIPASS.COM',
      '#markup' => t('This user account is not yet linked to a MYDIGIPASS.COM account.'),
    );
  }
}

/**
 * Implements hook_user_delete().
 */
function mydigipass_user_delete($account) {
  // A user account is being deleted. The personal data and the link with
  // MYDIGIPASS.COM should also be deleted.
  // Lookup the MYDIGIPASS.COM uuid which is associated with the user.
  $query = db_select('mydigipass_user_link', 'mul')
    ->fields('mul', array('mdp_uuid'))
    ->condition('drupal_uid', $account->uid);
  $uuid = $query->execute()->fetchField();

  // Delete the link between the Drupal user and the MYDIGIPASS.COM user.
  db_delete('mydigipass_user_link')
    ->condition('mdp_uuid', $uuid)
    ->execute();

  // Delete the personal data of the MYDIGIPASS.COM user.
  db_delete('mydigipass_user_data')
    ->condition('mdp_uuid', $uuid)
    ->execute();

  // Inform MYDIGIPASS.COM of the removal of the link with MYDIGIPASS.COM.
  _mydigipass_api_uuid_disconnected($uuid);
}

/**
 * Implements hook_user_login().
 */
function mydigipass_user_login(&$edit, $account) {
  // Don't do anything if the integration is not enabled.
  if (variable_get('mydigipass_integration_enabled', 0) == 0) {
    return;
  }

  // Check if this site is configured in "MYDIGIPASS.COM only" mode. If so,
  // it is important to check if the MYDIGIPASS.COM uuid has been set in the
  // current session. If so, then this indicates that the user has already
  // been authenticated by MYDIGIPASS.COM. If the uuid is not yet set in the
  // session, then the user tries to authenticate via some other means which
  // is not allowed. An occasion in which this may occur is if the user
  // received an email with a one-time login URL.
  if (variable_get('mydigipass_authentication_mode', 'mdp_only') == 'mdp_only') {
    $query = db_select('mydigipass_user_link', 'mul')
      ->fields('mul')
      ->condition('drupal_uid', $account->uid);
    $result = $query->countQuery()->execute()->fetchField();

    if (($result == 1) && !mydigipass_logged_in_with_mydigipass()) {
      global $user;
      // Load the anonymous user.
      $user = drupal_anonymous_user();
      drupal_set_message(t("This user account has been linked to a MYDIGIPASS.COM account. According to this website's policy, an account linked to MYDIGIPASS.COM can only logon via MYDIGIPASS.COM."), 'error');
      watchdog('mydigipass', 'The session for user %uid has been destroyed since the user managed to logon by not using MYDIGIPASS.COM.', array('%uid' => $account->uid), WATCHDOG_ERROR);
      // Redirect the user to the front-page. If this is not done, the user
      // can receive an access denied page in some cases (e.g. when using a
      // one-time login.
      drupal_goto();
    }
  }
}

/**
 * Implements hook_preprocess_link().
 */
function mydigipass_preprocess_link(&$variables) {
  // Conditions to add the logout-feature to the logout links:
  // 1. User must be logged in (otherwise there is no need for a logout-link).
  // 2. User must be logged in with MYDIGIPASS.COM (UUID is set in $_SESSION).
  // 3. Logout feature must be enabled.
  // 4. Link path must be user/logout.
  if (user_is_logged_in() && mydigipass_logged_in_with_mydigipass() && (variable_get('mydigipass_logout_feature', 0) == 1) && ($variables['path'] == 'user/logout')) {
    $variables['options']['attributes']['class'][] = 'dpplus-logout';
    $variables['options']['attributes']['data-client-id'] = check_plain(variable_get('mydigipass_client_id', ''));
    $variables['options']['attributes']['data-is-sandbox'] = (variable_get('mydigipass_environment', '') == 'test' ? 'true' : 'false');
  }
}

/**
 * Form validation handler to enforce the authentication mode during login.
 *
 * Form validation handler of the login form which enforces the authentication
 * mode. If the authentication mode is set to mdp_only and the account is
 * linked to MYDIGIPASS.COM then logon is denied.
 */
function mydigipass_enforce_authentication_mode_during_login($form, &$form_state) {
  if (variable_get('mydigipass_authentication_mode', 'mdp_only') == 'mdp_only') {
    $query = db_select('mydigipass_user_link', 'mul');
    $query->join('users', 'u', 'u.uid = mul.drupal_uid');
    $query->condition('u.name', trim($form_state['values']['name']))
      ->fields('mul');
    $result = $query->countQuery()->execute()->fetchField();

    if ($result == 1) {
      form_set_error('name', t("This user account has been linked to a MYDIGIPASS.COM account. According to this website's policy, an account linked to MYDIGIPASS.COM can only logon via MYDIGIPASS.COM."));
    }
  }
}

/**
 * Form validation handler for user_pass().
 *
 * Form validation handler of the password reset form which enforces the
 * authentication mode. If the authentication mode is set to mdp_only and the
 * account is linked to MYDIGIPASS.COM then resetting the user's password is
 * denied.
 */
function mydigipass_enforce_authentication_mode_during_password_reset($form, &$form_state) {
  if (variable_get('mydigipass_authentication_mode', 'mdp_only') == 'mdp_only') {
    $query = db_select('mydigipass_user_link', 'mul');
    $query->join('users', 'u', 'u.uid = mul.drupal_uid');
    $query->fields('mul')
      ->condition(db_or()
        ->condition('u.name', trim($form_state['values']['name']))
        ->condition('u.mail', trim($form_state['values']['name'])));
    $result = $query->countQuery()->execute()->fetchField();

    if ($result == 1) {
      form_set_error('name', t("This user account has been linked to a MYDIGIPASS.COM account. According to this website's policy, an account linked to MYDIGIPASS.COM can only logon via MYDIGIPASS.COM. As such you cannot use the password reset functionality."));
    }
  }
}

/**
 * Form validation handler which checks if a user is already linked to MDP.
 *
 * Form validation handler which is called after the mydigipass_user_login
 * form. This handler will stop the link process if it detects that the
 * end-user is trying to link his MYDIGIPASS.COM account to a Drupal user who
 * is already linked to another MYDIGIPASS.COM account.
 */
function mydigipass_verify_if_user_already_linked($form, &$form_state) {
  $query = db_select('mydigipass_user_link', 'mul');
  $query->join('users', 'u', 'u.uid = mul.drupal_uid');
  $query->condition('u.name', trim($form_state['values']['name']))
    ->fields('mul');
  $result = $query->countQuery()->execute()->fetchField();

  if ($result == 1) {
    form_set_error('name', t("The username %name has already been linked to a MYDIGIPASS.COM account. A user can only be linked to one MYDIGIPASS.COM account.", array('%name' => $form_state['values']['name'])));
  }
}

/**
 * Form submit handler which links an existing user to a MYDIGIPASS.COM user.
 *
 * Form submit handler which is called after the mydigipass_user_login_form
 * form. The validation handlers of the form will ensure that the user object
 * is loaded. This submit handler performs the actual linking.
 */
function mydigipass_link_user_to_logged_on_user($form, &$form_state) {
  global $user;
  $uuid = $_SESSION['mydigipass_uuid'];
  // Link the Drupal user to the MYDIGIPASS.COM user.
  $fields = array(
    'drupal_uid' => $user->uid,
    'mdp_uuid' => $uuid,
  );
  try {
    db_insert('mydigipass_user_link')->fields($fields)->execute();
  }
  catch (Exception $e) {
    watchdog_exception('mydigipass', $e);
    drupal_set_message(t('An error occurred while linking the user to MYDIGIPASS.COM.'), 'error');
    return;
  }
  drupal_set_message(t('The user has been successfully linked to MYDIGIPASS.COM.'));

  // Inform MYDIGIPASS.COM of the link of the user.
  _mydigipass_api_uuid_connected($uuid);
}

/**
 * Creates a new user and links it to a MYDIGIPASS.COM user.
 *
 * Form submit handler which is called after the mydigipass_user_register_form
 * form. This submit handler creates a new user and links this user to the
 * MYDIGIPASS.COM user. The new user is created with a random password.
 */
function mydigipass_link_user_to_new_user($form, &$form_state) {
  // Get the Drupal uid of the new user from the database.
  $query = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('u.name', $form_state['values']['name']);

  // Previous submit handlers should already have created the user.
  if ($query->countQuery()->execute()->fetchField() == 1) {
    // Link the Drupal user to the MYDIGIPASS.COM user.
    $fields = array(
      'drupal_uid' => $query->execute()->fetchField(),
      'mdp_uuid' => $_SESSION['mydigipass_uuid'],
    );
    try {
      db_insert('mydigipass_user_link')->fields($fields)->execute();
    }
    catch (Exception $e) {
      watchdog_exception('mydigipass', $e);
      drupal_set_message(t('An error occurred while linking the user to MYDIGIPASS.COM.'), 'error');
      return;
    }
    drupal_set_message(t('The user has been successfully linked to MYDIGIPASS.COM.'));

    // Inform MYDIGIPASS.COM of the link of the user.
    _mydigipass_api_uuid_connected($_SESSION['mydigipass_uuid']);
  }
  else {
    // This situation can occur if other modules are changing the submit
    // handlers linked to the user_register_form. If this submit handler is
    // called before the handler which effectively creates the user account,
    // then this error will always be displayed.
    drupal_set_message(t("Your MYDIGIPASS.COM account could not be linked because the Drupal user hasn't been created (yet).", 'error'));
  }
}

/**
 * Removes the link between the current user and MYDIGIPASS.COM.
 *
 * Submit handler called from mydigipass_form_profile();
 */
function mydigipass_form_profile_unlink($form, &$form_state) {
  // Lookup the MYDIGIPASS.COM uuid which is associated with the user.
  $query = db_select('mydigipass_user_link', 'mul')
    ->fields('mul', array('mdp_uuid'))
    ->condition('mul.drupal_uid', $form['#user']->uid);
  $uuid = $query->execute()->fetchField();

  // Delete the link between the Drupal user and the MYDIGIPASS.COM user.
  try {
    db_delete('mydigipass_user_link')
      ->condition('mdp_uuid', $uuid)
      ->execute();
  }
  catch (Exception $e) {
    watchdog_exception('mydigipass', $e);
    drupal_set_message(t('An error occurred while unlinking the account from MYDIGIPASS.COM'), 'error');
    return;
  }

  // Caring about user privacy! Delete all attributes which were saved in
  // the database.
  db_delete('mydigipass_user_data')
    ->condition('mdp_uuid', $uuid)
    ->execute();
  drupal_set_message(t('Your account has been successfully unlinked. You can no longer log in with MYDIGIPASS.COM.'));

  // Inform MYDIGIPASS.COM of the unlink.
  _mydigipass_api_uuid_disconnected($uuid);
}

/**
 * Private helper function which returns the URL of an endpoint.
 *
 * Return the URL of the token or data endpoint while taking into account the
 * environment which was selected on the admin page.
 *
 * @param string $endpoint
 *   The endpoint for which the URL is requested. Allowed values are
 *   'token_endpoint', 'data_endpoint', 'dp_connect.js', 'api-uuids-connected'
 *   and 'api-uuids-disconnected'.
 *
 * @return string
 *   The URL of the endpoint of an empty string is the environment is not yet
 *   selected or if the $endpoint value was wrong.
 */
function _mydigipass_get_endpoint_url($endpoint) {
  $environment = variable_get('mydigipass_environment', '');

  // Check if the environment is not set (i.e. the module is not yet
  // configured).
  if ($environment == '') {
    return '';
  }

  $base_url = "https://www.mydigipass.com";

  $return = '';
  switch ($endpoint) {
    case 'token_endpoint':
      $return = ($environment == 'custom' ? variable_get('mydigipass_endpoint_url_token_endpoint', '') : $base_url . '/oauth/token');
      break;

    case 'data_endpoint':
      $return = ($environment == 'custom' ? variable_get('mydigipass_endpoint_url_data_endpoint', '') : $base_url . '/oauth/user_data');
      break;

    case 'dp_connect.js':
      global $language;
      $supported_languages = variable_get('mydigipass_languages', 'en');
      $supported_languages = explode(',', $supported_languages);
      $supported_languages = array_map('trim', $supported_languages);
      // If the current language is in the list of supported languages, then it
      // will be used, otherwise English will be used.
      $lang = (in_array($language->language, $supported_languages) ? $language->language : 'en');

      if (($environment == 'test') || ($environment == 'production')) {
        $return = 'https://static.mydigipass.com/' . $lang . '/dp_connect.js';
      }
      elseif ($environment == 'custom') {
        $custom_url = variable_get('mydigipass_endpoint_url_dp_connect_js', '');
        // The string %lang can be used in a custom URL to indicate where the
        // selected language has to be set.
        $return = str_replace('%lang', $lang, $custom_url);
      }
      break;

    case 'api-uuids-connected':
      $return = ($environment == 'custom' ? variable_get('mydigipass_endpoint_url_api_uuids_connected', '') : $base_url . '/api/uuids/connected');
      break;

    case 'api-uuids-disconnected':
      $return = ($environment == 'custom' ? variable_get('mydigipass_endpoint_url_api_uuids_disconnected', '') : $base_url . '/api/uuids/disconnected');
      break;

  }
  return check_plain($return);
}

/**
 * Page callback for 'mydigipass/link'.
 *
 * Shows the first page of a wizard which allows a MYDIGIPASS.COM user to link
 * his/her MYDIGIPASS.COM account to a Drupal account.
 *
 * An end-user arrives on this page when after having authenticated at
 * MYDIGIPASS.COM and after having been redirected to the callback page. The
 * callback page detected that the MYDIGIPASS.COM was not yet linked to a
 * Drupal account and redirects the end-user to the "Link with MYDIGIPASS.COM"
 * wizard. The first page of this wizard allows the end-user to choose between
 * linking his MYDIGIPASS.COM account to an existing Drupal account or to
 * create a new Drupal account and link immediately to his/her MYDIGIPASS.COM
 * account.
 */
function mydigipass_link_user_form() {
  $form = array();

  // Check if the integration is enabled. When integration is not enabled, a
  // user could arrive at the callback page when forcefully browsing to
  // the 'mydigipass/link' page.
  if (variable_get('mydigipass_integration_enabled', 0) == 0) {
    $form[] = array(
      '#type' => 'item',
      '#markup' => t('The integration with MYDIGIPASS.COM has been disabled on this website.'),
    );
  }
  else {
    $form[] = array(
      '#type' => 'item',
      '#markup' => t("Your MYDIGIPASS.COM account is not yet linked to a user account on this website. If you already have a user account on this website, you can link it to your MYDIGIPASS.COM account. If you don't have a user account yet, create one and it will be linked to your MYDIGIPASS.COM account."),
    );

    $scenarios = array(
      'new_user' => t("I don't have a user account yet on this website. I want to create one and link it to my MYDIGIPASS.COM account."),
      'existing_user' => t("I already have a user account on this website. I want to link it to my MYDIGIPASS.COM account."),
    );

    $form['scenario'] = array(
      '#type' => 'radios',
      '#title' => t('Select one of the following options'),
      '#required' => TRUE,
      '#options' => $scenarios,
    );

    $form[] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
    );
  }

  return $form;
}

/**
 * Submit handler of the first page in the wizard to link a user.
 *
 * The submit handler only evaluates the end-user's choice:
 *  - If the end-user chose to create a new user, then he/she is redirected
 *    to mydigipass/link/new_user.
 *  - Otherwise the user already has an account and is therefore redirected
 *    to mydigipass/link/existing_user.
 */
function mydigipass_link_user_form_submit($form, &$form_state) {
  if ($form_state['values']['scenario'] == 'new_user') {
    drupal_goto('mydigipass/link/new_user');
  }
  else {
    drupal_goto('mydigipass/link/existing_user');
  }
}

/**
 * Page callback for 'mydigipass/link/new_user'.
 *
 * Second page in the wizard to link a Drupal user to MYDIGIPASS.COM.
 * This function checks whether it is allowed to create new user accounts on
 * the website. If not, then an error message is returned. If it is allowed,
 * then a form which resembles the user registration form is returned.
 * Using hook_form_alter an additional submit handler is added to the form
 * which causes that the newly created user is linked to the MYDIGIPASS.COM
 * account.
 *
 * @see mydigipass_forms()
 * @see mydigipass_form_alter()
 */
function mydigipass_link_new_user() {
  // Check if the integration is enabled. When integration is not enabled, a
  // user could arrive at the callback page when forcefully browsing to
  // the 'mydigipass/link/new_user' page.
  if (variable_get('mydigipass_integration_enabled', 0) == 0) {
    $output = t('The integration with MYDIGIPASS.COM has been disabled on this website.');
  }
  else {
    if (user_register_access()) {
      $output = t('Complete this form to create a new account on this website to link it to your MYDIGIPASS.COM account.');
      // Put form in variable before passing to drupal_render. Else we get a
      // strict warning: Only variables should be passed by reference.
      $register_form = drupal_get_form('mydigipass_user_register_form');
      $output .= drupal_render($register_form);
    }
    else {
      $output = t("According to this website's policy it is not allowed to create new accounts.");
    }
  }

  return $output;
}

/**
 * Page callback for 'mydigipass/link/existing_user'.
 *
 * Second page in the wizard to link a Drupal user to MYDIGIPASS.COM.
 * This function returns a form which resembles the user login form.
 * Using hook_form_alter an additional submit handler is added to the form
 * which causes that the existing  user is linked to the MYDIGIPASS.COM
 * account.
 *
 * @see mydigipass_forms()
 * @see mydigipass_form_alter()
 */
function mydigipass_link_existing_user() {
  // Check if the integration is enabled. When integration is not enabled, a
  // user could arrive at the callback page when forcefully browsing to
  // the 'mydigipass/link/existing_user' page.
  if (variable_get('mydigipass_integration_enabled', 0) == 0) {
    $output = t('The integration with MYDIGIPASS.COM has been disabled on this website.');
  }
  else {
    $output = t('Complete this form if you already have an account on this website. Enter your credentials to link this account to MYDIGIPASS.COM. As soon as your account is linked, you will be able to log in to this site with your MYDIGIPASS.COM authenticator.');
    // Put form in variable before passing to drupal_render. Else we get a
    // strict warning: Only variables should be passed by reference.
    $login_form = drupal_get_form('mydigipass_user_login_form');
    $output .= drupal_render($login_form);
  }

  return $output;
}

/**
 * Encodes an array into a Base64 string.
 *
 * This function encodes an array into a Base64 string so that it can be used
 * as a value to the state parameter. The state parameter is used in the OAuth
 * call to MYDIGIPASS.COM.
 *
 * @param array $state_array
 *   The array containing the values which have to be encoded.
 *
 * @return string
 *   The Base64 representation of the array.
 */
function _mydigipass_encode_state_array(array $state_array) {
  return base64_encode(json_encode($state_array));
}

/**
 * Decodes a Base64 string into an array.
 *
 * This function decodes a Base64 string into an array. The array contains the
 * values which were passed in the state parameter used in the OAuth call to
 * MYDIGIPASS.COM.
 *
 * @param string $state_string
 *   The Base64 string received by the callback function.
 *
 * @return array
 *   The decoded Base64 string.
 */
function _mydigipass_decode_state_array($state_string) {
  return json_decode(base64_decode($state_string, TRUE), TRUE);
}

/**
 * Implements hook_theme().
 */
function mydigipass_theme() {
  return array(
    'mydigipass_admin_settings_user_profile_fields_form' => array(
      'render element' => 'form',
      'file' => 'mydigipass.admin.inc',
    ),
  );
}

/**
 * Generates an SSL context to be used for SSL certificate validation.
 *
 * Helper function which returns an array which can be used by
 * the stream_context_create function.
 *
 * @return array
 *   An array containing the necessary SSL context options to check the
 *   validity of the SSL server certificate.
 */
function _mydigipass_create_ssl_context() {
  if (variable_get('mydigipass_validate_certificate', FALSE)) {
    $return = array(
      'ssl' => array(
        'verify_peer' => TRUE,
        'allow_self_signed' => FALSE,
        'CN_match' => 'www.mydigipass.com',
      ));
    $cafile = variable_get('mydigipass_validate_certificate_cafile', '');
    if (!empty($cafile)) {
      $return['ssl']['cafile'] = $cafile;
    }
  }
  else {
    $return = array();
  }

  return $return;
}

/**
 * Informs MYDIGIPASS.COM when linking a DRUPAL user with MYDIGIPASS.COM.
 *
 * After linking a MYDIGIPASS.COM user with a DRUPAL user, MYDIGIPASS.COM has
 * to be informed of this link. If this is not done, then the user risks of not
 * being able to login after several times.
 *
 * @param string $uuid
 *   A MYDIGIPASS.COM UUID.
 *
 * @return bool
 *   A boolean indicating whether contacting the MYDIGIPASS.COM API succeeded.
 */
function _mydigipass_api_uuid_connected($uuid) {
  $api_endpoint = _mydigipass_get_endpoint_url('api-uuids-connected');
  $options = array(
    'method' => 'POST',
    'headers' => array(
      'Accept' => 'application/json',
      'Content-Type' => 'application/json',
      'Authorization' => 'Basic ' . base64_encode(variable_get('mydigipass_client_id', '') . ':' . variable_get('mydigipass_client_secret', '')),
    ),
    'data' => json_encode(array("uuids" => array($uuid))),
  );

  $ssl_context_array = _mydigipass_create_ssl_context();
  if ($ssl_context_array === FALSE) {
    // A validation check failed.
    return FALSE;
  }
  $options['context'] = stream_context_create($ssl_context_array);
  $result = drupal_http_request($api_endpoint, $options);

  // Fail secure: set return value to FALSE.
  $return = FALSE;

  switch ($result->code) {
    case 201:
      $return = TRUE;
      watchdog('mydigipass', 'Successfully informed MYDIGIPASS.COM of linked user with UUID %uuid.', array('%uuid' => $uuid));
      break;

    default:
      watchdog('mydigipass', 'An error occurred while contacting the MYDIGIPASS.COM connect API endpoint for UUID %uuid. The action will be retried during the next cron run.', array('%uuid' => $uuid), WATCHDOG_WARNING);
      variable_set('mydigipass_connect_api_inconsistency', TRUE);
  }

  return $return;
}

/**
 * Informs MYDIGIPASS.COM when unlinking a DRUPAL user with MYDIGIPASS.COM.
 *
 * After unlinking a MYDIGIPASS.COM user with a DRUPAL user, MYDIGIPASS.COM has
 * to be informed of this unlinking. This has an impact on the fees that have
 * to be paid to MYDIGIPASS.COM.
 *
 * @param string $uuid
 *   A MYDIGIPASS.COM UUID.
 *
 * @return bool
 *   A boolean indicating whether contacting the MYDIGIPASS.COM API succeeded.
 */
function _mydigipass_api_uuid_disconnected($uuid) {
  $api_endpoint = _mydigipass_get_endpoint_url('api-uuids-disconnected');
  $options = array(
    'method' => 'POST',
    'headers' => array(
      'Accept' => 'application/json',
      'Content-Type' => 'application/json',
      'Authorization' => 'Basic ' . base64_encode(variable_get('mydigipass_client_id', '') . ':' . variable_get('mydigipass_client_secret', '')),
    ),
    'data' => json_encode(array("uuids" => array($uuid))),
  );

  $ssl_context_array = _mydigipass_create_ssl_context();
  if ($ssl_context_array === FALSE) {
    // A validation check failed.
    return FALSE;
  }
  $options['context'] = stream_context_create($ssl_context_array);
  $result = drupal_http_request($api_endpoint, $options);

  // Fail secure: set return value to FALSE.
  $return = FALSE;

  switch ($result->code) {
    case 201:
      $return = TRUE;
      watchdog('mydigipass', 'Successfully informed MYDIGIPASS.COM of unlinked user with UUID %uuid.', array('%uuid' => $uuid));
      break;

    default:
      watchdog('mydigipass', 'An error occurred while contacting the MYDIGIPASS.COM disconnect API endpoint for UUID %uuid. The action will be retried during the next cron run.', array('%uuid' => $uuid), WATCHDOG_WARNING);
      variable_set('mydigipass_connect_api_inconsistency', TRUE);
  }

  return $return;
}

/**
 * Sync the local database of connected users with the MYDIGIPASS.COM database.
 *
 * This function will compare the local database of connected users with the
 * list received from MYDIGIPASS.COM. If there are inconsistencies, then the
 * remote database will be updated.
 *
 * @return bool
 *   A boolean indicating whether the synchronisation succeeded or not.
 */
function _mydigipass_sync_connected_users() {
  // Get the list of connected users from MYDIGIPASS.COM.
  $api_endpoint = _mydigipass_get_endpoint_url('api-uuids-connected');
  $options = array(
    'method' => 'GET',
    'headers' => array(
      'Authorization' => 'Basic ' . base64_encode(variable_get('mydigipass_client_id', '') . ':' . variable_get('mydigipass_client_secret', '')),
      'Accept' => 'application/json',
    ),
  );

  $ssl_context_array = _mydigipass_create_ssl_context();
  if ($ssl_context_array === FALSE) {
    // A validation check failed.
    return FALSE;
  }
  $options['context'] = stream_context_create($ssl_context_array);
  $result = drupal_http_request($api_endpoint, $options);

  switch ($result->code) {
    case 200:
      $response = json_decode($result->data);
      $mdp_uuids = (is_object($response) ? $response->uuids : array());
      break;

    default:
      watchdog('mydigipass', 'An error occurred while synchronizing the local database of connected users with the MYDIGIPASS.COM database. The action will be retried during the next cron run.', array(), WATCHDOG_WARNING);
      variable_set('mydigipass_connect_api_inconsistency', TRUE);
      return FALSE;
  }

  // Get the local list of connected users.
  $query = db_select('mydigipass_user_link', 'mul')
    ->fields('mul', array('mdp_uuid'));
  $result = $query->execute();
  $local_uuids = array();
  foreach ($result as $row) {
    $local_uuids[] = $row->mdp_uuid;
  }

  // Variable to contain the result of the sync action.
  $sync_result = TRUE;

  // Check which UUIDs exist locally and not at MYDIGIPASS.COM.
  // This can occur on 2 occasions:
  // 1) When users were already connected to MYDIGIPASS.COM, but the connected
  //    API is used for the first time (i.e. on update from 7.x-1.0 to 7.x-1.1
  // 2) When a user removed the Drupal app from his launchpad.
  // In any case, we will tell MYDIGIPASS.COM that the uuid is still connected
  // locally.
  $diff = array_diff($local_uuids, $mdp_uuids);
  foreach ($diff as $uuid) {
    $sync_result &= _mydigipass_api_uuid_connected($uuid);
  }

  // Check which UUIDs exist at MYDIGIPASS.COM and not locally.
  // This can occur when access was revoked locally, but the sync with
  // MYDIGIPASS.COM has failed. We will tell MYDIGIPASS.COM that the uuid is
  // no longer connected locally.
  $diff = array_diff($mdp_uuids, $local_uuids);
  foreach ($diff as $uuid) {
    $sync_result &= _mydigipass_api_uuid_disconnected($uuid);
  }

  if ($sync_result) {
    watchdog('mydigipass', 'The local database of connected users was successfully synchronized with the MYDIGIPASS.COM database.');
  }
  else {
    watchdog('mydigipass', 'An error occurred while synchronizing the local database of connected users with the MYDIGIPASS.COM database. The action will be retried during the next cron run.', array(), WATCHDOG_WARNING);
  }

  return $sync_result;
}

/**
 * Allows to check whether the current user is logged in with MYDIGIPASS.COM.
 *
 * @return bool
 *   A boolean indicating whether the user is logged in with MYDIGIPASS.COM. A
 *   return value of TRUE means that the user is logged in with MYDIGIPASS.COM.
 */
function mydigipass_logged_in_with_mydigipass() {
  return !empty($_SESSION['mydigipass_uuid']);
}

/**
 * Return the MYDIGIPASS.COM user data so that it can be used by other modules.
 *
 * This function returns an array containing the MYDIGIPASS.COM user data of
 * a certain user based on the Drupal ID of the user. The array keys are the
 * attribute names. For example: 'email' => 'user@example.com'.
 *
 * @param string $uid
 *   A Drupal user ID.
 *
 * @return array
 *   An array containing the MYDIGIPASS.COM user data of a Drupal user. If the
 *   user is not linked with a MYDIGIPASS.COM account, an empty array will be
 *   returned. If the user is linked with MYDIGIPASS.COM, then at least the
 *   MYDIGIPASS.COM UUID and the email address will be returned.
 */
function mydigipass_user_data_by_drupal_uid($uid) {
  $query = db_select('mydigipass_user_link', 'mul');
  $query->leftJoin('mydigipass_user_data', 'mud', 'mul.mdp_uuid = mud.mdp_uuid');
  $query->fields('mud', array('attribute_key', 'attribute_value'))
    ->condition('mul.drupal_uid', $uid);
  $result = $query->execute();

  $user_data = array();
  foreach ($result as $row) {
    $user_data[check_plain($row->attribute_key)] = check_plain($row->attribute_value);
  }

  return $user_data;
}

/**
 * Return the MYDIGIPASS.COM user data so that it can be used by other modules.
 *
 * This function returns an array containing the MYDIGIPASS.COM user data of
 * a certain user based on a MYDIGIPASS.COM UUID. The array keys are the
 * attribute names. For example: 'email' => 'user@example.com'.
 *
 * @param string $uuid
 *   A MYDIGIPASS.COM UUID.
 *
 * @return array
 *   An array containing the MYDIGIPASS.COM user data of a user. If the UUID is
 *   not known in the database, an empty array will be returned. If the user is
 *   linked with MYDIGIPASS.COM, then at least the MYDIGIPASS.COM UUID and the
 *   email address will be returned.
 */
function mydigipass_user_data_by_mydigipass_uuid($uuid) {
  $query = db_select('mydigipass_user_data', 'mud');
  $query->fields('mud', array('attribute_key', 'attribute_value'))
    ->condition('mud.mdp_uuid', $uuid);
  $result = $query->execute();

  $user_data = array();
  foreach ($result as $row) {
    $user_data[check_plain($row->attribute_key)] = check_plain($row->attribute_value);
  }

  return $user_data;
}
