<?php

/**
 * Implements hook_menu().
 */
function paas_menu() {
  $menu = array();

  $menu['admin/config/development/paas'] = array(
    'title' => 'PaaS',
    'description' => 'Configure the PaaS client module to allow Project PAAS to do automated performance tests on your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paas_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $menu['paas-testing/%/%'] = array(
    'page callback' => 'paas_call_action',
    'page arguments' => array(1, 2),
    'access callback' => 'paas_call_access',
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Menu access callback.
 * 
 * This validates the given hash to prevent unauthorized users from accessing
 * the Paas test callbacks. User 1 is always given access for testing
 * purposes.
 */
function paas_call_access() {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  if (empty($_GET['key'])) {
    return FALSE;
  }
  $secret = variable_get('paas_secret', '');
  if (empty($secret)) {
    return FALSE;
  }
  return ($_GET['key'] == sha1(arg(1) . arg(2) . $secret));
}

/**
 * Settings form.
 */
function paas_settings_form() {
  $form = array();

  $form['paas_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#default_value' => variable_get('paas_secret', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Invoke hook in all enabled metrics.
 *
 * @param string $hook
 * @param bool $skip_check
 */
function paas_metric_invoke($hook, $skip_check = FALSE) {
  if ($skip_check || arg(0) != 'paas-testing') {
    $metrics = variable_get('paas_metrics', array());
    foreach ($metrics as $metric) {
      $function = "paas_metric_{$metric}_{$hook}";
      if (function_exists($function)) {
        $function();
      }
    }
  }
}

/**
 * Action callback.
 */
function paas_call_action($metric, $value) {
  $metrics = variable_get('paas_metrics', array());
  switch ($metric) {
    case 'cc':
      // Clear cache.
      $schema = drupal_get_schema();
      $tables = array_keys($schema);
      foreach ($tables as $table) {
        if (preg_match('/^cache/', $table)) {
          cache_clear_all('*', $table, TRUE);
        }
      }
      break;
    case 'enable':
      // Enable client side metric.
      if (!in_array($value, $metrics)) {
        $metrics[] = $value;
        variable_set('paas_metrics', $metrics);
      }
      break;
    case 'disable':
      // Disable client side metric.
      if (in_array($value, $metrics)) {
        $metrics = array_values(array_diff($metrics, array($value)));
        variable_set('paas_metrics', $metrics);
      }
      break;
    case 'login':
      // Login to test as different user.
      $edit = array();
      $account = user_load($value);
      $form_state['uid'] = $account->uid;
      user_login_submit(array(), $form_state);
      //user_external_login($account, $edit);
      break;
    default:
      // Call function in client side metric.
      if (in_array($metric, $metrics)) {
        $function = "paas_metric_{$metric}_call";
        if (!function_exists($function)) {
          return MENU_NOT_FOUND;
        }
        $function($value);
      }
      else {
        return MENU_NOT_FOUND;
      }
      break;
  }
}

/**
 * Dump query result as CSV.
 *
 * @param string $sql
 */
function paas_dump_csv($sql, $args = array()) {
  drupal_add_http_header('Content-Type', 'text/plain; charset=utf-8');

  $res = db_query($sql, $args);
  $first = TRUE;

  foreach ($res as $rec) {
    $rec = (array) $rec;

    if ($first) {
      $first = FALSE;
      $row = array();
      foreach (array_keys($rec) as $name) {
        $row[] = '"' . str_replace(array('\\', '"'), array('\\\\', '\\"'), $name) . '"';
      }
      print implode(',', $row);
    }
    $row = array();
    foreach ($rec as $name => $value) {
      $row[] = '"' . str_replace(array('\\', '"'), array('\\\\', '\\"'), $value) . '"';
    }
    print "\n" . implode(',', $row);
  }
}

/**
 * Implements hook_boot().
 */
function paas_boot() {
  $metrics = variable_get('paas_metrics', array());
  foreach ($metrics as $metric) {
    $file = dirname(__FILE__) . '/metrics/' . $metric . '.inc';
    if (is_file($file)) {
      include_once($file);
    }
  }
  $q = empty($_GET['q']) ? '' : $_GET['q'];
  paas_metric_invoke('boot', TRUE);
}

/**
 * Implements hook_init().
 */
function paas_init() {
  paas_metric_invoke('init', TRUE);
}

/**
 * Implements hook_preprocess_page().
 */
function paas_preprocess_page() {
  paas_metric_invoke('preprocess_page');
}

/**
 * Implements hook_preprocess_node().
 */
function paas_preprocess_node() {
  paas_metric_invoke('preprocess_node');
}

/**
 * Implements hook_exit().
 */
function paas_exit() {
  paas_metric_invoke('exit');
}
