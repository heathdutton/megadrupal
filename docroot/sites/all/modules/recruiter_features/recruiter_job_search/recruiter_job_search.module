<?php

include_once('recruiter_job_search.features.inc');

/**
 * Implements hook_menu().
 */
function recruiter_job_search_menu() {
  $items['job-bookmarks-anon'] = array(
    'title' => 'Job bookmarks',
    'page callback' => 'recruiter_job_search_bookmark_anon',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Provides a simple page where the user gets notified that he must login in
 * order to bookmarks jobs.
 */
function recruiter_job_search_bookmark_anon() {
  $output['msg'] = array(
    '#markup' => t('You need to login to bookmark jobs.'),
    '#prefix' => '<div class="recruiter-job-search-bookmark-anon-msg">',
    '#suffix' => '</div>',
  );
  $output['login'] = array(
    '#type' => 'link',
    '#title' => t('Log in'),
    '#href' => 'user',
    '#prefix' => '<div class="recruiter-job-search-bookmark-anonâ€“links">',
  );
  $suffix = '</div>';
  $destination = drupal_get_destination();
  if ($destination['destination'] != 'job-bookmarks-anon') {
    $output['cancel'] = array(
      '#type' => 'link',
      '#title' => t('Cancel'),
      '#href' => $destination['destination'],
      '#suffix' => $suffix,
    );
  }
  else {
    $output['login']['#suffix'] = $suffix;
  }

  return $output;
}

/**
 * Implements hook_admin_paths().
 *
 * Enable the overlay on this paths.
 */
function recruiter_job_search_admin_paths() {
  return array(
    'job-bookmarks-anon' => TRUE,
  );
}

/**
 * Implements hook_node_view().
 *
 * Adds custom job bookmark link for anonymous users.
 */
function recruiter_job_search_node_view($node, $view_mode) {
  global $user;
  if ($user->uid === 0 && $view_mode == "teaser" && in_array($node->type, recruiter_job_content_types())) {
    $node->content['links']['recruiter_job_search_bookmark_anon'] = array(
      '#theme' => 'links',
      '#links' => array(
        'recruiter_job_search_bookmark_anon' => array(
           'title' => '<span>' . t('Bookmark job') . '</span>',
           'href' => 'job-bookmarks-anon',
           'query' => drupal_get_destination(),
           'attributes' => array('title' => t('Bookmark job'), 'rel' => 'nofollow'),
           'html' => TRUE,
         ),
       ),
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements hook_theme().
 */
function recruiter_job_search_theme() {
  return array(
    'recruiter_job_search_total_count' => array(
      'variables' => array('total_count' => NULL),
    ),
  );
}

/**
 * Implements hook_node_update().
 */
function recruiter_job_search_node_update($node) {
  recruiter_job_serach_total_count_block_cache_clear($node);
}

/**
 * Implements hook_node_insert().
 */
function recruiter_job_search_node_insert($node) {
  recruiter_job_serach_total_count_block_cache_clear($node);
}

/**
 * Implements hook_block_info().
 */
function recruiter_job_search_block_info() {
  return array(
    'job_total_count' => array(
      'info' => t('Total job count'),
      'cache' => DRUPAL_CACHE_CUSTOM,
      'description' => t('Displays total number of published jobs. Block is cached for all users. If job count is influenced by node access contraints, then do not use it.')
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function recruiter_job_search_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'job_total_count':
      $block = recruiter_job_serach_total_count_block_content();
      break;
  }
  return $block;
}

/**
 * Returns block render array for total job count.
 */
function recruiter_job_serach_total_count_block_content() {
  // We manually cache the block until a job has been inserted or updated.
  // DRUPAL_CACHE_GLOBAL is not as flexible and does not work if a node access
  // module is activated (job application feature).
  $cid = 'recruiter_job_search_total_count';
  $cache = cache_get($cid);
  if (!$cache) {
    $block = array(
      'subject' => '',
      'content' => array(
        '#theme' => 'recruiter_job_search_total_count',
        '#total_count' => recruiter_job_search_total_count(),
      )
    );
    cache_set($cid, $block);
  }
  else {
    $block = $cache->data;
  }
  return $block;
}

/**
 * Helper function that clears the total job count cache.
 */
function recruiter_job_serach_total_count_block_cache_clear($node) {
  if (in_array($node->type, recruiter_job_content_types())) {
    cache_clear_all('recruiter_job_search_total_count', 'cache');
  }
}

/**
 * Helper function that returns the total number of published jobs.
 */
function recruiter_job_search_total_count() {
  // Avoid filter for exposed filters.
  $get = $_GET;
  $_GET = array();
  $_GET['q'] = isset($get['q']) ? $get['q'] : '';

  $view = views_get_view('job_search');
  $view->set_display('default');
  $view->execute();

  $_GET = $get;
  return $view->total_rows;
}

/**
 * Themes total number of job text.
 */
function theme_recruiter_job_search_total_count($variables) {
  return t('<a href="!url">@count jobs</a> available', array('@count' => $variables['total_count'], '!url' => url('search/job')));
}

/**
 * Implements hook_views_default_views_alter().
 */
function recruiter_job_search_views_default_views_alter(&$views) {
  if (isset($views['job_administration'])) {
    // Add an operation to index jobs with the search API.
    $views['job_administration']->display['default']->display_options['fields']['views_bulk_operations']['vbo_operations']['rules_component::rules_recruiter_job_index'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 1,
      'override_label' => 0,
      'label' => '',
    );
  }
}
