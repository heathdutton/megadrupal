<?php

/**
 * @file
 * Recruiter common module file.
 */

include_once('recruiter_common.features.inc');

/**
 * Implements hook_init().
 */
function recruiter_common_init() {
  // Add the custom colorbox-behaviour if colorbox is enabled.
  if (!drupal_installation_attempted() && module_exists('colorbox') && _colorbox_active()) {
    drupal_add_js(drupal_get_path('module', 'recruiter_common') . '/colorbox.js');
  }
  // Calculate render slim context.
  if ($plugin = context_get_plugin('condition', 'recruiter_render_slim')) {
    $plugin->execute();
  }
}

/**
 * Implements hook_page_alter().
 *
 * @see overlay_page_alter()
 * @see template_preprocess_page()
 */
function recruiter_common_page_alter(&$page) {
  // If we are limiting rendering to a subset of page regions, deny access to
  // all other regions so that they will not be processed.
  if (context_isset('context', 'recruiter_render_slim')) {
    $skipped_regions = array_diff(element_children($page), overlay_regions());
    foreach ($skipped_regions as $skipped_region) {
      $page[$skipped_region]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_theme().
 */
function recruiter_common_theme() {
  return array(
    // Register a default slim page template.
    'page__slim' => array(
      'render element' => 'page',
      'template' => 'page--slim',
      'path' => drupal_get_path('module', 'recruiter_common'),
    ),
  );
}

/**
 * Implements hook_preprocess_TEMPLATE().
 *
 * Replace the page template with the slim page template if requested.
 *
 * @see recruiter_common_page_alter()
 * @see recruiter_page_slim.tpl.php
 */
function recruiter_common_preprocess_page(&$variables) {
  if (context_isset('context', 'recruiter_render_slim')) {
    $variables['theme_hook_suggestion'] = 'page__slim';
    drupal_add_js(drupal_get_path('module', 'recruiter_common') . '/colorbox-within.js');
  }
}

/**
 * Add body slim class if site is shown in slim mode.
 */
function recruiter_common_preprocess_html(&$variables) {
  if (context_isset('context', 'recruiter_render_slim')) {
    $variables['classes_array'][] = 'slim-mode';
  }
}

/**
 * Implements hook_menu().
 */
function recruiter_common_menu() {
  $items['admin/recruiter'] = array(
    'title' => 'Recruiter',
    'description' => 'Administer recruitment content.',
    'position' => 'right',
    'weight' => -11,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' =>  '/system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/recruiter'] = array(
    'title' => 'Recruiter',
    'description' => 'Configure recruiter features',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' =>  '/system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

/**
 * Implements hook_context_plugins().
 */
function recruiter_common_context_plugins() {
  $plugins = array();
  $plugins['recruiter_render_slim_condition'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'recruiter_common') . '/plugins',
      'file' => 'recruiter_render_slim_condition.inc',
      'class' => 'recruiter_render_slim_condition',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function recruiter_common_context_registry() {
  return array(
    'conditions' => array(
      'recruiter_render_slim' => array(
        'title' => t('Recruiter render slim'),
        'description' => t('Custom recruiter condition to render pages in slim mode.'),
        'plugin' => 'recruiter_render_slim_condition',
      ),
    ),
  );
}

/**
 * Implements hook_preprocess().
 */
function recruiter_common_preprocess_entity(&$variables) {
  // Remove empty field collections for users without edit permission.
  if ($variables['entity_type'] == 'profile2' && !profile2_access('edit', $variables['profile2'])) {
    foreach ($variables['content'] as &$item) {
      if (isset($item['#field_type']) && $item['#field_type'] == 'field_collection') {
        if (empty($item['#items'])) {
          $item['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function recruiter_common_form_field_collection_item_form_alter(&$form, &$form_state, $form_id) {
  // Add help text for description items.
  if (isset($form_state['field_collection_item'])) {
    $entity = $form_state['field_collection_item'];
    $instance = field_info_instance($entity->hostEntityType(), $form['field_name']['#value'], $entity->hostEntityBundle());
    $description = $instance['description'];
    if (module_exists('i18n_field')) {
      $translated_instance = i18n_string_object_translate('field_instance', $instance);
      $description = $translated_instance['description'];
    }
    if (!empty($description)) {
      $form['help'] = array(
        '#weight' => -999,
        '#markup' => '<div class="description field-collection-item-form-description">' . filter_xss_admin($description) . '</div>',
      );
    }
  }
}


