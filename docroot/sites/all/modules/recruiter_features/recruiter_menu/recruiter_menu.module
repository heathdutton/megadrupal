<?php
/**
 * @file
 * Code for the Recruiter menu feature.
 */

include_once 'recruiter_menu.features.inc';


/**
 * Implements hook_init().
 */
function recruiter_menu_init() {
  global $user;

  // The following code checks which menu should be active and sets an
  // according context for it. First it is checked if the current page has
  // defined which menu should be active (done in applicant_menu and
  // recruiter_menu context). If no definition exists, the role of the current
  // user will be used for determining the menu. In case the user is anonymous
  // and no definition is available, the applicant menu will be presented.

  if (!context_isset('context', 'applicant_menu') && !context_isset('context', 'recruiter_menu')) {
    if (in_array('applicant', $user->roles)) {
      context_set('context', 'applicant_menu');
    }
    elseif (in_array('recruiter', $user->roles)) {
      context_set('context', 'recruiter_menu');
    }
    else {
      // Default to applicant if we do not know anything.
      context_set('context', 'applicant_menu');
    }
  }
}


/**
 * Implements hook_module_implements_alter().
 */
function recruiter_menu_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'init') {
    // Move recruiter_menu init after context init (for the menu system).
    $group = $implementations['recruiter_menu'];
    unset($implementations['recruiter_menu']);
    $implementations['recruiter_menu'] = $group;
  }
  elseif ($hook == 'menu_alter') {
    // Move recruiter_menu menu alter after views.
    $group = $implementations['recruiter_menu'];
    unset($implementations['recruiter_menu']);
    $implementations['recruiter_menu'] = $group;
  }
}


/**
 * Implements hook_menu_alter().
 */
function recruiter_menu_menu_alter(&$items) {
  // Provide access to the following pages and let the page manager pages
  // handle the access and anonymous variants.
  $items['resume']['access callback'] = 'recruiter_menu_menu_access_callback';
  $items['search/resume']['access callback'] = 'recruiter_menu_menu_access_callback';
  $items['manage/job']['access callback'] = 'recruiter_menu_menu_access_callback';
}

function recruiter_menu_menu_access_callback($perm = "") {
  return TRUE;
}

/**
 * Returns a list of menus where the menu links should be translated via t().
 *
 * The list can be alter via hook_recruiter_menu_translatable_menus_alter().
 *
 * @see recruiter_menu_menu_default_menu_links_alter()
 */
function recruiter_menu_translatable_menus() {
  static $menus;
  if (!isset($menus)) {
    $menus = array(
      'menu-applicant-menu',
      'menu-login-menu',
      'menu-recruiter-menu',
      'user-menu',
      'menu-job-add-links',
    );
    drupal_alter('recruiter_menu_translatable_menus', $menus);
  }
  return $menus;
}

/**
 * Implements hook_menu_default_menu_links_alter().
 */
function recruiter_menu_menu_default_menu_links_alter(&$configs) {
  // The core menu system only passes menu links to t() if the link_title and
  // title attribute are the same and the title_callback is set to t(). Both
  // conditions might not be true for every link, so we take care of the
  // translations on our own and mark the menu link as alterable. Furthermore
  // we directly translate the 'link_title', which is the exported value from
  // the menu link.
  // Comparison to i18n_menu: Translates menu links based on identifiers. The
  // identifiers are based on the menu link id from the database and thus not
  // stable on reverts and useful for sharing translations.
  $translatable_menus = recruiter_menu_translatable_menus();
  foreach ($configs as &$item) {
    if (in_array($item['menu_name'], $translatable_menus)) {
      $item['options']['alter'] = TRUE;
    }
  }
}

/**
 * Implements hook_menu_translated_menu_link_alter().
 *
 * @see recruiter_menu_menu_default_menu_links_alter()
 */
function recruiter_menu_translated_menu_link_alter(&$item, $map) {
  if ($item['access'] && in_array($item['menu_name'], recruiter_menu_translatable_menus())) {
    $item['title'] = t($item['link_title']);
  }
}
