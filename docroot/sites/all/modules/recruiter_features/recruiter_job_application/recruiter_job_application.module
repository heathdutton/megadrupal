<?php
/**
 * @file
 * Code for the recruiter_job_application feature.
 */

include_once 'recruiter_job_application.features.inc';

/**
 * Implements hook_theme().
 */
function recruiter_job_application_theme() {
  return array(
    'node__job_application__teaser' => array(
      'render element' => 'elements',
      'template' => 'node--job-application--teaser',
    ),
    'node__job_application__recruiter' => array(
      'render element' => 'elements',
      'template' => 'node--job-application--recruiter',
    ),
  );
}

/**
 * Implements hook_node_view().
 *
 * Adds the job apply link.
 */
function recruiter_job_application_node_view($node, $view_mode) {
  if (in_array($node->type, recruiter_job_content_types()) && $link = recruiter_job_application_get_link($node)) {
    $node->content['links']['recruiter_job_application'] = array(
      '#theme' => 'links',
      '#links' => array(
        'recruiter_job_application' => $link,
      ),
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements hook_preprocess_HOOK()
  */
function recruiter_job_application_preprocess_page(&$variables) {
  // Do not index the job apply page as it does not contain any meaningful
  // information for SEO.
  $menu_item = menu_get_item();
  if (isset($menu_item['path']) && $menu_item['path'] == 'node/%/apply') {
    $tag_attribute = 'robots';
    $tag_value = 'noindex, noarchive';
    drupal_add_html_head(
      array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => $tag_attribute,
          'content' => $tag_value,
        )
      ),
      $tag_attribute
    );
  }
}

/**
 * Helper function for determining the link to the application system, which
 * can be either the internal one, or linked to an external system, depending on
 * the node settings.
 *
 * @return array|false
 *   A renderable link array used in theme_links() or FALSE if there is no
 *   application link.
 */
function recruiter_job_application_get_link($node) {
  // Unpublished jobs don't get an apply link.
  if ($node->field_job_workflow_state[LANGUAGE_NONE][0]['value'] == 'unpublished') {
    return FALSE;
  }

  // Default link.
  $link = array(
    'title' => '<span>' .  t('Apply', array(), array('context' => 'recruiter_job_application')) . '</span>',
    'href' => 'node/' . $node->nid . '/apply',
    'attributes' => array('title' => t('Apply', array(), array('context' => 'recruiter_job_application')), 'target' => '_blank'),
    'html' => TRUE,
  );

  // Link to external system, if set.
  if (isset($node->field_job_application_workflow[LANGUAGE_NONE][0]['value']) && $node->field_job_application_workflow[LANGUAGE_NONE][0]['value'] == 'external') {
    if (!empty($node->field_job_application_link[LANGUAGE_NONE][0]['url'])) {
      $link['href'] = $node->field_job_application_link[LANGUAGE_NONE][0]['url'];
    }
    elseif (!empty($node->field_job_link[LANGUAGE_NONE][0]['url'])) {
      $link['href'] = $node->field_job_link[LANGUAGE_NONE][0]['url'];
    }
    else {
      // Do not show an application link if we do not have an url.
      return FALSE;
    }

    $link['attributes']['rel'] = 'nofollow';
    $link['external'] = TRUE;
  }
  // It does not make sense to present the internal application system if the
  // job node author is anonymous.
  elseif (empty($node->uid)) {
    return FALSE;
  }
  return $link;
}
/**
 *
 */
function recruiter_job_application_process() {

}
/**
 * Implements hook_form_alter().
 */
function recruiter_job_application_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node_edit_form']) && in_array($form['type']['#value'], recruiter_job_content_types()) && isset($form['field_job_application_workflow']) && isset($form['field_job_application_link']) && isset($form['field_job_email'])) {
    // Display application system link and email depending on the selected
    // values in application workflow field.
    $form['field_job_application_link']['#states'] = array(
      'visible' => array(
        ':input[name="field_job_application_workflow[und]"]' => array('value' => 'external'),
      ),
    );
    $form['field_job_email']['#states'] = array(
      'visible' => array(
        ':input[name="field_job_application_workflow[und]"]' => array('value' => 'internal'),
      ),
    );

    // Add help text to application email.
    $form['field_job_email'][LANGUAGE_NONE][0]['email']['#description'] = t('If set, an additional notification for incoming applications will be sent to this address.');

    // Link to application system is required if the workflow is set to required
    // and if it's not a job per link.
    if ($form['type']['#value'] != 'job_per_link') {
      $form['field_job_application_link']['#element_validate'][] = 'recruiter_job_application_link_validate';
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function recruiter_job_application_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (isset($form_state['view']) && $form_state['view']->name == "job_application_recruiter") {
    $content_types = recruiter_job_content_types();

    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $content_types)
      ->propertyCondition('uid', $user->uid)
      ->execute();

    if (isset($entities['node'])) {
      $nodes = node_load_multiple(array_keys($entities['node']));

      if (!empty($nodes)) {
        $options = array(
          '' => t('- Any -'),
        );

        $workflow_state_labels = array(
          'published' => t('Published'),
          'unpublished' => t('Unpublished'),
        );

        foreach($nodes as $nid => $node) {
          $workflow_state = $workflow_state_labels[$node->field_job_workflow_state[LANGUAGE_NONE][0]['value']];
          $options[$workflow_state][$nid] = $node->title;
        };

        $form['nid'] = array(
          '#type' => 'select',
          '#options' => $options,
          '#default' => 'all',
        );
      }
    }
  }
}

/**
 * Validation handler for field 'field_job_application_link'.
 */
function recruiter_job_application_link_validate(&$element, &$form_state) {
  if (isset($form_state['values']['field_job_application_workflow'][LANGUAGE_NONE]) &&
    $form_state['values']['field_job_application_workflow'][LANGUAGE_NONE] == 'external' &&
    empty($form_state['values']['field_job_application_link'][LANGUAGE_NONE][0]['url'])
  ) {
    form_set_error('field_job_application_link', t('Please provide a link to your company\'s application system.'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function recruiter_job_application_form_context_admin_node_form_wrapper_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && $form['#node']->type == "job_application") {
    $job_id = isset($form['#node']->field_job_application_job_ref[LANGUAGE_NONE][0]['target_id']) ? $form['#node']->field_job_application_job_ref[LANGUAGE_NONE][0]['target_id'] : FALSE;
    if ($job_id) {
      $job = node_load($job_id);
      if (!$job) {
        return;
      }

      // Hide the job reference field.
      $form['field_job_application_job_ref']['#access'] = FALSE;

      // Automatically set title for application node.
      $form['title']['#type'] = 'value';
      $form['title']['#value'] = t('Job application for @job-title', array('@job-title' => $job->title));

      // Add a link to the job and imitate the field structure so that it has
      // a consistent look in most cases.
      $markup = '<div class="field field-job-application-job-ref field-label-inline clearfix"><div class="field-label">' .
        t('Job') . ':&nbsp;</div><div class="field-items"><div class="field-item even">' .
        l($job->title, 'node/' . $job->nid) .
        '</div></div></div>';

      $form['job_info'] = array(
        '#markup' => $markup,
        '#weight' => -99,
      );

      // Rename the save button.
      $form['actions']['submit']['#value'] = t('Send application');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK.
 */
function recruiter_job_application_preprocess_node(&$variables) {
  global $user;
  if ($variables['type'] == 'job_application') {
    // Variables needed by teaser and full mode.
    $resume = profile2_load_by_user(user_load($variables['uid']), 'resume');

    // Load the personal_information of the applicant and get his photo and his
    // name.
    $field_personal_information = field_collection_item_load($resume->field_resume_personal_info[LANGUAGE_NONE][0]['value']);

    $first_name = $field_personal_information->field_resume_firstname[LANGUAGE_NONE][0]['safe_value'];
    $last_name = $field_personal_information->field_resume_lastname[LANGUAGE_NONE][0]['safe_value'];

    $submitted = format_date($variables['created'], 'custom', 'd.m.Y');

    if ($variables['view_mode'] == 'full') {
      $profile = profile2_load_by_user($variables['uid'], 'resume');
      if (isset($profile) && $profile->uid != $user->uid && recruiter_resume_get_state($profile) == 'visible') {
        $variables['theme_hook_suggestions'][] = 'node__job_application__recruiter';
        // Add the 'View resume' link.
        $link = l("$first_name $last_name", 'resume/' . $variables['uid']);
        $variables['applicant'] = $link;

        $variables['submitted'] = format_date($variables['created'], 'custom', 'd.m.Y');

        // Add resume teaser to the bottom of the application page.
        $variables['content']['resume'] = profile2_view($profile, 'teaser');
        $variables['content']['resume']['#weight'] = 10;

        // Use the colorbox to display the job.
        $job = node_load($variables['field_job_application_job_ref'][0]['target_id']);
        $job_url = recruiter_job_get_url($job);
        $variables['content']['field_job_application_job_ref'][0]['#markup'] = '<div class="job-link"><a href="' . check_plain($job_url) . '" class="recruiter-job-link" rel="nofollow">' . check_plain($job->title) . '</a></div>';
      }
      else {
        $variables['submitted'] = t('Submitted on %date', array('%date' => format_date($variables['created'])));
      }
    }
    else if($variables['view_mode'] == 'teaser') {
      // Add custom template for the teaser
      $variables['theme_hook_suggestions'][] = 'node__job_application__teaser';

      $display = array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' =>  array(
          'image_style' => 'medium',
        ),
      );

      if (recruiter_resume_private_fields_view_access('field_resume_personal_info', $resume, $user) && profile2_access('view', $resume, $user)) {
        $variables['photo'] = field_view_field('field_collection_item', $field_personal_information, 'field_resume_photo', $display);
      }

      // Add a separate submitted variable which will be renderer like a field
      // in the template.
      $variables['submitted'] = $submitted;

      // Replace the title with the First and last name of the applicant.
      $variables['title'] = $first_name . " " . $last_name;

      // Manually add rules link to teaser links.
      $rules_link = rules_link_load('job_application_reject');
      $rendered_link = rules_link_render_link($rules_link, $variables['nid'], drupal_get_destination(), array());
      if (!empty($rendered_link)) {
        $variables['content']['links']['node']['#links']['reject'] = array(
          'href' => $rendered_link['#href'],
          'title' => $rendered_link['#title'],
          'attributes' => $rendered_link['#attr'],
          'query' => $rendered_link['#options']['query'],
        );
      }
      $rules_link = rules_link_load('job_application_shortlist');
      $rendered_link = rules_link_render_link($rules_link, $variables['nid'], drupal_get_destination(), array());
      if (!empty($rendered_link)) {
        $variables['content']['links']['node']['#links']['shortlist'] = array(
          'href' => $rendered_link['#href'],
          'title' => $rendered_link['#title'],
          'attributes' => $rendered_link['#attr'],
          'query' => $rendered_link['#options']['query'],
        );
      }

      // Change the node read more link.
      if (isset($variables['content']['links']['node']['#links']['node-readmore']['title'])) {
        $variables['content']['links']['node']['#links']['node-readmore']['title'] = t('Read application');
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function recruiter_job_application_form_rules_link_trigger_form_alter(&$form, &$form_state) {
  // Alter the rules link confirm form for rejecting an application.
  if (isset($form['link']['#value']) && $form['link']['#value'] == 'job_application_reject') {
    $entity_id = $form['entity_id']['#value'];
    $application_node = node_load($entity_id);
    if ($application_node) {
      $form['#submit'] = array_merge(array('recruiter_job_application_rules_link_reject_submit'), $form['#submit']);

      $voc = taxonomy_vocabulary_machine_name_load('job_application_rejection_reason');
      $rejection_terms = taxonomy_get_tree($voc->vid);
      $options = array();
      foreach ($rejection_terms as $term) {
        $options[$term->tid] = $term->name;
      }
      $form['recruiter_job_application_rejection_reason'] = array(
        '#type' => 'select',
        '#title' => t('Rejection reason'),
        '#options' => $options,
        '#required' => TRUE,
      );
      $form['recruiter_job_application_rejection_msg'] = array(
        '#type' => 'textarea',
        '#title' => t('Rejection message'),
        '#rows' => 3,
        '#description' => t('Optional message for the applicant explaining the rejection reason.')
      );
      $form['actions']['submit']['#value'] = t('Send rejection');
    }
  }
}

/**
 * Additional submit handler for rejection rules link.
 */
function recruiter_job_application_rules_link_reject_submit($form, $form_state) {
  // Rejection reason and message are directly saved on the application node.
  $application_node = entity_metadata_wrapper('node', $form_state['values']['entity_id']);
  try {
    if (!empty($form_state['values']['recruiter_job_application_rejection_msg'])) {
      $application_node->field_job_application_rej_msg->set($form_state['values']['recruiter_job_application_rejection_msg']);
    }
    $application_node->field_job_application_rej_reason->set($form_state['values']['recruiter_job_application_rejection_reason']);
    $application_node->save();
  } catch (Exception $e) {}
}

/**
 * Implements hook_admin_paths_alter().
 */
function recruiter_job_application_admin_paths_alter(&$paths) {
  // Enable overlay for rejection rules link.
  $paths['job_application_reject/*'] = TRUE;
}

/**
 * Implements hook_block_info().
 */
function recruiter_job_application_block_info() {
  $blocks['manage_application'] = array(
    'info' => t('Job application manage block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['resume_links'] = array(
    'info' => t('Job application resume links block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function recruiter_job_application_block_view($delta) {
  switch ($delta) {
    case 'manage_application':
      return recruiter_job_application_manage_block_content();
    case 'resume_links':
      return recruiter_job_application_resume_links_block_content();
  }
}

/**
 * Provides content for the 'manage' application block, including two Rules links.
 */
function recruiter_job_application_manage_block_content() {
  $nid = arg(1);
  if (is_numeric($nid) && ($node = node_load($nid)) && $node->type == "job_application") {
    $display_options = array(
      'label' => 'inline',
      'type' => module_exists('i18n_field') ? 'i18n_list_default' : 'list_default',
    );
    $field_render_array = field_view_field('node', $node, 'field_job_application_state', $display_options);
    $output = drupal_render($field_render_array);

    $rules_links = array();
    $rules_links[] = rules_link_get_links('job_application_shortlist');
    $rules_links[] = rules_link_get_links('job_application_reject');
    foreach ($rules_links as $rules_link) {
      $link = rules_link_render_link($rules_link, $node->nid, drupal_get_destination(), array());
      if (!empty($link)) {
        $output .= drupal_render($link);
      }
    }
    return array(
      'subject' => t('Manage application'),
      'content' => array(
        'body' => array(
          '#markup' => $output,
        ),
      ),
    );
  }
}

/**
 * Provides a block with links to the resume and to the applicant's mail address,
 * in case the recruiter has access to the personal information.
 */
function recruiter_job_application_resume_links_block_content() {
  global $user;
  $nid = arg(1);

  if (is_numeric($nid) && ($node = node_load($nid)) && $node->type == "job_application") {
    $resume = profile2_load_by_user($node->uid, 'resume');
    if ($resume && profile2_access('view', $resume, $user) && recruiter_resume_private_fields_view_access('field_resume_personal_info', $resume, $user)) {
      $items = array();
      $items[] = l(t('View resume'), 'resume/' . $resume->uid);

      $profile_user = user_load($node->uid);
      $items[] = l(t('Contact applicant'), 'mailto:' . $profile_user->mail);

      return array(
        'subject' => t('Resume links'),
        'content' => array(
          'body' => array(
            '#theme' => 'item_list',
            '#items' => $items,
          ),
        ),
      );
    }
  }
}

/**
 * Returns TRUE if there are job applications for a certain job.
 *
 * @param $applicant
 *   Either the uid of an applicant user or the user object itself.
 *
 * @param $node_id
 *   The node id of a $job offering.
 *
 * @return bool
 *   TRUE if there is an application for this job and applicant, else FALSE.
 */
function recruiter_job_application_exisits_for_job($applicant, $node_id) {
  $applications_exists = &drupal_static(__FUNCTION__);

  $applicant = is_object($applicant) ? $applicant : user_load($applicant);
  if (!isset($applications_exists[$applicant->uid])) {
    $query = db_select('field_data_field_job_application_job_ref', 'jr');
    $query->addField('jr', 'field_job_application_job_ref_target_id');
    $query->innerJoin('node', 'n', 'jr.entity_id = n.nid');
    $query->condition('n.uid', $applicant->uid);
    // Store all the results in to the cache, so we don't have retrieve all
    // nodes again later.
    $applications_exists[$applicant->uid] = $query->execute()->fetchCol();
  }

  return in_array($node_id->nid, $applications_exists[$applicant->uid]) ;
}

/**
 * Returns job applications for a certain applicant and a certain job.
 *
 * @param $applicant
 *   Either the uid of an applicant user or the user object itself.
 *
 * @param $job
 *   The job node id of a job offering.
 *
 * @return array|NULL
 *   An array of node ids from job applications or NULL if first argument is not
 *   an applicant or there are no results.
 */
function recruiter_job_application_for_job($applicant, $job) {
  $applications = &drupal_static(__FUNCTION__);

  $user = is_object($applicant) ? $applicant : user_load($applicant);
  if (!in_array('applicant', $user->roles)) {
    return NULL;
  }

  if (empty($applications[$applicant->uid][$job])) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->propertyCondition('uid', $user->uid, '=');
    $query->fieldCondition('field_job_application_job_ref', 'target_id', $job);
    $query_result = $query->execute();

    if (empty($query_result)) {
      return NULL;
    }
    $applications[$applicant->uid][$job] = array_keys($query_result['node']);
  }

  return $applications[$applicant->uid][$job];
}

/**
 * Returns job applications for a certain applicant and a certain recruiter.
 *
 * @param $applicant
 *   Either the uid of an applicant user or the user object itself.
 *
 * @param $recruiter
 *   Either the uid of a recruiter user or the user object itself.
 *
 * @return array | NULL
 *   An array of node ids from job applications or NULL if first argument not an
 *   applicant and second not a recruiter or there were no results.
 */
function recruiter_job_application_for_recruiter($applicant, $recruiter) {
  $applications = &drupal_static(__FUNCTION__);

  $applicant = is_object($applicant) ? $applicant : user_load($applicant);
  $recruiter = is_object($recruiter) ? $recruiter : user_load($recruiter);

  if (!in_array('applicant', $applicant->roles) && !in_array('recruiter', $recruiter->roles)) {
    return NULL;
  }

  if (!isset($applications[$applicant->uid][$recruiter->uid])) {
    $query = db_select('field_data_field_job_application_job_ref', 'jr');
    $query->addField('jr', 'entity_id');
    $query->innerJoin('node', 'nr', 'jr.field_job_application_job_ref_target_id = nr.nid');
    $query->innerJoin('node', 'na', 'jr.entity_id = na.nid');
    $query->condition('na.uid', $applicant->uid);
    $query->condition('nr.uid', $recruiter->uid);
    $applications[$applicant->uid][$recruiter->uid] = $query->execute()->fetchCol();
    // Initialize the cache variable so that empty values get cached to.
    if (empty($applications[$applicant->uid][$recruiter->uid])) {
      $applications[$applicant->uid][$recruiter->uid] = NULL;
    }
  }

  return $applications[$applicant->uid][$recruiter->uid];
}

/**
 * Implements hook_recruiter_resume_private_fields_view_access().
 */
function recruiter_job_application_recruiter_resume_private_fields_view_access($field, $profile, $account) {
  $applications = recruiter_job_application_for_recruiter($profile->uid, $account->uid);
  if (!empty($applications)) {
    return TRUE;
  }
}

/**
 * Implements hook_recruiter_resume_private_fields_info_text_alter().
 */
function recruiter_job_application_recruiter_resume_private_fields_info_text_alter(&$text, $field_name) {
  $text .= ' ' . t('It can only be seen by you and recruiters you sent applications to.');
}

/**
 * Implements recruiter_admin_links_alter().
 */
function recruiter_job_application_recruiter_admin_links_alter(&$items, $account) {
  if (in_array('applicant', $account->roles)) {
    $items[] = l(t('Sent applications'), 'applicant/applications/' . $account->uid);
  }
  if (in_array('recruiter', $account->roles)) {
    $items[] = l(t('Received applications'), 'recruiter/applications/' . $account->uid);
  }
}
