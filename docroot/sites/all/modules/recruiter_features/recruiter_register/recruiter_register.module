<?php

/**
 * @file
 * Recruiter registration feature.
 */

include_once('recruiter_register.features.inc');

/**
 * Implements hook_theme().
 */
function recruiter_register_theme() {
  return array(
    'recruiter_register_box' => array(
      'variables' => array(),
      'template' => 'recruiter-register-box',
    )
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function recruiter_register_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move our form alter to the end so that others insert their code first.
    $group = $implementations['recruiter_register'];
    unset($implementations['recruiter_register']);
    $implementations['recruiter_register'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function recruiter_register_form_alter(&$form, &$form_state, $form_id) {
  // "user_login_block" == panels login block on pages with no access.
  // "user_login" == standard drupal login block.
  if ($form_id == "user_login_block" || $form_id == "user_login") {
    // Use links instead of tabs.
    $items = array();
    $items[] = l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
    $form['links'] = array('#markup' => theme('item_list', array('items' => $items)));

    // Add user-login class to form attributes for styling.
    $form['#attributes'] = isset($form['#attributes']) ? $form['#attributes'] : array();
    $form['#attributes']['class'] = isset($form['#attributes']['class']) ? $form['#attributes']['class'] : array();
    $form['#attributes']['class'][] = 'user-login';

    // Add register box as suffix, if registration is open.
    $registration_status = variable_get('user_register', 0);
    if (!empty($registration_status)) {
      $form['#suffix'] = theme('recruiter_register_box', array());
    }
  }
  elseif ($form_id == "user_register_form") {
    if (isset($form['terms_of_use'])) {
      // Do not render the terms of use in a fieldset.
      $form['terms_of_use']['#type'] = 'markup';

      // Change the target of the link to _blank.
      // Because of the overlay, we also need a core patch, see
      // http://drupal.org/node/771036#comment-5670590
      $terms_of_use_node_id = variable_get('terms_of_use_node_id', 0);
      if ($terms_of_use_node_id) {
        $node = node_load($terms_of_use_node_id);
        if ($node->nid) {
          $checkbox_label = filter_xss_admin(variable_get('terms_of_use_checkbox_label', t('I agree with these terms')));
          if (strpos($checkbox_label, '@link') !== FALSE) {
            $checkbox_label = str_replace('@link', l($node->title, 'node/' . $node->nid, array('attributes' => array('target' => '_blank'))), $checkbox_label);
          }
          $form['terms_of_use']['terms_of_use']['#title'] = $checkbox_label;
        }
      }
    }
  }
}

/**
 * Implements hook_translated_menu_link_alter().
 */
function recruiter_register_translated_menu_link_alter(&$link) {
  if ($link['link_path'] == 'user' && $link['module'] == 'system' && !user_is_anonymous()) {
    $link['href'] = 'user/' . $GLOBALS['user']->uid . '/edit';
  }
}

/**
 * Implements hook_menu_alter().
 */
function recruiter_register_menu_alter(&$items) {
  // Disable the direct tab to the register form, as we want the user to visit
  // pre-register site first.
  $items['user/register']['type'] = MENU_CALLBACK;
  $items['user/password']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_block_info().
 */
function recruiter_register_block_info() {
  $blocks['applicant_info'] = array(
    'info' => t('Registration information for applicants'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['recruiter_info'] = array(
    'info' => t('Registration information for recruiter'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function recruiter_register_block_view($delta) {
  switch ($delta) {
    case 'applicant_info':
      return array(
        'subject' => t('You are about to sign up as @applicant.', array('@applicant' => t('applicant'))),
        'content' => array(
          'body' => array(
            '#markup' => t('Sign up as @recruiter instead? Click <a href="!url">here</a>!', array('!url' => url('user/register/recruiter'), '@recruiter' => t('recruiter'))),
          ),
        ),
      );
    case 'recruiter_info':
      return array(
        'subject' => t('You are about to sign up as @recruiter.', array('@recruiter' => t('recruiter'))),
        'content' => array(
          'body' => array(
            '#markup' => t('Sign up as @applicant instead? Click <a href="!url">here</a>!', array('!url' => url('user/register'), '@applicant' => t('applicant'))),
          ),
        ),
      );
  }
}
