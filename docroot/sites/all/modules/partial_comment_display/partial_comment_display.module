<?php

/**
 * @file
 * Alter comment hooks
 */

/**
 * Implements hook_help().
 */
function partial_comment_display_help($path, $arg) {
  switch ($path) {
    case 'admin/help#partial_comment_display':
      $output = t("Partial comment display module is provide a facility");
      $output .= t("&nbsp;to show partial comments on node view page for");
      $output .= t("&nbsp;specific content type.");
      $output .= t("Partial comment display setting is available under comment");
      $output .= t("&nbsp;settings of content type.");

      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function partial_comment_display_form_node_type_form_alter(&$form, $form_state) {
  $role_options = partial_comment_display_roles();
  if (isset($form['type']) && !empty($role_options)) {
    $form['comment']['comment_display_mode'] = array(
      '#type' => 'checkbox',
      '#title' => t('Partial comment display'),
      '#default_value' => variable_get('comment_display_mode_' . $form['#node_type']->type, 0),
      '#description' => t('Show comment based on role previlages.'),
    );
    $form['comment']['comment_display_partial'] = array(
      '#type' => 'fieldset',
      '#title' => t('Partial comment display settings'),
      '#states' => array(
        'visible' => array('input[name="comment_display_mode"]' => array('checked' => TRUE)),
      ),
    );
    $form['comment']['comment_display_partial']['comment_display_partial_roles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Show partial comment for specific roles'),
      '#default_value' => variable_get('comment_display_partial_roles_' . $form['#node_type']->type, $role_options),
      '#options' => $role_options,
      '#description' => t('Show partial comment only for the selected role(s).'),
    );
    $form['comment']['comment_display_partial']['comment_display_per_page'] = array(
      '#type' => 'select',
      '#title' => t('No. of comment(s) display per page'),
      '#default_value' => variable_get('comment_display_per_page_' . $form['#node_type']->type, 1),
      '#options' => _partial_comment_display_per_page(),
    );
  }
}

/**
 * Return an array of "partial comments per page" settings from which the user
 * can choose.
 */
function _partial_comment_display_per_page() {
  return drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 10, 30, 50, 70, 90, 100));
}

/**
 * Return an array of "roles" who is not authorize to post comment
 * on any content type.
 */
function partial_comment_display_roles() {
  $user_roles = user_roles();
  $allow_roles = user_roles(NULL, 'post comments');
  $result = array_diff($user_roles, $allow_roles);
  $roles = array_map('check_plain', $result);
  return $roles;
}

/**
 * Implements hook_node_view().
 */
function partial_comment_display_node_view($node, $view_mode) {
  global $user;
  $user_roles = array_keys($user->roles);
  $partial_display_mode = variable_get('comment_display_mode_' . $node->type, 0);
  $partial_display_roles = variable_get('comment_display_partial_roles_' . $node->type, array());
  $allow = array_intersect($user_roles, $partial_display_roles);
  if ($node->comment != COMMENT_NODE_HIDDEN && $partial_display_mode 
          && !empty($allow) && !user_access('post comments', $user)) {
    // Only append comments when we are building a node on its own node detail
    // page. We compare $node and $page_node to ensure that comments are not
    // appended to other nodes shown on the page, for example a node_reference
    // displayed in 'full' view mode within another node.
    if ($node->comment && $view_mode == 'full' && node_is_page($node) && empty($node->in_preview)) {
        $node->content['comments'] = partial_comment_display_node_page_additions($node);
    }
  }
}

/**
 * Build the comment-related elements for node detail pages.
 *
 * @param $node
 *  A node object.
 */
function partial_comment_display_node_page_additions($node) {
  $additions = array();

  // Only attempt to render comments if the node has visible comments.
  // Unpublished comments are not included in $node->comment_count, so show
  // comments unconditionally if the user is an administrator.
  // Show partial comment as per user role and partial comment settings.
  if (($node->comment_count && user_access('access comments')) || user_access('administer comments')) {
    $mode = variable_get('comment_display_mode_' . $node->type, COMMENT_MODE_THREADED);
    $comments_per_page = variable_get('comment_display_per_page_' . $node->type, 1);
    if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
      $comments = comment_load_multiple($cids);
      comment_prepare_thread($comments);
      $build = comment_view_multiple($comments, $node);
      $comment_left = (int) $node->comment_count - $comments_per_page;
      if ($comment_left) {
        $build['count'] = array('#markup' => '<span style="float:right;">' .
            t('@count more comments', array('@count' => $comment_left)) . '</span>');
      }
      $build['pager']['#theme'] = 'pager';
      $additions['comments'] = $build;
    }
  }

  // Append comment form if needed.
  if (user_access('post comments') && $node->comment == COMMENT_NODE_OPEN && (variable_get('comment_form_location_' . $node->type, COMMENT_FORM_BELOW) == COMMENT_FORM_BELOW)) {
    $build = drupal_get_form("comment_node_{$node->type}_form", (object) array('nid' => $node->nid));
    $additions['comment_form'] = $build;
  }

  if ($additions) {
    $additions += array(
      '#theme' => 'comment_wrapper__node_' . $node->type,
      '#node' => $node,
      'comments' => array(),
      'comment_form' => array(),
    );
  }

  return $additions;
}
