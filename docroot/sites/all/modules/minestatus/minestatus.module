<?php

/**
 * @file
 * This module shows your Minecraft server parameters.
 *
 * Your Minecraft server must be running the Minequery plugin.
 */

/**
 * Implements hook_permission().
 */
function minestatus_permission() {
  return array(
    'view minecraft server host and port' => array(
      'title' => t('View the Minecraft server host and port'),
      'description' => t('Let the user see the Minecraft server host and port.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function minestatus_theme() {
  return array(
    'minestatus_list' => array(
      'arguments' => array(),
    ),
    'minestatus_list_legacy' => array(
      'arguments' => array(
        'stats' => NULL,
      ),
    ),
    'minestatus_list_gs4' => array(
      'arguments' => array(
        'stats' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function minestatus_libraries_info() {
  $libraries['phpminecraftquery'] = array(
    'name' => 'PHP-Minecraft-Query',
    'vendor url' => 'https://github.com/generalredneck/PHP-Minecraft-Query/tree/drupal',
    'download url' => 'https://github.com/generalredneck/PHP-Minecraft-Query/archive/drupal.zip',
    'version callback' => 'minestatus_get_phpminecraftquery_version',
    'files' => array(
      'php' => array(
        'MinecraftQuery.class.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Get the MinecraftQuery version number.
 * @param $library
 * @return null|string
 */
function minestatus_get_phpminecraftquery_version($library) {
  $file = DRUPAL_ROOT . '/' . $library['library path'] . '/VERSION.TXT';
  if (!file_exists($file)) {
    return NULL;
  }
  return file_get_contents($file);
}

/**
 * Implements hook_block_info().
 */
function minestatus_block_info() {
  $blocks['minestatus'] = array(
    'info' => t('Minestatus'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function minestatus_block_configure($delta = '') {
  $form = array();
  if ($delta == 'minestatus') {
    $form['minestatus_host'] = array(
      '#type' => 'textfield',
      '#title' => t('Your Minecraft server host'),
      '#default_value' => variable_get('minestatus_host', ''),
    );
    $form['minestatus_host_visibility'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show the Minecraft server host'),
      '#default_value' => variable_get('minestatus_host_visibility', 0),
      '#description' => t('This is also based on a permission, be sure to check it when you want to display the server credentials.'),
    );
    $form['minestatus_port'] = array(
      '#type' => 'textfield',
      '#title' => t('Your Minecraft server port'),
      '#default_value' => variable_get('minestatus_port', ''),
    );
    $form['minestatus_port_visibility'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show the Minecraft server port'),
      '#default_value' => variable_get('minestatus_port_visibility', 0),
      '#description' => t('This is also based on a permission, be sure to check it when you want to display the server credentials.'),
    );
    $form['minestatus_cachetime'] = array(
      '#type' => 'textfield',
      '#title' => t('Duration for which the results are cached, in seconds'),
      '#default_value' => variable_get('minestatus_cachetime', 60),
    );
    if (module_exists('libraries') && ($library = libraries_detect('phpminecraftquery')) && !empty($library['installed'])) {
      $form['minestatus_use_gs4'] = array(
        '#type' => 'checkbox',
        '#title' => t('Using GS4'),
        '#default_value' => variable_get('minestatus_use_gs4', 1),
        '#description' => t('Uncheck if your Minecraft server is using the MineQuery plugin. For most modern servers, this will be checked.'),
      );
    }
    else {
      $form['minestatus_use_gs4'] = array(
        '#type' => 'hidden',
        '#default_value' => 0,
      );
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function minestatus_block_save($delta = '', $edit = array()) {
  if ($delta == 'minestatus') {
    variable_set('minestatus_host', $edit['minestatus_host']);
    variable_set('minestatus_port', $edit['minestatus_port']);
    variable_set('minestatus_cachetime', $edit['minestatus_cachetime']);
    variable_set('minestatus_host_visibility', $edit['minestatus_host_visibility']);
    variable_set('minestatus_port_visibility', $edit['minestatus_port_visibility']);
    variable_set('minestatus_use_gs4', $edit['minestatus_use_gs4']);
  }
}

/**
 * Implements hook_block_view().
 */
function minestatus_block_view($delta = '') {
  $block = array();
  if ($delta == 'minestatus') {
    $block['subject'] = t('Minecraft server status');
    $block['content'] = theme('minestatus_list');
  }
  return $block;
}

/**
 * Connect to the Minecraft server running Minequery and retrieve the stats.
 */
function _minestatus_get_server_stats() {
  if (($cache = cache_get('minestatus_stats')) && !empty($cache->data) && $cache->expire >= time()) {
    $server_stats = $cache->data;
    $server_stats['from_cache'] = '1';
  }
  else {
    if (variable_get('minestatus_use_gs4', FALSE)) {
      $server_stats = _minestatus_get_server_stats_gs4();
    }
    else {
      $server_stats = _minestatus_get_server_stats_minequery();
    }
  }
  return $server_stats;
}

/**
 * Get stats through the new GS4 Query.
 * @return array
 */
function _minestatus_get_server_stats_gs4() {
  $library = libraries_load('phpminecraftquery');
  $server_stats = array(
    'server_name'     => t('Server offline'),
    'server_version'  => t('Server offline'),
    'server_host'     => t('Server offline'),
    'server_port'     => t('Server offline'),
    'active_players'  => t('Server offline'),
    'max_players'     => t('Server offline'),
    'plugins'         => array(t('Server offline')),
    'current_players' => array(t('Server offline')),
    'updated'         => format_date(time(), 'custom', 'j M, H:i'),
    'from_cache'      => '0',
  );

  // We shouldn't ever get here unless someone sets up some settings and then
  // deletes the library's folder or something.
  if (empty($library['loaded'])) {
    $server_stats['error'] = t('phpminecraftquery library is not loaded');
    return $server_stats;
  }

  $mcquery = new MinecraftQuery();
  try {
    $mcquery->Connect(variable_get('minestatus_host', ''), variable_get('minestatus_port', 25565));
  }
  catch (MinecraftQueryException $e) {
    // Server is offline.
    return $server_stats;
  }
  catch (Exception $e) {
    // Something else happened... This is a very bad thing. Log it to watchdog.
    $server_stats['error'] = $e->getMessage();
    watchdog_exception('minestatus', $e);
  }
  $info = $mcquery->GetInfo();
  $players = $mcquery->GetPlayers();

  return array(
    'server_name'     => $info['HostName'],
    'server_version'  => $info['Version'],
    'plugins'         => $info['Plugins'],
    'server_host'     => variable_get('minestatus_host', ''),
    'server_port'     => $info['HostPort'],
    'active_players'  => $info['Players'],
    'max_players'     => $info['MaxPlayers'],
    'current_players' => $players,
    'updated'         => format_date(time(), 'custom', 'j M, H:i'),
    'from_cache'      => '0',
  );
}

/**
 * Get the stats through the Minequery plugin.
 * @return array
 */
function _minestatus_get_server_stats_minequery() {
  $start = microtime(TRUE);
  if ($obj_sock = @fsockopen(variable_get('minestatus_host', ''), variable_get('minestatus_port', ''), $erno, $erst, 5)) {
    $end = microtime(TRUE);

    $buffer  = '';
    fwrite($obj_sock, 'QUERY_JSON' . "\n");
    while (!feof($obj_sock)) {
      $buffer .= fgets($obj_sock, 1024);
    }
    fclose($obj_sock);

    if (empty($buffer)) {
      return;
    }
    $buffer_decoded = json_decode(trim($buffer));
    $server_stats = array(
      'server_host'     => variable_get('minestatus_host', ''),
      'server_port'     => $buffer_decoded->serverPort,
      'active_players'  => $buffer_decoded->playerCount,
      'max_players'     => $buffer_decoded->maxPlayers,
      'current_players' => (!empty($buffer_decoded->playerList) ? implode(', ', $buffer_decoded->playerList) : '<em>' . t('Nobody') . '</em>'),
      'updated'         => format_date(time(), 'custom', 'j M, H:i'),
      'latency'         => ($end - $start) * 1000,
      'from_cache'      => '0',
    );
    cache_set('minestatus_stats', $server_stats, 'cache', time() + variable_get('minestatus_cachetime', 60));
  }
  else {
    $server_stats = array(
      'server_host'     => t('Server offline'),
      'server_port'     => t('Server offline'),
      'active_players'  => t('Server offline'),
      'max_players'     => t('Server offline'),
      'current_players' => t('Server offline'),
      'updated'         => format_date(time(), 'custom', 'j M, H:i'),
      'latency'         => -1,
      'from_cache'      => '0',
    );
  }
  return $server_stats;
}

/**
 * Check if we can show the server host and or port.
 * @return array $visibility
 */
function _get_host_port_visibility() {
  $visibility = &drupal_static(__FUNCTION__);
  if (!isset($visibility)) {
    $show_host = FALSE;
    if (variable_get('minestatus_host_visibility', FALSE) && user_access('view minecraft server host and port')) {
      $show_host = TRUE;
    }

    $show_port = FALSE;
    if (variable_get('minestatus_port_visibility', FALSE) && user_access('view minecraft server host and port')) {
      $show_port = TRUE;
    }
    $visibility = array('host' => $show_host, 'port' => $show_port);
  }
  return $visibility;
}

/**
 * Return a themed list of your Minecraft server parameters.
 *
 * @return
 *   A string containing the box output.
 */
function theme_minestatus_list() {
  $host = variable_get('minestatus_host', NULL);
  $port = variable_get('minestatus_port', NULL);
  $output = '';
  if ($host && $port) {
    $output .= '<div id="minestatus">';
    $stats = _minestatus_get_server_stats();
    if (variable_get('minestatus_use_gs4', FALSE)) {
      $output .= theme('minestatus_list_gs4', array('stats' => $stats));
    }
    else {
      $output .= theme('minestatus_list_legacy', array('stats' => $stats));
    }
    $output .= '<p><small>' . t('Last update @updated', array('@updated' => $stats['updated'])) . '</small></p>';
    $output .= '</div>';
  }
  return $output;
}

/**
 * Display the legacy Minecraft server stats.
 * @param $vars
 * @return string
 */
function theme_minestatus_list_legacy($vars) {
  $visibility = _get_host_port_visibility();
  $stats = $vars['stats'];

  $output = '<p>';
  if ($visibility['host']) {
    $output .= $stats['server_host'] . (($visibility['port']) ? ':' . $stats['server_port'] : '') . '<br>';
  }
  $output .= t('Response time:') . ' ' . t('@latency seconds', array('@latency' => round($stats['latency'], 2))). '<br>';
  $output .= t('Active players:') . ' ' . $stats['active_players']. '<br>';
  $output .= t('Max players:') . ' ' . $stats['max_players']. '<br>';
  $output .= t('Currently online:') . ' ' . $stats['current_players'];
  $output .= '</p>';
  return $output;
}

/**
 * Display the GS4 Minecraft server stats.
 * @param $vars
 * @return string
 */
function theme_minestatus_list_gs4($vars) {
  $visibility = _get_host_port_visibility();
  $stats = $vars['stats'];

  $output = '<h3>' . $stats['server_name'] . ' <small>(' . $stats['server_version'] . ')</small></h3>';
  if ($visibility['host']) {
    $output .= $stats['server_host'] . (($visibility['port']) ? ':' . $stats['server_port'] : '') . '<br>';
  }
  $output .= t('Players:') . ' ' . $stats['active_players'] . '/' . $stats['max_players'] . '<br>';
  $output .= t('Currently online:');
  $output .= theme('item_list', array('items' => $stats['current_players']));
  $output .= t('Plugins:');
  $output .= theme('item_list', array('items' => $stats['plugins']));

  return $output;
}
