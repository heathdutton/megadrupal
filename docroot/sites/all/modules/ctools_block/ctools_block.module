<?php
/**
 * @file
 * Provide an abstraction of hook_block using ctools plugins.
 */

/**
 * Implements hook_block_info().
 */
function ctools_block_block_info() {
  return ctools_block_handle_block_info();
}

/**
 * Implements hook_block_view().
 */
function ctools_block_block_view($delta = '') {
  return ctools_block_handle_block_view($delta);
}

/**
 * Implements hook_block_configure().
 */
function ctools_block_block_configure($delta = '') {
 return ctools_block_handle_block_configure($delta);
}

/**
 * Implements hook_block_save().
 */
function ctools_block_block_save($delta = '', $edit = array()) {
  return ctools_block_handle_block_save($delta, $edit);
}

/**
 * Handles block info from block plugin.
 */
function ctools_block_handle_block_info($module = 'ctools_block') {
  ctools_include('plugins');
  $plugins = ctools_get_plugins($module, 'block');

  // Handle block info for each plugin.
  $blocks = array();
  foreach ($plugins as $id => $plugin) {
    // Allow plugins to set core block options as per hook_block_info().
    $blocks[$id] = $plugin['options'];
    $blocks[$id]['info'] = t($plugin['info']);
  }
  return $blocks;
}

/**
 * Handles block view from block plugin.
 */
function ctools_block_handle_block_view($delta = '', $module = 'ctools_block') {
  ctools_include('plugins');
  $plugin = ctools_get_plugins($module, 'block', $delta);

  // Handle the block subject.
  if (empty($plugin['subject'])) {
    $subject_function = ctools_plugin_get_function($plugin, 'subject callback');
    if ($subject_function) {
      $block['subject'] = $subject_function();
    }
  }
  else {
    $block['subject'] = $plugin['subject'];
  }

  // Handle the block content.
  if (empty($plugin['content'])) {
    $content_function = ctools_plugin_load_function($module, 'block', $delta, 'content callback');
    if ($content_function) {
      $block['content'] = $content_function();
    }
  }
  else {
    $block['content'] = $plugin['content'];
  }

  return $block;
}

/**
 * Handles block configure from block plugin.
 */
function ctools_block_handle_block_configure($delta = '', $module = 'ctools_block') {
  ctools_include('plugins');
  $configure_function = ctools_plugin_load_function($module, 'block', $delta, 'configure callback');
  if ($configure_function) {
    return $configure_function($edit);
  }
  return;
}

/**
 * Handles block save from block plugin.
 */
function ctools_block_handle_block_save($delta = '', $edit = array(), $module = 'ctools_block') {
  ctools_include('plugins');
  $save_function = ctools_plugin_load_function($module, 'block', $delta, 'save callback');
  if ($save_function) {
    return $save_function($edit);
  }
  return;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function ctools_block_ctools_plugin_type() {
  return array(
    'block' => array(
      'cache' => TRUE,
      'defaults' => array(
        // Subject building function.
        'subject callback' => NULL,
        // Subject string is a static string that will be translated and used
        // for a subject. This replaces the dynamic subject callback.
        'subject' => '',
        // Content building function.
        'content callback' => NULL,
        // Content can be provided as a renderable array. This replaces the
        // dynamic content callback.
        'content' => array(),
        // Callback function used for building of the block configuration form.
        'configure callback' => NULL,
        // Save function used for saving the results of the configuration form.
        'save callback' => NULL,
        // Informational string used in administration display. Provided
        // seperately for easier translation.
        'info' => '',
        // Default options for block definition.
        'options' => array(),
      ),
    ),
  );
}
