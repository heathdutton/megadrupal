<?php

/**
 * @file
 * Main file for the Time Class module.
 */

/**
 * Implements hook_help().
 */
function time_class_help($path, $arg) {
  switch ($path) {
    case 'admin/help#time_class':
      return '<p>' . t("The module provides the ability to add the class of the current period to the <body> tag.") . '<br>' .
      t("You can choose from the following time periods and their respective classes:") .
      '<ul><li>' . t("Season: 'winter', 'spring', 'summer', 'autumn' classes.") . '</li><li>' . t("Month: classes with appropriate names.") . '</li>' .
      '<li>' . t("Day of week: classes with appropriate names") . '</li><li>' . t("Time of day: 'morning', 'afternoon', 'evening', 'night' classes.") . '</li></ul>' .
      t("Also, available to you three events - St Valentine's Day, Christmas and New Year with configurable periods of beginning or end of class output.") . '<br>' .
      t("Plus, editor can create their own custom classes,which will be printed for a predetermined period.") .
      '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function time_class_menu() {
  $items = array();
  $items['admin/config/development/time_class'] = array(
    'title' => 'Time class settings',
    'description' => 'Configure the Time Class.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_class_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'time_class.admin.inc',
  );

  return $items;
}

/**
 * Implements template_preprocess_html().
 */
function time_class_preprocess_html(&$vars) {
  $time_class_values = variable_get('time_class', array());

  if ($time_class_values['season']) {
    if ($time_class_values['hemisphere'] == 0) {
      switch (strtolower(date("F"))) {
        case 'december':
        case 'january':
        case 'february':
          $season = 'winter';
          break;

        case 'march':
        case 'april':
        case 'may':
          $season = 'spring';
          break;

        case 'june':
        case 'july':
        case 'august':
          $season = 'summer';
          break;

        case 'september':
        case 'october':
        case 'november':
          $season = 'autumn';
          break;

        default:
          return;
      }
    }
    elseif ($time_class_values['hemisphere'] == 1) {
      switch (strtolower(date("F"))) {
        case 'december':
        case 'january':
        case 'february':
          $season = 'summer';
          break;

        case 'march':
        case 'april':
        case 'may':
          $season = 'autumn';
          break;

        case 'june':
        case 'july':
        case 'august':
          $season = 'winter';
          break;

        case 'september':
        case 'october':
        case 'november':
          $season = 'spring';
          break;

        default:
          return;
      }
    }

    $vars['classes_array'][] = $season;
  }

  if ($time_class_values['month']) {
    $vars['classes_array'][] = strtolower(date("F"));
  }

  if ($time_class_values['day_of_week']) {
    $vars['classes_array'][] = strtolower(date("l"));
  }

  if ($time_class_values['time_of_day']) {
    // Including script to output print time_of_day class in body tag,
    // based on time from user's PC.
    // It implemented for correct work with time_of_day class
    // in different time zones.
    drupal_add_js(drupal_get_path('module', 'time_class') . '/js/time_of_day.js');
  }

  if ($time_class_values['events']['valentines_day']) {
    $vars['classes_array'][] = time_class_data('02-14', 'valentines-day');
  }

  if ($time_class_values['events']['christmas']) {
    $vars['classes_array'][] = time_class_data('12-25', 'christmas');
  }

  if ($time_class_values['events']['new_year']) {
    $vars['classes_array'][] = time_class_data('01-01', 'new-year');
  }

  $today = strtotime(date('d.m.y'));

  foreach ($time_class_values['custom_events'] as $value) {
    if (is_array($value)) {
      if ($today > strtotime($value['start_day']) &&  $today < strtotime($value['end_day'])) {
        $vars['classes_array'][] = $value['class_name'];
      }
      if ($today > strtotime($value['end_day'])) {
        drupal_set_message(t('Term of use @class expired.Update, or delete it.', array('@class' => $value['class_name'])), 'error');
      }
    }
  }
}

/**
 * Returns the class for an event.
 *
 * @param string $event_date_string
 *   String of event date.
 * @param string $class_name
 *   String of event class name.
 *
 * @return string
 *   Class name for body tag if date has been checked
 */
function time_class_data($event_date_string, $class_name) {
  $time_class_values = variable_get('time_class', array());
  $class = '';
  $event_date = strtotime($event_date_string);
  $val_day_start = date('m-d', strtotime($event_date . ' - ' . $time_class_values['events']['start_end']['start_date'] . ' days'));
  $val_day_end = date('m-d', strtotime($event_date . ' + ' . $time_class_values['events']['start_end']['end_date'] . ' days'));

  if ($val_day_start <= date('m-d') && date('m-d') <= $val_day_end) {
    $class = $class_name;
  }

  return $class;
}
