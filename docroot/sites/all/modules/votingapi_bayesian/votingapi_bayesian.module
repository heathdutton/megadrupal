<?php

include 'votingapi_bayesian.helpers.inc';
include 'votingapi_bayesian.functions.inc';

/**
 * Implements hook_votingapi_results_alter().
 */
function votingapi_bayesian_votingapi_results_alter(&$vote_results, $entity_type, $entity_id) {
  $tag = array_keys($vote_results);
  $tag = $tag[0];

  $value_type = array_keys($vote_results[$tag]);
  $value_type = $value_type[0];

  $configuration = _votingapi_bayesian_configuration();

  if (isset($configuration['config'][$tag])) {
    $config = $configuration['config'][$tag];
    $config['tag'] = $tag;

    $vote_results[$tag][$value_type]['bayesian'] = _votingapi_bayesian_compute($entity_type, $entity_id, $config);
    _votingapi_bayesian_regenerate($entity_type, $config);

  }

  foreach((array) $configuration['config'] as $tag => $config) {
    $config['tags'] = array_keys($configuration['config']);

    if (in_array($tag, $config['tags'])) {
      $config['tag'] = $tag;
    }
  }
}

function votingapi_bayesian_votingapi_metadata_alter(&$data) {
  $data['functions']['bayesian'] = array(
    'name' => t('Bayesian Average'),
    'description' => t('The Bayesian average from the votes.'),
    'module' => 'bayesian'
  );
}

function votingapi_bayesian_get_functions_info($function = NULL) {
  static $drupal_static_fast;

  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['votingapi_bayesian_functions_info'] = &drupal_static(__FUNCTION__);
  }
  $functions_info = &$drupal_static_fast['votingapi_bayesian_functions_info'];

  if (empty($functions_info)) {
    if ($cache = cache_get('votingapi_bayesian_functions_info')) {
      $functions_info = $cache->data;
    }
    else {
      $functions_info = module_invoke_all('votingapi_bayesian_functions_info');
      drupal_alter('votingapi_bayesian_functions_info', $functions_info);
      cache_set('votingapi_bayesian_functions_info', $functions_info);
    }
  }

  foreach($functions_info as $function_name => $data) {
    if (!function_exists($function_name)) {
      watchdog('votingapi_bayesian', t('@function is undefined.', array('@function' => $function_name)), array(), WATCHDOG_ERROR);
      unset($functions_info[$function_name]);
    }
  }

  if (empty($function)) {
    uasort($functions_info, '_votingapi_bayesian_sort_array_key_name');
    return $functions_info;
  }
  elseif (isset($functions_info[$function])) {
    return $functions_info[$function];
  }
  return FALSE;
}

function votingapi_bayesian_votingapi_bayesian_functions_info() {
  return array(
    '_votingapi_bayesian_get_total_sum' => array(
      'name' => 'Total sum',
      'description' => 'Total sum'
    ),
    '_votingapi_bayesian_get_avg_vote_count' => array(
      'name' => 'Average vote count',
      'description' => 'Average vote count'
    ),
    '_votingapi_bayesian_get_num_distinct_item' => array(
      'name' => 'Number of distinct items',
      'description' => 'Number of distinct items'
    ),
    '_votingapi_bayesian_get_vote_count' => array(
      'name' => 'Number of vote',
      'description' => 'Number of vote'
    ),
    '_votingapi_bayesian_get_vote_count_by_item' => array(
      'name' => 'Number of vote by item',
      'description' => 'Number of vote by item'
    ),
    '_votingapi_bayesian_get_avg' => array(
      'name' => 'Average',
      'description' => 'Average'
    ),
    '_votingapi_bayesian_get_avg_by_item' => array(
      'name' => 'Average by item',
      'description' => 'Average by item'
    ),
    '_votingapi_bayesian_get_min' => array(
      'name' => 'Minimum',
      'description' => 'Minimum'
    ),
    '_votingapi_bayesian_get_max' => array(
      'name' => 'Maximum',
      'description' => 'Maximum'
    ),
    '_votingapi_bayesian_get_std' => array(
      'name' => 'Standard deviation',
      'description' => 'Standard deviation'
    ),
    '_votingapi_bayesian_get_std_by_item' => array(
      'name' => 'Standard deviation by item',
      'description' => 'Standard deviation by item'
    ),
    '_votingapi_bayesian_get_variance' => array(
      'name' => 'Variance',
      'description' => 'Variance'
    ),
    '_votingapi_bayesian_get_variance_by_item' => array(
      'name' => 'Variance by item',
      'description' => 'Variance by item'
    ),
    '_votingapi_bayesian_get_items_median' => array(
      'name' => 'Median',
      'description' => 'Median'
    ),
    '_votingapi_bayesian_get_item_median' => array(
      'name' => 'Median by item',
      'description' => 'Median by item'
    ),
    '_votingapi_bayesian_get_zero' => array(
      'name' => 'Zero',
      'description' => 'Zero'
    )
  );
}

function votingapi_bayesian_setting_form($form, $form_state) {
  $votingapi_bayesian_config = _votingapi_bayesian_configuration();

  $form['votingapi_bayesian_config'] = array(
    '#type' => 'fieldset',
    '#title' => 'Bayesian computation configuration',
    '#collapsible' => TRUE,
    '#tree' => TRUE
  );

  $query = db_select('votingapi_vote', 'v')
    ->fields('v', array('tag'))
    ->groupBy('v.tag');
  $query->addExpression('COUNT(vote_id)', 'votes');
  $result = $query->execute();

  $tags = array();
  foreach($result as $record) {
    $tags[$record->tag] = $record->tag . '(' . $record->votes . ' votes)';
  }

  $default_value = array();
  if (!empty($votingapi_bayesian_config['config'])) {
    $default_value = array_combine(array_keys($votingapi_bayesian_config['config']), array_keys($votingapi_bayesian_config['config']));
  }
  $form['votingapi_bayesian_config']['votingapi_bayesian_tags'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Available tags',
    '#options' => $tags,
    '#default_value' => $default_value
  );

  $functions_info = votingapi_bayesian_get_functions_info();

  $functions = array();
  foreach($functions_info as $function => $data) {
    $functions[$function] = $data['name'];
  }

  foreach((array) $tags as $tag => $data) {
    $votingapi_bayesian_tags_config[$tag] = array(
      '#weight' => 1,
      '#type' => 'fieldset',
      '#title' => $tag . ' configuration',
      '#collapsible' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="votingapi_bayesian_config[votingapi_bayesian_tags][' . $tag . ']"]' => array('checked' => TRUE)
        )
      )
    );

    if (empty($votingapi_bayesian_config['config'][$tag])) {
      $votingapi_bayesian_config['config'][$tag] = array(
        'function_c' => '_votingapi_bayesian_get_avg_vote_count',
        'function_m' => '_votingapi_bayesian_get_std'
      );
    }

    $votingapi_bayesian_tags_config[$tag]['function_c'] = array(
      '#type' => 'select',
      '#title' => 'Function to compute C',
      '#options' => $functions,
      '#default_value' => isset($votingapi_bayesian_config['config'][$tag]['function_c']) ? $votingapi_bayesian_config['config'][$tag]['function_c'] : ''
    );

    $votingapi_bayesian_tags_config[$tag]['function_m'] = array(
      '#type' => 'select',
      '#title' => 'Function to compute m',
      '#options' => $functions,
      '#default_value' => isset($votingapi_bayesian_config['config'][$tag]['function_m']) ? $votingapi_bayesian_config['config'][$tag]['function_m'] : ''
    );

    $form['votingapi_bayesian_config']['config'] = $votingapi_bayesian_tags_config;
  }

  return $form;
}

function votingapi_bayesian_form_votingapi_settings_form_alter(&$form, &$form_state) {
  $test = drupal_retrieve_form('votingapi_bayesian_setting_form', $form_state);
  $form += $test;
  $form['#validate'][] = 'votingapi_bayesian_setting_form_validate';
}

function votingapi_bayesian_setting_form_validate($form, &$form_state) {
  $votingapi_bayesian_config = array();

  foreach($form_state['values']['votingapi_bayesian_config']['votingapi_bayesian_tags'] as $tag) {
    if (isset($form_state['values']['votingapi_bayesian_config']['config'][$tag])) {
      $votingapi_bayesian_config[$tag] = $form_state['values']['votingapi_bayesian_config']['config'][$tag];
    }
  }

  $form_state['values']['votingapi_bayesian_config']['config'] = $votingapi_bayesian_config;
  unset($form_state['values']['votingapi_bayesian_config']['votingapi_bayesian_tags']);
}
