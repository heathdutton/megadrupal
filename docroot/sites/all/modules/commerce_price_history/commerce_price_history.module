<?php

/**
 * @file
 * Implements a Price History feature.
 */

// @todo Remove when http://drupal.org/node/977052 is fixed.
require_once dirname(__FILE__) . '/commerce_price_history.field.inc';

/**
 * Implements hook_commerce_product_insert().
 */
function commerce_price_history_commerce_product_insert($product) {
  $commerce_price_history_fields = _commerce_price_history_get_fields_by_type('commerce_price_history');
  $instances = field_info_instances('commerce_product', $product->type);

  foreach (array_intersect_key($instances, $commerce_price_history_fields) as $field_name => $instance) {
    list($bundle, $attached_field_name) = explode(':', $instance['settings']['attached_field']);
    $field_items = field_get_items('commerce_product', $product, $attached_field_name);
    $price = reset($field_items);

    commerce_price_history_save($instance['settings']['attached_field'], $product->product_id, $price['amount'], $price['currency_code']);
  }
}

/**
 * Implements hook_commerce_product_update().
 */
function commerce_price_history_commerce_product_update($product) {
  $commerce_price_history_fields = _commerce_price_history_get_fields_by_type('commerce_price_history');
  $instances = field_info_instances('commerce_product', $product->type);

  foreach (array_intersect_key($instances, $commerce_price_history_fields) as $field_name => $instance) {
    list($bundle, $attached_field_name) = explode(':', $instance['settings']['attached_field']);
    $field_items = field_get_items('commerce_product', $product, $attached_field_name);
    $price = reset($field_items);

    // Get last saved price amount for this field.
    $previous_amount = db_select('commerce_price_history', 'cph')
      ->fields('cph', array('amount'))
      ->condition('attached_field', $instance['settings']['attached_field'])
      ->condition('product_id', $product->product_id)
      ->orderBy('timestamp', 'DESC')
      ->execute()
      ->fetchField();

    // If the amount has changed, save it.
    if ($previous_amount != $price['amount']) {
      // @todo Also check for currency_code changes?
      commerce_price_history_save($instance['settings']['attached_field'], $product->product_id, $price['amount'], $price['currency_code']);
    }
  }
}

/**
 * Saves a product price in the price history table.
 *
 * @param string $attached_field
 *   A string in form of 'commerce_product_type:field_bundle' to which
 *   this price is attached.
 * @param int $product_id
 *   Product id.
 * @param float $amount
 *   Product price amount.
 * @param string $currency_code
 *   The currency code for the price.
 * @param int $timestamp
 *   (optional) The timestamp for this price history record. Defaults to REQUEST_TIME.
 *
 * @return
 *   The return value of the call to drupal_write_record() to save the product
 *   price, either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating
 *   the type of query performed to save the product price.
 */
function commerce_price_history_save($attached_field, $product_id, $amount, $currency_code, $timestamp = REQUEST_TIME) {
  $price_history = array(
    'attached_field' => $attached_field,
    'product_id' => $product_id,
    'amount' => $amount,
    'currency_code' => $currency_code,
    'timestamp' => $timestamp,
  );

  return drupal_write_record('commerce_price_history', $price_history);
}

/**
 * Loads the price history for a specified field and product.
 *
 * @param string $attached_field
 *   A string in form of 'commerce_product_type:field_bundle' to which
 *   this price is attached.
 *  * @param int $product_id
 *   Product id.
 * @param int $interval
 *   (optional) Interval (in days) for how far back the price history should go.
 *   Defaults to 0.
 * 
 * @return
 *   An array of product price history objects.
 */
function commerce_price_history_load($attached_field, $product_id, $interval = 0) {
  $timestamp = REQUEST_TIME - ($interval * 86400);

  $result = db_select('commerce_price_history', 'cph')
    ->fields('cph', array('amount', 'currency_code', 'timestamp'))
    ->condition('attached_field', $attached_field)
    ->condition('product_id', $product_id)
    ->condition('timestamp', $timestamp, '>')
    ->orderBy('timestamp', 'ASC')
    ->execute()
    ->fetchAll();

  return $result;
}

/**
 * Implements hook_theme().
 */
function commerce_price_history_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_price_history_chart' => array(
      'variables' => array(
        'product_id' => NULL,
        'chart_data' => array(),
        'chart_title' => 'array()',
        'chart_date_format' => '',
        'chart_width' => '',
        'chart_height' => '',
      ),
      'file' => 'commerce_price_history.theme.inc',
    ),
  );
}

/**
 * Generates data points for a chart.
 *
 * @param array $price_history
 *   An array of commerce_price_history entries.
 *
 * @return
 *   An array of chart data points.
 */
function _commerce_price_history_generate_data($price_history, $chart_interval, $chart_data_points) {
  $chart_data = array();

  // Determine how many days we have in the data array.
  $data_interval = round(abs(REQUEST_TIME - $price_history[0]->timestamp)/60/60/24);

  // Automatically adjust the chart interval and data points if we have less
  // data than expected.
  $data_points = 0;
  if ($data_interval <= $chart_interval) {
    $interval = $data_interval;
    // Data points cannot be higher than the number of days.
    $data_points = ($chart_data_points > $data_interval) ? $data_interval : $chart_data_points;
  }
  else {
    $interval = $chart_interval;
    $data_points = $chart_data_points;
  }

  // Stop here if we don't have at least one chart data point available.
  if ($data_points == 0) {
    return $chart_data;
  }

  // Set current date values.
  $current_day = date('d', REQUEST_TIME);
  $current_month = date('m', REQUEST_TIME);
  $current_year = date("Y", REQUEST_TIME);

  // Generate an array with known price amount values.
  $user_currency = NULL;
  if (module_exists('commerce_multicurrency')) {
    $user_currency = commerce_multicurrency_get_user_currency_code();
  }
  $known_price_values = array();
  foreach ($price_history as $price) {
    $key = date("Ymd", $price->timestamp);
    $known_price_values[$key] = array(
      'amount' => $user_currency ? commerce_multicurrency_conversion($price->amount, $price->currency_code, $user_currency) : $price->amount,
      'currency_code' => $price->currency_code,
    );
  }

  // Make sure we have enough data in $chart_price_values to account for
  // $skip_interval rounding.
  $chart_price_values_interval = $interval + 3;

  // Generate an array with price amount values for each day from the interval.
  $chart_price_values = array();
  $last_price = reset($known_price_values);
  for ($i = $chart_price_values_interval; $i >= 0; $i--) {
    $key = date("Ymd", mktime(0, 0, 0, $current_month, ($current_day - $i), $current_year));
    $price = (isset($known_price_values[$key])) ? $known_price_values[$key] : $last_price;
    $last_price = $price;
    $chart_price_values[$key] = $price;
  }

  // Generate an array with price history data points.
  $skip_interval = round($interval / $data_points);
  for ($i = 0; $i < $data_points; $i++) {
    $time = mktime(0, 0, 0, $current_month, ($current_day - ($skip_interval * $i)), $current_year);
    $key = date("Ymd", $time);
    $chart_data_value = array(
      'timestamp' => $time,
      'price' => commerce_currency_amount_to_decimal($chart_price_values[$key]['amount'], $chart_price_values[$key]['currency_code']),
    );
    array_unshift($chart_data, $chart_data_value);
  }

  return $chart_data;
}

/**
 * Returns a list of fields of a specified type.
 *
 * @todo Remove when http://drupal.org/node/1315046 is fixed.
 *
 * @param string $field_type
 * 
 * @return array
 */
function _commerce_price_history_get_fields_by_type($field_type) {
  $fields = array();
  foreach (field_info_fields() as $field_name => $field_info) {
    if ($field_info['type'] == $field_type) {
      $fields[$field_name] = $field_info;
    }
  }

  return $fields;
}
