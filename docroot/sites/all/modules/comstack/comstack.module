<?php
/**
 * @file
 * comstack.module
 */

// Constants.
define('COMSTACK_ALLOW', 'allow');
define('COMSTACK_DENY', 'deny');

// Drupal lives for arrays, I bring order via includes.
include_once __DIR__ . '/includes/comstack.drush.inc';
include_once __DIR__ . '/includes/comstack.entity.inc';
include_once __DIR__ . '/includes/comstack.forms.inc';
include_once __DIR__ . '/includes/comstack.theme.inc';
include_once __DIR__ . '/includes/comstack.comstack.inc';

/**
 * Implements hook_permission().
 */
function comstack_permission() {
  $permissions = array(
    'administer comstack settings' => array(
      'title' => t('Administer Communications stack settings'),
      'description' => t('General permission for altering stack settings, does not include bypass access control permission.'),
      'restrict access' => TRUE,
    ),
    'administer comstack message_types' => array(
      'title' => t('Administer message types'),
      'description' => t('Allows users to create, edit and delete Message types (bundles).'),
      'restrict access' => TRUE,
    ),
    'administer comstack content' => array(
      'title' => t('Administer Communications Stack content'),
      'description' => t('Catch all permission for Communications Stack content.'),
      'restrict access' => TRUE,
    ),
    'view deleted comstack messages' => array(
      'title' => t('View messages which have been marked as deleted'),
      'description' => t('In certain cases like with Private Messaging Comstack will retain deleted messages if told to for potential future review in cases of abuse.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function comstack_menu() {
  $items = array();
  $includes_dir = drupal_get_path('module', 'comstack') . '/includes';

  // Administration menu items.
  $items['admin/structure/comstack'] = array(
    'title' => 'Communications Stack',
    'description' => 'Manage the Communications Stack.',
    'access arguments' => array('administer comstack settings'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/structure/comstack/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage the Communications Stack.',
    'access arguments' => array('administer comstack settings'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => -10,
  );

  $items['admin/structure/comstack/settings/general'] = array(
    'title' => 'General Settings',
    'description' => 'General settings for Comstack.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comstack_admin_settings_form'),
    'access arguments' => array('administer comstack settings'),
    'weight' => -1,
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function comstack_ctools_plugin_type() {
  return array(
    'input_methods' => array(
      'use hooks' => TRUE,
    ),
    'ui' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function comstack_ctools_plugin_directory($module, $plugin) {
  if ($module === 'comstack' && in_array($plugin, array('input_methods', 'ui'))) {
    return "plugins/comstack/$plugin";
  }
  elseif ($module === 'entityreference') {
    return 'plugins/entityreference/' . $plugin;
  }
  elseif ($module === 'restful') {
    return "plugins/restful/$plugin";
  }
}

/**
 * Implements hook_libraries_info().
 */
function comstack_libraries_info() {
  $libraries = array();

  if (variable_get('comstack_define_angular_libraries', TRUE)) {
    $libraries['angularjs'] = array(
      'name' => 'AngularJS',
      'vendor url' => 'https://angularjs.org/',
      'version arguments' => array(
        'file' => 'angular.js',
        'pattern' => '/AngularJS v([0-9.]+)/',
        'lines' => 3,
      ),
      'files' => array(
        'js' => array('angular.js'),
      ),
      'variants' => array(
        'minified' => array(
          'files' => array(
            'js' => array('angular.min.js'),
          ),
        ),
      ),
    );

    $libraries['ui-router'] = array(
      'name' => 'ui-router',
      'vendor url' => 'https://github.com/angular-ui/ui-router',
      'download url' => 'https://github.com/angular-ui/ui-router/releases',
      'version arguments' => array(
        'file' => 'release/angular-ui-router.js',
        'pattern' => '/version v([0-9.]+)/',
        'lines' => 3,
      ),
      'path' => 'release',
      'files' => array(
        'js' => array('angular-ui-router.js'),
      ),
      'variants' => array(
        'minified' => array(
          'files' => array(
            'js' => array('angular-ui-router.min.js'),
          ),
        ),
      ),
      'dependencies' => array(
        'angularjs (>=1.4.5)',
      ),
    );

    $libraries['angular-resource'] = array(
      'name' => 'angular-resource',
      'vendor url' => 'https://github.com/angular/bower-angular-resource',
      'download url' => 'https://github.com/angular/bower-angular-resource/releases',
      'version arguments' => array(
        'file' => 'angular-resource.js',
        'pattern' => '/v([0-9.]+)-build.([0-9]+)/',
        'lines' => 3,
      ),
      'files' => array(
        'js' => array('angular-resource.js'),
      ),
      'variants' => array(
        'minified' => array(
          'files' => array(
            'js' => array('angular-resource.min.js'),
          ),
        ),
      ),
      'dependencies' => array(
        'angularjs (>=1.4.5)',
      ),
    );
  }

  return $libraries;
}

/**
 * Implements hook_js_alter().
 */
function comstack_js_alter(&$javascript) {
  $angular_path = libraries_get_path('angularjs') . '/angular.js';

  if (isset($javascript[$angular_path])) {
    $javascript[$angular_path]['group'] = -200;
    $javascript[$angular_path]['weight'] = -200;
  }
}

/* Base functions for messing with Comstack ctools plugins. */

/**
 * Get Comstack plugins of a specific type.
 */
function comstack_get_plugins($type) {
  $types = &drupal_static(__FUNCTION__);

  if (!isset($types[$type])) {
    $types[$type] = array();

    ctools_include('context');
    ctools_include('plugins');
    $plugins = ctools_get_plugins('comstack', $type);

    // Sort em.
    if ($plugins) {
      uasort($plugins, function($a, $b) {
        return $a['weight'] - $b['weight'];
      });
    }

    $types[$type] = $plugins;
  }

  return $types[$type];
}

/**
 * Get a plugin type as a flat array.
 */
function comstack_get_plugins_flat($type) {
  $types = comstack_get_plugins($type);
  $types_flat = array();

  if (!empty($types)) {
    foreach ($types as $id => $plugin) {
      $types_flat[$id] = $plugin['title'];
    }
  }

  return $types_flat;
}

/**
 * Grab all available input methods.
 */
function comstack_get_input_methods() {
  return comstack_get_plugins('input_methods');
}

/**
 * Grab an array of input_methods with id as the index and label as the value.
 */
function comstack_get_input_methods_flat() {
  return comstack_get_plugins_flat('input_methods');
}

/**
 * Function to grab all available user interfaces.
 */
function comstack_get_uis() {
  return comstack_get_plugins('ui');
}

/**
 * Grab an array of user interfaces with id as the index and label as the
 * value.
 */
function comstack_get_uis_flat() {
  return comstack_get_plugins_flat('ui');
}

/**
* The functions comstack_get_message_types() and
* comstack_get_message_types_flat() can be found in
* includes/comstack.entity.inc.
*/

/**
 * Implements hook_image_default_styles().
 */
function comstack_image_default_styles() {
  $styles = array();

  $styles['comstack-100-100'] = array(
    'label' => 'comstack-100-100',
    'effects' => array(
      1 => array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 100,
          'height' => 100,
        ),
        'weight' => 0,
      ),
    ),
  );

  $styles['comstack-200-200'] = array(
    'label' => 'comstack-200-200',
    'effects' => array(
      1 => array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 200,
          'height' => 200,
        ),
        'weight' => 1,
      ),
    ),
  );

  return $styles;
}
