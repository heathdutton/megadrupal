<?php

/**
 * @file
 * DropShark module code.
 */

define('DROPSHARK_HOST', 'http://data.dropshark.io');
define('DROPSHARK_QUEUE_DEFAULT', 'DropSharkDbQueue');
define('DROPSHARK_QUEUE_LOCK_MAX_DEFAULT', 300);
define('DROPSHARK_QUEUE_MAX_PROCESS_DEFAULT', 100);
define('DROPSHARK_REQUEST_DEFAULT', 'DropSharkRequestDefault');

/**
 * Implements hook_menu().
 */
function dropshark_menu() {
  $items['admin/config/services/dropshark'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'DropShark',
    'description' => 'Configure your site to utilize the DropShark monitoring, trending, and alerts service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dropshark_admin_config'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dropshark.admin.inc',
  );

  return $items;
}

/**
 * Gets the configured DropShark queue processing class.
 *
 * @return DropSharkQueue
 *   The queue processor configured for use.
 */
function dropshark_get_queue() {
  $queue = &drupal_static(__FUNCTION__);

  if (!$queue) {
    $request_class = variable_get('dropshark_request_class', DROPSHARK_REQUEST_DEFAULT);
    $class = variable_get('dropshark_queue_class', DROPSHARK_QUEUE_DEFAULT);
    $request = new $request_class();
    $queue = new $class($request);
  }

  return $queue;
}

/**
 * Set data to be added to the queue
 *
 * Data is held in a static queue and added to the processing queue at the end
 * of the page request.
 *
 * @param array $data
 *   Data to add to the static queue.
 * @param bool $reset
 *   Reset the static queue.
 *
 * @return array
 *   The queued data.
 */
function dropshark_queue_data($data = NULL, $reset = FALSE) {
  static $queue = array();
  static $registered = FALSE;

  if (!$registered) {
    drupal_register_shutdown_function('dropshark_queue_request_data');
    $registered = TRUE;
  }

  if ($reset) {
    $queue = array();
  }

  if ($data !== NULL) {
    $queue[] = $data;
  }

  return $queue;
}

/**
 * Save data from static request queue into persistent a queue.
 */
function dropshark_queue_request_data() {
  // TODO: investigate adding multiple queued data items in a single call.
  $queue = dropshark_get_queue();
  foreach (dropshark_queue_data() as $data) {
    $queue->add($data);
  }
  dropshark_queue_data(NULL, TRUE);
}

/**
 * Process items in the DropShark queue.
 */
function dropshark_queue_process() {
  $queue = dropshark_get_queue();
  $queue->process();
}
