<?php
/**
 * @file
 * Main module implementation.
 */

/**
 * Implements hook_menu().
 */
function services_sso_client_profile_flag_menu() {
  $items = array();

  $items['admin/config/services/sso-client/flag'] = array(
    'title' => 'Profile Flags',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_sso_client_profile_flag_admin_form'),
    'access arguments' => array('administer services sso client'),
    'file' => 'includes/services_sso_client_profile_flag.admin.inc',
  );

  $items['admin/config/services/sso-client/actions'] = array(
    'title' => 'Profile Flag Actions',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_sso_client_profile_flag_actions'),
    'file' => '/includes/services_sso_client_profile_flag.admin.inc',
    'access arguments' => array('administer services sso client'),
  );

  return $items;
}

/**
 * Implements hook_user_operations().
 */
function services_sso_client_profile_flag_user_operations() {
  $operations = array(
    'reset' => array(
      'label' => t('Reset profile flags for the selected users'),
      'callback' => 'services_sso_client_profile_flag_reset',
      'callback arguments' => array(FALSE),
    ),
  );
  return $operations;
}

/**
 * Implements hook_services_sso_client_update_remote_process().
 */
function services_sso_client_profile_flag_services_sso_client_update_remote_process($user, $account) {
  // If using services_sso_client_profile_flag
  // make sure the flags are loaded
  //drupal_set_message('saving...');
  ProfileFlag::saveUserFlags($user);
  ProfileFlag::processUserFlags($account->uid);
}

function services_sso_client_profile_flag_services_sso_client_profile_flag_action_post_apply($flag, $action, $uids) {
  //drupal_set_message('applying....');
}

/**
 * Implements hook_user_login().
 */
function services_sso_client_profile_flag_user_login(&$edit, $account) {
  // Process all the flag actions associated with this account.
  ProfileFlag::processUserFlags($account->uid);
}

/**
 * Implements hook_user_logout().
 */
function services_sso_client_profile_flag_user_logout($account) {
  // Process all the flag actions associated with this account.
  ProfileFlag::processUserFlags($account->uid);
}

/**
 * Implements hook_user_update().
 */
function services_sso_client_profile_flag_user_update(&$edit, $account, $category) {
  // Process all the flag actions associated with this account.
  ProfileFlag::processUserFlags($account->uid);
}

/**
 * Implements hook_services_sso_client_update_remote_update().
 */
function services_sso_client_profile_flag_services_sso_client_update_remote_update($uid) {

}

/**
 * Implements hook_user_delete().
 */
function services_sso_client_profile_flag_user_delete($account) {
  db_delete('services_sso_client_profile_flag_user')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Resets selected users
 *
 * @param $users
 *	The users to be reset
 * @param $all
 *	Boolean to determine whether or not to reset all of the users
 */
function services_sso_client_profile_flag_reset($users = array(), $all = FALSE) {
  if (empty($users)) {
    if ($all === TRUE) {
      //The Button was pushed; reset all
    }
    else {
      //shouldn't get here; selected 0 users in bulk operations, drupal catches this error before we get here
    }
  }
  else {
    //only reset certain users
  }
}

/**
 * Load all the libraries this module uses.
 */
function services_sso_client_profile_flag_load_includes() {
  module_load_include('php', 'services_sso_client_profile_flag', 'includes/profileFlagAction.class');
  module_load_include('php', 'services_sso_client_profile_flag', 'includes/profileFlag.class');
  ProfileFlagAction::loadActionPlugins();
}

/**
 * Action to go through all flags in the system and apply everyone to every user who has that flag.
 */
function services_sso_client_profile_flag_process_all_users() {
  services_sso_client_profile_flag_load_includes();

  $flags = ProfileFlag::load();

  foreach ($flags as $flag) {
    $flag->process();
  }
}

/**
 * Implements hook_cron().
 */
function services_sso_client_profile_flag_cron() {
  services_sso_client_profile_flag_load_includes();
  $now = REQUEST_TIME;
  $total = db_query("SELECT count(*) AS num FROM {services_sso_client_profile_flag}")->fetchField();
  $offset = variable_get('services_sso_client_profile_flag_cron_offset', 0);
  $num = variable_get('services_sso_client_profile_flag_cron_num', 20);
  $time_threshold = variable_get('services_sso_client_profile_flag_cron_time_threshold', 60*60*12); // 12hrs

  // Start over if we have iterated over the entire set of flags.
  if ($offset >= $total) {
    $offset = 0;
  }

  $flags = ProfileFlag::loadByRange($offset, $num);
  $count = count($flags);

  foreach ($flags as $flag) {
    if (($now - $flag->last_processed) > $time_threshold) {
      $flag->process();
    }
  }

  // Calculate and record a new offset for the next cron run.
  variable_set('services_sso_client_profile_flag_cron_offset', $offset+$count);
}

function services_sso_client_profile_flag_batch() {
  $batch = array(
    'operations' => array(
      array('services_sso_client_profile_flag_batch_process', array()),
    ),
    'title' => t('Profile Flags Batch'),
    'finished' => 'services_sso_client_profile_flag_batch_finished',
    'init_message' => t('Profile Flags Batch is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Profile Flags Batch has encountered an error.'),
    'file' => drupal_get_path('module', 'services_sso_client_profile_flag') . '/includes/services_sso_client_profile_flag.batch.inc',
  );
  batch_set($batch);
  batch_process('admin/config/services/sso-client/flag');
}

/**
 * Implements hook_theme().
 */
function services_sso_client_profile_flag_theme() {
  return array(
    'services_sso_client_profile_flag_info' => array(
      'arguments' => array('info' => NULL),
    ),
  );
}

/**
 * Theme function.
 */
function theme_services_sso_client_profile_flag_info($info = array()) {
  $output = '';

  foreach ($info as $key => $tidbit) {
    switch ($key) {
      case 'total':
        $output .= '<li>Total number of flags in local system: ' . $tidbit . '</li>';
        break;
      case 'unprocessed':
        if (empty($info['total']) && empty($info['unprocessed'])) {
          $info['total'] = -1;
        }
        $output .= '<li>Number of flags that <strong>have not</strong> been processed: ' . $tidbit . ' (' . number_format($info['unprocessed']/$info['total']*100, 0) . '%)</li>';
        break;
      case 'last_retrieval':
        $output .= '<li>Last retrieval from SSO: <em>' . date('D M j G:i:s T Y', $tidbit) . '</em></li>';
        break;
      default:
        $output .= $key . ': ' . $tidbit;
        break;
    }
  }

  if (!empty($output)) {
    return '<ul>' . $output . '</ul>';
  }
}

function _trace() {
  ob_start();
  ddebug_backtrace();
  $msg = ob_get_contents();
  ob_end_clean();
  drupal_set_message($msg);
}

