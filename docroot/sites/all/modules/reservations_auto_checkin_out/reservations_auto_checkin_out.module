<?php

/**
 * @file
 * reservations_auto_checkin_out functions
 */


/**
 * Implements hook_form_FORM_ID_alter().
 */
function reservations_auto_checkin_out_form_node_type_form_alter(&$form, &$form_state) {
  
  // Reservation content type can't used for other Reservations functionality.
  if (isset($form['#node_type']->type) && $form['#node_type']->type == 'reservations_reservation') {
    return;
  }
  
  $type = $form['old_type']['#value'];

  if ($type) {
    $nodes = reservations_nodes_for_type_count($type);
    $settings = reservations_load_item_settings($type);
  }
  	
  $form['reservations']['reservations_autocheckout'] = array(
      '#type' => 'checkbox',
      '#title' => t('Auto checkout'),
      '#default_value' => isset($settings->reservations_autocheckout) ? $settings->reservations_autocheckout : NULL,
      '#description' => t('Automatically check this item out when the Reservation starts.'),
  );
  
  $form['reservations']['reservations_autocheckin'] = array(
      '#type' => 'checkbox',
      '#title' => t('Auto checkin'),
      '#default_value' => isset($settings->reservations_autocheckin) ? $settings->reservations_autocheckin : NULL,
      '#description' => t('Automatically check this item in when the Reservation ends.'),
  );

  reservations_add_settings_form($form, $form_state);
 
  $form['#validate'][] = 'reservations_auto_checkin_out_node_type_save_validate';

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reservations_auto_checkin_out_form_node_type_delete_confirm_alter(&$form, &$form_state) {
  $type = str_replace('-', '_', arg(3));
  reservations_auto_checkin_out_node_type_delete_validate($form);      
}

/**
 * Validates saving of Inventory settings for Reservations content types.
 */
function reservations_auto_checkin_out_node_type_save_validate($form, &$form_state) {
  $values = $form_state['values'];

  if ($values['old_type']) {
  
    //update only if the type already exists
    $type = db_query("SELECT type FROM {reservations_auto_checkin_out_node_type} WHERE type = :type", array(':type' => $values['old_type']))->fetchField();
    
    if ($type) {
      $num_updated = db_update('reservations_auto_checkin_out_node_type') 
      ->fields(array(
      'type' => $values['old_type'],
      'checkin' => $values['reservations_autocheckin'],
      'checkout' => $values['reservations_autocheckout'],
      ))
      ->condition('type', $values['old_type'], '=')
      ->execute();
    } else {
	  $result = db_insert('reservations_auto_checkin_out_node_type') 
      ->fields(array(
      'type' => $values['old_type'],
      'checkin' => $values['reservations_autocheckin'],
      'checkout' => $values['reservations_autocheckout'],
       ))
       ->execute(); 
    }
    
  } else {
    $result = db_insert('reservations_auto_checkin_out_node_type') 
    ->fields(array(
    'type' => $values['type'],
    'checkin' => $values['reservations_autocheckin'],
    'checkout' => $values['reservations_autocheckout'],
     ))
     ->execute();
  }  
}

/**
 * Validates deleting of Inventory settings for Reservable content types.
 */
function reservations_auto_checkin_out_node_type_delete_validate($form, &$form_state) {
  
  $type = $form['type']['#value'];
  // Only validate active Reservations node types.
  if (reservations_is_reservations_type($type)) {
    $num_deleted = db_delete('reservations_auto_checkin_out_node_type')
    ->condition('type', $type)
    ->execute();
  }
}

/**
 * Synchronizes reservations_auto_checkin_out_node_type table with node_type
 * Removes types deleted while module was disabled
 */
function reservations_auto_checkin_out_node_type_sync() {
   
  $types = db_query("SELECT node_type.type, reservations_auto_checkin_out_node_type.type AS inventory_type FROM {reservations_auto_checkin_out_node_type} LEFT JOIN {node_type} ON node_type.type = reservations_auto_checkin_out_node_type.type");
  
  foreach ($types as $type) {
    if (!$type->type) {
      //REMOVE 
      $num_deleted = db_delete('reservations_auto_checkin_out_node_type')
      ->condition('type', $type->inventory_type)
      ->execute();
    }
  }
}


/**
 * @statuses The statuses that we want to check for
 * @start The start date of the reservation
 * @end The end date of the reservation
 * @out A boolean to determine the operator for the end date WHERE clause
 * Provides the actual functionality for changing the status of a reservation automatically to checked in or checked out
 */
function reservations_auto_checkin_out_by_status_in_timespan($statuses = array(), $start = NULL, $end = NULL, $out = FALSE) {

  // Determine table and columns the date data is stored in.
  $field = field_info_field('field_reservations_date');
  $table           = key($field['storage']['details']['sql']['FIELD_LOAD_CURRENT']);
  $column_start_date = $field['storage']['details']['sql']['FIELD_LOAD_CURRENT'][$table]['value'];
  $column_end_date = $field['storage']['details']['sql']['FIELD_LOAD_CURRENT'][$table]['value2'];

  $where = array();
  $args = array();

  if (!empty($statuses)) {
    $status_where = array();
    foreach ($statuses as $i => $status) {
      $key = ':reservations_reservation_status' . $i;
      $args[$key] = $i;
      $status_where[] = 'mr.reservations_reservation_status = ' .$key;
      $args[$key] = $status;
    }
    $where[] = '(' . implode(' OR ', $status_where) . ')';
  }

  if ($start) {
    $args[':start'] = $start;
    $where[] = "ct.$column_start_date <= :start";
  }
  if ($end) {
    $args[':end'] = $end;
    if($out == FALSE){
    $where[] = "ct.$column_end_date > :end";
    }else{
    $where[] = "ct.$column_end_date <= :end";    
    }
  }

  $where = count($where) ? implode(' AND ', $where) : '';

  $nodes = array();
  
  // Select reservation nodes where all reserved items and resources are autocheckout.
  $query = db_select('node', 'n');
  $query->join($table, 'ct', 'ct.revision_id = n.vid');
  $query->join('reservations_reservation', 'mr', 'n.vid = mr.vid');
  $query
    ->fields('n', array('nid'));
  $query->where($where, $args);

  $result = $query->execute();
  foreach ($result as $record) {
    $reservation_nid = $record->nid;
    $nodes[$reservation_nid] = $reservation_nid;
  }

  return $nodes;
}

function reservations_auto_checkin_out_cron() {
  // 2009-05-22 20:45:00
  $time = gmdate('Y-m-j H:i:s');
  
  // Checking Items Out
  $nodes = reservations_auto_checkin_out_by_status_in_timespan(array(RESERVATIONS_STATUS_PENDING), $time, $time);
  if(!empty($nodes)){
    foreach (array_keys($nodes) as $reservation_nid) {
      $reservation = node_load($reservation_nid);

      //check child items of that reservations for autocheckout
      if(!empty($reservaton)){
        foreach ($reservaton->reservations_reservation_items as $item) {
          $node = node_load($item['reservations_item_nid']);
          if (!$node or !$node->reservations_autocheckout) {
            // skip out to the next reservation.
            continue 2;
          }
        }
      }

      //after checking all of the autocheckout settings for all the child items, are they all autocheckout?
      watchdog('reservations', "Setting node " . $reservation_nid . " to checked out");
      $reservation->reservations_reservation_status = RESERVATIONS_STATUS_CHECKED_OUT;
      node_save($reservation);
    }
  }
  
  // Cheacking Items In
  $nodes = reservations_auto_checkin_out_by_status_in_timespan(array(RESERVATIONS_STATUS_CHECKED_OUT), NULL, $time, TRUE);
  
  if(!empty($nodes)){
    foreach (array_keys($nodes) as $reservation_nid) {

      //check child items of that reservations for autocheckin 
      $reservation = node_load($reservation_nid);
      if(!empty($reservaton)){
        foreach ($reservaton->reservations_reservation_items as $item) {
          $node = node_load($item['reservations_item_nid']);
          if (!$node or !$node->reservations_autocheckin) {
            // skip out to the next reservation.
            continue 2;
          }
        }
      }

      //after checking all of the autocheckout settings for all the child items, are they all autocheckout?
      watchdog('reservations', "Setting node " . $reservation_nid . " to checked in");
      $reservation->reservations_reservation_status = RESERVATIONS_STATUS_CHECKED_IN;
      node_save($reservation);
    }
  }
}