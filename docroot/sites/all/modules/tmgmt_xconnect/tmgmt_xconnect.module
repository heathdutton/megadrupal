<?php
/**
 * @file
 * X-Connect Translator service for the Translation Management module (tmgmt).
 */

/**
 * Key to save watchdog messages for.
 *
 * @var string
 */
define('TMGMT_XCONNECT_WATCHDOG', 'Tmgmt_XConnect');


/**
 * Implements hook_menu().
 */
function tmgmt_xconnect_menu() {
  $items['admin/tmgmt/x-connect'] = array(
    'title' => 'X-Connect',
    'description' => 'X-Connect Actions',
    'page callback' => 'tmgmt_xconnect_admin_actions',
    'access arguments' => array('administer tmgmt'),
    'file' => 'tmgmt_xconnect.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  $items['admin/tmgmt/x-connect/%tmgmt_translator/request'] = array(
    'title' => 'X-Connect send request',
    'page callback' => 'tmgmt_xconnect_admin_actions_request',
    'page arguments' => array(3),
    'access arguments' => array('administer tmgmt'),
    'file' => 'tmgmt_xconnect.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/tmgmt/x-connect/%tmgmt_translator/scan'] = array(
    'title' => 'X-Connect scan',
    'page callback' => 'tmgmt_xconnect_admin_actions_scan',
    'page arguments' => array(3),
    'access arguments' => array('administer tmgmt'),
    'file' => 'tmgmt_xconnect.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/tmgmt/x-connect/%tmgmt_translator/receive'] = array(
    'title' => 'X-Connect receive',
    'page callback' => 'tmgmt_xconnect_admin_actions_receive',
    'page arguments' => array(3),
    'access arguments' => array('administer tmgmt'),
    'file' => 'tmgmt_xconnect.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function tmgmt_xconnect_help($path, $arg) {
  $output = array();

  if ($path === 'admin/tmgmt/x-connect') {
    $output[] = t(
      'X-Connect sends the requests and process the responses by default
      automatically during cron. You can use this page to manually send &
      receive the translation jobs.'
    );
  }

  if (!empty($output)) {
    return '<p>' . implode('</p>' . PHP_EOL . '<p>', $output) . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function tmgmt_xconnect_theme() {
  return array(
    // Template to export content as HTML.
    'tmgmt_xconnect_export_html' => array(
      'path' => drupal_get_path('module', 'tmgmt_xconnect') . '/templates',
      'template' => 'tmgmt_xconnect_export_html',
      'variables' => array(
        'job_id' => NULL,
        'job_item_id' => NULL,
        'source_language' => NULL,
        'target_language' => NULL,
        'data' => array(),
      ),
    ),
  );
}

/**
 * Get the Translator service specific settings.
 *
 * This allows to override the configuration from within the $settings.php file.
 * If none is found, use the config from the Translator service.
 *
 * Following variable overwrites are supported
 * (where <service> is the machine name of the Translator service):
 *
 * Order related settings:
 * - tmgmt_xconnect_<service>_order_client_id :
 *     The client ID.
 * - tmgmt_xconnect_<service>_order_due_date :
 *     What is the deadline for the file(s) to be translated. The deadline
 *     should be set in number of days from the moment the translation is
 *     ordered (Number of days, default 0).
 * - tmgmt_xconnect_<service>_order_issued_by :
 *     The email address of the, by the translation known, issuer of the
 *     translation.
 * - tmgmt_xconnect_<service>_order_is_confidential :
 *     Is the content for the translation confidential (0/1)?
 * - tmgmt_xconnect_<service>_order_needs_confirmation :
 *     Should there be a conformation send when the translation is ready (0/1)?
 * - tmgmt_xconnect_<service>_order_needs_quotation :
 *     Should a quotation be created and send before the translation is
 *     performed (0/1)?
 *
 * Connection related settings:
 * - tmgmt_xconnect_<service>_connection__host :
 *     The ftp hostname.
 * - tmgmt_xconnect_<service>_connection_user :
 *     The ftp connection username.
 * - tmgmt_xconnect_<service>_connection_pass :
 *     The ftp connection password.
 * - tmgmt_xconnect_<service>_connection_folder_request :
 *     The ftp directory to store the request files in (To_LSP).
 * - tmgmt_xconnect_<service>_connection_folder_receive :
 *     The ftp directory to retrieve the processed translations from (From_LSP).
 * - tmgmt_xconnect_<service>_connection_folder_processed :
 *     The ftp directory to store the processed translations in
 *     (From_LSP/processed).
 *
 * Cron related settings:
 * - tmgmt_xconnect_<service>_cron_enabled :
 *     Is the cron enabled (0/1).
 * - tmgmt_xconnect_<service>_cron_limit :
 *     The maximum number of files to process during cron run.
 *     (0 = no limit, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000).
 *
 * @param TMGMTTranslator $translator
 *   The translator to get the configuration for.
 * @param string $part
 *   What kind of settings to retrieve.
 *   Supported types:
 *   - order.
 *   - connection.
 *   - cron.
 *
 * @return array
 *   The settings array.
 */
function tmgmt_xconnect_settings(TMGMTTranslator $translator, $part) {
  $settings = $translator->getSetting($part);
  $config = array();

  if (!is_array($settings)) {
    return $config;
  }

  foreach ($settings as $key => $value) {
    $name = sprintf(
      'tmgmt_xconnect_%s_%s_%s',
      $translator->name,
      $part,
      $key
    );

    $config[$key] = filter_xss(variable_get($name, $value));
  }

  return $config;
}

/**
 * Get the settings for the the order.xml file for the given Translator service.
 *
 * This is a wrapper around tmgmt_xconnect_settings().
 *
 * @param TMGMTTranslator $translator
 *   The translator to get the configuration for.
 *
 * @return array
 *   The settings array.
 */
function tmgmt_xconnect_settings_order(TMGMTTranslator $translator) {
  return tmgmt_xconnect_settings($translator, 'order');
}

/**
 * Get the settings for the connection for the given Translator service.
 *
 * This is a wrapper around tmgmt_xconnect_settings().
 *
 * @param TMGMTTranslator $translator
 *   The translator to get the configuration for.
 *
 * @return array
 *   The settings array.
 */
function tmgmt_xconnect_settings_connection(TMGMTTranslator $translator) {
  return tmgmt_xconnect_settings($translator, 'connection');
}

/**
 * Get the settings for the cron for the given Translator service.
 *
 * This is a wrapper around tmgmt_xconnect_settings().
 *
 * @param TMGMTTranslator $translator
 *   The translator to get the configuration for.
 *
 * @return array
 *   The settings array.
 */
function tmgmt_xconnect_settings_cron(TMGMTTranslator $translator) {
  return tmgmt_xconnect_settings($translator, 'cron');
}

/**
 * Implements hook_cron().
 */
function tmgmt_xconnect_cron() {
  module_load_include('inc', 'tmgmt_xconnect', 'includes/cron_receive');
  tmgmt_xconnect_cron_receive_run();
}


/******************************************************************************
 * Translation Management integration.
 ******************************************************************************/

/**
 * Provide information about translator plugin.
 *
 * @see TMGMTTestTranslatorPluginController
 */
function tmgmt_xconnect_tmgmt_translator_plugin_info() {
  return array(
    'xconnect' => array(
      'label' => t('X-Connect'),
      'description' => t('Translate using the Euroscript Global Content Management (GCM) translation service.'),
      'plugin controller class' => 'TmgmtXConnectTranslatorPluginController',
      'ui controller class' => 'TmgmtXConnectTranslatorUIController',
    ),
  );
}

/**
 * Get an array of Translators that use the X-Connect Translator plugin.
 *
 * @return TMGMTTranslator[]
 *   An array of Translators.
 */
function tmgmt_xconnect_get_translators() {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'tmgmt_translator')
    ->propertyCondition('plugin', 'xconnect')
    ->propertyOrderBy('label', 'asc');
  $result = $query->execute();

  // Check if there are translators.
  if (empty($result['tmgmt_translator'])) {
    return array();
  }

  return entity_load(
    'tmgmt_translator',
    array_keys($result['tmgmt_translator'])
  );
}

/**
 * Load translation jobs by their Translation service.
 *
 * @param TMGMTTranslator $translator
 *   The translator service.
 * @param int $status
 *   The (optional) status of the job to filter by.
 *
 * @return TMGMTJob[]
 *   Array of translation jobs.
 */
function tmgmt_xconnect_load_job_all_by_translator(TMGMTTranslator $translator, $status = NULL) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'tmgmt_job')
    ->propertyCondition('translator', $translator->name)
    ->propertyOrderBy('created');

  // Filter by status.
  if (!is_null($status)) {
    $query->propertyCondition('state', $status);
  }
  $result = $query->execute();

  if (empty($result['tmgmt_job'])) {
    return array();
  }

  return entity_load(
    'tmgmt_job',
    array_keys($result['tmgmt_job'])
  );
}


/*******************************************************************************
 * Glue between Drupal, TMGMT module and X-Connect API.
 ******************************************************************************/

/**
 * Get the proper X-Connect connection based on the Translator configuration.
 *
 * @param TMGMTTranslator $translator
 *   The translator service.
 *
 * @return TmgmtXConnectConnectionInterface
 *   The connection.
 */
function tmgmt_xconnect_connection(TMGMTTranslator $translator) {
  $settings = tmgmt_xconnect_settings_connection($translator);
  $connection = NULL;

  switch ($settings['protocol']) {
    case 'FTP':
      $connection = new TmgmtXConnectConnectionFTP($settings);
      break;

    case 'SFTP':
      // The XConnect API requires the phpspec library. This module has it
      // included and makes sure that the necessary classes are loaded.
      $path = drupal_get_path('module', 'tmgmt_xconnect') . '/src/phpseclib/';
      set_include_path($path . PATH_SEPARATOR . get_include_path());
      include_once $path . '/Net/SFTP.php';

      $connection = new TmgmtXConnectConnectionSFTP($settings);
      break;

    default:
      watchdog(
        TMGMT_XCONNECT_WATCHDOG,
        'No connection available for translator "%translator" with protocol "%protocol".',
        array(
          '%translator' => $translator->name,
          '%protocol' => $settings['protocol'],
        ),
        WATCHDOG_ERROR
      );
      break;
  }

  return $connection;
}

/**
 * Get a list of remote translated requests ready to be processed.
 *
 * @param TMGMTTranslator $translator
 *   The translator service to perform the action for.
 *
 * @return array
 *   Array of file names.
 */
function tmgmt_xconnect_import_get_remote_files(TMGMTTranslator $translator) {
  // Create the FTP connection to the translation service.
  $connection = tmgmt_xconnect_connection($translator);
  if (!$connection) {
    return array();
  }

  return $connection->scan();
}

/**
 * Import a remote file for the given translation service.
 *
 * @param TMGMTTranslator $translator
 *   The translator service to perform the action for.
 * @param string $file_name
 *   The file that is ready to be processed (remote file name without path).
 *
 * @return TmgmtXConnectImportResultInterface
 *   Result of the import operation.
 */
function tmgmt_xconnect_import_remote_file(TMGMTTranslator $translator, $file_name) {
  try {
    $connection = tmgmt_xconnect_connection($translator);

    // The directory to store the downloaded file locally.
    $directory = drupal_realpath(tmgmt_xconnect_directory_receive());

    // Download the file to local file path and return the response object.
    $response = $connection->receive($file_name, $directory);

    // Import the translation(s).
    $importer = new TmgmtXConnectImportHtml();
    $translations = $response->getFile()->getTranslations();
    foreach ($translations as $translation) {
      $job = $importer->import($translation->getContent());
    }

    // Inform the remote service that the translation is processed.
    $connection->processed($file_name);

    // Delete the downloaded file from local file system.
    unlink($response->getFilePath());

    // Return the result.
    return new TmgmtXConnectImportResultSuccess(
      $file_name,
      $job,
      'Processed translation file %file for <a href="!url">Job %job_id</a>.',
      array(
        '%file' => $file_name,
        '%job_id' => $job->tjid,
        '!url' => url('admin/tmgmt/jobs/' . $job->tjid),
      )
    );
  }
  catch (Exception $e) {
    // Move downloaded file to error directory.
    if ($response) {
      tmgmt_xconnect_import_remote_file_error($response->getFilePath());
    }

    // Return the error result.
    return new TmgmtXConnectImportResultError(
      $file_name,
      'Could not process file %file : %message',
      array(
        '%file' => $file_name,
        '%message' => $e->getMessage(),
      )
    );
  }

}

/**
 * Get the local temporary directory to store the request files in.
 *
 * The request files are ZIP packages that are first created locally and then
 * send to the remote service. The local file is deleted after being send.
 *
 * @return string
 *   The directory path.
 *
 * @throws Exception
 *   When the local directory can't be created.
 */
function tmgmt_xconnect_directory_request() {
  $directory = 'public://tmgmt/xconnect/request';
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    throw new Exception(
      sprintf('Can\'t create the receive directory "%s"', $directory)
    );
  }

  return $directory;
}

/**
 * Get the local directory to store the downloaded remote files.
 *
 * The response files are ZIP packages that are first downloaded and then
 * processed. The local file is deleted when successfull processed.
 * FIles that couldn't be processed are moved to an error directory.
 * See tmgmt_xconnect_import_remote_file_error().
 *
 * @return string
 *   The directory path.
 *
 * @throws Exception
 *   When the local directory can't be created.
 */
function tmgmt_xconnect_directory_receive() {
  $directory = 'public://tmgmt/xconnect/receive';
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    throw new Exception(
      sprintf('Can\'t create the receive directory "%s"', $directory)
    );
  }

  return $directory;
}

/**
 * Move a file with errors to the error directory.
 *
 * Files are moved to a local error directory. This to allow inspection of the
 * file and to determine why the file could not be processed.
 *
 * @param string $file
 *   The file path with the errors.
 *
 * @return bool
 *   Move success or not.
 */
function tmgmt_xconnect_import_remote_file_error($file) {
  // Prepare the directory.
  $directory = 'public://tmgmt/xconnect/receive/error';
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    watchdog(
      TMGMT_XCONNECT_WATCHDOG,
      "Can't create the receive archive folder %directory.",
      array('%directory' => $directory),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  // Move the file.
  $file_error = drupal_realpath($directory . '/' . basename($file));
  if (!rename($file, $file_error)) {
    watchdog(
      TMGMT_XCONNECT_WATCHDOG,
      "Can't move the file %file to the error directory %directory.",
      array(
        '%file' => $file,
        '%directory' => $directory,
      ),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  return TRUE;
}
