<?php

/**
 * @file
 * Geocluster extension for geofield and maps.
 */

require_once 'geocluster.geohash.inc';

define('GEOCLUSTER_ALGORITHM_OPTION', 'geocluster_algorithm');

define('GEOCLUSTER_ALGORITHM_INFO', 'geocluster_algorithm_info');

/**
 * Implements hook_views_api().
 */
function geocluster_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Implements hook_ctools_plugin_type().
 */
function geocluster_ctools_plugin_type() {
  $plugins['algorithm'] = array(
    'use hooks' => TRUE,
  );
  return $plugins;
}

/**
 * Implements hook_geocluster_algorithm().
 */
function geocluster_geocluster_algorithm() {
  return array(
    'geocluster_mysql' => array(
      'handler' => array(
        'label' => t('MySQL Aggregation based clustering algorithm'),
        'class' => 'MySQLGeohashGeoclusterAlgorithm',
      ),
    ),
    'geocluster_php' => array(
      'handler' => array(
        'label' => t('PHP based clustering algorithm'),
        'class' => 'PHPGeohashGeoclusterAlgorithm',
      ),
    ),
  );
}

/**
 * Initializes a geocluster config with a provided backend.
 *
 * @param $config_backend GeoclusterConfigBackendInterface
 * @return GeoclusterConfig
 */
function geocluster_init_config($config_backend) {
  $config = new GeoclusterConfig($config_backend);
  return $config;
}

/**
 * Initializes the geocluster algorithm.
 *
 * @param $config_backend GeoclusterConfigBackendInterface
 * @return GeoclusterAlgorithm
 */
function geocluster_init_algorithm($config_backend) {
  $view = $config_backend->get_view();
  // Get geocluster options.
  $geocluster_options = $config_backend->get_option('geocluster_options');
  $cluster_distance = $geocluster_options['cluster_distance'];
  $field_name = $geocluster_options['cluster_field'];
  if (empty($view->field[$field_name])) {
    return;
  }
  $cluster_field = $view->field[$field_name];

  // Default zoom.
  $zoom = 1;

  // Add customizations based on style plugin.
  // @todo: make this a separate function or hook
  $style_plugin_name = $config_backend->get_option('style_plugin');
  switch ($style_plugin_name) {
    case 'leaflet':
      $map = $view->style_plugin->options['map'];
      $info =  leaflet_map_get_info($map);
      $zoom = $info['settings']['zoom'];
      break;
    case 'views_geojson':
      break;
    case 'geofield_map':
      $style_options = $view->display_handler->display->display_options['style_options'];
      $zoom = $style_options['geofield_map_zoom'];
  }

  // Allow to override using get paramters.
  $zoom = isset($_GET['zoom']) ? $_GET['zoom'] : $zoom;
  $cluster_distance = isset($_GET['cluster_distance']) ? $_GET['cluster_distance'] : $cluster_distance;

  // Dynamically instantiate selected algorithm.
  $algorithm = $geocluster_options['algorithm'];

  if ($class = ctools_plugin_load_class('geocluster', 'algorithm', $algorithm, 'handler')) {
    if($algorithm_class = new $class($config_backend, $cluster_distance, $zoom, $cluster_field)) {
      $config_backend->set_option(GEOCLUSTER_ALGORITHM_OPTION, $algorithm_class);
      return $algorithm_class;
    }
    else {
      throw new Exception("algorithm not found: " . $algorithm);
    }
  }

}


/**
 * Retrieves the geocluster config from a given view.
 *
 * @param $view view
 * @return GeoclusterConfig
 */
function geocluster_get_config(&$view) {
  if (isset($view->display_handler->extender['geocluster'])) {
    return $view->display_handler->extender['geocluster'];
  }
}


/**
 * Retrieves the geocluster algorithm from a given view.
 *
 * @param $view view
 * @return GeoclusterAlgorithm
 */
function geocluster_get_algorithm(&$view) {
  if (isset($view->display_handler->extender['geocluster'])) {
    return $view->display_handler->extender['geocluster']->get_option(GEOCLUSTER_ALGORITHM_OPTION);
  }
}

/**
 * Invokes clustering pre execution phase before the view is executed.
 *
 * This actually needs to happen before the view if fully built.
 *
 * Implements hook_views_pre_build().
 */
function geocluster_views_pre_build(&$view) {
  if ($config = geocluster_get_config($view)) {
    if ($config->get_option('geocluster_enabled')) {
      if ($algorithm = geocluster_init_algorithm($config)) {
        $algorithm->before_pre_execute();
        $algorithm->pre_execute();
      }
    }
  }
}

/**
 * Invokes clustering post execution phase after the views query has been executed.
 *
 * Implements hook_views_post_execute_query().
 */
function geocluster_views_post_execute_query(&$view) {
  if ($algorithm = geocluster_get_algorithm($view)) {
    $algorithm->before_post_execute();
    $algorithm->post_execute();
    $algorithm->after_post_execute();
  };
}

/**
 * Adds geocluster information to a views_geojson result.
 *
 * Implements hook_views_geojson_render_fields_alter().
 */
function geocluster_views_geojson_render_fields_alter(&$feature, $view, $row, $index) {
  if (!empty($row->geocluster_count) && $row->geocluster_count > 1) {
    $feature['clustered'] = TRUE;
    $feature['cluster_items'] = $row->geocluster_count;
  }
}

/**
 * Implements theme_preprocess_leaflet_map().
 */
function geocluster_preprocess_leaflet_map($variables) {
  // Adds the geocluster leaflet marker javascript.
  // TODO: make this configurable / move it to the right place :)
  drupal_add_js(
    drupal_get_path('module', 'geocluster') . '/js/geocluster.leaflet.marker.js',
    // Add our script after leaflet.drupal.js.
    array('weight' => 5)
  );
}

/**
 * Implements hook_leaflet_geojson_bean_view_features_alter().
 */
function geocluster_leaflet_geojson_bean_view_features_alter(array &$features, array &$context) {
// Add geocluster bbox extension js.
  if (isset($context['source_info']['bbox'])) {
    drupal_add_js(
      drupal_get_path('module', 'geocluster') . '/js/geocluster.leaflet.bbox.js',
      array(
        // Add our script after leaflet.bbox.js.
        'weight' => 10
      )
    );
  }
}
