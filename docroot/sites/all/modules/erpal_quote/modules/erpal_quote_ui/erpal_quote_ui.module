<?php

/**
 * @file
 * Code for the ERPAL quote user interface functional module.
 */

/**
 * Implements hook_menu().
 */
function erpal_quote_ui_menu() {
  $items['quote-pdf/%commerce_order'] = array(
    'title' => 'Order',
    'page callback' => 'erpal_quote_ui_pdf',
    'page arguments' => array(1),
    'access callback' => 'erpal_quote_ui_order_view_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['admin/commerce/config/quote/pdf'] = array(
    'title' => 'Quote PDF',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('erpal_quote_ui_pdf_admin_form'),
    'access arguments' => array('configure order settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'erpal_quote_ui.admin.inc',
  );
  $items['admin/commerce/orders/%commerce_order/quote_pdf'] = array(
    'title' => 'Pdf',
    'page callback' => 'commerce_order_ui_order_view',
    'page arguments' => array(3, 4),
    'access callback' => 'erpal_quote_ui_order_view_access',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  return $items;
}

/**
 * Implements hook_commerce_billy_order_types_alter().
 *
 * Alter the order types to which need add invoice fields.
 */
function erpal_quote_ui_commerce_billy_order_types_alter(&$order_types) {
  $order_types = array_diff($order_types, array('quote'));
}

/**
 * Implements hook_views_api().
 */
function erpal_quote_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'erpal_quote_ui') . '/includes/views',
  );
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function erpal_quote_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Add local tasks for adding quote on pages for quote menage.
  $local_tasks = array(
    array(
      'root_path' => 'admin/erpal/quotes',
      'menu_item' => 'admin/commerce/orders/add/quote',
    ),
    array(
      'root_path' => 'quotes',
      'menu_item' => 'quote/add',
    ),
    array(
      'root_path' => 'admin/erpal/quotes',
      'menu_item' => 'admin/commerce/config/custom-order-number/quote',
      'title'     => 'Settings',
    ),
    array(
      'root_path' => 'admin/erpal/quotes',
      'menu_item' => 'admin/commerce/config/quote/pdf',
      'title'     => 'PDF Settings',
    ),
    array(
      'root_path' => 'quotes',
      'menu_item' => 'admin/commerce/config/custom-order-number/quote',
      'title'     => 'Settings',
    ),
    array(
      'root_path' => 'quotes',
      'menu_item' => 'admin/commerce/config/quote/pdf',
      'title'     => 'PDF Settings',
    ),
  );

  $order_pages = array(
    'admin/commerce/orders/%',
    'admin/commerce/orders/%/quote_pdf',
    'order/%',
    );
  if (in_array($root_path, $order_pages)) {
    // Finds arg with order id.
    $arg = $root_path == 'order/%' ? 1 : 3;
    // Add download pdf 'quote' bundles.
    $order = commerce_order_load(arg($arg));

    if ($order->type == 'quote') {
      $local_tasks[] = array(
        'root_path' => $root_path,
        'menu_item' => 'quote-pdf/' . arg($arg),
        'title'     => 'Download PDF',
        'query'     => array(),
      );
    }
  }

  foreach ($local_tasks as $local_task) {
    if ($root_path == $local_task['root_path']) {
      $item = menu_get_item($local_task['menu_item']);
      if ($item['access']) {

        // If title is empty just add 'Create quote' by default.
        $item['title'] = 'Create a quote';
        if (!empty($local_task['title'])) {
          $item['title'] = $local_task['title'];
        }

        // If query is empty just add destination by default.
        $item['localized_options']['query'] = drupal_get_destination();
        if (isset($local_task['query'])) {
          $item['localized_options']['query'] = $local_task['query'];
        }

        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function erpal_quote_ui_entity_info_alter(&$info) {
  $info['commerce_order']['view modes']['quote_pdf'] = array(
    'label' => t('PDF'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_theme().
 */
function erpal_quote_ui_theme() {
  // Register the template specific for the commerce pdf order.
  $items['commerce_order__quote__quote_pdf'] = array(
    'render element' => 'elements',
    'template' => 'commerce_order--quote--quote_pdf',
    'path' => drupal_get_path('module', 'erpal_quote_ui') . '/templates',
  );
  return $items;
}

/**
 * Implements hook_preprocess_entity().
 */
function erpal_quote_ui_preprocess_entity(&$variables) {
  $entity_type = $variables['entity_type'];
  $view_mode = $variables['view_mode'];

  // Replace default template.
  if ($entity_type == 'commerce_order' && $view_mode == 'quote_pdf') {
    $order = $variables['commerce_order'];
    if (in_array($order->type, array('quote'))) {
      foreach ($variables['theme_hook_suggestions'] as &$theme_name) {
        if ($theme_name == $entity_type . '__' . $order->type . '__' . $view_mode) {
          $theme_name = $entity_type . '__quote__' . $view_mode;
        }
      }
    }
  }
}

/**
 * Menu item access callback: prevent view access to the admin order display.
 *
 * For customers who have 'view' access to the order but not administration
 * pages.
 *
 * @param object $order
 *   The order object as loaded via the menu item wildcard.
 *
 * @return bool
 *   Boolean indicating the user's access to view the page.
 */
function erpal_quote_ui_order_view_access($order) {
  $types = array('quote');
  if (in_array($order->type, $types)) {
    return commerce_order_admin_order_view_access($order);
  }
  return FALSE;
}

/**
 * Page callback for order PDF.
 */
function erpal_quote_ui_pdf($order) {
  $order->pdf_download = TRUE;
  $html = erpal_quote_ui_pdf_html($order);
  $filename = preg_replace('/[^a-z0-9]/', '_', drupal_strtolower('quote_' . $order->order_number)) . '.pdf';

  try {
    commerce_billy_pdf_output($html, $filename);
    drupal_exit();
  }
  catch (DOMPDF_Exception $e) {
    drupal_set_message(t('Error generating PDF order. Please contact the website administrator.'), 'error');
    watchdog('erpal_commerce_ui', 'DOMPDF exception while generating pdf order: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    return '';
  }
}

/**
 * Helper function that returns the generated HTML for the order PDFs.
 *
 * @param object[] $orders
 *   Array of order objects.
 */
function erpal_quote_ui_pdf_html($orders) {
  // Backwards compatibilty: also accept a single order object.
  if (is_object($orders)) {
    $orders = array($orders);
  }
  foreach ($orders as $order) {
    $vars['viewed_orders'][] = entity_view('commerce_order', array($order->order_id => $order), 'quote_pdf', NULL, TRUE);
  }
  $css_files = variable_get('commerce_quote_pdf_css_files', array(drupal_get_path('module', 'erpal_quote_ui') . '/css/pdf.css'));
  $vars['inline_css'] = "";
  foreach ($css_files as $file) {
    $vars['inline_css'] .= file_get_contents($file);
  }

  return theme('commerce_billy_pdf_page', $vars);
}

/**
 * Implements hook_commerce_order_view().
 */
function erpal_quote_ui_commerce_order_view($order, $view_mode) {

  // Add content variables for the PDF generation.
  $settings = variable_get('commerce_quote_pdf_text_settings', array());
  foreach ($settings as &$value) {
    $value = token_replace($value, array('commerce-order' => $order));
  }
  $custom_date_format = !empty($settings['order_date_format']) ? $settings['order_date_format'] : 'Y-m-d';
  // Just load commerce_customer_profile for current Vendor.
  $vendor = field_get_items('commerce_order', $order, 'field_vendor_address');
  if ($vendor) {
    $commerce_profile = commerce_customer_profile_load($vendor[0]['profile_id']);
    $commerce_profile_view = entity_view('commerce_customer_profile', array($commerce_profile));
    $commerce_customer_address = field_get_items('commerce_customer_profile', $commerce_profile, 'commerce_customer_address');
    $countries = country_get_list();
  }
  // Add Vendor address to order header if exists.
  if (in_array($view_mode, array('quote_pdf'))) {
    if (empty($order->content['order_header']['#markup'])) {
      $order->content['order_header'] = array(
        '#markup' => isset($settings['order_header']) ? $settings['order_header'] : '',
      );
    }
    // Set quote footer.
    if ($vendor) {
      $address = array(
        $commerce_customer_address[0]['name_line'],
        $commerce_customer_address[0]['postal_code'] . ' '. $commerce_customer_address[0]['locality'],
        $countries[$commerce_customer_address[0]['country']],
      );
      // Set quote/order footer.
      $order->content['order_footer'] = array(
        '#markup' => implode(', ', $address),
      );
    }
    else{
      $order->content['order_footer'] = array(
        '#markup' => isset($settings['order_footer']) ? $settings['order_footer'] : '',
      );
    }

    // Set quote text.
    $text = field_get_items('commerce_order', $order, 'field_order_text');
    if ($text) {
      $order->content['order_text'] = array(
        '#markup' => $text[0]['value'],
      );
    }
    else {
      $order->content['order_text'] = array(
        '#markup' => isset($settings['order_text']) ? $settings['order_text'] : '',
      );
    }

    // Set quote date.
    $field_valid_until = field_get_items('commerce_order', $order, 'field_valid_until');
    if ($field_valid_until) {
      $date = entity_metadata_wrapper('date_item', $field_valid_until[0]['target_id']);
      $date = $date->field_date_item_single->value();
    }
    else {
      $date = $order->created;
    }

    $date = format_date($date, 'custom', $custom_date_format);

    if ($vendor) {
      $header_date_text = t('@location, @date', array('@location' => $commerce_customer_address[0]['locality'], '@date' => $date));
    }
    elseif (!empty($settings['order_location'])) {
      $header_date_text = t('@location, @date', array('@location' => $settings['order_location'], '@date' => $date));
    }
    else {
      $header_date_text = $date;
    }
    $order->content['order_header_date'] = array(
      '#markup' => $header_date_text,
    );

    // Set quote number.
    $type = commerce_order_type_load($order->type);
    if (!$type) {
      $type = new stdClass();
      $type->name = 'Order';
    }
    $order->content['order_number'] = array(
      '#markup' => t('@name No.: @id', array('@name' => $type->name, '@id' => $order->order_number)),
    );
    $order->content['order_logo'] = array(
      '#value' => variable_get('commerce_quote_pdf_logo', 'misc/druplicon.png'),
    );
    if (empty($order->pdf_download)) {
      $css_files = variable_get('commerce_quote_pdf_css_files', array(drupal_get_path('module', 'erpal_quote_ui') . '/css/pdf.css'));
      foreach ($css_files as $file) {
        $order->content['#attached']['css'][] = $file;
      }
      $order->content['order_logo']['#value'] = '/' . $order->content['order_logo']['#value'];
    }
  }
}
