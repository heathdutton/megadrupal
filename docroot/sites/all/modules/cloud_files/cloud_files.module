<?php

/**
 * @file
 * Provide file stream wrapper for Rackspace Cloud files.
 */

/**
 * Implements hook_menu().
 */
function cloud_files_menu() {

  $items['admin/config/media/cloud-files'] = array(
    'title' => 'Cloud Files',
    'description' => 'Cloud Files Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_files_admin'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Simple utility function for getting .
 * 
 * The php-opencloud lib is loaded to use the US and UK URLs that are declared
 * there.
 *
 * Add on to this to add new authentication URLs.
 *
 * @return array
 *   Rackspace Cloud authentication URLs
 */
function _cloud_files_auth_urls() {
  $info = libraries_load('php-opencloud');
  if ($info['loaded']) {
    return array(
      'us' => array(
        'name' => t('United States'),
        'url' => OpenCloud\Rackspace::US_IDENTITY_ENDPOINT,
      ),
      'gb' => array(
        'name' => t('United Kingdom'),
        'url' => OpenCloud\Rackspace::UK_IDENTITY_ENDPOINT,
      ),
    );
  }
  else {
    form_set_error('', t('The PHP SDK for OpenStack/Rackspace APIs could not be loaded.'));
  }
}

/**
 * Simple utility function for getting Rackspace Cloud Regions.
 *
 * Add on to this to add new regions.
 *
 * @return array
 *   Rackspace Cloud Regions
 */
function _cloud_files_regions() {
  return array(
    'DFW' => t('Dallas'),
    'ORD' => t('Chicago'),
    'LON' => t('London'),
  );
}

/**
 * Implements hook_admin().
 */
function cloud_files_admin() {

  /*
   * Radios group with an other option taken from http://drupal.org/node/772446
   */

  $form['rackspace_cloud_auth_url'] = array(
    '#type' => 'item',
    '#title' => t('Authentication URL'),
    '#description' => t('Select "United States" if your account was created via rackspacecloud.com. Select "United Kingdom" if your account was created via rackspace.co.uk.'),
  );

  $cf_urls = _cloud_files_auth_urls();
  $other = variable_get('rackspace_cloud_auth_url') ? TRUE : FALSE;
  foreach ($cf_urls as $key => $item) {
    $form['rackspace_cloud_auth_url'][$key] = array(
      '#type' => 'radio',
      '#title' => $item['name'] . ' ( ' . $item['url'] . ' ) ',
      '#default_value' => variable_get('rackspace_cloud_auth_url'),
      '#return_value' => $item['url'],
      '#parents' => array('rackspace_cloud_auth_url'),
    );
    // If this is the first one.
    if (count($form['rackspace_cloud_auth_url']) == 1) {
      // Make the style match a normal radios group.
      $form['rackspace_cloud_auth_url'][$key]['#prefix'] = '<div class="form-radios">';
    }
    // If this is the value previously saved.
    if ($item['url'] == variable_get('rackspace_cloud_auth_url')) {
      $other = FALSE;
    }
  }

  // If other is used, reset all the default_values.
  if ($other) {
    foreach ($cf_urls as $key => $item) {
      $form['rackspace_cloud_auth_url'][$key]['#default_value'] = 'other';
    }
  }

  /*
   * The 'container-inline' class places elements next to each other, while
   * the 'form-item' class provides the correct spacing between options.
   */
  $form['rackspace_cloud_auth_url']['other'] = array(
    '#prefix' => '<div class="container-inline form-item">',
    '#suffix' => '</div>',
  );

  /*
   * By supplying the title here, instead of using the '#field_prefix' property
   * of the textfield, clicking the text will also select the radio button.
   */
  $form['rackspace_cloud_auth_url']['other']['other_option'] = array(
    '#type' => 'radio',
    '#title' => t('Other ('),
    '#return_value' => 'other',
    '#default_value' => $other ? 'other' : variable_get('rackspace_cloud_auth_url'),
    '#parents' => array('rackspace_cloud_auth_url'),
  );

  $form['rackspace_cloud_auth_url']['other']['other_textfield'] = array(
    '#type' => 'textfield',
    '#default_value' => $other ? variable_get('rackspace_cloud_auth_url') : '',
    '#size' => 20,
    '#suffix' => ')</div>',
  );

  $form['rackspace_cloud_region'] = array(
    '#type' => 'item',
    '#title' => t('Region'),
  );

  $cf_regions = _cloud_files_regions();
  $other_region = variable_get('rackspace_cloud_region') ? TRUE : FALSE;
  foreach ($cf_regions as $key => $name) {
    $form['rackspace_cloud_region'][$key] = array(
      '#type' => 'radio',
      '#title' => $name . ' ( ' . $key . ' ) ',
      '#default_value' => variable_get('rackspace_cloud_region'),
      '#return_value' => $key,
      '#parents' => array('rackspace_cloud_region'),
    );
    // If this is the first one.
    if (count($form['rackspace_cloud_region']) == 1) {
      // Make the style match a normal radios group.
      $form['rackspace_cloud_region'][$key]['#prefix'] = '<div class="form-radios">';
    }
    // If this is the value previously saved.
    if ($key == variable_get('rackspace_cloud_region')) {
      $other_region = FALSE;
    }
  }

  // If other is used, reset all the default_values.
  if ($other_region) {
    foreach ($cf_regions as $key => $name) {
      $form['rackspace_cloud_region'][$key]['#default_value'] = 'other';
    }
  }

  /*
   * The 'container-inline' class places elements next to each other, while
   * the 'form-item' class provides the correct spacing between options.
   */
  $form['rackspace_cloud_region']['other'] = array(
    '#prefix' => '<div class="container-inline form-item">',
    '#suffix' => '</div>',
  );

  // By supplying the title here, instead of using the '#field_prefix' property
  // of the textfield, clicking the text will also select the radio button.
  $form['rackspace_cloud_region']['other']['other_option'] = array(
    '#type' => 'radio',
    '#title' => t('Other ('),
    '#return_value' => 'other',
    '#default_value' => $other_region ? 'other' : variable_get('rackspace_cloud_region'),
    '#parents' => array('rackspace_cloud_region'),
  );

  $form['rackspace_cloud_region']['other']['other_region_textfield'] = array(
    '#type' => 'textfield',
    '#default_value' => $other_region ? variable_get('rackspace_cloud_region') : '',
    '#size' => 20,
    '#suffix' => ')</div>',
  );

  $rackspace_cloud_region = variable_get('rackspace_cloud_region');
  $rackspace_cloud_username = variable_get('rackspace_cloud_username');
  $rackspace_cloud_api_key = variable_get('rackspace_cloud_api_key');
  $rackspace_cloud_container = variable_get('rackspace_cloud_container');
  $rackspace_cloud_cdn_domain = variable_get('rackspace_cloud_cdn_domain');

  $form['rackspace_cloud_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Enter your Rackspace Cloud username.'),
    '#default_value' => $rackspace_cloud_username,
    '#required' => TRUE,
  );

  $form['rackspace_cloud_api_key'] = array(
    '#type' => 'password',
    '#title' => t('API Key'),
    '#description' => t('Enter your Rackspace Cloud API Key.'),
    '#default_value' => $rackspace_cloud_api_key,
  );

  $form['rackspace_cloud_container'] = array(
    '#type' => 'textfield',
    '#title' => t('Container'),
    '#description' => t('Enter your Rackspace Cloud Container name.'),
    '#default_value' => $rackspace_cloud_container,
    '#required' => TRUE,
  );
  // If there is a username/api_key available, try to get the containers list.
  if ($rackspace_cloud_username && $rackspace_cloud_api_key) {
    try {
      $client = _cloud_files_get_client();
      $object_store_service = $client->objectStoreService('cloudFiles', $rackspace_cloud_region);
      $container_list = $object_store_service->listContainers();
      $container_options = array();
      while ($container = $container_list->Next()) {
        $container_options[$container->name] = $container->name;
      }
      if ($container_list) {
        $form['rackspace_cloud_container']['#type'] = 'select';
        $form['rackspace_cloud_container']['#options'] = $container_options;
      }
    }
    catch (Exception $e) {
      drupal_set_message(t('Error getting container list.'), 'error');
    }
  }

  $form['rackspace_cloud_cdn_domain'] = array(
    '#type' => 'value',
    '#title' => t('Domain'),
    '#description' => t('The container domain. Enter a custom CNAME here. Leave this empty to get the default domain of the selected container.'),
    '#default_value' => $rackspace_cloud_cdn_domain,
  );
  // If there is a domain set, allow it to be updated
  // this is so it is first set to the container domain name
  // but can be updated to a custom CNAME.
  if ($rackspace_cloud_cdn_domain) {
    $form['rackspace_cloud_cdn_domain']['#type'] = 'textfield';
    $form['rackspace_cloud_cdn_domain']['#required'] = TRUE;
  }

  $form['rackspace_cloud_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug'),
    '#description' => t('Check the box to enable logging.'),
    '#default_value' => variable_get('rackspace_cloud_debug'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_field_validate().
 *
 * Validate Rackspace Cloud settings
 */
function cloud_files_admin_validate($form, &$form_state) {
  $info = libraries_load('php-opencloud');
  if ($info['loaded']) {
    $user = $form_state['values']['rackspace_cloud_username'];
    $apikey = $form_state['values']['rackspace_cloud_api_key'] ? $form_state['values']['rackspace_cloud_api_key'] : variable_get('rackspace_cloud_api_key');
    $container = $form_state['values']['rackspace_cloud_container'];
    $rackspace_cloud_cdn_domain = $form_state['values']['rackspace_cloud_cdn_domain'];

    // If using Other authentication URL, set its value from the text field.
    if ($form_state['values']['rackspace_cloud_auth_url'] == 'other') {
      $form_state['values']['rackspace_cloud_auth_url'] = $form_state['values']['other_textfield'];
    }
    $auth_url = $form_state['values']['rackspace_cloud_auth_url'];

    // If using Other region, set its value from the text field.
    if ($form_state['values']['rackspace_cloud_region'] == 'other') {
      $form_state['values']['rackspace_cloud_region'] = $form_state['values']['other_region_textfield'];
    }
    $region = $form_state['values']['rackspace_cloud_region'];

    // If API Key was left empty, use the previously saved API Key
    // with this, it wont be possible to clear the API Key, only update.
    // This is so the API key doesnt have to be entered every time
    // if you are changing another setting like container, or debug mode.
    if (!$form_state['values']['rackspace_cloud_api_key']) {
      $form_state['values']['rackspace_cloud_api_key'] = $apikey;
    }

    try {
      $client = new OpenCloud\Rackspace($auth_url, array(
        'username' => $user,
        'apiKey' => $apikey,
      ));
      $client->authenticate();

      // If authentication didn't error, assume it succeeded, save variables now
      // so if container is incorrect, we can still fetch container list.
      variable_set('rackspace_cloud_username', $user);
      variable_set('rackspace_cloud_api_key', $apikey);
      variable_set('rackspace_cloud_auth_url', $auth_url);
      variable_set('rackspace_cloud_region', $region);
    }
    catch (Exception $e) {
      form_set_error('rackspace_cloud_username][rackspace_cloud_api_key', t('Error authenticating. Please check the Username and/or API Key.'));
    }

    // If there is not a domain set, get the container domain.
    if (!$rackspace_cloud_cdn_domain) {
      try {
        $object_store_service = $client->objectStoreService('cloudFiles', $region);
        $container = $object_store_service->getContainer($container);
        $form_state['values']['rackspace_cloud_cdn_domain'] = str_replace(array('http://', 'https://'), '', $container->getCdn()->getCdnUri());
      }
      catch (Exception $e) {
        form_set_error('rackspace_cloud_container', t('Container does not exist.'));
      }
    }
  }
  else {
    form_set_error('', t('The PHP SDK for OpenStack/Rackspace APIs was not loaded.'));
  }
}

/**
 * Implements hook_stream_wrappers().
 *
 * expose the stream wrappers to Drupal
 */
function cloud_files_stream_wrappers() {
  // Rackspace Cloud Files stream wrapper.
  $wrappers = array(
    'rcf' => array(
      'name' => t('Rackspace Cloud Files'),
      'class' => 'RackspaceCloudFilesStreamWrapper',
      'description' => t('Rackspace Cloud Files.'),
    ),
  );
  return $wrappers;
}

/**
 * Implements hook_libraries_info().
 */
function cloud_files_libraries_info() {
  return array(
    'php-opencloud' => array(
      'name' => 'PHP SDK for OpenStack/Rackspace APIs',
      'vendor url' => 'http://php-opencloud.com/',
      'download url' => 'http://php-opencloud.com/',
      'version arguments' => array(
        'file' => 'vendor/rackspace/php-opencloud/lib/OpenCloud/Version.php',
        'pattern' => "/    const VERSION = '([\d.]*)'/",
        'lines' => 100,
      ),
      'files' => array(
        'php' => array(
          'vendor/autoload.php',
        ),
      ),
    ),
  );
}

/**
 * Simple utility function for getting Rackspace Cloud client instance.
 * 
 * @return Rackspace
 *   Rackspace client instance.
 */
function _cloud_files_get_client() {
  $client = new OpenCloud\Rackspace(variable_get('rackspace_cloud_auth_url'), array(
    'username' => variable_get('rackspace_cloud_username'),
    'apiKey' => variable_get('rackspace_cloud_api_key'),
  ));

  $credentials = cache_get("rackspace_cloud_credentials");

  if ($credentials) {
    if (variable_get('rackspace_cloud_debug')) {
      watchdog("cloud_files", "loading cached credentials", NULL, WATCHDOG_DEBUG);
    }
    // Tenat should be an int and caused errors as a string.
    $credentials->data['tenant'] = (int) $credentials->data['tenant'];

    $client->importCredentials($credentials->data);
    // If authentication has expired, then it re-authenticates.
    if ($credentials->data['expiration'] != $client->getExpiration()) {
      $credentials = $client->exportCredentials();
      cache_set("rackspace_cloud_credentials", $credentials, 'cache', CACHE_TEMPORARY);
    }
  }
  else {
    if (variable_get('rackspace_cloud_debug')) {
      watchdog("cloud_files", "requesting Rackspace authentication", NULL, WATCHDOG_DEBUG);
    }
    $client->authenticate();

    $credentials = $client->exportCredentials();
    cache_set("rackspace_cloud_credentials", $credentials, 'cache', CACHE_TEMPORARY);
  }

  return $client;
}
