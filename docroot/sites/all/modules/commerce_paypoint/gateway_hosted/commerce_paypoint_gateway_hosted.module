<?php
/**
 * @file
 * Integrates PayPoint.net's Gateway Hosted payment method with Drupal Commerce.
 * See: https://www.paypoint.net/assets/guides/Gateway_Hosted.pdf
 */

/**
 * PayPoint.net's Gateway Hosted off-site payment page URL.
 */
define('PAYPOINT_GATEWAY_HOSTED_URL', 'https://www.secpay.com/java-bin/ValCard');

/**
 * Implements hook_menu().
 */
function commerce_paypoint_gateway_hosted_menu() {
  $items = array();

  // We need a custom callback page to processes the POST back from the
  // PayPoint.net-hosted payment page. The completion page, after payment
  // details have been submitted, is displayed relative to PayPoint.net's
  // servers i.e., on the PAYPOINT_GATEWAY_HOSTED_URL address. Therefore, we
  // can't display a fully-themed Drupal page. Instead, we collect the payload
  // data and issue a JavaScript redirect to bring the user back to the site.
  $items['commerce_paypoint/callback'] = array(
    'page callback' => 'commerce_paypoint_gateway_hosted_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paypoint_gateway_hosted_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['paypoint_gateway_hosted'] = array(
    'base' => 'commerce_paypoint_gateway_hosted',
    'title' => t('PayPoint.net Gateway Hosted'),
    'description' => t('Integrates PayPoint.net Web Hosted payment service.'),
    'short_title' => t('PayPoint.net'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the payment method settings form.
 *
 * @see commerce_paypoint_gateway_hosted_settings_form()
 */
function commerce_paypoint_gateway_hosted_default_settings() {
  return array(
    'merchant' => array(
      'merchant_id' => 'abcdef01',
      'remote_password' => '',
      'digest_key' => '',
    ),
    'template' => '',
    'allow_back' => 1,
    'callback_ssl' => 0,
    'duplicate_checking' => 1,
    'deferred' => array(
      'transaction_mode' => 'false',
      'reuse_credit_card_days' => 7,
      'reuse_debit_card_days' => 1,
    ),
    'testing' => array(
      'test_status' => COMMERCE_PAYPOINT_TEST_MODE_TEST,
      'default_cv2avs' => 'ALL MATCH',
    ),
  );
}

/**
 * Generates a settings form for the payment method options.
 *
 * @param $settings
 *   An array of the current settings.
 *
 * @return
 *   The settings form array.
 *
 * @ingroup forms
 */
function commerce_paypoint_gateway_hosted_settings_form($settings = NULL) {
  $form = array();

  // Merge current settings with defaults. This is only relevant before the form
  // is saved for the first time.
  $settings += commerce_paypoint_gateway_hosted_default_settings();

  $form['merchant'] = array(
    '#type' => 'fieldset',
    '#title' => t('Merchant settings'),
  );
  $form['merchant']['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Enter your PayPoint.net username (usually six letters followed by two numbers).'),
    '#default_value' => $settings['merchant']['merchant_id'],
  );
  $form['merchant']['remote_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Remote password'),
    '#description' => t('Enter the remote password that you entered into the merchant admin inferface on the PayPoint.net site. This should be between 8 and 30 characters long.'),
    '#maxlength' => 30,
    '#default_value' => $settings['merchant']['remote_password'],
  );
  $form['merchant']['digest_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Digest key'),
    '#description' => t('Enter the digest key that you entered into the merchant admin inferface on the PayPoint.net site. This should be between 8 and 30 characters long.'),
    '#maxlength' => 30,
    '#default_value' => $settings['merchant']['digest_key'],
  );

  $form['deferred'] = array(
    '#type' => 'fieldset',
    '#title' => t('Deferred transactions'),
  );
  $form['deferred']['transaction_mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction mode'),
    '#description' => t('Deferred transactions are useful if you want to take orders for items that you cannot always guarantee will be in stock. Using deferred transactions, you can take an initial authorisation (at which point no money has actually been taken) and then, when your product arrives in stock, you can release the funds for the deferred transaction and ship the product out to your customer. It is illegal in some countries to take payment for something which you don\'t have in stock.
<ul>
  <li>"Defer" will authorise only one unit of currency. This is useful to avoid tying up funds in your customer\'s account if all you want to do is get their details into the system.</li>
  <li>"Full" will authorise the full amount of the transaction and freeze the funds in the customer\'s account. A new authorisation takes place when funds are released so be careful not to ship goods before confirming release of funds.</li>
  <li>"Reuse" will authorise the full amount of the initial transaction but on release will use the original authorisation code (which was obtained by the initial deferred transaction - if it is still valid). If not still valid, releasing will cause a new authorisation to take place (as is the case with "Defer" and "Full").</li>
</ul>'),
    '#options' => array(
      COMMERCE_PAYMENT_DEFERRED_DISABLED => t('Disabled'),
      COMMERCE_PAYMENT_DEFERRED_TRUE => t('Defer'),
      COMMERCE_PAYMENT_DEFERRED_REUSE => t('Reuse'),
    ),
    '#default_value' => $settings['deferred']['transaction_mode'],
  );
  $form['deferred']['reuse_credit_card_days'] = array(
    '#type' => 'select',
    '#title' => t('Credit card reuse days'),
    '#multiple' => FALSE,
    '#description' => t('The number of days within which a credit card transaction should reuse the same authorisation code.'),
    '#options' => drupal_map_assoc(range(1, 14)),
    '#default_value' => $settings['deferred']['reuse_credit_card_days'],
  );
  $form['deferred']['reuse_debit_card_days'] = array(
    '#type' => 'select',
    '#title' => t('Debit card reuse days'),
    '#multiple' => FALSE,
    '#description' => t('The number of days within which a debit card transaction should reuse the same authorisation code.'),
    '#options' => drupal_map_assoc(range(1, 14)),
    '#default_value' => $settings['deferred']['reuse_debit_card_days'],
  );

  $form['template'] = array(
    '#type' => 'textfield',
    '#title' => t('Template'),
    '#description' => t('The off-site payment page can be customised by modifying the template file found at http://www.secpay.com/users/template.html and uploaded via the merchant admin interface. Enter the name of the uploaded template file here e.g., "template.html".'),
    '#default_value' => $settings['template'],
  );
  $form['allow_back'] = array(
   '#type' => 'checkbox',
   '#title' => t('Add a back button to the off-site payment page'),
   '#description' => t('Adding a back button to the off-site payment page will allow users to go back to the site to ammend their order. When a user presses this button they are returned to the checkout review page.'),
   '#default_value' => $settings['allow_back'],
  );
  $form['callback_ssl'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use SSL for the callback page'),
    '#default_value' => $settings['callback_ssl'],
  );
  $form['duplicate_checking'] = array(
    '#type' => 'checkbox',
    '#title' => t('Duplicate transaction checking'),
    '#description' => t('Duplicate transaction checking will stop the same order ID from the same user being used twice in the same hour. PayPoint.net believe this feature reduces customer bills by approximately 10% and also reduces the administration overhead, it is a "best efforts" feature however and can never be 100%. You must accept that occasionally you will get duplicates. During the testing phase of your integration, it is sometimes useful to not have to bother creating a new order ID for each transaction you send to PayPoint.net. If you wish to send test transactions with the same order ID but want PayPoint.net to not perform duplicate checks i.e., you want PayPoint.net to allow these duplicate transactions into the system without blocking them as duplicates then you must disable this option.'),
    '#default_value' => $settings['duplicate_checking'],
  );

  $form['testing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Testing settings'),
  );
  $form['testing']['test_status'] = array(
    '#type' => 'select',
    '#title' => t('Test status'),
    '#description' => t('"Test" mode will simulate an authorised callback without contacting the bank, "Auto-decline" will simulate a declined callback without contacting the bank, and "Live" will send the transaction to the bank for authorization.'),
    '#options' => array(
      COMMERCE_PAYPOINT_TEST_MODE_TEST => t('Test'),
      COMMERCE_PAYPOINT_TEST_MODE_DECLINE => t('Auto-decline'),
      COMMERCE_PAYPOINT_TEST_MODE_LIVE => t('Live'),
    ),
    '#default_value' => $settings['testing']['test_status'],
  );
  $form['testing']['default_cv2avs'] = array(
    '#type' => 'select',
    '#title' => t('Default CV2AVS response'),
    '#multiple' => FALSE,
    '#description' => t("This is the response value for the CV2CVS callback parameter returned by PayPoint.net's server when running in test mode. Especially useful if you have set the CV2AVS options in the merchant admin interface and donâ€™t want to have to remove them for testing specific CV2AVS results."),
    '#options' => drupal_map_assoc(array(
      'ALL MATCH',
      'SECURITY CODE MATCH ONLY',
      'ADDRESS MATCH ONLY',
      'NO DATA MATCHES',
      'DATA NOT CHECKED',
      'PARTIAL ADDRESS MATCH / POSTCODE',
      'PARTIAL ADDRESS MATCH / ADDRESS',
      'SECURITY CODE MATCH / POSTCODE',
      'SECURITY CODE MATCH / ADDRESS',
    )),
    '#default_value' => $settings['testing']['default_cv2avs'],
  );

  return $form;
}

/**
 * Generates the form to POST data to the off-site payment page.
 *
 * This form is displayed directly before redirecting to PayPoint.net's off-site
 * payment page. It is auto-submitted via JavaScript (enabled via the payment
 * method's "offsite_autoredirect" property).
 *
 * @ingroup forms
 */
function commerce_paypoint_gateway_hosted_order_form($form, &$form_state, $order, $settings) {
  $data = commerce_paypoint_gateway_hosted_data_get($order, $settings);

  foreach ($data as $key => $value) {
    $form[$key] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['#action'] = PAYPOINT_GATEWAY_HOSTED_URL;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to PayPoint.net'),
  );

  return $form;
}

/**
 * Returns the form that is displayed directly before the off-site payment page.
 */
function commerce_paypoint_gateway_hosted_redirect_form($form, &$form_state, $order, $payment_method) {
  return commerce_paypoint_gateway_hosted_order_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Validates the transaction and routes the user to the relevant checkout page.
 *
 * When the user returns back from the off-site payment page, we need to ensure
 * they are returned to either the checkout completion page if the transaction
 * was successful, or the checkout review page if the transaction failed so the
 * user can try again.
 */
function commerce_paypoint_gateway_hosted_redirect_form_validate($order, $payment_method) {
  $transaction = commerce_payment_transaction_load($order->data['transaction_id']);
  $response = $transaction->payload[$order->data['callback_timestamp']];

  // Progress the user to the correct page in the checkout process.
  return $transaction->status !== COMMERCE_PAYMENT_STATUS_FAILURE;
}

/**
 * Collects the request data to be sent to PayPoint.net's off-site payment page.
 *
 * @param $order
 *   The order object.
 * @param $settings
 *   The current payment method's settings array.
 *
 * @return $data
 *   The data to be sent in the request to the off-site payment page.
 */
function commerce_paypoint_gateway_hosted_data_get($order, $settings) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = commerce_line_items_total($order_wrapper->commerce_line_items);

  $data = array(
    'merchant' => $settings['merchant']['merchant_id'],
    'trans_id' => $order->order_id,
    'amount' => _commerce_paypoint_order_total_get($order),
    'callback' => url('commerce_paypoint/callback', array('absolute' => TRUE)),
    'currency' => $total['currency_code'],
    'dups' => $settings['duplicate_checking'] === 1 ? 'true' : 'false',
    'ssl_cb' => $settings['callback_ssl'] === 1 ? 'true' : 'false',
    'cb_post' => 'true', // Set the callback method to POST.
    // Currently hard-coded but the API allows custom field list using any
    // callback parameters.
    'md_flds' => 'trans_id:amount:callback',
    'digest' => _commerce_paypoint_gateway_hosted_digest_parameter_create($order, $settings),
    'template' => $settings['template'],
    'deferred' => commerce_paypoint_deferred_parameter_format($settings),
  );

  // Values of either 'true' or 'false' mean we're in testing mode.
  if ($settings['testing']['test_status'] != COMMERCE_PAYPOINT_TEST_MODE_LIVE) {
    // The Integration Guide suggests that we avoid adding the test_status
    // parameter when in live mode.
    $data['test_status'] = $settings['testing']['test_status'];
    // Simulate the CV2AVS response.
    $data['default_cv2avs'] = $settings['testing']['default_cv2avs'];
  }

  // Add the back button to the off-site payment page.
  if ($settings['allow_back']) {
    $data['show_back'] = TRUE;
    $data['backcallback'] = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  }

  // Add the billing details if they exist.
  if (!empty($order_wrapper->commerce_customer_billing->commerce_customer_address)) {
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (!empty($billing_address['name_line'])) {
      $data['bill_name'] = $billing_address['name_line'];
    }
    else {
      $data['bill_name'] = $billing_address['first_name'] . ' ' . $billing_address['last_name'];
    }

    $data['bill_company'] = $billing_address['organisation_name'];
    $data['bill_addr_1'] = $billing_address['thoroughfare'];
    $data['bill_addr_2'] = $billing_address['premise'];
    $data['bill_city'] = $billing_address['locality'];
    $data['bill_state'] = $billing_address['administrative_area'];
    $data['bill_country'] = $billing_address['country'];
    $data['bill_post_code'] = $billing_address['postal_code'];
  }

  // The billing email address is used for order confirmation from PayPoint.net
  // to the customer and, according to the Gateway Hosted Integration Guide,
  // should always be supplied.
  $data['bill_email'] = $order->mail;

  if (variable_get('commerce_paypoint_debug', FALSE)) {
    debug($data);
  }

  return $data;
}

/**
 * Processes the callback response from PayPoint.net.
 */
function commerce_paypoint_gateway_hosted_callback() {
  // Sanitize the incoming data.
  $response = array_map('check_plain', $_POST);

  if (empty($response['trans_id'])) {
    return MENU_NOT_FOUND;
  }

  // Load the relevant order.
  $order = commerce_order_load($response['trans_id']);

  if (!$order) {
    return MENU_NOT_FOUND;
  }

  // Load the payment method instance and check that it is using the correct
  // method_id.
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  if (!$payment_method || $payment_method['method_id'] != 'paypoint_gateway_hosted') {
    return MENU_NOT_FOUND;
  }

  // Initialize the transaction.
  $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response['trans_id'];

  // The amount callback parameter is the amount actually authorised by the
  // bank. If the bank does not authorise the payment, the amount callback
  // parameter will be empty.
  $amount = empty($response['amount']) ? 0 : $response['amount'];

  // PayPoint.net only sends back the currency callback parameter if it is not
  // GBP. We can therefore assume that a transaction without currency set is in
  // GBP.
  $currency = empty($response['currency']) ? 'GBP' : $response['currency'];

  $transaction->amount = commerce_currency_decimal_to_amount($amount, $currency);
  $transaction->currency_code = $currency;
  $transaction->payload[REQUEST_TIME] = $response;
  $transaction->remote_status = _commerce_paypoint_response_remote_status_calculate($response);

  $messages = array();

  // Handle simple response codes. Complex response codes which contain multiple
  // failure reasons (such as P:NEC) are handled separately below.
  switch ($response['code']) {
    case 'A': // Transaction authorised by bank.
      // Deferred transactions don't take the payment at the time of sale so
      // mark the payment as pending until it can be manually released.
      if (!empty($response['deferred']) && $response['deferred'] === 'true') {
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      }

      $messages[] = _commerce_paypoint_response_message_calculate($response);
      break;

    case 'N': // Transaction not authorised.
    case 'C': // Communication problem.
    case 'F': // Fraud condition detected.
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $messages[] = _commerce_paypoint_response_message_calculate($response);
      break;

    // Pre-bank checks failed.
    case 'P:A': case 'P:X': case 'P:P': case 'P:S': case 'P:E': case 'P:I':
    case 'P:C': case 'P:T': case 'P:N': case 'P:M': case 'P:B': case 'P:D':
    case 'P:V': case 'P:R': case 'P:#':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $messages[] = t('Pre-bank checks failed: %message', array('%message' => $transaction->message));
      break;
  }

  // Handle complex response codes. When multiple pre-bank checks fail, we're
  // given a compound code parameter such as P:NEC (which means that the name,
  // expiry date, and card number fields are all invalid or have not been
  // supplied).
  if (strpos($response['code'], 'P:') === 0 && strlen($response['code']) > 3) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $messages[] = t('Multiple pre-bank checks failed with error code %error_code:', array('%error_code' => $response['code']));

    // Split any characters that appear after "P:" into an array.
    $error_codes = str_split(substr($response['code'], 2));

    // Add each of the pre-authorisation failure messages to the messages array.
    foreach ($error_codes as $error_character) {
      $messages[] = _commerce_paypoint_response_message_calculate('P:' . $error_character);
    }
  }

  // Add the result of the CV2 and AVS anti-fraud checks sent from the bank.
  if (isset($response['cv2avs'])) {
    $messages[] = t('CV2AVS message: %message', array('%message' => _commerce_paypoint_cv2avs_message_parse($response['cv2avs'])));
  }

  // Check the response hash to verify that this request came from the
  // PayPoint.net servers. If this fails it could be a possible fraud attempt.
  if (!_commerce_paypoint_gateway_hosted_hash_match($response['hash'], $order, $payment_method['settings'])) {
    // Sometimes, when the authentication doesn't match, the payment is still
    // taken. Therefore, we can't simply halt the checkout process otherwise we
    // might confuse the customer. Instead, log the order_id and ip address of
    // potential fraud cases.
    watchdog('commerce_paypoint_gateway_hosted', 'Hash authentication failed for order @order_id from @ip', array('@order_id' => $order->order_id, '@ip' => $response['ip']), WATCHDOG_NOTICE, l(t('view'), 'admin/commerce/orders/' . $order->order_id));
    $messages[] = t('Hash authentication failed for this order. Possible fraud attempt.');
  }

  // Add all of the messages to the transaction.
  $transaction->message = implode(' ', $messages);

  // Save the transaction and redirect to the next step in the checkout
  // process.
  commerce_payment_transaction_save($transaction);

  // Stash the transaction ID in the order object for use in the validate
  // handler.
  $order->data['transaction_id'] = $transaction->transaction_id;
  // Include the timestamp of the callback to ensure we're processing the
  // correct payload.
  $order->data['callback_timestamp'] = REQUEST_TIME;
  commerce_order_save($order);

  // Both success and failure states are handled by the checkout router on the
  // checkout/%order_id/payment/return path.
  $destination = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));

  // The callback page is displayed relative to the PayPoint.net server so
  // unfortunately we can't display a fully-themed page. Instead, issue
  // a JavaScript redirect to the checkout router.
  $format = <<<HTML
<!doctype>
<html>
<head>
<script type="text/javascript">window.location.replace("%s");</script>
</head>
<body>
<p>Please <a href="%s">return to %s</a> to continue the checkout process.</p>
</body>
<html>
HTML;
  printf($format, $destination, $destination, variable_get('site_name', 'Drupal'));

  // Exit gracefully to avoid displaying a broken page.
  drupal_exit();
}

/**
 * Creates the digest parameter to authenticate with PayPoint.net.
 *
 * PayPoint.net requires the "digest" parameter to be sent in the POST to the
 * off-site payment page to authenticate the request. The token is generated by
 * concatenating trans_id:amount:remote_password and encypting using md5.
 */
function _commerce_paypoint_gateway_hosted_digest_parameter_create($order, $settings) {
  $parameters = array(
    'trans_id' => $order->order_id,
    'amount' => _commerce_paypoint_order_total_get($order),
    'remote_password' => $settings['merchant']['remote_password'],
  );

  return md5(implode($parameters));
}

/**
 * Authenticates that the callback response came from PayPoint.net.
 *
 * PayPoint.net creates a security token to authenticate their callback response
 * by generating a URL query string from the list of callback parameters
 * (specified in the md_flds parameter), appending the secret digest key (set in
 * the merchant admin interface), and encrypting using md5.
 *
 * This function follows the same process to validate that the request came from
 * PayPoint.net's servers.
 *
 * Unfortunately, we cannot guarentee that the hash will match for all
 * successful transactions. Therefore, instead of failing the checkout process
 * we simply log the order ID and IP address of the request as a potential fraud
 * attempt.
 *
 * There is a known issue where foreign or special characters can cause the hash
 * to fail.
 *
 * @param $hash
 *   The incoming md5 encrypted hash to check.
 * @param $order
 *   The order object.
 * @param $settings
 *   The payment method settings array.
 *
 * @return
 *   A boolean value indicating whether the hash is authentic.
 */
function _commerce_paypoint_gateway_hosted_hash_match($hash, $order, $settings) {
  // Currently hard-coded to use trans_id:amount:callback but could use any
  // callback parameters if desired.
  $query_parameters = array(
    'trans_id' => $order->order_id,
    'amount' => _commerce_paypoint_order_total_get($order),
    'callback' => url('commerce_paypoint/callback', array('absolute' => TRUE)),
    // Using NULL for the value ensures only the key is appended.
    $settings['merchant']['digest_key'] => NULL,
  );

  // The call to drupal_http_build_query will rawurlencode query parameters so
  // we need to decode them using rawurldecode before encryption.
  $query_string = rawurldecode(drupal_http_build_query($query_parameters));

  return $hash == md5($query_string);
}

