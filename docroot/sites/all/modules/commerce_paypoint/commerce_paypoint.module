<?php
/**
 * @file
 * Integrates PayPoint.net's payment methods with Drupal Commerce.
 *
 * Provides shared functions for the supported payment methods.
 */

/**
 * Defines the mode of operation for the transaction.
 */
define('COMMERCE_PAYPOINT_TEST_MODE_TEST', 'true');
define('COMMERCE_PAYPOINT_TEST_MODE_DECLINE', 'false');
define('COMMERCE_PAYPOINT_TEST_MODE_LIVE', 'live');

/**
 * Deferred transaction modes.
 */
define('COMMERCE_PAYMENT_DEFERRED_DISABLED', 'false');
define('COMMERCE_PAYMENT_DEFERRED_TRUE', 'true');
define('COMMERCE_PAYMENT_DEFERRED_REUSE', 'reuse');

/**
 * Retrieves the order total in decimal format.
 *
 * @param $order
 *   The order object to retrieve the order total for.
 *
 * @return
 *   The order total in decimal format.
 */
function _commerce_paypoint_order_total_get($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = commerce_line_items_total($order_wrapper->commerce_line_items);

  return commerce_currency_amount_to_decimal($total['amount'], $total['currency_code']);
}

/**
 * Calculates the human-readable outcome message.
 *
 * When payment is attempted on PayPoint.net's off-site payment page, a code is
 * returned in the callback specifying the outcome of the transaction. This
 * function returns the corresponding message for such codes.
 *
 * @param $response
 *   Either the whole response as an array or a single code string.
 *
 * @return
 *   A human-readable response code message, possibly including additional
 *   information relevant to the specific response code returned.
 */
function _commerce_paypoint_response_message_calculate($response) {
  // Accept response as an array or a string. When we have an array we should
  // also have additional messages in the array such as "auth_code" and
  // "messages".
  $code = (is_array($response)) ? $response['code'] : $response;

  switch ($code) {
    case 'A': // Transaction authorised, we accept and process the payment on our end and live happily ever after.
      return t('Transaction authorised by bank. Authorisation code %auth_code available as bank reference.', array('%auth_code' => $response['auth_code']));

    case 'N': // Payment not authorised by the bank.
      return t('Transaction not authorised. %message. %reason.', array('%message' => $response['message'], '%reason' => _commerce_paypoint_not_authorised_message($response['resp_code'])));

    case 'F':
      return t('The PayPoint.net system has detected a fraud condition and rejected the transaction. %message.', array('%message' => $response['message']));

    case 'C': // Communication error.
      return t('Communication problem. Trying again later may well work.');

    // Pre-bank authorisation check failure messages.
    case 'P:A':
      return t('Pre-bank checks. Amount not supplied or invalid.');
    case 'P:X':
      return t('Pre-bank checks. Not all mandatory parameters supplied.');
    case 'P:P':
      return t('Pre-bank checks. Same payment presented twice.');
    case 'P:S':
      return t('Pre-bank checks. Start date invalid.');
    case 'P:E':
      return t('Pre-bank checks. Expiry date invalid.');
    case 'P:I':
      return t('Pre-bank checks. Issue number invalid.');
    case 'P:C':
      return t('Pre-bank checks. Card number fails LUHN check (the card number is wrong).');
    case 'P:T':
      return t('Pre-bank checks. Card type invalid - i.e., does not match card number prefix.');
    case 'P:N':
      return t('Pre-bank checks. Customer name not supplied.');
    case 'P:M':
      return t('Pre-bank checks. Merchant does not exist or not registered yet.');
    case 'P:B':
      return t('Pre-bank checks. Merchant account for card type does not exist.');
    case 'P:D':
      return t('Pre-bank checks. Merchant account for this currency does not exist.');
    case 'P:V':
      return t('Pre-bank checks. CV2 security code mandatory and not supplied or invalid.');
    case 'P:R':
      return t('Pre-bank checks. Transaction timed out awaiting a virtual circuit. Merchant may not have enough virtual circuits for the volume of business.');
    case 'P:#':
      return t('Pre-bank checks. No MD5 hash/token key set up against account.');
  }
}

/**
 * Calculates the human-readable remote status.
 *
 * @param $response
 *   The response array.
 *
 * @return
 *   A human-readable response remote status.
 */
function _commerce_paypoint_response_remote_status_calculate($response) {
  $code = $response['code'];

  switch ($code) {
    case 'A':
      if (!empty($response['deferred']) && $response['deferred'] === 'true') {
        return t('Deferred');
      }

      return t('Payment taken');

    case 'N':
      return t('Not authorised');

    case 'C':
      return t('Communication problem');

    case 'F':
      return t('Fraud condition');
  }

  if (strpos($code, 'P:') === 0) {
    return t('Pre-auth failed');
  }

  return t('Unknown');
}

/**
 * Matches the "resp_code" callback parameter to its human-readable equivalent.
 *
 * The "resp_code" callback parameter is only returned when a transaction is
 * declined and the "code" callback parameter is equal to N.
 *
 * This is a failure message sent from the bank and should not be displayed to
 * the cardholder.
 *
 * @param $code
 *   The resp_code callback parameter indicating the reason why a transaction
 *   was not authorised.
 *
 * @return $message
 *   The human-readable message string.
 */
function _commerce_paypoint_not_authorised_message($code) {
  switch ($code) {
    case 2:
    case 83:
      $message = t('Referral (it may be possible to obtain an authorisation code from the bank over the phone).');
      break;

    case 5:
    case 54:
      $message = t('Not authorised by the bank.');
      break;

    case 30:
    default:
      $message = t('General error (retrying after 1 minute may succeed, depending on the error).');
      break;
  }

  return $message;
}

/**
 * Returns a human-readable CV2AVS response message.
 *
 * @param $code
 *   The "cv2avs" callback parameter.
 *
 * @return
 *   The human-readable message string.
 */
function _commerce_paypoint_cv2avs_message_parse($code) {
  switch ($code) {
    case 'ALL MATCH':
      return t('All the data provided matched that which the card issuer had on record.');
    case 'SECURITY CODE MATCH ONLY':
      return t('Only the security code matched.');
    case 'ADDRESS MATCH ONLY':
      return t('Only the address matched.');
    case 'NO DATA MATCHES':
      return t('None of the data matched.');
    case 'DATA NOT CHECKED':
      return t('The cv2avs system is unavailable or not supported by this card issuer.');
    case 'PARTIAL ADDRESS MATCH / POSTCODE':
      return t('The postcode matched but the address did not.');
    case 'PARTIAL ADDRESS MATCH / ADDRESS':
      return t('The address matched but the postcode did not.');
    case 'SECURITY CODE MATCH / POSTCODE':
      return t('The security code and postcodes matched but the address did not.');
    case 'SECURITY CODE MATCH / ADDRESS':
      return t('The security code and address matched but the postcode did not.');
    default:
      return t('Unkown error.');
  }
}

/**
 * Returns a human-readable mode of operation.
 *
 * @param $test_mode
 *   The test mode request parameter.
 *
 * @return
 *   The human-readable mode of operation string.
 */
function _commerce_paypoint_test_mode_title_get($test_mode) {
  switch ($test_mode) {
    case COMMERCE_PAYPOINT_TEST_MODE_TEST:
      return t('Test');
    case COMMERCE_PAYPOINT_TEST_MODE_DECLINE:
      return t('Auto-decline');
    case COMMERCE_PAYPOINT_TEST_MODE_LIVE:
      return t('Live');
  }
}

/**
 * Returns the "deferred" request parameter in the required format.
 *
 * The deferred parameter is either 'true' or a compound string of options
 * specifying the original authorisation code reuse window e.g., 'reuse:7:1'.
 *
 * @param $settings
 *   The payment method settings array.
 *
 * @return
 *   The formatted "deferred" request parameter string.
 */
function commerce_paypoint_deferred_parameter_format($settings) {
  $deferred = array(
    $settings['deferred']['transaction_mode'],
  );

  // If the deferred transaction mode is 'reuse', add the reuse periods.
  if ($settings['deferred']['transaction_mode'] === COMMERCE_PAYMENT_DEFERRED_REUSE) {
    $deferred[] = $settings['deferred']['reuse_credit_card_days'];
    $deferred[] = $settings['deferred']['reuse_debit_card_days'];
  }

  return implode(':', $deferred);
}

