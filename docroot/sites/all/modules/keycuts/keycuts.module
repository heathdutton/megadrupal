<?php
/**
 * @file
 * A module providing keyboard shortcuts in Drupal
 *
 * Uses the Mousetrap library available through: http://craig.is/killing/mice
 *
 * Provide Keyboard shortcuts inside drupal.
 * By default these keys are mapped:
 *
 * Ctrl+s => 'Save'
 *   This actually performs a click trigger on a #edit-submit element.
 *
 * Ctrl+e => 'Edit content'
 *   Redirects to the edit page of the current node.
 *
 * Ctrl+n => 'Add new content'
 *   Redirects to the add content page of the current node type,
 *   or the add content overview page.
 *
 */

/**
 * Implements hook_init().
 */
function keycuts_init() {

  if (keycuts_is_enabled()) {

    $library = libraries_load('mousetrap');
    $available = ($library && !empty($library['loaded']));

    if ($available) {
      drupal_add_js(drupal_get_path('module', 'keycuts') . '/js/jquery.keycuts.js');

      $shortcuts = keycuts_get_shortcuts();
      foreach ($shortcuts as $delta => $shortcut) {
        foreach ($shortcut['arguments'] as $name => $value) {
          $shortcuts[$delta]['arguments'][$name] = token_replace($value);
        }
      }

      drupal_add_js(array(
        'keycuts' => array(
          'shortcuts' => $shortcuts
        )
      ), 'setting');
    }

  }
}

/**
 * Implements hook_block_info().
 */
function keycuts_block_info() {
  $blocks['keycuts'] = array(
    'info' => t('Keyboard shortcuts'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function keycuts_block_view($delta = '') {
  switch ($delta) {
    case 'keycuts':
      $block['subject'] = t('Keyboard shortcuts');
      $block['content'] = keycuts_block_contents();
      break;
  }
  return $block;
}

/**
 * Generate the contents for the keyboard shortcuts block.
 */
function keycuts_block_contents() {

  $shortcuts = keycuts_get_shortcuts();
  if ($shortcuts) {
    $items = array();
    foreach ($shortcuts as $delta => $shortcut) {
      $items[] = '<div class="kc_label">' . $shortcut['label'] . '</div><div class="kc_sequence">' . $shortcut['sequence'] . '</div>';
    }

    return theme_item_list(array(
      'items' => $items,
      'title' => '',
      'type' => 'ul',
      'attributes' => array(
        'class' => 'kc_shortcuts',
      ),
    ));

  }
  else {
    return;
  }

}

/**
 * Implements hook_libraries_info().
 */
function keycuts_libraries_info() {
  $libraries['mousetrap'] = array(
    'name' => 'Mousetrap',
    'vendor url' => 'http://craig.is/killing/mice',
    'download url' => 'http://cdn.craig.is/js/mousetrap/mousetrap.min.js',
    'files' => array(
      'js' => array(
        'mousetrap.min.js',
      ),
    ),
    'version arguments' => array(
      'file' => 'mousetrap.min.js',
      'pattern' => '/mousetrap\sv([([0-9a-zA-Z\.-]+)\s/s',
      'lines' => 1,
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function keycuts_menu() {
  $items = array();
  $items['admin/config/user-interface/accessibility'] = array(
    'title' => 'Accessibility',
    'description' => 'Configure accessibility settings.',
    'access arguments' => array(
      'administer settings',
    ),
  );

  $items['admin/config/user-interface/accessibility/keycuts'] = array(
    'title' => 'Keyboard Shortcuts',
    'description' => 'Configure keyboard shortcuts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'keycuts_settings_config_form',
    ),
    'access arguments' => array(
      'administer settings',
    ),
  );

  $items['admin/config/user-interface/accessibility/keycuts/import'] = array(
    'title' => 'Import',
    'description' => 'Import shortcuts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'keycuts_import_page',
    ),
    'access arguments' => array(
      'administer settings',
    ),
    'type' => MENU_LOCAL_ACTION | MENU_LOCAL_TASK,
  );

  $items['admin/config/user-interface/accessibility/keycuts/export'] = array(
    'title' => 'Export',
    'description' => 'Export shortcuts',
    'page callback' => 'keycuts_export_page',
    'access arguments' => array(
      'administer settings',
    ),
    'type' => MENU_LOCAL_TASK | MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Generate the admin config form.
 */
function keycuts_settings_config_form($form, &$form_state) {

  $form = array();

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
    '#title' => 'Settings',
    '#tree' => TRUE,
  );

  // Enable shortcuts in general.
  $library = libraries_detect('mousetrap');
  $available = ($library && !empty($library['installed']));
  if (!$available) {
    $error = $library['error'];
    $error_message = $library['error message'];
    drupal_set_message($error_message, 'error');
  }

  if($available && isset($form_state['values']['settings']['enable'])) {
    $enable = $form_state['values']['settings']['enable'];
  }
  else {
    $enable = keycuts_is_enabled();
  }
  $form['settings']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#description' => t('Enable the use of keyboard shortcuts (as defined below)'),
    '#default_value' => $enable,
    '#disabled' => !$available,
  );

  $form['shortcuts'] = array(
    '#type' => 'fieldset',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
    '#title' => 'Shortcuts',
    '#tree' => TRUE,
    '#prefix' => '<div id="accessibility-keycuts-shortcuts-wrapper">',
    '#suffix' => '</div>',
  );

  $stored = keycuts_get_shortcuts();
  $shortcuts = isset($form_state['values']['shortcuts']) ? $form_state['values']['shortcuts'] : $stored;

  // Check if we need to delete or add a shortcut.
  if (isset($form_state['triggering_element'])) {
    $id = $form_state['triggering_element']['#id'];
    $matches = array();
    if (preg_match('/(.*)-delete/i', $id, $matches)) {
      $delta = $matches[1];
      unset($shortcuts[$delta]);
    }
    else if ($id == 'add') {
      $shortcuts[] = array(
        'sequence' => '',
        'enable_during_input' => 1,
        'prevent_default' => 1,
        'action' => 'redirect',
        'arguments' => array(
          'url' => '',
        ),
      );
    }
  }

  // Ignore non delta items in the shortcuts array.
  unset($shortcuts['add']);
  unset($shortcuts['tokens']);

  $delta = 0;
  foreach ($shortcuts as $shortcut) {

    $sequence = $shortcut['sequence'];
    $auto_label = (empty($sequence) ? 'Undefined shortcut' : $sequence);
    $label = empty($shortcut['label']) ? $auto_label : $shortcut['label'];

    $form['shortcuts'][$delta] = array(
      '#type' => 'fieldset',
      '#collapsed' => !empty($sequence),
      '#collapsible' => TRUE,
      '#title' => ($label != $auto_label ? $label . ' (' . $auto_label . ')' : $label),
      '#tree' => TRUE,
      '#prefix' => '<div id="accessibility-keycuts-shortcuts-' . $delta . '-wrapper">',
      '#suffix' => '</div>',
    );

    $form['shortcuts'][$delta]['label'] = array(
      '#type' => 'textfield',
      '#title' => 'Label',
      '#description' => 'Give the shortcut a label (used in the gui).',
      '#default_value' => $label,
    );

    $form['shortcuts'][$delta]['sequence'] = array(
      '#type' => 'textfield',
      '#title' => 'Sequence',
      '#description' => 'Give the key sequence to associate to this shortcut',
      '#default_value' => $sequence,
    );

    $enable = $shortcut['enable_during_input'];
    $form['shortcuts'][$delta]['enable_during_input'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable during input'),
      '#description' => t('Enable the use of the shortcut inside of inputs (textarea, text, select, editable content)'),
      '#default_value' => $enable,
    );

    $enable = $shortcut['prevent_default'];
    $form['shortcuts'][$delta]['prevent_default'] = array(
      '#type' => 'checkbox',
      '#title' => t('Prevent default'),
      '#description' => t('Prevent default behaviour of the shortcut sequence (eg. Ctrl+S, normally saves the webpage).'),
      '#default_value' => $enable,
    );

    $options = array(
      'trigger' => 'trigger',
      'redirect' => 'redirect',
      'callback' => 'callback',
    );
    $action = $shortcut['action'];
    $form['shortcuts'][$delta]['action'] = array(
      '#type' => 'select',
      '#title' => 'Action',
      '#description' => 'Give the action to be executed',
      '#default_value' => $action,
      '#options' => $options,
      '#ajax' => array(
        'event' => 'change',
        'callback' => 'keycuts_javascript_callback_action_change',
      ),
    );

    $form['shortcuts'][$delta]['arguments'] = array(
      '#type' => 'fieldset',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
      '#tree' => TRUE,
      '#title' => 'Action settings',
      '#prefix' => '<div id="accessibility-keycuts-shortcuts-' . $delta . '-arguments-wrapper">',
      '#suffix' => '</div>',
    );

    $arguments = $shortcut['arguments'];
    switch ($action) {
      case 'trigger':
        $options = array(
          'click' => 'click',
          'mouseleave' => 'mouseleave',
          'mouseenter' => 'mouseenter',
        );
        $form['shortcuts'][$delta]['arguments']['type'] = array(
          '#type' => 'select',
          '#title' => 'Type',
          '#default_value' => $arguments['type'],
          '#options' => $options,
        );
        $form['shortcuts'][$delta]['arguments']['selector'] = array(
          '#type' => 'textfield',
          '#title' => 'Selector',
          '#description' => 'Enter a jQuery style element selector. You can use tokens (see below).',
          '#default_value' => $arguments['selector'],
        );
        break;
      case 'redirect':
        $form['shortcuts'][$delta]['arguments']['url'] = array(
          '#type' => 'textfield',
          '#title' => 'URL',
          '#description' => 'Enter a url to redirect to. You can use tokens (see below).',
          '#default_value' => $arguments['url'],
        );
        break;
      case 'callback':
        $form['shortcuts'][$delta]['arguments']['callback'] = array(
          '#type' => 'textfield',
          '#title' => 'Callback',
          '#description' => 'The javascript callback to execute when the shortcut is pressed.',
          '#default_value' => $arguments['callback'],
        );
        break;
    }

    $form['shortcuts'][$delta]['delete'] = array(
      '#type' => 'button',
      '#id' => $delta . '-delete',
      '#name' => $delta . '-delete',
      '#value' => t('Remove shortcut'),
      '#ajax' => array(
        'event' => 'click',
        'callback' => 'keycuts_javascript_callback_refresh_shortcuts',
      ),
    );

    $delta++;
  }

  $form['shortcuts']['add'] = array(
    '#type' => 'button',
    '#id' => 'add',
    '#name' => 'add',
    '#value' => t('Add shortcut'),
    '#ajax' => array(
      'event' => 'click',
      'callback' => 'keycuts_javascript_callback_refresh_shortcuts',
    ),
  );

  $form['shortcuts']['tokens'] = array(
    '#markup' => theme('token_tree', array(
      'token_types' => array(
        'node',
        'user',
      ),
    )),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

/**
 * Handle the admin config form, and save the data.
 */
function keycuts_settings_config_form_submit($form, &$form_state) {

  $settings = $form_state['values']['settings'];
  variable_set('keycuts_settings_enable', $settings['enable']);

  $shortcuts = $form_state['values']['shortcuts'];
  unset($shortcuts['add']);
  unset($shortcuts['token']);
  foreach ($shortcuts as $delta => $shortcut) {
    if (empty($shortcut['sequence'])) {
      unset($shortcuts[$delta]);
    }
  }
  variable_set('keycuts_shortcuts', serialize($shortcuts));

  drupal_set_message(t('The settings have been saved'));
}

/**
 * Refresh the shortcuts after one was added or removed.
 */
function keycuts_javascript_callback_refresh_shortcuts(&$form, $form_state) {
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace('#accessibility-keycuts-shortcuts-wrapper', render($form['shortcuts'])),
    ),
  );
}

/**
 * Refresh the argument settings of a shortcut action.
 */
function keycuts_javascript_callback_action_change(&$form, $form_state) {

  $id = $form_state['triggering_element']['#id'];
  $matches = array();
  if (preg_match('/edit-shortcuts-([0-9]+)-action/i', $id, $matches)) {
    $delta = $matches[1];
  }
  else {
    $delta = 0;
  }

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace('#accessibility-keycuts-shortcuts-' . $delta . '-arguments-wrapper', render($form['shortcuts'][$delta]['arguments'])),
    ),
  );
}

/**
 * Page callback to present the export definitions.
 */
function keycuts_export_page() {

  drupal_set_title(t('Export') . ' ' . drupal_get_title());

  $output = '<textarea rows="25" cols="100">';
  $output .= keycuts_get_shortcuts(false);
  $output .= '</textarea>';
  return $output;
}

/**
 * Import shortcuts page.
 */
function keycuts_import_page($form, &$form_state) {

  drupal_set_title(t('Import') . ' ' . drupal_get_title());

  $form['shortcuts'] = array(
    '#type' => 'textarea',
    '#title' => t('Paste shortcuts code here'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#validate' => array(
      'keycuts_import_validate',
    ),
    '#submit' => array(
      'keycuts_import_submit',
    ),
  );
  return $form;
}

/**
 * Validation handler for the import shortcuts page.
 */
function keycuts_import_validate($form, &$form_state) {
  $input = $form_state['values']['shortcuts'];

  if (unserialize($input) === FALSE) {
    return form_error($form['shortcuts'], t('Unable to interpret shortcuts code.'));
  }

  return TRUE;
}

/**
 * Submit handler for the import shortcuts page.
 */
function keycuts_import_submit($form, &$form_state) {
  $input = $form_state['values']['shortcuts'];
  variable_set('keycuts_shortcuts', $input);
  drupal_goto('admin/config/user-interface/accessibility/keycuts');
}

/**
 * Implements hook_token_info().
 */
function keycuts_token_info() {
  global $base_path;
  global $base_root;
  global $base_url;

  $info['tokens']['site']['base-path'] = array(
    'name' => t('Base-path'),
    'description' => t("The base path of the website ($base_path)."),
  );
  $info['tokens']['site']['base-root'] = array(
    'name' => t('Base-root'),
    'description' => t("The base root of the website ($base_root)."),
  );
  $info['tokens']['site']['base-url'] = array(
    'name' => t('Base-url'),
    'description' => t("The base URL of the website ($base_url)."),
  );

  $info['tokens']['node']['add-url'] = array(
    'name' => t('Add node type'),
    'description' => t("The path to add a new node of this type."),
  );

  return $info;
}

/**
 * Implemnts hook_token().
 */
function keycuts_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $url_options = array(
    'absolute' => TRUE,
  );
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'site') {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'base-path':
          global $base_path;
          $replacements[$original] = $base_path;
          break;
        case 'base-root':
          global $base_root;
          $replacements[$original] = $base_root;
          break;
        case 'base-url':
          global $base_url;
          $replacements[$original] = $base_url;
          break;
      }
    }

  }
  else if ($type == 'node') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'add-url':
          if (isset($data['node'])) {
            $node = $data['node'];
            $replacements[$original] = 'node/add/' . $node->type;
          }
          else {
            $replacements[$original] = 'node/add/';
          }
          break;
        case 'edit-url':
          if (!isset($data['node'])) {
            $replacements[$original] = '';
          }
          break;
      }
    }
  }

  return $replacements;
}

function keycuts_get_shortcuts($unserialize=true) {
  $shortcuts = variable_get('keycuts_shortcuts', 'a:0:{}');
  if($unserialize) {
    return unserialize($shortcuts);
  }
  else {
    return $shortcuts;
  }
}

function keycuts_is_enabled() {
  $enable = variable_get('keycuts_settings_enable', 1);
  return $enable;
}
