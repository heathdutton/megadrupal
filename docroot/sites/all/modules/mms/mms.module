<?php
/**
 * @file
 * MMS module file.
 *
 * Allows to embed multiple translations of the same text in a unique
 * node or user-defined block instance, using a Spip-like fashion.
 */

/* ============================================================== BASIC HOOKS */
/**
 * Implements hook_help().
 */
function mms_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mms':
      module_load_include('inc', 'mms', 'mms.data');
      return _mms_help_data();
  }
}
/**
 * Implements hook_menu().
 */
function mms_menu() {
  module_load_include('inc', 'mms', 'mms.data');
  return array(
    'admin/config/regional/mms' => array(
      'title'            => 'MMS',
      'title callback'   => FALSE,
      'description'      => _mms_menu_data('menu_description'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('mms_entry_form'),
      'access arguments' => array('access administration pages'),
      'type'             => MENU_NORMAL_ITEM,
      'file'             => 'mms.admin.inc',
    ),
    'admin/config/regional/mms/entry' => array(
      'title'            => _mms_menu_data('menu_entry_title'),
      'title callback'   => FALSE,
      'description'      => _mms_menu_data('menu_entry_description'),
      'type'             => MENU_DEFAULT_LOCAL_TASK,
      'weight'           => 10,
      'file'             => 'mms.admin.inc',
    ),
    'admin/config/regional/mms/rendering' => array(
      'title'            => _mms_menu_data('menu_rendering_title'),
      'title callback'   => FALSE,
      'description'      => _mms_menu_data('menu_rendering_description'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('mms_rendering_form'),
      'access arguments' => array('access administration pages'),
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 20,
      'file'             => 'mms.admin.inc',
    ),
    'admin/config/regional/mms/tokens' => array(
      'tab_parent'       => 'admin/config/regional/mms',
      'title'            => _mms_menu_data('menu_tokens_title'),
      'title callback'   => FALSE,
      'description'      => _mms_menu_data('menu_tokens_description'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('mms_tokens_form'),
      'access arguments' => array('access administration pages'),
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 30,
      'file'             => 'mms.admin.inc',
    ),
    'admin/config/regional/mms/default' => array(
      'tab_parent'       => 'admin/config/regional/mms',
      'title'            => _mms_menu_data('menu_default_title'),
      'title callback'   => FALSE,
      'description'      => _mms_menu_data('menu_default_description'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('mms_default_form'),
      'access arguments' => array('access administration pages'),
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 40,
      'file'             => 'mms.admin.inc',
    ),
  );
}
/**
 * Implements hook_init().
 *
 * This hook serves two intents:
 * - if currently responding to an Ajax request, starts buffering output, which
 *   will be resolved in hook_exit()
 * - if currently building a normal complete page, adds data to Drupal.settings
 *   for MMS widget and MMS CKEditor plugin
 */
function mms_init() {
  
  // Postpone if responding to an Ajax request.
  if (strtolower(@$_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    // Start buffering output and set a flag to notify hook_exit().
    drupal_static('mms_ajax_ob', TRUE);
    ob_start();
    return;
  }

  /* Ensure each language to have prefix or domain. By construction, both are
  empty for default language at Drupal install, but it may be the same for
  another language in some pre-built localized distributions (e.g. French
  Drupal 7 distribution have French as default language but English keeps empty
  prefix and domain). */
  foreach (language_list() as $lang) {
    if (!$lang->prefix AND !$lang->domain) {
      db_update('languages')
        ->fields(['prefix' => $lang->language])
        ->condition('language', $lang->language, '=')
        ->execute()
      ;
    }
  }
  
  // Otherwise this is a complete page.
  module_load_include('inc', 'mms', 'mms.data');
  module_load_include('inc', 'mms', 'mms.conf');
  module_load_include('inc', 'mms', 'mms.core');
  global $_mms_langs;
  
  // If Drupal core version changed, first update hack.
  if (variable_get(MMS_DRUPAL_VERSION) != VERSION) {
    _mms_hack_core();
    // (even if returns false, continue delivering current page)
  }
  
  // Add MMS widget.
  drupal_add_js('sites/all/modules/mms/mms.js');
  drupal_add_css('sites/all/modules/mms/mms.css');
  drupal_add_css(
    '.mms-highlight {
    ' . _mms_conf(MMS_FALLBACK_CSS) .'
    }',
    'inline'
  );
  
  // Add Drupal settings for MMS widget and MMS CKEditor plugin.
  drupal_add_js(
    array(
      'mms' => array(
        'help' => _mms_js_widget_data(),
        'langs' => $_mms_langs,
        'defLang' => MMS_DEF_LANG,
        'curLang' => MMS_CUR_LANG,
        'isInput' => preg_match(_mms_exclude_paths(), request_uri()),
        'path' => MMS_BASE_PATH . drupal_get_path('module', 'mms'),
        'selection' => array(
          'follow' => _mms_conf(MMS_SELECTION_FOLLOW, FALSE),
        ),
        'multify' => array(
          'fromlang' => _mms_conf(MMS_MULTIFY_FROMLANG, FALSE),
          'backlang' => _mms_conf(MMS_MULTIFY_BACKLANG, FALSE),
        ),
        'fallback' => array(
          'empty' => _mms_conf(MMS_FALLBACK_EMPTY, FALSE),
          'option' => _mms_conf(MMS_FALLBACK_OPTION, FALSE),
          'message' => _mms_process(
            _mms_conf(MMS_FALLBACK_MESSAGE, FALSE),
            ['can_replace' => FALSE]),
          'tip' => _mms_process(
            _mms_conf(MMS_FALLBACK_TIP, FALSE),
            ['can_replace' => FALSE]),
          'css' => _mms_conf(MMS_FALLBACK_CSS, FALSE),
        ),
        'filters' => array(
          'useLinebreak' => _mms_conf(MMS_LINEBREAKS_USE, FALSE),
          'noWidget' => _mms_conf(MMS_NO_WIDGET, FALSE),
        ),
      ),
    ),
    'setting'
  );
}
/**
 * Implements hook_exit().
 *
 * If currently responding to an Ajax request, reports buffered output after
 * translating it if needed.
 */
function mms_exit() {
  if (drupal_static('mms_ajax_ob', FALSE)) {
    // Returning from Ajax request.
    // Echo buffered output after translating it if needed.
    if ($content = ob_get_clean()) {
      /*
      if ($json = @json_decode($content) AND is_array($json)) {
        module_load_include('inc', 'mms', 'mms.core');
        foreach ($json as $i => $json_part) {
          // Look for "insert" command and process the corresponging content only.
          // So "viewsSetForm" content is not processed, and the user can see raw
          // text in "multi" segments.
          // NOTE: if json_part is not an object, do nothing.
          if (is_object($json_part) AND $json_part->command == 'insert') {
            $json[$i]->data = _mms_process(
              str_replace(
                array('\u003C', '\u003E', '\\/'),
                array('<', '>', '/'),
                $json[$i]->data
              ),
              ['process_links' => TRUE]
            );
            $processed = TRUE;
          }
        }
        // Back from JSON if changed.
        if (@$processed) {
          $content = json_encode($json);
        }
      }
      */
      echo $content;
    }
  }
}
/* =============================================================== ADMIN-MENU */
/**
 * Implements hook_admin_menu_output_alter().
 *
 * Localizes admin-menu options.
 * This has to be done here because the admin_menu is not part of the primary
 * HTML output, but is added furtherly through an Ajax request.
 */
function mms_admin_menu_output_alter(&$content) {
  module_load_include('inc', 'mms', 'mms.core');
  $content['menu'] =
    json_decode(
      _mms_process(json_encode($content['menu'], JSON_UNESCAPED_UNICODE)),
      TRUE
    );
}
/* ============================================================== FORMS HOOKS */
/**
 * Implements hook_form_alter().
 */
function mms_form_alter(&$form, &$form_state, $form_id) {
  #fb($form_state,'FORM:'.$form_id);##
  #fb(field_info_field_types(),'field_types');##
}
/* ================================================= CONTENT-PREPROCESS HOOKS */
/**
 * Implements hook_preprocess_block().
 *
 * Processes title and content of any (user-defined) block.
 */
function mms_preprocess_block(&$variables) {
  module_load_include('inc', 'mms', 'mms.conf');
  if (!preg_match(_mms_exclude_paths(), request_uri())) {
    // (don't work when currently in edit/add process).
    module_load_include('inc', 'mms', 'mms.core');
    $variables['block']->subject = _mms_process(
      $variables['block']->subject,
      ['can_highlight' => TRUE, 'process_links' => TRUE]
    );
    $variables['content'] = _mms_process(
      $variables['content'],
      ['can_highlight' => TRUE, 'process_links' => TRUE]
    );
  }
}
/**
 * Implements hook_preprocess_html().
 *
 * Processes possibly remaining multi segments (node titles, breadcrumbs, Views
 * data...) and HTML <title>.
 */
function mms_preprocess_html(&$variables) {
  module_load_include('inc', 'mms', 'mms.conf');
  if (!preg_match(_mms_exclude_paths(), request_uri())) {
    // (don't work when currently in edit/add process).
    module_load_include('inc', 'mms', 'mms.core');
    $variables['page']['#children'] = _mms_process(
      // For node title and breadcrumbs.
      $variables['page']['#children'],
      ['can_highlight' => TRUE, 'process_links' => TRUE]
    );
    $variables['head_title'] = _mms_process(
      // For HTML <title>.
      $variables['head_title'],
      ['process_links' => TRUE]
    );
  }
}
/* ========================================================== FORMATTER HOOKS */
/**
 * Implements hook_field_formatter_info_alter().
 *
 * For text fields, graft mms as prioritary formatter.
 */
function mms_field_formatter_info_alter(&$info) {
  if ($info) {
    foreach ($info as $name => $formatter) {
      if (
        !@$formatter['settings']['mms graft']
      and
        array_intersect($formatter['field types'],
          array('text', 'text_long', 'text_with_summary'))
      ) {
        // Substitute mms to original module.
        $info[$name]['settings']['mms graft'] = $formatter['module'];
        $info[$name]['module'] = 'mms';
      }
    }
  }
}
/**
 * Implements hook_field_formatter_prepare_view().
 *
 * Extract current lang part, then renew args to the original formatter.
 */
function mms_field_formatter_prepare_view(
  $entity_type, $entities, $field, $instances, $langcode, &$items, $displays
) {
  // First reduce items to current lang part.
  if ($items) {
    module_load_include('inc', 'mms', 'mms.core');
    foreach ($items as $nid => $node_data) {
      if ($node_data) {
        foreach ($node_data as $delta => $item) {
          if (isset($item['summary'])) {
            $items[$nid][$delta]['summary'] = _mms_process(
              $item['summary'],
              ['can_highlight' => TRUE, 'process_links' => TRUE]
            );
          }
          if (isset($item['value'])) {
            $items[$nid][$delta]['value'] = _mms_process(
              $item['value'],
              ['can_highlight' => TRUE, 'process_links' => TRUE]
            );
          }
        }
      }
    }
  }
  // Then give original formatter a chance to execute its own hook.
  foreach ($displays as $display) {
    $hook = $display['settings']['mms graft'] .
      '_field_formatter_prepare_view';
    if (function_exists($hook)) {
      $hook(
        $entity_type, $entities, $field, $instances, $langcode, $items, $displays
      );
    }
  }
}
/**
 * Implements hook_field_formatter_view().
 *
 * Simply renew args to the original formatter.
 */
function mms_field_formatter_view(
  $entity_type, $entity, $field, $instance, $langcode, $items, $display
) {
  $hook = $display['settings']['mms graft'] . '_field_formatter_view';
  if (function_exists($hook)) {
    // Let formatter do its job.
    $items = $hook(
      $entity_type, $entity, $field, $instance, $langcode, $items, $display
    );
    // Finally "repair" MMS flags, in case they were truncated.
    if ($items) {
      foreach ($items as $index => $item) {
        if ($item) {
          foreach ($item as $key => $data) {
            $items[$index][$key] = _mms_repair($items[$index][$key]);
          }
        }
      }
    }
  }
  return $items;
}
/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Simply renew args to the original formatter.
 */
function mms_field_formatter_settings_summary(
  $field, $instance, $view_mode
) {
  $hook
    = $instance['display'][$view_mode]['settings']['mms graft'] .
    '_field_formatter_settings_summary';
  if (function_exists($hook)) {
    return $hook($field, $instance, $view_mode);
  }
}
/**
 * Implements hook_field_formatter_settings_form().
 *
 * Simply renew args to the original formatter.
 */
function mms_field_formatter_settings_form(
  $field, $instance, $view_mode, $form, &$form_state
) {
  $hook
    = $instance['display'][$view_mode]['settings']['mms graft'] .
    '_field_formatter_settings_form';
  if (function_exists($hook)) {
    return $hook($field, $instance, $view_mode, $form, $form_state);
  }
}
/* ============================================================== TOKEN HOOKS */
/**
 * Implements hook_token_info().
 *
 * Define [???:mms(-native)-???] tokens.
 */
function mms_token_info() {

  // Get full list of existing tokens (other than MMS ones).
  global $_mms_token_flag;
  if ($_mms_token_flag) {
    // Don't work when token_info() recursively calls mms_token_info().
    return array();
  }
  $_mms_token_flag = TRUE;
  $token_info = token_info();
  
  // Prepare MMS complements.
  module_load_include('inc', 'mms', 'mms.conf');
  module_load_include('inc', 'mms', 'mms.core');
  module_load_include('inc', 'mms', 'mms.data');
  $token_adds = _mms_token_adds_data();
  $signature = ' ' . trim(_mms_process($token_adds['signature']));
  $locale_short =
    trim(_mms_process($token_adds['locale-short'])) . $signature;
  $locale_long =
    trim(_mms_process($token_adds['locale-long'])) . $signature;
  $native_short =
    trim(_mms_process($token_adds['native-short'])) . $signature;
  $native_long =
    trim(_mms_process($token_adds['native-long'])) . $signature;
  $mms_tokens = _mms_conf(MMS_TOKENS, FALSE);
  $mms_token_types = array_keys($mms_tokens);
  $mms_field_types = _mms_conf(MMS_FIELD_TYPES, FALSE);
    
  // Add MMS "clone" tokens for every registered template or field-type.
  foreach ($token_info['tokens'] as $type => $tokens) {
    if (@in_array($type, $mms_token_types)) {
      if ($mms_tokens_tokens = @$mms_tokens[$type]) {
        foreach ($tokens as $token => $data) {
          if (substr($token, 0, 6) == 'field_') {
            $field_info = field_info_field($token);
            $select = in_array($field_info['type'],$mms_field_types);
          } else {
            $select = in_array($token, $mms_tokens_tokens);
          }
          if ($select) {
            $end_dot = substr($data['description'], -1) == '.' ? '.' : NULL;
            $description = $end_dot ?
              substr($data['description'], 0, -1) : $data['description'];
            $info['tokens'][$type]['mms-' . $token] = array(
              'name'        => $data['name'] . ' ' . $locale_short,
              'description' => $description . ' ' . $locale_long . $end_dot,
            );
            $info['tokens'][$type]['mms-native-' . $token] = array(
              'name'        => $data['name'] . ' ' . $native_short,
              'description' => $description . ' ' . $native_long . $end_dot,
            );
          }
        }
      }
    }
  }
  return $info;
}
/**
 * Implements hook_tokens().
 *
 * For any [<type>:mms(-native)-<token>], apply _mms_process() to
 * the corresponding [<type>:<token>].
 */
function mms_tokens(
  $type, $tokens, array $data = array(), array $options = array()
) {
  // @todo Remove ## when https://www.drupal.org/node/2525802 is fixed.
  static $done = array(); ##
  $mms_tokens = _mms_conf(MMS_TOKENS, FALSE);
  $mms_token_types = array_keys($mms_tokens);
  if (in_array($type, $mms_token_types)) {
    module_load_include('inc', 'mms', 'mms.core');
    foreach ($tokens as $name => $raw_token) {
      if (preg_match('`^mms-(native-)?(.*)$`i', $name, $matches)) {
        if (in_array($name, $done)) { ##
          // This token has already been furnished. ##
          continue; ##
        } ##
        $done[] = $name; ##
        $replacements[$raw_token] = _mms_process(
          token_replace('[' . $type . ':' . $matches[2] . ']', $data),
          ['use_curLang' => (bool)$matches[1]]
        );
      }
    }
    return @$replacements;
  }
}
/* =========================================================== CKEDITOR HOOKS */
/**
 * Implements hook_ckeditor_plugin().
 *
 * Add MMS ckeditor plugin.
 */
function mms_ckeditor_plugin() {
  module_load_include('inc', 'mms', 'mms.data');
  return array(
    'mms' => array(
      'name' => 'mms',
      'desc' => _mms_ckeditor_plugin_data(),
      'path' => drupal_get_path('module', 'mms') . '/ckeditor/',
      'buttons' => array(
        'mms' => array(
          'label' => 'MMS',
          'icon' => 'mms.png',
        ),
      ),
    ),
  );
}
/* ========================================================================== */
