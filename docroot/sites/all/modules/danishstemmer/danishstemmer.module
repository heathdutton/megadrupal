<?php

/**
 * @file
 * Improve search on Danish sites by reducing words to their stem. Based on
 * the Danish stemming algorithm outlined on:
 *
 *    http://snowball.tartarus.org/algorithms/danish/stemmer.html
 */

/* --- HOOKS ---------------------------------------------------------------- */

/**
 * Implements hook_search_preprocess().
 */
function danishstemmer_search_preprocess($text) {
  // split words from noise and remove apostrophes
  $words = preg_split('/([^a-zA-ZáéæøåÁÉÆØÅ\']+)/u', $text, -1, PREG_SPLIT_DELIM_CAPTURE);

  $odd = TRUE;
  $minimum_word_size = variable_get('minimum_word_size', 3);

  // process each word
  foreach ($words as $k => $word) {
    if ($odd) {
      // only handle words longer than the minimum word size, ignore the rest
      if (drupal_strlen($word) < $minimum_word_size) {
        $words[$k] = '';
      }
      else {
        $words[$k] = danishstemmer_stem($word);
      }
    }
    $odd = !$odd;
  }

  return implode('', $words);
}

/* --- STEMMING ------------------------------------------------------------- */

/**
 * Stem a Danish word.
 */
function danishstemmer_stem($word) {
  $word = drupal_strtolower($word);

  /**
   * R1 is the region after the first non-vowel following a vowel, or is the
   * null region at the end of the word if there is no such non-vowel.
   */
  $r1 = '';
  if (preg_match('/[aeiouyæøå][^aeiouyæøå]/u', $word, $matches, PREG_OFFSET_CAPTURE)) {
    $r1 = $matches[0][1] + 2;
  }

  // steps 1-4: suffix removal
  $word = danishstemmer_step1($word, $r1);
  $word = danishstemmer_step2($word, $r1);
  $word = danishstemmer_step3($word, $r1);
  $word = danishstemmer_step4($word, $r1);

  return $word;
}

/**
 * Step 1: Search for the longest among the following suffixes in R1, and
 * perform the action indicated.
 *
 * (a) hed ethed ered e erede ende erende ene erne ere en heden eren er heder
 *     erer heds es endes erendes enes ernes eres ens hedens erens ers ets
 *     erets et eret
 *
 *     Action: Delete
 *
 * (b) s
 *
 *     Action: delete if preceded by a valid s-ending (of course the letter of
 *     the valid s-ending is not necessarily in R1)
 */
function danishstemmer_step1($word, $r1) {
  if ($r1) {
    foreach (array('erendes', 'erende', 'hedens', 'endes', 'erede', 'erens', 'erets', 'ernes', 'ethed', 'heden', 'heder', 'ende', 'enes', 'ered', 'eren', 'erer', 'eres', 'eret', 'erne', 'heds', 'hed', 'ene', 'ens', 'ere', 'ers', 'ets', 'en', 'er', 'es', 'et', 'e') as $ending) {
      if (preg_match('/' . $ending . '$/', $word)) {
        $word = drupal_substr($word, 0, drupal_strlen($ending) * -1);
        break;
      }
    }

    $word = preg_replace('/([abcdfghjklmnoprtvyzå])s$/', '\\1', $word);
  }

  return $word;
}

/**
 * Step 2: Search for one of the following suffixes in R1, and if found delete
 * the last letter.
 *
 *    gd dt gt kt
 *
 * (For example, friskt -> frisk)
 */
function danishstemmer_step2($word, $r1) {
  if ($r1) {
    $word = preg_match('/(gd|dt|gt|kt)$/', $word) ? drupal_substr($word, 0, -1) : $word;
  }

  return $word;
}

/**
 * Step 3: If the word ends in igst, remove the final st.
 *
 * Search for the longest among the following suffixes in R1, and perform the
 * action indicated.
 *
 * (a) ig lig elig els
 *
 *     Action: delete, and then repeat step 2
 *
 * (b) løst
 *
 *     Action: replace with løs
 */
function danishstemmer_step3($word, $r1) {
  if ($r1) {
    $word = preg_match('/igst$/', $word) ? drupal_substr($word, 0, -2) : $word;

    foreach (array('elig', 'els', 'lig', 'ig') as $ending) {
      if (preg_match('/' . $ending . '$/', $word)) {
        $word = drupal_substr($word, 0, drupal_strlen($ending) * -1);
        $word = danishstemmer_step2($word, $r1);
        break;
      }
    }

    $word = preg_replace('/løst$/', 'løs', $word);
  }

  return $word;
}

/**
 * Step 4: If the word ends with double consonant in R1, remove one of the
 * consonants.
 *
 * For example, bestemmelse -> bestemmels (step 1) -> bestemm (step 3a)
 * ->bestem in this step.
 */
function danishstemmer_step4($word, $r1) {
  if ($r1) {
    $word = preg_match('/(bb|cc|dd|ff|gg|hh|jj|kk|ll|mm|nn|pp|qq|rr|ss|tt|vv|xx|zz)$/', $word) ? drupal_substr($word, 0, -1) : $word;
  }

  return $word;
}
