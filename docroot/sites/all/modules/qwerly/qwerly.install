<?php
// @file
// Adds qwerly_data table
/**
 * Implements hook_schema().
 */
function qwerly_schema() {
  $schema['qwerly_data'] = array(
    'description' => 'Holds all cached data from Qwerly',
    'fields' => array(
      'id' => array(
        'descripton ' => 'The primary identifier for this cache data',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user this cache data relates to',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'expires' => array(
        'description' => 'The timestamp after which this cache data needs to be refreshed',
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'stage' => array(
        'description' => 'The stage of this user-request. See qwerly.module for info',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'The cached data',
        'type' => 'text',
        'size' => 'medium'
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'users' => array('uid'),
      'expires' => array('expires'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 * Removes all variables set by qwerly
 */
function qwerly_uninstall() {
  foreach (array('api_key', 'cache_time', 'update_indefinitely', 'max_requests', 'new_email_action',) as $key) {
    variable_del('qwerly_' . $key);
  }
}

/**
 * Implements hook_requirements().
 */
function qwerly_requirements($phase) {
  global $base_url;
  $path = str_replace('//', '/', $_SERVER['DOCUMENT_ROOT'] . base_path() . drupal_get_path('module', 'qwerly'));
  $command = '* * * * * php ' . escapeshellarg($path . '/cron.php') . ' ' . escapeshellarg($base_url . '/_qwerly/cron');

  $t = get_t();

  // check if the cron job was run recently.
  $last = variable_get('qwerly_last_run', FALSE);
  $last_date = format_interval(REQUEST_TIME - $last);

  // half an hour
  if ($last == FALSE || $last < time() - 1800) {
    return array('qwerly' =>
      array(
        'title' => 'Qwerly',
        'value' => $last ? $t('Last run at :last', array(':last', $last_date,)) : $t('Never run!'),
        'description' => $t('The Qwerly cron job needs to run regularly in order for user data to update. '
                            . 'Add the following to your contrab:<pre>:command</pre>',
                            array('@url' => url('admin/config/people/qwerly/add_cron'), ':command' => $command,)),
        'severity' => REQUIREMENT_WARNING,
      ),
    );
  }
  else {
    return array('qwerly' =>
      array(
        'title' => 'Qwerly',
        'value' => $t('Last run :interval ago, updating :count records.', array(':interval' => $last_date, ':count' => variable_get('qwerly_last_count'))),
        'description' => $t('The Qwerly cron job keeps user data from Qwerly up to date'),
        'severity' => REQUIREMENT_OK,
      ),
    );
  }
}
