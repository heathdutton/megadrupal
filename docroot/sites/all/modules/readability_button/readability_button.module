<?php
// $Id$

/**
 * @file
 * Adds a Read: Now | Later button for nodes
 */

/**
 * Implements hook_init().
 */
function readability_button_init() {
  if (variable_get('readability_button_verify_domain', 0)) {
    $verification = array(
      '#type' => 'markup',
      '#markup' => variable_get('readability_button_verification'),
    );
    drupal_add_html_head($verification, 'readability_button_verification');
  }
}

/**
 * Implements hook_permission().
 */
function readability_button_permission() {
  return array(
    'administer readability' =>  array(
      'title' => t('Administer Readability settings'),
      'description' => t('Change the weight and node types on which the button appears'),
    ),
    'access readability button' => array(
      'title' => t('Access Readability button'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function readability_button_menu() {
  $items = array();
  $items['admin/config/services/readability'] = array(
    'title' => 'Readability Button',
    'description' => 'Configure the look and behavior of the Readability Button on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('readability_button_admin_settings'),
    'access arguments' => array('administer readability'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_theme()
 */
function readability_button_theme() {
  return array(
    'readability_button_display' => array(
      'variables' => array('object' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function readability_button_node_view($node, $view_mode, $langcode) {
  $show = (($view_mode == 'full') || (variable_get('readability_button_show_list_' . $node->type, 0)));
  $enable_readability = variable_get('readability_button_enable_' . $node->type, 0);
  if ($enable_readability && $show && user_access('access readability button')) {
    $node->content['readability'] = array(
      '#object' => $node,
      '#weight' => variable_get('readability_button_weight_' . $node->type, 0),
      '#theme' => 'readability_button_display__' . $node->type,
    );
  }
}

function theme_readability_button_display($variables) {
  global $base_url;
  $node_type = $variables['object']->type;
  $wrapper_attributes = array();
  $wrapper_attributes['class'] = 'rdbWrapper';
  $wrapper_attributes['data-url'] = $base_url . url('node/' . $variables['object']->nid);
  $wrapper_attributes['data-show-email'] = variable_get('readability_button_kindle_enable_' . $node_type, 0);
  $wrapper_attributes['data-show-print'] = variable_get('readability_button_print_enable_' . $node_type, 0);
  $wrapper_attributes['data-show-email'] = variable_get('readability_button_email_enable_' . $node_type, 0);
  $wrapper_attributes['data-show-send-to-kindle'] = variable_get('readability_button_kindle_enable_' . $node_type, 0);
  $wrapper_attributes['data-text-color'] = '#' . variable_get('readability_button_text_color_' . $node_type, '5C5C5C');
  $wrapper_attributes['data-bg-color'] = '#' . variable_get('readability_button_background_color_' . $node_type, 'F3F3F3');
  $wrapper_attributes['data-orientation'] = variable_get('readability_button_orientation_' . $node_type, 0);
  $wrapper_attributes_html = drupal_attributes($wrapper_attributes);
  $readability = '<div' . $wrapper_attributes_html . '></div>';
  drupal_add_js(drupal_get_path('module', 'readability_button') . '/readability_button.js', 'file');

  return $readability;
}

/**
 * General configuration form for the Readability button
 */
function readability_button_admin_settings() {
  $form = array();
  $form['verification'] = array(
    '#type' => 'fieldset',
    '#title' => t('Readability site verifcation'),
  );
  $form['verification']['readability_button_verification'] = array(
    '#title' => t('Verification code'),
    '#description' => t('Copy the code from http://www.readability.com/ under domain validation, which should be in the format of &lt;meta name="readability-verification" content="[VERIFICATION CODE]"/&gt;'),
    '#type' => 'textfield',
    '#default_value' => variable_get('readability_button_verification', '<meta name="readability-verification" content="[VERIFICATION CODE]"/>'),
    '#size' => 125,
    '#max_length' => 255,
  );
  $form['verification']['readability_button_verify_domain'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verify domain?'),
    '#description' => t("Check this box if you wish the verification code to appear in your site's HTML header"),
    '#default_value' => variable_get('readability_button_verify_domain', 0),
  );
  return system_settings_form($form);
}

function readability_button_form_node_type_form_alter(&$form, $form_state) {
  $form['readability'] = array(
    '#type' => 'fieldset',
    '#title' => t('Readability settings'),
    '#weight' => 25,
    '#group' => 'additional_settings',
  );
  $form['readability']['button'] = array(
      '#type' => 'fieldset',
      '#title' => t('Readability button settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 1,
      '#group' => 'readability',
  );
  $form['readability']['button']['readability_button_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Readability button'),
    '#default_value' => variable_get('readability_button_enable_' . $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable the Read Now | Later button for this content type.'),    
  );
  $form['readability']['button']['readability_button_show_list'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Readability button on lists'),
    '#default_value' => variable_get('readability_button_show_list_' . $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable the Read Now | Later button for lists of content that include this content type. An example of a list is the blog page or taxonomy term views.'),    
  );
  $form['readability']['button']['readability_button_print_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Readability Print button'),
    '#default_value' => variable_get('readability_button_print_enable_' . $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable the Print button for this content type.'),    
  );
  $form['readability']['button']['readability_button_email_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Readability Email button'),
    '#default_value' => variable_get('readability_button_email_enable_' . $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable the Email button for this content type.'),    
  );
  $form['readability']['button']['readability_button_kindle_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Readability "Send to Kindle" button'),
    '#default_value' => variable_get('readability_button_kindle_enable_' . $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable the "Send to Kindle" button for this content type.'),    
  );
  if (module_exists('jquery_colorpicker')) {
    $color_form_attributes = array(
      '#type' => 'jquery_colorpicker',
      '#field_prefix' => '#',
    );
  }
  else {
    $color_form_attributes = array(
      '#type' => 'textfield',
      '#maxlength' => 6,
      '#description' => t('Type in the hexidecimal HTML code for the color you want, without the number sign (#).'),
    );
  }
  $form['readability']['button']['readability_button_text_color'] = array(
    '#title' => t('Text color'),
    '#default_value' => variable_get('readability_button_text_color_' . $form['#node_type']->type, '5C5C5C'),
  );
  $form['readability']['button']['readability_button_text_color'] += $color_form_attributes;
  $form['readability']['button']['readability_button_background_color']  = array(
    '#title' => t('Background color'),
    '#default_value' => variable_get('readability_button_background_color_' . $form['#node_type']->type, 'F3F3F3'),
  );
  $form['readability']['button']['readability_button_background_color'] += $color_form_attributes;
  $form['readability']['button']['readability_button_orientation'] = array(
    '#type' => 'radios',
    '#title' => t('Orientation'),
    '#default_value' => variable_get('readability_button_orientation_' . $form['#node_type']->type, 0),
    '#options' => array(t('Horizontal'), t('Vertical')),
  );
  $form['readability']['button']['readability_button_weight'] = array(
    '#type' => 'select',
    '#default_value' => variable_get('readability_button_weight_' . $form['#node_type']->type, 0),
    '#options' => drupal_map_assoc(range(-10, 10)),
  );
}