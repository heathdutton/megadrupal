<?php

/**
 * @file
 * Describe the smallest possible entity which can deal with Entity Metadata 
 * Wrappers.
 */

/**
 * Implements hook_entity_info().
 */
function typical_entity_example_2_entity_info() {
  $info = array(
    'typical_entity_example_2' => array(
      'label' => t('Typical Entity 2'),
      'base table' => 'typical_entity_example_2',
      'entity keys' => array(
        'id' => 'teid',
      ),
      // Entity and controller classes must be specified for creating, editing
      // and deleting entities. Default entity classes are used in this example.
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      // This line must be specified for dealing with Entity Metadata Wrappers.
      'metadata controller class' => '',
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 * 
 * This implementation is necessary for dealing with Entity Metadata Wrappers.
 * @see http://drupal.org/node/1021466
 */
function typical_entity_example_2_entity_property_info() {
  $info = array();
  $properties = &$info['typical_entity_example_2']['properties'];
  $properties['teid'] = array(
    'type' => 'integer',
    'schema field' => 'teid',
    'label' => t('The primary identifier.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['title'] = array(
    'type' => 'text',
    'schema field' => 'title',
    'required' => TRUE,
    'label' => t('Entity title.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['description'] = array(
    'type' => 'text',
    'schema field' => 'description',
    'label' => t('Entity description.'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $info;
}
