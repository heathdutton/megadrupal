<?php

/**
 * @file
 * Describe the entity integrated into views and revisions.
 */

/**
 * Implements hook_entity_info().
 */
function typical_entity_example_5_entity_info() {
  $info = array(
    'typical_entity_example_5' => array(
      'label' => t('Typical Entity 5'),
      'base table' => 'typical_entity_example_5',
      'entity keys' => array(
        'id' => 'teid',
        'bundle' => 'type',
        // Database field where current revision IDs of entities are saved.
        'revision' => 'revision_id',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'typical_entity_example_5_bundle_1' => array(
          'label' => t('Typical Entity 5 Bundle 1'),
        ),
        'typical_entity_example_5_bundle_2' => array(
          'label' => t('Typical Entity 5 Bundle 2'),
        ),
      ),
      'entity class' => 'TypicalEntityExample5',
      'controller class' => 'TypicalEntityExample5Controller',
      'metadata controller class' => '',
      'fieldable' => TRUE,
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      // This line must be specified for using entity in views.
      // @see http://drupal.org/node/1208874
      'module' => 'typical_entity_example_5',
      // Name of the table for storing revisions of entities.
      'revision table' => 'typical_entity_example_5_revision',
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 * 
 * This hook must be implemented for using entity in views.
 */
function typical_entity_example_5_entity_property_info() {
  $info = array();
  $properties = &$info['typical_entity_example_5']['properties'];
  $properties['teid'] = array(
    'type' => 'integer',
    'schema field' => 'teid',
    'label' => t('Typical Entity 5 ID'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['type'] = array(
    'type' => 'text',
    'schema field' => 'type',
    'required' => TRUE,
    'label' => t('Typical Entity 5 type (bundle)'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['title'] = array(
    'type' => 'text',
    'schema field' => 'title',
    'required' => TRUE,
    'label' => t('Typical Entity 5 title'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['description'] = array(
    'type' => 'text',
    'schema field' => 'description',
    'label' => t('Typical Entity 5 description'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['revision_id'] = array(
    'type' => 'text',
    'schema field' => 'revision_id',
    'label' => t('Typical Entity 5 revision ID'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $info;
}

/**
 * Implements hook_views_api().
 */
function typical_entity_example_5_views_api() {
  // Describe the folder where "typical_entity_example_5.views_default.inc" file
  // is located.
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'typical_entity_example_5'),
  );
}

/**
 * Implements hook_menu().
 * 
 * Describe pages where our entities can be viewed and modified.
 */
function typical_entity_example_5_menu() {
  $items = array();

  // Base URI for dealing with entity.
  $base_uri = 'typical_entity_example_5/%typical_entity_example_5';
  $base_uri_argument_position = 1;

  // URI for choosing bundle of entity to add.
  $items['typical_entity_example_5/add'] = array(
    'title' => 'Add Typical Entity 5',
    'page callback' => 'typical_entity_example_5_choose_bundle',
    'access arguments' => array('administer typical_entity_example content'),
    'file' => 'typical_entity_example_5.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // URI for adding entity of proper bundle.
  $entity_info = entity_get_info('typical_entity_example_5');
  foreach ($entity_info['bundles'] as $bundle_name => $bundle_data) {
    $items['typical_entity_example_5/add/' . $bundle_name] = array(
      'title' => 'Add ' . $bundle_name,
      'page callback' => 'typical_entity_example_5_add',
      'page arguments' => array(2),
      'access arguments' => array('administer typical_entity_example content'),
      'file' => 'typical_entity_example_5.admin.inc',
    );
  }

  // URI for viewing entity instances.
  $items[$base_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('typical_entity_example_5', $base_uri_argument_position),
    'page callback' => 'typical_entity_example_5_view',
    'page arguments' => array($base_uri_argument_position),
    'access arguments' => array('view typical_entity_example content'),
    'file' => 'typical_entity_example_5.pages.inc',
  );
  $items[$base_uri . '/view'] = array(
    'title' => 'View Typical Entity 5',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // URI for editing entity instances.
  $items[$base_uri . '/edit'] = array(
    'title' => 'Edit Typical Entity 5',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('typical_entity_example_5_form', $base_uri_argument_position),
    'access arguments' => array('administer typical_entity_example content'),
    'file' => 'typical_entity_example_5.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // URI for deleting entity instances.
  $items[$base_uri . '/delete'] = array(
    'title' => 'Delete Typical Entity 5',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('typical_entity_example_5_form_delete', $base_uri_argument_position),
    'access arguments' => array('administer typical_entity_example content'),
    'file' => 'typical_entity_example_5.admin.inc',
  );

  // URI for viewing entity instance revisions.
  $items[$base_uri . '/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => 'typical_entity_example_5_revisions',
    'page arguments' => array($base_uri_argument_position),
    'access arguments' => array('view typical_entity_example content'),
    'file' => 'typical_entity_example_5.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}

/**
 * Load an instance of typical_entity_example_5.
 * 
 * @param int $teid
 *   Entity identifier.
 * @param bool $reset
 *   Whether to reset the internal cache for typical_entity_example_5.
 * 
 * @return mixed
 *   An actual entity, or false.
 */
function typical_entity_example_5_load($teid, $reset = FALSE) {
  $entities = typical_entity_example_5_load_multiple(array($teid), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple instances of typical_entity_example_5.
 * 
 * @param array $teids
 *   Entity identifiers.
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the base entity table.
 * @param bool $reset
 *   Whether to reset the internal cache for typical_entity_example_5.
 * 
 * @return array
 *   Founded entities.
 */
function typical_entity_example_5_load_multiple($teids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('typical_entity_example_5', $teids, $conditions, $reset);
}
