<?php

/**
 * @file
 * Tests for typical_entity_example_3 module.
 */

/**
 * Make sure that we can work with bundles and fields of created entity.
 */
class TypicalEntityExample3UnitTestCase extends DrupalWebTestCase {
  /**
   * Provide information about this test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Typical entity 3 unit tests',
      'description' => 'Make sure that we can work with bundles and fields of created entity.',
      'group' => 'Typical Entity Example',
    );
  }

  /**
   * Declare the module dependencies for the test.
   */
  public function setUp() {
    parent::setUp('typical_entity_example_3');
  }

  /**
   * Make sure that we can work with bundles and fields of created entity.
   */
  public function testTypicalEntity3() {
    // Make sure that "typical_entity_example_3" entity type exists.
    $entity_description = entity_get_info('typical_entity_example_3');
    $this->assertEqual($entity_description['base table'], 'typical_entity_example_3', t("Entity type 'typical_entity_example_3' exists."));

    // Create new entity.
    $entity_1 = entity_create('typical_entity_example_3', array('type' => 'typical_entity_example_3_bundle_1'));
    $this->assertTrue($entity_1, t("New entity of 'typical_entity_example_3_bundle_1' bundle successfully created."));

    // Save created entity.
    $wrapper_1 = entity_metadata_wrapper('typical_entity_example_3', $entity_1);
    $wrapper_1->title = $this->randomName(7);
    $wrapper_1->description = $this->randomName(16);
    $wrapper_1->typical_entity_example_3_field_1 = $this->randomName(26);
    $wrapper_1->save();
    $this->assertEqual(strlen($wrapper_1->typical_entity_example_3_field_1->value()), 26, t("Created 'typical_entity_example_3' entity was successfully saved."));

    // Load saved entity with EntityFieldQuery.
    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'typical_entity_example_3')->entityCondition('type', 'typical_entity_example_3_bundle_1')->execute();
    if (isset($results['typical_entity_example_3'])) {
      $this->assertEqual(count($results['typical_entity_example_3']), 1, t("Saved 'typical_entity_example_3' entity was successfully loaded with EntityFieldQuery."));
    }
    else {
      fail(t("Saved 'typical_entity_example_3' entity wasn't loaded with EntityFieldQuery."));
    }

    // Load saved entity with entity_load().
    $entities = entity_load('typical_entity_example_3', array($wrapper_1->teid->value()));
    $this->assertEqual(count($entities), 1, t("Saved 'typical_entity_example_3' entity was successfully loaded with entity_load()."));

    // Edit loaded entity.
    $wrapper_2 = entity_metadata_wrapper('typical_entity_example_3', reset($entities));
    $wrapper_2->title = $this->randomName(9);
    $wrapper_2->description = $this->randomName(18);
    $wrapper_2->typical_entity_example_3_field_1 = $this->randomName(26);
    $wrapper_2->save();
    $this->assertNotEqual($wrapper_2->title->value(), $wrapper_1->title->value(), t('Loaded entity was successfully edited.'));

    // Delete loaded entity.
    $wrapper_2->delete();
    $entities = entity_load('typical_entity_example_3', array($wrapper_1->teid->value()));
    $this->assertEqual(count($entities), 0, t('Loaded entity was successfully deleted.'));

    // Make sure that "typical_entity_example_3_bundle_2" bundle does not have
    // the attached field.
    $entity_3 = entity_create('typical_entity_example_3', array('type' => 'typical_entity_example_3_bundle_2'));
    $wrapper_3 = entity_metadata_wrapper('typical_entity_example_3', $entity_3);
    try {
      $wrapper_3->typical_entity_example_3_field_1 = $this->randomName(26);
      $this->fail(t('Field typical_entity_example_3_field_1 is attached to typical_entity_example_3_bundle_2.'));
    }
    catch (Exception $ex) {
      $this->pass(t("Field typical_entity_example_3_field_1 is not attached to 'typical_entity_example_3_bundle_2'."));
    }
  }

}
