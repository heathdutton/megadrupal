<?php

/**
 * @file
 * Describe the entity with simple user interface.
 */

/**
 * Implements hook_entity_info().
 */
function typical_entity_example_4_entity_info() {
  $info = array(
    'typical_entity_example_4' => array(
      'label' => t('Typical Entity 4'),
      'base table' => 'typical_entity_example_4',
      'entity keys' => array(
        'id' => 'teid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'typical_entity_example_4_bundle_1' => array(
          'label' => t('Typical Entity 4 Bundle 1'),
        ),
        'typical_entity_example_4_bundle_2' => array(
          'label' => t('Typical Entity 4 Bundle 2'),
        ),
      ),
      // Definitions of entity and controller custom classes are placed in a
      // special file.
      // @see typical_entity_example_4.controller.inc
      'entity class' => 'TypicalEntityExample4',
      'controller class' => 'TypicalEntityExample4Controller',
      'metadata controller class' => '',
      'fieldable' => TRUE,
      // This line must be specified for using entity_uri() function.
      'uri callback' => 'entity_class_uri',
      // This line must be specified for using entity_label() function.
      'label callback' => 'entity_class_label',
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function typical_entity_example_4_entity_property_info() {
  $info = array();
  $properties = &$info['typical_entity_example_4']['properties'];
  $properties['teid'] = array(
    'type' => 'integer',
    'schema field' => 'teid',
    'label' => t('Typical Entity 4 ID'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['type'] = array(
    'type' => 'text',
    'schema field' => 'type',
    'required' => TRUE,
    'label' => t('Typical Entity 4 type (bundle)'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['title'] = array(
    'type' => 'text',
    'schema field' => 'title',
    'required' => TRUE,
    'label' => t('Typical Entity 4 title'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['description'] = array(
    'type' => 'text',
    'schema field' => 'description',
    'label' => t('Typical Entity 4 description'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $info;
}

/**
 * Implements hook_menu().
 * 
 * Describe pages for viewing and managing entities.
 */
function typical_entity_example_4_menu() {
  $items = array();

  // Base URI for dealing with entity.
  $base_uri = 'typical_entity_example_4/%typical_entity_example_4';
  $base_uri_argument_position = 1;

  // URI for viewing list of existing entities.
  $items['typical_entity_example_4'] = array(
    'title' => 'Typical Entity 4',
    'page callback' => 'typical_entity_example_4_list',
    'access arguments' => array('view typical_entity_example content'),
    'file' => 'typical_entity_example_4.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // URI for choosing bundle of entity to add.
  $items['typical_entity_example_4/add'] = array(
    'title' => 'Add Typical Entity 4',
    'page callback' => 'typical_entity_example_4_choose_bundle',
    'access arguments' => array('administer typical_entity_example content'),
    'file' => 'typical_entity_example_4.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // URI for adding entity of proper bundle.
  $entity_info = entity_get_info('typical_entity_example_4');
  foreach ($entity_info['bundles'] as $bundle_name => $bundle_data) {
    $items['typical_entity_example_4/add/' . $bundle_name] = array(
      'title' => 'Add ' . $bundle_name,
      'page callback' => 'typical_entity_example_4_add',
      'page arguments' => array(2),
      'access arguments' => array('administer typical_entity_example content'),
      'file' => 'typical_entity_example_4.admin.inc',
    );
  }

  // URI for viewing entity instances.
  $items[$base_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('typical_entity_example_4', $base_uri_argument_position),
    'page callback' => 'typical_entity_example_4_view',
    'page arguments' => array($base_uri_argument_position),
    'access arguments' => array('view typical_entity_example content'),
    'file' => 'typical_entity_example_4.pages.inc',
  );
  $items[$base_uri . '/view'] = array(
    'title' => 'View Typical Entity 4',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // URI for editing entity instances.
  $items[$base_uri . '/edit'] = array(
    'title' => 'Edit Typical Entity 4',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('typical_entity_example_4_form', $base_uri_argument_position),
    'access arguments' => array('administer typical_entity_example content'),
    'file' => 'typical_entity_example_4.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // URI for deleting entity instances.
  $items[$base_uri . '/delete'] = array(
    'title' => 'Delete Typical Entity 4',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('typical_entity_example_4_form_delete', $base_uri_argument_position),
    'access arguments' => array('administer typical_entity_example content'),
    'file' => 'typical_entity_example_4.admin.inc',
  );

  return $items;
}

/**
 * Load an instance of typical_entity_example_4.
 * 
 * @param int $teid
 *   Entity identifier.
 * @param bool $reset
 *   Whether to reset the internal cache for typical_entity_example_4.
 * 
 * @return mixed
 *   An actual entity, or false.
 */
function typical_entity_example_4_load($teid, $reset = FALSE) {
  $entities = typical_entity_example_4_load_multiple(array($teid), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple instances of typical_entity_example_4.
 * 
 * @see entity_load()
 * 
 * @param array $teids
 *   Entity identifiers.
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the base entity table.
 * @param bool $reset
 *   Whether to reset the internal cache for typical_entity_example_4.
 * 
 * @return array
 *   Founded entities.
 */
function typical_entity_example_4_load_multiple($teids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('typical_entity_example_4', $teids, $conditions, $reset);
}
