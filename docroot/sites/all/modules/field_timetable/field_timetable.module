<?php
/**
 * @file
 * Timetable field with widget and formatter used to add a new timetable.
 */


/**
 * Implements hook_views_api().
 */
function field_timetable_views_api() {
  $path = drupal_get_path('module', 'field_timetable');
  return array(
    'api' => '3',
    'path' => $path . '/includes',
  );
}


/**
 * Implements hook_theme().
 */
function field_timetable_theme() {
  return array(
    'field_timetable_view' => array(
      'render element' => 'element',
      'file' => 'includes/field_timetable.theme.inc',
      'variables' => array(
        'field_name' => NULL,
        'rows' => array(),
        'settings' => array(),
      ),
    ),
  );
}


/**
 * Implements hook_library().
 */
function field_timetable_library() {
  $path = libraries_get_path('timetable');
  $libraries['timetable'] = array(
    'title' => 'timetable',
    'website' => 'https://github.com/targoo/timetable',
    'version' => 'Master',
    'css' => array(
      $path . '/timetable.css' => array(),
    ),
    'js' => array(
      $path . '/jquery.timetable.js' => array(),
    ),
  );
  return $libraries;
}


/**
 * Implements hook_field_formatter_view().
 */
function field_timetable_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $path = drupal_get_path('module', 'field_timetable');
  $element = array();

  switch ($display['type']) {

    case 'field_timetable_timetable_formatter':
      $id = 'field_timetable_' . $field['field_name'];

      // Add library.
      drupal_add_library('field_timetable', 'timetable');

      $field_timetable_options = array();

      $field_timetable_options['editable'] = FALSE;
      $field_timetable_options['selectable'] = FALSE;
      $field_timetable_options['minTime'] = $field['settings']['mintime'];
      $field_timetable_options['maxTime'] = $field['settings']['maxtime'];
      $field_timetable_options['slotMinutes'] = $field['settings']['granularity'];
      $field_timetable_options['selectHelper'] = FALSE;
      $field_timetable_options['events'] = FALSE;

      foreach ($items as $key_item => $item) {
        $event = array();
        $event['title'] = $item['description'];
        $event['start'] = $item['start_minute'];
        $event['end'] = $item['end_minute'];
        $event['allDay'] = FALSE;
        $event['resource'] = $item['day'];
        $field_timetable_options['events'][] = $event;
      }

      drupal_add_js(array('field_timetable' => array('#' . $id => $field_timetable_options)), 'setting');
      drupal_add_js($path . '/js/field_timetable.jquery.js');

      $element[0] = array(
        '#markup' => '<div id=' . $id . '></div>',
      );
      break;
  }

  return $element;
}


/**
 * Implements hook_field_info().
 */
function field_timetable_field_info() {
  return array(
    'field_timetable_timetable' => array(
      'label' => t('Timetable'),
      'description' => t('This field stores a weekly timetable.'),
      'instance_settings' => array(
        'granularity',
        'mintime',
        'maxtime',
      ),
      'default_widget' => 'field_timetable_dropdown_widget',
      'default_formatter' => 'field_timetable_timetable_formatter',
    ),
  );
}


/**
 * Implements hook_field_settings_form().
 *
 * Handle the parameters for a field.
 */
function field_timetable_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();
  $form['granularity'] = array(
    '#type' => 'select',
    '#title' => t('Granularity of time'),
    '#options' => array('60' => t('hours'), '30' => t('half hours'), '15' => t('quarter hours'), '5' => t('5 minute intervals'), '1' => t('minutes')),
    '#default_value' => isset($settings['granularity']) ? $settings['granularity'] : 0,
    '#required' => TRUE,
    '#description' => t('Restrict the input to fixed fractions of an hour.'),
  );
  $form['mintime'] = array(
    '#type' => 'select',
    '#title' => t('Min Time'),
    '#options' => array('0' => t('0:00'), '1' => t('1:00'), '2' => t('2:00'), '3' => t('3:00'), '4' => t('4:00'), '5' => t('5:00'), '6' => t('6:00'), '7' => t('7:00'), '8' => t('8:00'), '9' => t('9:00'), '10' => t('10:00'), '11' => t('11:00'), '12' => t('12:00'), '13' => t('13:00'), '14' => t('14:00'), '15' => t('15:00'), '16' => t('16:00'), '17' => t('17:00'), '18' => t('18:00'), '19' => t('19:00'), '20' => t('20:00'), '21' => t('21:00'), '22' => t('22:00'), '23' => t('23:00')),
    '#default_value' => isset($settings['mintime']) ? $settings['mintime'] : 0,
    '#required' => TRUE,
    '#description' => t('Min Time.'),
  );
  $form['maxtime'] = array(
    '#type' => 'select',
    '#title' => t('Max Time'),
    '#options' => array( '1' => t('1:00'), '2' => t('2:00'), '3' => t('3:00'), '4' => t('4:00'), '5' => t('5:00'), '6' => t('6:00'), '7' => t('7:00'), '8' => t('8:00'), '9' => t('9:00'), '10' => t('10:00'), '11' => t('11:00'), '12' => t('12:00'), '13' => t('13:00'), '14' => t('14:00'), '15' => t('15:00'), '16' => t('16:00'), '17' => t('17:00'), '18' => t('18:00'), '19' => t('19:00'), '20' => t('20:00'), '21' => t('21:00'), '22' => t('22:00'), '23' => t('23:00'), '24' => t('24:00')),
    '#default_value' => isset($settings['maxtime']) ? $settings['maxtime'] : 0,
    '#required' => TRUE,
    '#description' => t('Max Time.'),
  );
  return $form;
}


/**
 * Implements hook_field_validate().
 */
function field_timetable_field_validate($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  // Ensure only numeric values are entered in price fields.
  foreach ($items as $delta => &$item) {
  }
}


/**
 * Implements of hook_field_is_empty().
 */
function field_timetable_field_is_empty($item, $field) {
  return $item['day'] == '0';
}


/**
 * Implements hook_field_formatter_info().
 */
function field_timetable_field_formatter_info() {
  return array(
    'field_timetable_timetable_formatter' => array(
      'label' => t('Default'),
      'field types' => array('field_timetable_timetable'),
    ),
  );
}


/**
 * Implements hook_field_widget_info().
 */
function field_timetable_field_widget_info() {
  return array(
    'field_timetable_dropdown_widget' => array(
      'label' => t('Drop-down List'),
      'description' => t('Drop-down List'),
      'field types' => array('field_timetable_timetable'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    /*'field_timetable_timetable_widget' => array(
      'label' => t('Timetable'),
      'field types' => array('field_timetable_timetable'),
    ),*/
  );
}


/**
 * Implements hook_field_widget_form().
 */
function field_timetable_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $widget = $element;
  $widget['#delta'] = $delta;

  $widget += array(
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'field_timetable') . '/theme/field_timetable.theme.css'),
    ),
  );

  // Build the form based on the type of price widget.
  switch ($instance['widget']['type']) {

    case 'field_timetable_timetable_widget':
      // TODO
      break;

    case 'field_timetable_dropdown_widget':
      $granularity = $field['settings']['granularity'];
      $mintime = ($field['settings']['mintime']) ? $field['settings']['mintime'] * 60 : 0;
      $maxtime = ($field['settings']['maxtime']) ? $field['settings']['maxtime'] * 60 : 1440;

      $options = array(
        '0' => t('Select'),
        '1' => t('Monday'),
        '2' => t('Tuesday'),
        '3' => t('Wednesday'),
        '4' => t('Thursday'),
        '5' => t('Friday'),
        '6' => t('Saturday'),
        '7' => t('Sunday')
      );
      $widget['day'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($items[$delta]['day']) ? $items[$delta]['day'] : 0,
      );
      $options = array();
      for ($i = $mintime; $i < $maxtime; $i += $granularity) {
        $h = floor($i / 60);
        $m = fmod($i, 60);
        $options[$i] = $h . ':' . $m;
      }
      $widget['start_minute'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($items[$delta]['start_minute']) ? $items[$delta]['start_minute'] : 0,
      );
      $options = array();
      for ($i = $mintime + $granularity; $i <= $maxtime; $i += $granularity) {
        $h = floor($i / 60);
        $m = fmod($i, 60);
        $options[$i] = $h . ':' . $m;
      }
      $widget['end_minute'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($items[$delta]['end_minute']) ? $items[$delta]['end_minute'] : 0,
      );
      $widget['description'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['description']) ? $items[$delta]['description'] : '',
        '#size' => 100,
        '#maxlength' => 256,
      );

      break;

  }

  return $widget;

}


/**
 * Validate callback: ensures the amount value is numeric and converts it from
 * a decimal value to an integer price amount.
 */
function field_timetable_field_widget_validate($element, &$form_state) {
  if ($element['number']['#value'] !== '') {
    // Ensure the price is numeric.
    if (!is_numeric($element['number']['#value'])) {
      form_error($element['number'], t('%title: you must enter a numeric value for the number.', array('%title' => $element['number']['#title'])));
    }
    else {
      // Convert the decimal amount value entered to an integer based amount value.
      form_set_value($element['number'], (int) $element['number']['#value'], $form_state);
    }
  }
}


/**
 * Implements hook_field_widget_error().
 */
function field_timetable_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['number'], $error['message']);
}


/*
 * Helper for random color.
 */
function field_timetable_random_color() {
  mt_srand((double)microtime()*1000000);
  $c = '';
  while(strlen($c) < 6) {
    $c .= sprintf("%02X", mt_rand(0, 255));
  }
  return '#' . $c;
}
