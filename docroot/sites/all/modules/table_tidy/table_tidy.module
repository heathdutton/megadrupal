<?php

/**
 * @file
 * table_tidy.module - Declutters HTML tables making them easier to read.
 */
define('TABLE_TIDY_SAME_AS_ABOVE_TEXT', '<span class="tt-grey tt-center">â–²</span>');

define('TABLE_TIDY_DEFAULT_INCLUDED_PAGES', '
admin/content*
admin/reports/dblog
admin/reports/fields*
admin/commerce/order*
node/*/webform-results*');

define('TABLE_TIDY_DEF_FONT_ICON_LIB_CSS', 'sites/all/libraries/font-awesome/css/font-awesome.min.css');

/**
 * Implements hook_theme_registry_alter().
 *
 * Theme trickery: override the theme_table() function with the tidier version
 * supplied by this module.
 */
function table_tidy_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['table'])) {
    $theme_registry['table']['function'] = 'table_tidy_theme_table';
  }
}

/**
 * Returns HTML for a table, tidied up.
 *
 * @param array $variables
    $variables['rows']: an array of table rows.
 *  Every row is an array of cells or an associative array with a 'data' key
 *  holding an array of cells.
 *  Each cell can be either a string or an associative array with the 'data' key
 *  holding the content string.
 *
 * @return string, the HTML for the tidied-up table
 */
function table_tidy_theme_table(&$variables) {
  if (!table_tidy_current_page_is_included()) {
    return theme_table($variables);
  }
  table_tidy_load_css_for_this_page();

  $same_as_above_text = filter_xss_admin(variable_get('table_tidy_same_as_above_text', TABLE_TIDY_SAME_AS_ABOVE_TEXT));

  $rows = &$variables['rows'];
  $reference = array();
  foreach ($rows as $i => &$row) {
    if (isset($row['data'])) {
      $row = &$row['data'];
    }
    foreach ($row as $j => &$cell) {
      if (isset($cell['data'])) {
        $cell = &$cell['data'];
      }
      if (isset($reference[$j]) && $cell == $reference[$j] && is_string($cell) && strlen(strip_tags($cell)) > 1) {
        $reference[$j] = $cell;
        $cell = $same_as_above_text;
      }
      else {
        $reference[$j] = $cell;
      }
    }
  }
  return theme_table($variables);
}

/**
 * Implement hook_views_pre_render().
 */
function table_tidy_views_pre_render(&$view) {
  if (is_a($view->style_plugin, 'views_plugin_style_table') && table_tidy_current_page_is_included()) {

    $same_as_above_text = filter_xss_admin(variable_get('table_tidy_same_as_above_text', TABLE_TIDY_SAME_AS_ABOVE_TEXT));

    table_tidy_rendered_view_result($view, $same_as_above_text);
  }
}

/**
 * Implement hook_views_post_render().
 *
 * Offers the view output as a flat string so is not suitable for processing.
 *
function table_tidy_views_post_render(&$view, &$output, &$cache) { }
 */

/**
 * Tidies the supplied Views rendered result set.
 *
 * The reason why the alternative theme_table() implementation by itself won't
 * cut it, is because Views doesn't call it. It uses its own template file,
 * views/theme/views-view-table.tpl.php. Views style plugins may use their own
 * alternative templates. That's why we call this function from an appropriate
 * Views hook, so it will apply to any Views style table plugin.
 *
 * @param object $view
 *   the view, including result set, indexed by row number
 * @param string $same_as_above_text
 *   the replace text to use when a cell has the same content as the one above
 */
function table_tidy_rendered_view_result(&$view, $same_as_above_text) {

  table_tidy_load_css_for_this_page();

  // $view->style_plugin->rendered_fields is not available at this stage.
  // Because we are going to need the View results after full rendering,
  // we render the result set here. This is NOT duplication of CPU time,
  // because render_fields(), if called for a second time, will do nothing
  // when style_plugin->rendered_fields has already been populated.
  // render_fields() will put currency signs in front of moneys, embeds node
  // and taxonomy term references in hyperlinks etc.
  $reference = array();
  foreach ($view->style_plugin->render_fields($view->result) as $num => $row) {
    foreach ($row as $field_name => $markup) {
      if (isset($reference[$field_name]) && $reference[$field_name] == $markup && strlen(strip_tags($markup)) > 1 ) {
        $view->style_plugin->rendered_fields[$num][$field_name] = $same_as_above_text;
      }
      else {
        $reference[$field_name] = $markup;
      }
    }
  }
}

/**
 * Load CSS required for the page viewed.
 */
function table_tidy_load_css_for_this_page() {
  drupal_add_css(drupal_get_path('module', 'table_tidy') . '/table_tidy.css');
  drupal_add_css(variable_get('table_tidy_icon_lib_css'));
}

/**
 * Returns whether the page currently viewed needs to have its tables tidied up.
 *
 * @return boolean
 */
function table_tidy_current_page_is_included() {
  $pages = preg_replace('/[, ]/', "\n", variable_get('table_tidy_included_pages', TABLE_TIDY_DEFAULT_INCLUDED_PAGES));
  if ($pages) {
    $path = current_path();
    $path_alias = drupal_get_path_alias($path);
    return drupal_match_path($path, $pages) || drupal_match_path($path_alias, $pages);
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 *
 * Defines new menu items.
 */
function table_tidy_menu() {
  $items = array();
  // Put the administrative settings under Content on the Configuration page.
  $items['admin/config/content/table-tidy'] = array(
    'title' => 'Table Tidy',
    'description' => 'Specify tables that require tidying up.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('table_tidy_admin_configure'),
    'access arguments' => array('administer site configuration'),
    'file' => 'table_tidy.admin.inc',
  );
  return $items;
}
