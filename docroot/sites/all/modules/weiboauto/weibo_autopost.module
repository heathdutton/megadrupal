<?php
/**
 * @file
 * Auto post to own weibo account.
 */

define('WEIBO_AUTOPOST_POST_LISTING_COUNT', 20);

/**
 * Implements hook_help().
 */
function weibo_autopost_help($path, $arg) {
  switch ($path) {
    case 'admin/help#weibo_autopost':
      return '<p>' . t('<ul><li>Choose Content Types for autopost</li><li>Selete image field for uploading weibo image</li><li>Post will be in the format of title + truncated body + node page link</li>') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function weibo_autopost_menu() {
  $items = array();
  $items['admin/config/people/weibo_autopost'] = array(
    'title' => 'Weibo AutoPost setting',
    'description' => 'Configure api information.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weibo_autopost_admin_config'),
    'access arguments' => array('administer site configuration'),
    'file' => 'weibo_autopost.admin.inc',
  );
  $items['user/%user/myposts'] = array(
    'title' => 'My Weibo posts',
    'page callback' => 'weibo_autopost_listing',
    'page arguments' => array(1, 'user'),
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'type' => MENU_LOCAL_TASK,
  );
  $items['weibo_autopost/connect'] = array(
    'title' => 'Associate your weibo account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weibo_autopost_associate_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Form constructor for the weibo_autopost_associate_form.
 * @see weibo_autopost_associate_form_submit()
 */
function weibo_autopost_associate_form($form, &$form_state) {
  if (!empty($_SESSION['weibooauth_token']['access_token'])) {
    drupal_goto($_SESSION['weibo_autopost_destination_referer']);
  }
  $options = array(
    t('Do not ask me again.'),
    t('Assciate my Weibo Account.'),
    t('I do not want to associate this time.'),
  );
  $form['weibo_autopost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Associate your Weibo Account'),
  );
  $form['weibo_autopost']['confirm'] = array(
    '#type' => 'radios',
    '#required' => 1,
    '#options' => $options,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  $form['#method'] = 'post';
  return $form;
}

/**
 * Form submission handler for weibo_autopost_associate_form().
 *
 * Implements hook_form_submit().
 */
function weibo_autopost_associate_form_submit($form, $form_state) {
  switch ($form_state['values']['confirm']) {
    case 0:
      $_SESSION['weibo_autopost_bypass'] = 1;
      drupal_goto($_SESSION['weibo_autopost_destination_referer']);
      break;

    case 1:
      drupal_goto('weibo/redirect', array('query' => array('token' => 'login')));
      break;

    case 2:
      $_SESSION['weibo_autopost_bypass'] = 2;
      drupal_goto($_SESSION['weibo_autopost_destination_referer']);
      break;

  }
}

/**
 * Implements hook_form_alter().
 */
function weibo_autopost_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['#entity_type']) && $form['#entity_type'] == 'node') {
    $weibo_enable = variable_get('weibo_autopost_ct_' . $form['#node']->type, 0);
  }
  if (!empty($weibo_enable)) {
    if (empty($_SESSION['weibooauth_token']['access_token']) && empty($_SESSION['weibo_autopost_bypass'])) {
      $destination = drupal_get_destination();
      $_SESSION['weibo_autopost_destination_referer'] = $destination['destination'];
      drupal_goto('weibo_autopost/connect');
    }
    elseif (!empty($_SESSION['weibo_autopost_bypass']) &&  $_SESSION['weibo_autopost_bypass'] == 2) {
      unset($_SESSION['weibo_autopost_bypass']);
    }
    $form['weibo_autopost'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div id="weibo_autopost_enable">',
      '#suffix' => '</div>',
      '#title' => t('AutoPost to Weibo'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 1,
    );
    $form['weibo_autopost']['weibo_autopost_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable posting to Weibo.'),
      '#default_value' => variable_get('weibo_autopost_enable', 0),
    );
    if (empty($_SESSION['weibooauth_token']['access_token'])) {
      $form['weibo_autopost']['weibo_autopost_enable']['#default_value'] = 0;
      $weibo_connect_link = l(t('here'), 'weibo/redirect', array('query' => array('token' => 'login')));
      $form['weibo_autopost']['weibo_autopost_enable']['#description'] = t('Connect your account @link', array('@link' => $weibo_connect_link));
      $form['weibo_autopost']['weibo_autopost_enable']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function weibo_autopost_node_presave($node) {
  if ((variable_get('weibo_autopost_need_publish', 1) ? ($node->status == 1) : 1) && !empty($node->weibo_autopost_enable)) {
    global $base_url;
    global $user;
    module_load_include('php', 'sinaweibo', 'saetv2.ex.class');
    $key = variable_get('weibo_consumer_key', '');
    $secret = variable_get('weibo_consumer_secret', '');
    $c = new SaeTClientV2($key, $secret, $_SESSION['weibooauth_token']['access_token']);
    $title_prefix = variable_get('weibo_autopost_title_prefix', '');
    $title_suffix = variable_get('weibo_autopost_title_suffix', '');
    $weibo_title = $title_prefix . $node->title . $title_suffix;
    $weibo_body_field = field_get_items('node', $node, 'body', $node->language);
    $weibo_body = $weibo_body_field[0]['value'];
    $weibo_msg = $weibo_title . $weibo_body;
    $weibo_msg = truncate_utf8($weibo_msg, 120);
    $weibo_node_link = url('node/' . $node->nid, array('absolute' => 1));
    $weibo_msg .= ' ' . $weibo_node_link;
    $node_fields = field_info_instances('node', $node->type);
    $weibo_image_field_id = variable_get('weibo_autopost_field_' . $node->type, '');
    foreach ($node_fields as $field) {
      if ($field['field_id'] == $weibo_image_field_id) {
        $weibo_image_field = $field['field_name'];
        break;
      }
    }
    $image = field_get_items('node', $node, $weibo_image_field, $node->language);
    if (!empty($weibo_image_field) && !empty($image[0])) {
      $weibo_image_file = file_load($image[0]['fid']);
      $weibo_image_path = file_create_url($weibo_image_file->uri);
      $ret = $c->upload($weibo_msg, $weibo_image_path);
    }
    else {
      $ret = $c->update($weibo_msg);
    }
    if (isset($ret['error_code']) && $ret['error_code'] > 0) {
      drupal_set_message(t("Failed to connect to Weibo, error: ") . "{$ret['error_code']} : {$ret['error']}");
    }
    else {
      drupal_set_message(t("Successfully post to Weibo."));
    }
  }
}

/**
 * Get the 20 latest Weibo Posts from this app.
 */
function weibo_autopost_listing($user) {
  if (empty($_SESSION['weibooauth_token']['access_token'])) {
    drupal_goto('weibo/redirect', array('query' => array('token' => drupal_get_token('weibo/connect'))));
  }
  module_load_include('php', 'sinaweibo', 'saetv2.ex.class');
  $key = variable_get('weibo_consumer_key', '');
  $secret = variable_get('weibo_consumer_secret', '');
  $c = new SaeTClientV2($key, $secret, $_SESSION['weibooauth_token']['access_token']);
  $uid_get = $c->get_uid();
  $count = WEIBO_AUTOPOST_POST_LISTING_COUNT;
  $ret = $c->user_timeline_by_id($uid_get, 1, $count, 0, 0, 0, 1);
  $statuses = $ret['statuses'];
  $header = array(
    array('data' => t('id'), 'field' => 'id', 'sort' => 'desc'),
    array('data' => t('Thumbnail'), 'field' => 'thumbnail_pic'),
    array('data' => t('Message'), 'field' => 'text'),
    array('data' => t('Created at'), 'field' => 'created_at'),
  );
  foreach ($statuses as $v) {
    $image = '';
    if (!empty($v['thumbnail_pic'])) {
      $variables = array(
        'path' => check_url($v['thumbnail_pic']),
        'alt' => check_plain($v['text']),
        'title' => check_plain($v['text']),
        'attributes' => array('class' => 'weibo_img'),
      );
      $image = theme('image', $variables);
    }
    $rows[] = array(
      check_plain($v['id']),
      !empty($image) ? $image : '',
      check_plain($v['text']),
      check_plain($v['created_at']),
    );
  }
  $output = '';
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}
