<?php
/**
 * @file
 * Interface Userpoints and User_Badges modules.
 */

/**
 * Implements hook_menu().
 */
function userpoints_badges_menu() {
  $items = array();
  // Add items if necessary.
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function userpoints_badges_form_alter(&$form, &$form_state, $form_id) {
  if ('user_badges_edit_form' === $form_id) {
    $userpoints_goal = '';
    if (isset($form['bid']) && isset($form['bid']['#value'])) {
      $userpoints_goal = db_select('userpoints_badges', 'ub')
        ->fields('ub', array('userpoints_goal'))
        ->condition('bid', $form['bid']['#value'])
        ->execute()
        ->fetchCol();
    }

    if ($userpoints_goal !== '0' && empty($userpoints_goal)) {
      $userpoints_goal = '';
    }

    $form['userpoints_goal'] = array(
      '#type' => 'textfield',
      '#title' => t('Userpoints Goal'),
      '#description' => t('Enter the minimum number of points a user must have to get this badge'),
      '#default_value' => $userpoints_goal,
      '#size' => 10,
      '#maxlength' => 10,
    );
    $form['submit']['#weight'] = 10;

    $form['#validate'][] = 'userpoints_badges_edit_badge_validate';
    $form['#submit'][] = 'userpoints_badges_edit_badge_submit';
  }
  else {
    if ('user_badges_delete_form' === $form_id) {
      $form['#submit'][] = 'userpoints_badges_delete_badge_submit';
    }
  }
}

/**
 * Returns all userpoints related badges.
 */
function userpoints_badges_get_badges($select = 'normal') {
  static $userpoints_badges_list;
  if (!isset($userpoints_badges_list)) {
    $userpoints_badges_list = array('normal' => array(), 'select' => array());
    $result = db_select('user_badges_badges', 'b')
      ->fields('b', array('bid', 'weight', 'name', 'image'))
      ->fields('u', array('userpoints_goal'))
      ->orderBy('b.weight', 'ASC')
      ->orderBy('b.name', 'ASC');
    $result->join('userpoints_badges', 'u', 'b.bid = u.bid');
    $result->execute();
    foreach ($result as $badge) {
      $userpoints_badges_list['select']["badge-$badge->bid"] = check_plain($badge->name);
      $userpoints_badges_list['normal']["badge-$badge->bid"] = $badge;
    }
  }
  return $userpoints_badges_list[$select];
}

/**
 * Extra validation on userpoints badge edit/create.
 */
function userpoints_badges_edit_badge_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (trim($values['userpoints_goal']) !== '' && !preg_match("/^[1-9][0-9]*$/D", $values['userpoints_goal'])) {
    form_set_error('userpoints_goal', t('Please enter a valid goal greater than 1'));
  }
}

/**
 * Extra submit handler for the userpoints badge edit/create.
 */
function userpoints_badges_edit_badge_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  if (isset($form_values['bid'])) {
    $bid = $form_values['bid'];
  }
  else {
    $bid = db_select('user_badges_badges', 'b')
      ->fields('b', array('bid'))
      ->condition('weight', $form_values['weight'])
      ->condition('name', $form_values['name'])
      ->condition('image', $form_values['image'])
      ->orderBy('bid', 'desc')
      ->range(0, 1)
      ->execute()
      ->fetchCol();
  }
  db_delete('userpoints_badges')
    ->condition('bid', $bid)
    ->execute();

  if (trim($form_values['userpoints_goal']) !== '') {
    $id = db_insert('userpoints_badges')
      ->fields(array('bid' => $bid, 'userpoints_goal' => $form_values['userpoints_goal']))
      ->execute();
    userpoints_badges_run_mass_badge_check($bid, $form_values['userpoints_goal']);
  }
}

/**
 * Extra submit handler for the userpoints badge deletion.
 */
function userpoints_badges_delete_badge_submit($form, &$form_state) {
  db_delete('userpoints_badges')
    ->condition('bid', $form_state['values']['bid'])
    ->execute();
}

/**
 * When a userpoints badge is created or edited, a mass check is run
 * on the users to see if they qualify for the new badge
 */
function userpoints_badges_run_mass_badge_check($bid, $userpoints_goal) {
  db_delete('user_badges_user')
    ->condition('bid', $bid)
    ->execute();
  $resultset = db_query("SELECT uid FROM {userpoints} WHERE uid > 0
    GROUP BY uid HAVING SUM(points) > :goal",
    array(':goal' => $userpoints_goal));
  foreach ($resultset as $account) {
    user_badges_user_add_badge($account->uid, $bid,
      strtr('Userpoints @bid', array('@bid' => $bid)));
  }
  drupal_set_message(t('Added all users with badges as well'));
}

/**
 * Implements hook_userpoints().
 */
function userpoints_badges_userpoints($op, $params = array()) {
  switch ($op) {
    case 'setting':
      $group = 'userpoints_badges';
      $form[$group] = array(
        '#type' => 'item',
        '#value' => t('Go to <a href="!link">Userpoints Badges Settings</a> to edit userpoint badges', array('!link' => url('admin/people/user_badges')))
        );
      return $form;

    case 'points after':
      $badges = userpoints_badges_get_badges();
      $total_points = userpoints_get_current_points($params['uid'], 'all');

      // Remove all existing badges for this user.
      db_delete('user_badges_user')
        ->condition('uid', $params['uid'])
        ->condition('type', 'Userpoints%', 'like')
        ->execute();

      // Iterate through each badge and assign any badge that passes the threshold.
      foreach ($badges as $badge) {
        if ($total_points >= $badge->userpoints_goal) {
          user_badges_user_add_badge($params['uid'], $badge->bid, t('Userpoints @bid', array('@bid' => $badge->bid)));
        }
      }
  }
}

/**
 * Figure out the best userpoint badge (ie the highest points the user has received).
 */
function userpoints_badges_get_best_badge($uid) {
  if ($uid) {
    $badges = userpoints_badges_get_badges();
    $badges_by_goal = array();
    $lookup = array();
    foreach ($badges as $badge) {
      $goal = $badge->userpoints_goal;
      $badges_by_goal[$goal] = $badge;
      $lookup[$badge->bid] = $goal;
    }
    krsort($badges_by_goal, SORT_NUMERIC);

    $user_badges = user_badges_get_badges($uid);
    $user_badges_by_goal = array();
    foreach ($user_badges as $badge) {
      $goal = $lookup[$badge->bid];
      $user_badges_by_goal[$goal] = $badge;
    }
    krsort($user_badges_by_goal, SORT_NUMERIC);

    if (count($user_badges_by_goal)) {
      $badge = array_shift($user_badges_by_goal);
    }
    else {
      $badge = array_pop($badges_by_goal);
    }

    return $badge;
  }
  return '';
}
