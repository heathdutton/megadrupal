<?php

/**
 * @file
 * Groups integration with GitLab
 */

include_once 'gitlab_groups.features.inc';

// Entity type for projects
define('GITLAB_GROUPS_MEMBER_GUEST', '10');
define('GITLAB_GROUPS_MEMBER_REPORTER', '20');
define('GITLAB_GROUPS_MEMBER_DEVELOPER', '30');
define('GITLAB_GROUPS_MEMBER_MASTER', '40');
define('GITLAB_GROUPS_MEMBER_OWNER', '50');

/**
 * Implements hook_permission().
 */
function gitlab_groups_permission() {
  return array(
    'administer gitlab_groups' =>  array(
      'title' => t('Administer GitLab Groups'),
      'description' => t('Perform administration tasks GitLab Groups.'),
    ),
    'create own gitlab_groups' => array(
      'title' => t('Create GitLab Groups'),
      'description' => t('Create an equivalent project in GitLab.'),
    ),
    'edit own gitlab_groups' => array(
      'title' => t('Edit own GitLab Groups'),
      'description' => t('Edit own equivalent project in GitLab.'),
    ),
    'delete own gitlab_groups' => array(
      'title' => t('Delete own GitLab Groups'),
      'description' => t('Create an equivalent project in GitLab.'),
    ),
  );
}

//========== Groups ==========//

/**
 *  Groups index
 *
 * Called as a user: get user groups
 * Called as admin: get all groups
 * (see http://doc.gitlab.com/ce/api/groups.html)
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options (i.e. url)
 */
function gitlab_groups_index($private_token, $options = array()) {
  if (!empty($private_token) ) {
    return gitlab_api_call('gitlab_groups', 'index', $options, array(), NULL, $private_token, TRUE);
  }

  return FALSE;
}

/**
 *  Read single group
 *
 * @param string $group_id
 *  The GitLab group ID
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options (i.e. url)
 */
function gitlab_groups_read_group($group_id, $private_token, $options = array()) {
  if (!empty($private_token) ) {
    return gitlab_api_call('gitlab_groups', 'read', $options, array('%id' => $group_id), NULL, $private_token);
  }

  return FALSE;
}

/**
 *  Create a group
 *
 * Available only for admin.
 *
 * @param array $group_data
 *  Data describing the new group
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options (i.e. url)
 */
function gitlab_groups_create_group($group_data, $private_token, $options = array()) {
  if (!empty($private_token) ) {
    return gitlab_api_call('gitlab_groups', 'create', $options, array(), $group_data, $private_token);
  }

  return FALSE;
}

/**
 *  Delete a group
 *
 * @param string $group_id
 *  The GitLab group ID
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options (i.e. url)
 */
function gitlab_groups_delete_group($group_id, $private_token, $options = array()) {
  if (!empty($private_token) ) {
    return gitlab_api_call('gitlab_groups', 'delete', $options, array('%id' => $group_id), NULL, $private_token);
  }

  return FALSE;
}

//========== Group Members ==========//

/**
 *  Groups members index
 *
 * @param string $group_id
 *  The GitLab group ID
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options (i.e. url)
 */
function gitlab_groups_members_index($group_id, $private_token, $options = array()) {
  if (!empty($private_token) ) {
    return gitlab_api_call('gitlab_groups_members', 'index', $options, array('%id' => $group_id), NULL, $private_token, TRUE);
  }

  return FALSE;
}

/**
 *  Add group member
 *
 * @param string $group_id
 *  The GitLab group ID
 * @param array $group_data
 *  An array of parameters for creating the group
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options (i.e. url)
 */
function gitlab_groups_add_member($group_id, $group_data, $private_token, $options = array()) {
  if (!empty($private_token) ) {
    return gitlab_api_call('gitlab_groups_members', 'create', $options, array('%id' => $group_id), $group_data, $private_token);
  }

  return FALSE;
}

/**
 *  Groups members index
 *
 * @param string $group_id
 *  The GitLab group ID
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options (i.e. url)
 */
function gitlab_groups_remove_member($group_id, $user_id, $private_token, $options = array()) {
  if (!empty($private_token) ) {
    return gitlab_api_call('gitlab_groups_members', 'delete', $options, array('%id' => $group_id, '%user' => $user_id), NULL, $private_token);
  }

  return FALSE;
}