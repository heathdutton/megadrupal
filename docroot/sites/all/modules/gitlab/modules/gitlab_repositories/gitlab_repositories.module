<?php
/**
 * @file
 * Code for the GitLab Repositories feature.
 */

include_once 'gitlab_repositories.features.inc';

//========== Repositories ==========//

// @todo

//========== Repository Files ==========//

/**
 * Get a single file contents from a repository
 *
 * @param string $pid
 *  Project ID
 * @param array $file_data
 *  Array of data to define the file. The following are the valid keys in the array
 *
 * - file_path (Full path to new file. Ex. lib/class.rb)
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the file contents, FALSE otherwise.
 */
function gitlab_repositories_get_file($file_data, $pid, $private_token, $options = array()) {
  if (!empty($private_token)) {
    return gitlab_api_call(
      'gitlab_repositories_files',
      'read',
      $options,
      array('%id' => $pid, '%file_path' => $file_data['file_path'], '%ref' => $file_data['ref']),
      NULL,
      $private_token);
  }
  return FALSE;
}

/**
 * Create a single file contents from a repository
 *
 * @param string $pid
 *  Project ID
 * @param array $file_data
 *  Array of data to define the file. The following are the valid keys in the array
 *
 * - file_path (Full path to new file. Ex. lib/class.rb)
 * - branch_name (The name of branch)
 * - content (File content)
 * - commit_message (Commit message)
 * - encoding [optional] (Content encoding. Valid values include 'text' or 'base64')
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the file contents, FALSE otherwise.
 */
function gitlab_repositories_create_file($file_data, $pid, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_repositories');
  // @todo add access control
  return _gitlab_repositories_file('create', $file_data, $pid, $private_token, $options);

  return FALSE;
}

/**
 * Update a single file contents from a repository
 *
 * @param string $pid
 *  Project ID
 * @param array $file_data
 *  Array of data to define the file. The following are the valid keys in the array
 *
 * - file_path (Full path to new file. Ex. lib/class.rb)
 * - branch_name (The name of branch)
 * - content (File content)
 * - commit_message (Commit message)
 * - encoding [optional] (Content encoding. Valid values include 'text' or 'base64')
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the file contents, FALSE otherwise.
 */
function gitlab_repositories_update_file($file_data, $pid, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_repositories');
  // @todo add access control
  return _gitlab_repositories_file('update', $file_data, $pid, $private_token, $options);

  return FALSE;
}

/**
 * Delete a single file contents from a repository
 *
 * @param string $pid
 *  Project ID
 * @param array $file_data
 *  Array of data to define the file. The following are the valid keys in the array
 *
 * - file_path (Full path to new file. Ex. lib/class.rb)
 * - commit_message (Commit message)
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the file contents, FALSE otherwise.
 */
function gitlab_repositories_delete_file($file_data, $pid, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_repositories');
  // @todo add access control
  return _gitlab_repositories_file('delete', $file_data, $pid, $private_token, $options);

  return FALSE;
}

//========== Repository Tree ==========//

/**
 * Get repository file and folder tree structure
 *
 * @param string $pid
 *   Project ID.
 * @param string $ref_name
 *   (optional) The name of a repository branch or tag.
 * @param string $path
 *   (optional) The path inside repository.
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options
 *   (optional) List of extra options.
 * @return array
 *   Returns the file contents, FALSE otherwise.
 */
function gitlab_repository_tree_index($pid, $path = NULL, $ref_name = NULL, $private_token, $options = array()) {
  if (!empty($private_token)) {
    return gitlab_api_call('gitlab_repository_tree', 'read', $options, array('%id' => $pid, '%path' => $path, '%ref_name' => $ref_name), NULL, $private_token);
  }
  return FALSE;
}

