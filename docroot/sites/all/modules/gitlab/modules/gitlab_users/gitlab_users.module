<?php

/**
 * @file
 * Core user actions with GitLab
 */

include_once 'gitlab_users.features.inc';

/**
 * Get all users
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the list of gitlab users, FALSE otherwise.
 */
function gitlab_users_get_users($private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_users('index', NULL, $private_token, $options);

  return FALSE;
}

/**
 * Get the current user
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the current gitlab user, FALSE otherwise.
 */
function gitlab_users_get_current_user($private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_user_current('read', NULL, $private_token, $options);

  return FALSE;
}

/**
 * Get a single user
 *
 * @param string $id
 *  User id from GitLab
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the specified gitlab user, FALSE otherwise.
 */
function gitlab_users_get_user($id, $private_token, $options = array()) {
  if (!empty($private_token)) {
    return gitlab_api_call('gitlab_users', 'read', $options, array('%id' => $id), NULL, $private_token);
  }
  return FALSE;
}

/**
 * Create a user
 *
 * @param array $user_data
 *  User data. Valid array keys are as follows:
 *
 * - email : Email (required, email)
 * - username : Username (required, string)
 * - name : Human name (required, string)
 * - password (required, string)
 * - skype : Skype ID (optional, string)
 * - linkedin : Linkedin (optional, string)
 * - twitter : Twitter account (optional, string)
 * - website_url : Website url (optional, url)
 * - projects_limit : Limit projects each user can create (optional, non-negative integer)
 * - extern_uid : External UID (optional, string)
 * - provider : External provider name (optional, string)
 * - bio : User's bio (optional, string)
 * - admin : User is admin (optional, boolean)
 * - can_create_group : User can create groups (optional, boolean)
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the specified gitlab user, FALSE otherwise.
 */
function gitlab_users_create_user($user_data, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_users('create', NULL, $private_token, $options);

  return FALSE;
}

/**
 * Update a user
 *
 * @param string $id
 *  GitLab user id
 * @param array $user_data
 *  User data.
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the specified gitlab user, FALSE otherwise.
 * @see gitlab_users_create_user().
 */
function gitlab_users_update_user($user_data, $id, $user_data, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_users('update', $id, $user_data, $private_token, $options);

  return FALSE;
}

/**
 * Delete a user
 *
 * @param string $id
 *  GitLab user id
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the specified gitlab user, FALSE otherwise.
 */
function gitlab_users_delete_user($user_data, $id, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_users('delete', $id, $private_token, $options);

  return FALSE;
}

/**
 * List the current user ssh keys
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the current gitlab user, FALSE otherwise.
 */
function gitlab_users_get_current_sshkeys($private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_user_current_sshkey('index', NULL, NULL, $private_token, $options);

  return FALSE;
}

// get user ssh key

/**
 * Get the specific ssh key from the current user
 *
 * @param string $id
 *  SSH Key id
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the current gitlab user, FALSE otherwise.
 */
function gitlab_users_get_current_sshkey($id, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_user_current_sshkey('read', $id, NULL, $private_token, $options);

  return FALSE;
}

/**
 * Create ssh key for the current user
 *
 * @param array $key_data
 *  Array of key data. Valid array keys are as follows:
 *
 * - title (required, string)
 * - key (required, string)
 *
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the current gitlab user, FALSE otherwise.
 */
function gitlab_users_create_current_sshkey($key_data, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_user_current_sshkey('create', NULL, $key_data, $private_token, $options);

  return FALSE;
}

/**
 * Delete the specific ssh key from the current user
 *
 * @param string $id
 *  SSH Key id
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the current gitlab user, FALSE otherwise.
 */
function gitlab_users_delete_current_sshkey($id, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_user_current_sshkey('delete', $id, NULL, $private_token, $options);

  return FALSE;
}

/**
 * Delete the specific ssh key from the current user
 *
 * @param string $id
 *  GitLab user id
 * @param array $key_data
 *  Array of key data. Valid array keys are as follows:
 * @param string $private_token
 *  The user's private token for connecting to the api endpoint
 * @param array $options [optional]
 *  List of extra options
 * @return array
 *  Returns the current gitlab user, FALSE otherwise.
 * @see gitlab_users_create_current_sshkey().
 */
function gitlab_users_create_sshkey($id, $key, $private_token, $options = array()) {
  module_load_include('inc', 'gitlab_users');
  // @todo add access control
  return _gitlab_users_users_sshkey('create', $id, $key, $private_token, $options);

  return FALSE;
}