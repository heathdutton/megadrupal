<?php

/**
 * Implements hook_permission().
 */
function spamagement_permission() {
  return array(
    'administer spamagement settings' => array(
      'title' => t('Administer Spamagement settings'),
      'description' => t('Administer settings for the Spamagement module.'),
    ),
    'report and delete spam users and their content' => array(
      'title' => t('Report and delete spam users and their content'),
      'description' => t('Use Spamagement actions to report and delete individual spam users and their content.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function spamagement_menu() {
  $items = array();

  $items['admin/settings/spamagement'] = array(
    'title' => 'Spamagement module settings',
    'description' => 'Configure the spamagement tool.',
    'file' => 'spamagement.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spamagement_admin'),
    'access arguments' => array('administer spamagement settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_action_info().
 */
function spamagement_action_info() {
  return array(
    'spamagement_wipe_user' => array(
      'type' => 'node',
      'label' => t('Report and delete all of a node\'s author\'s content as spam, as well as the author\'s user account.'),
      'configurable' => FALSE,
      'permissions' => array('report and delete spam users and their content'),
      'triggers' => array('any'),
    ),
    'spamagement_wipe_user_by_comment' => array(
      'type' => 'comment',
      'label' => t('Report and delete all of a comment\'s author\'s content as spam, as well as the author\'s user account.'),
      'configurable' => FALSE,
      'permissions' => array('report and delete spam users and their content'),
      'triggers' => array('any'),
    ),
    'spamagement_wipe_user_by_user' => array(
      'type' => 'user',
      'label' => t('Report and delete all of a user\'s content as spam, as well as the user itself.'),
      'configurable' => FALSE,
      'permissions' => array('report and delete spam users and their content'),
      'triggers' => array('any'),
    ),
  );
}

/**
 * Implements hook_user_insert().
 */
function spamagement_user_insert(&$edit, $account, $category) {
  $log = variable_get('spamagement_log_successful_registrations', FALSE);
  if ($log) {
    $ip = ip_address();
    $name = $account->name;
    $mail = $account->mail;
    watchdog('spamagement', 'Successful registration: @name/@mail/@ip', array('@ip' => $ip, '@name' => $name, '@mail' => $mail), WATCHDOG_INFO);
  }
}

/**
 * Given a user account:
 * - Find all their content, both nodes and comments.
 * - Report all of it to Mollom, if Mollom is enabled.
 * - Delete all of it.
 * - Delete the user account.
 */
function spamagement_wipe_user_by_user(&$account, $context = array()) {
  return _spamagement_wipe_user($account, $context);
}

/**
 * Given a node, find its user account and:
 * - Find all their content, both nodes and comments.
 * - Report all of it to Mollom, if Mollom is enabled.
 * - Delete all of it.
 * - Delete the user account.
 * Sorry about the break in naming convention; the original release
 * of this module only had one of these actions, and it behaved like
 * this one; so, I'm keeping the name the same to avoid issues when
 * folks upgrade sites that used the first release.
 */
function spamagement_wipe_user(&$node, $context = array()) {
  $account = user_load($node->uid);
  if (!$account) {
    watchdog('spamagement', 'The author of node :nid, UID :uid, does not exist.', array(':nid' => $node->nid, ':uid' => $node->uid), WATCHDOG_ERROR);
    return;
  }
  return _spamagement_wipe_user($account, $context);
}

/**
 * Given a comment, find its user account and:
 * - Find all their content, both nodes and comments.
 * - Report all of it to Mollom, if Mollom is enabled.
 * - Delete all of it.
 * - Delete the user account.
 */
function spamagement_wipe_user_by_comment(&$comment, $context = array()) {
  $account = user_load($comment->uid);
  if (!$account) {
    watchdog('spamagement', 'The author of comment :cid, UID :uid, does not exist.', array(':cid' => $comment->cid, ':uid' => $comment->uid), WATCHDOG_ERROR);
    return;
  }
  return _spamagement_wipe_user($account, $context);
}
/**
 * Internal function to handle batching the jobs fired off by
 * spamagement_wipe_user_by_*() functions.
 */
function _spamagement_wipe_user(&$account, $context = array()) {
  global $user;
  $uid = $account->uid;
  if ($uid == 1 || $user->uid == $uid) {
    watchdog('spamagement', 'You can\'t delete the content created by you or user id 1', WATCHDOG_ERROR);
  }
  else {
    watchdog('spamagement', 'Performing Spamagement user wipe for user :uid', array(':uid' => $uid), WATCHDOG_ERROR);

    $batch = array(
      'operations' => array(),
      'finished' => 'spamagement_wipe_user_finished',
      'title' => t('Wiping spam user'),
      'init_message' => t('Initializing spam user wipe'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Spam user wipe has encountered an error.'),
    );

    // Load all the NIDs.
    $nids = array();
    $result = db_query('SELECT n.nid FROM {node} n WHERE n.uid = :uid', array(':uid' => $uid));
    foreach ($result as $record) {
      $nids[] = $record->nid;
    }
    $batch['operations'][] = array('spamagement_wipe_user_nodes', array($nids));

    watchdog('spamagement', 'Queueing :count nodes for deletion', array(':count' => count($nids)), WATCHDOG_INFO);

    // Load all the CIDs.
    $cids = array();
    $result = db_query('SELECT c.cid FROM {comment} c WHERE c.uid = :uid', array(':uid' => $uid));
    foreach ($result as $record) {
      $cids[] = $record->cid;
    }
    $batch['operations'][] = array('spamagement_wipe_user_comments', array($cids));

    watchdog('spamagement', 'Queueing :count comments for deletion', array(':count' => count($cids)), WATCHDOG_INFO);

    // Delete the user account.
    $batch['operations'][] = array('spamagement_wipe_user_user', array($uid));

    watchdog('spamagement', 'Setting up the batch', array(), WATCHDOG_INFO);
    batch_set($batch);
  }
}

/**
 * Callback to remove nodes
 * @param array $nids
 * @param type $context
 * @return type
 */
function spamagement_wipe_user_nodes(array $nids, &$context) {
  watchdog('spamagement', 'Running spamagement_wipe_user_nodes', array(), WATCHDOG_INFO);

  if (!isset($context['sandbox']['current_key'])) {
    $context['sandbox']['current_key'] = 0;
  }

  // Based on previous experimentation I think we can handle 100 at a time without a timeout.
  $limit = 100;

  // Set range.
  $first_key = $context['sandbox']['current_key'];
  if (!array_key_exists($first_key, $nids)) {
    $context['finished'] = 1;
    return;
  }
  $current_nids = array_slice($nids, $first_key, $limit);

  // First, report the nodes to Mollom, if Mollom is enabled.
  if (module_exists('mollom')) {
    mollom_data_report_multiple('node', $nids, 'spam', 'moderate', 'spamagement_wipe_user');
  }

  // Collect a sample node in case we need data later.
  $sample_nid = current($current_nids);
  $sample_node = node_load($sample_nid);

  // Then, delete them.
  node_delete_multiple($current_nids);

  if (!array_key_exists('counts', $context['results'])) {
    $context['results']['counts'] = array('nodes' => 0, 'comments' => 0, 'users' => 0);
  }
  $context['results']['counts']['nodes'] += count($current_nids);
  watchdog('spamagement', 'Reported and deleted :count nodes.', array(':count' => count($current_nids)), WATCHDOG_INFO);

  $max = count($nids);
  $processed = $context['results']['counts']['nodes'];
  $context['finished'] = $processed / $max;
  if ($context['finished'] > 1) {
    $context['finished'] = 1;
  }

  $account = user_load($sample_node->uid);
  $context['message'] = t('Deleted @count of @total nodes owned by user %uname.', array(
    '@count' => $context['results']['counts']['nodes'],
    '@total' => count($nids),
    '%uname'  => $account->name,
  ));
  $context['sandbox']['current_key'] += $limit;
}

/**
 * callback to remove comments
 * @param array $cids
 * @param type $context
 * @return type
 */
function spamagement_wipe_user_comments(array $cids, &$context) {
  watchdog('spamagement', 'Running spamagement_wipe_user_comments', array(), WATCHDOG_INFO);

  if (!isset($context['sandbox']['current_key'])) {
    $context['sandbox']['current_key'] = 0;
  }

  // Based on previous experimentation I think we can handle 100 at a time without a timeout.
  $limit = 100;

  // Set range.
  $first_key = $context['sandbox']['current_key'];
  if (!array_key_exists($first_key, $cids)) {
    $context['finished'] = 1;
    return;
  }
  $current_cids = array_slice($cids, $first_key, $limit);

  // First, report the nodes to Mollom, if Mollom is enabled.
  if (module_exists('mollom')) {
    mollom_data_report_multiple('comment', $cids, 'spam', 'moderate', 'spamagement_wipe_user');
  }

  // Collect a sample comment in case we need data later.
  $sample_cid = current($current_cids);
  $sample_comment = comment_load($sample_cid);

  // Then, delete them.
  comment_delete_multiple($current_cids);

  if (!array_key_exists('counts', $context['results'])) {
    $context['results']['counts'] = array('nodes' => 0, 'comments' => 0, 'users' => 0);
  }
  $context['results']['counts']['comments'] += count($current_cids);
  watchdog('spamagement', 'Reported and deleted :count comments.', array(':count' => count($current_cids)), WATCHDOG_INFO);

  $max = count($cids);
  $processed = $context['results']['counts']['comments'];
  $context['finished'] = $processed / $max;
  if ($context['finished'] > 1) {
    $context['finished'] = 1;
  }

  $account = user_load($sample_comment->uid);
  $context['message'] = t('Deleted @count of @total comments owned by user %uname.', array(
    '@count' => $context['results']['counts']['comments'],
    '@total' => count($cids),
    '%uname'  => $account->name,
  ));
  $context['sandbox']['current_key'] += $limit;
}

/**
 * Callback to delete users
 * @param type $uid
 * @param type $context
 */
function spamagement_wipe_user_user($uid, &$context) {
  watchdog('spamagement', 'Running spamagement_wipe_user_user', array(), WATCHDOG_INFO);
  $account = user_load($uid);
  _user_cancel(array(), $account, 'user_cancel_delete');
  $context['results']['uid'] = $uid;
  $context['finished'] = 1;
  $context['message'] = t('Deleted user %uname.', array('%uname' => $account->name));
}

/**
 * Batch 'finished' callback
 */
function spamagement_wipe_user_finished($success, $results, $operations) {
  if ($success) {
    $type = 'status';
    if (module_exists('mollom')) {
      $message = t('Reported and deleted @nodes nodes and @comments comments associated with UID @uid and deleted the user account.', array(
        '@nodes'    => $results['counts']['nodes'],
        '@comments' => $results['counts']['comments'],
        '@uid'      => $results['uid'],
      ));
    } else {
      $message = t('Deleted @nodes nodes and @comments comments associated with UID @uid and deleted the user accounts.', array(
        '@nodes'    => $results['counts']['nodes'],
        '@comments' => $results['counts']['comments'],
        '@uid'      => $results['uid'],
      ));
    }
  } else {
    // At some point we should provide more detail here as well.
    $message = t('There was an error while trying to report and delete content in bulk.');
    $type = 'error';
  }
  drupal_set_message($message, $type);
}
