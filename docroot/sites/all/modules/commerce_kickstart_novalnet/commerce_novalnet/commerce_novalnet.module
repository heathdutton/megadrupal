<?php
/**
 * @file
 * Novalnet payment method module
 * This module is used for real time processing of
 * Novalnet transaction of customers.
 *
 * Copyright (c) Novalnet AG
 *
 * Released under the GNU General Public License
 * This free contribution made by request.
 * If you have found this script useful a small
 * recommendation as well as a comment on merchant form
 * would be greatly appreciated.
 *
 * Script : commerce_novalnet.module
 *
 */
module_load_include('inc', 'commerce_novalnet', 'includes/commerce_novalnet_core');

/**
 * Implements hook_menu().
 *
 * @param none
 * @return array
 */
function commerce_novalnet_menu() {

    $items['admin/commerce/config/novalnet'] = array(
        'title callback'    => 'commerce_novalnet_title_callback',
        'title arguments'   => array('Novalnet payments'),
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('commerce_novalnet_settings_form'),
        'access arguments'  => array('administer site configuration'),
        'file'              => 'includes/commerce_novalnet_admin_configuration.inc'
    );
    $items['admin/commerce/config/novalnet/adminportal'] = array(
        'title callback'    => 'commerce_novalnet_title_callback',
        'title arguments'   => array('Welcome to Novalnet Admin Portal'),
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('commerce_novalnet_adminportal_form'),
        'access arguments'  => array('administer site configuration'),
        'file'              => 'includes/commerce_novalnet_admin_configuration.inc'
    );
    $items['admin/commerce/orders/novalnet/%/process'] = array(
        'title callback'    => 'commerce_novalnet_title_callback',
        'title arguments'   => array('Manage Transaction'),
        'page callback'     => 'drupal_get_form',
        'access arguments'  => array('administer site configuration'),
        'page arguments'    => array('commerce_novalnet_order_operations_form', 4),
        'file'              => 'includes/commerce_novalnet_order_operations.inc'
    );
    $items['callback_novalnet'] = array(
        'title callback'    => 'commerce_novalnet_title_callback',
        'title arguments'   => array('Merchant script management'),
        'access arguments'  => array('access content'),
        'page callback'     => 'commerce_novalnet_callback_process',
        'file'              => 'includes/commerce_novalnet_callback_process.inc',
        'type'              => MENU_CALLBACK
    );
    $items['novalnetsubscancel/%'] = array(
        'title callback'    => 'commerce_novalnet_title_callback',
        'title arguments'   => array('Novalnet Cancel Subscription Process'),
        'page callback'     => 'drupal_get_form',
        'access arguments'  => array('access content'),
        'page arguments'    => array('commerce_novalnet_user_subscription_cancel', 1),
        'file'              => 'includes/commerce_novalnet_order_operations.inc'
    );

    return $items;
}

/**
 * Implements title callback.
 *
 * @param $arg string
 * @return string
 */
function commerce_novalnet_title_callback($arg) {
    return t($arg);
}
/**
 * Implements hook_commerce_payment_method_info().
 *
 * @param none
 * @return array
 */
function commerce_novalnet_commerce_payment_method_info() {
    $payment_methods = array();
    if (commerce_novalnet_load_settings() || arg(0) == 'admin') {
        foreach (commerce_novalnet_load_payments() as $key => $value) {
            if (isset($_SESSION['nn_payment_lock'][$key]) && $_SESSION['nn_payment_lock']['time'][$key] > time()) continue;
            $payment_methods[$key] = array(
                'title'                 => 'Novalnet ' . $value['title'],
                'display_title'         => $value['display_title'],
                'description'           => $value['description'],
                'active'                => $value['active'],
                'callbacks'             => $value['callbacks'],
                'terminal'              => $value['terminal'],
                'offsite'               => $value['offsite'],
                'offsite_autoredirect'  => $value['offsite_autoredirect']);
        }
    }
    return $payment_methods;
}

/**
 * Implements hook_payment_settings_form().
 *
 * @param $settings array
 * @return array
 */
function commerce_novalnet_payment_settings_form($settings) {
    return array();
}

/**
 * Implements hook_payment_submit_form().
 *
 * @param $payment_method array
 * @param $pane_values array
 * @param $checkout_pane array
 * @param $order object
 * @return boolean
 */
function commerce_novalnet_payment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    return commerce_novalnet_checkout_payment_form($payment_method['method_id'], $pane_values, $checkout_pane, $order);
}

/**
 * Implements hook_payment_submit_form_validate().
 *
 * @param $payment_method array
 * @param $pane_values array
 * @param $checkout_pane array
 * @param $order object
 * @return boolean
 */
function commerce_novalnet_payment_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

    if (isset($_SESSION['fraud_module']['second_call'][$payment_method['method_id']])) {
        return  commerce_novalnet_fraudmodule_input_validation($payment_method['method_id'], $pane_values, $order);
    }
    if ($payment_method['method_id'] == 'commerce_novalnet_cc')
       $_SESSION['novalnet']['commerce_novalnet_cc']['hash'] = $pane_values['nn_cc_panhash'];
    if ($payment_method['method_id'] == 'commerce_novalnet_sepa')
       $_SESSION['novalnet']['commerce_novalnet_sepa']['hash'] = $pane_values['nn_sepa_panhash'];

    return commerce_novalnet_validation($payment_method, $pane_values);
}

/**
 * Implements hook_payment_submit_form_submit().
 *
 * @param $payment_method array
 * @param $pane_form array
 * @param $pane_values array
 * @param $order object
 * @param $charge array
 * @return boolean
 */
function commerce_novalnet_payment_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
        if (in_array($payment_method['method_id'] , array('commerce_novalnet_instant', 'commerce_novalnet_paypal', 'commerce_novalnet_ideal', 'commerce_novalnet_eps'))) {
            $_SESSION['novalnet']['order_charge'] = $charge;
            return TRUE;
        }
        $settings = commerce_novalnet_load_settings();
        if ($payment_method['method_id'] == 'commerce_novalnet_cc' && $settings['commerce_novalnet_cc_secure']) {
            $_SESSION['novalnet']['order_charge'] = $charge;
            $_SESSION['novalnet']['pane_values'] = $pane_values;
            return TRUE;
        }
        if (isset($_SESSION['fraud_module']['second_call'][$payment_method['method_id']])) {
            return  commerce_novalnet_do_fraud_status_process($payment_method, $pane_values, $order, $charge);
        }

    return commerce_novalnet_do_payment_process($payment_method, $pane_values, $order, $charge);
}

/**
 * Implements hook_payment_redirect_form().
 *
 * @param $form array
 * @param $form_state array
 * @param $order object
 * @param $payment_method array
 * @return array
 */
function commerce_novalnet_payment_redirect_form($form, &$form_state, $order, $payment_method) {
    $cc_data = array();
    if ($payment_method['method_id'] == 'commerce_novalnet_cc') {
        $cc_data = $_SESSION['novalnet']['pane_values'];
    }
    list($data, $url) = commerce_novalnet_do_payment_process($payment_method, $cc_data, $order, $_SESSION['novalnet']['order_charge']);
    $url = ($payment_method['method_id'] == 'commerce_novalnet_cc') ? $url['global_pci_port'] : $url['paygate_url'];
    foreach ($data as $key => $val) {
        $form[$key] = array(
            '#type' => 'hidden',
            '#value' => $val
        );
    }
    $form['#action'] =  $url;
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Confirm'),
   );

   return $form;
}

/**
 * Implements hook_payment_redirect_form_validate().
 *
 * @param $order object
 * @param $payment_method
 * return boolean
 */
function commerce_novalnet_payment_redirect_form_validate($order, $payment_method) {
    $response = $_REQUEST;
    if (isset($response['status']) && isset($response['tid'])) {
        return commerce_novalnet_do_process_redirect_response($order, $payment_method, $response);
    }

   return FALSE;
}

/**
 * Implements hook_tokens().
 *
 * @param $type string
 * @param $tokens array
 * @param $data array
 * @param $options array
 * @return array
 */
function commerce_novalnet_tokens($type, $tokens, array $data = array(), $options = array()) {
    global $user;

        $replacements = array();
        if ($type == 'commerce-order' && isset($_SESSION['novalnet_trxn_comments'])) {
            foreach ($tokens as $name => $original) {
                switch ($name) {
                    case 'novalnet_trxn_details':
                        $breaks = array("<br />", "<br>", "<br/>");
                        $replacements[$original] = str_ireplace($breaks, "\r\n", $_SESSION['novalnet_trxn_comments']);
                        break;
                }
            }
        }

  return $replacements;
}

/**
 * Implements hook_token_info_alter().
 *
 * @param $data array
 * return none
 */
function commerce_novalnet_token_info_alter(&$data) {
    $data['tokens']['commerce-order']['novalnet_trxn_details'] = array(
        'name' => 'Novalnet',
    );
}

/**
 * Implements hook_entity_view().
 *
 * @param $entity string
 * @param $type string
 * @return none
 */
function commerce_novalnet_entity_view( $entity, $type, $view_mode, $langcode ) {
    if ($type == 'commerce_order' && arg(0) == 'user') {
        $order = commerce_order_load(arg(3));
        $trxn_details = commerce_novalnet_load_trxn_details($order->order_number);
        if (isset($trxn_details['tid'])) {
            $result = db_select('commerce_payment_transaction', 'trxn')
                                ->fields('trxn', array('message', 'payment_method'))
                                ->condition('trxn.remote_id', $trxn_details['tid'])
                                ->execute();
            $message = $result->fetchAll();
            $msg = '<table>';
            foreach ($message as $k) {
                $msg .= '<tr><td>' . $k->message . '</td></tr>';
                $payment = commerce_novalnet_set_payment_method_name($k->payment_method);
            }
            $msg .= '</table>';
            $form['trans_details'] = array(
                '#markup'               => '<br><b>' . t('Payment method') . ':</b>' . ' Novalnet ' . $payment . $msg,
            );
            $entity->content['novalnet_trxn'] = $form;
        }
        if ($trxn_details['subs_id'] != '' && $trxn_details['gateway_status'] != NOVALNET_DEACTIVATED_STATUS
            && (commerce_novalnet_load_subscription_details($order->order_number))) {
            $entity->content['novalnet_subscription_cancel'] = drupal_get_form('commerce_novalnet_subscription_cancel_form');

        }
    }
}

/**
 * Implements hook_subscription_cancel_form().
 *
 * @param none
 * return array
 */
function commerce_novalnet_subscription_cancel_form() {
    $form['subs_cancel'] = array(
        '#type'             => 'fieldset',
        '#title'            => '<b>' . t('Cancel Subscription') . '</b>',
        '#collapsible'      => FALSE,
        '#collapsed'        => TRUE,
    );
    $form['subs_cancel']['cancel_reason'] = array(
        '#type'             => 'select',
        '#title'            => t('Please select reason'),
        '#options'          => commerce_novalnet_get_subscription_cancel_reasons(),
        '#attributes'       => array('style' => 'text-align:center')
    );
    $form['subs_cancel']['order_id'] = array(
        '#type'                     => 'hidden',
        '#value'                    => arg(3),
    );
    $form['subs_cancel']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Confirm'),
    );
    $form['#action'] = url('novalnetsubscancel/' . arg(3), array('absolute' => FALSE));

    return $form;
}

/**
 * Implements hook_mail().
 *
 * @params $key array
 * @params $message array
 * @params $params array
 * return none
 */
function commerce_novalnet_mail($key, &$message, $params) {
    $message['headers']['Content-Type'] = "text/html; format=flowed; delsp=yes";
    if (isset($params['headers']))  $message['headers'] += $params['headers'];
    $message['subject']  = $params['subject'];
    $message['body'][]   = $params['body'];
}

/**
 * Implements hook_views_api().
 *
 * @param none
 * return array
 */
function commerce_novalnet_views_api() {
    return array(
        'api' => '3.0',
        'path' => drupal_get_path('module', 'commerce_novalnet') . '/views',
    );
}

/**
 * Implements hook_theme().
 *
 * @param $existing string
 * @param $type string
 * @param $theme array
 * @param $path string
 * return array
 */
function commerce_novalnet_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_novalnet' => array(
        'variables' => array(),
        'template'      => 'commerce_novalnet',
        'path'      => drupal_get_path('module', 'commerce_novalnet') . '/templates'
    )
  );
}
/**
 * Implements hook_init().
 *
 * @param none
 * @return none
 */
function commerce_novalnet_init() {
    if (isset($_REQUEST['nn_aff_id']) && is_numeric($_REQUEST['nn_aff_id']))
        $_SESSION['nn_aff_id'] = trim($_REQUEST['nn_aff_id']);

}
