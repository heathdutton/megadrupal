<?php

/**
 * @file
 * This module creates additional view modes for each enabled view mode
 * and provides overrides for a full and teaser views.
 *
 * TODO
 * Currently all entities get overridden view modes, but only nodes have
 * the automated overrides.
 *
 * This should be done early in the entity processing, but (for nodes at
 * least) Drupal 7 does not support dynamically altering the view mode.
 * So these are rebuilt using hook_entity_view_alter(). This means that
 * all node views are generated twice and could potentially be a performance
 * issue.
 *
 * With luck, hook_entity_prepare_view() or hook_field_prepare_view() could
 * be used in the future to remove this issue.
 *
 * For reference: Issue 1154382: View mode no longer can be changed
 * @see http://drupal.org/node/1154382
 */

/**
 * Helper function to get entities that are to be rebuild on enabled domain
 * view modes.
 */
function domain_view_modes_domain_entity_overrides() {
  return variable_get('domain_view_modes_domain_entity_overrides', array('node' => 'node'));
}

/**
 * Implements hook_entity_view_alter().
 */
function domain_view_modes_entity_view_alter(&$build, $type) {
  // Type specific global kill switch to prevent overrides.
  $types_to_overrride = domain_view_modes_domain_entity_overrides();
  if (empty($types_to_overrride[$type])) {
    return;
  }
  $entity = NULL;
  switch ($type) {
    case 'node':
      $entity = $build['#node'];
      break;
  }
  if ($entity) {
    list($id, $rid, $bundle) = entity_extract_ids($type, $entity);
    if ($view_mode = domain_view_modes_view_override($type, $entity, $build['#view_mode'])) {
      $entity->original_view_mode = $build['#view_mode'];
      $entity->view_mode = $view_mode;
      $old_build = $build;
      $new_build = entity_view($type, array($id => $entity), $view_mode);
      if ($type == 'node') {
        unset($entity->content);
      }
      // The build can sometimes be keyed in a plural form. This is probably
      // contrib doing something strange.
      // Ref: http://drupal.org/node/1434786
      if (isset($new_build[$type])) {
        $build = $new_build[$type][$id];
        $build['#view_mode'] = $view_mode;
      }
      elseif (isset($new_build[$type . 's'][$id])) {
        $build = $new_build[$type . 's'][$id];
        $build['#view_mode'] = $view_mode;
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function domain_view_modes_entity_info_alter(&$entity_info) {
  $settings = variable_get('domain_view_modes_skipped_bundles', array());
  $skipped_domains = variable_get('domain_view_modes_skipped_domains', array());
  $domains = domain_domains();
  foreach ($entity_info as $entity_type => &$entity) {
    if (!empty($entity['view modes'])) {
      // Collect up the full modes to insert at the top of the list.
      $additional = array();
      foreach ($entity['view modes'] as $key => $info) {
        if (!empty($settings[$entity_type][$key])) {
          continue;
        }
        if ($key == 'full') {
          $additional['full'] = $info;
          unset($entity['view modes']['full']);
        }
        foreach ($domains as $domain_id => $domain) {
          if (is_numeric($domain_id) && $domain_id > 0 && empty($skipped_domains[$domain_id])) {
            $_info = array(
              'label' => t('!label (@sitename)', array('!label' => $info['label'], '@sitename' => $domain['sitename'])),
              'custom settings' => FALSE,
            );
            $_key = 'dvm_' . $domain_id . '_' . $key;
            if ($key == 'full') {
              $additional[$_key] = $_info;
            }
            else {
              $entity_info[$entity_type]['view modes'][$_key] = $_info;
            }
          }
        }
      }
      uasort($entity['view modes'], 'domain_view_modes_value_sort');
      $entity['view modes'] = array_merge($additional, $entity['view modes']);
    }
  }
}

/**
 * Helper function to sort the view modes.
 */
function domain_view_modes_value_sort($a, $b) {
  return strcmp($a['label'], $b['label']);
}

/**
 * Helper function to determine if the view mode should be overridden
 * with the domain specific view mode.
 */
function domain_view_modes_view_override($type, &$entity, $display = 'full', $domain = NULL) {
  // Only do this once.
  if (!empty($entity->domain_view_modes_process)) {
    return FALSE;
  }
  // Assumes full mode if not set.
  if (!$display) {
    $display = empty($entity->view_mode) ? 'full' : $entity->view_mode;
  }
  if (strpos($display, 'dvm_') === 0) {
    return FALSE;
  }

  if (!$domain) {
    $domain = domain_get_domain();
  }
  $domain_id = $domain['domain_id'];
  if (!is_numeric($domain_id) || $domain_id <= 0) {
    return FALSE;
  }

  list(,, $bundle) = entity_extract_ids($type, $entity);
  $info = field_view_mode_settings($type, $bundle);

  $override = FALSE;
  if (!empty($info['dvm_' . $domain_id . '_' . $display]['custom_settings'])) {
    $entity->view_mode = 'dvm_' . $domain_id . '_' . $display;
    $override = $entity->view_mode;
  }
  $entity->domain_view_modes_process = TRUE;
  return $override;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Appends the settings onto the main domain modules setting page.
 */
function domain_view_modes_form_domain_configure_form_alter(&$form, &$form_state) {
  $label = t('Automatically Updated Entity Domain View Modes');
  $form['domain_view_modes'] = array(
    '#type' => 'fieldset',
    '#title' => t('Domain View Modes'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('View modes define how the entity fields are displayed. By default the !module module defines a view mode for each individual type of content, (ie: every entity bundle), and each domain. These settings allow you to skip generating additional view modes for selected existing domains and view modes. If you manually handle content display, disable the "%label" settings to prevent additional server processing.',
        array('%label' => $label, '!module' => t('Domain View Modes'))),
  );

  // TODO: Extend out to all entity types implemented.
  $form['domain_view_modes']['domain_view_modes_domain_entity_overrides'] = array(
    '#type' => 'checkboxes',
    '#title' => $label,
    '#options' => array('node' => t('Node')),
    '#default_value' => domain_view_modes_domain_entity_overrides(),
    '#description' => t('This automatically updates the standard rendering of the item if a corresponding domain specific enabled view mode is discovered.'),
  );

  $options = array();
  foreach (domain_domains() as $domain_id => $domain) {
    if (is_numeric($domain_id) && $domain_id > 0) {
      $options[$domain_id] = domain_title($domain);
    }
  }
  $form['domain_view_modes']['domain_view_modes_skipped_domains'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Excluded domain view modes'),
    '#options' => $options,
    '#default_value' => variable_get('domain_view_modes_skipped_domains', array()),
    '#description' => t('This blocks the creation of domain specific view modes.'),
  );

  $settings = variable_get('domain_view_modes_skipped_bundles', array());
  $form['domain_view_modes']['domain_view_modes_skipped_bundles'] = array(
    '#tree' => TRUE,
  );
  $entity_info = entity_get_info();
  $subform = &$form['domain_view_modes']['domain_view_modes_skipped_bundles'];
  foreach ($entity_info as $entity_type => &$entity) {
    $settings += array(
      $entity_type => array(),
    );
    if (!empty($entity['view modes'])) {
      // Collect up the full modes to insert at the top of the list.
      $options = array();
      foreach ($entity['view modes'] as $key => $info) {
        if (strpos($key, 'dvm_') === 0) {
          continue;
        }
        $options[$key] = t('@label (!key)', array('@label' => $info['label'], '!key' => $key));
      }
      $subform[$entity_type] = array(
        '#type' => 'checkboxes',
        '#title' => t('Excluded view modes defined by @entity_label',
            array('@entity_label' => $entity['label'])),
        '#options' => $options,
        '#default_value' => $settings[$entity_type],
      );
    }
  }
  $form['#submit'][] = 'domain_view_modes_settings_submit';
}

/**
 * Clears the cached entity info so that the new view modes are updated.
 */
function domain_view_modes_settings_submit($form, &$form_state) {
  // Update the entity view modes.
  entity_info_cache_clear();
  // Clear field caches.
  field_cache_clear();
  // Clear the caches in case the view modes change these.
  cache_clear_all();
  // Fix the remaining secondary tabs in case a view mode is deleted.
  menu_rebuild();
}
