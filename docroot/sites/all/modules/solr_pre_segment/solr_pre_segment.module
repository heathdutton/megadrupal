<?php

/**
 * @file
 * Module file for Solr pre-segment search words.
 */

/**
 * Implements hook_search_api_solr_query_alter().
 */
function solr_pre_segment_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  // Get the search index.
  $index = $query->getIndex();
  // Get the index server.
  $server = search_api_server_load($index->server);
  if ($server) {
    // Get user-submitted search keywords.
    $keyword = $call_args['query'];
    // Get the configuration of the Solr server to concatenate Solr query URL.
    $options = $server->options;
    $server_url = $options['scheme'] . '://' . $options['host'] . ':' . $options['port'] . $options['path'];
    $analysis_path = '/analysis/field';
    $query = array(
      'wt' => 'json',
      'analysis.fieldvalue' => $keyword,
      'analysis.fieldname' => 'content',
    );
    /* Concatenate the segmented search keywords query URL, like the example as
     * below:http://example.com:8080/solr/analysis/field?wt=json&analysis.field
     * value=%22drupal%E5%9F%B9%E8%AE%AD%22&analysis.fieldname=content .
     */
    $url = url($server_url . $analysis_path, array('query' => $query));
    try {
      // Call Solr's analysis interface to pre-segment the search keywords.
      $req = drupal_http_request($url);
      if ($req->code == 200) {
        $data = drupal_json_decode($req->data);
        $query_res = $data['analysis']['field_names']['content']['index'][1];
        $key = array();
        if (is_array($query_res)) {
          foreach ($query_res as $v) {
            $key[] = $v['text'];
          }
        }
        else {
          return;
        }
        /* Now the search keywords have been segmented and can be appeded to
         * the original $call_args. The origical search keyword should still be
         * the first search keyword for the search results' weight and
         * priority.
         */
        $call_args['query'] = $keyword . ' ' . implode(' ', $key);
        /* Now the $call_args parameter is modified because of passing by
         * reference, it will be subsequently used for the final search-results
         * search by Solr search server.
         */
      }
    }
    catch (Exception $e) {
      watchdog('search_api_solr', 'error while fetch data from !url', array('!url' => $url));
    }
  }
}
