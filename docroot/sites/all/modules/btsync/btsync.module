<?php
/**
 * @file
 * Core functions for the BitTorrent Sync API module.
 */

/**
 * Include additional files.
 */
$dirname = dirname(__FILE__) . '/includes';
$includes = file_scan_directory($dirname, '/.inc$/');
foreach (module_list() as $module) {
  $file = "{$dirname}/{$module}.inc";
  if (isset($includes[$file])) {
    require_once $file;
  }
}

/**
 * Implements hook_permission().
 */
function btsync_permission() {
  return array(
    'administer btsync' => array(
      'title' => t('Administer BitTorrent Sync API module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function btsync_menu() {
  $items['admin/config/services/btsync'] = array(
    'title' => 'BitTorrent Sync API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('btsync_form'),
    'access arguments' => array('administer btsync'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'btsync.admin.inc',
  );

  $items['admin/config/services/btsync/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'btsync.admin.inc',
  );

  drupal_alter('btsync_menu', $items);

  return $items;
}


/**
 * Method callback function.
 */
function btsync_method_callback($method, $data = array()) {
  $method = btsync_methods_get_method($method);
  if (is_object($method)) {
    $response = $method->send($data);
    return $response;
  }

  watchdog('btsync', 'The method %method does not exist.', array('%method' => $method), WATCHDOG_ERROR);
  return FALSE;
}

/**
 * Get method.
 */
function btsync_methods_get_method($method) {
  $file = drupal_get_path('module', 'btsync') . "/methods/{$method}.inc";
  if (file_exists($file)) {
    require_once $file;
    $class = 'BTSync' . btsync_underscores_to_camelcase($method, TRUE);

    if (class_exists($class)) {
      $method = new $class;
      return $method;
    }
  }
  return $method;
}

/**
 * Get all methods.
 */
function btsync_methods_get_all() {
  $methods = &drupal_static(__FUNCTION__, array());

  if (empty($methods)) {
    $dirname = dirname(__FILE__) . '/methods';
    $includes = file_scan_directory($dirname, '/.inc$/');
    foreach ($includes as $method) {
      $result = btsync_methods_get_method($method->name);
      if ($result) {
        $methods[$method->name] = $result;
      }
    }
  }

  return $methods;
}

/**
 * Transform underscored strings to camelcased strings.
 *
 * @param $string
 *   The underscored string to be transformed.
 * @param $ucfirst
 *   A boolean value signifying whether the first characted should be
 *   uppercased.
 *
 * @return
 *   The transformed string.
 */
function btsync_underscores_to_camelcase($string, $ucfirst = FALSE) {
  $parts = explode('_', $string);
  $parts = $parts ? array_map('ucfirst', $parts) : array($string);
  $parts[0] = $ucfirst ? ucfirst($parts[0]) : lcfirst($parts[0]);
  return implode('', $parts);
}

/**
 * Transform Parameter syntax into FAPI syntax.
 */
function btsync_parameter_to_fapi($parameter) {
  $fapi = array();

  $fapi['#title'] = $parameter['name'];

  switch ($parameter['type']) {
    case 'decimal':
      $fapi['#element_validate'] = array('element_validate_number');
      $fapi['#type'] = 'textfield';
      break;

    case 'text':
      $fapi['#type'] = 'textfield';
      break;
  }

  $fapi['#default_value'] = $parameter['default value'];
  $fapi['#required'] = $parameter['required'];

  return $fapi;
}
