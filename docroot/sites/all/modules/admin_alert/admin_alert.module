<?php
// $Id$

/**
 * @file
 *
 */

/*
 * Implements hook_menu().
 */
function admin_alert_menu() {
  $items = array();
  $items['admin/config/administration/admin-alert'] = array(
    'title' => 'Admin alerts',
    'description' => 'Configure administrative alerts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_alert_settings_form'),
    'file' => 'admin_alert.pages.inc',
    'access arguments' => array('administer admin alerts'),
  );
  $info = entity_get_info('admin_alert');
  foreach ($info['bundles'] as $bundle => $b) {
    $items["admin/config/administration/admin-alert/$bundle"] = array(
      'title' => '!type alerts',
      'title arguments' => array('!type' => t($b['label'])),
      'description' => 'Configure administrative alerts',
      'page callback' => 'admin_alert_admin',
      'page arguments' => array(4),
      'file' => 'admin_alert.pages.inc',
      'access arguments' => array('administer admin alerts'),
    );
    $items["admin/config/administration/admin-alert/$bundle/list"] = array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -50,
    );
    $items["admin/config/administration/admin-alert/$bundle/add"] = array(
      'title' => 'Add !type alert',
      'title arguments' => array('!type' => t($b['label'])),
      'description' => 'Add an admin alert',
      'page callback' => 'admin_alert_add',
      'page arguments' => array(4),
      'file' => 'admin_alert.pages.inc',
      'access arguments' => array('administer admin alerts'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -5,
    );
  }
  $items['admin-alert'] = array(
    'title' => 'Admin alerts',
    'description' => 'View administrative alerts',
    'page callback' => 'admin_alert_report',
    'page arguments' => array('page'),
    'file' => 'admin_alert.pages.inc',
    'access arguments' => array('view admin alerts'),
  );
  $items['admin-alert/mine'] = array(
    'title' => 'Unread',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin-alert/all'] = array(
    'title' => 'All',
    'description' => 'View administrative alerts',
    'page callback' => 'admin_alert_report',
    'page arguments' => array('all'),
    'file' => 'admin_alert.pages.inc',
    'access arguments' => array('administer admin alerts'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin-alert/%admin_alert'] = array(
    'title callback' => 'admin_alert_title',
    'title arguments' => array(1),
    'page callback' => 'admin_alert_view',
    'page arguments' => array(1),
    'access arguments' => array('view admin alerts'),
    'type' => MENU_CALLBACK,
    'file' => 'admin_alert.pages.inc',
  );
  $items['admin-alert/mark/%admin_alert/%'] = array(
    'title' => 'Mark alert',
    'page callback' => 'admin_alert_mark',
    'page arguments' => array(2,3),
    'access arguments' => array('view admin alerts'),
    'file' => 'admin_alert.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/*
 * Implements hook_permission().
 */
function admin_alert_permission() {
  return array(
    'view admin alerts' => array(
      'title' => t('View admin alerts'),
    ),
    'administer admin alerts' => array(
      'title' => t('Administer admin alerts'),
    ),
  );
}

/**
 * Creates an administrative alert that is displayed and optionally sent to
 * users with administrative roles.
 *
 * @param string $title
 * The untranslated English title for the administrative alert will be shown on
 * administrative alert reports and as the title for emails.  It should be a
 * maximum of 254 plain text characters with no line breaks.
 *
 * @param string $text
 * The untranslated English full text of the administrative alert will be used
 * in the body of emails and item detail for the administrative alert.
 * 
 * @param array $options
 * An array with the following keys:<pre>
 * 
 * 'type': One of the accepted admin alert types.  Default: 'info'.
 * -- 'info' alerts will be closed once all admins have marked it read
 * -- 'action' alerts must be closed manually
 * 
 * 'path': A valid Drupal path that contains the relevant information
 * or settings for that alert.  The alert will link directly to that path.
 *
 * 'send': Boolean flag whether to email the alert to admins.
 *
 * 'translate': Boolean flag whether to translate the alert. If this flag
 * is set, then the title and text will be passed through t() before being shown
 * or sent to the user.  NOTE that IF you use this feature, YOU ARE RESPONSIBLE
 * for calling t() on the exact, literal, non-variable, English-language text
 * that you pass as $title and $text parameters; otherwise, the text will not
 * be able to be translated in any case.  Example:
 * <code>
 * t('My alert title');
 * t('The full text of my alert.');
 * admin_alert('My alert title', 'The full text of my alert.', array('translate' => TRUE));
 * </code>
 *
 * 'replacements': Optional array of replacements passed to t() function.
 */
function admin_alert($title, $text, $options = array()) { 
  $alert = entity_get_controller('admin_alert')->create();

  $title = str_replace("\n", ' ', strip_tags($title));
  if (strlen($title) > 254) {
    $title = preg_replace('/\s+?(\S+)?$/', '', substr($title, 0, 254));
    if (strlen($title) > 254) {
      $title = substr(title, 0, 254);
    }
  }

  $alert->type = in_array($options['type'], admin_alert_types()) ? $options['type'] : 'info';
  $alert->field_alert_title['und'][0]['value'] = $title;
  $alert->field_alert_text['und'][0]['value'] = $text;
  $alert->path = !preg_match('|[^/#&\?\.\w-]|', $options['path']) ? $options['path'] : NULL;
  $alert->send = $options['send'] ? TRUE : FALSE;
  $alert->translate = $options['translate'] ? TRUE : FALSE;
  $alert->replacements = is_array($options['replacements']) ? $options['replacements'] : NULL;
  return admin_alert_save($alert);
}

function admin_alert_save($alert) {
  return entity_get_controller('admin_alert')->save($alert);
}

function admin_alert_send($alert) {
  $to = admin_alert_get_emails();
  if (is_array($to)) {
    foreach ($to as $langcode => $emails) {
      drupal_mail('admin_alert', 'alert', $emails, $langcode, $alert);
    }
  }
  elseif (!empty($to)) {
    drupal_mail('admin_alert', 'alert', $to, language_default('language'), $alert);
  }
}

function admin_alert_mail($key, &$message, $alert) {
  if ($key == 'alert') {
    $message['id'] = "admin_alert-$alert->type-$alert->aaid";
    $message['subject'] = $alert->field_alert_title['und'][0]['value'];
    $message['body'] = $alert->field_alert_text['und'][0]['value'];
    $t = get_t();
    if ($alert->translate && !empty($alert->field_alert_title['und'][0]['value'])) {
      if (!is_array($alert->replacements)) {
        if (!empty($alert->replacements)) {
          $alert->replacements = is_array(unserialize($alert->replacements)) ? unserialize($alert->replacements) : array();
        }
      }
      $message['subject'] = $t($message['subject'], $alert->replacements);
      $message['body'] = $t($message['body'], $alert->replacements);
    }
    $message['body'] = explode("\n", $message['body']);
    if (!empty($alert->path)) {
      global $menu_admin;
      $menu_admin = TRUE;
      if ($item = menu_get_item($alert->path)) { // intentional assignment of $item
        global $base_url;
        $message['body'][] =  $t('Visit !path', array('!path' => "$base_url/$alert->path"));
      }
      $menu_admin = FALSE;
    }
  }
}

function admin_alert_mail_alter(&$message) {
  if (
    $message['to'] == variable_get('site_mail', ini_get('sendmail_from')) &&
    variable_get('admin_alert_alter_email', FALSE)
  ) {
    if ($emails = admin_alert_get_emails()) { // intentional assignment of $emails
      if (variable_get('admin_alert_replace_site_email', FALSE)) {
        $message['to'] = '';
      }
//      if (is_array($emails)) {
//        $msg = $message;
//        // TODO: email to administrators in their preferred languages
//      }
//      else {
        $message['to'] .= ($message['to']) ? ', ' . $emails : $emails;
//      }
    }
  }
}

function admin_alert_block_info() {
  $blocks['adminalerts'] = array(
    'info' => t('Admin alerts'),
    'cache' => DRUPAL_NO_CACHE,
    'properties' => array(
      'administrative' => TRUE,
    ),
    'visiblity' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => "admin/config/administration/admin-alert/*\nadmin/config/administration/admin-alert/*/*"
  );
  return $blocks;
}

function admin_alert_block_view($delta = '') {
  if (user_access('view admin alerts')) {
    if (variable_get('admin_alert_use_admin_css', TRUE)) {
      global $theme_key;
      $admin_theme = variable_get('admin_theme', 0);
      if ($admin_theme && ($theme_key == $admin_theme)) {
        drupal_add_css(drupal_get_path('module', 'admin_alert') . '/admin_alert.admin.css');
      }
    }
    global $user;
    $path = trim(preg_replace('|\?.*$|', '', request_uri()), '/# ');
    if (!empty($path) && $alerts = admin_alert_load_multiple(FALSE, array('path' => $path, 'uid' => $user->uid, 'user_read' => FALSE, 'closed' => FALSE))) {
      $count = count($alerts);
      if ($count > 1) {
        $count_display = '<div class="admin-alert-count">' . format_plural($count, '+1 other alert', '+ @count other alerts') . '</div>';
      }
      return array(
        'content' => drupal_render(admin_alert_view(array_shift($alerts))) . $count_display
      );
    }
    if ($block = cache_get("admin_alert:block:user_$user->uid", 'cache_block')) {
      drupal_add_css(drupal_get_path('module', 'admin_alert') . '/admin_alert.css');
      drupal_add_js(drupal_get_path('module', 'admin_alert') . '/admin_alert.js');
      return $block->data;
    }
    $block = array('subject' => '', 'content' => '');
    module_load_include('inc', 'admin_alert', 'admin_alert.pages');
    if ($content = admin_alert_report()) { // intentional assignment of $content
      if ($content !== t('No alerts were found.')) {
        $block = array(
          'subject' => NULL,
          'content' => $content,
        );
      }
    }
    cache_set("admin_alert:block:user_$user->uid", $block, 'cache_block');
    return $block;
  }
}

function admin_alert_get_emails() {
  $emails = FALSE;
  if ($roles = variable_get('admin_alert_roles', array())) { // intentional assignment of $roles
    $users = db_query('SELECT ur.uid, u.mail, u.language, COUNT(ur.rid) count FROM {users_roles} ur
      LEFT JOIN {users} u ON u.uid = ur.uid WHERE ur.rid IN (:rids) GROUP BY ur.uid',
            array(':rids' => variable_get('admin_alert_roles', array())))->fetchAll();
    if (!empty($users)) {
      foreach ($users as $u) {
// TODO: email to administrators in their preferred languages
//        if ($u->language) {
//          $emails[$u->language][] = $u->mail;
//        }
//        else {
          if (!variable_get('admin_alert_exclude_user_1', FALSE) || $u->uid != 1) {
            $emails['und'][] = $u->mail;
          }
//        }
      }
      $language = language_default('language');
      if (count($emails) == 1 && is_array($emails['und']) || is_array($emails[$language])) {
        $emails = implode(', ', $emails['und']);
      }
    }
  }
  return $emails;
}

function admin_alert_form_user_admin_permissions_alter(&$form, &$form_state, $form_id) {
  $roles = variable_get('admin_alert_roles', array());
  if (!empty($roles)) {
    foreach ($roles as $rid) {
      $form['checkboxes'][$rid]['view admin alerts']['#disabled'] = TRUE;
      $form['checkboxes'][$rid]['view admin alerts']['#value'] = TRUE;
    }
  }
}

function admin_alert_entity_info() {
  $info['admin_alert'] = array(
    'label' => t('Admin alert'),
    'controller class' => 'AdminAlertController',
    'base table' => 'admin_alert',
    'uri callback' => 'admin_alert_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aaid',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'info' => array(
        'label' => t('Information'),
        'admin' => array(
          'path' => 'admin/config/administration/admin-alert/info',
          'access arguments' => array('administer admin alerts'),
        ),
      ),
      'action' => array(
        'label' => t('Action'),
        'admin' => array(
          'path' => 'admin/config/administration/admin-alert/action',
          'access arguments' => array('administer admin alerts'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => TRUE,
      ),
      'list' => array(
        'label' => t('List item'),
        'custom settings' => TRUE,
      ),
    ),
  );
  return $info;
}

function admin_alert_uri() {
  return array(
    'path' => 'admin-alert/' . $alert->aaid
  );
}

function admin_alert_load($aaid = NULL, $reset = FALSE) {
  $aaids = (isset($aaid) ? array($aaid) : array());
  $alert = admin_alert_load_multiple($aaids, $reset);
  return $alert ? reset($alert) : FALSE;
}

function admin_alert_load_multiple($aaids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('admin_alert', $aaids, $conditions, $reset);
}

function admin_alert_title($alert) {
  if ($alert->translate) {
    return t($alert->title);
  }
  return $alert->title;
}

function admin_alert_view($alert, $view_mode = 'full') {

  $entity_type = 'admin_alert';
  $alert->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($alert->aaid => $alert), $view_mode);
  entity_prepare_view($entity_type, array($alert->aaid => $alert));
  $alert->content += field_attach_view($entity_type, $alert, $view_mode);

  if ($view_mode == 'full') {
    global $user;
    if ($useralert = db_query("SELECT * FROM {admin_alert_users} WHERE aaid = :aaid AND uid = :uid", array(':aaid' => $alert->aaid, ':uid' => $user->uid))->fetchObject()) {
      $alert->user_read = $useralert->user_read;
    }
  }

  if ($alert->translate) {
    $replacements = is_array(unserialize($alert->replacements)) ? unserialize($alert->replacements) : array();
    foreach(array('field_alert_title', 'field_alert_text') as $field) {
      if (!empty($alert->content[$field][0]['#markup'])) {
        $alert->content[$field][0]['#markup'] = t($alert->content[$field][0]['#markup'], $replacements);
      }
    }
  }

  $path = 'admin-alert/' . $alert->aaid;
  if (drupal_valid_path($alert->path) && stripos(request_uri(), $alert->path) === FALSE) {
    $path = $alert->path;
    if ($view_mode != 'list') {
      $alert->content['path'] = array(
        '#type' => 'markup',
        '#markup' => l(t('Visit !path', array('!path' => $alert->path)), $alert->path, array('attributes' => array('class' => array('admin-alert-visit-link')))),
      );
    }
  }
  if (!empty($alert->content['field_alert_title'][0]['#markup'])) {
    $alert->content['field_alert_title'][0]['#markup'] = l($alert->content['field_alert_title'][0]['#markup'], $path);
  }
  $alert->content['icon'] = array(
    '#type' => 'markup',
    '#markup' => '<span class="icon"></span>'
  );
  $alert->content['links'] = array(
    '#type' => 'markup',
    '#markup' => admin_alert_get_links($alert)
  );
  if ($alert->count) {
    $alert->content['count'] = array(
      '#type' => 'markup',
      '#markup' => format_plural($alert->count, '1 user', '@count users') . ' / ' . format_plural($alert->count_read, '1 read', '@count read'),
    );
  }

  global $language;
  $langcode = $language->language;
  module_invoke_all('entity_view', $alert, $entity_type, $view_mode, $langcode);
  drupal_alter(array('admin_alert_view', 'entity_view'), $alert->content, $entity_type);

  drupal_add_css(drupal_get_path('module', 'admin_alert') . '/admin_alert.css');
  drupal_add_js(drupal_get_path('module', 'admin_alert') . '/admin_alert.js');

  $alert->content['#prefix'] = '<div class="admin-alert admin-alert-' . $view_mode . '">';
  $alert->content['#suffix'] = '</div>';

  return $alert->content;

}

function admin_alert_get_links($alert) {
  $output = '';
  if (!$alert->user_read && !$alert->count_read) {
    $output .= admin_alert_l($alert->aaid, 'read', t('Mark read'));
  }
  if ($alert->type == 'action' && 
    ( (drupal_valid_path($alert->path) && stripos(request_uri(), $alert->path) !== FALSE) ||
    ($alert->count_read && user_access('administer admin alerts')) )
  ) {
    $output .= admin_alert_l($alert->aaid, 'close', t('Close'));
  }
  if ($alert->count && user_access('administer admin alerts')) {
    $output .= admin_alert_l($alert->aaid, 'delete', t('Delete'));
  }
  if ($output) {
    return '<div class="admin-alert-links">' . $output . '</div>';
  }
}

function admin_alert_l($aaid, $op, $text) {
  $token = drupal_get_token("alert-$op-$aaid");
  $return = drupal_get_destination();
  return l($text, "admin-alert/mark/$aaid/$op/$token", array(
    'query' => array('destination' => $return['destination']),
    'attributes' => array(
      'id' => "alert-$aaid-$op-$token",
      'title' => $text,
      'class' => array("admin-alert-$op", "admin-alert-link", 'icon'),
    )
  ));
}

function admin_alert_field_extra_fields() {
  foreach (admin_alert_types() as $bundle) {
    $extra['admin_alert'][$bundle] = array(
      'form' => array(
        'name' => array(
          'label' => t('Machine Name'),
          'description' => t('Machine readable name of the alert'),
          'weight' => 10,
        ),
        'send' => array(
          'label' => t('Send'),
          'description' => t('Checkbox to send the alert to administrators'),
          'weight' => 1,
        ),
        'path' => array(
          'label' => t('Path'),
          'description' => t('Drupal path to which the alert points'),
          'weight' => 2,
        ),
      ),
      'display' => array(
        'icon' => array(
          'label' => t('Icon'),
          'description' => t('Icon for the type of alert'),
          'weight' => -50,
        ),
        'count' => array(
          'label' => t('Count'),
          'description' => t('Count of users who have read the alert'),
          'weight' => 1
        ),
        'links' => array(
          'label' => t('Links'),
          'description' => t('Links to hide or close the alert'),
          'weight' => 2,
        ),
        'path' => array(
          'label' => t('Path'),
          'description' => t('Drupal path at which the alert can be addressed'),
          'weight' => 5
        ),
      ),
    );
  }
  return $extra;
}

function admin_alert_types() {
  return array('info', 'action');
}

//function admin_alert_theme($existing, $type, $theme, $path) {
//  return array(
//    'admin_alert_full' => array(
//      'variables' => array('element' => NULL),
//      'template' => 'admin_alert_full',
//    ),
//    'admin_alert_line' => array(
//      'variables' => array('element' => NULL),
//      'template' => 'admin_alert_line',
//    ),
//  );
//}
//
