<?php

/**
 * @file epay.module
 * Drupal core hook implementations
 */

define("EPAY_PAYMENT_JAVASCRIPT_URL", 'https://ssl.ditonlinebetalingssystem.dk/integration/ewindow/paymentwindow.js');
define("EPAY_PAYMENT_POST_URL", 'https://ssl.ditonlinebetalingssystem.dk/integration/ewindow/Default.aspx');
define("EPAY_PAYMENT_SOAP_CLIENT_URL", 'https://ssl.ditonlinebetalingssystem.dk/remote/payment.asmx?WSDL');


/**
 * Implementation of hook_permission().
 */
function epay_permission() {
  return array(
    'administer epay' => array(
      'title' => t('Administer ePay'),
    ),
    'administer epay transactions' => array(
      'title' => t('Administer ePay transactions'),
    ),
    'administer epay transaction logs' => array(
      'title' => t('Administer ePay transaction logs'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function epay_menu() {
  $items = array();

  $items['admin/config/payment/epay'] = array(
    'title' => 'ePay settings',
    'description' => 'Here you can setup and configure your ePay payment settings.',
    'page callback' => 'epay_admin_list_implementations',
    'access arguments' => array('administer epay'),
    'file' => 'epay.admin.inc',
  );

  $items['admin/config/payment/epay/edit/%/%'] = array(
    'title' => 'Change ePay implementation settings',
    'description' => 'Here you can setup and configure your ePay payment settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('epay_admin_settings_form', 5, 6),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer epay'),
    'file' => 'epay.admin.inc',
  );

  $items['admin/config/payment/epay/list'] = array(
    'title' => 'List implementations',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    '#weight' => -1,
  );

  $items['admin/config/payment/epay/transactions'] = array(
    'title' => 'ePay transactions',
    'description' => 'A table of the transactions made with the ePay module.',
    'page callback' => 'epay_admin_transactions',
    'access arguments' => array('administer epay transactions'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'epay.admin.inc',
    '#weight' => 0,
  );

  $items['admin/config/payment/epay/transaction/%epay_transaction/logs'] = array(
    'title' => 'ePay transaction logs',
    'description' => 'A table of the logs for a transaction made with the ePay module.',
    'page callback' => 'epay_admin_transaction_logs',
    'page arguments' => array(4),
    'access arguments' => array('administer epay transaction logs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'epay.admin.inc',
    '#weight' => 0,
  );

  $items['payment/epay/callback/%epay_hash'] = array(
    'title' => 'ePay callback url',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'epay_transaction_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  $items['payment/epay/accept/%epay_hash'] = array(
    'title' => 'ePay payment accepted',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'epay_transaction_accept',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  $items['payment/epay/decline/%epay_hash'] = array(
    'title' => 'ePay payment cancelled',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'epay_transaction_decline',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function epay_menu_alter(&$items) {
  // Add a general payment config area, if none is present
  if (!isset($items['admin/config/payment'])) {
    $items['admin/config/payment'] = array(
      'title' => 'Payment',
      'description' => 'Payment integration modules.',
      'position' => 'right',
      'weight' => -10,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    );
  }
}

/**
 * Implementation of hook_theme().
 */
function epay_theme() {
  return array(
    'epay_number' => array(
      'arguments' => array('number'),
      'file' => 'epay.theme.inc',
    ),
    'epay_accept_page' => array(
      'template' => 'epay-accept-page',
      'arguments' => array('transaction' => NULL),
      'file' => 'epay.theme.inc',
    ),
    'epay_decline_page' => array(
      'template' => 'epay-decline-page',
      'arguments' => array('transaction' => NULL),
      'file' => 'epay.theme.inc',
    ),
    'epay_error_page' => array(
      'template' => 'epay-error-page',
      'arguments' => array('transaction' => NULL),
      'file' => 'epay.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_epayapi().
 *
 * The settings for option "default" will be used as fall back for other implementations.
 */
function epay_epayapi($op = 'info', $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'info':
      $info['default'] = array('info' => t('Default'));
      if (!empty($delta)) {
        return isset($info[$delta]) ? $info[$delta] : NULL;
      }
      else {
        return $info;
      }
      break;
  }
}

/**
 * API function for other modules used to create a form for ePay.
 *
 * @param string $op
 *    Currently not used, can be used to specify which type of form is needed.
 * @param array $data
 *    The data for the transaction containing module implementing the transaction and
 *    data on the actual transaction itself.
 *
 * @return array containing data:
 *      - form => The drupal form that was generated
 *      - transaction_id => The id of the transaction that was created.
 */
function epay_make_transaction($data, $op='standardwindow') {
  $default = array(
    'amount' => '',
    'order_id' => '',
    'order_text' => '',
    'description_text' => '',
    'subscription' => '0',
    'subscriptionname' => '',
    'declinetext' => '',
    'api_module' => '',
    'api_delta' => '',
    'windowid' => 1,
    'data' => array(),
  );
  $merged_default = array_merge($default, $data);
  // Get settings info.
  $settings = epay_load_settings($merged_default['api_module'], $merged_default['api_delta']);
  // Create the values used in the transaction based on default (empty) values and settings.
  // It is possible to overwrite all settings with the $data array.
  $values = array_merge($settings, $merged_default);
  // Create unique hash that can be used as identifier.
  $values['hash'] = sha1(time() . drupal_get_private_key());
  $transaction = array_merge(array('payment_time' => time(), 'customer_uid' => $GLOBALS['user']->uid), $values);
  $transaction['transaction_type'] = $op;
  drupal_write_record('epay_transactions', $transaction);
  $values['order_id'] .= '-' . $transaction['transaction_id'];
  $transaction['order_id'] = $values['order_id'];
  drupal_write_record('epay_transactions', $transaction, 'transaction_id');
  // Return empty array if no amount or marchant number is present.
  if (($values['amount'] < 1 && empty($data['subscription'])) || empty($values['merchant'])) {
    epay_create_log($transaction['transaction_id'], 'error', 'Invalid transaction, no amount or merchant number present');
    return array();
  }
  switch ($op) {
    case 'standardwindow':
    default:
      epay_create_log($transaction['transaction_id'], 'in progress', 'Created standard window form.');
      return array('form' => _epay_get_standardwindow($values), 'transaction_id' => $transaction['transaction_id']);
      break;
  }
}

/**
 * Load implemention settings, defaults to the epay settings.
 *
 * @param string $api_module
 *    The name of the module that has implemented hook_epayapi op info
 * @param string $api_delta
 *    The delta of the implemented hook_epayapi op info.
 *
 * @return array
 */
function epay_load_settings($api_module='epay', $api_delta='default') {
  $settings = db_query("SELECT * FROM {epay_implementations} WHERE api_module = :api_module AND api_delta = :api_delta;", array(':api_module' => $api_module, ':api_delta' => $api_delta))->fetchAssoc();
  // Get default if no settings was found or the merchant what not set.
  if ($settings == FALSE || empty($settings['merchant'])) {
    $settings = db_query("SELECT * FROM {epay_implementations} WHERE api_module = 'epay' AND api_delta = 'default';")->fetchAssoc();
  }
  // Failsafe, return empty array if no data was available.
  return $settings ? $settings : array();
}

/**
 * Load function to get a transaction object from a hash
 *
 * @param string $hash
 *    The hash of a transaction.
 *
 * @return object
 *    Transaction object.
 */
function epay_hash_load($hash) {
  $transaction = db_query("SELECT * FROM {epay_transactions} WHERE hash = :hash;", array(':hash' => $hash))->fetchAssoc();
  if (is_array($transaction)) {
    $transaction['data'] = unserialize($transaction['data']);
  }
  return $transaction;
}

/**
 * Load function to get a transaction object from a transaction id.
 *
 * @param int $transaction_id
 *    The id of a transaction.
 *
 * @return object
 *    Transaction object.
 */
function epay_transaction_load($transaction_id) {
  $transaction = db_query("SELECT * FROM {epay_transactions} WHERE transaction_id = :transaction_id;", array(':transaction_id' => $transaction_id))->fetchAssoc();
  if (is_array($transaction)) {
    $transaction['data'] = unserialize($transaction['data']);
  }
  return $transaction;
}

/**
 * Create a record in the {epay_transaction_logs} table.
 *
 * @param int $transaction_id
 *    The id of the transaction to send a message about.
 * @param string $status
 *    The status on the transaction.
 * @param string $message
 *    A message to store in the log.
 * @param boolean $update
 *    Indicator to set, if the transaction status should be updated.
 */
function epay_create_log($transaction_id, $status, $message='', $update=TRUE) {
  $record = array(
    'transaction_id' => $transaction_id,
    'status' => $status,
    'log_message' => $message,
    'time' => time(),
  );
  drupal_write_record('epay_transaction_logs', $record);
  if ($update) {
    db_query("UPDATE {epay_transactions} SET status = :status WHERE transaction_id = :transaction_id;", array(':status' => $status, ':transaction_id' => $transaction_id));
  }
}

/**
 * Menu callback, called by ePay when the payment is accepted before the redirect.
 *
 * @param object $transaction
 *    The ePay transaction object.
 */
function epay_transaction_callback($transaction) {
  $params = $_GET;
  unset($params['q']);
  unset($params['hash']);
  if (isset($transaction['md5_password']) &&
      $md5 = md5(implode('', array_values($params)) . $transaction['md5_password']) != $_GET['hash']) {
    epay_create_log($transaction['transaction_id'], 'error', 'Md5 key invalid for callback url');
  }
  else {
    epay_create_log($transaction['transaction_id'], 'captured', 'Registrered callback call from epay');
    $transaction['status'] = 'captured';
    $function = $transaction['api_module'] . '_epayapi';
    if (empty($transaction['txnid']) && !empty($params['txnid'])) {
      $transaction['txnid'] = $params['txnid'];
      db_query('UPDATE {epay_transactions} SET txnid = :txnid WHERE transaction_id = :transaction_id', array(
        ':transaction_id' => $transaction['transaction_id'],
        ':txnid' => $transaction['txnid'],
      ));
    }
    if (function_exists($function)) {
      $function('transaction_callback', $transaction['api_delta'], $transaction);
    }
  }
  exit();
}
/**
 * Menu callback, ePay redirects to this url when the payment is accepted.
 *
 * @param object $transaction
 *    The ePay transaction object.
 */
function epay_transaction_accept($transaction) {
  $params = $_GET;
  unset($params['q']);
  unset($params['hash']);
  if (isset($transaction['md5_password']) &&
      $md5 = md5(implode('', array_values($params)) . $transaction['md5_password']) != $_GET['hash']) {
    epay_create_log($transaction['transaction_id'], 'error', 'Md5 key invalid for accept url');
    $transaction['status'] = 'md5-error';
    $transaction['theme'] = 'epay_error_page';
  }
  else {
    epay_create_log($transaction['transaction_id'], 'completed', 'User returned to the accept url');
    $transaction['theme'] = 'epay_accept_page';
    $transaction['status'] = 'completed';
    if (empty($transaction['txnid']) && !empty($params['txnid'])) {
      $transaction['txnid'] = $params['txnid'];
      db_query('UPDATE {epay_transactions} SET txnid = :txnid WHERE transaction_id = :transaction_id', array(
        ':transaction_id' => $transaction['transaction_id'],
        ':txnid' => $transaction['txnid'],
      ));
    }
  }

  $function = $transaction['api_module'] . '_epayapi';
  if (function_exists($function)) {
    $function('transaction_accept', $transaction['api_delta'], $transaction);
  }
  if (isset($transaction['redirect']) && !empty($transaction['redirect'])) {
    return drupal_goto($transaction['redirect']);
  }
  return theme($transaction['theme'], array('transaction' => $transaction));
}

/**
 * Menu callback, ePay redirects to this url when the payment is declined.
 *
 * @param object $transaction
 *    The ePay transaction object.
 */
function epay_transaction_decline($transaction) {
  epay_create_log($transaction['transaction_id'], 'canceled', 'User returned to the decline url');
  $transaction['theme'] = 'epay_decline_page';
  $function = $transaction['api_module'] . '_epayapi';
  if (function_exists($function)) {
    $function('transaction_decline', $transaction['api_delta'], $transaction);
  }
  if (isset($transaction['redirect']) && !empty($transaction['redirect'])) {
    return drupal_goto($transaction['redirect']);
  }
  return theme($transaction['theme'], array('transaction' => $transaction));
}

/**
 * Utility function to get the soap client for epay api integrations.
 */
function epay_get_client($reset = FALSE) {
  static $client;
  if ($reset || !$client) {
    try {
      $client = new SoapClient(EPAY_PAYMENT_SOAP_CLIENT_URL);
    } catch (SoapFault $e) {
      $client = NULL;
      watchdog('epay', 'Error initializing SoapClient: @error.', array('@error' => $e->faultstring), WATCHDOG_ERROR);
    }
  }
  return $client;
}

/**
 * Capture an amount for a transaction
 *
 * @param $params
 *    An array of params for the capture.
 *      - merchantnumber (required)
 *      - amount (required)
 *      - transactionid (required)
 *      - pwd (optional) the password for remote access.
 *
 * @return FALSE when failing or object containing data of the result.
 */
function epay_capture_transaction($params) {
  $params['pbsResponse'] = '';
  $params['epayresponse'] = '';
  $client = epay_get_client();
  if (!$client) {
    return FALSE;
  }
  try {
    $result = $client->capture($params);

    if ($result->captureResult == FALSE) {
      $status = FALSE;
      switch ($result->epayresponse) {
        case '-1003':
        watchdog('epay', 'Error trying to capture payment for error: @error.', array('@error' => 'IP not allowed'), WATCHDOG_ERROR);
          break;

        case '-1007':
        watchdog('epay', 'Error trying to capture payment for error: @error.', array('@error' => 'Trying to capture more than allowed'), WATCHDOG_ERROR);
          break;

        case '-1019':
        watchdog('epay', 'Error trying to capture payment for error: @error.', array('@error' => 'Incorrect remote password'), WATCHDOG_ERROR);
          break;

        case '-1021':
        watchdog('epay', 'Error trying to capture payment for error: @error.', array('@error' => 'Capture has been made less than 15 mins ago'), WATCHDOG_ERROR);
          break;

        default:
          watchdog('epay', 'Error trying to capture payment - unknown error: ePay erorr: @epay_error, PBS error: @pbs_error.', array(
            '@epay_error' => $result->epayresponse,
            '@pbs_error' => $result->pbsResponse,
          ), WATCHDOG_ERROR);
          break;
      }
    }
    else {
      $status = TRUE;
      watchdog('epay', 'Successfully made capture on transaction: @txnid.', array('@txnid' => $params['transactionid']), WATCHDOG_NOTICE);
    }

    return array('success' => $status, 'data' => $result);
  } catch (SoapFault $e) {
    watchdog('epay', 'Error using SoapClient to capture payment: @error.', array('@error' => $e->faultstring), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Capture an amount for a transaction
 *
 * @param $params
 *    An array of params for the capture.
 *      - merchantnumber (required)
 *      - transactionid (required)
 *      - pwd (optional) the password for remote access.
 *
 * @return FALSE when failing or transaction object from ePay.
 */
function epay_get_remote_transaction($params) {
  $params['epayresponse'] = '';
  $client = epay_get_client();
  if (!$client) {
    return FALSE;
  }
  try {
    $result = $client->gettransaction($params);

    if ($result->gettransactionResult) {
      return $result->transactionInformation;
    }
    else {
      return FALSE;
    }

    return $result;
  } catch (SoapFault $e) {
    watchdog('epay', 'Error using SoapClient to get transaction payment: @error.', array('@error' => $e->faultstring), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Wrapper function to get the epay payment window and store info about the transaction.
 */
function _epay_get_standardwindow($data) {
  if ($data['windowstate'] != 3) {
    drupal_add_js(EPAY_PAYMENT_JAVASCRIPT_URL, 'external');
  }
  drupal_add_js(drupal_get_path('module', 'epay') . '/epay.js');
  return drupal_get_form('epay_standard_window_form', $data);
}

/**
 * Form to create a form for the standard window.
 *
 * @param array $settings
 *  An array containing all the settings - info stored from the admin backend.
 * @param array $data
 *    The actual data for the transaction, like the amount etc.
 *
 * @return array $form
 *    Returns the form definition array.
 */
function epay_standard_window_form($form, $form_state, $data) {
  global $base_url;
  $hash = $data['hash'];
  $form['#action'] = EPAY_PAYMENT_POST_URL;
  $form['#attributes'] = array(
    'name' => 'ePay',
  );
  $form['#id'] = "ePay";

  $form['merchantnumber'] = array(
    '#type' => 'hidden',
    '#value' => $data['merchant'],
  );

  $form['amount'] = array(
    '#type' => 'hidden',
    '#value' => $data['amount'],
  );

  $form['currency'] = array(
    '#type' => 'hidden',
    '#value' => $data['currency'],
  );

  $form['orderid'] = array(
    '#type' => 'hidden',
    '#value' => $data['order_id'],
  );

  $form['accepturl'] = array(
    '#type' => 'hidden',
    '#value' => "$base_url/payment/epay/accept/$hash",
  );

  $form['cancelurl'] = array(
    '#type' => 'hidden',
    '#value' => "$base_url/payment/epay/decline/$hash",
  );

  $form['callbackurl'] = array(
    '#type' => 'hidden',
    '#value' => "$base_url/payment/epay/callback/$hash",
  );

  $form['instantcapture'] = array(
    '#type' => 'hidden',
    '#value' => $data['instantcapture'],
  );

  $form['ordertext'] = array(
    '#type' => 'hidden',
    '#value' => $data['order_text'],
  );

  $form['group'] = array(
    '#type' => 'hidden',
    '#value' => $data['epay_group'],
  );

  $form['description'] = array(
    '#type' => 'hidden',
    '#value' => $data['description_text'],
  );

  $form['windowstate'] = array(
    '#type' => 'hidden',
    '#value' => $data['windowstate'],
  );

  $form['ownreceipt'] = array(
    '#type' => 'hidden',
    '#value' => $data['ownreceipt'],
  );

  $form['mailreceipt'] = array(
    '#type' => 'hidden',
    '#value' => $data['mailreceipt'],
  );

  $form['language'] = array(
    '#type' => 'hidden',
    '#value' => $data['language'],
  );

  $form['smsreceipt'] = array(
    '#type' => 'hidden',
    '#value' => $data['smsreceipt'],
  );
  $form['instantcallback'] = array(
    '#type' => 'hidden',
    '#value' => '1',
  );

  $form['smsreceipt'] = array(
    '#type' => 'hidden',
    '#value' => $data['smsreceipt'],
  );

  $form['smsreceipt'] = array(
    '#type' => 'hidden',
    '#value' => $data['smsreceipt'],
  );

  $form['smsreceipt'] = array(
    '#type' => 'hidden',
    '#value' => $data['smsreceipt'],
  );

  $form['declinetext'] = array(
    '#type' => 'hidden',
    '#value' => $data['declinetext'],
  );

  $form['splitpayment'] = array(
    '#type' => 'hidden',
    '#value' => $data['splitpayment'],
  );

  if (!empty($data['iframewidth'])) {
    $form['iframewidth'] = array(
      '#type' => 'hidden',
      '#value' => $data['iframewidth'],
    );
  }

  if (!empty($data['iframewidth'])) {
    $form['iframeheight'] = array(
      '#type' => 'hidden',
      '#value' => $data['iframeheight'],
    );
  }

  if (!empty($data['opacity'])) {
    $form['opacity'] = array(
      '#type' => 'hidden',
      '#value' => $data['opacity'],
    );
  }

  if (!empty($data['backgroundcolor'])) {
    $form['backgroundcolor'] = array(
      '#type' => 'hidden',
      '#value' => $data['backgroundcolor'],
    );
  }

  $form['googletracker'] = array(
    '#type' => 'hidden',
    '#value' => $data['googletracker'],
  );

  if (!empty($data['mobilecssurl'])) {
    $form['mobilecssurl'] = array(
      '#type' => 'hidden',
      '#value' => $data['mobilecssurl'],
    );
  }

  if (!empty($data['cssurl'])) {
    $form['cssurl'] = array(
      '#type' => 'hidden',
      '#value' => $data['cssurl'],
    );
  }

  $form['lockpaymentcollection'] = array(
    '#type' => 'hidden',
    '#value' => $data['lockpaymentcollection'],
  );

  $form['windowid'] = array(
    '#type' => 'hidden',
    '#value' => $data['windowid'],
  );

  $form['smsreceipt'] = array(
    '#type' => 'hidden',
    '#value' => $data['smsreceipt'],
  );

  $form['mobile'] = array(
    '#type' => 'hidden',
    '#value' => $data['mobile'],
  );

  $form['subscription'] = array(
    '#type' => 'hidden',
    '#value' => $data['subscription'],
  );

  $form['subscriptionname'] = array(
    '#type' => 'hidden',
    '#value' => $data['subscriptionname'],
  );


  if ($data['windowstate'] == 3) {
    $form['go_to_payment_site'] = array(
      '#type' => 'submit',
      '#value' => t('Go to payment site'),
    );
  }
  elseif ($data['windowstate'] == 2 || $data['windowstate'] == 4) {
    $form['payment_div'] = array(
      '#markup' => '<div id="payment-div"></div>',
    );
  }
  // All elements that should be hashed are listed here.
  $form['#hash_keys'] = array(
    'merchantnumber',
    'amount',
    'orderid',
    'instantcallback',
    'splitpayment',
    'callbackurl',
    'cancelurl',
    'accepturl',
    'windowstate',
    'currency',
    'language',
    'instantcapture',
    'smsreceipt',
    'mailreceipt',
    'group',
    'ownreceipt',
    'ordertext',
    'subscription',
    'iframewidth',
    'iframeheight',
    'opacity',
    'backgroundcolor',
    'googletracker',
    'mobilecssurl',
    'cssurl',
    'lockpaymentcollection',
    'windowid',
    'mobile',
    'windowstate',
    'ownreceipt',
    'subscriptionname',
    'declinetext',
  );

  // Executing the ]api_form_alter
  $func = $data['api_module'] .'_epay_form_alter';
  if (function_exists($func)) {
    $func($form, $data['api_delta']);
  }

  // Calculating hash for only the ePay specific form fields.
  $hash_string = '';
  foreach (element_children($form) as $element_key) {
    if (in_array($element_key, $form['#hash_keys'])) {
      $hash_string .= $form[$element_key]['#value'];
    }
  }
  $form['hash'] = array(
    '#type' => 'hidden',
    '#value' => md5($hash_string . $data['md5_password']),
  );

  return $form;
}

/**
 * Gets array containing the ePay currency codes.
 */
function _epay_currency_codes() {
  return array(
    '036' => t('AUD Australian Dollar'),
    '124' => t('CAD Canadian Dollar'),
    '208' => t('DKK Danish Krone'),
    '344' => t('HKD Hong Kong Dollar'),
    '352' => t('ISK Iceland Krona'),
    '392' => t('JPY Yen'),
    '484' => t('MXN Mexican Peso'),
    '554' => t('NZD New Zealand Dollar'),
    '578' => t('NOK Norwegian Krone'),
    '702' => t('SGD Singapore Dollar'),
    '710' => t('ZAR Rand'),
    '752' => t('SEK Swedish Krona'),
    '756' => t('CHF Swiss Franc'),
    '826' => t('GBP Pound Sterling'),
    '840' => t('USD US Dollar'),
    '949' => t('TRY New Turkish Lira'),
    '978' => t('EUR Euro'),
    '985' => t('PLN Zloty'),
  );
}

/**
 * Gets array containing translates status messages.
 */
function _epay_transaction_status() {
  return array(
    'error' => t('Error'),
    'in progress' => t('Payment in progress'),
    'completed' => t('Payment completed'),
    'canceled' => t('Payment canceled'),
    'captured' => t('Payment captured')
  );
}
