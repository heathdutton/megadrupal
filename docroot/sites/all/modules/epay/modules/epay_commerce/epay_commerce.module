<?php

/**
 * Implementation of hook_epayapi().
 */
function epay_commerce_epayapi($op = 'info', $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'info':
      // Don't do anything here, as this is saved in commerce payment rule setup.
      return array();
      break;
    case 'transaction_decline':
      $commerce_transaction = commerce_payment_transaction_load($transaction['data']['commerce_transaction_id']);
      $commerce_transaction->message = 'Declined payment';
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      commerce_payment_transaction_save($commerce_transaction);
      $transaction['redirect'] = 'checkout/' . $transaction['order_id'] . '/payment/back/' . $transaction['data']['payment_redirect_key'];
      drupal_set_message(t("You canceled the payment at the payment site."), 'warning');
      break;

    case 'transaction_accept':
      $transaction['redirect'] = 'checkout/' . $transaction['order_id'] . '/payment/return/' . $transaction['data']['payment_redirect_key'];
      if ($transaction['status'] != 'completed') {
        // Some error happened.
        drupal_set_message(t('Unable to verify your payment, please try again.'), 'error');
        $transaction['redirect'] = 'checkout/' . $transaction['order_id'] . '/payment/back/' . $transaction['data']['payment_redirect_key'];
      }

    case 'transaction_callback':
      // MD5 check passed - everything is good.
      if ($transaction['status'] == 'completed' || $transaction['status'] == 'captured') {
        $commerce_transaction = commerce_payment_transaction_load($transaction['data']['commerce_transaction_id']);
        $transaction['redirect'] = 'checkout/' . $transaction['order_id'] . '/payment/return/' . $transaction['data']['payment_redirect_key'];
        if ($commerce_transaction->status != COMMERCE_PAYMENT_STATUS_SUCCESS) {
          $commerce_transaction->message = 'Completed';
          $commerce_transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
          $payment_method = commerce_payment_method_instance_load($commerce_transaction->instance_id);
          if ($payment_method && !empty($payment_method['settings']['split_instant_capture']) && $payment_method['settings']['split_instant_capture'] > 0) {
            $capture_procent = min($payment_method['settings']['split_instant_capture'], 100);
            $params = array(
              'amount' => (int) ($commerce_transaction->amount * $capture_procent / 100),
              'merchantnumber' => $payment_method['settings']['merchant'],
              'transactionid' => $transaction['txnid'],
              'pwd' => $payment_method['settings']['remote_password'],
            );
            $status = epay_capture_transaction($params);
            if (!$status || !$status['success']) {
              $order = commerce_order_load($commerce_transaction->order_id);
              rules_invoke_all('epay_commerce_captured_remaining_amount_fail', $order, $epay_transaction['txnid']);
            }
          }
          commerce_payment_transaction_save($commerce_transaction);
        }
      }
      break;
  }
}

/**
 * Implements hook_commerce_order_status_info().
 */
function epay_commerce_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses['epay_commerce_capture_fail'] = array(
    'name' => 'epay_commerce_capture_fail',
    'title' => t('Failed ePay capture'),
    'state' => 'pending',
    'cart' => FALSE,
  );

  return $order_statuses;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function epay_commerce_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['epay_commerce'] = array(
    'title' => t('ePay'),
    'description' => t('Payment using the ePay provider.'),
    'display_title' => t('Credit card'),
    'offsite' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function epay_commerce_settings_form($settings = NULL) {
  $form = array();
  $form['#prefix'] = '<div class="commerce-settings-prefix">' . t('Additional settings can be adjusted at the !link settings page', array('!link' => l(t('ePay payment gateway API'), 'admin/config/payment/epay'))) . '</div>';

  // Merge default settings into the stored settings array.
  $default_currency = commerce_currency_load(variable_get('commerce_default_currency', 'USD'));

  $settings = (array) $settings + array(
    'merchant' => '',
    'md5_password' => '',
    'instantcapture' => 0,
    'split_instant_capture' => 0,
    'smsreceipt' => '',
    'mailreceipt' => '',
    'epay_group' => '',
    'currency' => (is_array($default_currency) && in_array($default_currency['numeric_code'], array_keys(_epay_currency_codes()))) ? $default_currency['numeric_code'] : '208',
    'language' => '1',
  );

  $form['merchant'] = array(
    '#type' => 'textfield',
    '#title' => t('ePay merchantnumber'),
    '#description' => t('your unique merchantnumber from ePay.'),
    '#default_value' => $settings['merchant'],
    '#size' => 16,
    '#required' => TRUE,
  );

  $form['md5_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret word for MD5 security'),
    '#description' => t('The secret MD5 password which is to be setup in both the ePay administration and here'),
    '#default_value' => $settings['md5_password'],
    '#size' => 16,
    '#required' => TRUE,
  );

  $form['remote_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Remote password'),
    '#description' => t('If you have password protected the remote calls in the ePay interface, you need to enter this password here.'),
    '#default_value' => isset($settings['remote_password']) ? $settings['remote_password'] : '',
    '#size' => 16,
    '#required' => FALSE,
  );

  $form['instantcapture'] = array(
    '#type' => 'checkbox',
    '#title' => t('Capture the payments as they are made.'),
    '#description' => t('For some countries, this is only allowed, if you don\'t sell physical products'),
    '#default_value' => $settings['instantcapture'],
  );

  $form['splitpayment'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use split payment.'),
    '#description' => t('
      Note using instant capture disables the split payment feature.
      Split payment allows merchant to capture the payment in several stages instead of all at once.
      Note when using this feature you should make sure you can capture the money before sending any products to the customer.'
    ),
    '#default_value' => $settings['splitpayment'],
  );

  $form['split_instant_capture'] = array(
    '#type' => 'textfield',
    '#title' => t('Instant capture on split payments'),
    '#description' => t('Select how big a portion of the amount should be captured right away. Select 0 to disable this feature.'),
    '#default_value' => $settings['split_instant_capture'],
    '#size' => 4,
    '#field_suffix' => '%',
    '#element_validate' => array('element_validate_integer'),
    '#states' => array(
      'visible' => array(
        ':input[name="parameter[payment_method][settings][payment_method][settings][splitpayment]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['smsreceipt'] = array(
    '#type' => 'textfield',
    '#title' => t('Send an SMS receipt as the payment is made - enter the number here'),
    '#description' => t('Transmits a SMS about payment information as the payment is made. Enter the mobile number here.'),
    '#default_value' => $settings['smsreceipt'],
    '#size' => 16,
  );

  $form['mailreceipt'] = array(
    '#type' => 'textfield',
    '#title' => t('Send an email as the payment is made - enter the email here'),
    '#description' => t('Transmits an email about payment information as the payment is made. Enter the email address here.'),
    '#default_value' => $settings['mailreceipt'],
    '#size' => 16,
  );

  $form['epay_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Move the payments to a specific group'),
    '#description' => t('As the payments are made, they are moved to a specific group within ePay.'),
    '#default_value' => $settings['epay_group'],
    '#size' => 16,
  );

  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('ePay window language type'),
    '#description' => t('The language of the payment window.'),
    '#options' => array(
      '0' => t('Auto detect'),
      '1' => t('Danish'),
      '2' => t('English'),
      '3' => t('Swedish'),
      '4' => t('Norwegian'),
      '5' => t('Greenland'),
      '6' => t('Iceland'),
      '7' => t('German'),
      '8' => t('Finnish'),
      '9' => t('Spanish'),
      '10' => t('French'),
      '11' => t('Polish'),
    ),
    '#default_value' => $settings['language'],
  );
  $form['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency type'),
    '#description' => t('The fallback currency used for payments, if none is defined.'),
    '#options' => _epay_currency_codes(),
    '#default_value' => (isset($implementation['currency']) && $implementation['currency']) ? $implementation['currency'] : '208',
  );

  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function epay_commerce_redirect_form($form, &$form_state, $order, $payment_method) {
  // Save the transaction, so we know that it has been made in the commerce UI.
  $order = commerce_order_load($order->order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $transaction = commerce_payment_transaction_new('epay_commerce', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order_wrapper->commerce_order_total->amount->value();
  $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

  commerce_payment_transaction_save($transaction);
  // Return an error if the enabling action's settings haven't been configured.
  $currency = commerce_currency_load($order_wrapper->commerce_order_total->currency_code->value());
  $settings = $payment_method['settings'];
  $settings['api_module'] = 'epay_commerce';
  $settings['api_delta'] = 'default';
  $settings['amount'] = $order_wrapper->commerce_order_total->amount->value();
  $settings['currency'] = (isset($currency['numeric_code']) && in_array($currency['numeric_code'], array_keys(_epay_currency_codes()))) ? $currency['numeric_code'] : $settings['currency'];
  $settings['order_id'] = $order->order_id;
  $settings['data'] = array(
    'payment_redirect_key' => $order->data['payment_redirect_key'],
    'commerce_transaction_id' => $transaction->transaction_id,
  );
  $result = epay_make_transaction($settings);

  $transaction->remote_id = $result['transaction_id'];
  commerce_payment_transaction_save($transaction);
  return $result['form'];
}
