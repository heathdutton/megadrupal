<?php

/**
 * @file
 * Install file for ePay.
 */

/**
 * Implementation of hook_install().
 */
function epay_install() {
  // Inserting default implementation.
  db_query("INSERT INTO {epay_implementations} (api_module, api_delta) VALUES ('epay', 'default')");
}

/**
 * Implementation of hook_uninstall().
 */
function epay_uninstall() {
  // Delete ePay variables from the db:
  db_query("DELETE FROM {variable} WHERE name LIKE 'epay_%%';");
}

/**
 * Implementation of hook_schema().
 */
function epay_schema() {
  $schema['epay_transactions'] = array(
    'description' => 'Stores epay transactions',
    'fields' => array(
      'transaction_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => 'Transaction ID.',
      ),
      'txnid' => array(
        'type' => 'varchar',
        'length' => 31,
        'default' => NULL,
        'description' => 'External transaction ID.',
      ),
      // Settings.
      'currency' => array(
        'type' => 'varchar',
        'length' => 3,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The ePay currency code used.',
      ),
      'instantcapture' => array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => 'Whether or not the transaction is instant capture.',
      ),
      'epay_group' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The ePay payment group.',
      ),
      'addfee' => array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => 'Whether or not the payment fee should be added to the transaction.',
      ),
      'language' => array(
        'type' => 'int',
        'default' => 1,
        'description' => 'The language used on the screen.',
      ),
      'md5_password' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The md5 password used for the transaction.',
      ),
     // Data
      'amount' => array(
        'type' => 'int',
        'default' => 1,
        'description' => 'The amount to be paid in the transaction.',
      ),
      'order_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The order id',
      ),
      'order_text' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Order info short',
      ),
      'description_text' => array(
        'type' => 'text',
        'description' => 'Order info long. Serialized',
      ),
      // Aditional info.
      'payment_time' => array(
        'type' => 'int',
        'description' => 'Payment time stored as a UNIX timestamp',
        'not null' => FALSE,
      ),
      'transaction_type' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => 'standardwindow',
        'description' => 'The type of transaction used, fx standard window.',
      ),
      'customer_uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => 'User ID',
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => 'in progress',
        'description' => 'The status of the transaction',
      ),
      'api_module' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => 'API module name',
      ),
      'api_delta' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => 'API delta value',
      ),
      'hash' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => 'A unique hash used as identifier',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'indexes' => array(
      'payment_time' => array('payment_time'),
      'status' => array('status'),
      'order_id' => array('order_id'),
      'customer_uid' => array('customer_uid'),
    ),
    'unique keys' => array(
      'hash' => array('hash'),
    ),
    'primary key' => array('transaction_id'),
  );

  $schema['epay_implementations'] = array(
    'description' => t('Stores settings info on the different epay implementations'),
    'fields' => array(
      'implementation_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Implementation ID.'),
      ),
      'api_module' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API module name'),
      ),
      'api_delta' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API delta value'),
      ),
      'merchant' => array(
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The ePay merchant number.'),
      ),
      'mailreceipt' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The e-mail address used for ePay\'s auth email service..'),
      ),
      'smsreceipt' => array(
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The phone number used for ePay\'s auth sms service.'),
      ),
      'language' => array(
        'type' => 'int',
        'default' => 1,
        'description' => t('The language of the payment window.'),
      ),
      'currency' => array(
        'type' => 'varchar',
        'length' => 3,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The ePay currency code used.'),
      ),
      'instantcapture' => array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Whether or not the transaction is instant capture.'),
      ),
      'ownreceipt' => array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Site has its own receipt window.'),
      ),
      'windowstate' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Window state.'),
      ),
      'mobile' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 1,
        'description' => t('Mobile window.'),
      ),
      'windowid' => array(
        'type' => 'int',
        'default' => 1,
        'size' => 'tiny',
        'description' => t('Window ID.'),
      ),
      'paymentcollection' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Payment collection.'),
      ),
      'lockpaymentcollection' => array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Lock collection.'),
      ),
      'cssurl' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('URL for CSS.'),
      ),
      'mobilecssurl' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('URL for Mobile CSS.'),
      ),
      'iframeheight' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Iframe height.'),
      ),
      'iframewidth' =>  array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Iframe Width.'),
      ),
      'opacity' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Opacity.'),
      ),
      'backgroundcolor' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Background Color.'),
      ),
      'googletracker' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Google tracker ID.'),
      ),
      'splitpayment' => array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Split payment.'),
      ),
      'epay_group' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The ePay payment group.'),
      ),
      'language' => array(
        'type' => 'int',
        'default' => 1,
        'description' => t('The language used on the screen.'),
      ),
      'md5_password' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The md5 password used for the transaction.'),
      ),
    ),
    'primary key' => array('implementation_id'),
    'unique keys' => array(
      'api_id' => array('api_module', 'api_delta'),
    ),
  );

  $schema['epay_transaction_logs'] = array(
    'description' => t('Logs of events happening during payment processing.'),
    'fields' => array(
      'log_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Log ID.'),
      ),
      'transaction_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('The {epay_transactions}.transaction_id of the transaction.'),
      ),
      'log_message' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The message on the log'),
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The status that the transaction was set to.'),
      ),
      'time' => array(
        'type' => 'int',
        'description' => t('Log time stored as a UNIX timestamp'),
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('log_id'),
    'indexes' => array(
      'status' => array('status'),
    ),
    'indexes' => array(
      'transaction_id' => array('transaction_id'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_N().
 *
 * Renames ordre_text to order_text.
 */
function epay_update_7001() {
  if (db_field_exists('epay_transactions', 'ordre_text')) {
    db_change_field('epay_transactions', 'ordre_text', 'order_text', array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Order info short',
      )
    );
  }
}

/**
 * Implements hook_update_N().
 *
 * Renames fields to match the new payment window.
 */
function epay_update_7002() {
  if (db_field_exists('epay_implementations', 'authsms')) {
    db_change_field('epay_implementations', 'authsms', 'smsreceipt', array(
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The phone number used for ePay\'s auth sms service.'),
      )
    );
  }
  if (db_field_exists('epay_implementations', 'authmail')) {
    db_change_field('epay_implementations', 'authmail', 'mailreceipt', array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The e-mail address used for ePay\'s auth email service..'),
      )
    );
  }
  if (db_field_exists('epay_implementations', 'use3d')) {
    db_drop_field('epay_implementations', 'use3d');
  }
  if (db_field_exists('epay_transactions', 'md5_mode')) {
    db_drop_field('epay_transactions', 'md5_mode');
  }
  if (db_field_exists('epay_implementations', 'md5_mode')) {
    db_drop_field('epay_implementations', 'md5_mode');
  }
  if (db_field_exists('epay_implementations', 'subscription')) {
    db_drop_field('epay_implementations', 'subscription');
  }

  // Removing addfee from config but preserving it in transaction table for
  // logging historical transactions.
  if (db_field_exists('epay_implementations', 'addfee')) {
    db_drop_field('epay_implementations', 'addfee');
  }
  if (!db_field_exists('epay_implementations', 'ownreceipt')) {
    db_add_field('epay_implementations', 'ownreceipt', array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Whether or not the transaction is instant capture.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'windowstate')) {
    db_add_field('epay_implementations', 'windowstate', array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 1,
        'description' => t('Window state.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'mobile')) {
    db_add_field('epay_implementations', 'mobile', array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 1,
        'description' => t('Mobile window.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'windowid')) {
    db_add_field('epay_implementations', 'windowid', array(
        'type' => 'int',
        'default' => 1,
        'size' => 'tiny',
        'description' => t('Window ID.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'paymentcollection')) {
    db_add_field('epay_implementations', 'paymentcollection', array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Payment collection.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'splitpayment')) {
    db_add_field('epay_implementations', 'splitpayment', array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Split payment.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'lockpaymentcollection')) {
    db_add_field('epay_implementations', 'lockpaymentcollection', array(
        'type' => 'int',
        'length' => 1,
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Lock collection.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'cssurl')) {
    db_add_field('epay_implementations', 'cssurl', array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('URL for CSS.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'mobilecssurl')) {
    db_add_field('epay_implementations', 'mobilecssurl', array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('URL for Mobile CSS.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'googletracker')) {
    db_add_field('epay_implementations', 'googletracker', array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Google tracker ID.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'backgroundcolor')) {
    db_add_field('epay_implementations', 'backgroundcolor', array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Background Color.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'opacity')) {
    db_add_field('epay_implementations', 'opacity', array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Opacity.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'iframeheight')) {
    db_add_field('epay_implementations', 'iframeheight', array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Iframe height.'),
      )
    );
  }
  if (!db_field_exists('epay_implementations', 'iframewidth')) {
    db_add_field('epay_implementations', 'iframewidth', array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Iframe Width.'),
      )
    );
  }
}

/**
 * Implements hook_update_N().
 *
 * Add column for storing the external transaction id on transactions.
 */
function epay_update_7003() {
  db_add_field('epay_transactions', 'txnid', array(
    'type' => 'varchar',
    'length' => 31,
    'default' => NULL,
    'description' => 'External transaction ID.',
    )
  );
}
