<?php
/**
 * @file
 * Padlock Module.
 */

/**
 * Implements hook_help().
 */
function padlock_help($path, $arg) {
  switch ($path) {
    case 'admin/help#padlock':
      $path = dirname(__FILE__) . '/README.md';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      else {
        $path = dirname(__FILE__) . '/README.txt';
        if (file_exists($path)) {
          $readme = file_get_contents($path);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = filter_xss_admin($function($readme, NULL));
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function padlock_permission() {
  return array(
    'administer padlock settings' => array(
      'title' => t('Administer Padlock Settings'),
      'description' => t('Perform administration tasks for the padlock project.'),
    ),
    'bypass padlock' => array(
      'title' => t('Bypass Padlock'),
      'description' => t('Bypass padlock security measures.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function padlock_menu() {
  $items['admin/config/system/padlock'] = array(
    'title' => 'Padlock Settings',
    'description' => 'Collection of editable settings for the padlock project.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('padlock_admin'),
    'access arguments' => array('administer padlock settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Build settings form.
 */
function padlock_admin() {
  $form = array();
  $form['padlock'] = array(
    '#type' => 'fieldset',
    '#title' => t('Padlock Settings'),
    '#weight' => 5,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['padlock']['padlock_radio'] = array(
    '#type' => 'radios',
    '#title' => t('Lock or Unlock Forms'),
    '#default_value' => variable_get('padlock_radio', '1'),
    '#options' => array(0 => t('Lock'), 1 => t('Unlock')),
    '#description' => t("Set if the following exceptions are to include or exlcude from padlock."),
  );
  $form['padlock']['padlock_exceptions'] = array(
    '#type' => 'textarea',
    '#title' => t('Padlock Exceptions'),
    '#default_value' => variable_get('padlock_exceptions', ''),
    '#description' => t("Adds form ids exceptions here, one per line. Ex: article_node_form"),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 */
function padlock_form_alter(&$form, &$form_state, $form_id) {

  $exceptions_list = variable_get('padlock_exceptions', '');
  $exceptions = preg_split('/\r\n|\r|\n/', $exceptions_list);

  $exceptions_radio = variable_get('padlock_radio', '1');
  $lock = 0;
  if ($exceptions_radio == 1 && !in_array($form_id, $exceptions)) {
    $lock = 1;
  }
  elseif ($exceptions_radio == 0 && in_array($form_id, $exceptions)) {
    $lock = 1;
  }

  if ($lock == 1 && $form_id != 'padlock_admin' && !user_access('bypass padlock')) {
    $link = l(t('exceptions'), 'admin/config/development/padlock', array('attributes' => array('target' => '_blank')));
    if (user_access('administer padlock settings')) {
      drupal_set_message("This form is protected by the padlock module. You will not be able to submit this form unless you add '$form_id' to the $link list.", 'warning');
    }
    else {
      drupal_set_message("This form is protected by the padlock module. You will not be able to submit this form unless you add '$form_id' to the exceptions list by an padlock administrator.", 'warning');
    }
    $form['#validate'][] = 'padlock_form_validate';
  }
}

/**
 * Validation error function.
 */
function padlock_form_validate(&$form, &$form_state) {
  $link = l(t('exceptions'), 'admin/config/development/padlock', array('attributes' => array('target' => '_blank')));
  form_set_error("", t("This form is protected by the padlock module, please add '") . $form_state['values']['form_id'] . t("' to the") . " " . $link . " " . t("list in order to submit this form."));
}
