<?php

/**
 * Implements hook_block_info().
 */
function d500px_blocks_block_info() {
  $blocks = array();
  
  $max = variable_get('d500px_blocks_number_blocks', 1);
  
  for ($count = 0; $count < $max; $count++) {
    $delta = '500px_'. $count; 
    
    // block 0 is confusing
    $title_count = $count + 1;
    
    $previous_settings = variable_get($delta, array());

    $title = t('500px: unconfigured block: ') . ' ' . $title_count;
   
    // TODO: better titles??
    if (!empty($previous_settings['feature'])) {
      
      // add title and feature
      $title = t('500px: ') . $previous_settings['feature']; 
      
      // user feature? add username
      if ($previous_settings['feature'] == 'user') {
        $title .= ':'. $previous_settings['username'];
      }

      // selected album? add album name
      if ($previous_settings['only'] != '- All -') {
        $title .= ' - '. $previous_settings['only'];
      }
      
      // finally add number of items
      $title .= ' ('. $previous_settings['rpp'] .')'; 
    }
    
    $blocks[$delta] = array(
      'info'  => $title,
      'cache' => DRUPAL_NO_CACHE,
    );
  }  

  return $blocks;
}



/**
 * Implements hook_block_configure().
 */
function d500px_blocks_block_configure($delta = '') {
  $form = array();
  // load up the custom form values for this block
  $previous_settings = variable_get($delta, array());
  
  // get the common form
  $form += d500px_blocks_block_commonform($previous_settings);
  
  return $form;
}



/**
 * Implements hook_block_save().
 */
function d500px_blocks_block_save($delta = '', $edit = array()) {
  // store all custom form values
  variable_set($delta, $edit);
  
  // also claer any cache
  cache_clear_all($delta, 'cache_block');
  
  return;
}



/**
 * Implements hook_block_view().
 */
function d500px_blocks_block_view($delta = '') {
  // load up the custom form values for this block
  $previous_settings = variable_get($delta, array());
  
  // nothing to cache
  if ($previous_settings['d500px_blocks_cache_lifetime'] == 0) {
    $block['content'] = d500px_blocks_block_contents($delta);  
  }
  else { // implement some caching if block option is set to cache
    // try cache
    if ($cache = cache_get($delta, 'cache_block')) {
      $block['content'] = $cache->data;
    }
    else {
      // fetch from fresh
      $block['content'] = d500px_blocks_block_contents($delta);

      // set cache
      cache_set($delta, $block['content'], 'cache_block', $previous_settings['d500px_blocks_cache_lifetime']);
    }    
  }
  
  return $block;
}



/**
 * lets generate block contents.
 */
function d500px_blocks_block_contents($delta) {

  $output = array();

  $connection = d500px_connection();
  $block_settings = variable_get($delta, array());
  
  // there is nothing to display if there is no feature 
  if (!isset($block_settings['feature'])) {
    return $output['#markup'] = t('Block not yet configured');
  }
  
  $params = array(
    'feature'       => $block_settings['feature'], 
    'rpp'           => $block_settings['rpp'],
    'image_size[]'  => range(1, 4), // better to get all sizes and deal with requested size at theme level
    'sort'          => $block_settings['sort'],
  );
  
  // add category if its not all
  if ($block_settings['only'] != '- All -') {
    $params += array('only' => $block_settings['only']);
  }

  // add username
  if (!empty($block_settings['username'])) {
    $params += array('username' => $block_settings['username']);
  }
  
  // get some pics
  $content = $connection->call('photos', $params);
  
  // check if there are any photos firstly
  if (empty($content['photos'])) {
    return $output['#markup'] = t('No pictures were found');
  }
  
  // so we have some content, display that  
  $output['#markup'] = theme('d500px_blocks_photos', array('photos_array' => $content['photos'], 'size' => $block_settings['image_size'], 'nsfw' => $block_settings['nsfw']));
  
  return $output;
}



/**
 * basic form required for all 500px blocks.
 */
function d500px_blocks_block_commonform($previous_settings) {
  $form = array();
  
  $nsfw = D500PX_NSFW;
  if (isset($previous_settings['nsfw'])) { $nsfw = $previous_settings['nsfw']; }
  
  $rpp = 5;
  if (isset($previous_settings['rpp'])) { $rpp = $previous_settings['rpp']; }  
  
  $image_size = 1;
  if (isset($previous_settings['image_size'])) { $image_size = $previous_settings['image_size']; }
  
  $feature = 'fresh_today';
  if (isset($previous_settings['feature'])) { $feature = $previous_settings['feature']; }      

  $username = '';
  if (isset($previous_settings['username'])) { $username = $previous_settings['username']; }      

  $only = '- All -';
  if (isset($previous_settings['only'])) { $only = $previous_settings['only']; }  

  $d500px_blocks_cache_lifetime = 0;
  if (isset($previous_settings['d500px_blocks_cache_lifetime'])) { $d500px_blocks_cache_lifetime = $previous_settings['d500px_blocks_cache_lifetime']; }  

  $sort = 'created_at';
  if (isset($previous_settings['sort'])) { $sort = $previous_settings['sort']; }  

  $form['d500px_blocks_block_common'] = array(
    '#type'               => 'fieldset', 
    '#title'              => t('500px Block Settings'), 
    '#collapsible'        => FALSE, 
    '#collapsed'          => FALSE,
  );

  $form['d500px_blocks_block_common']['feature'] = array(
    '#type'               => 'select', 
    '#title'              => t('Photo stream to be retrieved?'),
    '#options'            => d500px_available_features(),
    '#default_value'      => $feature,
    '#description'        => t('Photo stream to be retrieved. Default fresh_today.'),
    //'#required'           => TRUE,
  );
    
  $form['d500px_blocks_block_common']['rpp'] = array(
    '#type'               => 'select', 
    '#title'              => t('Number of photos to display?'),
    '#options'            => array_combine(range(5,100,5),range(5,100,5)),
    '#default_value'      => $rpp,
    '#description'        => t('The number of results to return. Can not be over 100, default is 20.'),
    //'#required'           => TRUE,
  );

  $form['d500px_blocks_block_common']['image_size'] = array(
    '#type'               => 'select', 
    '#title'              => t('Thumbnail size:'),
    '#options'            => array(0 => '70px', 1 => '140px', 2 => '280px'),
    '#default_value'      => $image_size,
    '#description'        => t('The photo size to be returned.'),
    //'#required'           => TRUE,
  );
  
  $form['d500px_blocks_block_common']['nsfw'] = array(
    '#type'               => 'checkbox', 
    '#title'              => t('Display NSFW photos?'),
    '#default_value'      => $nsfw,
    '#description'        => t('Some photos on 500px are "Not Safe For Work" (or children), use with care. By default all NSFW images will be blacked out.'),
  );  

  $form['d500px_blocks_block_common']['username'] = array(
    '#type'               => 'textfield', 
    '#title'              => t('Username'), 
    '#default_value'      => $username, 
    //'#required'           => FALSE,
    '#description'        => t('All per-user streams require a user_id or username parameter.'),
    '#element_validate'   => array('d500px_blocks_block_commonform_username_validate'),
  );

  $form['d500px_blocks_block_common']['only'] = array(
    '#type'               => 'select', 
    '#title'              => t('Photo Category'),
    '#options'            => d500px_available_categories(),
    '#default_value'      => $only,
    '#description'        => t('If you want results from a specific category'),
    //'#required'           => TRUE,
  );

  $form['d500px_blocks_block_common']['sort'] = array(
    '#type'               => 'select', 
    '#title'              => t('Sort photos in the specified order'),
    '#options'            => d500px_available_sort_options(),
    '#default_value'      => $sort,
    '#description'        => t('Sort photos in the specified order'),
    //'#required'           => TRUE,
  );


  $form['d500px_blocks_block_caching'] = array(
    '#type'               => 'fieldset',
    '#title'              => t('500px Block Caching'),
  );

  $period = drupal_map_assoc(array(0, 60, 180, 300, 600, 900, 1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400), 'format_interval');
  $period[0] = '<' . t('none') . '>';

  $form['d500px_blocks_block_caching']['d500px_blocks_cache_lifetime'] = array(
    '#type'               => 'select',
    '#title'              => t('500px data cache lifetime'),
    '#default_value'      => $d500px_blocks_cache_lifetime,
    '#options'            => $period,
    '#description'        => t('Drupal will cache 500px data for this much time (unless cache is cleared prior to this).')
  );
  
  return $form;
}



function d500px_blocks_block_commonform_username_validate($element, &$form_state, $form) {
  if (($form_state['values']['feature'] == 'user') and (empty($element['#value']))) {
    form_error($element, t("Additional parameter 'username' is required"));
  }
}




/**
 * implimentation of hook_form_FORM_ID_alter()
 */
function d500px_blocks_form_d500px_admin_form_alter(&$form, &$form_state, $form_id) {

  $form['d500px_blocks'] = array(
    '#type'             => 'fieldset', 
    '#title'            => t('500px Block Config'), 
    '#collapsible'      => FALSE, 
    '#collapsed'        => FALSE,
  );

  $form['d500px_blocks']['d500px_blocks_number_blocks'] = array(
    '#type'             => 'select', 
    '#title'            => t('Number of blocks required?'),
    '#options'          => array_combine(range(1,20),range(1,20)),
    '#default_value'    => variable_get('d500px_blocks_number_blocks', 1),
    '#description'      => t('The number of blocks can be increased or decreased at any time. Default is 1 block.'),
    //'#required'         => TRUE,
  );  
  
}




/**
 * Implements hook_theme().
 */
function d500px_blocks_theme() {
  return array(
    'd500px_blocks_photo' => array(
      'variables' => array(),
    ),
    'd500px_blocks_photos' => array(
      'variables' => array(),
    ),
  );
}



function theme_d500px_blocks_photo($variables) { 
  $linked_image = theme('d500px_photo', $variables);
  
  $output = "<div class='d500px-photo'>";
  $output .= $linked_image;
  $output .= "</div>"; 
  
  return $output;   
}



function theme_d500px_blocks_photos($variables) {
  $photos_themed = theme('d500px_photos', $variables);
  
  $output = "<div class='d500px-photos'>";
  $output .= $photos_themed;
  $output .= '</div>';
  
  return $output;
}
