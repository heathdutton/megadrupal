<?php
/**
 * @file
 * Main module file for the Felix module.
 *
 * Provides editors with an easy to use block interface, preventing the need to
 * use the standard Drupal block interface or Context.
 */
// Permission system.
define('FELIX_ALLOW', 1);
define('FELIX_DENY', 2);

/**
 * Implements hook_permission().
 */
function felix_permission() {
  return array(
    'manage felix blocks' => array(
      'title' => t('Manage Felix blocks'),
      'description' => t('Add and remove blocks from Felix regions.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function felix_menu() {
  $menu = array();

  $menu['felix-blocks/add'] = array(
    'title' => 'Add block',
    'page callback' => 'felix_add_block_page',
    'access callback' => 'felix_block_access',
    'access arguments' => array('add'),
    'file' => 'felix.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['felix-blocks/move-up'] = array(
    'title' => 'Move up',
    'page callback' => 'felix_block_action',
    'page arguments' => array('move-up'),
    'access callback' => 'felix_block_access',
    'access arguments' => array('move'),
    'file' => 'felix.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['felix-blocks/move-down'] = array(
    'title' => 'Move down',
    'page callback' => 'felix_block_action',
    'page arguments' => array('move-down'),
    'access callback' => 'felix_block_access',
    'access arguments' => array('move'),
    'file' => 'felix.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['felix-blocks/attributes'] = array(
    'title' => 'Edit attributes',
    'page callback' => 'felix_block_action',
    'page arguments' => array('attributes'),
    'access callback' => 'felix_block_access',
    'access arguments' => array('edit'),
    'file' => 'felix.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['felix-blocks/hide'] = array(
    'title' => 'Hide block on this page',
    'page callback' => 'felix_block_action',
    'page arguments' => array('hide'),
    'access callback' => 'felix_block_access',
    'access arguments' => array('delete'),
    'file' => 'felix.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['felix-blocks/show'] = array(
    'title' => 'Hide block on this page',
    'page callback' => 'felix_block_action',
    'page arguments' => array('show'),
    'access callback' => 'felix_block_access',
    'access arguments' => array('delete'),
    'file' => 'felix.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['felix-blocks/remove'] = array(
    'title' => 'Remove block',
    'page callback' => 'felix_block_action',
    'page arguments' => array('remove'),
    'access callback' => 'felix_block_access',
    'access arguments' => array('delete'),
    'file' => 'felix.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['felix-blocks/autocomplete-node/%'] = array(
    'page callback' => 'felix_autocomplete_node',
    'page arguments' => array(2),
    'access arguments' => array('manage felix blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'felix.pages.inc',
  );

  $menu['felix/autocomplete/%'] = array(
    'page callback' => '_felix_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'felix.pages.inc',
  );

  return $menu;
}

/**
 * Implements hook_admin_paths().
 */
function felix_admin_paths() {
  $paths = array(
    'felix-blocks/add' => TRUE,
    'felix-blocks/move-up' => TRUE,
    'felix-blocks/move-down' => TRUE,
    'felix-blocks/attributes' => TRUE,
    'felix-blocks/remove' => TRUE,
  );
  return $paths;
}

/**
 * Access callback for add block page.
 */
function felix_block_access($op = 'add', $region = NULL, $block = NULL) {
  global $user;
  if (!user_access('manage felix blocks')) {
    return FALSE;
  }
  if ($user->uid == 1) {
    return TRUE;
  }
  if (empty($region) && !empty($_GET['region'])) {
    $region = $_GET['region'];
  }
  if (empty($block) && !empty($_GET['region']) && !empty($_GET['module']) && !empty($_GET['delta']) && !empty($_GET['hash'])) {
    $block = db_select('felix_block', 'cb')
          ->fields('cb', array('fbid', 'region', 'weight', 'hash', 'module', 'delta', 'data'))
          ->condition('cb.region', $_GET['region'])
          ->condition('cb.module', $_GET['module'])
          ->condition('cb.delta', $_GET['delta'])
          ->condition('cb.hash', $_GET['hash'])
          ->execute()
          ->fetchObject();
  }
  $allow = TRUE;
  foreach (module_implements('felix_access') as $module) {
    switch (module_invoke($module, 'felix_access', $op, $block)) {
      case FELIX_ALLOW:
        // Do nothing.
        break;
      case FELIX_DENY:
        return FALSE;
    }
  }
  return $allow;
}

/**
 * Implements hook_ctools_plugin_post_alter().
 *
 * Replace the context_reaction_block class by our own implementation.
 */
function felix_ctools_plugin_post_alter(&$plugin, &$info) {
  if ($plugin['name'] == 'context_reaction_block') {
    $plugin['handler']['path'] = drupal_get_path('module', 'felix');
    $plugin['handler']['file'] = 'felix_reaction_block.inc';
    $plugin['handler']['class'] = 'felix_reaction_block';
  }
}

/**
 * Implements hook_node_delete().
 */
function felix_node_delete($node) {
  db_delete('felix_block')
    ->condition('module', 'node')
    ->condition('delta', $node->nid)
    ->execute();
}

/**
 * Implements hook_init().
 *
 * Ensure that the context_reaction_block class is always available.
 */
function felix_init() {
  module_load_include('inc', 'context', 'plugins/context_reaction_block');
}

/**
 * Get all regions.
 */
function _felix_get_regions() {
  static $regions = NULL;
  if (!is_null($regions)) {
    return $regions;
  }
  $res = db_select('felix_region', 'cr')
          ->fields('cr', array('name', 'title', 'region', 'weight', 'context', 'block_set', 'data'))
          ->execute();
  $regions = array();
  while ($region = $res->fetchObject()) {
    $region->data = unserialize($region->data);
    $regions[] = $region;
  }
  return $regions;
}

/**
 * Get regions for current context and theme region.
 */
function _felix_regions_by_context($theme_region) {
  $output = array();
  $regions = _felix_get_regions();
  $contexts = context_active_contexts();
  $contexts = array_keys($contexts);
  foreach ($regions as $region) {
    if ($region->region == $theme_region && in_array($region->context, $contexts)) {
      $output[] = $region;
    }
  }
  return $output;
}

/**
 * Get region by name.
 */
function _felix_region_by_name($name) {
  $output = array();
  $regions = _felix_get_regions();
  foreach ($regions as $region) {
    if ($region->name == $name) {
      return $region;
    }
  }
  return FALSE;
}

/**
 * Get the weight for new blocks in this region.
 */
function _felix_new_block_weight($region_name) {
  $q = db_select('felix_block', 'cb')->condition('cb.region', $region_name);
  $q->addExpression('MAX(weight) + 1', 'weight');
  return (int) $q->execute()->fetchField();
}

/**
 * Get the blocks for the given region.
 */
function _felix_get_blocks_by_region($region, $path = NULL) {
  $output = array();

  felix_get_rendered_region($region->name);

  $path = is_null($path) ? $_GET['q'] : $path;
  $hash = _felix_get_hash($region, $path);

  try {
    $blocks = db_select('felix_block', 'cb')
            ->fields('cb')
            ->condition('cb.region', $region->name)
            ->condition('cb.hash', $hash->hash)
            ->orderBy('cb.weight')
            ->execute();
    while ($block = $blocks->fetchObject()) {
      $block->data = unserialize($block->data);
      $block->hash_parts = unserialize($block->hash_parts);
      $block->exclude = unserialize($block->exclude);
      if ($block = _felix_render_block($block)) {
        $output[] = $block;
      }
    }
  }
  catch (Exception $e) {
    // The domain module seems to break this query in some cases. A join to
    // the node access table is added which results in an exception.
  }

  return $output;
}

/**
 * Render the block.
 *
 * @param object $block
 * @return array
 */
function _felix_render_block($block) {
  global $language;

  $hidden = in_array($_GET['q'], $block->exclude);
  if ($hidden && !felix_block_access('delete', $block->region, $block)) {
    // Skip block rendering if block is hidden and we do not have the permission to hide / show it.
    return NULL;
  }

  $block->status = 1;
  $block->subject = '';

  foreach (module_implements('felix_block_view') as $module) {
    $hook = "{$module}_felix_block_view";
    $hook($block);
  }

  if (!$block->status) {
    return NULL;
  }

  // Modules are able to takeover block rendering by using $block->render_module.
  // See the felix_views module for an example.
  $module = isset($block->render_module) ? $block->render_module : $block->module;

  if ($module == 'node') {
    $nid = (int) $block->delta;
    if (module_exists('translation')) {
      // Node id is the source translation.
      // Only show nodes in current language or with undefined language.
      $sql = 'SELECT COALESCE(l.nid, n.nid)
      FROM node n
      LEFT JOIN node l ON n.nid = l.tnid
      WHERE n.nid = :nid
      AND (l.language = :language OR n.language IN(:undefined, :language))';
      $nid = db_query($sql, array(
        ':nid' => $nid,
        ':language' => $language->language,
        ':undefined' => LANGUAGE_NONE,
      ))->fetchField();
    }
    if (!$nid || !($node = node_load($nid))) {
      return NULL;
    }
    if (!node_access('view', $node)) {
      return NULL;
    }
    $viewmode = isset($block->data['viewmode']) ? $block->data['viewmode'] : 'felix';
    $node_without_title = clone $node;
    $node_without_title->title = '';
    $content = node_view($node_without_title, $viewmode);
    $block->subject = empty($block->subject) ? check_plain($node->title) : $block->subject;
    $block->content = array(
      '#markup' => theme(array(
        'felix_node__' . $node->type,
        'felix_node',
      ),
      array(
        'node' => $node,
        'content' => $content,
        'full_content' => node_view($node_without_title, 'full'),
        'view_mode' => $viewmode,
      )),
    );
  }
  else {
    $config = isset($block->data['config']) ? $block->data['config'] : array();
    $info = module_invoke($module, 'block_view', $block->delta, $config);
    $info = is_array($info) ? $info : array();
    if (empty($info['content'])) {
      if (felix_block_access('edit', $block->region, $block)) {
        $info['content'] = t('(empty block)');
      }
      else {
        // Do not show empty block if user has no permission to edit or remove it.
        return NULL;
      }
    }
    if (empty($info['subject'])) {
      $info['subject'] = '';
    }
    $block->subject = empty($block->subject) ? $info['subject'] : $block->subject;
    if (is_array($info['content'])) {
      $block->content = $info['content'];
    }
    else {
      $block->content = array('#markup' => $info['content']);
    }
  }
  if ($block->subject == '<none>') {
    $block->subject = '';
  }
  if ($hidden) {
    $block->content = array(
      '#type' => 'markup',
      '#markup' => t('(block is hidden)'),
    );
  }
  return $block;
}

/**
 * Implements hook_felix_block_view().
 */
function felix_felix_block_view(&$block) {
  if (!empty($block->data['subject'])) {
    $subject = $block->data['subject'] == '<none>' ? '<none>' : check_plain($block->data['subject']);
    $block->subject = $subject;
  }
}

/**
 * Render block controls for a given block.
 *
 * @param object $region
 * @param object $block
 * @param string $hash
 */
function _felix_block_contextual_links($region, $block, $item, $total_items) {
  $links = array();

  if ($item > 1) {
    $links['move-up'] = array(
      'title' => t('Move up'),
      'href' => 'felix-blocks/move-up',
      'localized_options' => array(
        'query' => array(
          'fbid' => $block->fbid,
          'region' => $region->name,
          'path' => $_GET['q'],
          'module' => $block->module,
          'delta' => $block->delta,
          'hash' => $block->hash,
          'token' => drupal_get_token($block->fbid . $region->name . $block->module . $block->delta . $block->hash),
        ),
      ),
    );
  }

  if ($item < $total_items) {
    $links['move-down'] = array(
      'title' => t('Move down'),
      'href' => 'felix-blocks/move-down',
      'localized_options' => array(
        'query' => array(
          'fbid' => $block->fbid,
          'region' => $region->name,
          'path' => $_GET['q'],
          'module' => $block->module,
          'delta' => $block->delta,
          'hash' => $block->hash,
          'token' => drupal_get_token($block->fbid . $region->name . $block->module . $block->delta . $block->hash),
        ),
      ),
    );
  }

  $links['edit-attributes'] = array(
    'title' => t('Edit attributes'),
    'href' => 'felix-blocks/attributes',
    'localized_options' => array(
    'query' => array(
        'fbid' => $block->fbid,
        'region' => $region->name,
        'path' => $_GET['q'],
        'module' => $block->module,
        'delta' => $block->delta,
        'hash' => $block->hash,
        'token' => drupal_get_token($block->fbid . $region->name . $block->module . $block->delta . $block->hash),
      ),
    ),
  );

  if ($block->module == 'node') {
    $links['edit-node'] = array(
      'title' => t('Edit node'),
      'href' => 'node/' . $block->delta . '/edit',
      'localized_options' => array(
        'query' => array(
          'destination' => $_GET['q'],
        ),
      ),
    );
  }

  if (!in_array('path', $region->data['hash'])) {
    $action = in_array($_GET['q'], $block->exclude) ? 'show' : 'hide';
    $links[$action] = array(
      'title' => $action == 'hide' ? t('Hide on this page') : t('Show on this page'),
      'href' => "felix-blocks/$action",
      'localized_options' => array(
        'query' => array(
          'fbid' => $block->fbid,
          'region' => $region->name,
          'path' => $_GET['q'],
          'module' => $block->module,
          'delta' => $block->delta,
          'hash' => $block->hash,
          'token' => drupal_get_token($block->fbid . $region->name . $block->module . $block->delta . $block->hash),
        ),
      ),
    );
  }

  $links['remove'] = array(
    'title' => t('Remove'),
    'href' => 'felix-blocks/remove',
    'localized_options' => array(
      'query' => array(
        'fbid' => $block->fbid,
        'region' => $region->name,
        'path' => $_GET['q'],
        'module' => $block->module,
        'delta' => $block->delta,
        'hash' => $block->hash,
        'token' => drupal_get_token($block->fbid . $region->name . $block->module . $block->delta . $block->hash),
      ),
    ),
  );

  return $links;
}

/**
 * Get the hash for the specified region and path.
 *
 * @param object $region
 * @param string $path
 * @return string
 */
function _felix_get_hash($region, $path) {
  $output = new stdClass();

  // Make sure we use the internal path.
  if ($source = drupal_lookup_path('source', $path)) {
    $path = $source;
  }

  $parts = array();
  foreach (module_implements('felix_hash', TRUE) as $module) {
    $hook = "{$module}_felix_hash";
    $config = isset($region->data['hash_config']) ? $region->data['hash_config'] : array();
    $values = $hook($region->data['hash'], $path, $config);
    foreach ($values as $name => $value) {
      $parts[$name] = $value;
    }
  }
  ksort($parts);
  $output->hash = md5(serialize($parts));
  $output->parts = $parts;

  return $output;
}

/**
 * Implements hook_felix_hash().
 */
function felix_felix_hash($parts, $path) {
  $output = array();

  if (in_array('path', $parts)) {
    $output['path'] = $path;
  }
  if (in_array('nodetype', $parts)) {
    if (preg_match('/^node\\/([0-9]+)/si', $path, $match)) {
      $nid = $match[1];
      if ($node = node_load($nid)) {
        $output['nodetype'] = $node->type;
      }
    }
  }

  return $output;
}

/**
 * Implements hook_felix_hash_options().
 */
function felix_felix_hash_options() {
  return array(
    'path' => t('Path'),
    'nodetype' => t('Nodetype'),
  );
}

/**
 * Implements hook_theme().
 */
function felix_theme($existing, $type, $theme, $path) {
  return array(
    'felix_node' => array(
      'variables' => array(
        'node' => NULL,
        'content' => NULL,
        'view_mode' => NULL,
        'full_content' => NULL,
      ),
      'template' => 'felix-node',
      'pattern' => 'felix-node__',
      'path' => "$path/templates",
    ),
  );
}

/**
 * Callback for usort() to sort blocks.
 */
function felix_sort_blocks($a, $b) {
  if ($a->weight == $b->weight) {
    if (isset($a->weight_felix) && isset($b->weight_felix)) {
      if ($a->weight_felix == $b->weight_felix) {
        return 0;
      }
      return ($a->weight_felix < $b->weight_felix) ? -1 : 1;
    }
    return 0;
  }
  return ($a->weight < $b->weight) ? -1 : 1;
}

/**
 * Implements hook_felix_block_config().
 */
function felix_felix_block_config($block) {
  return module_invoke($block->module, 'block_configure', $block->delta);
}

/**
 * Implements hook_felix_block_config_save().
 */
function felix_felix_block_config_save($block, $values) {
  return module_invoke($block->module, 'block_save', $block->delta, $values);
}

/**
 * Implements hook_features_api().
 */
function felix_features_api() {
  return array(
    'felix_block_set' => array(
      'name' => 'Felix block set',
      'default_hook' => 'felix_default_block_sets',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'felix') . '/felix.features.inc',
    ),
    'felix_region' => array(
      'name' => 'Felix region',
      'default_hook' => 'felix_default_regions',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'felix') . '/felix.features.inc',
    ),
  );
}

/**
 * Implements hook_menu_contextual_links_alter().
 *
 */
function felix_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  $arguments = $router_item['page_arguments'];
  if ($root_path == 'felix-blocks/add') { // Catch the add link, this will be contextual links to a region
    $links[] = array(   // This is needed because the router_item is not recognized as a task for the root_path
      'title' => t('Add block'),
      'href' => $root_path,
      'localized_options' => array(
        'query' => array(
          'region' => $arguments[0],
          'path' => $_GET['q'],
        ),
      ),
    );
  }
  // Move up is used as placeholder for everything else. Maybe this should be sorted out with a better URL structure, to prevent us from needing hacks like this.
  elseif ($root_path == 'felix-blocks/move-up') {
    list($dummy, $fbid, $region_name, $module, $delta, $item_number, $count) = $arguments;

    $static_info = &drupal_static('felix_' . $region_name . $module . $delta . $fbid);

    if (!is_array($static_info) || !isset($static_info['block']) || !isset($static_info['region'])) {
      watchdog(
        'felix',
        'Static info for block %delta from module %module in region %region was not available.',
        array(
          '%delta' => $delta,
          '%module' => $module,
          '%region' => $region_name
        ),
        WATCHDOG_ERROR
      );
      drupal_set_message(t(
        'Static info for block %delta from module %module in region %region was not available.',
        array(
          '%delta' => $delta,
          '%module' => $module,
          '%region' => $region_name
        )),
        'error'
      );
    }
    else {
      $region = $static_info['region'];
      $block  = $static_info['block'];

      $links = array_merge($links, _felix_block_contextual_links($region, $block, $item_number, $count));
    }
  }
}

function felix_get_rendered_region($set = FALSE) {
  static $value = NULL;
  if ($set) {
    $value = $set;
  }
  return $value;
}

/**
* Implements hook_entity_info_alter().
*/
function felix_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['felix'] = array(
    'label' => t('Felix'),
    'custom settings' => TRUE,
  );
}
