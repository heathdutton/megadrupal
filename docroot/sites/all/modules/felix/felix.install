<?php
/**
 * @file
 * Install and update functions for the Felix module.
 */

/**
 * Implements hook_schema().
 */
function felix_schema() {
  $schema = array();

  $schema['felix_region'] = array(
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'region' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'size' => 'small',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'context' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'block_set' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['felix_block'] = array(
    'fields' => array(
      'fbid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'region' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'size' => 'small',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'hash' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'delta' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
      'detail_path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'hash_parts' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
      'exclude' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('fbid'),
    'indexes' => array(
      'module_delta' => array(array('module', 16), array('delta', 16)),
      'detail_path' => array(array('detail_path', 16)),
    ),
  );

  $schema['felix_block_set'] = array(
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['felix_block_set_block'] = array(
    'fields' => array(
      'block_set' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'delta' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('block_set', 'module', 'delta'),
  );

  $schema['felix_block_set_nodetype'] = array(
    'fields' => array(
      'block_set' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'nodetype' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('block_set', 'nodetype'),
  );

  $schema['felix_block_set_viewmode'] = array(
    'fields' => array(
      'block_set' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'viewmode' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('block_set', 'viewmode'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function felix_requirements($phase) {
  switch ($phase) {
    case 'runtime':
      $msg = felix_integrity_check();

      if (!empty($msg)) {
        return array(
          'felix' => array(
            'title' => t('Felix integrity issues found'),
            'description' => $msg,
            'severity' => REQUIREMENT_WARNING,
          ),
        );
      }
      break;
  }
}

/**
 * Add felix_block_set_viewmode table.
 */
function felix_update_7100() {
  $table = drupal_get_schema_unprocessed('felix', 'felix_block_set_viewmode');
  db_create_table('felix_block_set_viewmode', $table);

  // Add the teaser viewmode to existing block sets.
  $sets = db_select('felix_block_set', 'bs')
    ->fields('bs', array('name'))
    ->execute()
    ->fetchCol();
  foreach ($sets as $set) {
    db_insert('felix_block_set_viewmode')->fields(array(
      'block_set' => $set,
      'viewmode' => 'felix',
    ))->execute();
  }

  felix_configure_view_mode();
}

/**
 * Rebuild blocks table to provide all blocks with a surrogate key.
 */
function felix_update_7101() {
  db_rename_table('felix_block', 'felix_block_old');
  $table = drupal_get_schema_unprocessed('felix', 'felix_block');

  // Remove the hash parts to prevent errors when updating 7100 to 7102.
  unset($table['fields']['hash_parts']);

  db_create_table('felix_block', $table);

  $selectquery = db_select('felix_block_old', 'fbo')
      ->fields('fbo', array('region', 'weight', 'hash', 'module', 'delta', 'data', 'detail_path'));
  db_insert('felix_block')->from($selectquery)->execute();
  db_drop_table('felix_block_old');
}

/**
 * Add felix_block.hash_parts field, determine parts of the hash value and
 * rehash blocks.
 */
function felix_update_7102() {
  // Create new column.
  // Do not use db_add_field since it leaves us with "Data truncated" errors
  // in the following queries.
  $sql = 'ALTER TABLE {felix_block} ADD COLUMN hash_parts TEXT AFTER detail_path';
  db_query($sql);

  // Build a list of used combinations for hash parts.
  $regions = db_select('felix_region', 'r')
    ->fields('r', array('name', 'data'))
    ->execute()
    ->fetchAll();
  foreach ($regions as $region) {
    $combination = array();
    $data = unserialize($region->data);
    foreach ($data['hash'] as $item) {
      $combination[] = $item;
    }
    sort($combination);
    $combinations[implode(',', $combination)] = $combination;
    $key = array_search('path', $combination);
    if ($key !== FALSE) {
      // We do two lookups for paths, one on node/% and one for the paths
      // in menu_router without a wildcard.
      $combination[$key] = 'menu';
      $combinations[implode(',', $combination)] = $combination;
    }
  }
  $combinations = array_values($combinations);

  // Build mapping table for each combination of differentiators.
  $queries = array();
  foreach ($combinations as $combination) {
    $parts = array();
    $tables = array();
    $items = array();
    $where = array();
    // Construction of old hashes:
    // "felix\t$path\n" or "felix\t$path\t$nodetype\n" or "felix\t$nodetype\n".
    // "felix_domain\t$domain_id\n", where $domain_id is empty for domain id 1.
    // Each enabled module will at least have its module name added to the hash.
    $parts[] = "'felix\t'";
    if (in_array('path', $combination) || in_array('nodetype', $combination) || in_array('menu', $combination)) {
      if (in_array('path', $combination)) {
        $tables['node'] = 'n';
        $parts[] = "'\tnode/'";
        $parts[] = "n.nid";
        $items['path'] = "CONCAT('node/', n.nid)";
      }
      if (in_array('menu', $combination)) {
        $tables['menu_router'] = 'mr';
        $parts[] = "'\t'";
        $parts[] = 'mr.path';
        $items['path'] = 'mr.path';
        $where[] = 'mr.path NOT LIKE \'%\\%%\'';
      }
      if (in_array('nodetype', $combination)) {
        $tables['node'] = 'n';
        $parts[] = "'\t'";
        $parts[] = "nt.type";
        $joins[] = "CROSS JOIN {node_type} nt";
        $items['nodetype'] = 'nt.type';
      }
    }
    $parts[] = "'\n'";
    if (module_exists('felix_domain')) {
      $parts[] = "'felix_domain\t'";
      if (in_array('domain', $combination)) {
        $tables['domain'] = 'd';
        $parts[] = 'd.domain_id';
        // $joins[] = "CROSS JOIN {domain} d";
        $items['domain'] = 'd.domain_id';
      }
      $parts[] = "'\n'";
    }
    $parts = implode(',', $parts);
    $parts = str_replace(array("\t", "\n"), array('\\t', '\\n'), $parts);
    $parts_sql = "CONCAT('a:" . count($items) . ":', :open, '";
    ksort($items);
    foreach ($items as $key => $value) {
      $key = $key == 'menu' ? 'path' : $key;
      $parts_sql .= 's:' . strlen($key) . ':"' . $key . '";s:\', LENGTH(' . $value . '), \':"\', ' . $value . ', \'";';
    }
    $parts_sql .= "', :close)";
    $joins = array();
    $basetable = NULL;
    foreach ($tables as $table => $alias) {
      if (empty($basetable)) {
        $basetable = $table;
        $basetable_alias = $alias;
      }
      else {
        $joins[] = 'CROSS JOIN {' . $table . '} ' . $alias;
      }
    }
    // Create a table mapping the old style hash to the newly added hash parts.
    $hashquery = 'CREATE TEMPORARY TABLE {felix_hashtable} AS
    SELECT MD5(CONCAT(' . $parts . ')) as hash, ' . $parts_sql . ' as parts';
    if (!is_null($basetable)) {
      $hashquery .= ' FROM {' . $basetable . '} ' . $basetable_alias . ' ' . implode(' ', $joins) .
        (empty($where) ? '' : ' WHERE ' . implode(' AND ' , $where));
    }
    $queries[] = $hashquery;
    $queries[] = 'CREATE INDEX felix_hashtable_hash ON {felix_hashtable} (hash)';
    // Copy blocks with matches to a temporary table.
    // This is a workaround for some aliasing issues when using UPDATE with subqueries.
    $queries[] = 'CREATE TEMPORARY TABLE {felix_block_new} AS
    SELECT b.fbid, b.region, b.weight, b.hash, b.module, b.delta, b.data, b.detail_path, h.parts
    FROM {felix_block} b
    JOIN {felix_hashtable} h ON b.hash = h.hash';
    // Update the original table with the copies.
    $queries[] = 'INSERT INTO {felix_block} (fbid, region, weight, hash, module, delta, data, detail_path, hash_parts)
    SELECT fbid, region, weight, hash, module, delta, data, detail_path, parts FROM {felix_block_new} n
    ON DUPLICATE KEY UPDATE hash_parts = n.parts';
    // And cleanup.
    $queries[] = 'DROP TABLE {felix_hashtable}';
    $queries[] = 'DROP TABLE {felix_block_new}';
  }

  // Rehash blocks.
  $queries[] = 'UPDATE {felix_block} SET hash = MD5(hash_parts) WHERE hash_parts IS NOT NULL';

  // Use an empty array for blocks which we couldn't match.
  $queries[] = 'UPDATE {felix_block} SET hash_parts = CONCAT(\'a:0:\', :open, :close) WHERE hash_parts IS NULL';

  // Set the NOT NULL flag.
  $queries[] = 'ALTER TABLE {felix_block} CHANGE COLUMN hash_parts hash_parts TEXT NOT NULL';

  // Run queries.
  foreach ($queries as $query) {
    // Build arguments. The reason behind these static arguments is that the table
    // prefixing doesn't allow curly braces in the queries.
    $args = array();
    if (strstr($query, ':open')) $args[':open'] = '{';
    if (strstr($query, ':close')) $args[':close'] = '}';
    db_query($query, $args);
  }

  // Do a final check to see if there are any blocks that use different parts
  // than their region (which would mean there is a disconnect).
  $msg = felix_integrity_check();
  if (!empty($msg)) {
    return $msg;
  }
}

/**
 * Add felix_block.exclude field.
 */
function felix_update_7103() {
  $sql = 'ALTER TABLE {felix_block} ADD COLUMN exclude TEXT NOT NULL AFTER hash_parts';
  db_query($sql);
  $sql = 'UPDATE felix_block SET exclude = :value;';
  db_query($sql, array(':value' => 'a:0:{}'));
}

/**
 * Fix wrong values in felix_block.exclude column.
 */
function felix_update_7104() {
  // A missing serialize-function caused the array to be casted to a string,
  // resulting in the value "Array" instead of a serialized array.
  $sql = 'UPDATE {felix_block} SET exclude = :array WHERE exclude = \'Array\'';
  db_query($sql, array(':array' => serialize(array())));
}

/**
 * Helper function to check the integrity
 *
 * @todo Also create a hook_requirement that uses this.
 *
 * @return In case of problems, a string describing the problems is returned.
 * Otherwise, the result is an empty string.
 */
function felix_integrity_check() {
  $region_query = db_select('felix_region', 'fr')->fields('fr');
  $regions = $region_query->execute()->fetchAllAssoc('name');
  foreach ($regions as $key => $region) {
    $data = unserialize($region->data);
    $region->hash = $data['hash'];
    $region->extra = array();
    $region->missing = array();
  }

  $block_query = db_select('felix_block', 'fb')->fields('fb');
  $blocks_result = $block_query->execute();

  foreach ($blocks_result as $block) {
    $parts = unserialize($block->hash_parts);
    if (!is_array($parts)) {
      continue;
    }
    $differentiators = array_keys($parts);

    // Does the region have any extra differentiators?
    $missing = array_diff($regions[$block->region]->hash, $differentiators);

    // Does the block have any differentiators not required?
    $extra = array_diff($differentiators, $regions[$block->region]->hash);

    foreach ($missing as $key) {
      if (isset($regions[$block->region]->missing[$key])) {
        $regions[$block->region]->missing[$key]++;
      }
      else {
        $regions[$block->region]->missing[$key] = 1;
      }
    }
    foreach ($extra as $key) {
      if (isset($regions[$block->region]->extra[$key])) {
        $regions[$block->region]->extra[$key]++;
      }
      else {
        $regions[$block->region]->extra[$key] = 1;
      }
    }
  }

  $problems = array();
  $t = get_t();

  foreach ($regions as $region) {
    foreach ($region->missing as $key => $count) {
      $problems[] = $t(
        'Region %name has %count block(s) that are missing the %key differentiator.',
        array(
          '%name' => $region->title,
          '%count' => $count,
          '%key' => $key,
        )
      );
    }
    foreach ($region->extra as $key => $count) {
      $problems[] = $t(
        "Region %name has %count block(s) that have the %key differentiator while they shouldn't.",
        array(
          '%name' => $region->title,
          '%count' => $count,
          '%key' => $key,
        )
      );
    }
  }

  $msg = '';

  if (count($problems)) {
    $msg = $t('Problems were found when comparing Felix regions and their blocks. Carefully inspect your site for missing or extra blocks. Technical users can compare the {felix_block}.hash_parts column to the {felix_region}.data column.');
    $msg .= theme('item_list', array('items' => $problems, 'title' => '', 'type' => 'ul'));
  }

  return $msg;
}

/**
 * Utility function that adds the body field to the Felix display mode for node
 * types currently used with Felix.
 */
function felix_configure_view_mode() {
  $query = db_select('felix_block_set_nodetype', 'nt')
    ->fields('nt', array('nodetype'))
    ->distinct();

  foreach ($query->execute() as $row) {
    $settings = field_bundle_settings('node', $row->nodetype);
    $settings['view_modes']['felix'] = array('custom_settings' => TRUE);
    field_bundle_settings('node', $row->nodetype, $settings);

    $instance = field_info_instance('node', 'body', $row->nodetype);

    if (isset($instance, $instance['display'])) {
      $instance['display']['felix'] = array(
        'label' => 'hidden',
        'type' => 'text_summary_or_trimmed',
      );

      field_update_instance($instance);
    }
  }
}
