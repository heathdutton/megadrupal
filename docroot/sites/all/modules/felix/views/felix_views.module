<?php
/**
 * @file
 * Main module file for the Felix Views module.
 *
 * Allows Views to be placed as Felix blocks.
 */

/**
 * Implements hook_menu().
 */
function felix_views_menu() {
  $menu = array();

  $menu['felix-blocks-views/autocomplete-term'] = array(
    'page callback' => 'felix_views_autocomplete_term',
    'page arguments' => array(2),
    'access arguments' => array('manage felix blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'felix_views.pages.inc',
  );

  $menu['felix-blocks-views/autocomplete-node'] = array(
    'page callback' => 'felix_views_autocomplete_node',
    'page arguments' => array(2),
    'access arguments' => array('manage felix blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'felix_views.pages.inc',
  );

  return $menu;
}

/**
 * Implements felix_block_config().
 */
function felix_views_felix_block_config($block) {
  module_load_include('inc', 'felix_views', 'felix_views.pages');
  $form = array();

  if ($block->module == 'views') {
    if (strlen($block->delta) == 32) {
      $hashes = variable_get('views_block_hashes', array());
      if (!empty($hashes[$block->delta])) {
        $block->delta = $hashes[$block->delta];
      }
    }

    $explode = explode('-', $block->delta);
    if (count($explode) != 2) {
      return;
    }

    list($view, $display) = $explode;

    $view = views_get_view($view);

    $arguments = _felix_views_get_view_arguments($view, $display);
    $config = empty($block->data['config']) ? array() : $block->data['config'];

    $i = 0;
    foreach ($arguments as $argument) {
      ++$i;
      $value = isset($config["argument$i"]) ? $config["argument$i"] : NULL;
      $ui_title = isset($argument['ui_name']) ? $argument['ui_name'] : NULL;
      if ($element = _felix_views_argument_element($argument['table'], $argument['field'], $ui_title, $value, $view, $display)) {
        $form["argument$i"] = $element;
      }
    }
  }
  return $form;
}

/**
 * Implements hook_block_config_save().
 */
function felix_views_felix_block_config_save($block, $values) {
  return $values;
}

/**
 * Implements hook_felix_block_view().
 */
function felix_views_felix_block_view(&$block) {
  if ($block->module == 'views') {
    // Takeover block rendering. There is a special $block->render_module
    // property for this. Altering the $block->module property will cause bugs.
    $block->render_module = 'felix_views';
  }
}

/**
 * Implements hook_block_view().
 */
function felix_views_block_view($delta, $config = array()) {
  module_load_include('inc', 'felix_views', 'felix_views.pages');

  if (strlen($delta) == 32) {
    $hashes = variable_get('views_block_hashes', array());
    if (!empty($hashes[$delta])) {
      $delta = $hashes[$delta];
    }
  }

  $explode = explode('-', $delta);
  if (count($explode) != 2) {
    return;
  }

  list($view, $display) = $explode;
  $view = views_get_view($view);
  if (!$view) {
    return NULL;
  }
  $arguments = _felix_views_get_view_arguments($view, $display);

  $args = array();
  for ($i = 1; $i <= count($arguments); ++$i) {
    $arg = isset($config["argument$i"]) ? $config["argument$i"] : '';
    $args[] = empty($arg) ? NULL : (string) $arg;
  }

  if ($view->access($display)) {
    $output = $view->execute_display($display, $args);
    views_add_block_contextual_links($output, $view, $display);
    $view->destroy();
    return $output;
  }

  $view->destroy();

  return NULL;
}
