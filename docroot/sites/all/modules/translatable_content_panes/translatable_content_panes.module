<?php

/**
 * Implements hook_ctools_plugin_directory().
 */
function translatable_content_panes_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_theme().
 */
function translatable_content_panes_theme() {
  return array(
    'translatable_content_pane' => array(
      'template' => 'translatable-content-pane',
      'variables' => array('pane' => NULL, 'content' => NULL),
    ),
  );
}

/**
 * Implements hook_features_api().
 */
function translatable_content_panes_features_api() {
  return array(
    'translatable_content_panes_content_pane' => array(
      'name' => t('Translatable content panes'),
      'default_hook' => 'translatable_content_panes_content_pane',
      'default_file' => FEATURES_DEFAULTS_CUSTOM,
      'default_filename' => 'translatable_content_panes',
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'translatable_content_panes') . '/translatable_content_panes.features.inc',
    ),
    'translatable_content_panes_content_pane_content' => array(
      'name' => t('Translatable content pane content'),
      'default_hook' => 'translatable_content_panes_content_pane_content',
      'default_file' => FEATURES_DEFAULTS_CUSTOM,
      'default_filename' => 'translatable_content_panes',
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'translatable_content_panes') . '/translatable_content_panes.content.features.inc',
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function translatable_content_panes_hook_info() {
  return array(
    'translatable_content_panes_content_pane' => array(
      'group' => 'translatable_content_panes',
    ),
    'translatable_content_panes_content_pane_content' => array(
      'group' => 'translatable_content_panes',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function translatable_content_panes_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_permission().
 */
function translatable_content_panes_permission() {
  return array(
    'edit translatable content panes' =>  array(
      'title' => t('Edit translatable content panes'),
      'description' => t('Users with this permission can edit translatable content panes.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function translatable_content_panes_menu() {

  $items['admin/content/translatable-content-panes/%translatable_content_panes_pane'] = array(
    'title' => 'Edit translatable content pane',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('translatable_content_panes_edit_form', 3),
    'access arguments' => array('edit translatable content panes'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'translatable_content_panes.admin.inc',
  );

  return $items;
}

/**
 * Sorter callback for uasort etc.
 */
function _translatable_content_panes_sort_function($a, $b) {
  return strcmp($a['admin_title'], $b['admin_title']);
}

/**
 * Helper to get the available content panes.
 */
function translatable_content_panes_get_panes() {
  $translatable_panes = &drupal_static(__FUNCTION__);

  if ($translatable_panes === NULL) {
    // Load in the database defined panes.
    $translatable_panes = db_select('translatable_content_pane', 'tcp')
                            ->fields('tcp')
                            ->execute()
                            ->fetchAllAssoc('id', PDO::FETCH_ASSOC);

    // Add in any translatable panes in code that aren't in the database
    // just yet. Then add them to the database.
    foreach (module_implements('translatable_content_panes_content_pane') as $module) {
      $module_panes = module_invoke($module, 'translatable_content_panes_content_pane');
      foreach ($module_panes as $module_pane) {
        if (!array_key_exists($module_pane['id'], $translatable_panes)) {
          drupal_write_record('translatable_content_pane', $module_pane);
          $translatable_panes[$module_pane['id']] = $module_pane;
        }
      }
    }

    // Sort the panes
    uasort($translatable_panes, '_translatable_content_panes_sort_function');
  }

  return $translatable_panes;
}

/**
 * Helper to get a single content pane.
 */
function translatable_content_panes_get_pane($id, $load_content = FALSE) {
  $content_panes = translatable_content_panes_get_panes();
  if (array_key_exists($id, $content_panes)) {
    $pane = $content_panes[$id];

    if ($load_content) {
      // Always look in the database!
      $data_query = db_select('translatable_content_pane_data', 'tcpd')
                      ->condition('tcpd.id', $id)
                      ->fields('tcpd');

      // Clone the query for re-use if we populate from code.
      $cloned_data_query = clone $data_query;

      // Run the query to get the inital data.
      $data = $data_query->execute()->fetchAll();

      // If there is no data, and it's a code content pane, get the
      // content from the module hook and populate the database, then re-run the query.
      if (empty($data) && !empty($pane['code_content'])) {
        // Get the panes with content...
        $code_content_panes = &drupal_static('translatable_content_panes_content');
        if ($code_content_panes === NULL) {
          $code_content_panes = module_invoke_all('translatable_content_panes_content_pane_content');
        }

        // ID known?
        if (array_key_exists($id, $code_content_panes)) {
          // Easier variable.
          $code_content_pane = $code_content_panes[$id];

          // Build up an array of language keys.
          if (module_exists('locale')) {
            $languages = locale_language_list() + array(LANGUAGE_NONE => 'Default language');
          }
          else {
            $languages = array(LANGUAGE_NONE => 'Default language');
          }

          // Loop through the languages and record the data.
          foreach ($languages as $language => $language_label) {
            if ($language == LANGUAGE_NONE) {
              $value = array_diff_key($code_content_pane, array('translations' => TRUE));
            }
            else if (isset($code_content_pane['translations'][$language])) {
              $value = $code_content_pane['translations'][$language];
            }
            else {
              continue;
            }

            $record = array(
              'id' => $id,
              'revision_id' => NULL,
              'language' => $language,
              'title' => $value['title'],
              'content' => $value['content'],
              'format' => $value['format'],
            );
            drupal_write_record('translatable_content_pane_data', $record);
          }

          // We have now populated the database with what we can for this pane. Re-run the query.
          $data = $cloned_data_query->execute()->fetchAll();
        }
      }

      // Loop through each data bit.
      foreach ($data as $datum) {
        $content = array(
          'title' => $datum->title,
          'content' => $datum->content,
          'format' => $datum->format,
        );

        if ($datum->language == LANGUAGE_NONE) {
          $pane += $content;
        }
        else {
          $pane['translations'][$datum->language] = $content;
        }
      }
    }

    return $pane;
  }
}

/**
 * Menu callback for loading a translatable content pane.
 */
function translatable_content_panes_pane_load($id) {
  $pane = translatable_content_panes_get_pane($id, TRUE);
  if (!empty($pane) && empty($pane['code_content'])) {
    return $pane;
  }
  else {
    return FALSE;
  }
}

/**
 * Form process for the translation forms so #states works with text_format.
 * Remove when https://drupal.org/node/997826 is fixed.
 */
function translatable_content_panes_filter_process_format($element) {
  if (isset($element['value']['#states'])) {
    $element['format']['#states'] = $element['value']['#states'];
  }

  return $element;
}
