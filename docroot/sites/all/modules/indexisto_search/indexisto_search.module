<?php
/**
 * @file
 * Integration with Indexisto.
 *
 * http://indexisto.com/
 */

define('INDEXISTO_DEFAULT_STYLES', 'outline-color: transparent;outline: none;background: #FFF url(http://servant.indexisto.com/files/searchbox/search_icon_21px.png) no-repeat scroll 6px center;border: 2px solid rgb(255, 151, 18);border-radius: 5px;width: 202px;padding: 0 0 0 31px;height: 32px;line-height: 23px;color: #abaaaa;font-family: Arial;font-size: 18px;');
define('INDEXISTO_INDEX_DOMAIN_NAME', 'http://' . $_SERVER['SERVER_NAME']);

/**
 * Implements hook_menu().
 *
 * Create links in menu.
 */
function indexisto_search_menu() {
  // If user has 'first time' mark we show another form.
  $settings = indexisto_search_is_first_time() ? 'indexisto_search_settings_first_time' : 'indexisto_search_settings_form';

  $items['admin/config/search/indexisto'] = array(
    'title' => 'Indexisto search',
    'description' => 'Indexisto search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array($settings),
    'access arguments' => array('administer site configuration'),
    'file' => 'indexisto_search.admin.inc',
  );

  $items['admin/config/search/indexisto/settings'] = array(
    'title' => 'Indexisto search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array($settings),
    'access arguments' => array('administer site configuration'),
    'file' => 'indexisto_search.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/search/indexisto/content_settings'] = array(
    'title' => 'Content settings',
    'description' => 'Can tweak materials return to the index.',
    'page callback' => 'drupal_get_form',
    'access callback' => !indexisto_search_is_first_time(),
    'page arguments' => array('indexisto_search_content_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'indexisto_search.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/search/indexisto/style'] = array(
    'title' => 'Styles',
    'page callback' => 'drupal_get_form',
    'access callback' => !indexisto_search_is_first_time(),
    'page arguments' => array('indexisto_search_style'),
    'access arguments' => array('administer site settings'),
    'file' => 'indexisto_search.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/config/search/indexisto/batch'] = array(
    'title' => 'Bulk operations',
    'page callback' => 'drupal_get_form',
    'access callback' => !indexisto_search_is_first_time(),
    'page arguments' => array('indexisto_search_batch_form'),
    'access arguments' => array('administer site settings'),
    'file' => 'indexisto_search.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 *
 * Define our block with input.
 */
function indexisto_search_block_info() {
  $blocks = array();

  // If index id not st, we do not create block.
  if (variable_get('indexisto_search_index_id', FALSE)) {
    $blocks['indexisto_search_search'] = array(
      'info' => t('Indexisto search'),
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generaet content for our block.
 */
function indexisto_search_block_view($delta) {
  $block = array();

  // Catch our block.
  if ($delta == 'indexisto_search_search') {
    $index_id = variable_get('indexisto_search_index_id');
    $placeholder = variable_get('indexisto_search_placeholder', 'Начните ввод');
    // Inline styles for input.
    $styles = variable_get('indexisto_search_input_style', INDEXISTO_DEFAULT_STYLES);

    $block['content'] = "<input autocomplete='off'  autocorrect='off' id='indx_srchbox_{$index_id}' placeholder='{$placeholder}' style='{$styles}' type='text' />";
  }

  return $block;
}

/**
 * Implements hook_preprocess_html().
 *
 * Attach our js file.
 */
function indexisto_search_preprocess_html(&$variables) {
  drupal_add_js('http://servant.indexisto.com/files/searchbox/searchbox.nocache.js?type=edit', 'external');
}

/**
 * Implements hook_node_insert().
 *
 * When nnode is added.
 */
function indexisto_search_node_insert($node) {
  if ($node->status) {
    $data = indexisto_search_node_data_prepare($node);
    indexisto_search_send_data($data);
  }
}

/**
 * Implements hook_node_update().
 *
 * When node is updated.
 */
function indexisto_search_node_update($node) {
  if ($node->status) {
    $data = indexisto_search_node_data_prepare($node);
    indexisto_search_send_data($data);
  }
  // If not not published we remove it from index.
  else {
    indexisto_search_node_delete($node);
  }
}

/**
 * Implements hook_node_delete().
 *
 * When node is deleted.
 */
function indexisto_search_node_delete($node) {
  // Id of deleted node.
  $values = array(
    '_id' => 'nid_' . $node->nid,
  );

  // Prepare data to send.
  $data = json_encode($values);

  // Send data for deletion.
  indexisto_search_send_data($data, 'DELETE');
}

/**
 * Prepare node data for sending into index.
 */
function indexisto_search_node_data_prepare($node) {
  // If send data enabled and this content type allowed to send data.
  if (variable_get('indexisto_search_send_data', 0) && !variable_get('indexisto_search_' . $node->type . '_send_data', 0)) {
    // Prepare base data.
    $values = array(
      '_id' => 'nid_' . $node->nid,
      'created' => date("Y-m-d\\TH:i:s", $node->created),
      '_subtype' => $node->type,
      '_url' => INDEXISTO_INDEX_DOMAIN_NAME . 'node/' . $node->nid,
    );

    // Comment count.
    isset($node->comment_count) ? $values['comments'] = $node->comment_count : FALSE;

    // Prepare material URL.
    // Change system url for alias.
    if (variable_get('indexisto_search_path_aliases', 1)) {
      if (!empty($node->path['alias'])) {
        $values['_url'] = INDEXISTO_INDEX_DOMAIN_NAME . $node->path['alias'];
      }
      else {
        $alias = url('node/' . $node->nid);
        $values['_url'] = INDEXISTO_INDEX_DOMAIN_NAME . $alias;
      }
    }

    // If title set.
    $title = variable_get('indexisto_search_' . $node->type . '_title', '[node:title]');
    $title ? $values['title'] = token_replace($title, array('node' => $node)) : FALSE;

    // If body set.
    $body = variable_get('indexisto_search_' . $node->type . '_body', '[node:body]');
    $body ? $values['body'] = token_replace($body, array('node' => $node), array('clear' => TRUE)) : FALSE;

    // If image set.
    $image = variable_get('indexisto_search_' . $node->type . '_image', '[node:field_image]');
    // Unfortunately, the token with the image not handled properly, so we take
    // the initiative. We get the name of the token field that the user has
    // specified as a picture, and pull it straight on the value of our
    // content.
    if ($image) {
      preg_match_all('/\[([^\s\[\]:]*)([^\s\[\]]*)\]/x', $image, $matches);
      // Remove the colon and get the name of the field with the image.
      $image_field_name = str_replace(":", "", $matches[2][0]);
      // Replace the dash to underscores. Do not forget about Entity Token
      // which the user can also specify.
      $image_field_name = str_replace("-", "_", $image_field_name);

      // If this field has image.
      if (!empty($node->{$image_field_name}['und'][0]['fid'])) {
        // Get file id of first image.
        $image_fid = $node->{$image_field_name}['und'][0]['fid'];
        // Load file information.
        $image_loaded = file_load($image_fid);
        // Create URL for image.
        $values['_image'] = file_create_url($image_loaded->uri);
      }
      // If image not founded, we look in the body.
      elseif (!empty($values['body'])) {
        preg_match('/<img.+src=[\'"](?P<src>.+?)[\'"].*>/i', $values['body'], $image);
        // If image has domain name we write it.
        if ($image && preg_match('/^(http|https):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:.[A-Z0-9][A-Z0-9_-]*)+):?(d+)?\\/?/i', $image['src'])) {
          $values['_image'] = $image['src'];
        }
        // Or add our domain.
        elseif ($image) {
          $values['_image'] = 'http://' . $_SERVER['SERVER_NAME'] . $image['src'];
        }
      }
    }
    elseif (!empty($values['body'])) {
      preg_match('/<img.+src=[\'"](?P<src>.+?)[\'"].*>/i', $values['body'], $image);
      // If image has domain name we write it.
      if ($image && preg_match('/^(http|https):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:.[A-Z0-9][A-Z0-9_-]*)+):?(d+)?\\/?/i', $image['src'])) {
        $values['_image'] = $image['src'];
      }
      // Or add our domain.
      elseif ($image) {
        $values['_image'] = 'http://' . $_SERVER['SERVER_NAME'] . $image['src'];
      }
    }

    // If tags set.
    $tags = variable_get('indexisto_search_' . $node->type . '_tags', '[node:field_tags]');
    $tags ? $values['tags'] = token_replace($tags, array('node' => $node), array('clear' => TRUE)) : FALSE;

    // Sumtext - all content data allowed for search.
    $sumtext = variable_get('indexisto_search_' . $node->type . '_sumtext', '[node:body] [node:field_tags]');
    $sumtext ? $values['_sumtext'] = token_replace($sumtext, array('node' => $node), array('clear' => TRUE)) : FALSE;

    // Remove tabs and transfers, all tags and write it in JSON format.
    $data = str_replace(array("\\n", "\\t", "\\r"), "", strip_tags(json_encode($values)));

    // Create own hook_indexisto_search_node_data_prepare_alter().
    // If no one uses it, we do nothing.
    if (count(module_implements('indexisto_search_node_data_prepare_alter')) > 0) {
      // If called we give them data.
      $alter_data = module_invoke_all('indexisto_search_node_data_prepare_alter', $data);
      drupal_alter('indexisto_search_node_data_prepare_alter', $data);
      // Give changed data.
      $data = $alter_data[0];
    }

    // Return prepared data information.
    return $data;
  }
}

/**
 * Implements hook_comment_insert().
 *
 * When new comment is added.
 */
function indexisto_search_comment_insert($comment) {
  if ($comment->status) {
    $data = indexisto_search_comment_data_prepare($comment);
    indexisto_search_send_data($data);
  }
}

/**
 * Implements hook_comment_update().
 *
 * Catch on update.
 */
function indexisto_search_comment_update($comment) {
  if ($comment->status) {
    $data = indexisto_search_comment_data_prepare($comment);
    indexisto_search_send_data($data);
  }
}

/**
 * Implements hook_comment_delete().
 *
 * When comment is deleted.
 */
function indexisto_search_comment_delete($comment) {
  // Write our comment id.
  $values = array(
    '_id' => 'cid_' . $comment->cid,
  );

  // Prepare data.
  $data = json_encode($values);

  // Send remove request.
  indexisto_search_send_data($data, 'DELETE');
}

/**
 * Prepare comment data for sending in index.
 */
function indexisto_search_comment_data_prepare($comment) {
  // If user allow to index comments (0).
  if (!variable_get('indexisto_search_comments_send_data', 0)) {
    $values = array(
      '_id' => 'cid_' . $comment->cid,
      'created' => date("Y-m-d\\TH:i:s", $comment->created),
      '_subtype' => 'comments',
    );

    // Load related node.
    $node = node_load($comment->nid);

    // Write path.
    $alias = url('node/' . $node->nid);
    $values['_url'] = INDEXISTO_INDEX_DOMAIN_NAME . $alias . '#comment-' . $comment->cid;

    // If content is set.
    $body = variable_get('indexisto_search_comments_body', '[comment:body]');
    $body ? $values['_sumtext'] = strip_tags(token_replace($body, array('comment' => $comment), array('clear' => TRUE))) : FALSE;

    // Remove tabs and transfers, all tags and write it in JSON format.
    $data = str_replace(array("\\n", "\\t", "\\r"), "", strip_tags(json_encode($values)));

    // Create own indexisto_search_comment_data_prepare_alter().
    // If no one uses it, we do nothing.
    if (count(module_implements('indexisto_search_comment_data_prepare_alter')) > 0) {
      // If called we give them data.
      $alter_data = module_invoke_all('indexisto_search_comment_data_prepare_alter', $data);
      drupal_alter('indexisto_search_comment_data_prepare_alter', $data);
      // Give changed data.
      $data = $alter_data[0];
    }

    return $data;
  }
}

/**
 * Send data to indexisto_search.
 */
function indexisto_search_send_data($data, $method = 'POST') {
  $api_url = 'http://api.indexisto.com';
  $api_version = '/1.0';
  $document = '/document';
  $indexid = '/' . variable_get('indexisto_search_index_id');
  $secret = variable_get('indexisto_search_secret_api_key');

  // Generate request url.
  $request_url = $api_url . $api_version . $document . $indexid . '/default';

  // Ur for sign.
  $sign_url = $api_version . $document . $indexid . '/default';

  // Generate key for sending data.
  $code = md5($sign_url . $data . $secret);

  $options = array(
    'method' => $method,
    'data' => $data,
  );

  // Do request.
  $result = drupal_http_request($request_url . '?code=' . $code, $options);
}


/**
 * Batch start.
 */
function indexisto_search_batch_start($form, &$form_state) {
  // Operation type.
  // 0 - update and adding.
  // 1 - remove from index.
  $operation_type_id = $form_state['values']['batch_operation_type'];
  $operation_type_name = $operation_type_id ? 'DELETE' : 'POST';

  // Operation information.
  $operations = array(
    0 => array(
      'name' => 'Add\remove to index',
      'function' => '_batch_indexisto_search_do',
    ),
    1 => array(
      'name' => 'Remove from index',
      'function' => '_batch_indexisto_search_do',
    ),
  );

  // Which content types.
  $operation_content_types = array();

  // Add to our array all selected content types.
  foreach ($form_state['values']['batch_operation_content_types'] as $type_name => $status) {
    if ($status) {
      $operation_content_types[] = $type_name;
    }
  }

  // Batch prepare.
  $batch = array(
    'title' => $operations[$operation_type_id]['name'],
    'operations' => array(
      array(
        $operations[$operation_type_id]['function'],
        array($operation_content_types, $operation_type_name),
      ),
    ),
    'progress_message' => t('Status: @current of @total.'),
    'error_message' => t('Error!'),
    'finished' => 'indexisto_search_batch_finished',
  );

  batch_set($batch);
}

/**
 * Batch logic.
 */
function _batch_indexisto_search_do($content_types, $operation_type, &$context) {
  // If comments, we do different staff.
  $is_comment = in_array('comment', $content_types) ? TRUE : FALSE;

  // For each content type we get ID's.
  if ($is_comment) {
    $cids = db_select('comment', 'c')
      ->fields('c', array('cid'))
      ->condition('c.status', 1)
      ->execute()
      ->fetchCol();
  }
  else {
    // List of node id's.
    $nids = array();

    foreach ($content_types as $content_type) {
      $nids_new = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->fields('n', array('type'))
        ->condition('n.type', $content_type)
        ->execute()
        ->fetchCol();

      $nids = array_merge($nids, $nids_new);
    }
  }

  // Obtain the amount of data.
  if (empty($context['sandbox']['progress'])) {
    // Current progress.
    $context['sandbox']['progress'] = 0;
    // Total.
    if ($is_comment) {
      $context['sandbox']['max'] = count($cids);
    }
    else {
      $context['sandbox']['max'] = count($nids);
    }

    // ДAdd operation to db.
    watchdog('import', 'import indexisto');
  }

  // Current iteration.
  if (empty($context['sandbox']['iteration'])) {
    $context['sandbox']['iteration'] = 0;
  }

  // If cycle not ended.
  if ($context['sandbox']['iteration'] < $context['sandbox']['max']) {
    // Limit operation for each cycle.
    $limit = 50;

    // Count of finished data for this iteration cycle.
    $counter = 0;

    if ($context['sandbox']['progress'] != 0) {
      $context['sandbox']['iteration'] = $context['sandbox']['iteration'] + $limit;
    }

    // Work with data.
    for ($i = $context['sandbox']['iteration']; $i < $context['sandbox']['max'] && $counter < $limit; $i++) {
      if ($is_comment) {
        $comment = comment_load($cids[$i]);
        $data = indexisto_search_comment_data_prepare($comment);
        indexisto_search_send_data($data, $operation_type);
      }
      else {
        // Load node and send it.
        $node = node_load($nids[$i]);
        $data = indexisto_search_node_data_prepare($node);
        indexisto_search_send_data($data, $operation_type);
      }

      // When its done.
      $context['sandbox']['progress']++;
      $counter++;

      // Information to user.
      $context['message'] = t('We are working.');
      $context['results']['processed'] = $context['sandbox']['progress'];
    }
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Message in the end of batch.
 */
function indexisto_search_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Done'));
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array(
      '@operation' => $error_operation[0],
      '@args' => print_r($error_operation[0], TRUE),
    )));
  }
  watchdog('import', 'import finished');
}


/**
 * Generate random key.
 * We wan't use drupal_random_key because it's work only in 7.24+.
 */
function indexisto_search_random_key($length = 10) {
  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  $randomString = '';

  for ($i = 0; $i < $length; $i++) {
    $randomString .= $characters[rand(0, strlen($characters) - 1)];
  }

  return $randomString;
}

/**
 * First time in settings.
 */
function indexisto_search_is_first_time() {
  return variable_get('indexisto_search_first_time', TRUE);
}
