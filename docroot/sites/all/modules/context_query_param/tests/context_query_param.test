<?php

/**
 * @file
 * Tests for the Context Query Parameters module.
 */


/**
 * Unit tests for Context Query Parameters.
 */
class ContextQueryParamUnitTest extends DrupalUnitTestCase {

  /**
   * Structured array of tests to be run in self::testContextConditionExecute().
   */
  protected $test_conditions = array(
    // Tests that ensure query parameters and their values are equal.
    'equal to' => array(
      'ruleset' => array(
        'name' => 'foo',
        'operator' => 'equals',
        'value' => 'bar',
      ),
      'requests' => array(
        'True' => array(
          array('foo' => 'bar'),
          array('bar' => 'baz', 'foo' => 'bar'),
        ),
        'False' => array(
          array('foo' => 'notBar'),
          array('bar' => 'baz'),
          array(),
        ),
      ),
    ),
    // Tests that ensure query parameters and their values are not equal.
    'not equal to' => array(
      'ruleset' => array(
        'name' => 'foo',
        'operator' => 'not_equals',
        'value' => 'bar',
      ),
      'requests' => array(
        'True' => array(
          array('foo' => 'notBar'),
          array('bar' => 'baz'),
          array(),
        ),
        'False' => array(
          array('foo' => 'bar'),
          array('bar' => 'baz', 'foo' => 'bar'),
        ),
      ),
    ),
    // Tests that ensure query parameters exist and their values are empty.
    'empty' => array(
      'ruleset' => array(
        'name' => 'foo',
        'operator' => 'empty',
      ),
      'requests' => array(
        'True' => array(
          array('foo' => ''),
          array('bar' => 'baz', 'foo' => ''),
        ),
        'False' => array(
          array('foo' => 'notEmpty'),
          array('foo' => 0),
          array('bar' => 'baz'),
          array(),
        ),
      ),
    ),
    // Tests that ensure query parameters exist and their values are not empty.
    'not empty' => array(
      'ruleset' => array(
        'name' => 'foo',
        'operator' => 'not_empty',
      ),
      'requests' => array(
        'True' => array(
          array('foo' => 'notEmpty'),
          array('foo' => 0),
          array('bar' => 'baz', 'foo' => 'buzz'),
        ),
        'False' => array(
          array('foo' => ''),
          array('bar' => 'baz', 'foo' => ''),
          array(),
        ),
      ),
    ),
    // Tests that ensure query parameters exist.
    'set' => array(
      'ruleset' => array(
        'name' => 'foo',
        'operator' => 'set',
      ),
      'requests' => array(
        'True' => array(
          array('foo' => 'bar'),
          array('foo' => ''),
          array('foo' => 0, 'notFoo' => 'notBar'),
        ),
        'False' => array(
          array(),
          array('notFoo' => 'notBar'),
          array('notFoo' => 'notBar', 'baz' => 'buzz'),
        ),
      ),
    ),
    // Tests that ensure query parameters do not exist.
    'not set' => array(
      'ruleset' => array(
        'name' => 'foo',
        'operator' => 'not_set',
      ),
      'requests' => array(
        'True' => array(
          array(),
          array('notFoo' => 'notBar'),
          array('notFoo' => 'notBar', 'baz' => 'buzz'),
        ),
        'False' => array(
          array('foo' => 'bar'),
          array('foo' => ''),
          array('foo' => 0, 'notFoo' => 'notBar'),
        ),
      ),
    ),
  );

  public static function getInfo() {
    return array(
      'name' => 'Context Query Parameters unit tests',
      'description' => 'Unit tests for the Context Query Parameter context condition.',
      'group' => 'Context',
    );
  }

  public function setUp() {
    parent::setUp();

    // Attempt to load all necessary classes manually. This syntax is necessary
    // because module_load_include() does not work without a DB. Order matters
    // because require_once will call the autoloader, which touches the DB.
    if (!class_exists('context_condition', FALSE)) {
      require_once(__DIR__ . '/../../context/plugins/context_condition.inc');
    }
    require_once(__DIR__ . '/../context_condition_query_param.inc');
    require_once(__DIR__ . '/mock_context_condition_query_param.inc');
    require_once(__DIR__ . '/../context_query_param.module');

    // Set up a query_param context condition here.
    $registry = context_query_param_context_registry();
    $key = 'query_param';
    $this->condition = new mock_context_condition_query_param($key, $registry['conditions'][$key]);
  }

  /**
   * Runs through all defined tests.
   */
  function testContextConditionExecute() {
    foreach ($this->test_conditions as $group => $test) {
      foreach ($test['requests'] as $assertion => $requests) {
        foreach ($requests as $request) {
          $response = $this->condition->test_check_query_params($request, $test['ruleset']);
          $assert = 'assert' . $assertion;
          $this->$assert($response, format_string('Successfully asserted %assertion for test "@test" with request ?!query', array(
            '%assertion' => $assertion,
            '@test' => ($test['ruleset']['name'] . ' is ' . $group . (isset($test['ruleset']['value']) ? ' ' . $test['ruleset']['value'] : '')),
            '!query' => http_build_query($request),
          )), $group);
        }
      }
    }
  }
}

/**
 * Behavioral tests for Context Query Parameters.
 */
class ContextQueryParamBehaviourTest extends DrupalWebTestCase {

  /**
   * An array of all test contexts.
   */
  protected $contexts = array();

  /**
   * Returns an array of query parameter name/value pairs that will satisfy all
   * contexts of a given tag value.
   *
   * @param string $tag
   *   The "tag" value associated with the desired contexts.
   *
   * @return array
   *   An array query parameter values, keyed by associated parameter names that
   *   satisfy query parameter conditions for all contexts matching a given tag.
   */
  protected function getQueryParamsByTag($tag) {
    $params = array();

    // Loop through all of the contexts we're aware of.
    foreach ($this->contexts as $name => $context) {
      // If the tag matches, create a query param name/value pair that matches.
      if ($context->tag == $tag) {
        $params = array_merge($params, $this->getQueryParamsByContext($name));
      }
    }

    return $params;
  }

  /**
   * Returns an array of query parameter name/value pairs which satisfy the
   * given context.
   *
   * @param string $context
   *   The name of the context for which we want query parameters.
   *
   * @return array
   *   An array query parameter values, keyed by associated parameter names that
   *   satisfy query parameter conditions for the given context
   */
  protected function getQueryParamsByContext($context) {
    $pairs = array();

    // Loop through all query param conditions and generate name/value pairs.
    $conditions = unserialize($this->contexts[$context]->conditions['query_param']['values']['parameters']);
    foreach ($conditions as $condition) {
      if ($condition['operator'] == context_condition_query_param::op_equals) {
        $pairs[$condition['name']] = $condition['value'];
      }
    }

    return $pairs;
  }

  /**
   * Returns an array of block deltas that should appear for contexts of a given
   * tag.
   *
   * @param string $tag
   *   The "tag" value associated with the desired contexts.
   *
   * @return array
   *   An array of block deltas that should appear for tagged contexts.
   */
  protected function getBlockDeltasByTag($tag) {
    $deltas = array();

    // Loop through all contexts and find block deltas for each tagged context.
    foreach ($this->contexts as $name => $context) {
      if ($context->tag == $tag) {
        $deltas = array_merge($deltas, $this->getBlockDeltasByContext($name));
      }
    }

    return $deltas;
  }

  /**
   * Returns an array of block deltas that should appear for a given context.
   *
   * @param string $context
   *   The name of the context for which we want block deltas.
   *
   * @return array
   *   An array of block deltas that should appear for a given context.
   */
  protected function getBlockDeltasByContext($context) {
    $deltas = array();

    // Loop through all blocks and return associated block deltas.
    foreach ($this->contexts[$context]->reactions['block']['blocks'] as $block) {
      $deltas[] = $block['delta'];
    }

    return $deltas;
  }

  public static function getInfo() {
    return array(
      'name' => 'Context Query Parameters behavioral tests',
      'description' => 'Behavioral tests for the Context Query Parameter context condition.',
      'group' => 'Context',
    );
  }

  public function setUp() {
    parent::setUp('context_query_param_test');
    drupal_flush_all_caches();

    $this->contexts = module_invoke('context_query_param_test', 'context_default_contexts');
  }

  /**
   * Tests multiple contexts sans "require all rulesets" simultaneously.
   */
  public function testMultipleRequireAllRulesets() {
    $parameters = $this->getQueryParamsByTag(__FUNCTION__);
    $blocks = $this->getBlockDeltasByTag(__FUNCTION__);
    $this->drupalGet('node', array('query' => $parameters));

    foreach ($blocks as $delta) {
      $this->assertText($delta, format_string('The !block block was placed successfully.', array(
        '!block' => $delta,
      )));
    }
  }
}
