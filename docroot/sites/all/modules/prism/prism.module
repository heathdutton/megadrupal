<?php

/**
 * @file
 * Prism module file.
 */

/**
 * Implements hook_library().
 */
function prism_library() {
  $location = prism_return_library_location();

  $libraries['prism'] = array(
    'title' => 'Prism',
    'website' => 'http://prismjs.com',
    'version' => array(),
    'js' => array(
      $location . 'prism.js' => array(),
      drupal_get_path('module', 'prism') . '/js/prism.settings.js' => array(),
    ),
    'css' => array(
      $location . 'prism.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );

  return $libraries;
}

/**
 * Return appropriate library location.
 */
function prism_return_library_location() {
  $file_base = '/libraries/prism/prism.js';

  // Check for a multisite installation.
  if (file_exists(conf_path() . $file_base)) {
    $location = conf_path() . '/libraries/prism/';
  }
  else {
    // Default.
    $location = 'sites/all/libraries/prism/';
  }

  return $location;
}

/**
 * Implements hook_init()
 */
function prism_init() {
  drupal_add_library('prism', 'prism');
}

/**
 * Implements hook_filter_info().
 */
function prism_filter_info() {
  $filters['filter_prism'] = array(
    'title' => t('Prism (syntax highlight)'),
    'process callback' => '_prism_filter_info',
    'tips callback'  => '_prism_filter_info_config',
    'weight' => 10,
  );

  return $filters;
}

/**
 * Private callback implemented by prism_filter_info().
 *
 * @format
 *  [prism:type]
 *  [/prism:type]~?
 */
function _prism_filter_info($text, $format) {
  $tags = array();
  if (preg_match_all('/\[prism:([^\|\\]]+)\|?([^\\]]*)?\]/i', $text, $tag_match)) {
    $tags = $tag_match[1];
  }
  if ($tags) {
    foreach (array_unique($tags) as $tag) {
      // Ahhh.
      if (preg_match_all('#((?<!\[)\[)(prism:' . $tag . ')((\s+[^\]]*)*)(\])(.*?)((?<!\[)\[/\2\s*\]|$)#s', $text, $match)) {
        foreach ($match[6] as $value) {
          $replace[] = '<div class="prism-wrapper" rel="' . $tag . '"><pre><code class="language-' . $tag . '">' . htmlspecialchars($value) . '</code></pre></div>';
        }
        foreach ($match[0] as $value) {
          $search[] = $value;
        }
      }
    }

    return str_replace($search, $replace, $text);
  }

  return $text;
}

/**
 * Private callback implemented by prism_filter_info().
 */
function _prism_filter_info_config($format, $long = FALSE) {
  return 'Format: [prism:language] example; [prism:css] code here [/prism:css].';
}

/**
 * Implementats hook_field_info().
 */
function prism_field_info() {
  return array(
    'prism' => array(
      'label' => t('Prism textarea'),
      'description' => t('This field stores long text in the database.'),
      'default_widget' => 'prism_textarea',
      'default_formatter' => 'prism_default',
    ),
  );
}

/**
 * Implements hook_widget_info().
 */
function prism_field_widget_info() {
  return array(
    'prism_textarea' => array(
      'label' => t('Code highlighting'),
      'field types' => array('prism'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function prism_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function prism_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'prism_trim') {
    $element['trim_size'] = array(
      '#type' => 'textfield',
      '#title' => t('Trim Size'),
      '#description' => t('The language trim size.'),
      '#default_value' => $settings['trim_size'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function prism_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $elements = array();

  if ($display['type'] == 'prism_trim') {
    $elements = t('The current trim size is @trim', array(
      '@trim'  => $settings['trim_size'],
    ));
  }

  return $elements;
}

/**
 * Implements hook_elements_info().
*/
function prism_element_info() {
  $elements = array(
    'prism_textarea' => array(
      '#input' => TRUE,
      '#process' => array('prism_textarea_process'),
    ),
  );

  return $elements;
}

/**
 * Process callback prism_textarea widget.
 */
function prism_textarea_process($element, $form_state, $complete_form) {
  $defaults = $element['#value'];
  $field = field_widget_instance($element, $form_state);

  // @todo, Allow admin to set languages.
  $languages = array(
    'http' => 'HTTP',
    'groovy' => 'Groovy',
    'sql' => 'SQL',
    'python' => 'Python',
    'cplusplus' => 'C++',
    'c' => 'C',
    'bash' => 'Bash',
    'sass' => 'SASS',
    'coffeescript' => 'CoffeeScript',
    'php' => 'PHP',
    'java' => 'Java',
    'javascript' => 'JavaScript',
    'css' => 'CSS',
    'markup' => 'Markup',
  );

  $element['codearea'] = array(
    '#type' => 'textarea',
    '#title' => t('Code area'),
    '#default_value' => isset($defaults['codearea']) ? $defaults['codearea'] : '',
    '#required' => $element['#required'],
    '#rows' => isset($field['widget']['rows']) ? $field['widget']['rows'] : 5,
    '#description' => filter_xss($field['description']),
  );
  $element['languages'] = array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#default_value' => isset($defaults['languages']) ? $defaults['languages'] : '',
    '#options' => $languages,
    '#description' => t('Select the language to highlight.'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function prism_field_formatter_info() {
  return array(
    'prism_default' => array(
      'label' => t('Default'),
      'field types' => array('prism'),
    ),
    /*'prism_trim' => array(
      'label' => t('Trim'),
      'field types' => array('prism'),
      'settings'  => array(
        'trim_size' => 600,
      ),
    ),*/
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function prism_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    /*case 'prism_trim':
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => '<div id="prism-' . $delta . '" class="prism-wrapper" rel="' . $item['languages'] . '"><pre><code class="language-' . $item['languages'] . '">' . truncate_utf8($item['codearea'], 600, TRUE, TRUE) . '</code></pre></div>',
        );
      }
    break;*/
    case 'prism_default':
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => '<div id="prism-' . $delta . '" class="prism-wrapper" rel="' . $item['languages'] . '"><pre><code class="language-' . $item['languages'] . '">' . htmlspecialchars($item['codearea']) . '</code></pre></div>',
        );
      }
    break;
  }

  return $elements;
}

/**
 * Implements hook_field_is_empty().
 */
function prism_field_is_empty($item, $field) {
  return empty($item['codearea']);
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 *
 * @description
 *  Prevents CKEditor from encoding html entities, such as ampersands.
 *  @https://drupal.org/node/803562#comment-5630546
*/
function prism_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    $settings['entities'] = FALSE;
    $settings['basicEntities'] = FALSE;
    $settings['disableReadonlyStyling'] = TRUE;
  }
}
