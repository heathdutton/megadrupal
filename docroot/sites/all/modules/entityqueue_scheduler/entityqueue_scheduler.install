<?php
/**
 * @file
 * Entityqueue Scheduler installation and update functions.
 */

/**
 * Implements hook_schema_alter().
 */
function entityqueue_scheduler_schema_alter(&$schema) {
  if (isset($schema['entityqueue_subqueue'])) {
    $schema['entityqueue_subqueue']['fields']['scheduler_date'] = array(
      'description' => 'The date this subqueue is scheduled to be published.',
      'type' => 'varchar',
      'length' => 32,
      'not null' => FALSE,
      'default' => NULL,
    );
  }
}

/**
 * Implements hook_install().
 */
function entityqueue_scheduler_install() {
  $schema['entityqueue_subqueue'] = array();
  entityqueue_scheduler_schema_alter($schema);
  db_add_field('entityqueue_subqueue', 'scheduler_date', $schema['entityqueue_subqueue']['fields']['scheduler_date']);
  db_add_index('entityqueue_subqueue', 'scheduler_date', array('scheduler_date'));
}

/**
 * Implements hook_uninstall().
 */
function entityqueue_scheduler_uninstall() {
  db_drop_index('entityqueue_subqueue', 'scheduler_date');
  db_drop_field('entityqueue_subqueue', 'scheduler_date');
}

/**
 * Adds scheduler_date field to subqueue table and updates legacy subqueues.
 */
function entityqueue_scheduler_update_7000(&$sandbox) {
  if (!isset($sandbox['position'])) {
    $sandbox['position'] = 0;
    $sandbox['max'] = db_select('entityqueue_subqueue', 'sq')
      ->condition('sq.module', 'entityqueue_scheduler')
      ->countQuery()->execute()->fetchField();

    // Add scheduler_date field.
    $schema['entityqueue_subqueue'] = array();
    entityqueue_scheduler_schema_alter($schema);
    db_add_field('entityqueue_subqueue', 'scheduler_date', $schema['entityqueue_subqueue']['fields']['scheduler_date']);
    db_add_index('entityqueue_subqueue', 'scheduler_date', array('scheduler_date'));
  }

  $limit = 20;
  $query = db_select('entityqueue_subqueue', 'sq')
    ->fields('sq', array('subqueue_id', 'label', 'data'))
    ->condition('sq.module', 'entityqueue_scheduler');
  $alias = $query->innerJoin('entityqueue_queue', 'q', 'sq.queue=q.name');
  $query->addField($alias, 'label', 'queue_label');
  $subqueues = $query->orderBy('sq.subqueue_id')
    ->range($sandbox['position'], $limit)
    ->execute();
  foreach ($subqueues as $subqueue) {
    $subqueue->data = unserialize($subqueue->data);
    if (isset($subqueue->data['date'])) {
      $year = $subqueue->data['date']['year'];
      $month = $subqueue->data['date']['month'];
      $day = $subqueue->data['date']['day'];
      $timezone = date_default_timezone(FALSE);
      $date_object = new DateObject("$year-$month-$day 00:00", $timezone);
      $subqueue->scheduler_date = $date_object->format(DATE_FORMAT_DATETIME);
    }
    else {
      $subqueue->scheduler_date = NULL;
    }
    db_update('entityqueue_subqueue')
      ->fields(array(
        'scheduler_date' => $subqueue->scheduler_date,
        'label' => $subqueue->queue_label . ': ' . $subqueue->label,
      ))
      ->condition('subqueue_id', $subqueue->subqueue_id)
      ->execute();
  }
  $sandbox['position'] += $limit;

  if ($sandbox['position'] >= $sandbox['max']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = $sandbox['position'] / $sandbox['max'];
  }
}
