<?php
/**
 * @file
 * Main functionality of the Deputise module.
 */

define('DEPUTISE_SETTINGS_PATH', 'admin/config/people/deputise');

define('DEPUTISE_MODULES_MODE_DEFAULT',        'whitelist');

// this list of defaults is fairly arbitrary
define('DEPUTISE_MODULE_LIST_DEFAULT', <<<EOL
aggregator
block
blog
book
color
comment
contact
field
file
forum
image
list
number
overlay
poll
search
text
EOL
);
define('DEPUTISE_FORM_ITEM_PREFIX',     '1[deputise-'   );  // the 1[ prefix was originally to avoid wrestling with the dummy checkbox stuff in user.permissions.js
define('DEPUTISE_FORM_STATE_PREFIX',    '1_deputise-'   );  // but when we see the prefix in $form_state['input'] the [ has been changed to an _

/**
 * Implements hook_permission().
 */
function deputise_permission() {
  return array(
    'administer deputise module list' => array(
      'title'           => t('Administer Deputise module list'),
      'description'     => t('See all modules, and decide which ones can be controlled by users without this permission.'),
      'restrict access' => TRUE
    ),
    'administer deputise settings' => array(
      'title'           => t('Administer Deputise settings'),
      'description'     => t('Change the way Deputise works.'),
      'restrict access' => TRUE
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function deputise_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  //drupal_set_message($form_id);
  switch ($form_id) {
    case 'system_modules':
      if (!isset($form['modules'])) {
        // sometimes the form doesn't contain a list of modules
        //  e.g. confirmation of enabling dependencies
        //  if this is the case, we've nothing to do (and will cause errors if we try and iterate through the list)
        break;
      }
      $list_mode = variable_get('deputise_modules_mode', DEPUTISE_MODULES_MODE_DEFAULT);
      $list = _deputise_module_list();
      //dpm($form, 'before');
      if (user_access('administer deputise module list', $user)) {
        // present the user with the interface to administer the module list
        deputise_show_info_message('modules', $list_mode);
        drupal_add_css(drupal_get_path('module', 'deputise') . '/deputise.css');
        $group_keys = element_children($form['modules']);
        foreach ($group_keys as $group) {
          $module_keys = element_children($form['modules'][$group]);
          foreach ($module_keys as $name) {
            $form['modules'][$group][$name]['links']['deputise']['#type']          = 'checkbox';
            $form['modules'][$group][$name]['links']['deputise']['#name']          = DEPUTISE_FORM_ITEM_PREFIX . $name;
            $form['modules'][$group][$name]['links']['deputise']['#prefix']        = '<div class="deputise-checkbox-wrapper">';
            $form['modules'][$group][$name]['links']['deputise']['#suffix']        = '</div>';
            $form['modules'][$group][$name]['links']['deputise']['#title']         = t('Deputise?');
            $form['modules'][$group][$name]['links']['deputise']['#default_value'] = in_array($name, $list);  // lookup stored values
          }
        }
        $form['#validate'][] = 'deputise_module_list_validate';
        $form['#submit'][]   = 'deputise_module_list_submit';
      }
      else {
        $hidden_modules = array();
        $group_keys = element_children($form['modules']);
        foreach ($group_keys as $group) {
          $module_keys = element_children($form['modules'][$group]);
          foreach ($module_keys as $name) {
            $module = $form['modules'][$group][$name];
            if (in_array($name, $list) xor ($list_mode == 'whitelist')) {
              $hidden_modules[$name] = $module;
              unset($form['modules'][$group][$name]);
              if (isset($module['enable']['#default_value']) && ($module['enable']['#default_value'] == 1)) {
                $form['modules'][$group][$name]['enable']['#type']  = 'value';
                $form['modules'][$group][$name]['enable']['#value'] = $module['enable']['#default_value'];
              }
            }
          }
        }
        if (count($hidden_modules)) {
          $form['hidden_modules'] = array('#type' => 'value', '#value' => $hidden_modules);
          $form['#validate'][] = 'deputise_deputised_module_validate';
        }
      }
      //dpm($form, 'after');
    break;
  }
}

/**
 * Show an explanatory message on admin forms where we've added checkboxes
 *
 * @param $type
 *  which type of form we've affected e.g. 'modules' or 'permissions'
 *
 * @param $list_mode
 *  'whitelist' or 'blacklist' - explanation is different for each combination
 */
function deputise_show_info_message($type, $list_mode) {
  $replacements = array(
    '%whitelist'              => t('Whitelist'),
    '%blacklist'              => t('Blacklist'),
    '%deputise_checkbox'      => t('Deputise?'),
    '!modules_mode'           => l(t('Module list mode'), DEPUTISE_SETTINGS_PATH),
    '%modules_permission'     => t('Administer deputise module list'),
  );
  switch ($type) {
    case 'modules':
      if ($list_mode == 'whitelist') {
        $message = t('Deputise !modules_mode is currently set to %whitelist, so only the modules with %deputise_checkbox checked will be available to users who are able to use this page, but do not have the %modules_permission permission.',
          $replacements);
      }
      else {
        $message = t('Deputise !modules_mode is currently set to %blacklist, so modules with %deputise_checkbox checked will be hidden from users who are able to use this page, but do not have the %modules_permission permission.',
          $replacements);
      }
    break;
  }
  if ($message) {
    drupal_set_message($message, 'status', FALSE);
  }
}

/**
 * Fetch the module list
 *
 * @return
 *  An array
 */
function _deputise_module_list() {
  $list = variable_get('deputise_module_list', explode("\n", DEPUTISE_MODULE_LIST_DEFAULT));
  if (!is_array($list)) {
    $list = array();
  }
  return $list;
}

/**
 * Validation for module form (when submitted by user without deputise permission)
 */
function deputise_deputised_module_validate($form, &$form_state) {
  if ($dependencies = deputise_calculate_module_dependencies($form_state)) {
    $form_state = $dependencies;
  }
  else {
    // no dependencies were identified, so leave $form_state alone and get out of here
    return;
  }
  // get the names of any modules which were hidden
  $hidden_modules = array();
  if (isset($form_state['complete form']['hidden_modules']['#value']) && is_array($form_state['complete form']['hidden_modules']['#value'])) {
    foreach ($form_state['complete form']['hidden_modules']['#value'] as $hidden_module) {
      $hidden_modules = array_merge($hidden_modules, array_values($hidden_module['name']));
    }
  }
  else {
    return;
  }
  // check any dependencies which are going to be enabled against the list of modules which were hidden
  $denied_dependencies = array();
  if (isset($form_state['storage']['more_required']) && is_array($form_state['storage']['more_required'])) {
    foreach ($form_state['storage']['more_required'] as $required) {
      if (count($denied = array_intersect($required['requires'], $hidden_modules))) {
        $denied_dependencies[$required['name']] = $denied;
      }
    }
    // todo: any reason not to set the error messages in the loop above?
    if (count($denied_dependencies)) {
      foreach ($denied_dependencies as $name => $deps) {
        $t_argument = array(
            '@module' => $name,
            '@dependencies' => implode(', ', $deps),
          );
        $error = format_plural(count($deps),
            '@module module depends on @dependencies module but you do not have permission to enable it.',
            '@module module depends on @dependencies modules but you do not have permission to enable them.', $t_argument);
        form_set_error('deputise-' . $name, $error);
      }
    }
  }
}

/**
 * Validation for module form (when submitted by user with deputise permission)
 */
function deputise_module_list_validate($form, &$form_state) {
  //dpm($form_state);
  // enforce at least one module must be deputised
  //  otherwise system module throws errors / warnings as it doesn't expect an empty module list
  // todo: check if this is necessary in D7, as system module doesn't actually get an empty list?
  $num_deputised_modules = 0;
  $prefix_len = drupal_strlen(DEPUTISE_FORM_STATE_PREFIX);
  foreach ($form_state['input'] as $key => $status) {
    if (drupal_substr($key, 0, $prefix_len) == DEPUTISE_FORM_STATE_PREFIX) {
      if ($status == 1) {
        $num_deputised_modules ++;
      }
    }
  }
  if ($num_deputised_modules == 0) {
    // doesn't look like there's a particularly clean way of setting errors on all deputise? checkboxes
    //  see: http://drupal.org/node/155695
    form_set_error('deputise', t('At least one module must be deputised.'));  // arbitrary form element name
    // todo: add a better explanation, and some suggestions?
    // todo: could loop through and set form errors on all our checkboxes?
  }
}

/**
 * Store settings when module form has been submitted
 */
function deputise_module_list_submit($form, &$form_state) {
  // todo: we seem to also be polluting the form_state with e.g.
  //  $form['input']['aggregator']['links']['permissions']['deputise'] = NULL;
  // so look for these and unset them?
  $list = array();
  $prefix_len = drupal_strlen(DEPUTISE_FORM_STATE_PREFIX);
  foreach ($form_state['input'] as $key => $status) {
    if (drupal_substr($key, 0, $prefix_len) == DEPUTISE_FORM_STATE_PREFIX) {
      if ($status == 1) {
        $list[] = drupal_substr($key, $prefix_len);
      }
    }
  }
  variable_set('deputise_module_list', $list);
}

/**
 * Implements hook_theme_registry_alter().
 */
function deputise_theme_registry_alter(&$theme_registry) {
  //dpm($theme_registry);
  // replace the system and user modules' theme functions
  $theme_registry['system_modules_fieldset']['function'] = 'deputise_system_modules_fieldset';
}

/**
 * Returns HTML for the modules form.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function deputise_system_modules_fieldset($variables) {
  $form = $variables['form'];

  // provide a new header to accomdate our extra operations column
  $header = array(
    array('data' => t('Enabled'), 'class' => array('checkbox')),
    t('Name'),
    t('Version'),
    t('Description'),
    array('data' => t('Operations'), 'colspan' => 4)
  );

  // Individual table headers.
  $rows = array();
  // Iterate through all the modules, which are
  // children of this fieldset.
  foreach (element_children($form) as $key) {
    // Stick it into $module for easier accessing.
    $module = $form[$key];
    if (isset($module['enable']['#type']) && ($module['enable']['#type'] == 'value')) {
      // skip entries in the form which are just placeholders to ensure hidden modules stay enabled
      continue;
    }
    $row = array();
    unset($module['enable']['#title']);
    $row[] = array('class' => array('checkbox'), 'data' => drupal_render($module['enable']));
    $label = '<label';
    if (isset($module['enable']['#id'])) {
      $label .= ' for="' . $module['enable']['#id'] . '"';
    }
    $row[] = $label . '><strong>' . drupal_render($module['name']) . '</strong></label>';
    $row[] = drupal_render($module['version']);
    // Add the description, along with any modules it requires.
    $description = drupal_render($module['description']);
    if ($module['#requires']) {
      $description .= '<div class="admin-requirements">' . t('Requires: !module-list', array('!module-list' => implode(', ', $module['#requires']))) . '</div>';
    }
    if ($module['#required_by']) {
      $description .= '<div class="admin-requirements">' . t('Required by: !module-list', array('!module-list' => implode(', ', $module['#required_by']))) . '</div>';
    }
    $row[] = array('data' => $description, 'class' => array('description'));
    // Display links (such as help or permissions) in their own columns.
    foreach (array('help', 'permissions', 'configure', 'deputise') as $key) {
      $row[] = array('data' => drupal_render($module['links'][$key]), 'class' => array($key));
    }
    $rows[] = $row;
  }
  return $output = theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Implements hook_menu().
 */
function deputise_menu() {
  $items = array();
  $items[DEPUTISE_SETTINGS_PATH] = array(
    'title' => 'Deputise settings',
    'description' => 'Change Deputise settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('deputise_admin_settings'),
    'access arguments' => array('administer deputise settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Form builder. Configure Deputise.
 *
 * @ingroup forms
 * @see system_settings_form()
 */
function deputise_admin_settings() {
  $form = array();

  $form['modules'] = array(
    '#type' => 'fieldset',
    '#title' => 'Modules',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('The actual list of modules is set on the !modules_page',
      array('!modules_page' => l(t('Modules page'), 'admin/modules'))),
  );
  $form['modules']['deputise_modules_mode'] = array(
    '#title' => 'Module list mode',
    '#description' => t('Display only the selected modules (%whitelist), or hide them (%blacklist)',
                          array('%whitelist' => t('whitelist'), '%blacklist' => t('blacklist'))),
    '#type' => 'radios',
    '#options' => array('whitelist' => t('whitelist'), 'blacklist' => t('blacklist')),
    '#default_value' => variable_get('deputise_modules_mode', DEPUTISE_MODULES_MODE_DEFAULT),
  );

  $form = system_settings_form($form);
  return $form;
}

/**
 * Helper function to preempt system_modules_submit()
 *  in order that we can validate any dependencies which are going to be enabled
 *  but that our deputised user may not have permission to enable.
 *
 * This code is copied almost verbatim from system_modules_submit()
 *  with only the return at the end changed.
 *
 * The call to system_rebuild_module_data() should populate the static cache
 *  for later use by the submit function if we allow the processing to proceed.
 *
 * @param $form_state
 *  as passed to form's validate function
 *
 * @return
 *  either the $form_state array with the dependency data added
 *  or FALSE if no dependencies were identified
 *
 */
function deputise_calculate_module_dependencies($form_state) {
  // Builds list of modules.
  $modules = array();
  // If we're not coming from the confirmation form, build the list of modules.
  if (empty($form_state['storage'])) {
    // If we're not coming from the confirmation form, build the module list.
    foreach ($form_state['values']['modules'] as $group_name => $group) {
      foreach ($group as $module => $enabled) {
        $modules[$module] = array('group' => $group_name, 'enabled' => $enabled['enable']);
      }
    }
  }
  else {
    // If we are coming from the confirmation form, fetch
    // the modules out of $form_state.
    $modules = $form_state['storage']['modules'];
  }

  // Collect data for all modules to be able to determine dependencies.
  $files = system_rebuild_module_data();

  // Sorts modules by weight.
  $sort = array();
  foreach (array_keys($modules) as $module) {
    $sort[$module] = $files[$module]->sort;
  }
  array_multisort($sort, $modules);

  // Makes sure all required modules are set to be enabled.
  $more_required = array();
  $missing_modules = array();
  foreach ($modules as $name => $module) {
    if ($module['enabled']) {
      // Checks that all dependencies are set to be enabled.  Stores the ones
      // that are not in $dependencies variable so that the user can be alerted
      // in the confirmation form that more modules need to be enabled.
      $dependencies = array();
      foreach (array_keys($files[$name]->requires) as $required) {
        if (empty($modules[$required]['enabled'])) {
          if (isset($files[$required])) {
            $dependencies[] = $files[$required]->info['name'];
            $modules[$required]['enabled'] = TRUE;
          }
          else {
            $missing_modules[$required]['depends'][] = $name;
            $modules[$name]['enabled'] = FALSE;
          }
        }
      }

      // Stores additional modules that need to be enabled in $more_required.
      if (!empty($dependencies)) {
        $more_required[$name] = array(
          'name' => $files[$name]->info['name'],
          'requires' => $dependencies,
        );
      }
    }
  }

  // Redirects to confirmation form if more modules need to be enabled.
  if ((!empty($more_required) || !empty($missing_modules)) && !isset($form_state['values']['confirm'])) {
    $form_state['storage'] = array(
      'more_required' => $more_required,
      'modules' => $modules,
      'missing_modules' => $missing_modules,
    );
    $form_state['rebuild'] = TRUE;
    return $form_state;
  }
  else {
    return FALSE;
  }
}
