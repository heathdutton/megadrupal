<?php

/**
 * @file
 * Twitch.tv codec for the video filter.
 */

/**
 * Implements hook_codec_info().
 */
function video_filter_twitch_codec_info() {
  $codecs = array();

  $codecs['twitch'] = array(
    'name' => t('Twitch'),
    'sample_url' => 'http://www.twitch.tv/allodsonline',
    'callback' => 'video_filter_twitch_handle_video',
    'regexp' => array(
      '/twitch\.tv\/((?!directory)[a-z0-9\-_]+)\/b\/([\d]+)/i',
      '/twitch\.tv\/((?!directory)[a-z0-9\-_]+)/i',
    ),
    'ratio' => 16 / 9,
    'control_bar_height' => 30,
  );

  return $codecs;
}

/**
 * Callback for Twitch Video codec.
 *
 * @see video_filter_codec_info()
 */
function video_filter_twitch_handle_video($video) {
  $params = array(
    'allowScriptAccess' => 'always',
    'allowNetworking' => 'all',
    'flashvars' => array(
      'hostname' => 'www.twitch.tv',
      'channel' => $video['codec']['matches'][1],
      'auto_play' => $video['autoplay'] ? 'true' : 'false',
      'start_volume' => '25',
    ),
  );

  if (!empty($video['start_volume']) && intval($video['start_volume'])) {
    $params['flashvars']['start_volume'] = $video['start_volume'];
  }

  if (!empty($video['time'])) {
    $params['flashvars']['initial_time'] = $video['time'];
  }

  if (isset($video['codec']['matches'][2]) && intval($video['codec']['matches'][2])) {
    // Archiv video.
    $video['source'] = '//www.twitch.tv/widgets/archive_embed_player.swf';
    $params['movie'] = 'http://www.twitch.tv/widgets/archive_embed_player.swf';
    $params['flashvars']['archive_id'] = $video['codec']['matches'][2];
  }
  else {
    // Live stream.
    $video['source'] = '//www.twitch.tv/widgets/live_embed_player.swf?channel=' . $video['codec']['matches'][1];
    $params['movie'] = 'http://www.twitch.tv/widgets/live_embed_player.swf';
  }

  $params['flashvars'] = http_build_query($params['flashvars']);

  return video_filter_flash($video, $params);
}
