<?php

/**
 * @file
 * TestSwarm Test Forms.
 * @TODO: http://drupal.org/node/1015798
 */

/**
 * Implements hook_menu().
 */
function testswarm_forms_menu() {
  $items = array();

  $items['testswarm-form1'] = array(
    'title' => 'Test multiple radio',
    'description' => 'Test multiple radio.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testswarm_forms_form1'),
    'access arguments' => array('access content'),
  );

  $items['testswarm-form-test-collapsible-fields'] = array(
    'title' => 'Test collapsible fields',
    'description' => 'Test collapsible fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testswarm_forms_test_collapsible_fields'),
    'access arguments' => array('access content'),
  );

  $items['testswarm-form-test-autocomplete'] = array(
    'title' => 'Test autocomplete',
    'description' => 'Test autocomplete.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testswarm_forms_test_autocomplete'),
    'access arguments' => array('access content'),
  );

  $items['testswarm-form-test-autocomplete-callback'] = array(
    'title' => 'Test autocomplete callback',
    'description' => 'Test autocomplete callback.',
    'type' => MENU_CALLBACK,
    'page callback' => 'testswarm_forms_test_autocomplete_callback',
    'access arguments' => array('access content'),
  );

  $items['testswarm-form-test-machine-name'] = array(
    'title' => 'Test machine name',
    'description' => 'Test machine name.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testswarm_forms_test_machine_name'),
    'access arguments' => array('access content'),
  );

  $items['testswarm-form-test-tableselect'] = array(
    'title' => 'Test tableselect',
    'description' => 'Test tableselect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testswarm_forms_test_tableselect'),
    'access arguments' => array('access content'),
  );

  $items['testswarm-form-test-states'] = array(
    'title' => 'Test states',
    'description' => 'Test states',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testswarm_forms_test_states'),
    'access arguments' => array('access content'),
  );

  $items['drupal-ajax-1473314'] = array(
    'title' => 'Drupal ajax example',
    'access callback' => TRUE,
    'page callback' => 'testswarm_forms_drupal_ajax_page',
  );
  $items['drupal-ajax-1473314/%/%'] = array(
    'access callback' => TRUE,
    'page callback' => 'testswarm_forms_drupal_ajax_responder',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function testswarm_forms_form1($form_state) {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test multiple radio.') . '</strong></p>',
  );

  $form['radios_test'] = array(
    '#type' => 'radios',
    '#title' => 'test',
    '#options' => array(
      0 => 'cat',
      1 => 'dog',
      2 => 'turkey',
      3 => 'chicken',
    ),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#weight' => 100
  );

  return $form;
}

function testswarm_forms_test_collapsible_fields() {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test collapsible fields.') . '</strong></p>',
  );

  $form['fieldset1'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fieldset 1 - Collapsible and not collapsed'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
    $form['fieldset1']['text1'] = array(
      '#type' => 'textfield',
      '#title' => t('Text'),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
    );

  $form['fieldset2'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fieldset 2 - Collapsible and collapsed'),
    '#weight' => 10,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
    $form['fieldset2']['text2'] = array(
      '#type' => 'textfield',
      '#title' => t('Text'),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
    );

  $form['fieldset3'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fieldset 3 - Not collapsible and not collapsed'),
    '#weight' => 15,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
    $form['fieldset3']['text3'] = array(
      '#type' => 'textfield',
      '#title' => t('Text'),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
    );

  $form['fieldset4'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fieldset 4 - Not collapsible and collapsed'),
    '#weight' => 20,
    '#collapsible' => FALSE,
    '#collapsed' => TRUE,
  );
    $form['fieldset4']['text4'] = array(
      '#type' => 'textfield',
      '#title' => t('Text'),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
    );

  // The following 2 fieldset will break javascript, @see http://drupal.org/node/1482636
  /*
  $form['fieldset5'] = array(
    '#type' => 'fieldset',
    //'#title' => t('Fieldset 5 - Collapsible and not collapsed'),
    '#description' => t('Fieldset 5 - Collapsible and not collapsed'),
    '#weight' => 25,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
    $form['fieldset5']['text5'] = array(
      '#type' => 'textfield',
      '#title' => t('Text'),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
    );

  $form['fieldset6'] = array(
    '#type' => 'fieldset',
    // '#title' => t('Fieldset 6 - Collapsible and collapsed'),
    '#description' => t('Fieldset 6 - Collapsible and collapsed'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
    $form['fieldset6']['text6'] = array(
      '#type' => 'textfield',
      '#title' => t('Text'),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
    );
  */

  return $form;
}

function testswarm_forms_test_autocomplete() {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test autocomplete.') . '</strong></p>',
  );

  $form['text1'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_path' => 'testswarm-form-test-autocomplete-callback',
    '#required' => TRUE,
  );

  return $form;
}

function testswarm_forms_test_autocomplete_callback($string = '') {
  static $possible_matches = array(
    'aaa' => 'aaa',
    'aaabbb' => 'aaabbb',
    'bbb' => 'bbb',
    'ccc' => 'ccc',
  );
  $matches = array();
  if ($string) {
    foreach ($possible_matches as $key => $value) {
      if (strpos($value, $string) !== FALSE) {
        $matches[$key] = $value;
      }
    }
  }

  drupal_json_output($matches);
}

function testswarm_forms_test_machine_name() {

  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test machine name.') . '</strong></p>',
  );

  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => '',
    '#required' => TRUE,
    '#size' => 30,
  );

  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => '',
    '#maxlength' => 10,
    '#machine_name' => array(
      'exists' => 'node_type_load',
    ),
  );

  $form['second'] = array(
    '#title' => t('Second'),
    '#type' => 'textfield',
    '#default_value' => 'default',
    '#required' => TRUE,
    '#size' => 30,
  );

  $form['second_machine'] = array(
    '#type' => 'machine_name',
    '#default_value' => '',
    '#maxlength' => 10,
    '#machine_name' => array(
      'exists' => 'node_type_load',
      'source' => array('second'),
    ),
  );

  return $form;
}

function testswarm_forms_test_tableselect() {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test tableselect.') . '</strong></p>',
  );

  $header = array(
    'title' => t('Title'),
    'description' => t('Description'),
  );
  for ($i=0; $i < 10; $i++) {
    $options[$i] = array(
      'title' => t('Item !n', array('!n' => $i + 1)),
      'description' => t('Description for Item !n', array('!n' => $i + 1)),
    );
  }
  $form['tableselect'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
  );
  return $form;
}

function testswarm_forms_test_states() {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test states.') . '</strong></p>',
    'states_tested' => array(
      '#theme' => 'item_list',
      '#title' => t('The following states are tested:'),
      '#items' => array(
        'enabled',
        'disabled',
        'required',
        'optional',
        'visible',
        'invisible',
        'checked',
        'unchecked',
        'expanded',
        'collapsed',
      ),
    ),
    'conditions_tested' => array(
      '#theme' => 'item_list',
      '#title' => t('The following conditions are tested:'),
      '#items' => array(
        'empty',
        'filled',
        'checked',
        'unchecked',
        'expanded',
        'collapsed',
        'value',
      ),
    ),
  );
  $form['text1'] = array(
    '#type' => 'textfield',
    '#title' => t('Text1'),
    '#description' => t('Type something to change the text below.'),
    '#states' => array(
      'optional' => array(
        ':input[name="optionaltext1"]' => array('checked' => TRUE),
      ),
      'disabled' => array(
        ':input[name="disabletext1"]' => array('checked' => TRUE),
      ),
      'invisible' => array(
        ':input[name="hidetext1"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['item1'] = array(
    '#type' => 'item',
    '#markup' => t('Text1 is empty'),
    '#states' => array(
      'visible' => array(
        ':input[name="text1"]' => array('empty' => TRUE),
      ),
    ),
  );
  $form['item2'] = array(
    '#type' => 'item',
    '#markup' => t('Text1 is not empty'),
    '#states' => array(
      'visible' => array(
        ':input[name="text1"]' => array('filled' => TRUE),
      ),
    ),
  );
  $form['optionaltext1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make text1 optional'),
  );
  $form['disabletext1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable text1'),
  );
  $form['hidetext1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide text1'),
  );

  $form['text2'] = array(
    '#type' => 'textfield',
    '#title' => t('Text2'),
    '#states' => array(
      'visible' => array(
        ':input[name="showtext2"]' => array('checked' => TRUE),
      ),
      'enabled' => array(
        ':input[name="enabletext2"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="requiredtext2"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['showtext2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show text2'),
  );
  $form['enabletext2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable text2'),
  );
  $form['requiredtext2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make text2 required'),
  );
  $form['checkbox1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Checbox1'),
    '#states' => array(
      'checked' => array(
        ':input[name="checkcheckbox1"]' => array('filled' => TRUE),
      ),
    ),
  );
  $form['checkcheckbox1'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter something to check Checkbox1'),
  );
  $form['checkbox2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Checbox2'),
    '#states' => array(
      'unchecked' => array(
        ':input[name="uncheckcheckbox2"]' => array('empty' => TRUE),
      )
    )
  );
  $form['uncheckcheckbox2'] = array(
    '#type' => 'textfield',
    '#title' => t('Remove text to uncheck Checkbox2'),
    '#default_value' => t('Delete me')
  );
  $form['fieldset1'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fieldset1'),
    '#collapsible' => TRUE,
    '#states' => array(
      'collapsed' => array(
        ':input[name="collapsefieldset1"]' => array('value' => 'collapse'),
      ),
    ),
  );
  $form['fieldset1']['item'] = array(
    '#type' => 'item',
    '#title' => t('Do you seee me?'),
    '#markup' => t('If you can see me the fieldset is not collapsed!'),
  );
  $form['fieldset2'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fieldset2'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#states' => array(
      'expanded' => array(
        ':input[name="expandfieldset2"]' => array('value' => 'expand'),
      ),
    ),
  );
  $form['fieldset2']['item'] = array(
    '#type' => 'item',
    '#title' => t('Do you seee me?'),
    '#markup' => t('If you can see me the fieldset is not collapsed!'),
  );
  $form['collapsefieldset1'] = array(
    '#type' => 'textfield',
    '#title' => t('Change fieldset state'),
    '#description' => t("Type 'collapse' to collapse Fieldset1"),
  );
  $form['expandfieldset2'] = array(
    '#type' => 'textfield',
    '#title' => t('Change fieldset state'),
    '#description' => t("Type 'expand' to expand Fieldset2."),
  );



  return $form;
}

function testswarm_forms_testswarm_tests() {
  return array(
    'testswarm_forms_radios' => array(
      'module' => 'core',
      'description' => 'Test for illegal radio, http://drupal.org/node/811542, can fail in Stark with FF11',
      'js' => array(
        drupal_get_path('module', 'testswarm_forms') . '/testswarm_forms.radios.test.js' => array(),
      ),
      'path' => 'node/add/radios-test',
      'query' => array(),
    ),
    'testswarm_forms_collapse' => array(
      'module' => 'core',
      'description' => 'Test for collapsible fieldsets, need some more test cases.',
      'js' => array(
        drupal_get_path('module', 'testswarm_forms') . '/testswarm_forms.collapse.test.js' => array(),
      ),
      'path' => 'testswarm-form-test-collapsible-fields',
      'query' => array(),
    ),
    'testswarm_forms_autocomplete' => array(
      'module' => 'core',
      'description' => 'Test for autocomplete, this fails sometimes probably because of how the test is written.',
      'js' => array(
        drupal_get_path('module', 'testswarm') . '/libs/jquery.simulate.js' => array(),
        drupal_get_path('module', 'testswarm_forms') . '/testswarm_forms.autocomplete.test.js' => array(),
      ),
      'path' => 'testswarm-form-test-autocomplete',
      'query' => array(),
    ),
    'testswarm_forms_machinename' => array(
      'module' => 'core',
      'description' => 'Test for machine name. Should pass in all browsers.',
      'js' => array(
        drupal_get_path('module', 'testswarm_forms') . '/testswarm_forms.machinename.test.js' => array(),
      ),
      'path' => 'testswarm-form-test-machine-name',
      'query' => array(),
    ),
    'testswarm_forms_tableselect' => array(
      'module' => 'core',
      'description' => 'Test for table select. Should pass in all browsers.',
      'js' => array(
        drupal_get_path('module', 'testswarm_forms') . '/testswarm_forms.tableselect.test.js' => array(),
      ),
      'path' => 'testswarm-form-test-tableselect',
      'query' => array(),
    ),
    'testswarm_forms_states' => array(
      'module' => 'core',
      'description' => 'Test for form states. Fails in older browsers.',
      'js' => array(
        drupal_get_path('module', 'testswarm_forms') . '/testswarm_forms.states.test.js' => array(),
      ),
      'path' => 'testswarm-form-test-states',
      'query' => array(),
    ),
    'testswarm_forms_i1473314' => array(
      'module' => 'core',
      'description' => 'This test will fail until http://drupal.org/node/1473314 is committed.',
      'js' => array(
        drupal_get_path('module', 'testswarm_forms') . '/testswarm_forms.1473314.test.js' => array(),
      ),
      'path' => 'drupal-ajax-1473314',
      'query' => array(),
    ),
  );
}


function testswarm_forms_drupal_ajax_responder($js, $selector_index) {

  if ('ajax' == $js) {
    $selector_map = array(
      'base_unique' => '#base_unique',
      'base_multiple' => '#base_multiple',
      'selector_unique' => '.selector-unique',
      'selector_multiple' => '.selector-multiple',
    );
    $commands = array();
    $selector = $selector_map[$selector_index];
    $html     = '<span class="' . $selector_index . '">Hello world from ajax for ' . $selector_index . '</span>';
    $commands[] = ajax_command_after($selector, $html);
    print ajax_render($commands);
    ajax_footer();
    exit();
  }
  else {
    return $js;
  }
}

function testswarm_forms_drupal_ajax_page() {
  drupal_add_library('system', 'drupal.ajax');

  $page = array();

  // base only: unique element
  $page['base_unique'] = array(
    '#prefix' => '<div id="base_unique">',
    '#markup' => '* Only base unique',
    '#suffix' => '</div>',
  );
  drupal_add_js(array(
    'ajax' => array(
      'base_unique' => array(
        'url' => 'drupal-ajax-1473314/nojs/base_unique',
        'event' => 'click',
      ),
    ),
  ), 'setting');

  // base only: multiple elements
  $page['base_multiple'][] = array(
    '#prefix' => '<div id="base_multiple">',
    '#markup' => '* First base multiple',
    '#suffix' => '</div>',
  );
  $page['base_multiple'][] = array(
    '#prefix' => '<div id="base_multiple">',
    '#markup' => '* Second base multiple',
    '#suffix' => '</div>',
  );
  drupal_add_js(array(
    'ajax' => array(
      'base_multiple' => array(
        'url' => 'drupal-ajax-1473314/nojs/base_multiple',
        'event' => 'click',
      ),
    ),
  ), 'setting');

  // selector only: unique element
/**
 * This breaks existing Drupal.behaviors.AJAX.attach()
 * attach() relies on unique ID of the element to avoid
 * attaching ajax behavior more than once.
 * Because it is perfectly "legal" to provide custom selector
 * to an element without element ID ever existing, this means
 * the killswitch never breaks multiple re-attachments of the behavior.
 *
 * Solution:
 * Move this code outside of $(base + .ajax-processed) kill switch
 *       if (typeof element_settings.selector == 'undefined') {
 *         element_settings.selector = '#' + base;
 *       }
 *
 * Replace all occurenses of "base" with a different uniqueness-selector.
 * This means there needs to be "var new_base", that combines
 * both element_settings.selector (after it was potentialy initualized with #+base,
 * and a uniqueness resolver. similarly to how jquery.once.js handles uuid.
 *
 *
 */
  $page['selector_unique'] = array(
    '#prefix' => '<div class="selector-unique">',
    '#markup' => '* Only selector unique',
    '#suffix' => '</div>',
  );
  drupal_add_js(array(
    'ajax' => array(
      'selector_unique' => array(
        'selector' => '.selector-unique',
        'url' => 'drupal-ajax-1473314/nojs/selector_unique',
        'event' => 'click',
      ),
    ),
  ), 'setting');



  // selector only: multiple elements
  /* *
   * This has the same problem as described in selector_unique above with aditional one.
   * Because selector is now not unique, all matched elements get to share
   * one Drupal.ajax instance/handler. More correctly...
   * 1) each matched DOM element gets is initialized and bound to trigger event.
   * 2) Drupal.ajax[base] is lost/overridden for all except final matched
   *    DOM element based on the element_settings.selector rules.
   *    because of this line: Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);
   *
   * Solution:
   *   Several things need to be discussed.
   *   1) Currently all ajax_command_* operate on $selector parameter. I think that is insufficient.
   *   2) I think we need to introduce a special $selector that refers to "this",
   *      where "this" is the element that triggered AJAX behavior. So for example
   *      i could write ajax_command_replace("this", "[new html]").
   *      This would in turn replace ONE element that was ajax-triggered from within
   *      multiple similar-based-on-selector elements, and leave the rest untouched.
   *   3) For the purpose of converting existing ajax.js to use .once() killswitch
   *      i think we dont need to worry about (2), but i strongly think that is the
   *      direction we need to take (ie, open new issue to solve this).
   *
   */
  $page['selector_multiple'][] = array(
    '#prefix' => '<div class="selector-multiple">',
    '#markup' => '* First selector multiple',
    '#suffix' => '</div>',
  );
  $page['selector_multiple'][] = array(
    '#prefix' => '<div class="selector-multiple">',
    '#markup' => '* Second selector multiple',
    '#suffix' => '</div>',
  );
  drupal_add_js(array(
    'ajax' => array(
      'selector_multiple' => array(
        'selector' => '.selector-multiple',
        'url' => 'drupal-ajax-1473314/nojs/selector_multiple',
        'event' => 'click',
      ),
    ),
  ), 'setting');

  return $page;
}
