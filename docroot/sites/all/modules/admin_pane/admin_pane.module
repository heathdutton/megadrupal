<?php
// $Id: admin_pane.module,v 1.1.2.1 2011/01/28 14:11:50 blixxxa Exp $

/**
 * @file
 * Enables an administration pane.
 */

/**
 * Implements hook_init().
 */
function admin_pane_init() {
  $js = "jQuery(document).ready(function () {
    if (jQuery('body').hasClass('admin-pane')) {
      jQuery('body').css('padding-right', 300);
    }

    if (window.parent.document && jQuery('body', window.parent.document).hasClass('admin-pane')) {
      jQuery('body').css('padding-right', 300);
    }
    });";
  drupal_add_js($js, 'inline');
}

/**
 * Implements hook_library().
 */
function admin_pane_library() {
  $libraries = array();

  $libraries['jstree'] = array(
    'title' => 'jsTree',
    'website' => 'http://www.jstree.com/',
    'version' => '1.0-rc2',
    'js' => array(
      drupal_get_path('module', 'admin_pane') . '/jstree/jquery.jstree.js' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function admin_pane_menu() {
  $items = array();

  $items['admin/config/user-interface/admin-pane'] = array(
    'title' => 'Administration pane',
    'description' => 'Configure the administration pane.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_pane_settings'),
    'access arguments' => array('administer administration pane'),
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 */
function admin_pane_page_alter(&$page) {
  // Attach admin pane.
  $page['page_bottom']['admin_pane'] = array(
    '#pre_render' => array('admin_pane_pre_render'),
    '#access' => user_access('access administration pane'),
  );
}

/**
 * Implements hook_permission().
 */
function admin_pane_permission() {
  return array(
    'administer administration pane' => array(
      'title' => t('Administer Administration pane'),
      'description' => t('Configure Administration pane.'),
    ),
    'access administration pane' => array(
      'title' => t('Access Administration pane'),
      'description' => t('Access and use the administration pane.'),
    ),
  );
}

/**
 * Prerender function for the admin pane.
 */
function admin_pane_pre_render($admin_pane) {
  $admin_pane = array_merge($admin_pane, admin_pane_view());
  return $admin_pane;
}

/**
 * Settings for admin pane.
 */
function admin_pane_settings() {
  $form = array();

  $menus = menu_get_menus();

  $form['admin_pane_menus'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Menus'),
    '#description' => t('Select the menus you want to have available in the admin pane.'),
    '#default_value' => variable_get('admin_pane_menus', array()),
    '#options' => $menus,
  );

  return system_settings_form($form);
}

/**
 * Implement hook_theme().
 */
function admin_pane_theme($existing, $type, $theme, $path) {
  return array(
    'admin_pane' => array(
      'render element' => 'admin_pane',
      'variables' => array(
        'local_tasks' => NULL,
        'tabs' => NULL,
        'menus' => NULL,
      ),
      'template' => 'admin-pane',
    ),
  );
}

/**
 * Custom menu tree output function adjusted to work with jsTree.
 */
function admin_pane_tree_output($tree) {
  $build = array();
  $items = array();

  // Pull out just the menu links we are going to render so that we
  // get an accurate count for the first/last classes.
  foreach ($tree as $data) {
    if ($data['link']['access'] && !$data['link']['hidden']) {
      $items[] = $data;
    }
  }

  $router_item = menu_get_item();
  $num_items = count($items);
  foreach ($items as $i => $data) {

    if ($data['link']['href'] == $router_item['tab_root_href'] && $data['link']['href'] != $_GET['q']) {
      $data['link']['localized_options']['attributes']['class'][] = 'active';
    }

    // Allow menu-specific theme overrides.
    $element['#theme'] = 'menu_link__' . $data['link']['menu_name'];
    $element['#attributes']['id'] = 'menu-' . $data['link']['mlid'];
    $element['#title'] = $data['link']['title'];
    $element['#href'] = $data['link']['href'];
    $element['#localized_options'] = !empty($data['link']['localized_options']) ? $data['link']['localized_options'] : array();
    $element['#below'] = $data['below'] ? admin_pane_tree_output($data['below']) : $data['below'];
    $element['#original_link'] = $data['link'];
    // Index using the link's unique mlid.
    $build[$data['link']['mlid']] = $element;
  }
  if ($build) {
    // Make sure drupal_render() does not re-order the links.
    $build['#sorted'] = TRUE;
    // Add the theme wrapper for outer markup.
    // Allow menu-specific theme overrides.
    $build['#theme_wrappers'][] = 'menu_tree__' . strtr($data['link']['menu_name'], '-', '_');
  }

  return $build;
}

/**
 * Build the admin pane as a structured array ready for drupal_render().
 */
function admin_pane_view() {
  $module_path = drupal_get_path('module', 'admin_pane');

  // Basic structure.
  $build = array(
    '#theme' => 'admin_pane',
    '#attached' => array(
      'js' => array(
        $module_path . '/admin_pane.js',
        $module_path . '/jstree/jquery.jstree.js',
      ),
      'css' => array(
        $module_path . '/admin_pane.css',
      ),
      'library' => array(
        array('system', 'ui.widget'),
        array('system', 'ui.tabs'),
      ),
    ),
  );

  // Local tasks.
  $build['#local_tasks'] =  menu_primary_local_tasks();

  // Menus.
  $menus = array();
  foreach (variable_get('admin_pane_menus', array()) as $key => $menu) {
    if (!$menu) continue;
    $menus[$menu] = admin_pane_tree_output(menu_build_tree($menu));
  }

  $build['#tabs'] = array();
  $build['#menus'] = array();

  if (!empty($menus)) {

    // Tabs.
    foreach ($menus as $key => $menu) {
      $info = menu_load($key);
      $build['#tabs'][$key] = array(
        'href' => '#menu-tab-' . $key,
        'title' => $info['title'],
      );
    }

    reset($menus);

    // Menus.
    foreach ($menus as $key => $menu) {
      $build['#menus'][$key] = array(
        'tab_id' => 'menu-tab-' . $key,
        'content' => $menu,
      );
    }
  }

  return $build;
}
