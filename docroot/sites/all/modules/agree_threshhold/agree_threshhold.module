<?php


/*
 * Imlements entity module hook_field_info
 */
function agree_threshhold_field_info() {
  return array(
    'agree_threshhold' => array(
      'label' => t('Agree threshhold'),
      'description' => t("Records user agreement and creates action when threshhold is reached."),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'agree_threshhold_widget',
      'default_formatter' => 'agree_threshhold_formatter',
      'translatable' => TRUE,
    )
  );
}

/*
 * implements hook_field_widget_info
 */
function agree_threshhold_field_widget_info() {
  return array(
    'agree_threshhold_widget' => array(
      'label' => t('Agree Threshhold'),
      'field types' => array('agree_threshhold'),
    )
  );
}
/*
 * implements hook_field_formatter_info
 */
function agree_threshhold_field_formatter_info() {
  return array(
    'agree_threshhold_formatter' => array(
      'label' => t('Agreement threshhold'),
      'field types' => array('agree_threshhold'),
    )
  );
}

/*
 * implements hook_field_formatter_view
 */
function agree_threshhold_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items) {
  $render = array();
  $info = entity_get_info($entity_type);
  $id = $info['entity keys']['id'];
  foreach ($items as $delta => $item) {
    $closed = 0;
    if ($item['close']) {//shouldn't this be $items
      $closed = _agreement_count($entity_type, $id) >= $items[0]['threshhold'];
    }
    $access = empty($instance['widget']['settings']['roles']) || count(array_filter(array_intersect_key($instance['widget']['settings']['roles'], $GLOBALS['user']->roles)));
    $type = entity_get_info($entity_type);
    $entity_id = &$entity->{$type['entity keys']['id']};
    $threshhold = isset($item['threshhold']) ? $item['threshhold'] : 0;
    if (!$access || $closed) {
      $render[] = array(
        '#theme' => 'agree_field_closed',
        '#agreers' => count(_agreement_count($entity_type, $entity_id)),
        '#threshhold' => $threshhold,
      );
    }
    else {
      //get the interactive link allowing users to subscribe or unsubscribe
      $render[] = agree_threshhold_field_view($instance['id'], $entity_id, $threshhold, FALSE);
    }
  }
  return $render;
}

/*
 * implements hook_theme
 */
function agree_threshhold_theme() {
  return array(
    'agree_field_open' => array(
      'variables' => array(
        'agreers' => '',
        'threshhold' => 0,
        'text' => 0,
        'path' => '',
      )
    ),
    'agree_field_closed' => array(
      'variables' => array(
        'agreers' => '',
        'threshhold' => 0,
      )
    )
  );
}

function agree_threshhold_field_view($instance_id, $entity_id, $threshhold, $toggle = TRUE) {
  $instances = _matslats_field_get_instances('agree_threshhold');
  $instance = &$instances[$instance_id];
  $subscribed = _agree_threshhold_subscribed($instance['entity_type'], $entity_id, $toggle);
  $settings = $instance['widget']['settings'] += array(
    'unparticipate_link' => t('Un-agree'),
    'participate_link' => t('Agree')
  );
  return array(
    '#theme' => 'agree_field_open',
    '#agreers' => count(_agreement_count($instance['entity_type'], $entity_id)),
    '#threshhold' => $threshhold,
    '#text' => $subscribed ? $instance['widget']['settings']['unparticipate_link'] : $instance['widget']['settings']['participate_link'],
    '#path' => implode('/', array(
      'ajax',
      'agree',
      $instance_id,
      $entity_id,
      $threshhold
    ))
  );
}

function theme_agree_field_open($variables) {
  $output = t('@quant agreements towards a threshhold of @num', array(
    '@quant' => $variables['agreers'], '@num' => $variables['threshhold'])
  );
  $link = array(
    '#type' => 'link',
    '#title' => $variables['text'],
    '#href' => '',
    '#ajax' => array(
      'path' => $variables['path'],
      'wrapper' => 'agree-field',
    )
  );
  return '<div id = "agree-field">'.$output.'<br />'.drupal_render($link).'</div>';
}

function theme_agree_field_closed($variables) {
  return t('@num agreements out of @threshhold required', array(
    '@num' => $variables['agreers'],
    '@threshhold' => $variables['threshhold']
  ));
}

/*
 * implements hook_field_widget_settings_form
 * no special settings to add.
 */
function agree_threshhold_field_widget_settings_form($field, $instance) {
  $form = array(
    'roles' => array(
      '#title' => t('Roles which can agree'),
      '#type' => 'checkboxes',
      '#options' => array_map('check_plain', user_roles(TRUE)),
      '#default_value' => isset($instance['widget']['settings']['roles']) ? $instance['widget']['settings']['roles'] : array()
    ),
    'participate_link' => array(
      '#title' => t('Participate link'),
      '#description' => t('Text or html of button to press to participate'),
      '#type' => 'textfield',
      '#default_value' => isset($instance['widget']['settings']['participate_link']) ? $instance['widget']['settings']['participate_link'] : t('Agree'),
      '#required' => TRUE
    ),
    'unparticipate_link' => array(
      '#title' => t('unParticipate link'),
      '#description' => t('Text or html of button to press to withdraw participation'),
      '#type' => 'textfield',
      '#default_value' => isset($instance['widget']['settings']['unparticipate_link']) ? $instance['widget']['settings']['unparticipate_link'] : t('Un-agree'),
      '#required' => TRUE
    ),
    'mail_subject' => array(
      '#title' => t('Mail subject'),
      '#description' => t('The message that should be sent. You may include placeholders like [node:title], [user:name], and [comment:body] to represent data that will be different each time message is sent. Not all placeholders will be available in all contexts.'),
      //string is borrowed from system_send_email_action_form
      '#type' => 'textfield',
      '#default_value' => isset($instance['widget']['settings']['mail_subject']) ? $instance['widget']['settings']['mail_subject'] : '',
      '#weight' => 1,
    ),
    'mail_body' => array(
      '#title' => t('Mail body'),
      //string is borrowed from system_send_email_action_form
      '#type' => 'textarea',
      '#default_value' => isset($instance['widget']['settings']['mail_body']) ? $instance['widget']['settings']['mail_body'] : '',
      '#rows' => 5,
      '#weight' => 2,
    )
  );

  $agree_threshhold_actions = module_invoke_all('agree_threshhold_actions');
  if (count($agree_threshhold_actions)) {
    $form['action'] = array(
      '#title' => t('Threshhold action'),
      '#description' => t('Action to take when threshhold is reached'),
      '#type' => count($agree_threshhold_actions) > 1 ? 'radios' : 'hidden',
      '#options' => $agree_threshhold_actions,
      '#default_value' => isset($item['action']) ? $item['action'] : '',
      '#weight' => 1
    );
  }
  return $form;
}

/*
 * implements hook_field_widget_form
 */
function agree_threshhold_field_widget_form($form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $item = &$items[0];
  return array(
    '#title' => t('Participation'),
    '#type' => 'fieldset',
    'threshhold' => array(
      '#title' => t('Threshhold'), //this is only ever seen on the error message anyway
      '#description' => t('Number of agreements needed (including you)'),
      '#type' => 'textfield',
      '#default_value' => isset($item['threshhold']) ? $item['threshhold'] : '',
      '#element_validate' => array('element_validate_integer_positive'),
      '#required' => TRUE,
      '#size' => 4,
      '#maxlength' => 6,
    ),
    'close' => array(
      '#title' => t('Close when threshhold is reached'),
      '#description' => t('Limit the number of participants to the threshhold.'),
      '#type' => 'checkbox',
      '#default_value' => isset($items['close']) ? $items['close'] : 0,
    ),
    'complete' => array(
      '#type' => 'hidden',
      '#value' => isset($items['complete']) ? $items['complete'] : 0,
    )
  );
  //if there are participants
  return $element;
}

/*
 * implements hook_form_field_ui_field_edit_form_alter
 * remove the default 'worth' setting from the field settings form
 */
function agree_threshhold_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if ($form['#field']['type'] == 'agree_threshhold') {
    $form['field']['cardinality']['#description'] = t('It is possible to have more than one type of participation');
  }
}
/*
 * implements hook_hook_info
 *
 */
function agree_threshhold_hook_info() {
  return array(
    //TODO: a default implementation of this 
    'agree_threshhold_reached' => array()
  );
}

/*
 * implements hook_field_is_empty
 * tests to see if a field is empty
 * $item can contain either the raw field data i.e. integer and division or $quantity
 */
function agree_threshhold_field_is_empty($item) {
  return empty($item['threshhold']);
}

function agree_threshhold_menu() {
  return array(
    'ajax/agree/%/%/%' => array(
      'page callback' => 'agree_threshhold_field_view',
      'page arguments' => array(2, 3, 4),
      'delivery callback' => 'ajax_deliver',
      'access callback' => TRUE
    ),
    'contact/participants/%entity_type/%entity_id' =>array(
      'title' => 'Mail subscribers',
      'page callback' => 'agree_threshhold_contact',
      'page arguments' => array(2, 3),
      'type' => MENU_CALLBACK,
    )
  );
}

/*
 * form definition for agreement button
 * assumes the entity_type contains the agree_threshhold field
 */
function _agree_threshhold_subscribed($entity_type, $entity_id, $flip = FALSE) {
  $args = array(
    ':entity_type' => $entity_type,
    ':entity_id' => $entity_id,
    ':uid' => $GLOBALS['user']->uid,
  );
  $agreed = db_query("SELECT TRUE FROM {agreement} WHERE entity_type = :entity_type AND entity_id = :entity_id AND uid = :uid", $args)->fetchfield();
  if ($flip) {
    if ($agreed) {
      db_query("DELETE FROM {agreement} WHERE entity_type = :entity_type AND entity_id = :entity_id AND uid = :uid", $args);
    }
    else {
      db_query("INSERT INTO {agreement} (entity_type, entity_id, uid) VALUES (:entity_type, :entity_id, :uid)", $args);
    }
    $agreed = !$agreed;
  }
  return $agreed;
}
/*
 * implements hook_field_attach_insert
 * adds the current user to the list of agreers
 */
function agree_threshhold_field_attach_insert($entity_type, $entity) {
  //check each field on the entity bundle to see if one of them is the agree_threshhold field
  foreach (array_keys(field_info_bundles($entity_type)) as $bundle_name) {
    $instances = field_info_instances($entity_type, $bundle_name);
    foreach ($instances as $instance) {
      $field_info = field_info_field($instance['field_name']);
      if ($field_info['type'] == 'agree_threshhold') {
        $type = entity_get_info($entity_type);
        _agree_threshhold_subscribed($entity_type, $entity->{$type['entity keys']['id']}, TRUE);
        return;
      }
    }
  }
}

/*
 * implements hook_cron
 * check whether each instance has reached its threshhold
 */
function agree_threshhold_cron() {
  foreach (_matslats_field_get_instances('agree_threshhold') as $instance) {
    $submissions = db_select('field_data_'.$instance['field_name'], 'd')//there's a function to get the table name
      ->fields('d', array('entity_id', $instance['field_name'].'_threshhold as threshhold'))
      ->condition('entity_type', $instance['entity_type'])
      ->condition($instance['field_name'].'_complete', 0)
      ->execute()
      ->fetchAll();
    foreach ($submissions as $submission) {
      $agreers = db_query(
        "SELECT uid FROM {agreement} WHERE entity_type = :entity_type and entity_id = :entity_id",
        array('entity_type' => $instance->entity_type, ':entity_id' => $submission->entity_id)
      )->fetchCol();
      if (count($agreers) >= $submission->threshhold) {
        //deactivate the field
        if (!$submission->close) {
          db_query("UPDATE {$table} SET $complete_field = 1 WHERE entity_type = '$instance->entity_type' AND entity_id = $submission->entity_id");
          threshhold_notify_agreers(
            $instance,
            $submission->entity_id,
            $agreers
          );
        }
        //tell all the agreers that the threshhold was reached
        foreach (module_invoke_all('agree_threshhold_actions') as $callback) {
          $callback($instance, $submission->entity_id, $agreers);
        }
      }
    }
  }
}

function threshhold_notify_agreers($instance, $entity_id, $uids) {
  if (empty($instance['widget']['settings']['mail_body'])) return;
  $accounts = user_load_multiple($uids);
  foreach ($accounts as $account) {
    $mails[] = $account->mail;
  }
  $params = array(
    'instance' => $instance,
    'entity_id' => $entity_id
  );
  global $language;
  drupal_mail('agree_threshhold', 'threshhold_reached', implode(',', $mails), $language, $params);
}

function agree_threshhold_mail($key, &$message, $params) {
  //assume the key is threshhold_reached

  $entity = current(entity_load($params['instance']['entity_type'], array($params['entity_id'])));
  $context = array($params['instance']['entity_type'] => $entity);
  $message['subject'] = token_replace($params['instance']['widget']['settings']['mail_subject'], $context);
  $message['body'] = token_replace($params['instance']['widget']['settings']['mail_body'], $context);
  $message['headers']['cc'] = $message['to'];
  $message['to'] = variable_get('site_mail', 'info@example.com');
  debug($message);
}

function agree_threshhold_contact($entity_type, $entity_id) {
  $instances = _matslats_field_get_instances('agree_threshhold');
}
/*
 * get all the instances of a field given its type
 * $conditions can be for entity_type or bundle
 */
function _matslats_field_get_instances($field_type, $conditions = array()) {
  //identify every instance of fields of the given type
  $query = db_select('field_config_instance', 'fci');
  $query->join('field_config', 'fc', 'fc.id = fci.field_id');
  $query->fields('fci', array('id', 'field_name', 'entity_type', 'bundle'))
    ->condition('fc.type', $field_type);
  foreach ($conditions as $condition) {
    $query->condition($condition[0], $condition[1]);
  }
  $config_instances = $query->execute()->fetchAll();
  //load the instances as drupal field instances
  foreach ($config_instances as $conf) {
    $instances[$conf->id] = field_info_instance($conf->entity_type, $conf->field_name, $conf->bundle);
  }
  return $instances;
}

function _agreement_count($entity_type, $entity_id) {
  return db_query("SELECT uid FROM {agreement} WHERE entity_type = :entity_type AND entity_id = :entity_id",
    array(':entity_type' => $entity_type, ':entity_id' => $entity_id)
  )->fetchCol();
}
