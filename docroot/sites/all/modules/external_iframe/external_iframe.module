<?php
// $Id$
/**
 * @file
 * Open external links in an iframe
 *
 */

/**
  * Implements hook_permission().
  *
  */
function external_iframe_permission() {
  return array(
    'administer external iframe' => array(
      'title' => t('administer external iframe'),
      'description' => t('Administer External iFrame'),
    ),
  );
}


/**
  * Implements hook_menu().
  *
  */
function external_iframe_menu() {
  $items['external'] = array(
    'title' => 'External Site',
    'access callback' => TRUE,
    'page callback' => 'external_iframe_blank',
    'type' => MENU_CALLBACK,
  );
  $items['external_error'] = array(
    'title' => 'External Link Not Trusted',
    'access callback' => TRUE,
    'page callback' => 'external_iframe_error',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/externaliframe'] = array(
    'title' => 'External iFrame Settings',
    'access arguments' => array('administer external iframe'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('external_iframe_admin'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
  * Configuration Form
  *
  */
function external_iframe_admin($form, &$form_state) {
  $form = array();
  $options = node_type_get_names();
  $form['external_iframe_allowed_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select content types to enable external iframes on:'),
    '#default_value' => variable_get('external_iframe_allowed_types', array()),
    '#options' => $options,
  );
  $form['external_iframe_parent_container'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter parent container for where External Iframe should search for and rewrite external links'),
    '#default_value' => variable_get('external_iframe_parent_container', null),
    '#description' => t('Use any valid js identifier ie. body #container .node'),
  );
  $form['classes'] = array(
    '#title' => t('Add external iframe by class'),
    '#type' => 'fieldset',
  );
  $form['classes']['external_iframe_classes'] = array(
    '#type' => 'textarea',
    '#description' => t('A list of link classes and ids to apply external iframe rewriting to. Add one class per line and be sure to use valid jquery selectors by prefixing classes by a "." and ids by a "#" <br />Use "*" to rewrite check all external links'),
    '#default_value' => variable_get('external_iframe_classes', '*'),
  );
  $form['classes']['external_iframe_negate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Negate'),
    '#default_value' => variable_get('external_iframe_negate', null),
    '#description' => t('This option will rewrite all external links except those with the classes listed above'), 
  );
  $form['exclude'] = array(
    '#title' => t('Exclude Domains'),
    '#type' => 'fieldset',
  );
  $default = variable_get('external_iframe_exclude', 'youtube.com' . "\n" . 'google.com' . "\n" . 'yahoo.com');
  $form['exclude']['external_iframe_exclude'] = array(
    '#type' => 'textarea',
    '#description' => t('A list of domains to exclude from being rewritten. One per line with no "http://" prefix.'),
    '#default_value' => $default,
  );
  $form['external_iframe_life'] = array(
    '#type' => 'textfield',
    '#title' => t('Days links remain trusted:'),
    '#default_value' => variable_get('external_iframe_life', 7),
    '#description' => t('How many days should external links remain trusted after a user has clicked on the link? Value must be an integer'),
    '#required' => TRUE,
    '#element_validate' => array('external_iframe_life_validate'),
  );
  $form['#redirect'] = FALSE;
  return system_settings_form($form);
}

/**
  * Validate external_iframe_life field
  */
function external_iframe_life_validate($element, &$form_state) {
  if (!ctype_digit($element['#value'])) {
    form_error($element, t('This field must be an integer.'));
  }
}

/**
  * Page Callback
  * Don't want to return anything with this function
  */
function external_iframe_blank() {
  return '';
}

/**
  * Page Callback
  * Set Error Message
  */
function external_iframe_error() {
  return t('This site is not responsible for the content of the untrusted external link');
}

/**
  * Invalid url error function
  */
function _external_iframe_error_direct() {
  drupal_set_message(t('URL fails validation.'), $type = 'warning');
  drupal_goto('404');
  exit();  
}

/**
  * Set $_SERVER['http_host'] as $host for validation
  *
  */
function _external_iframe_gethost() {
  $http_host = array();
  $http_host = explode('.', $_SERVER['HTTP_HOST']);
  if (!empty($http_host) && count($http_host) > 2) {
    $host = implode('.', array_slice($http_host, 1));
  }
  else {
    $host = implode('.', $http_host);
  }
  return $host;
}

/**
  * Implements hook_theme().
  *
  */
function external_iframe_theme() {
  return array(
    'external_iframe_javascript' => array(
      'variables' => array(),
    ),
  );
}

/**
  * Theme function to include JS and set Drupal.settings.externaliframe
  */
function theme_external_iframe_javascript() {
  $parent = variable_get('external_iframe_parent_container', null);
  $classes = variable_get('external_iframe_classes', null);
  $classes = explode("\n", $classes);
  $negate = variable_get('external_iframe_negate', null);
  $exclude = variable_get('external_iframe_exclude', 'youtube.com' . "\n" . 'google.com' . "\n" . 'yahoo.com');
  $exclude = explode("\n", $exclude);
  $settings = array(
    'externaliframe' => array(
      'parent' => $parent,
      'classes' => $classes,
      'negate' => $negate,
      'exclude' => $exclude
    ),
  );
  drupal_add_js($settings, 'setting');
  drupal_add_js(drupal_get_path('module', 'external_iframe') . '/js/external_iframe.js');
}

/**
  * Implements hook_init().
  *
  */
function external_iframe_init() {
  if (arg(0) == 'external') {
    drupal_set_title(t('External Site'));
    drupal_add_css(drupal_get_path('module', 'external_iframe') . '/external_iframe.css');

    // VALIDATION
    isset($_GET["url"]) ? $url = $_GET["url"] : _external_iframe_error_direct();
    if (!isset($url) || empty($url) || !preg_match('/^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}' . '((:[0-9]{1,5})?\/.*)?$/i', $url)) {
      _external_iframe_error_direct();
    }
    else {
      isset($_COOKIE['allowedurls']) ? $allow_cookie = $_COOKIE['allowedurls'] : $allow_cookie = array();
      $domain = parse_url($_GET["url"], PHP_URL_HOST);
      $days_valid = variable_get('external_iframe_life', 7);
      if (stristr($_SERVER['HTTP_REFERER'], _external_iframe_gethost())) {
        setcookie('allowedurls[' . $domain . ']', $domain, time() + 86400 * $days_valid, '/');
      }
      elseif (!stristr($_SERVER['HTTP_REFERER'], _external_iframe_gethost()) and !in_array($domain, $allow_cookie)) {
        $message = t('URL fails validation. The URL may be from an untrusted source, from an email or you cut and pasted this link. <br /> Exit site and view <a href="@url">@url</a> - You will be redirected in 5 seconds. <meta http-equiv="refresh" content="5;url=@url">', array('@url' => $_GET['url']));
        drupal_set_message($message, $type = 'warning');
        drupal_goto('external_error');
        exit();
      }
    }
  }
}

/**
  * Implements hook_preprocess_page().
  *
  */
function external_iframe_preprocess_page(&$variables) {
  if (arg(0) == 'external') {
    // find url and check if https argument present
    $url = $_GET['url'];
    $variables['url'] = $url;
    $variables['theme_hook_suggestions'] = array();
    $variables['theme_hook_suggestions'][] = 'page__external';
  }

  // Check if we should add external_iframe.js 
  $types = variable_get('external_iframe_allowed_types', array());
  foreach ($types as $key => $value) {
    if ($value === 0) {
      unset($types[$key]);
    }
  }
  if (isset($variables['node']) && count($types) == 0) {
    theme('external_iframe_javascript');
  } 
  else if (isset($variables['node']) && in_array($variables['node']->type, $types)) {
    theme('external_iframe_javascript');    
  }
  else if (!isset($variables['node'])) {
    theme('external_iframe_javascript');
  }
}

/**
 * Implements hook_theme_registry_alter()
**/
function external_iframe_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'external_iframe');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _external_iframe_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _external_iframe_insert_after_first_element(&$a, $element) {
  if (is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

