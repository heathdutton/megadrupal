<?php

/**
 * Implements hook_menu().
 */
function country_page_menu() {
  $items['country/%country'] = array(
    'title callback' => 'countries_page_title',
    'title arguments' => array(1),
    'description' => 'View a country.',
    'page callback' => 'country_page_view',
    'page arguments' => array(1),
    'access callback' => 'country_page_view_access',
    'access arguments' => array(1),
  );

  $items['country/%country/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['country/%country/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit a country.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'countries_admin_page',
    'page arguments' => array(1),
    'access callback' => 'country_page_edit_access',
    'access arguments' => array(1),
    'file' => 'countries.admin.inc',
    'file path' => drupal_get_path('module', 'countries'),
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function country_page_entity_info_alter(&$entity_info) {
  $entity_info['country']['uri callback'] = 'country_page_uri';
}

/**
 * Implements callback_entity_info_uri().
 */
function country_page_uri($country) {
  return array(
    'path' => 'country/' . $country->iso2,
  );
}

/**
 * Menu callback to view a country.
 */
function country_page_view($country) {
  return entity_view('country', array($country->iso2 => $country), 'full', NULL, TRUE);
}

/**
 * Implements hook_permission().
 */
function country_page_permission() {
  return array(
    'view country pages' =>  array(
      'title' => t('View country pages'),
      'description' => t('Lets users view non-administrative country pages.'),
    ),
    'edit country pages' =>  array(
      'title' => t('Edit country pages'),
      'description' => t('Lets users edit non-administrative country pages.'),
    ),
  );
}

function _country_page_access($op, $country) {
  switch ($op) {
    case 'view':
      if ($country->enabled && user_access('view country pages')) {
        return TRUE;
      }
      return user_access('administer site configuration');

    case 'edit':
      return user_access('edit country pages') || user_access('administer site configuration');

  }
}

/**
 * Menu access callback.
 *
 * @param object $country
 * @return boolean
 */
function country_page_view_access($country) {
  return _country_page_access('view', $country);
}

function country_page_edit_access($country) {
  return _country_page_access('edit', $country);
}

function country_page_form_countries_admin_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'country_page_country_page_admin_form_submit';
}

function country_page_country_page_admin_form_submit($form, &$form_state) {
  if (arg(0) == 'country' && arg(2) == 'edit') {
    $form_state['redirect'] = arg(0) . '/' . arg(1);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function country_page_field_formatter_info() {
  return array(
    'country_page_link' => array(
      'label' => t('Link to country page'),
      'field types' => array('country'),
      'settings' => array(
        'label' => '[country:name]',
        'link' => 'country/[country:iso2]'
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function country_page_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state){
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  if ($display['type'] == 'country_page_link') {
    $form['label'] = array(
      '#title' => t('Label'),
      '#type' => 'textfield',
      '#description' => t('Use tokens for context. i.e. %example.', array('%example' => '[country:name]')),
      '#default_value' => $settings['label'],
      '#required' => TRUE,
    );

    $form['link'] = array(
      '#title' => t('Link'),
      '#type' => 'textfield',
      '#description' => t('Use tokens for context. i.e. %example.', array('%example' => 'country/[country:iso2]')),
      '#default_value' => $settings['link'],
      '#required' => TRUE,
    );
    if (module_exists('token')) {
      $form['token_help'] = array(
        '#theme' => 'token_tree_link',
        '#token_types' => array('country'),
      );
    }
  }

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function country_page_field_formatter_settings_summary($field, $instance, $view_mode){
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'country_page_link') {
    $summary = t('Label %label', array('%label' => $settings['label']));
    $summary .= '<br />';
    $summary .= t('Link %link', array('%link' => $settings['link']));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function country_page_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'country_page_link':
      foreach($items as $delta => $item) {
        $label = $settings['label'];
        $link = $settings['link'];
        $title = token_replace($label, array('country' => $item['country']));
        $path = token_replace($link, array('country' => $item['country']));
        $element[$delta] = array('#markup' => l($title, $path));
      }
  }

  return $element;
}
