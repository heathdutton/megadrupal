<?php

/**
 * @file
 * Defines DHL shipping method for testing and development.
 */


/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_shipping_dhl_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['dhl_shipping_method'] = array(
    'title' => t('DHL shipping method'),
    'description' => t('DHL shipping method.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_shipping_dhl_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['dhl_shipping_express'] = array(
    'title' => t('DHL Express delivery'),
    'delay' => t('1 - 2 business days'),
    'description' => t('DHL Express.'),
    'display_title' => t('DHL Express'),
    'shipping_method' => 'dhl_shipping_method',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'commerce_shipping_dhl_service_rate',
      'details_form' => 'commerce_shipping_dhl_service_details_form',
      'details_form_validate' => 'commerce_shipping_dhl_service_details_form_validate',
      'details_form_submit' => 'commerce_shipping_dhl_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback.
 */
function commerce_shipping_dhl_service_rate($shipping_service, $order) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $shipping = $wrapper->commerce_customer_shipping->commerce_customer_address->value();
  $country_code = $shipping['country'];
  $weight = commerce_shipping_dhl_volumetric_weight($order);
  $allowed_package_sizes = array();
  drupal_alter('commerce_shipping_dhl_package_sizes', $allowed_package_sizes);

  // Everything is done. Now calculate.
  module_load_include('php', 'commerce_shipping_dhl', 'lib/DHLQuote');
  $amount = DHLQuote::Factory()
      ->setAllowedPackageSizes($allowed_package_sizes)
      ->calculate($weight, $country_code) * 100;
  $context = array(
    'address' => $shipping,
  );
  drupal_alter('commerce_shipping_dhl_service_rate', $amount, $context);

  return array(
    'amount' => $amount,
    'currency_code' => 'EUR',
    'data' => array(),
  );
}

/**
 * Calculates the volumetric weight of an order.
 */
function commerce_shipping_dhl_volumetric_weight($order) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $weight = 0;
  foreach ($wrapper->commerce_line_items as $line_item) {
    if ($line_item->type->value() != 'product') {
      continue;
    }
    $weight += $line_item->commerce_product->field_product_shipping_box->value();
  }
  return $weight;
}

/**
 * Shipping service callback: returns the dhl shipping service details form.
 */
function commerce_shipping_dhl_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service) {
  $form = array();
  return $form;
}

/**
 * Shipping service callback: validates the dhl shipping service details.
 */
function commerce_shipping_dhl_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents) {
}

/**
 * Shipping service callback.
 */
function commerce_shipping_dhl_service_details_form_submit($details_form, $details_values, $line_item) {
}

