<?php
/**
 * Implementation of hook_init().
 *
 * Load required includes.
 */
// API hooks should always be available to make it compatible with drush updatedb
 module_load_include('inc', 'audiorecorderfield', 'audiorecorderfield_widget');
function audiorecorderfield_init() {
  module_load_include('inc', 'audiorecorderfield', 'include/nanogong');
  module_load_include('inc', 'audiorecorderfield', 'include/soundcloud');
  module_load_include('inc', 'audiorecorderfield', 'include/wav_player');
  module_load_include('inc', 'audiorecorderfield', 'sources/recorder');
  // Add Javascript settings
  drupal_add_js(array('audiorecorderfield_path' =>  drupal_get_path('module', 'audiorecorderfield')), 'setting');
}

/**
 * Implementation of hook_menu().
 */
function audiorecorderfield_menu() {
  $items['admin/config/media/audiorecorderfield'] = array(
    'title' => 'Audio Recorder Field',
    'description' => 'Configure AudioRecorderField.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('audiorecorderfield_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['audiorecorderfield_file_receive'] = array(
    'title' => 'file_receive',
    'description' => '',
    'page callback' => 'audiorecorderfield_file_receive',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
   );
   
   $items['audiorecorderfield_file_preview'] = array(
    'title' => 'audiorecorderfield_file_preview',
    'description' => '',
    'page callback' => 'audiorecorderfield_file_preview',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
   );
   
   $items['audiorecorderfield_recorder_reload'] = array(
    'title' => 'audiorecorderfield_recorder_reload',
    'description' => '',
    'page callback' => 'audiorecorderfield_recorder_reload',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
   );
   
   return $items;
}

function audiorecorderfield_admin_settings_form() {
  _audiorecorderfield_choose_recorder_form($form);
  $form['audiorecordefield_java_fallback'] = array(
    '#type' => 'radios',
    '#title' => t('What do do if Java is not enabled at the client'),
    '#description' => t('Java fallback option for Nanogong Applet Recorder'),
    '#options' => array('upload' => t('Replace recorder for file upload option'), 'text' => t('Remind user to download and set up Java for their computer')),
    '#default_value' => variable_get('audiorecordefield_java_fallback', 'upload'),
  );
  
  return system_settings_form($form);
}

/*Ajax callback function that saves recorded file*/
function audiorecorderfield_file_receive() {
   $recorder = audiorecorderfield_get_recorder();
   call_user_func($recorder['file_receive']);
}

/*Ajax callback function that creates file preview of uploaded file*/
function audiorecorderfield_file_preview() {
    $fid = $_GET['fid'];
    $file = file_load($fid);
    $audiofile = file_create_url($file->uri);
    //TODO: Test this:
    $info = pathinfo($file->filename);
    $op = $info['extension'];
    $player = "<div id='audiorecorderfield-".$_GET['field_id']."-wrapper'>".audiofield_get_player($audiofile, $op)."</div>"; 
    return drupal_json_output(array('player' => $player));
    exit();
}

/*Ajax callback function that reloads the recorder*/
function audiorecorderfield_recorder_reload() {
  $recorder = audiorecorderfield_get_recorder();
  $element['#field_name'] = $_GET['field_raw'];
  $element['#language'] = $_GET['langcode'];
  $element['#parents'][2] = $_GET['delta'];
  $recorder_reloaded = $recorder['callback']($element, NULL);
  return drupal_json_output(array('recorder' => $recorder_reloaded));
  exit();
}



/**
 * Implementation of hook_filefield_sources_widgets().
 *
 * This returns a list of widgets that are compatible with FileField Sources.
 TODO: Unsupported operand types error from filefield_sources.module on line 67
 *//*
function audiorecorderfield_filefield_sources_widgets() {
  return array('audiorecorderfield_widget');
}
*/
/**
 * Implementation of hook_filefield_sources_info().
 */
function audiorecorderfield_filefield_sources_info() {
  $params = array();
  $return = array();
  
    $function = 'filefield_source_recorder_info';
    if (function_exists($function)) {
      $result = call_user_func_array($function, $params);
      if (isset($result) && is_array($result)) {
        $return = array_merge_recursive($return, $result);
      }
      elseif (isset($result)) {
        $return[] = $result;
      }
    }
  
  return $return;
}

/**
 * Implementation of hook_theme().
 */
function audiorecorderfield_theme() {
  $theme= array(
      'audiorecorderfield_widget' => array(
        'render element' => 'element',
        'file' => 'audiorecorderfield_widget.inc',
      ),
      //Theme for the recorders
       'audiorecorderfield_soundcloud' => array(
       'variables' => array('element' => NULL),
       'file' => 'include/soundcloud.inc',
      ),
      //Soundcloud skin
       'audiorecorderfield_soundcloud_skin' => array(
       'variables' => array('field_name' => NULL, 'delta' => NULL),
       'file' => 'include/soundcloud.inc',
      ),
      //Wav player theme
       'audiorecorderfield_wav_player' => array(
       'variables' => array('player_path'=> NULL, 'audio_file' => NULL),
       'file' => 'include/wav_player.inc',
      ),
       //Theme for recorder filefield source
       'filefield_source_recorder_element' => array(
         'render element' => 'element',
         'file' => 'sources/recorder.inc',
      ),
  );

  return $theme;
}


/**
 * Implementation of hook_form_[form_id]_alter().
 *
 * Modify the add new field form to change the default formatter.
 */
function audiorecorderfield_form_field_ui_field_settings_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'audiorecorderfield_form_content_field_overview_submit';
}

/**
 * Submit handler to set a new field's formatter to "audiofield_embedded".
 */
function audiorecorderfield_form_content_field_overview_submit(&$form, &$form_state) {

  $entity_type = 'node';
  $field_name = $form_state['values']['field']['field_name'];
  $bundle =  $form_state['complete form']['#bundle'];
  $instance = field_read_instance($entity_type, $field_name, $bundle);

  if ($instance['widget']['module'] == 'audiorecorderfield') {
    foreach ($instance['display'] as $display_type => $display_settings) {
        if ($instance['display'][$display_type]['type'] == 'file_default') {
          $instance['display'][$display_type]['type'] = 'audiofield_embedded';
        }
    }
     field_update_instance($instance);
  }   
}


/**
 * Implementation of hook_audiofield_players().
 */
function audiorecorderfield_audiofield_players() {
    $players['nanogong']=array(
      'path' => drupal_get_path('module', 'audiorecorderfield') . '/recorders/nanogong.jar',
      'name' => 'Nanogong',
      'download_link' => 'http://gong.ust.hk/nanogong/downloads_form.html',
      'filetypes' => array('wav'),
      'callback' => 'audiorecorderfield_nanogong_player',
    );
    
    $players['wav_player']=array(
      'path' => variable_get('audiofield_players_dir', 'sites/all/libraries/player') . '/wavplayer.swf',
      'name' => 'Wav Player',
      'download_link' => 'https://github.com/francois2metz/WavPlayer',
      'filetypes' => array('wav'),
      'callback' => 'audiorecorderfield_wav_player',
    );

    return $players;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function audiorecorderfield_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $instance = $form['#instance'];
  if ($instance['widget']['type'] == 'audiorecorderfield_widget') {
    $form['instance']['settings']['file_extensions']['#default_value'] = 'wav mp3';
  }
}

function audiorecorderfield_field_create_field($field) {
  // @todo Needs function body.
  //var_dump($field);die();
}

function audiorecorderfield_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'audiofield_admin_settings_form') {
    _audiorecorderfield_choose_recorder_form($form);  
    $form["buttons"]["#weight"]=50;
  }
  if (strlen(strstr($form_id, '_node_form'))>0) {
    $form['#attributes'] = array('enctype' => "multipart/form-data"); 
    $form['#validate'][] = 'audiorecorderfield_node_form_validate';
  }
}

/*Java fallback file upload option*/
function audiorecorderfield_node_form_validate($form, &$form_state) {
 if (isset($_FILES['files']['name'])) {
   foreach($_FILES['files']['name'] as $field_name => $file_name) {
   if(!empty($file_name) && stripos($field_name, 'upload-nanogong-', 0) === 0) {
     //Save the file
     $upload_dir_stream = file_default_scheme() . '://' ;
     $validators['file_validate_extensions']=array('wav mp3');
     $file = file_save_upload($field_name, $validators, $upload_dir_stream);
     $file->status = FILE_STATUS_PERMANENT;
     $file = file_save($file);
     
     //Assign it to audiorecorderfield
     $expl = explode('-', $field_name);
     $audiorecorder_field_name = 'field_'.$expl[2];
     $langcode = $expl[3];
     $delta = $expl[4];
     $form_state['values'][$audiorecorder_field_name][$langcode][$delta]['fid'] = $file->fid;
   }
 }
 }
}

function _audiorecorderfield_choose_recorder_form(&$form) {
  $audio_recorders = audiorecorderfield_recorders();
    $recorders=array();
    $element['#field_name'] = 'audiofield_config';
    $element['#language'] = 'und';
    $element['#parents'][2] = 0;
    //TODO: In D7 for some reason certain HTML elements like applet are not shown. This makes preview impossible.
    foreach ($audio_recorders as $id => $recorder) {
        $recorders[$id] = $recorder['name'];// . '<br/>' . call_user_func_array($recorder['callback'], array($element));
    }
    
    $form['audiofield_audiorecorder'] = array(
      '#type' => 'radios',
      '#title' => t('Audio Recorders'),
      '#options' => $recorders,
      '#default_value' => variable_get('audiofield_audiorecorder', 0),
   );
}

/**
 * Implementation of hook_audiorecorderfield_recorders().
 */
function audiorecorderfield_recorders() {
  $recorders = module_invoke_all('audiorecorderfield_recorders');
    
  $recorders['nanogong'] = array(
    'path' => drupal_get_path('module', 'audiorecorderfield') . "/recorders/nanogong.jar",
    'name' => 'Nanogong Applet Recorder',
    'callback' => 'audiorecorderfield_recorder_nanogong',
    'file_receive' => 'audiorecorderfield_nanogong_file_receive',
  );
  
  $recorders['soundcloud'] = array(
    'path' => drupal_get_path('module', 'audiorecorderfield') . "/recorders/recorder.swf",
    'name' => 'Soundcloud Flash Recorder',
    'callback' => 'audiorecorderfield_recorder_soundcloud',
    'file_receive' => 'audiorecorderfield_soundcloud_file_receive',
  );
  
  return $recorders;
}

/**
 * Get the object for the suitable player for the parameter resource
*/
function audiorecorderfield_get_recorder() {
  $audio_recorders = audiorecorderfield_recorders();
  $recorder = $audio_recorders[variable_get('audiofield_audiorecorder', 'nanogong')];
  return $recorder;
}

function audiorecorderfield_str_replace_once($str_pattern, $str_replacement, $string){
       $occurrence = strpos($string, $str_pattern);
        if ($occurrence !== false && $occurrence===0){
            return substr_replace($string, $str_replacement, strpos($string, $str_pattern), strlen($str_pattern));
        }
        return $string;
}