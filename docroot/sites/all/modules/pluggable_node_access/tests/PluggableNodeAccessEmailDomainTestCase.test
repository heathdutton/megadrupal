<?php

/**
 * @file
 * Contains PluggableNodeAccessTestCase.test.
 */

class PluggableNodeAccessTestCase extends DrupalWebTestCase {

  /**
   * Provides information about the test class.
   */
  public static function getInfo() {
    return array(
      'name' => 'Access',
      'description' => 'Test the access.',
      'group' => 'Pluggable node access',
      'dependencies' => array('og'),
    );
  }

  /**
   * Operations before the testing begins.
   */
  function setUp() {
    parent::setUp('og', 'pluggable_node_access');
    node_access_rebuild();

    // Create "email domain" Pluggable node access entity.
    $values = array(
      'type' => 'email_domain',
      'data' => array('foo.bar'),
    );
    $entity = entity_create('pluggable_node_access', $values);
    $entity->save();

    $group_type = $this->drupalCreateContentType();
    $group_type = $group_type->type;

    // Add OG group field to a node's bundle.
    og_create_field(OG_GROUP_FIELD, 'node', $group_type);

    $group_content_type = $this->drupalCreateContentType();
    $group_content_type = $group_content_type->type;

    // Add OG audience field to a node's bundle.
    og_create_field(OG_AUDIENCE_FIELD, 'node', $group_content_type);

    $field = array(
      'field_name' => 'pluggable_node_access',
      'type' => 'entityreference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'target_type' => 'pluggable_node_access',
      ),
    );
    field_create_field($field);
    $instance = array(
      'label' => t('Pluggable node access'),
      'description' => t('Reference to Pluggable node access entities.'),
      'field_name' => 'pluggable_node_access',
      'entity_type' => 'node',
      'bundle' => $group_type,
    );
    field_create_instance($instance);

    $instance['bundle'] = $group_content_type;
    field_create_instance($instance);

    // Create group node.
    $settings = array('type' => $group_type);
    $this->group1 = $this->drupalCreateNode($settings);

    // Reference the Pluggable node access entity.
    $wrapper = entity_metadata_wrapper('node', $this->group1);
    $wrapper->pluggable_node_access[] = $entity;
    $wrapper->save();

    // Create node to add to group.
    $settings = array('type' => $group_content_type);
    $this->groupContent1 = $this->drupalCreateNode($settings);

    // Add node to group.
    $values = array(
      'entity_type' => 'node',
      'entity' => $this->groupContent1,
    );
    og_group('node', $this->group1, $values);
  }

  /**
   * Test authenticating a user.
   */
  function testAccess() {
    $user1 = $this->drupalCreateUser();
    $this->assertFalse(node_access('view', $this->group1, $user1));

    $user1->mail = 'new@foo.bar';
    user_save($user1);
    drupal_static_reset('node_access');
    $this->assertTrue(node_access('view', $this->group1, $user1));

    // Test OG integration, by checking a group content.
    $user2 = $this->drupalCreateUser();
    $this->assertFalse(node_access('view', $this->groupContent1, $user2));

    $user2->mail = 'new@foo.bar';
    user_save($user2);
    drupal_static_reset('node_access');
    $this->assertTrue(node_access('view', $this->groupContent1, $user2));

  }
}

class PluggableNodeAccessTestDelete extends DrupalWebTestCase {

  /**
   * Provides information about the test class.
   */
  public static function getInfo() {
    return array(
      'name' => 'Deleting',
      'description' => 'Test deleting of the pluggable_node_access entity.',
      'group' => 'Pluggable node access',
      'dependencies' => array('og'),
    );
  }

  /**
   * Operations before the testing begins.
   */
  function setUp() {
    parent::setUp('og', 'pluggable_node_access');
    node_access_rebuild();

    // Create "email domain" Pluggable node access entity.
    $values = array(
      'type' => 'email_domain',
      'data' => array('foo.bar'),
    );
    $entity = entity_create('pluggable_node_access', $values);
    $entity->save();

    $group_type = $this->drupalCreateContentType();
    $group_type = $group_type->type;

    // Add OG group field to a node's bundle.
    og_create_field(OG_GROUP_FIELD, 'node', $group_type);

    $group_content_type = $this->drupalCreateContentType();
    $group_content_type = $group_content_type->type;

    // Add OG audience field to a node's bundle.
    og_create_field(OG_AUDIENCE_FIELD, 'node', $group_content_type);

    $field = array(
      'field_name' => 'pluggable_node_access',
      'type' => 'entityreference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'target_type' => 'pluggable_node_access',
      ),
    );
    field_create_field($field);
    $instance = array(
      'label' => t('Pluggable node access'),
      'description' => t('Reference to Pluggable node access entities.'),
      'field_name' => 'pluggable_node_access',
      'entity_type' => 'node',
      'bundle' => $group_type,
    );
    field_create_instance($instance);

    $instance['bundle'] = $group_content_type;
    field_create_instance($instance);

    // Create group node.
    $settings = array('type' => $group_type);
    $this->group1 = $this->drupalCreateNode($settings);

    // Reference the Pluggable node access entity.
    $wrapper = entity_metadata_wrapper('node', $this->group1);
    $wrapper->pluggable_node_access[] = $entity;
    $wrapper->save();

    // Create node to add to group.
    $settings = array('type' => $group_content_type);
    $this->groupContent1 = $this->drupalCreateNode($settings);

    // Add node to group.
    $values = array(
      'entity_type' => 'node',
      'entity' => $this->groupContent1,
    );
    og_group('node', $this->group1, $values);
  }

  /**
   * Check pluggable_node_access entity is deleted when deleting the group.
   */
  function testDelete() {
    $wrapper = entity_metadata_wrapper('node', $this->group1);

    $ids = array();
    foreach(pluggable_node_access_get_pluggable_node_access_plugins() as $plugin_name => $plugin) {
      // Get fields names.
      $handler = pluggable_node_access_get_pluggable_node_access_handler($plugin_name, $this->group1);
      $fields = $handler->getReferenceFields($this->group1);

      foreach($fields as $field) {
        if (!$wrapper->{$field}->value()) {
          // Node doesn't have restricted access.
          continue;
        }
        // Save related pluggable_node_access entities ids.
        $ids = $wrapper->{$field}->value(array('identifier' => TRUE));
      }
    }

    $ids = is_array($ids) ? $ids : array($ids);
    // Delete the group node.
    node_delete($this->group1->nid);

    // Get all existing pluggable_node_access entities ids.
    $entities = entity_load("pluggable_node_access");
    $ids_new = array();
    foreach($entities as $entity) {
      $ids_new[] = $entity->identifier();
    }

    // Pluggable_node_access entities that were related to the deleted group
    // should be deleted.
    foreach($ids as $id) {
      $this->assertFalse(in_array($id, $ids_new));
    }

  }
}

class PluggableNodeAccessTestChanging extends DrupalWebTestCase {

  /**
   * Provides information about the test class.
   */
  public static function getInfo() {
    return array(
      'name' => 'Content change access',
      'description' => 'Test changing of the group content access.',
      'group' => 'Pluggable node access',
      'dependencies' => array('og'),
    );
  }

  /**
   * Operations before the testing begins.
   */
  function setUp() {
    parent::setUp('og', 'og_access' , 'pluggable_node_access');
    node_access_rebuild();

    // Create 2 users.
    $this->user1 = $this->drupalCreateUser();
    $this->user1->mail = 'new@example.com';

    $this->user2 = $this->drupalCreateUser();
    $this->user2->mail = 'new@foo.bar';

    // Create "email domain" Pluggable node access entity.
    $values = array(
      'type' => 'email_domain',
      'data' => array('example.com'),
    );
    $entity = entity_create('pluggable_node_access', $values);
    $entity->save();
    // Create group and group content node types.
    $this->group_type = $this->drupalCreateContentType()->type;
    og_create_field(OG_GROUP_FIELD, 'node', $this->group_type);
    og_create_field(OG_ACCESS_FIELD, 'node', $this->group_type);

    $this->group_content_type = $this->drupalCreateContentType()->type;
    og_create_field(OG_AUDIENCE_FIELD, 'node', $this->group_content_type);

    // Create a group node and enable access.
    $settings = array();
    $settings['type'] = $this->group_type;
    $settings[OG_GROUP_FIELD][LANGUAGE_NONE][0]['value'] = 1;
    $settings[OG_ACCESS_FIELD][LANGUAGE_NONE][0]['value'] = 1;
    $settings['uid'] = $this->user1->uid;
    $this->group_node = $this->drupalCreateNode($settings);

    $field = array(
      'field_name' => 'pluggable_node_access',
      'type' => 'entityreference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'target_type' => 'pluggable_node_access',
      ),
    );
    field_create_field($field);
    $instance = array(
      'label' => t('Pluggable node access'),
      'description' => t('Reference to Pluggable node access entities.'),
      'field_name' => 'pluggable_node_access',
      'entity_type' => 'node',
      'bundle' => $this->group_type,
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);

    $instance['bundle'] = $this->group_content_type;
    field_create_instance($instance);

    // Reference the Pluggable node access entity.
    $wrapper = entity_metadata_wrapper('node', $this->group_node);
    $wrapper->pluggable_node_access[] = $entity;
    $wrapper->save();

    // Create node to add to group.
    $settings = array(
      'type' => $this->group_content_type,
      'uid' =>$this->user1->uid,
    );
    $this->groupContent1 = $this->drupalCreateNode($settings);

    // Add node to group.
    $values = array(
      'entity_type' => 'node',
      'entity' => $this->groupContent1,
    );
    og_group('node', $this->group_node, $values);
  }

  /**
   * Check group content access is changing.
   */
  function testAccessChanges() {
    $node1 = node_load($this->groupContent1->nid);
    $group = node_load($this->group_node->nid);


    // Check access before changing.
    $this->assertTrue(node_access('view', $node1, $this->user1));
    $this->assertFalse(node_access('view', $node1, $this->user2));
    $this->assertTrue(node_access('view', $group, $this->user1));
    $this->assertFalse(node_access('view', $group, $this->user2));

    // Change access to other restriction.
    $this->drupalLogin($this->user1);

    // Create new "email domain" Pluggable node access entity.
    $values = array(
      'type' => 'email_domain',
      'data' => array('foo.bar'),
    );
    $entity = entity_create('pluggable_node_access', $values);
    entity_save('pluggable_node_access', $entity);

    $edit = array(
      'pluggable_node_access[und][]' => array('2'),
    );

    $this->drupalPost('node/' . $this->group_node->nid . '/edit', $edit, 'Save');

    drupal_static_reset();

    $group = node_load($this->group_node->nid);

    $this->assertTrue(node_access('view', $group, $this->user2));
    $this->assertTrue(node_access('view', $node1, $this->user2));

  }
}
