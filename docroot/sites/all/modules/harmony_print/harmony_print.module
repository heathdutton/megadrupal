<?php

/**
 * @file
 * harmony_print.module
 */

/**
 * Implements hook_entity_info_alter().
 */
function harmony_print_entity_info_alter(&$info) {
  $info['harmony_thread']['view modes']['print'] = array(
    'label' => t('Print'),
    'custom settings' => FALSE,
  );
  if (variable_get('harmony_print_enable_posts', FALSE)) {
    $info['harmony_post']['view modes']['print'] = array(
      'label' => t('Print'),
      'custom settings' => FALSE,
    );
  }
}

/**
 * Implements hook_theme().
 */
function harmony_print_theme() {
  return array(
    'harmony_print' => array(
      'variables' => array('entity_type' => NULL, 'entity' => NULL, 'query' => NULL, 'format' => '', 'expand_css' => FALSE, 'message' => ''),
      'template' => 'harmony-print',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function harmony_print_permission() {
  return array(
    'administer harmony_print' => array(
      'title' => t('Administer Harmony Print settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function harmony_print_menu() {
  $items = array();

  $items['thread/%harmony_thread/print'] = array(
    'page callback' => 'harmony_print_controller_html',
    'page arguments' => array('harmony_thread', 1),
    'access callback' => 'harmony_print_print_access',
    'access arguments' => array('harmony_thread', 1),
    'weight' => 10,
    'type' => MENU_CALLBACK,
  );

  if (variable_get('harmony_print_enable_posts', FALSE)) {
    $items['post/%harmony_post/print'] = array(
      'page callback' => 'harmony_print_controller_html',
      'page arguments' => array('harmony_post', 1),
      'access callback' => 'harmony_print_print_access',
      'access arguments' => array('harmony_post', 1),
      'weight' => 10,
      'type' => MENU_CALLBACK,
    );
  }

  $items['admin/harmony/config/print'] = array(
    'title' => 'Printer-friendly pages',
    'description' => 'Configuration for the printer-friendly Harmony pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('harmony_print_admin_settings'),
    'access arguments' => array('administer harmony_print'),
  );

  return $items;
}

/**
 * Print page menu callback, much simpler than print modules.
 */
function harmony_print_controller_html($entity_type, $entity) {
  // Set a global so we know we're printing.
  global $_harmony_print_printing;
  $_harmony_print_printing = TRUE;

  // Get the link.
  $link = print_print_link();

  // Handle the query.
  $query = $_GET;
  unset($query['q']);

  // And the rest, use our custom theme function.
  $html = theme('harmony_print', array('entity_type' => $entity_type, 'entity' => $entity, 'query' => $query, 'format' => $link['format']));

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  drupal_send_headers();
  print $html;
}

/**
 * Access callback for our new print pages.
 */
function harmony_print_print_access($entity_type, $entity, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  if (!user_access('access print', $account)) {
    return FALSE;
  }

  $function = $entity_type === 'harmony_thread' ? 'harmony_core_thread_access_callback' : 'harmony_core_post_access_callback';
  return $function('view', $entity, $account);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function harmony_print_preprocess_harmony_print(&$variables) {
  module_load_include('inc', 'print', 'print.pages');
  module_load_include('inc', 'harmony_core', 'includes/harmony_core.pages');

  // Get the vars!
  extract($variables);

  // Figure out the path.
  $entity_id = $entity_type === 'harmony_thread' ? $entity->thread_id : $entity->post_id;
  $source_url = $entity_type === 'harmony_thread' ? "thread/$entity_id" : "post/$entity_id";
  $path = drupal_get_path_alias($source_url);
  $entity->path = $path;

  static $hooks = NULL;
  if (!isset($hooks)) {
    drupal_theme_initialize();
    $hooks = theme_get_registry();
  }

  $variables['page']['#show_messages'] = FALSE;

  // Stolen from theme() so that ALL preprocess functions are called.
  $hook = 'page';
  $info = $hooks[$hook];
  if (isset($info['preprocess functions']) || isset($info['process functions'])) {
    $variables['theme_hook_suggestions'] = array();
    foreach (array('preprocess functions', 'process functions') as $phase) {
      if (!empty($info[$phase])) {
        foreach ($info[$phase] as $processor_function) {
          if (function_exists($processor_function)) {
            // We don't want a poorly behaved process function changing $hook.
            $hook_clone = $hook;
            $processor_function($variables, $hook_clone);
          }
        }
      }
    }
  }

  $logo_url = FALSE;
  switch (variable_get('print_logo_options', PRINT_LOGO_OPTIONS_DEFAULT)) {
    case 1: // theme's
      $logo_url = theme_get_setting('logo');
      break;
    case 2: // user-specifed
      $logo_url = strip_tags(variable_get('print_logo_url', PRINT_LOGO_URL_DEFAULT));
      break;
  }
  $logo_url = preg_replace('!^' . base_path() . '!', '', $logo_url);

  $variables['print_logo']               = $logo_url ? theme('image', array('path' => $logo_url, 'alt' => variable_get('site_name', 'Drupal'), 'attributes' => array('class' => 'print-logo', 'id' => 'logo'))) : NULL;

  $variables['print_entity']             = $entity;
  $entity_built = harmony_print_entity_build($entity_type, $entity, $format);

  $variables['content']                  = $entity_built;
  $variables['scripts']                  = drupal_get_js();
  $variables['footer_scripts']           = drupal_get_js('footer');
  $variables['sourceurl_enabled']        = variable_get('print_sourceurl_enabled', PRINT_SOURCEURL_ENABLED_DEFAULT);
  $variables['url']                      = url($path, array('absolute' => TRUE, 'query' => $variables['query']));
  $variables['source_url']               = url(variable_get('print_sourceurl_forcenode', PRINT_SOURCEURL_FORCENODE_DEFAULT) ? drupal_get_normal_path($path) : $path, array('alias' => TRUE, 'absolute' => TRUE, 'query' => $variables['query']));
  $variables['print_title']                    = check_plain($entity->title);
  $variables['head']                     = drupal_get_html_head();
  $variables['robots_meta']              = _print_robots_meta_generator();
  $variables['css']                      = _print_css_generator($variables['expand_css']);

  if (variable_get('print_html_sendtoprinter', PRINT_HTML_SENDTOPRINTER_DEFAULT) && ($format == 'html')) {
    drupal_add_js('misc/drupal.js', array('weight' => JS_LIBRARY));

    $window_close = (variable_get('print_html_new_window', PRINT_HTML_NEW_WINDOW_DEFAULT) && variable_get('print_html_windowclose', PRINT_HTML_WINDOWCLOSE_DEFAULT)) ? 'window.close();' : '';
    $variables['sendtoprinter'] = '<script type="text/javascript">(function ($) { Drupal.behaviors.print = {attach: function(context) {$(window).load(function() {window.print();' . $window_close . '})}}})(jQuery);</script>';
  }

  $bundle = (isset($entity->type)) ? $entity->type : '';

  $variables['theme_hook_suggestions'] = array();
  $variables['theme_hook_suggestions'][] = "harmony_print__{$entity_type}";
  if ($bundle) {
    $variables['theme_hook_suggestions'][] = "harmony_print__{$entity_type}__{$bundle}";
    $variables['theme_hook_suggestions'][] = "harmony_print__{$entity_type}__{$bundle}__{$entity_id}";
    $variables['theme_hook_suggestions'][] = "harmony_print__{$entity_type}__{$bundle}__{$format}";
    $variables['theme_hook_suggestions'][] = "harmony_print__{$entity_type}__{$bundle}__{$format}__{$entity_id}";
  }
  else {
    $variables['theme_hook_suggestions'][] = "harmony_print__{$entity_type}__{$entity_id}";
    $variables['theme_hook_suggestions'][] = "harmony_print__{$entity_type}__{$format}";
    $variables['theme_hook_suggestions'][] = "harmony_print__{$entity_type}__{$format}__{$entity_id}";
  }
}

/**
 * Helper function to build the entity content.
 */
function harmony_print_entity_build($entity_type, $entity, $format) {
  global $_print_urls;

  $build_function = $entity_type === 'harmony_thread' ? 'harmony_core_thread_view' : 'harmony_core_post_view';
  $built = $build_function($entity, 'print');
  $built = render($built);

  // Get rid of any links before the content.
  $parts = explode('<div class="content', $built, 2);
  if (count($parts) == 2) {
    $pattern = '!(.*?)<a [^>]*?>(.*?)</a>(.*?)!mis';
    $parts[0] = preg_replace($pattern, '$1$2$3', $parts[0]);
    $built = implode('<div class="content', $parts);
  }

  // Check URL list settings, bypass the print module function.
  $_print_urls = (variable_get('print_urls', PRINT_URLS_DEFAULT) && variable_get('print_' . $format . '_display_sys_urllist', PRINT_TYPE_SYS_URLLIST_DEFAULT));

  // Convert the a href elements.
  $pattern = '!<(a\s[^>]*?)>(.*?)(</a>)!is';
  $built = preg_replace_callback($pattern, '_print_rewrite_urls', $built);

  return $built;
}

/**
 * Implements hook_field_extra_fields().
 */
function harmony_print_field_extra_fields() {
  $extra['harmony_thread']['harmony_thread'] = array(
    'form' => array(),
    'display' => array(
      'harmony_print_link' => array(
        'label' => t('Printer-friendly link'),
        'description' => t('Provides a link to a printer-friendly version of the current page, will not display on the printing page.'),
        'weight' => 10,
      ),
    ),
  );

  if (variable_get('harmony_print_enable_posts', FALSE)) {
    $extra['harmony_post']['harmony_post'] = array(
      'form' => array(),
      'display' => array(
        'harmony_print_link' => array(
          'label' => t('Printer-friendly link'),
          'description' => t('Provides a link to a printer-friendly version of the current page, will not display on the printing page.'),
          'weight' => 10,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * hook_entity_view().
 */
function harmony_print_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type === 'harmony_thread' || $type === 'harmony_post' && variable_get('harmony_print_enable_posts', FALSE)) {
    $bundle = $type === 'harmony_thread' ? $entity->type : $type;
    $extra_fields = field_info_extra_fields($type, $bundle, 'display');

    if ($view_mode !== 'print' && !empty($extra_fields['harmony_print_link']['display'][$view_mode]['visible'])) {
      $entity_id = $type === 'harmony_thread' ? $entity->thread_id : $entity->post_id;
      $path = $type === 'harmony_thread' ? "thread/$entity_id" : "post/$entity_id";

      // If a page has been set then include that and other query params.
      $query = $_GET;
      unset($query['q']);

      // Get link.
      $link = print_print_link();

      // Get format.
      if (module_exists('print_ui')) {
        drupal_add_css(drupal_get_path('module', 'print_ui') . '/css/print_ui.theme.css');
        $location = isset($args['location']) ? $args['location'] : '';
        $format = theme('print_ui_format_link', array('format' => $link['format'], 'location' => $location));
      }
      else {
        $format = array(
          'text' => $link['text'],
          'attributes' => array(),
          'html' => FALSE,
        );
      }

      // Output it!
      $entity->content['harmony_print_link'] = array(
        '#theme' => 'link',
        '#text' => variable_get('print_html_link_text', $link['text']),
        '#path' => $path . '/print',
        '#options' => array(
          'attributes' => $format['attributes'],
          'query' => $query,
          'absolute' => TRUE,
          'html' => $format['html'],
        ),
      );
    }
  }
}

/**
 * hook_entity_view_alter().
 */
function harmony_print_entity_view_alter(&$build, $type) {
  if ($type === 'harmony_post' && $build['#view_mode'] === 'print') {
    // Remove some things we won't want.
    unset($build['links']);
  }
}

/**
 * hook_entity_view_mode_alter().
 */
function harmony_print_entity_view_mode_alter(&$view_mode, $context) {
  global $_harmony_print_printing;

  // For posts, change the view mode when we're printing.
  if ($context['entity_type'] == 'harmony_post' && $_harmony_print_printing) {
    $view_mode = 'print';
  }
}

/**
 * Form callback.
 */
function harmony_print_admin_settings() {
  $form = array();

  $form['harmony_print_enable_posts'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled printer-friendly pages for posts'),
    '#default_value' => variable_get('harmony_print_enable_posts', 0),
  );

  return system_settings_form($form);
}
