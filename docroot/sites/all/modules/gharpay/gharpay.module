<?php

/**
 * @file
 * Gharpay module.
 */

// Set Gharapay API, password and Service url.
define('GP_API', variable_get('gharpay_api_key', ''));
define('GP_PASSWORD', variable_get('gharpay_password', ''));
define('GP_SERVICE_URL', variable_get('gharpay_service_url', ''));

// Check if library exists. Though already defined in hook_requirements()
// its a double check.
$gharpay_library = DRUPAL_ROOT . "/sites/all/libraries/gharpay/GharpayAPI.php";
if (file_exists($gharpay_library)) {
  require_once($gharpay_library);
  // Include dependent files.
  require_once(DRUPAL_ROOT . "/" . drupal_get_path('module', 'gharpay') . "/gharpay.class.php"); 
}
else {
  drupal_set_message(t("Gharapay PHP library is either missing or named incorrectly. Check README.txt for details."), "error");
  return;
}

/**
 * Implements hook_permission().
 */
function gharpay_permission() {
  return array(
    'configure_gharpay' => array(
      'title' => 'Configure Gharpay',
    ),
    'access_gharpay' => array(
      'title' => 'Access Gharpay',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function gharpay_menu() {

  $items = array();

  $items['admin/config/services/gharpay'] = array(
    'title' => t('Configure Gharpay'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gharpay_credentials_form'),
    'access arguments' => array('configure_gharpay'),
    'file' => 'gharpay.credentials.inc',
    'description' => 'Configure credentials for Gharpay.',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/gharpay/configure'] = array(
    'title' => t('Configure Gharpay'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/gharpay/settings'] = array(
    'title' => t('Gharpay settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gharpay_config_form'),
    'access arguments' => array('configure_gharpay'),
    'file' => 'gharpay.admin.inc',
    'description' => 'Configure settings for Gharpay.',
    'type' => MENU_LOCAL_TASK,
  );
  $items['gharpay/services/cities'] = array(
    'title' => t('Available cities'),
    'page callback' => 'gharpay_available_cities',
    'access arguments' => array('access_gharpay'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Get list of available cities with pincodes
 * where Gharpay provides its services.
 */
function gharpay_available_cities() {
  $gharpay = new GpGharpayAPI();
  $cities = $gharpay->getCityList();
  $form = array();
  foreach ($cities as $key => $city) {
    $form[$city] = array(
        '#type' => 'fieldset',
        '#title' => t('@city', array('@city' => $city)),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
    $form[$city][] = array(
        '#type' => 'select',
        '#title' => t('Available pincodes'),
        '#options' => $gharpay->getPincodesInCity($city),
      );
  }
  return $form;
}

/**
 * Create an array of client details to pass to
 * createOrder() function provided by Gharpay API
 * @param
 *   an object of user submitted form. Check API documentation for mandatory fields.
 * @return
 *   an array to pass to createOrder() function.
 */
function gharpay_create_order_client_details($order) {

  $array = array();
  // Mandatory fields.
  // Should have already passed validation.
  $array = array(
      'firstName' => $order->delivery_first_name,
      'contactNo' => $order->delivery_phone,
      'address' => str_replace("<BR />", ",", uc_order_address($order, 'delivery')),
    );
  // These are optional fields.
  // They did not go under validation earlier.
  if (!empty($order->primary_email)) {
    $array['email'] = $order->primary_email;
  }
  if (!empty($order->delivery_last_name)) {
    $array['lastName'] = $order->delivery_last_name;
  }
  if (!empty($order->prefix)) {
    $array['prefix'] = $order->prefix;
  }

  return $array;
}

/**
 * Create an array of order details to pass to
 * createOrder() function provided by Gharpay API
 * @param
 *   an object of user submitted form. Check API documentation for mandatory fields.
 * @return
 *   an array to pass to createOrder() function.
 */
function gharpay_create_order_order_details($order) {

  $array = array();
  // Mandatory fields.
  $array = array(
      // Should have already passed validation.
      'pincode' => $order->delivery_postal_code,
      // Ubercart validation assumed.
      'orderAmount' => $order->order_total,
      // Ubercart validation assumed.
      'clientOrderID' => $order->order_id,
      // @TODO
      // Get delivary date from order.
      'deliveryDate' => date("d-m-Y"),
    );

  // These are optional fields.
  // They did not go under validation earlier.
  if (!empty($order->template_id)) {
    $array['template_id'] = $order->template_id;
  }
  if (!empty($order->payment_mode)) {
    $array['payment_mode'] = $order->payment_mode;
  }

  // @TODO
  // Leaving Additional information intentionally.
  // This would be added via a hook later.

  return $array;
}

/**
 * Create an array of product details to pass to
 * createOrder() function provided by Gharpay API
 * @param
 *   an object of user submitted form. Check API documentation for mandatory fields.
 * @return
 *   an array to pass to createOrder() function if products are available
 *   FALSE otherwise.
 */
function gharpay_create_order_product_details($order) {
  $array = array();
  // Check if products exist.
  if ($order->products) {
    foreach ($order->products as $op_id => $product) {
      $product_description = gharpay_get_order_description($product->nid);
      $array[$op_id] = array(
          'orderId' => $product->order_id,
          'productID' => $product->order_product_id,
          'productQuantity' => $product->qty,
          'unitCost' => $product->price,
          // Need to pass default value for product description
          // else GharpayAPI would throw an exception.
          'productDescription' => $product_description ? $product->title . ": " . $product_description : $product->title,
        );
    }
    return $array;
  }
  else {
    return FALSE;
  }
}

/**
 * Ubercart does not provide product description in $order variable
 * though node id is available.
 * This function would extract node body field of the product node.
 * @param
 *   Node id of product.
 * @return
 *   Body field value of node.
 */
function gharpay_get_order_description($nid) {
  return db_query("SELECT body_value FROM {field_data_body} WHERE entity_id = :nid", array(':nid' => $nid))->fetchField();
}