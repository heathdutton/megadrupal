<?php

function spotlight_init() {
    _spotlight_load_files();
}

function spotlight_menu() {
    $items['admin/config/search/spotlight'] = array(
        'type' => MENU_NORMAL_ITEM,
        'title' => t('Spotlight Settings'),
        'description' => t('Configure Spotlight Preferences.'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('spotlight_settings'),
        'access arguments' => array('administer search'),
    );

    $items['spotlight/ajax'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'spotlight_ajax',
        'access arguments' => array('search content'),
    );

    $items['spotlight/ajax/spot'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'spotlight_ajax_spot',
        'access arguments' => array('search content'),
    );

    $items['spotlight'] = array(
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'spotlight_render',
        'access arguments' => array('search content'),
    );

    return $items;
}

function spotlight_block_info() {

    $blocks['spotlight'] = array(
        'info' => t('Spotlight'),
        'cache' => DRUPAL_NO_CACHE,
    );

    return $blocks;
}

function spotlight_block_view($delta = '') {
    $block = array();

    switch ($delta) {
        case 'spotlight':
            $block['subject'] = '';
            $block['content'] = spotlight_render();
            break;
    }

    return $block;
}

function spotlight_theme($existing, $type, $theme, $path) {
    $themes = array (
        'spotlight_search' => array(
            'template' => 'theme/spotlight-search',
        ),

        'spotlight_category' => array(
            'variables' => array(
                'category' => '',
                'items' => array(),
            ),
        ),

        'spotlight_item' => array(
            'variables' => array(
                'category' => '',
                'title' => '',
                'url' => '',
                'icon'=> '',
                'description' => '',
                'item' => array(),
            ),
        ),
    );
    return $themes;
}

function spotlight_render() {
    return theme('spotlight_search');
}

/**
 * Pre-render function to add Spotlight search capability to an existing form.
 *
 * @param $element
 *   The input form element to add the Spotlight search capability to. Normally
 *   a text field (for example, an existing search input field).
 *
 * @see spotlight-search.tpl.php
 */
function spotlight_pre_render($element) {
  $settings = variable_get('spotlight_settings', array());
  $width = isset($settings['width']) ? $settings['width'] : '360px';

  $element += array('#prefix' => '', '#suffix' => '');
  $element['#prefix'] = '<i class="spotlight-spin animate-spin"></i>' . $element['#prefix'];
  $element['#prefix'] = '<div class="spotlight-input-wrapper">' . $element['#prefix'];
  $element['#prefix'] = '<div class="spotlight-wrapper" style="width:' . $width . '">' . $element['#prefix'];
  $element['#suffix'] .= '<i class="spotlight-search"></i>';
  $element['#suffix'] .= '</div>';
  $element['#suffix'] .= '<div style="clear:both;"></div>';
  $element['#suffix'] .= '<div class="spotlight-result-wrapper"></div>';
  $element['#suffix'] .= '</div>';

  $element['#attributes']['class'][] = 'spotlight-input';
  $element['#attributes']['autocomplete'] = 'off';

  return $element;
}

function _spotlight_load_files() {
    $settings = variable_get('spotlight_settings', array());
    $settings += array('ajaxURL' => url('spotlight/ajax'));
    $settings += array('render' => spotlight_render());

    $module_path = drupal_get_path('module', 'spotlight');

    drupal_add_css($module_path . '/css/spotlight.css');
    drupal_add_css($module_path . '/css/spotlight.icons.css');
    drupal_add_css($module_path . '/css/spotlight.icons.animation.css');

    drupal_add_css($module_path . '/css//spotlight.icons-ie7.css',
        array(
            'browsers' =>
                array(
                    'IE' => 'lte IE 8',
                    '!IE' => FALSE),
        )
    );

    drupal_add_js(array('spotlight' => $settings), array('type' => 'setting'));
    drupal_add_js($module_path . '/js/spotlight.js');
}

function spotlight_settings() {
    $settings = variable_get('spotlight_settings', array());

    $form['results'] = array(
        '#type' => 'fieldset',
        '#title' => t('Search Results'),
        '#collapsible' => TRUE,
    );

    $form['results']['category'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Only selected categories will appear in Spotlight search results:'),
        '#default_value' => ($settings['category'] ? $settings['category'] : array()),
        '#options' => array(
          'content' => 'Content',
          'paths' => 'Paths & Menu Links',
          'users' => 'Users',
          'files' => 'File Uploads',
          'blocks' => 'Blocks',
          'views' => 'Views',
        ),
    );

    $form['display'] = array(
        '#type' => 'fieldset',
        '#title' => t('Display Options'),
        '#collapsible' => TRUE,
    );

    $form['display']['limit'] = array(
        '#type' => 'textfield',
        '#title' => t('Limit results to top'),
        '#default_value' => ($settings['limit'] ? $settings['limit'] : 10),
        '#field_suffix' => t('items'),
        '#description' => t('Limit displayed results to a number of top items. Type 0 for no limit.'),
    );

    $form['display']['width'] = array(
        '#type' => 'textfield',
        '#title' => t('Width of the widget'),
        '#default_value' => ($settings['width'] ? $settings['width'] : '360px'),
        '#description' => t('CSS width value of the widget.'),
    );

    $form['display']['blank'] = array(
        '#type' => 'checkbox',
        '#default_value' => (isset($settings['blank']) ? $settings['blank'] : 1),
        '#field_suffix' => t('Open result in a new window'),
        '#description' => t('When result is clicked, opens in a new tab or window.'),
    );

    $form['#theme'] = 'system_settings_form';
    $form['actions']['#type'] = 'actions';
    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));

    if (!empty($_POST) && form_get_errors()) {
        drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
    }

    return ($form);
}


function spotlight_settings_submit(&$form, &$form_state) {
    variable_set('spotlight_settings', $form_state['values']);
}


function theme_spotlight_category(&$variables) {
    $settings = variable_get('spotlight_settings', array());

    $category = $variables['category'];
    $items = $variables['items'];
    $category_title = ucwords($category);

    $category_class = drupal_html_class("spotlight-category-{$category}");
    $output = "<div class=\"spotlight-category $category_class\">";
    $output .= "<div class=\"spotlight-category-title\">" . check_plain($category_title) . "</div>";

    $i = 0;

    foreach($items as $item) {

       if($settings['limit'] != 0 && $i == $settings['limit']) { break; }

        $output .=  theme('spotlight_item', array(
            'category' => $category,
            'title' => $item['title'],
            'url' => $item['url'],
            'icon'=> $item['icon'],
            'description' => $item['description'],
            'item' => $item,
        ));

        $i++;
    }

    $output .= "</div>";


    return $output;
}

function template_preprocess_spotlight_item(&$variables) {
  $variables['title'] = check_plain($variables['title']);
  $variables['url'] = check_url($variables['url']);
  $variables['description'] = filter_xss($variables['description']);
}

function theme_spotlight_item(&$variables) {
    $settings = variable_get('spotlight_settings', array());
    $icon = $variables['icon'];
    $title = $variables['title'];
    $url = $variables['url'];
    $description = $variables['description'];
    $blank = ($settings['blank'] ? " target=\"_blank\" " : '');

    $output = "<a {$blank} class=\"spotlight-item\" href=\"{$url}\" title=\"{$description}\">";
    $output .= "<i class=\"{$icon}\"></i>&nbsp;&nbsp;";
    $output .= "<span class=\"spotlight-item-title\">{$title}</span>";
    $output .= '<br />';
    $output .= "<span class=\"spotlight-item-description\">{$description}</span>";
    $output .= "</a>";
    return $output;
}

function spotlight_ajax() {
    $output = spotlight_results_output();
    drupal_json_output($output);
    exit;
}

/**
 * Returns HTML output for the current Spotlight search results.
 */
function spotlight_results_output() {
    $output = '';

    if(isset($_GET['key']) && strlen($_GET['key']) > 0) {
        $results = spotlight_search($_GET['key']);

        foreach($results as $category => $result) {
            if($category == 'top_hit') { $category = 'Top Hit';}
            $output .= theme('spotlight_category', array('category' => $category, 'items' => $result));
        }

    }

    return $output;
}

function spotlight_ajax_spot() {
    global $user;

    if(isset($_GET['key']) && isset($_GET['path'])) {
        $found = false;

        $query = db_select('spotlight_stats', 'ss')
            ->fields('ss', array('id', 'uid', 'keyword', 'path', 'visits'))
            ->condition('uid', $user->uid,'=')
            ->condition('path', $_GET['path'],'LIKE')
            ->execute();

        while($record = $query->fetchAssoc()){
            if($record['keyword'] == $_GET['key']) {
                $found = true;
                $record['visits'] += 1;
                drupal_write_record('spotlight_stats', $record, array('id'));
                die('found');
            }
        }

        if(!$found) {
            $record = array(
                'uid' => $user->uid,
                'keyword' => $_GET['key'],
                'path' => $_GET['path'],
                'title' => $_GET['title'],
                'icon' => $_GET['icon'],
                'visits' => 1,
            );

        db_insert('spotlight_stats')->fields($record)->execute();
        die('new');

        }
    }
}


function spotlight_search($key) {
    $results = array();
    $settings = variable_get('spotlight_settings', array());

    $settings['category'] = array('top_hit' => 'top_hit') + $settings['category'];

    if(strlen($key) > 0 && !empty($settings['category'])) {
        foreach($settings['category'] as $category => $enabled) {
            if($enabled && function_exists("_spotlight_search_{$category}")) {
                $result = call_user_func("_spotlight_search_{$category}", check_plain($key));

                if(count($result) > 0) {
                    $results[$category] = $result;
                }

            }
        }
    }

    return $results;
}

function _spotlight_search_top_hit($key) {
    global $user;

    $result = array();

    $query = db_select('spotlight_stats', 'ss')
        ->fields('ss')
        ->condition('uid', $user->uid,'=')
        ->execute();

    $shortest = -1;
    $matches = array();
    $closestRecord = null;

    // loop through words to find the closest
    while($record = $query->fetchAssoc()) {
        $word = $record['keyword'];

        // calculate the distance between the input word,
        // and the current word
        $lev = levenshtein($key, $word);
        //print $lev;
        // check for an exact match
        if ($lev == 0) {

            // closest word is this one (exact match)
            $closest = $word;
            $shortest = 0;
            $matches[] = $record;
            $closestRecord = $record;

            // break out of the loop; we've found an exact match
            continue;
        }

        // if this distance is less than the next found shortest
        // distance, OR if a next shortest word has not yet been found
        if ($lev <= $shortest || $shortest < 0) {
            // set the closest match, and shortest distance
            $closest  = $word;
            $shortest = $lev;
            $closestRecord = $record;
        }
    }

    uasort($matches, '_spotlight_top_hit_sort');

   // print_r($matches);

    if(count($matches) && $tophit = reset($matches)) {
        $result[] = array(
            'title' => $tophit['title'],
            'url'  => $tophit['path'],
            'icon' => $tophit['icon'],
            'description' => $tophit['path'],
        );
    } else if($closestRecord && $shortest <= 3) {
        $result[] = array(
            'title' => $closestRecord['title'],
            'url'  => $closestRecord['path'],
            'icon' => 'spotlight-path',
            'description' => $closestRecord['path'],
        );
    }

    return $result;
}

function _spotlight_top_hit_sort($a, $b) {
    if ($a['visits'] == $b['visits']) {
        return 0;
    }
    return ($a['visits'] < $b['visits']) ? 1 : -1;
}

function _spotlight_search_paths($key) {
    global $user;

    $key = db_like($key);
    $key = str_replace(' ', '%', $key);

    $result = array();


    $sql = "SELECT title, path
            FROM {menu_router}
            WHERE title like '%{$key}%'
            OR path like '%{$key}%'
            GROUP BY title
            ORDER BY CASE WHEN path like '{$key} %' THEN 0
                       WHEN path like '{$key}%' THEN 1
                       WHEN path like '% {$key}%' THEN 2
                       ELSE 3
            END, path";

    $query = db_query($sql);


    while($record = $query->fetchAssoc()) {
        if($record['title'] && $record['path'] && !strpos($record['path'], '%') && drupal_valid_path($record['path'])){
            $result[] = array(
                'title' => $record['title'],
                'url'  => url($record['path']),
                'icon' => 'spotlight-path',
                'description' => url($record['path'], array('absolute' => TRUE)),
            );
        }
    }

    return $result;
}

function _spotlight_search_views($key) {
  global $user;
  $result = array();

  if(module_exists('views')) {

    $key = db_like($key);
    $key = str_replace(' ', '%', $key);

    $sql = "SELECT name, human_name
              FROM {views_view}
              WHERE human_name like '%{$key}%'
              OR name like '%{$key}%'
              GROUP BY name
              ORDER BY CASE WHEN name like '{$key} %' THEN 0
                         WHEN name like '{$key}%' THEN 1
                         WHEN name like '% {$key}%' THEN 2
                         ELSE 3
              END, name";

    $query = db_query($sql);

    while($record = $query->fetchAssoc()) {
      $path = "admin/structure/views/view/{$record['name']}";

      if($record['name'] && $record['human_name'] && !strpos($record['name'], '%') && drupal_valid_path($path)){
        $result[] = array(
          'title' => $record['human_name'],
          'url'  => url($path),
          'icon' => 'spotlight-path',
          'description' => $path, //url("admin/structure/views/view/{$record['name']}", array('absolute' => TRUE)),
        );
      }
    }
  }

  return $result;
}


function _spotlight_search_blocks($key) {
  global $user;
  $result = array();

  if(module_exists('block')) {
    $key = db_like($key);
    $key = str_replace(' ', '%', $key);

    $sql = "SELECT delta, title, module
            FROM {block}
            WHERE delta like '%{$key}%'
            OR title like '%{$key}%'
            GROUP BY delta
            ORDER BY CASE WHEN delta like '{$key} %' THEN 0
                       WHEN delta like '{$key}%' THEN 1
                       WHEN delta like '% {$key}%' THEN 2
                       ELSE 3
            END, delta";

    $query = db_query($sql);


    while($record = $query->fetchAssoc()) {
      $path = "admin/structure/block/manage/{$record['module']}/{$record['delta']}/configure";

      if($record['delta'] || $record['title'] && !strpos($record['delta'], '%') && drupal_valid_path($path)){
        $result[] = array(
          'title' => (empty($record['title']) ? $record['delta'] : $record['title']),
          'url'  => url($path),
          'icon' => 'spotlight-path',
          'description' => $path, //url($path, array('absolute' => TRUE)),
        );
      }
    }
  }

  return $result;
}

function _spotlight_search_content($key) {
    $result = array();

    if(strlen($key) >= 3) {
        $search = node_search_execute($key);

        foreach($search as $item) {
            $result[] = array(
                'title' => $item['title'],
                'url'  => $item['link'],
                'icon' => 'spotlight-node',
                'description' => '',
            );
        }
    }

    return $result;
}

function _spotlight_search_users($key) {
    global $user;
    $result = array();

    if(user_access('access user profiles', $user) && strlen($key) >= 3) {
        $search = user_search_execute($key);

        foreach($search as $item) {
            $result[] = array(
                'title' => $item['title'],
                'url'  => $item['link'],
                'icon' => 'spotlight-user',
                'description' => $item['link'],
            );
        }
    }

    return $result;
}

function _spotlight_search_files($key) {
    $result = array();

    $query = db_select('file_managed', 'f')
        ->fields('f', array('fid', 'filename', 'uri', 'filemime'))
        ->condition('filename', '%' . db_like($key) . '%','LIKE')
        ->execute();

    while($record = $query->fetchAssoc()) {
        $result[] = array(
            'title' => $record['filename'],
            'url'  => file_create_url($record['uri']),
            'icon' => _spotlight_file_icon($record['filemime']),
            'description' => '',
        );
    }

    return $result;
}

function _spotlight_file_icon($mime) {
    if(strpos($mime, 'audio') !== false) { return 'spotlight-audio'; }
    if(strpos($mime, 'video') !== false) { return 'spotlight-video'; }
    if(strpos($mime, 'image') !== false) { return 'spotlight-picture'; }

    return 'spotlight-file';
}
