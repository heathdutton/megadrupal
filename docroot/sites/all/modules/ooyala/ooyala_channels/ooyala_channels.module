<?php

/**
 * @file
 * Add support for Ooyala channels to Drupal.
 */

/**
 * Implements hook_menu()
 */
function ooyala_channels_menu() {
  $items = array();

  $items['node/%node/add-to-channel'] = array(
    'title' => 'Add to channel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ooyala_channels_add_video_form', 1),
    'access callback' => 'ooyala_channels_add_to_channel_access',
    'access arguments' => array(1),
    'file path' => drupal_get_path('module', 'ooyala_channels') . '/includes',
    'file' => 'ooyala_channels.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  // #autocomplete callbacks.
  $items['ooyala-channels/autocomplete-video'] = array(
    'title' => 'Ooyala channel video autocomplete',
    'page callback' => 'ooyala_channels_video_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu access callback to determine if the "Add to channel" tab should be
 * shown on a given video node.
 *
 * @param $video_node
 *   The video node to add to a channel.
 *
 * @return
 *   TRUE if the Add to channel tab should be displayed, or FALSE otherwise.
 */
function ooyala_channels_add_to_channel_access($video_node) {
  // First, determine if we have any channel-enabled content types.
  $content_types = ooyala_channels_content_types();
  if (empty($content_types)) {
    return FALSE;
  }

  // Now, find out if we have any Channel nodes.
  $channel_nids = ooyala_channel_fetch_channel_nids();
  if (empty($channel_nids)) {
    return FALSE;
  }

  // Finally, check that the current node has at least one embed_code associated
  // with it.
  $embed_codes = ooyala_node_embed_codes($video_node, 'video');
  return !empty($embed_codes);
}

/**
 * Fetch the node IDs for all channel nodes.
 *
 * @param $reset
 *   Reset the static cache of channel node ids.
 *
 * @return
 *   An array of channel node IDs, or an empty array if none are accessible by
 *   the current user.
 */
function ooyala_channel_fetch_channel_nids($reset = FALSE) {
  static $channel_nids;

  if (!isset($channel_nodes) || $reset) {
    $channel_nids = array();
    $content_types = ooyala_channels_content_types();
    $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', $content_types, 'IN')
      ->addTag('node_access');
    $result = $query->execute()->fetchAll();

  foreach ($result as $nid) {
      $channel_nids[] = $nid->nid;
    }
  }

  return $channel_nids;
}

/**
 * Implements hook_theme()
 */
function ooyala_channels_theme($existing, $type, $theme, $path) {
  return array(
    'ooyala_channels_autocomplete' => array(
      'variables' => array('result' => NULL, 'string' => NULL),
    ),
    'ooyala_channels_lineup_items_edit' => array(
      'render element' => 'items',
      'path' => drupal_get_path('module', 'ooyala_channels') . '/includes',
      'file' => 'ooyala_channels.theme.inc',
    ),
    'ooyala_channels_lineup' => array(
      'render element' => 'element', 
      'path' => drupal_get_path('module', 'ooyala_channels') . '/includes',
      'file' => 'ooyala_channels.theme.inc',
    ),
    'ooyala_channels_lineup_tabledrag' => array(
      'render element' => 'element', 
      'path' => drupal_get_path('module', 'ooyala_channels') . '/includes',
      'file' => 'ooyala_channels.theme.inc',
    ),
  );
}

/**
 * Implements hook_form_alter()
 */
function ooyala_channels_form_alter(&$form, &$form_state, $form_id) {
  // If we are on a node type or node form, find the node type and the human
  // readable type name.
  if (isset($form['#node_type'])) {
    $node_type = $form['#node_type']->type;
    $node_type_name = $form['#node_type']->name;
  }
  elseif (isset($form['type']['#value'])) {
    $node_type = $form['type']['#value'];
    $node_type_name = array_keys(node_type_get_types());
  }
  else {
    $node_type = '';
  }

  switch ($form_id) {
    case 'node_type_form':
      module_load_include('inc', 'ooyala_channels', 'includes/ooyala_channels.admin');
      ooyala_channels_alter_node_type_form($form, $form_state, $form_id, $node_type, $node_type_name);
      break;

    case $node_type . '_node_form':
      if (variable_get('ooyala_channels_enabled_' . $node_type, FALSE)) {
        module_load_include('inc', 'ooyala_channels', 'includes/ooyala_channels.pages');
        ooyala_channels_alter_node_form($form, $form_state, $form_id);
      }
      break;
  }
}

/**
 * Implements hook_node_type_delete().
 */
function ooyala_channels_node_type_delete($info) {
  variable_del('ooyala_channels_enabled_' . $info->type);
}

/**
 * Implements hook_node_delete().
 */
function ooyala_channels_node_delete($node) {
  if (!variable_get('ooyala_channels_enabled_' . $node->type, FALSE)) {
    return;
  }

  if ($embed_code = ooyala_channels_node_embed_code($node->nid)) {
    module_load_include("inc", "ooyala", "includes/ooyala.api");
    // Use the Attribute Update API to delete the channel.
    $params = array(
      'embed_code' => $embed_code,
      'status' => 'deleted',
    );
    if (ooyala_api_edit($params)) {
      watchdog('ooyala_channels', 'There was an error deleting channel %channel from the Ooyala backlot.', array('%channel' => $embed_code));
    }
    db_delete('ooyala_channel_node')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_load().
 */
function ooyala_channels_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if (!variable_get('ooyala_channels_enabled_' . $node->type, FALSE)) {
      break;
    }

    if ($embed_code = ooyala_channels_node_embed_code($node->nid)) {
      module_load_include("inc", "ooyala_channels", "includes/ooyala_channels.api");

      $node->ooyala_channel = ooyala_channels_list($embed_code);
      $thumbnail = ooyala_channels_node_thumbnail($node->nid);
      $node->ooyala_channel['thumbnail'] = !empty($thumbnail) ? $thumbnail : NULL;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function ooyala_channels_node_insert($node) {
  ooyala_channels_node_sanitize($node, 'insert');
}
/**
 * Implements hook_node_update().
 */
function ooyala_channels_node_update($node) {
  ooyala_channels_node_sanitize($node, 'update');
}

// Helper function for both hook_node_insert and hook_node_update().
function ooyala_channels_node_sanitize($node, $op = 'insert') {
  // Only create a channel if the content type is channel-enabled and this
  // node is not associated with an existing channel.
  if (!variable_get('ooyala_channels_enabled_' . $node->type, FALSE)) {
    return;
  }

  ooyala_channels_pop_table($node);
  $embed_code = ooyala_channels_node_embed_code($node->nid);
  module_load_include("inc", "ooyala_channels", "includes/ooyala_channels.api");

  // Create an embed code for the channel.
  if (!$embed_code) {
    if ($embed_code = ooyala_channels_create($node->title)) {
      $node->ooyala_channel['embed_code'] = $embed_code;
      $node->ooyala_channel['thumbnail'] = (ooyala_api_fetch_image($embed_code) ? $embed_code : NULL);

      // Save the embed code to the database.
      db_merge('ooyala_channel_node')
        ->key(array('nid' => $node->nid))
        ->fields(array('nid' => $node->nid, 'embed_code' => $embed_code, 'thumbnail' => $node->ooyala_channel['thumbnail']))
        ->updateFields(array('embed_code' => $embed_code, 'thumbnail' => $node->ooyala_channel['thumbnail']))
        ->execute();
    }
    else {
      drupal_set_message(t("There was an error creating the Ooyala channel."), 'error');
      return;
    }
  }

  module_load_include("inc", "ooyala", "includes/ooyala.api");
  // Use the Attribute Update API to set the description of the channel.
  $params = array(
    'embed_code' => $embed_code,
    'name' => $node->title,
    'description' => (empty($node->body[LANGUAGE_NONE][0]['value']) ? '' : $node->body[LANGUAGE_NONE][0]['value']),
    'status' => $node->status ? 'live' : 'paused',
  );
  ooyala_api_edit($params);

  // Order the channel lineup by item weight.
  if (isset($node->ooyala_channel) && isset($node->ooyala_channel['lineup']) && is_array($node->ooyala_channel['lineup'])) {
    usort($node->ooyala_channel['lineup'], 'ooyala_channels_sort_lineup');
  }

  $embed_codes = array();
  if (isset($node->ooyala_channel['lineup'])) {
    foreach (array_filter($node->ooyala_channel['lineup']) as $item) {
      $embed_codes[] = $item['embedCode'];
    }
    ooyala_channels_assign($embed_code, $embed_codes);
  }

  // Set the channel thumbnail.
  if ($op == 'update') {
    if (isset($node->ooyala_channel['thumbnail'])) {
      db_update('ooyala_channel_node')
        ->fields(array('thumbnail' => $node->ooyala_channel['thumbnail']))
        ->condition('nid', $node->nid)
        ->execute();
    }
  }

  // Save the promo image to Ooyala.
  if ($image = ooyala_api_fetch_image($node->ooyala_channel['thumbnail'])) {
    $promo_url = ooyala_api_upload_promo_image($embed_code, $image);
  }
}

/**
 * Implements hook_node_validate().
 */
function ooyala_channels_node_validate($node, $form, &$form_state) {
  if (!variable_get('ooyala_channels_enabled_' . $node->type, FALSE)) {
    return;
  }

  ooyala_channels_pop_table($node);
  // Ensure that the channel has at least one item in the lineup.
  if (empty($node->ooyala_channel['lineup']) && $form_state['values']['op'] !== 'Add video') {
    form_error($form['ooyala_channel'], t('The channel lineup must contain at least one item.'));
  }
}

/**
 * Implements hook_node_view().
 */
function ooyala_channels_node_view($node, $view_mode, $langcode) {
  ooyala_channels_pop_table($node);
  if (isset($node->ooyala_channel['thumbnail'])) {
    if ($view_mode == 'preview') {
      $node->content['ooyala_preview'] = array(
        '#prefix' => '<p class="description">',
        '#markup' => t('The Ooyala Video player for this channel will be shown here after the channel is saved.'),
        '#suffix' => '</p>',
      );
    }
    else {
      // If we are overriding the Ooyala backlot for the view or transition
      // settings, pass those along to the ooyala_player() function.
      $params = array();
      $player_view = variable_get('ooyala_channels_player_view_' . $node->type, 'backlot');
      $player_transition = variable_get('ooyala_channels_player_transition_' . $node->type, 'backlot');
      if ($player_view != 'backlot') {
        $params['view'] = $player_view;
      }
      if ($player_transition != 'backlot') {
        $params['transition'] = $player_transition;
      }
      $node->content['player'] = array(
        '#markup' => ooyala_player($node->ooyala_channel['embed_code'], $params),
      );
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function ooyala_channels_field_extra_fields($type_name = '') {
  if (!variable_get('ooyala_channels_enabled_' . $type_name, FALSE)) {
    return;
  }

  $extra['ooyala_channels'] = array(
    'label' => t('Ooyala channels'),
    'description' => t('Ooyala channels form.'),
    'weight' => 5,
  );

  return $extra;
}

/**
 * Implements hook_ooyala_node_embed_codes().
 */
function ooyala_channels_ooyala_node_embed_codes($node, $type) {
  $embed_codes = array();
  if ($type == 'all' || $type == 'channel') {
    if (is_object($node)) {
      $embed_code = ooyala_channels_node_embed_code($node->nid);
      if ($embed_code) {
        $embed_codes[] = $embed_code;
      }
    }
  }
  return $embed_codes;
}

/**
 * Fetch the channel embed code for a given node ID.
 *
 * @param $nid
 *  The node ID to fetch the channel for.
 *
 * @return
 *   The channel embed code, or FALSE if one is not found.
 */
function ooyala_channels_node_embed_code($nid) {
  $result = db_select('ooyala_channel_node')
    ->fields('ooyala_channel_node', array('embed_code'))
    ->condition('nid', $nid)
    ->execute()
    ->fetchAssoc();
  return $result['embed_code'];
}

/**
 * Fetch the channel thumbnail for a given node ID.
 *
 * @param $nid
 *  The node ID to fetch the channel for.
 *
 * @return
 *   The thumbnail embed code, or FALSE if one is not found.
 */
function ooyala_channels_node_thumbnail($nid) {
  $result = db_select('ooyala_channel_node')
    ->fields('ooyala_channel_node', array('thumbnail'))
    ->condition('nid', $nid)
    ->execute()
    ->fetchAssoc();
  return $result['thumbnail'];
}

/**
 * #autocomplete callback to fetch potential videos based on a string. Results
 * are fetched based off of embed codes, node IDs, video titles, or node
 * titles. A maximum of 10 results are returned.
 *
 * @param $string
 *   The string to search for potential video matches.
 */
function ooyala_channels_video_autocomplete($string) {
  module_load_include("inc", "ooyala", "includes/ooyala.api");
  $matches = array();
  $embed_codes = array();

  // Search by video title.
  $params = array(
    'title' => $string,
    'contentType' => 'Video',
    'limit' => 10,
  );
  $videos = ooyala_api_video_query($params);
  foreach ($videos as $video) {
    $result_key = ooyala_channels_autocomplete_result_key($video);
    $matches[$result_key] = theme('ooyala_channels_autocomplete', array('result' => $video, 'string' => $string));
    if (count($matches) >= 10) {
      return drupal_json_output($matches);
    }
  }


  // Search by node title.
  $ooyala_types = array_keys(ooyala_type_names());
  // db_like will complain since we're using a range query, but it still works.
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('title', '%' .db_like($string) .'%', 'LIKE')
    ->range(0, 10)
    ->addTag('node_access')
    ->execute();
  foreach ($result as $nid) {
    // TODO change this to use node_load_multiple?
    $node = node_load($nid->nid);
    $node_embed_codes = ooyala_node_embed_codes($node, 'video');
    foreach ($node_embed_codes as $embed_code) {
      $video = ooyala_api_video_load($embed_code);
      $result_key = ooyala_channels_autocomplete_result_key($video);
      if (empty($matches[$result_key])) {
        $video['node_title'] = $node->title;
        $matches[$result_key] = theme('ooyala_channels_autocomplete', array('result' => $video, 'string' => $string));
        if (count($matches) >= 10) {
          return drupal_json_output($matches);
        }
      }
    }
  }

  // Search by node ID.
  foreach ($ooyala_types as $type_name) {
    $table = 'content_type_' . $type_name;
    $field = ooyala_field_names($type_name);
    $table = 'field_data_' .$field[0];
    $field_name = $field[0] .'_value';

    $query = db_select($table, 't');
    $query->innerJoin('node', 'n', 't.revision_id = n.vid');
    $query->fields('t', array($field_name))
      ->condition('t.entity_id', $string)
      ->addTag('node_access')
      ->range(0, 10);
    $result = $query->execute();
    foreach ($result as $embed_code) {
      $result_key = ooyala_channels_autocomplete_result_key($video);
      if (empty($matches[$result_key])) {
        $video = ooyala_api_video_load($embed_code);
        $video['nid'] = $string;
        $matches[$result_key] = theme('ooyala_channels_autocomplete', array('result' => $video, 'string' => $string));
        if (count($matches) >= 10) {
          return drupal_json_output($matches);
        }
      }
    }
  }

  // Search by embed code. We save this to last as small strings will nearly
  // always match an embed code.
  $nodes = ooyala_load_nodes($string, TRUE);

  // ooyala_load_nodes() will give us potential node matches, but not the
  // full embed code itself. So, we have to find the embed_codes for each node,
  // and then filter by $string.
  foreach ($nodes as $node) {
    $node_embed_codes = ooyala_node_embed_codes($node, 'video');
    foreach ($node_embed_codes as $embed_code) {
      $video = ooyala_api_video_load($embed_code);
      $result_key = ooyala_channels_autocomplete_result_key($video);
      if (empty($matches[$result_key])) {
        if (strpos($embed_code, $string) !== FALSE) {
          // Finally, fetch the details for the video.
          $matches[$result_key] = theme('ooyala_channels_autocomplete', array('result' => $video, 'string' => $string));
          if (count($matches) >= 10) {
            return drupal_json_output($matches);
          }
        }
      }
    }
  }

  drupal_json_output($matches);
}

/**
 * Given a video, return the array key of the autocomplete result.
 *
 * @param $video
 *   The video that is being shown in the autocomplete dropdown.
 */
function ooyala_channels_autocomplete_result_key($video) {
  return $video['name'] . " [embedCode:" . $video['embed_code'] . "]";
}

/**
 * Parse a video autocomplete string into an embed code.
 *
 * @param $string
 *   The string as returned by the autocomplete function.
 *
 * @return
 *   The parsed embed code, or FALSE if one was not found.
 */
function ooyala_channels_autocomplete_result_parse($string) {
  $matches = array();
  if (preg_match('/.+ \[embedCode:(.+)]$/', $string, $matches)) {
    return $matches[1];
  }
  return FALSE;
}

/**
 * Submit handler for add video button on node forms.
 */
function ooyala_channels_add_video($form, &$form_state) {
  // This needs to handle adding the newly submitted video item to the current lineup
  // by adding it to $form_state
  $embed_code = ooyala_channels_autocomplete_result_parse($form_state['values']['ooyala_channel']['add_item']['video_search']);
//  unset($form_state['values']['ooyala_channel']['add_item']);
  if (isset($embed_code)) {
    $form_state['new_video'] = $embed_code;
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * #ajax callback to add a video to a channel.
 */
function ooyala_channels_add_video_callback($form, $form_state) {
  $add_form = ooyala_channels_lineup_item_add_form();

  // This just needs to call drupal_render on the lineup form element
  $commands[] = ajax_command_before('#ooyala-channels-remove-wrapper', theme('status_messages'));
  $commands[] = ajax_command_replace('#ooyala-channels-remove-wrapper', drupal_render($form['ooyala_channel']['table']));
  // hide the old submit button
  $commands[] = ajax_command_replace('#edit-ooyala-channel-add-item-add-ooyala-video', ''); 
  // and render a new one.
  $commands[] = ajax_command_after('#ooyala-channels-video-add-form', drupal_render($add_form['add_ooyala_video']));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * #ajax callback to add a video node to a channel.
 */
function ooyala_channels_add_to_channel($form, $form_state) {
  return drupal_render($form['ooyala_channel']);
}

/**
 * #ajax form element callback to remove videos from a channel.
 */
function ooyala_channels_remove_videos_callback($form, $form_state) {
  $commands[] = ajax_command_before('#ooyala-channels-remove-wrapper', theme('status_messages'));
  $commands[] = ajax_command_replace('#ooyala-channels-remove-wrapper', drupal_render($form['ooyala_channel']['table']));
  $commands[] = ajax_command_restripe('#ooyala-channels-lineup-edit');

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Submit handler for remove videos button on node forms
 */
function ooyala_channels_remove_videos($form, &$form_state) {
  // Find items to remove
 $embed_codes_to_remove = array();
 foreach ($form_state['values']['ooyala_channel']['table']['lineup'] as $delta => $item) {
    if ($item['remove'] == 1) {
      $embed_codes_to_remove[] = $form_state['values']['ooyala_channel']['table']['lineup'][$delta]['embedCode'];
      unset($form_state['values']['ooyala_channel']['table']['lineup'][$delta]);
    }
  }

  $form_state['new_lineup'] = $form_state['values']['ooyala_channel']['table']['lineup'];
  $form_state['remove_embed_codes'] = isset($embed_codes_to_remove) ? $embed_codes_to_remove : NULL;
  $form_state['rebuild'] = TRUE;
}

/**
 * Return a list of all content types that are channel-enabled.
 *
 * @param $reset
 *   Set to TRUE to reset the static cache of content types.
 *
 * @return
 *   An array of content type IDs.
 */
function ooyala_channels_content_types($reset = FALSE) {
  static $content_types;

  if (!$content_types || $reset) {
    $content_types = array();
    $result = db_select('variable', 'v')
      ->fields('v', array('name'))
      ->condition('name', db_like('ooyala_channels_enabled_') .'%', 'LIKE')
      ->execute();
    foreach ($result as $variable) {
      if (variable_get($variable->name, FALSE)) {
        $content_types[] = substr($variable->name, 24);
      }
    }

    // Merge in any values hard-coded in $conf.
    $conf_keys = array_keys($GLOBALS['conf']);
    foreach ($conf_keys as $key) {
      if (strpos($key, 'ooyala_channels_enabled_') === 0) {
        $content_types[] = substr($key, 24);
      }
    }
  }

  return $content_types;
}

/**
 * Theme a video result when modifying a channel lineup to highlight the
 * matched text.
 *
 * @param $result
 *  The result array, containing a title and one of node id, node title, or
 *  embedCode.
 *
 * @param $string
 *   The string the resulted in $result being selected.
 *
 * @return
 *   The themed HTML of the matched video.
 */
function theme_ooyala_channels_autocomplete($vars) {
  $result = $vars['result'];
  $string = $vars['string'];
  $output = $result['name'];
  if (isset($result['nid'])) {
    $output .= " [nid:" . $result['nid'] . "]";
  }
  else if (isset($result['node_title'])) {
    $output .= " [Node title:" . $result['node_title'] . "]";
  }
  else {
    $output .= " [embedCode:" . $result['embed_code'] . "]";
  }
  return str_ireplace($string, "<strong>$string</strong>", $output);
}

/**
 * usort callback to sort an Ooyala channel lineup by weight.
 */
function ooyala_channels_sort_lineup($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }

  return ($a['weight'] < $b['weight'] ? -1 : 1);
}

/**
 * Helper function to remove the 'table' array we need in the form but not in
 * the final node object.
 *
 * @param &$node
 *   The node to remove the table element from.
 */
function ooyala_channels_pop_table(&$node) {
  if (!empty($node->ooyala_channel['table'])) {
    foreach ($node->ooyala_channel['table'] as $key => $element) {
      $node->ooyala_channel[$key] = $element;
      unset($node->ooyala_channel['table'][$key]);
    }
    unset($node->ooyala_channel['table']);
  }
}

