<?php

/**
 * @file
 * Ooyala module provides integration with the Ooyala video service.
 *
 * Ooyala provides a field, widget, and formatters to reference and display
 * videos uploaded to the Ooyala service.
 */

/**
 * Implements hook_menu().
 */
function ooyala_menu() {
  $items['admin/config/media/ooyala/settings'] = array(
    'title' => 'Ooyala settings',
    'description' => 'Configure the global options for Ooyala fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ooyala_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/ooyala.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/ooyala/import'] = array(
    'title' => 'Import from Backlot',
    'description' => 'Import items from Backlot',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ooyala_import_multiple'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/ooyala.import.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/ooyala/import/%ooyala_item'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ooyala_import_confirm', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/ooyala.import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['ooyala/thumbnail'] = array(
    'page callback' => 'ooyala_refresh_thumbnail',
    'access arguments' => array('upload ooyala videos'),
    'file' => 'includes/ooyala.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['ooyala/ping'] = array(
    'page callback' => 'ooyala_ping_insert',
    'access arguments' => array('access content'),
    'file' => 'includes/ooyala.ping.inc',
    'type' => MENU_CALLBACK,
  );

  // #ajax menu callbacks.
  if (module_exists('colorbox')) {
    $items['ooyalavideo'] = array(
      'title' => 'Video',
      'page callback' => 'ooyala_colorbox_player_page',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function ooyala_permission() {
  return array(
    'upload ooyala videos' => array(
      'title' => t('Upload Ooyala Videos'),
      'description' => t('Upload ooyala videos.'),
    ),
  );
}

/**
 * Implements FAPI hook_element_info().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 */
function ooyala_element_info() {
  return array(
    'ooyala_embed_code' => array(
      '#input' => TRUE,
      '#columns' => array('value', 'status', 'length'),
      '#delta' => 0,
      '#process' => array('ooyala_embed_code_process'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ooyala_theme() {
  $themes = array(
    'ooyala_formatter_ooyala_default' => array(
      'variables' => array(
        'element' => NULL
      ),
    ),
    'ooyala_player' => array(
      'variables' => array(
        'embed_code' => NULL,
        'container_id' => NULL,
        'params' => NULL,
      ),
    ),
    'ooyala_colorbox_player' => array(
      'variables' => array(
        'embed_code' => NULL,
      ),
      'template' => 'templates/ooyala-colorbox-player',
    ),
    'ooyala_formatter_ooyala_thumbnail' => array(
      'variables' => array(
        'element' => NULL,
        'preset' => NULL,
        'link' => NULL,
      ),
    ),
    'ooyala_formatter_ooyala_colorbox' => array(
      'variables' => array(
        'item' => NULL,
        'preset' => NULL,
      ),
    ),
    'ooyala_embed_code' => array(
      'render element' => 'element',
    ),
    'ooyala_embed_code_preview' => array(
      'variables' => array('embed_code' => NULL, 'width' => 150),
    ),
    'ooyala_thumbnail' => array(
      'variables' => array(
        'embed_code' => NULL,
        'src' => NULL,
        'preset' => NULL,
        'link_href' => NULL,
        'link_attributes' => array(),
        'image_attributes' => array(),
        'get_size' => FALSE,
      ),
    ),
    'ooyala_video_data' => array(
      'variables' => array('data_type' => NULL, 'data' => NULL),
    ),
    'ooyala_video_length' => array(
      'variables' => array('length' => NULL),
    ),
    'ooyala_video_status' => array(
      'variables' => array('status' => NULL),
    ),
    'ooyala_import_multiple' => array(
      'render element' => 'form',
    ),
  );

  foreach (image_styles() as $preset) {
    $themes['ooyala_formatter_' .$preset['name'] .'|ooyala_imagestyle'] = array(
      'function' => 'theme_ooyala_format',
      'variables' => array('element' => NULL),
    );
    $themes['ooyala_formatter_' .$preset['name'] .'|ooyala_linked_imagestyle'] = array(
      'function' => 'theme_ooyala_format',
      'variables' => array('element' => NULL),
    );
    if (module_exists('colorbox')) {
      $themes['ooyala_formatter_' .$preset['name'] .'.|ooyala_colorbox'] = array(
        'function' => 'theme_ooyala_format',
        'variables' => array('element' => NULL),
      );
    }
  }

  return $themes;
}

/**
 * Menu loader for getting all video data from Ooyala based on an embed code.
 */
function ooyala_item_load($embed_code) {
  if (!empty($embed_code) && drupal_strlen($embed_code) == 32) {
    module_load_include('inc', 'ooyala', 'includes/ooyala.api');
    return ooyala_api_video_load($embed_code);
  }
}

/**
 * Implements hook_cron().
 */
function ooyala_cron() {
  module_load_include('inc', 'ooyala', 'includes/ooyala.api');
  module_load_include('inc', 'ooyala', 'includes/ooyala.sync');
  if (!ooyala_api_available()) {
    return;
  }

  // Retrieve pending thumbnails that have been reported missing if possible.
  $thumbnails_to_get = variable_get('ooyala_pending_thumbnails', array());
  $videos = ooyala_api_video_load_multiple($thumbnails_to_get);
  foreach ($thumbnails_to_get as $key => $embed_code) {
    // If retrieved or the video no longer exists, remove from queue.
    if (ooyala_api_fetch_image($embed_code) || $videos[$embed_code] === FALSE) {
      unset($thumbnails_to_get[$key]);
    }
  }
  variable_set('ooyala_pending_thumbnails', $thumbnails_to_get);

  // Running the sync can take a long time. Only process videos since last sync.
  $sync_time = REQUEST_TIME;
  $last_sync = variable_get('ooyala_last_sync', 0);

  // Pull from Ooyala all videos that have been updated since last run.
  $last_sync_date = date_create('@' . $last_sync);
  $updated_string = date_format($last_sync_date, 'c');
  $videos = ooyala_api_video_query(array('orderBy' => 'updatedAt,asc', 'where' => 'updated_at>\'' . $updated_string . '\'', 'include' => 'labels,metadata'));
  ooyala_sync_pull_videos($videos);

  // Set the sync time so that we don't need to process unchanged videos.
  variable_set('ooyala_last_sync', $sync_time);

  // Fire off the processing of queued embed codes. Note that we manually run
  // the queue here instead of using hook_queue_cron_info(). If we use that
  // hook, there is no easy way to limit requests sent per cron run, not giving
  // us enough time to allow the network or Ooyala to return in the case of a
  // failure.
  module_load_include('inc', 'ooyala', 'includes/ooyala.ping');
  ooyala_ping_queue_process(variable_get('ooyala_ping_queue_limit', 10));
}

/**
 * Implements hook_node_load().
 */
function ooyala_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    // Make a record of Ooyala fields in this node (if any).
    if ($ooyala_field_names = ooyala_field_names($node->type)) {
      $nodes[$node->nid]->ooyala_field_names = $ooyala_field_names;
    }
  }
}

/**
 * Implements hook_node_view().
 */
function ooyala_node_view($node, $view_mode, $langcode) {
  // If the auto-publish feature is enabled, display a message on
  // unpublished nodes on view.
  if ($view_mode == 'full' && $node->status == 0 && isset($node->ooyala_field_names) && variable_get('ooyala_autopublish', 0)) {
    $embed_codes = ooyala_node_embed_codes($node, 'video');
    if ($embed_codes) {
      module_load_include('inc', 'ooyala', 'includes/ooyala.api');
      $videos = ooyala_api_video_load_multiple($embed_codes);
      $videos_processing = FALSE;
      foreach ($videos as $video) {
        if ($video['status'] == 'processing') {
          $videos_processing = TRUE;
        }
      }
      if ($videos_processing) {
        if (user_access('upload ooyala videos')) {
          drupal_set_message(t('The video for this content is being processed. When the processing is complete this content will become publicly visible.'));
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function ooyala_form_alter(&$form, &$form_state, $form_id) {
  // Disable multiple values in the field configuration.
  if ($form_id == 'field_ui_field_edit_form' && isset($form['#field']) && $form['#field']['module'] == 'ooyala') {
    $form['field']['cardinality']['#type'] = 'value';
  }
}

/**
 * Implements hook_field_info().
 */
function ooyala_field_info() {
  return array(
    'ooyala' => array(
      'label' => t('Ooyala'),
      'description' => t('Store an Ooyala video ID.'),
      'default_widget' => 'ooyala_embed_code',
      'default_formatter' => 'ooyala_default',
    ),
  );
}

/**
 * Implements hook_field_insert().
 */
function ooyala_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  ooyala_field_sanitize($entity_type, $entity, $field, $instance, $langcode, $items);
  ooyala_field_asset_patch($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function ooyala_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  ooyala_field_sanitize($entity_type, $entity, $field, $instance, $langcode, $items);
  ooyala_field_asset_patch($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_presave().
 */
function ooyala_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  ooyala_field_sanitize($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Generic helper function for use in update, presave and insert hooks.
 */
function ooyala_field_sanitize($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Attempt to retrieve video status/length data before saving the field.
  module_load_include('inc', 'ooyala', 'includes/ooyala.api');

  foreach ($items as $delta => $item) {
    // We might not have a length yet from Ooyala depending on the processing
    // of the content. If Ooyala doesn't have a length, unset the value so
    // Field API will save NULL to the database.
    if (empty($items[$delta]['length'])) {
      $length = ooyala_api_video_property($item['value'], 'length');
      if ($length === FALSE) {
        unset($items[$delta]['length']);
      }
      else {
        $items[$delta]['length'] = $length;
      }
    }

    $items[$delta]['status'] = empty($items[$delta]['status']) ? ooyala_api_video_property($item['value'], 'status') : $items[$delta]['status'];

    if (isset($item['thumbnail_list'])) {
      if ($item['thumbnail_list'] == 'current') {
        continue;
      }
      $thumbnails = ooyala_api_fetch_thumbnails($item['value']);
      $thumbnail_url = $thumbnails[$item['thumbnail_list']];

      $thumbnail_directory = variable_get('ooyala_thumbnail_path', '');
      $data = file_get_contents($thumbnail_url->url);
      $file_uri = file_unmanaged_save_data($data, file_build_uri($thumbnail_directory . '/' . $item['value'] . '.jpg'), FILE_EXISTS_REPLACE);

      // Send the updated image to Ooyala.
      ooyala_api_upload_promo_image($item['value'], $file_uri);

      // Flush image styles.
      if (isset($file_uri)) {
        image_path_flush($file_uri);
      }
      else {
        if (user_access('upload ooyala videos')) {
          drupal_set_message(t('There was an error saving the new thumbnail. Please try again later'), 'warning');
        }
      }
    }
  }
}

/**
 * Helper function for hook_field_insert() and hook_field_update() to set the
 * title of a video in the Ooyala backlot based on the entity label. Also gives
 * other modules an opportunity to piggyback onto the HTTP request.
 */
function ooyala_field_asset_patch($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if (!empty($entity->pulled_from_ooyala)) {
    // Don't push the entity back to Ooyala if it has just been pulled _from_
    // Ooyala.
    return;
  }

  // Populate default settings.
  $settings = $field['settings'] + array(
    'sync_url' => 1,
  );

  foreach ($items as $delta => $item) {
    if (empty($items[$delta]['value'])) {
      continue;
    }

    // Set the video title of the video in the Ooyala backlot.
    $params = array(
      'embed_code' => $items[$delta]['value'],
      'name' => entity_label($entity_type, $entity),
    );

    // Set the permalink value if enabled. Because this is invoked before node
    // save, pull the alias directly from the alias setting if available.
    if ($settings['sync_url']) {
      if (isset($entity->path['alias'])) {
        $url = url($entity->path['alias'], array('absolute' => TRUE));
      }
      else {
        list($entity_id,,) = entity_extract_ids($entity_type, $entity);
        $url = url($entity_type . '/' . $entity_id, array('absolute' => TRUE));
      }
      $params['hosted_at'] = $url;
    }

    $context = compact('entity_type', 'entity', 'field', 'instance', 'langcode', 'items');
    drupal_alter('ooyala_field_asset_patch', $params, $context);

    ooyala_api_edit($params);
  }
}

/**
 * Implements hook_field_is_empty().
 */
function ooyala_field_is_empty($item, $field) {
  if (empty($item['value']) && (string)$item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 */
function ooyala_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'] + array(
      'sync_url' => 1,
    );

  $form['sync_url'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set video "permalink" URL in Backlot'),
    '#default_value' => $settings['sync_url'],
    '#description' => t('If checked, the URL for the piece of content will be used to set the video permalink in Ooyala Backlot. This URL will be used in share links and video recommendations.'),
  );

  return $form;
}

/**
 * Implements hook_field_formatter_info().
 */
function ooyala_field_formatter_info() {
  $formatters = array(
    'ooyala_default' => array(
      'label' => t('Ooyala video'),
      'field types' => array('ooyala'),
      'settings' => array('player_id' => ''),
    ),
    'ooyala_thumbnail' => array(
      'label' => t('Ooyala thumbnail'),
      'field types' => array('ooyala'),
    ),
    'ooyala_embed_code' => array(
      'label' => t('Ooyala video ID'),
      'field types' => array('ooyala'),
    ),
    'ooyala_video_length' => array(
      'label' => t('Ooyala video length'),
      'field types' => array('ooyala'),
    ),
    'ooyala_video_status' => array(
      'label' => t('Ooyala video status'),
      'field types' => array('ooyala'),
    ),
  );

  if (module_exists('colorbox')) {
    $formatters['ooyala_colorbox'] = array(
      'label' => t('Ooyala thumbnail to colorbox'),
      'field types' => array('ooyala'),
    );
  }

  foreach (image_styles() as $preset) {
    $formatters[$preset['name'] .'|ooyala_imagestyle'] = array(
      'label' => t('Ooyala thumbnail: @preset image', array('@preset' => $preset['name'])),
      'field types' => array('ooyala'),
    );
    $formatters[$preset['name'] .'|ooyala_linked_imagestyle'] = array(
      'label' => t('Ooyala thumbnail: @preset image linked to node', array('@preset' => $preset['name'])),
      'field types' => array('ooyala'),
    );
    if (module_exists('colorbox')) {
      $formatters[$preset['name'] .'|ooyala_colorbox'] = array(
        'label' => t('Ooyala thumbnail: @preset image to colorbox', array('@preset' => $preset['name'])),
        'field types' => array('ooyala'),
      );
    }
  }

  
  return $formatters;
}

/**
 * Implements hook_field_widget_info().
 */
function ooyala_field_widget_info() {
  return array(
    'ooyala_embed_code' => array(
      'label' => t('Ooyala embed code'),
      'field types' => array('ooyala'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ooyala_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  module_load_include('inc', 'ooyala', 'includes/ooyala.api');

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Populate defaults.
  if (empty($settings['player_id'])) {
    $settings['player_id'] = variable_get('ooyala_player_id');
  }

  $element['player_id'] = array(
    '#title' => t('Player'),
    '#type' => 'select',
    '#default_value' => $settings['player_id'],
    '#options' => ooyala_api_player_list_options(),
    '#access' => $display['type'] == 'ooyala_default' && (variable_get('ooyala_player_version', 'v3') == 'v3'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ooyala_field_formatter_settings_summary($field, $instance, $view_mode) {
  module_load_include('inc', 'ooyala', 'includes/ooyala.api');

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Populate defaults.
  if (empty($settings['player_id'])) {
    $settings['player_id'] = variable_get('ooyala_player_id');
  }

  $summary = array();

  if ($display['type'] == 'ooyala_default' && (variable_get('ooyala_player_version', 'v3') == 'v3')) {
    $player_list = ooyala_api_player_list_options();
    $summary[] = $player_list[$settings['player_id']];
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function ooyala_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];

  // Populate defaults.
  if (empty($settings['player_id'])) {
    $settings['player_id'] = variable_get('ooyala_player_id');
  }

  $element = array();
  $output = '';

  // Copy the value key to 'embed_code' so we can pass $item as-is into our
  // theme functions.
  foreach ($items as $key => $item) {
    $items[$key]['embed_code'] = $item['value'];
  }

  switch ($display['type']) {
    case 'ooyala_default':
      foreach ($items as $delta => $item) {
        if ($item['embed_code']) {
          $params = array(
            'playerId' => $field['field_name']. '_' .$delta . '_ooyala_player',
            'ooyalaPlayerId' => $settings['player_id'],
          );
        }
        $output .= ooyala_player($item['embed_code'], $params);
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'ooyala_thumbnail':
    case 'ooyala_video_length':
    case 'ooyala_video_status':
      foreach ($items as $delta => $item) {
        $output .= theme($display['type'], $item);
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'ooyala_embed_code':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => filter_xss($item['value']));
      }
      break;
    case 'ooyala_colorbox':
      foreach ($items as $delta => $item) {
        $output = theme('ooyala_formatter_ooyala_colorbox', array('item' => $item, 'preset' => NULL));
        $element[$delta] = array('#markup' => $output);
      }
      break;

    default:
      $formatter = explode('|', $display['type']);
      if ($formatter[1] ) {
        $preset = $formatter[0];
      }

      switch ($formatter[1]) {
        case 'ooyala_imagestyle':
          foreach ($items as $delta => $item) {
            $output .= theme('ooyala_thumbnail', array('embed_code' => $item['value'], 'preset' => $preset));
            $element[$delta] = array('#markup' => $output);
          }
          break;

        case 'ooyala_linked_imagestyle':
          foreach ($items as $delta => $item) {
            $output .= theme('ooyala_thumbnail', array('embed_code' => $item['value'], 'preset' => $preset, 'link_href' => 'node/' . $entity->nid));
            $element[$delta] = array('#markup' => $output);
          }
          break;

        case 'ooyala_colorbox':
          foreach ($items as $delta => $item) {
            $output = theme('ooyala_formatter_ooyala_colorbox', array('item' => $item, 'preset' => $preset));
            $element[$delta] = array('#markup' => $output);
          }
          break;

        default:
          $output .= '<!-- Appropriate formatter not found. -->';
          $element[] = array('#markup' => $output);
      }
  }

  return $element;
}


/**
 * Implements hook_field_widget_form().
 */
function ooyala_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $ooyala = new OoyalaDrupalWrapper();
  $element += array(
    '#title' => (empty($instance['label']) ? '' : t($instance['label'])),
    '#type' => 'ooyala_embed_code',
    '#default_value' => !empty($items[$delta]) ? $items[$delta] : array(),
  );
  return $element;
}

/**
 * Implements hook_system_info_alter().
 *
 * If a module is adding extra columns, and they are active on a field, don't
 * allow the module to be disabled.
 */
function ooyala_system_info_alter(&$info, $file, $type) {
  if ($type == 'module' && module_hook($file->name, 'ooyala_columns')) {
    $fields = field_read_fields(array('module' => 'ooyala'), array('include_deleted' => TRUE));
    $extra_columns = array_keys(module_invoke($file->name, 'ooyala_columns'));
    foreach ($fields as $field) {
      if (count(array_intersect($extra_columns, array_keys($field['columns'])))) {
        $info['required'] = TRUE;
        $info['explanation'] = t('This module is in use by an Ooyala field.');
      }
    }
  }
}

/**
 * Implements hook_views_api().
 */
function ooyala_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ooyala') . '/includes',
  );
}

/**
 * Element #process function for the "ooyala_embed_code" field.
 */
function ooyala_embed_code_process($element, &$form_state, $form) {
  module_load_include('inc', 'ooyala', 'includes/ooyala.api');

  drupal_add_js(drupal_get_path('module', 'ooyala') . '/ooyala_embedcode.js', 'file');
  drupal_add_css(drupal_get_path('module', 'ooyala') . '/ooyala.css');

  $field_name = $element['#field_name'];
  $embed_code = !empty($element['#value']['value']) ? $element['#value']['value'] : NULL;

  $element['#theme'] = 'ooyala_embed_code';
  $element['#ooyala_video'] = $embed_code ? ooyala_api_video_load($embed_code) : array();
  $element['value'] = array(
    '#type' => 'textfield',
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#default_value' => isset($element['#value']['value']) ? $element['#value']['value'] : FALSE,
    '#required' => $element['#required'],
    '#attributes' => array('class' => array('ooyala-embed-code-input')),
    '#weight' => -10,
  );
  $element['status'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#ooyala_video']['status']) ? $element['#ooyala_video']['status'] : NULL,
  );
  $element['length'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#ooyala_video']['duration']) ? $element['#ooyala_video']['duration'] : NULL,
  );

  // Generate thumbnails to choose from.
  $thumbnails = array();
  $thumbnail_subset = array(
    'current' => theme('ooyala_embed_code_preview', array('embed_code' => $embed_code, 'width' => 120)),
  );
  if ($embed_code) {
    $thumbnails = ooyala_api_fetch_thumbnails($embed_code);
    $thumbnail_keys = $thumbnails ? array_keys($thumbnails) : array();

    // If doing a normal submit (i.e. preview or save), use the current list of
    // thumbnails to prevent Drupal validation errors.
    $is_ajax = isset($form_state['input']['_triggering_element_value']) && $form_state['input']['_triggering_element_value'] === t('Refresh thumbnails');
    if (!$is_ajax && isset($element['#value']['thumbnail_subset'])) {
      foreach (explode(",", $element['#value']['thumbnail_subset']) as $timecode) {
        // We need to filter out the 'current' element key.
        if (is_numeric($timecode)) {
          $thumbnail_subset[$timecode] = theme('image', array('path' => $thumbnails[$timecode]->url, 'alt' => t('Thumbnail at !time', array('!time' => theme('ooyala_video_length', array('length' => $timecode)))), 'title' => '', 'attributes' => array('width' => 120)));
        }
      }
    }
    // If the user has clicked the "Refresh thumbnails" button, then we need to
    // generate a new set of thumbnails.
    else {
      $i = 0;
      $max_thumbs = min(6, count($thumbnails));
      // Ensure the currently selected thumbnail (if any) exists in the list.
      if (!empty($element['#value']['thumbnail_list'])) {
        $current_thumbnail = $element['#value']['thumbnail_list'];
        if (!isset($thumbnail_subset[$current_thumbnail])) {
          $thumbnail_subset[$current_thumbnail] = theme('image', array('path' => $thumbnails[$current_thumbnail]->url, 'alt' => t('Thumbnail at !time', array('!time' => theme('ooyala_video_length', array('length' => $current_thumbnail)))), 'title' => '', 'attributes' => array('width' => 120)));
          $i++;
        }
      }

      // Randomly choose 5 thumbnails at 1/5 intervals in the video. We add fuzz
      // of up to 10 thumbnail frames. As well, we need to ensure that the
      // array key is never negative and never exceeds the last thumbnail index.
      while (count($thumbnail_subset) < $max_thumbs) {
        $fuzz = min(max(1, rand($i - 5, $i + 5)), count($thumbnails) - 1);
        $key = $thumbnail_keys[$fuzz];
        if (!isset($thumbnail_subset[$key])) {
          $thumbnail_subset[$key] = theme('image', array('path' => $thumbnails[$key]->url, 'alt' => t('Thumbnail at !time', array('!time' => theme('ooyala_video_length', array('length' => $key)))), 'title' => '', 'attributes' => array('width' => 120)));
          $i += ceil((count($thumbnails)) / 5);
        }
      }
    }
  }
  $element['thumbnail_wrapper'] = array(
    '#prefix' => '<div id="ooyala-video-thumbnails-' .  $element['#id'] . '" class="clearfix">',
    '#suffix' => '</div>',
  );
  $element['thumbnail_wrapper']['thumbnail_subset'] = array(
    '#type' => 'hidden',
    '#value' => implode(",", array_keys($thumbnail_subset)),
    '#weight' => 5.1,
    '#parents' => array_merge($element['#parents'], array('thumbnail_subset')),
  );
  $element['thumbnail_wrapper']['thumbnail_list'] = array(
    '#type' => 'radios',
    '#title' => t('Video thumbnail'),
    '#options' => $thumbnail_subset,
    '#default_value' => isset($element['#value']['thumbnail_list']) ? $element['#value']['thumbnail_list'] : 'current',
    '#attributes' => array('class' => array('ooyala-upload-thumbnails')),
    '#weight' => 5.2,
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
    '#parents' => array_merge($element['#parents'], array('thumbnail_list')),
  );

  $help = t('Select a thumbnail to change the thumbnail for this video. Once saved, it may take a minute for the new thumbnail to be used in Ooyala video players.');
  if (empty($thumbnails)) {
    $help = t('After specifying an embed code, you may choose a thumbnail here. Newly uploaded videos will take time to process before a custom thumbnail may be chosen.');
  }

  $element['thumbnail_help'] = array(
    '#prefix' => '<div class="description">',
    '#markup' => $help,
    '#suffix' => '</div>',
    '#weight' => 5.3,
  );

  $element['thumbnail_list_refresh'] = array(
    '#type' => 'submit',
    '#value' => t('Refresh thumbnails'),
    '#attributes' => array('class' => array('ooyala-refresh-thumbnails')),
    '#ajax' => array(
      'callback' => 'ooyala_refresh_video_thumbnails',
      'wrapper' => 'ooyala-video-thumbnails-' .  $element['#id'],
      'effect' => 'fade',
    ),
    '#validate' => array(),
    '#submit' => array(),
    '#limit_validation_errors' => array($element['#parents']),
    '#weight' => 5.4,
  );

  // Set #element_validate in a way that it will not wipe out other
  // validation functions already set by other modules.
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array();
  }
  return $element;
}

/**
 * Given an Ooyala embed code, load the nodes that contains it (if any).
 *
 * @param $embed_code
 *   The embed code to search for.
 * @param $partial
 *   Optional parameter to indicate that the embed code is a partial code and
 *   that any potential node matches should be returned.
 * @param $limit
 *   If returning partial matches, limit to this many items.
 *
 * @return
 *   An array of nodes matching the embed code.
 */
function ooyala_load_nodes($embed_code, $partial = FALSE, $limit = 10) {
  $nodes = array();

  // Find any Ooyala fields.
  foreach (node_type_get_types() as $node_type) {

    // Load any content type specific instances of this field.
    foreach (ooyala_field_names($node_type->type) as $field_name) {
      $field_instance = field_info_fields($field_name, $node_type->type);
      // Match any rows of the latest revision that contain this embed_code using EntityFieldQuery.
      $query = new EntityFieldQuery();
      // Disables access checks so that cron runs can sync unpublished
      // nodes. This is necessary because cron is always run as the anonymous
      // user.
      $query->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
      $query->entityCondition('entity_type', 'node');
      $query->entityCondition('bundle', $node_type->type);
      if ($partial) {
        $query->fieldCondition($field_name, 'value', array($embed_code), 'CONTAINS');
      }
      else {
        $query->fieldCondition($field_name, 'value', array($embed_code), '=');
      }
      try {
        $entities = $query->execute();
      }
      catch (Exception $e) {
        watchdog('ooyala', 'During a cron sync, Ooyala module encountered an error: @error', array('@error' => $e->getMessage()));
      }

      if (is_array($entities) && isset($entities['node'])) {
        $nodes += node_load_multiple(array_keys($entities['node']));
      }
    }
  }

  return $nodes;
}

/**
 * Find all the content types that contain at least on Ooyala field.
 */
function ooyala_type_names() {
  static $ooyala_types;

  if (!isset($ooyala_types)) {
    $ooyala_types = array();
    $content_types = node_type_get_types();
    foreach ($content_types as $type_name => $content_type) {
      $fields = field_info_instances('node', $type_name);
      foreach ($fields as $field) {
        if (strpos($field['widget']['type'], 'ooyala') !== FALSE) {
          $ooyala_types[$type_name] = ucfirst($field['bundle']);
          continue;
        }
      }
    }
  }

  return $ooyala_types;

}

/**
 * Find all the Ooyala fields within a particular node type.
 */
function ooyala_field_names($type_name) {
  static $field_names;

  if (!isset($field_names[$type_name])) {
    $field_names[$type_name] = array();
    $content_type_field_info = field_info_instances('node', $type_name); // add entity type parameter?
    foreach ($content_type_field_info as $field) {
      if (isset($field['widget']) && strpos($field['widget']['module'], 'ooyala') === 0) {
        $field_names[$type_name][] = $field['field_name'];
      }
    }
  }

  return $field_names[$type_name];
}

/**
 * Fetch a list of all embed codes within a node.
 *
 * @param $node
 *   The node to fetch embed codes for.
 * @param $type
 *   The types of Ooyala objects to fetch associated embed codes for. This
 *   module supports a type of 'all' and 'video', but other modules may return
 *   other types of object embed codes.
 *
 * @return
 *   An array of embed codes for the given node.
 */
function ooyala_node_embed_codes($node, $type = 'all') {
  $embed_codes = array();
  if ($type == 'all' || $type == 'video') {
    if (is_object($node)) {
      $ooyala_field_names = ooyala_field_names($node->type);
      foreach ($ooyala_field_names as $field_name) {
        foreach ($node->{$field_name}[LANGUAGE_NONE] as $delta => $item) {
          if (!empty($item['value'])) {
            $embed_codes[] = $item['value'];
          }
        }
      }
    }
  }

  // Allow other modules to return associated embed codes for this node.
  $embed_codes += module_invoke_all('ooyala_node_embed_codes', $node, $type);

  return $embed_codes;
}

/**
 * Report an error to the user.
 */
function ooyala_message($message, $variables = array(), $type = 'status') {
  // Post a message if verbose reporting is enabled.
  if (variable_get('ooyala_reporting_level', 1) && user_access('upload ooyala videos')) {
    drupal_set_message(t($message, $variables), $type);
  }
  // Log errors and warnings to watchdog.
  if ($type == 'error' || $type == 'warning') {
    watchdog('ooyala', $message, $variables, $type == 'error' ? WATCHDOG_ERROR : WATCHDOG_WARNING);
  }
}

/**
 * A public API function used to output an Ooyala player.
 *
 * This function should be used to output a video player instead of calling
 * theme('ooyala_player') to ensure that player.js $_GET parameters are correct.
 *
 * @param $embed_code
 *   Embed code of the video to display.
 * @param $params
 *   An associative array of paramaters that will be passed as $_GET variables
 *   to the Ooyala player.js file.
 *
 * @return
 *   An HTML <script> tag pointing to the Ooyala player.js file which will
 *   display the video player using Ooyala's API.
 */
function ooyala_player($embed_code, $params = array()) {
  static $container_ids = array();

  // Ensure that each container ID is unique across requests.
  $container_id = 'ooyala-container-' . REQUEST_TIME;
  // Ensure that each container ID is unique for this request.
  if (in_array($container_id, $container_ids)) {
    $container_id = $container_id . '-' . count($container_ids);
  }
  $container_ids[] = $container_id;

  // Height and width are optional with V3 player.
  if (empty($params['height']) && $height = variable_get('ooyala_video_height', 300)) {
    $params['height'] = (int) $height;
  }
  if (empty($params['width']) && $width = variable_get('ooyala_video_width', 400)) {
    $params['width'] = (int) $width;
  }

  // Set remaining parameters based on the version of the player being used.
  if (variable_get('ooyala_player_version', 'v3') === 'v3') {
    $params += array(
      // Channels are not supported fully in the v3 player (Flash-only). Enable
      // them for the players that support it.
      'enableChannels' => TRUE,
      // Add the required v3 player ID.
      'ooyalaPlayerId' => variable_get('ooyala_player_id', ''),
      'wmode' => 'transparent',
    );

    if (isset($params['playerId'])) {
      unset($params['playerId']);
    }

    // Provide a callback function to register the message event system for the
    // v3 player. See ooyala_player.js for additional information about resonding to
    // Player API events.
    $params['onCreate'] = 'Drupal.ooyala.onCreate';
  }
  // V2 player parameters.
  else {
    $params += array(
      'embedCode' => $embed_code,
      'playerId' => 'ooyala_player',
      'playerContainerId' => $container_id,
      'wmode' => 'transparent',
    );

    // The callback paramter determines the name of an optional javascript
    // function that should receive notification of Player API events. We do not
    // allow this to be modified to ensure that multiple modules can play together
    // nicely. See ooyala_player.js for additional information about resonding to
    // Player API events.
    $params['callback'] = 'receiveOoyalaEvent';
  }

  return theme('ooyala_player', array('embed_code' => $embed_code, 'container_id' => $container_id, 'params' => $params));
}

/**
 * Theme function to output an Ooyala video player.
 */
function theme_ooyala_player($variables) {
  $player_version = variable_get('ooyala_player_version', 'v3');
  drupal_add_js(drupal_get_path('module', 'ooyala') . '/ooyala_player.js');
  $embed_code = $variables['embed_code'];
  $container_id = $variables['container_id'];
  $params = $variables['params'];

  if ($player_version === 'v3') {
    drupal_add_js('//player.ooyala.com/v3/' . $params['ooyalaPlayerId'], 'external');

    // Encode the list of parameters, and remove quotes from onCreate callbacks.
    $params = json_encode($params);
    $params = preg_replace('/"onCreate":"([0-9a-z._]+)"/i', '"onCreate":$1', $params);
    $output = '<div id="' . $container_id . '"></div><script type="text/javascript">var videoPlayer = OO.Player.create("' . $container_id . '",' . '"' . $embed_code . '", ' . $params . ');</script>';
  }
  else {
    $output = '<div id="' . $container_id . '"></div><script type="text/javascript" src="http://player.ooyala.com/player.js?' . htmlspecialchars(http_build_query($params)) . '"></script>';
  }

  return $output;

}

/**
 * Theme the "ooyala_embed_code" element.
 */
function theme_ooyala_embed_code($variables) {
  $element = $variables['element'];
  return drupal_render_children($element);
}

/**
 * Theme the preview thumbnail on the node form.
 *
 * @param $embed_code
 *   The embed code of the item to theme.
 * @param $width
 *   Optional parameter of the width of the thumbnail image in pixels.
 *
 * @return
 *   The themed HTML of the thumbnail image.
 */
function theme_ooyala_embed_code_preview($vars) {
  if (isset($vars['embed_code'])) {
    $path = ooyala_get_thumbnail_url($vars['embed_code'], NULL, TRUE);
    $thumbnail_uri = file_build_uri($path);
    if (is_file($thumbnail_uri)) {
      $output = theme('ooyala_thumbnail', array('embed_code' => $vars['embed_code'], 'preset' => NULL, 'link_href' => NULL, 'link_attributes' => NULL, 'image_attributes' => array('width' => $vars['width']), 'get_size' => FALSE));
    }
  }

  if (!isset($output)) {
    $output = '<div class="ooyala-preview-placeholder">' . t('No Preview Available') . '</div>';
  }

  return $output;
}

/**
 * Theme a textfield as a Ooyala video.
 */
function theme_ooyala_formatter_ooyala_default($vars) {
  $element = $vars['element'];
  $values = array();
  $output = '';
  $item = $element;
  foreach (element_children($element) as $delta) {
    $item['#item'] = $element[$delta]['#item'];
    if ($item['#item']['safe']) {
      $params = array(
        'playerId' => $item['#field_name'] . '_' .$delta . '_ooyala_player',
      );
      $output .= ooyala_player($item['#item']['safe'], $params);
    }
  }

  return !empty($output) ? $output : '';
}

/**
 * Theme function to output the "ooyala_thumbnail" formatter.
 */
function theme_ooyala_formatter_ooyala_thumbnail($vars) {
  $element = $vars['element'];
  $output = '';
  foreach (element_children($element) as $key) {
    $item = $element[$key];
    if ($item['#item']['value']) {
      $output .= theme('ooyala_thumbnail', array('embed_code' => $item['#item']['value']));
    }
  }

  return $output;
}

/**
 * Theme function to output the "ooyala_colorbox" formatter.
 */
function theme_ooyala_formatter_ooyala_colorbox($vars) {
  $item = isset($vars['item']) ? $vars['item'] : NULL;
  $preset = isset($vars['preset']) ? $vars['preset'] : NULL;

  $link_url = url('ooyalavideo/' .$item['value'],
    array(
      'query'=> array(
        'width' => variable_get('ooyala_colorbox_width', 500),
        'height' => variable_get('ooyala_colorbox_height', 400),
        'KeepThis' => 'true',
        'TB_iframe' => 'true',
      ),
      'absolute' => TRUE,
    )
  );

  return theme('ooyala_thumbnail', array('embed_code' => $item['value'], 'preset' => $preset, 'link_href' => $link_url, 'link_attributes' => array('class' => array('colorbox-load'))));
}

/**
 * Themed output for an Ooyala thumbnail.
 */
function theme_ooyala_thumbnail($vars) {
  $embed_code = $vars['embed_code'];
  $preset = isset($vars['preset']) ? $vars['preset'] : NULL;
  $link_href = isset($vars['link_href']) ? $vars['link_href'] : NULL;
  $link_attributes = isset($vars['link_attributes']) ? $vars['link_attributes'] : array();
  $image_attributes = (isset($vars['image_attributes']) && is_array($vars['image_attributes'])) ? $vars['image_attributes'] : array();
  $get_size = isset($vars['get_size']) ? $vars['get_size'] : TRUE;

  $path = ooyala_get_thumbnail_url($embed_code, NULL, TRUE);
  $uri = file_build_uri($path);

  // Retrieve the alt and title variables to be passed to other theme functions.
  $image_attributes += array('alt' => '', 'title' => '');
  $alt = $image_attributes['alt'];
  $title = $image_attributes['title'];
  unset($image_attributes['alt'], $image_attributes['title']);

  // Generate the img tag.
  if (isset($preset)) {
    $output = theme('image_style', array('style_name' => $preset, 'path' => $uri, 'alt' => $alt, 'title' => $title, 'attributes' => $image_attributes));
  }
  else {
    // Append the last modified time to ensure the current version is always
    // shown.
    $image_attributes['src'] = file_create_url($uri);
    $image_attributes['src'] .= (strpos($image_attributes['src'], '?') === FALSE ? '?' : '&') . filemtime($uri);

    if ($get_size) {
      $image_info = image_get_info($uri);
      $image_attributes['width'] = $image_info['width'];
      $image_attributes['height'] = $image_info['height'];
    }

    $output = '<img' . drupal_attributes($image_attributes) . '/>';
  }

  // Wrap if needed in our link.
  if ($link_href) {
    $options = array(
      'html' => TRUE,
      'attributes' => $link_attributes,
    );
    $output = l($output, $link_href, $options);
  }

  return '<div class="ooyala-thumbnail">' . $output .'</div>';
}

function theme_ooyala_video_data($vars) {
  $data = theme('ooyala_video_' . $vars['data_type'], array($vars['data']));
  return '<div class="ooyala-video-' . $vars['data_type'] . '">' . $vars['data'] . '</div>';
}

/**
 * Themed output for an Ooyala video's length.
 *
 * @param $length
 *   Length of the video in milliseconds.
 */
function theme_ooyala_video_length($vars) {
  $length = isset($vars['length']) ? $vars['length'] : NULL;
  $length = isset($length) ? $length : 0;

  if (empty($length) || $length == 0) {
    return t('unknown');
  }

  /**
   * Convert seconds to hh:mm:ss.
   */
  // Hours.
  $length = intval($length/1000);
  $hms = intval(intval($length) / 3600) . ':';
  
  // Minutes.
  $minutes = intval(($length / 60) % 60); 
  
  // Add to $hms (with a leading 0 if needed).
  $hms .= str_pad($minutes, 2, "0", STR_PAD_LEFT). ':';
  
  // Seconds.
  $seconds = intval($length % 60); 
  $hms .= str_pad($seconds, 2, "0", STR_PAD_LEFT);
  $output = check_plain($hms);

  return $output;
}

/**
 * Themed output for an Ooyala video's status.
 */
function theme_ooyala_video_status($vars) {
  $status = isset($vars['status']) ? $vars['status'] : NULL;
  $status = isset($status) ? $status : t('unknown');
  $output = check_plain($status);
  return $output;
}

/**
 * Preprocess function for ooyala-colorbox-player.tpl.php
 */
function template_preprocess_ooyala_colorbox_player(&$variables) {
  $params = array(
    'autoplay' => variable_get('ooyala_colorbox_autoplay', TRUE),
    'height' => isset($variables['height']) ? $variables['height'] : NULL,
    'playerId' => 'ooyala_player_colorbox',
    'width' => isset($variables['width']) ? $variables['width'] : NULL,
  );

  $variables['playercode'] = ooyala_player($variables['embed_code'], $params);
}

/**
 * Preprocess function for ooyala-sharedplayer-view.tpl.php.
 */
function template_preprocess_ooyala_sharedplayer_view(&$vars) {
  $view = $vars['view'];
  $result = $vars['result'] = $vars['rows'];

  $vars['player_id'] = drupal_html_id('ooyalaplayer-' . $view->name . '-' . $view->current_display);
  $vars['width'] = $vars['options']['width'];
  $vars['height'] = $vars['options']['height'];
  $vars['embedCodes'] = array();

  foreach ($result as $num => $row) {
    // Since the value is from Field API, the field alias references the entity
    // ID, and not the field itself. We have to use get_value() to pull out the
    // appropriate value.
    // https://drupal.org/node/1160706#comment-4916402
    $embed_code = array_pop($view->field[$vars['options']['embed_code_field']]->get_value($row));
    $embed_code = $embed_code['value'];

    if (!isset($vars['first_embed_code'])) {
      $vars['first_embed_code'] = $embed_code;
    }

    $vars['embed_codes'][$embed_code] = $view->field[$vars['options']['title_field']]->get_value($row);

    // Properly handle fields that may be more complicated than simple strings.
    // Remove any deltas.
    if (is_array($vars['embed_codes'][$embed_code])) {
      $vars['embed_codes'][$embed_code] = array_pop($vars['embed_codes'][$embed_code]);
    }

    // Grab the value if set.
    if (is_array($vars['embed_codes'][$embed_code]['value']) && isset($vars['embed_codes'][$embed_code]['value'])) {
      $vars['embed_codes'][$embed_code] = $vars['embed_codes'][$embed_code]['value'];
    }
  }

  $settings = array(
    'ooyalaSharedPlayer' => array(
      $vars['player_id'],
    ),
  );

  drupal_add_js($settings, array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'ooyala') . "/ooyala_player.js");
  drupal_add_js(drupal_get_path('module', 'ooyala') . "/ooyala_sharedplayer.js");
}

/**
 * Helper function to generate a thumbnail URL from an Ooyala video code.
 */
function ooyala_get_thumbnail_url($embed_code, $preset = NULL, $return_path = FALSE, $full_path = FALSE) {
  $subdir = variable_get('ooyala_thumbnail_path', 'ooyalathumbs');
  $directory = file_prepare_directory($subdir, FILE_CREATE_DIRECTORY);
  $path = $subdir .'/' .$embed_code .'.jpg';

  if ($full_path == TRUE && $return_path) {
    return file_create_url(file_build_uri($path));
  }

  if ($return_path) {
    return $path;
  }
  $cpath = file_build_uri($path);
  if (is_file($cpath)) {
    if ($preset) {
      $return = image_style_url($preset, $path);
    }
    else {
      $return = file_create_url(file_build_uri($path));
    }
  }
  else {
    // Save this embeded code to download the thumbnail on next cron run.
    $thumbnails_to_get = variable_get('ooyala_pending_thumbnails', array());

    if ($embed_code && !isset($thumbnails_to_get[$embed_code])) {
      $thumbnails_to_get[$embed_code] = $embed_code;
      variable_set('ooyala_pending_thumbnails', $thumbnails_to_get);
      if (user_access('upload ooyala videos')) {
        drupal_set_message(t('The thumbnail will be downloaded from Ooyala in the next Cron run'), 'status');
      }
    }

    $default_path = variable_get('ooyala_default_thumbnail_path', FALSE);
    // Set a default thumbnail path if configured. If there isn't a default
    // the user will get a broken image at the path until it's downloaded.
    if ($default_path && !$return_path) {
      $path = $default_path;
    }

    if ($preset) {
      $return = image_style_url($preset, $path);
    }
    else {
      $return = file_create_url(file_build_uri($path));
    }
  }
  return $return;
}

/**
 * Utility function to print a simple ooyala player for use with the colorbox
 * functionality
 *
 * @param $embed_code
 *  The embed code of the video to show in the player
 */

function ooyala_colorbox_player_page($embed_code) {
  $params = array(
    'autoplay' => variable_get('ooyala_colorbox_autoplay', TRUE),
    'playerId' => 'ooyala_colorbox_player',
  );

  print ooyala_player($embed_code, $params);
}


/**
 * Create a node out of the ooyala data passed in.
 *
 * @param array $item
 *   Array with at least the title, embed_code, status, and length keys.
 * @param string $content_type
 *   Machine name of the content type we're creating.
 */
function ooyala_create_node($item, $content_type) {
  // Load the Ooyala information into the first field found in the content type.
  $field_names = ooyala_field_names($content_type);
  $field_name = array_shift($field_names);
  if (!$field_name) {
    return FALSE;
  }

  module_load_include('inc', 'node', 'node.pages');
  $edit = new stdClass();
  $edit->type = $content_type;
  $edit->language = LANGUAGE_NONE;
  $edit->title = $item['name'];
  $edit->{$field_name}[$edit->language][0]['value'] = $item['embed_code'];
  $edit->{$field_name}[$edit->language][0]['status'] = $item['status'];
  $edit->{$field_name}[$edit->language][0]['length'] = $item['duration'];
  $node = node_submit($edit);
  node_object_prepare($node);

  // Allow other modules to add any data they know of to the imported node.
  $modules = module_implements('ooyala_create_node');
  foreach ($modules as $module) {
    $function = $module . '_ooyala_create_node';
    $function($node, $item);
  }

  $node->pulled_from_ooyala = TRUE;
  node_save($node);
  return $node;
}

/**
 * Form #ajax callback for refreshing video thumbnails.
 */
function ooyala_refresh_video_thumbnails($form, &$form_state) {
  $clicked_button = $form_state['triggering_element'];
  $parents = array_slice($clicked_button['#array_parents'], 0, -1, TRUE);

  // Drill down to the element.
  $element = $form;
  foreach ($parents as $parent) {
    $element = $element[$parent];
  }

  // Rerender the thumbnail wrapper.
  $element['thumbnail_wrapper']['#suffix'] = theme('status_messages') . $element['thumbnail_wrapper']['#suffix'];
  $output = drupal_render($element['thumbnail_wrapper']);
  return $output;
}

