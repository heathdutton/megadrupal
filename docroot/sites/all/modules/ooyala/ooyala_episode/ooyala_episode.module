<?php

/**
 * @file
 * An example module showing how to store custom metadata. This module shows
 * how to store an episode ID in the form of SXXEXX.
 *
 * This example shows not only how to save data to the backlot, but how to
 * extend the Ooyala video field to add an additional element to the field
 * itself.
 */

/**
 * Save an episode ID to an asset.
 *
 * If all that is needed is to save a set of properties to a video, follow this
 * example.
 *
 * @param $embed_code
 *   A string containing the unique embed code of a video.
 * @param $episode_id
 *   A string containing the episode ID to save.
 */
function ooyala_episode_episode_save($embed_code, $episode_id) {
  $properties = array(
    'episode_id' => $episode_id,
  );

  ooyala_api_custom_metadata_save($embed_code, $properties);
}

/**
 * Validate an episode ID matches the SXXEXX format.
 *
 * @param $episode_id
 *   The episode ID string to validate.
 *
 * @return
 *   TRUE if the episode validated, or FALSE otherwise.
 */
function ooyala_episode_episode_validate($episode_id) {
  return preg_match("/S\d\dE\d\d/", $episode_id) === 1;
}

/**
 * Implements hook_enable().
 *
 * When our module is enabled, add the episode ID column to the field.
 * Currently, this is forced on all fields. This could be changed to add a UI
 * to the field settings to determine if an episode ID is enabled on a
 * per-field-instance basis.
 *
 * This function is rather complex for what it does. In most cases it won't
 * need any customization at all, but will need to exist in hook_enable() in
 * your custom module.
 */
function ooyala_episode_enable() {
  $entity_types = field_info_instances();
  foreach ($entity_types as $bundles) {
    foreach ($bundles as $bundle_name => $bundle) {
      foreach ($bundle as $field_name => $instance) {
        $field = field_info_field_by_id($instance['field_id']);
        if (isset($instance['widget']) && strpos($instance['widget']['module'], 'ooyala') === 0) {
          // We found an Ooyala field. Add our column to the field.
          // The Field SQL Storage module doesn't allow modules to update
          // schemas if there is data in them. We manually add our columns to
          // each field table. If you use another storage backend, you will
          // need to update this code as needed.
          if ($field['storage']['type'] == 'field_sql_storage') {
            $columns = ooyala_episode_ooyala_columns();
            $details = field_sql_storage_field_storage_details($field);
            foreach ($columns as $column => $spec) {
              $column = $field_name . '_' . $column;
              $current = reset(array_keys($details['sql'][FIELD_LOAD_CURRENT]));
              $revisions = reset(array_keys($details['sql'][FIELD_LOAD_REVISION]));

              if (!db_field_exists($current, $column)) {
                db_add_field($current, $column, $spec);
              }
              if (!db_field_exists($revisions, $column)) {
                db_add_field($revisions, $column, $spec);
              }
            }
          }

          // We still have to call field_update_field() to add our indexes and
          // update the {field_config} table. Since we've added our columns
          // above, this will no longer throw exceptions when adding the index.
          field_update_field($instance);
        }
      }
    }
  }
}

/**
 * Implements hook_field_storage_pre_insert().
 *
 * This hook gets triggered every time an entity is inserted. If for some
 * reason you don't want to store a local copy of your custom metadata as well,
 * ignore the implementation of hook_ooyala_columns() below and set
 * $skip_fields to tell the Field Storage API to skip saving this data.
 */
function ooyala_episode_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  // Only try to save for entities that actually have an Ooyala field attached.
  if (isset($entity->ooyala_field_names)) {
    foreach ($entity->ooyala_field_names as $field_name) {
      $item = $entity->{$field_name}[LANGUAGE_NONE][0];
      ooyala_episode_episode_save($item['value'], $item['episode_id']);
    }
  }
}

/**
 * Implements hook_field_storage_pre_update().
 *
 * In this case, the code is identical for both insert and update cases.
 */
function ooyala_episode_field_storage_pre_update($entity_type, $entity, &$skip_fields) {
  ooyala_episode_field_storage_pre_insert($entity_type, $entity, $skip_fields);
}

/**
 * Implements hook_element_info_alter().
 *
 * This hook allows us to tell Drupal that when rendering an "ooyala_upload"
 * form API element that we need to call our #process function after it has
 * called the #process function defined in ooyala.module. Multiple process
 * functions could be added if needed.
 */
function ooyala_episode_element_info_alter(&$types) {
  foreach ($types as $key => $type) {
    if (strstr($key, 'ooyala') !== FALSE) {
      $field = &$types[$key];
      $field['#columns'][] = 'episode_id';
      $field['#process'][] = 'ooyala_episode_element_process';
    }
  }
}

/**
 * Our #process callback for the ooyala_upload element.
 *
 * This is the function that adds an additional "episode_id" form element to
 * the ooyala_upload element. Add or modify FAPI elements here as needed to add
 * in your own custom fields.
 */
function ooyala_episode_element_process($element, &$form_state, $form) {
  $element['episode_id'] = array(
    '#title' => t('Episode ID'),
    '#type' => 'textfield',
    '#description' => t('Enter the Episode ID for this asset in the form <em>SXXEXX</em>.'),
    '#default_value' => isset($element['#ooyala_video']['custom_metadata']['episode_id']) ? $element['#ooyala_video']['custom_metadata']['episode_id'] : NULL,
    // Required if the whole field is required.
    '#required' => $element['#required'],
  );

  // If your field has custom rules for validation, add in an #element_validate
  // callback function to run against the submitted value when the form is
  // submitted.
  $element['#element_validate'][] = 'ooyala_episode_element_validate';

  return $element;
}

/**
 * #element_validate callback to validate the episode_id field.
 */
function ooyala_episode_element_validate($element, &$form_state, $form) {
  // Don't validate an empty value on the default values settings form.
  // This is the form at admin/structure/types/manage/video/fields/<field_name>
  if ($form['#form_id'] == 'field_ui_field_edit_form' && empty($element['value']['#value'])) {
    return;
  }

  // Only allow saving of an episode ID if we have an asset associated saved
  // with this field.
  if (empty($element['value']['#value']) && !empty($element['episode_id']['#value'])) {
    form_error($element, t('An Episode ID must be associated with a video to be saved. Upload a video or remove the Episode ID.'));
  }

  // Validate the actual format of the episode ID.
  if (!empty($element['value']['#value']) && !empty($element['episode_id']['#value']) && !ooyala_episode_episode_validate($element['episode_id']['#value'])) {
    form_error($element, t('This field must contain an episode ID in the form <em>SXXEXX</em>.'));
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * This is only required if the custom metadata should be displayed outside of
 * the entity edit interface, such as on a node display or in a View.
 */
function ooyala_episode_field_formatter_info_alter(&$info) {
  // Remember to add the 'module' key otherwise the Ooyala module will be
  // called instead.
  $info['ooyala_episode'] = array(
    'label' => t('Ooyala episode'),
    'field types' => array('ooyala'),
    'module' => 'ooyala_episode',
  );
}

/**
 * Implements hook_theme().
 */
function ooyala_episode_theme() {
  return array(
    'ooyala_episode' => array(
      'variables' => array('episode_id' => NULL),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ooyala_episode_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $output = '';

  // Copy the value key to 'embed_code' so we can pass $item as-is into our
  // theme functions.
  foreach ($items as $key => $item) {
    $items[$key]['embed_code'] = $item['value'];
  }

  switch ($display['type']) {
    case 'ooyala_episode':
      foreach ($items as $delta => $item) {
        $output .= theme('ooyala_episode', $item);
      }
      $element[] = array('#markup' => $output);
      break;
  }

  return $element;
}

/**
 * Theme an episode number.
 */
function theme_ooyala_episode($vars) {
  return '<span class="ooyala-episode">' . check_plain($vars['episode_id']) . '</span>';
}

/**
 * Implements hook_ooyala_columns().
 *
 * Returns a description of our custom data to store locally. This is a hook
 * provided by the Ooyala module. See ooyala.api.php for more information.
 *
 * @see hook_field_schema()
 */
function ooyala_episode_ooyala_columns() {
  return array(
    'episode_id' => array(
      'type' => 'varchar',
      'length' => 6,
      'index' => TRUE,
    ),
  );
}

