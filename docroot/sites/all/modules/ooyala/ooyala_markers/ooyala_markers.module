<?php

/**
 * @file
 * Provides a CCK "Ooyala Chapter Marker" field, which allows users to jump to
 * predefined points in a long video.
 */

/**
 * Implements hook_theme().
 */
function ooyala_markers_theme() {
  return array(
    'ooyala_marker' => array(
      'render element' => 'element',
    ),
    'ooyala_markers_formatter_default' => array(
      'variables' => array(
        'element' => NULL,
        'nid' => NULL,
        'title' => NULL,
        'time' => NULL,
        'field_name' => NULL,
        'video_field' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function ooyala_markers_field_info() {
  return array(
    'ooyala_marker' => array(
      'label' => t('Ooyala Chapter Marker'),
      'description' => t('Store chapter markers for Ooyala video fields.'),
      'default_widget' => 'ooyala_marker',
      'default_formatter' => 'ooyala_marker_default',
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function ooyala_markers_element_info() {
  $elements = array();
  $elements['ooyala_marker'] = array(
    '#input' => TRUE,
    '#columns' => array('title', 'time'),
    '#process' => array('ooyala_markers_element_process'),
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Implements hook_field_widget_info().
 */
function ooyala_markers_field_widget_info() {
  return array(
    'ooyala_marker' => array(
      'label' => t('Chapter Marker'),
      'field types' => array('ooyala_marker'),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function ooyala_markers_field_widget_settings_form($field, $instance) {
  $form = array();
  $type = str_replace('-', '_', arg(3));
  $fields = field_info_fields();
  $options = array();
  foreach ($fields as $field) {
    if ($field['type'] == 'ooyala') {
      if (isset($field['type_name']) && $field['type_name'] == $type) {
        $type_field = $field;
      }
      else {
        $type_field = $fields[$field['field_name']];
      }
      if ($type_field) {
        $options[$type_field['field_name']] = t('@label (@field)', array('@label' => $type_field['field_name'], '@field' => $type_field['field_name']));
      }
    }
  }

  $form['ooyala_video_field'] = array(
    '#type' => 'select',
    '#title' => t('Ooyala video field'),
    '#description' => t('The Ooyala video field the chapter markers should apply to.'),
    '#options' => $options,
    '#default_value' => empty($widget['ooyala_video_field'])? -1 : $widget['ooyala_video_field'],
  );
  return $form;
}

/**
 * Implements hook_field_widget_form()
 */
function ooyala_markers_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'ooyala_marker',
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;  
}

/**
 * Impelements hook_field_is_empty().
 */
function ooyala_markers_field_is_empty($item, $field) {
  if (empty($item['title']) && empty($item['time'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Form API #process function for the ooyala_marker type element.
 */
function ooyala_markers_element_process($element, &$form_state, $form = array()) {
  $field_name = $element['#field_name'];

//  $field = $form['field_markers'];//$form['#field'];
//  $element['#field'] = $field;
  $element['#theme'] = 'ooyala_marker';
  $element['#element_validate'] = array('ooyala_markers_validate');

  $element['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => isset($element['#value']['title']) ? $element['#value']['title'] : '',
  );
  $element['time'] = array(
    '#type' => 'textfield',
    '#title' => t('Time'),
    '#size' => 8,
    '#maxlength' => 8,
    '#description' => t('Time should be entered in the format hh:mm:ss'),
    '#default_value' => isset($element['#value']['time']) ? $element['#value']['time'] : '',
    '#element_validate' => array('ooyala_markers_validate_time'),
  );

  // Set #element_validate in a way that it will not wipe out other
  // validation functions already set by other modules.
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array();
  }

  return $element;
}

/**
 * Form API validation function for ooyala_marker type elements.
 */
function ooyala_markers_validate($element) {
  // If the user enetered a title or a time make sure they entered both.
  if (!empty($element['title']['#value']) || !empty($element['time']['#value'])) {
    if (empty($element['title']['#value'])) {
      form_error($element['title'], t('Both title and time fields must be filled out.'));
    }
    if (empty($element['time']['#value'])) {
      form_error($element['time'], t('Both title and time fields must be filled out.'));
    }
  }
}

/**
 * Form API validation function for time fields of ooyala_marker type elements.
 */
function ooyala_markers_validate_time($element) {
  // Verify that input is the format hh:mm:ss.
  $pattern = '/^(\d{1,2}):(\d{2}):(\d{2})?$/';
  if (!empty($element['#value']) && !preg_match($pattern, $element['#value'])) {
    form_error($element, t('Must be in the format hh:mm:ss'));
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ooyala_markers_field_formatter_info() {
  return array(
    'ooyala_marker_default' => array(
      'label' => t('Title/Time as link'),
      'field types' => array('ooyala_marker'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ooyala_markers_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $output = '';

  switch ($display['type']) {
    case 'ooyala_marker_default':
      foreach ($items as $delta => $item) {
        $output = theme('ooyala_markers_formatter_default', array('element' => $item, 'field_name' => $field['field_name'], 'type_name' => $field['type'], 'video_field' => $entity->ooyala_field_names[0], 'nid' => $entity->nid));
        $element[$delta] = array('#markup' => $output);
      }
    break;
  }

  return $element;
}


/**
 * Form API theme for an individual text elements in an ooyala_marker field.
 */
function theme_ooyala_marker($elements) {
  $element = $elements['element'];

  drupal_add_css(drupal_get_path('module', 'ooyala_markers') .'/ooyala_markers.css');

  $output = '<div class="ooyala-markers-field clearfix">';
  $output .= '<div class="ooyala-markers-field-title ooyala-markers-field-column">' . drupal_render($element['title']) . '</div>';
  $output .= '<div class="ooyala-markers-field-time ooyala-markers-field-column">' . drupal_render($element['time']) . '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Theme function to output JavaScript marker links into the content.
 */
function theme_ooyala_markers_formatter_default($vars) {
  static $ooyala_markers_js_added;
  $element = $vars['element'];

  if (empty($element['title']) || empty($element['time'])) {
    return;
  }

  $field = field_info_field($vars['field_name']);
  $video_field = $vars['video_field'];

  if (!isset($ooyala_markers_js_added)) {
    drupal_add_js(drupal_get_path('module', 'ooyala_markers') . '/ooyala_markers.js');
    $ooyala_markers_js_added = TRUE;
  }

  // Generate a #<video_player_id>:<time> fragment.
  $time = explode(':', $element['time']);
  $time_in_milliseconds = ($time[0] * 3600000) + ($time[1] * 60000) + ($time[2] * 1000);
  $fragment = $vars['video_field'] . ':' . $time_in_milliseconds;

  return l($element['title'], 'node/' . $vars['nid'], array('absolute' => TRUE, 'fragment' => $fragment, 'attributes' => array('class' => array('ooyala-markers-marker'))));
}
