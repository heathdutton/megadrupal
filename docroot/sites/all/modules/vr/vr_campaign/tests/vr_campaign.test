<?php

class vrCampaignTestCase extends DrupalWebTestCase {
  function setUp() {
    parent::setUp('content', 'vr', 'vr_list', 'vr_campaign', 'enews');
    $path = drupal_get_path('module', 'vr');
    $filepath = $path . '/tests/settings.php';
    include_once DRUPAL_ROOT . '/' . $filepath;

    // Create user for test
    $perms = array(
      'access content',
      'access comments',
      'export newsletter',
      'administer nodes',
      'administer content types',
      'administer VerticalResponse',
    );
    $this->privileged_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($this->privileged_user);
    // Create a content type to hold campaign.
    $form = array(
      'name' => t('Newsletter'),
      'type' => 'enews',
      'node_options[promote]' => 0,
      'comment' => 0,
      'enews' => 1,
    );
    $this->drupalPost('admin/structure/types/add', $form, t('Save content type'));
    $text = t('The content type Newsletter has been added.');
    $this->assertText($text, $text);
  }
}

class vrCampaignTests extends vrCampaignTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Campaign Manager'),
      'description' => t('Create and test a campaign'),
      'group' => 'VerticalResponse',
    );
  }

  /**
   * Create, edit and delete campaign.
   */
  function testCampaigns() {
    $settings['type'] = 'enews';
    $node = $this->drupalCreateNode($settings);
    $this->verbose(print_r($node, TRUE));
    $this->drupalGet('node/' . $node->nid);
    // Test campaign attributes
    $this->clickLink('Newsletter');
    $form['campaign_name'] = $this->randomName(6);
    $form['from_label'] = $this->randomName(4);
    $form['support_email'] = 'email@mail.com';
    $this->drupalPost(NULL, $form, t('Save'));
    $this->vrAssertFields($form);
    $this->drupalPost(NULL, $form, t('Save and continue'));
    // Test campaign content
    unset($form);
    $form['unsub_message'] = t('Take me off this list.');
    $form['unsub_link_text'] = 'Remove';
    $form['postal_address'] = "Business Name\n123 Some Street\nSome town, PA 19106";
    $form['freeform_html'] = '<strong>' . $this->randomName(32) . '</strong>';
    $form['freeform_text'] = $this->randomName(32);
    $form['subject'] = $this->randomName(8);
    $this->drupalPost(NULL, $form, t('Save'));
    $text = t('The campaign content has been saved.');
    $this->assertText($text, $text);
    $this->vrAssertFields($form);
    // Test email
    $this->drupalPost(NULL, $form, t('Save and continue'));
    unset($form);
    $form['email'] = variable_get('vr_test_email', NULL);
    $this->drupalPost(NULL, $form, t('Send test email'));
    $text = t('Test emails have been sent to @mail', array('@mail' => $form['email']));
    $this->assertText($text, $text);
    // Remove campaign
    $campaign = vr_campaign_retrieve_campaign($node);
    vr_api('deleteCampaign', array('campaign_id' => $campaign->id));
    $param = array(
      'campaign_ids' => array(
        $campaign->id,
      ),
    );
    $campaigns = vr_api('enumerateEmailCampaigns', $param);
    $this->assertTrue(empty($campaigns), t('Test campaign removed'));
  }

  /**
   * Assert an entire form by fields.
   *
   * @param array
   *  form values keyed on field name.
   */
  function vrAssertFields($form) {
    foreach ($form as $field => $value) {
      $id = str_replace('_', '-', $field);
      $message = t('@field has been updated.', array('@field' => $field));
      $this->assertFieldById('edit-' . $id, $value, $message);
    }
  }
}
