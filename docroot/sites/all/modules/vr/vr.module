<?php

/**
 * hook_permission implementation
 */
function vr_permission() {
  return array(
    'administer VerticalResponse' => array(
      'title' => t('administer VerticalResponse'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * hook_menu implementation
 */
function vr_menu() {
  $items['admin/config/vr'] = array(
    'title' => t('VerticalResponse'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vr_settings_form'),
    'access arguments' => array('administer VerticalResponse'),
    'file' => 'vr.admin.inc',
  );
  return $items;
}

/**
 * Consume webservices from VerticalResponse.
 *
 * @return mixed
 *  A session_id for a successful connection or a VerticalResponse API
 *  object.
 */
function _vr_init($session_id = FALSE) {
  $vr_user = variable_get('vr_username', NULL);
  $vr_password = variable_get('vr_password', NULL);
  if (empty($vr_user) OR empty($vr_password)) {
    $options = array(
      'query' => array(
        'destination' => request_uri(),
      ),
    );
    $message = t('VerticalResponse is not configured. Please visit the <a href="@url">settings</a> page.', array('@url' => url('admin/config/vr', $options)));
    drupal_set_message($message, 'warning', FALSE);
    return FALSE;
  }
  $vr = null;
  $local_wsdl = drupal_get_path('module', 'vr') . '/VRAPI.wsdl';
  $hosted_wsdl = 'https://api.verticalresponse.com/wsdl/1.0/VRAPI.wsdl';
  try {
    if (file_exists($local_wsdl)) {
      $vr = new soapClient($local_wsdl);
    }
    else {
      $vr = new soapClient($hosted_wsdl);
    }

    if (!empty($session_id)) {
      return $vr;
    }
    $param = array(
      'username' => variable_get('vr_username', NULL),
      'password' => variable_get('vr_password', NULL),
      'session_duration_minutes' => 1,
    );
    return $vr->login($param);
  }
  catch (Exception $e) {
    watchdog('VerticalResponse API', $e->getMessage());
    return FALSE;
  }
}

/**
 * Create a wrapper function for the VR API
 *
 * @param string
 *  API method.
 * @param array
 *  arguments required by API method.
 * @param bool
 *  use drupal_set_message to display SOAP exceptions
 */
function vr_api($method, $param = array(), $error_message = FALSE) {
  static $session_id;
  if (empty($session_id)) {
    $session_id = _vr_init();
    return ($session_id) ? vr_api($method, $param) : FALSE;
  }
  else {
    $param['session_id'] = $session_id;
    $vr = _vr_init($session_id);
    try {
      return $vr->$method($param);
    }
    catch (Exception $e) {
      if ($error_message == TRUE) {
        drupal_set_message($e->getMessage(), 'error');
      }
      watchdog('VerticalResponse API', $e->getMessage());
    }
  }
}

/**
 * Return an array of mailing lists from VerticalResponse where
 * the list id is the key and the list name is the value.
 *
 * List information is cahced. The cache can be rebuild by setting the
 * "reset" argument to TRUE.
 *
 * @param array
 *  An array of options.
 *    null_option: inserts a null key with the value "-- Select One --"
 *    object: an array of objects is returned when this is set to TRUE, an array
 *      of list names when it is set to FALSE
 *    reset: FALSE by default, refreshes cached information when set to TRUE.
 * @param boolean
 *  return the whole list object
 */
function vr_get_lists($options = array()) {
  // Set up fluid arguments.
  $object = (empty($options['object'])) ? FALSE : $options['object'];
  $null_option = (empty($options['null_option'])) ? FALSE : $options['null_option'];
  $reset = (empty($options['reset'])) ? FALSE : $options['reset'];

  static $vr_lists;
  if (empty($vr_lists) OR $reset == TRUE) {
    $param['include_field_info'] = TRUE;
    $lists = vr_api('enumerateLists', $param);
    if ($null_option == TRUE) {
      $vr_lists[] = t('-- None --');
    }
    foreach ($lists as $list) {
      if ($list->type == 'optin' OR $list->type == 'email') {
        $vr_lists[$list->id] = ($object == TRUE) ? $list : t($list->name);
      }
    }
  }
  return (!empty($vr_lists)) ? $vr_lists : array();
}

/**
 * Return VerticalResponse List object by list id.
 *
 * @param string
 *  list id
 * @return mixed
 *  VerticalResponse list object is a list is found, FALSE if
 *  no list has the provided id.
 */
function vr_get_list_by_id($list_id, $reset = FALSE) {
  $options = array(
    'null_option' => FALSE,
    'object' => TRUE,
    'reset' => $reset,
  );
  $lists = vr_get_lists($options);
  if (!is_array($lists)) {
    return FALSE;
  }
  return (!empty($lists[$list_id])) ? $lists[$list_id] : FALSE;
}
