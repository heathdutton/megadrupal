<?php

/**
 * @file
 * Entity Lister module file.
 */

// Include the cache-related functions.
module_load_include('inc', 'entity_lister', 'entity_lister.cache');
module_load_include('inc', 'entity_lister', 'entity_lister.tabular');

/**
 * Implements hook_menu().
 */
function entity_lister_menu() {

  $items['admin/reports/entity_lister/cache'] = array(
    'title' => 'Entity Lister',
    'description' => 'View all Entity Lister cache entries.',
    'page callback' => 'entity_lister_cache_entries',
    'access arguments' => array('administer site configuration'),
    'file' => 'entity_lister.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/reports/entity_lister/cache/entry'] = array(
    'page callback' => 'entity_lister_cache_entry',
    'access arguments' => array('administer site configuration'),
    'page aruments'  => array(2),
    'file' => 'entity_lister.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['entity_lister/pageturner'] = array(
    'page callback' => 'entity_lister_pageturner_callback',
    'access callback' => TRUE,
    'file' => 'entity_lister.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // In some cases we might want to set the pager_path to use a path that
  // starts with 'admin', so the list will use the admin theme.  Note that this
  // path has the same callback as the non-admin version above.
  $items['admin/entity_lister/pageturner'] = $items['entity_lister/pageturner'];

  $items['entity_lister/demo'] = array(
    'page callback' => 'entity_lister_demo',
    'access arguments' => array('administer site configuration'),
    'file' => 'entity_lister.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function entity_lister_theme() {

  return array(
    'entity_lister_list'  => array(
      'variables' => array(
        'list' => NULL,
        'pager' => NULL,
        'total' => NULL,
        'above' => NULL,
        'below' => NULL,
      ),
      'template' => 'entity-lister-list',
    ),
    'entity_lister_taxonomy_vocabulary'  => array(
      'variables' => array(
        'entities' => NULL,
        'view_mode' => NULL,
      ),
    ),
    'entity_lister_headers'  => array(
      'variables' => array(
        'headers' => NULL,
        'filter_form' => NULL,
        'dir' => NULL,
      ),
    ),
  );

}

/**
 * Implements hook_preprocess_HOOK().
 */
function entity_lister_preprocess_entity_lister_list(&$vars) {

  if (!empty($vars['config']['template'])) {
    $vars['theme_hook_suggestions'][] = 'entity_lister_list__' . $vars['config']['template'];
  }

}

/**
 * Theme taxonomy vocabulary items.
 *
 * See EntityLister::renderItems().
 *
 * @return array
 *   The items.
 */
function theme_entity_lister_taxonomy_vocabulary(&$variables) {

  $items = array();

  foreach ($variables['entities'] as $entity) {
    $item = '<span class="taxonomy-vocabulary taxonomy-vocabulary-name" id="taxonomy-vocabulary-name-' . check_plain($entity->name) . '">';
    $item .= check_plain($entity->name);
    $item .= '</span>: ';
    $item .= '<span class="taxonomy-vocabulary taxonomy-vocabulary-description" id="taxonomy-vocabulary-description-' . check_plain($entity->name) . '">';
    $item .= check_plain($entity->description);
    $item .= '</span>';
    $items[] = $item;
  }

  return $items;

}
