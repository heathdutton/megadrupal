<?php

/**
 * @file atom_nzgovt.module
 *
 * Implements all the hooks for the module
 */

/**
 * Implements hook_views_api().
 */
function atom_nzgovt_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'atom_nzgovt'),
  );
}

/**
 * Implements RFC 4151 for generating ATOM valid tags for feeds
 *
 * @see http://diveintomark.org/archives/2004/05/28/howto-atom-id
 * @param $url
 *    - the full url to the feed
 * @return string
 *    - the URI to use in the ATOM feed
 */
function atom_nzgovt_generate_feed_tag_uri($url) {
  // for the datestamp we use the time that the drupal site was installed, if
  // this variable is missing, then use epoch. This is to ensure that the date
  // does not change
  $tag_uri = &drupal_static(__FUNCTION__);
  if (!isset($tag_uri)) {
    // parse the url
    $parsed_url = parse_url($url);
    $tag_uri = 'tag:' . $_SERVER['HTTP_HOST'] . ',' . date('Y-m-d', variable_get('install_time', 1)) . ':' . $parsed_url['path'];
  }
  return $tag_uri;
}

/**
 * Implements RFC 4151 for generating ATOM valid tags for nodes. If the same
 * node appears in two different feeds, it must have the same ID in both places.
 *
 * @see http://diveintomark.org/archives/2004/05/28/howto-atom-id
 * @param $node
 *    - the full node object
 * @return string
 *    - the URI to use in the ATOM feed
 */
function atom_nzgovt_generate_node_tag_uri($node) {
  return 'tag:' . $_SERVER['HTTP_HOST'] . ',' . date('Y-m-d', $node->created) . ':/node/' . $node->nid;
}

/**
 * Returns a list of NZ Govt information types that can be used
 *
 * An example use of these terms is
 * <category term="dataset" scheme="http://www.e.govt.nz/standards/nz/2009-03-01#information-type"/>
 *
 * @see http://e.govt.nz/guidance-and-resources/standards-and-compliance-requirements/atom-rss-feed-standard/implementing-atom-rss-feeds
 */
function atom_nzgovt_nz_govt_information_type_map() {
  return array(
    'news',
    'media-release',
    'job',
    'consultation',
    'tender',
    'dataset',
    'event',
    'alert',
    'advisory',
    'public-notice',
    'report',
    'form',
  );
}

/**
 * Returns a list of NZ Govt regions that can be used
 *
 * An example use of these terms is
 * <category term="Manawatu-Wanganui" scheme="http://www.e.govt.nz/standards/nz/2009-03-01#region"/>
 *
 * @see http://e.govt.nz/guidance-and-resources/standards-and-compliance-requirements/atom-rss-feed-standard/implementing-atom-rss-feeds
 */
function atom_nzgovt_nz_govt_region_map() {
  return array(
    'Northland',
    'Auckland',
    'Waikato',
    'Bay of Plenty',
    'Gisborne',
    'Hawke\'s Bay',
    'Taranaki',
    'Manawatu-Wanganui',
    'Wellington',
    'West Coast',
    'Canterbury',
    'Otago',
    'Southland',
    'Tasman',
    'Nelson',
    'Marlborough',
  );
}

/**
 * Preprocess an ATOM feed
 */
function template_preprocess_views_view_atom(&$vars) {
  global $base_url;

  $view     = &$vars['view'];
  $options  = &$vars['options'];
  $items    = &$vars['rows'];
  $style    = &$view->style_plugin;

  // We strip all HTML tags, but need to prevent double encoding from properly
  // escaped source data (such as &amp becoming &amp;amp;).
  $vars['subtitle'] = isset($options['subtitle']) ? check_plain(decode_entities(strip_tags($options['subtitle']))) : 'unknown';
  $vars['author_name'] = isset($options['author']['name']) ? check_plain(decode_entities(strip_tags($options['author']['name']))) : 'unknown';
  $vars['author_uri'] = isset($options['author']['uri']) ? check_plain(decode_entities(strip_tags($options['author']['uri']))) : 'unknown';
  $vars['license_uri'] = isset($options['license']['uri']) ? check_plain(decode_entities(strip_tags($options['license']['uri']))) : 'unknown';

  if ($view->display_handler->get_option('sitename_title')) {
    $title = variable_get('site_name', 'Drupal');
    if ($slogan = variable_get('site_slogan', '')) {
      $title .= ' - ' . $slogan;
    }
  }
  else {
    $title = $view->get_title();
  }
  $vars['title'] = check_plain($title);

  // Figure out which display which has a path we're using for this feed. If there isn't
  // one, use the global $base_url
  $link_display_id = $view->display_handler->get_link_display();
  if ($link_display_id && !empty($view->display[$link_display_id])) {
    $path = $view->display[$link_display_id]->handler->get_path();
  }

  if ($path) {
    $path = $view->get_url(NULL, $path);
    $url_options = array('absolute' => TRUE);
    if (!empty($view->exposed_raw_input)) {
      $url_options['query'] = $view->exposed_raw_input;
    }

    // Compare the link to the default home page; if it's the default home page, just use $base_url.
    if ($path == variable_get('site_frontpage', 'node')) {
      $path = '';
    }

    $vars['link'] = check_url(url($path, $url_options));
  }

  $vars['id'] = atom_nzgovt_generate_feed_tag_uri($vars['link']);
  $vars['updated'] = date('c', REQUEST_TIME);
  $vars['namespaces'] = drupal_attributes($style->namespaces);
  $vars['items'] = $items;
  $vars['channel_elements'] = format_xml_elements($style->channel_elements);

  // During live preview we don't want to output the header since the contents
  // of the feed are being displayed inside a normal HTML page.
  if (empty($vars['view']->live_preview)) {
    drupal_add_http_header('Content-Type', 'application/atom+xml; charset=utf-8');
  }
}

/**
 * Default theme function for all ATOM rows.
 */
function template_preprocess_views_view_row_atom(&$vars) {
  $view     = &$vars['view'];
  $options  = &$vars['options'];
  $item     = &$vars['row'];

  $vars['category'] = $item->category;
  $vars['terms'] = $item->terms;
  $vars['attachments'] = $item->attachments;
  $vars['title'] = _atom_nzgovt_html_to_xml_entities(check_plain($item->title));
  $vars['link'] = check_url($item->link);
  $vars['content'] = _atom_nzgovt_html_to_xml_entities($item->content);
  $vars['item_elements'] = empty($item->elements) ? '' : format_xml_elements($item->elements);
}

/**
 * Convert HTML Entities to XML entities.
 *
 * @see http://drupal.org/node/579286
 */
function _atom_nzgovt_html_to_xml_entities($html) {
  $table = array(
    "&nbsp;"     => "&#160;",
    "&iexcl;"    => "&#161;",
    "&cent;"     => "&#162;",
    "&pound;"    => "&#163;",
    "&curren;"   => "&#164;",
    "&yen;"      => "&#165;",
    "&brvbar;"   => "&#166;",
    "&sect;"     => "&#167;",
    "&uml;"      => "&#168;",
    "&copy;"     => "&#169;",
    "&ordf;"     => "&#170;",
    "&laquo;"    => "&#171;",
    "&not;"      => "&#172;",
    "&shy;"      => "&#173;",
    "&reg;"      => "&#174;",
    "&macr;"     => "&#175;",
    "&deg;"      => "&#176;",
    "&plusmn;"   => "&#177;",
    "&sup2;"     => "&#178;",
    "&sup3;"     => "&#179;",
    "&acute;"    => "&#180;",
    "&micro;"    => "&#181;",
    "&para;"     => "&#182;",
    "&middot;"   => "&#183;",
    "&cedil;"    => "&#184;",
    "&sup1;"     => "&#185;",
    "&ordm;"     => "&#186;",
    "&raquo;"    => "&#187;",
    "&frac14;"   => "&#188;",
    "&frac12;"   => "&#189;",
    "&frac34;"   => "&#190;",
    "&iquest;"   => "&#191;",
    "&Agrave;"   => "&#192;",
    "&Aacute;"   => "&#193;",
    "&Acirc;"    => "&#194;",
    "&Atilde;"   => "&#195;",
    "&Auml;"     => "&#196;",
    "&Aring;"    => "&#197;",
    "&AElig;"    => "&#198;",
    "&Ccedil;"   => "&#199;",
    "&Egrave;"   => "&#200;",
    "&Eacute;"   => "&#201;",
    "&Ecirc;"    => "&#202;",
    "&Euml;"     => "&#203;",
    "&Igrave;"   => "&#204;",
    "&Iacute;"   => "&#205;",
    "&Icirc;"    => "&#206;",
    "&Iuml;"     => "&#207;",
    "&ETH;"      => "&#208;",
    "&Ntilde;"   => "&#209;",
    "&Ograve;"   => "&#210;",
    "&Oacute;"   => "&#211;",
    "&Ocirc;"    => "&#212;",
    "&Otilde;"   => "&#213;",
    "&Ouml;"     => "&#214;",
    "&times;"    => "&#215;",
    "&Oslash;"   => "&#216;",
    "&Ugrave;"   => "&#217;",
    "&Uacute;"   => "&#218;",
    "&Ucirc;"    => "&#219;",
    "&Uuml;"     => "&#220;",
    "&Yacute;"   => "&#221;",
    "&THORN;"    => "&#222;",
    "&szlig;"    => "&#223;",
    "&agrave;"   => "&#224;",
    "&aacute;"   => "&#225;",
    "&acirc;"    => "&#226;",
    "&atilde;"   => "&#227;",
    "&auml;"     => "&#228;",
    "&aring;"    => "&#229;",
    "&aelig;"    => "&#230;",
    "&ccedil;"   => "&#231;",
    "&egrave;"   => "&#232;",
    "&eacute;"   => "&#233;",
    "&ecirc;"    => "&#234;",
    "&euml;"     => "&#235;",
    "&igrave;"   => "&#236;",
    "&iacute;"   => "&#237;",
    "&icirc;"    => "&#238;",
    "&iuml;"     => "&#239;",
    "&eth;"      => "&#240;",
    "&ntilde;"   => "&#241;",
    "&ograve;"   => "&#242;",
    "&oacute;"   => "&#243;",
    "&ocirc;"    => "&#244;",
    "&otilde;"   => "&#245;",
    "&ouml;"     => "&#246;",
    "&divide;"   => "&#247;",
    "&oslash;"   => "&#248;",
    "&ugrave;"   => "&#249;",
    "&uacute;"   => "&#250;",
    "&ucirc;"    => "&#251;",
    "&uuml;"     => "&#252;",
    "&yacute;"   => "&#253;",
    "&thorn;"    => "&#254;",
    "&yuml;"     => "&#255;",
    "&fnof;"     => "&#402;",
    "&Alpha;"    => "&#913;",
    "&Beta;"     => "&#914;",
    "&Gamma;"    => "&#915;",
    "&Delta;"    => "&#916;",
    "&Epsilon;"  => "&#917;",
    "&Zeta;"     => "&#918;",
    "&Eta;"      => "&#919;",
    "&Theta;"    => "&#920;",
    "&Iota;"     => "&#921;",
    "&Kappa;"    => "&#922;",
    "&Lambda;"   => "&#923;",
    "&Mu;"       => "&#924;",
    "&Nu;"       => "&#925;",
    "&Xi;"       => "&#926;",
    "&Omicron;"  => "&#927;",
    "&Pi;"       => "&#928;",
    "&Rho;"      => "&#929;",
    "&Sigma;"    => "&#931;",
    "&Tau;"      => "&#932;",
    "&Upsilon;"  => "&#933;",
    "&Phi;"      => "&#934;",
    "&Chi;"      => "&#935;",
    "&Psi;"      => "&#936;",
    "&Omega;"    => "&#937;",
    "&alpha;"    => "&#945;",
    "&beta;"     => "&#946;",
    "&gamma;"    => "&#947;",
    "&delta;"    => "&#948;",
    "&epsilon;"  => "&#949;",
    "&zeta;"     => "&#950;",
    "&eta;"      => "&#951;",
    "&theta;"    => "&#952;",
    "&iota;"     => "&#953;",
    "&kappa;"    => "&#954;",
    "&lambda;"   => "&#955;",
    "&mu;"       => "&#956;",
    "&nu;"       => "&#957;",
    "&xi;"       => "&#958;",
    "&omicron;"  => "&#959;",
    "&pi;"       => "&#960;",
    "&rho;"      => "&#961;",
    "&sigmaf;"   => "&#962;",
    "&sigma;"    => "&#963;",
    "&tau;"      => "&#964;",
    "&upsilon;"  => "&#965;",
    "&phi;"      => "&#966;",
    "&chi;"      => "&#967;",
    "&psi;"      => "&#968;",
    "&omega;"    => "&#969;",
    "&thetasym;" => "&#977;",
    "&upsih;"    => "&#978;",
    "&piv;"      => "&#982;",
    "&bull;"     => "&#8226;",
    "&hellip;"   => "&#8230;",
    "&prime;"    => "&#8242;",
    "&Prime;"    => "&#8243;",
    "&oline;"    => "&#8254;",
    "&frasl;"    => "&#8260;",
    "&weierp;"   => "&#8472;",
    "&image;"    => "&#8465;",
    "&real;"     => "&#8476;",
    "&trade;"    => "&#8482;",
    "&alefsym;"  => "&#8501;",
    "&larr;"     => "&#8592;",
    "&uarr;"     => "&#8593;",
    "&rarr;"     => "&#8594;",
    "&darr;"     => "&#8595;",
    "&harr;"     => "&#8596;",
    "&crarr;"    => "&#8629;",
    "&lArr;"     => "&#8656;",
    "&uArr;"     => "&#8657;",
    "&rArr;"     => "&#8658;",
    "&dArr;"     => "&#8659;",
    "&hArr;"     => "&#8660;",
    "&forall;"   => "&#8704;",
    "&part;"     => "&#8706;",
    "&exist;"    => "&#8707;",
    "&empty;"    => "&#8709;",
    "&nabla;"    => "&#8711;",
    "&isin;"     => "&#8712;",
    "&notin;"    => "&#8713;",
    "&ni;"       => "&#8715;",
    "&prod;"     => "&#8719;",
    "&sum;"      => "&#8721;",
    "&minus;"    => "&#8722;",
    "&lowast;"   => "&#8727;",
    "&radic;"    => "&#8730;",
    "&prop;"     => "&#8733;",
    "&infin;"    => "&#8734;",
    "&ang;"      => "&#8736;",
    "&and;"      => "&#8743;",
    "&or;"       => "&#8744;",
    "&cap;"      => "&#8745;",
    "&cup;"      => "&#8746;",
    "&int;"      => "&#8747;",
    "&there4;"   => "&#8756;",
    "&sim;"      => "&#8764;",
    "&cong;"     => "&#8773;",
    "&asymp;"    => "&#8776;",
    "&ne;"       => "&#8800;",
    "&equiv;"    => "&#8801;",
    "&le;"       => "&#8804;",
    "&ge;"       => "&#8805;",
    "&sub;"      => "&#8834;",
    "&sup;"      => "&#8835;",
    "&nsub;"     => "&#8836;",
    "&sube;"     => "&#8838;",
    "&supe;"     => "&#8839;",
    "&oplus;"    => "&#8853;",
    "&otimes;"   => "&#8855;",
    "&perp;"     => "&#8869;",
    "&sdot;"     => "&#8901;",
    "&lceil;"    => "&#8968;",
    "&rceil;"    => "&#8969;",
    "&lfloor;"   => "&#8970;",
    "&rfloor;"   => "&#8971;",
    "&lang;"     => "&#9001;",
    "&rang;"     => "&#9002;",
    "&loz;"      => "&#9674;",
    "&spades;"   => "&#9824;",
    "&clubs;"    => "&#9827;",
    "&hearts;"   => "&#9829;",
    "&diams;"    => "&#9830;",
    "&OElig;"    => "&#338;",
    "&oelig;"    => "&#339;",
    "&Scaron;"   => "&#352;",
    "&scaron;"   => "&#353;",
    "&Yuml;"     => "&#376;",
    "&circ;"     => "&#710;",
    "&tilde;"    => "&#732;",
    "&ensp;"     => "&#8194;",
    "&emsp;"     => "&#8195;",
    "&thinsp;"   => "&#8201;",
    "&zwnj;"     => "&#8204;",
    "&zwj;"      => "&#8205;",
    "&lrm;"      => "&#8206;",
    "&rlm;"      => "&#8207;",
    "&ndash;"    => "&#8211;",
    "&mdash;"    => "&#8212;",
    "&lsquo;"    => "&#8216;",
    "&rsquo;"    => "&#8217;",
    "&sbquo;"    => "&#8218;",
    "&ldquo;"    => "&#8220;",
    "&rdquo;"    => "&#8221;",
    "&bdquo;"    => "&#8222;",
    "&dagger;"   => "&#8224;",
    "&Dagger;"   => "&#8225;",
    "&permil;"   => "&#8240;",
    "&lsaquo;"   => "&#8249;",
    "&rsaquo;"   => "&#8250;",
    "&euro;"     => "&#8364;",
  );
  return strtr($html, $table);
}
