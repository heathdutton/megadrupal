<?php

/**
 * @file
 * Provides formatters to output converted values from number fields.
 */

/**
 * Implements hook_field_formatter_info().
 *
 * @see number_field_formatter_info()
 */
function unit_conversion_formatters_field_formatter_info() {
  return array(
    'unit_conversion_formatter_integer' => array(
      'label' => t('Converted to unit'),
      'field types' => array('number_integer'),
      'settings' =>  array(
        'unit_original' => '',
        'unit_converted' => '',
        'thousand_separator' => ' ',
        'decimal_separator' => '.',
        'scale' => 0,
        'prefix_suffix' => TRUE,
      ),
    ),
    'unit_conversion_formatter_decimal' => array(
      'label' => t('Converted to unit'),
      'field types' => array('number_decimal', 'number_float'),
      'settings' =>  array(
        'unit_original' => '',
        'unit_converted' => '',
        'thousand_separator' => ' ',
        'decimal_separator' => '.',
        'scale' => 2,
        'prefix_suffix' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * @see number_field_formatter_settings_summary()
 */
function unit_conversion_formatters_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();
  if ($display['type'] == 'unit_conversion_formatter_decimal' || $display['type'] == 'unit_conversion_formatter_integer') {

    // Show active conversion settings.
    if (!empty($settings['unit_original']) && !empty($settings['unit_converted'])) {
      $summary[] = t('Display with value converted from @from to @to.', array('@from' => $settings['unit_original'], '@to' => $settings['unit_converted']));
    }
    else {
      $summary[] = t('Display the original value, without conversion.');
    }

    // Show format and prefix/suffix settings.
    $summary[] = number_format(1234.1234567890, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
    if ($settings['prefix_suffix']) {
      $summary[] = t('Display with prefix and suffix.');
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * @see number_field_formatter_settings_form()
 */
function unit_conversion_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Simplify access of form_values settings array.
  if (isset($form_state['values']['fields'][$form_state['formatter_settings_edit']]['settings_edit_form'])) {
    $settings_state = $form_state['values']['fields'][$form_state['formatter_settings_edit']]['settings_edit_form']['settings'];
  }

  if ($display['type'] == 'unit_conversion_formatter_integer' || $display['type'] == 'unit_conversion_formatter_decimal') {
    $units = unitsapi_get_units();

    // Allow for no unit conversion
    $options = array('none' => t('No unit conversion'));

    // Show all possible units for the "from" unit type.
    if (is_array($units)) {
      foreach ($units as $unit_key => $unit) {
        $options[$unit_key] = $unit['plural'];
      }
    }
    $element['unit_original'] = array(
      '#type' => 'select',
      '#title' => t('Original unit type'),
      '#description' => t('Select the original unit of this field.  For example, pick "feet" here if you plan on converting the value to yards.'),
      '#options' => $options,
      '#default_value' => $settings['unit_original'],
      '#ajax' => array(
        'callback' => '_unit_conversion_formatters_settings_callback',
        'wrapper' => 'unit_conversion_formatter_setting_wrapper',
      )
    );

    // Display only ajax wrapper markup by default.
    $element['unit_converted'] = array(
      '#type' => 'markup',
      '#prefix' => '<div id="unit_conversion_formatter_setting_wrapper">',
      '#suffix' => '</div>'
    );

    // Prefer form_state with a settings to db settings, fallback to defaults.
    if (!empty($settings_state['unit_original']) && $settings_state['unit_original'] !== 'none') {
      $unit_original = $settings_state['unit_original'];
    }
    elseif (empty($settings_state) && $settings['unit_original'] !== 'none') {
      $unit_original = $settings['unit_original'];
    }
    else {
      $unit_original = 'none';
    }

    // Display converted type form when a "from" type is available.
    if (!empty($unit_original) && $unit_original !== 'none') {
      $options = array();
      $unit_original = array_key_exists($unit_original, $units) ? $units[$unit_original] : NULL;
      if ($unit_original) {

        // Only show conversions of a like kind as options.
        if (is_array($units)) {
          foreach ($units as $unit_key => $unit) {
            if ($unit['kind'] == $unit_original['kind']) {
              $options[$unit_key] = $unit['plural'];
            }
          }
        }

        // Switch markup to select list.
        unset($element['unit_converted']['#type']);
        $element['unit_converted'] += array(
          '#type' => 'select',
          '#title' => t('Converted unit type'),
          '#description' => t('Select the converted unit of this field.  For example, pick "yard" here if your original unit was "feet".'),
          '#options' => $options,
          '#default_value' => $settings['unit_converted'],
        );
      }
    }

    $options = array(
      ''  => t('<none>'),
      '.' => t('Decimal point'),
      ',' => t('Comma'),
      ' ' => t('Space'),
    );
    $element['thousand_separator'] = array(
      '#type' => 'select',
      '#title' => t('Thousand marker'),
      '#options' => $options,
      '#default_value' => $settings['thousand_separator'],
    );

    if ($display['type'] == 'unit_conversion_formatter_decimal') {
      $element['decimal_separator'] = array(
        '#type' => 'select',
        '#title' => t('Decimal marker'),
        '#options' => array('.' => t('Decimal point'), ',' => t('Comma')),
        '#default_value' => $settings['decimal_separator'],
      );
      $element['scale'] = array(
        '#type' => 'select',
        '#title' => t('Scale'),
        '#options' => drupal_map_assoc(range(0, 10)),
        '#default_value' => $settings['scale'],
        '#description' => t('The number of digits to the right of the decimal.'),
      );
    }

    $element['prefix_suffix'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display prefix and suffix.'),
      '#default_value' => $settings['prefix_suffix'],
    );
  }

  return $element;
}

/**
 * AJAX callback for formatter settings form.
 */
function _unit_conversion_formatters_settings_callback($form, $form_state) {
  $settings_form = $form['fields'][$form_state['formatter_settings_edit']]['format']['settings_edit_form']['settings'];
  return $settings_form['unit_converted'];
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see number_field_formatter_view()
 */
function unit_conversion_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  $units = unitsapi_get_units();

  if ($display['type'] == 'unit_conversion_formatter_integer' || $display['type'] == 'unit_conversion_formatter_decimal') {
    foreach ($items as $delta => $item) {
      $value = $item['value'];

      // Convert units when unit kinds is available.
      if (array_key_exists($settings['unit_original'], $units) && array_key_exists($settings['unit_converted'], $units)) {
        $value = unitsapi_convert($item['value'], $settings['unit_original'], $settings['unit_converted']);
      }

      // Correct for null values.
      if (empty($value) && $value !== '0') {
        return '';
      }

      // Format number and prefix/suffix according to settings.
      $output = number_format($value, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
      if ($settings['prefix_suffix']) {
        $prefixes = isset($instance['settings']['prefix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['prefix'])) : array('');
        $suffixes = isset($instance['settings']['suffix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['suffix'])) : array('');
        $prefix = (count($prefixes) > 1) ? format_plural($value, $prefixes[0], $prefixes[1]) : $prefixes[0];
        $suffix = (count($suffixes) > 1) ? format_plural($value, $suffixes[0], $suffixes[1]) : $suffixes[0];
        $output = $prefix . $output . $suffix;
      }
      $element[$delta] = array('#markup' => $output);
    }
  }

  return $element;
}