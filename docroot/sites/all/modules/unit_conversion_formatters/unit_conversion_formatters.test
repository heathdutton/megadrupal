<?php

/**
 * @file
 * Tests for unitsapi_formatters.module.
 */

/**
 * Tests formatter settings and formatter results.
 */
class UnitConversionFormattersTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Unit conversion formatters',
      'description' => 'Test unit conversion formatters.',
      'group' => 'Units API',
    );
  }

  function setUp($modules = array()) {
    $modules[] = 'unit_conversion_formatters';
    parent::setUp($modules);

    // Create test admin user.
    $this->admin_user = $this->drupalCreateUser(array('bypass node access', 'administer nodes', 'administer content types'));
    $this->drupalLogin($this->admin_user);

    // Create content type, with underscores.
    $type_name = strtolower($this->randomName(8)) . '_test';
    $type = $this->drupalCreateContentType(array('name' => $type_name, 'type' => $type_name));
    $this->type = $type->type;
    // Store a valid URL name, with hyphens instead of underscores.
    $this->hyphen_type = str_replace('_', '-', $this->type);
  }

  /**
   * Tests formatter settings and results.
   */
  function testUnitsAPIFormatterUI() {
    // Create a field with settings to validate.
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'number_decimal',
      'settings' => array(
        'precision' => 8, 'scale' => 2, 'decimal_separator' => '.',
      )
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'node',
      'bundle' => $this->type,
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'unit_conversion_formatter_decimal',
        ),
      ),
    );
    field_create_instance($this->instance);

    // Display the "Manage display" screen and check that the expected formatter is
    // selected.
    $this->drupalGet(format_string('admin/structure/types/manage/!type/display', array('!type' => $this->type)));
    $this->assertFieldByName(format_string('fields[!name][type]', array('!name' => $this->field['field_name'])), 'unit_conversion_formatter_decimal', t('The expected formatter is selected.'));
    $this->assertText(t('Display the original value, without conversion.'), t('The expected summary is displayed.'));

    // Load formatter settings form
    $this->drupalPostAJAX(NULL, array(), format_string('!type_formatter_settings_edit', array('!type' => $this->field['field_name'])));
    $this->assertText(t('Original unit type'), t('The expected label is displayed.'));

    // Reusable variables for field xpaths
    $unit_original_field = format_string('fields[!name][settings_edit_form][settings][unit_original]', array('!name' => $this->field['field_name']));
    $unit_converted_field = format_string('fields[!name][settings_edit_form][settings][unit_converted]', array('!name' => $this->field['field_name']));

    // Verify the default of 'none'
    $this->assertFieldByName($unit_original_field, 'none', t('The expected original unit type is selected.'));

    // Trigger the load of the converted select field
    $edit = array($unit_original_field => 'inch');
    $this->drupalPostAJAX(NULL, $edit, $unit_original_field);
    $this->assertFieldByName($unit_converted_field, 'millimeter', t('The expected converted unit type is selected.'));

    // Verify that settings save and update summary
    $edit = array($unit_original_field => 'inch', $unit_converted_field => 'foot');
    $this->drupalPostAJAX(NULL, $edit, format_string('!type_formatter_settings_update', array('!type' => $this->field['field_name'])));
    $this->assertText(t('Display with value converted from inch to foot.'), t('The expected summary is displayed.'));
    $this->drupalPost(NULL, array(), t('Save'));
    $this->assertText(t('Your settings have been saved.'), t('The display was saved.'));
    $this->assertText(t('Display with value converted from inch to foot.'), t('The expected summary is displayed.'));

    // Display creation form.
    $this->drupalGet(format_string('node/add/!type', array('!type' => $this->hyphen_type)));
    $langcode = LANGUAGE_NONE;

    // Submit a signed decimal value within the allowed precision and scale.
    $value = '12.00';
    $edit = array(
      "title" => $this->randomName(8),
      "body[$langcode][0][value]" => $this->randomName(16),
      "{$this->field['field_name']}[$langcode][0][value]" => $value,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertRaw('1.00', t('Converted value is displayed.'));
  }
}
