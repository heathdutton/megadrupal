<?php

/**
 * Bridge module to allow Domain Access and Organic Groups permissions
 * to coexist by creating a different access "realm" that merges the rules 
 * of both modules
 *
 * From http://drupal.org/node/1355272
 */

/**
 * Defines a separator between the Domain and OG IDs so they form a single
 * realm. Kind of hacky but works with up to 10989 domains, as if we would ever 
 * need that many
 */
define('DOMAIN_WF_SEPARATOR', '91');
function domain_wf_bridge_node_access_records_alter(&$grants, $node) {
  $domain_grants = array();
  $wf_grants = array();
  
  
  foreach ($grants as $key => $grant) {
    if($grant['realm'] == 'domain_id') {
      $domain_grants[] = $grant;
      if((bool)workflow_get_workflow_node_by_nid($node->nid)){
        unset($grants[$key]);
      }
    }elseif($grant['realm'] == 'workflow_access' || $grant['realm']== 'workflow_access_owner'){
      $wf_grants[] = $grant;
      unset($grants[$key]);
    }
  }
  if(!empty($domain_grants) && !empty($wf_grants)) {
    foreach($domain_grants as $domain_grant) {
      foreach($wf_grants as $wf_grant) {
        $realm = $wf_grant['realm'] == 'workflow_access' ? 'domain_wf' : 'domain_wf_owner';
        // first check for domain access, if it is not granted, then not pass to
        // the workflow_access else set access with workflow access values
        $grants[] = array(
          'realm'        => $realm,
          'gid'          => $domain_grant['gid'] . DOMAIN_WF_SEPARATOR . $wf_grant['gid'],
          'grant_view'   => $domain_grant['grant_view'] == 0 ? $domain_grant['grant_view'] : $wf_grant['grant_view'],
          'grant_update' => $domain_grant['grant_update'] == 0 ? $domain_grant['grant_update'] : $wf_grant['grant_update'],
          'grant_delete' => $domain_grant['grant_update'] == 0 ? $domain_grant['grant_update'] : $wf_grant['grant_update'],
          'priority'     => 0,
          '#module'      => 'domain_wf_bridge',
        );
      }
    }
  }
}

function domain_wf_bridge_node_grants_alter(&$grants, $account, $op) {
  $workflow_access = !empty($grants['workflow_access']) ? $grants['workflow_access'] : array(); 
  $workflow_access_owner = !empty($grants['workflow_access_owner']) ? $grants['workflow_access_owner'] : array(); 
  if(isset($grants['domain_id']) && (!empty($workflow_access) || !empty($workflow_access_owner))) {
    $user_domains = $grants['domain_id'];
    $domain_wf_grants = array();
    foreach($workflow_access as $wf) {
      foreach($user_domains as $domain_id) {
        $domain_wf_grants['domain_wf'][] = $domain_id . DOMAIN_WF_SEPARATOR . $wf;
      }
    }
    foreach($workflow_access_owner as $wf_o) {
      foreach($user_domains as $domain_id) {
        $domain_wf_grants['domain_wf_owner'][] = $domain_id . DOMAIN_WF_SEPARATOR . $wf_o;
      }
    }
    $grants = array_merge($domain_wf_grants, $grants);
    unset($grants['workflow_access']);
    unset($grants['workflow_access_owner']);
  }
}
