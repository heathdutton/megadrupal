<?php

define('RBK_MONEY_SIMPLE_ACTION_URL', 'https://rbkmoney.ru/acceptpurchase.aspx');
define('RBK_MONEY_SIMPLE_IP_LIST', serialize(array('89.111.188.128', '195.122.9.148')));
define('RBK_MONEY_SIMPLE_STATUS_PROCESS', 3);
define('RBK_MONEY_SIMPLE_STATUS_SUCCESS', 5);

/**
 * Implements hook_permission().
 */
function rbk_money_simple_permission() {
  return array(
    'access config' => array(
      'title' => t('Administer module settings'),
      'description' => ''
    ),
    'administer payments' => array(
      'title' => t('Administer payments'),
      'description' => ''
    ),
    'create payment order' => array(
      'title' => t('Create RBK Money payment order'),
      'description' => ''
    ),
    'make payment' => array(
      'title' => t('Make RBK Money payment'),
      'description' => ''
    ),
  );
}

/**
 * Implements hook_menu().
 */
function rbk_money_simple_menu() {
  $items['rbk_money_simple/payment'] = array(
    'title' => 'Payment using RBK Money',
    'description' => 'Payment using RBK Money',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rbk_money_simple_form'),
    'access arguments' => array('create payment order'),
    'type' => MENU_CALLBACK,
  );
  $items['rbk_money_simple/payment/%'] = array(
    'title' => 'RBK Money payment order',
    'description' => 'Payment using RBK Money',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rbk_money_simple_form_render', 2),
    'access arguments' => array('make payment'),
    'type' => MENU_CALLBACK,
  );
  $items['rbk_money_simple/success'] = array(
    'title' => 'RBK Money payment complete',
    'description' => 'Payment using RBK Money successfully proccessed.',
    'page callback' => 'rbk_money_simple_success',
    'access arguments' => array('make payment'),
    'type' => MENU_CALLBACK,
  );
  $items['rbk_money_simple/fail'] = array(
    'title' => 'RBK Money payment failed',
    'description' => 'Payment using RBK Money was not complete.',
    'page callback' => 'rbk_money_simple_fail',
    'access arguments' => array('make payment'),
    'type' => MENU_CALLBACK,
  );
  $items['rbk_money_simple/status'] = array(
    'title' => 'Internal Data',
    'page callback' => 'rbk_money_simple_status',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/rbk_money_simple'] = array(
    'title' => 'RBK Money simple',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/rbk_money_simple/settings'] = array(
    'title' => 'Settings',
    'description' => 'RBK Money configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rbk_money_simple_settings'),
    'access arguments' => array('access config'),
    'file' => 'rbk_money_simple.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/rbk_money_simple/payments'] = array(
    'title' => 'Payments',
    'description' => 'Browse all RBK Money payments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rbk_money_simple_payments'),
    'access arguments' => array('administer payments'),
    'file' => 'rbk_money_simple.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/*
 * Simple payment form page
 */
function rbk_money_simple_form($form, &$form_state) {
  $currency = variable_get('rbk_money_simple_recipientCurrency', 'RUR');
  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => 8,
    '#maxlength' => 8,
    '#field_suffix' => ($currency == 'RUR') ? 'руб.' : $currency,
    '#required' => TRUE
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Payment description'),
    '#description' => t('Max 255 symbols.'),
    '#maxlength' => 255,
    '#default_value' => t('Payment to !sitename', array('!sitename' => variable_get('site_name', 'Drupal'))),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create payment'),
  );
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'rbk_money_simple') . '/rbk_money_simple.js',
  );

  return $form;
}

function rbk_money_simple_form_submit($form, &$form_state) {
  $params = array();
  $params['amount'] = $form_state['values']['amount'];
  $params['description'] = $form_state['values']['description'];
  $pid = rbk_money_simple_payment_save($params);
  drupal_set_message(t("Payment saved. Please confirm payment details"));
  drupal_goto("rbk_money_simple/payment/{$pid}");
}

/*
 * Generating payment form for sending POST data
 * @param $payment
 *  номер платежа или массив с параметрами платежа
 * @param $silent
 *  (optional) отображать ли детали платежа
 * @return
 *  payment form
*/
function rbk_money_simple_form_render($form, &$form_state, $payment, $silent = false) {
  if (!is_array($payment) && is_numeric($payment)) { // load existing payment
    $payment = rbk_money_simple_payment_load($payment);
  }

  if (!is_array($payment) || $payment['pid'] <= 0) {
    $form['error'] = array(
      '#type' => 'item',
      '#title' => t('Error'),
      '#markup' => t('Order you are going to pay for does not exist.'),
    );
  }
  elseif (isset($payment['status']) && $payment['status'] == 5) {
    $form['error'] = array(
      '#type' => 'item',
      '#title' => t('Error'),
      '#markup' => t('Order you are going to pay already payed.'),
    );
  }
  else{
    $currency = variable_get('rbk_money_simple_recipientCurrency', 'RUR');
    $description = (!empty($payment['description'])) ? $payment['description'] : '';

    if (!$silent) {
      $form['pid'] = array(
        '#type' => 'item',
        '#title' => t('Order #'),
        '#markup' => $payment['pid'],
      );
      $form['amount'] = array(
        '#type' => 'item',
        '#title' => t('Amount'),
        '#markup' => round($payment['amount'], 2),
        '#field_suffix' => ($currency == 'RUR') ? 'руб.' : $currency,
      );
      if($description){
        $form['description'] = array(
          '#type' => 'item',
          '#title' => t('Description'),
          '#markup' => $description,
        );
      }
    }
    $form['eshopId'] = array(
      '#type' => 'hidden',
      '#value' => variable_get('rbk_money_simple_eshopId', ''),
    );
    $form['recipientCurrency'] = array(
      '#type' => 'hidden',
      '#value' => $currency,
    );
    $form['recipientAmount'] = array(
      '#type' => 'hidden',
      '#value' => $payment['amount'],
    );
    $form['orderId'] = array(
      '#type' => 'hidden',
      '#value' => $payment['pid'],
    );
    if($description){
      $form['serviceName'] = array(
        '#type' => 'hidden',
        '#value' => $payment['description'],
      );
    }
    $email = (user_is_logged_in() && $GLOBALS['user']->mail) ? $GLOBALS['user']->mail : '';
    if ($email) {
      $form['user_email'] = array(
        '#type' => 'hidden',
        '#value' => $email,
      );
    }
    $language = variable_get('rbk_money_simple_language', 'ru');
    if ($language != 'ru') {
      $form['language'] = array(
        '#type' => 'hidden',
        '#value' => $language,
      );
    }
    if (variable_get('rbk_money_simple_send_hash', 0) == 1) {
      $price = str_replace('.', ',', $payment['amount']); // use comma as sum separator
      $string = variable_get('rbk_money_simple_eshopId', '') . "::" . $price . "::" . variable_get('rbk_money_simple_recipientCurrency', 'RUR') . "::" . $email . "::" . $description . "::" . $payment['pid'] . "::::" . variable_get('rbk_money_simple_secretKey', '');
      $hash_algo = variable_get('rbk_money_simple_hash', 'md5');
      $form['hash'] = array(
        '#type' => 'hidden',
        '#value' => hash($hash_algo, $string),
      );
    }
    $form['successUrl'] = array(
      '#type' => 'hidden',
      '#value' => url($GLOBALS['base_url'] . '/rbk_money_simple/success'),
    );
    $form['failUrl'] = array(
      '#type' => 'hidden',
      '#value' => url($GLOBALS['base_url'] . '/rbk_money_simple/fail'),
    );
    // adding advanced form parameters
    if(isset($payment['advanced']) && count($payment['advanced'])){
      foreach ($payment['advanced'] as $k => $v) {
        $form[$k] = array(
          '#type' => 'hidden',
          '#value' => $v,
        );
      }
    }

    $form['#action'] = RBK_MONEY_SIMPLE_ACTION_URL;
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Pay now'),
    );
  }

  return $form;
}

/*
 * Success & fail theme hooks
 */
function rbk_money_simple_theme() {
  return array(
    'rbk_money_simple_success' => array(
      'template' => 'rbk_money_simple_success',
    ),
    'rbk_money_simple_fail' => array(
      'template' => 'rbk_money_simple_fail',
    ),
  );
}

function rbk_money_simple_success() {
  return theme('rbk_money_simple_success');
}

function rbk_money_simple_fail() {
  return theme('rbk_money_simple_fail');
}

/*
 * Process response from RBK Money's server
 */
function rbk_money_simple_status() {
  header("HTTP/1.0 200 OK");

  /* Check for allowed IP */
  if (variable_get('rbk_money_simple_ip', 0) == 1) {
    $allowed_ip = unserialize(RBK_MONEY_SIMPLE_IP_LIST);
    if (!in_array($_SERVER['REMOTE_ADDR'], $allowed_ip)) {
      watchdog("rbk_money_simple", "Error with remote IP address = %ip. The remote address of POST data does not match a valid RBK Money IP address. Possible fraud", array('%ip' => ip_address(), WATCHDOG_WARNING));
      exit();
    }
  }

  foreach ($_POST as $key => $val) {
    if($key == 'paymentStatus' || $key == 'orderId'){
      $response[$key] = (int) $val;
    } else {
      $response[$key] = $val;
    }
  }

  $status_termin = ($response['paymentStatus'] == RBK_MONEY_SIMPLE_STATUS_SUCCESS) ? t('successful') : t('processing');

  if (variable_get('rbk_money_simple_log', 1) == 1) {
    $log = var_export($response, TRUE);
    watchdog('rbk_money_simple', "Payment #%pid {$status_termin}; Data: <pre>%log</pre>", array('%log' => $log, '%pid' => $response['orderId']));
  }

  if (isset($response['hash'])) {
    $order = rbk_money_simple_payment_load($response['orderId']);

    $string = variable_get('rbk_money_simple_eshopId', '') . '::' . $response['orderId'] . '::' . $response['serviceName'] . '::' . $response['eshopAccount'] . '::' . number_format($order['amount'], 2, '.', '') . '::' . variable_get('rbk_money_simple_recipientCurrency', 'RUR') . '::' . $response['paymentStatus'] . '::' . $response['userName'] . '::' . $response['userEmail'] . '::' . $response['paymentData'] . '::' . variable_get('rbk_money_simple_secretKey', '');

    $hash_algo = variable_get('rbk_money_simple_hash', 'md5');
    $crc = hash($hash_algo, $string);

    if ($response['hash'] == $crc) {
      switch ($response['paymentStatus']) {
        case RBK_MONEY_SIMPLE_STATUS_PROCESS:
          rbk_money_simple_payment_enroll($response['orderId'], RBK_MONEY_SIMPLE_STATUS_PROCESS);
          break;
        case RBK_MONEY_SIMPLE_STATUS_SUCCESS:
          rbk_money_simple_payment_enroll($response['orderId'], RBK_MONEY_SIMPLE_STATUS_SUCCESS);
          break;
      }
    }
    elseif ($response['hash'] !== $crc) {
      watchdog("rbk_money_simple", "Payment #%pid control hash error. Possible fraud", array('%pid' => $response['orderId']), WATCHDOG_WARNING);
    }
  }

}

/*
 * Store payment details in DB
 * @param
 *  array()
 *  required: $params['amount']
 * @return
 *  payment ID
 */
function rbk_money_simple_payment_save($params) {
  if (!is_array($params)) {
    form_set_error('', t('Can not create payment. Please contact site administrator for further assistance.'));
    return FALSE;
  }

  if(!isset($params['amount'])){
    form_set_error('', t('Can not create payment. Please specify payment amount value'));
    return FALSE;
  }

  if(!isset($params['uid'])){
    $params['uid'] = (user_is_logged_in() && $GLOBALS['user']->mail) ? $GLOBALS['user']->uid : 0;
  }

  if(!isset($params['description'])){
    $params['description'] = '';
  }

  $defined_params = array('uid' => '', 'amount' => '', 'description' => '', 'created' => '');
  $advanced_params = array_diff_key($params, $defined_params);
  $advanced_params = serialize($advanced_params);

  $pid = db_insert('rbk_money_simple')->fields(array(
    'uid' => $params['uid'],
    'amount' => $params['amount'],
    'description' => substr($params['description'], 0, 255),
    'created' => REQUEST_TIME,
    'params' => $advanced_params,
  ))->execute();

  return $pid;
}

/*
 * Load payment details from DB
 */
function rbk_money_simple_payment_load($pid) {
  $result = db_select('rbk_money_simple', 'r')
    ->fields('r', array('pid', 'uid', 'amount', 'created', 'description', 'status', 'params'))
    ->condition('r.pid', (int) $pid, '=')
    ->execute()
    ->fetchAssoc();
  if(isset($result['params'])){
    $adv_params = unserialize($result['params']);
    foreach ($adv_params as $k => $v) {
      $result['advanced'][$k] = $v;
    }
  }

  return $result;
}

/*
 * Enroll payment (set status 5 or 3)
 */
function rbk_money_simple_payment_enroll($pid, $status = RBK_MONEY_SIMPLE_STATUS_SUCCESS){
  $pid = (int) $pid;
  if ($pid > 0){
    db_update('rbk_money_simple')
      ->fields(array('status' => $status))
      ->condition('pid', $pid, '=')
      ->execute();
  }
  if($status == RBK_MONEY_SIMPLE_STATUS_SUCCESS){
    watchdog("rbk_money_simple", "Payment #%pid enrolled", array('%pid' => $pid));
  }
}

/*
 * Delete payment from DB
 */
function rbk_money_simple_payment_delete($pid){
  $pid = (int) $pid;
  if ($pid > 0){
    db_delete('rbk_money_simple')
      ->condition('pid', $pid, '=')
      ->execute();
  }
  watchdog("rbk_money_simple", "Payment #%pid deleted", array('%pid' => $pid));
}