<?php

/**
 * @file
 * Edgecast Token Authentication
 */
define('EDGECAST_LINK_TOKEN', 'token');
define('EDGECAST_LINK_NOTOKEN', 'notoken');

/**
 * Implements hook_permission().
 */
function edgecast_token_permission() {
  return array(
    'access edgecast token module' => array(
      'title' => t('Access EdgeCast Token Module'),
      'description' => t('Perform administration tasks for EdgeCast Token module.'),
    ),
  );
}

/**
 * Checks if current user has access to edgecast_token.
 */
function edgecast_token_module_access() {
  return user_access('access edgecast token module');
}

/**
 * Returns an array of Drupal variables that are set by this module.
 *
 * @return array
 *   The variables that are set by this module.
 */
function edgecast_token_settings_fields() {
  return array(
    'edgecast_token_token_pkey',
    'edgecast_token_token_ecexprie',
    'edgecast_token_token_eccountryallow',
    'edgecast_token_token_eccountrydeny',
    'edgecast_token_token_ecrefallow',
    'edgecast_token_token_ecrefdeny',
    'edgecast_token_token_ecprotoallow',
    'edgecast_token_token_ecprotodeny',
    'edgecast_token_token_ecclientip',
    'edgecast_token_token_ecurlallow',
    'edgecast_token_token_method',
  );
}

/**
 * Implements hook_menu().
 */
function edgecast_token_menu() {
  // Admin UI.
  $items = array();
  $items['admin/config/development/edgecast/token'] = array(
    'title' => 'Token Auth Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgecast_token_admin_token'),
    'access callback' => 'edgecast_token_module_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'edgecast_token.admin.inc',
  );

  return $items;
}

/**
 * Function to create EdgeCast Tokens
 */
function edgecast_token_ectoken_gen() {
  //Lets sucks out all the variables from the database to build our encrypted token
  $token = array();
  $token['pkey'] = variable_get('edgecast_token_token_pkey');
  $token['expire'] = variable_get('edgecast_token_token_ecexprie');
  $token['countryallow'] = variable_get('edgecast_token_token_eccountryallow');
  $token['countrydeny'] = variable_get('edgecast_token_token_eccountrydeny');
  $token['refallow'] = variable_get('edgecast_token_token_ecrefallow');
  $token['refdeny'] = variable_get('edgecast_token_token_ecrefdeny');
  $token['protoallow'] = variable_get('edgecast_token_token_ecprotoallow', 'BOTH');
  $token['protodeny'] = variable_get('edgecast_token_token_ecprotodeny', 'NONE');
  $token['clientip'] = variable_get('edgecast_token_token_ecclientip');
  $token['urlallow'] = variable_get('edgecast_token_token_ecurlallow');

  //Start building the parameters to pass to the EC token function
  $ecParms = 'ec_secure=1';
  $ecParms .= isset($token['expire']) ? '&ec_expire=' . time() + $token['expire'] : '';
  $ecParms .= isset($token['countryallow']) ? '&ec_country_allow=' . $token['countryallow'] : '';
  $ecParms .= isset($token['countrydeny']) ? '&ec_country_deny=' . $token['countrydeny'] : '';
  $ecParms .= isset($token['refallow']) ? '&ec_ref_allow=' . $token['refallow'] : '';
  $ecParms .= isset($token['protoallow']) ? '&ec_proto_allow=' . $token['protoallow'] : '';
  $ecParms .= isset($token['protodeny']) ? '&ec_proto_deny=' . $token['protodeny'] : '';
  $ecParms .= isset($token['clientip']) ? '&ec_clientip=' . $token['clientip'] : '';
  $ecParms .= isset($token['urlallow']) ? '&ec_url_allow=' . $token['urlallow'] : '';


  $method = variable_get('edgecast_token_token_method');
  if ($method != NULL) {
    switch ($method) {
      case 'PHPLibrary':
        if (extension_loaded('ectoken')) {
          $ecToken = ectoken_generate($token['pkey'], $ecParams);
        }
        else {
          watchdog('edgecast_token', 'The EdgeCast Token PHP module could not be loaded.');
          return FALSE;
        }
        return $ecToken;
        break;
      case 'WebService':
        try {
          $customer = variable_get('edgecast_customer');
          $ec_api_token = variable_get('edgecast_token');
          $arr = array(
            'Key' => $token['pkey'],
            'TokenParameter' => $ecParms,
          );

          $fp = fopen('php://temp/maxmemory:256000', 'w');
          if (!$fp) {
            die('could not open temp memory data');
          }
          fwrite($fp, json_encode($arr));
          fseek($fp, 0);
          $ch = curl_init('https://api.edgecast.com/v2/mcc/token/encrypt');
          curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
          curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
          curl_setopt($ch, CURLOPT_PUT, 1);
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_INFILE, $fp);
          curl_setopt($ch, CURLOPT_INFILESIZE, strlen(json_encode($arr)));
          curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Authorization: TOK:' . $ec_api_token,
            'Accept: application/json',
            'Content-Type: application/json',
            'Host: api.edgecast.com',
          ));

          $output = json_decode(curl_exec($ch));
        } catch (Exception $e) {
          watchdog('edgecast_token', 'TokenAuth Webservice Error: ' . $e);
          drupal_set_message(t('TokenAuth Webservice Error: ') . $e, 'error');
          curl_close($ch);
          fclose($fp);
          return FALSE;
        }

        curl_close($ch);
        fclose($fp);
        return $output->Token;

        break;
    }
  }
  else {
    drupal_set_message('Please setup ECToken Authentication method first.', 'error');
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function edgecast_token_theme() {
  return array(
    'edgecast' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_token_info(). 
 * This hook will register token tokenauth underneath the new token set called edgecast_token.
 *
function edgecast_token_token_info() {
  $types['edgecast'] = array(
    'name' => t('EdgeCast CDN Tokens'),
    'description' => t('Tokens for EdgeCast CDN Network')
  );

  //EdgeCast Specific Tokens
  $edgecast['tokenauth'] = array(
    'name' => t('Authentication Token'),
    'description' => t('Encrypted EdgeCast Token Auth String')
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'edgecast' => $edgecast,
    ),
  );
}

/**
 * Implements hook_tokens(). 
 * This hook will operate the edgecast tokens and replace it with values.
 *
function edgecast_token_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'edgecast') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'tokenauth':
          $replacements[$original] = edgecast_token_ectoken_gen();
          break;
      }
    }
  }
  return $replacements;
}

/**
 * This is the creating the special Link module widget type to create Tokenized links
 *

/**
 * Implements hook_field_widget_info().
 *
function edgecast_token_field_widget_info() {
  return array(
    'ectokenauth_link' => array(
      'label' => t('EC Token Auth Link'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_NONE,
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 *
function edgecast_token_field_widget_settings_form($field, $instance) {
  $form = array();
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $form['edgecast_token_link_token'] = array(
    "#weight" => -10,
    '#type' => 'radios',
    '#title' => t('Tokenize Link'),
    '#options' => array(
      EDGECAST_LINK_TOKEN => t('Apply EC Token.'),
      EDGECAST_LINK_NOTOKEN => t('Do not Tokenize.'),
    ),
    '#default_value' => isset($settings['edgecast_token_link_token']) ? $settings['edgecast_token_link_token'] : EDGECAST_LINK_NOTOKEN,
    '#description' => t('This will create an EdgeCast encrypted token that will be added to the end of the URL as a query string'),
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 *
function edgecast_token_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#field' => array(
      'widget' => array(
        'settings' => array(
          'edgecast_token_link_token' => isset($instance['widget']['settings']['edgecast_token_link_token']) ? $instance['widget']['settings']['edgecast_token_link_token'] : EDGECAST_LINK_NOTOKEN,
        ),
      ),
    ),
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implements hook_element_info().
 *
function edgecast_token_element_info() {
  $elements = array();
  $elements['edgecast_token_link'] = array(
    '#input' => TRUE,
    '#process' => array('edgecast_token_field_process'),
    '#theme' => 'edgecast',
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Create element array.
 *
function edgecast_token_field_process($element, $form_state, $complete_form) {
  /*$element      = link_field_process($element, $form_state, $complete_form);
  $urls_allowed = $element['#field']['widget']['settings']['urls_allowed'];
  $urls_search = $element['#field']['widget']['settings']['urls_search'];

  if (($urls_allowed != ADVANCED_LINK_EXTERNAL) && advanced_link_autocomplete_access()) {
    $element['url']['#autocomplete_path'] = 'advanced_link/autocomplete/' . $urls_search;
  }

  if (isset($element['#field']['widget']['settings']['default_titles']) && $element['#field']['widget']['settings']['default_titles']) {
    $element['title']['#type'] = 'select';
    $options = advanced_link_extract_allowed_values($element['#field']['widget']['settings']['default_titles']);
    $element['title']['#options'] = $options;
  }

  $element['url']['#element_validate'] = array('advanced_link_widget_url_validate');
  $element['url']['#field']['widget']['urls_allowed'] = $urls_allowed;
  $element['url']['#field']['widget']['urls_filter'] = $element['#field']['widget']['settings']['urls_filter'];
  *
  return $element;
}

/**
 * Extracts textarea values to array
 *
function edgecast_token_extract_cdn_values($values) {
  $values_as_array = explode("\n", $values);
  $result_values = array('' => ' ');
  foreach ($values_as_array as $title) {
    $result_values[trim(htmlentities($title))] = trim(htmlentities($title));
  }
  return $result_values;
}
 * 
 * 
 */