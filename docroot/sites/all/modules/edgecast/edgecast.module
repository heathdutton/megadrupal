<?php

/**
 * @file
 * Interfaces with the Edgecast CDN API.
 *
 * Responds to Drupal node changes based on hooks from other modules.
 */

/**
 * Implements hook_permission().
 */
function edgecast_permission() {
  return array(
    'administer edgecast' => array(
      'title' => 'Administer Edgecast',
      'description' => t('Configure the customer account.'),
    ),
    'purge edgecast' => array(
      'title' => 'Purge Edgecast',
      'description' => t('Manually specify paths to clear from the CDN cache.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function edgecast_menu() {
  $items = array();

  $items['admin/config/development/edgecast'] = array(
    'title' => 'Edgecast',
    'description' => 'Configure your CDN integration and force clear the cache.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgecast_selective_purge_form'),
    'access arguments' => array('administer edgecast'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -5,
  );

  $items['admin/config/development/edgecast/api'] = array(
    'title' => 'Edgecast API Settings',
    'description' => 'Configure your CDN integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgecast_admin_settings'),
    'access arguments' => array('administer edgecast'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/development/edgecast/purge'] = array(
    'title' => 'Edgecast Purge',
    'description' => 'Force clear the CDN cache.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgecast_selective_purge_form'),
    'access arguments' => array('purge edgecast'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -5,
  );

  return $items;
}

/**
 * Build form for mass purging.
 *
 * Provide the facility to bulk delete known paths without editing content
 * individually.
 */
function edgecast_selective_purge_form() {
  $form = array();

  $form['paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Paths to Purge'),
    '#rows' => 6,
    '#description' => t('One path per line. Do not include the domain. For example: node/1234. To purge the entire domain enter *.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Purge',
  );

  return $form;
}

/**
 * Purge all paths manually entered.
 */
function edgecast_selective_purge_form_submit($form_id, $form_state) {
  $submitted_paths = explode("\n", $form_state['values']['paths']);
  $paths = array();

  // Create a purge request for each path.
  foreach ($submitted_paths as $path) {
    $paths[] = trim($path);
  }

  edgecast_purge($paths);
}

/**
 * Create the admin settings form.
 */
function edgecast_admin_settings() {
  $form = array();

  $form['edgecast_customer'] = array(
    '#type' => 'textfield',
    '#title' => t('Edgecast Account ID'),
    '#size' => 4,
    '#maxlength' => 4,
    '#default_value' => variable_get('edgecast_customer', ''),
    '#description' => t('The Edgecast account id (4 characters).'),
  );

  $form['edgecast_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Edgecast Token'),
    '#default_value' => variable_get('edgecast_token', ''),
    '#description' => t('The Edgecast token is used to make authenticated requests to clear the CDN cache. Find the token after logging in to my.edgecast.com and accessing "My Settings".'),
  );

  $form['edgecast_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Path'),
    '#default_value' => variable_get('edgecast_path', ''),
    '#description' => t('The default path used to clear the Edgecast CDN cache. No trailing slash.'),
  );

  return system_settings_form($form);
}

/**
 * Add a path to the purge queue
 */
function edgecast_purge_queue($path = '') {
  static $purges = array();

  if ($path) {
    $purges[] = $path;
    return true;
  } else {
    return $purges;
  }
}

/**
 * Execute the purge queue
 * Connect to the Edgecast API.
 */
function edgecast_purge($paths) {
  $customer = variable_get('edgecast_customer', '');
  $token = variable_get('edgecast_token', '');

  // Ensure the CDN account is valid.
  if (empty($customer) || empty($token)) {
    drupal_set_message(t('Please define the Edgecast account settings in !settings_url.', array('!settings_url' => l(t('Edgecast API Settings'), 'admin/config/development/edgecast/api'))), 'error');
    return FALSE;
  }

  // Build up a list of the HTTP API requests to execute
  $mh = curl_multi_init();
  $fp = array();
  $curl_queue_handles = array();

  foreach($paths as $id => $path) {
    $arr = array(
      'MediaPath' => $path,
      'MediaType' => 8,
    );

    $fp[$id] = fopen('php://temp/maxmemory:256000', 'w');
    if (!$fp[$id]) {
      die('could not open temp memory data');
    }
    fwrite($fp[$id], json_encode($arr));
    fseek($fp[$id], 0);

    $curl_queue_handles[$id] = curl_init();
    curl_setopt($curl_queue_handles[$id], CURLOPT_URL, 'https://api.edgecast.com/v2/mcc/customers/' . $customer . '/edge/purge');
    curl_setopt($curl_queue_handles[$id], CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl_queue_handles[$id], CURLOPT_SSL_VERIFYHOST, FALSE);
    curl_setopt($curl_queue_handles[$id], CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($curl_queue_handles[$id], CURLOPT_PUT, 1);
    curl_setopt($curl_queue_handles[$id], CURLOPT_INFILE, $fp[$id]);
    curl_setopt($curl_queue_handles[$id], CURLOPT_INFILESIZE, strlen(json_encode($arr)));
    curl_setopt($curl_queue_handles[$id], CURLOPT_HTTPHEADER, array(
      'Authorization: TOK:' . $token,
      'Accept: application/json',
      'Content-Type: application/json',
      'Host: api.edgecast.com',
    ));

    curl_multi_add_handle($mh, $curl_queue_handles[$id]);
  }

  // Execute all the purge requests at once
  $active = null;
  do {
    curl_multi_exec($mh, $active);
  } while ($active > 0);

  return true;
}

/**
 * React to Expire module cache clearing hook
 */
function edgecast_expire_cache($urls, $wildcards, $object_type, $object) {
  edgecast_purge($urls);
}
