<?php

/**
 * @file
 * Scrollbar module help, settings and configuration menu
 */

/**
 * Implements hook_help().
 */
function scrollbar_help($path, $arg) {
  switch ($path) {
    case 'admin/config/user-interface/scrollbar':

      $basepath = libraries_get_path('jscrollpane');

      $installed_1 = file_exists($basepath . '/jquery.jscrollpane.min.js');
      $installed_2 = file_exists($basepath . '/jquery.jscrollpane.css');

      $download_link = "<p>" . t('Please go to !download-link and download this file into libraries/jscrollpane folder.',
        array(
          '!download-link' => l(t('main jScrollPane page'), "http://jscrollpane.kelvinluck.com/index.html",
          array(
            'attributes' => array(
              'target' => '_blank',
            ),
            'fragment' => 'download')
          ),
        )
      ) . "</p>";

      $missing_1 = '<div class="messages error">';
      $missing_1 .= "<p>" . t('<em>jquery.jscrollpane.min.js is missing</em>') . "</p>";
      $missing_1 .= $download_link;
      $missing_1 .= "</div>";

      $missing_2 = '<div class="messages error">';
      $missing_2 .= "<p>" . t('<em>jquery.jscrollpane.css is missing</em>') . "</p>";
      $missing_2 .= $download_link;
      $missing_2 .= "</div>";

      $lorem_ipsum = '<div class=demo-class style="overflow:auto; text-align:right; padding-right:20px; height:200px; width:200px;">';
      $lorem_ipsum .= "<p>" . t('Lorem Ipsum demo content') . "<br />";
      $lorem_ipsum .= t('Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium 
      doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto 
      beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut 
      fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, 
      qui dolorem ipsum quia dolor sit amet, consectetur.');
      $lorem_ipsum .= "</div>";

      if ($installed_1 && $installed_2) {
        return $lorem_ipsum;
      }
      elseif (!$installed_1 && $installed_2) {
        return $missing_1;
      }
      elseif ($installed_1 && !$installed_2) {
        return $missing_2;
      }
      elseif (!$installed_1 && !$installed_2) {
        return $missing_1 . "<br />" . $missing_2;
      }
  }
}

/**
 * Implements hook_init().
 */
function scrollbar_init() {

  // Check if necessary files exist.
  $basepath = libraries_get_path('jscrollpane');
  $basepath_mod = drupal_get_path('module', 'scrollbar');

  $installed_1 = file_exists($basepath . '/jquery.jscrollpane.min.js');
  $installed_2 = file_exists($basepath . '/jquery.jscrollpane.css');
  $installed_3 = file_exists($basepath . '/jquery.mousewheel.js');
  $installed_4 = file_exists($basepath . '/mwheelIntent.js');

  // Add mousewheel and mwheelIntent if they exist.
  if ($installed_3) {
    drupal_add_js($basepath . '/jquery.mousewheel.js');
  }
  if ($installed_4) {
    drupal_add_js($basepath . '/mwheelIntent.js');
  }

  // Add required CSS for scrollbar.
  if ($installed_2) {
    drupal_add_css($basepath . '/jquery.jscrollpane.css');
  }

  if ($installed_1) {
    // Add jquery ui library from Drupal core.
    drupal_add_library('system', 'ui');

    // Add jquery.jscrollpane.min.js.
    drupal_add_js($basepath . '/jquery.jscrollpane.min.js');

    // Create settings for scrollbar.js.
    drupal_add_js(
      array(
        'scrollbar' =>
        array(
          'element'                   => variable_get('scrollbar_element', '.field-name-body'),
          'showArrows'                => variable_get('scrollbar_showArrows', TRUE),
          'mouseWheelSpeed'           => variable_get('scrollbar_mouseWheelSpeed', 10),
          'arrowButtonSpeed'          => variable_get('scrollbar_arrowButtonSpeed', 10),
          'arrowRepeatFreq'           => variable_get('scrollbar_arrowRepeatFreq', 100),
          'horizontialGutter'         => variable_get('scrollbar_horizontialGutter', 4),
          'verticalGutter'            => variable_get('scrollbar_verticalGutter', 4),
          'verticalDragMinHeight'     => variable_get('scrollbar_verticalDragMinHeight', 0),
          'verticalDragMaxHeight'     => variable_get('scrollbar_verticalDragMaxHeight', 99999),
          'verticalDragMinWidth'      => variable_get('scrollbar_verticalDragMinWidth', 0),
          'verticalDragMaxWidth'      => variable_get('scrollbar_verticalDragMaxWidth', 99999),
          'horizontialDragMinHeight'  => variable_get('scrollbar_horizontialDragMinHeight', 0),
          'horizontialDragMaxHeight'  => variable_get('scrollbar_horizontialDragMaxHeight', 99999),
          'horizontialDragMinWidth'   => variable_get('scrollbar_horizontialDragMinWidth', 0),
          'horizontialDragMaxWidth'   => variable_get('scrollbar_horizontialDragMaxWidth', 99999),
          'arrowScrollOnHover'        => variable_get('scrollbar_arrowScrollOnHover', TRUE),
          'verticalArrowPositions'    => variable_get('scrollbar_verticalArrowPositions', 'split'),
          'horizontialArrowPositions' => variable_get('scrollbar_horizontialArrowPositions', 'split'),
          'autoReinitialise'          => variable_get('scrollbar_autoReinitialise', FALSE),
          'autoReinitialiseDelay'     => variable_get('scrollbar_autoReinitialiseDelay', 500),
        ),
      ), 'setting'
    );

    // Add scrollbar.js with above settings.
    drupal_add_js($basepath_mod . '/scrollbar.js');
  }
}

/**
 * Implements hook_menu().
 */
function scrollbar_menu() {
  $items['admin/config/user-interface/scrollbar'] = array(
    'title' => 'Scrollbar',
    'description' => 'Adjust the settings of the scrollbar module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scrollbar_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'scrollbar.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Function to validate a positive integer value or zero value.
 */
function scrollbar_validate_integer_positive_zero($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    form_error($element, t('%name must be a positive integer or zero.', array('%name' => $element['#title'])));
  }
}
