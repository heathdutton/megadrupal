<?php
/**
 * @file
 * Creates 'Send to Kindle' button for file links.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Validates the Kindle email in the user profile. The email must be valid as
 * an email and for the kindle.com domain.
 *
 * Calls the user_send_file_to_kindle_form_validate() function, below.
 */
function send_file_to_kindle_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'send_file_to_kindle_form_validate';
}

/**
 * Form validation handler for user_profile_form().
 *
 * @see user_profile_form_submit()
 *
 * Validates the Kindle email field. Is called by
 * send_file_to_kindle_form_user_profile_form_alter().
 */
function send_file_to_kindle_form_validate($form, &$form_state) {
  $submitted_email = $form_state['values']['send_file_to_kindle'][LANGUAGE_NONE][0]['value'];
  $is_good = TRUE;

  // Get the domain string and convert to lower case.
  $var = explode('@', $submitted_email);
  $domain = drupal_strtolower(array_pop($var));

  // If it's not empty and not a valid email or the domain isn't kindle.com,
  // fail.
  if ($submitted_email != '') {
    if (!valid_email_address($submitted_email) || ($domain != 'kindle.com')) {
      // Change the line below to TRUE to test with non-Kindle email addresses.
      $is_good = FALSE;
    }
  }

  if (!$is_good) {
    form_set_error('send_file_to_kindle', t('Your Kindle email address is invalid. It must be a valid email and be for the domain kindle.com. You do not have to provide an email address.'));
  }
}

/**
 * Takes a string of current file in filefield's extensions.
 *
 * Returns true if it is a kindle-supported extension.
 *
 * @param string $file_name.
 *   A string that is the file name of the file to be sent to user's Kindle.
 */
function send_file_to_kindle_supported_extension($file_name) {
  $good_for_kindle = FALSE;
  $name_array = pathinfo($file_name);
  $ext = $name_array['extension'];
  $supported_types = array(
    'doc',
    'docx',
    'html',
    'htm',
    'rtf',
    'txt',
    'jpeg',
    'jpg',
    'mobi',
    'azw',
    'gif',
    'png',
    'bmp',
    'pdf',
  );
  if (in_array($ext, $supported_types)) {
    $good_for_kindle = TRUE;
  }

  return $good_for_kindle;
}

/**
 * Implements hook_field_formatter_info().
 *
 * Creates field formatter information that appears in display settings
 * of the content type.
 */
function send_file_to_kindle_field_formatter_info() {
  $info = array(
    'kindlebutton' => array(
      'label' => t('Link with Send to Kindle button') ,
      'field types' => array(
        'file',
      ) ,
      'description' => t('Displays Send to Kindle button if file type is for Kindle.') ,
    ) ,
  );
  return $info;
}

/**
 * Send_file_to_kindle_file_link().
 *
 * Creates the file link. Copied and modified from theme_file_link() in
 * core file module.
 */
function send_file_to_kindle_file_link($file) {

  // Have to set $icon_directory to null for compatibility with
  // theme_file_link(). Don't know why, but it needs to do this to work.
  $icon_directory = NULL;
  $url = file_create_url($file->uri);
  $icon = theme('file_icon', array(
    'file' => $file,
    'icon_directory' => $icon_directory,
  ));

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
    ) ,
  );

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }
  return '<span class="file">' . $icon . ' ' . l($link_text, $url, $options) . '</span>';
}

/**
 * Implements hook_field_formatter_view().
 *
 * If the file being processesed is 'kindlebutton', this function gets
 * a bunch of information from the file being processed and adds it to
 * the formatter. Essentially, this creates the new format.
 */
function send_file_to_kindle_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'kindlebutton':
      foreach ($items as $delta => $item) {
        global $base_url;
        $parse = parse_url($base_url);
        $from_email = 'kindlemail@' . $parse['host'];
        $file_name = $item['filename'];
        $file_object = file_load($item['fid']);
        $params = array(
          'attachment' => $file_object,
        );
        $link_markup = send_file_to_kindle_file_link($file_object);
        $current_user = user_uid_optional_load();
        $kindle_email = NULL;
        if (isset($current_user->send_file_to_kindle[LANGUAGE_NONE][0]['safe_value'])) {
          $kindle_email = $current_user->send_file_to_kindle[LANGUAGE_NONE][0]['safe_value'];
        }
        if (send_file_to_kindle_supported_extension($file_name)) {
          $good_file = TRUE;
        }
        else {
          $good_file = FALSE;
        }
        $button_form_array = send_file_to_kindle_button($kindle_email, $params, $from_email);
        $element[$delta] = array(
          '#theme' => 'send_file_to_kindle_kindlebutton',
          '#linkmarkup' => $link_markup,
          '#kindlefile' => $good_file,
          '#buttonform' => $button_form_array,
          '#fileobject' => $file_object,
        );
      };
      break;
  }
  return $element;
}

/**
 * Implements hook_mail().
 *
 * Creates email message. Called in drupal_mail(), below, in the submit handler.
 */
function send_file_to_kindle_mail($key, &$message, $params) {
  $language = $message['language']->name;
  $vars = array();
  switch ($key) {

    // Switching on $key lets you create variations of the email based on it.
    // Also, $vars is required even if not used.
    case 'key':
      $message['subject'] = t('Kindle Document', $vars, array(
        'langcode' => $language,
      ));

      // The email body is here, inside the $message['plaintext'] array element.
      $message['params']['plain'] = TRUE;
      $message['params']['plaintext'] = t('Attached is your document');

      // Add attachment.
      if (isset($params['attachment'])) {
        $message['params']['attachments'][] = $params['attachment'];
      }
      break;
  }
}

/**
 * Implements hook_theme().
 *
 * Creates variables for send_file_to_kindle_kindlebutton.tpl.php.
 */
function send_file_to_kindle_theme() {
  return array(
    'send_file_to_kindle_kindlebutton' => array(
      'template' => 'send_file_to_kindle_kindlebutton',
      'variables' => array(
        'linkmarkup' => NULL,
        'kindlefile' => NULL,
        'buttonform' => NULL,
        'fileobject' => NULL,
      ) ,
    ) ,
  );
}

/**
 * Form constructor for the file link form.
 *
 * Send_file_to_kindle_form() creates the initial form array.
 *
 * @ingroup forms
 */
function send_file_to_kindle_button_form() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send to Kindle'),
  );
  return $form;
}

/**
 * Send_file_to_kindle_kindlebutton() returns button markup.
 *
 * It calls kindle_form, passing parameters to it for the
 * drupal_mail() function. It then returns the $form array.
 * The form in this case is the 'send to kindle' button next
 * to the document icon.
 */
function send_file_to_kindle_button($to_mail, $parameters, $from_mail) {
  $vars_array = array(
    $to_mail,
    $parameters,
    $from_mail,
  );
  $the_form = drupal_get_form('send_file_to_kindle_button_form', $vars_array);
  return $the_form;
}

/**
 * Implements hook_form_submit().
 *
 * Kindle_form_submit() is the submit handler
 * for the 'send to kindle' form button.
 *
 * It checks for valid input data and if everything is
 * kosher, sends the email
 */
function send_file_to_kindle_button_form_submit($form, &$form_state) {
  $email = $form_state['build_info']['args'][0][0];
  $params = $form_state['build_info']['args'][0][1];
  $from_email = $form_state['build_info']['args'][0][2];
  if (isset($email)) {
    $sent = drupal_mail('send_file_to_kindle', 'key', $email, language_default(), $params, $from_email, TRUE);
    if (!$sent) {
      drupal_set_message(t('An error occurred in sending your document.'), 'error');
    }
    else {
      drupal_set_message(t('The document has been sent to your Kindle'));
    }
  }
  else {
    drupal_set_message(t('The site cannot send your document. You have not set your Kindle email address in your user profile.'), 'error');
  }
}
