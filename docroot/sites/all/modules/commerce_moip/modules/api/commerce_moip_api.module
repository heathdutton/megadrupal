<?php

/**
 * @file
 * Implements MoIP API Integration payment method for Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_moip_api_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['moip_api'] = array(
    'base' => 'commerce_moip_api',
    'title' => t('MoIP API Integration'),
    'short_title' => t('MoIP'),
    'description' => t('MoIP API Integration'),
    'terminal' => FALSE,
    'offsite' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_moip_api_settings_form($settings = NULL) {
  $settings = (array) $settings + array(
    'token' => '',
    'key' => '',
    'server' => 'sandbox',
  );

  $form = array();
  $form['token'] = array(
    '#type' => 'textfield',
    '#title' => t('MoIP token'),
    '#default_value' => $settings['token'],
    '#required' => TRUE,
  );
  $form['key'] = array(
    '#type' => 'textfield',
    '#title' => t('MoIP key'),
    '#default_value' => $settings['key'],
    '#required' => TRUE,
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('MoIP server'),
    '#options' => array(
      'sandbox' => ('Sandbox - use for testing, requires a MoIP Sandbox account'),
      'production' => ('Production - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );

  return $form;
}

/**
 * Builds a MoIP API Integration form from an order object.
 *
 * @return
 *   A renderable form array.
 */
function commerce_moip_api_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = $payment_method['settings'];

  // Return an error if the enabling action's settings haven't been configured.
  if (empty($settings['token']) || empty($settings['key'])) {
    drupal_set_message(t('MoIP API Integration is not configured for use.'), 'error');
    return array();
  }

  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $amount_integer = $wrapper->commerce_order_total->amount->value();
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = round(commerce_currency_amount_to_decimal($amount_integer, $currency_code), 2);
  $reason = t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE)))));

  // Build the parameters array.
  $params = array(
    'IdProprio' => $order->order_id,
    'URLRetorno' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'URLNotificacao' => commerce_moip_nasp_url($payment_method['instance_id']),
  );

  // Add address so users don't have to type this twice.
  $address_map = array(
    'Logradouro' => 'thoroughfare',
    'Bairro' => 'premise',
    'Cidade' => 'locality',
    'Estado' => 'administrative_area',
    'CEP' => 'postal_code',
    'Pais' => 'country',
  );

  $address = array();
  foreach ($address_map as $key => $value) {
    if (isset($wrapper->commerce_customer_billing->commerce_customer_address->$value)) {
      $address[$key] = $wrapper->commerce_customer_billing->commerce_customer_address->$value->value();
    }
  }

  $params['Pagador'] = array(
    'Nome' => $wrapper->commerce_customer_billing->commerce_customer_address->name_line->value(),
    'Email' => $order->mail,
    'EnderecoCobranca' => $address,
  );

  // Build the XML for the request.
  $xml = commerce_moip_api_build_request_xml($reason, $amount, $params);
  // Get URL for appropriate environment.
  $url = commerce_moip_api_server_url($settings['server']);

  // Make an API request and get the response.
  if ($response = commerce_moip_api_request($url, $settings['token'], $settings['key'], $xml)) {
    if ((string) $response->Status == 'Sucesso') {
      $redirect_url = commerce_moip_api_server_url($settings['server'], 'redirect') . '?token=' . (string) $response->Token;
      drupal_goto($redirect_url);
    }
    else {
      // @todo Log errors.
    }
  }
}

/**
 * Payment method callback: process an NASP.
 */
function commerce_moip_api_moip_nasp_process($order, $payment_method, &$nasp) {
  // Discard NASP if payment status is no recognized.
  if (!in_array($nasp['status_pagamento'], array_keys(commerce_moip_statuses()))) {
    return FALSE;
  }

  // If this is a prior authorization capture NASP for which we've already
  // created a transaction...
  if (!empty($nasp['cod_moip']) && $auth_nasp = commerce_moip_nasp_load($nasp['cod_moip'])) {
    // Load the prior NASP's transaction and update that with the capture values.
    $transaction = commerce_payment_transaction_load($auth_nasp['transaction_id']);
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('moip_api', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }

  $transaction->remote_id = $nasp['cod_moip'];
  $transaction->amount = $nasp['valor'];
  // MoIP supports only Brazilian Reais.
  $transaction->currency_code = 'BRL';
  $transaction->payload[REQUEST_TIME] = $nasp;

  // Set the transaction's statuses based on the NASP's status_pagamento.
  $transaction->remote_status = $nasp['status_pagamento'];

  switch ($nasp['status_pagamento']) {
    case COMMERCE_MOIP_STATUS_AUTHORIZED:
    case COMMERCE_MOIP_STATUS_INITIALIZED:
    case COMMERCE_MOIP_STATUS_PRINTED:
    case COMMERCE_MOIP_STATUS_PENDING:
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      break;

    case COMMERCE_MOIP_STATUS_COMPLETED:
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      break;

    case COMMERCE_MOIP_STATUS_CANCELED:
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      break;
  }

  $transaction->message = commerce_moip_statuses($nasp['status_pagamento']);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  $nasp['transaction_id'] = $transaction->transaction_id;

  watchdog('commerce_moip_api', 'NASP processed for Order @order_number with ID @cod_moip.', array('@cod_moip' => $nasp['cod_moip'], '@order_number' => $order->order_number), WATCHDOG_INFO);
}

/**
 * Make a MoIP API request.
 *
 * @param $url
 *   URL for the request.
 * @param $token
 *   String, action. E.g. 'INSERT_ORDER'.
 * @param $xml
 *   XML with data to send.
 * @return
 *   Array with response or FALSE in case of error.
 */
function commerce_moip_api_request($url, $token, $key, $xml) {
  // Log request.
  watchdog('commerce_moip_api', "Request URL: %url. Request XML: %xml", array('%url' => $url, '%xml' => $xml));

  // Try to initialize cURL. If it fails, return FALSE.
  $curl = curl_init();
  if ($curl === FALSE) {
    watchdog('commerce_moip_api', "Error initializing cURL. Error: %number - %error", array('%number' => curl_errno($curl), '%error' => curl_error($curl)), WATCHDOG_ERROR);
    return FALSE;
  }

  // Add credentials to HTTP header.
  $header = array(
    'Authorization: Basic ' . base64_encode($token . ':' . $key),
  );

  // Post data to Moip through a cURL session.
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
  curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/4.0');
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);

  // Make cURL request.
  $response_xml = curl_exec($curl);

  if ($response_xml === FALSE) {
    watchdog('commerce_moip_api', "Error in cURL request. Error: %number - %error", array('%number' => curl_errno($curl), '%error' => curl_error($curl)), WATCHDOG_ERROR);
    return FALSE;
  }
  
  // Close cURL.
  curl_close($curl);

  // Log response.
  watchdog('commerce_moip_api', "Response: %response", array('%response' => $response_xml));

  return commerce_moip_api_parse_response_xml($response_xml);
}

/**
 * Given reason and parameters array, return a xml string ready
 * for making a MoIP API request.
 *
 * @param $reason
 *   Payment reason.
 * @param $params
 *   Array with parameters for the request.
 * @return
 *   XML string representating the request.
 */
function commerce_moip_api_build_request_xml($reason, $amount, $params) {
  $xml_string = <<<XMLSTR
    <EnviarInstrucao>
      <InstrucaoUnica>
        <Razao>{$reason}</Razao>
        <Valores>
           <Valor moeda="BRL">{$amount}</Valor>
        </Valores>
      </InstrucaoUnica>
    </EnviarInstrucao>
XMLSTR;

  $xml = new SimpleXMLElement($xml_string);

  _commerce_moip_api_build_request_xml($xml->InstrucaoUnica, $params);

  $xml_string = $xml->asXML();

  // Remove XML declaration.
  return preg_replace('/<\?xml(.|\s)*?\?>/', '', $xml_string);
}

/**
 * Helper function for commerce_moip_api_build_request_xml().
 * 
 * Given SimpleXML Element and and associative array of parameters, build
 * 'InstrucaoUnica' children nodes. 
 *
 * @param $xml
 *   SimpleXMLElement for adding child nodes to.
 * @param $params
 *   Parameters array with data to add.
 */
function _commerce_moip_api_build_request_xml(SimpleXMLElement $xml, Array $params) {
  foreach ($params as $key => $val) {
    if (is_array($val)) {
      $child = $xml->addChild($key);
      _commerce_moip_api_build_request_xml($child, $val);
    }
    else {
      $xml->addChild($key, $val);
    }
  }
}

/**
 * Parse MoIP API response XML and return a SimpleXMLElement object
 * representing the response.
 */
function commerce_moip_api_parse_response_xml($response) {
  $xml = new SimpleXMLElement($response);
  return $xml->Resposta;
}

/**
 * Returns the HTML Integration POST URL to the specified MoIP server.
 *
 * @param $server
 *   Either 'sandbox' or 'production' indicating which server to get the URL for.
 * @param $type
 *   Either 'api' or 'redirect' indicating the purpose of the URL to return.
 *
 * @return
 *   The URL to use to submit requests to the MoIP API Integration server or to
 *   redirect user to.
 */
function commerce_moip_api_server_url($server, $type = 'api') {
  switch ($server) {
    case 'sandbox':
      $base = 'https://desenvolvedor.moip.com.br/sandbox/';
      break;
    case 'production':
      $base = 'https://www.moip.com.br/';
      break;
  }

  switch ($type) {
    case 'api':
      return $base . 'ws/alpha/EnviarInstrucao/Unica';
    case 'redirect':
      return $base . 'Instrucao.do';
  }
}
