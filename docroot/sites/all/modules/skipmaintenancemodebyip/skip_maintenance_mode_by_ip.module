<?php

/**
 * @file
 * Main code for skip_maintenance_mode_by_ip module.
 */
 
/*
 * Implements hook_form_alter().
 * 
 * Add 'Allowed IPs' fields to the maintenance mode settings page.
 */
function skip_maintenance_mode_by_ip_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {
    case 'system_site_maintenance_mode':
    
      // Add CSS.
      drupal_add_css(drupal_get_path('module', 'skip_maintenance_mode_by_ip') . '/skip_maintenance_mode_by_ip.css');
    
      $saved_ip = variable_get('skip_maintenance_mode_by_ip_ip', array());

      $form['maintenance_mode_skip_ip'] = array(
        '#type' => 'fieldset',
        '#title' => t('Allowed IP addresses'),
        '#prefix' => '<div id="checkboxes-div">',
        '#suffix' => '</div>',
        '#description' => t('Enter the IP addresses that can access the website while it is in maintenance mode without being logged in. <br />Use the <i>Description</i> field to (optionally) label the IP addresses. Emptying the <i>IP address</i> field will remove the intended IP/label set.'),
        );

      // Store number of IPs in hidden field 'num_fields' for later use.
      $form['maintenance_mode_skip_ip']['num_fields'] = array(
        '#type' => 'hidden',
        '#default_value' => count($saved_ip),
        );

      
      if(!empty($form_state['values']['addip'])) {
        // We're called by the 'Add another field' button.
        for($count = 0; $count <= $form_state['values']['num_fields']; $count++) {
          $form['maintenance_mode_skip_ip']['ip']['ipgroup_' . $count] = array(
            '#type' => 'fieldset',
            '#title' => t(''),
            '#attributes' => array(
              'class' => array('ipgroup'),
              ),
            );
        
          $form['maintenance_mode_skip_ip']['ip']['ipgroup_' . $count]['ip_' . $count] = array(
            '#type' => 'textfield',
            '#title' => t('IP address'),
            '#default_value' => !empty($form_state['values']['ip_' . $count]) ? $form_state['values']['ip_' . $count] : '',
            );
            
          $form['maintenance_mode_skip_ip']['ip']['ipgroup_' . $count]['label_' . $count] = array(
            '#type' => 'textfield',
            '#title' => t('Description'),
            '#default_value' => !empty($form_state['values']['label_' . $count]) ? $form_state['values']['label_' . $count] : '',
            );
        }
      $form['maintenance_mode_skip_ip']['num_fields']['#value'] = count($form['maintenance_mode_skip_ip']['ip']);
      }
      
      else {
        // Only run on initial page request
        for($count = 0; $count <= count($saved_ip); $count++) {
          $form['maintenance_mode_skip_ip']['ip']['ipgroup_' . $count] = array(
            '#type' => 'fieldset',
            '#title' => t(''),
            '#attributes' => array(
              'class' => array('ipgroup'),
              ),
            );

        $form['maintenance_mode_skip_ip']['ip']['ipgroup_' . $count]['ip_' . $count] = array(
            '#type' => 'textfield',
            '#title' => t('IP address'),
            '#default_value' => !empty($saved_ip[$count]['ip']) ? $saved_ip[$count]['ip'] : '',
            );
            
          $form['maintenance_mode_skip_ip']['ip']['ipgroup_' . $count]['label_' . $count] = array(
            '#type' => 'textfield',
            '#title' => t('Description'),
            '#default_value' => !empty($saved_ip[$count]['label']) ? $saved_ip[$count]['label'] : '',
            );           
        }
      $form['maintenance_mode_skip_ip']['num_fields']['#value'] = $count;
      }

      $form['maintenance_mode_skip_ip']['addip'] = array(
        '#type' => 'button',
        '#value' => t('Add another field'),
        '#ajax' => array(
          'callback' => 'skip_maintenance_mode_by_ip_add_another',
          'wrapper' => 'checkboxes-div',
          'method' => 'replace',
          'effect' => 'fade',
          ),
        );
        
      array_unshift ($form['#submit'], 'skip_maintenance_mode_by_ip_settings_form_submit');      
      break;
  }
}

/**
 * Submit handler for maintenance mode settings form.
 *
 * Save IP addresses to the variable table.
 */
function skip_maintenance_mode_by_ip_settings_form_submit($form, &$form_state) {
  $result = array();
  for($count = 0; $count < $form_state['values']['num_fields']; $count++) {
    if(!empty($form_state['values']['ip_' . $count])) {
      $result[] = array(
        'ip' => $form_state['values']['ip_' . $count],
        'label' => $form_state['values']['label_' . $count]
        );
    }
  }
  variable_set('skip_maintenance_mode_by_ip_ip', $result);
}

/**
 * #ajax callback for 'add another' button
 * Add another IP field to the form
 */
function skip_maintenance_mode_by_ip_add_another($form, $form_state) {
  return $form['maintenance_mode_skip_ip'];
}

/**
 * Implements hook_menu_site_status_alter().
 *
 * Allow access to the site even if site is in offline mode provided the 
 * visitors IP is in the list of allowed IP's.
 */
 function skip_maintenance_mode_by_ip_menu_site_status_alter(&$menu_site_status, $path) {   
  if($menu_site_status == MENU_SITE_OFFLINE) {
    $saved_ip = variable_get('skip_maintenance_mode_by_ip_ip', array());
    
    $lookup = array();
    foreach($saved_ip as $si) {
      $lookup[] = $si['ip'];
    }  
  
    if(FALSE !== ($ip_address = skip_maintenance_mode_by_ip_getClientIP())) {
      if(in_array($ip_address, $lookup)) {
        $menu_site_status = MENU_SITE_ONLINE;
        drupal_set_message(t('Operating in maintenance mode.'));
      }
    }
  }
}


/**
 * Helper function.
 * Try to get client's IP address.
 */
function skip_maintenance_mode_by_ip_getClientIP(){
  if (array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER)) {
    return  $_SERVER["HTTP_X_FORWARDED_FOR"];
  }
  elseif(array_key_exists('REMOTE_ADDR', $_SERVER)) { 
    return $_SERVER["REMOTE_ADDR"];
  }
  elseif(array_key_exists('HTTP_CLIENT_IP', $_SERVER)) {
    return $_SERVER["HTTP_CLIENT_IP"]; 
  } 
  return FALSE;
}
