<?php
/**
 * @file
 * Module file for watchcat.
 */


/**
 * Implements hook_views_api().
 */
function watchcat_views_api() {
  return array(
    'api' => 3.0,
  );
}

/**
 * Implements hook_entity_info().
 */
function watchcat_entity_info() {
  return array(
    'watchcat' => array(
      'label' => t('Watchcat'),
      'controller class' => 'EntityAPIController',
      'base table' => 'watchcat',
      'entity keys' => array(
        'id' => 'wid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'watchcat_access',
    ),
  );
}

/**
 * Implements hook_permission
 */
function watchcat_permission() {
  $permissions = array();

  $permissions['view own watchcat entities'] = array(
    'title' => t('View own watchcat entries'),
  );
  $permissions['view any watchcat entity'] = array(
    'title' => t('View any watchcat entries'),
    'restrict access' => TRUE,
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function watchcat_menu() {
  $items['watchcat/%entity_object'] = array(
    'title callback' => 'watchcat_page_title',
    'title arguments' => array(1),
    'page callback' => 'watchcat_view_page',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'watchcat', 1),
    'load arguments' => array('watchcat'),
  );

  return $items;
}

/**
 * Access control for Watchcat.
 */
function watchcat_access($op, $entity, $account = NULL) {
  global $user;

  $account = isset($account) ? $account : $user;

  if ($op === 'view') {
    if (user_access('view any watchcat entity', $account)) {
      return TRUE;
    }
  }

  $access_results = module_invoke_all('watchcat_access', $entity, $op, $account);

  if (in_array(FALSE, $access_results, TRUE)) {
    return FALSE;
  }
  elseif (in_array(TRUE, $access_results, TRUE)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Title callback;
 *
 * @param $watchcat
 *   A fully loaded watchcat entity.
 */
function watchcat_page_title($watchcat) {
  return t('Details for WID !wid', array('!wid' => $watchcat->wid));
}

/**
 * Watchcat view page.
 *
 * @param $watchcat
 *   A fully loaded watchcat entity.
 */
function watchcat_view_page($watchcat) {
  // Load the user who made the log.
  $watchcat->user = user_load($watchcat->uid);
  $rows = array();

  $rows[] = array(
    array('data' => t('Verb'), 'header' => TRUE),
    check_plain($watchcat->verb),
  );

  $rows[] = array(
    array('data' => t('Date'), 'header' => TRUE),
    format_date($watchcat->created, 'custom', 'Y-m-d H:i:s'),
  );

  $rows[] = array(
    array('data' => t('User'), 'header' => TRUE),
    theme('username', array('account' => $watchcat->user)),
  );

  $rows[] = array(
    array('data' => t('Actor ID'), 'header' => TRUE),
    !empty($watchcat->actor_id) ? $watchcat->actor_id : '-',
  );

  $rows[] = array(
    array('data' => t('Object ID'), 'header' => TRUE),
    !empty($watchcat->object_id) ? $watchcat->object_id : '-',
  );

  $rows[] = array(
    array('data' => t('Target ID'), 'header' => TRUE),
    !empty($watchcat->target_id) ? $watchcat->target_id : '-',
  );

  $rows[] = array(
    array('data' => t('Title'), 'header' => TRUE),
    $watchcat->title,
  );

  $rows[] = array(
    array('data' => t('Summary'), 'header' => TRUE),
    $watchcat->summary,
  );

  $build['watchcat_table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
  );

  return $build;
}

/**
 * Inserts a watchcat log entity.
 *
 * @param $actor
 *   The log actor. I.E Who did soemthing?
 *   Usally this is the global $user.
 *
 * @param $verb
 *   What did the $actor do?
 *   Verbs are defined in hook_watchcat_verbs().
 *
 * @param $object
 *   @TODO: Document this param.
 *
 * @param $target
 *   @TODO: Document this param.
 *
 * @param $args
 *   @TODO: Document this param.
 *
 * @see hook_watchcat_verbs()
 * @see hook_watchcat_verbs_alter()
 */
function watchcat($actor, $verb, $object = NULL, $target = NULL, $args = array()) {
  global $user;

  $verbs = _watchcat_verb_info();

  // Split the verb.
  list($_module, $_verb) = explode(':', $verb, 2);

  // If the verb isn't defined, we can't do much more.
  if (!isset($verbs[$_module][$_verb])) {
    return;
  }

  $info = $verbs[$_module][$_verb];

  // Create the watchcat log entity.
  $entity = entity_create('watchcat', array());
  $entity->uid = $user->uid;
  $entity->created = time();
  $entity->verb = $verb;

  $tokens = token_info();

  foreach(array('actor', 'object', 'target') as $type) {
    if (!empty($info[$type])) {
      list(${$type . '_id'}) = entity_extract_ids($info[$type], ${$type});
      $entity->{$type . '_id'} = ${$type . '_id'};

      $token_types = array_keys($tokens['tokens'][$info[$type]]);

      $token_values = token_generate($info[$type], drupal_map_assoc($token_types), array($info[$type] => ${$type}), array('sanitize' => TRUE));

      foreach($tokens['tokens'][$info[$type]] as $token => $token_info) {
        if (!isset($args['!' . $type . ':' . $token]) && isset($token_values[$token])) {
          $args['!' . $type . ':' . $token] = $token_values[$token];
        }
        if (!isset($args['@' . $type . ':' . $token]) && isset($token_values[$token])) {
          $args['@' . $type . ':' . $token] = $token_values[$token];
        }
        if (!isset($args['%' . $type . ':' . $token]) && isset($token_values[$token])) {
          $args['%' . $type . ':' . $token] = $token_values[$token];
        }
      }
    }
  }

  $entity->title = format_string($info['title'], $args);
  $entity->summary = format_string($info['summary'], $args);

  // Save the watchcat log entity.
  entity_save('watchcat', $entity);
}

/**
 *
 */
function _watchcat_verb_info() {
  $verbs = &drupal_static('watchcat:verbs');

  if (!isset($verbs)) {
    // Load all verbs defined by hook_watchcat_verbs().
    foreach (module_implements('watchcat_verbs') as $module) {
      $verbs[$module] = module_invoke($module, 'watchcat_verbs');
    }

    // Let other modules alter the verbs.
    drupal_alter('watchcat_verbs', $verbs);
  }

  return $verbs;
}
