<?php

/**
 * @file
 * Basic functions for data synchronization between Drupal Commerce and WinBIZ application.
 */

// Define constants
define('WINBIZ_DEFAULT_TYPE', '20');
define('WINBIZ_SUCCESS', '#SUCCESS# ');
define('WINBIZ_FAILURE', '#FAILURE# ');
define('WINBIZ_EOLINE', '<br>');

/**
 * Implements hook_menu().
 */
function commerce_winbiz_menu() {
  $items = array();

  $items['winbiz/%'] = array(
    'title' => 'Orderimport',
    'description' => 'Callback used by WinBIZ application to communicate with the webshop',
    'page callback' => 'commerce_winbiz_command_router',
    'access callback' => 'commerce_winbiz_authorize_access',
    'access arguments' => array(1),
    'file' => 'commerce_winbiz.pages.inc',
  );

  $base = array(
    'page callback' => 'drupal_get_form',
    'access callback' => 'user_access',
    'access arguments' => array('administer winbiz settings'),
    'file' => 'commerce_winbiz.pages.inc',
  );
  
  $items['admin/commerce/config/winbiz'] = $base + array(
    'title' => 'WinBIZ settings',
    'description' => 'Administer configuration settings for Drupal Commerce WinBIZ module',
    'type' => MENU_NORMAL_ITEM,
    'page arguments' => array('commerce_winbiz_admin_settings_form'),
  );

  $items['admin/commerce/config/winbiz/general'] = $base + array(
    'title' => 'General settings',
    'description' => 'Administer general configuration settings for Drupal Commerce WinBIZ module',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page arguments' => array('commerce_winbiz_admin_settings_form'),
    'weight' => 1,
  );

  $items['admin/commerce/config/winbiz/payments'] = $base + array(
    'title' => 'Payment method settings',
    'description' => 'Administer payment related settings for Drupal Commerce WinBIZ module',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('commerce_winbiz_admin_payment_settings_form'),
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function commerce_winbiz_theme() {
  return array(
    'commerce_winbiz_payment_mapping_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function commerce_winbiz_permission() {
  $permissions = array(
    'synchronize winbiz' => array(
      'title' => t('Synchronize WinBIZ Data'),
      'description' => t('Synchronize the data of Drupal Commerce with WinBIZ application.'),
      'restrict access' => TRUE,
    ),
    'administer winbiz settings' => array(
      'title' => t('Administer WinBIZ settings'),
      'description' => t('Administer configuration settings for Drupal Commerce WinBIZ module.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_commerce_order_complete().
 */
function commerce_winbiz_commerce_checkout_complete($order) {
  // Persist a timestamp within orders for possible use in winbiz app.
  $order->data['commerce_winbiz_checkout_complete_timestamp'] = time();
  entity_save('commerce_order', $order);
}

/**
 * Access callback for winbiz page callback.
 */
function commerce_winbiz_authorize_access($token) {
  // @todo implement a better authentication using permission 'synchronize winbiz' in hook_menu
  if ($token == variable_get('commerce_winbiz_authstr', '')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Theme function for the payment method mapping settings.
 */
function theme_commerce_winbiz_payment_mapping_table($vars) {
  $form = $vars['form'];
  foreach ($form['table']['#rows'] as $id => $row) {
    foreach ($row as $key => $val) {
      $form['table']['#rows'][$id][$key] = ($key == 'payment_method') ? $val : drupal_render($form['fields']['commerce_winbiz_payment_' . $key . '_' . $id]);
    }
  }
  unset($form['fields']);
  return drupal_render_children($form);
}

/**
 * Function used to export Drupal Commerce orders.
 *
 * @param integer $oIDfrom
 * @param integer $oIDto
 * 
 * @return string semikolon separated data that WinBIZ can read. 
 */
function commerce_winbiz_export_orders($oid_from, $oid_to) {
  $return = '';
  // Get corresponding orders.
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'commerce_order')
    ->propertyCondition('order_id', array($oid_from, $oid_to), 'BETWEEN')
    ->propertyCondition('status', array('completed', 'pending'))
    ->execute();

  // Check if there are any results.
  if (empty($entities['commerce_order'])) {
    return '';
  }

  // Load all corresponding order objects.
  $orders = commerce_order_load_multiple(array_keys($entities['commerce_order']));

  // Collect data for all found orders.
  foreach ($orders as $oid => $order) {
    commerce_winbiz_debug($order, 'ORDER');

    // (Re-)initialize array
    $output = array();
    for ($i = 1; $i <= 159; $i++) {
      $output[$i] = '';
    }

    // Write basic order information.
    commerce_winbiz_write_order_data($order, $output);

    // Get customer info.
    $item = field_get_items('commerce_order', $order, 'commerce_customer_billing');
    $customer_id = $item[0]['profile_id'];
    // 20 Adressencode C (15)
    // @todo maybe make the address id field configurable/choose wether profile id or uid is used
    $output[20] = $order->uid;
    commerce_winbiz_write_customer_data($customer_id, $output);

    // Set code for invoicelayout in WinBIZ.
    $output[137] = variable_get('commerce_winbiz_invoice_layout', '');

    // Get Payment method.
    $split = explode('|', $order->data['payment_method']);
    $payment_method = $split[0];

    // 147 Zahlungsmethode
    $output[147] = commerce_winbiz_get_payment_method_code($payment_method);

    // Fetch all products of this order.
    $items = field_get_items('commerce_order', $order, 'commerce_line_items');
    // Initialize product counter new for every order.
    $output[48] = 0;

    // Loop through all products and write info.
    foreach ($items as $key => $val) {
      // One more.
      $output[48]++;
      // Get product data.
      commerce_winbiz_write_product_data($val['line_item_id'], $output);
      // Escape and print data if debug mode is on.
      commerce_winbiz_escape_export_data($output);
      // Provide a possibility to alter exported data within other modules.
      drupal_alter('commerce_winbiz_export_row', $output, $order);
      // Concatenate the returned string.
      $output_txt = str_replace(WINBIZ_EOLINE, "#chr(13)#", implode(';', $output));
      // Concat return product and order data in return value.
      $return .= $output_txt . WINBIZ_EOLINE;
    }

    // Add a line item for the online payment if an online payment method was used and it's enabled.
    if (variable_get('commerce_winbiz_payment_method_enabled_' . $payment_method, FALSE)) {
      for ($i = 1; $i <= 159; $i++) {
        $output[$i] = '';
      }
      commerce_winbiz_write_payment_data($order, $payment_method, $output);
      commerce_winbiz_escape_export_data($output);
      $output_txt = str_replace(WINBIZ_EOLINE, "#chr(13)#", implode(';', $output));
      $return .= $output_txt . WINBIZ_EOLINE;
    }
  } // End of order loop.

  // Replace umlauts etc.
  $return = htmlentities($return, ENT_QUOTES, 'UTF-8');
  // Transform all html entities back to normal (from OsCommerce Script).
  $return = html_entity_decode($return);
  $return .= WINBIZ_SUCCESS;
  commerce_winbiz_debug($return, 'RETURNSTRING');
  return $return;
}

/**
 * Function loads Drupal Commerce order data and packs it into $data.
 * 
 * @param entity $order
 * @param array $data
 */
function commerce_winbiz_write_order_data($order, &$data) {
  // Order Header
  $data[1] = $order->order_id . '<NEW>';
  $data[2] = WINBIZ_DEFAULT_TYPE;
  $orderdate = (!empty($order->data['commerce_winbiz_checkout_complete_timestamp'])) ? $order->data['commerce_winbiz_checkout_complete_timestamp'] : $order->created;
  $data[3] = strftime('%Y%m%d', $orderdate);
  $data[4] = strftime('%H:%M', $orderdate);
  // 5 Referenz
  $data[5] = $order->order_id;

  // Fetch orders total
  $item = field_get_items('commerce_order', $order, 'commerce_order_total');
  $order_total_price = commerce_currency_amount_to_decimal($item[0]['amount'], 'CHF');
  $data[6] = $order_total_price;
  $data[7] = $item[0]['currency_code'];

  // 11 Debitorensammelkonto
  $data[11] = variable_get('commerce_winbiz_debit_account_number', '1100');
  // 13 Sprache
  $data[13] = 'D';
  $data[14] = 0;
  // 15 Nr. des Kreditorendokuments
  //$data[15] = 
  // URL
  $data[16] = url('commerce/orders/' . $order->order_id, array('absolute' => TRUE));
  $data[17] = $order->order_id;

  // Comment
  $data[19] = variable_get('commerce_winbiz_invoice_comment', '');

  // @todo maybe we should provide some possibility to configure the source of the email address.
  $data[36] = $order->mail;
}

/**
 * Function loads Drupal Commerce profile data and packs it into $data.
 * 
 * @param integer $customer_id
 * @param array $data
 */
function commerce_winbiz_write_customer_data($customer_id, &$data) {
  if (!empty($customer_id)) {
    // Fetch additional customer info (firstname, lastname, gender, customers_fax (except for cre loaded), date of birth)
    $customer = entity_load_single('commerce_customer_profile', $customer_id);
    $item = field_get_items('commerce_customer_profile', $customer, 'commerce_customer_address');
    $address = $item[0];

    commerce_winbiz_debug($customer, 'CUSTOMER');

    // @todo there is no field for gender in address of Commerce customer profiles?!
    //$data[21] = $customer['customers_gender'];
    $data[22] = $address['organisation_name'];
    // @todo check the setting of addressfield module or Commerce customer if single fields
    // for first and lastname are used and set appropriate. Settings page: admin/commerce/customer-profiles/types/billing/fields/commerce_customer_address
    $data[23] = $address['last_name'];
    $data[24] = $address['first_name'];
    $data[25] = $address['thoroughfare'];
    $data[26] = $address['premise'];
    $data[27] = $address['postal_code'];
    $data[28] = $address['locality'];
    $data[29] = $address['country'];

    // customer date created
    $data[40] = strftime('%Y%m%d', $customer->created);

    // Update customer address if changed.
    $data[47] = 0;
  }
}

/**
 * Function loads Drupal Commerce product data and packs it into $data.
 * 
 * @param integer $line_item_id
 * @param array $data
 */
function commerce_winbiz_write_product_data($line_item_id, &$data) {
  $line_item = entity_load_single('commerce_line_item', $line_item_id);
  commerce_winbiz_debug($line_item, 'LINE ITEM');

  // 49 Art der Zeile, N(1), 1 = Artikel
  $data[49] = 1;

  if ($line_item->type == 'product') {
    // Load the product.
    $item = field_get_items('commerce_line_item', $line_item, 'commerce_product');
    $product = entity_load_single('commerce_product', $item[0]['product_id']);
    commerce_winbiz_debug($product, 'PRODUCT');

    // Article code.
    $data[50] = $product->sku;
    // Product description
    $data[51] = $data[76] = $data[77] = $data[78] = $data[79] = $data[80] = $product->title;
    $data[52] = strftime('%Y%m%d', $line_item->created);
    // Quantity
    $data[53] = $line_item->quantity;

    $item = field_get_items('commerce_line_item', $line_item, 'commerce_total');
    $data[54] = commerce_currency_amount_to_decimal($item[0]['amount'], 'CHF');
    // 55 product unit
    $line[55] = $line[85] = t('Piece');
    // 56 Discount (0-100%) @todo check for commerce_coupon or similar active modules
    $line[56] = 0;
    // Price
    $data[57] = $data[83] = commerce_currency_amount_to_decimal(($item[0]['amount'] * $line_item->quantity), 'CHF');

    // 60 Konto Umsatz
    $data[60] = variable_get('commerce_winbiz_profit_account_number', '3000');
    // 61 MwSt %.
    $data[61] = commerce_winbiz_get_tax_rate($line_item);
    // Incl./Excl. Tax
    $data[62] = variable_get('commerce_winbiz_tax_inclusion', 1);
    // 63 Konto MwSt
    $data[63] = variable_get('commerce_winbiz_vattax_account_number', '');
    // 64 MwSt-Verfahren
    $data[64] = 1;
    // 68 Mehrwertsteuer art, N(1)
    // 0, 1 = Keine MwSt 2 = Geschuldete MwSt 3 = Vorsteuer 4 = Ausserhalb des Felds
    $data[68] = 2;

    // Aktualisierung des Artikels N(1)
    $data[74] = (int) variable_get('commerce_winbiz_article_update', 1);
    // Kurze Beschreibung C(40)
    $data[75] = $product->title;
  }
  elseif ($line_item->type == 'shipping') {
    $data[50] = t('Shipping costs');
    // Product description
    $data[51] = $data[75] = $data[76] = $data[77] = $data[78] = $data[79] = $data[80] = $line_item->line_item_label;
    $data[52] = strftime('%Y%m%d', $line_item->created);
    // Quantity
    $data[53] = $line_item->quantity;

    $item = field_get_items('commerce_line_item', $line_item, 'commerce_total');
    $data[54] = commerce_currency_amount_to_decimal($item[0]['amount'], 'CHF');
    // 55 product unit
    $line[55] = $line[85] = t('Delivery');
    // 56 Discount (0-100%)
    $line[56] = 0;
    // Price
    $data[57] = $data[83] = commerce_currency_amount_to_decimal(($item[0]['amount'] * $line_item->quantity), 'CHF');

    // 60 Konto Umsatz
    $data[60] = variable_get('commerce_winbiz_profit_account_number', '3000');
    // 61 MwSt %.
    $data[61] = commerce_winbiz_get_tax_rate($line_item);
    // Incl./Excl. Tax
    $data[62] = 0;
    // 63 Konto MwSt
    $data[63] = variable_get('commerce_winbiz_vattax_account_number', '');
    // 64 MwSt-Verfahren
    $data[64] = 0;
    // 68 Mehrwertsteuer art, N(1)
    // 0, 1 = Keine MwSt 2 = Geschuldete MwSt 3 = Vorsteuer 4 = Ausserhalb des Felds
    $data[68] = 1;

    // Aktualisierung des Artikels N(1)
    $data[74] = 0;
  }
  // Let other modules alter the product data.
  drupal_alter('commerce_winbiz_product_data', $data, $line_item, $order);
}

/**
 * Function loads data of an online payment and packs it into $data.
 *
 * @param integer $line_item_id
 * @param array $data
 */
function commerce_winbiz_write_payment_data($order, $method, &$data) {
  // Get the payment methods
  $methods = commerce_payment_methods();
  $method_data = $methods[$method];

  $data[1] = $order->order_id;
  // 24 = Debitpayment. 
  $data[2] = 24;
  $orderdate = (!empty($order->data['commerce_winbiz_checkout_complete_timestamp'])) ? $order->data['commerce_winbiz_checkout_complete_timestamp'] : $order->created;
  $data[3] = strftime('%Y%m%d', $orderdate);
  $data[4] = strftime('%H:%M', $orderdate);
  // 5 Referenz
  $data[5] = $method_data['title'] . ' ' . t('Order') . ' ' . $order->order_id;

  // Fetch orders total.
  $item = field_get_items('commerce_order', $order, 'commerce_order_total');
  $order_total_price = commerce_currency_amount_to_decimal($item[0]['amount'], 'CHF');
  $data[6] = $order_total_price;
  $data[7] = $item[0]['currency_code'];

  // At a later stage add support for $data[8] exchange rate
  // and $data[9] amount in foreign currency here.

  $data[11] = variable_get('commerce_winbiz_debit_account_number', '1100');
  // @todo add configuration field for skonto account number
  // $data[12] = variable_get('commerce_winbiz_skonto_account_number', '3090');

  // Addresscode.
  $data[20] = $order->uid;

  // Payment method code.
  $data[147] = commerce_winbiz_get_payment_method_code($method_data['method_id']);
}

/**
 * Debug wrapper function, checks for enabled debugging
 * before printing debug information.
 * 
 * @param mixed $value
 * @param string $label
 */
function commerce_winbiz_debug($value, $label) {
  if (module_exists('devel') && variable_get('commerce_winbiz_debug', FALSE)) {
    dpm($value, $label);
  }
}

/**
 * Function checks if there are any taxes configured in Commerce
 * and returns them if available.
 */
function commerce_winbiz_commerce_taxes_available() {
  if (module_exists('commerce_tax')) {
    $commerce_taxes = commerce_tax_rates();
    if (!empty($commerce_taxes)) {
      return $commerce_taxes;
    }
    return FALSE;
  }
}

/**
 * Function returns the correct tax rate that is set on the settings form.
 */
function commerce_winbiz_get_tax_rate($line_item) {
  if (variable_get('commerce_winbiz_use_commerce_tax', 0) > 0) {
    $items = field_get_items('commerce_line_item', $line_item, 'commerce_total');
    foreach ($items[0]['data']['components'] as $component) {
      $split = explode('|', $component['name']);
      if ($split[0] == 'tax') {
        return ($component['price']['data']['tax_rate']['rate'] * 100);
      }
    }
    return 0;
  }
  else {
    return variable_get('commerce_winbiz_custom_tax_rate', 0.00);
  }
}

/**
 * Escapes an export string.
 */
function commerce_winbiz_escape_export_data(&$data) {
  for ($i = 1; $i <= 159; $i++) {
    if (module_exists('devel') && variable_get('commerce_winbiz_debug_output', FALSE)) {
      dpm($data, "F[$i]");
    }
    // Escape all semikolons in content to ensure correct field separation.
    $data[$i] = str_replace(';', ' ', $data[$i]);
    // Same for accidental EOL markers.
    $data[$i] = str_replace(WINBIZ_EOLINE, ' ', $data[$i]);
  }
}

/**
 * Getter for payment method codes.
 */
function commerce_winbiz_get_payment_method_code($payment_method_id) {
  $code = variable_get('commerce_winbiz_payment_method_code_' . $payment_method_id, NULL);
  if (!empty($code)) {
    return $code;
  }
  else {
    return $payment_method_id;
  }
}
