<?php

/**
 * @file
 * Unit tests for the Commerce order module.
 */

/**
 * Tests for Commerce WinBIZ.
 */
class CommerceWinBIZExportTestCase extends CommerceBaseTestCase {

  protected $site_admin;
  protected $product_price;

  public static function getInfo() {
    return array(
      'name' => 'Export Tests',
      'description' => 'Tests exported data of Commerce WinBIZ module.',
      'group' => 'Commerce WinBIZ',
    );
  }

  public function setUp() {
    $modules = array(
      'commerce_winbiz',
      'views',
      'commerce_cart',
      'commerce_payment_example',
      'commerce_product_ui',
      'commerce_customer_ui',
      'commerce_tax',
      'commerce_tax_ui',
    );

    parent::setUp($modules);

    // Set some variables of the WinBIZ module.
    variable_set('commerce_winbiz_profit_account_number', '3000');
    variable_set('commerce_winbiz_debit_account_number', '1100');

    // Create and login the site admin if he's not already.
    $this->site_admin = $this->createSiteAdmin();
    user_role_change_permissions(DRUPAL_AUTHENTICATED_RID, array(
      'access checkout' => TRUE,
      'administer taxes' => TRUE,
    ));
    $this->drupalLogin($this->site_admin);
  }

  /**
   * Tests if the number of items in the export is correct.
   */
  public function testCountExportedItems() {
    // Setup some testdata.
    $this->prepareOrderData();
    // Get export string.
    $export = commerce_winbiz_export_orders(1, 1);
    $order = commerce_order_load(1);

    // Check if all line items were exported.
    $items = field_get_items('commerce_order', $order, 'commerce_line_items');
    $item_split = explode('<br>', $export);
    $this->assertEqual(count($item_split) - 1, count($items), t('Amount of exported line items equals amount of order line items.'));

    // Check if count of fields in exported string matches 159.
    for ($i = 0; $i < count($item_split) - 1; $i++) {
      $field_split = explode(';', $item_split[$i]);
      $this->assertEqual(count($field_split), 159, t('Amount of fields in exported line item no. @num is 159.', array('@num' => ($i + 1))));
    }
  }

  /**
   * Tests if the mandatory fields in an export row are set.
   */
  public function testMandatoryFields() {
    // Setup some testdata and split the exported string already.
    $this->prepareOrderData();
    $field_split = $this->getExportSplit();

    // Print the exported data for informational purposes.
    debug($field_split, 'FIELDS');

    // Check if all the mandatory fields have a value.
    $export_is_valid = TRUE;
    $mandatory = array(1, 2, 3, 6, 11, 20, 51, 53, 54, 57, 60, 61, 62);
    for ($i = 0; $i < count($mandatory); $i++) {
      if ($field_split[$mandatory[$i]] == '') {
        $export_is_valid = FALSE;
        break;
      }
    }
    $this->assertEqual($export_is_valid, TRUE, t('All mandatory fields have a value.'));
  }

  /**
   * Checks exported price for pricing rules application.
   */
  function testPricingRulesAppliance() {
    $discount_amount = rand(1, 10) * 1000;
    // Import a pricing rule.
    $config = '{ "rules_wbtest" : {
        "LABEL" : "WBTest",
        "PLUGIN" : "reaction rule",
        "REQUIRES" : [ "commerce_line_item", "commerce_product_reference" ],
        "ON" : [ "commerce_product_calculate_sell_price" ],
        "DO" : [
          { "commerce_line_item_unit_price_subtract" : {
              "commerce_line_item" : [ "commerce_line_item" ],
              "amount" : "' . $discount_amount . '",
              "component_name" : "base_price",
              "round_mode" : "1"
            }
          }
        ]
      }
    }';
    entity_import('rules_config', $config)->save();
    $this->prepareOrderData();
    $export = $this->getExportSplit();
    $condition = $export[54] == commerce_currency_amount_to_decimal($this->product_price - $discount_amount, commerce_default_currency());
    $this->assertTrue($condition, 'The exported product price takes pricing rules into account.');
  }

  /**
   * Checks if payment methods are exported with correct code.
   */
  function testPaymentMapping() {
    $this->pass('Testing payment settings.');
    variable_del('commerce_winbiz_payment_method_enabled_commerce_payment_example');
    // Test if the set payment method code gets exported in the appropriate field.
    $method_code = $this->randomName();
    variable_set('commerce_winbiz_payment_method_code_commerce_payment_example', $method_code);
    $this->prepareOrderData();
    $export = $this->getExportSplit();
    $this->assertEqual($export[147], $method_code, 'The payment method code was found in the export.');

    // Check if the payment method code will change accordingly in the second exported row.
    $method_code = $this->randomName();
    variable_set('commerce_winbiz_payment_method_code_commerce_payment_example', $method_code);
    $this->prepareOrderData();
    $export = $this->getExportSplit(1);
    $this->assertEqual($export[147], $method_code, 'The changed payment method code was found in the second exported order.');
  }

  /**
   * Test for payment rows.
   *
   * Check if separate row is exported for enabled online payments methods.
   */
  function testOnlinePaymentExport() {
    // Test if a payment row for online payments gets exported if the method is configured such.
    variable_set('commerce_winbiz_payment_method_enabled_commerce_payment_example', TRUE);
    $this->prepareOrderData(1, 2);
    $methods = commerce_payment_methods();
    $method_data = array_shift($methods);
    $export = $this->getExportSplit(2);
    $this->assertEqual($method_data['title'] . ' ' . t('Order') . ' ' . 1, $export[5], 'The payment row of for the order total is in the export.');
  }

  /**
   * Tests if the right tax rate is applied.
   */
  function testTaxCalculation() {
    // Setup test data and split the exported string.
    $this->prepareOrderData();
    $export = $this->getExportSplit();
    // Check the exported tax rate.
    $this->assertEqual($export[61], '0', 'The exported tax rate is 0 because there is not commerce tax rate yet.');

    // Enable the use of the commerce tax rate.
    variable_set('commerce_winbiz_use_commerce_tax', TRUE);

    // Create the tax rate and a new order.
    $this->createTaxRate();
    $this->prepareOrderData();
    $export = $this->getExportSplit(1);

    // Check the exported tax rate.
    $this->assertEqual($export[61], $this->tax_rate * 100, 'The exported tax rate equals the created commerce tax rate.');

    // Use a custom tax rate and export the same order again.
    variable_set('commerce_winbiz_use_commerce_tax', FALSE);
    variable_set('commerce_winbiz_custom_tax_rate', 7.6);
    $export = $this->getExportSplit(1);
    $this->assertEqual($export[61], variable_get('commerce_winbiz_custom_tax_rate'), 'The exported tax rate equals the configured custom tax rate.');
  }

  /**
   * Creates test order data.
   *
   * @param int $order_count
   *   Number of orders to create.
   * @param int $product_count
   *   Number of products to create.
   */
  protected function prepareOrderData($order_count = 1, $product_count = 1) {
    // Create a dummy product display content type.
    $this->createDummyProductDisplayContentType();
    // Create dummy product display nodes (and their corresponding product entities).
    $this->createProducts();

    // Create some order data.
    for ($x = 1; $x <= $order_count; $x++) {
      // Add a given number of products to an order.
      for ($i = 1; $i <= $product_count; $i++) {
        // Submit the add to cart form.
        $this->drupalPost('node/' . $i, array(), t('Add to cart'));
      }
      // Checkout
      $this->drupalPost('cart', array(), t('Checkout'));
      // Reset the cache as we don't want to keep the lock.
      entity_get_controller('commerce_order')->resetCache();

      // Access to checkout page.
      $this->drupalGet($this->getCommerceUrl('checkout'));

      // Fill in the billing address information.
      $billing_pane = $this->xpath("//select[starts-with(@name, 'customer_profile_billing[commerce_customer_address]')]");
      $this->drupalPostAJAX(NULL, array((string) $billing_pane[0]['name'] => 'CH'), (string) $billing_pane[0]['name']);

      $this->drupalPost(NULL, $this->getBillingAddressValues(), t('Continue to next step'));
      // Finish checkout process
      $this->drupalPost(NULL, array('commerce_payment[payment_details][name]' => 'Example payment method'), t('Continue to next step'));
    }
  }

  /**
   * Creates form values for billing address.
   *
   * @return array
   *   The billing information form values.
   */
  protected function getBillingAddressValues() {
    $address_info = $this->generateAddressInformation();
    // Fill in the required information for billing pane.
    $info = array(
      'customer_profile_billing[commerce_customer_address][und][0][name_line]' => $address_info['name_line'],
      'customer_profile_billing[commerce_customer_address][und][0][thoroughfare]' => $address_info['thoroughfare'],
      'customer_profile_billing[commerce_customer_address][und][0][locality]' => $address_info['locality'],
      'customer_profile_billing[commerce_customer_address][und][0][postal_code]' => $address_info['postal_code'],
      'customer_profile_billing[commerce_customer_address][und][0][country]' => 'CH',
    );
    return $info;
  }

  /**
   * Creates 5 products for the test.
   */
  protected function createProducts() {
    $this->product_price = 15000;
    for ($i = 1; $i <= 5; $i++) {
      $sku = 'PROD-0' . $this->randomName();
      $product_name = 'Product ' . $this->randomName();
      $this->product = $this->createDummyProduct($sku, $product_name, $this->product_price);
      $this->product_node = $this->createDummyProductNode(array($this->product->product_id), $product_name);  
    }
  }

  /**
   * Getter for the data as exported to WinBIZ.
   *
   * @return array
   *   Returns the split export string.
   */
  protected function getExportSplit($item_number = 0) {
    $export = commerce_winbiz_export_orders(1, $item_number + 1);
    $item_split = explode('<br>', $export);
    $field_split = explode(';', $item_split[$item_number]);
    // Add a virtual field for 0 index,
    // because exports start at index 1.
    array_unshift($field_split, '');

    // Commerce is keeping a transaction open when orders are loaded, that
    // breaks page requests that try to e.g. save entities or set variables.
    // Reset controllers to destruct the transaction and force it to write.
    drupal_static_reset('entity_get_controller');

    return $field_split;
  }

  /**
   * Creates a commerce tax rate.
   *
   * Most of the code is borrowed from the commerce_tax module test.
   */
  protected function createTaxRate() {
    $this->tax_rate = 0.08;
    // Access the creation page for tax rates.
    $this->drupalGet('admin/commerce/config/taxes/rates/add');

    // Check the integrity of the tax rate form.
    $this->pass(t('Creating a tax rate for the test'));

    // Fill the tax rate information and save tax rate.
    $edit = array(
        'tax_rate[title]' => $this->randomName() . ' tax rate',
        'tax_rate[name]' => strtolower($this->randomName()) . 'example_tax_rate',
        'tax_rate[display_title]' => $this->randomName() . ' tax rate',
        'tax_rate[description]' => 'Example tax rate for testing',
        'tax_rate[rate]' => $this->tax_rate,
      );
    $this->drupalPost(NULL, $edit, t('Save tax rate'));

    // Check in database if the tax rate has been created.
    commerce_tax_rates_reset();
    $tax_rate = commerce_tax_rate_load($edit['tax_rate[name]']);
    $this->assertFalse(empty($tax_rate), 'Tax rate was created successfully.');
  }
}
