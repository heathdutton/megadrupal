<?php

/**
 * @file
 * Module providing openid content profile fields permissions capability for Drupal
 */

define('OPENID_PROFILE_NORMAL', 0);
define('OPENID_PROFILE_DEFAULT', 1);
define('OPENID_PROFILE_OVERRIDDEN', 2);

/**
 * Implements hook_menu().
 */
function openid_profile_menu() {
  // Register a path for each content profile type
  $items['admin/config/people/accounts/openid_ax_mapping'] = array(
    'title' => 'OpenID field mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openid_profile_map'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'openid_profile.admin.inc',
  );
  $items['admin/config/people/accounts/openid_ax_mapping/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openid_profile_map'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'openid_profile.admin.inc',
  );
  $items['admin/config/people/accounts/openid_ax_mapping/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openid_profile_export'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'openid_profile.admin.inc',
  );
  $items['openid_profile/delete'] = array(
    'page callback' => 'openid_profile_delete',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'openid_profile.admin.inc',
  );
  return $items;
}

 /**
 * Implements hook_ctools_plugin_type() to inform CTools about the field_ax plugin.
  */
function openid_profile_ctools_plugin_type() {
  $plugins = array(
    'field_ax' => array());
  return $plugins;
 }

/**
 * Implements hook_ctools_plugin_directory().
 */
function openid_profile_ctools_plugin_directory($module, $plugin) {
  if ($module == 'openid_profile') {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_user_load().
 */
function openid_profile_user_load($account) {
  if (module_exists('openid_ax_client')) {
    // Check to see if we got a response
    $result = openid_complete();
    if ($result['openid.ax.mode'] == 'store_response_success') {
      drupal_set_message(t('The changes have been saved.'));
    }
    elseif ($result['openid.ax.mode'] == 'store_response_failure') {
      drupal_set_message(t('Could not save the changes: @error_message', array('@error_message' => $result['openid.ax.error'])));
    }
  }
}

/**
 * Implements hook_user_update().
 */
function openid_profile_user_update($edit, $account, $category) {
  openid_profile_execute_update($account);
}

/**
 * Implements hook_profile2_update().
 * Support update for profile2 user profiles.
 */
function openid_profile_profile2_update($profile) {
   $account = user_load($profile->uid);
   openid_profile_execute_update($account);
}


/**
 * Function that reacts on user and profile updates.
 */
function openid_profile_execute_update($account) {
  $updating = &drupal_static('openid_profile_user_update', FALSE);

  // Prevent deadlock
  if (!$updating) {
    $updating = TRUE;

    // Let the OP react on updates
    if (module_exists('openid_provider_ax')) {
      module_invoke('openid_provider_ax', 'openid_provider', 'update', $account->uid);
    }

    // Let the RP react on updates
    if (module_exists('openid_client_ax')) {
      if (openid_profile_needs_update($account)) {
        openid_client_ax_store($account->uid, url($_GET['q'], array('absolute' => TRUE)));
      }
    }
    $updating = FALSE;
  }


}

/**
 * Check if profile needs remote update
 */
function openid_profile_needs_update($account) {
  global $user;

  // Don't update alien users
  if ($user->uid != $account->uid) {
    return FALSE;
  }

  // Don't update if no OpenID is available
  if (!db_query("SELECT COUNT(aid) FROM {authmap} WHERE uid = :uid AND module = :module", array(':uid' => $account->uid, ':module' => 'openid'))->fetchField()) {
    return FALSE;
  }

  // Check if we have shared data at all
  $mapping = array();
  openid_profile_get_mapping($mapping);
  foreach ($mapping as $key => $field) {
    if (isset($account->{$field['value']})) {
      return TRUE;
    }
  }
  // No shared fields
  return FALSE;
}

/**
 * Implements hook_openid_provider_map().
 */
function openid_profile_openid_provider_map($op, $type, $fields, $uid) {

  if ($op == 'load') {
    $response = array();

    if ($type == 'sreg') {

      foreach ($fields as $key) {
        $value = _openid_profile_get_value('openid.sreg.' . $key, $key);
        if (!empty($value)) {
          $response['openid.sreg.' . $key] = serialize($value);
        }
      }
    }

    elseif ($type == 'ax') {
      return _openid_profile_ax_values_attach($fields, $uid);
    }
  }

  if ($op == 'store') {
    // Prevent client from calling store again
    $updating = &drupal_static('openid_profile_user_update', FALSE);
    $updating = TRUE;
    openid_profile_user_save($fields, $uid);
    $updating = FALSE;
  }
}

/*
 * Helper function.
 *
 * Attach attribute data to the request.
 */
function _openid_profile_ax_values_attach($attributes, $uid = FALSE) {

  $response = array();
  $short_names = array();

  if (isset($attributes['openid.ax.if_available'])) {
    $short_names += explode(',', $attributes['openid.ax.if_available']);
  }
  if (isset($attributes['openid.ax.required'])) {
    $short_names += explode(',', $attributes['openid.ax.required']);
  }
  foreach ($short_names as $short_name) {
    // Get the full URL
    $full_url = $attributes['openid.ax.type.' . $short_name];

    if (isset($attributes['openid.ax.count.'. $short_name])) {
      $values_count = $attributes['openid.ax.count.'. $short_name];
    }
    else {
      $values_count = 1;
    }
    $value = _openid_profile_get_value($full_url, $short_name, $values_count, $uid);
    if (!empty($value)) {
      if (isset($value['name'])) {
        $response[$value['name']] = $value['value'];
      }
      elseif (is_array($value[0])) {
        // Inform relying party of element count
        $response['openid.ax.count.' . $short_name] = count($value);
        foreach ($value as $single_value)
          $response[$single_value['name']] = $single_value['value'];
      }
    }
  }

  return $response;
}



/**
 * Implements hook_openid_client_ax().
 *
 * Attach attribute data to the request, or update the profile.
 *
 * @param type $op
 * @param type $response
 * @param type $account
 * @return type
 */
function openid_profile_openid_client_ax($op, $response = NULL, $account = NULL) {
  switch ($op) {
    case 'load':
      return _openid_profile_ax_values_attach($response, $account);

    case 'get':
      return openid_profile_extend_request();

    case 'update':
      openid_profile_user_save($response, $account->uid);
      return;
  }
}

function openid_profile_extend_request() {
  $mapping = array();
  openid_profile_get_mapping($mapping);

  foreach ($mapping as $attribute_url => $mapping_settings) {
    $field_info = field_info_field($mapping_settings['value']);
    if ($field_info['cardinality'] > 1) {
      $mapping[$attribute_url]['cardinality'] = $field_info['cardinality'];
    }
    elseif ($field_info['cardinality'] == -1) {
       $mapping[$attribute_url]['cardinality'] = 'unlimited';
    }
  }
  return $mapping;
}


/**
 * Implements hook_openid_response().
 */
function openid_profile_openid_response($response = NULL, $account = NULL) {
  openid_profile_user_save($response, $account->uid);
}

function openid_profile_user_save($response = NULL, $uid = NULL) {
  $mapping = array();
  openid_profile_get_mapping($mapping);
  $account = user_load($uid);

  if (!empty($mapping) && $account != NULL) {

    foreach ($mapping as $openid => $field) {
      $field_value = FALSE;

      $field_elements = explode('::', $field['value']);
      $field_name = array_shift($field_elements);

      if (module_exists('openid_client_ax') || module_exists('openid_provider_ax')) {
        $field_value = _openid_profile_populate_field($openid, '/', 'openid.ax.value.', $field_name, $response);
      }
      if (!empty($field_value)) {
        $edit[$field_name] = $field_value;
      }
    }
    // Only update if there is data available from the provider.
    if (!empty($edit)) {
      user_save($account, $edit);
    }
  }
}

/**
 * Gets the mapping from the variable table or the .inc file if it's overriden
 */
function openid_profile_get_mapping(&$mapping) {
  $mapping_imported = module_invoke_all('openid_profile_mapping');
  $in_variable = variable_get('openid_profile_map', array());
  if (isset($mapping_imported)) {
    if (is_array($mapping_imported) && count($mapping_imported) > 0) {
      if (is_array($in_variable) && $in_variable != $mapping_imported) {
        $mapping = $in_variable;
        return OPENID_PROFILE_OVERRIDDEN;
      }
      else {
        $mapping = $mapping_imported;
        return OPENID_PROFILE_DEFAULT;
      }
    }
  }
  $mapping = $in_variable;
  return OPENID_PROFILE_NORMAL;
}

/**
 * Utility function to retrieve the value for the field if all permissions checks pass
 *
 * @param $field
 *      Field we are looking for i.e. ((http://axschema.org/contact/email) or (openid.sreg.email)
 *      Depends on whether AX or Sreg is being used
 */
function _openid_profile_get_value($field, $short_name, $count = 1, $uid = FALSE) {
  static $mapping = array(), $account = NULL;
  global $user;

  // set-up variables for subsequent calls
  if (empty($mapping)) {
    openid_profile_get_mapping($mapping);
    if ($uid == FALSE) {
      $account = $user;
    }
    else {
      // Get newly saved data from database
      $account = user_load($uid, TRUE);
    }
  }

  if (isset($mapping[$field])) {
    $field_elements = explode('::', $mapping[$field]['value']);
    $field_name = array_shift($field_elements);
    //$field_column = array_shift($field_elements);
  }

  // Discover the field data
  if (isset($field_name)) {

    // Check first if field is available on user object
    if (isset($account->{$field_name})) {
      $raw_field = $account->{$field_name};
    }

    // Check for profile2 fields of the user
    else if (module_exists('profile2')) {
      $profile2_profiles = profile2_load_by_user($account);
      foreach ($profile2_profiles as $profile2_profile) {
        if (isset($profile2_profile->{$field_name})) {
          $raw_field = $profile2_profile->{$field_name};
        }
      }
    }
  }

  // Try to fill with data from field.
  if (isset($raw_field)) {

    // Initiate plugin's handler
    $plugin = openid_profile_load_plugin($mapping[$field]['handler']['class'], $mapping[$field]);
    if (isset($plugin) && !empty($raw_field)) {

      // Return the converted value(s) from the plugin
      $converted_value = $plugin->convert_to_ax($raw_field, $count);
      if (!empty($converted_value)) {

        // One value for this attribute/field
        if ($count == 1) {
          return array(
            'name' => 'openid.ax.value.'. $short_name,
            'value' => $converted_value,
          );
        }

        // Multiple values for this attribute/field
        elseif ($count > 1 || $count == 'unlimited') {
          $response = array();
          foreach ($converted_value as $index => $value) {
            if ($index < $count || $count == 'unlimited') {
              $response[] = array(
                'name' => 'openid.ax.value.'. $short_name . '.' . ($index + 1),
                'value' => $converted_value[$index]['value'],
              );
            }
          }
        }
      }
      return $response;
    }
  }
}


/**
 * This function will be called to load an object as a plugin for passing fields to OpenID AX.
 */
function openid_profile_load_plugin($plugin_name = NULL, $mapping = array()) {
  ctools_include('plugins');
  // Load plugins for field value convertion to AX suitable formats
  $plugin = ctools_get_plugins('openid_profile', 'field_ax', $plugin_name);
  $handler = openid_profile_get_handler($plugin);
  // Attach current mapping
  $handler->plugin['mapping'] = $mapping;
  return $handler;
}



/**
 * Get the class to handle creating a list of exportable items.
 *
 * If a plugin does not define a lister class at all, then the default
 * lister class will be used.
 *
 * @return
 *   Either the lister class or FALSE if one could not be had.
 */
function openid_profile_get_handler($plugin) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (empty($cache[$plugin['name']])) {
    if (empty($plugin['handler'])) {
    // @TODO: If a list class is not specified by the plugin, fall back
    // to the a default plugin instead.
//      $default = ctools_get_export_ui('ctools_export_ui');
//      $class = ctools_plugin_get_class($default, 'handler');
    }
    else {
      $class = ctools_plugin_get_class($plugin, 'handler');
    }

    if ($class) {
      $cache[$plugin['name']] = new $class();
      $cache[$plugin['name']]->init($plugin);
    }
  }
  return !empty($cache[$plugin['name']]) ? $cache[$plugin['name']] : FALSE;
}


/**
 * Fills node object with incoming data.
 * @see openid_profile_openid_client()
 */
function _openid_profile_populate_field($long_format, $separator, $prefix, $target, $response) {

  $mapping = array();
  openid_profile_get_mapping($mapping);

  $field_elements = explode('::', $mapping[$long_format]['value']);
  $field_name = array_shift($field_elements);
  $field_column = array_shift($field_elements);

  $plugin = openid_profile_load_plugin($mapping[$long_format]['handler']['class'], $mapping[$long_format]);
  $short_name = openid_ax_api_attribute_name($long_format);

  if (!empty($plugin)) {
    // Only a single value from attribute
    if (isset($response[$prefix . $short_name])) {
      $field_value = $plugin->convert_from_ax_single($response[$prefix . $short_name]);
    }

    // Multiple values are coming in
    elseif (isset($response['openid.ax.count.' . $short_name])) {
      $count = $plugin->get_values_count($response['openid.ax.count.' . $short_name], $target);

      // Fill up array with values
      $values = array();
      for ($i = 1; $i <= $count; $i++) {
        if (isset($response[$prefix . $short_name . '.' . $i])) {
          $values[] = $response[$prefix . $short_name . '.' . $i];
        }
      }
      $field_value = $plugin->convert_from_ax_multiple($values);
    }
  }

  // Check if there is a value
  if (!empty($field_value)) {
      return $field_value;
  }
  else {
    return FALSE;
  }
}

/**
 * Process variables for user-picture.tpl.php.
 * This is a copy from user.module, only modified to allow remote pictures
 *
 * TODO: not yet ported
 */
function openid_profile_preprocess_user_picture(&$variables) {
  $variables['picture'] = '';
  if (variable_get('user_pictures', 0)) {
    $account = $variables['account'];
    if (!empty($account->picture) && file_exists($account->picture)) {
      $picture = file_create_url($account->picture);
    }
    // Add support for external user pictures
    elseif (!empty($account->picture) && valid_url($account->picture)) {
      $picture = $account->picture;
    }
    elseif (variable_get('user_picture_default', '')) {
      $picture = variable_get('user_picture_default', '');
    }

    if (isset($picture) && $account->uid > 0) {
      $alt = t("@user's picture", array('@user' => $account->name ? $account->name : variable_get('anonymous', t('Anonymous'))));
      $variables['picture'] = theme('image', array('path' => $picture, 'width' => $alt, 'height' => $alt, 'alt' => '', 'title' => FALSE));
      if (!empty($account->uid) && user_access('access user profiles')) {
        $attributes = array(
          'attributes' => array('title' => t('View user profile.')),
          'html' => TRUE,
        );
        $variables['picture'] = l($variables['picture'], "user/$account->uid", $attributes);
      }
    }
  }
}

/**
 * Implement HOOK_form_FORM_ID_alter().
 */
function openid_profile_form_user_profile_form_alter(&$form, &$form_state) {
  global $user, $base_url, $base_path;
  //TODO: also exclude non-externaly mapped users
  if (module_exists('openid_client_ax')) {
    if (1 || $user->uid != 1) {
      $read_only = variable_get('openid_profile_read_only_fields', array());
      $provider = variable_get('openid_sso_relying_provider', array());

      $path = isset($_GET['q']) ? $_GET['q'] : '';
      $path = url($path, array('absolute' => TRUE));

      // TODO: Move to SSO modules
      $description = t('Visit the authentification instance !sso_name to change this field.',
                       array('!sso_name' => l($provider['name'],
                                              $provider['url'],
                                              array('query' => array('omniauth_redirect' => $path)))));

      // Recursively traverse the form and disable selected fields
      _openid_profile_disable_user_fields($form, $read_only, $description);

      // Password field is allways disabled
      $form['account']['current_pass']['#access'] = FALSE;
      $form['account']['pass']['#disabled'] = TRUE;
      $form['account']['pass']['#type'] = 'textfield';
      $form['account']['pass']['#title'] = t('Password');
      $form['account']['pass']['#description'] = $description;
    }
  }
}

/**
 * Recursively traverses the form and disables form elements that are marked
 * int the $read_only array.
 *
 * @param type $element - The form.
 * @param type $read_only - Elements to disable.
 * @param type $description - Description that is appended to the disabled fields.
 */
function _openid_profile_disable_user_fields(&$element, $read_only, $description) {
  foreach (element_children($element) as $key) {
    if (array_key_exists($key, $read_only) && $read_only[$key]) {
      $element[$key]['#disabled'] = TRUE;
      $element[$key]['#description'] = $description;
    }
    _openid_profile_disable_user_fields($element[$key], $read_only, $description);
  }
}
