
<?php
/**
 * @file
 * CCavenue module for Drupal Commerce
 */

/**
 * Administration forms form payment method.
 */
function ccavenue_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'merchant_id' => '',
    'working_key' => '',
  );
  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant id'),
    '#default_value' => $settings['merchant_id'],
  );
  $form['working_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CCavenue Working key'),
    '#default_value' => $settings['working_key'],
  );
  return $form;
}

/**
 * Register payment mehtod.
 */
function commerce_ccavenue_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['ccavenue'] = array(
    'title' => t("CCavenue"),
    'display_title' => "CCavenue",
    'short_title' => 'CCavenue',
    'description' => t("Payment method for CCavenue"),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}

/**
 * Ask for CCavenue redirect form.
 */
function ccavenue_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
  // Get financial info.
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $order_data = array(
    'merchant_id' => $payment_method['settings']['merchant_id'],
    'amount' => $wrapper->commerce_order_total->amount->value() / 100,
    'order_id' => $order->order_id,
    'return_url' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'working_key' => $payment_method['settings']['working_key'],
  );
  $checksum = _commerce_ccavenue_getchecksum($order_data);
  $form['Merchant_Id'] = array(
    '#type' => 'hidden',
    '#value' => $order_data['merchant_id'],
  );
  $form['Amount'] = array(
    '#type' => 'hidden',
    '#value' => $order_data['amount'],
  );
  $form['Order_Id'] = array(
    '#type' => 'hidden',
    '#value' => $order_data['order_id'],
  );
  $form['Redirect_Url'] = array(
    '#type' => 'hidden',
    '#value' => $order_data['return_url'],
  );
  $form['Checksum'] = array(
    '#type' => 'hidden',
    '#value' => $checksum,
  );
  $form['billing_cust_name'] = array(
    '#type' => 'hidden',
    '#value' => $billing_address['name_line'],
  );
  $form['billing_cust_address'] = array(
    '#type' => 'hidden',
    '#value' => $billing_address['thoroughfare']. ' ' . $billing_address['premise'] . ' ' . $billing_address['sub_premise'] ,
  );
  $form['billing_cust_city'] = array(
    '#type' => 'hidden',
    '#value' => $billing_address['locality'],
  );
  $form['billing_cust_state'] = array(
    '#type' => 'hidden',
    '#value' => $billing_address['administrative_area'],
  );
  $form['billing_cust_zip'] = array(
    '#type' => 'hidden',
    '#value' => $billing_address['postal_code'] ,
  );
  $form['billing_cust_country'] = array(
    '#type' => 'hidden',
    '#value' => 'India',
  );
  $form['billing_cust_tel'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );
  $form['billing_cust_email'] = array(
    '#type' => 'hidden',
    '#value' => $order->mail ,
  );
  $form['billing_cust_notes'] = array(
    '#type' => 'hidden',
    '#value' => 'Commerce_CC',
  );
  $form['#action'] = 'https://www.ccavenue.com/shopzone/cc_details.jsp';
  return $form;
}

/**
 * Implements hook_redirect_form_validate().
 */
function ccavenue_redirect_form_validate($order, $payment_method) {
  $authdesc = $_REQUEST['AuthDesc'];
  $checksum = _commerce_ccavenue_verify($payment_method);
  $message = t('Security error ip Address was: @ip', array('@ip' => ip_address()));
  if ($checksum == 'true' && $authdesc == 'Y') {
    commerce_ccavenue_transaction($order, $payment_method, $authdesc);
    return drupal_set_message(t('Thank you for shopping with us. Your account has been charged and your transaction is successful.'));
    // Here you need to put in the routines for a successful.
    // Transaction such as sending an email to customer.
    // Setting database status, informing logistics etc etc.
  }
  elseif ($checksum == 'true' && $authdesc == 'B') {
    commerce_ccavenue_transaction($order, $payment_method, $authdesc);
    return drupal_set_message(('Thank you for shopping with us.We will keep you posted regarding the status of your order through e-mail'));
    // This is for payment American Express Card payment only.
    // American Express authorisation status is available only after 5-6.
  }
  elseif ($checksum == 'true' && $authdesc == 'N') {
    commerce_ccavenue_transaction($order, $payment_method, $authdesc);
    return drupal_set_message(t('Thank you for shopping with us.However,the transaction has been declined.'));
    // Here you need to put in the routines for a failed.
    // Transaction such as sending an email to customer.
    // Setting database status etc etc.
  }
  else {
    watchdog('commerce_ccavenue', $message, NULL, WATCHDOG_ERROR);
    return drupal_set_message(t('Security Error. Illegal access detected. We will store your IP address.'), ERROR);
  }
}
/**
 * CCAvenue finish payment
 */
function commerce_ccavenue_transaction($order, $payment_method, $authdesc) {
  // Ask results from verify function.
  if (_commerce_ccavenue_verify($payment_method) == 'false') {
    return;
  }
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $currency;
  // Succeessful.
  if($authdesc == "Y") {
    $transaction->remote_status = t('Success');
    $transaction->message = t('Payment received at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }elseif($authdesc == "B"){
    // Batch process - Pending orders.
    $transaction->remote_status = t('Pending');
    $transaction->message = t('Payment pending at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  }elseif($authdesc == "N"){
    // Failed transaction.
    $transaction->remote_status = t('Failure');
    $transaction->message = t('Payment failed at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);
}

/**
 * Get checksum.
 */
function _commerce_ccavenue_verify($payment_method) {
  $order_data = array(
    'working_key' => $payment_method['settings']['working_key'],
    'authdesc' => $_REQUEST['AuthDesc'],
    'merchant_id' => $_REQUEST['Merchant_Id'],
    'order_id' =>  $_REQUEST['Order_Id'],
    'amount' => $_REQUEST['Amount'],
    'checksum' => $_REQUEST['Checksum'],
  );
  return _commerce_ccavenue_verify_checksum($order_data);
}
/**
 * Get checksum.
 */
function _commerce_ccavenue_getchecksum($order_data) {
  $str = implode('|', $order_data);
  $adler = 1;
  $adler = _commerce_ccavenue_adler32($adler, $str);
  return $adler;
}
/**
 * Verify checksum.
 */
function _commerce_ccavenue_verify_checksum($order_data) {
  $str = implode('|', $order_data);
  $adler = 1;
  $adler = _commerce_ccavenue_adler32($adler, $str);

  if ($adler == $checksum) {
    return 'true';
  }
  else {
    return 'false';
  }
}
/**
 * Create helper function called _commerce_ccavenue_adler32.
 */
function _commerce_ccavenue_adler32($adler, $str) {
  $base = 65521;
  $s1   = $adler & 0xffff;
  $s2   = ($adler >> 16) & 0xffff;
  for ($i = 0; $i < strlen($str); $i++) {
    $s1 = ($s1 + ord($str[$i])) % $base;
    $s2 = ($s2 + $s1) % $base;
  }
  return _commerce_ccavenue_leftshift($s2, 16) + $s1;
}
/**
 * Create helper function called _commerce_ccavenue_leftshift.
 */
function _commerce_ccavenue_leftshift($str, $num) {
  $str = decbin($str);
  $v = 0;
  for ($i = 0; $i < ($v); $i++) {
    $v = 64 - strlen($str);
  }
  $str = '0' . $str;
  for ($i = 0; $i < $num; $i++) {
    $str = $str . '0';
    $str = substr($str, 1);
  }
  return _commerce_ccavenue_cdec($str);
}
/**
 * Create helper function called _commerce_ccavenue_cdec.
 */
function _commerce_ccavenue_cdec($num) {
  $dec = '';
  for ($n = 0; $n < strlen($num); $n++) {
    $temp = $num[$n];
    $dec = $dec + $temp * pow(2, strlen($num) - $n - 1);
  }
  return $dec;
}
