<?php

/**
 * Initial definitions
 */
define('APESTER_AUTH_VAR', 'apester_auth_token');
define('APESTER_USER_ID_VAR', 'apester_user_id');
define('APESTER_USER_SERVICE_BASE_URL', 'https://users.qmerce.com');
define('APESTER_EDITOR_BASE_URL', 'https://editor.qmerce.com');

/**
 * Determines if Apester was initially configured.
 * @return bool
 */
function apester_is_configured() {
    return (bool) variable_get(APESTER_AUTH_VAR, null);
}


/**
 * Validates a given Apester authentication token
 * @param string $value
 * @return bool
 */
function apester_validate_token($value) {
    return (bool) preg_match('/^[0-9a-fA-F]{24}$/', $value);
}

/*
 * Returns the apester auth token
 * @return string
 */
function apester_return_auth_token() {
    return variable_get(APESTER_AUTH_VAR, null);
}

/**
 * Adds apester SDK to Drupal JS files as external asset
 */
function apester_add_sdk() {
    drupal_add_js('http://static.qmerce.com/js/sdk/v1.0.0/qmerce-sdk.js', 'external');
    drupal_add_css(drupal_get_path('module', 'apester') . '/public/css/modal.css');
}

/**
 * Adds Apester auth token when user has admin access
 */
function apester_add_token() {
    $auth_token = '';

    if (!user_access('access administration pages')) {
        $auth_token = apester_return_auth_token();
    }

    drupal_add_js(array(
        'apester' => array(
            'authToken' => $auth_token,
            'editorUrl' => APESTER_EDITOR_BASE_URL
        )
    ), 'setting');
}

/**
 * Implements hook_init().
 */
function apester_init() {
    apester_add_sdk();
    apester_add_token();

    if (apester_is_configured()) {
        return;
    }

    drupal_set_message(t('Apester Interactive Content is not configured yet, please configure it in ' . l('Apester Settings', 'admin/config/apester/settings')), 'warning');
}

/**
 * Implements hook_menu().
 */
function apester_menu() {
    $items['admin/config/apester'] = array(
        'title' => 'Apester',
        'description' => 'Configure Apester account',
        'position' => 'left',
        'weight' => -20,
        'access arguments' => array('access administration pages'),
        'page callback' => 'system_admin_menu_block_page',
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    );

    $items['admin/config/apester/settings'] = array(
        'title' => 'Apester Settings',
        'description' => 'Configure your Apester Authentication Token and other Apester related settings.',
        'position' => 'left',
        'weight' => -20,
        'access arguments' => array('access administration pages'),
        'page arguments' => array('apester_settings_admin'),
        'page callback' => 'drupal_get_form',
        'file' => 'inc/apester.admin.inc'
    );

    return $items;
}

/**
 *  Implements hook_block_info().
 */
function apester_block_info() {
    $blocks = array();

    $blocks['apester_automation'] = array(
        'info' => t('Apester Interactive Content Automation'),
        'cache' => DRUPAL_NO_CACHE
    );

    return $blocks;
}

/**
 *  Implements hook_block_view().
 */
function apester_block_view($delta = '') {
    $block = array();

    if ($delta !== 'apester_automation') {
        return $block;
    }

    $tag_composer = new ApesterTagComposer();

    $block['subject'] = t('Apester Interactive Content');
    $block['content'] = $tag_composer->composeAutomationTag();

    return $block;
}

/**
 * Implements hook_field_info().
 */
function apester_field_info() {
    return array(
        'field_apester_interaction' => array(
            'label' => t('Apester Interactive Content'),
            'description' => t('Enables a field for choosing and displaying Apester interactive content'),
            'default_widget' => 'apester_interaction_search',
            'default_formatter' => 'apester_field_formatter'
        )
    );
}

/**
 *  Implements hook_field_validate().
 */
function apester_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
    foreach($items as $delta => $item) {
        if (empty($item['interaction_id'])) {
            return;
        }

        if (!apester_validate_token($item['interaction_id'])) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
                'error' => 'field_apester_interaction_invalid',
                'message' => t('Interaction ID must be a valid Apester ID.')
            );
        }
    }
}

/**
 *  Implements hook_field_is_empty().
 */
function apester_field_is_empty($item, $field) {
    return empty($item['interaction_id']);
}

/**
 *  Implements hook_field_widget_info().
 */
function apester_field_widget_info() {
    return array(
        'apester_interaction_search' => array(
            'label' => 'Apester Interaction Finder',
            'field types' => array('field_apester_interaction')
        )
    );
}

/**
 *  Implements hook_field_widget_form().
 */
function apester_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
    $value = isset($items[$delta]['interaction_id']) ? $items[$delta]['interaction_id'] : '';
    $auth_token = apester_return_auth_token();
    $tag_composer = new ApesterTagComposer();

    $widget = $element;
    $widget['#delta'] = $delta;

    if ($instance['widget']['type'] === 'apester_interaction_search' && $auth_token) {
        $widget += array(
            '#suffix' => $tag_composer->composeEditorSuggestionsTag($auth_token),
            '#attributes' => array('class' => array('edit-apester-field-interaction')),
            '#type' => 'hidden',
            '#default_value' => $value,
            '#attached' => array(
                'js' => array(
                    drupal_get_path('module', 'apester') . '/public/js/field-apester-interaction.js',
                    drupal_get_path('module', 'apester') . '/public/js/apester-modal.js'
                )
            )
        );
    }

    $element['interaction_id'] = $widget;
    return $element;
}

/**
 *  Implements hook_field_formatter_info().
 */
function apester_field_formatter_info() {
    return array(
        'apester_field_formatter' => array(
            'label' => t('Simple formatter'),
            'field types' => array('field_apester_interaction')
        )
    );
}

/**
 *  Implements hook_field_formatter_view().
 */
function apester_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array();

    if (!$display['type'] === 'apester_field_formatter') {
        return $element;
    }

    foreach ($items as $delta => $item) {
        $element[$delta] = array(
            '#type' => 'html_tag',
            '#tag' => 'interaction',
            '#attributes' => array(
                'id' => $item['interaction_id']
            )
        );
    }

    return $element;
}
