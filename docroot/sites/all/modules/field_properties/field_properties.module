<?php

/**
 * @file
 * field_properties field main module implementation
 */

/**
 * Implements hook_field_info().
 */
function field_properties_field_info() {
  return array(
    'field_properties' => array(
      'label' => t('Properties'),
      'description' => t('This field stores arbitrary properties.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'field_properties_widget',
      'default_formatter' => 'field_properties_formatter',
      'property_type' => 'field_properties',
      'property_callbacks' => array('field_properties_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function field_properties_field_schema($field) {

  $columns = array(
    'name' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ),
    'type' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ),
    'value' => array(
      'type' => 'text',
      'size' => 'big',
      'not null' => FALSE,
    ),
  );

  return array(
    'columns' => $columns,
    'indexes' => array(
      'name' => array('name'),
      'type' => array('type'),
    ),
    'foreign keys' => array(),
  );
}

/**
 * Implements hook_field_validate().
 */
function field_properties_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (empty($item['type'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'field_properties_invalid_type',
        'message' => t('Invalid type'),
      );
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function field_properties_field_is_empty($item, $field) {
  if (empty($item['name']) && (string) $item['name'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function field_properties_field_widget_info() {
  return array(
    'field_properties_widget' => array(
      'label' => t('Properties Editor'),
      'field types' => array('field_properties'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function field_properties_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#description' => t('The name of the property. Leave an empty name to remove this property.'),
    '#default_value' => isset($items[$delta]['name']) ? $items[$delta]['name'] : NULL,
  );
  foreach (field_properties_types() as $type) {
    $field_properties_types_options[$type['name']] = $type['title'];
  }
  $plugin_names = array_keys($field_properties_types_options);
  $default = count($plugin_names) ? reset($plugin_names) : NULL;
  $element['type'] = array(
    '#title' => t('Type'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => $field_properties_types_options,
    '#default_value' => isset($items[$delta]['type']) ? $items[$delta]['type'] : $default,
  );
  $element['value'] = array(
    '#title' => t('Value'),
    '#type' => 'textarea',
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#rows' => 2,
  );
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function field_properties_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_formatter_info().
 */
function field_properties_field_formatter_info() {
  return array(
    'field_properties_formatter' => array(
      'label' => t('Properties Table'),
      'field types' => array('field_properties'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function field_properties_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $header = array(
    t('Name'),
    t('Type'),
    t('Value'),
  );

  $rows = array();

  foreach ($items as $delta => $item) {
    $row = array(
      $item['name'],
      $item['type'],
      $item['value'],
    );
    $rows[] = $row;
  }

  $element[0] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
  );

  return $element;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function field_properties_ctools_plugin_type() {
  $plugins['field_properties_types'] = array(
    'defaults' => array(
      'name' => NULL,
      'title' => NULL,
      'weight' => 0,
    ),
  );
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function field_properties_ctools_plugin_directory($module, $plugin) {
  if ($module == 'field_properties') {
    return 'plugins/' . $plugin;
  }
}


/**
 * Returns all 'type' plugins.
 */
function field_properties_types() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('field_properties', 'field_properties_types');
  uasort($plugins, 'ctools_plugin_sort');
  return $plugins;
}

/**
 * Additional callback to adapt the property info for field_properties fields.
 * @see entity_metadata_field_entity_property_info()
 */
function field_properties_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info'] = field_properties_property_field_item_info();

}

/**
 * Defines info for the properties of this field item data structure.
 */
function field_properties_property_field_item_info() {
  $properties['name'] = array(
    'type' => 'text',
    'label' => t('The name of the property'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['type'] = array(
    'type' => 'text',
    'label' => t('The type of the property'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['value'] = array(
    'type' => 'text',
    'label' => t('The value of the property'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $properties;
}
