<?php

/**
 * @file
 * Pull updates from Salesforce when a Salesforce object is updated.
 */

/**
 * Define pull queue name.
 */
define('SALESFORCE_PULL_QUEUE', 'salesforce_pull');

/**
 * Implements hook_cron().
 */
function salesforce_pull_cron() {
  $sfapi = salesforce_get_api();
  if ($sfapi->isAuthorized()) {
    salesforce_pull_get_updated_records();
    salesforce_pull_process_deleted_records();
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function salesforce_cron_queue_info() {
  $queues[SALESFORCE_PULL_QUEUE] = array(
    'worker callback' => 'salesforce_pull_process_records',
    // Set to a high max timeout in case pulling in lots of data from SF.
    'time' => 180,
  );
  return $queues;
}

/**
 * Pull updated records from Salesforce and place them in the queue.
 *
 * Executes a SOQL query based on defined mappings, loops through the results,
 * and places each updated SF object into the queue for later processing.
 */
function salesforce_pull_get_updated_records() {
  $queue = DrupalQueue::get(SALESFORCE_PULL_QUEUE);

  // Avoid overloading the processing queue and pass this time around if it's
  // over a configurable limit.
  if ($queue->numberOfItems() > variable_get('salesforce_pull_max_queue_size', 100000)) {
    return;
  }

  $sfapi = salesforce_get_api();
  foreach (salesforce_mapping_get_mapped_objects() as $type) {
    $mapped_fields = array();
    $mapped_record_types = array();

    // Iterate over each field mapping to determine our query parameters.
    foreach (salesforce_mapping_load_multiple(array('salesforce_object_type' => $type)) as $mapping) {
      foreach ($mapping->field_mappings as $field_map) {
        // Exclude field mappings that are only drupal to SF.
        if (in_array($field_map['direction'], array(SALESFORCE_MAPPING_DIRECTION_SYNC, SALESFORCE_MAPPING_DIRECTION_SF_DRUPAL))) {
          // Some field map types (Relation) store a collection of SF objects.
          if (is_array($field_map['salesforce_field']) && !isset($field_map['salesforce_field']['name'])) {
            foreach ($field_map['salesforce_field'] as $sf_field) {
              $mapped_fields[$sf_field['name']] = $sf_field['name'];
            }
          }
          // The rest of are just a name/value pair.
          else {
            $mapped_fields[$field_map['salesforce_field']['name']] = $field_map['salesforce_field']['name'];
          }
        }
      }

      if (!empty($mapped_fields) && $mapping->salesforce_record_type_default != SALESFORCE_MAPPING_DEFAULT_RECORD_TYPE) {
        foreach ($mapping->salesforce_record_types_allowed as $record_type) {
          if ($record_type) {
            $mapped_record_types[$record_type] = $record_type;
          }
        }
        // Add the RecordTypeId field so we can use it when processing the
        // queued SF objects.
        $mapped_fields['RecordTypeId'] = 'RecordTypeId';
      }
    }

    // There are no field mappings configured to pull data from Salesforce so
    // move on to the next mapped object. Prevents querying unmapped data.
    if (empty($mapped_fields)) {
      continue;
    }

    $soql = new SalesforceSelectQuery($type);
    // Convert field mappings to SOQL.
    $soql->fields = array('Id', 'LastModifiedDate');
    foreach ($mapped_fields as $field) {
      // Don't add the Id field to the SOQL query.
      if ($field == 'Id') {
        continue;
      }
      $soql->fields[] = $field;
    }

    // If no lastupdate, get all records, else get records since last pull.
    $sf_last_sync = variable_get('salesforce_pull_last_sync_' . $type, NULL);
    if ($sf_last_sync) {
      $last_sync = gmdate('Y-m-d\TH:i:s\Z', $sf_last_sync);
      $soql->addCondition('LastModifiedDate', $last_sync, '>');
    }

    // If Record Type is specified, restrict query.
    if (count($mapped_record_types) > 0) {
      $soql->addCondition('RecordTypeId', $mapped_record_types, 'IN');
    }

    // Execute query.
    $results = $sfapi->query($soql);
    $version_path = parse_url($sfapi->getApiEndPoint(), PHP_URL_PATH);

    if (!isset($results['errorCode'])) {
      // Write items to the queue.
      foreach ($results['records'] as $result) {
        $queue->createItem($result);
      }

      // Handle requests larger than the batch limit (usually 2000).
      $next_records_url = isset($results['nextRecordsUrl']) ?
        str_replace($version_path, '', $results['nextRecordsUrl']) :
        FALSE;
      while ($next_records_url) {
        $new_result = $sfapi->apiCall($next_records_url);
        if (!isset($new_result['errorCode'])) {
          // Write items to the queue.
          foreach ($new_result['records'] as $result) {
            $queue->createItem($result);
          }
        }
        $next_records_url = isset($new_result['nextRecordsUrl']) ?
          str_replace($version_path, '', $new_result['nextRecordsUrl']) : FALSE;
      }

      variable_set('salesforce_pull_last_sync_' . $type, REQUEST_TIME);
    }
    else {
      watchdog('Salesforce Pull', $results['errorCode'] . ':' . $results['message'], array(), WATCHDOG_ERROR);
    }
  }
}

/**
 * Process records in the queue.
 */
function salesforce_pull_process_records($sf_object) {
  // Get Mapping.
  $mapping_conditions = array(
    'salesforce_object_type' => $sf_object['attributes']['type'],
  );
  if (isset($sf_object['RecordTypeId']) && $sf_object['RecordTypeId'] != SALESFORCE_MAPPING_DEFAULT_RECORD_TYPE) {
    $mapping_conditions['salesforce_record_type'] = $sf_object['RecordTypeId'];
  }

  $sf_mappings = salesforce_mapping_load_multiple($mapping_conditions);

  foreach ($sf_mappings as $sf_mapping) {
    // Mapping object exists?
    $mapping_object = salesforce_mapping_object_load_by_sfid($sf_object['Id']);
    $exists = $mapping_object ? TRUE : FALSE;
    if ($exists && ($sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_UPDATE)) {
      try {
        $entity = entity_load_single($mapping_object->entity_type, $mapping_object->entity_id);
        if ($entity === FALSE) {
          $exists = FALSE;
          $message = t('Unable to update %type entity %label from Salesforce object %sfobjectid. Entity does not exist. Mapping removed, continuing with Create instead Update.',
            array(
              '%type' => $mapping_object->entity_type,
              '%label' => $mapping_object->entity_id,
              '%sfobjectid' => $sf_object['Id'],
            ));
          watchdog('Salesforce Pull', $message, array(), WATCHDOG_NOTICE);
          salesforce_set_message($message, 'status', FALSE);
          entity_delete('salesforce_mapping_object', $mapping_object->salesforce_mapping_object_id);
        }
        else {
          // Flag this entity as having been processed. This does not persist,
          // but is used by salesforce_push to avoid duplicate processing.
          $entity->salesforce_pull = TRUE;
          $entity_updated = isset($entity->updated) ? $entity->updated : $mapping_object->entity_updated;

          $sf_object_updated = strtotime($sf_object['LastModifiedDate']);
          if ($sf_object_updated > $entity_updated) {
            $wrapper = entity_metadata_wrapper($sf_mapping->drupal_entity_type, $entity);

            // Set fields values on the Drupal entity.
            salesforce_pull_map_fields($sf_mapping->field_mappings, $wrapper, $sf_object);

            // Update entity.
            $wrapper->save();

            // Update mapping object.
            $mapping_object->last_sync_message = t('Retrieved updates from Salesforce');
            $mapping_object->last_sync_status = SALESFORCE_MAPPING_STATUS_SUCCESS;
            $mapping_object->entity_updated = $mapping_object->last_sync = time();
            watchdog('Salesforce Pull',
              'Updated entity %label associated with Salesforce Object ID: %sfid',
              array(
                '%label' => $wrapper->label(),
                '%sfid' => $sf_object['Id'],
              )
            );
          }
        }
      }
      catch (Exception $e) {
        $message = t('Failed to update entity %label from Salesforce object %sfobjectid. Error: @msg',
          array(
            '%label' => $wrapper->label(),
            '%sfobjectid' => $sf_object['Id'],
            '@msg' => $e->getMessage(),
          )
        );
        watchdog('Salesforce Pull', $message, array(), WATCHDOG_ERROR);
        salesforce_set_message($message, 'error', FALSE);
        $mapping_object->last_sync_status = SALESFORCE_MAPPING_STATUS_ERROR;
        $mapping_object->last_sync_message = t('Processing failed');
        $mapping_object->last_sync = time();
      }
    }
    else {
      $exists = FALSE;
    }
    if (!$exists && $sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_CREATE) {
      try {
        // Create entity from mapping object and field maps.
        $entity_info = entity_get_info($sf_mapping->drupal_entity_type);

        // Define values to pass to entity_create().
        $values = array();
        if (isset($entity_info['entity keys']['bundle']) &&
          !empty($entity_info['entity keys']['bundle'])) {
          $values[$entity_info['entity keys']['bundle']] = $sf_mapping->drupal_bundle;
        }
        else {
          // Not all entities will have bundle defined under entity keys,
          // e.g. the User entity.
          $values[$sf_mapping->drupal_bundle] = $sf_mapping->drupal_bundle;
        }

        // See note above about flag.
        $values['salesforce_pull'] = TRUE;

        // Create entity.
        $entity = entity_create($sf_mapping->drupal_entity_type, $values);

        // Flag this entity as having been processed. This does not persist,
        // but is used by salesforce_push to avoid duplicate processing.
        $entity->salesforce_pull = TRUE;
        $wrapper = entity_metadata_wrapper($sf_mapping->drupal_entity_type, $entity);

        salesforce_pull_map_fields($sf_mapping->field_mappings, $wrapper, $sf_object);
        $wrapper->save();
        // Update mapping object.
        $last_sync_message = t('Retrieved new record from Salesforce');
        $last_sync_status = SALESFORCE_MAPPING_STATUS_SUCCESS;
        $entity_updated = time();
      }
      catch (Exception $e) {
        $message = $e->getMessage() . ' ' . t('Processing failed for entity %label associated with Salesforce Object ID: %sfobjectid',
            array(
              '%label' => $wrapper->label(),
              '%sfobjectid' => $sf_object['Id'],
            )
          );
        watchdog('Salesforce Pull', $message, array(), WATCHDOG_ERROR);
        salesforce_set_message('There were failures processing data from Salesforce. Please check the error logs.', 'error', FALSE);
        $last_sync_status = SALESFORCE_MAPPING_STATUS_ERROR;
        $last_sync_message = t('Processing failed for new record');
        $entity_updated = NULL;
      }

      // If no id exists, the insert failed and we cannot create a mapping
      // object. We are left with no choice but to throw an exception.
      list($entity_id) = entity_extract_ids($sf_mapping->drupal_entity_type, $entity);
      if (!$entity_id) {
        throw new Exception('Failed to create Drupal entity when processing data from Salesforce.');
      }

      // Create mapping object.
      $mapping_object = entity_create('salesforce_mapping_object', array(
        'salesforce_id' => $sf_object['Id'],
        'entity_type' => $sf_mapping->drupal_entity_type,
        'entity_id' => $entity_id,
        'entity_updated' => $entity_updated,
        'last_sync' => time(),
        'last_sync_message' => $last_sync_message,
        'last_sync_status' => $last_sync_status,
      ));

      watchdog('Salesforce Pull',
        'Created entity %label associated with Salesforce Object ID: %sfid',
        array(
          '%label' => $wrapper->label(),
          '%sfid' => $sf_object['Id'],
        )
      );

    }

    // Save our mapped objects.
    if ($mapping_object) {
      $mapping_object->last_sync_action = 'pull';
      $mapping_object->save();
    }
  }
}

/**
 * Process deleted records from salesforce.
 */
function salesforce_pull_process_deleted_records() {
  // Only the SOAP API supports getting deleted records.
  if (!module_exists('salesforce_soap')) {
    salesforce_set_message('Enable Salesforce SOAP to process deleted records');
    return;
  }
  $sfapi = salesforce_get_api();
  module_load_include('inc', 'salesforce_soap');
  $soap = new SalesforceSoapPartner($sfapi);

  // Load all unique SF record types that we have mappings for.
  foreach (array_reverse(salesforce_mapping_get_mapped_objects()) as $type) {
    $last_delete_sync = variable_get('salesforce_pull_delete_last_' . $type, REQUEST_TIME);
    $now = time();

    // SOAP getDeleted() restraint: startDate must be at least one minute
    // greater than endDate.
    $now = $now > $last_delete_sync + 60 ? $now : $now + 60;
    $last_delete_sync_sf = gmdate('Y-m-d\TH:i:s\Z', $last_delete_sync);
    $now_sf = gmdate('Y-m-d\TH:i:s\Z', $now);
    $deleted = $soap->getDeleted($type, $last_delete_sync_sf, $now_sf);
    if (!empty($deleted->deletedRecords)) {
      foreach ($deleted->deletedRecords as $record) {
        $mapping_object = salesforce_mapping_object_load_by_sfid($record->id);
        if ($mapping_object) {
          // Load and wrap the Drupal entity linked to the SF object.
          $entity = entity_load_single($mapping_object->entity_type, $mapping_object->entity_id);
          // Check if entity exists before processing delete.
          if ($entity) {
            $entity_wrapper = entity_metadata_wrapper($mapping_object->entity_type, $entity);

            // Load the mapping that manages these mapped objects.
            $sf_mapping = reset(salesforce_mapping_load_multiple(
              array(
                'salesforce_object_type' => $type,
                'drupal_entity_type' => $entity_wrapper->type(),
                'drupal_bundle' => $entity_wrapper->getBundle(),
              )
            ));

            // Only delete the mapped Drupal entity if the
            // SALESFORCE_MAPPING_SYNC_SF_DELETE flag is set.
            if (!empty($sf_mapping) && ($sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_DELETE)) {
              // Prevent processing by salesforce_push. We hate circular logic.
              $entity->salesforce_pull = TRUE;

              // Delete the mapped Drupal entity. Catch any exceptions as
              // we want to ensure the mapping object is deleted even in
              // case of an error.
              try {
                $entity_wrapper->delete();
              }
              catch(Exception $e) {
                watchdog_exception('salesforce_pull', $e);
              }

              watchdog('Salesforce Pull',
                'Deleted entity %label with ID: %id associated with Salesforce Object ID: %sfid',
                array(
                  '%label' => $entity_wrapper->label(),
                  '%id' => $mapping_object->entity_id,
                  '%sfid' => $record->id,
                )
              );
            }
          }


          // Delete mapping object.
          $mapping_object->delete();
        }
      }
    }
    variable_set('salesforce_pull_delete_last_' . $type, REQUEST_TIME);
  }
}

/**
 * Map field values.
 *
 * @param array $field_maps
 *   Array of field maps.
 * @param object $entity_wrapper
 *   Entity wrapper object.
 * @param object $sf_object
 *   sObject of the Salesforce record.
 */
function salesforce_pull_map_fields($field_maps, &$entity_wrapper, $sf_object) {
  foreach ($field_maps as $field_map) {
    if ($field_map['direction'] == 'sync' || $field_map['direction'] == 'sf_drupal') {

      $drupal_fields_array = explode(':', $field_map['drupal_field']['fieldmap_value']);
      $parent = $entity_wrapper;
      foreach ($drupal_fields_array as $drupal_field) {
        if ($parent instanceof EntityListWrapper) {
          $child_wrapper = $parent->get(0)->{$drupal_field};
        }
        else {
          $child_wrapper = $parent->{$drupal_field};
        }
        $parent = $child_wrapper;
      }
      $fieldmap_type = salesforce_mapping_get_fieldmap_types($field_map['drupal_field']['fieldmap_type']);
      $value = call_user_func($fieldmap_type['pull_value_callback'], $parent, $sf_object, $field_map);

      // Allow this value to be altered before assigning to the entity.
      drupal_alter('salesforce_pull_entity_value', $value, $field_map, $sf_object);
      if (isset($value)) {
        // @TODO: might wrongly assumes an individual value wouldn't be an
        // array.
        if ($parent instanceof EntityListWrapper && !is_array($value)) {
          $parent->offsetSet(0, $value);
        }
        else {
          $parent->set($value);
        }
      }
    }
  }
}
