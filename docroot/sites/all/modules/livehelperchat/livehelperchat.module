<?php

/*
 * @file
 * Drupal Module: livehelperchat
 * Adds the required Javascript for livehelperchat chat to the bottom of all your Drupal pages
 */

/**
 * Implementation of hook_permission().
 *
 * @return array
 *   Array of available permissions
 */
function livehelperchat_permission() {
  return array(
    'administer livehelperchat' => array(
      'title' => t('Administer livehelperchat module'),
      'description' => t('Permission to change livehelperchat settings')
    ),
    'use PHP for livehelperchat visibility' => array(
      'title' => t('Use PHP for livehelperchat visibility'),
      'description' => t('Permission to set PHP conditions to customize livehelperchat visibility on various pages')
    )
  );
}

/**
 * Implementation of hook_menu().
 *
 * @return array
 *   structured associative array of menu items.
 */
function livehelperchat_menu() {
  $items['admin/config/system/livehelperchat'] = array(
    'title' => 'Live Helper Chat',
    'description' => 'Configure the settings used to generate your Live helper chat code.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livehelperchat_admin_settings_form'),
    'access arguments' => array('administer livehelperchat'),
    'file' => 'livehelperchat.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_page_alter().
 *
 * @global object $user
 *   full user object for current user
 * @param  $page
 *   nested array of renderable elements that make up the page.
 */
function livehelperchat_page_alter(&$page) {
  global $user, $language;
  $url = variable_get('livehelperchat_url', '');

  // There definitely should be a better way... Hope LHC ultimately turns to real lang codes
  $language_mapping = array(
    'fi' => 'fin',
    'en' => '',
    'lt' => 'lit',
    'hr' => 'hrv',
    'es' => 'esp',
    'da' => 'dnk',
    'pt' => 'por',
    'nl' => 'nld',
    'ar' => 'ara',
    'de' => 'ger',
    'pl' => 'pol',
    'ru' => 'rus',
    'it' => 'ita',
    'fr' => 'fre',
    'zh' => 'chn',
    'cs' => 'cse',
    'no' => 'nor',
    'tr' => 'tur',
    'vi' => 'vnm',
    'id' => 'idn',
    'sv' => 'sve',
    'fa' => 'per',
    'el' => 'ell',
    'ro' => 'rou',
    'bg' => 'bgr',
    'th' => 'tha',
    'ka' => 'geo',
    'sq' => 'alb',
//    '' => 'site_admin',
  );
  $lang = ((!empty($language_mapping[$language->language])) ? $language_mapping[$language->language] : 'eng');
  $options = array();
  if ($val = variable_get('livehelperchat_widget_height', FALSE)) {
    $options['widget_height'] = $val;
  }
  if ($val = variable_get('livehelperchat_widget_width', FALSE)) {
    $options['widget_width'] = $val;
  }
  if ($val = variable_get('livehelperchat_popup_height', FALSE)) {
    $options['popup_height'] = $val;
  }
  if ($val = variable_get('livehelperchat_popup_width', FALSE)) {
    $options['popup_width'] = $val;
  }
  $options_tmp = array();
  foreach ($options as $key => $value) {
    $options_tmp[] = $key . ':' . $value;
  }
  $options_str = '{' . implode(',', $options_tmp) . '}';

  $urloptions = array();
  if ($val = variable_get('livehelperchat_click_internal', FALSE)) {
    $urloptions['click'] = 'internal';
  }
  if ($val = variable_get('livehelperchat_position', FALSE)) {
    $urloptions['position'] = $val;
  }
  if (variable_get('livehelperchat_minimize_action', FALSE) == 'minimize') {
    $urloptions['ma'] = 'br';
  }
  if ($val = variable_get('livehelperchat_hide_offline', FALSE)) {
    $urloptions['hide_offline'] = 'true';
  }
  if ($val = variable_get('livehelperchat_check_messages', FALSE)) {
    $urloptions['check_operator_messages'] = 'true';
  }

  if ($val = variable_get('livehelperchat_position_fromtop', FALSE)) {
    $urloptions['top'] = $val;
  }
  if ($val = variable_get('livehelperchat_position_unit', FALSE)) {
    $urloptions['units'] = $val;
  }
  if ($val = variable_get('livehelperchat_offline_leavemessage', FALSE)) {
    $urloptions['leaveamessage'] = 'true';
  }
  if ($val = variable_get('livehelperchat_department', FALSE)) {
    $urloptions['department'] = $val;
  }
  if ($val = variable_get('livehelperchat_identifier', FALSE)) {
    $urloptions['identifier'] = $val;
  }
  if ($val = variable_get('livehelperchat_disable_proactive', FALSE)) {
    $urloptions['disable_pro_active'] = 'true';
  }
  if ($val = variable_get('livehelperchat_nonresponsive_widget', FALSE)) {
    $urloptions['noresponsive'] = 'true';
  }
  $urloptions_tmp = array();
  foreach ($urloptions as $key => $value) {
    $urloptions_tmp[] = '(' . $key . ')/' . $value;
  }
  $urloptions_str = implode('/', $urloptions_tmp);

  // 1. Check if the livehelperchat account number has a value.
  // 2. Add JS based on visibility value.
  // 3. Check if we should add the JS for the currently active user's role.
  if (!empty($url) && _livehelperchat_visibility_pages() && _livehelperchat_visibility_user_test($user)) {
    $script = <<<EOS
var LHCChatOptions = {};
LHCChatOptions.opt = ${options_str};
(function() {
  var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
  var referrer = (document.referrer) ? encodeURIComponent(document.referrer.substr(document.referrer.indexOf('://')+1)) : '';
  var location  = (document.location) ? encodeURIComponent(window.location.href.substring(window.location.protocol.length)) : '';
  po.src = '//${url}/index.php/{$lang}/chat/getstatus/${urloptions_str}?r='+referrer+'&l='+location;
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
})();
EOS;
    drupal_add_js($script, array('type' => 'inline', 'scope' => 'footer'));
  }
}

/**
 * Implementation of hook_requirements().
 *
 * @param string $phase
 *   either 'install' or 'runtime' depending on install or status report page.
 * @return array
 *   associative array of requirements
 */
function livehelperchat_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    // Raise warning if Live Helper Chat URL has not been set
    if (variable_get('livehelperchat_url', FALSE) == FALSE) {
      $requirements['livehelperchat'] = array(
        'title' => t('Live Helper Chat module'),
        'description' => t('Live Helper Chat module has not been configured yet. Please configure its settings from the <a href="@url">Live Helper Chat settings page</a>.', array('@url' => url('admin/settings/livehelperchat'))),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Not configured'),
      );
    }
  }
  return $requirements;
}

/**
 * Utility function to determing visibility.
 * Based on visibility setting this function returns TRUE if livehelperchat code should
 * be added to the current page and otherwise FALSE.
 *
 * @staticvar boolean $page_match
 *   whether page is visible (true) or not (false).
 * @return boolean
 *   a decision on visibility, true/false
 */
function _livehelperchat_visibility_pages() {
  static $page_match;
  // Cache visibility setting in hook_init for hook_footer.
  if (!isset($page_match)) {
    $visibility = variable_get('livehelperchat_visibility', 0);
    $pages = variable_get('livehelperchat_pages', '');
    // Match path if necessary.
    if (!empty($pages)) {
      if ($visibility < 2) {
        $path = drupal_get_path_alias($_GET['q']);
        // Compare with the internal and path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the block is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($pages);
      }
    }
    else {
      $page_match = TRUE;
    }
  }
  return $page_match;
}

/**
 * Utility function to perform tracking visibility check for an user object.
 *
 * @param object $account
 *   a user object containing an array of roles to check.
 * @return boolean
 *   a decision on if the current user is being tracked by livehelperchat.
 */
function _livehelperchat_visibility_user_test($account) {
  $enabled = FALSE;
  // Is current user a member of a role that should be tracked?
  if (_livehelperchat_visibility_roles($account)) {
    $enabled = TRUE;
  }
  return $enabled;
}

/**
 * Based on visibility setting this function returns TRUE if livehelperchat code should
 * be added for the current role and otherwise FALSE.
 *
 * @param object $account
 *   a full user object.
 * @return boolean
 *   a decision on visibility, true/false
 */
function _livehelperchat_visibility_roles($account) {
  $enabled = TRUE;
  $roles = variable_get('livehelperchat_roles', array());
  if (array_sum($roles) > 0) {
    // One or more roles are selected for tracking.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one role selected in admin settings?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that is selected in admin settings.
        $enabled = FALSE;
        break;
      }
    }
  }
  return $enabled;
}
