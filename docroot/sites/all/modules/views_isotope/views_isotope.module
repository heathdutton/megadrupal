<?php
/**
 * @file
 * Load the isotope library and provide configuration and theme options.
 */

define('VIEWS_ISOTOPE_CDN_PATH', 'http://cdnjs.cloudflare.com/ajax/libs/jquery.isotope/2.0.0/isotope.pkgd.min.js');
define('VIEWS_ISOTOPE_FILENAME', 'isotope.pkgd.min.js');

/**
 * Implements hook_permission().
 */
function views_isotope_permission() {
  return array(
    'administer isotope' => array(
      'title' => t('Administer Isotope Configuration'),
      'description' => t('Set configuration options for Isotope'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_views_isotope_preset API.
 */
function views_isotope_ctools_plugin_api($owner, $api) {
  if ($owner == 'views_isotope' && $api == 'default_isotope_configurations') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_default_views_isotope_preset().
 *
 * Provide a couple of default presets.
 */
function views_isotope_default_isotope_configuration() {
  $export = array();
  $config = new stdClass();
  $config->api_version = 1;
  $config->name = 'isotope_default_config';
  $config->admin_title = 'Default config';
  $config->layoutMode = 'masonry';
  $config->transitionDuration = NULL;
  $config->isFitWidth = NULL;
  $config->isHorizontal = NULL;
  $config->stamp = NULL;
  $config->horizontalAlignment = NULL;
  $config->verticalAlignment = NULL;

  // If imagesLoaded is available, add it by default.
  if (views_isotope_check_additional_libraries('imagesLoaded')) {
    $config->plugins = array('imagesLoaded');
  }
  else {
    $config->plugins = array();
  }

  $export['isotope_default_config'] = $config;
  return $export;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function views_isotope_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Convert the name of a config into a JSON representation.
 *
 * Style as per http://isotope.metafizzy.co/#initialize-in-html.
 */
function views_isotope_get_config_json($config, array $additional_attributes) {
  ctools_include('export');
  $plugin = ctools_export_crud_load('isotope_configurations', $config);
  $allowed_attributes = array(
    'layoutMode',
    'transitionDuration',
    'isFitWidth',
    'isHorizontal',
    'stamp',
    'horizontalAlignment',
    'verticalAlignment',
  );

  // Default attributes.
  $attributes = array(
    'columnWidth' => 200,
    'itemSelector' => '.isotope-element',
  ) + $additional_attributes;

  foreach ($plugin as $key => $value) {
    if (in_array($key, $allowed_attributes)) {
      $attributes[$key] = $value;
    }
  }
  return drupal_json_encode($attributes);
}

/**
 * Check for the library and return the appropriate scope.
 */
function views_isotope_check_library() {
  // @TODO: Cache the result.
  if (function_exists('libraries_get_path') && file_exists(libraries_get_path('isotope') . '/' . VIEWS_ISOTOPE_FILENAME) === TRUE) {
    // Library has been installed correctly, so use it.
    return 'library';
  }
  if (views_isotope_check_url(VIEWS_ISOTOPE_CDN_PATH)) {
    // Library has not been installed correctly, but the cdn is available.
    return 'cdn';
  }
  // Neither option is available. Throw an error.
  return FALSE;
}

/**
 * Check for all additional libraries.
 *
 * Return the ones that have been detected, or an empty array. If passed a
 * specific libname to check for, will return true or false.
 */
function views_isotope_check_additional_libraries($libname = FALSE) {
  $detected_libraries = array();

  $libraries = array(
    'cellsByRow' => 'cells-by-row.js',
    'packery' => 'packery-mode.pkgd.min.js',
    'masonryHorizontal' => 'masonry-horizontal.js',
    'fitColumns' => 'fit-columns.js',
    'cellsByColumn' => 'cells-by-column.js',
    'horizontal' => 'horizontal.js',
    'imagesLoaded' => 'imagesloaded.pkgd.min.js',
    'infinite-scroll' => 'jquery.infinitescroll.js',
    'jquery-bbq' => 'jquery.ba-bbq.min.js',
  );

  if (function_exists('libraries_get_path')) {
    foreach ($libraries as $lib_name => $lib_filename) {
      if (file_exists(libraries_get_path('isotope') . '/' . $lib_filename) === TRUE || file_exists(libraries_get_path($lib_name) . '/' . $lib_filename) === TRUE) {
        // Checks both for files inside the "isotope" folder and files inside a
        // plugin-named folder.
        $detected_libraries[$lib_filename] = $lib_name;
      }
    }
  }

  if ($libname && in_array($libname, $detected_libraries)) {
    return TRUE;
  }
  elseif ($libname) {
    return FALSE;
  }

  return $detected_libraries;
}

/**
 * Function to add the right version of the js file.
 */
function views_isotope_addjs() {
  $isotope_scope = views_isotope_check_library();
  if ($isotope_scope == 'library') {
    drupal_add_js(libraries_get_path('isotope') . '/' . VIEWS_ISOTOPE_FILENAME);
  }
  elseif ($isotope_scope == 'cdn') {
    drupal_add_js(VIEWS_ISOTOPE_CDN_PATH, 'external');
  }
}

/**
 * Helper function to check if a url exists.
 */
function views_isotope_check_url($url) {
  $header_response = get_headers($url, 1);
  if (strpos($header_response[0], "200") === FALSE) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Strip all special chars to make value suitable for css class name.
 *
 * @param string $raw
 *   The raw value to be sanitized.
 *
 * @return string
 *   The sanitized value.
 */
function views_isotope_sanitize($raw) {
  $safe = $raw;

  // Transliterate other language chars to latin.
  if (function_exists('transliteration_get')) {
    $safe = transliteration_get($safe, '?', language_default('language'));
  }

  // Basic class-name rules.
  $safe = strtolower($safe);
  $safe = preg_replace('/[^a-z0-9]/s', '-', $safe);
  $safe = preg_replace('/-{2,}/', '-', $safe);

  // Allow other modules to modify it with hook_views_isotope_sanitize_alter().
  drupal_alter('views_isotope_sanitize', $safe, $raw);

  return $safe;
}

/**
 * Implements hook_theme().
 *
 * Defines the theming capabilities provided by this module.
 *
 * A default 'instance' of NULL means an optionset should apply to all instances
 * on the page, unless restricted to one or more.
 */
function views_isotope_theme($existing, $type, $theme, $path) {
  return array(
    'isotope_grid' => array(
      'variables' => array(
        'config' => 'isotope_default_config',
        'items' => array(),
        'instance' => NULL,
      ),
    ),
    'isotope_filter' => array(
      'variables' => array(
        'items' => array(),
        'instance' => NULL,
        'filtername' => 'filter',
        'filtertitle' => NULL,
      ),
    ),
    'isotope_sorter' => array(
      'variables' => array(
        'sorts' => array(),
        'original' => NULL,
        'instance' => NULL,
      ),
    ),
  );
}

/**
 * Default theme implementation for the grid.
 *
 * @param array $vars
 *   Variables for theming.
 *
 * @return string
 *   Markup.
 */
function theme_isotope_grid(array $vars) {
  // Add the sorting options to the initial configuration.
  $additional_config = array('getSortData' => array());
  foreach ($vars['items'] as $item) {
    foreach ($item['data'] as $key => $value) {
      $additional_config['getSortData'][$key] = '.' . $key;
    }
  }

  // Retrieve the desired configuration (plus sorting options).
  $config = views_isotope_get_config_json($vars['config'], $additional_config);

  // Make sure the instance name is unique per page load.
  $global_instances = &drupal_static(__FUNCTION__);
  $global_instances = isset($global_instances) ? $global_instances : array();
  if (!empty($vars['instance']) && !in_array($vars['instance'], $global_instances)) {
    $instance_name = $vars['instance'];
  }
  else {
    for ($i = 0; $i >= 0; $i++) {
      if (!in_array($i, $global_instances)) {
        $instance_name = $i;
        // Break the infinite loop when successful.
        break;
      }
    }
  }
  $global_instances[] = $instance_name;
  $instance = 'isotope-instance-' . $instance_name;

  $items = array(
    array('data' => '', 'class' => array('isotope-grid-sizer')),
    array('data' => '', 'class' => array('isotope-gutter-sizer')),
  );

  foreach ($vars['items'] as $item) {
    $sorts = '';
    foreach ($item['data'] as $key => $value) {
      $item['data'][$key] = $value = views_isotope_sanitize($value);
      $sorts .= '<div class="sort-data ' . $key . '">' . $value . '</div>';
    }
    $classes = array_values($item['data']);
    $classes[] = 'isotope-element';
    $items[] = array(
      'data' => $item['value'] . $sorts,
      'class' => $classes,
    );
  }

  $return = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#type' => 'ul',
    '#attributes' => array(
      'class' => 'isotope-container js-isotope',
      'id' => $instance,
      'data-isotope-options' => $config,
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'views_isotope') . '/views_isotope.js'),
    ),
  );

  views_isotope_addjs();
  return drupal_render($return);
}

/**
 * Default theme implementation for the filter list.
 *
 * @param array $vars
 *   Variables for theming.
 *
 * @return string
 *   Markup.
 */
function theme_isotope_filter(array $vars) {
  $attributes['class'] = 'isotope-options option-set clearfix';
  if (!empty($vars['instance'])) {
    $attributes['data-instance-id'] = 'isotope-instance-' . $vars['instance'];
  }
  if (!empty($vars['filtername'])) {
    $attributes['data-filter-group'] = $vars['filtername'];
  }

  $title = !empty($vars['filtertitle']) ? $vars['filtertitle'] : NULL;

  $items[] = l(t('All'), '', array(
    'attributes' => array(
      'class' => 'filterbutton',
      'data-filter' => '',
    ),
    'fragment' => 'filter',
    'external' => TRUE,
  ));

  foreach ($vars['items'] as $key => $label) {
    $key = views_isotope_sanitize($key);
    $items[] = l($label, '', array(
      'attributes' => array(
        'class' => 'filterbutton',
        'data-filter' => '.' . $key,
      ),
      'fragment' => 'filter',
      'external' => TRUE,
      'html' => TRUE,
    ));
  }

  $return = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#type' => 'ul',
    '#title' => $title,
    '#attributes' => $attributes,
  );

  return drupal_render($return);
}

/**
 * Default theme implementation for the sorting list.
 *
 * @param array $vars
 *   Variables for theming.
 *
 * @return string
 *   Markup.
 */
function theme_isotope_sorter(array $vars) {
  $attributes['class'] = 'isotope-options option-set sorts clearfix';
  if (!empty($vars['instance'])) {
    $attributes['data-instance-id'] = 'isotope-instance-' . $vars['instance'];
  }

  if (!empty($vars['original'])) {
    $vars['sorts'] = array($vars['original'] => 'original-order') + $vars['sorts'];
  }

  foreach ($vars['sorts'] as $key => $value) {
    $sort = is_array($value) ? implode(',', $value) : $value;
    $label = is_numeric($key) ? $sort : $key;
    $items[] = l($label, '', array(
      'attributes' => array(
        'class' => 'sorterbutton',
        'data-sort-by' => $sort,
      ),
      'fragment' => 'sorter',
      'external' => TRUE,
      'html' => TRUE,
    ));
  }

  $return = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#type' => 'ul',
    '#title' => t('Sort By'),
    '#attributes' => $attributes,
  );

  return drupal_render($return);
}
