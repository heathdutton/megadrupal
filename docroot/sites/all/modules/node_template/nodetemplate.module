<?php


/**
 * Implementation of hook_help().
 */
function nodetemplate_help($section)
{
    switch ($section) {
        case 'admin/help#nodetemplate':
            $output = '<p>' . t('The node template module allows users to make any existing node and use it as a template. The authorship is set to the current user, the menu and url aliases are reset, and the words "Clone of" are inserted into the title to remind you that you are not editing the original node.') . '</p>';
            $output .= '<p>' . t('Users with the "node template" permission can utilize this functionality. A tab named "Set template" will appear on every editable pages. Once you click this tab you have <em>already</em> created a new node that is a copy of the node you were viewing, and you will be redirected to an edit screen for that new node.') . '</p>';
            return $output;
        case 'admin/modules#description':
            return t('Allows users to duplicate an existing node and set it as a template.');
    }
}

/**
 * Implementation of hook_perm().
 */
function nodetemplate_perm()
{
    return array(
        'access node template'
    );
}

/**
 * Implementation of hook_menu().
 */
function nodetemplate_menu()
{
    $items = array();
    
    //   $access = (user_access('access node template') && filter_access($node->format) && node_access('create',$node->type));
    $items['node/%node/template'] = array(
        'title' => t('Set template'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'nodetemplate_confirm',
            1
        ),
        'access arguments' => array(
            'access node template'
        ),
        'type' => MENU_LOCAL_TASK,
        'weight' => 5
    );
    
    $items['node/%node/template/duplicate'] = array(
        'title' => 'Delete',
        'type' => MENU_CALLBACK,
        'page callback' => 'duplicate_node',
        'page arguments' => array(
            1
        ),
        'access arguments' => array(
            'access node template'
        )
    );
    
    $items['node/%node/template/delete'] = array(
        'title' => 'Delete',
        'type' => MENU_CALLBACK,
        'page callback' => 'nodetemplate_delete',
        'page arguments' => array(
            1
        ),
        'access arguments' => array(
            'access node template'
        )
    );
    
    $items['admin/config/content/nodetemplate'] = array(
        'title' => t('Node templates'),
        'description' => t('Configure how node templates could be duplicated and manage node templates in the system'),
        'page callback' => 'nodetemplate_admin',
        'access arguments' => array(
            'access node template'
        )
    );
    
    $items['admin/config/content/nodetemplate/list'] = array(
        'title' => t('List'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10
    );
    
    $items['admin/config/content/nodetemplate/configure'] = array(
        'title' => t('Configure'),
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'nodetemplate_configure',
        'access arguments' => array(
            'access node template'
        )
    );
    
    return $items;
}

/**
 *  Menu callback: prompt the user to confirm the operation
 */
function nodetemplate_confirm($form, &$form_state, $node)
{
    
    if (variable_get('node_template_without_confirm', FALSE)) {
        if (variable_get('node_template_without_clone', true)) {
            $existed_node = db_select('node_template')->condition('nid', $node->nid, '=')->countQuery()->execute()->fetchField();
            if ($existed_node > 0) {
                db_update('node_template')->fields(array(
                    'is_template' => 1
                ))->condition('nid', $node->nid, '=')->execute();
            } else {
                db_insert('node_template')->fields(array(
                    'nid' => $node->nid,
                    'is_template' => 1
                ))->execute();
            }
            drupal_goto('node/' . $node->nid);
        } else {
            duplicate_node($node);
        }
        //         drupal_set_message(t('A new node template has been defined sucessfully.'));
        return "";
    } else {
        $description = (variable_get('node_template_without_clone', true)) ? t('This action will set the current node as template without duplicating it now, and then you can duplicate the node later.') : t('This action will create a new node or a set of book pages, and then you will be redirected to editing the new node.');
        
        $form['nid'] = array(
            '#type' => 'value',
            '#value' => $node->nid
        );
        drupal_set_title(t('Set template'));
        return confirm_form($form, t('Do you really want to set %title as a template?', array(
            '%title' => $node->title
        )), 'node/' . $node->nid, $description, t('Next'), t('Cancel'));
    }
}

/**
 *  Handle confirm form submission
 */
function nodetemplate_confirm_submit($form, &$form_state)
{
    if ($form_state['values']['confirm']) {
        $nid = $form_state['values']['nid'];
        if (variable_get('node_template_without_clone', true)) {
            $existed_node = db_select('node_template')->condition('nid', $nid, '=')->countQuery()->execute()->fetchField();
            if ($existed_node > 0) {
                db_update('node_template')->fields(array(
                    'is_template' => 1
                ))->condition('nid', $nid, '=')->execute();
            } else {
                db_insert('node_template')->fields(array(
                    'nid' => $nid,
                    'is_template' => 1
                ))->execute();
            }
            drupal_set_message(t('A new node template has been defined sucessfully.'));
            $form_state['redirect'] = 'node/' . $nid;
        } else {
            duplicate_node(node_load($nid));
        }
    }
}

/**
 *  Clones a node
 */
function duplicate_node($node)
{
    global $user;
    $new_node_prefix = variable_get('new_node_prefix', t('Clone of '));
    $nid             = $node->nid;
    
    $existed_node = db_select('node_template')->condition('nid', $nid, '=')->countQuery()->execute()->fetchField();
    if ($existed_node > 0) {
        db_update('node_template')->fields(array(
            'is_template' => 1
        ))->condition('nid', $nid, '=')->execute();
    } else {
        db_insert('node_template')->fields(array(
            'nid' => $nid,
            'is_template' => 1
        ))->execute();
    }
    
    $rootNode = clone $node;
    if ($node->type == "book" && variable_get('node_template_with_child', true)) {
        book_save_new_node('new', $node);
        // now we have a new parent node
        book_traverse($node->nid, $rootNode->book['mlid'], $node->book['mlid']);
        drupal_goto('node/' . $node->nid . '/edit');
        
    } else {
        $node->nid     = null;
        $node->is_new  = true;
        $node->vid     = 0;
        $node->created = 0;
        $node->menu    = null;
        $node->path    = null;
        $node->title   = $new_node_prefix . $node->title;
        
        if (variable_get('clone_reset_' . $node->type, FALSE)) {
            $node_options = variable_get('node_options_' . $node->type, array(
                'status',
                'promote'
            ));
            // fill in the default values
            foreach (array(
                'status',
                'promote',
                'sticky',
                'revision'
            ) as $key) {
                $node->$key = in_array($key, $node_options);
            }
        }
        node_save($node);
        if ($node->type == "book") {
            $node->book['bid'] = 'new';
            book_node_insert($node);
        }
        drupal_goto('node/' . $node->nid . '/edit');
    }
}

// save the new node of a book
function book_save_new_node($bid, $node, $plid = null)
{
    $new_node_prefix = variable_get('new_node_prefix', t('Clone of '));
    $node->nid       = null;
    $node->is_new    = true;
    $node->vid       = 0;
    $node->created   = 0;
    $node->menu      = null;
    $node->path      = null;
    $node->title     = $new_node_prefix . $node->title;
    
    if (variable_get('clone_reset_' . $node->type, FALSE)) {
        $node_options = variable_get('node_options_' . $node->type, array(
            'status',
            'promote'
        ));
        // fill in the default values
        foreach (array(
            'status',
            'promote',
            'sticky',
            'revision'
        ) as $key) {
            $node->$key = in_array($key, $node_options);
        }
    }
    node_save($node);
    $node->book['bid'] = $bid;
    if (!empty($plid)) {
        $node->book['plid'] = $plid;
    }
    book_node_insert($node);
    return $node->book['mlid'];
}
/**
 *  find all the children of a book node
 */
function book_traverse($bid, $root_mlid, $new_root_mlid)
{
    // get all children ids and iterate them
    $query = db_select('book', 'b')->fields('b', array(
        'nid'
    ));
    $query->join('menu_links', 'ml', 'ml.mlid = b.mlid');
    $result = $query->condition('ml.plid', $root_mlid)->execute();
    
    foreach ($result as $row) {
        $node       = node_load($row->nid);
        $savenode   = clone $node;
        $saved_mlid = book_save_new_node($bid, $savenode, $new_root_mlid);
        if (!empty($node->book['has_children'])) {
            book_traverse($bid, $node->book['mlid'], $saved_mlid);
        }
    }
}


/********************************************************************
 * Module Functions :: Controllers
 ********************************************************************/

function nodetemplate_admin()
{
    global $user;
    
    $title = t('Node templates') . ' | ' . $user->name;
    drupal_set_title($title);
    $output = nodetemplate_list();
    return $output;
}


/********************************************************************
 * Module Functions :: Views
 ********************************************************************/

/**
 * The default admin interface is a list of content.
 */
function nodetemplate_list()
{
    global $user;
    $maxnodes = variable_get('node_list_maxnodes', 50);
    
    if (!is_numeric($maxnodes)) {
        $maxnodes = 50;
    }
    
    // build the combined template listing
    $header = array(
        array(
            'data' => t('Type'),
            'field' => 'type'
        ),
        array(
            'data' => t('Title'),
            'field' => 'title'
        ),
        array(
            'data' => t('Owner'),
            'field' => 'uid'
        ),
        array(
            'data' => t('Published'),
            'field' => 'status'
        ),
        array(
            'data' => t('Modified'),
            'field' => 'changed',
            'sort' => 'desc'
        ),
        array(
            'data' => t('Operations'),
            'colspan' => 2
        )
    );
    
    $query = db_select('node', 'n');
    $query->innerjoin('node_template', 's', 'n.nid = s.nid');
    $query->condition('s.is_template', 1, '=')->fields('n', array(
        'nid',
        'uid',
        'type',
        'title',
        'status',
        'changed'
    ));
    $query  = $query->extend('PagerDefault')->extend('TableSort')->orderByHeader($header)->limit($maxnodes);
    $result = $query->execute();
    //   $result = pager_query($sql . tablesort_sql($header), $maxnodes, 0, $count_sql);
    
    $rows = array();
    //   while ($row = db_fetch_object($result)) {    
    foreach ($result as $row) {
        // Duplicate permissions are set by the nodetype's access hook.
        // This approach is part of Drupal's core design.
        $can_duplicate = FALSE;
        
        //Check the nodetype's access hook.
        $function = 'node_access';
        
        //         if ($flexinode_enabled && strstr($function, 'flexinode-')) {
        //             $function = 'flexinode_access';
        //         } elseif ($cck_enabled && strstr($function, 'content_')) {
        //             $function = 'content_access';
        //         }
        
        if (function_exists($function)) {
            $can_duplicate = $function('create', $row->type) ? true : false;
        }
        
        // the name of the owner of this node
        $name   = ($user->uid == $row->uid) ? $user->name : db_result(db_query('SELECT name FROM {users} WHERE uid = %d', $row->uid));
        $rows[] = array(
            node_type_get_name($row->type),
            l($row->title, "node/$row->nid"),
            $name,
            $row->status ? t('yes') : t('no'),
            format_date($row->changed, 'small'),
            $can_duplicate ? l(t('duplicate'), "node/$row->nid/template/duplicate") : '',
            l(t('delete'), "node/$row->nid/template/delete")
        );
    }
    
    $output = "";
    if (count($rows) > 0) {
        //         $pager = theme('pager', null, $maxnodes, 0);
        //         if (!empty($pager)) {
        //             $rows[] = array(
        //                 array(
        //                     'data' => $pager,
        //                     'colspan' => 8
        //                 )
        //             );
        //         }
        
        $table = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows
        );
        $output .= drupal_render($table);
        
    } else {
        $output .= t('You have no node template defined yet.');
    }
    
    return $output;
}

/**
 * The configuration page.
 */
function nodetemplate_configure_form($node, &$form_state)
{
    $form = array();
    
    $form['heading'] = array(
        '#value' => t('Configuration options for the node template module:')
    );
    
    $form['new_node_prefix'] = array(
        '#type' => 'textfield',
        '#title' => t('Prefix for new duplicated node'),
        '#description' => t('When a new node is duplicated, the prefix defined here will be added to the new title'),
        '#default_value' => variable_get('new_node_prefix', t('Clone of '))
    );
    
    $form['node_template_without_confirm'] = array(
        '#type' => 'checkbox',
        '#title' => t('Set a node as template needs no confirmation'),
        '#default_value' => variable_get('node_template_without_confirm', FALSE),
        '#description' => t('If this is set, a new node will be created immediately after clicking the "set template" tab when viewing a node.')
    );
    
    $form['node_template_without_clone'] = array(
        '#type' => 'checkbox',
        '#title' => t('Set a node as template but without duplicating the node'),
        '#default_value' => variable_get('node_template_without_clone', true),
        '#description' => t('If this is set, a new node will be created immediately after clicking the "set template" tab when viewing a node.')
    );
    
    $form['node_template_with_child'] = array(
        '#type' => 'checkbox',
        '#title' => t('Book pages should be duplicated with all the children'),
        '#default_value' => variable_get('node_template_with_child', FALSE),
        '#description' => t('If this is set, a new book page with all the children will be created after clicking the "set template" tab when viewing a node.')
    );
    
    $form['publishing'] = array(
        '#type' => 'fieldset',
        '#title' => t('Reset publishing options(e.g. published, promoted, etc.) to defaults when following types are cloned')
    );
    
    foreach (node_type_get_types() as $type => $typeObj) {
        $form['publishing']['clone_reset_' . $type] = array(
            '#type' => 'checkbox',
            '#title' => $typeObj->name,
            '#default_value' => variable_get('clone_reset_' . $type, FALSE)
        );
    }
    
    $form['maxnodes'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of items pro page in the list'),
        '#description' => t('Maximum number of items to display pro page in the node templates list.'),
        '#default_value' => variable_get('node_list_maxnodes', 50),
        '#size' => 4
    );
    
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save configuration')
    );
    
    return $form;
}

function nodetemplate_configure()
{
    global $user;
    drupal_set_title(t('Node templates') . ' | ' . $user->name);
    return drupal_get_form('nodetemplate_configure_form');
}

function nodetemplate_configure_form_validate($form, &$form_state)
{
    if (!is_numeric($form_state['values']['maxnodes'])) {
        form_set_error('maxnodes', t('Please enter a numeric value.'));
    }
}

function nodetemplate_configure_form_submit($form, &$form_state)
{
    $values = $form_state['values'];
    
    variable_set('new_node_prefix', $values['new_node_prefix']);
    variable_set('node_template_without_confirm', $values['node_template_without_confirm']);
    variable_set('node_template_without_clone', $values['node_template_without_clone']);
    variable_set('node_template_with_child', $values['node_template_with_child']);
    
    foreach (node_type_get_types() as $type => $typeObj) {
        variable_set('clone_reset_' . $type, $values['clone_reset_' . $type]);
    }
    
    variable_set('node_list_maxnodes', $values['maxnodes']);
    
    drupal_set_message(t('The node template configuration has been saved.'));
    //     return 'nodetemplate';
}

/**
 * The deletion menu callback
 */
function nodetemplate_delete($node)
{
    db_delete('node_template')->condition('nid', $node->nid)->execute();
    drupal_goto('admin/config/content/nodetemplate');
}
