<?php

/**
 * @file
 * Provides customisable caching lifetimes.
 */

/**
 * Implements hook_help().
 */
function better_cache_help($path, $arg) {
  if ($path == 'admin/help#better_cache') {
    $mpath = drupal_get_path("module", "better_cache");
    $path = $mpath . '/README.md';
    if (file_exists($path)) {
      $readme = file_get_contents($path);
    }
    else {
      $path = $mpath . '/README.txt';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
    }
    if (!isset($readme)) {
      return NULL;
    }
    if (module_exists('markdown')) {
      $filters = module_invoke('markdown', 'filter_info');
      $info = $filters['filter_markdown'];
      if (function_exists($info['process callback'])) {
        $output = $info['process callback']($readme, NULL);
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }
    }
    else {
      $output = '<pre>' . $readme . '</pre>';
    }
    return $output;
  }
}

/**
 * Implements hook_menu().
 */
function better_cache_menu() {

  $items = array();

  $items['admin/config/development/better_cache'] = array(
    'title' => 'Better Cache',
    'description' => 'Better Cache',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('better_cache_admin'),
    'access arguments' => array('administer Better Cache settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Passes arguments to hook_admin() page callback.
 */
function better_cache_admin() {
  $form = array();

  $form['better_cache_pagepattern'] = array(
    '#type' => 'textarea',
    '#title' => t('URI rules.'),
    '#default_value' => variable_get('better_cache_pagepattern', ''),
    '#cols' => 20,
    '#rows' => 5,
    '#description' => t("The rules should be in the format of PAGE_PATH-LIFETIME. LIFETIME is in minutes<br>Please put multiple rules in different lines. <br><br><b>Example:</b><br> If we need to cache the following URIs<br><br>mysite.com/node/4-500<br>mysite.com/node-200<br>mysite.com/-80<br><br>we should enter the following rules<br><br>
      /node/4-500<br>/node-200<br>/-80<br><br>
      Attention: <br>1) For each anonymous page the above rules will be tried to be matched in the same order that you have put them. The first mached rule will be used to set the cache.<br>2) A rule is matched if it's a substring of the requested URI and not just an exact match.<br>For example the rule /node/ will match mysite.com/node/ but also every node URI e.g. mysite.com/node/1, mysite.com/node/2 e.t.c."),
    '#required' => TRUE,
  );

  $form['better_cache_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug mode (watchdog).'),
    '#default_value' => variable_get('better_cache_debug', 0),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_exit().
 *
 * This function is called by drupal_page_footer after a page is
 * rendered and before calling the drupal_page_set_cache which
 * will set the cache for this page if the header 'expires'
 * exists then the page will not be cached as TEMPORARY but with
 * this specific expiration date.
 */
function better_cache_exit($destination = NULL) {
  global $base_url;
  $is_loggedin = user_is_logged_in();
  if ($is_loggedin) {
    return;
  }

  $bcp = variable_get("better_cache_pagepattern");

  $bcp_array = explode("\r\n", $bcp);
  foreach ($bcp_array as $item) {

    $bcp_array_sub = explode("-", $item);
    $pattern = $base_url . $bcp_array_sub[0];
    $lifetime = $bcp_array_sub[1];

    // If page got cached and debug mode is on, log via watchdog.
    if (better_cache_match_pattern($pattern, $lifetime) && variable_get('better_cache_debug') == 1) {
      watchdog('better_cache', 'Caching page : @pattern with lifetime @lifetime mins', array('@pattern' => $pattern, '@lifetime' => $lifetime));
      break;
    }
  }
}

/**
 * Does the URI pattern matching and sets the cache lifetime header.
 *
 * @param string $pattern
 *   A string with a URI fruction to be matche with the current URI.
 * @param int $cache_lifetime
 *   An int representing the time in mininus for the cache lifetime.
 *
 * @return bool $hit
 *   A boolean that denotes if the pattern was found and used or not.
 */
function better_cache_match_pattern($pattern, $cache_lifetime) {
  $hit = FALSE;
  global $base_url;
  $heystack = $base_url . request_uri();

  // If pattern matched, create the correct caching headers.
  if (strpos($heystack, $pattern) !== FALSE) {
    $date = new DateTime();
    $timestamp = $date->getTimestamp();
    $new_timestamp = strtotime('+' . $cache_lifetime . ' minutes', $timestamp);
    $hit = TRUE;

    drupal_add_http_header("expires", gmdate(DATE_RFC1123, $new_timestamp));
  }

  return $hit;
}
