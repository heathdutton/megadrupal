<?php

/**
 * Implements hook_menu().
 */
function dfw_menu() {
  // Add a config form.
  $items['admin/config/dfw/config'] = array(
    'title' => 'Configure dfw',
    'description' => 'Configuring main dfw options.',
    'page arguments' => array('dfw_configuring_form'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'weight' => 10,
  );

  return $items;
}

/**
 * Form builder: config form().
 */
function dfw_configuring_form($form_state) {
  $dfw_vars = variable_get('dfw_vars', array());
  $dfw_token = variable_get('dfw_token', array());
  $dfw_vars_menu = variable_get('dfw_vars_menu', array());
  $dfw_vars_cron = variable_get('dfw_vars_cron', array());
  $dfw_vars_field_update_forbid = variable_get('dfw_vars_field_update_forbid', array());

  // @todo Create form for user input for hooks
  $form['menu'] = array(
    '#type' => 'fieldset',
    '#title' => t('hook_menu filter setting - check modules to disable menu'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach (dfw_module_implements('menu') as $module) {
    if ($module != 'dfw') {
      $form['menu'][$module . '_menu'] = array(
        '#type' => 'checkbox',
        '#title' => $module . '_menu',
        '#default_value' => !empty($dfw_vars_menu[$module]),
      );
    }
  }

  // @todo Create form for user input for hooks
  $form['field_update_forbid'] = array(
    '#type' => 'fieldset',
    '#title' => t('field_update_forbid filter setting - check modules to disable field_update_forbid'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach (dfw_module_implements('field_update_forbid') as $module) {
    if ($module != 'dfw') {
      $form['field_update_forbid'][$module . '_field_update_forbid'] = array(
        '#type' => 'checkbox',
        '#title' => $module . '_field_update_forbid',
        '#default_value' => !empty($dfw_vars_field_update_forbid[$module]),
      );
    }
  }

  // @todo Create form for user input for hooks
  $form['cron'] = array(
    '#type' => 'fieldset',
    '#title' => t('hook_cron filter setting - check modules to disable menu'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach (dfw_module_implements('cron') as $module) {
    if ($module != 'dfw') {
      $form['cron'][$module . '_cron'] = array(
        '#type' => 'checkbox',
        '#title' => $module . '_cron',
        '#default_value' => !empty($dfw_vars_cron[$module]),
      );
    }
  }

  $form['tokens'] = array(
    '#type' => 'fieldset',
    '#title' => t('Token parameters'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['tokens']['token_clear'] = array(
    '#type' => 'checkbox',
    '#title' => 'Set global token replacement empty flag',
    '#default_value' => !empty($dfw_token['token_clear']),
  );

  $form['cache'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cache parameters'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['cache']['cca'] = array(
    '#type' => 'checkbox',
    '#title' => 'Clear cache all - drupal_flush_all_caches',
    '#default_value' => !empty($dfw_vars['cca']),
  );
  $form['dfw'] = array(
    '#type' => 'fieldset',
    '#title' => t('dfw parameters'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['dfw']['menu'] = array(
    '#type' => 'checkbox',
    '#title' => 'Clear dfw menu settings',
    '#default_value' => !empty($dfw_vars['dfw_menu']),
  );
  $form['dfw']['cron'] = array(
    '#type' => 'checkbox',
    '#title' => 'Clear dfw cron settings',
    '#default_value' => !empty($dfw_vars['dfw_cron']),
  );
  $form['dfw']['field_update_forbid'] = array(
    '#type' => 'checkbox',
    '#title' => 'Clear dfw field_update_forbid settings',
    '#default_value' => !empty($dfw_vars['dfw_field_update_forbid']),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Handling form submit with setting options.
 */
function dfw_configuring_form_submit($form, &$form_state) {
  $dfw_vars = array();
  $dfw_vars_menu = array();
  $dfw_vars_cron = array();
  $dfw_vars_field_update_forbid = array();
  foreach (dfw_module_implements('menu') as $module) {
    if ($module != 'dfw') {
      $dfw_vars_menu[$module] = $form['menu'][$module . '_menu']['#checked'];
    }
  }
  foreach (dfw_module_implements('cron') as $module) {
    if ($module != 'dfw') {
      $dfw_vars_cron[$module] = $form['cron'][$module . '_cron']['#checked'];
    }
  }
  foreach (dfw_module_implements('field_update_forbid') as $module) {
    if ($module != 'dfw') {
      $dfw_vars_field_update_forbid[$module] = $form['field_update_forbid'][$module . '_field_update_forbid']['#checked'];
    }
  }
  $dfw_token['token_clear'] = $form['tokens']['token_clear']['#checked'];
  if ($dfw_token['token_clear']) {
    variable_set('dfw_token', $dfw_token);
  }
  else {
    variable_del('dfw_token');
  }
  $dfw_vars['cca'] = $form['cache']['cca']['#checked'];
  $dfw_vars['dfw_cron'] = $form['dfw']['cron']['#checked'];
  $dfw_vars['dfw_menu'] = $form['dfw']['menu']['#checked'];
  $dfw_vars_field_update_forbid['dfw_field_update_forbid'] = $form['dfw']['field_update_forbid']['#checked'];
  variable_set('dfw_token', $dfw_token);
  variable_set('dfw_vars_cron', $dfw_vars_cron);
  variable_set('dfw_vars_menu', $dfw_vars_menu);
  variable_set('dfw_vars_field_update_forbid', $dfw_vars_field_update_forbid);
  if ($dfw_vars['cca']) {
    variable_del('dfw_vars');
    drupal_flush_all_caches();
    watchdog('dfw', 'all caches cleared');
  }
  if ($dfw_vars['dfw_cron']) {
    variable_del('dfw_vars_cron');
    watchdog('dfw', 'dfw_vars_cron cleared');
  }
  if ($dfw_vars['dfw_menu']) {
    variable_del('dfw_vars_menu');
    watchdog('dfw', 'dfw_vars_menu cleared');
  }
  if ($dfw_vars_field_update_forbid['dfw_field_update_forbid']) {
    variable_del('dfw_vars_field_update_forbid');
    watchdog('dfw', 'dfw_vars_field_update_forbid cleared');
  }
}

/**
 * Cloning module_implements().
 */
function dfw_module_implements($hook, $sort = FALSE, $refresh = FALSE) {
  static $implementations;

  if ($refresh) {
    $implementations = array();
    return;
  }

  if (!isset($implementations[$hook])) {
    $implementations[$hook] = array();
    $list = module_list(FALSE, TRUE, $sort);
    foreach ($list as $module) {
      if (module_hook($module, $hook)) {
        $implementations[$hook][] = $module;
      }
    }
  }

  // The explicit cast forces a copy to be made. This is needed because
  // $implementations[$hook] is only a reference to an element of
  // $implementations and if there are nested foreaches (due to nested node
  // API calls, for example), they would both manipulate the same array's
  // references, which causes some modules' menu not to be called.
  // See also http://www.zend.com/zend/art/ref-count.php.
  return (array) $implementations[$hook];
}

/**
 * Implements hook_module_implements_alter().
 */
function dfw_module_implements_alter(&$implementations, $hook) {

  if ($hook == 'menu') {
    watchdog('dfw', 'all hook_menu re-executed');
    $dfw_vars = variable_get('dfw_vars_menu', array());
    foreach ($dfw_vars as $module => $val) {
      if ($val) {
        unset($implementations[$module]);
      }
    }
  }
  if ($hook == 'cron') {
    watchdog('dfw', 'all hook_cron re-executed');
    $dfw_vars_cron = variable_get('dfw_vars_cron', array());
    foreach ($dfw_vars_cron as $module => $val) {
      if ($val) {
        unset($implementations[$module]);
      }
    }
  }
  if ($hook == 'field_update_forbid') {
    watchdog('dfw', 'all hook_field_update_forbid re-executed');
    $dfw_vars_field_update_forbid = variable_get('dfw_vars_field_update_forbid', array());
    foreach ($dfw_vars_field_update_forbid as $module => $val) {
      if ($val) {
        unset($implementations[$module]);
      }
    }
  }
}

/**
 * Implements hook_tokens_alter().
 */
function dfw_tokens_alter(array &$replacements, array $context) {

  $tokens = $context['tokens'];
  $dfw_token = variable_get('dfw_token');

  // @todo create filter for token list.
  if ($dfw_token['token_clear']) {
    foreach ($tokens as $token_raw => $token_name) {
      if (!isset($replacements[$token_name])) {
        $replacements[$token_name] = '';
      }
    }
  }


}
