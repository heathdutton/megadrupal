<?php
/**
 * Implements hook_field_formatter_info().
 */
function vt_commerce_image_field_formatter_info() {
  return array(
    'vt_commerce_image_formatter' => array(
      'label' => t('VT Commerce Image'),
      'field types' => array('image'),
      'settings'  => array( //Array of the settings we'll create
        'moduletheme' => 'vt_commerce_image_default',
        'zoom' => 1,
        'imagewidth' => '320',
        'imageheight' => '240',
        'zoomWidth' => 'auto',
        'zoomHeight' => 'auto',
        'position' => 'left',
        'adjustX' => '4',
        'adjustY' => '4',
        'tint' => 'false',
        'tintOpacity' => '0.5',
        'lensOpacity' => '0.5',
        'softFocus' => 'false',
        'smoothMove' => 3,
        'showTitle' => 'true',
        'titleOpacity' => '0.5',
        'hoverZoom' => 1,
        'multiple' => '1.2',
        'mouseInSpeed' => '200',
        'mouseOutSpeed' => '400',
        'zindex' => '600',
        'topOffset' => '0',
        'leftOffset' => '0',
        'previewWidth' => '50',
        'previewHeight' => '50',
        'colorbox' => 1,
        'colorboxTheme' => 'default',
        'transition' => 'elastic',
        'speed' => '350',
        'scalePhotos' => 'true',
        'scrolling' => 'true',
        'opacity' => '0.85',
        'preloading' => 'true',
        'overlayClose' => 'true',
        'escKey' => 'true',
        'arrowKey' => 'true',
        'loop' => 'true',
        'width' => 'false',
        'height' => 'false',
        'innerWidth' => 'false',
        'innerHeight' => 'false',
        'initialWidth' => '300',
        'initialHeight' => '100',
        'maxWidth' => 'false',
        'maxHeight' => 'false',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function vt_commerce_image_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  $element['moduletheme'] = array(
    '#type' => 'select',
    '#options' => vt_commerce_catalog_read_dir('vt_commerce_image'),
    '#title' => t('Select themes'),
    '#default_value' => $settings['moduletheme'],
  );
  $element['zoom'] = array(
    '#type' => 'checkbox',
    '#description' => t('Check to enable zooming features in the large image area'),
    '#title' => t('Zooming'),
    '#default_value' => $settings['zoom'],
  );

  $element['imagewidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Image Width'),
    '#description' => t('Image Width, note changing this will require you to adjust the css accordingly too'),
    '#default_value' => $settings['imagewidth'],
    '#field_suffix' => 'px',
  );

  $element['imageheight'] = array(
    '#type' => 'textfield',
    '#title' => t('Image Height'),
    '#description' => t('Image Height, note changing this will require you to adjust the css accordingly too'),
    '#default_value' => $settings['imageheight'],
    '#field_suffix' => 'px',
  );

  $element['zoomWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Window Width'),
    '#description' => t('The width of the zoom window in pixels. If \'auto\' is specified, the width will be the same as the small image.'),
    '#default_value' => $settings['zoomWidth'],
    '#field_suffix' => 'px',
  );

  $element['zoomHeight'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Window Height'),
    '#description' => t('The height of the zoom window in pixels. If \'auto\' is specified, the height will be the same as the small image.'),
    '#default_value' => $settings['zoomHeight'],
    '#field_suffix' => 'px',
  );

  $element['position'] = array(
    '#type' => 'select',
    '#options' => array('right' => t('Right'), 'left' => t('Left'), 'top' => t('Top'), 'bottom' => t('Bottom'), 'inside' => t('Inside')),
    '#title' => t('Zoom Window Position'),
    '#description' => t('Specifies the position of the zoom window relative to the small image. Allowable values are \'left\', \'right\', \'top\', \'bottom\', \'inside\''),
    '#default_value' => $settings['position'],
  );

  $element['adjustX'] = array(
    '#type' => 'textfield',
    '#title' => t('Adjust Zoom Window X position'),
    '#description' => t('Allows you to fine tune the x-position of the zoom window in pixels.'),
    '#default_value' => $settings['adjustX'],
    '#field_suffix' => 'px',
  );

  $element['adjustY'] = array(
    '#type' => 'textfield',
    '#title' => t('Adjust Zoom Window Y position'),
    '#description' => t('Allows you to fine tune the y-position of the zoom window in pixels.'),
    '#default_value' => $settings['adjustY'],
    '#field_suffix' => 'px',
  );

  $element['tint'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Window Tint Color'),
    '#description' => t('Specifies a tint colour which will cover the small image. Colours should be specified in hex format, e.g. \'#aa00aa\'. Does not work with softFocus.'),
    '#default_value' => $settings['tint'],
  );

  $element['tintOpacity'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Window Tint Opacity'),
    '#description' => t('Opacity of the tint, where 0 is fully transparent, and 1 is fully opaque.'),
    '#default_value' => $settings['tintOpacity'],
  );

  $element['lensOpacity'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Lens Opacity'),
    '#description' => t('Opacity of the lens mouse pointer, where 0 is fully transparent, and 1 is fully opaque. In tint and soft-focus modes, it will always be transparent.'),
    '#default_value' => $settings['tintOpacity'],
  );

  $element['softFocus'] = array(
    '#type' => 'select',
    '#options' => array('true' => t('True'), 'false' => t('False')),
    '#title' => t('Soft Focus Mode'),
    '#description' => t('Applies a subtle blur effect to the small image. Set to true or false. Does not work with tint, set to \'false\' to disable'),
    '#default_value' => $settings['softFocus'],
  );

  $element['smoothMove'] = array(
    '#type' => 'textfield',
    '#title' => t('Smooth Move mode'),
    '#description' => t('Amount of smoothness/drift of the zoom image as it moves. The higher the number, the smoother/more drifty the movement will be. 1 = no smoothing.'),
    '#default_value' => $settings['smoothMove'],
  );

  $element['showTitle'] = array(
    '#type' => 'select',
    '#options' => array('true' => t('True'), 'false' => t('False')),
    '#title' => t('Show Title'),
    '#description' => t('Shows the title tag of the image. True or false.'),
    '#default_value' => $settings['showTitle'],
  );

  $element['titleOpacity'] = array(
    '#type' => 'textfield',
    '#title' => t('Title Opacity'),
    '#description' => t('Specifies the opacity of the title if displayed, where 0 is fully transparent, and 1 is fully opaque.'),
    '#default_value' => $settings['titleOpacity'],
  );

  $element['hoverZoom'] = array(
    '#type' => 'checkbox',
    '#description' => t('Check to enable thumbnail zooming features in the large image area'),
    '#title' => t('Thumbnail Hover Zooming'),
    '#default_value' => $settings['hoverZoom'],
  );

  $element['previewWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Thumbnail Image Width'),
    '#description' => t('Thumbnail Image Width, note changing this will require you to adjust the css accordingly too'),
    '#default_value' => $settings['previewWidth'],
    '#field_suffix' => 'px',
  );

  $element['previewHeight'] = array(
    '#type' => 'textfield',
    '#title' => t('Thumbnail Image Height'),
    '#description' => t('Thumbnail Image Height, note changing this will require you to adjust the css accordingly too'),
    '#default_value' => $settings['previewHeight'],
    '#field_suffix' => 'px',
  );

  $element['multiple'] = array(
    '#type' => 'textfield',
    '#title' => t('Zooming Multiplier'),
    '#description' => t('Set the zoom multiplier, example \'1.2\' will multiply the zoomed image 120%'),
    '#default_value' => $settings['multiple'],
  );

  $element['mouseInSpeed'] = array(
    '#type' => 'textfield',
    '#title' => t('Mouse enter animation speed'),
    '#description' => t('Set the mouse enter animation speed'),
    '#default_value' => $settings['mouseInSpeed'],
    '#field_suffix' => 'milisecond',
  );
  $element['mouseOutSpeed'] = array(
    '#type' => 'textfield',
    '#title' => t('Mouse out animation speed'),
    '#description' => t('Set the mouse out animation speed'),
    '#default_value' => $settings['mouseOutSpeed'],
    '#field_suffix' => 'milisecond',
  );
  $element['zindex'] = array(
    '#type' => 'textfield',
    '#title' => t('Set the zindex for the hovered image'),
    '#description' => t('The zindex should be larger than the wrapper image'),
    '#default_value' => $settings['zindex'],
  );

  $element['topOffset'] = array(
    '#type' => 'textfield',
    '#title' => t('Top Offset'),
    '#description' => t('Fine Tune the zoomed image'),
    '#default_value' => $settings['topOffset'],
    '#field_suffix' => 'px',
  );
  $element['leftOffset'] = array(
    '#type' => 'textfield',
    '#title' => t('Left Offset'),
    '#description' => t('Fine Tune the zoomed image'),
    '#default_value' => $settings['leftOffset'],
    '#field_suffix' => 'px',
  );
  $element['colorbox'] = array(
    '#type' => 'checkbox',
    '#description' => t('Colorbox will run if enabled and when user click on the large image'),
    '#title' => t('Enable Colorbox'),
    '#default_value' => $settings['colorbox'],
  );

  $element['colorboxTheme'] = array(
    '#type' => 'select',
    '#options' => vt_commerce_catalog_read_dir('vt_commerce_image', '/colorbox_theme/'),
    '#title' => t('Select Colorbox themes'),
    '#default_value' => $settings['colorboxTheme'],
  );

  $element['transition'] = array(
    '#type' => 'select',
    '#options' => array('elastic' => t('Elastic'), 'fade' => t('Fade'), 'none' => t('None')),
    '#title' => t('Colorbox Transition'),
    '#description' => t('The transition type. Can be set to "elastic", "fade", or "none".'),
    '#default_value' => $settings['transition'],
  );

  $element['speed'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox transition speed'),
    '#description' => t('Sets the speed of the fade and elastic transitions, in milliseconds.'),
    '#default_value' => $settings['speed'],
    '#field_suffix' => 'miliseconds',
  );

  $element['scalePhotos'] = array(
    '#type' => 'select',
    '#options' => array('true' => t('True'), 'false' => t('False')),
    '#title' => t('Colorbox scale photo'),
    '#description' => t('If true, and if maxWidth, maxHeight, innerWidth, innerHeight, width, or height have been defined, ColorBox will scale photos to fit within the those values.'),
    '#default_value' => $settings['scalePhotos'],
  );

  $element['scrolling'] = array(
    '#type' => 'select',
    '#options' => array('true' => t('True'), 'false' => t('False')),
    '#title' => t('Colorbox scrolling'),
    '#description' => t('If false, ColorBox will hide scrollbars for overflowing content. This could be used on conjunction with the resize method (see below) for a smoother transition if you are appending content to an already open instance of ColorBox.'),
    '#default_value' => $settings['scrolling'],
  );

  $element['opacity'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox opacity'),
    '#description' => t('The overlay opacity level. Range: 0 to 1.'),
    '#default_value' => $settings['opacity'],
  );

  $element['preloading'] = array(
    '#type' => 'select',
    '#options' => array('true' => t('True'), 'false' => t('False')),
    '#title' => t('Colorbox preloading'),
    '#description' => t('Allows for preloading of \'Next\' and \'Previous\' content in a group, after the current content has finished loading. Set to false to disable.'),
    '#default_value' => $settings['preloading'],
  );

  $element['overlayClose'] = array(
    '#type' => 'select',
    '#options' => array('true' => t('True'), 'false' => t('False')),
    '#title' => t('Colorbox overlay close'),
    '#description' => t('If false, disables closing ColorBox by clicking on the background overlay.'),
    '#default_value' => $settings['overlayClose'],
  );

  $element['escKey'] = array(
    '#type' => 'select',
    '#options' => array('true' => t('True'), 'false' => t('False')),
    '#title' => t('Colorbox ESC close'),
    '#description' => t('If false, will disable closing colorbox on \'esc\' key press.'),
    '#default_value' => $settings['escKey'],
  );

  $element['arrowKey'] = array(
    '#type' => 'select',
    '#options' => array('true' => t('True'), 'false' => t('False')),
    '#title' => t('Colorbox arrow key'),
    '#description' => t('If false, will disable the left and right arrow keys from navigating between the items in a group.'),
    '#default_value' => $settings['arrowKey'],
  );

  $element['loop'] = array(
    '#type' => 'select',
    '#options' => array('true' => t('True'), 'false' => t('False')),
    '#title' => t('Colorbox loop'),
    '#description' => t('If false, will disable the ability to loop back to the beginning of the group when on the last element.'),
    '#default_value' => $settings['loop'],
  );

  $element['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox width'),
    '#description' => t('Set a fixed total width. This includes borders and buttons. Example: "100%", "500px", or 500'),
    '#default_value' => $settings['width'],
    '#field_suffix' => 'px',
  );

  $element['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox height'),
    '#description' => t('Set a fixed total height. This includes borders and buttons. Example: "100%", "500px", or 500'),
    '#default_value' => $settings['height'],
    '#field_suffix' => 'px',
  );

  $element['innerWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox inner width'),
    '#description' => t('This is an alternative to \'width\' used to set a fixed inner width. This excludes borders and buttons. Example: "50%", "500px", or 500'),
    '#default_value' => $settings['innerWidth'],
    '#field_suffix' => 'px',
  );

  $element['innerHeight'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox inner height'),
    '#description' => t('This is an alternative to \'height\' used to set a fixed inner height. This excludes borders and buttons. Example: "50%", "500px", or 500'),
    '#default_value' => $settings['innerHeight'],
    '#field_suffix' => 'px',
  );

  $element['initialWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox initial width'),
    '#description' => t('Set the initial width, prior to any content being loaded.'),
    '#default_value' => $settings['initialWidth'],
    '#field_suffix' => 'px',
  );

  $element['initialHeight'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox initial height'),
    '#description' => t('Set the initial height, prior to any content being loaded.'),
    '#default_value' => $settings['initialHeight'],
    '#field_suffix' => 'px',
  );

  $element['maxWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox max width'),
    '#description' => t('Set a maximum width for loaded content. Example: "100%", 500, "500px"'),
    '#default_value' => $settings['maxWidth'],
    '#field_suffix' => 'px',
  );

  $element['maxHeight'] = array(
    '#type' => 'textfield',
    '#title' => t('Colorbox max height'),
    '#description' => t('Set a maximum height for loaded content. Example: "100%", 500, "500px"'),
    '#default_value' => $settings['maxHeight'],
    '#field_suffix' => 'px',
  );
  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function vt_commerce_image_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('@zoom <br />@hoverZoom <br />@colorbox', array(
    '@zoom' => ($settings['zoom'] == TRUE) ? 'Zooming enabled' : 'Zooming disabled',
  	'@hoverZoom' => ($settings['hoverZoom'] == TRUE) ? 'Thumbnail Hover Zooming enabled' : 'Thumbnail Hover Zooming disabled',
    '@colorbox' => ($settings['colorbox'] == TRUE) ? 'Colorbox enabled' : 'Colorbox disabled',
  )); // we use t() for translation and placeholders to guard against attacks
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function vt_commerce_image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); // Initialize the var
  $settings = $display['settings']; // get the settings

  // check if we have main image default width and height stored in database
  $width = variable_get('vt_commerce_image_width', '');
  $height = variable_get('vt_commerce_image_height', '');

  // update the stored main image width if neccessary
  if ($width != $settings['imagewidth']) {
    variable_set('vt_commerce_image_width', $settings['imagewidth']);
  }

  // update the stored main image height if neccessary
  if ($height != $settings['imageheight']) {
    variable_set('vt_commerce_image_height', $settings['imageheight']);
  }

  $module_path = drupal_get_path('module', 'vt_commerce_image');

  // add all the js
  $js = array(
    array('data' => array('vtCommerceImage' => $settings), 'type' => 'setting'),
  );

  if ($settings['zoom']) {
    $js[] = $module_path . '/js/cloud-zoom.1.0.2.js';
  }

  if ($settings['hoverZoom']) {
    $js[] = $module_path . '/js/image-enlarge.js';
  }

  if ($settings['colorbox'] == 1 && !module_exists('colorbox')) {
    $js[] = $module_path . '/js/jquery.colorbox-min.js';
  }

  $js[] = $module_path . '/js/vt_commerce_image.js';

  // add all the css
  $css = array();
  $css[] = $module_path . '/css/cloud-zoom.css';
  $css[] = $module_path . '/theme/' . $settings['moduletheme'] . '/' . $settings['moduletheme'] . '.css';

  if ($settings['colorbox'] == 1) {
    $css[] = $module_path . '/colorbox_theme/' . $settings['colorboxTheme'] . '/' . $settings['colorboxTheme'] . '.css';
  }

  $element = array(
    array(
    	'#theme' => 'vt_commerce_image_wrapper',
      'children' => array(),
      '#attached' => array(
        'css' => $css,
        'js' => $js,
      ),
    ),
  );

  foreach ($items as $item) {
    $element[0]['children'][] = array(
      '#theme' => 'vt_commerce_image_content',
      'content' => $item,
      '#settings' => $settings,
    );
  }

  return $element;
}

/**
 * Implement hook_theme()
 */
function vt_commerce_image_theme() {
  return array(
    'vt_commerce_image_wrapper' => array(
			'template' => 'templates/vt-commerce-image-wrapper',
      'render element' => 'element',
    ),
		'vt_commerce_image_content' => array(
			'template' => 'templates/vt-commerce-image-content',
			'render element' => 'element',
    ),
  );
}

/**
 * Implement Preprocess Function
 *
 * @param array $variables
 */
function template_preprocess_vt_commerce_image_content(&$variables) {

  $element = $variables['element'];
  $item = $element['content'];
  $settings = $element['#settings'];

  // build the relevant attributes
  $clouds = array('softFocus', 'zoomWidth', 'zoomHeight', 'position', 'adjustX', 'adjustY', 'tint', 'tintOpacity', 'lensOpacity', 'smoothMove', 'showTitle', 'titleOpacity');

  // determine softfocus
  $softfocus = '';
  if ($settings['softFocus'] != 'false') {
    $softfocus = TRUE;
  }
  // loop into cloud configuration and build the correct rel value
  $variables['relvalue'] = '';
  $wrapped = array('zoomWidth', 'zoomHeight', 'position');
  foreach ($clouds as $key) {
    // if user set the softfocus, skip tint configuration
    if ($softfocus == TRUE && ($key == 'tint' || $key == 'tintOpacity')) {
      continue;
    }
    if (in_array($key, $wrapped)) {
      $settings[$key] = "'" . $settings[$key] . "'";
    }
    $variables['relvalue'] .= $key . ': ' . $settings[$key] . ', ';
  }

  // load the js and settings for js here
  if ($settings['zoom']) {
     $variables['zoom_image'] = image_style_url('vt_commerce_image_zoom', $item['uri']);
     $variables['normal_image'] = image_style_url('vt_commerce_image_large', $item['uri']);
  }

  $variables['large_image'] = theme('image_style', array(
  																	'style_name' => 'vt_commerce_image_large',
                                    'path' => $item['uri']));

}

/**
 * Implement hook_image_default_styles()
 */
function vt_commerce_image_image_default_styles() {
  $styles = array(
    'vt_commerce_image_zoom' => array(
  		'effects' => array(
        array(
          'name' => 'image_resize',
          'data' => array(
            'width' => variable_get('vt_commerce_image_width', 320) * 3,
            'height' => variable_get('vt_commerce_image_height', 240) * 3,
          ),
          'weight' => 0,
        ),
      ),
    ),
    'vt_commerce_image_large' => array(
   		'effects' => array(
        array(
          'name' => 'image_resize',
          'data' => array(
            'width' => variable_get('vt_commerce_image_width', 320),
            'height' => variable_get('vt_commerce_image_height', 240),
          ),
          'weight' => 0,
        ),
      ),
    ),
   );

  return $styles;
}


/**
 * Function to read directory looking for themes
 * This function will search for a theme in a certain modules
 * the modules must have module_name/theme/theme_name.css
 * The return value will be an array keyed with the theme name and theme name as value
 * @param string $modulename
 */
if (!module_exists('vt_commerce_catalog')) {
  function vt_commerce_catalog_read_dir($modulename , $customdir = FALSE) {
    if (empty($customdir)) {
      $dir = drupal_get_path('module', $modulename) . '/theme/';
    } else {
      $dir = drupal_get_path('module', $modulename) . $customdir;
    }
    $options = array('key' => 'filename');
    $array = array();
    $files = file_scan_directory($dir, '/.*\.css$/' , $options);
    foreach ($files as $key => $value) $array[$value->name] = $value->name;
    return $array;
  }
}