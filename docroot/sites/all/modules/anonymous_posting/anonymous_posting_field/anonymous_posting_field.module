<?php

/**
 * @file
 */

/**
 * Implements hook_field_info().
 */
function anonymous_posting_field_field_info() {
  return array(
    'anonymous_author' => array(
      'label' => t('Anonymous contact informations'),
      'description' => t('Contact information to be filled by anonymous users'),
      'default_widget' => 'anonymous_author',
      'default_formatter' => 'anonymous_author',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function anonymous_posting_field_field_is_empty($item, $field) {
  // Consider the field empty only if all columns are empty
  $out = TRUE;
  foreach ($item as $column_name => $columns_value) {
    $out = $out && $item[$column_name] === '';
  }
  return $out;
}

/**
 * Implements hook_field_widget_info().
 */
function anonymous_posting_field_field_widget_info() {
  return array(
    'anonymous_author' => array(
      'label' => t('Anonymous author fields widget'),
      'field types' => array('anonymous_author'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function anonymous_posting_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  if ($instance['widget']['type'] == 'anonymous_author') {

    // Hide fields to registered user.
    if (!user_access('administer anonymous_posting') && (!user_is_anonymous())) {
      return $element;
    }

    $value = isset($items[$delta]) ? $items[$delta] : array();

    if (!user_is_anonymous()) {
      $element = array(
        '#type' => 'fieldset',
        '#description' => t('Contact informations intend to be filled by anonymous users.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'additional_settings',
        '#attributes' => array(
          'class' => array('anonmyous_posting-node-edit-form-contact_informations'),
        ),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'anonymous_posting') . '/anonymous_posting.js',
            array(
              'type' => 'setting',
              'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
            ),
          ),
        ),
        '#weight' => 91, // Place the fieldset under the Author core fieldset.
        ) + $element;
    }
    else {
      // fill contact fields with cookie values:
      drupal_add_js(drupal_get_path('module', 'anonymous_posting') . '/anonymous_posting.form.js');
      $form['#attached']['library'][] = array('system', 'jquery.cookie');
      $form['#attributes']['class'][] = 'user-info-from-cookie';
    }

    $anonymous_posting = variable_get('anonymous_posting_setting_type_' . $form['#node']->type, ANONYMOUS_POSTING_MAYNOT_CONTACT);

    // Create form elements:
    $element['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Your name'),
      '#size' => 64,
      '#maxlength' => 60,
      '#default_value' => isset($value['name']) ? $value['name'] : '',
      '#required' => ($anonymous_posting == ANONYMOUS_POSTING_MUST_CONTACT) && user_is_anonymous(),
      '#description' => user_is_anonymous() ? '' : t('The filled string will be displayed in favor of the %aname string.', array('%aname' => variable_get('anonymous', t('Anonymous')))),
    );
    if ($anonymous_posting >= ANONYMOUS_POSTING_MAY_CONTACT) {
      $element['mail'] = array(
        '#type' => 'textfield',
        '#title' => t('E-Mail'),
        '#description' => t('The content of this field is kept private and will not be shown publicly.'),
        '#size' => 64,
        '#maxlength' => 255,
        '#default_value' => isset($value['mail']) ? $value['mail'] : '',
        '#required' => ($anonymous_posting == ANONYMOUS_POSTING_MUST_CONTACT) && user_is_anonymous(),
      );
      $element['homepage'] = array(
        '#type' => 'textfield',
        '#title' => t('Homepage'),
        '#size' => 64,
        '#maxlength' => 255,
        '#default_value' => isset($value['homepage']) ? $value['homepage'] : '',
        '#required' => FALSE,
      );
    }
    if (empty($form['#node']->nid) && user_is_anonymous()) {
      // Record hostname while creating new node:
      $element['hostname'] = array(
        '#type' => 'hidden',
        '#value' => ip_address(),
      );
    }
  }

  return $element;
}

/**
 * Implements hook_field_validate().
 */
function anonymous_posting_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if ($instance['widget']['type'] == 'anonymous_author') {
    $fields = current($items);
    $author_name = isset($fields['name']) ? $fields['name'] : '';
    $author_mail = isset($fields['mail']) ? $fields['mail'] : '';
    $author_homepage = isset($fields['homepage']) ? $fields['homepage'] : '';

    // Save the anonymous user information to a cookie for reuse.
    if (user_is_anonymous()) {
      user_cookie_save(array(
        'name' => $author_name,
        'mail' => $author_mail,
        'homepage' => $author_homepage,
      ));
    }

    // Validate anonymous content author fields.
    // If the (original) author of this node was an anonymous user, verify
    // that no registered user with this name exists.
    if ($author_name) {
      $query = db_select('users', 'u');
      $query->addField('u', 'uid', 'uid');
      $taken = $query
        ->condition('name', db_like($author_name), 'LIKE')
        ->countQuery()
        ->execute()
        ->fetchField();
      if ($taken) {
        form_set_error(ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][name', t('The name you used belongs to a registered user.'));
      }
    }

    if ($author_mail && !valid_email_address($author_mail)) {
      form_set_error(ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][mail', t("The e-mail address you specified is not valid."));
    }

    if ($author_homepage && !valid_url($author_homepage, TRUE)) {
      form_set_error(ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][homepage', t('The URL of your homepage is not valid. Remember that it must be fully qualified, i.e. of the form <code>http://example.com/directory</code>.'));
    }
  }
}
