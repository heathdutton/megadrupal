<?php

/**
 * @file
 */
/**
 * Anonyous field name
 */
define('ANONYMOUS_POSTING_FIELD_NAME', 'field_anonymous_author');

/**
 * Anonymous posters cannot enter their contact information.
 */
define('ANONYMOUS_POSTING_MAYNOT_CONTACT', 0);

/**
 * Anonymous posters may leave their contact information.
 */
define('ANONYMOUS_POSTING_MAY_CONTACT', 1);

/**
 * Anonymous posters are required to leave their contact information.
 */
define('ANONYMOUS_POSTING_MUST_CONTACT', 2);

/**
 * Implements hook_menu().
 */
function anonymous_posting_menu() {

  $access = array('administer anonymous_posting');

  $items['admin/config/people/anonymous-posting'] = array(
    'title' => 'Anonymous Posting',
    'description' => 'Allow anonymous user to submit their contact informations while posting contents.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('anonymous_posting_admin_form'),
    'access arguments' => $access,
    'file' => 'anonymous_posting.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function anonymous_posting_permission() {

  $out = array();

  // Admin page permission
  $out['administer anonymous_posting'] = array(
    'title' => t('Administer Anonymous Posting settings'),
  );

  return $out;
}

/**
 * Implements hook_help().
 */
function anonymous_posting_help($path, $arg) {
  switch ($path) {
    case 'admin/help#anonymous_posting':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The <em>Anonymous Posting</em> module allows anonymous users to submit their contact informations (name, mail and homepage) while posting content.</p>');
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Allow anonymous users to submit their <em>contact informations</em>') . '</dt>';
      $output .= '<dd>' . t('You must enable this feature on a content type basis. To do so go to the admin page of !l.', array(
          '!l' => l(t('Anonymous Posting'), 'admin/config/people/anonymous-posting'))) . '</dd>';
      $output .= '<dt>' . t('Caution when uninstalling the module') . '</dt>';
      $output .= '<dd>' . t('Uninstalling the module will delete any data related to the Anonymous Posting module, including the author\'s field columns (name, mail, homepage and hostname).') . '</dd>';
      $output .= '<dt>' . t('Caution about the core Node module and its permissions') . '</dt>';
      $output .= '<dd>' . t('The following is unrelated to what bring the Anonymous Posting module but it is a reminder of how the core Node module works: When setting the "edit/delete own content" permissions to anonymous users you allow them to edit/delete any anonymous content.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function anonymous_posting_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  // Add the field 'Anonymous <node type> posting' in the node content type form
  if (_anonymous_posting_activated($form['#node_type']->type) && isset($form['type'])) {
    $setting_options = array(
      ANONYMOUS_POSTING_MAYNOT_CONTACT => t('Anonymous posters may not enter their contact information'),
      ANONYMOUS_POSTING_MAY_CONTACT => t('Anonymous posters may leave their contact information'),
      ANONYMOUS_POSTING_MUST_CONTACT => t('Anonymous posters must leave their contact information'),
    );
    $setting_default_value = variable_get('anonymous_posting_setting_type_' . $form['#node_type']->type, ANONYMOUS_POSTING_MAYNOT_CONTACT);

    $form['anonymous_posting'] = array(
      '#type' => 'fieldset',
      '#title' => t('Anonymous posting'),
      '#group' => 'additional_settings',
      '#collapsible' => TRUE,
      '#attributes' => array(
        'class' => array('anonmyous_posting-node-type-edit-form-contact_informations'),
      ),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'anonymous_posting') . '/anonymous_posting.js',
          array(
            'type' => 'setting',
            'data' => array(
              'anonymous_posting_options' => $setting_options,
              'anonymous_posting_value' => $setting_default_value,
            ),
          ),
        ),
      ),
      'anonymous_posting_setting_type' => array(
        '#type' => 'radios',
        '#title' => t('Anonymous %ntype posting', array('%ntype' => $form['#node_type']->name)),
        '#default_value' => $setting_default_value,
        '#options' => $setting_options,
      )
    );
  }
}

/**
 * Implements template_preprocess_username(&$variables).
 *
 * The purpose is to override the original 'anonymous' string with the anonymous
 * user submitted value.
 */
function anonymous_posting_preprocess_username(&$variables) {
  $account = $variables['account'];
  if (property_exists($account, 'type') && _anonymous_posting_activated($account->type) && $account->uid == 0) {
    $field_values = _anonymous_posting_get_field_values($account->nid);
    if ($field_values) {

      // Alter view values
      if (isset($field_values['name']) && $field_values['name']) {
        $variables['name'] = check_plain($field_values['name']);
      }
      if (isset($field_values['homepage']) && $field_values['homepage']) {
        if (!$variables['uid'] || !$variables['profile_access']) {
          // Like the 'class' attribute, the 'rel' attribute can hold a
          // space-separated set of values, so initialize it as an array to make it
          // easier for other preprocess functions to append to it.
          $variables['link_attributes'] = array('rel' => array('nofollow'));
          $variables['link_path'] = $field_values['homepage'];
          $variables['homepage'] = $field_values['homepage'];
        }
      }
    }
  }
}

/**
 * Tell if a given node type has the Anonymous Posting feature enabled.
 */
function _anonymous_posting_activated($node_type) {
  $instance = field_info_instance('node', ANONYMOUS_POSTING_FIELD_NAME, $node_type);
  return !empty($instance);  
}

/**
 * Implements hook_mollom_form_info_alter().
 * 
 * Integrate Anonymous Posting data to processed by Mollom.
 */
function anonymous_posting_mollom_form_info_alter(&$form_info, $form_id) {
  
  if (preg_match("/^(.+)_node_form$/", $form_id, $matches)) {
    if (_anonymous_posting_activated($matches[1])) {
      
      // Expose Anonymous Posting fields so that they can be configured for Mollom's text analysis
      $form_info['elements'][ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][name'] = t('Anonymous posting author name');
      $form_info['elements'][ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][mail'] = t('Anonymous posting author mail');
      $form_info['elements'][ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][homepage'] = t('Anonymous posting author homepage');
      
      // Map Anonymous Posting fields to be sent to Mollom for validation
      $form_info['mapping']['author_name'] = ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][name';
      $form_info['mapping']['author_mail'] = ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][mail';
      $form_info['mapping']['author_url'] = ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][homepage';
    }
  }
}

/**
 * Implements hook_views_pre_render().
 * 
 * Hook into view rendering process to replace "Anonymous" with the content of 
 * field_anonymous_author field.
 *
 */
function anonymous_posting_views_pre_render(&$view) {

  // consider only the desired advanced_forum_topic_list view
  // excluding editing mode, to avoid confusion when using Views editor
  $views = array(
      'advanced_forum_topic_list',
      'advanced_forum_active_topics',
      'advanced_forum_unanswered_topics',
      'advanced_forum_new_topics',
  );
  if($view->editing == 0 && in_array($view->name, $views)) {

    // scan all result rows
    foreach($view->result as $row) {

      // test if post author is "Anonymous"
      if($row->users_node_uid == 0) {

        // retrieve anonymous user name from node field field_anonymous_author
        if(isset($row->_field_data['nid']['entity']->{ANONYMOUS_POSTING_FIELD_NAME}['und'][0]['name'])) {
          $row->users_node_name = check_plain($row->_field_data['nid']['entity']->{ANONYMOUS_POSTING_FIELD_NAME}['und'][0]['name']);
          
          // set last comment name to anonymous user name  if there is no comments
          if (!$row->node_comment_statistics_comment_count) {
            $row->node_comment_statistics_last_comment_name = $row->users_node_name;
          }
      
        }

      }

    }

  }

}

/**
 * Implements hook_process_forum_list().
 */
function anonymous_posting_preprocess_forum_list(&$variables) {

  // All this mess is for displaying the last anonymous author name in place
  // of the 'Anonymous' string.
  foreach ($variables['forums'] as &$forum) {
    
    if (isset($forum->last_post) && !isset($forum->last_post->name)) {
      // We should be here because the last post of the forum was a forum node
      // and submitted anonymously.
      
      $query = db_select('node', 'n');
      $query->join('forum', 'f', 'n.vid = f.vid AND f.tid = :tid', array(':tid' => $forum->tid));
      $query->condition('n.status', 1);
      $query->addTag('node_access');
      $query->addExpression('MAX(n.nid)', 'last_nid');
      $query->fields('n');
      
      $result = $query
          ->execute()
          ->fetchObject();
      
      if ($result) {
        $field_values = _anonymous_posting_get_field_values($result->last_nid);
        $forum->last_post->name = check_plain($field_values['name']);
        $forum->last_reply = theme('forum_submitted', array('topic' => $forum->last_post));
      }
    }
  }
}

/**
 * Get anonymous author field column values.
 * 
 * @return array
 */
function _anonymous_posting_get_field_values($nid) {
  $out = NULL;

  $field = field_info_field(ANONYMOUS_POSTING_FIELD_NAME);
  if ($field) {

    // Get field table and column names
    $table = key($field['storage']['details']['sql'][FIELD_LOAD_CURRENT]);
    $columns = current($field['storage']['details']['sql'][FIELD_LOAD_CURRENT]);
    
    // Query value
    $query = db_select($table, 'apf');
    $query->fields('apf');
    $query->join('node', 'n', 'apf.entity_id = n.nid AND revision_id = n.vid AND n.nid = :nid', array(':nid' => $nid));
    $query->addTag('node_access');  
    $query->condition('n.status', 1);
    $result = $query
        ->execute()
        ->fetchObject();
   
    // Build output
    if ($result) {
      $out = array();
      foreach ($columns as $column_key => $column_name) {
        $out[$column_key] = $result->{$column_name};
      }
    }
  }

  return $out;
}
