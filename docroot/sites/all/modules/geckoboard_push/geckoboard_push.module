<?php
/**
 * @file
 * Send statistics to your Geckoboard Custom Widgets using their Push API
 * http://docs.geckoboard.com/custom-widgets/
 * http://docs.geckoboard.com/custom-widgets/push.html
 */

/**
 * Implements hook_menu().
 */
function geckoboard_push_menu() {
  $items['admin/config/services/geckoboard-push'] = array(
    'title' => 'Geckoboard Push',
    'description' => 'Configure your Geckoboard settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geckoboard_push_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'geckoboard_push.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_cron().
 *
 * For the best up to date stats I recommend using the drush geckoboard-push
 * command
 * however if you can't set that up, you can run this module from cron instead
 */
function geckoboard_push_cron() {
  // If the user doesn't want us to run on cron, don't run on cron.
  if (variable_get('geckoboard_push_disable_cron', 0) == 1) {
    return;
  }

  // Try to increase the maximum execution time if it is too low. (Borrowed.
  // from drupal_queue).
  if (ini_get('max_execution_time') < 240 && !ini_get('safe_mode')) {
    set_time_limit(240);
  }

  // Send our data to Geckoboard.
  geckoboard_push_send_data();
}

/**
 * The main function, Iterates through all the enabled datasets and send the data to the Geckoboard Push API.
 */
function geckoboard_push_send_data() {
  $available = variable_get('geckoboard_push_available_datasets', NULL);

  if ($available != NULL) {
    $available = unserialize($available);
  }
  else {
    return;
  }

  foreach ($available as $function => $options) {

    if (isset($options['enabled']) && $options['enabled'] == 1) {
      $push = new stdClass();

      // Get the data.
      if (function_exists($function)) {
        $push->data = $function();
      }
      else {

        if (function_exists('drush_log')) {
          drush_log(dt('Function @function not found - disabling this dataset', array('@function' => $function)), 'warning');
        }

        watchdog('geckoboard_push', 'Function @function not found - disabling this dataset', array('@function' => $function));
        $available[$function]['enabled'] = 0;
        variable_set('geckoboard_push_available_datasets', serialize($available));
      }

      // Get the master API key.
      $push->api_key = variable_get('geckoboard_push_api_key', NULL);

      // The key for your widget is not a secret key, it's an identifier.
      $url = variable_get('geckoboard_push_api_endpoint', 'https://push.geckoboard.com/v1/send') . '/' . $options['key'];

      // Send the data to the API.
      $options = array(
        'headers' => array(),
        'method' => 'POST',
        'data' => json_encode($push),
        'timeout' => 30,
      );
      $ret = drupal_http_request($url, $options);
      if ($ret->code != 200 || $ret->status_message != 'OK') {
        if (function_exists('drush_log')) {
          drush_log(dt('Error sending data to Geckoboard. HTTP response: @code. Status Message: @message', array('@code' => $ret->code, '@message' => $ret->status_message)), 'error');
        }

        watchdog('geckoboard_push', 'Error sending data to Geckoboard. HTTP response: @code. Status Message: @message', array('@code' => $ret->code, '@message' => $ret->status_message), WATCHDOG_WARNING);
      }
      else {
        $api_response = json_decode($ret->data);
        if (!isset($api_response->success) || $api_response->success != TRUE) {
          if (function_exists('drush_log')) {
            drush_log(dt('Error response from Geckoboard. Error Message: @message', array('@message' => $api_response->error)), 'error');
          }
          watchdog('geckoboard_push', 'Error response from Geckoboard. Error Message: @message', array('@message' => $api_response->error), WATCHDOG_ERROR);
        }
        else {

          if (function_exists('drush_log')) {
            drush_log(dt('Dataset @function sent to Geckoboard successfully', array('@function' => $function)), 'ok');
          }

        }
      }
    }
  }
}

/**
 * Example implementation of hook_geckoboard_push_info().
 */
function geckoboard_push_geckoboard_push_info() {
  return array(
    array(
      'function' => 'geckoboard_push_random_number',
      'name' => t('Geckoboard Push Random Number'),
    ),
    array(
      'function' => 'geckoboard_user_data',
      'name' => t('Geckoboard Push User Data'),
    ),
    array(
      'function' => 'geckoboard_posts_data',
      'name' => t('Geckoboard Push Posts Data'),
    ),
    array(
      'function' => 'geckoboard_comments_data',
      'name' => t('Geckoboard Push Comments Data'),
    ),
  );
}

/**
 * Example of how to create a data object for the Geckoboard Number & Secondary Stat Custom Widget.
 */
function geckoboard_push_random_number() {

  /*
   * Note: Different custom widgets require data in different formats
   *
   * This is an example of a very basic "Number & Secondary Stat" dataset
   * that you can use to see how the module works or to test your connectivity
   * to Geckoboard
   */

  // Two random numbers for the example.
  $number = rand(0, 100);
  $secondary_stat = rand(0, 100);

  // Object containing array(s)
  $data = new stdClass();
  $data->item = array(
    array(
      'text' => '',
      'value' => $number,
    ),
    array(
      'text' => '',
      'value' => $secondary_stat,
    ),
  );

  return $data;
}

/**
 * Fetches user data for Geckoboard.
 *
 * @return array
 *   array containing widget data
 */
function geckoboard_user_data() {
  $data = array('item' => array());
  $amount_today = db_query("SELECT COUNT(*) FROM {users} WHERE created > :created", array(':created' => REQUEST_TIME - 86400))->fetchColumn();
  $amount_week = db_query("SELECT COUNT(*) FROM {users} WHERE created > :created", array(':created' => REQUEST_TIME - 604800))->fetchColumn();
  $amount_month = db_query("SELECT COUNT(*) FROM {users} WHERE created > :created", array(':created' => REQUEST_TIME - 2629743))->fetchColumn();

  $data['item'][] = array(
    'text' => t('Day'),
    'value' => $amount_today,
  );
  $data['item'][] = array(
    'text' => t('Week'),
    'value' => $amount_week,
  );
  $data['item'][] = array(
    'text' => t('Month'),
    'value' => $amount_month,
  );

  return $data;
}

/**
 * Fetches user post for Geckoboard.
 * 
 * @return array
 *   array containing widget data
 */
function geckoboard_posts_data() {
  $data = array('item' => array());
  $amount_today = db_query("SELECT COUNT(*) FROM {node} WHERE created > :created", array(':created' => REQUEST_TIME - 86400))->fetchColumn();
  $amount_week = db_query("SELECT COUNT(*) FROM {node} WHERE created > :created", array(':created' => REQUEST_TIME - 604800))->fetchColumn();
  $amount_month = db_query("SELECT COUNT(*) FROM {node} WHERE created > :created", array(':created' => REQUEST_TIME - 2629743))->fetchColumn();

  $data['item'][] = array(
    'text' => t('Day'),
    'value' => $amount_today,
  );
  $data['item'][] = array(
    'text' => t('Week'),
    'value' => $amount_week,
  );
  $data['item'][] = array(
    'text' => t('Month'),
    'value' => $amount_month,
  );
  return $data;
}


/**
 * Fetches user post for Geckoboard.
 *
 * @return array
 *   array containing widget data
 */
function geckoboard_comments_data() {
  $data = array('item' => array());
  $amount_today = db_query("SELECT COUNT(*) FROM {comment} WHERE created > :created", array(':created' => REQUEST_TIME - 86400))->fetchColumn();
  $amount_week = db_query("SELECT COUNT(*) FROM {comment} WHERE created > :created", array(':created' => REQUEST_TIME - 604800))->fetchColumn();
  $amount_month = db_query("SELECT COUNT(*) FROM {comment} WHERE created > :created", array(':created' => REQUEST_TIME - 2629743))->fetchColumn();

  $data['item'][] = array(
    'text' => t('Day'),
    'value' => $amount_today,
  );
  $data['item'][] = array(
    'text' => t('Week'),
    'value' => $amount_week,
  );
  $data['item'][] = array(
    'text' => t('Month'),
    'value' => $amount_month,
  );

  return $data;
}
