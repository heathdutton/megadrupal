<?php

/**
 * Implements hook_menu().
 */
function private_innovation_menu() {
  $items['admin/reports/private-innovation'] = array(
    'title' => "Private Innovation",
    'description' => "Reports how many lines of code are being privately maintained.",
    'page callback' => 'private_innovation_table',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function list_files($dir) {
  $files = array();
  $handle = opendir($dir);
  if (!$handle) {
    return array();
  }
  while (($filename = readdir($handle)) !== FALSE) {
    if ($filename[0] == '.') {
      continue;
    }
    $filepath = $dir . '/' . $filename;
    if (is_dir($filepath)) {
      foreach (list_files($filepath) as $subfilename) {
        $files[] = $filename . '/' . $subfilename;
      }
    }
    else {
      $files[] = $filename;
    }
  }
  closedir($handle);
  return $files;
}

function private_innovation_process_item_file($filepath) {
  $file = file($filepath);
  $ext = pathinfo($filepath, PATHINFO_EXTENSION);
  if (in_array($ext, array('js', 'css'))) {
    $type = $ext;
  }
  elseif (count($file) && strpos($file[0], '<?php') === 0) {
    $type = 'php';
  }
  else {
    throw new Exception();
  }
  return array($type, count($file));
}

function private_innovation_get_item($type, $item) {
  // Check if the module is from drupal.org.
  $info = system_get_info($type, $item);
  if ($type == 'module' && ($info['package'] == 'Core' || isset($info['project']) || isset($info['distribution_name']))) {
    throw new Exception();
  }
  if ($type == 'theme' && (empty($info) || (isset($info['package']) && $info['package'] == 'Core') || isset($info['project']) || isset($info['distribution_name']))) {
    throw new Exception();
  }
  // Check if the module is from another repository.
  $info['directory'] = drupal_get_path($type, $item);
  foreach (array('.git', '.bzr', '.svn', 'CVS') as $dir) {
    if (file_exists($info['directory'] . '/' . $dir)) {
      throw new Exception();
    }
  }
  return $info;
}

function private_innovation_process_item(array &$info) {
  // Count lines of code.
  $info['totals'] = array(
    'php' => 0,
    'css' => 0,
    'js' => 0,
  );
  $files = list_files($info['directory']);
  foreach ($files as $filepath) {
    try {
      list ($type, $count) = private_innovation_process_item_file($info['directory'] . '/' . $filepath);
      $info['totals'][$type] += $count;
    }
    catch (Exception $e) {}
  }
  $info['totals']['total'] = array_sum($info['totals']);
}

function _private_innovation_remove_children(array &$items) {
  foreach ($items as $key => $item) {
    foreach ($items as $key2 => $item2) {
      if ($key == $key2) {
        continue;
      }
      if (strpos($item['directory'], $item2['directory']) === 0) {
        unset($items[$key]);
      }
    }
  }
}

function _private_innovation_sort_callback(array $a, array $b) {
  return $a['totals']['total'] < $b['totals']['total'];
}

function private_innovation_results() {
  $item_info = array();
  $modules = module_list();

  foreach ($modules as $module) {
    try {
      $item_info[$module] = private_innovation_get_item('module', $module);
    }
    catch (Exception $e) {}
  }

  $themes = list_themes();
  foreach ($themes as $theme => $info) {
    try {
      $item_info[$theme] = private_innovation_get_item('theme', $theme);
    }
    catch (Exception $e) {}
  }
  _private_innovation_remove_children($item_info);
  foreach ($item_info as &$info) {
    private_innovation_process_item($info);
  }
  uasort($item_info, '_private_innovation_sort_callback');
  return $item_info;
}

function private_innovation_totals(array $item_info) {
  $totals = array(
    'php' => 0,
    'js' => 0,
    'css' => 0,
    'total' => 0,
  );
  foreach ($item_info as $item => $info) {
    foreach ($info['totals'] as $type => $count) {
      $totals[$type] += $count;
    }
  }
  variable_set('private_innovation', $totals['total']);
  return $totals;
}

function private_innovation_table() {
  $item_info = private_innovation_results();

  foreach ($item_info as $item => $info) {
    if (!empty($info['totals'])) {
      $rows[] = array($info['name'],
        array(
          'data' => number_format($info['totals']['php']),
          'style' => 'text-align: right;',
        ),
        array(
          'data' => number_format($info['totals']['js']),
          'style' => 'text-align: right;',
        ),
        array(
          'data' => number_format($info['totals']['css']),
          'style' => 'text-align: right;',
        ),
        array(
          'data' => number_format($info['totals']['total']),
          'style' => 'text-align: right;',
        ),
      );
    }
  }
  $totals = private_innovation_totals($item_info);

  $rows[] = array(t("Total"), 
    array(
      'data' => number_format($totals['php']),
      'style' => 'text-align: right;',
    ),
    array(
      'data' => number_format($totals['js']),
      'style' => 'text-align: right;',
    ),
    array(
      'data' => number_format($totals['css']),
      'style' => 'text-align: right;',
    ),
    array(
      'data' => number_format($totals['total']),
      'style' => 'text-align: right; font-weight: bold;',
    ),
  );
  return array(
    '#theme' => 'table',
    '#header' => array(t("Item"), 
      array(
        'data' => t("PHP"),
        'style' => 'text-align: right;',
      ),
      array(
        'data' => t("JS"),
        'style' => 'text-align: right;',
      ),
      array(
        'data' => t("CSS"),
        'style' => 'text-align: right;',
      ),
      array(
        'data' => t("Total"),
        'style' => 'text-align: right;',
      ),
    ),
    '#rows' => $rows,
  );
}

/**
 * Implements hook_requirements().
 */
function private_innovation_requirements($phase) {
  // Only report on status page.
  if ($phase != 'runtime') {
    return;
  }
  $requirements = array();
  if (!is_int(variable_get('private_innovation'))) {
    $results = private_innovation_results();
    private_innovation_totals($results);
  }
  $requirements['private-innovation'] = array(
    'title' => t("Private innovation"),
    'value' => number_format(variable_get('private_innovation')) . ' LoC (' . l("breakdown", 'admin/reports/private-innovation')  .')',
  );
  return $requirements;
}
