<?php

/**
 * @file course_moodle.module
 * Create and track Moodle course objects in Drupal.
 */
// Include library for dealing with Moodle through SQL.
// @todo totally replace with API calls, when they become available.
require_once 'includes/course_moodle.api.inc';

/**
 * Implements hook_init().
 */
function course_moodle_init() {
  if (in_array(arg(0), array('login', 'logout'))) {
    course_moodle_clear_moodle_cookies();
  }

  global $_course_moodle_prefix;
  $_course_moodle_prefix = course_moodle_prefix();

  if (!empty($_SESSION['course_moodle_editing'])) {
    if ($node = node_load(arg(1))) {
      if ($node->course_moodle['cid']) {
        $instances = array();
        $c = course_moodle_call('core_course_get_contents', $node->course_moodle['cid'], array());
        $course = course_get_course(node_load(arg(1)));
        $objects = $course->getObjects();
        foreach ($objects as $courseObject) {
          if ($courseObject->getInstanceId()) {
            $instances[$courseObject->getModule()][$courseObject->getComponent()][$courseObject->getInstanceId()] = $courseObject->getInstanceId();
          }
        }
        foreach ($c[0]['modules'] as $mdlmod) {
          foreach ($objects as $courseObject) {
            if ($courseObject->getModule() == 'course_moodle' && $courseObject->getComponent() == $mdlmod['modname']) {
              if (!isset($instances[$courseObject->getModule()][$courseObject->getComponent()][$mdlmod['id']])) {
                // Found a course object with the same module name.
                if (!$courseObject->getInstanceId()) {
                  // It's pending!
                  $courseObject->setInstanceId($mdlmod['id']);
                  $courseObject->save();
                  $instances[$courseObject->getModule()][$courseObject->getComponent()][$mdlmod['id']] = $mdlmod['id'];
                  unset($_SESSION['course_moodle_editing']);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function course_moodle_menu() {
  $items = array();

  //exceptions for SCORM objects
  $items['moodle/mod/scorm/undefined'] = array(
    'page callback' => 'courses_moodle_scorm_undefined',
    'access arguments' => array('access content'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['node/%/undefined'] = array(
    'page callback' => 'courses_moodle_scorm_undefined',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['course_moodle/escapeframe/%'] = array(
    'page callback' => 'course_moodle_escapeframe',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
  );

  $items['node/%/course-outline/course-moodle/%course_object'] = array(
    'page callback' => 'course_moodle_edit',
    'access callback' => TRUE,
    'page arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Edit a moodle course object. Construct an iframe from the editUrl.
 *
 * @param CourseObject $courseObject
 */
function course_moodle_edit($courseObject, $op) {
  $message = t('When you are finished editing, !return.', array('!return' => l('return to the course outline', "node/{$courseObject->getCourseNid()}/course-outline")));
  drupal_set_message(filter_xss_admin($message), 'warning');
  if ($op == 'edit') {
    if (!$courseObject->getInstanceId()) {
      $_SESSION['course_moodle_editing'] = TRUE;
    }
    $url = $courseObject->getMoodleEditUrl();
  }
  if ($op == 'questions') {
    $url = $courseObject->getMoodleQuestionsEditUrl();
  }
  return course_iframe($url);
}

/**
 * When a request is coming from moodle to go back to the course outline,
 * pop out of the iframe.
 */
function course_moodle_escapeframe($nid) {
  $course = course_get_course($nid);
  $url = url($course->getUrl());
  print "<script>top.location='$url'</script>";
  exit;
}

/**
 * Implements hook_form_alter().
 */
function course_moodle_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, '_node_form') !== FALSE) {
    $node = $form['#node'];
    if (course_node_is_course($node)) {
      $form['course_moodle']['#tree'] = TRUE;
      $form['course_moodle']['machine_name'] = array(
        '#type' => 'machine_name',
        '#title' => t('Short name'),
        '#description' => t('Example: course_title') . '<br/>' . t('May only contain lowercase letters, numbers and underscores.'),
        '#required' => TRUE,
        '#machine_name' => array(
          'source' => array('title'),
          'label' => 'Short name',
          'exists' => 'course_moodle_machine_name_exists',
        ),
        '#default_value' => !empty($node->course_moodle['machine_name']) ? $node->course_moodle['machine_name'] : '',
      );
    }
  }
}

/**
 * Implements hook_node_update().
 */
function course_moodle_node_update($node) {
  if (course_node_is_course($node)) {
    $keys = db_query('select 1 from {course_moodle} where nid = :nid', array(':nid' => $node->nid))->fetchField() ? array('nid') : array();
    $moodle['nid'] = $node->nid;
    $moodle['machine_name'] = !empty($node->course_moodle['machine_name']) ? $node->course_moodle['machine_name'] : $node->title;
    if (!empty($node->course_moodle['cid'])) {
      $moodle['cid'] = $node->course_moodle['cid'];
    }
    drupal_write_record('course_moodle', $moodle, $keys);
  }
}

/**
 * Implements hook_node_insert().
 */
function course_moodle_node_insert($node) {
  course_moodle_node_update($node);
}

/**
 * Implements hook_node_load().
 */
function course_moodle_node_load($nodes, $types) {
  // Load moodle info to course node.
  $result = db_query('SELECT * FROM {course_moodle} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  while ($row = $result->fetch(PDO::FETCH_ASSOC)) {
    $nodes[$row['nid']]->course_moodle = $row;
  }
}

//////////////////////////////////////////////////////////////////////////////
// Course hooks

/**
 * Implements hook_course_handlers().
 */
function course_moodle_course_handlers() {
  return array(
    // Define our list of supported Moodle object handlers.
    'object' => array(
      'quiz' => array(
        'name' => t('Quiz'),
        'graded' => TRUE,
        'class' => 'CourseObjectMoodleQuiz',
        'description' => t('A Quiz course object.'),
      ),
      'questionnaire' => array(
        'name' => t('Evaluation'),
        'class' => 'CourseObjectMoodleQuestionnaire',
        'description' => t('An Evaluation course object.'),
      ),
      'htmlcourse' => array(
        'name' => t('HTML Course'),
        'class' => 'CourseObjectMoodleHtmlCourse',
        'description' => t('An HTML course object.'),
        'legacy' => TRUE,
      ),
      'scorm' => array(
        'name' => t('SCORM Course'),
        'class' => 'CourseObjectMoodleScorm',
        'description' => t('A SCORM course object.'),
      ),
      'ceinfo' => array(
        'name' => t('CE Info'),
        'class' => 'CourseObjectMoodleCeInfo',
        'description' => t('A CE Info course object.'),
        'legacy' => TRUE,
      ),
      'file' => array(
        'name' => t('Link to a file/URL'),
        'class' => 'CourseObjectMoodleFile',
        'description' => t('A Link to a file/URL course object.'),
        'legacy' => TRUE,
      ),
      'folder' => array(
        'name' => t('Link to a list of files'),
        'class' => 'CourseObjectMoodleFile',
        'description' => t('A Moodle "directory" course object.'),
        'legacy' => TRUE,
      ),
    ),
    // Define an outline handler.
    'outline' => array(
      'moodle' => array(
        'name' => t('Moodle'),
        'description' => t('Moodle outline display.'),
        'callback' => 'course_moodle_outline',
      ),
    ),
    // Define the settings handler.
    'settings' => array(
      'moodle' => array(
        'name' => t('Moodle'),
        'description' => t('Course moodle settings.'),
        'callback' => 'course_moodle_settings_form',
      ),
    ),
  );
}

/**
 * Course outline handler callback.
 *
 * @param object $node
 *   The course node.
 */
function course_moodle_outline($node) {
  // @todo add the default Moodle course outline here.
}

/**
 * Implements hook_learning_application_form().
 * @todo: ensure no ethosce remnants remain
 */
function course_moodle_settings_form() {
  $form = array();
  global $_course_moodle_prefix;

  $form['course_moodle_prefix'] = array(
    '#title' => 'Prefix',
    '#type' => 'textfield',
    '#default_value' => course_moodle_prefix(),
    '#description' => 'This is the prefix of the Moodle database',
  );

  $form['course_moodle_path'] = array(
    '#title' => 'Path',
    '#type' => 'textfield',
    '#default_value' => course_moodle_path(),
    '#description' => 'This is the path to the Moodle installation',
  );

  $form['course_moodle_language'] = array(
    '#title' => 'Language code',
    '#type' => 'textfield',
    '#default_value' => variable_get('course_moodle_language', 'en'),
    '#description' => 'This is the language that users should be created with.',
  );

  $form['course_moodle_token'] = array(
    '#title' => 'Token',
    '#type' => 'textfield',
    '#default_value' => variable_get('course_moodle_token', ''),
    '#description' => 'Token for webservices.',
  );

  $required_functions = array(
    // Courses
    'core_course_create_courses',
    'core_course_get_contents',
    // Info
    'core_webservice_get_site_info',
    // Roles/enroll
    'enrol_manual_enrol_users',
    'core_role_assign_roles',
    'core_role_unassign_roles',
    // Users
    'core_user_create_users',
    'core_user_delete_users',
    'core_user_update_users',
    'core_user_get_users_by_id',
  );

  $status = "Not connected.";
  $functions = array();
  $good = theme_image(array('path' => 'misc/watchdog-ok.png', 'attributes' => array()));
  $bad = theme_image(array('path' => 'misc/watchdog-warning.png', 'attributes' => array()));
  if (variable_get('course_moodle_token', '') && variable_get('course_moodle_path', '')) {
    $res = course_moodle_call('core_webservice_get_site_info', array());
    if ($res['siteurl']) {
      foreach ($res['functions'] as $function) {
        $functions[] = $function['name'];
      }
    }
  }

  foreach ($required_functions as $required) {
    $rows[] = array($required, in_array($required, $functions) ? $good : $bad);
  }
  $status = theme('table', array('header' => array('Required', 'Found'), 'rows' => $rows, 'attributes' => array()));

  $form['course_moodle_api_status'] = array(
    '#title' => 'API Status',
    '#type' => 'markup',
    '#markup' => filter_xss_admin($status),
  );

  $form['#validate'][] = 'course_moodle_settings_validate';

  return system_settings_form($form);
}

/**
 * Validate Moodle API settings form.
 */
function course_moodle_settings_validate(&$form, $form_state) {
  $path = $form_state['values']['course_moodle_path'];
  $token = $form_state['values']['course_moodle_token'];
  try {
    new SoapClient(url($path, array('absolute' => TRUE)) . '/webservice/soap/server.php?wsdl=1&wstoken=' . $token);
  } catch (Exception $e) {
    form_error($form['course_moodle_token'], t('Moodle does not seem to be configured for API access. Please check your prefix, path, and token.'));
    form_error($form['course_moodle_path'], '');
  }
}

/**
 * Get a moodle client.
 *
 * @return SoapClient
 */
function course_moodle_client() {
  $path = course_moodle_path(TRUE);
  $token = variable_get('course_moodle_token', '');

  static $client = NULL;

  if (!$client) {
    $wsdl = $path . "/webservice/soap/server.php?wsdl=1&wstoken=$token";
    $client = new SoapClient($wsdl, array(
      'cache_wsdl' => WSDL_CACHE_NONE,
    ));
    //$client->__setCookie('XDEBUG_SESSION', 'netbeans-xdebug');
  }

  return $client;
}

/**
 * Call the Moodle API through SOAP.
 *
 * @ingroup remote
 * @param string $function
 *   The remote function name.
 * @param mixed ...
 *   Parameter list to pass to the function.
 *
 * @return mixed
 */
function course_moodle_call($function) {
  $client = course_moodle_client();

  try {
    $args = func_get_args();
    array_shift($args);
    $response = call_user_func_array(array($client, $function), ($args));
  } catch (Exception $e) {
    drupal_set_message(t('Moodle API error: %e', array('%e' => $e->getMessage())), 'error');
    drupal_set_message(t('Moodle API error detail: %e', array('%e' => $e->detail)), 'error');
    return FALSE;
  }

  return $response;
}

/**
 * Implements hook_can_take_course().
 *
 * We'll never be taking a Moodle course unauthenticated.
 */
function course_moodle_can_take_course($node, $user) {
  if (!$user->uid) {
    return FALSE;
  }
}

/**
 * Implements hook_course_enroll().
 *
 * Enroll the user in the Moodle course when enrolled in Drupal.
 */
function course_moodle_course_enroll($node, $user) {
  if (!empty($node->course_moodle['cid'])) {
    $userid = course_moodle_create_update_user($user);

    $params = array(
      'roleid' => 5, // 5 = Student
      'userid' => $userid,
      'courseid' => $node->course_moodle['cid'],
    );
    course_moodle_call('enrol_manual_enrol_users', array($params));
  }
}

/**
 * Create a user in Moodle.
 *
 * @return int
 *   Moodle user ID.
 */
function course_moodle_create_update_user($account) {
  $prefix = course_moodle_prefix();
  $sql = "select id from {$prefix}user where idnumber = :uid";
  $userid = db_query($sql, array(':uid' => $account->uid))->fetchField();

  // Build user.
  $muser = new stdClass;
  // Strip out any non-alpha characters.
  $muser->username = preg_replace('/[^\w]/', '_', $account->name);
  $muser->email = $account->mail;
  // Fake password that passes validation.
  $muser->password = 'Ab3*' . md5(uuid_generate());
  $muser->firstname = $account->name;
  $muser->lastname = $account->name;
  $muser->idnumber = $account->uid;
  $muser->lang = variable_get('course_moodle_language', 'en');

  if (!$userid) {
    // User doesn't exist.
    $response = course_moodle_call('core_user_create_users', array($muser));
    $userid = $response[0]['id'];
  }
  else {
    // Update user.
    $response = course_moodle_call('core_user_update_users', array($muser));
  }

  return $userid;
}

/**
 * Implements hook_course_unenroll().
 */
function course_moodle_course_unenroll($node, $user) {
  //Clear SCORM/AICC records for that user:
  global $_course_moodle_prefix;
  $sql_del_scorm = "DELETE FROM {$_course_moodle_prefix}scorm_scoes_track WHERE scoid IN (SELECT scsc.id FROM {$_course_moodle_prefix}scorm sc, {$_course_moodle_prefix}scorm_scoes scsc WHERE sc.id = scsc.scorm AND sc.course = :cid) AND userid IN (SELECT id FROM {$_course_moodle_prefix}user WHERE idnumber = :uid)";
  db_query($sql_del_scorm, array(':cid' => $node->course['cid'], ':uid' => $user->uid));
}

/**
 * Load course machine names.
 *
 * @param $value
 *   The course machine name to check.
 *
 * @return boolean
 *   TRUE if it already exists. FALSE if not.
 */
function course_moodle_machine_name_exists($value) {
  return db_query("SELECT nid FROM {course_moodle} WHERE machine_name = :mn", array(':mn' => $value))->fetchField();
}

/**
 * Implements hook_user_login().
 */
function course_moodle_user_login(&$edit, $account) {
  foreach ($_COOKIE as $key => $value) {
    if (preg_match('/^moodle/i', $key) > 0) {
      setcookie($key, "");
      unset($_COOKIE[$key]);
    }
  }
}

/**
 * Implements hook_user_logout().
 */
function course_moodle_user_logout($account) {
  foreach ($_COOKIE as $key => $value) {
    if (preg_match('/^moodle/i', $key) > 0) {
      setcookie($key, "");
      unset($_COOKIE[$key]);
    }
  }
}

/**
 * Implements hook_user_cancel().
 *
 * @todo cancel moodle account with API
 */
function course_moodle_user_delete($account) {
  global $_course_moodle_prefix;
  $sql = "DELETE FROM {$_course_moodle_prefix}user WHERE idnumber = :uid";
  $rows = db_query($sql, array(':uid' => $account->uid))->rowCount();
  $_message = ($rows) ? "Deleted " : "No user with idnumber ";
  drupal_set_message($_message . $account->uid . " in Moodle.", ($rows) ? 'status' : 'warning');
}

/**
 * Database prefix for Moodle.
 */
function course_moodle_prefix() {
  return variable_get('course_moodle_prefix', 'mdl_');
}

/**
 * Return the path to Moodle as either a relative or absolute string.
 *
 * @param bool $absolute
 *   Flag to return either a relative or absolute URL.
 *
 * @return string
 */
function course_moodle_path($absolute = FALSE) {
  $url = trim(variable_get('course_moodle_path', '/moodle'), '/');
  if ($absolute) {
    global $base_url;
    $url = $base_url . '/' . $url;
  }
  return $url;
}

/**
 * Clear the Moodle session on this domain.
 */
function course_moodle_clear_moodle_cookies() {
  global $cookie_domain;
  foreach (array_keys($_COOKIE) as $key) {
    if (preg_match('/^moodle/i', $key)) {
      setcookie($key, "", REQUEST_TIME - 3600, '/', $cookie_domain);
    }
  }
}

/**
 * Get user details from Moodle.
 *
 * @ingroup remote
 * @todo We still have to look up the userid :( Unless we store it in Drupal...
 */
function course_moodle_get_moodle_user($uid) {
  global $_course_moodle_prefix;
  $userid = db_query("SELECT id FROM {$_course_moodle_prefix}user WHERE idnumber = :uid", array(':uid' => $uid))->fetchField();
  $users = course_moodle_call('core_user_get_users_by_id', array($userid));
  return $users[0];
}

/**
 * Get course details from Moodle.
 *
 * @ingroup remote
 */
function course_moodle_get_course_from_moodle($cid) {
  $courses = course_moodle_call('core_course_get_courses', array('ids' => array($cid)));
  return $courses[0];
}

/**
 * Compare the current quiz with something else.
 *
 * @todo we need a way to get a list of all the course objects in a course, so
 * we don't have to use a query.
 */
function course_moodle_quiz_comparison_form(&$form_state, $courseObject) {
  $nid = arg(1);
  $sql = "select * from {course_outline}
    where nid = :nid
    and requirement_component = :quiz and coid != :coid";
  $result = db_query($sql, array(':nid' => $nid, ':quiz' => 'quiz', ':coid' => $courseObject->getId()));

  $options = array(
    '' => '- none -',
  );

  while ($row = $result->fetch()) {
    $options[$row->coid] = $row->title;
  }

  $form['#method'] = 'GET';

  $form['coid'] = array(
    '#prefix' => 'Compare ' . $courseObject->getTitle() . ' with',
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $_REQUEST['coid'],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Compare',
  );

  $form['comparison'] = array(
    '#type' => 'submit',
    '#value' => 'Download comparison',
  );

  $form['responses'] = array(
    '#type' => 'submit',
    '#value' => 'Download responses',
  );

  return $form;
}

/**
 * Implements hook_field_extra_fields().
 */
function course_moodle_field_extra_fields() {
  $extra = array();
  foreach (entity_get_info() as $entity_type => $entity_info) {
    foreach (array_keys($entity_info['bundles']) as $bundle) {
      if (in_array($bundle, course_get_types())) {
        $extra[$entity_type][$bundle]['form']['course_moodle'] = array(
          'label' => t('Course moodle'),
          'description' => t('Course moodle form elements.'),
          'weight' => 0,
        );
      }
    }
  }
  return $extra;
}

/**
 * Batch profile attach callback.
 */
function course_moodle_batch_attach_profile_data($all_users, &$context) {
  if (!$context['sandbox']) {
    $context['sandbox']['users'] = $all_users;
  }

  $batch = batch_get();
  $cur = $batch['sets'][0];
  $filename = $cur['csv'];


  // Chunk out 100.
  $users = array_splice($context['sandbox']['users'], 0, variable_get('course_moodle_batch', 250));

  // Render the profile data view.
  $view = views_get_view('course_moodle_profile');
  $view->set_arguments(
    array(
      implode(',', array_filter(array_values($users))),
    )
  );
  $view->preview();

  // Build an array with the user ID and profile information.
  $viewarray = array();
  foreach ($view->style_plugin->rendered_fields as $values) {
    $uid = $values['uid'];
    foreach ($values as $fieldname => $value) {
      $viewarray[$uid][$view->field[$fieldname]->options['label']] = $value;
    }
  }

  // Load the CSV we made before the batch.
  // @see http://steindom.com/articles/shortest-php-code-convert-csv-associative-arrays
  $rows = array_map('str_getcsv', file($filename, FILE_IGNORE_NEW_LINES));
  $header = array_shift($rows);
  $csv = array();
  foreach ($rows as $row) {
    // We have to pad it because we might not have values yet.
    $padded = array_pad($row, count($header), '');
    $csv[] = array_combine($header, $padded);
  }

  // Update the rows in the CSV.
  foreach ($csv as $id => $response) {
    if ($viewarray[$response['idnumber']]) {
      $csv[$id] = array_merge($response, $viewarray[$response['idnumber']]);
    }
  }

  // Write out a modified CSV.
  $fh_out = fopen($filename, 'w+');
  fputcsv($fh_out, array_keys($csv[0]));
  foreach ($csv as $line) {
    if (!fputcsv($fh_out, $line)) {
      throw new Exception(t('Error writing CSV.'));
    }
  }
  fclose($fh_out);

  $context['finished'] = (count($all_users) - count($context['sandbox']['users'])) / count($all_users);
}
