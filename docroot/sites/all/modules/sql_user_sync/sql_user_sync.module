<?php

/**
 * @file
 * Sync Drupal users between two sites.
 *
 * SQL User Sync
 *
 * Drupal 7 version:
 * Written by Gianluca Agnocchetti (hiryu)
 */

/**
 * Implements hook_init().
 */
function sql_user_sync_init() {
  if (path_is_admin(current_path())) {
    drupal_add_css(drupal_get_path('module', 'sql_user_sync') . '/sql_user_sync.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
}

/**
 * Implements of hook_menu().
 */
function sql_user_sync_menu() {
  $items = array();
  $items['admin/config/people/sql_user_sync'] = array(
    'title' => 'SQL User Sync',
    'description' => 'Sync Drupal users between two sites.',
    'access arguments' => array('administer sql_user_sync configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sql_user_sync_form'),
    'weight' => 1,
  );

  $items['sql_user_sync/run'] = array(
    'title' => 'SQL User Sync update data',
    'description' => 'Sync Drupal users between two sites.',
    'access arguments' => array('run SQL User Sync updates'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sql_user_sync_run_update'),
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function sql_user_sync_help($section = '') {
  $path = drupal_get_path('module', 'sql_user_sync');
  $output = '';
  switch ($section) {
    case "admin/help#" . 'sql_user_sync':
      $output = file_get_contents($path . "/help.html");
      break;
  }
  return $output;
}

/**
 * Implements of hook_permission().
 */
function sql_user_sync_permission() {
  return array (
    'administer sql_user_sync configuration' => array (
      'title' => t('SQL User Sync config'),
      'description' => t('Perform administration tasks for the module.'),
      'restrict access' => TRUE,
    ),
    'run SQL User Sync updates' => array (
      'title' => t('SQL User Sync run updates'),
      'description' => t('Run updates stored in the database.'),
      'restrict access' => FALSE,
    ),
  );
}

/**
 * Retrieve slave user fields.
 */
function sql_user_sync_slave_user_fields() {
  $sql = variable_get('sql_user_sync_sql');
  $link = @mysqli_connect($sql['host'], $sql['user'], $sql['pass'], $sql['name'], $sql['port']);
  if($link) {
    $query = "SELECT field_config_instance.field_name FROM field_config_instance WHERE bundle = 'user'";
    $result = mysqli_query($link, $query);
    while($row = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
      $rows[$row['field_name']] = $row['field_name'];
    }
    return $rows;
  }
  else {
    return array();
  }
}

/**
 * Get user fields.
 */
function sql_user_sync_user_fields() {
  $fields = field_info_instances('user', 'user');
  foreach ($fields as $field) {
    $machine_name[] = $field['field_name'];
    $label[] = $field['field_name'];
  }
  $rows = array_combine($machine_name, $label);
  sort($rows);
  return $rows;
}

/**
 * Get SQL tables.
 */
function sql_user_sync_get_sql_tables() {
  $results = db_query("SHOW TABLES")->fetchAll(PDO::FETCH_ASSOC);
  foreach ($results as $result) {
    reset($result);
    $key = key($result);
    $rows[$result[$key]] = $result[$key];
  }
  return $rows;
}

/**
 * Implements of hook_form().
 */
function sql_user_sync_form($form_state) {
  $empty = array('##NONE##' => '-- None --');
  $master_table = variable_get('sql_user_sync_master_tables');
  $url = variable_get('sql_user_sync_slave_url');
  $sql = variable_get('sql_user_sync_sql');
  if (empty($sql['tble'])) {
    $sql['tble'] = 'sync-users-from-' . strtolower(preg_replace("/[^a-z]+/i", "-",  variable_get('site_name'))) . '-' . uniqid();
  }
  if (empty($sql['port'])) {
    $sql['port'] = 3306;
  }
  if (empty($master_tables)) {
    $master_tables = array();
  }

  $form['#submit'][] = 'sql_user_sync_form_submit';

  // Master setup.
  $form['sql_user_sync_setup_master'] = array(
    '#title' => check_plain('Master server configuration'),
    '#type' => 'fieldset',
    '#weight' => 1,
  );

  $form['sql_user_sync_setup_master']['sql_user_sync_master_tables'] = array(
    '#title' => t('Table'),
    '#type' => 'select',
    '#description' => t('If this server act as slave select the table where to read updates from external web site.'),
    '#options' => @array_merge($empty, sql_user_sync_get_sql_tables()),
    '#default_value' => $master_table,
    '#required' => FALSE,
    '#weight' => 5,
  );

  // Slave setup.
  $form['sql_user_sync_setup_slave'] = array(
    '#title' => check_plain('Slave server configuration'),
    '#type' => 'fieldset',
    '#weight' => 5,
  );

  $form['sql_user_sync_setup_slave']['sql_user_sync_slave_url'] = array(
    '#title' => t('URL'),
    '#type' => 'textfield',
    '#description' => t('Web site URL. Include <b>http://</b> or <b>https://</b>.'),
    '#default_value' => @$url,
    '#size' => 60,
    '#required' => TRUE,
    '#weight' => 5,
  );

  $form['sql_user_sync_setup_slave']['sql_user_sync_sql_host'] = array(
    '#title' => t('Host'),
    '#type' => 'textfield',
    '#description' => t('Remote MySQL server address.'),
    '#default_value' => @$sql['host'],
    '#size' => 60,
    '#required' => TRUE,
    '#weight' => 5,
  );

  $form['sql_user_sync_setup_slave']['sql_user_sync_sql_port'] = array(
    '#title' => t('Port'),
    '#type' => 'textfield',
    '#description' => t('Remote MySQL server port. Default is 3306.'),
    '#default_value' => @$sql['port'],
    '#size' => 60,
    '#required' => TRUE,
    '#weight' => 15,
  );

  $form['sql_user_sync_setup_slave']['sql_user_sync_sql_name'] = array(
    '#title' => t('DB name'),
    '#type' => 'textfield',
    '#description' => t('Remote Drupal database name'),
    '#default_value' => @$sql['name'],
    '#size' => 60,
    '#required' => TRUE,
    '#weight' => 25,
  );

  $form['sql_user_sync_setup_slave']['sql_user_sync_sql_user'] = array(
    '#title' => t('User'),
    '#type' => 'textfield',
    '#description' => t('Remote MySQL user with table creation permission.'),
    '#default_value' => @$sql['user'],
    '#size' => 60,
    '#required' => TRUE,
    '#weight' => 35,
  );

  $form['sql_user_sync_setup_slave']['sql_user_sync_sql_pass'] = array(
    '#title' => t('Password'),
    '#type' => 'textfield',
    '#description' => t('Remote MySQL password'),
    '#default_value' => @$sql['pass'],
    '#size' => 60,
    '#required' => TRUE,
    '#weight' => 45,
  );

  $form['sql_user_sync_setup_slave']['sql_user_sync_sql_tble'] = array(
    '#title' => t('Table'),
    '#type' => 'textfield',
    '#description' => t('Table where store temporary data, or rather the table to select as Master table in the slave website configuration.'),
    '#default_value' => @$sql['tble'],
    '#size' => 60,
    '#required' => TRUE,
    '#weight' => 55,
  );

  $form['sql_user_sync_setup_fields'] = array(
    '#title' => check_plain('Fields map'),
    '#type' => 'fieldset',
    '#weight' => 10,
  );

  $i = 0;
  $fields_map = variable_get('sql_user_sync_fields_map');

  $master_fields = sql_user_sync_user_fields();
  $slave_fields = sql_user_sync_slave_user_fields();
  $slave_fields = array_merge($empty, $slave_fields);
  foreach($master_fields as $master_field) {
    $form['sql_user_sync_setup_fields']['sql_user_sync_sql_markup_field_' . $i] = array(
      '#type' => 'markup',
      '#markup' => t($master_field),
      '#weight' => 25,
      '#prefix' => '<div class="form-item">',
      '#suffix' => '</div>',
      '#weight' => 45 + $i,
    );
    $i++;
    $form['sql_user_sync_setup_fields']['sql_user_sync_field_' . $master_field] = array(
      '#type' => 'select',
      '#options' => $slave_fields,
      '#default_value' => @$fields_map[$master_field],
      '#weight' => 45 + $i,
    );
    $i++;
  }

  $form['sql_user_sync_setup_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );

  return $form;
}

/**
 * Implements of hook_submit().
 */
function sql_user_sync_form_submit($form, &$form_state) {
  variable_set('sql_user_sync_slave_url', (string)$form_state['values']['sql_user_sync_slave_url']);
  $sql = array(
    'host' => (string)$form_state['values']['sql_user_sync_sql_host'],
    'port' => (string)$form_state['values']['sql_user_sync_sql_port'],
    'name' => (string)$form_state['values']['sql_user_sync_sql_name'],
    'user' => (string)$form_state['values']['sql_user_sync_sql_user'],
    'pass' => (string)$form_state['values']['sql_user_sync_sql_pass'],
    'tble' => (string)$form_state['values']['sql_user_sync_sql_tble'],
  );
  variable_set('sql_user_sync_sql', $sql);

  if ((string)$form_state['values']['sql_user_sync_master_tables'] == '##NONE##') {
    variable_del('sql_user_sync_master_tables');
  }
  else {
    variable_set('sql_user_sync_master_tables', (string)$form_state['values']['sql_user_sync_master_tables']);
  }

  $link = @mysqli_connect($sql['host'], $sql['user'], $sql['pass'], $sql['name'], $sql['port']);
  if($link) {
    $msg = 'Connection established.' . "<br>";
    $type = 'status';

    $query = "SHOW TABLES LIKE '" . $sql['tble'] . "'";
    $chk = mysqli_query($link, $query);
    if ($chk->num_rows > 0) {
      $msg .= 'Table exist.' . "<br>";
      $type = 'status';
    }
    else {
      $query = '
        CREATE TABLE `' . $sql['tble'] . '` (
          `id` int(11) NOT NULL AUTO_INCREMENT,
          `user_data` blob NOT NULL,
          `created` int(11) NOT NULL,
          `updated` int(11) DEFAULT NULL,
          PRIMARY KEY (`id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
      ';
      $create = mysqli_query($link, $query);
      if ($create) {
        $msg .= 'Table created on ' . $sql['host'] . '.' . "<br>";
        $type = 'status';
      }
      else {
        $msg .= 'Table creation failed on ' . $sql['host'] . '.' . "<br>";
        $type = 'warning';
      }
    }
    $master_fields = sql_user_sync_user_fields();
    foreach($master_fields as $master_field) {
      if ((string)$form_state['values']['sql_user_sync_field_' . $master_field] != '##NONE##') {
        $fields_map[$master_field] = (string)$form_state['values']['sql_user_sync_field_' . $master_field];
      }
    }
    if (!empty($fields_map)) {
      variable_set('sql_user_sync_fields_map', $fields_map);
      $msg .= 'Field map saved.' . "<br>";
      $type = 'status';
    }
  }
  else {
    $msg = 'Connection to remote MySQL server failed. Check your configuration.';
    $type = 'error';
  }
  drupal_set_message(t($msg), $type);
}

/**
 * Implements of hook_form_alter().
 */
function sql_user_sync_form_alter(&$form, &$form_state, $form_id) {
  //drupal_set_message($form_id);
  if (($form_id == 'user_profile_form') || ($form_id == 'user_register_form')) {
    $form['#submit'][] = 'sql_user_sync_update_slave';
  }
}
function sql_user_sync_update_slave() {
  $sql = variable_get('sql_user_sync_sql');
  if (empty($sql)) {
    return;
  }
  $edit = $GLOBALS['sql_user_sync_user_update']['edit'];
  $account = $GLOBALS['sql_user_sync_user_update']['account'];
  $category = $GLOBALS['sql_user_sync_user_update']['category'];
  sql_user_sync_send_data($edit, $account, $category);
  sql_user_sync_curl();
  return;
}

/**
 * Implements of hook_user_update().
 */
function sql_user_sync_user_update(&$edit, $account, $category) {
  $GLOBALS['sql_user_sync_user_update']['edit'] = $edit;
  $GLOBALS['sql_user_sync_user_update']['account'] = $account;
  $GLOBALS['sql_user_sync_user_update']['category'] = $category;
  return;
}

/**
 * Implements of hook_user_insert().
 */
function sql_user_sync_user_insert(&$edit, $account, $category) {
  $GLOBALS['sql_user_sync_user_update']['edit'] = $edit;
  $GLOBALS['sql_user_sync_user_update']['account'] = $account;
  $GLOBALS['sql_user_sync_user_update']['category'] = $category;
  return;
}

/**
 * Call Update URL.
 */
function sql_user_sync_curl() {
  $run_url = variable_get('sql_user_sync_slave_url') . '/sql_user_sync/run';
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $run_url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $contents = curl_exec ($ch);
  curl_close ($ch);
  return;
}

/**
 * Send data to slave.
 */
function sql_user_sync_send_data($edit, $account, $category) {
  if (!empty($edit['original']->mail)) {
    $values['index'] = $edit['original']->mail;
  }
  else {
    $values['index'] = $account->mail;
  }
  $values['index'] = $edit['original']->mail;
  $values['mail'] = $account->mail;
  $values['pass'] = $account->pass;
  $fields_map = array_flip(variable_get('sql_user_sync_fields_map'));

  foreach((array)$account as $key => $value) {
    if (in_array($key, $fields_map) && !empty($value['und'][0]['value'])) {
      $values['data'][$key] = $value['und'][0]['value'];
    }
  }

  $sql = variable_get('sql_user_sync_sql');
  $link = @mysqli_connect($sql['host'], $sql['user'], $sql['pass'], $sql['name'], $sql['port']);
  if($link) {
    $query = "
      INSERT INTO `" . $sql['tble'] . "` (user_data, created)
      VALUES ('" . serialize($values) . "', UNIX_TIMESTAMP())
    ";
    $result = mysqli_query($link, $query);
  }
}

/**
 * Run Update.
 */
function sql_user_sync_run_update($verbose = TRUE) {
  $msg = '';
  $type = '';
  $master_table = variable_get('sql_user_sync_master_tables');
  $fields_map = array_flip(variable_get('sql_user_sync_fields_map'));
  if (empty($master_table)) {
    $msg .= 'This server is not configured to act as slave.' . "<br>";
    $type = 'warning';
  }
  else {
    $query = "SELECT id, user_data FROM `" . $master_table . "` WHERE updated IS NULL ORDER BY created ";
    $results = db_query($query)->fetchAll(PDO::FETCH_ASSOC);
    if (!empty($results)) {
      foreach ($results as $result) {
        $user_data = unserialize($result['user_data']);
        $user = user_load_by_mail($user_data['index']);
        if (!empty($user)) {
          // User exist.
          $user->mail = $user_data['mail'];
          $user->pass = $user_data['pass'];
          unset($user_data['mail']);
          unset($user_data['pass']);
          foreach ($user_data['data'] as $key => $value) {
            if (!empty($fields_map[$key])) {
              $user->$fields_map[$key] = array('und' => array(0 => array('value' => $value)));
            }
          }
          $save = user_save($user);
          if ($save) {
            $query = "UPDATE `" . $master_table . "` SET updated = UNIX_TIMESTAMP() WHERE id = " . $result['id'];
            $results = db_query($query);
            $msg .= 'User ' . $user->mail . ' updated.' . "<br>";
            $type = 'status';
          }
        }
        else {
          // User does not exist.
          $user['name'] = preg_replace('/([^@]*).*/', '$1', $user_data['mail']) . "_" . uniqid();
          $user['mail'] = $user_data['mail'];
          $user['pass'] = $user_data['pass'];
          $user['status'] = 1;
          $user['roles'] = array(DRUPAL_AUTHENTICATED_RID => 'authenticated user');
          unset($user_data['mail']);
          unset($user_data['pass']);
          foreach ($user_data['data'] as $key => $value) {
            $user[$fields_map[$key]]['und'][0]['value'] = $value;
          }
          $save = user_save((object)$user);
          if ($save) {
            $query = "UPDATE `" . $master_table . "` SET updated = UNIX_TIMESTAMP() WHERE id = " . $result['id'];
            $results = db_query($query);
            $msg .= 'User ' . $user['mail'] . ' created.' . "<br>";
            $type = 'status';
          }
        }
      }
    }
    else {
      $msg .= 'No user data to update.' . "<br>";
      $type = 'status';
    }
  }
  if ($verbose) {
    drupal_set_message(t($msg), $type);
  }
  return;
}

/**
 * Implements of hook_user_cron().
 */
function sql_user_sync_cron() {
  sql_user_sync_run_update($verbose = FALSE);
}