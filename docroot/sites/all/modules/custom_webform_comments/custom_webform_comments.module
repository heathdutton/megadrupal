<?php
/**
 * @file
 * Allows statuses and omments to be stored for webform submissions
	*
 */
/**
 * Implementation of hook_theme()
	*/
function custom_webform_comments_theme() {
  return array(
    'custom_webform_comments' => array(
      'template' => 'custom_webform_comments',
      'variables' => array('data' => array()),
      'path' => drupal_get_path('module', 'custom_webform_comments') . '/theme'
    ),
  );
}

/**
 * Form for admin comments
	*/
function custom_webform_comments_commentform() {
  global $user;
  $form = array();
  $form['addnew'] = array(
    '#type' => 'fieldset',
    '#title' => 'Add new comment',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE
  );
  $form['addnew']['subject'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#title' => t('Subject'),
    '#prefix' => '<div style="height: 10px;">&nbsp;</div>'
  );
  $form['addnew']['comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Comment'),
    '#required' => TRUE,
  );
  $form['addnew']['commenter_user_id'] = array(
    '#type' => 'hidden',
    '#value' => $user->uid
  );
  $form['addnew']['nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1)
  );
  $form['addnew']['sid'] = array(
    '#type' => 'hidden',
    '#value' => arg(3)
  );
  $form['addnew']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );
  return $form;
}
/**
 * Submit handler for comment form
	*/
function custom_webform_comments_commentform_submit($form, $form_state) {
  $fv = $form_state['values'];
  db_insert('custom_webform_comments')
    ->fields(array(
      'id' => NULL,
      'comment' => $fv['addnew']['comment'],
      'subject' => $fv['addnew']['subject'],
      'nid' => $fv['addnew']['nid'],
      'sid' => $fv['addnew']['sid'],
      'commenter_user_id' => $fv['addnew']['commenter_user_id'],
      'comment_parent' =>  '0',
      'ts' => date("Y-m-d H:i:s")
      ))->execute();
}
/**
 * Gets results for submitted comments
	*/
function custom_webform_comments_commentform_results() {
  $nid = arg(1);
  $sid = arg(3);
  $result = db_query("SELECT * FROM {custom_webform_comments} WHERE nid = :nid AND sid = :sid ORDER BY ts DESC", array(':nid' => $nid, ':sid' => $sid));
  while ($row = $result->fetchAssoc()) {
    $rows[] = $row;
  }
  if (!empty($rows)) {
    return theme('custom_webform_comments', array('data' => $rows));
		}
  else {
    return '';
  }
}

/**
 * Implementation of hook_form
	* creates for for updating submission status
	*/
function custom_webform_comments_statusform() {
  $form = array();
  $form['status'] = array(
    '#type' => 'select',
    '#options' => custom_webform_comments_statuses(),
    '#default_value' => array('notstarted'),
    '#title' => t('Response Status')
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'custom_webform_comments_status_callback',
    )
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1)
  );
  $form['sid'] = array(
    '#type' => 'hidden',
    '#value' => arg(3)
  );
  $build = custom_webform_comments_submission_statuses(array('nid' => arg(1), 'sid' => arg(3)));
  $form['results'] = array(
    '#markup' => '<div id="update_results">' . drupal_render($build) . '</div>',
  );
  return $form;
}

/**
 * Submit handler for Status update form (in the event ajax fails)
	*/
function custom_webform_comments_satusform_submit($form, $form_state) {
  custom_webform_comments_status_dbupdater($form_state['values']);
}

/**
 * Ajax callback for updating status
	*/
function custom_webform_comments_status_callback($form, $form_state) {
  $update = custom_webform_comments_status_dbupdater($form_state['values']);
  $build = custom_webform_comments_submission_statuses($form_state['values']);
  $commands[] = ajax_command_replace("#update_results", "<div id='update_results'>" . drupal_render($build) . "</div>");
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Utility function for updating statuses
	*/
function custom_webform_comments_status_dbupdater($data) {
  global $user;
  //Insert values into database
  $insert = db_insert('custom_webform_submission_status')
    ->fields(array(
      'id' => NULL,
      'status' => $data['status'],
      'submit_time' => date("Y-m-d H:i:s"),
      'nid' => $data['nid'],
      'sid' => $data['sid'],
      'user' => serialize($user)
    ))->execute();
  return $insert;
}
/**
 * Implementation of hook_block_info()
	*/
function custom_webform_comments_block_info() {
  $blocks['custom_webform_comments'] = array(
    // info: The name of the block.
    'info' => t('Webform Submission Comments'),
    'status' => TRUE,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/*/submission/*',
    'weight' => 49
  );
  $blocks['custom_webform_statuses'] = array(
    'info' => t('Webform Submission Statuses'),
    'status' => TRUE,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'node/*/submission/*',
    'weight' => 50
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function custom_webform_comments_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'custom_webform_comments':
      $block['subject'] = t('Comments');
      $custom_webform_comments  = drupal_get_form('custom_webform_comments_commentform');
      $block['content'] = custom_webform_comments_commentform_results() . drupal_render($custom_webform_comments);
    break;
    case 'custom_webform_statuses':
      $custom_webform_statuses = drupal_get_form('custom_webform_comments_statusform');
      $block['content'] = drupal_render($custom_webform_statuses);
    break;
  }
  return $block;
}

/**
 * Implements hook_menu_alter().
 * 
 */
function custom_webform_comments_menu_alter(&$items) {
  // Unsets and rewrites webform results
  $items['node/%webform_menu/webform-results'] = array();
  $items['node/%webform_menu/webform-results'] = array(
    'title' => 'Results',
    'page callback' => 'custom_webform_comments_results_submissions',
    'page arguments' => array(1, FALSE, '50'),
    'access callback' => 'webform_results_access',
    'access arguments' => array(1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
}

/**
 * Returns status options for webform submissions
	*/
function custom_webform_comments_statuses() {
  return array('completed' => t('Completed Follow-up'), 'pending' => t('Pending'), 'notstarted' => t('Not Started'));
}

/**
 * Returns data from Submission db
	*/
function custom_webform_comments_submission_statuses($data) {
  $rows = array();
  $results = db_query("SELECT * from {custom_webform_submission_status} WHERE nid = :nid AND sid = :sid ORDER BY id DESC", array(':nid' => $data['nid'], ':sid' => $data['sid']));
  $status = custom_webform_comments_statuses();
  while ($row = $results->fetchAssoc()) {
    $user = unserialize($row['user']);
    $rows[] = array($status[$row['status']], date("F j, Y, g:i a", strtotime($row['submit_time'])), l($user->name, 'user/' . $user->uid));
  }
  $header = array('Status', 'Date', 'User');
  $build['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => 'No status changes yet',
  );
  return $build;
}

// All functions within this file need the webform.submissions.inc.
require_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');

/**
 * Retrieve lists of submissions for a given webform.
	* This is ripoff from the Webform module
 */
function custom_webform_comments_results_submissions($node, $user_filter, $pager_count) {
  global $user;

  if (isset($_GET['results']) && is_numeric($_GET['results'])) {
    $pager_count = $_GET['results'];
  }

  $header = theme('webform_results_submissions_header', array('node' => $node));
  if ($user_filter) {
    if ($user->uid) {
      drupal_set_title(t('Submissions for %user', array('%user' => $user->name)), PASS_THROUGH);
    }
    else {
      drupal_set_title(t('Your submissions'));
      webform_disable_page_cache();
    }
    webform_set_breadcrumb($node);
    $submissions = webform_get_submissions(array('nid' => $node->nid, 'uid' => $user->uid), $header, $pager_count);
    $count = webform_get_submission_count($node->nid, $user->uid);
  }
  else {
    $submissions = webform_get_submissions($node->nid, $header, $pager_count);
    $count = webform_get_submission_count($node->nid);
  }

  $operation_column = end($header);
  $operation_total = $operation_column['colspan'];

  $rows = array();
  foreach ($submissions as $sid => $submission) {
    $row = array(
      $submission->is_draft ? t('@sid (draft)', array('@sid' => $sid)) : $sid,
      format_date($submission->submitted, 'short'),
    );
    if (webform_results_access($node, $user)) {
      $row[] = theme('username', array('account' => $submission));
      $row[] = $submission->remote_addr;
    }
    $row[] = l(t('View'), "node/$node->nid/submission/$sid");
    $operation_count = 1;
    // No need to call this multiple times, just reference this in a variable.
    $destination = drupal_get_destination();
    if (webform_submission_access($node, $submission, 'edit', $user)) {
      $row[] = l(t('Edit'), "node/$node->nid/submission/$sid/edit", array('query' => $destination));
      $operation_count++;
    }
    if (webform_submission_access($node, $submission, 'delete', $user)) {
      $row[] = l(t('Delete'), "node/$node->nid/submission/$sid/delete", array('query' => $destination));
      $operation_count++;
    }
    if ($operation_count < $operation_total) {
      $row[count($row) - 1] = array('data' => $row[count($row) - 1], 'colspan' => $operation_total - $operation_count + 1);
    }
    $row[] = custom_webform_comments_getrowstatus($node->nid, $sid);
    $rows[] = $row;
  }

  $element['#theme'] = 'webform_results_submissions';
  $element['#node'] = $node;
  $element['#submissions'] = $submissions;
  $element['#total_count'] = $count;
  $element['#pager_count'] = $pager_count;
  $element['#attached']['library'][] = array('webform', 'admin');
  
  //Add status to header
  $header[] = 'Status';
  $element['table']['#theme'] = 'table';
  $element['table']['#header'] = $header;
  $element['table']['#rows'] = $rows;
  $element['table']['#operation_total'] = $operation_total;

  return drupal_render($element);
}

/**
 * Retrieves most recent status of submission
	* @param $nid 
	* @param $sid
	*/
function custom_webform_comments_getrowstatus($nid, $sid) {
  $query = db_query_range("SELECT status from {custom_webform_submission_status} WHERE nid = :nid AND sid = :sid ORDER BY id DESC", 0, 1, array(':nid' => $nid, ':sid' => $sid));
  $status = custom_webform_comments_statuses();
  $result = $query->fetchField();
  if ($result) {
    return $status[$result];
  }
  else {
    return t('Not Started');
  }
}