<?php

define('JQPRINT_FILENAME', 'jquery.jqprint-0.3.js');
define('JQPRINT_DOWNLOAD', 'https://github.com/rbayliss/jquery.jqprint/archive/master.tar.gz');

/**
 * Implements hook_help().
 */
function commerce_pos_help($path, $arg) {
  switch ($path) {
    case 'admin/commerce/pos':
      return t('This page provides point of sale management of store orders.');
    case 'admin/help#commerce_pos':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A module providing a point of sale interface for managing Drupal Commerce orders.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function commerce_pos_menu() {
  $items = array();
  $items['admin/commerce/pos'] = array(
    'title' => 'Point of Sale',
    'description' => 'Manage point of sale orders and configuration.',
    'access arguments' => array('use pos'),
    'page callback' => 'commerce_pos_pos_page',
    'file' => 'commerce_pos.pages.inc',
  );
  $items['admin/commerce/pos/interface'] = array(
    'title' => 'Point of Sale',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-10',
  );
  $items['admin/commerce/pos/%ctools_js/%'] = array(
    'title' => 'Modal Command',
    'access arguments' => array('use pos'), // todo: Fix.
    'page callback' => 'commerce_pos_modal_command_window_page',
    'page arguments' => array(3, 4),
    'file' => 'commerce_pos.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/commerce/pos/config'] = array(
    'title' => 'Configuration',
    'access arguments' => array('administer pos'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_configuration_form'),
    'file' => 'commerce_pos.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_pos_permission() {
  return array(
    'use pos' => array(
      'title' => t('Use POS'),
      'description' => t('Use the Point of Sale system.'),
    ),
    'administer pos' => array(
      'title' => t('Administer POS Settings'),
      'description' => t('Change the configuration for the Point of Sale system.'),
    )
  );
}

/**
 * Form callback for the main input form.
 */
function pos_input_form($form, $form_state) {
  $form['#attributes']['class'] = array('pos-input-form');
  $form['input'] = array(
    '#type' => 'textfield',
    '#title' => t('Manual Input'),
    '#default_value' => isset($form_state['values']) ? $form_state['values']['input'] : NULL
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'pos_input_form_ajax',
      // Bind to click instead of mousedown.  @see http://drupal.org/node/216059
      'event' => 'click',
    )
  );
  if (!variable_get('commerce_pos_touchscreen_mode', FALSE)) {
    $form['submit']['#attributes']['class'] = array('element-invisible');
  }

  return $form;
}

/**
 * Form callback for the main input form.
 */
function pos_input_form_submit($form, &$form_state) {
  $pos = CommercePOS::instance();
  try {
    $pos->executeCommand($form_state['values']['input']);
  }
  catch(InvalidArgumentException $e) {
    form_error($form['input'], $e->getMessage());
  }
  catch(RuntimeException $e) {
    watchdog_exception('POS Input', $e);
    drupal_set_message(t('There was an unspecified error.'), 'error');
  }
}

/**
 * Ajax callback for when the main input form is submitted.
 */
function pos_input_form_ajax($form, $form_state) {
  $pos = CommercePOS::instance();
  $interface = POS_Interface::instance($pos);

  $form['input']['#value'] = NULL;
  return array(
    '#type' => 'ajax',
    '#commands' => $interface->buildAjax($form)
  );
}

/**
 * Implements hook_theme().
 */
function commerce_pos_theme($existing, $type, $theme, $path) {
  $info = array();
  $info['pos_buttons'] = array(
    'template' => 'pos-buttons',
    'path' => $path . '/theme',
    'variables' => array(
      'buttons' => array(),
      'numbers' => array(),
    )
  );
  $info['pos_receipt'] = array(
    'template' => 'pos-receipt',
    'path' => $path . '/theme',
    'file' => 'commerce_pos.theme.inc',
    'variables' => array(
      'pos' => NULL,
    )
  );
  $info['pos_order_info'] = array(
    'template' => 'pos-order-info',
    'path' => $path . '/theme',
    'variables' => array(
      'order' => NULL,
    )
  );
  return $info;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_pos_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state) {
  $order = $form_state['order'];
  if (commerce_pos_order_is_on_pos($order)) {
    $form['#submit'][] = 'commerce_pos_form_commerce_payment_order_transaction_add_form_submit';
    // If it's a POS order, cancel means going back to the interface/closing modal.
    $form['actions']['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/pos', array('attributes' => array('class' => array('ctools-close-modal'))));
  }
}

/**
 * Submit handler for the commerce_payment_order_transaction_add_form.
 *
 * Only added if the order is a POS order.
 */
function commerce_pos_form_commerce_payment_order_transaction_add_form_submit($form, &$form_state) {
  $form_state['redirect'] = array('admin/commerce/pos');
  //Print a receipt by invoking the RP command.  This allows replacement of
  // the entire receipt printing mechanism by changing this command.
  CommercePOS::instance()->executeCommand('RP');
}

/**
 * Implements hook_views_api().
 */
function commerce_pos_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_pos') . '/views',
  );

}

/**
 * Determine if the order in question is currently on the global $user's POS.
 *
 * @param $order
 *
 * @return bool
 */
function commerce_pos_order_is_on_pos($order) {
  $state = POS_State::get(FALSE);
  if ($state && $state->hasOrder()) {
    $pos_order = $state->getOrder();
    return $pos_order->order_id == $order->order_id;
  }
  return FALSE;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function commerce_pos_ctools_plugin_type() {
  $types['commands'] = array(
    'cache' => TRUE,
    'defaults' => array(
      'handler_options' => array(),
    ),
    'classes' => array('handler'),
    'use hooks' => TRUE,
  );
  $types['buttons'] = array(
    'cache' => FALSE,
    'defaults' => array(
      'handler_options' => array(),
    ),
    'classes' => array('handler'),
    'use hooks' => TRUE,
  );
  $types['panes'] = array(
    'load themes' => TRUE,
    'cache' => TRUE,
    'defaults' => array(
      'handler_options' => array(),
    ),
    'classes' => array('handler'),
    'use hooks' => TRUE,
  );
  return $types;
}

/**
 * Implements hook_commerce_pos_commands().
 *
 * @return array
 */
function commerce_pos_commerce_pos_commands() {
  $commands = array();
  $commands['clear'] = array(
    'title' => 'Clear',
    'handler' => 'POSCommand_Clear',
    'input_pattern' => 'CL',
  );
  $commands['add_product'] = array(
    'title' => 'Product',
    'handler' => 'POSCommand_AddProduct',
    'weight' => 255,
    'input_pattern' => '%s',
  );
  $commands['load_order'] = array(
    'title' => 'Load Order',
    'handler' => 'POSCommand_LoadOrder',
    'input_pattern' => 'OR%s',
  );
  $commands['reprint'] = array(
    'title' => 'Print Receipt',
    'handler' => 'POSCommand_Reprint',
    'input_pattern' => 'RP',
  );
  $commands['set_user'] = array(
    'title' => 'Customer',
    'handler' => 'POSCommand_SetUser',
    'input_pattern' => 'US%s',
  );
  $commands['void'] = array(
    'title' => 'Void',
    'handler' => 'POSCommand_Void',
    'input_pattern' => 'VOID%s',
  );
  $commands['price_check'] = array(
    'title' => 'Price Check',
    'handler' => 'POSCommand_PriceCheck',
    'input_pattern' => 'CHK%s',
  );
  return $commands;
}

/**
 * Implements hook_commerce_pos_buttons().
 */
function commerce_pos_commerce_pos_buttons() {
  $buttons = array();
  foreach(ctools_get_plugins('commerce_pos', 'commands') as $id => $data) {
    $buttons[$id] = array(
      'title' => $data['title'],
      'handler' => 'POS_Button_Command',
      'handler_options' => array(
        'command_id' => $id,
      )
    );
  }
  foreach(commerce_payment_methods() as $method) {
    $id = 'payment_' . $method['method_id'];
    $buttons[$id] = array(
      'title' => $method['display_title'],
      'handler' => 'POS_Button_Payment',
      'handler_options' => array(
        'method_id' => $method['method_id'],
      )
    );
  }
  $buttons['user_modal'] = array(
    'title' => t('Customer'),
    'handler' => 'POS_Button_Modal_View',
    'handler_options' => array(
      'view' => 'pos_user_selection',
      'display' => 'default',
    )
  );
  $buttons['product_modal'] = array(
    'title' => t('Product'),
    'handler' => 'POS_Button_Modal_View',
    'handler_options' => array(
      'view' => 'pos_product_selection',
      'display' => 'default',
    )
  );
  $buttons['order_modal'] = array(
    'title' => t('Order'),
    'handler' => 'POS_Button_Modal_View',
    'handler_options' => array(
      'view' => 'pos_order_selection',
      'display' => 'default',
    )
  );
  return $buttons;
}

/**
 * Implements hook_commerce_pos_panes().
 *
 * @return array
 */
function commerce_pos_commerce_pos_panes() {
  $panes = array();

  $panes['alerts'] = array(
    'title' => 'Alerts',
    'handler' => 'POSPane_Alerts',
    'weight' => -5
  );
  $panes['input'] = array(
    'title' => 'Input',
    'handler' => 'POSPane_Input',
    'weight' => -1,
  );
  $panes['order'] = array(
    'title' => 'Order',
    'handler' => 'POSPane_Order',
    'weight' => 5,
  );
  $panes['commands'] = array(
    'title' => 'Commands',
    'handler' => 'POSPane_Commands',
    'handler_options' => array(
      'show_keypad' => variable_get('commerce_pos_touchscreen_mode', FALSE)
    ),
    'weight' => 10,
  );
  return $panes;
}