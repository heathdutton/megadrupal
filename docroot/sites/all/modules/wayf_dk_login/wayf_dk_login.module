<?php

define('WAYF_DK_LOGIN_ORGANIZATIONS_LIST_URL', 'https://wayf.wayf.dk/module.php/wayf/idpTilTjeneste.php');

/**
 * @file
 * WAYF.dk Login.
 */

module_load_include('inc', 'wayf_dk_login', 'lib/SPortoException');
module_load_include('inc', 'wayf_dk_login', 'lib/SPorto');

/**
 * Implements hook_ctools_plugin_directory().
 */
function wayf_dk_login_ctools_plugin_directory($owner, $plugin_type) {
  // we'll be nice and limit scandir() calls.
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_theme().
 */
function wayf_dk_login_theme($existing, $type, $theme, $path) {

  $template_path = drupal_get_path('module', 'wayf_dk_login') . '/templates';

  return array(
    'wayf_dk_login' => array(
      'variables' => array('icon' => '', 'login_url' => '/wayf/consume'),
      'template' => 'wayf_dk_login',
      'path' => $template_path,
    ),
  );
}

/**
 * Implements hook_help().
 */
function wayf_dk_login_help($path, $arg) {
  switch ($path) {
    case 'admin/help#wayf_dk_login':
      $output = '<p>' . t('Implements WAYF.dk login.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function wayf_dk_login_permission() {
  return array(
    'administer wayf' => array(
      'title' => t('Administer WAYF'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wayf_dk_login_menu() {

  $items['admin/config/people/wayf'] = array(
    'title' => 'WAYF.dk settings',
    'description' => 'Configure WAYF.dk module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wayf_dk_login__settings_form'),
    'access arguments' => array('administer wayf'),
    'file' => 'wayf_dk_login.admin.inc',
  );

  $items['wayf/consume'] = array(
    'page callback' => 'wayf_dk_login__endpoint',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['wayf/logout'] = array(
    'page callback' => 'wayf_dk_login__logout_endpoint',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * SAML endpoint, this is the consumer endpoint for authentication requests.
 */
function wayf_dk_login__endpoint() {

  try {
    $sporto_config = array(
      'idp_certificate' => variable_get('wayf_dk_login_idp_certificate'),
      'sso' => variable_get('wayf_dk_login_idp_sso'),
      'private_key' => variable_get('wayf_dk_login_sp_key'),
      'asc' => variable_get('wayf_dk_login_sp_endpoint'),
      'entityid' => variable_get('wayf_dk_login_sp_entityid'),
    );

    $sporto = new WAYF\SPorto($sporto_config);
    $result = $sporto->authenticate();

    if (variable_get('wayf_dk_login_log_auth_data', FALSE)) {
      watchdog('wayf_dk_login', 'Authentication data: %data', array('%data' => var_export($result, TRUE)), WATCHDOG_DEBUG);
    }

    // eduPersonTargetedID is a persistent, non-reassigned, privacy-preserving
    // identifier designed to provide a service provider with a unique
    // identifier for a logged in person while preserving the person's privacy.
    $edu_person_targeted_id = $result['attributes']['eduPersonTargetedID'][0];

    // Check if the organization is allowed here.
    $allowed_orgs = array_filter(variable_get('wayf_dk_login_organizations_active', array()));
    if (!empty($allowed_orgs)) {
      $organization = reset($result['attributes']['schacHomeOrganization']);
      if (empty($allowed_orgs[$organization])) {
        drupal_set_message(t("Your organization have no access to this service."), 'error');
        watchdog('wayf_dk_login', "Error saving user account : %name, the organization %organization is not allowed.", array(
          '%name' => $edu_person_targeted_id,
          '%organization' => $organization,
        ), WATCHDOG_ERROR);
        drupal_goto('<front>');
        return;
      }
    }

    user_external_login_register($edu_person_targeted_id, 'wayf_dk_login');

    // The user should now be authenticated but lets make sure that it is so.
    // An example of where that might not be the case: The user and authmap
    // tables have maxlengths of 60 and 128 characters respectively for the
    // username. Some examples of eduPersonTargetedID say that the value may be
    // up to 256 characters long. In that case user creation will fail.
    global $user;
    if (!$user) {
      watchdog('wayf_dk_login', "Valid WAYF user not authenticated : %name.", array('%name' => $edu_person_targeted_id), WATCHDOG_ERROR);
      drupal_goto('<front>');
    }

    // Update user information from WAYF attributes.
    $userinfo = array();
    // Always set the user email to an email address in the authentication
    // result if it is available.
    if (!empty($result['attributes']['mail'])) {
      $userinfo['mail'] = array_shift($result['attributes']['mail']);
    }
    // Map the remaining fields.
    wayf_dk_login__map_fields($result['attributes'], $userinfo);
    $account = user_save($user, $userinfo);

    if (!$account) {
      // If an error occurred during user_save() the log it. The user is still
      // logged in and should have a functional account so let them continue.
      watchdog('wayf_dk_login', "Error saving fields on user account : %name.", array('%name' => $edu_person_targeted_id), WATCHDOG_ERROR);
    }

    drupal_goto('<front>');
  }
  catch (\WAYF\SPortoException $e) {
    echo $e->getMessage();
    exit;
  }
}

/**
 * Logout endpoint.
 */
function wayf_dk_login__logout_endpoint() {
  // Set library configuration.
  $config = array(
    'idp_certificate' => variable_get('wayf_dk_login_idp_certificate'),
    'sso' => variable_get('wayf_dk_login_idp_sso'),
    'slo' => variable_get('wayf_dk_login_idp_slo'),
    'private_key' => variable_get('wayf_dk_login_sp_key'),
    'asc' => variable_get('wayf_dk_login_sp_endpoint'),
    'entityid' => variable_get('wayf_dk_login_sp_entityid'),
  );

  try {
    // Build SAML message and logout.
    $sporto = new WAYF\SPorto($config);

    // Check if user is logged into WAYF.
    if ($sporto->isLoggedIn()) {
      $sporto->logout();
    }
    else {
      // Check if the user is logged into the site. The WAYF logout redirect may
      // have stopped the logout process. So this will give Drupal a change to
      // complete the logout.
      if (user_is_logged_in()) {
        drupal_goto('user/logout');
      }
      drupal_goto();
    }
  }
  catch (\WAYF\SPortoException $e) {
    echo $e->getMessage();
    exit;
  }
}

/**
 * Implements hook_user_logout().
 *
 * Ensures that the WAYF logout function is called on user logout.
 */
function wayf_dk_login_user_logout() {
  // Set library configuration.
  $config = array(
    'idp_certificate' => variable_get('wayf_dk_login_idp_certificate'),
    'sso' => variable_get('wayf_dk_login_idp_sso'),
    'slo' => variable_get('wayf_dk_login_idp_slo'),
    'private_key' => variable_get('wayf_dk_login_sp_key'),
    'asc' => variable_get('wayf_dk_login_sp_endpoint'),
    'entityid' => variable_get('wayf_dk_login_sp_entityid'),
  );

  // Checl if the user maybe logged into WAYF.
  $sporto = new WAYF\SPorto($config);
  if ($sporto->isLoggedIn()) {
    wayf_dk_login__logout_endpoint();
  }
}

/**
 * Map fields from released attributes to user fields.
 */
function wayf_dk_login__map_fields($attributes, &$userinfo) {
  $wayf_field_mapping = variable_get('wayf_dk_login_field_mapping', array());
  foreach ($wayf_field_mapping as $field_name => $mapping) {
    if (!empty($mapping) && !empty($attributes[$mapping][0])) {
      $userinfo[$field_name][LANGUAGE_NONE][0]['value'] = $attributes[$mapping][0];
    }
  }
}

/**
 * Function wayf_dk_login__icons.
 *
 * @return array
 *   returns array with icons file names
 */
function wayf_dk_login__icons() {

  return array(
    'UK_01.png',
    'UK_02.png',
    'UK_03.png',
    'UK_04.png',
    'UK_05.png',
    'UK_01G.png',
    'UK_02G.png',
    'UK_03G.png',
    'UK_04G.png',
    'UK_05G.png',
    'wayf_logo.png',
  );
}

/**
 * Function wayf_dk_login__icon_size.
 *
 * @param [string] $icon
 *   the filename of the icon to return size of
 *
 * @return string
 *   width/height attributes
 */
function wayf_dk_login__icon_size($icon) {

  switch ($icon) {
    case 'UK_01G.png':
      return (object) array('width' => 83, 'height' => 34);

    case 'UK_01.png':
      return (object) array('width' => 79, 'height' => 34);

    case 'UK_02G.png':
      return (object) array('width' => 79, 'height' => 41);

    case 'UK_02.png':
      return (object) array('width' => 79, 'height' => 41);

    case 'UK_03G.png':
      return (object) array('width' => 93, 'height' => 25);

    case 'UK_03.png':
      return (object) array('width' => 94, 'height' => 26);

    case 'UK_04G.png':
      return (object) array('width' => 57, 'height' => 25);

    case 'UK_04.png':
      return (object) array('width' => 58, 'height' => 24);

    case 'UK_05G.png':
      return (object) array('width' => 71, 'height' => 31);

    case 'UK_05.png':
      return (object) array('width' => 71, 'height' => 31);

    case 'wayf_logo.png':
      return (object) array('width' => 125, 'height' => 65);
  }

}

/**
 * Function wayf_dk_login_form_user_login_alter.
 *
 * @param [array] $form
 *   form array
 * @param [array] $form_state
 *   form state array
 */
function wayf_dk_login_form_user_login_alter(&$form, &$form_state) {

  if (variable_get('wayf_dk_login_loginform')) {
    $icon_path = drupal_get_path('module', 'wayf_dk_login') . '/icons/' . variable_get('wayf_dk_login_icon');
    $icon_size = wayf_dk_login__icon_size(variable_get('wayf_dk_login_icon'));
    $form['wayf_login'] = array(
      '#weight' => 1000,
      '#type' => 'markup',
      '#markup' => '<div class="wayf-dk-login">' . t('Login with')
      . ': </div><a class="wayf-login-link" href="/wayf/consume">'
      . theme('image', array(
          'path' => $icon_path,
          'attributes' => array(
            'width' => $icon_size->width,
            'height' => $icon_size->height,
            'class' => 'wayf-logo',
          ),
        ))
      . '</a>',
    );
  }
}

/**
 * Function wayf_dk_login__get_ipd_metadata.
 *
 * @param [string] $mode
 *   string with mode : test, qa or production.
 *
 * @return object
 *   Object with the service providers certificate og location.
 */
function wayf_dk_login__get_ipd_metadata($mode) {

  switch ($mode) {
    case 'test':
      $metadata_url = 'https://testbridge.wayf.dk/saml2/idp/metadata.php';
      break;

    case 'qa':
      $metadata_url = 'https://betawayf.wayf.dk/saml2/idp/metadata.php';
      break;

    case 'production':
      $metadata_url = 'https://wayf.wayf.dk/saml2/idp/metadata.php';
      break;
  }

  // Set default information.
  $info = (object) array(
    'cert' => '',
    'sso' => '',
    'slo' => '',
  );

  @$metadata = file_get_contents($metadata_url);
  if ($metadata === FALSE) {
    drupal_set_message(t('An error occurred, WAYF metadata service not available.'), 'error', FALSE);
  }
  else {
    $xml = simplexml_load_string($metadata);
    $xml->registerXPathNamespace('md', 'urn:oasis:names:tc:SAML:2.0:metadata');
    $xml->registerXPathNamespace('ds', 'http://www.w3.org/2000/09/xmldsig#');

    $idpssodescriptor = '/md:EntityDescriptor/md:IDPSSODescriptor';
    $binding = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect';

    // Get SignOn and logout urls.
    $sso = $xml->xpath("$idpssodescriptor/md:SingleSignOnService[@Binding='$binding']/@Location");
    $slo = $xml->xpath("$idpssodescriptor/md:SingleLogoutService[@Binding='$binding']/@Location");

    // Get certificate data.
    $cert = $xml->xpath("$idpssodescriptor/md:KeyDescriptor[@use='signing']/ds:KeyInfo/ds:X509Data/ds:X509Certificate");

    // Set information form the metadate.
    $info = (object) array(
      'cert' => (string) $cert[0],
      'sso' => (string) $sso[0]['Location'],
      'slo' => (string) $slo[0]['Location'],
    );
  }

  return $info;
}

/**
 * Implements hook_cron().
 *
 * Imports a list of WAYF organizations.
 */
function wayf_dk_login_cron() {
  $feed_url = variable_get('wayf_dk_login_organizations_list_url', WAYF_DK_LOGIN_ORGANIZATIONS_LIST_URL);
  $content = file_get_contents($feed_url);
  $data = json_decode($content, TRUE);

  $data['https://testidp.wayf.dk/module.php/core/loginuserpass.php'] = array(
    'da' => 'WAYF test-institution (IDP)',
    'en' => 'WAYF test-institution (IDP)',
    'schacHomeOrganization' => 'testidp.wayf.dk',
  );

  variable_set('wayf_dk_login_organizations_list', $data);
}
