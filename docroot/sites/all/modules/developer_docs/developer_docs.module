<?php

/**
 * @file
 * This is the main module which currently lists all drupal Modules.
 *
 * And also the overview of those modules.
 */

/**
 * Implements hook_menu().
 */
function developer_docs_menu() {
  $items = array();
  $items['admin/reports/developer-docs'] = array(
    'title' => 'Developer Docs',
    'page callback' => 'developer_docs_modules_list',
    'description' => 'Lists all core, contrib and custom modules for which documentation can be viewed.',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/reports/developer-docs/%'] = array(
    'title' => 'Title',
    'title callback' => 'developer_docs_title_callback',
    'type' => MENU_CALLBACK,
    'title arguments' => array(3),
    'page callback' => 'developer_docs_module_overview',
    'page arguments' => array(3),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Returns list of installed modules in the site.
 *
 * @return array
 *   An associative array with installed module list.
 */
function developer_docs_modules_list() {
  $list = module_list();
  $title = array(t('Modules'), t('Version'), t('Created'),
    t('Description'), t('Documentation'),
  );
  $items = array();
  foreach ($list as $l) {
    $info = system_get_info('module', $l);
    $mod_date = !empty($info['datestamp']) ? format_date(str_replace(array('"', ' '), '', $info['datestamp']), 'custom', 'm/d/Y') : '';
    $mod_version = !empty($info['version']) ? $info['version'] : '';
    $items[] = array($info['name'], $mod_version, $mod_date,
      $info['description'], l(t('View'), 'admin/reports/developer-docs/' . $l),
    );
  }
  $output['#attached']['css'][] = drupal_get_path('module', 'developer_docs') . '/css/module_list.css';
  $output['#attached']['js'][] = drupal_get_path('module', 'developer_docs') . '/js/developer_docs.js';
  $output['header'] = array(
    '#markup' => '<h3>' . t('List of Installed Modules') . '</h3>',
  );
  $output['module_filter'] = array(
    '#theme' => 'textfield',
    '#input' => TRUE,
    '#autocomplete_path' => FALSE,
    '#attributes' => array(
      'id' => array('element-class'),
      'placeholder' => t('search module'),
    ),
    '#prefix' => '<div id="search-box">',
    '#suffix' => '</div>',
  );
  $output['module_list'] = array(
    '#theme' => 'table',
    '#header' => $title,
    '#rows' => $items,
    '#attributes' => array('class' => array('module-list')),
  );
  return $output;
}

/**
 * Overview of a module - information about hooks, menus, etc.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return array
 *   Return all information about the module.
 */
function developer_docs_module_overview($mod) {
  if (in_array($mod, module_list())) {
    drupal_add_js('misc/form.js');
    drupal_add_js('misc/collapse.js');
    $drup_elements = array(
      'menu' => t('Administration menu'),
      'hooks' => t('Hooks'),
      'schema' => t('Database Schemas'),
      'theme' => t('Themes'),
      'variable' => t('Variables'),
      'block_info' => t('Blocks'),
      'node_info' => t('Node types'),
      'entity_info' => t('Entity Types'),
      'field_info' => t('Fields'),
      'field_formatter_info' => t('Field Formatters'),
      'field_widget_info' => t('Field Widgets'),
      'hook_api' => t('Hooks Created'),
    );
    $pres_elements = array();
    $module_name = ucwords(str_replace('_', ' ', $mod));
    drupal_add_css(drupal_get_path('module', 'developer_docs') . '/css/developer_docs.css');

    // Introduction about the module.
    $dev_module_info = developer_docs_get_module_info($mod);

    // List of Menu links created by a module.
    $render_menu = array();
    $menus = developer_docs_menu_list($mod);
    if (!empty($menus)) {
      $menu_title = array(t('Menu Name'), t('Description'), t('Page Callback'),
        t('Access Callback'), t('link'),
      );
      foreach ($menus as $key => $menu) {
        $menu_list[] = array($menu['title'], $menu['description'], $menu['pcallback'],
          $menu['acallback'], '<a href=' . url() . $key . '>' . t('Manage') . '</a>',
        );
      }
      $render_menu = theme('table', array('header' => $menu_title, 'rows' => $menu_list));
      $pres_elements['menu'] = $drup_elements['menu'];
    }

    // List of core hooks used by a module.
    $render_core_hooks = array();
    $render_contribute_hooks = array();
    $hooks = developer_docs_other_hooks($mod);
    if (!empty($hooks) == TRUE) {
      if (!empty($hooks['core'])) {
        $render_core_hooks = theme('item_list', array(
          'items' => $hooks['core'],
          'title' => '',
          'type' => 'ul',
          'attributes' => array(),
          )
        );
      }
      if (!empty($hooks['contrib'])) {
        $render_contribute_hooks = theme('item_list', array(
          'items' => $hooks['contrib'],
          'title' => '',
          'type' => 'ul',
          'attributes' => array(),
          )
        );
      }
      $pres_elements['hooks'] = $drup_elements['hooks'];
    }
    // Schemas created by a module.
    $render_schema = developer_docs_module_schema($mod);
    if (!empty($render_schema)) {
      $pres_elements['schema'] = $drup_elements['schema'];
    }

    // Variables created by a module.
    $render_vars = array();
    $mod_var = developer_docs_variables($mod);
    if (!empty($mod_var)) {
      $render_vars = theme('item_list', array(
        'items' => $mod_var,
        'title' => '',
        'type' => 'ul',
        'attributes' => array(),
        )
      );
      $pres_elements['variable'] = $drup_elements['variable'];
    }

    // Builds render array for al info hooks.
    $info_hooks = array(
      'block_info' => array(
        'header' => array(t('Title'), t('Block ID'), t('Delta'),
          t('Status'), t('Region'),
        ),
      ),
      'node_info' => array(
        'header' => array(t('Title'), t('Machine name'), t('Description')),
      ),
      'entity_info' => array(
        'header' => array(t('Title'), t('Base Table'), t('Bundles')),
      ),
      'field_info' => array(
        'header' => array(t('Title'), t('Description'), t('Widget'),
          t('Formatter'),
        ),
      ),
      'field_formatter_info' => array(
        'header' => array(t('Title'), t('Field Types')),
      ),
      'field_widget_info' => array(
        'header' => array(t('Title'), t('Field Types')),
      ),
      'theme' => array(
        'header' => array(t('Machine name'), t('File'),
          t('Template'), t('Variables'),
        ),
      ),
    );
    foreach ($info_hooks as $hook => $element) {
      $render[$hook] = array();
      $info = developer_docs_info_hooks($mod, $hook);
      if (!empty($info)) {
        $render[$hook] = theme('table', array('header' => $element['header'], 'rows' => $info));
        $pres_elements[$hook] = $drup_elements[$hook];
      }
    }

    // List of hooks defined by a module in module.api.php.
    $render_hooks_api = array();
    $hooks_api = developer_docs_hooks_created($mod);
    if (!empty($hooks_api)) {
      $render_hooks_api = theme('item_list', array('items' => $hooks_api));
      $pres_elements['hook_api'] = $drup_elements['hook_api'];
    }
    $void_elements = array_diff($drup_elements, $pres_elements);
    $pres_elements['facts'] = t('Quick Facts');
    $elements = array(
      'module' => $module_name,
      'module_info' => $dev_module_info,
      'index' => $pres_elements,
      'void_elements' => $void_elements,
    );
    $elements['entities'] = array(
      'menu' => $render_menu,
      'hooks' => array('core' => $render_core_hooks, 'contrib' => $render_contribute_hooks),
      'hook_api' => $render_hooks_api,
      'schema' => $render_schema,
      'theme' => $render['theme'],
      'variable' => $render_vars,
      'entity_info' => $render['entity_info'],
      'block_info' => $render['block_info'],
      'node_info' => $render['node_info'],
      'field_info' => $render['field_info'],
      'field_formatter_info' => $render['field_formatter_info'],
      'field_widget_info' => $render['field_widget_info'],
    );
    return theme('developer_docs_page', array('vars' => $elements));
  }
  else {
    $module_list = url() . 'admin/reports/developer-docs';
    $output = '<h4>' . t("This Module is not installed in the site. Check the <a href='@modulelist'>Module List</a> for list of installed modules", array('@modulelist' => $module_list)) . '</h4>';
    return $output;
  }
}

/**
 * Returns the development status value.
 *
 * @param int $sid
 *   Development or Maintenance status ID.
 *
 * @return string
 *   Textual representation of the status ID.
 */
function developer_docs_module_status($sid) {
  switch ($sid) {
    case '19370':
      $type = t('Minimally maintained');
      break;

    case '13028':
      $type = t('Actively maintained');
      break;

    case '9990':
      $type = t('Seeking co-maintainer(s)');
      break;

    case '9992':
      $type = t('Seeking new maintainer');
      break;

    case '13032':
      $type = t('Unsupported');
      break;

    case '13030':
      $type = t('Maintenance fixes only');
      break;

    case '16538':
      $type = t('No further development');
      break;

    case '9994':
      $type = t('Obsolete');
      break;

    case '9988':
      $type = t('Under active development');
      break;

    default:
      $type = t('Unknown');
      break;
  }
  return $type;
}

/**
 * Returns the list of Administration tasks created by the module.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return array
 *   An array of Administration tasks created by the module.
 */
function developer_docs_menu_list($mod) {
  $menu_items = array();
  $info_file = system_get_info('module', $mod);
  $admin_tasks = system_get_module_admin_tasks($mod, $info_file);
  if (!empty($admin_tasks)) {
    foreach ($admin_tasks as $path => $value) {
      $menu_items[$path]['title'] = !empty($value['title']) ? $value['title'] : '';
      $menu_items[$path]['description'] = !empty($value['description']) ? $value['description'] : '';
      $menu_items[$path]['pcallback'] = !empty($value['page_callback']) ? $value['page_callback'] : '';
      $menu_items[$path]['acallback'] = !empty($value['access_callback']) ? $value['access_callback'] : '';
    }
    return $menu_items;
  }
  else {
    return '';
  }
}

/**
 * Returns the list of core hooks used by a module.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return array
 *   An array of Core hooks used by the module.
 */
function developer_docs_hook_list($mod) {
  $path = drupal_get_path('module', $mod) . '/' . $mod . '.module';
  $comments = array();
  if (file_exists($path)) {
    $source = file_get_contents($path);
    $tokens = token_get_all($source);
    $comments = array();
    $drup_api_path = drupal_get_path('module', 'developer_docs') . '/drupal7_api.xml';
    $drup7_api = simplexml_load_file($drup_api_path);
    $hook_names = array();
    foreach ($drup7_api as $api) {
      $hook_names[] = array((string) $api->hook_name);
    }
    $d7_api = array_reduce($hook_names, 'array_merge', array());
    foreach ($tokens as $token) {
      if ($token[0] == T_STRING) {
        if (strpos($token[1], $mod) !== FALSE && strpos($token[1], $mod) == 0) {
          if (!empty($token[1]) && !in_array('hook_' . substr($token[1], strlen($mod) + 1), $comments)) {
            $hook = 'hook_' . substr($token[1], strlen($mod) + 1);
          }
          if (in_array($hook, $d7_api)) {
            $comments[] = $hook;
          }
        }
      }
    }
  }
  return $comments;
}

/**
 * Returns the schema created by a module.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return array
 *   An array of schemas created by the module.
 */
function developer_docs_module_schema($mod) {
  $build = array();

  $schema = drupal_get_schema(NULL, TRUE);
  ksort($schema);
  $row_hdrs = array(t('Name'), t('Type[:Size]'), t('Null?'), t('Default'));
  foreach ($schema as $t_name => $t_spec) {
    $rows = array();
    if ($t_spec['module'] == $mod) {
      foreach ($t_spec['fields'] as $c_name => $c_spec) {
        $row = array();
        $row[] = $c_name;
        $type = $c_spec['type'];
        if (!empty($c_spec['length'])) {
          $type .= '(' . $c_spec['length'] . ')';
        }
        if (!empty($c_spec['scale']) && !empty($c_spec['precision'])) {
          $type .= '(' . $c_spec['precision'] . ', ' . $c_spec['scale'] . ' )';
        }
        if (!empty($c_spec['size']) && $c_spec['size'] != 'normal') {
          $type .= ':' . $c_spec['size'];
        }
        if ($c_spec['type'] == 'int' && !empty($c_spec['unsigned'])) {
          $type .= ', unsigned';
        }
        $row[] = $type;
        $row[] = !empty($c_spec['not null']) ? 'NO' : 'YES';
        $row[] = isset($c_spec['default']) ? (is_string($c_spec['default']) ? '\'' . $c_spec['default'] . '\'' : $c_spec['default']) : '';
        $rows[] = $row;
        $build[$t_name] = array(
          '#type' => 'fieldset',
          '#title' => t('Table Name : @table',
            array('@table' => $t_name, '@module' => isset($t_spec['module']) ? $t_spec['module'] : '')),
          '#description' => '',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#attributes' => array(
            'id' => 'table-' . $t_name,
            'class' => array('collapsible', 'collapsed'),
          ),
        );
        $build[$t_name]['content'] = array(
          '#theme' => 'table',
          '#header' => $row_hdrs,
          '#rows' => $rows,
        );
      }
    }
  }
  return render($build);
}

/**
 * Returns the variable created by a module.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return array
 *   An array of variables created by the module.
 */
function developer_docs_variables($mod) {
  $qry = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', $mod . '%', 'like')
    ->execute();
  $var = $qry->fetchCol();
  return $var;
}

/**
 * Title callback for module overview.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return string
 *   Title of the page based on module name.
 */
function developer_docs_title_callback($mod) {
  $title_mod = system_get_info('module', $mod);
  if (!empty($title_mod)) {
    return $title_mod['name'] . ' Module - Documentation';
  }
  else {
    return 'Documentation';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function developer_docs_form_system_modules_alter(&$form, &$form_state, $form_id) {
  $path = drupal_get_path('module', 'developer_docs');
  $form['#attached']['css'][] = "$path/css/developer_docs.css";
  foreach ($form['modules'] as $package_name => &$package) {
    if ($package_name[0] != '#') {
      foreach ($package as $module_name => &$module) {
        if ($module_name[0] != '#') {
          $module['links']['dev_docs'] = array(
            '#type' => 'link',
            '#title' => t('Documentation'),
            '#href' => "admin/reports/developer-docs/$module_name",
            '#options' => array(
              'attributes' => array(
                'class' => array('module-link', 'dev-docs'),
                'title' => t('Developer docs'),
              ),
            ),
          );
          $package['#theme'] = 'developer_docs_modules_fieldset';
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function developer_docs_theme($existing, $type, $theme, $path) {
  return array(
    'developer_docs_modules_fieldset' => array(
      'render element' => 'form',
    ),
    'developer_docs_page' => array(
      'variables' => array('vars' => NULL),
      'template' => 'developer-docs-modules',
      'path' => drupal_get_path('module', 'developer_docs') . '/templates',
    ),
  );
}

/**
 * Returns HTML for the modules form.
 *
 * This was copied from theme_system_modules_fieldset() and modified to handle
 * additional links.
 */
function theme_developer_docs_modules_fieldset($variables) {
  $form = $variables['form'];
  $rows = array();
  $children = element_children($form);
  $operations = drupal_map_assoc(array('help', 'permissions', 'configure'));
  foreach ($children as $key) {
    $links = array_filter(array_keys($form[$key]['links']), '_developer_docs_link_check');
    if ($links) {
      $operations += drupal_map_assoc($links);
    }
  }
  // Iterate through all the modules.
  foreach ($children as $key) {
    $module = $form[$key];
    $row = array();
    unset($module['enable']['#title']);
    $row[] = array('class' => array('checkbox'), 'data' => drupal_render($module['enable']));
    $label = '<label';
    if (isset($module['enable']['#id'])) {
      $label .= ' for="' . $module['enable']['#id'] . '"';
    }
    $row[] = $label . '><strong>' . drupal_render($module['name']) . '</strong></label>';
    $row[] = drupal_render($module['version']);
    // Add the description, along with any modules it requires.
    $description = drupal_render($module['description']);
    if ($module['#requires']) {
      $description .= '<div class="admin-requirements">' . t('Requires: !module-list', array('!module-list' => implode(', ', $module['#requires']))) . '</div>';
    }
    if ($module['#required_by']) {
      $description .= '<div class="admin-requirements">' . t('Required by: !module-list', array('!module-list' => implode(', ', $module['#required_by']))) . '</div>';
    }
    $row[] = array('data' => $description, 'class' => array('description'));
    // Display links (such as help or permissions) in their own columns.
    foreach ($operations as $key) {
      $row[] = array('data' => drupal_render($module['links'][$key]), 'class' => array($key));
    }
    $form['#header'][4]['colspan'] = count($operations);
    $rows[] = $row;
  }
  return theme('table', array('header' => $form['#header'], 'rows' => $rows));
}

/**
 * Returns the link to theme_developer_docs_modules_fieldset().
 */
function _developer_docs_link_check($var) {
  return $var && $var[0] != '#';
}

/**
 * Returns a basic module information from drupal.org and .info file.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return array
 *   An associative array with basic module information.
 */
function developer_docs_get_module_info($mod) {
  $module_information[] = array(
    'description' => NULL,
    'downloads' => NULL,
    'maintain_status' => NULL,
    'develop_status' => NULL,
    'documentation' => NULL,
    'created' => NULL,
    'depends' => NULL,
    'help' => NULL,
    'readme' => NULL,
    'name' => NULL,
    'path' => NULL,
  );
  $module_information[] = array(
    'path' => drupal_get_path('module', $mod),
  );
  $info_file = system_get_info('module', $mod);
  if (!empty($info_file)) {
    $module_information[] = array(
      'description' => $info_file['description'],
      'depends' => !empty($info_file['dependencies']) ? implode(", ", $info_file['dependencies']) : '',
      'name' => $info_file['name'],
      'created' => !empty($info_file['datestamp']) ? format_date(str_replace(array('"', ' '), '', $info_file['datestamp']), 'custom', 'm/d/Y') : NULL,
    );
  }
  $module_path = drupal_get_path("module", $mod);
  if (file_exists($module_path . '/README.txt')) {
    $read_me = filter_xss_admin(file_get_contents($module_path . '/README.txt'));
    $module_information[] = array('readme' => $read_me);
  }
  $help = module_invoke($mod, 'help', "admin/help#$mod", drupal_help_arg());
  if (!empty($help)) {
    $module_information[] = array('help' => $help);
  }
  $json = file_get_contents('https://www.drupal.org/api-d7/node.json?field_project_machine_name=' . $mod);
  if (!empty($json)) {
    $data = json_decode($json);
    if (!empty($data->list['0'])) {
      $module_info = $data->list['0'];
      $down_count = !empty($module_info->field_download_count) ? number_format($module_info->field_download_count) : '0';
      $main_status = !empty($module_info->taxonomy_vocabulary_44->id) ? developer_docs_module_status($module_info->taxonomy_vocabulary_44->id) : 'Unknown';
      $dev_status = !empty($module_info->taxonomy_vocabulary_46->id) ? developer_docs_module_status($module_info->taxonomy_vocabulary_46->id) : 'Unknown';
      $module_information[] = array(
        'downloads' => $down_count,
        'maintain_status' => $main_status,
        'develop_status' => $dev_status,
        'documentation' => !empty($module_info->field_project_documentation->url) ? $module_info->field_project_documentation->url : '',
      );
    }
  }
  return call_user_func_array('array_merge', $module_information);
}

/**
 * Returns all the other hooks used by a module.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return array
 *   An array with both core and contributed hooks used by the module.
 */
function developer_docs_other_hooks($mod) {
  $drup_api_path = drupal_get_path('module', 'developer_docs') . '/drupal7_api.xml';
  $drup7_api = simplexml_load_file($drup_api_path);
  $hooks['core'] = array();
  $hooks['contrib'] = array();
  foreach ($drup7_api->hook as $api) {
    $hook_names[] = array((string) $api->hook_name);
  }
  $d7_api = array_reduce($hook_names, 'array_merge', array());
  $files = file_scan_directory(drupal_get_path('module', $mod), '/\.inc/');
  $paths = array_keys($files);
  $paths[] = drupal_get_path('module', $mod) . '/' . $mod . '.module';
  foreach ($paths as $path) {
    if (file_exists($path)) {
      $tokens = token_get_all(file_get_contents($path));
      $comments = array();
      foreach ($tokens as $token) {
        if ($token[0] == T_DOC_COMMENT) {
          $comments[] = $token[1];
        }
      }
      foreach ($comments as $comment) {
        if (preg_match("/Implement\w* \w*\s?(hook_\w+)\(\)/", $comment, $matches)) {
          if (in_array($matches[1], $d7_api)) {
            $hooks['core'][] = $matches[1];
          }
          else {
            $hooks['contrib'][] = $matches[1];
          }
        }
      }
    }
  }
  $core_hooks = developer_docs_hook_list($mod);
  $hooks['core'] = array_unique(array_merge($hooks['core'], $core_hooks));
  $hooks['contrib'] = array_unique($hooks['contrib']);
  if (!empty($hooks['core']) || !empty($hooks['contrib'])) {
    return $hooks;
  }
  else {
    return '';
  }
}

/**
 * Returns info hooks return array used by a module.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return array
 *   An array with return values of the info hooks.
 */
function developer_docs_info_hooks($mod, $hook) {
  if (module_hook($mod, $hook)) {
    if ($hook != 'theme') {
      $hooks_info = module_invoke($mod, $hook);
    }
    switch ($hook) {
      case 'block_info':
        $blocks = array();
        foreach ($hooks_info as $delta => $name) {
          $block_info = block_load($mod, $delta);
          $blocks[$delta]['title'] = !empty($name['info']) ? $name['info'] : '';
          $blocks[$delta]['block_id'] = !empty($block_info->bid) ? $block_info->bid : '';
          $blocks[$delta]['delta'] = !empty($block_info->delta) ? $block_info->delta : '';
          $blocks[$delta]['status'] = ($block_info->status != 1) ? 'disabled' : 'enabled';
          $blocks[$delta]['region'] = is_numeric($block_info->region) ? 'none' : $block_info->region;
        }
        $hook_info = $blocks;
        break;

      case 'entity_info':
        $entity_types = array();
        foreach ($hooks_info as $key => $entity) {
          $entity_types[$key]['title'] = !empty($entity['label']) ? $entity['label'] : '';
          $entity_types[$key]['table'] = !empty($entity['base table']) ? $entity['base table'] : '';
          if (!empty($entity['bundles'])) {
            $entity_types[$key]['bundles'] = theme('item_list', array(
              'items' => array_keys($entity['bundles']),
              )
            );
          }
          else {
            $entity_types[$key]['bundles'] = 'none';
          }
        }
        $hook_info = $entity_types;
        break;

      case 'node_info':
        $node_types = array();
        foreach ($hooks_info as $key => $node) {
          $node_types[$key]['title'] = !empty($node['name']) ? $node['name'] : '';
          $node_types[$key]['machine'] = !empty($node['base']) ? $node['base'] : '';
          $node_types[$key]['desc'] = !empty($node['description']) ? $node['description'] : '';
        }
        $hook_info = $node_types;
        break;

      case 'field_info':
        $fields = array();
        foreach ($hooks_info as $key => $field) {
          $fields[$key]['title'] = !empty($field['label']) ? $field['label'] : '';
          $fields[$key]['desc'] = !empty($field['description']) ? $field['description'] : '';
          $fields[$key]['widget'] = !empty($field['default_widget']) ? $field['default_widget'] : '';
          $fields[$key]['format'] = !empty($field['default_formatter']) ? $field['default_formatter'] : '';
        }
        $hook_info = $fields;
        break;

      case 'field_formatter_info':
        $fields_format = array();
        foreach ($hooks_info as $key => $format) {
          $fields_format[$key]['title'] = !empty($format['label']) ? $format['label'] : '';
          if (!empty($format['field types'])) {
            $fields_format[$key]['field_types'] = theme('item_list', array(
              'items' => $format['field types'],
              )
            );
          }
        }
        $hook_info = $fields_format;
        break;

      case 'field_widget_info':
        $fields_widget = array();
        foreach ($hooks_info as $key => $widget) {
          $fields_widget[$key]['title'] = !empty($widget['label']) ? $widget['label'] : '';
          if (!empty($widget['field types'])) {
            $fields_widget[$key]['field_types'] = theme('item_list', array(
              'items' => $widget['field types'],
              )
            );
          }
        }
        $hook_info = $fields_widget;
        break;

      case 'theme':
        $themes = array();
        $module_themes = module_invoke($mod, 'theme', '', 'module', $mod, drupal_get_path('module', $mod));
        foreach ($module_themes as $key => $theme) {
          $themes[$key]['name'] = $key;
          $themes[$key]['file'] = !empty($theme['file']) ? $theme['file'] : 'NULL';
          $themes[$key]['template'] = !empty($theme['template']) ? $theme['template'] . '.tpl.php' : 'NULL';
          $themes[$key]['variables'] = array('NULL');
          if (!empty($theme['variables'])) {
            $themes[$key]['variables'] = theme('item_list', array(
              'items' => array_keys($theme['variables']),
              )
            );
          }
        }
        $hook_info = $themes;
        break;

      default:
        $hook_info = '';
        break;
    }
    return $hook_info;
  }
  else {
    return '';
  }
}

/**
 * Implements hook_modules_enabled().
 */
function developer_docs_modules_enabled($modules) {
  foreach ($modules as $module) {
    $module_info = system_get_info('module', $module);
    $module_name = $module_info['name'];
    $doc_link = url() . 'admin/reports/developer-docs/' . $module;
    drupal_set_message(t("See <a href='@doc_link'>documentation</a> of @module_name generated by developer docs module",
      array('@doc_link' => $doc_link, '@module_name' => $module_name)
      ), 'status', FALSE);
  }
}

/**
 * Returns the hooks created by a module.
 *
 * @param string $mod
 *   The module name for which information needs to be returned.
 *
 * @return array
 *   Returns an array of hooks created by the module.
 */
function developer_docs_hooks_created($mod) {
  $mod_path = drupal_get_path('module', $mod);
  $files = file_scan_directory($mod_path, '/\.api.php/', array('recurse' => FALSE));
  if (!empty($files)) {
    $hooks_list = array();
    $paths = array_keys($files);
    foreach ($paths as $path) {
      if (file_exists($path)) {
        $tokens = token_get_all(file_get_contents($path));
        foreach ($tokens as $token) {
          if ($token[0] == T_STRING && strpos($token[1], 'hook') !== FALSE) {
            $hooks_list[] = $token[1];
          }
        }
      }
    }
    return $hooks_list;
  }
  return '';
}
