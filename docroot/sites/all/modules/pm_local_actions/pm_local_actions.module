<?php

/**
 * API function for setting local action links.
 *
 * @param $items
 *   Array of link items, where each item has at least a 'title' and 'href' key.
 *   Additional keys as used by theme_menu_local_action() are supported. The
 *   'title' and 'href' keys may contain Page Manager tokens.
 * @param $display_context
 *   Page Manager display context that will be used to substitute the tokens.
 * @return
 *   All links built so far.
 * @see theme_menu_local_action().
 */
function pm_local_actions_set_links($links = array(), $display_context = array()) {
  static $cache = array();

  foreach ($links as $link) {
    $link['title'] = ctools_context_keyword_substitute($link['title'], array(), $display_context);
    $href = ctools_context_keyword_substitute($link['href'], array(), $display_context);
    $url = drupal_parse_url($href);
    $link['href'] = $url['path'];
    $link['localized_options']['query'] = $url['query'];
    $link['localized_options']['fragment'] = $url['fragment'];

    if (isset($link['localized_options']['attributes']['class'])) {
      $link['localized_options']['attributes']['class'] = ctools_context_keyword_substitute($link['localized_options']['attributes']['class'], array(), $display_context);
    }
    $cache[] = $link;
  }
  return $cache;
}

/**
 * API function for getting all local action links.
 */
function pm_local_actions_get_links() {
  return pm_local_actions_set_links();
}

/**
 * Helper function for building the default settings form.
 *
 * @param $form
 *   And existing form array.
 * @param $conf
 *   A configuration array with default values.
 */
function pm_local_actions_settings_form_helper(&$form, $conf) {
  $links = isset($conf['pm_local_actions']) ? $conf['pm_local_actions'] : array();
  $paths = array();
  $titles = array();
  $classes = array();

  foreach ($links as $link) {
    $paths[] = $link['href'];
    $titles[] = $link['title'];
    if (isset($link['localized_options']['attributes']['class'])) {
      $classes[] = $link['localized_options']['attributes']['class'];
    }
  }

  $form['pm_local_actions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Local actions'),
    '#description' => t('Define local action links to be displayed on the page.'),
    '#tree' => TRUE,
  );
  $form['pm_local_actions']['paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Paths'),
    '#description' => t('Enter one path per row for each action link. You may use substitutions in these paths.'),
    '#default_value' => implode("\n", $paths),
  );
  $form['pm_local_actions']['titles'] = array(
    '#type' => 'textarea',
    '#title' => t('Titles'),
    '#description' => t("Enter one title per for each action link. Leave empty or enter %default to use the corresponding menu item's title. You may use substitutions in these titles.", array('%default' => '<default>')),
    '#default_value' => implode("\n", $titles),
  );
  $form['pm_local_actions']['classes'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS classes'),
    '#description' => t('Enter one CSS class per row for each action link. You may use substitutions in these classes.'),
    '#default_value' => implode("\n", $classes),
  );
}

/**
 * Helper function for processing form submissions.
 *
 * @param $values
 *   Form state values to be processed.
 * @return
 *   A configuration array to be saved by the implementation.
 */
function pm_local_actions_settings_form_submit_helper($form_state) {
  $links = array();
  $values = array();
  // Parse the raw values.
  foreach (array('paths', 'titles', 'classes') as $key) {
    $values[$key] = array();
    $rows = explode("\n", $form_state['values']['pm_local_actions'][$key]);
    foreach ($rows as $i => $row) {
      $value = trim($row);
      if (empty($value)) {
        continue;
      }
      $values[$key][] = $value;
    }
  }
  // Build the link arrays.
  foreach ($values['paths'] as $i => $path) {
    $link = array(
      'href' => $path,
      'title' => isset($values['titles'][$i]) ? $values['titles'][$i] : '<default>',
      'localized_options' => array(),
    );
    if (isset($values['classes'][$i])) {
      $link['localized_options']['attributes'] = array('class' => $values['classes'][$i]);
    }
    $links[] = $link;
  }
  return $links;
}

/**
 * Implements hook_page_manager_variant_operations_alter().
 *
 * Adds an option to the normal Page Manager UI to define custom local actions
 * for a page.
 */
function pm_local_actions_page_manager_variant_operations_alter(&$operations, $handler) {
  // Use this obnoxious construct to safely insert our item.
  reset($operations['children']);
  $children_operations = array();
  while (list($key, $value) = each($operations['children'])) {
    $children_operations[$key] = $value;
    if ($key == 'context') {
      $children_operations['pm_local_actions'] = array(
        'title' => t('Local actions'),
        'description' => t('Define custom local actions.'),
        'form' => 'pm_local_actions_variant_operation_form',
      );
    }
  }
  $operations['children'] = $children_operations;
}

/**
 * Variant operation form callback.
 */
function pm_local_actions_variant_operation_form($form, &$form_state) {
  pm_local_actions_settings_form_helper($form, $form_state['handler']->conf);
  return $form;
}

/**
 * Variant operation form submit callback.
 */
function pm_local_actions_variant_operation_form_submit($form, &$form_state) {
  $form_state['handler']->conf['pm_local_actions'] = pm_local_actions_settings_form_submit_helper($form_state);
}

/**
 * Implements hook_form_panelizer_settings_form_alter().
 */
function pm_local_actions_form_panelizer_settings_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'pm_local_actions_form_panelizer_settings_form_submit';
  pm_local_actions_settings_form_helper($form, $form_state['panelizer']->extra);
}

/**
 * Panelizer settings form submit callback.
 */
function pm_local_actions_form_panelizer_settings_form_submit($form, &$form_state) {
  $form_state['panelizer']->extra['pm_local_actions'] = pm_local_actions_settings_form_submit_helper($form_state);
}

/**
 * Implements hook_ctools_render_alter().
 */
function pm_local_actions_ctools_render_alter(&$info, &$page, &$render_context) {
  if (!isset($render_context['handler']->conf['pm_local_actions'])) {
    return;
  }
  pm_local_actions_set_links($render_context['handler']->conf['pm_local_actions'], $render_context['handler']->conf['display']->context);
}

/**
 * Implements hook_entity_view().
 */
function pm_local_actions_entity_view($entity, $entity_type, $view_mode, $langcode) {
  if ($view_mode != 'full' || !isset($entity->panelizer['page_manager']->extra['pm_local_actions'])) {
    return;
  }
  pm_local_actions_set_links($entity->panelizer['page_manager']->extra['pm_local_actions'], $entity->panelizer['page_manager']->display->context);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function pm_local_actions_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = pm_local_actions_get_links();
  drupal_alter('pm_local_actions', $links);

  foreach ($links as $link) {
    $item = menu_get_item($link['href']);

    // This is an existing menu item that we need to respect.
    if ($item) {
      if (!$item['access']) {
        continue;
      }
      if ($link['title'] == '<default>') {
        $link['title'] = $item['title'];
      }
    }
    $data['actions']['output'][] = array(
      '#theme' => 'menu_local_action',
      '#link' => $link,
    );
  }
}
