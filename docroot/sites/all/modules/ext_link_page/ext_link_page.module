<?php

/**
 * @file
 * The main module logic for ext_link_page module.
 *
 * This module provides an input filter that directs all
 * External Links to the configured page to notify the user
 * is leaving the site.
 */

/**
 * Implements hook_help().
 */
function ext_link_page_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#ext_link_page':
    case 'admin/config/ext_link_page':
      $output = '<p>' . t('This module provides an text format filter that redirects all external links to the configured page to notify the user is leaving the site. You will have to enable the "External links page" filter in the !Text-formats configuration.', array('!Text-formats' => l(t('Text formats'), 'admin/config/content/formats'))) . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function ext_link_page_permission() {
  return array(
    'administer ext_link_page' => array(
      'title' => t('Administer External Link Page'),
      'description' => t('Perform administration tasks for External Link Page.'),
    ),
    'access redirect page' => array(
      'title' => t('Access the external link page'),
      'description' => t('Allow user to access the page that redirects user to external site.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ext_link_page_theme() {
  return array(
    'ext_link_page' => array(
      'template' => 'ext_link_page',
      'variables' => array(
        'message' => '',
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ext_link_page_menu() {
  // Get internal path for the external link page
  $options = ext_link_page_get_options();
  $path = $options['ext_link_page_link_page'];

  // Admin Page
  $items['admin/config/user-interface/ext_link_page'] = array(
    'title' => 'External link page',
    'description' => 'Configure the exit page or message displayed for outgoing links to external sites.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ext_link_page_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer ext_link_page'),
    'file' => 'includes/ext_link_page.admin.inc',
  );
  // External Link Page for redirecting.  Since we are using variable
  // output for the title and description, change callback.
  $items[$path] = array(
    'title callback' => 'check_plain',
    'title' => $options['ext_link_page_page_title'],
    'page callback' => '_ext_link_page_build_page',
    'access callback' => 'user_access',
    'access arguments' => array('access redirect page'),
    'file' => 'includes/ext_link_page.page.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function ext_link_page_init() {
  $options = ext_link_page_get_options();
  if ($options['ext_link_page_use_js']) {
    drupal_add_library('system', 'ui.dialog', TRUE);
    $path = drupal_get_path('module', 'ext_link_page');
    drupal_add_js($path . '/ext_link_page.js');
    drupal_add_js(array('ext_link_page' => array(
      'pathLinkPage' => url($options['ext_link_page_link_page']),
      'messageTitle' => !empty($options['ext_link_page_js_title']) ? check_plain($options['ext_link_page_js_title']) : check_plain($options['ext_link_page_page_title']),
      'messageBody' => !empty($options['ext_link_page_js_message']) ? filter_xss_admin($options['ext_link_page_js_message']) : filter_xss_admin($options['ext_link_page_page_message']),
      'extLinkClass' => !empty($options['ext_link_page_link_class']) ? check_plain($options['ext_link_page_link_class']) : '',
      'directDisable' => intval($options['ext_link_page_js_direct_disable']),
      'delay' => !empty($options['ext_link_page_js_direct_delay']) ? intval($options['ext_link_page_js_direct_delay']) : intval($options['ext_link_page_direct_delay']),
      'siteName' => check_plain(variable_get('site_name', 'site_name')),
    )), 'setting');
  }
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Alter external URLs to route through the external link page. This affects all
 * URLs that pass through url().
 */
function ext_link_page_url_outbound_alter(&$path, &$options, $original_path) {
  // Check if the URL is external and valid and not an absolute link to the site
  if (empty($options['ext_link_page_allow']) && ext_link_page_url_is_external($path)) {
    $ext_options = ext_link_page_get_options();
    $path = url($ext_options['ext_link_page_link_page'], array('query' => array('url' => $path)));
  }
}

/**
 * Implements hook_filter_info().
 */
function ext_link_page_filter_info() {
  $filters['ext_link_page'] = array(
    'title' => t('External links page'),
    'description' => t('Directs all External Links to the configured page to notify the user is leaving the site.  Note that this filter only works for links, so please ensure that the filter comes after making URLs into links.'),
    'process callback' => '_ext_link_page_filter_process',
    'tips callback'  => 'ext_link_page_filter_ext_link_page_tips',
  );
  return $filters;
}

/**
 * Callback for filter tips
 */
function ext_link_page_filter_ext_link_page_tips($filter, $format, $long = FALSE) {
  return t('External links will be redirected to a page that tells the user that they are about to leave the site.');
}

/**
 * Callback for filter processing
 */
function _ext_link_page_filter_process($text, $format) {
  // Find all href so we can test if the link is external or not
  $text = preg_replace_callback('/href="([^">]+)"/', '_ext_link_page_replace', $text);
  return $text;
}

/**
 * Callback function for replacing URLs in links.
 *
 * @param $match
 *   String that was matched
 * @return
 *   Replacement string
 */
function _ext_link_page_replace($match) {
  $options = ext_link_page_get_options();

  // The link URL may already be encoded.
  $url = html_entity_decode($match[1]);

  // Only process external URLs
  if (ext_link_page_url_is_external($url)) {
    $url = url($options['ext_link_page_link_page'], array('query' => array('url' => $url)));
    $filtered = 'href="' . $url . '"';

    // Check if we want new window or nofollow
    if ($options['ext_link_page_new_window']) {
      $filtered .= ' target="_blank"';
    }
    if ($options['ext_link_page_nofollow']) {
      $filtered .= ' rel="nofollow"';
    }

    return $filtered;
  }

  return $match[0];
}

/**
 * Determine whether a URL should use the external link page.
 */
function ext_link_page_url_is_external($url) {
  $options = ext_link_page_get_options();
  if (valid_url($url, TRUE)) {
    if (strpos($url, url(NULL, array('absolute' => TRUE))) === FALSE) {
      $url_host = parse_url($url, PHP_URL_HOST);
      $host_exclude = '/' . trim($options['ext_link_page_patterns_exclude']) . '/i';
      if (!preg_match($host_exclude, $url_host)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Return array of current settings.
 */
function ext_link_page_get_options() {
  $options = _ext_link_page_get_defaults();
  foreach ($options as $name => $default) {
    $options[$name] = variable_get($name, $default);
  }
  return $options;
}

/**
 * Return array of default settings.
 */
function _ext_link_page_get_defaults() {
  return array(
    'ext_link_page_direct_delay' => '5',
    'ext_link_page_direct_disable' => '',
    'ext_link_page_link_page' => 'ext_link',
    'ext_link_page_page_title' => t('Leaving this site'),
    'ext_link_page_page_message' => t('You are about to leave @site_name.  If you are not taken there in [delay] seconds, follow this link: @link.',
      array(
        '@site_name' => '[site_name]',
        '@link' => '[link]',
      )),
    'ext_link_page_new_window' => FALSE,
    'ext_link_page_nofollow' => FALSE,
    'ext_link_page_use_js' => FALSE,
    'ext_link_page_js_direct_delay' => '',
    'ext_link_page_js_direct_disable' => '',
    'ext_link_page_js_title' => '',
    'ext_link_page_js_message' => '',
    'ext_link_page_link_class' => FALSE,
    'ext_link_page_patterns_exclude' => '',
  );
}
