<?php

/**
 * @file
 * Create windows 8.1 tile.
 */

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function tile_form_system_theme_settings_alter(&$form, &$form_state) {
  $theme = tile_get_theme($form);
  $form['tile'] = array(
    '#type' => 'fieldset',
    '#title' => 'Tile Setting',
  );

  $tile_title = theme_get_setting('tile-title', $theme);
  if (empty($tile_title)) {
    $tile_title = variable_get('site_name', 'Your site here');
  }
  $form['tile']['tile-title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#maxlength' => 64,
    '#default_value' => $tile_title,
    '#description' => t('this is the text that users will see on your Windows 8.1 tile.'),
  );

  $tile_background_color = theme_get_setting('tile-background-color', $theme);
  if (empty($tile_background_color)) {
    $tile_background_color = '#000000';
  }
  $form['tile']['tile-background-color'] = array(
    '#type' => 'textfield',
    '#title' => t('Background color'),
    '#size' => 7,
    '#maxlength' => 7,
    '#default_value' => $tile_background_color,
    '#suffix' => '<div class="tile-colorpicker"></div>',
    '#attributes' => array(
      'class' => array('edit-tile-colorpicker'),
    ),
    '#attached' => array(
      'library' => array(array('system', 'farbtastic')),
      'js' => array(drupal_get_path('module', 'tile') . '/tile.js'),
    ),
    '#description' => t('this is the background color that users will see on your Windows 8.1 tile.'),
  );

  $tile_path = theme_get_setting('tile-path', $theme);
  if (!empty($tile_path)) {
    $i = strpos($tile_path, 'public://');
    if ($i !== FALSE) {
      $start_pos = $i + strlen('public://');
      $len = strlen($tile_path) - $start_pos;
      $tile_path = substr($tile_path, $start_pos, $len);
    }
  }
  $form['tile']['tile-path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to custom picture'),
    '#default_value' => $tile_path,
    '#maxlength' => 255,
    '#description' => t('The path to the image file you would like to use as your custom tile picture.'),
  );

  $form['tile']['tile-upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload the custom picture'),
    '#description' => t('png, gif, and jpg images are accepted.'),
  );

  $form['tile']['tile-feed'] = array(
    '#type' => 'textfield',
    '#title' => t('Put the URL to your RSS feed here'),
    '#default_value' => theme_get_setting('tile-feed', $theme),
    '#maxlength' => 255,
    '#description' => t('Live updates will be created automatically from your RSS feed.'),
  );

  $form['#validate'][] = 'tile_form_validate';
}

/**
 * Validate the form.
 * 
 * @param array $form
 *   A form.
 * 
 * @param array $form_state
 *   A form state.
 */
function tile_form_validate(&$form, &$form_state) {
  $file = file_save_upload('tile-upload', array(
    'file_validate_is_image' => array(),
    'file_validate_extensions' => array('png gif jpg'),
  ));

  if ($file) {
    // If there is an image uploaded, create four sizes tile images.
    if ($file = file_move($file, 'public://')) {
      $form['storage']['tile-upload'] = $file;
      $uri = $file->uri;
      $form_state['values']['tile-path'] = $uri;
      tile_create_images($uri, $form_state);
    }
    else {
      form_set_error('tile-upload', t("Failed to write the upload file to drupal file's folder."));
    }
  }
  else {
    // If there is no image uploaded, then check the custom image path,
    if (!empty($form_state['values']['tile-path'])) {
      $tile_path = 'public://' . $form_state['values']['tile-path'];
      $form_state['values']['tile-path'] = $tile_path;
      // Create four sizes tile images based on the custom image path.
      tile_create_images($tile_path, $form_state);
    }
  }
}

/**
 * Implements hook_html_head_alter().
 */
function tile_html_head_alter(&$head_elements) {
  $tile_title = theme_get_setting('tile-title');
  if (empty($tile_title)) {
    $tile_title = variable_get('site_name', 'Your site here');
  }
  if (!empty($tile_title)) {
    $head_elements['application-name'] = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'application-name',
        'content' => $tile_title,
      ),
      '#weight' => '-100',
    );
  }

  $tile_background_color = theme_get_setting('tile-background-color');
  if (empty($tile_background_color)) {
    $tile_background_color = '#000000';
  }
  if (!empty($tile_background_color)) {
    $head_elements['msapplication-TileColor'] = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'msapplication-TileColor',
        'content' => $tile_background_color,
      ),
      '#weight' => '-99',
    );
  }

  $square70x70logo = theme_get_setting('square70x70logo');
  if (!empty($square70x70logo)) {
    $square70x70logo_url = file_create_url($square70x70logo);
    if ($square70x70logo_url !== FALSE) {
      $head_elements['msapplication-square70x70logo'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'msapplication-square70x70logo',
          'content' => $square70x70logo_url,
        ),
        '#weight' => '-98',
      );
    }
  }

  $square150x150logo = theme_get_setting('square150x150logo');
  if (!empty($square150x150logo)) {
    $square150x150logo_url = file_create_url($square150x150logo);
    if ($square150x150logo_url !== FALSE) {
      $head_elements['msapplication-square150x150logo'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'msapplication-square150x150logo',
          'content' => $square150x150logo_url,
        ),
        '#weight' => '-97',
      );
    }
  }

  $wide310x150logo = theme_get_setting('wide310x150logo');
  if (!empty($wide310x150logo)) {
    $wide310x150logo_url = file_create_url($wide310x150logo);
    if ($wide310x150logo_url !== FALSE) {
      $head_elements['msapplication-wide310x150logo'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'msapplication-wide310x150logo',
          'content' => $wide310x150logo_url,
        ),
        '#weight' => '-96',
      );
    }
  }

  $square310x310logo = theme_get_setting('square310x310logo');
  if (!empty($square310x310logo)) {
    $square310x310logo_url = file_create_url($square310x310logo);
    if ($square310x310logo_url !== FALSE) {
      $head_elements['msapplication-square310x310logo'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'msapplication-square310x310logo',
          'content' => $square310x310logo_url,
        ),
        '#weight' => '-95',
      );
    }
  }

  $notification = theme_get_setting('tile-feed');
  if (!empty($notification)) {
    $head_elements['msapplication-notification'] = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'msapplication-notification',
        'content' => 'frequency=30; cycle=1; polling-uri=' . $notification,
      ),
      '#weight' => '-94',
    );
  }
}

/**
 * Get the theme name.
 * 
 * @param array $form
 *   The theme setting form.
 *
 * @return string
 *   A string indicating the theme name.
 */
function tile_get_theme($form) {
  $theme = '';
  // Get the variable string in the form, such as theme_garland_setting.
  // Then get the theme name from it, such as garland.
  $var = $form['var']['#value'];
  // Get first postion of '_' in the variable string.
  $i = strpos($var, '_');
  if ($i !== FALSE) {
    // Get last postion of '_' in the variable string.
    $j = strrpos($var, '_');
    if ($j !== FALSE && $i != $j) {
      // Get the theme name.
      $theme = substr($var, $i + 1, $j - $i - 1);
    }
  }
  return $theme;
}

/**
 * Create the four sizes images for the tile.
 *
 * @param string $uri
 *   The URI to an image.
 * @param array $form_state
 *   A form state.
 */
function tile_create_images($uri, &$form_state) {
  $image = image_load($uri);
  if ($image !== FALSE) {
    $datas = array(
      array('size' => 'square70x70logo', 'width' => 70, 'height' => 70),
      array('size' => 'square150x150logo', 'width' => 150, 'height' => 150),
      array('size' => 'wide310x150logo', 'width' => 310, 'height' => 150),
      array('size' => 'square310x310logo', 'width' => 310, 'height' => 310),
    );

    $extension = $image->info['extension'];
    foreach ($datas as $data) {
      image_scale_and_crop($image, $data['width'], $data['height']);
      $i = strpos($uri, $extension);
      $new_uri = substr($uri, 0, $i - 1) . '_' . $data['width'] . 'x' . $data['height'] . '.' . $extension;
      image_save($image, $new_uri);
      $form_state['values'][$data['size']] = $new_uri;
    }
  }
}
