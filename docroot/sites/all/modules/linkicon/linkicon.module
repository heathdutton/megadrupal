<?php

/**
 * @file
 * A link field formatter to create icon classes based on predefined titles.
 */

/**
 * Implements hook_help().
 */
function linkicon_help($path, $arg) {
  switch ($path) {
    case 'admin/help#linkicon':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Link icon module is a simple link field formatter to create icon classes based on a predefined set of link titles. Having link title key that matches the icon class name (without prefix) is what makes this module useful. Usage examples: to create social links for community-driven sites, team members, View website, Try now, Buy now, Demo or Hello there links with icons.') . '</p>';
      $output .= '<h3>' . t('Usage') . '</h3>';
      $output .= '<ol>';
      $output .= '<li><p>' . t('Enable this module and its dependency, link.module') . '</p></li>';
      $output .= '<li><p>' . t('At <a href="@fields">Account settings</a>, or <a href="@content-type">Content types</a> -- click "Manage fields". Create a link field, make sure to choose "Predefined title" and input your key|value pairs of titles where key is the icon name (without prefix), and value title. If you have an icon named "icon-facebook" or "fa-facebook", write, e.g.:<br>facebook|Visit my Facebook page<br>google-plus|Google+', array('@fields' => url('admin/config/people/accounts/fields'), '@content-type' => url('admin/structure/types'))) . '</p>';
      $output .= '<p>' . t('Avoid hardcoding icon "prefixes" here. The prefix is defined at Display formatter so that you are not stuck in database when the icon vendor change prefixes from "icon-" to just "fa-", etc. Make sure the icon name is available at your icon set.') . '</p></li>';
      $output .= '<li><p>' . t('Download icon fonts from <a href="@fontello" target="_blank">http://fontello.com</a> or <a href="@icomoon" target="_blank">http://icomoon.io/app/</a>. Place it somewhere (e.g.: <em>sites/all/libraries/fontawesome</em>), or use icon API import, and reference it either via this module Display formatter, or your theme, or loaded automatically if using fontawesome.module or icon API.', array('@fontello' => 'http://fontello.com/', '@icomoon' => 'http://icomoon.io/app/')) . '</p></li>';
      $output .= '<li><p>' . t('At <a href="@fields">Account settings</a>, or <a href="@content-type">Content types</a> -- click "Manage display". Under "Format" of the active view mode, choose "Link icon, based on title".', array('@fields' => url('admin/config/people/accounts/display'), '@content-type' => url('admin/structure/types'))) . '</p></li>';
      $output .= '<li><p>' . t('Click the "Configure" icon to have some extra options. There is option to hide text so to display the icon only, option to disable module from outputting CSS, if you want total DIY on theming, and a few other.') . '</p></li>';
      $output .= '</ol>';
      $output .= '<p>' . t('See the <a href="!field">Field module help</a> and the <a href="!field_ui">Field UI help</a> pages for general information on fields and how to create and manage them. For more information, see the <a href="!link_documentation">online documentation for the Link module</a>.', array('!field' => url('admin/help/field'), '!field_ui' => url('admin/help/field_ui'), '!link_documentation' => 'https://drupal.org/documentation/modules/link')) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function linkicon_field_formatter_info() {
  return array(
    'linkicon' => array(
      'label' => t('Link icon, based on title'),
      'field types' => array('link_field'),
      'settings' => array(
        'linkicon_prefix' => 'icon',
        'linkicon_wrapper_class' => '',
        'linkicon_global_title' => '',
        'linkicon_size' => '',
        'linkicon_no_text' => '',
        'linkicon_position' => '',
        'linkicon_load' => '',
        'linkicon_vertical' => 0,
        'linkicon_tooltip' => 0,
        'linkicon_style' => '',
        'linkicon_color' => '',
        'linkicon_font' => '',
        'linkicon_bundle' => '',
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function linkicon_theme($existing, $type, $theme, $path) {
  return array(
    'linkicon' => array(
      'render element' => 'element',
    ),
    'linkicon_item' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Formats a linkicon field widget.
 */
function theme_linkicon($variables) {
  extract($variables);
  $element    = $variables['element'];
  $settings   = $element['#config'];
  $items      = $element['#items'];
  $build      = '';
  $wrappers   = array();
  $attributes = array();

  $wrappers['class'][]   = 'item-list';
  $wrappers['class'][]   = 'item-list--linkicon';
  if ($settings['wrapper_class']) {
    $wrappers['class'][] = check_plain($settings['wrapper_class']);
  }
  $wrappers['id']        = $element['#linkicon_id'];
  $attributes['class'][] = 'linkicon';

  if ($settings['load']) {

    if (!$settings['vertical']) {
      $attributes['class'][] = 'linkicon--inline';
    }
    if ($settings['color']) {
      $attributes['class'][] = 'linkicon--color';
      $attributes['class'][] = 'linkicon--' . $settings['color'];
    }
    if ($settings['style']) {
      //list($shape, $color) = array_pad(array_map('trim', explode("-", $settings['style'], 2)), 2, NULL);
      //$attributes['class'][] = 'linkicon--' . $shape;
      $attributes['class'][] = 'linkicon--' . $settings['style'];
    }
    if ($settings['size']) {
      $attributes['class'][] = 'linkicon--' . $settings['size'];
    }
    if ($settings['tooltip']) {
      $attributes['class'][] = 'linkicon--tooltip';
    }
    if ($settings['no_text']) {
      $attributes['class'][] = 'linkicon--no-text';
    }
    if ($settings['position']) {
      $attributes['class'][] = 'linkicon--' . $settings['position'];
    }
  }

  $build .= '<div ' . drupal_attributes($wrappers) . '>';
  $build .= '<ul ' . drupal_attributes($attributes) . '>';
  foreach ($items as $delta => $item) {
    $build .= '<li>' . render($item) . '</li>';
  }
  $build .= '</ul>';
  $build .= '</div>';

  return $build;
}

/**
 * Formats an individual linkicon item.
 */
function theme_linkicon_item($variables) {
  extract($variables);
  $element = $variables['element'];

  $build = '';
  $icon  = '';
  $icon_name = $element['#icon_name'];

  $title = '<span class="linkicon__text">' . $element['#title'] . '</span>';

  if (!empty($element['#icon_bundle'])) {
    // As of this writing, icon API has no consistent way to prefixing icon
    // as appears on fontello, icomoon, fontawesome modules.
    $icon_vars = array(
      'bundle'     => $element['#icon_bundle'],
      'icon'       => $icon_name,
      'attributes' => array('class' => array('linkicon__icon')),
    );
    $icon = theme('icon', $icon_vars);

    $title = !empty($icon) ? $title : '<span class="linkicon__noicon">' . $element['#title'] . '</span>';
  }
  else {
    $element['#attributes']['class'][] = 'linkicon__icon';
    $element['#attributes']['class'][] = 'icon';
    $element['#attributes']['aria-hidden'] = 'true';
    $icon = '<span ' . drupal_attributes($element['#attributes']) . '></span>';
  }

  $build = in_array($element['#position'], array('right', 'bottom')) ? $title . $icon : $icon . $title;

  return $build;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function linkicon_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  $path = drupal_get_path('module', 'linkicon');
  // Needed for preview.
  $form['#attached']['css'][] = $path . '/css/linkicon.css';
  $form['#attached']['css'][] = $path . '/css/linkicon.field_ui.css';
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function linkicon_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $path     = drupal_get_path('module', 'linkicon');
  $display  = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $elements = array();

  $elements['linkicon_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Icon prefix class'),
    '#description' => t('A "prefix" or "namespace", e.g.: icon (Fontello), fa (FontAwesome), st-icon (Stackicons), genericon, fonticon, etc. <br>If the link title is <em>Facebook</em>, it will create classes: <em>icon icon-facebook</em> for Fontello, or <em>fa fa-facebook</em> for FontAwesome > 3. <br>The individual icon class itself is based on the link title key matching the pattern: icon-KEY, or fa-KEY.<br>To add classes for the A tag, such as button, external, etc, use the widget settings instead.'),
    '#default_value' => $settings['linkicon_prefix'],
    '#required' => TRUE,
  );

  $elements['linkicon_wrapper_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional wrapper class'),
    '#description' => t('Additional wrapper class for the entire icon list.'),
    '#default_value' => $settings['linkicon_wrapper_class'],
  );

  $elements['linkicon_load'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow linkicon to provide CSS assets'),
    '#default_value' => $settings['linkicon_load'],
    '#description' => t('Otherwise, DIY accordingly.'),
  );

  $elements['linkicon_vertical'] = array(
    '#type' => 'checkbox',
    '#title' => t('Vertical'),
    '#default_value' => $settings['linkicon_vertical'],
    '#description' => t('By default, icons are displayed inline. Check to make icons stacked vertically.'),
    '#states' => array(
      'visible' => array(
        ':input[name*="linkicon_load"]' => array('checked' => TRUE),
      ),
    ),
  );

  $elements['linkicon_style'] = array(
    '#type' => 'select',
    '#title' => t('Icon style'),
    '#default_value' => $settings['linkicon_style'],
    '#options' => array(
      'round'    => t('Round'),
      'round-2'  => t('Round 2'),
      'round-5'  => t('Round 5'),
      'round-8'  => t('Round 8'),
      'round-10'  => t('Round 10'),
      'square'   => t('Square'),
      'button'   => t('Button'),
    ),
    '#empty_option' => t('- None -'),
    '#states' => array(
      'visible' => array(
        ':input[name*="linkicon_load"]' => array('checked' => TRUE),
      ),
    ),
    '#description' => t('Button is more prominent if the title text is not hidden over the background color.'),
  );

  $elements['linkicon_color'] = array(
    '#type' => 'select',
    '#title' => t('Icon background color'),
    '#default_value' => $settings['linkicon_color'],
    '#options' => array(
      'grey'   => t('Grey'),
      'dark'   => t('Dark'),
      'purple' => t('Purple'),
      'orange' => t('Orange'),
      'blue'   => t('Blue'),
      'lime'   => t('Lime'),
      'red'    => t('Red'),
    ),
    '#empty_option' => t('- None -'),
    '#states' => array(
      'visible' => array(
        ':input[name*="linkicon_load"]' => array('checked' => TRUE),
      ),
    ),
    '#description' => t('Basic background color. You should do proper theming to suit your design better, and disable all this.'),
  );

  $elements['linkicon_tooltip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display title as tooltip'),
    '#default_value' => $settings['linkicon_tooltip'],
    '#states' => array(
      'visible' => array(
        ':input[name*="linkicon_load"]' => array('checked' => TRUE),
      ),
    ),
  );

  $elements['linkicon_no_text'] = array(
    '#type' => 'checkbox',
    '#title' => t('Visually hide the title text'),
    '#default_value' => $settings['linkicon_no_text'],
    '#states' => array(
      'visible' => array(
        ':input[name*="linkicon_load"]' => array('checked' => TRUE),
      ),
    ),
  );

  $elements['linkicon_global_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Override title with a generic link title'),
    '#description' => t('If provided, the link title will be overriden with this text, e.g.: Visit the site, View Demo.'),
    '#default_value' => $settings['linkicon_global_title'],
    '#states' => array(
      'visible' => array(
        ':input[name*="linkicon_no_text"]' => array('checked' => FALSE),
      ),
    ),
  );

  $elements['linkicon_position'] = array(
    '#type' => 'select',
    '#title' => t('Icon position to the title text'),
    '#default_value' => $settings['linkicon_position'],
    '#description' => t('By default icon is before the text.'),
    '#options' => array(
      'bottom' => t('Bottom'),
      'right'  => t('Right'),
      'top'    => t('Top'),
    ),
    '#empty_option' => t('Left'),
    '#states' => array(
      'visible' => array(
        ':input[name*="linkicon_no_text"]' => array('checked' => FALSE),
      ),
    ),
  );

  $icon_sizes = array(
    'small' => t('Small'),
    'medium' => t('Medium'),
    'large' => t('Large'),
    'xlarge' => t('X-large'),
    'xxlarge' => t('Xx-large'),
  );

  $elements['linkicon_size'] = array(
    '#type' => 'select',
    '#title' => t('Icon font size'),
    '#default_value' => $settings['linkicon_size'],
    '#options' => $icon_sizes,
    '#empty_option' => t('Default'),
    '#states' => array(
      'visible' => array(
        ':input[name*="linkicon_load"]' => array('checked' => TRUE),
      ),
    ),
  );

  $elements['linkicon_font'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to font icon CSS file'),
    '#description' => t('Valid path to CSS file, e.g.: sites/all/libraries/fontello/css/fontello.css. <br>Leave blank if your theme has already had one. Overriden if Icon API preferred, or if the prefix matches one, e.g.: fontawesome.module. <br>Please be aware of possible conflicts if you installed different icon fonts <br>due to their namespace collision. Most icon fonts tend to make use the same .icon:before.'),
    '#default_value' => $settings['linkicon_font'],
    '#element_validate' => array('_linkicon_element_validate_font_path'),
    '#states' => array(
      'visible' => array(
        ':input[name*="linkicon_load"]' => array('checked' => TRUE),
      ),
    ),
  );

  // Build a preview.
  if (function_exists('icon_bundles')) {
    $bundles   = icon_bundles();
    $providers = icon_providers();

    $provider_options = array();
    foreach ($providers as $name => $provider) {
      $provider_options[$provider['name']] = $provider['title'];
    }

    // @todo filter by status flag
    if ($provider_options) {
      $elements['linkicon_bundle'] = array(
        '#type' => 'select',
        '#title' => t('Icon module integration'),
        '#options' => $provider_options,
        '#default_value' => $settings['linkicon_bundle'],
        '#description' => t('The above icon providers modules are detected. You can choose which icon CSS file to load with this module. <br>Make sure that you have a working module that loads relevant CSS accordingly. <br>Known working modules as of this writing: fontawesome, and icomoon.'),
        '#empty_option' => t('- None -'),
      );
    }
  }

  if (!empty($settings['linkicon_bundle']) || !empty($settings['linkicon_font'])) {
    $icon_previews = array();
    $linkicon_item = array(
      '#theme' => 'linkicon_item',
      '#position' => $settings['linkicon_position'],
      '#title' => 'Twitter',
      '#attributes' => array('class' => array($settings['linkicon_prefix'], $settings['linkicon_prefix'] . '-twitter')),
      '#icon_bundle' => $settings['linkicon_bundle'] ? $settings['linkicon_bundle'] : FALSE,
      '#icon_name'   => 'twitter',
    );

    $icon = render($linkicon_item);

    $tooltip = '';
    if ($settings['linkicon_tooltip']) {
      $tooltip = ' data-title="Twitter"';
    }
    foreach ($icon_sizes as $key => $size) {
      $is_active = $key == $settings['linkicon_size'] ? ' active' : '';
      $icon_previews[] = '<a class="linkicon__item linkicon--' . $key . $is_active . '" href="#"' . $tooltip . '>' . $icon . '</a>';
    }

    $preview = array(
      '#theme' => 'linkicon',
      '#linkicon_id' => 'linkicon-preview',
      '#items' => $icon_previews,
      '#config' => array(
        'style' => $settings['linkicon_style'],
        'color' => $settings['linkicon_color'],
        // 'size' => $settings['linkicon_size'],
        'no_text' => $settings['linkicon_no_text'],
        'position' => $settings['linkicon_position'],
        'tooltip' => $settings['linkicon_tooltip'],
        // 'vertical' => $settings['linkicon_vertical'],
        'wrapper_class' => $settings['linkicon_wrapper_class'],
        'load' => $settings['linkicon_load'],
      ),
    );

    if ($settings['linkicon_load']) {
      $preview['#attached']['css'][] = array('data' => $path . '/css/linkicon.css');
      if ($settings['linkicon_font'] && empty($settings['linkicon_bundle'])) {
        $preview['#attached']['css'][] = array('data' => strip_tags($settings['linkicon_font']));
      }
    }

    $elements['linkicon_size_preview'] = array(
      '#markup' => render($preview),
    );
  }

  return $elements;
}

/**
 * Validate path to icon font CSS file.
 */
function _linkicon_element_validate_font_path($element, &$form_state, $form) {
  if (!empty($element['#value']) && !is_file($element['#value'])) {
    form_set_error($element['#name'], t('<strong>@css_font_path</strong> doesn\'t exist.', array('@css_font_path' => $element['#value'])));
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function linkicon_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display  = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary  = array();
  $summary[] = t('Base class: <em>@linkicon_prefix</em>.', array(
    '@linkicon_prefix' => $settings['linkicon_prefix'],
  ));

  $summary[] = t('Module CSS: <em>@linkicon_load</em>. Wrapper: <em>@linkicon_wrapper_class</em>. Style: <em>@linkicon_style</em>. Bg: <em>@linkicon_color</em>.', array(
    '@linkicon_load' => $settings['linkicon_load'] ? t('Yes') : t('No'),
    '@linkicon_wrapper_class' => $settings['linkicon_wrapper_class'] ? $settings['linkicon_wrapper_class'] : t('None'),
    '@linkicon_vertical' => $settings['linkicon_vertical'] ? t('Vertical') : t('Horizontal'),
    '@linkicon_style' => $settings['linkicon_style'] ? $settings['linkicon_style'] : t('None'),
    '@linkicon_color' => $settings['linkicon_color'] ? $settings['linkicon_color'] : t('None'),
  ));

  if ($settings['linkicon_load']) {
    $summary[] = t('Size: <em>@linkicon_size</em>. No text: <em>@linkicon_no_text</em>. Tooltip: <em>@linkicon_tooltip</em>', array(
      '@linkicon_size' => $settings['linkicon_size'],
      '@linkicon_no_text' => $settings['linkicon_no_text'] ? t('Yes') : t('No'),
      '@linkicon_tooltip' => $settings['linkicon_tooltip'] ? t('Yes') : t('No'),
    ));

    if (empty($settings['linkicon_no_text'])) {
      $summary[] = t('Use global title: <em>@linkicon_global_title</em>. <br>Icon position: <em>@linkicon_position</em>.', array(
        '@linkicon_global_title' => $settings['linkicon_global_title'] ? $settings['linkicon_global_title'] : t('No'),
        '@linkicon_position' => $settings['linkicon_position'] ? $settings['linkicon_position'] : t('Left'),
      ));
    }

    $summary[] = t('Font icon path: <em>@linkicon_font</em>.', array(
      '@linkicon_font' => $settings['linkicon_font'] ? $settings['linkicon_font'] : t('No'),
    ));
    $summary[] = t('Icon provider: <em>@linkicon_bundle</em>.', array(
      '@linkicon_bundle' => $settings['linkicon_bundle'] ? $settings['linkicon_bundle'] : t('No'),
    ));
  }

  return implode("<br />", $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function linkicon_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Unlike D8, we need to loop first to reach our settings.
  foreach ($items as $entity_id => $entity_items) {
    if ($instances[$entity_id]['settings']['title'] == 'predefined' && isset($instances[$entity_id]['settings']['title_predefined']) && $instances[$entity_id]['settings']['title_predefined']) {
      $title_predefined = linkicon_extract_allowed_values($instances[$entity_id]['settings']['title_predefined']);
      $title_tooltip    = linkicon_extract_allowed_values($instances[$entity_id]['settings']['title_predefined'], TRUE);
      foreach ($entity_items as $delta => $value) {
        $items[$entity_id][$delta]['display_title'] = $title_predefined[$value['title']];
        if (isset($title_tooltip[$value['title']])) {
          $items[$entity_id][$delta]['tooltip'] = $title_tooltip[$value['title']];
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function linkicon_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $path = drupal_get_path('module', 'linkicon');
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'linkicon':
      list($id, , $bundle) = entity_extract_ids($entity_type, $entity);
      $prefix_class = check_plain($settings['linkicon_prefix']);
      $contents = array();

      foreach ($items as $delta => $item) {
        // The A tag attributes.
        $attributes = array();
        $attributes['class'][] = 'linkicon__item';

        // Linkicon requires both link text and URL available with proper
        // validation during input, no need extra checks.
        $icon_name     = $item['title'];
        $display_title = isset($item['display_title']) ? $item['display_title'] : $icon_name;
        $tooltip       = isset($item['tooltip']) ? $item['tooltip'] : $display_title;

        // If $icon_name is facebook, this creates: icon-facebook
        $icon_class    = drupal_clean_css_identifier(drupal_strtolower($prefix_class . '-' . $icon_name));

        // This is similar as widget setting Static title, only available at
        // Display for more flexible options by view modes.
        if (!empty($settings['linkicon_global_title']) && empty($settings['linkicon_no_text'])) {
          $display_title = $settings['linkicon_global_title'];
        }

        // Sanitize $display_title before use since html is TRUE for the link.
        $item['html'] = TRUE;
        $icon_element = array(
          '#theme'       => 'linkicon_item',
          '#position'    => $settings['linkicon_position'],
          '#title'       => check_plain($display_title),
          '#attributes'  => array('class' => array($prefix_class, $icon_class)),
          '#icon_bundle' => $settings['linkicon_bundle'] ? $settings['linkicon_bundle'] : FALSE,
          '#icon_name'   => check_plain($icon_name),
        );

        $item['title'] = render($icon_element);

        // Link module stores classes as spaced string.
        if (!empty($item['attributes']['class'])) {
          $attributes['class'] = array_merge(array($item['attributes']['class']), $attributes['class']);
        }

        // Unlike D8 link module, D7 link expect a spaced string, so feed it.
        $item['attributes']['class'] = implode(" ", $attributes['class']);

        // Our pure CSS3 tooltip depends on data-title.
        if ($settings['linkicon_tooltip']) {
          $item['attributes']['data-title'] = check_plain($tooltip);
        }

        // We are done for the item, pass it over to link to do its job.
        $contents[$delta] = array(
          '#theme'   => 'link_formatter_link_default',
          '#element' => $item,
          '#field'   => $instance,
          '#display' => $display,
        );
      }

      // Build own wrapper for greater control.
      $linkicon_id = drupal_clean_css_identifier("{$entity_type}-{$bundle}-{$instance['field_name']}-{$id}");
      $element[0] = array(
        '#theme' => 'linkicon',
        '#linkicon_id' => 'linkicon-' . $linkicon_id,
        '#items' => $contents,
        '#config' => array(
          'style'         => $settings['linkicon_style'],
          'color'         => $settings['linkicon_color'],
          'size'          => $settings['linkicon_size'],
          'no_text'       => $settings['linkicon_no_text'],
          'position'      => $settings['linkicon_position'],
          'tooltip'       => $settings['linkicon_tooltip'],
          'vertical'      => $settings['linkicon_vertical'],
          'wrapper_class' => $settings['linkicon_wrapper_class'],
          'load'          => $settings['linkicon_load'],
        ),
      );

      // Attached our assests if so configured.
      if (!empty($settings['linkicon_load'])) {
        $element[0]['#attached']['css'][] = array('data' => $path . '/css/linkicon.css');
        if ($settings['linkicon_font'] && empty($settings['linkicon_bundle'])) {
          $element[0]['#attached']['css'][] = array('data' => strip_tags($settings['linkicon_font']));
        }
      }

      break;
  }
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function linkicon_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  // Get the instance and widget type.
  $element = &$form['instance'];
  $widget_type = $element['widget']['type']['#value'];

  if ($widget_type == 'link_field') {
    // Get the field instance and settings.
    $instance = field_info_instance($element['entity_type']['#value'], $element['field_name']['#value'], $element['bundle']['#value']);
    $settings = $instance['settings'];

    // Alter the existing form elements.
    linkicon_field_widget_settings_form_alter($element, $settings);
  }
}

/**
 * Alters the existing link field widget settings form elements.
 */
function linkicon_field_widget_settings_form_alter(&$form, $settings) {
  if ($form['widget']['type']['#value'] == 'link_field') {
    $form['settings']['title']['#options'] += array(
      'predefined' => t('Predefined Title'),
    );

    // Avoid confusing static title by disabling it if predefined is selected.
    // We don't want to hide it so to have immediate awareness of this option.
    $form['settings']['title_value']['#states'] = array(
      'disabled' => array(
        ':input[name="instance[settings][title]"]' => array('value' => 'predefined'),
      ),
    );

    // Insert our extra option after title.
    $new_form['settings'] = array();
    foreach ($form['settings'] as $key => $value) {
      if ($key == 'title_value') {
        $new_form['settings']['title_predefined'] = array(
          '#type' => 'textarea',
          '#title' => t('Allowed titles'),
          '#default_value' => isset($settings['title_predefined']) ? $settings['title_predefined'] : '',
          '#description' => t('Enter the list of key|value pairs of predefined titles separated by new line, where key is the icon name without prefix, e.g.: <br />for <em>icon-facebook</em>, place <em>facebook|Facebook</em>. The prefix is defined at Display formatter so that you are not stuck in database when the icon vendor change prefixes from "icon-" to just "fa-", etc. Make sure the icon name is available at your icon set. To have a tooltip different from the title, add a third pipe value.<br>Warning! Pre-existing values will be reset.'),
          '#states' => array(
            'visible' => array(
              ':input[name="instance[settings][title]"]' => array('value' => 'predefined'),
            ),
          ),
        );
      }
      $new_form['settings'][$key] = $value;
    }

    // Replace $form['settings'] with new form.
    $form['settings'] = $new_form['settings'];
  }
}

/**
 * Implements hook_element_info_alter().
 */
function linkicon_element_info_alter(&$types) {
  $types['link_field']['#process'][] = 'linkicon_field_process';
}

/**
 * Implements hook_field_info_alter().
 */
function linkicon_field_info_alter(&$info) {
  if (isset($info['link_field'])) {
    $info['link_field']['settings']['title_predefined'] = '';
    $info['link_field']['instance_settings']['title_predefined'] = '';
  }
}

/**
 * Overrides link_field_process() to use a select box.
 */
function linkicon_field_process($element, $form_state, $complete_form) {
  $instance = field_widget_instance($element, $form_state);
  $settings = $instance['settings'];

  $element = link_field_process($element, $form_state, $complete_form);
  if (isset($settings['title_predefined']) && $settings['title_predefined'] && $settings['title'] == 'predefined') {
    $element['title']['#type'] = 'select';
    $element['title']['#options'] = linkicon_extract_allowed_values($settings['title_predefined']);
    $element['title']['#empty_option'] = t('- Select -');
    // Remove irrelevant description.
    unset($element['title']['#description']);
    $element['#element_validate'] = array('_linkicon_element_validate_link_title');
  }

  return $element;
}

/**
 * Validate predefined link title.
 * Since Link title is not required, we make sure that it is not empty if the
 * URL field is not. In the opposite, link.module does validation.
 * @todo: error field receives no error class.
 */
function _linkicon_element_validate_link_title($element, &$form_state, $form) {
  if (empty($element['#value']['title']) && !empty($element['#value']['url'])) {
    form_set_error($element['#value']['title'], t('Title must be entered if URL is provided.'));
  }
}

/**
 * Extracts link title textarea values into array for link title select options.
 */
function linkicon_extract_allowed_values($values, $is_tooltip = FALSE) {
  $allowed_values = array();
  if ($values) {
    $list = explode("\n", strip_tags($values));

    foreach ($list as $value) {
      if (strpos($value, "|") !== FALSE) {
        list($key, $title, $tooltip) = array_pad(array_map('trim', explode("|", $value, 3)), 3, NULL);
        $allowed_values[$key] = $is_tooltip && !empty($tooltip) ? $tooltip : $title;
      }
      else {
        $allowed_values[$value] = $value;
      }
    }
  }
  return $allowed_values;
}
