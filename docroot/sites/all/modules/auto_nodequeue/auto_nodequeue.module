<?php

/**
 * @file
 * Allows enabling automatic addition of nodes to node queues
 */

/**
 * Implements hook_permission().
 */
function auto_nodequeue_permission() {
  return array(
    'override auto queue' => array(
      'title' => t('Override automatically add to queue'),
    ),
  );
}

/**
 * Implement hook_form_alter().
 *
 * Adds an additional option to the node queue screen allowing users to set
 * nodes to be added on creation.
 *
 * @see _auto_nodequeue_get_queue_flag()
 * @see _auto_nodequeue_get_qids()
 */
function auto_nodequeue_form_alter(&$form, &$form_state, $form_id) {
  if ('nodequeue-edit-queue-form' == $form['#id']) {

    // This is ugly. The nodequeue form doesn't come with field weights, and we
    // don't want to add them ourselves. This seems safer as we only assume one
    // field's name
    $form_orig = $form;
    $form = array();
    foreach ($form_orig as $key => $value) {
      $form[$key] = $value;
      if ('types' == $key) {
        $form['auto_add'] = array(
          '#type' => 'checkbox',
          '#title' => t('Auto add nodes'),
          '#default_value' => _auto_nodequeue_get_queue_flag($form_orig),
          '#description' => t('Automatically add nodes of the above selected types to this queue.'),
        );
      }
    }
    $form['#submit'][] = 'auto_nodequeue_nodequeue_edit_queue_form_submit';
  }

  // Get the available queue type value.
  $queue_type = isset($form['type']['#value']) ? $form['type']['#value'] : '';
  // Get the current edited node id.
  $nid = isset($form['nid']['#value']) ? $form['nid']['#value'] : '';
  // Returns an array of available queues.
  $queue_options = _auto_nodequeue_get_qids($queue_type, $nid);

  // Returns the default value array of available queues.
  $queue_default_value = _auto_nodequeue_get_auto_qids($queue_type, $nid);

  // Only add if this is a NEW node
  if (isset($form['#node_edit_form']) AND $queue_options) {
    $form['auto_nodequeue'] = array(
      '#type' => 'fieldset',
      '#title' => t('Automatic Queue Settings'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      '#access' => user_access('override auto queue'),
      '#group' => 'additional_settings',
    );

    $form['auto_nodequeue']['queues'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Available Queues'),
      '#options' => $queue_options,
      '#default_value' => $queue_default_value,
    );
    // Add to verify the node is already in queue.
    if ($nid) {
      $form['auto_nodequeue']['original_queues'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Is the node in queues'),
        '#options' => $queue_options,
        '#default_value' => $queue_default_value,
        '#attributes' => array('readonly' => TRUE),
        '#prefix' => '<div style="display:none;">',
        '#suffix' => '</div>',
      );
    }
  }
}
/**
 * Additional submit handler for the nodequeue edit queue form
 */
function auto_nodequeue_nodequeue_edit_queue_form_submit($form, &$form_state) {
  if ($qid = $form_state['values']['qid']) {
    $auto_add = $form_state['values']['auto_add'];
    db_merge('nodequeue_auto')
      ->key(array('qid' => $qid))
      ->fields(array(
          'qid' => $qid,
          'auto_add' => $auto_add,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_insert().
 *
 * Add nodes to any queue they're assigned to on insertion
 */
function auto_nodequeue_node_insert($node) {
  if (isset($node->queues)) {
    $qids = array();
    foreach ($node->queues as $qid => $checked) {
      if ($checked) {
        $qids[] = $qid;
      }
    }

    if (count($qids)) {
      $queues = nodequeue_load_queues($qids);
      foreach ($queues as $queue) {
        if ($queue->owner == 'smartqueue_taxonomy') {
          if (module_exists('smartqueue')) {
            $refs = smartqueue_taxonomy_nodequeue_subqueues($queue, $node);
            $references = array($queue->qid => $refs);
            $smartqueues = nodequeue_load_subqueues_by_reference($references);
            foreach ($smartqueues as $smartqueue) {
              nodequeue_subqueue_add($queue, $smartqueue, $node->nid);
            }
          }
        }
        else {
          $subqueues = nodequeue_load_subqueues_by_queue($queue->qid);
          $subqueue = array_shift($subqueues);
          nodequeue_subqueue_add($queue, $subqueue, $node->nid);
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 *
 * Add/Remove nodes to any queues on user selection.
 */
function auto_nodequeue_node_update($node) {
  if (isset($node->queues)) {
    $qids = array();
    
    foreach ($node->queues as $qid => $checked) {
      //foreach ($node->original_queues as $oqchecked) {
        // Check for decide the node is added to queue.
        if ($checked == TRUE && $node->original_queues[$qid] == FALSE) {
          $qids[] = $qid;
        }
        // Check for decide the node is removed from queue.
        elseif ($checked ==FALSE && $node->original_queues[$qid] == TRUE) {
          $sqid = _auto_nodequeue_get_queue_sid($node->original_queues[$qid]);
          nodequeue_subqueue_remove_node($sqid, $node->nid);
        }
      //}
    }
    if (count($qids)) {
      $queues = nodequeue_load_queues($qids);
      foreach ($queues as $queue) {
        if ($queue->owner == 'smartqueue_taxonomy') {
          if (module_exists('smartqueue')) {
            $refs = smartqueue_taxonomy_nodequeue_subqueues($queue, $node);
            $references = array($queue->qid => $refs);
            $smartqueues = nodequeue_load_subqueues_by_reference($references);
            foreach ($smartqueues as $smartqueue) {
              nodequeue_subqueue_add($queue, $smartqueue, $node->nid);
            }
          }
        }
        else {
          $subqueues = nodequeue_load_subqueues_by_queue($queue->qid);
          $subqueue = array_shift($subqueues);
          nodequeue_subqueue_add($queue, $subqueue, $node->nid);
        }
      }
    }
  }
}

/**
 * Get the current queue's auto_add flag setting
 *
 * @param $form
 *   The active nodequeue edit form.
 *
 * @return
 *   An integer flag indicating if the current queue has auto node addition enabled
 */
function _auto_nodequeue_get_queue_flag($form) {
  $auto_add = 0;
  if (isset($form['qid'])) {
    if ($result = db_query('SELECT auto_add FROM {nodequeue_auto} WHERE qid = :qid', array(':qid' => $form['qid']['#value']))) {
      $auto_add = $result->fetchField();
    }
  }

  return $auto_add;
}

/**
 * Fetches a list of qids that are enabled for this node type
 *
 * @param string
 *   The node type
 * @return
 *   Associative array of queue id => name
 */
function _auto_nodequeue_get_qids($type, $nid) {

  $queues_opts = t('Add to queue:&nbsp;');
  if ($nid) {
    $queues_opts = t('Add/Remove to queue:&nbsp;');
  }

  $queues = array();
  $query = db_select('nodequeue_queue', 'Q');
  $query->fields('Q', array('qid', 'title'));
  $query->join('nodequeue_types', 'T',
            "Q.qid = T.qid AND T.type = :type",
            array(':type' => $type));
  $results = $query->execute();
  foreach ($results as $row) {
    $queues[$row->qid] = t('!queues_opts "%queue"', array('!queues_opts' => $queues_opts, '%queue' => $row->title));
  }
  return $queues;
}

/**
 * Fetches a list of qids that are enabled for automatic addition for this node type
 *
 * @param string
 *   The node type
 * @return
 *   An array of queue ids
 */
function _auto_nodequeue_get_auto_qids($type, $nid) {
  $qids = array();
  $query = db_select('nodequeue_auto', 'A');
  $query->fields('A', array('qid'));
  $query->innerJoin('nodequeue_types', 'T', 'A.qid = T.qid');
  $query->condition(
    db_and()
    ->condition('A.auto_add', 1, '=')
    ->condition('T.type', $type, '=')
  );
  if ($nid) {
    $query->innerJoin('nodequeue_nodes', 'N', 'T.qid = N.qid');
    $query->condition('N.nid', $nid, '=');
  }

  $results = $query->execute();
  foreach ($results as $result) {
    $qids[] = $result->qid;
  }
  return $qids;
}

/**
 * Fetch requested queue's sqid.
 *
 * @param integer
 *   The node queue's qid
 * @return
 *   A scalar value
 */
function _auto_nodequeue_get_queue_sid($qid) {
  $sqid = db_query("SELECT sqid FROM {nodequeue_subqueue} WHERE qid =:qid",
              array(':qid' => (int) $qid)
            )->fetchField();
  return $sqid;
}
