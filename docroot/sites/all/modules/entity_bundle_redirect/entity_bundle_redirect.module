<?php

/**
 * @file
 * This module allows to create 301 redirections for unused entity paths,
 * by bundle and language.
 *
 * @author Francisco J. Cruz Romanos <grisendo@gmail.com>
 */

/**
 * Implements hook_permission().
 */
function entity_bundle_redirect_permission() {

  $perms = array(
    'administer entity_bundle_redirections' => array(
      'title' => t('Admin Entity bundle redirections'),
      'description' => t('Administer Entity bundle redirections.'),
      'restrict access' => TRUE,
    ),
  );
  return $perms;

}

/**
 * Implements hook_menu().
 */
function entity_bundle_redirect_menu() {

  $items = array();
  $items['admin/config/search/entity-bundle-redirect'] = array(
    'title' => 'Entity bundle Redirect',
    'description' => 'Administer Entity bundle redirections',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_bundle_redirect_admin_page'),
    'access arguments' => array('administer entity_bundle_redirections'),
    'file' => 'includes/entity_bundle_redirect.admin.inc',
  );
  return $items;

}

/**
 * Implements hook_init().
 */
function entity_bundle_redirect_init() {

  $menu_item = menu_get_item();
  $entities = entity_get_info();
  $entity_type = NULL;

  foreach ($entities as $entity_id => $entity) {
    if (
      isset($entity['uri callback'])
      &&
      isset($entity['load hook'])
      &&
      isset($menu_item['load_functions'])
      &&
      is_array($menu_item['load_functions'])
      &&
      in_array($entity['load hook'], $menu_item['load_functions'])
    ) {
      $entity_type = $entity;
      break;
    }
  }

  if ($entity_type) {
    $entity = $menu_item['page_arguments'][0];
    if ($entity) {
      if (isset($entity_type['entity keys']['bundle']) && $entity_type['entity keys']['bundle']) {
        $url = entity_bundle_redirect_load_url($entity_id, $entity->{$entity_type['entity keys']['bundle']}, $entity);
      }
      else {
        $url = entity_bundle_redirect_load_url($entity_id, $entity_id, $entity);
      }
      if ($url) {
        entity_bundle_redirect_goto($url);
      }
    }
  }

}

/**
 * Implements hook_flush_caches().
 */
function entity_bundle_redirect_flush_caches() {

  return array('cache_entity_bundle_redirect');

}

/**
 * Implements hook_features_api().
 */
function entity_bundle_redirect_features_api() {

  return array(
    'entity_bundle_redirect' => array(
      'name' => 'Entity bundle Redirect',
      'file' => drupal_get_path('module', 'entity_bundle_redirect') . '/includes/entity_bundle_redirect.features.inc',
      'default_hook' => 'entity_bundle_redirect_default_config',
      'feature_source' => TRUE,
    ),
  );

}

/**
 * Auxiliar function to send the user to a different page.
 *
 * @param string $url
 *   The URL to redirect, internal (already processed) or external.
 * @param int $http_response_code
 *   (optional) The HTTP status code to use for the redirection,
 *   defaults to 301.
 */
function entity_bundle_redirect_goto($url, $http_response_code = 301) {

  header('Location: ' . $url, TRUE, $http_response_code);
  drupal_exit($url);

}

/**
 * Loads a stored redirection from database.
 *
 * @param string $entity_type
 *   The entity type (node, taxonomy...) the redirection is made for.
 * @param string $bundle
 *   The bundle (content type, vocabulary...) the redirection is made for.
 * @param string $lang
 *   (optional) The language the redirection is made for,
 *   defaults to current site language.
 * @param bool $fallback
 *   (optional) Determines if it should search LANGUAGE_NONE redirection,
 *   if redirection for given language is not found, defaults to TRUE.
 */
function entity_bundle_redirect_load_stored($entity_type, $bundle, $lang = NULL, $fallback = TRUE) {

  if (!$lang) {
    global $language;
    $lang = $language->language;
  }
  elseif (is_object($lang)) {
    $lang = $lang->language;
  }

  $sql = db_select('entity_bundle_redirect', 'ebr')
    ->fields('ebr')
    ->condition('entity_type', $entity_type)
    ->condition('entity_bundle', $bundle)
    ->condition('language', $lang)
    ->execute();

  if ($row = $sql->fetchAssoc()) {
    return $row['link_path'] ? $row['link_path'] : '';
  }
  else {
    if (!($fallback) || ($lang === LANGUAGE_NONE)) {
      return NULL;
    }
    else {
      $sql = db_select('entity_bundle_redirect', 'ebr')
        ->fields('ebr')
        ->condition('entity_type', $entity_type)
        ->condition('entity_bundle', $bundle)
        ->condition('language', LANGUAGE_NONE)
        ->execute();
      if ($row = $sql->fetchAssoc()) {
        return $row['link_path'] ? $row['link_path'] : '';
      }
      else {
        return NULL;
      }
    }
  }

}

/**
 * Converts an plain URL into a Drupal processed URL.
 *
 * @param string $url
 *   The original URL to transform.
 */
function entity_bundle_redirect_generate_url($url) {

  $has_query = FALSE;
  $urlarray = explode('?', $url);
  if (count($urlarray) == 2) {
    $params = explode('&', $urlarray[1]);
    $params_array = array();
    foreach ($params as $param) {
      $p = explode('=', $param);
      $params_array[$p[0]] = $p[1];
    }
    $has_query = TRUE;
  }

  if ($has_query) {
    return url($urlarray[0], array('query' => $params_array));
  }
  else {
    return url($url);
  }

}

/**
 * Determines the URL to redirect, depending on configuration and hooks.
 *
 * @param string $entity_type
 *   The entity type of the current path.
 * @param string $bundle
 *   The entity bundle of the current path.
 * @param stdClass $entity
 *   The complete entity object of the current path.
 */
function entity_bundle_redirect_load_url($entity_type, $bundle, $entity) {

  global $language;
  $cache_id = __FUNCTION__ . ':' . md5($_GET['q']) . ':' . $language->language;
  $path = &drupal_static($cache_id, FALSE);

  if ($path === FALSE) {
    $cache = cache_get($cache_id, 'cache_entity_bundle_redirect');
    if ($cache !== FALSE) {
      $path = $cache->data;
    }
    else {
      global $language;
      $path = entity_bundle_redirect_load_stored($entity_type, $bundle, $language);
      if ($path) {
        if (module_exists('token')) {
          if (strpos($path, '[') !== FALSE) {
            $path = token_replace(
              $path,
              array(
                $entity_type => $entity,
              )
            );
          }
        }
        $path = entity_bundle_redirect_generate_url($path);
      }
      $info = array(
        'entity_type' => $entity_type,
        'bundle' => $bundle,
        'entity' => $entity,
      );
      drupal_alter(
        'entity_bundle_redirect',
        $path,
        $info
      );
      if ($path) {
        cache_set($cache_id, $path, 'cache_entity_bundle_redirect');
      }
    }

  }

  return $path;

}

/**
 * Saves a redirection into the database.
 *
 * @param string $entity_type
 *   The entity type (node, taxonomy...) the redirection is made for.
 * @param string $bundle
 *   The bundle (content type, vocabulary...) the redirection is made for.
 * @param string $path
 *   The URL that will be stored.
 * @param string $lang
 *   (optional) The language the redirection is made for,
 *   defaults to current site language.
 */
function entity_bundle_redirect_save_url($entity_type, $bundle, $path, $lang = NULL) {

  if (!$lang) {
    global $language;
    $lang = $language->language;
  }
  elseif (is_object($lang)) {
    $lang = $lang->language;
  }

  $exists = entity_bundle_redirect_load_stored($entity_type, $bundle, $lang, FALSE);
  if ($exists !== NULL) {
    db_update('entity_bundle_redirect')
      ->fields(
        array(
          'link_path' => $path,
        )
      )
      ->condition('entity_type', $entity_type)
      ->condition('entity_bundle', $bundle)
      ->condition('language', $lang)
      ->execute();
  }
  else {
    db_insert('entity_bundle_redirect')
      ->fields(
        array(
          'entity_type' => $entity_type,
          'entity_bundle' => $bundle,
          'link_path' => $path,
          'language' => $lang,
        )
      )
      ->execute();
  }

}
