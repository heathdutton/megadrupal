<?php
/**
 * @file
 * beforeafter module.
 */

/**
 * Implements hook_menu().
 */
function beforeafter_menu() {
  // Before/after settings page.
  $items['admin/config/media/beforeafter'] = array(
    'title' => 'Before/After settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('beforeafter_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Helper function to get the path to the beforeafter plugin folder.
 */
function beforeafter_get_library_path() {
  $libaries = libraries_get_libraries();
  return isset($libaries['beforeafter']) ? $libaries['beforeafter'] : FALSE;
}

/**
 * Form builder; Configure beforeafter module.
 */
function beforeafter_settings() {
  $form = array();

  $form['beforeafter_image_path'] = array(
    '#title' => t('Image path'),
    '#description' => t('The absolute path to where you store the navigation images. Expecting handle.gif, lt-small.png and rt-small.png'),
    '#type' => 'textfield',
    '#default_value' => variable_get('beforeafter_image_path', '/' . beforeafter_get_library_path()),
  );

  $form['beforeafter_animate_intro'] = array(
    '#title' => t('Animate intro'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('beforeafter_animate_intro', TRUE),
    '#description' => t('Whether or not to have the drag bar start completely to the right of the container and gradually move by itself to the midpoint.'),
  );

  $form['animate_intro_container'] = array(
    '#type' => 'fieldset',
    '#title' => t('Animate intro'),
    '#states' => array(
      'visible' => array(
        ':input[name="beforeafter_animate_intro"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['animate_intro_container']['beforeafter_intro_delay'] = array(
    '#title' => t('Intro delay'),
    '#type' => 'textfield',
    '#default_value' => variable_get('beforeafter_intro_delay', 2000),
    '#field_suffix' => 'ms',
    '#description' => t('The number of milliseconds to wait before beginning the automatic drag bar move to the center of the image.'),
  );

  $form['animate_intro_container']['beforeafter_intro_duration'] = array(
    '#title' => t('Intro duration'),
    '#type' => 'textfield',
    '#default_value' => variable_get('beforeafter_intro_duration', 500),
    '#field_suffix' => 'ms',
    '#description' => t('The number of milliseconds it will take for the drag bar to go from the right side of the image to the middle of the image.'),
  );

  $form['beforeafter_before_link_text'] = array(
    '#title' => t('Before link text'),
    '#description' => t('This is the text used for the before image link.') . '<br />'
    . t('Only applicable if the show full links option is set to true on the formatter settings.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('beforeafter_before_link_text', t('Show only before')),
  );

  $form['beforeafter_after_link_text'] = array(
    '#title' => t('After link text'),
    '#description' => t('This is the text used for the after image link.') . '<br />'
    . t('Only applicable if the show full links option is set to true on the formatter settings.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('beforeafter_after_link_text', t('Show only after')),
  );

  $form['beforeafter_cursor'] = array(
    '#title' => t('Cursor'),
    '#description' => t('The CSS style of the cursor when pointing to the drag handle.'),
    '#type' => 'select',
    '#default_value' => variable_get('beforeafter_cursor', 'pointer'),
    '#options' => array(
      'default' => 'default',
      'pointer' => 'pointer',
      'move' => 'move',
      'col-resize' => 'col-resize',
    ),
  );

  $form['beforeafter_click_speed'] = array(
    '#title' => t('Click speed'),
    '#description' => t('The speed for a click animation to complete.'),
    '#type' => 'textfield',
    '#field_suffix' => 'ms',
    '#default_value' => variable_get('beforeafter_link_display_speed', 200),
  );

  $form['beforeafter_link_display_speed'] = array(
    '#title' => t('Link display speed'),
    '#description' => t('The speed for a link animation to complete.'),
    '#type' => 'textfield',
    '#field_suffix' => 'ms',
    '#default_value' => variable_get('beforeafter_click_speed', 600),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_field_formatter_info().
 */
function beforeafter_field_formatter_info() {
  return array(
    'beforeafter_image' => array(
      'label' => t('Before/After image'),
      'field types' => array('image'),
      'settings' => array(
        'image_style' => '',
        'show_full_links' => FALSE,
        'divider_color' => '888',
        'intro_position' => 0.5,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function beforeafter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $image_styles = image_style_options(FALSE);

  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $element['show_full_links'] = array(
    '#title' => t('Show full links'),
    '#type' => 'checkbox',
    '#default_value' => $settings['show_full_links'],
    '#description' => t('Whether or not to display links below the image that a visitor can click on that will automatically show the full before or full after image.'),
  );

  $element['intro_position'] = array(
    '#title' => t('Intro position'),
    '#description' => t('Where the draggable separator should appear when the plugin loads as a fraction of the overall width.') . '<br />'
    . t('For example, .25 would have the draggable separator appear 1/4th of the way on the left of the image.'),
    '#type' => 'textfield',
    '#default_value' => $settings['intro_position'],
  );

  $element['divider_color'] = array(
    '#title' => t('Divider color'),
    '#description' => t('The CSS hex color of the divider bar'),
    '#field_prefix' => '#',
    '#type' => 'textfield',
    '#default_value' => $settings['divider_color'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function beforeafter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();
  $image_styles = image_style_options(FALSE);

  unset($image_styles['']);
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }
  $boolean_values = array(t('No'), t('Yes'));
  $summary[] = t('Show full links: @show_full_links', array('@show_full_links' => $boolean_values[$settings['show_full_links']]));

  $summary[] = t('Divider color: #@divider_color', array('@divider_color' => $settings['divider_color']));
  $summary[] = t('Intro position: @intro_position', array('@intro_position' => $settings['intro_position']));

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function beforeafter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  static $js_added = FALSE;
  // I don't want to fetch library path every time.
  static $library_path = FALSE;
  if (!$js_added) {
    // These files only need to be included once per page.
    drupal_add_css(drupal_get_path('module', 'beforeafter') . '/beforeafter.css');
    $library_path = beforeafter_get_library_path();
    if ($library_path) {
      drupal_add_library('system', 'ui.draggable');
      drupal_add_js($library_path . '/jquery.beforeafter.js');
      drupal_add_js(drupal_get_path('module', 'beforeafter') . '/js/beforeafter.js');
    }
    $js_added = TRUE;
  }
  // Fetch the global beforeafter formatting settings.
  $module_settings = array(
    'image_path' => variable_get('beforeafter_image_path', '/' . $library_path),
    'animate_intro' => variable_get('beforeafter_animate_intro', TRUE),
    'intro_delay' => variable_get('beforeafter_intro_delay', 2000),
    'intro_duration' => variable_get('beforeafter_intro_duration', 500),
    'before_link_text' => variable_get('beforeafter_before_link_text', t('Show only before')),
    'after_link_text' => variable_get('beforeafter_after_link_text', t('Show only after')),
    'cursor' => variable_get('beforeafter_cursor', 'pointer'),
    'link_display_speed' => variable_get('beforeafter_link_display_speed', 200),
    'click_speed' => variable_get('beforeafter_click_speed', 600),
  );
  // Add those to the field's settings.
  $settings = $display['settings'] + $module_settings;
  $container = 'beforeafter_' . $field['field_name'];
  $elements = array();
  $count = -1;

  $js_settings = array();
  // Loop through the items.
  foreach ($items as $key => $item) {
    // Images should be wrapped in pairs.
    if ($key % 2 == 0) {
      $count++;
      $elements[$count] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('beforeafter'), 'id' => $container . '-' . $count),
      );
      // Only add this to my js_settings array if there is still a next image.
      // If the images are uneven I don't want to add the beforeafter effect.
      if (isset($items[$key + 1])) {
        $js_settings['beforeafter'][$field['field_name']][$count] = $settings;
        $js_settings['beforeafter'][$field['field_name']][$count]['container'] = $container . '-' . $count;
      }
    }
    $elements[$count][] = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['image_style'],
      '#path' => '',
    );
  }
  // Add the settings array.
  // This includes all ids of the containers that need the beforeafter effect.
  drupal_add_js($js_settings, 'setting');
  return $elements;
}
