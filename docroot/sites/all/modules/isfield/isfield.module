<?php
/**
 * @file
 * isfield primary module file.
 */

/**
 * Implements hook_menu().
 */
function isfield_menu() {
  $items['admin/config/media/isfield'] = array(
    'title' => 'ISfield predefined dimensions',
    'description' => 'Configure predefined dimensions that can be used for embedded video or thumbnail.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isfield_predefined_dimensions'),
    'access arguments' => array('administer image styles'),
    'file' => 'isfield.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_field_formatter_info().
 */
function isfield_field_formatter_info() {
  return array(
    'isfield_video' => array(
      'label' => t('ISfield embedded video'),
      'field types' => array('text', 'link_field'),
      'settings' => array('dimensions' => '480x360'),
    ),
    'isfield_thumbnail' => array(
      'label' => t('ISfield thumbnail'),
      'field types' => array('text', 'link_field'),
      'settings' => array('dimensions' => '120x80', 'style' => ''),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function isfield_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'isfield_video') {
    $dimensions = variable_get('isfield_video_dimensions', "420x315\n480x360\n640x480\n960x720");
  }
  else {
    $dimensions = variable_get('isfield_thumbnail_dimensions', "140x105\n120x90");
  }
  $dimensions = explode("\n", str_replace("\r", '', $dimensions));
  foreach ($dimensions as $key => $value) {
    if (!preg_match('/^\d+x\d+$/', $value)) {
      unset($dimensions[$key]);
    }
  }

  $element['dimensions'] = array(
    '#title' => t('Dimensions'),
    '#type' => 'select',
    '#default_value' => $settings['dimensions'],
    '#options' => array_combine($dimensions, $dimensions),
    '#description' => t('The above list of predefined dimensions could be modified in the <a href="@url">settings page</a>.', array('@url' => url('admin/config/media/isfield'))),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function isfield_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $summary[] = t('Dimensions: @dimensions', array('@dimensions' => $settings['dimensions']));

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function isfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('isfield_formatter_' . $display['type'], array('element' => $item, 'display' => $display)),
    );
  }
  return $elements;
}

/**
 * Implements hook_theme().
 */
function isfield_theme() {
  return array(
    'isfield_formatter_isfield_video' => array(
      'variables' => array('element' => NULL, 'display' => NULL),
    ),
    'isfield_formatter_isfield_thumbnail' => array(
      'variables' => array('element' => NULL, 'display' => NULL),
    ),
  );
}

/**
 * Theme function for 'isfield_video' field formatter.
 */
function theme_isfield_formatter_isfield_video($variables) {
  if (!$w = isfield_get_media_wrapper($variables['element'])) {
    return '';
  }

  $options = array();
  $dimensions = $variables['display']['settings']['dimensions'];
  if ($dimensions) {
    list($options['width'], $options['height']) = explode('x', $dimensions);
  }
  return $w->player($options);
}

/**
 * Theme function for 'isfield_thumbnail' field formatter.
 */
function theme_isfield_formatter_isfield_thumbnail($variables) {
  if (!$w = isfield_get_media_wrapper($variables['element'])) {
    return '';
  }

  $options = array();
  $dimensions = $variables['display']['settings']['dimensions'];
  if ($dimensions) {
    list($options['width'], $options['height']) = explode('x', $dimensions);
  }
  return theme('image', array('path' => $w->thumbnail(), 'width' => $options['width'], 'height' => $options['height']));
}

/**
 * Helper function to get MediaWrapper object from an element.
 */
function isfield_get_media_wrapper($element) {
  // This element can be a text field or a link field. Get the field text.
  if (isset($element['display_url'])) {
    $text = $element['display_url'];
  }
  else {
    $text = $element['value'];
  }

  require_once DRUPAL_ROOT . '/sites/all/libraries/MediaWrapper/MediaWrapper/MediaWrapper.php';
  return  MediaWrapper::getInstance()->getWrapper($text);
}

