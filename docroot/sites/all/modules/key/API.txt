This document explains how to provide integration with Key in a module. 
This is useful if you would like to add a new key provider or display a 
list of available keys in a module's administrative interface.

Examples of how to define a key provider can be seen in the files that 
define the default providers (plugins/key_provider/configuration.inc 
and plugins/key_provider/file.inc).

==================
1 - Defining a new key provider
==================

Key providers are CTools plugins, so they are defined using the standard 
CTools method.

Add the following hook implementation to your module's .module file 
(replacing MODULENAME with the name of your module):

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tell CTools where to find plugins for this module.
 */
function MODULENAME_ctools_plugin_directory($module, $plugin) {
  if ($module == 'key' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

Create an include file in plugins/key_provider within your module's 
directory structure. Name the file in a way that's descriptive of the key 
provider. See the default providers for examples.

Within the key provider plugin file, create an array named $plugin that 
defines whatever functionality of the plugin type that you require. The 
following keys can be assigned values:

- title - The title of the provider (REQUIRED)
- description - A short description of the how the key will be
  retrieved and/or stored
- key get value - The function that retrieves a key value and returns it
- config form validate - A validate function fot the key configuration form
- config form submit - A submit function for the key configuration form
- delete form submit - A submit function for the delete confirmation form
- dependency callback - A function that checks for provider dependencies
  and returns errors if they are not met; dependency errors are then stored
  in 'dependency errors'
- provider settings form' - A form definition function for settings specific
  to the provider
- key value form - A form definition function for submitting key value, if
  it should be able to be submitted on the key configuration page
- key value obscure - A function that obscures the key value, if it is
  displayed on the key configuration page

Again, the default key providers offer a good starting point for defining 
a provider.

==================
2 - Displaying a list of available keys in an administrative form
==================

Key defines a custom Form API element that works like a standard select 
field, except its options are defined as the list of available keys. The 
easiest way to include a key field is just to set the field's '#type' to 
'key'. For example:

$form['secret_key'] = array(
  '#type' => 'key',
  '#title' => t('Secret key'),
);

By default, the description is updated to include information about 
selecting a key, but that description can be suppressed by setting 
#key_description to FALSE. The list of available keys can be filtered by 
passing an array in the #filters property. Currently, the only option for 
filtering is on the key provider. Example:

$form['secret_key'] = array(
  '#type' => 'key',
  '#title' => t('Secret key'),
  '#key_description' => FALSE,
  '#filters' = array(
    'provider' => 'file',
  ),
);

The above code will suppress the key description and only show keys that 
use the file key provider.

If you would prefer not to use the key Form API element, a standard select 
element can be used instead, but it's up to you to define the keys as 
options. Example:

$form['secret_key'] = array(
  '#type' => 'select',
  '#title' => t('Secret key'),
  '#options' => key_get_configs_as_options(),
);

==================
3 - Retrieving a key value and using it
==================

A key value is retrieved using the configuration name:

$key_value = key_get_key('secret_key');
