<?php

/**
 * @file timetable.module
 * Create timetables holding session entities. Intended for making a schedules
 * for an event.
 *
 *
 */

/**
 * Implements hook_menu().
 */
function timetable_menu() {
  // Monster form for editing session timeslots for a whole schedule.
  $items['admin/structure/timetable/%/%/%'] = array(
    'title' => 'Schedule timeslots',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('timetable_scheduling_form', 3, 4, 5),
    'access arguments' => array('edit schedule timetable'),
    'file' => 'timetable.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_field_formatter_info().
 *
 * Define formatters for entityreference fields that point to timeslots.
 */
function timetable_field_formatter_info() {
  return array(
    'timetable_form_link' => array(
      'label' => t('Link on schedule to timetable form'),
      'field types' => array('entityreference'),
    ),
    'schedule_link' => array(
      'label' => t("Link on timeslot to schedule"),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function timetable_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'timetable_form_link':
      // This doesn't display the timeslots, just a link to the form to build
      // the schedule. Timeslots should be output using EVA to show a view.
      list($id,) = entity_extract_ids($entity_type, $entity);
      $element[0] = array(
        '#markup' => l(t('Manage timetable'), 'admin/structure/timetable/' . $field['field_name'] . '/' . $entity_type . '/' . $id),
      );
      $element['#access'] = user_access('edit schedule timetable');
      break;
    case 'schedule_link':
      // Get the timetable set info, which contains details about which entity
      // type and bundle are schedules, and the relevant field on them.
      $timetable_set = timetable_get_timetable_set($field);
      $schedule_entity_type = $timetable_set['schedule']['entity_type'];

      // This should be a single-valued field, but we can handle it in a way
      // that doesn't break multiple values.
      // Load the timeslot(s).
      $timeslot_ids = array();
      foreach ($items as $delta => $item) {
        $timeslot_ids[$delta] = $item['target_id'];
      }
      $timeslots = entity_load('timeslot', $timeslot_ids);

      foreach ($items as $delta => $item) {
        $timeslot = $timeslots[$timeslot_ids[$delta]];

        // Find the schedule entity that points to this timeslot, so that we
        // can show its label alongside the timeslot times and link to it.
        $query = new EntityFieldQuery();
        $query
          ->entityCondition('entity_type', $schedule_entity_type)
          ->entityCondition('bundle', $timetable_set['schedule']['bundle_name'])
          ->fieldCondition($timetable_set['schedule']['field_name'], 'target_id', $timeslot->id);

        $results = $query->execute();

        // Sanity check: every timeslot should be referenced by one and only
        // one schedule.
        if (count($results[$schedule_entity_type]) != 1) {
          throw new Exception(t("Improperly formed timeslot (id !id) is not referenced by exactly one schedule.", array(
            '!id' => $timeslot->id,
          )));
        }

        $schedule_entity_ids = array_keys($results[$schedule_entity_type]);
        $schedule_entity = entity_load_single($schedule_entity_type, array_pop($schedule_entity_ids));
        $schedule_entity_uri = entity_uri($schedule_entity_type, $schedule_entity);

        // Create our output.
        $element[$delta] = array(
          '#markup' => l(t('@schedule-label @timeslot-start-@timeslot-end', array(
            '@schedule-label' => entity_label($schedule_entity_type, $schedule_entity),
            '@timeslot-start' => $timeslot->field_timeslot_time['und'][0]['value_formatted'],
            '@timeslot-end'   => $timeslot->field_timeslot_time['und'][0]['value2_formatted'],
          )), $schedule_entity_uri['path']),
        );
      }
  }

  return $element;
}

/**
 * Implements hook_permission().
 */
function timetable_permission() {
  return array(
    'edit schedule timetable' =>  array(
      'title' => t('Edit schedule timetables'),
      'description' => t('Edit the complete timetable for a schedule. Note that users with access to edit sessions may change their timetabling too.'),
    ),
  );
}

/**
 * Implements hook_eck_entity_ENTITYTYPE_label(): timeslot entity type.
 *
 * The label for a timeslot shows the time period it spans.
 *
 * This is shown in places such as the ECK admin UI, and the schedules' entity
 * display.
 */
function timetable_eck_entity_timeslot_label($entity, $entity_id) {
  $time_start = $entity->field_timeslot_time['und'][0]['value_formatted'];
  $time_end   = $entity->field_timeslot_time['und'][0]['value2_formatted'];

  $label = "$time_start - $time_end";

  return $label;
}

/**
 * Implements hook_entity_property_info().
 *
 * Add a metadata property for the times. We need this for output in the
 * inline entity form widget's table.
 */
function timetable_entity_property_info_alter(&$info) {
  $properties = &$info['timeslot']['properties'];

  $properties['time'] = array(
    'label' => t("Time"),
    'description' => t("The time for the timeslot. Same as the label."),
    'type' => 'text',
    'getter callback' => 'timetable_entity_property_timeslot_time',
  );
}

/**
 * Implements callback_entity_property_getter()
 *
 * Getter callback for the timeslot 'time' property. This is just an alias of
 * the label, but Inline Entity Form needs this because the label is given by a
 * callback rather than the entity property.
 */
function timetable_entity_property_timeslot_time($data, array $options, $name, $type, $info) {
  // Just return the label from the entity.
  return $data->label();
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 *
 * Add a column to timeslots shown in an inline entity form, so there is a way
 * to identify them other than the ID.
 */
function timetable_inline_entity_form_table_fields_alter(&$fields, $context) {
  // We don't have a label entity key, so set up the label entity property
  // instead.
  if ($context['entity_type'] == 'timeslot') {
    $fields['time'] = array(
      'type' => 'property',
      'label' => t('Time'),
      'weight' => 10,
    );
  }

  return;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function timetable_ctools_plugin_directory($owner, $plugin) {
  if ($owner == 'entityreference') {
    return "plugins/entityreference/$plugin";
  }
  else {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 */
function timetable_theme($existing, $type, $theme, $path) {
  return array(
    'timetable_scheduling_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Get the fields and entity types that make up a timetable set.
 *
 * The timetable system is built with a trio of entity types, connected with
 * two entityreference fields, like this:
 *   schedule --> timeslot <-- session
 * To avoid having centralized storage (that then we'd need make exportable,
 * yada yada), this connection is stored in the two entityreference fields:
 * each one is marked as being part of a timetable set by having the appropriate
 * timetable entityreference behaviour set in its configuration. What binds
 * these all together is the fact that they point to the same bundle of timeslot
 * entity. (And therefore to have more than one trio of entities forming a
 * timetable set, you need to add another bundle of the timeslot entity.)

 * @param $field
 *  The field definition for an entityreference field that is participating in a
 *  timetable set.
 *
 * @return
 *  The timetable set definition for the timetable set that includes this field
 *  This is an array containing:
 *  - 'schedule': An array of data about the schedule entity type and field,
 *    containing:
 *    - 'field_name': The name of the field on schedules that points to
 *      timeslots.
 *    - 'entity_type': The entity type that is used for schedules.
 *    - 'bundle_name': The bundle that is used for schedules.
 *  - 'session': An array of data about the schedule entity type(s) and field,
 *    containing:
 *    - 'field_name': The name of the field on sessions that points to
 *      timeslots.
 *    - 'bundles': An array detailing the entity types and bundles on which
 *      this field has instances. This is in the same format as the 'bundles'
 *      array in the return value of field_info_field_map(): keyed first by
 *      entity type, and then an array of bundle names.
 *  - 'room': (optional) If this timetable set uses rooms, an array containing:
 *    - 'field_name': The name of the field on sessions that points to
 *      rooms.
 *    - 'bundles': An array detailing the entity types and bundles which are
 *      rooms. This is in the same format as the 'bundles' array in the return
 *      value of field_info_field_map(): keyed first by entity type, and then an
 *      array of bundle names.
 *
 * @throws Exception
 *  Throws an exception if the given field is not correctly configured.
 */
function timetable_get_timetable_set($field) {
  // Everything hinges on the timeslot bundle: this is what binds a set of
  // entity types and bundles together into a timetable.
  $timeslot_bundle = array_pop($field['settings']['handler_settings']['target_bundles']);

  $cache_id = 'timetable_set';
  if ($cache = cache_get($cache_id)) {
    $timetable_set_data = $cache->data;
  }
  else {
    module_load_include('inc', 'timetable', 'timetable.cache');

    $timetable_set_data = _timetable_get_all_timetable_sets();

    // Cache the complete timetable set data.
    cache_set($cache_id, $timetable_set_data);
  }

  return $timetable_set_data[$timeslot_bundle];
}

/**
 * TODO: complete this when https://drupal.org/node/2221945 is fixed and
 * released.
 */
function timetable_entityreference_field_settings_form_element_validate($element, &$form_state, $form) {
  // Enforce only one bundle of timeslot.
  // We do this rather than change the widget to a radio so that we use the same
  // structure in our settings as fields with the normal behaviour.
  $field_name = $form_state['build_info']['args'][0]['field_name'];
  if (count($form_state['field'][$field_name][LANGUAGE_NONE]['field']['settings']['handler_settings']['target_bundles']) > 1) {
    form_error($element, t('This field is required.'));
  }
  // form set error on:
  // ['field']['settings']['handler']['handler_settings']['target_bundles']
}
