<?php

/**
 * @file
 */

class ecStoreTestZeroChargeTransacton extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => t('Check Zero Charge'),
      'description' => t('Check when a zero charge transaction is made allocation is set correctly'),
      'group' => t('e-Commerce'),
    );
  }

  function setUp() {
    parent::setUp('ec_product', 'ec_anon', 'ec_checkout', 'ec_buynow', 'ec_receipt', 'ec_store', 'ec_common', 'ec_receipt_test_payment', 'ec_customer', 'ec_address', 'search', 'ctools', 'rules', 'views');
    variable_set('ec_default_currency', 'USD');
    variable_set('rules_debug', 1);
  }

  function testZeroChargePurchase() {
    $account = $this->drupalCreateUser(array('create product content', 'create generic product', ));
    $this->drupalLogin($account);

    $this->drupalGet('node/add/product/generic');

    $product = array(
      'title' => $this->randomName(32),
      'price' => '0',
    );

    $this->drupalPost(NULL, $product, t('Save'));

    $this->clickLink(t('Apply now'));

    $params = array();
    foreach (array(
      'firstname' => $this->randomName(20),
      'lastname' => $this->randomName(20),
      'street1' => $this->randomName(52),
      'street2' => $this->randomName(52),
      'zip' => drupal_substr($this->randomName(10), -10),
      'city' => $this->randomName(20),
      'state' => 'CA',
      'country' => 'US',
    ) as $key => $value) {
      $params['address[billing][' . $key . ']'] = $value;
    }
    $this->drupalPost(NULL, $params, t('Place your order'));

    if ($txn = ec_store_transaction_load(1)) {
      $this->assertEqual($txn->allocation, '2', t('Check that allocation is set to complete'));
      $this->assertEqual($txn->workflow, '6', t('Check that workflow is set to complete'));
    }
    else {
      $this->fail('No transaction created');
    }
  }
}

class ecStoreTestGenericTransacton extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => t('Check Generic Transaction'),
      'description' => t('Check that when a general product is purchased the transaction will be complete'),
      'group' => t('e-Commerce'),
    );
  }

  function setUp() {
    parent::setUp('ec_product', 'ec_anon', 'ec_checkout', 'ec_buynow', 'ec_receipt', 'ec_store', 'ec_common', 'ec_receipt_test_payment', 'ec_customer', 'ec_address', 'search', 'ctools', 'rules', 'views');
    variable_set('ec_default_currency', 'USD');
    variable_set('rules_debug', 1);
  }

  function testGenericPurchase() {
    $account = $this->drupalCreateUser();
    $this->drupalLogin($account);

    $product = array(
      'type' => 'product',
      'ptype' => 'generic',
      'price' => '20.00',
      'revision' => 1,
    );

    $node = $this->drupalCreateNode($product);
    $this->drupalGet('node/' . $node->nid);
    $this->clickLink(t('Buy now'));

    $params = array();
    foreach (array(
      'firstname' => $this->randomName(20),
      'lastname' => $this->randomName(20),
      'street1' => $this->randomName(52),
      'street2' => $this->randomName(52),
      'zip' => drupal_substr($this->randomName(10), -10),
      'city' => $this->randomName(20),
      'state' => 'CA',
      'country' => 'US',
    ) as $key => $value) {
      $params['address[billing][' . $key . ']'] = $value;
    }
    $this->drupalPost(NULL, $params, t('Place your order'));

    if ($txn = ec_store_transaction_load(1)) {
      $this->assertEqual($txn->allocation, '2', t('Check that allocation is set to complete'));
      $this->assertEqual($txn->workflow, '6', t('Check that workflow is set to complete'));
    }
    else {
      $this->fail('No transaction created');
    }
  }
}
