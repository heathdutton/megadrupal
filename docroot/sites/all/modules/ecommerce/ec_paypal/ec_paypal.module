<?php

/**
 * @file
 * Ebay Paypal payment gateway (paypal.com).
 */

/**
 * Implements hook_menu().
 */
function ec_paypal_menu() {
  $items = array();

  $items['paypal/ipn'] = array(
    'title' => 'Paypal IPN',
    'page callback' => 'ec_paypal_ipn',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['paypal/return'] = array(
    'title' => 'Paypal Return',
    'page callback' => 'ec_paypal_return',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['paypal/cancel'] = array(
    'title' => 'Paypal Cancel',
    'page callback' => 'ec_paypal_cancel',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/store/rtypes/paypal_basic/settings'] = array(
    'title' => 'Paypal Basic Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ec_paypal_settings', 4),
    'access arguments' => array('administer receipt settings'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/store/rtypes/paypal_express/settings'] = array(
    'title' => 'Paypal Express Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ec_paypal_settings', 4),
    'access arguments' => array('administer receipt settings'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/store/rtypes/paypal_pro/settings'] = array(
    'title' => 'Paypal Pro Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ec_paypal_settings', 4),
    'access arguments' => array('administer receipt settings'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ec_paypal_theme_registry_alter(&$theme_registry) {
  $theme_registry['ec_receipt_checkout_types']['theme paths'][] = drupal_get_path('module', 'ec_paypal') . '/templates';
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ec_paypal_preprocess_ec_receipt_checkout_types(&$variables) {
  if (isset($variables['rtype']) && $variables['rtype'] && drupal_substr($variables['rtype']->type, 0, 6) == 'paypal') {
    $variables['template_files'][] = 'ec_receipt_checkout_types_paypal';
  }
}

/**
 * Implements hook_form_alter().
 */
function ec_paypal_form_ec_cart_view_form_alter(&$form, &$form_state) {
  if (($rtype = ec_receipt_get_types('type', 'paypal_express')) && !empty($rtype->allow_payments)) {
    $form['pp_express_icon'] = array(
      '#markup' => l('<img src="' . base_path() . drupal_get_path('module', 'ec_paypal') . '/images/btn_xpressCheckout.gif" class="paypal-logo">', 'cart/checkout', array('query' => 'payment_method=paypal_express', 'html' => TRUE)),
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'paypal') . '/paypal.css',
        ),
      ),
    );
  }
}

/**
 * PayPal settings form
 */
function ec_paypal_settings($form, &$form_state) {
  $form['live'] = array(
    '#type' => 'fieldset',
    '#title' => t('Live settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['live']['ec_paypal_receiver_email'] =  array(
    '#type' => 'textfield',
    '#title' => t('PayPal Receiver Email'),
    '#default_value' => variable_get('ec_paypal_receiver_email', variable_get('site_mail', ini_get('sendmail_from'))),
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('Primary email address of the payment recipent. This is also your main paypal email address.'),
  );

  $form['live']['ec_paypal_url'] =  array(
    '#type' => 'textfield',
    '#title' => t('PayPal processing URL'),
    '#default_value' => variable_get('ec_paypal_url', 'https://www.paypal.com/cgi-bin/webscr'),
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('URL of the secure payment page customers are sent to for payment processing.'),
  );

  $form['live']['ec_paypal_pdt_token'] = array(
    '#type' => 'textfield',
    '#title' => t('PDT Token'),
    '#default_value' => variable_get('ec_paypal_pdt_token', ''),
  );

  $form['live']['ec_paypal_ipnrb_url'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal IPN "request back" validation URL'),
    '#default_value' => variable_get('ec_paypal_ipnrb_url', 'https://www.paypal.com/cgi-bin/webscr'),
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('URL where IPN "request back" is posted to validate the transaction.'),
  );

  $form['live']['ec_paypal_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal API Signature Server Url'),
    '#default_value' => variable_get('ec_paypal_api_url', 'https://api-3t.paypal.com/nvp'),
    '#description' => t('URL that us used for the api to comunicate with PayPal'),
  );

  $form['live']['ec_paypal_api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('API Username'),
    '#default_value' => variable_get('ec_paypal_api_username', ''),
  );

  $form['live']['ec_paypal_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('API Password'),
    '#default_value' => variable_get('ec_paypal_api_password', ''),
  );

  $form['live']['ec_paypal_api_signature'] = array(
    '#type' => 'textfield',
    '#title' => t('Signature'),
    '#default_value' => variable_get('ec_paypal_api_signature', ''),
  );

  $form['live']['ec_paypal_custom_page_style'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom payment style'),
    '#default_value' => variable_get('ec_paypal_custom_page_style', ''),
    '#maxlength' => 30,
    '#description' => t('Use a Custom Payment Style other than default which has been configured in your PayPal profile.'),
    '#validate' => array('ec_paypal_validate_custom_payment_page' => array()),
  );

  $form['sandbox'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sandbox settings'),
    '#collapsible' => TRUE,
    '#collapsed' => variable_get('ec_paypal_sandbox_enabled', FALSE) ? FALSE : TRUE,
  );

  $form['sandbox']['ec_paypal_sandbox_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable PayPal sandbox for testing'),
    '#default_value' => variable_get('ec_paypal_sandbox_enabled', FALSE),
  );

  $form['sandbox']['ec_paypal_sandbox_receiver_email'] =  array(
    '#type' => 'textfield',
    '#title' => t('PayPal Receiver Email'),
    '#default_value' => variable_get('ec_paypal_sandbox_receiver_email', variable_get('site_mail', ini_get('sendmail_from'))),
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('Primary email address of the payment recipent. This is also your main paypal email address.'),
  );

  $form['sandbox']['ec_paypal_sandbox_url'] =  array(
    '#type' => 'textfield',
    '#title' => t('PayPal processing URL'),
    '#default_value' => variable_get('ec_paypal_sandbox_url', 'https://www.sandbox.paypal.com/cgi-bin/webscr'),
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('URL of the secure payment page customers are sent to for payment processing.'),
  );

  $form['sandbox']['ec_paypal_sandbox_pdt_token'] = array(
    '#type' => 'textfield',
    '#title' => t('PDT Token'),
    '#default_value' => variable_get('ec_paypal_sandbox_pdt_token', ''),
    '#description' => t('PayPal token to enable the processing of PDT requests'),
  );

  $form['sandbox']['ec_paypal_sandbox_ipnrb_url'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal "request back" validation URL'),
    '#default_value' => variable_get('ec_paypal_sandbox_ipnrb_url', 'https://www.sandbox.paypal.com/cgi-bin/webscr'),
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('URL where IPN "request back" is posted to validate the transaction.'),
  );

  $form['sandbox']['ec_paypal_sandbox_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal API Signature Server Url'),
    '#default_value' => variable_get('ec_paypal_sandbox_api_url', 'https://api-3t.sandbox.paypal.com/nvp'),
  );

  $form['sandbox']['ec_paypal_sandbox_api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('API Username'),
    '#default_value' => variable_get('ec_paypal_sandbox_api_username', ''),
  );

  $form['sandbox']['ec_paypal_sandbox_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('API Password'),
    '#default_value' => variable_get('ec_paypal_sandbox_api_password', ''),
  );

  $form['sandbox']['ec_paypal_sandbox_api_signature'] = array(
    '#type' => 'textfield',
    '#title' => t('Signature'),
    '#default_value' => variable_get('ec_paypal_sandbox_api_signature', ''),
  );

  $form['sandbox']['ec_paypal_sandbox_custom_page_style'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom payment style'),
    '#default_value' => variable_get('ec_paypal_sandbox_custom_page_style', ''),
    '#maxlength' => 30,
    '#description' => t('Use a Custom Payment Style other than default which has been configured in your PayPal profile.'),
    '#validate' => array('ec_paypal_validate_custom_payment_page' => array()),
  );

  $form['ec_paypal_ipn_url'] = array(
    '#type' => 'item',
    '#title' => t('Instant Payment Notification (IPN) URL'),
    '#value' => url('paypal/return', array('absolute' => TRUE)),
    '#description' => t('This is the URL that needs to be set in your PayPal
    Profile so that notifications of payments can be processed'),
  );

  /*
   $form['ec_paypal_debug'] =  array(
   '#type' => 'radios',
   '#title' => t('Debug Instant Payment Notification (IPN)'),
   '#default_value' => variable_get('ec_paypal_debug', 0),
   '#options' => array(t('Disabled'), t('Enabled')),
   '#description' => t('If enabled, you\'ll receive an email whenever IPN is activated on your site.')
   );

   $form['ec_paypal_min_amount'] =  array(
   '#type' => 'textfield',
   '#title' => t('Minimum purchase amount'),
   '#default_value' => variable_get('ec_paypal_min_amount', '5.00'),
   '#size' => 10,
   '#maxlength' => 10,
   '#description' => t('What is the minimum amount an user must purchase for when checking out with Paypal?')
   );
   */

  return system_settings_form($form);
}

/**
 * Implements hook_receipt_info().
 */
function ec_paypal_receipt_info() {
  $currency = array('USD', 'EUR', 'AUD', 'CAD', 'GBP', 'JPY', 'NZD', 'CHF', 'HKD', 'SGD', 'SEK', 'DKK', 'PLN', 'NOK', 'HUF', 'CZK');

  $rtypes = array(
    'paypal_basic' => array(
      'name' => t('PayPal'),
      'description' => t('Save time. Check out securely. Pay without sharing your financial information.'),
      'icon' => array(
        'src' => drupal_get_path('module', 'ec_paypal') . '/images/PayPal_mark_50x34.gif',
        'attributes' => array(
          'title' => t('Acceptance Mark'),
          'class' => array('paypal-logo'),
        ),
      ),
      'module' => array('ec_paypal_basic', 'ec_paypal_api', 'ec_paypal'),
      'currencies_supported' => $currency,
      'gateway_requirements' => array(
        t('Display the options for payment methods before you ask the customer for billing address information'),
        t('Display the text "Save time. Checkout securely. Pay without sharing your financial information." next to the acceptance mark.'),
      ),
      'attached' => array(
        'css' => array(
          drupal_get_path('module', 'ec_paypal') . '/css/paypal.css',
        ),
      ),
    ),
    'paypal_express' => array(
      'name' => t('PayPal Express'),
      'description' => t('Save time. Check out securely. Pay without sharing your financial information.'),
      'icon' => array(
        'src' => drupal_get_path('module', 'ec_paypal') . '/images/PayPal_mark_50x34.gif',
        'attributes' => array(
          'title' => t('Acceptance Mark'),
          'class' => array('paypal-logo'),
        ),
      ),
      'module' => array('ec_paypal_express', 'ec_paypal_api', 'ec_paypal'),
      'currencies_supported' => $currency,
      'gateway_requirements' => array(
        t('Display the options for payment methods before you ask the customer for billing address information'),
        t('Display the text "Save time. Checkout securely. Pay without sharing your financial information." next to the acceptance mark.'),
      ),
      'weight' => 1,
      'attached' => array(
        'css' => array(
          drupal_get_path('module', 'ec_paypal') . '/css/paypal.css',
        ),
      ),
    ),
    'paypal_pro' => array(
      'name' => t('PayPal Pro'),
      'description' => t('Save time. Check out securely. Pay without sharing your financial information.'),
      'icon' => array(
        'src' => drupal_get_path('module', 'ec_paypal') . '/images/PayPal_mark_50x34.gif',
        'attributes' => array(
          'title' => t('Acceptance Mark'),
          'class' => array('paypal-logo'),
        ),
      ),
      'module' => array('ec_paypal_pro', 'ec_paypal_api', 'ec_paypal'),
      'currencies_supported' => $currency,
      'gateway_requirements' => array(
        t('Display the options for payment methods before you ask the customer for billing address information'),
        t('Display the text "Save time. Checkout securely. Pay without sharing your financial information." next to the acceptance mark.'),
      ),
      'attached' => array(
        'css' => array(
          drupal_get_path('module', 'ec_paypal') . '/css/paypal.css',
        ),
      ),
    ),
  );
  if (ec_paypal_variable_get('ec_paypal_receiver_email', FALSE)) {
    $rtypes['paypal_basic']['allow_payments'] = TRUE;
    $rtypes['paypal_basic']['allow_recurring'] = FALSE;
  }
  else {
    array_unshift($rtypes['paypal_basic']['gateway_requirements'], t('Before PayPal can you be used, the Settings need to be loaded into the system. See the !settings page for configure PayPal', array('!settings' => l(t('settings'), 'admin/config/store/rtypes/paypal_basic/settings', array('query' => drupal_get_destination())))));
  }
  if (ec_paypal_variable_get('ec_paypal_api_username', FALSE)) {
    $rtypes['paypal_basic']['allow_refunds'] = FALSE;

    $rtypes['paypal_express']['allow_payments'] = FALSE;
    $rtypes['paypal_express']['allow_refunds'] = FALSE;
    $rtypes['paypal_express']['allow_recurring'] = FALSE;


    $rtypes['paypal_pro']['allow_refunds'] = FALSE;
    $rtypes['paypal_pro']['allow_admin_payments'] = FALSE;
  }
  else {
    array_unshift($rtypes['paypal_express']['gateway_requirements'], t('Before PayPal Express can you be used, the Settings need to be loaded into the system. See the !settings page for configue PayPal', array('!settings' => l(t('settings'), 'admin/config/store/rtypes/paypal_express/settings', array('query' => drupal_get_destination())))));
  }
  if (ec_paypal_variable_get('ec_paypal_api_username', FALSE) && db_query("SELECT allow_payments FROM {ec_receipt_types} WHERE type = :type", array(':type' => 'paypal_express'))->fetchField()) {
    $rtypes['paypal_pro']['allow_payments'] = FALSE;
  }
  else {
    array_unshift($rtypes['paypal_pro']['gateway_requirements'], t('Before PayPal Pro can you be used, the Settings need to be loaded into the system. See the !settings page for configue PayPal. Also to meet the terms and conditions of PayPal Pro, PayPal Express must be enabled. This can be done on the PayPal Express !express_settings page', array('!settings' => l(t('settings'), 'admin/config/store/rtypes/paypal_pro/settings', array('query' => drupal_get_destination())), '!express_settings' => l(t('settings'), 'admin/config/store/rtypes/paypal_express/settings', array('query' => drupal_get_destination())))));
  }

  return $rtypes;
}

/**
 * Implements hook_receipt_init().
 */
function ec_paypal_express_receipt_init($type, &$object) {
  $payment_data = ec_receipt_alloc_invoke($type, 'get_payment_data', $object);

  if (isset($_GET['token'])) {
    $token = $_GET['token'];

    $params = array(
      'TOKEN' => $token,
    );

    $response = ec_paypal_api_comms('GetExpressCheckoutDetails', $params);

    if ($response['ACK'] == 'Success') {
      $payment_data = array(
        'token' => $response['TOKEN'],
        'payerid' => $response['PAYERID'],
      );
      ec_receipt_alloc_invoke($type, 'set_payment_data', $object, $payment_data);
      return $form;
    }
    else {
      form_set_error('', t('Issue starting PayPal Express'));
      ec_paypal_wd($response, 'ec_paypal_express', t('Issue starting PayPal Express', array('%erid' => $ids['erid'])), WATCHDOG_NOTICE);
      $keys = array_filter(array_keys($response), '_ec_paypal_filter_message');
      foreach ($keys as $key) {
        form_set_error($key, $response[$key]);
      }
    }
  }
  elseif (!isset($payment_data['paypal_express']['token'])) {
    $total = ec_receipt_alloc_invoke($type, 'get_total', $object);
    $params = array(
      'AMT' => number_format($total, 2),
      'RETURNURL' => url($_REQUEST['q'], array('query' => array('payment_method' => 'paypal_express'), 'absolute' => TRUE)),
      'CANCELURL' => url('paypal/return', array('absolute' => TRUE)),
      'CURRENCYCODE' => ec_receipt_alloc_invoke($type, 'get_currency', $object),
      'DESC' => variable_get('ec_paypal_cart_description', t('@site_name purchase', array('@site_name' => variable_get('site_name', t('Drupal'))))),
      'NOTIFYURL' => url('paypal/ipn', array('absolute' => TRUE)),
    );

    if ($items = ec_receipt_alloc_invoke($type, 'get_items', $object)) {
      $recurring = ec_receipt_alloc_invoke($type, 'get_recurring', $object);
      $item_cnt = 0;
      foreach ($items as $item) {
        $extra = array(
          'L_NUMBER' . $item_cnt => $item['id'],
          'L_NAME' . $item_cnt => $item['name'],
          'L_QTY' . $item_cnt => $item['qty'],
          'L_AMT' . $item_cnt => number_format($item['amount'], 2),
        );

        if (isset($recurring['id']) && $item['id'] == $recurring['id']) {
          $extra['L_BILLINGTYPE' . $item_cnt] = 'RecurringPayments';
          $extra['L_BILLINGAGREEMENTDESCRIPTION' . $item_cnt] = $recurring['description'];
        }

        $params += $extra;
        $item_cnt++;
      }
    }

    $response = ec_paypal_api_comms('SetExpressCheckout', $params);

    if ($response['ACK'] == 'Success') {
      drupal_goto(ec_paypal_variable_get('ec_paypal_url', 'https://www.paypal.com/cgi-bin/webscr'), 'cmd=_express-checkout&token=' . $response['TOKEN']);
    }
    else {
      $keys = array_filter(array_keys($response), '_ec_paypal_filter_message');
      foreach ($keys as $key) {
        form_set_error($key, $response[$key]);
      }
    }
  }
  return $form;
}

function _ec_paypal_filter_message($a) {
  return drupal_substr($a, 0, 13) == "L_LONGMESSAGE";
}

/**
 * Implements hook_receipt_payment_form().
 */
function ec_paypal_express_receipt_payment_form($type, $object) {
  $payment_data = ec_receipt_alloc_invoke($type, 'get_payment_data', $object);

  $form = array(
    '#type' => 'value',
    '#value' => $payment_data,
  );

  return $form;
}

/**
 * Implements hook_receipt_payment_form().
 */
function ec_paypal_pro_receipt_payment_form($type, $object) {
  $form = array(
    '#type' => 'credit_card',
    '#title' => t('Credit card details'),
    '#cardtype' => TRUE,
    '#cvnrequired' => TRUE,
  );
  return $form;
}

/**
 * Implements hook_receipt_process_payment().
 */
function ec_paypal_express_receipt_process_payment($receipt, $atype, $object) {
  $payment_data = ec_receipt_alloc_invoke($atype, 'get_payment_data', $object);
  $total = ec_receipt_alloc_invoke($atype, 'get_total', $object);

  $params = array(
    'TOKEN' => $payment_data['paypal_express']['token'],
    'PAYERID' => $payment_data['paypal_express']['payerid'],
    'PAYMENTACTION' => 'Sale',
    'AMT' => number_format($total, 2),
    'CURRENCYCODE' => ec_receipt_alloc_invoke($atype, 'get_currency', $object),
  );

  $response = ec_paypal_api_comms('DoExpressCheckoutPayment', $params);

  if ($response['ACK'] == 'Success') {
    $receipt->txn_id = $response['TRANSACTIONID'];
    $receipt->payer_email = md5($response['EMAIL']);
    $receipt->amount = $response['AMT'];
    $receipt->currency = $response['CURRENCYCODE'];
    if (($status = ec_paypal_get_status($response['PAYMENTSTATUS'])) !== NULL) {
      $receipt->status = $status;
    }
    if ($recurring = ec_receipt_alloc_invoke($atype, 'get_recurring', $object)) {
      $params = array(
        'TOKEN' => $payment_data['paypal_express']['token'],
        'PAYERID' => $payment_data['paypal_express']['payerid'],
        'CURRENCYCODE' => ec_receipt_alloc_invoke($atype, 'get_currency', $object),
        'PROFILESTARTDATE' => date('c', $recurring['start_date']),
        'DESC' => $recurring['description'],
        'BILLINGPERIOD' => _ec_paypal_get_billingperiod($recurring['unit']),
        'BILLINGFREQUENCY' => $recurring['period'],
        'AMT' => number_format($recurring['price'], 2),
      );

      if (isset($recurring['repeat'])) {
        $params['TOTALBILLINGCYCLES'] = $repeat['repeat'];
      }

      $response = ec_paypal_api_comms('CreateRecurringPaymentsProfile', $params);

      if ($response['ACK'] == 'Success') {
        $receipt->paypal_subscr_id = $response['PROFILEID'];
      }
      else {
        form_set_error('', t('Issue completing PayPal Express'));
        $keys = array_filter(array_keys($response), '_ec_paypal_filter_message');
        foreach ($keys as $key) {
          form_set_error($key, ' - ' . $response[$key]);
        }
      }
    }
    ec_receipt_save($receipt);
    return $receipt->erid;
  }
  else {
    form_set_error('', t('Issue completing PayPal Express'));
    $keys = array_filter(array_keys($response), '_ec_paypal_filter_message');
    foreach ($keys as $key) {
      form_set_error($key, ' - ' . $response[$key]);
    }
  }
}

function _ec_paypal_get_billingperiod($unit) {
  $periods = array(
    'D' => 'Day',
    'W' => 'Week',
    'M' => 'Month',
    'Y' => 'Year',
  );

  return isset($periods[$unit]) ? $periods[$unit] : '';
}

/**
 * Implements hook_receipt_process_payment().
 */
function ec_paypal_pro_receipt_process_payment($receipt, $atype, $object) {
  $payment_form = ec_receipt_alloc_invoke($atype, 'get_payment_data', $object);
  $total = ec_receipt_alloc_invoke($atype, 'get_total', $object);
  list($fname, $lname) = array_values(ec_common_split_name($payment_form['name']));
  $params = array(
    'PAYMENTACTION' => 'Sale',
    'CREDITCARDTYPE' => drupal_strtoupper($payment_form['cardtype']),
    'ACCT' => $payment_form['cardnumber'],
    'CVV2' => $payment_form['cvn'],
    'FIRSTNAME' => $fname,
    'LASTNAME' => $lname,
    'EXPDATE' => $payment_form['expiry']['expmonth'] . '20' . $payment_form['expiry']['expyear'],
    'AMT' => number_format($total, 2),
    'IPADDRESS' => ip_address(),
    'CURRENCYCODE' => ec_receipt_alloc_invoke($atype, 'get_currency', $object),
  );

  if ($address = ec_receipt_alloc_invoke($atype, 'get_address', $object, 'billing')) {
    $params['STREET'] = $address['street1'] . ' ' . $address['street2'];
    $params['CITY'] = $address['city'];
    $params['STATE'] = $address['state'];
    $params['ZIP'] = $address['zip'];
    $params['COUNTRYCODE'] = drupal_strtoupper($address['country']);
  }

  $response = ec_paypal_api_comms('DoDirectPayment', $params);

  if ($response['ACK'] == 'Success') {
    $params = array(
      'TRANSACTIONID' => $response['TRANSACTIONID'],
    );
    $details = ec_paypal_api_comms('GetTransactionDetails', $params);
    if ($details['ACK'] == 'Success') {
      $receipt->txn_id = $details['TRANSACTIONID'];
      $receipt->payer_email = md5($details['EMAIL']);
      $receipt->amount = $details['AMT'];
      if (($status = ec_paypal_get_status($details['PAYMENTSTATUS'])) !== NULL) {
        $receipt->status = $status;
      }
      ec_receipt_save($receipt);
    }
    return $receipt->erid;
  }
  else {
    $keys = array_filter(array_keys($response), create_function('$a', 'return drupal_substr($a, 0, 13) == "L_LONGMESSAGE";'));
    foreach ($keys as $key) {
      form_set_error($key, $response[$key]);
    }
  }
}

/**
 * Get Variables based on paypal_sandbox_enabled flag
 */
function ec_paypal_variable_get($variable, $default = NULL) {
  if (variable_get('ec_paypal_sandbox_enabled', FALSE)) {
    $variable = preg_replace('/^ec_paypal_/i', 'ec_paypal_sandbox_', $variable);
    $default = preg_replace('/\:www.paypal.com/i', ':www.sandbox.paypal.com', $default);
  }
  return variable_get($variable, $default);
}

/**
 * Implements hook_receipt_payment_url().
 * TODO: Implement shopping_url to allow people to continue shopping. This will
 * involve cancelling the receipt, transaction and putting the products back into the cart.
 */
function ec_paypal_basic_receipt_payment_url($receipt, $atype, $object) {
  $params = array(
    'cmd' => '_xclick',
    'business' => ec_paypal_variable_get('ec_paypal_receiver_email', variable_get('site_mail', ini_get('sendmail_from'))),
    'return' => url('paypal/return', array('absolute' => TRUE)),
    'rm' => 2,
    'cancel_return' => url('paypal/cancel', array('query' => array('receipt' => ''), 'absolute' => TRUE)),
    'notify_url' => url('paypal/ipn', array('absolute' => TRUE)),
    'currency_code' => $receipt->currency,
    'custom' => 'erid=' . $receipt->erid,
    'item_name' => variable_get('ec_paypal_cart_description', t('@site_name purchase', array('@site_name' => variable_get('site_name', t('Drupal'))))),
    'no_note' => 1,
  );

  if ($inv_no = ec_receipt_alloc_invoke($atype, 'get_invoice_no', $object)) {
    $params['cancel_return'] .= '&type=' . $atype . '&invoice=' . $inv_no;
    $params['custom'] .= '&type=' . $atype . '&invoice=' . $inv_no;
    $params['invoice'] = $inv_no; // Not using this for anything but it may be good for the customer.
  }
  if ($total = ec_receipt_alloc_invoke($atype, 'get_total', $object)) {
    $params['amount'] = number_format($total, 2);
  }
  if ($handling_cart = ec_receipt_alloc_invoke($atype, 'get_handling', $object)) {
    $params['handling_cart'] = number_format($handling_cart, 2);
  }
  if ($shipping = ec_receipt_alloc_invoke($atype, 'get_shipping', $object)) {
    $params['shipping'] = number_format($shipping, 2);
  }
  if ($tax = ec_receipt_alloc_invoke($atype, 'get_tax', $object)) {
    $params['tax'] = number_format($tax, 2);
  }

  if ($items = ec_receipt_alloc_invoke($atype, 'get_items', $object)) {
    $item_cnt = 1;
    $params['cmd'] = '_cart';
    $params['upload'] = 1;
    $params['paymentaction'] = 'sale';
    //unset($params['item_name']);
    foreach ($items as $item) {
      $extra = array(
        'item_number_' . $item_cnt => $item['id'],
        'item_name_' . $item_cnt => $item['name'],
        'quantity_' . $item_cnt => $item['qty'],
        'amount_' . $item_cnt => number_format($item['amount'], 2),
      );
      $params += $extra;
      $item_cnt++;
    }
  }
  if ($name = ec_receipt_alloc_invoke($atype, 'get_customer_names', $object)) {
    $params['first_name'] = $name['fname'];
    $params['last_name'] = $name['lname'];
  }
  if ($address = ec_receipt_alloc_invoke($atype, 'get_address', $object, 'billing')) {
    $params['address1'] = $address['street1'];
    $params['address2'] = $address['street2'];
    $params['city'] = $address['city'];
    $params['state'] = $address['state'];
    $params['zip'] = $address['zip'];
    $params['country'] = drupal_strtoupper($address['country']);
    $params['address_override'] = 1;
  }
  if ($custom = ec_paypal_variable_get('ec_paypal_custom_page_style', '')) {
    $params['page_style'] = $custom;
  }

  if ($recurring = ec_receipt_alloc_invoke($atype, 'get_recurring', $object)) {
    $params['cmd'] = '_xclick-subscriptions';

    // Add the charges for the current invoice.
    $params['a1'] = $params['amount'];
    $params['p1'] = 1;
    $params['t1'] = $recurring['unit'];

    // Add the charges for the subsequent payments.
    $params['a3'] = number_format($recurring['price'], 2);
    $params['p3'] = $recurring['period'];
    $params['t3'] = $recurring['unit'];
    $params['src'] = 1;

    if (isset($recurring['repeat']) && $recurring['repeat']) {
      $params['srt'] = $recurring['repeat'];
    }
  }

  return array(ec_paypal_variable_get('ec_paypal_url', 'https://www.paypal.com/cgi-bin/webscr'), array('query' => $params));
}

/**
 * PayPal Instant Payment Notification Message
 *
 * TODO: Should I use paypal api to do the checking if it is available?
 */
function ec_paypal_ipn() {
  $headers = array(
    'Content-Type' => 'application/x-www-form-urlencoded',
  );
  $ipn = $_POST;
  $post = array(
    'cmd' => '_notify-validate',
  );
  $post += $ipn;

  $request = drupal_http_request(ec_paypal_variable_get('ec_paypal_ipnrb_url', 'https://www.paypal.com/cgi-bin/webscr'), array('headers' => $headers, 'method' => 'POST', 'data' => drupal_http_build_query($post, array('q'))));

  if ($request->data == 'VERIFIED') {

    /**
     * Invoke hook_ec_paypal_ipn_alter()
     */
    drupal_alter('ec_paypal_ipn', $ipn);

    parse_str($ipn['custom'], $ids);
    if (!empty($ids['erid']) && ($receipt = ec_receipt_load($ids['erid']))) {
      ec_paypal_wd($ipn, 'ec_paypal', t('Successful IPN request for receipt %erid', array('%erid' => $ids['erid'])), WATCHDOG_NOTICE);
    }
    else {
      ec_paypal_wd($ipn, 'ec_paypal', t('Unsuccessful IPN request. Unable to determine receipt number'), WATCHDOG_NOTICE);
    }
    ec_paypal_update_response($ipn);
  }
  else {
    ec_paypal_wd($ipn, 'ec_paypal', t('PayPal IPN request failed'), WATCHDOG_WARNING);
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ec_paypal_return() {
  global $user;
  if ($at = ec_paypal_variable_get('ec_paypal_pdt_token', FALSE)) {
    $headers = array(
      'Content-Type' => 'application/x-www-form-urlencoded',
    );
    $post = array(
      'cmd' => '_notify-synch',
      'tx' => $_REQUEST['tx'],
      'at' => $at,
    );
    $request = drupal_http_request(ec_paypal_variable_get('ec_paypal_ipnrb_url', 'https://www.paypal.com/cgi-bin/webscr'), array('headers' => $headers, 'method' => 'POST', 'data' => drupal_http_build_query($post)));
    parse_str(str_replace("\n", '&', $request->data), $response);
    if (array_key_exists('SUCCESS', $response) && $response['receiver_email'] == ec_paypal_variable_get('ec_paypal_receiver_email', variable_get('site_mail', ini_get('sendmail_from')))) {
      ec_paypal_wd($response, 'ec_paypal', t('PayPal PDT request successfully received'), WATCHDOG_WARNING);
      $receipt = ec_paypal_update_response($response);
    }
    elseif (array_key_exists('FAILED', $response)) {
      ec_paypal_wd($response, 'ec_paypal', t('PayPal PDT request failed'), WATCHDOG_WARNING);
    }
    else {
      ec_paypal_wd($response, 'ec_paypal', t('PayPal PDT notication received for %receiver_email. Unknown receiver email.', array('%receiver_email' => $response['receiver_email'])), WATCHDOG_WARNING);
    }
  }

  $return_url = ec_receipt_return_page(isset($receipt) ? $receipt : NULL);
  if (is_array($return_url)) {
    call_user_func_array('drupal_goto', $return_url);
  }
  else {
    drupal_goto($return_url);
  }
}

// FIXME: Fix up the cancel so it will work with any allocation type, not just eccommerce
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ec_paypal_cancel() {
  if (isset($_REQUEST['receipt']) && ($receipt = ec_receipt_load($_REQUEST['receipt']))) {
    $receipt->status = RECEIPT_STATUS_CANCELLED;
    ec_receipt_save($receipt);
  }

  $cancel_url = ec_receipt_cancel_page(isset($receipt) ? $receipt : NULL, isset($_REQUEST['invoice']) ? $_REQUEST['invoice'] : NULL);
  if (is_array($cancel_url)) {
    call_user_func_array('drupal_goto', $cancel_url);
  }
  else {
    drupal_goto($cancel_url);
  }
}

/**
 * Translate the paypal payment_status into a receipt status
 */
function ec_paypal_get_status($payment_status) {
  switch ($payment_status) {
    case 'Pending':
      return;
      break;

    case 'Completed':
      return RECEIPT_STATUS_COMPLETED;
      break;

    case 'Denied':
      return RECEIPT_STATUS_DENIED;
      break;

    case 'Failed':
      return RECEIPT_STATUS_FAILED;
      break;

    default:
      ec_paypal_wd($response, 'ec_paypal', t('Unknown PayPal payment status %status', array('%status' => $response['payment_status'])), WATCHDOG_WARNING);
  }
}

/**
 * Paypal version of watchdog to add the Response to the watchdog entry
 */
function ec_paypal_wd($object, $type, $message, $severity = WATCHDOG_NOTICE, $link = NULL) {
  ob_start();
  print_r($object);
  $output = '<pre>' . check_plain(ob_get_clean()) . '</pre>';
  watchdog($type, $message . '<br />' . $output, array(), $severity, $link);
}

/**
 * Process the response from PayPal.
 */
function ec_paypal_update_response($response) {
  // Handle non payment requests. This is where PayPal is informing us of changes but they do not
  // affect the customers balance.
  if (empty($response['payment_status'])) {
    switch ($response['txn_type']) {
      // Handle subscription sign ups.
      case 'subscr_signup':
        ec_paypal_wd($response, 'ec_paypal', t('Subscription signup - ignored.'), WATCHDOG_NOTICE);
        break;
    }
  }
  elseif ($response['payment_status'] == 'Refunded') {
    ec_paypal_wd($response, 'ec_paypal', t('Processing refund request.'), WATCHDOG_NOTICE);
    // to run ec_paypal_find_receipt() we need to fiddle with the response.
    $resp = $response;
    $resp['txn_id'] = $resp['parent_txn_id'];
    if ($erid = ec_paypal_find_receipt($resp)) {
      $receipt = ec_receipt_load($erid);
      ec_paypal_wd($receipt, 'ec_paypal', t('receipt loaded'), WATCHDOG_NOTICE);
      if ($receipt && $receipt->status != RECEIPT_STATUS_REFUNDED) {
        // Reverse all the allocations
        $process_refund = TRUE;
        foreach (ec_receipt_get_allocations($receipt->erid) as $allocation) {
          if (!ec_receipt_reverse_allocation($receipt, $allocation)) {
            ec_paypal_wd($allocation, 'ec_paypal', t('Unable to reverse allocation'), WATCHDOG_ERROR);
            $process_refund = FALSE;
          }
        }
        if ($process_refund) {
          $alloc[] = array(
              'type' => 'refund', 
              'id' => $receipt->erid,
          );
          ec_receipt_allocate($receipt, $alloc);
      
          $receipt->status = RECEIPT_STATUS_REFUNDED;
          ec_receipt_save($receipt);
          ec_paypal_wd($receipt, 'ec_paypal', t('Receipt refunded by PayPal'), WATCHDOG_NOTICE);
        }
        else {
          ec_paypal_wd($receipt, 'ec_paypal', t('Unable to process the refund'), WATCHDOG_NOTICE);
        }
      }
      else {
        ec_paypal_wd($receipt, 'ec_paypal', t('Receipt already Refunded'), WATCHDOG_NOTICE);
      }
    }
    else {
      ec_paypal_wd($response, 'ec_paypal', t('Unable to find refunded receipt.'), WATCHDOG_WARNING);
    }
  }
  elseif ($receipt = ec_paypal_create_receipt($response)) {
    switch ($response['txn_type']) {
      case 'cart':
        break;

      case 'subscr_payment':
        $ids = ec_paypal_parse_ipn_custom();

        // We also need to tell the allocation interface that it needs to update the subscription.
        if (isset($ids['invoice']) && isset($ids['type']) && ($object = ec_receipt_alloc_invoke($ids['type'], 'load', $ids['invoice']))) {
          // The first payment is for the original invoice, check that no payments have been made.
          $payments = db_query("SELECT COUNT(erid) FROM {ec_receipt} WHERE paypal_subscr_id = :paypal_subscr_id", array(':paypal_subscr_id' => $response['subscr_id']))->fetchField();
          if ($payments > 1) {
            ec_receipt_alloc_invoke($ids['type'], 'update_recurring_payment', $object, $receipt);
          }
        }
        else {
          ec_paypal_wd($response, 'ec_paypal', t('Unable to determine how to tell allocation about subscription update.'), WATCHDOG_WARNING);
        }
        break;

      default:
        ec_paypal_wd($response, 'ec_paypal', t('Unknown transaction type %txn_type', array('%txn_type' => $response['txn_type'])), WATCHDOG_WARNING);
    }
  }
  else {
    ec_paypal_wd($response, 'ec_paypal', t('Unable to process. Unknown IPN request.'), WATCHDOG_WARNING);
  }
}

function ec_paypal_parse_ipn_custom($response) {
  if (!empty($response['custom'])) {
    parse_str($response['custom'], $ids);
  }
  else {
    /**
     * Since there is no custom field as this may be a PayPal Express which doesn't have
     * enough information to populate the custom field as it is created before the transaction
     * is created. So to get around this we are going to use the original invoice which was
     * allocated to the first receipt in this transaction.
     */
    $ids = db_result(db_query_range("SELECT a.type, a.etid AS invoice FROM {ec_receipt} r INNER JOIN {ec_receipt_allocation} a ON r.erid = a.erid WHERE  r.type LIKE 'paypal_%' AND r.paypal_subscr_id = '%s' ORDER BY r.created ASC", $response['subscr_id'], 0, 1));
  }

  return $ids;
}

function ec_paypal_find_receipt($response) {
  if (!empty($response['custom'])) {
    parse_str($response['custom'], $ids);
  }
  else {
    $ids = array();
  }

  if (isset($response['txn_id']) && ($erid = db_query("SELECT erid FROM {ec_receipt} WHERE type IN ('paypal_basic', 'paypal_express', 'paypal_pro') AND extern_id = :extern_id", array(':extern_id' => $response['txn_id']))->fetchField())) {
    return $erid;
  }
  elseif (isset($ids['erid']) && ($erid = db_query("SELECT erid FROM {ec_receipt} WHERE erid = :erid AND type IN ('paypal_basic', 'paypal_express', 'paypal_pro') AND extern_id = :extern_id", array(':erid' => $ids['erid'], ':extern_id' => ''))->fetchField())) {
    return $erid;
  }
  return FALSE;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ec_paypal_create_receipt($response) {
  if ($erid = ec_paypal_find_receipt($response)) {
    $receipt = ec_receipt_load($erid);
    $receipt->extern_id = $response['txn_id'];
    $receipt->paypal_payer_email = md5($response['payer_email']);
    $receipt->amount = $response['mc_gross'];
    $receipt->currency = $response['mc_currency'];
    $receipt->balance = $receipt->amount - $receipt->allocated;

    // This will be set when this receipt is for a subscription.
    if (isset($response['subscr_id'])) {
      $receipt->paypal_subscr_id = $response['subscr_id'];
    }
    if (($status = ec_paypal_get_status($response['payment_status'])) !== NULL) {
      $receipt->status = $status;
    }
    ec_receipt_save($receipt);
    ec_paypal_wd($receipt, 'ec_paypal', t('Update receipt @erid', array('@erid' => $receipt->erid)), WATCHDOG_NOTICE, l(t('View'), 'store/receipt/' . $erid . '/view'));
  }
  else {
    if (!empty($response['custom'])) {
      parse_str($response['custom'], $ids);
    }
    else {
      $ids = array();
    }

    if (isset($ids['invoice']) && isset($ids['type']) && ($object = ec_receipt_alloc_invoke($ids['type'], 'load', $ids['invoice']))) {
      $customer = ec_receipt_alloc_invoke($ids['type'], 'get_customer', $object);
    }

    if (empty($customer->ecid)) {
      $customer = ec_customer_get_by_email($response['payer_email']);
      if (!$customer) {
        if ($ecid = db_query_range("SELECT ecid FROM {ec_receipt} WHERE paypal_payer_email = :paypal_payer_email", array())->fetchField()) {
          $customer = ec_customer_get_customer($ecid);
        }
        else {
          // Create a new anonymous customer to link this receipt to.
          $customer = (object) ec_anon_customer_get_id($response);
        }
      }
    }

    if (empty($customer->ecid)) {
      ec_paypal_wd($customer, 'ec_paypal', t('Create new customer entry'));
      $customer = ec_customer_insert($customer);
    }

    $receipt = new StdClass;
    $receipt->type = 'paypal_basic';
    $receipt->ecid = $customer->ecid;
    $receipt->currency = $response['mc_currency'];
    $receipt->balance = $receipt->amount = $response['mc_gross'];
    $receipt->allocated = 0;
    $receipt->status = ec_paypal_get_status($response['payment_status']);
    $receipt->extern_id = $response['txn_id'];
    $receipt->paypal_payer_email = md5($response['payer_email']);
    if (isset($response['subscr_id'])) {
      $receipt->paypal_subscr_id = $response['subscr_id'];
    }

    $erid = ec_receipt_create_receipt($receipt);

    ec_paypal_wd($receipt, 'ec_paypal', t('Create new receipt'), WATCHDOG_NOTICE, l(t('View'), 'store/receipt/' . $erid . '/view'));
  }

  return $receipt;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ec_paypal_validate_custom_payment_page($element) {
  if (!empty($element['#value']) && !preg_match('/^[a-zA-Z0-9_]+$/', $element['#value'])) {
    form_error($element, t('@name may only contain alphanumeric charactors and underscore.', array('@name' => empty($element['#title']) ? $element['#parents'][0] : $element['#title'])));
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ec_paypal_api_comms($method, $params) {
  $values = array(
    'USER' => ec_paypal_variable_get('ec_paypal_api_username', ''),
    'PWD' => ec_paypal_variable_get('ec_paypal_api_password', ''),
    'VERSION' => '57.0',
    'SIGNATURE' => ec_paypal_variable_get('ec_paypal_api_signature', ''),
    'METHOD' => $method,
  );

  $values += $params;

  $url = url(ec_paypal_variable_get('ec_paypal_api_url', 'https://api-3t.paypal.com/nvp'), array('query' => $values));

  $ret = drupal_http_request($url);

  parse_str(str_replace("\n", '', $ret->data), $response);
  return $response;
}

/**
 * Implements hook_refund().
 * $receipt - an existing receipt
 */
function ec_paypal_api_receipt_refund($receipt) {
  $params = array(
    'TRANSACTIONID' => $receipt->txn_id,
    'REFUNDTYPE' => 'Full',
  );
  $response = ec_paypal_api_comms('RefundTransaction', $params);

  if ($response['ACK'] == 'Success') {
    $receipt->status = RECEIPT_STATUS_REFUNDED;
    ec_receipt_save($receipt);
  }
  else {
    ec_paypal_wd($response, 'ec_paypal_api', t('Problems refunding Receipt %erid', array('%erid' => $receipt->erid)), WATCHDOG_NOTICE);
    $keys = array_filter(array_keys($response), create_function('$a', 'return drupal_substr($a, 0, 13) == "L_LONGMESSAGE";'));
    foreach ($keys as $key) {
      drupal_set_message($response[$key], 'error');
    }
  }
}

/**
 * Implements hook_link_alter().
 */
function ec_paypal_link_alter($links) {
  if (isset($links['ec_buynow'])) {
    $rtype = ec_receipt_get_types('type', 'paypal_express');
    if (!empty($rtype->allow_payments)) {
      $links['ec_buynow_paypal'] = array(
        'title' => '<img src="' . base_path() . drupal_get_path('module', 'ec_paypal') . '/images/btn_xpressCheckout.gif" class="paypal-logo">',
        'href' => $links['ec_buynow']['href'],
        'query' => array('payment_method' => 'paypal_express'),
        'html' => TRUE,
      );
    }
  }
}

/**
 * Implements hook_views_api().
 */
function ec_paypal_views_api() {
  return array('api' => 2.0);
}
