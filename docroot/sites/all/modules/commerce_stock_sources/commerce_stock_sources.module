<?php
/**
 * @file
 * Commerce stock sources module file.
 */

// Create an entity to be able to add sources: commerce_stock_sources?
// Create an entity to store the actual quantities: commerce_stock_source_quantity?

/**
 * Implements hook_menu().
 */
function commerce_stock_sources_menu() {

  $items = array();

  $type = 'commerce_stock_sources';
  $commerce_stock_sources = commerce_stock_sources_new($type);

  $items['admin/commerce/config/stock/stock-sources'] = array(
    'title' => 'Stock sources',
    'weight' => -10,
  );

  // Administration pages.
  $items['admin/commerce/config/stock/stock-sources/add/' . $type] = array(
    'title' => 'Create a new stock source',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_stock_sources_source_form', $commerce_stock_sources),
    'access callback' => 'commerce_stock_sources_access',
    'access arguments' => array('create', $commerce_stock_sources),
    'file' => 'includes/commerce_stock_sources.source.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/commerce/config/stock/stock-sources/%commerce_stock_sources/edit'] = array(
    'title' => 'Edit stock source',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_stock_sources_source_form', 5),
    'access callback' => 'commerce_stock_sources_access',
    'access arguments' => array('update', 5),
    'file' => 'includes/commerce_stock_sources.source.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/commerce/config/stock/stock-sources/%commerce_stock_sources/quantities'] = array(
    'title callback' => 'commerce_stock_sources_page_title',
    'title arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_stock_sources_quantities_form', 5),
    'access callback' => 'commerce_stock_sources_access',
    'access arguments' => array('administer', $commerce_stock_sources),
    'file' => 'includes/commerce_stock_quantity.form.inc',
  );

  return $items;
}

/**
 * Title callback: Returns the title of the commerce_stock_sources.
 */
function commerce_stock_sources_page_title($entity) {
  return t('Edit @name', array('@name' => $entity->name));
}

/**
 * Implements hook_permission().
 */
function commerce_stock_sources_permission() {

  $permissions = array();
  $permissions += commerce_entity_access_permissions('commerce_stock_sources');

  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function commerce_stock_sources_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_stock_sources') . '/includes/views',
  );
}

/**
 * Implements hook_entity_info().
 */
function commerce_stock_sources_entity_info() {
  $return = array(
    'commerce_stock_sources' => array(
      'label' => t('Commerce Stock Sources'),
      'controller class' => 'CommerceStockSourcesController',
      'base table' => 'commerce_stock_sources',
      'fieldable' => TRUE,
      'uri callback' => 'commerce_stock_sources_uri',
      'load hook' => 'commerce_stock_sources_load',
      'entity keys' => array(
        'id' => 'source_id',
      ),
      'bundles' => array(
        'commerce_stock_sources' => array(
          'label' => t('Commerce Stock Source'),
          'admin' => array(
            'path' => 'admin/commerce/config/stock/stock-sources/commerce_stock_sources',
            'bundle argument' => 5,
            'access arguments' => array('administer commerce_stock_sources entities'),
          ),
        ),
      ),
      'module' => 'commerce_stock_sources',
      'permission labels' => array(
        'singular' => t('Stock source'),
        'plural' => t('Stock sources'),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Stock source'),
          'custom settings' => FALSE,
        ),
      ),
    ),
    'commerce_stock_quantity' => array(
      'label' => t('Commerce Stock Quantity'),
      'controller class' => 'CommerceStockQuantityController',
      'base table' => 'commerce_stock_quantity',
      'fieldable' => TRUE,
      'load hook' => 'commerce_stock_quantity_load',
      'entity keys' => array(
        'id' => 'stq_id',
      ),
      'bundles' => array(
        'commerce_stock_quantity' => array(
          'label' => t('Commerce Stock Quantity'),
        ),
      ),
      'module' => 'commerce_stock_sources',
      'permission labels' => array(
        'singular' => t('Stock quantity'),
        'plural' => t('Stock quantities'),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Stock Quantity'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  return $return;
}

/**
 * Hook_entity_property_info(). Provides metadata for the commerce_stock_sources entity.
 */
function commerce_stock_sources_entity_property_info() {

  $info = array();

  // Add meta-data about the basic commerce_stock_sources properties.
  $stock_source_properties = &$info['commerce_stock_sources']['properties'];

  $stock_source_properties['source_id'] = array(
    'label' => t('Source ID'),
    'description' => t('The internal numeric ID of the source.'),
    'type' => 'integer',
    'schema field' => 'source_id',
  );
  $stock_source_properties['name'] = array(
    'label' => t('Name'),
    'description' => t('The name of the stock source.'),
    'type' => 'text',
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'name',
  );
  $stock_source_properties['status'] = array(
    'label' => t("Status"),
    'description' => t("Whether the stock source is published or unpublished."),
    // Although the status is expected to be boolean, its schema suggests
    // it is an integer, so we follow the schema definition.
    'type' => 'integer',
    'options list' => 'entity_metadata_status_options_list',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer commerce_stock_sources entities',
    'schema field' => 'status',
  );
  $stock_source_properties['language'] = array(
    'label' => t("Language"),
    'type' => 'token',
    'description' => t("The language the stock source is written in."),
    'setter callback' => 'entity_property_verbatim_set',
    'options list' => 'entity_metadata_language_list',
    'schema field' => 'language',
    'setter permission' => 'administer commerce_stock_sources entities',
  );
  $stock_source_properties['author'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the stock source."),
    'getter callback' => 'entity_metadata_node_get_properties',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer commerce_stock_sources entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );

  // Add meta-data about the basic commerce_stock_quantity properties.
  $stock_quantity_properties = &$info['commerce_stock_quantity']['properties'];

  $stock_quantity_properties['stq_id'] = array(
    'label' => t('Stock quantity ID'),
    'description' => t('The internal numeric ID of the entity.'),
    'type' => 'integer',
    'schema field' => 'stq_id',
  );

  $stock_quantity_properties['source'] = array(
    'label' => t('Source'),
    'description' => t('The internal numeric ID of the source.'),
    'type' => 'commerce_stock_sources',
    'schema field' => 'source_id',
  );

  $stock_quantity_properties['product'] = array(
    'label' => t('Product'),
    'description' => t('The internal numeric ID of the product.'),
    'type' => 'commerce_product',
    'schema field' => 'product_id',
  );

  $stock_quantity_properties['quantity'] = array(
    'label' => t('Quantity'),
    'description' => t('The actual quantity of the product in this stock.'),
    'type' => 'integer',
    'schema field' => 'quantity',
  );

  $stock_quantity_properties['status'] = array(
    'label' => t("Status"),
    'description' => t("Whether the stock quantity is published or unpublished."),
    // Although the status is expected to be boolean, its schema suggests
    // it is an integer, so we follow the schema definition.
    'type' => 'integer',
    'options list' => 'entity_metadata_status_options_list',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer commerce_stock_quantity entities',
    'schema field' => 'status',
  );

  $stock_quantity_properties['author'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the stock quantity."),
    'getter callback' => 'entity_metadata_node_get_properties',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer commerce_stock_quantity entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );

  return $info;
}

/**
 * Implements callback_entity_info_uri().
 */
function commerce_stock_sources_uri($source) {
  return array(
    'path' => 'commerce-stock-source/' . $source->source_id,
  );
}

/**
 * Returns an initialized commerce_stock_sources object.
 */
function commerce_stock_sources_new($type = 'commerce_stock_sources') {
  return entity_get_controller('commerce_stock_sources')->create(array('type' => $type));
}

/**
 * Loads a stock source by ID.
 */
function commerce_stock_sources_load($source_id) {
  if (empty($source_id)) {
    return FALSE;
  }

  $commerce_stock_sources = commerce_stock_sources_load_multiple(array($source_id), array());
  $entity = $commerce_stock_sources ? reset($commerce_stock_sources) : FALSE;

  return $entity;
}

/**
 * Loads a stock source by product and source.
 */
function commerce_stock_sources_load_quantity_by_product_and_source($product_id, $source_id, $reset = FALSE) {

  $conditions = array(
    'product_id' => $product_id,
    'source_id' => $source_id,
  );

  $entities = entity_load('commerce_stock_quantity', FALSE, $conditions, $reset);
  $entity = $entities ? reset($entities) : FALSE;

  return $entity;
}

/**
 * Loads a stock source by ID.
 */
function commerce_stock_sources_load_quantities_by_product($product_id, $reset = FALSE) {

  $conditions = array(
    'product_id' => $product_id,
  );

  $entities = entity_load('commerce_stock_quantity', FALSE, $conditions, $reset);

  return $entities;
}

/**
 * Loads multiple commerce_stock_sources by ID or based on a set of matching conditions.
 */
function commerce_stock_sources_load_multiple($commerce_stock_sources_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($commerce_stock_sources_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('commerce_stock_sources', $commerce_stock_sources_ids, $conditions, $reset);
}

/**
 * Loads all commerce_stock_sources.
 *
 * @see entity_load()
 *
 * @return array
 *   An array of commerce_stock_sources objects indexed by source_id.
 */
function commerce_stock_sources_load_all($reset = FALSE) {
  return entity_load('commerce_stock_sources', FALSE, array(), $reset);
}

/**
 * Loads all commerce_stock_sources.
 *
 * @see entity_load()
 *
 * @return array
 *   An array of commerce_stock_sources objects indexed by source_id.
 */
function commerce_stock_sources_load_all_as_options($reset = FALSE) {

  $options = array();
  $sources = entity_load('commerce_stock_sources', FALSE, array(), $reset);

  foreach ($sources as $id => $source) {
    $options[$id] = $source->name;
  }

  return $options;
}

/**
 * Saves a commerce_stock_sources.
 */
function commerce_stock_sources_save($commerce_stock_sources) {
  return entity_get_controller('commerce_stock_sources')->save($commerce_stock_sources);
}

/**
 * Deletes a commerce_stock_sources by ID.
 */
function commerce_stock_sources_delete($source_id) {
  return commerce_stock_sources_delete_multiple(array($source_id));
}

/**
 * Deletes multiple commerce_stock_sources by ID.
 */
function commerce_stock_sources_delete_multiple($source_ids) {
  return entity_get_controller('commerce_stock_sources')->delete($source_ids);
}

/**
 * Checks commerce_stock_sources access for various operations.
 */
function commerce_stock_sources_access($op, $commerce_stock_source = NULL, $account = NULL) {
  return commerce_entity_access($op, $commerce_stock_source, $account, 'commerce_stock_sources');
}

/**
 * Implements the hook_field_widget_form_alter to disable de changing the value of the stock in the form.
 */
function commerce_stock_sources_field_widget_form_alter(&$element, &$form_state, $context) {

  if (isset($element['value']) && 'commerce_stock' == $element['value']['#field_name']) {

    if (!empty($element['value']['#entity'])) {

      $product = $element['value']['#entity'];
      $plugin = commerce_stock_calculation_get_active_plugin($product);

      // If the plugin is not the value of the field make it read only.
      if (STOCK_CALCULATION_DEFAULT_METHOD != $plugin) {
        $element['value']['#disabled'] = TRUE;
      }
    }

  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function commerce_stock_sources_ctools_plugin_directory($owner, $plugin_type) {

  if ($owner == 'commerce_stock_calculation' && $plugin_type == 'stock_calculation') {
    return 'plugins/stock_calculation';
  }

}

/**
 * Implements hook_form_alter().
 *
 * Overrides the stock configuration for to be able to select the
 * stock by source.
 */
function commerce_stock_sources_form_alter(&$form, &$form_state, $form_id) {

  if ('commerce_stock_calculation_settings' == $form_id) {

    $product = $form['#product'];

    $conditions = array(
      'product_id' => $product->product_id,
    );

    $sources = commerce_stock_sources_load_all();

    $form['sources'] = array(
      '#type' => 'container',
      '#tree' => TRUE,
      '#prefix' => '<div id="sources">',
      '#suffix' => '</div>',
    );

    if (!$sources) {

      $sust = array(
        '!add_link' => l(t('add new stock source'), 'admin/commerce/config/stock/stock-sources/add/commerce_stock_sources'),
      );

      $form['sources']['message'] = array(
        '#markup' => t('There are no stock sources yes. Do you want to !add_link one?', $sust)
      );
    }
    else {

      foreach ($sources as $source) {

        $wrapper = entity_metadata_wrapper('commerce_stock_sources', $source);

        $source_id = $wrapper->source_id->value();
        $quantity = commerce_stock_sources_load_quantity_by_product_and_source($product->product_id, $source_id);

        $form['sources'][$source_id] = array(
          '#type' => 'fieldset',
          '#title' => $wrapper->name->value(),
          '#tree' => TRUE,
        );

        if ($quantity && $quantity->stq_id) {
          $form['sources'][$source_id]['stq_id'] = array(
            '#type' => 'value',
            '#value' => $quantity->stq_id,
          );
        }

        $form['sources'][$source_id]['source_id'] = array(
          '#type' => 'value',
          '#value' => $source_id,
        );

        $form['sources'][$source_id]['product_id'] = array(
          '#type' => 'value',
          '#value' => $product->product_id,
        );

        $form['sources'][$source_id]['source'] = array(
          '#title' => t('Source'),
          '#type' => 'item',
          '#markup' => $wrapper->name->value(),
        );

        $form['sources'][$source_id]['quantity'] = array(
          '#title' => t('quantity'),
          '#type' => 'textfield',
          '#default_value' => isset($quantity->quantity) ? $quantity->quantity : 0,
        );

      }
    }

    // The callback function needs to be prepended in the array to allow to
    // original module to calculate the stock with using the latest values.
    array_unshift($form['#submit'], 'commerce_stock_sources_stock_settings_submit');
  }

}

/**
 * Submit callback.
 */
function commerce_stock_sources_stock_settings_submit($form, &$form_state) {

  // Save the actual value of the stock quanities.
  $sources = $form_state['values']['sources'];

  foreach ($sources as $values) {

    $values += array(
      'uid' => $form['#account']->uid,
    );

    $controller = entity_get_controller('commerce_stock_quantity');

    $entity = $controller->create($values);
    $controller->save($entity);

  }
}
