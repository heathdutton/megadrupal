<?php
/**
 * @file
 * A Drupal module to provide a single interface to analytics tag management
 * using Â© Tealium iQ.
 */

use Drupal\tealium\TealiumUtagData;
use Drupal\tealium\Data\TealiumJqueryEventBinding;

const TEALIUM_DEFAULT_ACCOUNT = 'drupal';
const TEALIUM_DEFAULT_PROFILE = 'website';
const TEALIUM_DEFAULT_ENVIRONMENT = 'dev';
const TEALIUM_DEFAULT_UTAG_ASYNC = TRUE;

/**
 * Implements hook_menu()
 */
function tealium_menu() {
  $items = array();

  $items['admin/config/services/tealium'] = array(
    'title' => 'Tealium Settings',
    'description' => 'Configure your Tealium Enterprise Tag Management implementation.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tealium_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'tealium.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/tealium/utag'] = array(
    'title' => 'Universal Tag',
    'description' => 'Set-up the Tealium Universal Tag.',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/tealium/iq'] = array(
    'title' => 'Tealium iQ',
    'description' => 'Open your Tealium Management Console.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('https://my.tealiumiq.com/'),
    'access arguments' => array('administer site configuration'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme()
 */
function tealium_theme($existing, $type, $theme, $path) {
  if (!is_array($existing)
      || !is_string($type)
      || !is_string($theme)
      || !is_string($path)
  ) {

    return array();
  }

  $settings = array(
    'tealium' => array(
      'arguments' => array(
        'account'        => TEALIUM_DEFAULT_ACCOUNT,
        'profile'        => TEALIUM_DEFAULT_PROFILE,
        'environment'    => TEALIUM_DEFAULT_ENVIRONMENT,
        'utag_async'     => TEALIUM_DEFAULT_UTAG_ASYNC,
        'data_variables' => NULL,
        'view_variables' => NULL,
        'link_variables' => NULL,
        'bind_variables' => array(),
      ),
      'template'  => 'tealium',
      'file'      => 'theme.inc',
      'path'      => $path . '/templates',
    ),
  );

  return $settings;
}

/**
 * Implements hook_help().
 */
function tealium_help($path) {
  $output = NULL;


  switch ($path) {
    case 'admin/help#tealium':
      $readme = tealium_help_get_readme_html();

      if ($readme) {
        $output = $readme;
      }
      break;

    case 'admin/config/services/tealium':
      $config_text = <<<___END_OF_CONFIG_TEXT___
Refer to the <a href="!tealium_help_url">Tealium documentation</a> or visit the
<a href="!tealium_community_url">Tealium Learning Community</a> if you are
unsure what any of these settings are.
___END_OF_CONFIG_TEXT___;

      $config_args = array(
        '!tealium_community_url' => 'https://community.tealiumiq.com/',
        '!tealium_help_url' => 'http://www.drupal.org/node/2310763',
      );
      if (module_exists('help')) {
        $config_args['!tealium_help_url'] = url('admin/help/tealium');
      }

      $output = '<p>' . t($config_text, $config_args) . '</p>';
      break;

  }

  return $output;
}

/**
 * Get the Tealium help README as HTML.
 *
 * @return null|string
 *   The README as HTML if it exists else NULL.
 */
function tealium_help_get_readme_html() {
  $readme = tealium_help_get_readme();

  $output = NULL;
  if (is_string($readme) && module_exists('markdown')) {
    $filters = module_invoke('markdown', 'filter_info');
    if (isset($filters['filter_markdown']['process callback'])
        && function_exists($filters['filter_markdown']['process callback'])
    ) {
      $info = $filters['filter_markdown'];
      $function = $info['process callback'];
      $output = filter_xss_admin($function($readme, NULL));
    }
  }

  if (!$output && is_string($readme)) {
    $output = '<pre>' . check_plain($readme) . '</pre>';
  }

  return $output;
}

/**
 * Get the Tealium help README.
 *
 * @return null|string
 *   The contents of the README if it exists else NULL.
 */
function tealium_help_get_readme() {
  $path = dirname(__FILE__) . '/README.txt';
  if (file_exists($path)) {
    $handle = fopen($path, 'r');
    $readme = fread($handle, filesize($path));
    fclose($handle);

    return $readme;
  }

  return NULL;
}

/**
 * Implements template_preprocess_html()
 * @param array $variables
 * @see template_preprocess_html()
 */
function tealium_preprocess_html(&$variables) {
  if (FALSE === is_array($variables)) {
    return;
  }

  if (arg(0) != 'admin') {

    if (FALSE === array_key_exists('page', $variables)
        || FALSE === is_array($variables['page'])
        || FALSE === array_key_exists('page_top', $variables['page'])
        || FALSE === is_array($variables['page']['page_top'])
    ) {
      $variables['page']['page_top'] = array();
    }

    $account = variable_get('tealium_account', TEALIUM_DEFAULT_ACCOUNT);
    $profile = variable_get('tealium_profile', TEALIUM_DEFAULT_PROFILE);
    $environment = variable_get('tealium_environment', TEALIUM_DEFAULT_ENVIRONMENT);
    $utag_async = variable_get('tealium_utag_async', TEALIUM_DEFAULT_UTAG_ASYNC);

    $tealium_theme_variables = array(
      'account' => $account,
      'profile' => $profile,
      'environment' => $environment,
      'utag_async' => $utag_async,
      'data_variables' => tealium_get_data(),
      'view_variables' => tealium_get_view_data(),
      'link_variables' => tealium_get_link_data(),
      'bind_variables' => tealium_get_bind_data(),
    );

    $variables['page']['page_top']['tealium'] = array(
      '#markup' => theme('tealium', $tealium_theme_variables),
      '#weight' => -1000,
    );

  }

}

/**
 * Set a variable in the Tealium Universal Data Object to be sent for a page.
 *
 * @param string $name
 *  Name of a Tealium Universal Data Object property to set. This name will map to a Data Source in your
 *  Tealium Management console.
 * @param mixed $value
 *  Value to assign.
 * @return TealiumUtagData
 */
function tealium_add_data($name = NULL, $value = NULL) {
  /** @var TealiumUtagData $utag_data */
  $utag_data = & drupal_static(__FUNCTION__, new TealiumUtagData());

  if ($name !== NULL) {
    $utag_data->setDataSourceValue($name, $value);
  }

  return $utag_data;
}

/**
 * Set a variable to be sent to Tealium as a link tracking event for the page.
 *
 * @param string $name
 *  Name of a Tealium Universal Data Object property to set. This name will map to a Data Source in your
 *  Tealium Management console.
 * @param mixed $value
 *  Value to assign.
 * @return TealiumUtagData
 */
function tealium_add_link_data($name = NULL, $value = NULL) {
  /** @var TealiumUtagData $link_utag_data */
  $link_utag_data = & drupal_static(__FUNCTION__, new TealiumUtagData());

  if ($name !== NULL) {
    $link_utag_data->setDataSourceValue($name, $value);
  }

  return $link_utag_data;
}

/**
 * Set a variable to be sent to Tealium as a view tracking event for the page.
 *
 * @param string $name
 *  Name of a Tealium Universal Data Object property to set. This name will map to a Data Source in your
 *  Tealium Management console.
 * @param mixed $value
 *  Value to assign.
 * @return TealiumUtagData
 */
function tealium_add_view_data($name = NULL, $value = NULL) {
  /** @var TealiumUtagData $view_utag_data */
  $view_utag_data = & drupal_static(__FUNCTION__, new TealiumUtagData());

  if ($name !== NULL) {
    $view_utag_data->setDataSourceValue($name, $value);
  }

  return $view_utag_data;
}

/**
 * Add a binding to an DOM element that will send data to Tealium when an event fires.
 *
 * @param TealiumJqueryEventBinding $bind_utag_data_event
 *  The object describing the utag_data element event binding.
 * @return TealiumJqueryEventBinding[]
 */
function tealium_add_bind_data($bind_utag_data_event = NULL) {
  /** @var array $bind_objects */
  $bind_objects = & drupal_static(__FUNCTION__, array());

  if ($bind_utag_data_event instanceof TealiumJqueryEventBinding) {
    $bind_objects[] = $bind_utag_data_event;
  }

  return $bind_objects;
}

/**
 * @return TealiumUtagData
 */
function tealium_get_data() {
  return tealium_add_data(NULL);
}

/**
 * @return TealiumUtagData
 */
function tealium_get_link_data() {
  return tealium_add_link_data(NULL);
}

/**
 * @return TealiumUtagData
 */
function tealium_get_view_data() {
  return tealium_add_view_data(NULL);
}

/**
 * @return TealiumJqueryEventBinding[]
 */
function tealium_get_bind_data() {
  return tealium_add_bind_data(NULL);
}
