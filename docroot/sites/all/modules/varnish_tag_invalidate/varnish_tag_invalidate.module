<?php

/**
 * Add tags to output as HTTP headers 
 * 
 * @param array|string $tags
 *  The tag or tags to send to Varnish
 *  
 * @return array
 *  The array of current tags for the page
 */
function varnish_tag_invalidate_add_tags($tags) {
  if (FALSE === is_array($tags)) {
    $tags = array_map('trim', explode("\n", $tags));
  }
  
  $current_tags = &drupal_static('varnish_tags', array());
  
  $current_tags = array_unique(array_merge($current_tags, $tags));
  
  return $current_tags;
}

/**
 * Triggers the purge of tags
 * 
 * @param array $tags
 */
function varnish_tag_invalidate_purge_tags($tags) {
  module_load_include('inc', 'purge');
  
  $raw_hosts = variable_get('varnish_tag_invalidate_hosts', '');
  $hosts = array_map('trim', explode("\n", $raw_hosts));
  
  $product = varnish_tag_invalidate_cartesian_product(array('tag' => $tags, 'host' => $hosts));
  
  $urls = array_map('varnish_tag_array_map_tag', $product);

  purge_urls($urls);
}

/**
 * Combine the cartesian product of host and tag into a URL to purge
 *
 * @param array $item
 *  An array containing a key for host and a key for tag
 *
 * @return string
 */
function varnish_tag_array_map_tag($item) {
  return $item['host'] . '/' . $item['tag'];
}

/**
 * Generates cartesian product for hosts and tags
 *
 * @param array $input
 *  An array with multiple elements to create the cartesian product from
 *
 * @return array
 */
function varnish_tag_invalidate_cartesian_product($input) {
  // filter out empty values
  $input = array_filter($input);

  $result = array(array());

  foreach ($input as $key => $values) {
    $append = array();

    foreach($result as $product) {
      foreach($values as $item) {
        $product[$key] = $item;
        $append[] = $product;
      }
    }

    $result = $append;
  }

  return $result;
}

/**
 * Sends tag information as HTTP headers
 *
 * @param stdClass $page          
 */
function varnish_tag_invalidate_page_alter(&$page) {
  $current_tags = &drupal_static('varnish_tags', array());
  $header = variable_get('varnish_tag_invalidate_header', 'X-Varnish-Tag');
  
  if (0 < sizeof($current_tags)) {
    drupal_add_http_header($header, implode(',', $current_tags));
  }
}

/**
 * Implements hook_menu
 */
function varnish_tag_invalidate_menu() {
  $items = array();
  
  $items['admin/config/development/performance/varnish-tags'] = array(
    'title' => t('Varnish tag settings'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'varnish_tag_invalidate_admin_settings_form'
    ),
    'access arguments' => array(
      'administer site configuration'
    ),
    'file' => 'varnish_tag_invalidate.admin.inc'
  );
  
  $items['admin/config/development/performance/varnish-tags/general'] = array(
    'title' => t('General'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'varnish_tag_invalidate_admin_settings_form'
    ),
    'access arguments' => array(
      'administer site configuration'
    ),
    'file' => 'varnish_tag_invalidate.admin.inc',
    'weight' => 0,
  );
  
  $items['admin/config/development/performance/varnish-tags/entities'] = array(
    'title' => t('Entity'),
    'description' => t('Configure Varnish tag invalidations for entities.'),
    'page callback' => 'drupal_get_form',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(
      'varnish_tag_invalidate_entity_admin_settings_form'
    ),
    'access arguments' => array(
      'administer site configuration'
    ),
    'file' => 'varnish_tag_invalidate.admin.inc' ,
    'weight' => 2
  );
  
  return $items;
}

/**
 * Implements hook_page_manager_variant_operations_alter().
 * 
 * Adds varnish tag settings form.
 */
function varnish_tag_invalidate_page_manager_variant_operations_alter(&$operations, &$handler) {
  if ($handler->task == 'page' || $handler->task == 'pm_existing_pages') {
    $keys = array_keys($operations['children']);
    $before = array_slice($operations['children'], 0, array_search('settings', $keys) + 1);
    $after = array_slice($operations['children'], array_search('settings', $keys) + 1);
    $pathauto = array(
      'varnish_tag' => array(
        'title' => t('Cache tags'),
        'description' => t('Allow a given variant to provide cache tags.'),
        'form' => 'varnish_tag_invalidate_variant_tag_form'
      )
    );
    $operations['children'] = array_merge($before, $pathauto, $after);
  }
}

/**
 * Settings form for varnish tags
 */
function varnish_tag_invalidate_variant_tag_form($form, &$form_state) {
  ctools_include('context-task-handler');

  $handler = $form_state['handler'];
  $contexts = ctools_context_handler_get_all_contexts($form_state['task'], $form_state['subtask'], $handler);

  $form += varnish_tag_invalidate_partial_configuration_form($handler->conf, $contexts);
  
  return $form;
}

/**
 * Varnish tag configuration form
 */
function varnish_tag_invalidate_partial_configuration_form($conf, $contexts) {
  $tags = (!empty($conf['varnish_tag_invalidate'])) ? $conf['varnish_tag_invalidate'] : '';
  
  $form['settings']['varnish_tag_invalidate'] = array(
    '#type' => 'textarea',
    '#title' => t('Cache tags'),
    '#description' => t('Tag headers sent to Varnish'),
    '#default_value' => $tags,
  );
  
  return $form;
}

/**
 * Form submit handler for varnish_tag_invalidate_variant_tag_form
 */
function varnish_tag_invalidate_variant_tag_form_submit($form, &$form_state) {
  $form_state['handler']->conf['varnish_tag_invalidate'] = $form_state['values']['varnish_tag_invalidate'];
}

/**
 * Implements hook_ctools_render_alter().
 *
 * When a Page Manager page is rendered add the tags.
 */
function varnish_tag_invalidate_ctools_render_alter($info, $page, $context) {
  $handler = $context['handler'];
  $contexts = ctools_context_handler_get_handler_contexts($context['contexts'], $handler);

  if (TRUE === isset($handler->conf['varnish_tag_invalidate'])) {
    // Use keyword substitution from contexts
    $tags = ctools_context_keyword_substitute($handler->conf['varnish_tag_invalidate'], array(), $contexts);
  	varnish_tag_invalidate_add_tags($tags);
  }
}

/**
 * Implements hook_panelizer_operations_alter().
 */
function varnish_tag_invalidate_panelizer_operations_alter(&$operations) {
  $operations['varnish_tags'] = array(
    'menu title' => t('Cache tags'),
    'link title' => 'varnish-tags',
    'entity callback' => 'varnish_tag_invalidate_panelizer_tags_entity_page',
    'admin callback' => 'varnish_tag_invalidate_panelizer_tags_admin_page',
  );
}

/**
 * Panelizer varnish tags operation entity page callback.
 */
function varnish_tag_invalidate_panelizer_tags_entity_page($handler, $js, $input, $entity, $view_mode) {
  $panelizer = $entity->panelizer[$view_mode];
  if (empty($panelizer)) {
    return MENU_NOT_FOUND;
  }

  list($entity_id, $revision_id, $bundle) = entity_extract_ids($handler->entity_type, $entity);

  $form_state = array(
    'entity' => $entity,
    'revision info' => $handler->entity_allows_revisions($entity),
    'display cache' => panels_edit_cache_get(implode(':', array('panelizer', $handler->entity_type, $entity_id, $view_mode))),
    'no_redirect' => TRUE,
    'panelizer' => $panelizer,
  );

  ctools_include('common', 'panelizer');
  $output = drupal_build_form('varnish_tag_invalidate_panelizer_tag_form', $form_state);

  if (!empty($form_state['executed'])) {
    if ($form_state['clicked_button']['#name'] == 'save') {
      drupal_set_message(t('The settings have been updated.'));

      $entity->panelizer[$view_mode]->extra['varnish_tag_invalidate'] = $form_state['values']['varnish_tag_invalidate'];

      $handler->entity_save($entity);
    }
    else {
      drupal_set_message(t('Changes have been discarded.'));
    }

    drupal_goto($_GET['q']);
  }

  $output = $handler->wrap_entity_panelizer_pages($entity, $view_mode, $output);

  ctools_set_no_blocks(FALSE);
  drupal_set_page_content($output);
  $page = element_info('page');
  return $page;
}

/**
 * Panelizer varnish tags configuration form.
 */
function varnish_tag_invalidate_panelizer_tag_form($form, $form_state) {
  ctools_include('context');

  $panelizer = $form_state['panelizer'];
  $contexts = ctools_context_load_contexts($panelizer);

  $form = varnish_tag_invalidate_partial_configuration_form($form_state['panelizer']->extra, $contexts);

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#name' => 'save',
  );

  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#name' => 'cancel',
  );

  return $form;
}

/**
 * Panelizer varnish tags operation admin page callback.
 */
function varnish_tag_invalidate_panelizer_tags_admin_page($handler, $bundle, $name, $view_mode) {
  if (is_string($handler)) {
    $handler = panelizer_entity_plugin_get_handler($handler);
  }

  if ($view_mode) {
    $bundle .= '.' . $view_mode;
  }

  $panelizer = $handler->get_default_panelizer_object($bundle, $name);
  if (empty($panelizer)) {
    return MENU_NOT_FOUND;
  }

  $cache_key = 'panelizer:default:' . $handler->entity_type . ':' . $bundle . ':' . $name;

  $form_state = array(
    'display cache' => panels_edit_cache_get($cache_key),
    'no_redirect' => TRUE,
    'panelizer' => $panelizer,
  );

  ctools_include('common', 'panelizer');
  $output = drupal_build_form('varnish_tag_invalidate_panelizer_tag_form', $form_state);

  if (!empty($form_state['executed'])) {
    if ($form_state['clicked_button']['#name'] == 'save') {
      drupal_set_message(t('The settings have been updated.'));

      $panelizer->extra['varnish_tag_invalidate'] = $form_state['values']['varnish_tag_invalidate'];

      ctools_export_crud_save('panelizer_defaults', $panelizer);
    }
    else {
      drupal_set_message(t('Changes have been discarded.'));
    }

    drupal_goto($_GET['q']);
  }

  ctools_set_no_blocks(FALSE);

  if ($view_mode) {
    $output = $handler->wrap_default_panelizer_pages($bundle, $output);
  }

  drupal_set_page_content($output);
  $page = element_info('page');

  return $page;
}

/**
 * Implements hook_panelizer_pre_render_alter().
 * 
 * Adds varnish tags to panelized entities.
 */
function varnish_tag_invalidate_panelizer_pre_render_alter(&$panelizer, &$display, $entity) {
  if (isset($panelizer->entity_type)) {
    $entity_type = $panelizer->entity_type;
  }
  elseif (isset($panelizer->panelizer_type)) {
    $entity_type = $panelizer->panelizer_type;
  }
  else {
    return;
  }

  $panelizer_entity_plugin = panelizer_entity_plugin_get_handler($entity_type);
  $contexts = $panelizer_entity_plugin->get_contexts($panelizer);

  if (!empty($panelizer->extra['varnish_tag_invalidate']) && $panelizer->extra['varnish_tag_invalidate']) {
    varnish_tag_invalidate_add_tags($panelizer->extra['varnish_tag_invalidate']);
  }
}

/**
 * Implements hook_entity_view().
 * 
 * Adds tags for entities and their bundles.
 */
function varnish_tag_invalidate_entity_view($entity, $type, $view_mode, $langcode) {
  $tags = array();
  $entities_to_procees = variable_get('varnish_tag_invalidate_entities_view', array());
  
  if (TRUE === isset($entities_to_procees[$type]) && $entities_to_procees[$type]) {
    $ids = entity_extract_ids($type, $entity);
  
    // Add the primary ID
    array_push($tags, $type . '_' . $ids[0]);
  
    // Add the bundle if it exists
    if ($ids[2]) {
      array_push($tags, $type . '_' . $ids[2]);
    }
  }
  
  if (0 < sizeof($tags)) {
    varnish_tag_invalidate_add_tags($tags);
  }
}

/**
 * Implementsh hook_entity_presave().
 * 
 * Purges tags when entities are about to be saved.
 */
function varnish_tag_invalidate_entity_presave($entity, $type) {
  $tags = array();
  $entities_to_procees = variable_get('varnish_tag_invalidate_entities_view', array());
  
  // Ensure we're purging only selected entities
  if (TRUE === isset($entities_to_procees[$type]) && $entities_to_procees[$type]) {
    $send_tags = FALSE;
    
    $ids = entity_extract_ids($type, $entity);

    // Special check for workbench_moderation
    if ('node' === $type && module_exists('workbench_moderation')) {
      if (isset($entity->workbench_moderation_state_new)) {
        if ($entity->workbench_moderation_state_new == workbench_moderation_state_published() 
            || (!empty($entity->workbench_moderation['published']) 
                && $entity->vid == $entity->workbench_moderation['published']->vid)) {
          
          $send_tags = TRUE;
        }
      }
      else {
        $send_tags = TRUE;
      }
    }
    else {
      $send_tags = TRUE;
    }
    
    if ($send_tags) {
      // Add the primary ID
      if ($ids[0]) {
        array_push($tags, $type . '_' . $ids[0]);
      }
      
      // Add the bundle listing if it exists
      if ($ids[2]) {
        array_push($tags, $type . '_list_' . $ids[2]);
      }
    }
  }
  
  if (0 < sizeof($tags)) {
    varnish_tag_invalidate_purge_tags($tags);
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 * 
 * Purges node tags and node list tags when content is transitioned to or from published
 */
function varnish_tag_invalidate_workbench_moderation_transition($node, $previous_state, $new_state) {
  $tags = array();
  
  if ($new_state == workbench_moderation_state_published() || $previous_state == workbench_moderation_state_published()) {
    $ids = entity_extract_ids('node', $node);
    
    // Add the primary ID
    if ($ids[0]) {
      array_push($tags, 'node_' . $ids[0]);
    }
    
    // Add the bundle listing if it exists
    if ($ids[2]) {
      array_push($tags, 'node_list_' . $ids[2]);
    }
  }
  
  if (0 < sizeof($tags)) {
    varnish_tag_invalidate_purge_tags($tags);
  }
}

/**
 * Implements hook_block_view_alter().
 * 
 * Sets tags for viewing blocks
 */
function varnish_tag_invalidate_block_view_alter(&$data, $block) {
  varnish_tag_invalidate_add_tags('block_' . $block->bid);
}

/**
 * Implements hook_form_block_admin_configure_alter().
 * 
 * Adds a submit handler to clear tags on block updates.
 */
function varnish_tag_invalidate_form_block_admin_configure_alter(&$form, &$form_state) {
  $form['#submit'][] = 'varnish_tag_invalidate_form_block_submit';
}

/**
 * Submit handler to clear tags for blocks
 */
function varnish_tag_invalidate_form_block_submit($form, &$form_state) {
  $tag = 'block_' . $form_state['values']['module'] . '-' . $form_state['values']['delta'];
  
  varnish_tag_invalidate_purge_tags(array($tag));
}

