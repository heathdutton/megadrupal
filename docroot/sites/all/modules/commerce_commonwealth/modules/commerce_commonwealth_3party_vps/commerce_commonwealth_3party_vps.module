<?php

/**
 * @file
 * Implements Commonwealth VP services for use in Drupal Commerce.
 */

module_load_include('inc', 'commerce_commonwealth_3party_vps', 'includes/commerce_commonwealth_constants');

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook defines the commonwealth payment method.
 */
function commerce_commonwealth_3party_vps_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_commonwealth_3party_vps'] = array(
    'title' => t('Commonwealth 3-Party VPS'),
    'short_title' => t('Commonwealth'),
    'display_title' => variable_get('commonwealth_3party_vps_payment_title', t('Credit Card')),
    'description' => t('Integrates Commonwealth 3-party external VPS payment system'),
    'active' => TRUE,
    'offsite' => TRUE,
    'terminal' => FALSE,
    'callbacks' => array(),
    'offsite_autoredirect' => TRUE,
    'weight' => -1,
  );

  return $payment_methods;
}

/**
 * Implements hook_settings_form().
 *
 * Payment method callback: settings form.
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules.
 */
function commerce_commonwealth_3party_vps_settings_form($settings = NULL) {
  $default = (array) $settings + CommerceCommonwealth3partyVpsConstants::$default;

  $form = array(
    // BASIC settings.
    'vpc_URL' => array(
      '#type' => 'textfield',
      '#title' => t('VPC Payment Client URL'),
      '#description' => t('Your Commonwealth VPC Payment Client URL.'),
      '#default_value' => $default['vpc_URL'],
    ),
    'vpc_Merchant' => array(
      '#type' => 'textfield',
      '#title' => t('Merchant ID'),
      '#description' => t('Your merchant ID'),
      '#default_value' => $default['vpc_Merchant'],
    ),
    'vpc_AccessCode' => array(
      '#type' => 'textfield',
      '#title' => t('Merchant Access Code'),
      '#description' => t('Your merchant Access Code'),
      '#default_value' => $default['vpc_AccessCode'],
    ),
    'vpc_SecureHashSecret' => array(
      '#type' => 'textfield',
      '#title' => t('Secure Hash Secret'),
      '#description' => t('Your secure Hash Secret'),
      '#default_value' => $default['vpc_SecureHashSecret'],
    ),
    'vpc_CSCLevel' => array(
      '#type' => 'select',
      '#title' => t('CSC Level'),
      '#description' => t('Minimum Acceptable CSC'),
      '#options' => CommerceCommonwealth3partyVpsConstants::$cscLevel,
      '#default_value' => $default['vpc_CSCLevel'],
    ),
  );

  return $form;
}

/**
 * Implements hook_redirect_form().
 *
 * Redirect the user to the VPS gateway.
 */
function commerce_commonwealth_3party_vps_redirect_form($form, &$form_state, $order, $payment_method) {
  global $language;

  if (!isset($payment_method['settings']['vpc_AccessCode']) || !isset($payment_method['settings']['vpc_Merchant'])) {
    watchdog('commerce_commonwealth_3party_vps', 'Payment attempt failed. Merchant ID and Merchant Access Code password have not been set in the payment settings. Cannot proceed with transaction.', WATCHDOG_ERROR);
    drupal_set_message(t('The Commonwealth gateway has not been correctly configured - see watchdog for details. Cannot proceed with payment.'), 'error');
    commerce_payment_redirect_pane_previous_page($order);
    return $form;
  }

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = $wrapper->commerce_order_total->amount->value();

  // Setup the transaction data.
  $hash_secret = $payment_method['settings']['vpc_SecureHashSecret'];
  $data = array();
  foreach (CommerceCommonwealth3partyVpsConstants::$request as $key => $val) {
    $data[$key] = $val;
  }
  $data['vpc_Merchant'] = $payment_method['settings']['vpc_Merchant'];
  $data['vpc_AccessCode'] = $payment_method['settings']['vpc_AccessCode'];
  $data['vpc_MerchTxnRef'] = md5($order->mail . '_' . $order->order_id . '_' . date('U'));
  $data['vpc_OrderInfo'] = $order->order_id;
  $data['vpc_Amount'] = $total;
  $data['vpc_Locale'] = $language->language;
  $data['vpc_ReturnURL'] = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $data['vpc_SecureHash'] = commerce_commonwealth_secure_hash_calculate($data, $hash_secret);

  // Create the form.
  $form['#action'] = $payment_method['settings']['vpc_URL'];
  $form['#method'] = 'get';
  foreach ($data as $key => $val) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $val,
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to CBA Payment Gateway'),
    '#name' => t(''),
    '#weight' => 50,
  );
  $form['#pre_render'][] = 'commerce_commonwealth_3party_vps_redirect_form_modify';

  return $form;
}

/**
 * Custom_form_modify_handler($form).
 *
 * Remove the form id's & token.
 *
 * @param object $form
 *   Form object
 *
 * @return mixed
 *   Form object
 */
function commerce_commonwealth_3party_vps_redirect_form_modify($form) {
  unset($form['form_token']);
  unset($form['form_build_id']);
  unset($form['form_id']);

  return $form;
}

/**
 * Implements hook_form_form_id_alter().
 *
 * Rewrite the for option to include card options logos.
 */
function commerce_commonwealth_3party_vps_form_commerce_checkout_form_alter(&$form, &$form_state) {
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);
      if ($method_id == 'commerce_commonwealth_3party_vps') {
        $icons = _commerce_commonwealth_3party_vps_cc_icons();
        $value .= ' (' . implode(' ', $icons) . ')';
        break;
      }
    }
  }
}

/**
 * Implements hook_redirect_form_validate().
 *
 * Validate the callback data before proceeding.
 */
function commerce_commonwealth_3party_vps_redirect_form_validate($order, $payment_method) {
  $valid_response = TRUE;

  // Check for required values.
  if (empty($_GET)) {
    watchdog('commerce_commonwealth_3party_vps', 'There was a bad communication callback from CBA for order #: %order_number, no data received.', array('%order_number' => $order->order_number), WATCHDOG_ERROR);
    $valid_response = FALSE;
  }
  else {
    $keys = array_keys($_GET);
    foreach (CommerceCommonwealth3partyVpsConstants::$requiredResponse as $required_response) {
      if (!in_array($required_response, $keys)) {
        watchdog('commerce_commonwealth_3party_vps', 'There was a bad communication callback from CBA for order #: %order_number. Missing required data: %key.', array('%order_number' => $order->order_number, '%key' => $required_response), WATCHDOG_ERROR);
        $valid_response = FALSE;
      }
    }
    if (variable_get('clean_url') == 1) {
      $uri_parts = explode('?', $_SERVER['REQUEST_URI']);
      $uri_parts = explode('/', $uri_parts[0]);
      $payment_redirect_key = $uri_parts[count($uri_parts) - 1];
    } else {
      $uri_parts = explode('/', $_SERVER['REQUEST_URI']);
      $uri_parts = $uri_parts[count($uri_parts) - 1];
      $uri_parts = explode('&', $uri_parts);
      $payment_redirect_key = $uri_parts[0];
    }
    if ($payment_redirect_key != $order->data['payment_redirect_key']) {
      watchdog('commerce_commonwealth_3party_vps', 'An invalid redirect key has been used in the callback for this transaction from CBA for order #: %order_number (remote ref: %remote_ref). This is possibly a scam attempt.', array('%order_number' => $order->order_number), WATCHDOG_ERROR);
      $valid_response = FALSE;
    }
  }

  // Calculate the hash and compare it to what was provided
  $data = $_GET;
  $vpc_SecureHash = $data["vpc_SecureHash"];
  unset($data["vpc_SecureHash"]);
  unset($data["q"]);
  $hash_secret = $payment_method['settings']['vpc_SecureHashSecret'];
  $calculated_hash = strtoupper(commerce_commonwealth_secure_hash_calculate($data, $hash_secret));
  if(!_commerce_commonwealth_3party_vps_hash_equals($calculated_hash, $vpc_SecureHash)) {
    watchdog('commerce_commonwealth_3party_vps', 'Data has been modified in the callback for this transaction from CBA for order #: %order_number (remote ref: %remote_ref). This is possibly a scam attempt.', array('%order_number' => $order->order_number), WATCHDOG_ERROR);
    $valid_response = FALSE;
  }

  if (!$valid_response) {
    drupal_set_message(t('There was a communication failure. Invalid data received from CBA. Please contact the system administrator.'), 'error');
  }

  return $valid_response;
}

/**
 * Implements hook_redirect_form_submit().
 *
 * Capture transaction and process any internal workflow for processed payment.
 */
function commerce_commonwealth_3party_vps_redirect_form_submit($order, $payment_method) {
  $data = (object) $_GET;

  $success = _commerce_commonwealth_3party_vps_check_transaction_success($order, $payment_method);
  $status = ($success ? COMMERCE_PAYMENT_STATUS_SUCCESS : COMMERCE_PAYMENT_STATUS_FAILURE);

  commerce_commonwealth_transaction_save($payment_method, $order, $data, $status);

  if ($success) {
    commerce_payment_redirect_pane_next_page($order);
  }
  else {
    commerce_payment_redirect_pane_previous_page($order);
  }
}

/**
 * Validate the response from CBA.
 *
 * @param object $order
 *   Order object
 * @param string $payment_method
 *   Paymenbt method
 *
 * @return bool
 *   Transaction success/fail
 */
function _commerce_commonwealth_3party_vps_check_transaction_success($order, $payment_method) {
  $code = $_GET['vpc_TxnResponseCode'];

  if ($code === '0') {
    drupal_set_message(t('Payment successful'), 'status');
    watchdog('commerce_commonwealth_3party_vps',
      'Payment successfully received for order #: %order_number (remote ref: %remote_ref).',
      array(
        '%remote_ref' => $_GET['vpc_TransactionNo'],
        '%order_number' => $order->order_number),
      WATCHDOG_INFO);
    return TRUE;
  }

  drupal_set_message(t('Payment failed. %code_text: %message',
      array(
        '%code_text' => CommerceCommonwealth3partyVpsConstants::$status[$code],
        '%message' => str_replace('+', ' ', $_GET['vpc_Message']))),
    'error');
  watchdog('commerce_commonwealth_3party_vps',
    'Transaction order #: %order_number (remote ref: %remote_ref) failed - %text.',
    array(
      '%text' => CommerceCommonwealth3partyVpsConstants::$status[$code],
      '%remote_ref' => $_GET['vpc_TransactionNo'],
      '%order_number' => $order->order_number),
    WATCHDOG_ERROR);
  return FALSE;
}

/**
 * Get the credit card options as form elements.
 *
 * @param array $methods
 *   array of payment extra cards accepted (key = name, val = display name)
 *
 * @return array
 *   array of payment cards accepted (key = name, val = display name)
 */
function _commerce_commonwealth_3party_vps_cc_icons($methods = array()) {
  $icons = array();

  foreach (CommerceCommonwealth3partyVpsConstants::$paymentMethods as $name => $title) {
    if (empty($methods) || in_array($name, $methods, TRUE)) {
      $path = '/images/' . $name . '.gif';
      $variables = array(
        'path' => drupal_get_path('module', 'commerce_commonwealth') . $path,
        'title' => $title,
        'alt' => $title,
        'attributes' => array(
          'class' => array('commerce-commonwealth-cc-icon'),
        ),
      );
      $icons[$name] = theme('image', $variables);
    }
  }

  return $icons;
}

/**
 * Perform hash_equals function.
 *
 * @see https://www.drupal.org/node/2400197
 *
 * @param $known_string
 * @param $user_string
 * @return bool
 */
function _commerce_commonwealth_3party_vps_hash_equals($known_string, $user_string) {
  if (function_exists('hash_equals')) {
    return hash_equals($known_string, $user_string);
  }
  else {
    // Backport of hash_equals() function from PHP 5.6
    // @see https://github.com/php/php-src/blob/PHP-5.6/ext/hash/hash.c#L739
    if (!is_string($known_string) || !is_string($user_string)) {
      return FALSE;
    }

    $known_len = strlen($known_string);
    if ($known_len !== strlen($user_string)) {
      return FALSE;
    }

    // This is security sensitive code. Do not optimize this for speed.
    $result = 0;
    for ($i = 0; $i < $known_len; $i++) {
      $result |= (ord($known_string[$i]) ^ ord($user_string[$i]));
    }

    return $result === 0;
  }
}
