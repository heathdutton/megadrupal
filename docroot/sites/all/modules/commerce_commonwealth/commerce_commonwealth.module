<?php

/**
 * @file
 * Implements base functions for use by Commerce Commonwealth modules.
 */

/**
 * Generate a secure hash for the transmission.
 *
 * @param array $data
 *   Get data
 * @param string $hash_secret
 *   Hash secret string
 *
 * @return string
 *   Secure hash
 */
function commerce_commonwealth_secure_hash_calculate($data, $hash_secret) {
  $keys = array_keys($data);
  sort($keys);
  $hash = $hash_secret;
  foreach ($keys as $index) {
    $hash .= $data[$index];
  }
  return md5($hash);
}

/**
 * Save a transaction for the order.
 *
 * @param string $payment_method
 *   Payment method
 * @param object $order
 *   Order object
 * @param array $data
 *   Get data
 * @param constant $status
 *   Transaction status
 *
 * @return bool
 *   Success/fail of save
 */
function commerce_commonwealth_transaction_save($payment_method, $order, $data, $status) {
  global $user;
  $total = field_get_items('commerce_order', $order, 'commerce_order_total');

  $transaction = commerce_commonwealth_get_transaction($order);
  $transaction->amount = $total[0]['amount'];
  $transaction->currency_code = $total[0]['currency_code'];
  $transaction->status = $status;
  $transaction->remote_status = $data->vpc_TxnResponseCode;
  $transaction->remote_id = $data->vpc_TransactionNo;
  $transaction->payload[REQUEST_TIME] = $data;
  $transaction->uid = $user->uid;

  unset($transaction->data['error handled']);

  return commerce_payment_transaction_save($transaction);
}

/**
 * Get a transaction for the order.
 *
 * @param object $order
 *   The order object
 * @param bool $create
 *   (optional) Allow creation of a new transaction object if one does not
 *   already exist
 *
 * @return bool|mixed|null
 *   Transaction object for the order, or null
 */
function commerce_commonwealth_get_transaction($order, $create = TRUE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('order_id', $order->order_id)
    ->execute();

  if (!empty($result['commerce_payment_transaction'])) {
    return commerce_payment_transaction_load(key($result['commerce_payment_transaction']));
  }
  elseif ($create) {
    return commerce_payment_transaction_new('commerce_commonwealth', $order->order_id);
  }
  else {
    return NULL;
  }
}
