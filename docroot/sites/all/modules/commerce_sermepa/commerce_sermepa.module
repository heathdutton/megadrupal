<?php
/**
 * @file
 * Provides a payment method for Drupal Commerce using Sermepa gateway.
 */

DEFINE('COMMERCE_SERMEPA_URL_TEST', 'https://sis-t.redsys.es:25443/sis/realizarPago');
DEFINE('COMMERCE_SERMEPA_URL_LIVE', 'https://sis.redsys.es/sis/realizarPago');

/**
 * Implements hook_menu().
 */
function commerce_sermepa_menu() {
  $items['sermepa/callback'] = array(
    'page callback' => 'commerce_sermepa_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Get POST response from sermepa.
 */
function commerce_sermepa_callback() {
  // Load order and payment_method objects
  if ($feedback = commerce_sermepa_get_feedback()) {
    $merchant_data = unserialize($feedback['Ds_MerchantData']);
    $order = commerce_order_load($merchant_data['order_id']);
    if ($order) {
      // Load the payment method, since it won't be available if no $order object was passed in as argument
      $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
      if (!$payment_method || $payment_method['method_id'] != 'commerce_sermepa') {
        return FALSE;
      }
      if (commerce_sermepa_valid_sha1($order, $payment_method, $feedback)) {
        commerce_sermepa_process_transaction($order, $payment_method, $feedback);
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_sermepa_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_sermepa'] = array(
    'base' => 'commerce_sermepa',
    'title' => t('Sermepa Payment'),
    'short_title' => t('Sermepa'),
    'description' => t('Sermepa payment gateway integration'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_sermepa_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'name' => '',
    'mode' => 'test',
    'Ds_MerchantName' => '',
    'Ds_MerchantCode' => '',
    'Ds_MerchantSignature' => '',
    'Ds_Merchant_Terminal' => '001',
    'currency' => '978',
    'advanced' => array(
      'override_url' => '',
      'encryption' => 'sha1-enhanced',
    ),
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank Name'),
    '#description' => t('Administrative name for the bank.'),
    '#default_value' => $settings['name'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Mode of the transactions'),
    '#default_value' => $settings['mode'],
    '#options' => array('test' => t('Test'), 'live' => t('Live')),
    '#maxlength' => 5,
    '#required' => TRUE,
  );
  $form['Ds_MerchantName'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Name'),
    '#default_value' => $settings['Ds_MerchantName'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['Ds_MerchantCode'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Code'),
    '#default_value' => $settings['Ds_MerchantCode'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['Ds_MerchantSignature'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Signature'),
    '#default_value' => $settings['Ds_MerchantSignature'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['Ds_Merchant_Terminal'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Terminal'),
    '#default_value' => $settings['Ds_Merchant_Terminal'],
    '#size' => 5,
    '#maxlength' => 5,
    '#required' => TRUE,
  );
  $form['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#default_value' => $settings['currency'],
    '#options' => array(
      '978' => t('Euro'),
      '840' => t('U.S. Dollar'),
      '826' => t('Pound'),
      '392' => t('Yen'),
       '32' => t('Southern Argentina'),
      '124' => t('Canadian Dollar'),
      '152' => t('Chilean Peso'),
      '170' => t('Colombian Peso'),
      '356' => t('India Rupee'),
      '484' => t('New Mexican Peso'),
      '604' => t('Soles'),
      '756' => t('Swiss Franc'),
      '986' => t('Brazilian Real'),
      '937' => t('Bolivar'),
      '949' => t('Turkish lira')
    ),
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Payment instructions'),
    '#description' => t('Instructions for customers on the checkout page. Use &lt;br /&gt; for line break.'),
    '#default_value' => isset($settings['description']) ? $settings['description'] : '',
    '#required' => FALSE,
    '#rows' => 3,
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['advanced']['override_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Override bank connect url'),
    '#default_value' => $settings['advanced']['override_url'],
    '#size' => 80,
    '#maxlength' => 255,
  );
  $form['advanced']['encryption'] = array(
    '#type' => 'radios',
    '#title' => t('Method of encryption'),
    '#default_value' => $settings['advanced']['encryption'],
    '#options' => array(
      'sha1' => t('SHA'),
      'sha1-enhanced' => t('Enhanced SHA'),
    ),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: redirect form to sermepa gateway.
 */
function commerce_sermepa_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['Ds_MerchantCode'])) {
    drupal_set_message(t('Sermepa is not configured for use. Merchant code has not been specified.'), 'error');
    return array();
  }

  if (empty($payment_method['settings']['Ds_MerchantSignature'])) {
    drupal_set_message(t('Sermepa signature is not set for use. Merchant signature has not been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Url to get POST result of payment.
    'merchant_url' => url('sermepa/callback', array('absolute' => TRUE)),
    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_sermepa_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Build the order form for the sermepa.
 *
 * @param $order
 *   The fully loaded order being paid for.
 */
function commerce_sermepa_order_form($form, &$form_state, $order, $settings) {
  $merchant_order = substr(date('ymdHis') . $order->order_id, -12, 12);
  $transactiontype = '0';

  if ($settings['advanced']['encryption'] == 'sha1-enhanced') {
    $message = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'] . $merchant_order . $settings['Ds_MerchantCode'] . $settings['currency'] . $transactiontype . $settings['merchant_url'] . $settings['Ds_MerchantSignature'];
    $signature = strtoupper(sha1($message));
  }
  elseif ($settings['advanced']['encryption'] == 'sha1') {
    module_load_include('inc', 'commerce_sermepa', 'sha1');
    $sha = new SHA1;
    $message = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'] . $merchant_order . $settings['Ds_MerchantCode'] . $settings['currency'] . $settings['Ds_MerchantSignature'];
    $digest1 = $sha->hash_string($message);
    $signature = strtoupper($sha->hash_to_string($digest1));
  }

  // Get the url to connect to.
  if (!empty($settings['advanced']['override_url'])) {
    $url = $settings['advanced']['override_url'];
  }
  elseif ($settings['mode'] == 'live') {
    $url = COMMERCE_SERMEPA_URL_LIVE;
  }
  else {
    $url = COMMERCE_SERMEPA_URL_TEST;
  }

  $hidden_fields = array(
    'Ds_Merchant_Amount' => $order->commerce_order_total[LANGUAGE_NONE][0]['amount'],
    'Ds_Merchant_Currency' => $settings['currency'],
    'Ds_Merchant_Order' => $merchant_order,
    'Ds_Merchant_MerchantName' => $settings['Ds_MerchantName'],
    'Ds_Merchant_MerchantCode' => $settings['Ds_MerchantCode'],
    'Ds_Merchant_MerchantURL' => $settings['merchant_url'],
    'Ds_Merchant_UrlOK' => $settings['return'],
    'Ds_Merchant_UrlKO' => $settings['cancel_return'],
    'Ds_Merchant_ConsumerLanguage' => 1,
    'Ds_Merchant_TransactionType' => $transactiontype,
    'Ds_Merchant_MerchantData' => serialize(array('order_id' => $oder_id)),
    'Ds_Merchant_MerchantSignature' => $signature,
    'Ds_Merchant_Terminal' => $settings['Ds_Merchant_Terminal'],
  );

  $form['#action'] = $url;

  // Create hidden fields.
  foreach ($hidden_fields as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Redirect to Sermepa platform'),
  );

  return $form;
}

/**
 * Implements hook_redirect_form_validate.
 */
function commerce_sermepa_redirect_form_validate($order, $payment_method) {
  commerce_sermepa_process_callback($order, $payment_method);
}

/**
 * Gets the Sermepa feedback from GET / POST parameters.
 *
 * @return
 *   An associative array containing the Sermepa feedback taken from the $_GET and
 *   $_POST superglobals, excluding 'q'.
 *   Returns FALSE if the Ds_Order parameter is missing (indicating missing or
 *   invalid Sermepa feedback).
 */
function commerce_sermepa_get_feedback() {
  $feedback = FALSE;
  if (isset($_REQUEST['Ds_Order'])) {
    // Prepare the feedback values sent by Sermepa for processing. We don't use
    // $_REQUEST since this includes the $_SESSION variables.
    $feedback = $_GET + $_POST;
    unset($feedback['q']);
  }
  return $feedback;
}

/**
 * Check if SHA1 in callback feedback is valid
 */
function commerce_sermepa_valid_sha1($order, $payment_method, $feedback) {
  $merchant_data = unserialize($feedback['Ds_MerchantData']);
  $order_id = $merchant_data['order_id'];
  $order = commerce_order_load($order_id);

  $message = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'] . $feedback['Ds_Order'] . $feedback['Ds_MerchantCode'] . $feedback['Ds_Currency'] . $feedback['Ds_Response'] . $payment_method['settings']['Ds_MerchantSignature'];

  if ($feedback['Ds_Signature'] != strtoupper(sha1($message))) {
    watchdog('commerce_sermepa', t('Signature for the payment doesn\'t match'), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if (empty($feedback['Ds_AuthorisationCode'])) {
    watchdog('commerce_sermepa', t('No authorisation code for the transaction'), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  return TRUE;
}

/**
 * Process callback information from Sermepa
 * This can either be through a redirect after payment, or a Direct HTTP server-to-server request
 */
function commerce_sermepa_process_callback($order, $payment_method) {
  if ($feedback = commerce_sermepa_get_feedback()) {
    if (commerce_sermepa_valid_sha1($order, $payment_method, $feedback)) {
      // Process the transaction based on the Sermepa parameters received
      commerce_sermepa_process_transaction($order, $payment_method, $feedback);
      return TRUE;
    }
  }
}

/**
 * Handle the response of the payment transaction.
 * Messages from "Guía de Comercios TPV Virtual SIS" v5.19
 */
function _commerce_sermepa_response($response = NULL) {
  if ((int) $response <= 99) {
    $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $msg = t('Transaction authorized for payments and preauthorizations');
  }
  else {
    $st = COMMERCE_PAYMENT_STATUS_FAILURE;
    switch ((int) $response) {
      case 900:
        $msg = t('Transaction authorized for returns and confirmations');
        break;
      case 101:
        $msg = t('Expired card');
        break;
      case 102:
        $msg = t('Temporary exception card or on suspicion of fraud');
        break;
      case 104:
      case 9104:
        $msg = t('Operation not allowed for the card or terminal');
        break;
      case 116:
        $msg = t('Asset insufficient');
        break;
      case 118:
        $msg = t('Card not registered');
        break;
      case 129:
        $msg = t('Wrong security code (CVV2/CVC2)');
        break;
      case 180:
        $msg = t('Card out of the service');
        break;
      case 184:
        $msg = t('Error on owner authentication');
        break;
      case 190:
        $msg = t('Denied without specific reasons');
        break;
      case 191:
        $msg = t('Wrong expiration date');
        break;
      case 202:
        $msg = t('Temporary or emergency card on suspicion of withdrawal card fraud');
        break;
      case 912:
      case 9912:
        $msg = t('Issuer not available');
        break;
      case 913:
        $msg = t('Order duplicated');
        break;
      default:
        $msg = t('Transaction refused');
        break;
    }
  }

  return array(
      'code' => $st,
      'message' => $msg,
  );
}

/**
 * Get transaction with a specific Sermepa Ds_AuthorisationCode.
 */
function commerce_sermepa_get_payment_transaction($feedback) {
  $feedback_remote_id = $feedback['Ds_AuthorisationCode'];

  $query = new EntityFieldQuery;

  $result = $query->entityCondition('entity_type', 'commerce_payment_transaction')
                  ->propertyCondition('payment_method', 'commerce_sermepa')
                  ->propertyCondition('remote_id', $feedback_remote_id)
                  ->execute();

  if (!empty($result['commerce_payment_transaction']) && count($result['commerce_payment_transaction']) > 0) {
    $transaction = array_pop($result['commerce_payment_transaction']);
    return $transaction->transaction_id;
  }

  return FALSE;
}

/**
 * Save the payment transaction for the order.
 */
function commerce_sermepa_process_transaction($order, $payment_method, $feedback, $redirect = TRUE) {
  $transaction_id = commerce_sermepa_get_payment_transaction($feedback);
  if (!$transaction_id) {
    $transaction = commerce_payment_transaction_new('commerce_sermepa', $order->order_id);
  }
  else {
    $transaction = commerce_payment_transaction_load($transaction_id);
  }
  // Handle the response of the bank.
  $transaction_status = _commerce_sermepa_response($feedback['Ds_Response']);

  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $transaction->remote_id = $feedback['Ds_AuthorisationCode'];

  $transaction->status = $transaction_status['code'];
  if ($transaction_status['code'] == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    $transaction->message = 'Transaction accepted with id @transaction_id';
  }
  elseif ($transaction_status['code'] == COMMERCE_PAYMENT_STATUS_FAILURE) {
    $transaction->message = 'Error for the transaction with id @transaction_id: ' . $transaction_status['message'];
  }
  $transaction->message_variables = array(
    '@transaction_id' => $feedback['Ds_AuthorisationCode'],
  );
  commerce_payment_transaction_save($transaction);
  if ($redirect) {
    if ($transaction_status['code'] == COMMERCE_PAYMENT_STATUS_FAILURE) {
      commerce_payment_redirect_pane_previous_page($order);
    }
    else {
      commerce_payment_redirect_pane_next_page($order);
    }
  }
}

/**
 * Payment method callback: checkout form.
 */
function commerce_sermepa_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  if (!empty($payment_method['settings']['description'])) {
    $form = array();
    $form['sermepa_description'] = array(
      '#type' => 'item',
      '#title' => t('Payment instructions'),
      '#markup' => '<p class="sermepa-description">' . $payment_method['settings']['description'] . '</p>'
    );
    return $form;
  }
}
