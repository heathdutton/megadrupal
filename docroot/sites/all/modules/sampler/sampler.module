<?php

/**
 * @file
 *
 * API for collecting and storing data.
 *
 * @see README.txt
 * @see sampler.api.php
 * @see sampler_example.module
 * @see sampler.drush.inc
 */

/**
 * Implements hook_menu().
 */
function sampler_menu() {
  $items = array();
  // Callback for testing purposes.
  $items['admin/sampler/process'] = array(
    'title' => 'Process all metrics',
    'page callback' => 'sampler_process_metrics',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Loader for the Sampler class and essential API functions.
 */
function sampler_load_sampler() {
  module_load_include('inc', 'sampler', 'sampler.api');
}

/**
 * Core plugin types for the module.
 *
 * All non-metric plugins are listed here.
 *
 * @return
 *   An array describing the plugins.
 */
function sampler_load_plugin_types() {
  return array(
    'storage' => array(
      'load' => 'sampler_load_storage_plugins',
      'default' => 'sampler_default_storage_plugin',
    ),
    'method' => array(
      'load' => 'sampler_load_method_plugins',
      'default' => 'sampler_default_method_plugin',
    ),
    'adjustment' => array(
      'load' => 'sampler_load_adjustment_plugins',
      'default' => 'sampler_default_adjustment_plugin',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_type().
 */
function sampler_ctools_plugin_type() {
  $plugins['metric'] = array(
    'classes' => array(
      'handler',
    ),
  );
  $plugins['storage'] = array(
    'classes' => array(
      'handler',
    ),
  );
  $plugins['method'] = array(
    'classes' => array(
      'handler',
    ),
  );
  $plugins['adjustment'] = array(
    'classes' => array(
      'handler',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function sampler_ctools_plugin_directory($module, $plugin) {
  if ($module == 'sampler') {
    switch ($plugin) {
      case 'storage':
        return 'storage';
      case 'method':
        return 'methods';
      case 'adjustment':
        return 'adjustments';
      case 'metric':
        return 'metrics';
    }
  }
}

/**
 * Loader for metrics plugins.
 *
 * @param $module
 *   Optional.  If included, only metrics for the specified module are
 *   returned.  Default is to return metrics for all modules.
 * @param $metric
 *   Optional.  If specified with module, then only the individual metric data
 *   is returned.
 *
 * @return
 *   For an individual metric, an associative array of attributes describing
 *   the metric.  For a single module, an associative array, keyed on metric
 *   name.  For all metrics an associative array, keyed on module name.
 */
function sampler_load_metrics($module = NULL, $metric = NULL) {
  $ordered_metrics = &drupal_static(__FUNCTION__);

  if (!isset($ordered_metrics)) {
    ctools_include('plugins');
    $metrics = ctools_get_plugins('sampler', 'metric');

    // We need the metrics keyed on module, so loop through and categorize.
    $ordered_metrics = array();
    foreach ($metrics as $metric_name => $metric_data) {
      if (!isset($metric_data['non_metric'])) {
        $ordered_metrics[$metric_data['module']][$metric_name] = $metric_data;
      }
    }
  }

  // One metric.
  if (isset($module) && isset($metric)) {
    if (isset($ordered_metrics[$module][$metric])) {
      return $ordered_metrics[$module][$metric];
    }
  }
  // All metrics from one module.
  elseif (isset($module)) {
    if (isset($ordered_metrics[$module])) {
      return $ordered_metrics[$module];
    }
  }
  // All metrics.
  else {
    return $ordered_metrics;
  }
  return FALSE;
}

/**
 * Loader for storage plugins.
 */
function sampler_load_storage_plugins() {
  ctools_include('plugins');
  $storage_plugins =  ctools_get_plugins('sampler', 'storage');

  return $storage_plugins;
}

/**
 * Loader for the default storage plugin.
 *
 * @return
 *   The default storage plugin.
 */
function sampler_default_storage_plugin() {
  return variable_get('sampler_default_storage_plugin', 'drupal_database_table_per_metric');
}

/**
 * Loader for method plugins.
 */
function sampler_load_method_plugins() {
  ctools_include('plugins');
  $method_plugins =  ctools_get_plugins('sampler', 'method');

  return $method_plugins;
}

/**
 * Loader for the default method plugin.
 *
 * @return
 *   The default method plugin.
 */
function sampler_default_method_plugin() {
  return variable_get('sampler_default_method_plugin', 'periodic');
}

/**
 * Loader for adjustment plugins.
 */
function sampler_load_adjustment_plugins() {
  ctools_include('plugins');
  $adjustment_plugins =  ctools_get_plugins('sampler', 'adjustment');

  return $adjustment_plugins;
}

/**
 * Loader for the default adjustment plugin.
 *
 * @return
 *   The default adjustment plugin.
 */
function sampler_default_adjustment_plugin() {
  return variable_get('sampler_default_adjustment_plugin', 'none');
}

/**
 * Wrapper function to compute and store values for all metrics.
 *
 * @see _sampler_process_metrics()
 */
function sampler_process_metrics($options = array()) {
  module_load_include('inc', 'sampler', 'sampler.api');
  $results = sampler_process_all_metrics($options);
  return sampler_display_all_metrics_results($results);
}

/**
 * Provides the default data type for the API.
 *
 * @return
 *   An array containing the data types to store values with.
 */
function sampler_default_data_type() {
  return variable_get('sampler_default_data_type', array('value' => 'int'));
}

/**
 * Implements hook_views_api().
 */
function sampler_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'sampler') . '/views',
  );
}

