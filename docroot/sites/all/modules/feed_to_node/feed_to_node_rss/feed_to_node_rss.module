<?php

/**
 * @file
 * Parsing of standard RSS feeds.
 */

/**
 * Implements hook_feed2node_info().
 * @desc This hook is needed to be able for users to pick this as 
 * there feed type.
 * Make sure the first layer of the array key is unique, 
 * in this case 'youtube_feed'.
 */
function feed_to_node_rss_feed2node_info() {
  $info = array();

  $info['rss_feed']['name'] = 'RSS'; // Display name of the feed type.
  $info['rss_feed']['parser'] = 'feed_to_node_rss_parser'; // The parser of
  $info['rss_feed']['filter'] = 'feed_to_node_rss_filter'; // The regex filter
  // the feed that will give the needed items in a array.
  $info['rss_feed']['token'] = 'rss_feed'; // Token type
  // set the description for the feed, in case there is anything special the
  // user should do before or while entering the feed url.
  $info['rss_feed']['description'] = 'Load any standard RSS feed';

  return $info;
}

/**
 * Implements hook_token_info().
 */
function feed_to_node_rss_token_info() {
  $type = array(
    'name' => t('RSS feed'),
    'description' => t('Tokens related to items in a rss feed.'),
    'needs-data' => 'rss_feed',
  );

  $feed = array();
  // Core tokens for nodes.
  $feed['guid'] = array(
    'name' => t("RSS guid"),
    'description' => t("The unique ID of a rss item."),
  );

  $feed['pubDate'] = array(
    'name' => t("Published"),
    'description' => t("Published date of the item."),
    'type' => 'feed2node_date',
  );

  $feed['category'] = array(
    'name' => t("Category"),
    'description' => t("Category of the item."),
  );

  $feed['title'] = array(
    'name' => t("Title"),
    'description' => t("Title of the item."),
  );

  $feed['description'] = array(
    'name' => t("Description"),
    'description' => t("Description of the item."),
  );
    
  $feed['content'] = array(
    'name' => t("Content"),
    'description' => t("Content of this item (most feeds use description as their content)."),
  );

  $feed['link'] = array(
    'name' => t("Link"),
    'description' => t("The url of the item"),
  );

  $feed['image'] = array(
    'name' => t("Image url"),
    'description' => t("The url to the image of the item"),
  );

  return array(
    'types' => array('rss_feed' => $type),
    'tokens' => array('rss_feed' => $feed),
  );
}

/**
 * Implemtens hook_tokens().
 */
function feed_to_node_rss_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'rss_feed' && !empty($data['rss_feed'])) {
    $feed = $data['rss_feed'];
    $img_counter = 0;

    foreach ($tokens as $fullname => $original) {
      $name = explode(':', $fullname, 2);
      switch ($name[0]) {
        case 'guid':
          $replacements[$original] = !empty($feed['guid']) ? $feed['guid'] : '';
          break;

        case 'pubDate':
          $date = !empty($feed['pubDate']) ? $feed['pubDate'] : '';
          if (!empty($name[1])) {
            $date = token_replace('[feed2node_date:' . $name[1] . ']', $data = array('feed2node_date' => $date));
          }
          $replacements[$original] = $date;
          break;

        case 'category':
          $replacements[$original] = !empty($feed['category']) ? $feed['category'] : '';
          break;

        case 'title':
          $replacements[$original] = !empty($feed['title']) ? $feed['title'] : '';
          break;

        case 'description':
          $replacements[$original] = feed_to_node_get_description($feed);
          break;
        
        case 'content':
          $replacements[$original] = feed_to_node_get_content($feed);
          break;

        case 'link':
          $replacements[$original] = !empty($feed['link']) ? $feed['link'] : '';
          break;

        case 'image':
          $img_src = '';
          // Check if we can find any indication of an image tag.
          // If nothing is found we will look in the description for an image.
          if(empty($feed['enclosure']) && empty($feed['image']['url'])){ 
            // Check the description of the rss feed to extract the image.
            $doc = new DOMDocument();
            $description = feed_to_node_get_content($feed);
            @$doc->loadHTML($description);

            $tags = $doc->getElementsByTagName('img');

            foreach ($tags as $tag) {
              $img_url[] = $tag->getAttribute('src');
            }
            if(!empty($img_url[$img_counter])){
              $img_src = $img_url[$img_counter];
            }
          }elseif(!empty($feed['enclosure'])){
            $feed['enclosure'] = !empty($feed['enclosure']) ? (array) $feed['enclosure'] : '';
            $img_src = !empty($feed['enclosure']['@attributes']['url']) ? $feed['enclosure']['@attributes']['url'] : '';
          }elseif(!empty($feed['image']['url'])){
            $img_src = $feed['image']['url'];
          }

          $replacements[$original] = $img_src;
          $img_counter++;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Get the description from the RSS feed
 * 
 * @param array $feed
 *   The feed.
 * 
 * @return string
 *   Returns the description.
 */
function feed_to_node_get_description($feed){
  $description = '';
  if(!empty($feed['description'])){
    $description = $feed['description'];
  }elseif(!empty($feed['content'])){
    $description = $feed['content'];
  }else{
    $description = '';
  }
  
  return $description;
}

/**
 * Get the content from the RSS feed
 * 
 * @param array $feed
 *   The feed.
 * 
 * @return string
 *   Returns the description.
 */
function feed_to_node_get_content($feed){
  $content = '';
  if(!empty($feed['content'])){
    $content = $feed['content'];
  }elseif(!empty($feed['description'])){
    $content = $feed['description'];
  }else{
    $content = '';
  }
  
  return $content;
}

/**
 * Get list of item from the feed.
 * 
 * @param string $feed
 *   Feed contains the contents of the url that was callled.
 * 
 * @return array
 *   The function that calls this function expects an list of items.
 */
function feed_to_node_rss_parser($feed) {
  $data = new SimpleXmlElement($feed, LIBXML_NOCDATA);
  
  $items = array();
  $count = 0;
  if(!empty($data->channel->item)){
    $data_item = $data->channel->item;
  }else{
    $data_item = $data->entry;
  }
  foreach ($data_item as $item) {
    $content = $item->children("content", true);
    $item = (array) $item;
    if(!empty($item['guid']) ){
      $key = $item['guid'];
    }elseif(!empty($item['link'])){
      $key = $item['link'];
    }else{
      $key = $count;
    }
    
    if(!empty($content->encoded)){
      $item['content'] = (string)$content->encoded;
    }
    
    $items[$key] = (array) $item;
    $count++;
  }
  // Turn them around so we got the latest item on top.
  $items = array_reverse($items, TRUE);
  return $items;
}

/**
 * If a filter is set, this filter will check if there is a match.
 * 
 * @param string $pattern
 *   Regular expression.
 * @param array $item
 *   The item of the feed, can be multiple layers deep.
 * 
 * @return boolean
 *   TRUE if there is a match, FALSE if there is no match.
 */
function feed_to_node_rss_filter($pattern, $item){
  // Check for a pattern and apply it if needed.
  if($pattern_is_regex=='1'){
    if (preg_match($pattern, $item['title'])) {
      return TRUE;
    }
  }else{
    if (strpos($item['title'], $pattern)!==false) {
      return TRUE;
    }
  }

  return FALSE;
}