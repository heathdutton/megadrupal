<?php

/**
 * @file
 * Parsing of vimeo api data(feed).
 */

/**
 * Implements hook_feed2node_info().
 * @desc This hook is needed to be able for users to pick this as 
 * there feed type.
 * Make sure the first layer of the array key is unique, 
 * in this case 'vimeo_feed'.
 */
function feed_to_node_vimeo_feed2node_info() {
  $info = array();

  $info['vimeo_feed']['name'] = 'Vimeo'; // Display name of the feed type
  $info['vimeo_feed']['parser'] = 'feed_to_node_vimeo_parser'; // The parser
  $info['vimeo_feed']['filter'] = 'feed_to_node_vimeo_filter'; // The regex filter
  // of the feed that will give the needed items in a array
  $info['vimeo_feed']['token'] = 'vimeo_feed'; // Token type
  // set the description for the feed, in case there is anything special
  // the user should do before or while entering the feed url.
  $info['vimeo_feed']['description'] = 'Create a url using the vimeo api: ' . l('http://developer.vimeo.com/apis/simple', 'http://developer.vimeo.com/apis/simple') . '<br />'
      . 'You can use any request that will output a list of <b>videos</b>.<br />'
      . 'Make sure you choose <b>json</b> as your output.<br />'
      . 'Example urls:<br />'
      . '<ul><li>http://vimeo.com/api/v2/macncheese/all_videos.json</li>'
      . '<li>http://vimeo.com/api/v2/channel/hdmusicvideos/videos.json</li></ul>';

  return $info;
}

/**
 * Implements hook_token_info().
 */
function feed_to_node_vimeo_token_info() {
  $type = array(
    'name' => t('Vimeo feed'),
    'description' => t('Tokens related to items in a vimeo feed.'),
    'needs-data' => 'vimeo_feed',
  );

  $feed = array();
  // Core tokens for nodes.
  $feed['id'] = array(
    'name' => t("Vimeo ID"),
    'description' => t("The unique ID of a vimeo video."),
  );

  $feed['title'] = array(
    'name' => t("Title"),
    'description' => t("Title of the video."),
  );

  $feed['description'] = array(
    'name' => t("Description"),
    'description' => t("Description of the video."),
  );

  $feed['url'] = array(
    'name' => t("Url"),
    'description' => t("Url of the video."),
  );

  $feed['mobile_url'] = array(
    'name' => t("Mobile url"),
    'description' => t("Url of the video for mobile."),
  );

  $feed['upload_date'] = array(
    'name' => t("Upload date"),
    'description' => t("Publish date of the video."),
    'type' => 'feed2node_date',
  );

  $feed['embed_video'] = array(
    'name' => t("Embedded video"),
    'description' => t("The embedded html video"),
  );

  $feed['embed_privacy'] = array(
    'name' => t("Embed privacy"),
    'description' => t("The restrictions that apply on the embedded video."),
  );

  $feed['thumbnail_small'] = array(
    'name' => t("Thumbnail small"),
    'description' => t("Video thumbnail small."),
  );

  $feed['thumbnail_medium'] = array(
    'name' => t("Thumbnail medium"),
    'description' => t("Video thumbnail medium."),
  );

  $feed['thumbnail_large'] = array(
    'name' => t("Thumbnail large"),
    'description' => t("Video thumbnail large."),
  );

  $feed['user_id'] = array(
    'name' => t("User ID"),
    'description' => t("The ID of the uploader."),
  );

  $feed['user_name'] = array(
    'name' => t("User name"),
    'description' => t("The name of the uploader."),
  );

  $feed['user_url'] = array(
    'name' => t("User url"),
    'description' => t("The url to the uploader's user page."),
  );

  $feed['user_portrait_small'] = array(
    'name' => t("User potrait small"),
    'description' => t("Potrait of the user small."),
  );

  $feed['user_portrait_medium'] = array(
    'name' => t("User potrait medium"),
    'description' => t("Potrait of the user medium."),
  );

  $feed['user_portrait_large'] = array(
    'name' => t("User potrait large"),
    'description' => t("Potrait of the user large."),
  );

  $feed['user_portrait_huge'] = array(
    'name' => t("User potrait huge"),
    'description' => t("Potrait of the user huge."),
  );

  $feed['stats_number_of_likes'] = array(
    'name' => t("Stats number of likes"),
    'description' => t("The current amount of likes."),
  );

  $feed['stats_number_of_plays'] = array(
    'name' => t("Stats amount of plays"),
    'description' => t("The current amount of plays."),
  );

  $feed['stats_number_of_comments'] = array(
    'name' => t("Stats amount of comments"),
    'description' => t("The current amount of comments"),
  );

  $feed['duration'] = array(
    'name' => t("Duration"),
    'description' => t("The length of the video in seconds."),
  );

  $feed['width'] = array(
    'name' => t("Width"),
    'description' => t("The width of the video."),
  );

  $feed['height'] = array(
    'name' => t("Height"),
    'description' => t("The height of the video."),
  );

  $feed['tags'] = array(
    'name' => t("Tags"),
    'description' => t("List of all the categories, sepperated by comma."),
  );

  return array(
    'types' => array('vimeo_feed' => $type),
    'tokens' => array('vimeo_feed' => $feed),
  );
}

/**
 * Implemtens hook_tokens().
 */
function feed_to_node_vimeo_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'vimeo_feed' && !empty($data['vimeo_feed'])) {
    $feed = $data['vimeo_feed'];

    foreach ($tokens as $name => $original) {
      $name = explode(':', $name, 2);
      switch ($name[0]) {
        case 'id':
          $replacements[$original] = $feed['id'];
          break;

        case 'upload_date':
          $date = $feed['upload_date'];
          if (!empty($name[1])) {
            $date = token_replace('[feed2node_date:' . $name[1] . ']', $data = array('feed2node_date' => $date));
          }
          $replacements[$original] = $date;
          break;

        case 'embed_video':
          $replacements[$original] = '<iframe src="//player.vimeo.com/video/' . $feed['id'] . '" class="vimeo_feed_video" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';
          break;

        default:
          $replacements[$original] = !empty($feed[$name[0]]) ? $feed[$name[0]] : '';
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Get list of item from the feed.
 * 
 * @param string $feed
 *   Feed contains the contents of the url that was callled.
 * 
 * @return array
 *   The function that calls this function expects an list of items.
 */
function feed_to_node_vimeo_parser($feed) {
  $data = drupal_json_decode($feed);

  $feed_items = $data;
  $items = array();
  foreach ($feed_items as $item) {
    $items[$item['id']] = $item;
  }

  return $items;
}

/**
 * If a filter is set, this filter will check if there is a match.
 * 
 * @param string $pattern
 *   Regular expression.
 * @param array $item
 *   The item of the feed, can be multiple layers deep.
 * 
 * @return boolean
 *   TRUE if there is a match, FALSE if there is no match.
 */
function feed_to_node_vimeo_filter($pattern, $item){
  // Check for a pattern and apply it if needed.
  if($pattern_is_regex=='1'){
    if (preg_match($pattern, $item['title'])) {
      return TRUE;
    }
  }else{
    if (strpos($item['title'], $pattern)!==false) {
      return TRUE;
    }
  }

  return FALSE;
}