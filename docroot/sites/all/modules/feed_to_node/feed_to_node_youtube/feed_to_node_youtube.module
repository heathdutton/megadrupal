<?php

/**
 * @file
 * Parsing of youtube api data(feed).
 */

/**
 * Implements hook_feed2node_info().
 * @desc This hook is needed to be able for users to pick this as 
 * there feed type.
 * Make sure the first layer of the array key is unique, 
 * in this case 'youtube_feed'.
 */
function feed_to_node_youtube_feed2node_info() {
  $info = array();

  $info['youtube_feed']['name'] = 'Youtube'; // Display name of the feed type
  $info['youtube_feed']['parser'] = 'feed_to_node_youtube_parser'; // The parser
  $info['youtube_feed']['filter'] = 'feed_to_node_youtube_filter'; // The regex filter
  // of the feed that will give the needed items in a array
  $info['youtube_feed']['token'] = 'youtube_feed'; // Token type
  // set the description for the feed, in case there is anything special
  // the user should do before or while entering the feed url.
  $info['youtube_feed']['description'] = 'Use one of the following urls and replace the square brackets:'
      . '<ul><li>'.l('https://www.youtube.com/feeds/videos.xml?user=[USERNAME]', 'https://www.youtube.com/feeds/videos.xml?user=youtube').'</li>'
      . '<li>'.l('https://www.youtube.com/feeds/videos.xml?playlist_id=[PLAYLISTID]', 'https://www.youtube.com/feeds/videos.xml?playlist_id=PLbpi6ZahtOH4nmpN2FHcmE0oSksFddMRx').'</li>'
      . '<li>'.l('https://www.youtube.com/feeds/videos.xml?channel_id=[CHANNELID]', 'https://www.youtube.com/feeds/videos.xml?channel_id=UCzuqhhs6NWbgTzMuM09WKDQ').'</li></ul>';

  return $info;
}

/**
 * Implements hook_token_info().
 */
function feed_to_node_youtube_token_info() {
  $type = array(
    'name' => t('Youtube feed'),
    'description' => t('Tokens related to items in a youtube feed.'),
    'needs-data' => 'youtube_feed',
  );

  $feed = array();
  // Core tokens for nodes.
  $feed['id'] = array(
    'name' => t("Youtube ID"),
    'description' => t("The unique ID of a youtube video."),
  );

  $feed['published'] = array(
    'name' => t("Published"),
    'description' => t("Published date of the video."),
    'type' => 'feed2node_date',
  );

  $feed['updated'] = array(
    'name' => t("Updated"),
    'description' => t("Updated date of the video."),
    'type' => 'feed2node_date',
  );

  $feed['title'] = array(
    'name' => t("Title"),
    'description' => t("Title of the video."),
  );

  $feed['description'] = array(
    'name' => t("Description"),
    'description' => t("Description of the video."),
  );

  $feed['embed_video'] = array(
    'name' => t("Embedded video"),
    'description' => t("The embedded html video"),
  );

  $feed['embed_url'] = array(
    'name' => t("Embedded url"),
    'description' => t("The url that can be used to embed youtube video's"),
  );

  $feed['embed_type'] = array(
    'name' => t("Embedded type"),
    'description' => t("The type of video that is gonna be embedded"),
  );

//  Not present anymore.  
//  $feed['length'] = array(
//    'name' => t("Video length"),
//    'description' => t("The duration of the video in seconds"),
//  );
  
  $feed['embed_height'] = array(
    'name' => t("Video player default height"),
    'description' => t("The height of the player in pixels"),
  );
  
  $feed['embed_width'] = array(
    'name' => t("Video player default width"),
    'description' => t("The width of the player in pixels"),
  );

  $feed['link'] = array(
    'name' => t("Video link"),
    'description' => t("The url to the youtube video page"),
  );

//  Not present anymore.  
//  $feed['link_comments'] = array(
//    'name' => t("Video comments link"),
//    'description' => t("The url to the youtube video comment page"),
//  );

//  $feed['link_uploader'] = array(
//    'name' => t("Uploader  link"),
//    'description' => t("The url to the youtube video uploaders page"),
//  );

  $feed['author_name'] = array(
    'name' => t("Author"),
    'description' => t("The name of the author of the youtube video."),
  );
  
  $feed['author_url'] = array(
    'name' => t("Author url"),
    'description' => t("The url to the youtube author page"),
  );

  $feed['thumbnail_url'] = array(
    'name' => t("Thumbnail url"),
    'description' => t("Thumbnail of video (height: 90, width: 120)"),
  );

  $feed['thumbnail_height'] = array(
    'name' => t("Thumbnail height"),
    'description' => t("Thumbnail height in pixels"),
  );

  $feed['thumbnail_width'] = array(
    'name' => t("Thumbnail width"),
    'description' => t("Thumbnail width in pixels"),
  );

  $feed['views'] = array(
    'name' => t("Views"),
    'description' => t("Number of views the video had"),
  );

  $feed['rating_count'] = array(
    'name' => t("Rating count"),
    'description' => t("The number of ratings it recieved"),
  );
  
  $feed['rating_average'] = array(
    'name' => t("Rating average"),
    'description' => t("The average rating score it recieved"),
  );

  return array(
    'types' => array('youtube_feed' => $type),
    'tokens' => array('youtube_feed' => $feed),
  );
}

/**
 * Implemtens hook_tokens().
 */
function feed_to_node_youtube_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'youtube_feed' && !empty($data['youtube_feed'])) {
    $feed = $data['youtube_feed'];

    foreach ($tokens as $name => $original) {
      $name = explode(':', $name, 2);
      switch ($name[0]) {
        case 'id':
          $replacements[$original] = $feed['id'];
          break;

        case 'published':
          $date = $feed['published'];
          if (!empty($name[1])) {
            $date = token_replace('[feed2node_date:' . $name[1] . ']', $data = array('feed2node_date' => $date));
          }
          $replacements[$original] = $date;
          break;

        case 'updated':
          $date = $feed['updated'];
          if (!empty($name[1])) {
            $date = token_replace('[feed2node_date:' . $name[1] . ']', $data = array('feed2node_date' => $date));
          }
          $replacements[$original] = $date;
          break;

        case 'updated_unix':
          $replacements[$original] = strtotime($feed['updated']);
          break;

        case 'title':
          $replacements[$original] = $feed['title'];
          break;

        case 'description':
          $replacements[$original] = $feed['description'];
          break;

        case 'embed_video':
          $id = $feed['id'];
          $replacements[$original] = '<iframe width="560" height="315" class="feed-to-node-youtube-embed" src="//www.youtube.com/embed/' . $id . '" frameborder="0" allowfullscreen></iframe>';
          break;
        
        case 'embed_url':
          $replacements[$original] = $feed['embed_url'];
          break;
        case 'embed_type':
          $replacements[$original] = $feed['embed_type'];
          break;
        case 'embed_height':
          $replacements[$original] = $feed['embed_height'];
          break;
        case 'embed_width':
          $replacements[$original] = $feed['embed_width'];
          break;
//        Not present anymore
//        case 'length':
//          $replacements[$original] = $feed['media$group']['media$content'][0]['duration'];
//          break;

        case 'link':
          $replacements[$original] = $feed['link'];
          break;
        
//        Not present anymore
//        case 'link_comments':
//          $replacements[$original] = $feed['link'][1]['href'];
//          break;

//        case 'link_uploader':
//          $replacements[$original] = !empty($feed['link'][4]['href']) ? $feed['link'][4]['href'] : '';
//          break;

        case 'author_name':
          $replacements[$original] = $feed['author_name'];
          break;
        case 'author_url':
          $replacements[$original] = $feed['author_url'];
          break;

        case 'thumbnail_url':
          $replacements[$original] = $feed['thumbnail_url'];
          break;

        case 'thumbnail_height':
          $replacements[$original] = $feed['thumbnail_height'];
          break;

        case 'thumbnail_width':
          $replacements[$original] = $feed['thumbnail_width'];
          break;
        
        case 'views':
          $replacements[$original] = $feed['views'];
          break;

        case 'rating_count':
          $replacements[$original] = $feed['rating_count'];
          break;

        case 'rating_average':
          $replacements[$original] = $feed['rating_average'];
          break;
        

//        Not present anymore
//        case 'category_labels':
//          $categorie = '';
//          if (!empty($feed['media$group']['media$category'])) {
//            foreach ($feed['media$group']['media$category'] as $cat) {
//              $categories[] = $cat['label'];
//            }
//            $categorie = implode(',', $categories);
//          }
//          $replacements[$original] = $categorie;
//          break;
//
//        case 'category_terms':
//          $categorie = '';
//          if (!empty($feed['media$group']['media$category'])) {
//            foreach ($feed['media$group']['media$category'] as $cat) {
//              $categories[] = $cat['$t'];
//            }
//            $categorie = implode(',', $categories);
//          }
//          $replacements[$original] = $categorie;
//          break;
      }
    }
  }
  return $replacements;
}

/**
 * Get list of item from the feed.
 * 
 * @param string $feed
 *   Feed contains the contents of the url that was callled.
 * 
 * @return array
 *   The function that calls this function expects an list of items.
 */
//function feed_to_node_youtube_parser($feed) {
//  $data = drupal_json_decode($feed);
//  $feed_items = !empty($data['feed']['entry']) ? $data['feed']['entry'] : array();
//  $items = array();
//  foreach ($feed_items as $item) {
//    $items[$item['id']['$t']] = $item;
//  }
//
//  return $items;
//}

function feed_to_node_youtube_parser($feed) {
  $data = new SimpleXmlElement($feed, LIBXML_NOCDATA);

  $items = array();
  $count = 0;
  if(!empty($data->channel->item)){
    $data_item = $data->channel->item;
  }else{
    $data_item = $data->entry;
  }

  foreach ($data_item as $item) {
           
    $yt = $item->children("yt", true);
    $media = $item->children("media", true);
    $item = (array) $item;

    if(!empty($yt->videoId) ){
      $key = (string)$yt->videoId;
      $item['id'] = (string)$yt->videoId;
    }elseif(!empty($item['id']) ){
      $key = $item['id'];
    }elseif(!empty($item['link'])){
      $key = $item['link'];
    }else{
      $key = $count;
    }

    $link = (array)$item['link'];
    if(!empty($link) ){
      $item['link'] = $link['@attributes']['href'];
    }
    
    $author = (array)$item['author'];
    if(!empty($author) ){
      $item['author_name'] = $author['name'];
      $item['author_url'] = $author['uri'];
    }
    unset($item['author']);

    $group = $media->group;    
    if(!empty($group)){
      $item['description'] = (string)$media->group->description;
    }
    
    $embed = (array)$group->content->attributes();
    if(!empty($embed) ){
      $item['embed_url'] = $embed['@attributes']['url'];
      $item['embed_type'] = $embed['@attributes']['type'];
      $item['embed_height'] = $embed['@attributes']['height'];
      $item['embed_width'] = $embed['@attributes']['width'];
    }
    
    $thumbnail = (array)$group->thumbnail->attributes();
    if(!empty($thumbnail) ){
      $item['thumbnail_url'] = $thumbnail['@attributes']['url'];
      $item['thumbnail_height'] = $thumbnail['@attributes']['height'];
      $item['thumbnail_width'] = $thumbnail['@attributes']['width'];
    }
    
    $statistics = $group->community->statistics->attributes();
    if(!empty($statistics) ){
      $item['views'] = (string)$statistics;
    }
    
    $starRating = (array)$group->community->starRating->attributes();
    if(!empty($starRating) ){
      $item['rating_count'] = $starRating['@attributes']['count'];
      $item['rating_average'] = $starRating['@attributes']['average'];
    }
    
    $items[$key] = (array) $item;
    $count++;
  }
  // Turn them around so we got the latest item on top.
  $items = array_reverse($items, TRUE);

  return $items;
}

/**
 * If a filter is set, this filter will check if there is a match.
 * 
 * @param string $pattern
 *   Patttern
 * @param string $pattern_is_regex
 *   Pattern is Regular expression, TRUE of FALSE.
 * @param array $item
 *   The item of the feed, can be multiple layers deep.
 * 
 * @return boolean
 *   TRUE if there is a match, FALSE if there is no match.
 */
function feed_to_node_youtube_filter($pattern, $pattern_is_regex, $item){
  // Check for a pattern and apply it if needed.
  if($pattern_is_regex=='1'){
    if (preg_match($pattern, $item['title'])) {
      return TRUE;
    }
  }else{
    if (strpos($item['title'], $pattern)!==false) {
      return TRUE;
    }
  }

  return FALSE;
}