<?php

/**
 * @file
 * Reading feeds, browseable UI, implements Tokens, handles hooks for parsers
 */

/**
 * Implements hook_permission().
 */
function feed_to_node_permission() {
  return array(
      'administer feed to node' => array(
          'title' => t('Manage Feed to Node'),
          'description' => t('Manage feeds, create template nodes and view overviews of nodes created by specific feeds'),
      ),
  );
}

/**
 * Implements hook_menu().
 */
function feed_to_node_menu() {
  $items = array();

  $items['getfeed'] = array(
      'title' => 'Import video feeds',
      'description' => 'Import products from CSV File',
      'page callback' => 'feed_to_node_read',
      'access arguments' => array('administer feed to node'),
      'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/feedtonode'] = array(
      'title' => 'Manage feeds to nodes',
      'description' => 'Add and manage your feeds to nodes',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('feed_to_node_admin_setup_feeds_form'),
      'access arguments' => array('administer feed to node'),
      'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/content/feedtonode/feed'] = array(
      'title' => 'Feeds',
      'description' => 'Add and manage your feeds to nodes',
      'page callback' => 'feed_to_node_admin_setup_feed',
      'access arguments' => array('administer feed to node'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/content/feedtonode/config'] = array(
      'title' => 'Config',
      'description' => 'Add and manage your feeds',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('feed_to_node_admin_setup_feed_config'),
      'access arguments' => array('administer feed to node'),
      'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/content/feedtonode/add'] = array(
      'title' => 'Add feed to node',
      'description' => 'Add and manage your feeds',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('feed_to_node_admin_setup_feed_form'),
      'access arguments' => array('administer feed to node'),
      'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/content/feedtonode/run'] = array(
      'title' => 'Run feeds',
      'description' => 'Run al the feeds that are active',
      'page callback' => 'feed_to_node_read',
      'access arguments' => array('administer feed to node'),
      'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/content/feedtonode/edit/%'] = array(
      'title' => 'Edit feed to node',
      'description' => 'Manage your feed',
      'page callback' => 'feed_to_node_admin_setup_feed_edit',
      'page arguments' => array(5),
      'access arguments' => array('administer feed to node'),
      'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/content/feedtonode/edit/%/edit'] = array(
      'title' => 'Edit feed to node',
      'description' => 'Manage your feed',
      'page callback' => 'feed_to_node_admin_setup_feed_edit',
      'page arguments' => array(5),
      'access arguments' => array('administer feed to node'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 5,
  );

  $items['admin/config/content/feedtonode/edit/%/list'] = array(
      'title' => 'Feed List',
      'description' => 'An overview of all nodes created by the feed',
      //'page callback' => 'feed_to_node_admin_setup_feed_list',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('feed_to_node_admin_setup_feed_list', 5),
      //'page arguments' => array(5),
      'access arguments' => array('administer feed to node'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
  );

  $items['admin/config/content/feedtonode/edit/%/run'] = array(
      'title' => 'Run Feed',
      'description' => 'Runs the current feed',
      'page callback' => 'feed_to_node_read',
      'page arguments' => array(5),
      'access arguments' => array('administer feed to node'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 15,
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function feed_to_node_cron() {
  // Read the entered feeds and create nodes where needed.
  feed_to_node_read();
}

/**
 * Show a list of all available feeds. (deprecated)
 * 
 * @return string
 *   Return table of available feeds.
 */
function feed_to_node_admin_setup_feed() {
  $result = db_select('feed_to_node', 's')
          ->fields('s')
          ->execute();
  $parsers = feed_to_node_get_parsers_names();
  $feeds = array();
  while ($record = $result->fetchAssoc()) {
    $feed['name'] = l($record['name'], current_path() . '/edit/' . $record['fid'] . '/edit');
    $feed['parser'] = !empty($parsers[$record['parser']]) ? $parsers[$record['parser']] : t('Parser not found');
    $feed['nid'] = l($record['nid'], 'node/' . $record['nid'] . '/edit');
    $feed['active'] = $record['active'] == '1' ? t('active') : t('inactive');
    $feed['updated_on'] = $record['updated_on'] == 0 ? t('never') : date('H:i m-d-Y', $record['updated_on']);
    $feeds[] = $feed;
  }

  $header = array(
      'name' => t('Feed name'),
      'parser' => t('Parser'),
      'nid' => t('Node ID'),
      'active' => t('Status'),
      'updated_on' => t('Last update'),
  );
  $rows = $feeds;
  $attributes = array();

  $table = array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => $attributes,
      'sticky' => FALSE,
      'caption' => NULL,
      'colgroups' => NULL,
      'empty' => NULL,
  );
  $list = theme('table', $table);

  return $list;
}

/**
 * Menu callback: Manage feeds to nodes
 * 
 * @param array $from
 * @param array $form_state
 * 
 * @return array
 *   return drupal form elements.
 */
function feed_to_node_admin_setup_feeds_form($from, $form_state) {

  $header = array(
      'name' => t('Feed name'),
      'parser' => t('Parser'),
      'nid' => t('Node ID'),
      'active' => t('Status'),
      'updated_on' => t('Last update'),
  );

  $result = db_select('feed_to_node', 's')->extend('PagerDefault')->extend('TableSort')
          ->fields('s')
          ->limit(50)
          ->orderByHeader($header)
          ->execute();
  $parsers = feed_to_node_get_parsers_names();
  $feeds = array();
  while ($record = $result->fetchAssoc()) {
    $feed['name'] = l($record['name'], current_path() . '/edit/' . $record['fid'] . '/edit');
    $feed['parser'] = !empty($parsers[$record['parser']]) ? $parsers[$record['parser']] : t('Parser not found');
    $feed['nid'] = l($record['nid'], 'node/' . $record['nid'] . '/edit');
    $feed['active'] = $record['active'] == '1' ? t('active') : t('inactive');
    $feed['updated_on'] = $record['updated_on'] == 0 ? t('never') : date('H:i m-d-Y', $record['updated_on']);
    $feeds[$record['fid']] = $feed;
  }

  $form['activate'] = array(
      '#type' => 'submit',
      '#value' => t('Activate'),
      '#submit' => array('feed_to_node_admin_setup_feeds_form_activate'),
  );

  $form['deactivate'] = array(
      '#type' => 'submit',
      '#value' => t('Deactivate'),
      '#submit' => array('feed_to_node_admin_setup_feeds_form_deactivate'),
  );

  $form['run'] = array(
      '#type' => 'submit',
      '#value' => t('Run'),
      '#submit' => array('feed_to_node_admin_setup_feeds_form_run'),
  );

  $form['feeds'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $feeds,
      '#empty' => t('No feeds found.'),
  );

  $form['pager'] = array('#markup' => theme('pager'));

  return $form;
}

/**
 * Form submit to activate a list of feeds
 */
function feed_to_node_admin_setup_feeds_form_activate($from, $form_state) {
  $values = $form_state['values'];
  $count = 0;
  foreach ($values['feeds'] as $fid) {
    if ($fid) {
      $count++;
      feed_to_node_update($fid, array('active' => 1));
    }
  }
  drupal_set_message(t('%amount feeds activated', array('%amount' => $count)));
}

/**
 * Form submit to deactivate a list of feeds
 */
function feed_to_node_admin_setup_feeds_form_deactivate($from, $form_state) {
  $values = $form_state['values'];
  $count = 0;
  foreach ($values['feeds'] as $fid) {
    if ($fid) {
      $count++;
      feed_to_node_update($fid, array('active' => 0));
    }
  }
  drupal_set_message(t('%amount feeds deactivated', array('%amount' => $count)));
}

/**
 * Form submit to run a list of feeds
 */
function feed_to_node_admin_setup_feeds_form_run($from, $form_state) {
  $values = $form_state['values'];
  $count = 0;
  foreach ($values['feeds'] as $fid) {
    if ($fid) {
      $count++;
      feed_to_node_read($fid);
    }
  }
  drupal_set_message(t('%amount feeds run', array('%amount' => $count)));
}

/**
 * Call feed_to_node_admin_setup_feed_form to edit the feed.
 * 
 * @param int $fid
 *   Feed ID.
 * 
 * @return string
 *   Return edit/add form for feeds.
 */
function feed_to_node_admin_setup_feed_edit($fid) {

  $feed = feed_to_node_load_feed($fid);

  drupal_set_title(t('<em>Edit @name</em>', array('@name' => $feed['name'])), PASS_THROUGH);
  return drupal_get_form('feed_to_node_admin_setup_feed_form', $feed);
}

/**
 * Show list of available feeds.
 * 
 * @param int $fid
 *   Feed id.
 * 
 * @return string
 *   Returns html table of all the feeds.
 */
function feed_to_node_admin_setup_feed_list($form, &$form_state, $fid = NULL) {

  // Check if we asking for confirmation, 
  // otherwise show nodes linked to this feed.
  if ( isset( $form_state['storage'] ) && $form_state['storage']['ask_confirm'] ) {
     
    $question = t( "Are you sure you want to delete these nodes" );
    
    $nodes = array();
    foreach($form_state['values']['nodes'] as $nid){
      $form['nodes']['#tree'] = TRUE;
      if(!empty($nid)){
        $node = node_load($nid);
        
        $form['nodes'][$nid] = array('#type'=>'hidden', '#value' => $nid);
        $nodes[] = $node->title;
      }
    }
    $title = '';
    $type = 'ul';
    $attributes = array(
      'id' => 'feed_to_node_delete_nodes',
      'class' => 'feed-to-node-delete-nodes',
    );
    $description = theme_item_list(array('items' => $nodes, 'title' => $title, 'type' => $type, 'attributes' => $attributes));
    
    $path = url('/admin/config/content/feedtonode/edit/%fid/list', array('%fid'=>$form_state['complete form']['#fid']));//'feed_to_node_admin_setup_feed_list_delete';

    $yes = t( "Confirm" );
    $no = t( "Cancel" );
    
    $form = confirm_form( $form, $question, $path, $description, $yes, $no );
    $form['actions']['submit']['#submit'] = array('feed_to_node_admin_setup_feed_list_delete');

    return $form;
  }else{
    $header = array(
      'nid' => t('Node ID'),
      'title' => t('Title'),
      'status' => t('Status'),
      'operations' => t('Operations'),
    );

    $query = db_select('feed_to_node_item', 's')
            ->fields('s', array('nid'))
            ->condition('fid', $fid)
            ->extend('PagerDefault')
            ->extend('TableSort')
            ->limit(30);

    $query->join('node', 'n', 's.nid = n.nid');
    $query->fields('n', array('title','status'));
    $query->orderBy('n.nid', 'DESC');

    $result = $query->execute();

    $parsers = feed_to_node_get_parsers_names();
    $feeds = array();
    while ($record = $result->fetchAssoc()) {
      $feed['nid'] = $record['nid'];
      $feed['title'] = l($record['title'], 'node/' . $record['nid']);
      $feed['status'] = $record['status'] == '1' ? t('published') : t('not published');
      $feed['operations'] = l(t('edit'), 'node/' . $record['nid'] . '/edit').' '.l(t('delete'), 'node/' . $record['nid'] . '/delete');
      $feeds[$record['nid']] = $feed;
    }

    $form['#fid'] = $fid;

    $form['publish'] = array(
        '#type' => 'submit',
        '#value' => t('Publish'),
        '#submit' => array('feed_to_node_admin_setup_feed_list_publish'),
    );

    $form['unpublish'] = array(
        '#type' => 'submit',
        '#value' => t('Unpublish'),
        '#submit' => array('feed_to_node_admin_setup_feed_list_unpublish'),
    );

    $form['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#submit' => array('feed_to_node_admin_setup_feed_list_delete'),
    );

    $form['nodes'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $feeds,
        '#empty' => t('No feeds found.'),
    );

    $form['pager'] = array('#markup' => theme('pager'));

    return $form;
  }
}

/**
 * hook Form submit to update node status to published
 * @param type $from
 * @param type $form_state
 */
function feed_to_node_admin_setup_feed_list_publish($form, $form_state) {
  $values = $form_state['values'];
  $count = 0;
  
  $query = db_update('node');
  $update_fields = array();

  foreach ($values['nodes'] as $nid) {
    if ($nid) {
      $count++;
      $update_fields[$nid] = $nid;
    }
  }
  
  $query->fields(array('status' => 1,));
  $query->condition('nid', $update_fields, 'IN');

  $nodes_updated = $query->execute();
  
  drupal_set_message(t('%amount nodes set to published', array('%amount' => $count)));
}

/**
 * hook Form submit to update node status to unpublished
 * @param type $from
 * @param type $form_state
 */
function feed_to_node_admin_setup_feed_list_unpublish($form, $form_state) {
  $values = $form_state['values'];
  $count = 0;
  
  $query = db_update('node');
  $update_fields = array();

  foreach ($values['nodes'] as $nid) {
    if ($nid) {
      $count++;
      $update_fields[$nid] = $nid;
    }
  }
  
  $query->fields(array('status' => 0,));
  $query->condition('nid', $update_fields, 'IN');

  $nodes_updated = $query->execute();
  
  drupal_set_message(t('%amount nodes set to published', array('%amount' => $count)));
}

/**
 * hook Form submit to update node status to unpublished
 * @param type $from
 * @param type $form_state
 */
function feed_to_node_admin_setup_feed_list_delete_confirm($form, &$form_state) {

  return confirm_form ($form, 'Are you sure?', url('/admin/config/content/feedtonode/edit/%fid/list', array('%fid'=>$form['#fid'])), null, t('Delete'));

}

/**
 * hook Form submit to update node status to unpublished
 * @param type $from
 * @param type $form_state
 */
function feed_to_node_admin_setup_feed_list_delete($form, &$form_state) {
   if ( $form_state['clicked_button']['#value'] == 'Delete' ) {
    $form_state['rebuild'] = TRUE;
    $form_state['storage']['ask_confirm'] = TRUE;
  }elseif ( isset( $form_state['values']['confirm'] ) && $form_state['values']['confirm'] ){
    $values = $form_state['values'];
    $count = 0;

    foreach ($values['nodes'] as $nid) {
      if ($nid) {
        $count++;
        node_delete($nid);
      }
    }

    drupal_set_message(t('%amount nodes are deleted', array('%amount' => $count)));
  }

}

/**
 * Config form to setup the feeds.
 * 
 * @param array $form
 *   Drupal Form array.
 * @param array $form_state
 *   Drupal Form state array.
 */
function feed_to_node_admin_setup_feed_config($form, $form_state) {
  $types = node_type_get_names();

  $form['feed_to_node_content_types'] = array(
      '#type' => 'checkboxes',
      '#options' => $types,
      '#default_value' => variable_get('feed_to_node_content_types', array()),
      '#title' => t('Choose content types'),
      '#description' => t('Choose content types you want to be able to use as a template for your feeds. The selected content type(s) will show the available tokens that can be used in the node fields. Also the node edit will show the node ID.'),
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit',
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function feed_to_node_admin_setup_feed_config_submit($form, $form_state) {
  variable_set('feed_to_node_content_types', $form_state['values']['feed_to_node_content_types']);
  drupal_set_message(t('Content type(s) are set.'));
}

/**
 * A form for adding or editing a feed.
 * 
 * @param array $form
 *   Drupal Form array.
 * @param array $form_state
 *   Drupal Form state array.
 * @param array $feed
 *   Feed is an array of the current feed being edited, empty for new feed.
 * 
 * @return array
 *   Return form elements. 
 */
function feed_to_node_admin_setup_feed_form($form, $form_state, $feed = NULL) {

  $form['fid'] = array(
      '#type' => 'hidden',
      '#default_value' => !empty($feed['fid']) ? $feed['fid'] : '',
  );

  $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Feed name'),
      '#default_value' => !empty($feed['name']) ? $feed['name'] : '',
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );

  $parsers_list = feed_to_node_get_parsers_names();
  $parsers_list[''] = 'test';
  $form['parser'] = array(
      '#type' => 'select',
      '#title' => t('Parser'),
      '#options' => $parsers_list,
      '#default_value' => !empty($feed['parser']) ? $feed['parser'] : '',
      '#required' => TRUE,
      '#empty_option' => 'choose a parser',
      '#description' => t('Choose the parser you need, the parser is need in order to comfort a feed to nodes.'),
  );

  // Create an onchange effect to show the right description
  // when entering the feed.
  $js = "jQuery(document).ready(function(){"
          . " jQuery('#edit-parser').change(function() { "
          . "   jQuery('#parser-description span').hide('fast'); "
          . "   jQuery('#parser-description-'+jQuery(this).val()).show('fast'); "
          . " });"
          . "});";

  drupal_add_js($js, array('type' => 'inline'));

  $parsers_descriptions = feed_to_node_get_parsers_descriptions();
  $description = '<div id="parser-description">';
  foreach ($parsers_descriptions as $parser => $parsers_description) {
    $style = '';
    if ($feed['parser'] != $parser) {
      $style = 'display:none;';
    }
    $description .= '<span id="parser-description-' . $parser . '" style="' . $style . '">' . $parsers_description . '</span>';
  }
  $description .= '</div>';

  $form['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Feed url'),
      '#description' => $description,
      '#default_value' => !empty($feed['url']) ? $feed['url'] : '',
      '#size' => 60,
      '#maxlength' => 250,
      '#required' => TRUE,
  );
  
  $form['pattern'] = array(
      '#type' => 'textfield',
      '#description' => 'Give a pattern to only load items that match the given pattern.',
      '#default_value' => !empty($feed['pattern']) ? $feed['pattern'] : '',
      '#size' => 60,
      '#maxlength' => 250,
      '#title' => t('Filter pattern'),
      '#required' => FALSE,
  );
  
  $form['pattern_is_regex'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pattern is a regular expression'),
      '#default_value' => !empty($feed['pattern_is_regex']) ? $feed['pattern_is_regex'] : '',
  );

  $form['nid'] = array(
      '#type' => 'textfield',
      '#description' => 'Give the node ID that acts as a template, make sure the node contains the replacement tokens in the fields you want filled with info from the feed.',
      '#default_value' => !empty($feed['nid']) ? $feed['nid'] : '',
      '#size' => 5,
      '#maxlength' => 250,
      '#title' => t('Node id for template'),
      '#required' => TRUE,
  );

  $form['published'] = array(
      '#type' => 'checkbox',
      '#title' => t('Always published'),
      '#default_value' => !empty($feed['published']) ? $feed['published'] : '',
      '#description' => 'This option will make sure all nodes created from this feed will be published even if the template isn\'t published',
  );

  $form['active'] = array(
      '#type' => 'checkbox',
      '#title' => t('Active'),
      '#default_value' => !empty($feed['active']) ? $feed['active'] : '',
      '#description' => 'Activate or deactivate your feed, only active feeds will be run by the drupal cron.',
  );

  $form['update_node'] = array(
      '#type' => 'checkbox',
      '#title' => t('Update nodes'),
      '#default_value' => !empty($feed['update_node']) ? $feed['update_node'] : '',
      '#description' => 'This option will also update existing nodes and overwrite the old data. CAREFULL changes made by hand can be lost ofter an update. ',
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit',
  );
  

  if (!empty($feed['fid'])) {
    $form['delete'] = array(
        '#type' => 'submit',
        '#value' => 'Delete',
        '#submit' => array('feed_to_node_admin_setup_feed_form_delete'),
    );
  }
  return $form;
}

/**
 * Implements hook_form_validate().
 */
function feed_to_node_admin_setup_feed_form_validate($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  if (empty($node)) {
    form_set_error('nid', t("The node id entered can't be found."));
  }
}

/**
 * Implements hook_form_submit().
 */
function feed_to_node_admin_setup_feed_form_submit($form_id, &$form_state) {
  $values = $form_state['values'];

  if (empty($values['fid'])) {
    $fid = feed_to_node_insert($values['name'], $values['url'], $values['nid'], $values['published'], $values['parser'], $values['active'], $values['update_node'], $values['pattern'], $values['pattern_is_regex']);

    if (!empty($fid)) {
      drupal_set_message(t('Feed added using node %nid as template.', array('%nid' => $values['nid'])));
    }
  } else {
    $feed = $values;
    feed_to_node_update($values['fid'], $feed);
    drupal_set_message(t('Feed updated using node %nid as template.', array('%nid' => $values['nid'])));
  }

  drupal_goto('admin/config/content/feedtonode');
}

/**
 * Delete the feed.
 * 
 * @param int $form_id
 *   Form ID
 * @param array $form_state
 *   Form values that have been send
 */
function feed_to_node_admin_setup_feed_form_delete($form_id, &$form_state) {
  $values = $form_state['values'];

  if (!empty($values['fid'])) {
    feed_to_node_delete($values['fid']);
    drupal_set_message(t('Feed deleted.'));
    drupal_goto('admin/config/content/feedtonode');
  } else {
    drupal_set_message(t("couldn't delete the feed, maybe it's allready deleted?."), 'error');
  }
}

/**
 * Implements hook_form_alter().
 */
function feed_to_node_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE) {

    $content_types = variable_get('feed_to_node_content_types');
    $type = $form['type']['#value'];

    $parsers = feed_to_node_load_parsers();

    if (!empty($content_types[$type]) && !empty($parsers)) {
      //set extra field so users can set token where images need to be uploaded
      $form = feed_to_node_set_image_token_fields($form, $type);

      // We found a match, so we can add some token info to the form.
      if (!empty($form['nid']['#value'])) {
        $form['node_id']['#markup'] = 'Node id: ' . $form['nid']['#value'] . ' (Use the node ID to identify the template when creating the feed)';
        $form['node_id']['#weight'] = -20;
      }

      $tokens = array();
      foreach ($parsers as $parser) {
        $tokens[] = $parser['token'];
      }
      // Implementation of Tokens for Node forms.
      $form['tokens'] = array(
          '#theme' => 'token_tree',
          '#token_types' => $tokens,
          '#global_types' => FALSE,
          '#click_insert' => TRUE,
      );

      //add a field so when we go to node_validate we will only check the nodes 
      //that potentially need to be checked for tokens
      $form['#feed_to_node_date'] = TRUE;

      if (!empty($form['nid']['#value'])) {
        $form['author']['date']['#default_value'] = feed_to_node_load_date_token($form['nid']['#value']);
      }
    }
  }


  if ($form_id == 'node_delete_confirm') {
    $result = db_select('feed_to_node', 'f')
            ->fields('f', array('fid', 'name', 'nid'))
            ->condition('nid', $form['nid']['#value'])
            ->execute();
    $feeds = array();
    foreach ($result as $row) {
      $feeds[] = l($row->name, 'admin/config/content/feedtonode/edit/' . $row->fid . '/edit');
    }

    if (!empty($feeds)) {
      $form['description']['#markup'] = '<p>' . t('This node is used for feeds, remove the feed first before deleting this node.') . '</p>' . theme('item_list', array('items' => $feeds));
      unset($form['actions']['submit']);
    }
  }

  // Check if multiple nodes are deleted.
  if ($form_id == 'node_admin_content' && in_array('node_multiple_delete_confirm_submit', $form['#submit'])) {
    // If true check if one or more are used for feeds.
    $nodes = array();
    foreach ($form['nodes'] as $key => $val) {
      if (is_numeric($key)) {
        $nodes[$key] = $key;
      }
    }

    $result = db_select('feed_to_node', 'f')
            ->fields('f', array('fid', 'name', 'nid'))
            ->condition('nid', $form_state['values']['nodes'], 'IN')
            ->execute();

    // Remove the node from the list, feed needs to be deleted first.
    foreach ($result as $row) {
      $msg = str_replace('</li>', ' ' . t('cannot be deleted because it is used for feed:') . ' ' . l($row->name, '/admin/config/content/feedtonode/edit/' . $row->fid . '/edit'), $form['nodes'][$row->nid]['#suffix']);
      drupal_set_message($msg, 'error');
      unset($form['nodes'][$row->nid]);
    }
  }
}

/**
 * Implements hook_node_validate.
 * 
 * Here we check if the date field contains a token field,
 * If so we will save this field so it can be used when a import is done.
 * 
 * @param object $node
 *   Node object.
 * @param array $form
 * @param array $form_state
 */
function feed_to_node_node_validate($node, &$form, &$form_state) {

  if (!empty($form['#feed_to_node_date']) && !empty($form_state['values']['date'])) {

    $date = trim($form_state['values']['date']);

    if (feed_to_node_value_is_token($date) == TRUE) {
      $form_state['values']['feed_to_node_date'] = $date;
      $form_state['values']['date'] = '';
      $form['author']['date']['#value'] = '';
      $node->feed_to_node_date = $date;
      $node->date = null;
      feed_to_node_clear_field_error('date');
    }
  }
}

/**
 * Function to clear a specific field error message
 * @param type $form
 * @param type $form_state
 */
function feed_to_node_clear_field_error($field) {
  $errors = form_get_errors();
  if ($errors) {
    // Clear errors.
    form_clear_error();
    // Clear error messages.
    $error_messages = drupal_get_messages('error');
    // Initialize an array where removed error messages are stored.
    $removed_messages = array();


    // Remove all errors originated by the 'foo][bar' element.
    foreach ($errors as $name => $error_message) {
      if ($name == $field) {
        $removed_messages[] = $error_message;
        unset($errors[$name]);
      }
    }


    // Reinstate remaining errors.
    foreach ($errors as $name => $error) {
      form_set_error($name, $error);
      // form_set_error() calls drupal_set_message(), so we have to filter out
      // these from the error messages as well.
      $removed_messages[] = $error;
    }


    // Reinstate remaining error messages (which, at this point, are messages that
    // were originated outside of the validation process).
    foreach (array_diff($error_messages['error'], $removed_messages) as $message) {
      drupal_set_message($message, 'error');
    }
  }
}

/**
 * Check if value has a match with an existing token.
 * 
 * @param string $value
 *   The value that needs to be checks.
 * 
 * @return boolean
 *   Returns TRUE if a match is found, FALSE otherwise.
 */
function feed_to_node_value_is_token($value) {

  $parsers = feed_to_node_load_parsers();

  $tokens = array();
  foreach ($parsers as $parser) {
    $tokens = feed_to_node_extract_tokens($parser['token']);

    foreach ($tokens as $token) {
      if ($token == $value) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Retrieve all the image upload fields in the form
 * 
 * @param string $type
 *   Node content type.
 * 
 * @return array
 *   Returns an array of fields.
 */
function feed_to_node_get_image_fields($type) {
  static $fields_info;

  if (empty($fields_info)) {
    $fields_info = field_info_instances('node', $type);
  }

  $list = array();
  foreach ($fields_info as $field_name => $field_info) {
    if (!empty($field_info['widget']) && $field_info['widget']['type'] == 'image_image') {
      $list[$field_name] = $field_info;
    }
  }

  return $list;
}

/**
 * Set extra form fields to be able to upload files where the url is build using tokens
 * 
 * @param array $form
 *   Drupal form.
 * @param string $type
 *   Node content type.
 * 
 * @return array
 *   Returns a modified drupal form.
 */
function feed_to_node_set_image_token_fields($form, $type) {
  $fields = feed_to_node_get_image_fields($type);

  if (!empty($form['#node'])) {
    $node = $form['#node'];
  }
  foreach ($fields as $field_name => $field_info) {
    $feed_to_node_field_name = feed_to_node_set_field_name($field_name);
    $form[$feed_to_node_field_name] = array(
        '#type' => 'textfield',
        '#title' => t('%label feed to node token field', array('%label' => $field_info['label'])),
        '#description' => t('This fields allows you to enter a token that will be used to download an image to your website, instead of using the file upload function'),
        '#default_value' => !empty($node->$feed_to_node_field_name) ? $node->$feed_to_node_field_name : '',
        '#size' => 60,
        '#weight' => !empty($form[$field_name]['#weight']) ? $form[$field_name]['#weight'] : 0,
        '#maxlength' => 250,
    );
  }

  return $form;
}

/**
 * Implements hook_node_insert().
 */
function feed_to_node_node_insert($node) {
  // Save File field token 
  feed_to_node_save_file_fields($node);
  // Save datefield if it contains a token
  feed_to_node_save_date_field($node);
}

/**
 * Implements hook_node_update().
 */
function feed_to_node_node_update($node) {
  // Save File field token 
  feed_to_node_save_file_fields($node);
  // Save datefield if it contains a token
  feed_to_node_save_date_field($node);
}

/**
 * Implements hook_node_delete().
 */
function feed_to_node_node_delete($node) {
  feed_to_node_item_delete($node->nid);
  feed_to_node_delete_file_fields($node->nid);
  feed_to_node_delete_date_field($node->nid);
}

/**
 * Implements hook_node_load.
 * Here file field tokens are loaded in the node again.
 */
function feed_to_node_node_load($nodes, $types) {

  $query = db_select('feed_to_node_file_field', 'f')
          ->fields('f')
          ->condition('nid', array_keys($nodes), 'IN')
          ->execute();

  // Add our extra data to the node objects.
  while ($record = $query->fetchAssoc()) {
    $feed_to_node_field_name = feed_to_node_set_field_name($record['field_name']);
    $nodes[$record['nid']]->$feed_to_node_field_name = $record['value'];
  }
}

/**
 * Get date token if any is found.
 * 
 * @param int $nid
 *   Node ID.
 * 
 * @return mixed
 *   Returns token or FALSE if none is found.
 */
function feed_to_node_load_date_token($nid) {
  $query_date = db_select('feed_to_node_date', 'f')
          ->fields('f')
          ->condition('nid', $nid)
          ->execute();

  while ($record = $query_date->fetchAssoc()) {
    return $record['value'];
  }

  return FALSE;
}

/**
 * Set the field name so it can be easily found.
 * 
 * @param string $field_name
 *   The name of the file field.
 * 
 * @return string
 *   Returns the name that needs to be used for the token field.
 */
function feed_to_node_set_field_name($field_name) {
  $feed_to_node_field_name = 'feed_to_node_' . $field_name;

  return $feed_to_node_field_name;
}

/**
 * Save image fields that may have a token connected to it.
 * 
 * @param object $node
 *   The node object.
 */
function feed_to_node_save_file_fields($node) {

  feed_to_node_delete_file_fields($node->nid);

  $fields = feed_to_node_get_image_fields($node->type);

  foreach ($fields as $field_name => $field_info) {
    $feed_to_node_field_name = feed_to_node_set_field_name($field_name);
    if (!empty($node->$feed_to_node_field_name)) {
      db_insert('feed_to_node_file_field')
              ->fields(array(
                  'nid' => $node->nid,
                  'field_name' => $field_name,
                  'value' => $node->$feed_to_node_field_name,
              ))
              ->execute();
    }
  }
}

/**
 * Delete field values(tokens) that are connected to file fields
 * 
 * @param int $nid
 *   Node ID
 * @param string $field_name
 *   Field name of the node
 */
function feed_to_node_delete_file_fields($nid, $field_name = NULL) {
  $query = db_delete('feed_to_node_file_field');

  $query->condition('nid', $nid);
  if (!empty($field_name)) {
    $query->condition('field_name', $field_name);
  }

  $query->execute();
}

/**
 * Save date field if it's a token, so it can be used later on.
 * 
 * @param object $node
 *   The node object.
 */
function feed_to_node_save_date_field($node) {
  feed_to_node_delete_date_field($node->nid);

  if (!empty($node->feed_to_node_date)) {
    db_insert('feed_to_node_date')
            ->fields(array(
                'nid' => $node->nid,
                'value' => $node->feed_to_node_date,
            ))
            ->execute();
  }
}

/**
 * Delete field values(tokens) that are connected to the date field.
 * 
 * @param type $nid
 */
function feed_to_node_delete_date_field($nid) {
  $query = db_delete('feed_to_node_date');

  $query->condition('nid', $nid);

  $query->execute();
}

/**
 * Read the feed and save to node if needed.
 * 
 * @param int $fid
 *   Feed ID.
 * 
 * @return string
 *   Return standard message that feeds have been run.
 */
function feed_to_node_read($fid = NULL) {

  module_load_include('inc', 'node', 'node.pages');

  // Laad de feeds die gecontrolleerd moeten worden.
  $feeds = feed_to_node_load_feeds($fid, 1);
  $parsers = feed_to_node_load_parsers();
  $count_new = 0;
  $count_updated = 0;
  $items = array();
  foreach ($feeds as $feed) {

    $parser = $parsers[$feed['parser']];
    $tokens = feed_to_node_extract_tokens($parser['token']);

    $node = node_load($feed['nid']);
    $date_token = feed_to_node_load_date_token($feed['nid']);
    if ($date_token) {
      $node->created = $date_token;
    } else {
      $node->created = null;
    }

    // Laad de feed url.
    $request = drupal_http_request($feed['url']);

    // We can call the rss feed.
    if ($request->code == '200') {
      // The call succeeded so we can set the update date for this feed.
      $feed['updated_on'] = time();
      feed_to_node_update($feed['fid'], $feed);
      // Call the parsers parser.
      $items = call_user_func($parser['parser'], $request->data);
    }else{
      drupal_set_message(t("Couldn't connect to %feed_url, request status: %code", array('%feed_url' => $feed['url'], '%code' => $request->code)));
    }

    // Loop through the different feeds.
    foreach ($items as $fiid => $item) {

      // Check for a pattern and apply it if needed.
      if (!empty($feed['pattern']) && !empty($parser['filter'])) {
        $filter_check = call_user_func($parser['filter'], $feed['pattern'], $feed['pattern_is_regex'], $item);
        if($filter_check==FALSE){
          continue;
        }
      }

      // Try to load the item, if we get a result that means the feed
      // was allready loaded.
      $feed_item = feed_to_node_load_item($fiid, $feed['fid']);

      // If the item doesn't exists, that means we got an unique item,
      // which we can save in a node.
      // Or if update_node is TRUE we can update the node with new info.
      if ((empty($feed_item) && !empty($fiid)) || !empty($feed['update_node'])) {

        // Copy node that contains the tokens.
        $new_node = $node;
        $new_node->status = $feed['published'];

        $data = array();
        $data[$parser['token']] = $item;
        $replace = token_generate($parser['token'], $tokens, $data);

        $ar_new_node = (array) $new_node;
        $obj_new_node = new stdClass();
        foreach ($ar_new_node as $key => $val) {
          if ($key == 'nid' || $key == 'vid') {
            continue;
          }
          // Check if the field is a taxonomy.
          $vocabname = feed_to_node_check_taxonomy($key);
          $filefield = NULL;
          if(!empty($node->type)){
            $filefield = feed_to_node_check_file_field($node->type, $key);
          }

          if ($vocabname) {
            $obj_new_node->$key = feed_to_node_replace_taxonomy($vocabname, $val, $tokens, $replace);
          } elseif ($filefield) {
            //if the field is a file field we need the url (tokens that gonna be replaced).
            $token_file_field = feed_to_node_set_field_name($key);
            if(!empty($node->$token_file_field)){
              //we need to retrieve the file url so drupal can download it.
              $file_url = feed_to_node_deep_replace($tokens, $replace, $node->$token_file_field);
              $field_instance = feed_to_node_get_image_fields($node->type);
              $field_info = field_info_fields();
              $scheme = $field_info[$key]['settings']['uri_scheme'];
              $directory = $field_instance[$key]['settings']['file_directory'];

              $uri = $scheme . '://' . $directory; //://some_directory/new_1/file.txt
              $new_file = feed_to_node_download_external_file($file_url, $uri, FILE_EXISTS_REPLACE, TRUE);

              if ($new_file) {
                $obj_new_node->$key = array(LANGUAGE_NONE => array($new_file));
              }
            }
          } else {
            $obj_new_node->$key = feed_to_node_deep_replace($tokens, $replace, $val);
          }

          // Check if the current key is 'created' field
          //if so we need to convert it to linux timestamp
          if ($key == 'created') {
            if (!empty($obj_new_node->$key)) {
              $obj_new_node->$key = strtotime($obj_new_node->$key);
            } else {
              $obj_new_node->$key = time();
            }
          }
        }
        $is_new = FALSE;
        if (!empty($feed['update_node']) && !empty($feed_item)) {
          $obj_new_node->nid = $feed_item['nid'];
          $obj_new_node->vid = $feed_item['nid'];
          $count_updated++;
        } else {
          $is_new = TRUE;
          $obj_new_node->is_new = TRUE;
          $count_new++;
        }

        node_save($obj_new_node);

        if (!empty($is_new)) {
          feed_to_node_insert_item($fiid, $obj_new_node->nid, $feed['fid']);
        }
      }
    }
  }

  drupal_set_message(t('Added %count node(s) and updated %count_updated nodes', array('%count' => $count_new, '%count_updated' => $count_updated)));
  return 'Feeds updated';
}

/**
 * Download the file from the external url, the file name is a hash of the url.
 * 
 * @param string $url
 *   Url of the image
 * @param type $uri
 *   Destination where the file needs to be put
 * @param type $save_mode
 *   Replace behavior when the destination file already exists:
 *   - FILE_EXISTS_REPLACE - Replace the existing file. If a managed file with
 *       the destination name exists then its database entry will be updated. If
 *       no database entry is found then a new one will be created.
 *   - FILE_EXISTS_RENAME - Append _{incrementing number} until the filename is
 *       unique.
 *   - FILE_EXISTS_ERROR - Do nothing and return FALSE.
 * @param type $manage_file
 *   If FALSE file_unmanaged_save_data() is called, the file will not be saved to the {file_managed} table and none of the file_* hooks will be called.
 * 
 * @return mixed
 *   Return fid object if succes, or FALSE if the download failed.
 */
function feed_to_node_download_external_file($url, $uri, $save_mode = FILE_EXISTS_RENAME, $manage_file = TRUE) {

  if(empty($url)){
    drupal_set_message(t("No url found to load image from feed item."));
    return FALSE;
  }
  
  $url_info = parse_url($url);
  $url_path_info = pathinfo($url_info['path']);

  //This helps with filenames with spaces
  //$url = $url_info['scheme'] . '://' . $url_info['host']  . $url_path_info['dirname'] .'/'. rawurlencode($url_path_info['basename']);
  //Need to remove the filename from the uri
  $uri_target = file_uri_target($uri);
  $uri_scheme = file_uri_scheme($uri);
  $uri_path_info = pathinfo($uri_target);
  //$directory = file_stream_wrapper_uri_normalize($uri_scheme . "://" . $uri_path_info['dirname']);
  $directory = file_stream_wrapper_uri_normalize($uri);

  if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    $drupal_result = drupal_http_request($url);
    if (!empty($drupal_result->data)) {
      $path = file_stream_wrapper_uri_normalize($uri . '/' . md5($url) . '.' . $url_path_info['extension']);
      if ($manage_file) {
        $new_file = file_save_data($drupal_result->data, $path, $save_mode);
      } else {
        return file_unmanaged_save_data($drupal_result->data, $path, $save_mode);
      }
    } else {
      drupal_set_message("Error downloading file, no data recieved for " . $url);
      return FALSE;
    }

    $new_file->display = 1;
    return (array) $new_file;
  } else {
    drupal_set_message("Could not create directory");
  }
}

/**
 * Search and replace tokens in a multi dimensional array.
 * 
 * @param mixed $search
 *   Array of string to search for.
 * @param mixed $replace
 *   Array or string to replace the search items with.
 * @param mixed $subject
 *   Array or string to search and replace in.
 * 
 * @return mixed
 *   Returns the subject with replacements.
 */
function feed_to_node_deep_replace($search, $replace, $subject) {

  $replace = feed_to_node_deep_convert_array_to_one_level($replace);

  if (!is_array($subject)) {
    return str_replace($search, $replace, $subject);
  }
  foreach ($subject as $key => &$val) {
    if (is_array($val)) {
      $val = feed_to_node_deep_replace($search, $replace, $val);
      continue;
    }elseif(!is_object($val)){
      $val = str_replace($search, $replace, $val);
    }
  }
  return $subject;
}

/**
 * Convert multi level array to singel level array.
 * 
 * @param array $array
 *   The array to level.
 * 
 * @return array
 *   Returns leveled array.
 */
function feed_to_node_deep_convert_array_to_one_level($array){
  foreach($array as $key => $val){
    if(is_array($val)){
      $array[$key] = implode(',', $val);
    }
  }
  
  return $array;
}

/**
 * Get a list off available tokens.
 * 
 * @param string $type
 *   Token type.
 * 
 * @return array
 *   Returns a list of available tokens.
 */
function feed_to_node_extract_tokens($type) {
  $tokens = token_info();

  // If no tokens for the type exists, return an empty array.
  if (!isset($tokens['tokens'][$type])) {
    return array();
  }

  $available_tokens = array();
  foreach ($tokens['tokens'][$type] as $token_key => $token) {
    $available_tokens[$token_key] = '[' . $type . ':' . $token_key . ']';
    if (!empty($token['type'])) {
      foreach ($tokens['tokens'][$token['type']] as $extra_token_key => $extra_token) {
        $available_tokens[$token_key . ':' . $extra_token_key] = '[' . $type . ':' . $token_key . ':' . $extra_token_key . ']';
      }
    }
  }

  return $available_tokens;
}

/**
 * Insert item from feed into DB.
 * 
 * @param int $fiid
 *   Unique feed ID.
 * @param int $nid
 *   Node id.
 * @param int $fid
 *   Feed id.
 * 
 * @return mixed
 *   Return int if insert succeeded, or FALSE if insert failed.
 */
function feed_to_node_insert_item($fiid, $nid, $fid) {
  $result = db_insert('feed_to_node_item')
          ->fields(array(
              'fiid' => $fiid,
              'nid' => $nid,
              'fid' => $fid,
          ))
          ->execute();

  return $result;
}

/**
 * Insert new Feed.
 * 
 * @param string $name
 *   The name of the feed.
 * @param string $url
 *   The url of the feed.
 * @param int $nid
 *   The node ID that acts as template.
 * @param int $published
 *   1 = Nodes are published, 0 = Nodes are not published.
 * @param string $parser
 *   The name of the parser needed to get an array of items.
 * @param int $active
 *   If the feed is active.
 * 
 * @return int
 *   on Succes return fid (feed ID).
 */
function feed_to_node_insert($name, $url, $nid, $published, $parser, $active, $update_node, $pattern = '', $pattern_is_regex = 0) {
  $fid = db_insert('feed_to_node')
          ->fields(array(
              'name' => $name,
              'url' => $url,
              'nid' => $nid,
              'published' => $published,
              'parser' => $parser,
              'active' => $active,
              'update_node' => $update_node,
              'pattern' => $pattern,
              'pattern_is_regex' => $pattern_is_regex,
          ))
          ->execute();

  return $fid;
}

/**
 * Update Feed.
 * 
 * @param int $fid
 *   Feed ID.
 * @param array $feed
 *   Allowed values to update the feed are:
 *   name : The name of the feed.
 *   url : The url of the feed.
 *   nid : The node ID that acts as template.
 *   published : 1 = Nodes are published, 0 = Nodes are not published.
 *   parser : The name of the parser needed to get an array of items.
 *   active : If the feed is active.
 *   updated_on : Unix timestamp of the time the feed is updated.
 * 
 * @return int
 *   on Succes return fid (feed ID).
 */
function feed_to_node_update($fid, $feed = array()) {
  $allowed_keys = array(
      'name',
      'url',
      'nid',
      'published',
      'parser',
      'active',
      'updated_on',
      'update_node',
      'pattern',
      'pattern_is_regex',
  );

  $query = db_update('feed_to_node');
  $update_fields = array();
  foreach ($feed as $key => $val) {
    if (in_array($key, $allowed_keys)) {
      $update_fields[$key] = $val;
    }
  }

  if (!empty($update_fields)) {
    $query->fields($update_fields);
    $query->condition('fid', $fid);

    $fid = $query->execute();
  }

  return $fid;
}

/**
 * Delete the feed.
 * 
 * @param int $fid
 *   Feed ID.
 */
function feed_to_node_delete($fid) {
  $fid = db_delete('feed_to_node')
          ->condition('fid', $fid)
          ->execute();

  feed_to_node_item_delete(NULL, $fid);
}

/**
 * Delete one or multiple feed items.
 * 
 * @param int $nid
 *   Node ID.
 * @param int $fid
 *   Feed id, deletes all the nodes that where created by this feed.
 */
function feed_to_node_item_delete($nid = NULL, $fid = NULL) {

  $query = db_delete('feed_to_node_item');
  if (!empty($nid)) {
    $query->condition('nid', $nid);
    $query->execute();
  } elseif (!empty($fid)) {
    $query->condition('fid', $fid);
    $query->execute();
  }
}

/**
 * Load an item that was saved during the loading of the feed.
 * 
 * @param int $fiid
 *   The unique feed id.
 * @param int $fid
 *   The unique feed ID.
 * 
 * @return mixed
 *   Returns an array if an item has been found, FALSE otherwise.
 */
function feed_to_node_load_item($fiid, $fid) {
  $result = db_select('feed_to_node_item', 'r')
          ->fields('r')
          ->condition('fiid', $fiid, '=')
          ->condition('fid', $fid, '=')
          ->execute()
          ->fetchAssoc();

  return $result;
}

/**
 * Load the available feeds.
 * 
 * @param int $fid
 *   Feed ID.
 * @param int $active
 *   If feed needs to be active.
 * 
 * @return array
 *   An array of all feeds that needs to be loaded.
 */
function feed_to_node_load_feeds($fid = NULL, $active = NULL) {

  $query = db_select('feed_to_node', 'r')
          ->fields('r');
  if (!empty($active) && empty($fid)) {
    $query->condition('active', $active);
  }
  if (!empty($fid)) {
    $query->condition('fid', $fid);
  }
  // Make sure we got the oldest updated feed first.
  $query->orderBy('updated_on', 'ASC');
  $result = $query->execute();

  $feeds = array();
  while ($record = $result->fetchAssoc()) {
    $feeds[$record['fid']] = $record;
  }

  return $feeds;
}

/**
 * Load Feed.
 * 
 * @param int $fid
 *   Feed ID.
 * 
 * @return mixed
 *   Returns an array if a feed is found, else FALSE
 */
function feed_to_node_load_feed($fid) {
  $result = db_select('feed_to_node', 'r')
          ->fields('r')
          ->condition('fid', $fid)
          ->execute();

  while ($record = $result->fetchAssoc()) {
    return $record;
  }

  return FALSE;
}

/**
 * Get all available parser through module_invoke_all.
 * 
 * @return array
 *   Parser info
 */
function feed_to_node_load_parsers() {
  static $parsers;
  if (empty($parsers)) {
    $parsers = module_invoke_all('feed2node_info');
  }
  return $parsers;
}

/**
 * Check other modules if they got a parser for us.
 * 
 * @return array
 *   Returns a list of parsernames
 */
function feed_to_node_get_parsers_names() {
  $parsers = feed_to_node_load_parsers();
  $list = array();
  foreach ($parsers as $machinename => $parser) {
    $list[$machinename] = $parser['name'];
  }

  return $list;
}

/**
 * Get parsers description.
 * 
 * @return array
 *   Returns a list of parser descriptions.
 */
function feed_to_node_get_parsers_descriptions() {
  $parsers = feed_to_node_load_parsers();
  $list = array();
  foreach ($parsers as $machinename => $parser) {
    $list[$machinename] = $parser['description'];
  }

  return $list;
}

/**
 * Replace taxonomy terms with the text from the feeds.
 * 
 * @desc This function will create new terms or use exesting ones based on
 * the results that it uses from the token replace method.
 * So it uses the feeds text, checks if a term allready exists, if not it
 * creates the term, else it uses the existing term.
 * 
 * @param string $vocabname
 *   The name of the vocab being used.
 * @param array $fieldvalue
 *   The node array containing the taxonomy structure.
 * @param array $search
 *   Values needed for feed_to_node_deep_replace method.
 * @param array $replace
 *   Values needed for feed_to_node_deep_replace method.
 * 
 * @return array
 *   Returns the new taxonomy node fields.
 */
function feed_to_node_replace_taxonomy($vocabname, $fieldvalue, $search, $replace) {
  $terms = array();
  // Load vocab.
  if ($vocabulary = taxonomy_vocabulary_machine_name_load($vocabname)) {
    $vocabularies[$vocabulary->vid] = $vocabulary;
  }
  // Load Term.
  // We do a multiple foreach to keep the structure intact.
  foreach ($fieldvalue as $level1_key => $level1_val) {
    foreach ($level1_val as $tids) {
      $term = taxonomy_term_load($tids['tid']);
      if ($term) {
        // There maybe multiple terms separated by comma, 
        // we need to check them all.
        $replaced_term = feed_to_node_deep_replace($search, $replace, $term->name);
        $ar_replaced_term = explode(',', $replaced_term);
        foreach ($ar_replaced_term as $new_term) {
          $terms[$level1_key][] = $new_term;
        }
      }
    }
  }
  $term_ids = array();
  // Load the dirrent levels of the term, if it's multilangual we want to keep
  // the translations in the right place.
  foreach ($terms as $level1_key => $ar_terms) {
    foreach ($ar_terms as $typed_term) {
      // See if the term exists in the chosen vocabulary and return the tid;
      // otherwise, create a new 'autocreate' term for insert/update.
      if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($typed_term), 'vid' => array_keys($vocabularies)))) {
        $term = array_pop($possibilities);
      } else {
        $vocabulary = reset($vocabularies);
        $term = new stdClass();
        $term->vid = $vocabulary->vid;
        $term->name = $typed_term;
        taxonomy_term_save($term);
      }
      $term_ids[$level1_key][$term->tid] = $term->tid;
    }
  }

  // Now we got the new taxonomy in place we can rebuild the node field.
  $new_field_value = array();
  foreach ($term_ids as $level1_key => $terms) {
    foreach ($terms as $tid) {
      $new_field_value[$level1_key][]['tid'] = $tid;
    }
  }

  return $new_field_value;
}

/**
 * Check if the field is a taxonomy field.
 * @staticvar array $field_infos
 *   Field info values called using field_info_fields().
 * 
 * @param string $fieldname
 *   Name of the field.
 * 
 * @return mixed
 *   Returns an string vocabulary name if anything is found, else FALSE.
 */
function feed_to_node_check_taxonomy($fieldname) {
  static $field_infos;

  if (empty($field_infos)) {
    $field_infos = field_info_fields();
  }

  if (!empty($field_infos[$fieldname])) {
    if ($field_infos[$fieldname]['type'] == 'taxonomy_term_reference') {
      return $field_infos[$fieldname]['settings']['allowed_values'][0]['vocabulary'];
    }
  }

  return FALSE;
}

/**
 * Check if the node field is a filefield.
 * @staticvar type $file_fields
 *   Array containing the file fields names.
 * 
 * @param string $type
 *   Node content type.
 * @param string $fieldname
 *   Node field name.
 * 
 * @return boolean
 *   Returns True if is file field, otherwise FALSE.
 */
function feed_to_node_check_file_field($type, $fieldname) {
  static $file_fields;

  if (empty($file_fields)) {
    $file_fields = feed_to_node_get_image_fields($type);
  }

  if (!empty($file_fields[$fieldname])) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_token_info().
 */
function feed_to_node_token_info() {
  $type = array(
      'name' => t('feed2node date'),
      'description' => t('Tokens related to the basic available date formats.'),
      'needs-data' => 'feed2node_date',
  );

  $token = array();
  // Core tokens for nodes.
  $format_types = system_get_date_types();

  foreach ($format_types as $format_type) {
    $token[$format_type['type']] = array(
        'name' => t("Date format :title", array(':title' => $format_type['title'])),
        'description' => t("A date in ':title' format. (:date)", array(
            ':date' => feed_to_node_handle_date($format_type['type'], time()),
            ':title' => $format_type['title'],
                )
        ),
    );
  }

  $token['raw'] = array(
      'name' => t("Published Raw"),
      'description' => t("A date in UNIX timestamp format (:date)", array(':date' => feed_to_node_handle_date('raw', time()))),
  );

  return array(
      'types' => array('feed2node_date' => $type),
      'tokens' => array('feed2node_date' => $token),
  );
}

/**
 * Implemtens hook_tokens().
 */
function feed_to_node_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'feed2node_date' && !empty($data['feed2node_date'])) {

    foreach ($tokens as $name => $original) {
      $replacements[$original] = feed_to_node_handle_date($name, $data['feed2node_date']);
    }
  }
  return $replacements;
}

/**
 * Convert date into a different format.
 * 
 * @param string $type
 *   The type of date.
 * @param mixed $date
 *   A date/time in one of the valid formats as a string or a unix timestamp.
 * @param string $custom
 *   Optionel: otherwise date format as set by php.
 * 
 * @return string
 *   reformatted date.
 */
function feed_to_node_handle_date($type, $date, $custom = NULL) {

  if (!is_int($date)) {
    $timestamp = strtotime($date);
  } else {
    $timestamp = $date;
  }

  if ($type == 'raw') {
    return $timestamp;
  }
  if ($type == 'since') {
    return feed_to_node_human_timing($timestamp);
  }

  $new_date = format_date($timestamp, $type);

  return $new_date;
}

/**
 * Creates a date that tells you how old it is, example: 11 months (old).
 * 
 * @param int $time
 *   Unix timestamp.
 * 
 * @return string
 *   A string of the date in x time ago.
 */
function feed_to_node_human_timing($time) {
  $time = time() - $time; // to get the time since that moment

  $tokens = array(
      31536000 => 'year',
      2592000 => 'month',
      604800 => 'week',
      86400 => 'day',
      3600 => 'hour',
      60 => 'minute',
      1 => 'second'
  );

  foreach ($tokens as $unit => $text) {
    if ($time < $unit) {
      continue;
    }
    $number_of_units = floor($time / $unit);
    return $number_of_units . ' ' . $text . (($number_of_units > 1) ? 's' : '');
  }
}
