<?php

/**
 * @file
 * Taxonomy, menu, blocks
 */

/**
 * Implements hook_block_info().
 */
function simple_taxonomy_menu_block_info() {
  // This example comes from node.module.
  $vocabs = taxonomy_get_vocabularies(NULL);
  
  foreach($vocabs as $vid => $vocab){
    
    $blocks['simple_taxonomy_menu_'.$vid] = array(
      'info' => t('Simple taxonomy menu').' - '.$vocab->name,
      'cache' => DRUPAL_NO_CACHE,
    );

  }


  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function simple_taxonomy_menu_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();
  $check = strpos($delta, 'simple_taxonomy_menu_');
  if($check!==false){
    $vid = str_replace('simple_taxonomy_menu_', '', $delta);

    $block['content'] = simple_taxonomy_menu_createmenu($vid, $delta);
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function simple_taxonomy_menu_block_configure($delta = '') {
  // This example comes from node.module.
  $form = array();
  $check = strpos($delta, 'simple_taxonomy_menu_');
  if($check!==false){
    
    $counter = 0;
    $links_before = variable_get($delta.'_before', '');
    
    $form['link_before'] = array(
        '#type' => 'textarea',
        '#title' => t('url'),
        '#default_value' => $links_before,
        '#description' => 'Write down urls you want in the top of the menu.<br />'
        . 'Write down urls in as follow: url;title<br />'
        . 'Example external: http://www.google.com;Google<br />'
        . 'Example internal: node;Node list',
    );
    
    $links_after = variable_get($delta.'_after', '');
    
    $form['link_after'] = array(
        '#type' => 'textarea',
        '#title' => t('url'),
        '#default_value' => $links_after,
        '#description' => 'Write down urls you want in the bottom of the menu.<br />'
        . 'Write down urls in as follow: url;title<br />'
        . 'Example external: http://www.google.com;Google<br />'
        . 'Example internal: node;Node list',
    );

  }
  return $form;
}

/**
 * Implements hook_block_save(().
 */
function simple_taxonomy_menu_block_save($delta = '', $edit = array()) {
  $check = strpos($delta, 'simple_taxonomy_menu_');
  if($check!==false){
    variable_set($delta.'_before', $edit['link_before']);
    variable_set($delta.'_after', $edit['link_after']);
  }
}

/**
 * Gets menu items and creates an html list.
 * 
 * @param int $vid
 *  Taxonomy vocab id.
 * @param string $delta
 *  Block delta name.
 * 
 * @return string
 *  Returns html string with menu in it.
 */
function simple_taxonomy_menu_createmenu($vid, $delta) {

  $items = simple_taxonomy_menu_loadmenu($vid, $delta);
  $html = simple_taxonomy_menu_createlist($items, '0');

  return $html;
}

/**
 * Create html menu list.
 * 
 * @param array $items
 *  An array of items that needs to be in the menu.
 * @param int $parent
 *  The parent level of the menu items that needs to be proccesed.
 * 
 * @return string
 *  Returns the menu with all menu item layers.
 */
function simple_taxonomy_menu_createlist($items, $parent) {

  $li = '';
  $first = true;
  $lastTid = simple_taxonomy_menu_last_item($items, $parent);
  foreach ($items as $key => $item) {

    if(empty($item['term'])){
      continue;
    }
    $term = $item['term'];

    if ($parent == '0' && is_string($term)) {
      $activeClass = '';
      $class = '';
      if ($first == true) {
        $class = 'first';
        $first = false;
      }
      if(current_path()==$key){
        $class.= ' active-trail';
        $activeClass = 'active-trail active';
      }
      $li.= '<li class="menu__item is-leaf ' . $class . ' leaf" ><a title="menu__link ' . t($term) . '" class="' . $activeClass . '" href="' . url($key) . '">' . t($term) . '</a></li>'."\n";
    } else {

      if (!empty($term) && !empty($term->parents) && $term->parents[0] == $parent) {

        $activeClass = '';
        $class = '';
        if ($first == true) {
          $class = 'first';
          $first = false;
        } elseif ($lastTid == $term->tid) {
          $class = 'last';
        }



        if ($item['active'] == '1') {
          $class.= ' active-trail';
          $activeClass = 'active-trail active';
        }

        $links = simple_taxonomy_menu_createlist($items, $term->tid);

        if ($links) {
          if ($item['open'] == '1') {
            $class.= ' expanded active-trail';
            $activeClass = 'active-trail active';
          } else {
            $class.= ' collapsed';
          }
          $class.= ' expendable';
        }
        $li.= '<li class="menu__item is-leaf ' . $class . '" ><a title="' . t($term->name) . '" class="menu__link ' . $activeClass . '" href="' . url('taxonomy/term/' . $term->tid) . '">' . t($term->name) . '</a>'
                . $links
                . '</li>'."\n";
      }
    }
  }


  if (!empty($li)) {
    $html = '<ul id="category-menu-' . $parent . '" class="simple-taxonomy-menu menu clearfix">'."\n".'' . $li . ''."\n".'</ul>';
    return $html;
  } else {
    return '';
  }
}

/**
 * Get the last item in the menu list.
 * 
 * @param array $items
 *  List of menu items.
 * @param type $parent
 *  The parent level to show menu.
 * 
 * @return int
 *  Returns tid of the last item in the menu.
 */
function simple_taxonomy_menu_last_item($items, $parent) {
  $tid = null;
  
  foreach ($items as $item) {
    if(!empty($item['term'])){
      $term = $item['term'];
      if (!empty($term->tid) && $term->parents[0] == $parent) {
        $tid = $term->tid;
      }
    }
  }

  return $tid;
}

/**
 * Load menu with all extra menu items.
 * 
 * @param int $vid
 *  Taxonomy vocab id.
 * @param string $delta
 *  Block delta name.
 *  
 * @return array
 *  Returns an array of all menu items.
 */
function simple_taxonomy_menu_loadmenu($vid, $delta) {

  $terms = taxonomy_get_tree($vid);

  $arg0 = arg(0);
  $arg1 = NULL;
  $arg2 = NULL;

  if(empty($_SESSION['simple_taxonomy_menu_active'])){
    $_SESSION['simple_taxonomy_menu_active'] = NULL;
  }
  
  if ($arg0 != 'taxonomy' && $arg0 != 'node') {
    $_SESSION['simple_taxonomy_menu_active'] = NULL;
  }

  if ($arg0 == 'taxonomy') {
    $arg1 = arg(1);
    if ($arg1 == 'term') {
      $arg2 = arg(2);
    }
  }

  // If user is viewing node we need to check if we still got a path
  if ($arg0 == 'node') {
    $arg1 = arg(1);

    $sql = db_select('taxonomy_index', 'ti');
    $sql->join('taxonomy_term_data', 'ttd', 'ti.tid = ttd.tid');
    $sql->fields('ti', array('tid'));
    $sql->condition('ti.nid', (int) $arg1, '=');
    $sql->condition('ttd.vid', (int) $vid, '=');

    $results = $sql->execute();
    $node_terms = array();

    while ($result = $results->fetchAssoc()) {
      $node_terms[$result['tid']] = $result['tid'];
    }

    // Check if the active term is also present in the currently viewed node.
    if (!empty($_SESSION['simple_taxonomy_menu_active']) && !empty($node_terms[$_SESSION['simple_taxonomy_menu_active']])) {
      // Current term is in the node so all is good.
    } else {
      // The current term isn't in the current node, we gonna get the first term from the node.
      if (!empty($node_terms) && is_array($node_terms)) {
        // Get first values of the array
        foreach($node_terms as $node_term){
          $_SESSION['simple_taxonomy_menu_active'] = $node_term;
          break;
        }
        
      } else {
        $_SESSION['simple_taxonomy_menu_active'] = NULL;
      }
    }
  }


  $items = array();
  
  $links_before = variable_get($delta.'_before', '');
  $ar_list_before = explode(PHP_EOL, $links_before);

  foreach($ar_list_before as $link_string){
    if(!empty($link_string)){
      $ar_link_before = explode(';', $link_string);
      $items[$ar_link_before[0]]['term'] = trim($ar_link_before[1]);
    }
  }

  foreach ($terms as $term) {

    $items[$term->tid]['term'] = $term;
    $items[$term->tid]['active'] = 0;
    $items[$term->tid]['open'] = 0;

    if ($arg0 == 'taxonomy') {
      if ($arg2 == $term->tid) {
        $items[$term->tid]['active'] = 1;

        $_SESSION['simple_taxonomy_menu_active'] = $term->tid;
      }
    } elseif ($arg0 == 'node') {
      if (!empty($_SESSION['simple_taxonomy_menu_active']) && $_SESSION['simple_taxonomy_menu_active'] == $term->tid) {
        $items[$term->tid]['active'] = 1;
      }
    }
  }
  
  $links_after = variable_get($delta.'_after', '');
  $ar_list_after = explode(PHP_EOL, $links_after);

  foreach($ar_list_after as $link_string){
    if(!empty($link_string)){
      $ar_link_after = explode(';', $link_string);
      $items[$ar_link_after[0]]['term'] = trim($ar_link_after[1]);
    }
  }

  $items = simple_taxonomy_menu_open_parent($items, $_SESSION['simple_taxonomy_menu_active']);

  return $items;
}

/**
 * Set the active parents.
 * 
 * @param array $items
 *  Menu list to ge through.
 * @param int $tid
 *  Term id to calculate the active path.
 * 
 * @return array
 *  Returns the menu array with terms set to open.
 */
function simple_taxonomy_menu_open_parent($items, $tid) {
  $items[$tid]['open'] = 1;
  if (!empty($items[$tid]['term']->parents) && $items[$tid]['term']->parents[0] != '0' && !empty($items[$tid]['term']->parents[0])) {
    $items = simple_taxonomy_menu_open_parent($items, $items[$tid]['term']->parents[0]);
  }
  return $items;
}
