<?php

/**
 * @file
 * Main file with hooks implementations for a Entity Abuse module.
 */

/**
 * Constants definition.
 */
define('ENTITY_ABUSE_REASON_FIELD_DISABLED', 0);
define('ENTITY_ABUSE_REASON_FIELD_OPTIONAL', 1);
define('ENTITY_ABUSE_REASON_FIELD_REQUIRED', 2);

define('ENTITY_ABUSE_LINK_SUBMIT_ABUSE_TITLE', 'complain');
define('ENTITY_ABUSE_LINK_CANCEL_ABUSE_TITLE', 'cancel complain');

define('ENTITY_ABUSE_ALLOW_CANCEL_ABUSES', 1);

define('ENTITY_ABUSE_OWN_CONTENT_DISALLOWED', 0);
define('ENTITY_ABUSE_OWN_CONTENT_ALLOWED', 1);

define('ENTITY_ABUSE_ENTITY_ENABLED_DEFAULT', 0);

define('ENTITY_ABUSE_LINK_DISPLAY_NONE'    , 1);
define('ENTITY_ABUSE_LINK_DISPLAY_AS_FIELD', 2);
define('ENTITY_ABUSE_LINK_DISPLAY_AS_LINK' , 3);

/**
 * Implements hook_menu().
 */
function entity_abuse_menu() {

  $items['admin/config/content/entity_abuse'] = array(
    'title' => 'Entity Abuse',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_abuse_settings_form'),
    'access arguments' => array('manage entity abuses'),
    'file' => 'admin.inc',
    'file path' => drupal_get_path('module', 'entity_abuse') . '/includes',
  );

  $items['entity_abuse/ajax/add/%/%/%'] = array(
    'page callback' => 'entity_abuse_add_abuse_ajax_callback',
    'page arguments' => array(3, 4, 5),
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'access arguments' => array('submit entity abuses'),
    'file' => 'pages.inc',
    'file path' => drupal_get_path('module', 'entity_abuse') . '/includes',
    'type' => MENU_CALLBACK,
  );

  $items['entity_abuse/ajax/cancel/%/%/%'] = array(
    'page callback' => 'entity_abuse_cancel_abuse_ajax_callback',
    'page arguments' => array(3, 4, 5),
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'access arguments' => array('submit entity abuses'),
    'file' => 'pages.inc',
    'file path' => drupal_get_path('module', 'entity_abuse') . '/includes',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function entity_abuse_permission() {
  return array(
    'submit entity abuses' => array(
      'title' => t('Submit complains'),
      'description' => t('Allows to submit and cancel complains for a site content.'),
    ),
    'manage entity abuses' => array(
      'title' => t('Manage entity abuses'),
      'description' => t('Allows to view, configure and delete all abuses.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function entity_abuse_views_api() {
  return array('api' => 3);
}

/**
 * Function checks if entity type should be
 * processed with Entity Abuse module.
 *
 * @param $entity_type
 *   Name of entity type. For example, 'node' or 'comment'.
 *
 * @param $entity_bundle
 *   Machine name of entity bundle. For example, 'news' or 'comment_news'.
 *
 * @return bool
 *   Status of current entity type for current entity bundle.
 */
function entity_abuse_entity_bundle_enabled($entity_type, $entity_bundle) {

  // Get list of supportable entity types.
  $enabled_entity_types = module_invoke_all('entity_abuse_entity_types');

  // If entity type is not supported - halt the execution.
  if (!in_array($entity_type, $enabled_entity_types)) {
    return FALSE;
  }

  // Get suffix name of variables for this bundle.
  $variable_suffix = entity_abuse_get_entity_bundle_variable_suffix($entity_type, $entity_bundle);

  // Return status of availability for this bundle.
  return variable_get('entity_abuse_enabled_' . $variable_suffix, ENTITY_ABUSE_ENTITY_ENABLED_DEFAULT);
}

/**
 * Return constant that indicates how to display an abuse link.
 *
 * @param $entity_type
 *   Name of entity type. For example, 'node' or 'comment'.
 *
 * @param $entity_bundle
 *   Machine name of entity bundle. For example, 'news' or 'comment_news'.
 *
 * @return int
 *   Constant that indicates how to display an abuse link.
 */
function entity_abuse_entity_bundle_link_display($entity_type, $entity_bundle) {

  // Get suffix name of variables for this bundle.
  $variable_suffix = entity_abuse_get_entity_bundle_variable_suffix($entity_type, $entity_bundle);

  // Get the list display config for current entity bundle.
  return variable_get('entity_abuse_link_display_' . $variable_suffix, ENTITY_ABUSE_LINK_DISPLAY_AS_FIELD);
}

/**
 * Return suffix for variables for the entity bundle.
 *
 * @param $entity_type
 *   Name of entity type. For example, 'node' or 'comment'.
 *
 * @param $entity_bundle
 *   Machine name of entity bundle. For example, 'news' or 'comment_news'.
 *
 * @return string
 *   Variable suffix for the bundle.
 */
function entity_abuse_get_entity_bundle_variable_suffix($entity_type, $entity_bundle) {

  $info = &drupal_static(__FUNCTION__, array());
  if (isset($info[$entity_type][$entity_bundle])) {
    return $info[$entity_type][$entity_bundle];
  }

  // Get module list that implements the hook_entity_abuse_entity_types().
  foreach (module_implements('entity_abuse_entity_types') as $module) {
    if (function_exists($module . '_entity_abuse_entity_types')) {

      // Get list of enabled entity types from the module.
      $enabled_entity_types = call_user_func($module . '_entity_abuse_entity_types');

      // If current entity type does not belong to the list of
      // entity types supported by the module - then skip it.
      if (!in_array($entity_type, $enabled_entity_types)) {
        continue;
      }

      // Try to get a variable suffix for this bundle.
      $function_bundle = $module . '_entity_abuse_' . $entity_type . '_bundle_variable_suffix';
      if (function_exists($function_bundle)) {
        $info[$entity_type][$entity_bundle] = call_user_func($function_bundle, $entity_type, $entity_bundle);
      }
    }
  }

  // If there is no special function for variable suffix,
  // then just use an entity type name as suffix.
  if (!isset($info[$entity_type][$entity_bundle])) {
    $info[$entity_type][$entity_bundle] = $entity_type != $entity_bundle ? $entity_type . '_' . $entity_bundle : $entity_type;
  }

  return $info[$entity_type][$entity_bundle];
}

/**
 * Implements hook_entity_abuse_entity_types().
 * Returns list of available entity types.
 */
function entity_abuse_entity_abuse_entity_types() {
  return array('node', 'comment', 'user', 'taxonomy_term');
}

/**
 * Implements hook_entity_abuse_ENTITY_TYPE_bundle_variable_suffix().
 */
function entity_abuse_entity_abuse_comment_bundle_variable_suffix($entity_type, $entity_bundle) {
  // Remove 'comment_node_' from bundle name.
  $entity_bundle = substr($entity_bundle, 13);
  return $entity_type . '_' . $entity_bundle;
}

/**
 * Implements hook_field_extra_fields().
 */
function entity_abuse_field_extra_fields() {

  $info = &drupal_static(__FUNCTION__, array());

  if (empty($info)) {

    $entity_info = entity_get_info();

    foreach (array_keys($entity_info) as $entity_type) {
      foreach (array_keys($entity_info[$entity_type]['bundles']) as $bundle) {

        // Check if current entity type for its bundle should be
        // supportable by Entity Abuse module.
        $bundle_enabled = entity_abuse_entity_bundle_enabled($entity_type, $bundle);

        // Get the list display config for current entity bundle.
        $link_display = entity_abuse_entity_bundle_link_display($entity_type, $bundle);

        // Do not show a link if bundle is disabled or link display is not a field.
        if (!$bundle_enabled || $link_display != ENTITY_ABUSE_LINK_DISPLAY_AS_FIELD) {
          continue;
        }

        // Display field in a list of all fields on a tab "Manage display".
        $info[$entity_type][$bundle]['display']['entity_abuse'] = array(
          'label' => t('Complain link'),
          'description' => t('Provides link to add a complain'),
          'weight' => 30,
        );
      }
    }
  }

  return $info;
}

/**
 * Implements hook_entity_view().
 */
function entity_abuse_entity_view($entity, $entity_type, $view_mode) {
  global $user;

  // Get info about current entity.
  $info = entity_get_info($entity_type);

  // Get name of entity bundle and entity ID.
  $entity_bundle = empty($info['entity keys']['bundle']) ? $entity_type : $entity->{$info['entity keys']['bundle']};
  $entity_id = $entity->{$info['entity keys']['id']};

  // Check if current user has access.
  $user_has_access = user_access('submit entity abuses');

  // Get info about extra fields for this entity display.
  $extra_fields = field_extra_fields_get_display($entity_type, $entity_bundle, $view_mode);
  $extra_field_exists = !empty($extra_fields['entity_abuse']['visible']);

  // Get link display.
  $display = entity_abuse_entity_bundle_link_display($entity_type, $entity_bundle);
  $display_as_field = $display == ENTITY_ABUSE_LINK_DISPLAY_AS_FIELD;

  // Check if it is not own content.
  $own_content = FALSE;
  $allowed_abuse_on_own_content = variable_get('entity_abuse_own_content', ENTITY_ABUSE_OWN_CONTENT_DISALLOWED);
  if (!$allowed_abuse_on_own_content) {
    $own_content = !empty($user->uid) && !empty($entity->uid) && $user->uid == $entity->uid;
  }

  // If current situation matches all requirements then display the link.
  if ($user_has_access && $extra_field_exists && !$own_content && $display_as_field) {
    entity_abuse_include('api');
    $entity->content['entity_abuse'] = entity_abuse_get_abuse_link($entity_id, $entity_type, TRUE);
  }
}

/**
 * Implements hook_entity_delete().
 */
function entity_abuse_entity_delete($entity, $entity_type) {
  entity_abuse_cancel_entity_abuse_action($entity, array('entity_type' => $entity_type));

  // If user was deleted, we also have to drop all his abuses.
  if ($entity_type == 'user') {
    entity_abuse_cancel_user_abuses($entity->uid);
  }
}

/**
 * Implements hook_action_info().
 */
function entity_abuse_action_info() {
  return array(
    'entity_abuse_cancel_entity_abuse_action' => array(
      'label' => t('Cancel entity abuses'),
      'type' => 'entity',
      'configurable' => FALSE,
    ),
  );
}

/**
 * Cancels all abuses from the entity.
 */
function entity_abuse_cancel_entity_abuse_action($entity, $context = array()) {

  // Get entity ID.
  $info = entity_get_info($context['entity_type']);
  $entity_id = $entity->{$info['entity keys']['id']};

  // Cancel all abuses from the entity.
  entity_abuse_include('api');
  entity_abuse_cancel($entity_id, $context['entity_type'], TRUE);
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter node type settings form.
 */
function entity_abuse_form_node_type_form_alter(&$form) {

  if (empty($form['#node_type']->type)) {
    return;
  }

  module_load_include('inc', 'entity_abuse', 'includes/admin');
  entity_abuse_node_type_form_setting($form, $form['#node_type']->type);
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter user settings form.
 */
function entity_abuse_form_user_admin_settings_alter(&$form) {

  module_load_include('inc', 'entity_abuse', 'includes/admin');
  entity_abuse_user_form_settings($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter vocabulary settings form.
 */
function entity_abuse_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {

  if (empty($form['#vocabulary']->machine_name)) {
    return;
  }

  form_load_include($form_state, 'inc', 'entity_abuse', 'includes/admin');
  entity_abuse_taxonomy_vocabulary_form_settings($form, $form['#vocabulary']->machine_name);
}

/**
 * Implements template_preprocess_node().
 */
function entity_abuse_preprocess_node(&$variables) {
  global $user;

  $node = $variables['node'];

  $user_has_access = user_access('submit entity abuses');
  $abuse_enabled = entity_abuse_entity_bundle_enabled('node', $node->type);

  // Check if it is not own content.
  $own_content = FALSE;
  $allowed_abuse_on_own_content = variable_get('entity_abuse_own_content', ENTITY_ABUSE_OWN_CONTENT_DISALLOWED);
  if (!$allowed_abuse_on_own_content) {
    $own_content = !empty($user->uid) && !empty($node->uid) && $user->uid == $node->uid;
  }

  // Get the list display config for current entity bundle.
  $display = entity_abuse_entity_bundle_link_display('node', $node->type);
  $display_as_link = $display == ENTITY_ABUSE_LINK_DISPLAY_AS_LINK;

  $enabled_view_modes = variable_get('entity_abuse_link_display_view_modes_node_' . $node->type, array('full'));
  $node_view_mode_enabled = in_array($variables['view_mode'], $enabled_view_modes);

  if (!$user_has_access || !$abuse_enabled || !$node_view_mode_enabled || $own_content || !$display_as_link) {
    return;
  }

  // Add an abuse link to the list with other links.
  entity_abuse_include('api');
  $variables['content']['links']['entity_abuse']['#links']['abuse_link'] = entity_abuse_get_abuse_link($node->nid, 'node');
}

/**
 * Implements template_preprocess_comment().
 */
function entity_abuse_preprocess_comment(&$variables) {
  global $user;

  $comment = $variables['comment'];

  $user_has_access = user_access('submit entity abuses');
  $abuse_enabled = entity_abuse_entity_bundle_enabled('comment', $comment->node_type);

  // Check if it is not own content.
  $own_content = FALSE;
  $allowed_abuse_on_own_content = variable_get('entity_abuse_own_content', ENTITY_ABUSE_OWN_CONTENT_DISALLOWED);
  if (!$allowed_abuse_on_own_content) {
    $own_content = !empty($user->uid) && !empty($comment->uid) && $comment->uid == $user->uid;
  }

  // Get the list display config for current entity bundle.
  $display = entity_abuse_entity_bundle_link_display('comment', $comment->node_type);
  $display_as_link = $display == ENTITY_ABUSE_LINK_DISPLAY_AS_LINK;

  if (!$user_has_access || !$abuse_enabled || $own_content || !$display_as_link) {
    return;
  }

  // Add an abuse link to the list with other links.
  entity_abuse_include('api');
  $variables['content']['links']['entity_abuse']['#links']['abuse_link'] = entity_abuse_get_abuse_link($comment->cid, 'comment');
}

/**
 * Helper function that includes php file.
 */
function entity_abuse_include($file_name) {
  module_load_include('inc', 'entity_abuse', 'includes/' . $file_name);
}
