<?php
/**
 * @file
 * Main module file for gigya_top_comments module. hans.gutknecht@mlssoccer.com, louis.jimenez@mlssoccer.com
 */

/**
 * Implements hook_permission().
 *
 */
function gigya_top_comments_permission() {
  return array(
    'Administer Gigya Top Comments' => array(
      'title' => t('Administer Gigya Top Comments')
    )
  );
}

/**
 * Implements hook_menu().
 *
 */
function gigya_top_comments_menu() {
  $items = array();

  $items['admin/config/gigya_top_comments'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Gigya Top Comments settings',
    'description' => 'Settings for Gigya Top Comments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gigya_top_comments_form'),
    'file' => 'gigya_top_comments.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('Administer Gigya Top Comments'),
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 * Requests the top streams from Gigya API.
 * Filters the results by age and calls gigya_top_comments_rank() for ranking.
 * Writes the ranked streams to the database.
 */
function gigya_top_comments_cron() {
  $request_url = gigya_top_comments_gigyaAPI();
  $request_method = 'GET';
  $request_retry = 1;
  $data = '';  // not required for GET
  $request_headers = array();  // not required for GET

  // Send the request.
  $result = drupal_http_request($request_url, array('headers' => $request_headers, 'method' => $request_method, 'data' => $data, 'max_redirects' => $request_retry));
  $decoded_result = json_decode($result->data);

  $max_item_age = variable_get('gigya_top_comments_max_item_age', '');
  $current_time = time();

  // Check for good status and some results
  if ($decoded_result->statusCode == 200) {
    // Truncate table
    db_delete('gigya_top_comments')->isNotNull('sid')->execute();
    // Set each content item in the db
    foreach ($decoded_result->streams as $thread_content) {
      //Check the age in hours of each stream
      $item_age = round(($current_time - $thread_content->createDate/1000)/3600);
      if ($item_age < $max_item_age) {
        $thread_content->rank = gigya_top_comments_rank($thread_content, $item_age);
        db_insert('gigya_top_comments')->
          fields(array(
            'sid' => $thread_content->streamID,
            'thread_count' => $thread_content->threadCount,
            'comment_count' => $thread_content->commentCount,
            'cat_id' => $thread_content->categoryID,
            'url' => $thread_content->streamURL,
            'popularity_score' => $thread_content->rank
          ))
          ->execute();
      }
    }
  }
}

/**
 * gigya_top_comments_rank
 * Calculates ranking for a stream.
 *
 * @param $item: Comment stream object.
 * @param $age: The age of the comment stream.
 * @return An integer representing the ranking score.
 */
function gigya_top_comments_rank($item, $age) {
  $time_modifier = variable_get('gigya_top_comments_time_modifier', '');
  $comment_modifier = variable_get('gigya_top_comments_comment_modifier', '');
  $item_rank = pow($item->commentCount-1, $comment_modifier)/pow($age+2, $time_modifier);
  return intval($item_rank*1000);
}

/**
 * gigya_top_comments_gigyaAPI
 * Builds Gigya API call.
 *
 * @return A HTTP request url for calling Gigya API.
 */
function gigya_top_comments_gigyaAPI() {
  $api_key = variable_get('gigya_top_comments_api_key', '');
  $secret_key = variable_get('gigya_top_comments_secretKey', '');
  $api_method = 'comments.getTopStreams';
  $time_stamp = time();
  $nonce = $time_stamp . rand();

  // The parameters for the socialize.getTopStreams API call:
  $parameters = array(
    'categoryID' => variable_get('gigya_top_comments_categoryID', ''),
    'limit' => variable_get('gigya_top_comments_streams_requested_count', ''),
    'maxStreamAge' => variable_get('gigya_top_comments_maxStreamAge', ''),
    'includeLastComment' => variable_get('gigya_top_comments_includeLastComment', ''),
    'timestamp' => $time_stamp,
    'apiKey' => $api_key,
    'nonce' => $nonce
  );

  // Build API call
  $signature = _calc_signature_REST($secret_key, 'GET', $api_method, $parameters);
  $request_url = 'http://comments.gigya.com/' . $api_method . '?apiKey=' . urlencode($api_key) . '&nonce=' . $nonce . '&sig=' . urlencode($signature) . '&timestamp=' . $time_stamp . '&limit=' . $parameters['limit'] . '&includeLastComment=' . $parameters['includeLastComment'] . '&maxStreamAge=' . $parameters['maxStreamAge'] . '&categoryID=' . $parameters['categoryID'];

  return $request_url;
}

/**
 * Signature calculation method
 * http://developers.gigya.com/010_Developer_Guide/85_REST/OAuth1#Common_Required_Parameters
 *
 */
function _calc_signature_REST($secret_key, $http_method, $api_method, $parameters) {
  // Require necessary Oauth protocols http://oauth.googlecode.com/svn/code/php/
  require_once('OAuth.php');

  $req = OAuthRequest::from_request($http_method, 'http://comments.gigya.com/' . $api_method, $parameters);
  $base_string = $req->get_signature_base_string();
  return base64_encode(hash_hmac('sha1', $base_string, base64_decode($secret_key), TRUE));
}


/**
 * Implements hook_block_info().
 *
 */
function gigya_top_comments_block_info() {
      $blocks['gigya_top_comments'] = array(
        'info' => t('Gigya Top Comments Block')
      );
    return $blocks;
}

/**
 * Implements hook_block_view().
 *
 */
function gigya_top_comments_block_view($delta = 0) {
  switch ($delta) {
    case 'gigya_top_comments':
      $block['subject'] = t(variable_get('gigya_top_comments_block_title', 'Popular'));
      $block['content'] = gigya_top_comments_fetch();
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 *
 */
function gigya_top_comments_theme() {
  $path = drupal_get_path('module', 'gigya_top_comments');
  return array('gigya_top_comments' => array(
      'path' => $path . '/theme',
      'template' => 'gigya_top_comments_block',
      'variables' => array('query_content' => '')
    ),
  );
}

/**
 * gigya_top_comments_fetch
 * Query for all top streams per ranking.
 *
 * @return Nodes to display based on ranking.
 */
function gigya_top_comments_fetch() {
  $query_content = '';
  $limit = variable_get('gigya_top_comments_item_count', '');
  $promoted_toggle = variable_get('gigya_top_comments_promote', '');
  if (isset($promoted_toggle['promote']) && $promoted_toggle['promote'] == TRUE) {
    $subquery = db_select('gigya_top_comments', 'g');
    $subquery->fields('g', array('sid', 'comment_count', 'popularity_score'));
    $subquery->leftJoin('node', 'n', '(g.sid = n.nid)');
    $subquery->condition('n.promote', 1, '=');
    $subquery->orderBy('popularity_score', 'DESC');
    $subquery->range(0, 10);

    $result = db_select($subquery, 's')
    ->fields('s', array('sid', 'comment_count'))
    ->orderBy('comment_count', 'DESC')
    ->execute();
  }
  else {
    $subquery = db_select('gigya_top_comments', 'g')
    ->fields('g', array('sid', 'comment_count', 'popularity_score'))
    ->orderBy('popularity_score', 'DESC')
    ->range(0, 10);

    $result = db_select($subquery , 's')
    ->fields('s', array('sid', 'comment_count'))
    ->orderBy('comment_count', 'DESC')
    ->execute();
  }
  foreach ($result as $r) {
    $stream_id = $r->sid;
    $formatted_result = array(
      'empty' => TRUE,
      'nid' => $stream_id,
      'comment_count' => $r->comment_count,
    );
    // Check to see if node exists.
    $sys_node = node_load($stream_id);
    if ($sys_node) {
      $formatted_result['empty'] = FALSE;
      $formatted_result['node'] = $sys_node;
    }
    $query_content[] = $formatted_result;
  }
  if (!empty($query_content)) {
    $output = theme('gigya_top_comments', array('query_content' => $query_content));
  }
  else {
    watchdog('gigya_top_comments', 'The Gigya Top Comments block was unable to retrieve any comment streams. Try running cron.');
    $output = '';
  }
  return $output;

}
