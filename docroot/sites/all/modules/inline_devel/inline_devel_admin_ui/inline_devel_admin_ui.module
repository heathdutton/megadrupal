<?php
/**
 * @file
 * The module file for the admin ui for inline devel.
 */

/**
 * Implements hook_menu().
 */
function inline_devel_admin_ui_menu() {
  $items = array();

  $default_task = array(
    'description' => 'Manage here your defined hooks via the inline devel module',
    'access arguments' => array('access devel information'),
    'page callback' => 'inline_devel_admin_ui_session_manage',
    'weight' => 0,
  );

  $items['admin/structure/inline_devel_admin'] = $default_task + array(
    'title' => 'Inline Devel',
  );

  $items['admin/structure/inline_devel_admin/hooks'] = $default_task + array(
    'title' => 'Temporary hooks',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/structure/inline_devel_admin/settings'] = array(
    'title' => 'settings',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'access arguments' => array('access devel information'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inline_devel_admin_ui_shorcuts_manage'),
  );

  $items['admin/structure/inline_devel_admin/delete/%inline_devel/%'] = array(
    'page callback' => 'inline_devel_admin_ui_session_delete',
    'page arguments' => array(4, 5),
    'access arguments' => array('inline devel delete entry'),
  );

  $items['admin/structure/inline_devel_admin/edit/%inline_devel'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inline_devel_admin_ui_edit_entry', 4),
    'access arguments' => array('access devel information'),
  );

  $items['admin/structure/inline_devel_admin/delete/%inline_devel'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inline_devel_admin_ui_delete_entry', 4),
    'access arguments' => array('inline devel delete entry'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function inline_devel_ui_permission() {
  return array(
    'inline devel edit entry' => array(
      'title' => t('Edit an inline devel entry'),
      'description' => t('Grant the user a permission to edit an inline devel entry'),
    ),
    'inline devel delete entry' => array(
      'title' => t('Delete an inline devel entry'),
      'description' => t('Grant the user a permission to delete an inline devel entry'),
    ),
  );
}

/**
 * UI for delete the sessions.
 */
function inline_devel_admin_ui_session_manage() {
  $content = t('Here you can manage your temporary functions that were defined in the !devel-execute-page-link.',
  array(
    '!devel-execute-page-link' => l(t('devel execute page'), 'devel/php'),
  )) . '<br /><br />';

  $header = array(
    t('Function name'),
    t('Arguments'),
    t('Content'),
    array('data' => t('Options'), 'colspan' => 2),
  );

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'inline_devel')
    ->execute();

  if (empty($result['inline_devel'])) {
    $rows[] = array(t('No predefined function were found.'), array('colspan' => count($header)));
  }
  else {
    $items = inline_devel_load_multiple(array_keys($result['inline_devel']));

    foreach ($items as $item) {
      if (empty($item->data)) {
        continue;
      }

      $rows[] = array(
        array('data' => t('Entry created at: @time.', array('@time' => date('d/m/Y', $item->time))), 'colspan' => count($header) - 1),
        l(t('Delete'), 'admin/structure/inline_devel_admin/delete/' . $item->identifier()),
        l(t('Edit'), 'admin/structure/inline_devel_admin/edit/' . $item->identifier()),
      );

      foreach ($item->data as $name => $data) {
        $rows[] = array(
          array(
            'data' => $data['function'],
            'class' => array('function-name'),
          ),
          array(
            'data' => $data['arguments'],
            'class' => array('function-arguments'),
          ),
          array(
            'data' => $data['content'],
            'class' => array('function-content'),
          ),
          array(
            'data' => l(t('Delete'),'admin/structure/inline_devel_admin/delete/' . $item->identifier() . '/' . $name),
            'class' => array('function-delete-button'),
            'colspan' => 2,
          ),
        );
      }
    }
  }

  // We had some inline devel entries but we didn't process any of them.
  if (empty($rows)) {
    $rows[] = array(
      array(
        'data' => t('No data were found.'),
        'colspan' => count($header),
      ),
    );
  }

  $content .= theme('table', array('header' => $header, 'rows' => $rows));

  return $content;
}

/**
 * Edit an entry.
 */
function inline_devel_admin_ui_edit_entry($form, &$form_state, InlineDevelEntity $inline_devel) {
  $form_state['#entity'] = $inline_devel;

  foreach ($inline_devel->data as $function => $data) {
    $form['data'][$function] = array(
      $function . '[function]' => array(
        '#type' => 'textfield',
        '#title' => t('Function'),
        '#value' => $data['function'],
      ),
    $function . '[arguments]' => array(
        '#type' => 'textfield',
        '#title' => t('Arguments'),
        '#value' => $data['arguments'],
      ),
      $function . '[content]' => array(
        '#type' => 'textarea',
        '#title' => t('Content'),
        '#value' => $data['content'],
      ),
    );
  }

  // Change the owner of the entry.
  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );

  $form['owner'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authoring information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('entry-form-owner'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'inline_devel_admin_ui') . '/js/inline_devel_admin_ui.js',
        array(
          'type' => 'setting',
          'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
        ),
      ),
    ),
    '#weight' => 90,
  );

  $form['owner']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Authored by'),
    '#maxlength' => 60,
    '#weight' => 99,
    '#autocomplete_path' => 'user/autocomplete',
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
    '#default_value' => user_load($inline_devel->uid)->name,
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Send'),
    ),
  );

  return $form;
}

/**
 * Save the inline devel entry.
 */
function inline_devel_admin_ui_edit_entry_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/structure/inline_devel_admin';
  $inline_devel = $form_state['#entity'];

  $data = array();
  foreach ($form_state['input'] as $name => $info) {
    if (!is_array($info)) {
      continue;
    }

    $data[$name] = $info;
  }

  $inline_devel->data = $data;

  $inline_devel->uid = user_load_by_name($form_state['values']['name'])->uid;
  dpm($inline_devel);
  $inline_devel->save();
}

/**
 * Delete a complete inline devel entry.
 */
function inline_devel_admin_ui_delete_entry($form, &$form_state, InlineDevelEntity $inline_devel) {
  $form_state['#entity'] = $inline_devel;

  return confirm_form($form,
    t('Are you sure you want to delete the entry?'),
    'admin/structure/inline_devel_admin',
    t('Are you sure you want to delete the entry with the functions: !functions',
      array('!functions' => theme('item_list', array('items' => array_keys($inline_devel->data))))),
    t('Delete'),
    t('Cancel'));
}

/**
 * Delete the inline devel entry.
 */
function inline_devel_admin_ui_delete_entry_submit($form, &$form_state) {
  $inline_devel = $form_state['#entity'];
  $inline_devel->delete();
  drupal_set_message('The entry has been deleted.');

  $form_state['redirect'] = 'admin/structure/inline_devel_admin';
}

/**
 * Delete the function session.
 */
function inline_devel_admin_ui_session_delete(InlineDevelEntity $inline_devel, $name) {

  if (in_array($name, array_keys($inline_devel->data))) {
    unset($inline_devel->data[$name]);
  }

  if (!$inline_devel->data) {
    // The entity data is empty, delete the complete entity. We don't need
    // inline devel items empty from data.
    $inline_devel->delete();
  }
  else {
    $inline_devel->save();
  }

  $args = array(
    '@function-name' => $name,
  );

  drupal_set_message(t('The function @function-name was removed from the session function list.', $args));
  drupal_goto('admin/structure/inline_devel_admin');
}

/**
 * Manage the shortcuts.
 */
function inline_devel_admin_ui_shorcuts_manage() {
  // Load the default settings into the js.
  _inline_devel_load_settings_to_js();

  $form['#attached']['js'][] = drupal_get_path('module', 'inline_devel_admin_ui') . '/js/inline_devel_admin_ui.js';

  $form['ctrl_s_enable'] = array(
    '#title' => t('Ctrl + s will submit the form'),
    '#description' => t('Using the ctrl+s will submit the form of the devel execute page.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('ctrl_s_enable', TRUE),
  );

  $form['esc_enable'] = array(
    '#title' => t('Close suggestor with esc button'),
    '#description' => t('When clicking on the esc button and the suggestor is visible it will be closed.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('esc_enable', TRUE),
  );

  $form['spaces_instead_of_tabs'] = array(
    '#title' => t('Insert spaces instead of tabs'),
    '#description' => t('This functionalty will disable the normal tab button functionality(jump between elements) and insert spaces instead.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('spaces_instead_of_tabs', TRUE),
  );

  $form['number_of_spaces'] = array(
    '#title' => t('Number of spaces instead of tabs'),
    '#description' => t('Number of spaces to replace the tabs. Default is value is two.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('number_of_spaces', 2),
    '#prefix' => '<div id="number_of_spaces">',
    '#suffix' => '</div>',
  );

  $form['show_colored_code'] = array(
    '#title' => t('Display the posted code in a highlighted format?'),
    '#description' => t('The code will be diplayed in a colored text.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('show_colored_code', FALSE),
  );

  $params = array(
    '!repository' => l('Repository', 'https://github.com/wolasss/jquery-caret-position-getter'),
  );

  $libraries = !module_exists('libraries') ? array() : libraries_get_libraries();

  $form['caret_position'] = array(
    '#type' => 'select',
    '#title' => t('Select the location of the caret position getter library'),
    '#description' => t('If you would like to display the function suggester under the caret on the text area, clone the !repository to the libraries folder and select the proper folder.', $params),
    '#options' => array(
      '---' => t('Turned off'),
    ) + array_flip($libraries),
    '#disabled' => !$libraries,
    '#default_value' => variable_get('caret_position', '---'),
  );

  if (!$libraries) {
    $form['caret_position']['#description'] .= '<br /><span style="color: red;">' . t('The libraries module is needed for this action.') . ' </span>';
  }

  return system_settings_form($form);
}
