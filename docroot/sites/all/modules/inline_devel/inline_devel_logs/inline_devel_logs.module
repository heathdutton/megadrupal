<?php

/**
 * @file
 * Main module file for Inline devel logs.
 */

/**
 * Implements hook_menu().
 */
function inline_devel_logs_menu() {
  $items = array();

  $items['inline_devel/log/redo/%message'] = array(
    'page callback' => 'inline_devel_logs_log_redo',
    'page arguments' => array(3),
    'access arguments' => array('access devel information'),
  );

  $items['admin/structure/inline_devel_admin/logs'] = array(
    'title' => 'Log list',
    'description' => 'Delete here your logs',
    'access arguments' => array('access devel information'),
    'page callback' => 'inline_devel_logs_log_list',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/structure/inline_devel_admin/logs/delete/%'] = array(
    'title' => 'Delete log',
    'access arguments' => array('access devel information'),
    'page callback' => 'inline_devel_logs_log_delete',
    'page arguments' => array(5),
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_default_message_type().
 */
function inline_devel_logs_default_message_type() {
  $items = array();
  $items['inline_devel_log'] = entity_import('message_type', '{
    "name" : "inline_devel_log",
    "description" : "Inline devel log",
    "argument_keys" : [ "@code" ],
    "argument" : [],
    "category" : "message_type",
    "data" : { "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" } },
    "language" : "",
    "arguments" : null,
    "message_text" : { "und" : [
        {
          "value" : "@code",
          "format" : "full_html",
          "safe_value" : "\u003Cp\u003E@code\u003C\/p\u003E\n"
        }
      ]
    },
    "rdf_mapping" : []
  }');

  return $items;
}

/**
 * Implements hook_theme().
 */
function inline_devel_logs_theme() {
  return array('inline_devel_log' => array(
    'template' => 'inline_devel_log_row',
    'path' => drupal_get_path('module', 'inline_devel_logs') . '/template',
  ));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 */
function inline_devel_logs_form_devel_execute_form_alter(&$form, &$form_state) {
  // If there are any history of logged code - show the history button.
  if (inline_devel_logs_number_of_logs()) {
    $form['#attached']['css'][] = drupal_get_path('module', 'inline_devel_logs') . '/css/inline_devel_logs.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'inline_devel_logs') . '/js/inline_devel_logs.js';

    $form['execute']['op']['#weight'] = 0;
    $form['execute']['op']['#prefix'] = '<div class="buttons-wrapper">';
    $form['execute']['history'] = array(
      '#type' => 'button',
      '#weight' => 1,
      '#value' => t('History'),
      '#suffix' => '<div id="history"><div class="code-wrappers">' . inline_devel_logs_get_logs() . '</div></div></div>',
      '#attributes' => array(
        'onclick' => array("return false;"),
      ),
    );
  }

  // Before registering the hooks(that alter the original code) - log the code.
  $first_function = array_slice($form['#submit'], 0, 1);
  $inserted_function = array('inline_devel_logs_log_function');
  $other_functions = array_slice($form['#submit'], 1, count($form['#submit']));

  $form['#submit'] = array_merge($first_function, $inserted_function, $other_functions);
}

/**
 * Custom execute function - log the message.
 */
function inline_devel_logs_log_function(&$form, $form_state) {
  _inline_devel_logs_log_functions($form_state['values']['code']);
}

/**
 * Helper function - logging the code.
 */
function _inline_devel_logs_log_functions($code) {
  $code = message_create('inline_devel_log', array(
    'arguments' => array(
      '@code' => $code,
    ),
  ));

  message_save($code);
}

/**
 * Return the number of logs.
 */
function inline_devel_logs_number_of_logs() {
  return _inline_devel_logs_efq()
    ->count()
    ->execute();
}

/**
 * Return the logs.
 */
function inline_devel_logs_get_logs() {
  $result = _inline_devel_logs_efq()
    ->propertyOrderBy('mid', 'DESC')
    ->execute();

  if (empty($result['message'])) {
    return;
  }

  // Count how many times the code was submitted.
  foreach (message_load_multiple(array_keys($result['message'])) as $message) {
    if (empty($message->arguments['@code'])) {
      continue;
    }
    $codes[json_encode($message->arguments['@code'])] = array(
      'code' => $message->arguments['@code'],
      'url' => url('inline_devel/log/redo/' . $message->mid),
    );
  }

  $content = '';

  foreach ($codes as $code) {
    $content .= theme('inline_devel_log', array(
      'code' => inline_devel_logs_formatted_text($code['code']),
      'url' => $code['url'],
    ));
  }
  return $content;
}

/**
 * Redo the function with three stes:
 *  1. Redo the function all over again.
 *  2. log the code all over again
 *  3. Write the code in the last session code to show to code in the form.
 */
function inline_devel_logs_log_redo($message) {
   eval($message->arguments['@code']);
   _inline_devel_logs_log_functions($message->arguments['@code']);
   $_SESSION['devel_execute_code'] = $message->arguments['@code'];

   // Go back to the devel.
   drupal_goto('devel/php');
}

/**
 * Helper function - return the entity filed query on the log messages.
 */
function _inline_devel_logs_efq() {
  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->propertyCondition('type', 'inline_devel_log', '=');

  return $result;
}

/**
 * Replacing the white spaces to &nbsp; and apply nl2br
 */
function inline_devel_logs_formatted_text($string) {
  $string = str_replace(' ', '&nbsp;', $string);
  $string = str_replace("\n", "<br />", $string);

  return $string;
}

/**
 * Custom page - show to logs for delete.
 */
function inline_devel_logs_log_list() {
  $result = _inline_devel_logs_efq()
    ->propertyOrderBy('mid', 'DESC')
    ->execute();

  if (empty($result['message'])) {
    return t('No logs were found.');
  }
  // Count how many times the code was submitted.
  foreach (message_load_multiple(array_keys($result['message'])) as $message) {
    $mids[serialize($message->arguments['@code'])][] = $message->mid;
  }

  $header = array(
    t('Code'),
    t('Delete'),
  );

  $rows = array();
  foreach ($mids as $code => $mid) {
    $rows[] = array(
      unserialize($code),
      l(t('Delete'), 'admin/structure/inline_devel_admin/logs/delete/' . implode("-", $mid)),
    );
  }

  $page = l(t('Delete all logs'), 'admin/structure/inline_devel_admin/logs/delete/all');
  $page .= '<br /><br />';
  $page .= theme('table', array('header' => $header, 'rows' => $rows));

  return $page;
}

/**
 * Delete the logs.
 */
function inline_devel_logs_log_delete($args) {
  if ($args == 'all') {
    $result = _inline_devel_logs_efq()->execute();
    message_delete_multiple(array_keys($result['message']));
  }
  else {
    message_delete_multiple(explode("-", $args));
  }

  drupal_set_message(t('The logs were deleted.'));

  // No logs were found - redirect to main page.
  if (inline_devel_logs_number_of_logs() == 0) {
    drupal_goto('');
  }

  drupal_goto('admin/structure/inline_devel_admin/logs');
}
