<?php

/**
 * @file 
 * Main testing file for Inline devel module.
 */

// Return of the testing class is not defined.
if (!class_exists('inlineDvelTesting')) {
  return;
}

class bacsicFunctionality extends inlineDvelTesting {
  public $modules = array('inline_devel');

  public static function getInfo() {
    return array(
      'name' => 'Inline Devel functionality',
      'description' => 'Creating a hook and verify that he took action.',
      'group' => 'Inline Devel',
    );
  }

  function testMain() {
    _inline_devel_run_sessioned_functions();
    // Check that this temporary hook is working well.
    $implements = in_array('Message Teseting', module_invoke_all('test_message_invoke'));
    $this->assertTrue($implements, t('Hook test_message_invoke implemented correctly.'));
  }
}

class JsonDecoding extends inlineDvelTesting {
  public $modules = array('inline_devel');
  
  public static function getInfo() {
    return array(
      'name' => 'Inline Devel JSON decoding',
      'description' => 'Check that the json we get is properly encoded.',
      'group' => 'Inline Devel',
    );
  }

  function testMain() {
    $this->drupalLogin($this->user);

    $suggestions = $this->drupalGetAJAX('devel/php/inline_devel/entity');

    $functions = $classes = array();

    foreach ($suggestions as $suggestion) {
      switch ($suggestion['type']) {
        case 'function':
          $functions[] = $suggestion['name'];
          break;

        case 'class':
          $classes[] = $suggestion['name'];
          break;
      }
    }

    $function_decode = in_array('entity_get_info', $functions);
    $class_decode = in_array('EntityFieldQuery', $classes);

    $this->assertTrue($function_decode, t('Functions are decoded well.'));
    $this->assertTrue($class_decode, t('Classes are decoded well.'));
  }
}
