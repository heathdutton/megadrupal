<?php

/**
 * @file
 * Classes and functions used to help test the Project Source: GitHub module.
 */


if (!function_exists('github_api_client')) {
  /**
   * Returns a mock GitHub API object, similar to what is returned by the GitHub
   * API module.
   *
   * @return GithubApiMock
   *   A custom mock GitHub API object we use for testing.
   */
  function github_api_client() {
    return new GithubApiMock();
  }
}


class GithubApiMock {

  /**
   * Returns an instance of the GithubApiMock object.
   *
   * @param string $type
   *
   * @return GithubApiMock
   *   Rather than dealing with multiple mock objects, we set this object up to
   *   return an instance of itself, which contains all methods we actually use.
   */
  public function api($type) {
    return $this;
  }

  /**
   * Returns an array that mimics a response from GitHub's API given a request
   * for repositories for a given organization.
   *
   * @param string $organization
   * @return array
   *   An array representing all GitHub repos for a given organization.
   */
  public function repositories($organization) {
    $module = $organization . '_module';
    $repos[$module] = array(
      'id' => 1234567,
      'name' => $module,
      'full_name' => $organization . '/' . $module,
      'owner' => array(
        'login' => $organization . '_user',
      ),
      'html_url' => 'http://example.com/' . $organization . '/' . $module,
      'default_branch' => '7.x-2.x',
      'private' => FALSE,
    );

    return $repos;
  }

  /**
   * Returns an array that mimics a response from GitHub's API given a request
   * for branches for a given author and repository.
   *
   * @param string $username
   * @param string $repository
   * @param string $branch
   *
   * @return array
   *   An array representing all branches for a given repository.
   */
  public function branches($username, $repository, $branch = NULL) {
    // Note we're making the branch name the key of the returned array. Although
    // this does not match up with GitHub's response, we use it for testing.
    $branches['6.x-1.x'] = array(
      'name' => '6.x-1.x',
      'commit' => array(
        'sha' => '231ed864c57ce2c890230b52f958dd33c65e54f6',
        'url' => 'http://api.example.com/repos/commits/etc/61',
      ),
    );
    $branches['7.x-1.x'] = array(
      'name' => '7.x-1.x',
      'commit' => array(
        'sha' => '231ed864c57ce2c890230b52f958dd33c65e54f7',
        'url' => 'http://api.example.com/repos/commits/etc/71',
      ),
    );
    $branches['7.x-2.x'] = array(
      'name' => '7.x-2.x',
      'commit' => array(
        'sha' => '65812be004d5b2701be8099c5886071a4909e775',
        'url' => 'http://api.example.com/repos/commits/etc/72',
      ),
    );
    $branches['master'] = array(
      'name' => 'master',
      'commit' => array(
        'sha' => '65812be004d5b2701be8099c5886071a4909e774',
        'url' => 'http://api.example.com/repos/commits/etc/master',
      ),
    );

    return $branches;
  }

  /**
   * Returns an instance of the GithubApiMock object.
   *
   * @return GithubApiMock
   *   Rather than dealing with multiple mock objects, we set this method up to
   *   return an instance of itself. Commit methods are also located on this
   *   object.
   */
  public function commits() {
    return $this;
  }

  /**
   * Returns an array that mimics a response from GitHub's API given a request
   * for commit details for a given commit on a given repository.
   *
   * @param $username
   * @param $repository
   * @param $sha
   *
   * @return array
   *   An array representing commit details for a given commitref for a given
   *   repository.
   */
  public function show($username, $repository, $sha) {
    return array(
      'commit' => array(
        'author' => array(
          'date' => 'November 19, 1978',
        ),
      ),
    );
  }

  /**
   * Returns an array that mimics a response from GitHub's API given a request
   * for release tags for a given repository.
   *
   * @param $username
   * @param $repository
   *
   * @return array
   *   An array representing release tag details for a given repository.
   */
  public function tags($username, $repository) {
    // Note we're making the tag name the key of the returned array. Although
    // this does not match up with GitHub's response, we use it for testing.
    $tags['6.x-1.0'] = array(
      'name' => '6.x-1.0',
      'zipball_url' => 'https://api.example.com/repos/zipball/6x10',
      'tarball_url' => 'https://api.example.com/repos/tarball/6x10',
      'commit' => array(
        'sha' => '231ed864c57ce2c890230b52f958dd33c65e54f6',
        'url' => 'http://api.example.com/repos/commits/etc/6x10',
      ),
    );
    $tags['7.x-1.0'] = array(
      'name' => '7.x-1.0',
      'zipball_url' => 'https://api.example.com/repos/zipball/7x10',
      'tarball_url' => 'https://api.example.com/repos/tarball/7x10',
      'commit' => array(
        'sha' => '231ed864c57ce2c890230b52f958dd33c65e54f7',
        'url' => 'http://api.example.com/repos/commits/etc/7x10',
      ),
    );
    $tags['7.x-2.0-alpha1'] = array(
      'name' => '7.x-2.0-alpha1',
      'zipball_url' => 'https://api.example.com/repos/zipball/7x20a1',
      'tarball_url' => 'https://api.example.com/repos/tarball/7x20a1',
      'commit' => array(
        'sha' => '65812be004d5b2701be8099c5886071a4909e774',
        'url' => 'http://api.example.com/repos/commits/etc/7x20',
      ),
    );
    $tags['7.x-2.0'] = array(
      'name' => '7.x-2.0',
      'zipball_url' => 'https://api.example.com/repos/zipball/7x20',
      'tarball_url' => 'https://api.example.com/repos/tarball/7x20',
      'commit' => array(
        'sha' => '65812be004d5b2701be8099c5886071a4909e775',
        'url' => 'http://api.example.com/repos/commits/etc/7x20',
      ),
    );

    return $tags;
  }
}

class GithubPaginatorMock {

  protected $client;

  public function __construct($client) {
    $this->client = $client;
  }

  /**
   * Mimics the GitHub paginator fetchAll method. Primarily relies on the mocks
   * provided by the client in $api. Currently only designed to work for org
   * repos.
   *
   * @param GithubApiMock $api
   * @param string $method
   * @param array $params
   * @return array
   */
  public function fetchAll($api, $method, $params) {
    return $api->{$method}($params[0]);
  }

}
