<?php
/**
 * @file
 * Drupal.org Project Browser Server module.
 * Authored by Leighton Whiting (wildkatana on Drupal.org)
 */

// ======================================
// Hooks:
// ======================================

/**
 * Implements hook_project_browser_server_query().
 * 
 * @see project_solr_browse_page
 *
 * @param $filters
 *   An associative array of the filters and their values.
 * @return array
 *   Returns an array of results, formatted for Project Browser.
 */
function drupalorg_pbs_project_browser_server_query($filters) {
  $results = array(
    'total' => 0,
    'projects' => array(),
  );
	
  $solr_filters = array(
    'bs_project_sandbox' => 0,
  );

  // Cap the amount requested to 10
  if ($filters['requested'] > 10) {
    $filters['requested'] = 10;
  }

  $text_query = isset($filters['text']) ? $filters['text'] : '';

  $order_by = isset($filters['order_by']) ? $filters['order_by'] : 'usage';
  $sort = isset($filters['sort']) ? $filters['sort'] : 'desc';

  $sort = drupalorg_pbs_switch_sort($order_by) . ' ' . $sort;

  // Validate sort parameter.
  if ((!isset($sort) || !preg_match('/^([a-z0-9_]+ (asc|desc)(,)?)+$/i', $sort)) && empty($text_query)) {
    $sort = 'sort_title asc';
  }
	
  $params = array(
    'q' => $text_query,
    'qf' => 'content',
    'fl' => 'id,entity_type,entity_id,label,content,is_comment_count,bundle,ds_created,
    				ds_changed,url,is_uid,ss_name,iss_project_release_usage,
    				ds_project_latest_release,ds_project_latest_activity',
    'rows' => $filters['requested'],
    'facet' => 'true',
    'facet.mincount' => 1,
    'facet.sort' => 'true',
    'facet.field' => array(
    	'bundle',
      'im_project_release_api_tids',
    ),
    'facet.limit' => 200,
  );

  $page = isset($filters['page']) ? $filters['page'] : 0;
  $params['start'] = $page * $params['rows'];
	
	// This is the object that does the communication with the solr server.
  $env_id = apachesolr_default_environment();
  $solr = apachesolr_get_solr($env_id);
	
  $query = new SolrBaseQuery($env_id, $solr, $params, $sort, 'project_browser/server/query/' . $filters['type'] . '/' . $filters['version']);
  if (is_null($query)) {
    throw new Exception(t('Could not construct a Solr query.'));
  }
	
	// Get these into an array now for better performance
	$maintenance_terms = array();
	foreach (taxonomy_get_tree(44) as $term) {
		$maintenance_terms[$term->tid] = $term->name;
	}
	$development_terms = array();
	foreach (taxonomy_get_tree(46) as $term) {
		$development_terms[$term->tid] = $term->name;
	}

  $query->addFilter('bundle', 'project_project');// FIXME - No way to filter modules/themes????
	$query->addFilter('bs_project_sandbox', '0');
  // We can only filter on bs_project_has_releases for just official projects,
  // since sandbox projects can never have releases.
  if (module_exists('project_release') && $query->hasFilter('bs_project_sandbox', '0')) {
    $query->addFilter('bs_project_has_releases', '1');
  }

	switch ($filters['version']) {
    case 6:
			$query->addFilter('im_project_release_api_tids', '87');
      break;
    case 7:
			$query->addFilter('im_project_release_api_tids', '103');
      break;
    case 8:
			$query->addFilter('im_project_release_api_tids', '7234');
      break;
  }

  // Set the category tids
  if (!empty($filters['categories']) && is_array($filters['categories'])) {
    foreach ($filters['categories'] as $tid => $enabled) {
      $query->addFilter('im_vid_3', $tid);
    }
  }

  // Allow modules to alter the query prior to statically caching it.
  // This can e.g. be used to add available sorts.
  foreach (module_implements('apachesolr_query_prepare') as $module) {
    $function_name = $module . '_apachesolr_query_prepare';
    $function_name($query, $params, 'project_solr_browse_page');
  }

  // Cache the built query. Since all the built queries go through
  // this process, all the hook_invocations will happen later.
  apachesolr_current_query($env_id, $query);

  if (!$query) {
    return array();
  }
	
	// Force sort to be by the corresponding core compatibility if filtered.
  $sort = $query->getSolrsort();
  if (in_array($sort['#name'], array('ds_project_latest_release', 'ds_project_latest_activity'))
    && ($api_filters = $query->getFilters('im_project_release_api_tids'))) {
    $first_filter = reset($api_filters);
    $query->setSolrsort($sort['#name'] .'_'. $first_filter['#value'], $sort['#direction']);
  }
  $response = $query->search($text_query);

  // The response is cached so that it is accessible to the blocks and anything
  // else that needs it beyond the initial search.
  $total = $response->response->numFound;

	$searcher = $query->getSearcher();
  apachesolr_static_response_cache($searcher, $response);
	
  apachesolr_has_searched($env_id, TRUE);
  $results['total'] = $total;

  // The response is cached so that it is accessible to the blocks and anything
  // else that needs it beyond the initial search.
  apachesolr_static_response_cache($response);
  apachesolr_has_searched(TRUE);
  
  date_default_timezone_set('UTC'); // for some reason the timezone wasn't set, this could probably be removed later...
  
  $result = db_query("SELECT * FROM {node} WHERE type = 'project_project'");
  
  foreach ($response->response->docs as $item) {
    $item->created = strtotime($item->ds_created);
    $item->changed = strtotime($item->ds_project_latest_activity);
    $node = node_load($item->entity_id);
    $image = '';
    if (isset($node->field_project_screenshots['und'][0]['url'])) {
      $image = $node->field_project_screenshots['und'][0]['url']; // FIXME - The images field is missing for some reason, using screenshots for now
    }
		/*
		if (isset($node->field_project_images[0]['filepath'])) {
      $image = url($node->field_project_images[0]['filepath'], array('absolute' => TRUE));
    }
		*/
		
		$project_shortname = $node->field_project_machine_name['und'][0]['value'];

    $project_info = array(
      'type' => $filters['type'],
      'title' => $item->label,
      'name' => $project_shortname,
      'author' => $item->ss_name,
      'description' => $item->content,
      'image' => $image,
      'usage' => !empty($item->iss_project_release_usage) ? $item->iss_project_release_usage : 0,
      'project url' => $item->url,
      'project status url' => 'http://updates.drupal.org/release-history/' . $project_shortname . '/' . $filters['version'] . '.x',
      'last updated' => $item->changed,
      'maintenance status' => '',
      'development status' => '',
      'rating' => '',
		);
		
		if (FALSE) { // This is too processor intensive, so we are leaving it out
			module_load_include('inc', 'project_dependency', 'project_dependency.drupal');
			// Get all versions for a project and build dependencies for them.
	    $pid = project_get_nid_from_uri($project_shortname);
	
	    // Find all releases for a project.
	    $query = 'SELECT nid,tag,version FROM {project_release_nodes} WHERE pid = %d ORDER BY nid DESC';
	    $result = db_query($query, $pid);
	    while ($release_info = db_fetch_array($result)) {
	      $v_dependencies = project_dependency_process_release($project_shortname, $release_info['version']);
	      if ($v_dependencies === FALSE) {
	        continue;
	      }
	      $dependencies[$release_info['version']] = $v_dependencies;
	    }
			$project_info['dependencies'] = $dependencies;
		}
		
		// We could expose the demo, screenshots, documentation pages if we wanted to:
		// $node->project['demo']
		// $node->project['screenshots']
		// $node->project['documentation']
		// $node->project['homepage']
		
		if (isset($node->taxonomy_vocabulary_44['und'][0]['tid'])) {
			$project_info['maintenance status'] = $maintenance_terms[$node->taxonomy_vocabulary_44['und'][0]['tid']];
		}
		if (isset($node->taxonomy_vocabulary_46['und'][0]['tid'])) {
			$project_info['development status'] = $development_terms[$node->taxonomy_vocabulary_46['und'][0]['tid']];
		}
		
		$results['projects'][$project_shortname] = $project_info;
  }

  return $results;
}

/**
 * Implements hook_project_browser_server_categories()
 *
 * The function should return an array like this:
 *
 * array(
 *   'category_1' => "Category 1",
 *   'category_2' => "Category 2",
 *   'category_3' => "Category 3",
 * );
 *
 * @param $type
 *   The type of project to get the categories for, 'module' or 'theme'
 * @return array
 *   Returns an array of categories
 */
function drupalorg_pbs_project_browser_server_categories($type) {
  $categories = array();

  switch ($type) {
    case 'module':
      $vocab = taxonomy_vocabulary_load(3);
      $tree = taxonomy_get_tree($vocab->vid);
      foreach ($tree as $term) {
        $categories[$term->tid] = $term->name;
      }
      break;

    case 'theme':
      // There are currently no categories for themes on drupal.org
  }

  return $categories;
}

/**
 * Change Project Browser's sort name to the ones used by drupal.org
 */
function drupalorg_pbs_switch_sort($sort) {
  switch ($sort) {
    case 'score':
      return 'score';
    case 'title':
      return 'sort_label';
    case 'type':
      return 'type';
    case 'name':
      return 'sort_name';
    case 'created':
      return 'created';
    case 'latest_release':
      return 'ds_project_latest_release';
    case 'latest_activity':
      return 'ds_project_latest_activity';
    case 'usage':
      return 'iss_project_release_usage';
  }
}
