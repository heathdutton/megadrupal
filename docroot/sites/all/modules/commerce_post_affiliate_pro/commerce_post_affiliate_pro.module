<?php
/*
 * @file commerce_post_affiliate_pro.module
 * Tracks affiliate referrals and commissions with Post Affiliate Pro
 * @license GPL v3 http://www.fsf.org/licensing/licenses/gpl.html
 *
 * Uses role based authorization to track affiliate referrals
 * and affiliate commissions
 * 
 */

/******************************************************************************
 * Constants
 *******************************************************************************/
define('COMMERCE_POST_AFFILIATE_PRO_MANUAL', 1);
define('COMMERCE_POST_AFFILIATE_PRO_AUTOMATIC', -1);
define('COMMERCE_POST_AFFILIATE_PRO_NONE', 0);

/******************************************************************************
 * Core Hooks
 *******************************************************************************/

/**
 * Implements hook_help();
 */
function commerce_post_affiliate_pro_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#commerce_post_affiliate_pro":

      $output .= t("This module is for merchants (eshop owners) who want to increase their income using external affiliate application.");
      $output .= t('Merchant needs to have valid account at <a href="@url" target="_blank" title="Post Affiliate Pro">Post Affiliate Pro</a> or can try \'demo\' account,
			that you get by default after Post affiliate Pro (PAP) module installation.', array('@url' => 'http://www.qualityunit.com/postaffiliatepro/#drupal'));;

      $output .= t("With this account you can test all available functions of this module.");

      $output .= t("<strong>List of current functions:</strong>
						<li>merchant's connection to PAP server with settings form</li>
						<li>report of orders for merchant</li>
						<li>report of payouts for merchant</li>
						<li>report of payouts for affiliates</li>
						<li>available registration for users as affiliates</li>");

      $output .= t("<strong>If you don't get PAP reports you need to check:</strong>
						<li>you have configured correct username / password and link to your account on PAP server</li>
						<li>you have enabled JavaScript in your browser</li>
						<li>you don't have have any JavaScript error caused with other modules and functions</li>");
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function commerce_post_affiliate_pro_permission() {
  return array(
    'register pap affiliate' => array(
      'title' => t('Register PAP Affiliate'),
    ),
    'administer commerce_post_affiliate_pro' => array(
      'title' => t('Administer Commerce PAP'),
    ),
    'access all post affiliate pro user reports' => array(
      'title' => t('Access all post affiliate pro reports for all users'),
      'description' => t('Note this permission should only be granted to super users.'),
    ),
    'access own post affiliate pro user reports' => array(
      'title' => t('Access own post affiliate pro user reports'),
    ),
    'exclude from page tracking' => array(
      'title' => t('Exclude from PAP page tracking'),
      'description' => t('Exclude from PAP tracking - note user 1 is excluded by default.'),
    ),
  );
}

/**
 * Implements hook_menu();
 */
function commerce_post_affiliate_pro_menu() {
  $items = array();

  // Helper variable
  $access = array('administer commerce_post_affiliate_pro');

  $items['admin/commerce/config/post-affiliate-pro'] = array(
    'title' => 'Post Affiliate Pro',
    'description' => 'Manage Post Affiliate Pro',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_post_affiliate_pro_admin_manage'),
    'access arguments' => $access,
    'file' => 'commerce_post_affiliate_pro.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/config/post-affiliate-pro/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/commerce/config/post-affiliate-pro/reports'] = array(
    'title' => 'Reports',
    'page callback' => 'commerce_post_affiliate_pro_reports',
    'file' => 'commerce_post_affiliate_pro.admin.inc',
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'weight' => -8,
  );

  $items['admin/commerce/config/post-affiliate-pro/report_payouts'] = array(
    'title' => 'Payouts',
    'page callback' => 'commerce_post_affiliate_pro_report_payouts',
    'file' => 'commerce_post_affiliate_pro.admin.inc',
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'weight' => -6,
  );

  $items['admin/commerce/config/post-affiliate-pro/affiliates'] = array(
    'title' => 'Affiliates',
    'file' => 'commerce_post_affiliate_pro.admin.inc',
    'page callback' => 'commerce_post_affiliate_pro_affiliates',
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'weight' => -4,
  );

  $items['user/%user/affiliate-report'] = array(
    'title' => 'Affiliate transactions',
    'file' => 'commerce_post_affiliate_pro.admin.inc',
    'description' => "View affiliate transactions.",
    'page callback' => 'commerce_post_affiliate_pro_affiliate_report',
    'page arguments' => array(1),
    'access callback' => array('commerce_post_affiliate_pro_access'),
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function commerce_post_affiliate_pro_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_post_affiliate_pro_register_block' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_block_info();
 */
function commerce_post_affiliate_pro_block_info() {
  return array(
    'register' => array(
      'info' => t('Register new Affiliate'),
    ),
  );
}

/**
 * Implements hook_block_view();
 */
function commerce_post_affiliate_pro_block_view($delta) {
  $block = array();
  if ($delta == 'register') {
    $block['subject'] = t('Register as our new affiliate now!');
    $block['content'] = theme('commerce_post_affiliate_pro_register_block', array());
  }
}

/**
 * Implements hook_page_build().
 * Add the PAP click tracking
 */
function commerce_post_affiliate_pro_page_build(&$page) {
  if (!user_access('exclude from page tracking')) {
    $page['page_bottom']['commerce_post_affiliate_pro'] = array(
      '#type' => 'markup',
      '#markup' => '<script type="text/javascript"><!--
				// -->
				document.write(unescape("%3Cscript id=\'pap_x2s6df8d\' src=\'" + (("https:" == document.location.protocol) ? "https://" : "http://") + "' . ltrim(ltrim(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/'), 'http://'), 'https://') . 'scripts/trackjs.js\' type=\'text/javascript\'%3E%3C/script%3E"));
				</script>
				<script type="text/javascript"><!--
				try {
				PostAffTracker.track();
				} catch (err) { }
				//-->
				</script>',
    );
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function commerce_post_affiliate_pro_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];
    // Only if we have this feature enabled
    $signup_status = variable_get('commerce_post_affiliate_pro_affiliate_activated', 0);
    if (in_array($signup_status, array(COMMERCE_POST_AFFILIATE_PRO_MANUAL, COMMERCE_POST_AFFILIATE_PRO_AUTOMATIC))) {
      // affiliate exists in DB
      if ($account->affiliate_username && $signup_status == COMMERCE_POST_AFFILIATE_PRO_MANUAL) {

        $affiliate = commerce_post_affiliate_pro_load_affiliate($account->affiliate_username);
        if (empty($affiliate)) {
          // We failed to fetch their details
          return;
        }

        $form['post_affiliate_user_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Edit Affiliate account on Post Affiliate Pro server'),
          '#collapsible' => TRUE,
        );

        $form['post_affiliate_user_settings']['affiliate_username'] = array(
          '#type' => 'item',
          '#title' => t("Affiliate's username"),
          '#value' => check_plain($account->affiliate_username),
        );

        $states = commerce_post_affiliate_pro_affiliate_statuses();

        $form['post_affiliate_user_settings']['affiliate_status'] = array(
          '#type' => 'item',
          '#title' => t("Affiliate's acount status"),
          '#value' => $states[$affiliate['status']],
          '#description' => t('Approved - account is active, Pending - account is waiting for approval, Declined - account is disabled'),
        );

        $link = url('<front>', array('absolute' => TRUE, 'fragment' => check_plain($affiliate['affiliate_refid'])));
        $form['post_affiliate_user_settings']['affiliate_refid'] = array(
          '#type' => 'item',
          '#title' => t("Affiliate's Referrer ID"),
          '#value' => check_plain($affiliate['affiliate_refid']),
          '#description' => t('It is used by affiliate linking and redirects. Your affiliate link is: <a href="!url">!url</a>', array('!url' => $link)),
        );

        $form['post_affiliate_user_settings']['note'] = array(
          '#type' => 'item',
          '#title' => t("Affiliate's note"),
          '#value' => check_plain($affiliate['note']),
        );

        $form['post_affiliate_user_settings']['affiliate_password'] = array(
          '#type' => 'password',
          '#title' => t("Affiliate's password"),
          '#description' => t("Affiliate's password on Post Affiliate Pro server. If it is empty, value will be not updated on PAP server."),
        );
      }
      else {
        // affiliate needs to be registered
        $form['post_affiliate_user_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Register new Affiliate account on Post Affiliate Pro server'),
          '#collapsible' => TRUE,
          '#weight' => 5,
        );

        $form['post_affiliate_user_settings']['pap_link'] = array(
          '#type' => 'item',
          '#value' => t("This form creates an affiliate account on <a href=\"%s\" target=\"_blank\">Post Affiliate Pro server</a>. You can earn money for every sell you mediate.", array('%s' => 'http://www.qualityunit.com/postaffiliatepro/#drupal')),
        );

        $form['post_affiliate_user_settings']['affiliate_username'] = array(
          '#type' => 'textfield',
          '#title' => t("Affiliate's username (email)"),
          '#description' => t("Affiliate's username on Post Affiliate Pro server (must be an email), if it is still free on PAP server. If it is empty, affiliate account will be not created on PAP server."),
          '#default_value' => $account->mail,
        );

        $form['post_affiliate_user_settings']['affiliate_password'] = array(
          '#type' => 'password',
          '#title' => t("Affiliate's password"),
          '#description' => t("Affiliate's password on Post Affiliate Pro server, can be used the same as password from this website. If it is empty, affiliate account will be not created on PAP server."),
        );

        $form['post_affiliate_user_settings']['affiliate_refid'] = array(
          '#type' => 'textfield',
          '#title' => t("Affiliate's referrer ID"),
          '#description' => t("Unique affiliate's referrer ID that is used to idetify his transactions. If it is empty, affiliate account will be not created on PAP server."),
          '#default_value' => $account->name,
        );
      }
    }
  }
}

/**
 * Implementation of hook_user_load().
 */
function commerce_post_affiliate_pro_user_load($users) {
  $result = db_query('SELECT uid, affiliate_username FROM {commerce_post_affiliate_pro_affiliates}
										 WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->affiliate_username = $record->affiliate_username;
  }
}

/**
 * Implements hook_form_FORM_ID_alter();
 */
function commerce_post_affiliate_form_user_register_form_alter(&$form, &$form_state) {
  // Modify the user register form to collect affiliate details
  $signup_status = variable_get('commerce_post_affiliate_pro_affiliate_activated', 0);
  if ($signup_status == COMMERCE_POST_AFFILIATE_PRO_MANUAL) {
    $form['post_affiliate_user_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Register new Affiliate account on Post Affiliate Pro server'),
      '#collapsible' => TRUE,
      '#weight' => 5,
    );

    $form['post_affiliate_user_settings']['pap_link'] = array(
      '#type' => 'item',
      '#value' => t("This form creates an affiliate account on <a href=\"%s\" target=\"_blank\">Post Affiliate Pro server</a>. You can earn money for every sell you mediate.", 'http://www.qualityunit.com/postaffiliatepro/#drupal'),
    );

    $form['post_affiliate_user_settings']['affiliate_username'] = array(
      '#type' => 'textfield',
      '#title' => t("Affiliate username (email)"),
      '#description' => t("Affiliate's username on Post Affiliate Pro server, must be an email, if it is still free on PAP server. If it is empty, affiliate account will be not created on PAP server."),
    );

    $form['post_affiliate_user_settings']['affiliate_password'] = array(
      '#type' => 'password',
      '#title' => t("Affiliate password"),
      '#description' => t("Password on Post Affiliate Pro server, can be used the same as password from this website. If it is empty, affiliate account will be not created on PAP server."),
    );

    $form['post_affiliate_user_settings']['affiliate_refid'] = array(
      '#type' => 'textfield',
      '#title' => t("Affiliate's referrer ID"),
      '#description' => t("Unique affiliate's referrer ID that is used to idetify his transactions. If it is empty, affiliate account will be not created on PAP server."),
    );
  }
}

/**
 * Implements hook_user_insert();
 */
function commerce_post_affiliate_pro_user_insert(&$edit, $account, $category) {
  if ($category == 'account') {
    $signup_status = variable_get('commerce_post_affiliate_pro_affiliate_activated', 0);
    if ($signup_status == COMMERCE_POST_AFFILIATE_PRO_MANUAL &&
      $edit['affiliate_username'] && $edit['affiliate_password'] && $edit['affiliate_refid']
    ) {
      // inserting new affiliate
      commerce_post_affiliate_pro_register_affiliate($edit, $account);
    }
    elseif ($signup_status == COMMERCE_POST_AFFILIATE_PRO_AUTOMATIC) {
      // Auto insert new affiliate
      $edit['affiliate_username'] = $edit['mail'];
      $edit['affiliate_password'] = $edit['pass'];
      $edit['affiliate_refid'] = $edit['name'];
      commerce_post_affiliate_pro_register_affiliate($edit, $account);
    }
  }
}

/**
 * Implements hook_user_update();
 */
function commerce_post_affiliate_pro_user_update(&$edit, $account, $category) {
  // Use empty because 0 is invalid for any of these fields.
  if (!empty($edit['affiliate_username']) && !empty($edit['affiliate_password']) && !empty($edit['affiliate_refid'])) {
    // inserting new affiliate
    commerce_post_affiliate_pro_register_affiliate($edit, $account);
  }
  // update existing affiliate account
  elseif (!empty($edit['affiliate_password']) && !isset($edit['affiliate_username'])) {
    // update password
    commerce_post_affiliate_pro_update_affiliate($edit, $account);
  }
}

/**
 * Implements hook_user_view
 */
function commerce_post_affiliate_pro_user_view($account, $view_mode, $langcode) {
  if ($account->uid && commerce_post_affiliate_pro_access($account)
    && !empty($account->affiliate_username)
  ) {
    $account->content['commerce_post_affiliate_pro_affiliate_report'] = array(
      '#type' => 'user_profile_category',
      '#weight' => -5,
      '#title' => t("Report of Affiliate's transactions"),
      'link' => array(
        '#type' => 'user_profile_item',
        '#value' => l(t('Click here to view your transactions on Post Affiliate Pro server.'), 'user/' . $account->uid . '/affiliate_report'),
      ),
    );
  }
}

/******************************************************************************
 * Access callbacks
 *******************************************************************************/

/**
 * Access function to check user has access to the post affiliate pro report
 *
 * @param $account;
 */
function commerce_post_affiliate_pro_access($account) {
  global $user;
  return (user_access('access all post affiliate pro user reports') ||
    (user_access('access own post affiliate pro user reports') && $account->uid == $user->uid)
  );
}

/******************************************************************************
 * Theme functions
 *******************************************************************************/

/**
 * Default implementation of theme_commerce_post_affiliate_pro_register_block
 */
function theme_commerce_post_affiliate_pro_register_block($variables) {
  $result = t("If you want to become our new affiliate, click on link below. It's free!") . '<br/>';
  $result .= '<a href="' . variable_get('commerce_post_affilate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . 'affiliates/signup.php#SignupForm" target="_blank">' . t('Affiliate Registration') . '</a><br/><br/>' . "\n";
  $result .= t('If you already have account as affiliate, you can check out your reports here:') . "<br/>\n";
  $result .= '<a href="' . variable_get('commerce_post_affilate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . 'affiliates/login.php#login" target="_blank">' . t('Affiliate Login') . '</a>' . "\n";
  return $result;
}

/******************************************************************************
 * Module/API functions
 *******************************************************************************/

/**
 * Load the use
 *
 * @param $account object user object
 */
function commerce_post_affiliate_pro_user_load_affiliate(&$account) {
  if ($account->uid) {
    $account->affiliate_username = db_query("SELECT
											 affiliate_username
											 FROM {commerce_post_affiliate_pro_affiliates}
											 WHERE uid = :uid", array(':uid' => $account->uid))->fetchField();
  }
  return $account;
}

/**
 * Register new Affiliate on PAP server
 */
function commerce_post_affiliate_pro_register_affiliate(&$edit, &$account) {
  $pap_session_merchant = commerce_post_affiliate_pro_get_session();

  // create new affiliate
  $affiliate = new Pap_Api_Affiliate($pap_session_merchant);
  $affiliate->setUsername($edit['affiliate_username']);
  $affiliate->setFirstname($account->name);
  $affiliate->setLastname($account->name);
  $affiliate->setPassword($edit['affiliate_password']);
  $affiliate->setRefid($edit['affiliate_refid']);

  try {
    if ($affiliate->add()) {
      drupal_set_message(t("Affiliate account was created sucessfully."), 'status');

      // add record in DB
      db_query("INSERT INTO {uc_pap_affiliates} (affiliate_id, uid, affiliate_username) VALUES (0, %d, '%s')", $account->uid, $edit['affiliate_username']);
    }
    else {
      drupal_set_message(t("Cannot register pap affiliate. Message: %error", array('%error' => $affiliate->getMessage())), 'error');
    }
  }
  catch(Exception$e) {
    drupal_set_message(t("Error while communicating with PAP: %error", array('%error' => $e->getMessage())), 'error');
  }
}

/**
 * Load Affiliate's data from PAP server
 */
function commerce_post_affiliate_pro_load_affiliate($affiliate_username) {
  $affiliate_data = array();
  $pap_session_merchant = commerce_post_affiliate_pro_get_session();
  // create new affiliate
  $affiliate = new Pap_Api_Affiliate($pap_session_merchant);
  $affiliate->setUsername($affiliate_username);
  try {
    $affiliate->load();
  }
  catch(Exception$e) {
    drupal_set_message(t("Cannot load record: %error", array('%error' => $affiliate->getMessage())), 'error');
    watchdog('commerce_post_affiliate_pro', "Load user error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
    return $affiliate_data;
  }


  $affiliate_data['user_id'] = $affiliate->getUserid();
  $affiliate_data['firstname'] = $affiliate->getFirstname();
  $affiliate_data['lastname'] = $affiliate->getLastname();
  $affiliate_data['affiliate_refid'] = $affiliate->getRefid();
  $affiliate_data['status'] = $affiliate->getStatus();
  $affiliate_data['note'] = $affiliate->getNote();

  return $affiliate_data;
}

/**
 * Update existing Affiliate account on PAP server
 */
function commerce_post_affiliate_pro_update_affiliate(&$edit, &$account) {
  $pap_session_merchant = commerce_post_affiliate_pro_get_session();

  // load affiliate
  $affiliate = new Pap_Api_Affiliate($pap_session_merchant);
  $affiliate->setUsername($account->affiliate_username);
  try {
    $affiliate->load();
  }
  catch(Exception$e) {
    drupal_set_message(t("Error saving affiliate record: %error", array('%error' => $affiliate->getMessage())), 'error');
    watchdog('commerce_post_affiliate_pro', "Error saving affiliate error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
    return;
  }

  if ($edit['affiliate_password']) {
    $affiliate->setPassword($edit['affiliate_password']);
    try {
      if ($affiliate->save()) {
        drupal_set_message(t("Affiliate account was udated sucessfully."), 'status');
      }
      else {
        drupal_set_message(t("Cannot update affiliate. Message: %error", array('%error' => $affiliate->getMessage())), 'error');
        watchdog('commerce_post_affiliate_pro', "Error saving affiliate error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
        return;
      }
    }
    catch(Exception$e) {
      drupal_set_message(t("Error while communicating with PAP: %error", array('%error' => $e->getMessage())), 'error');
      watchdog('commerce_post_affiliate_pro', "Error saving affiliate error: @error", array('@error' => $e->getMessage()), WATCHDOG_ERROR);
      return;
    }
  }
}

/**
 * Util function to return PAP account statuses
 */
function commerce_post_affiliate_pro_affiliate_statuses() {
  return array(
    'A' => t('Approved'),
    'P' => t('Pending'),
    'D' => t('Declined'),
  );
}

/*
* Util to load the connection 
*/
function commerce_post_affiliate_pro_get_session() {
  static $pap_session_merchant;
  if ($pap_session_merchant == NULL) {
    // merchant login
    $path = libraries_get_path('pap');
    require_once ($path . '/PapApi.class.php');
    module_load_include('php', 'commerce_post_affiliate_pro', 'DrupalPapApi.class');

    $pap_session_merchant = new Drupal_Gpf_Api_Session(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . "scripts/server.php");
    if (!$pap_session_merchant->login(variable_get('commerce_post_affiliate_pro_merchant_username', 'merchant@example.com'),
        variable_get('commerce_post_affiliate_pro_merchant_password', 'demo')
      )) {
      drupal_set_message(t("Cannot login. Message: @error", array('@error' => $pap_session_merchant->getMessage())), 'error');
      watchdog('commerce_post_affiliate_pro', "API login error: @error", array('@error' => $pap_session_merchant->getMessage()), WATCHDOG_CRITICAL);
      // Stuff seriously wrong here so we bail
      return drupal_not_found();
    }
  }
  return $pap_session_merchant;
}

/**
 * Implements hook_user_login
 */
function commerce_post_affiliate_pro_user_login(&$edit, $account) {
  // auto login enabled
  if (variable_get('commerce_post_affiliate_pro_affiliate_auto_login', FALSE)) {
    $enabled_roles = variable_get('commerce_post_affiliate_pro_affiliate_auto_login_roles', array());
    // which roles are enabled
    $roles = array_intersect(array_keys($account->roles), $enabled_roles);
    if (!empty($roles)) {
      // username
      $username = $account->mail;
      $password = $edit['values']['pass'];
      // load libraries
      $path = libraries_get_path('pap');
      require_once ($path . '/PapApi.class.php');
      module_load_include('php', 'commerce_post_affiliate_pro', 'DrupalPapApi.class');
      $pap_session_affiliate = new Gpf_Api_Session(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . "scripts/server.php");
      if (!$pap_session_affiliate->login($username, $password, Gpf_Api_Session::AFFILIATE)) {
        drupal_set_message(t("Cannot login to Post Affiliate Pro. Message: @error", array('@error' => $pap_session_affiliate->getMessage())), 'error');
        watchdog('commerce_post_affiliate_pro', "API login error: @error", array('@error' => $pap_session_affiliate->getMessage()), WATCHDOG_CRITICAL);
        // Stuff seriously wrong here so we bail
        return drupal_not_found();
      }
      else {
        $panel_url = $pap_session_affiliate->getUrlWithSessionInfo(variable_get('commerce_post_affiliate_pro_merchant_url_prefix', 'http://demo.qualityunit.com/pax4/') . 'affiliates/panel.php');
        drupal_set_message(t("Click !here to access your Post Affiliate Pro control panel.", array('!here' => l('here', $panel_url, array('external' => TRUE)))));
      }
    }
  }
}

