<?php

/**
 * @file
 * Lets users login to drupal by certificate
 *
 * Uses a unique identifier in a certificate to
 * either create a new account for a user and log
 * them in or log them in to an existing account
 */

/**
 * Implementation of hook_help().
 */
function certificatelogin_help($path, $arg) {
  switch ($path) {
    case 'admin/help#certificatelogin':
     $output = t("<p>Do you work for an organization where certificates are used for authentication? This module makes it possible for your users to register and login by certificate. When a drupal page is accessed via https the module checks for certain environmental variables that contain the user's unique information, such as an email address. It then creates a new account if one does not exist or logs the user in if the account exists already.</p>
<p>
Features:
<ul>
<li>Present login link on access denied (403)</li><li>
Automatic account creation</li><li>
Automatic role configuration</li><li>
Current login override</li>
</ul>
</p>
<p>This module makes no major changes to your database.</p>
");
      return $output;
      break;
    case 'admin/user/certificatelogin':
      $output = t('<p>Customize your login and registration system. More help can be found <a href="!url">here</a>.</p>', array('!url' => url('admin/help/certificatelogin')));

      return $output;
  }
}

/**
 * Implementation of hook_permission().
 */
function certificatelogin_permission() {
  return array(
    'administer certificate login' => array(
      'title' => t('Administer Certificate login'),
      'description' => t('Change the login settings for Certificate login'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function certificatelogin_menu() {
$items = array();

  // Settings page.
  $items['admin/config/people/certificatelogin'] = array(
    'title' => 'Certificate login',
    'description' => 'Allow users to authenticate by certificate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('certificatelogin_admin_settings'),
    'access arguments' => array('administer certificate login'),
    'type' => MENU_NORMAL_ITEM
  );    

  // Display the login form on a specified page
  $items['login'] = array(
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('certificate_login_form'),
    'title' => 'Login with certificate',
    'type' => MENU_CALLBACK
  );

  // Authmap functionality
  $items['user/%user/certificatelogin'] = array(
    'title' => 'Certificate identities',
    'page callback' => 'certificatelogin_user_identities',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  // Authmap functionality
  $items['user/%user/certificatelogin/delete'] = array(
    'title' => 'Delete certificate identity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('certificatelogin_user_delete_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  // Callback for handling access denied redirection
  $items['certificatelogin/denied'] = array(
    'page callback' => 'certificatelogin_denied',
    'access callback' => TRUE,
    'title' => 'Access denied',
    'type' => MENU_CALLBACK
  ); 

  return $items;
}

/**
 * Define the login page 
 */
function certificate_login_form($formstate) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Login with certificate')
  );
  return $form;
}

/*
 * Page callback for listing of users' certificate identities
 *
 * Much of the code borrowed from Drupal 6's OpenID module.
 */
function certificatelogin_user_identities($account) {
  drupal_set_title(check_plain($account->name));

  $header = array(t('Certificate identifier'), t('Operations'));
  $rows = array();

  $result = db_query("SELECT * FROM {authmap} WHERE module='certificatelogin' AND uid = :uid", array(':uid' => $account->uid));
  foreach ($result as $identity) {
    $rows[] = array(check_plain($identity->authname), l(t('Delete'), 'user/' . $account->uid . '/certificatelogin/delete/' . $identity->aid));
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  $output.= drupal_render(drupal_get_form('certificatelogin_user_add'));
  return $output;
}

function certificatelogin_user_add() {
  $form['submit'] = array('#type' => 'submit', '#value' => t('Add a certificate'));
  return $form;
}

function certificatelogin_user_add_submit($form, &$form_state) {
  global $user;
  $usernameString = variable_get('certificatelogin_nameCode', '');
  eval("\$username = $usernameString;");
  if ($username == '') {
    drupal_set_message(t('A login was attempted but failed because information could not be retrieved from your certificate.'), 'error');
    return;
  }

  // Check if the certificate is already attached
  $account = user_external_load($username);
  if ($account) {
    drupal_set_message(t('That certificate is already in use on this site.'));
    return;
  }
  else {
    db_insert('authmap')
      ->fields(array(
        'uid' => $user->uid,
        'authname' => $username,
        'module' => 'certificatelogin'
      ))
      ->execute();
    drupal_set_message(t('Successfully added %identity.', array('%identity' => $username)));
    return;
  }
}

function certificatelogin_user_delete_form($form, &$form_state, $account, $aid = 0) {
  $q = 'SELECT authname FROM {authmap} WHERE uid = :uid AND aid = :aid';
  $res = db_query($q, array(':uid' => $account->uid, ':aid' => $aid));
  if ($res->rowCount() == 0) {
    return FALSE;
  }
  $authname = $res->fetchColumn();

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $account->uid,
  );
  $form['aid'] = array(
    '#type' => 'value',
    '#value' => $aid,
  );

  return confirm_form($form, 
    t('Are you sure you want to delete the certificate %authname for %user?', array('%authname' => $authname, '%user' => $account->name)), 
    'user/' . $account->uid . '/certificatelogin');
}

function certificatelogin_user_delete_form_submit($form, &$form_state) {
  $num = db_delete('authmap')
    ->condition('uid', $form_state['values']['uid'])
    ->condition('aid', $form_state['values']['aid'])
    ->condition('module', 'certificatelogin')
    ->execute();
  if ($num) {
    drupal_set_message(t('Certificate deleted.'));
  }
  $form_state['redirect'] = 'user/' . $form_state['values']['uid'] . '/certificatelogin';
}

/**
 * Define the settings form
 */

function certificatelogin_admin_settings($form_state) {
/*
  $form['certificatelogin_loginpath'] = array(
    '#type' => 'textfield',
    '#title' => t('Automatic Login Path'),
    '#default_value' => variable_get('certificatelogin_loginpath', ''),
    '#description' => t('Path for automatic authentication.  The URL must be accessed with HTTPS. If the field is left blank and the module is enabled then accessing any HTTPS will attempt a login.')
  );
*/

  $form['certificatelogin_nameCode'] = array(
    '#type' => 'textarea',
    '#title' => t('PHP code to retrieve auth name'),
    '#default_value' => variable_get('certificatelogin_nameCode', ''),
    '#description' => t('This code should evaluate to the auth name that will be taken from the environmental variable. For example \'$GLOBALS[\'user\']->mail\'. The value must be unique. An email address is a good choice. Do not include PHP tags.')
  );
/*
  $form['usernameauth']['certificatelogin_accountcreation'] = array(
    '#type' => 'radios',
    '#title' => t('Account Creation'),
    '#options' => array('1' => t('Enabled'), '0' => t('Disabled')),
    '#default_value' => variable_get('certificatelogin_accountcreation', 0),
    '#description' => t('Automatically create accounts when they do not exist.  Account names must be unique so using email addresses is a good idea!')
  );

  $form['usernameauth']['certificatelogin_role'] = array(
    '#type' => 'select',
    '#title' => t('Account Creation Role'),
    '#options' => array(user_roles()),
    '#default_value' => variable_get('certificatelogin_role', '1'),
    '#description' => t('When a new account is created the user will be automatically assigned to this role.')
  );
*/

  $form['certificatelogin_loginoverride'] = array(
    '#type' => 'radios',
    '#title' => t('Current Login Override'),
    '#options' => array('1' => t('Enabled'), '0' => t('Disabled')),
    '#default_value' => variable_get('certificatelogin_loginoverride', 0),
    '#description' => t('If the user is currently logged in and this option is enabled they will be logged out and logged in as the user corresponding to their certificate.  If it is disabled they will only be logged in if they are not currently logged in.')
  );

  $form['site_403'] = array(
    '#type' => 'radios',
    '#title' => t('Present login link on access denied (403)'),
    '#options' => array('certificatelogin/denied' => t('Enabled'), '' => t('Disabled')),
    '#default_value' => variable_get('site_403', ''),
    '#description' => t('Anonymous users will be presented with a login link along with an access denied message.')
  );

  $form['certificatelogin_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Denied Custom Message'),
    '#default_value' => variable_get('certificatelogin_message', ''),
    '#description' => t('Display a custom message on access denied pages.')
  );

  $form['array_filter'] = array('#type' => 'hidden');
  return system_settings_form($form);
}

/**
 * Force https to attempt login
 */
function certificate_login_form_submit($form_id, &$form_values){
  //if https is enabled
  if (isset($_SERVER['HTTPS']) || $_SERVER["SERVER_PORT"] == 443) {
    //set some variables
    global $user;
    $loginSuccess = 0; 
    //the username from the variable set under admin
    $usernameString = variable_get('certificatelogin_nameCode', '');
    eval("\$username = $usernameString;");
    if ($username == '') {
      drupal_set_message(t('A login was attempted but failed because information could not be retrieved from your certificate.'), 'error');
      return;
    }
    if ($user->uid != 0 && variable_get('certificatelogin_loginoverride', 0) == 0) { // The user is logged in and the override is disabled
      drupal_set_message(t('A login was attempted but failed because you are already logged in as %user.', array('%user' => $user->name)), 'error');
      return;
    }
    if ($user->uid == 0 || variable_get('certificatelogin_loginoverride', 0) == 1) { //if the user is not logged in or the override is enabled 
      if (variable_get('certificatelogin_authmap', 1) == 0) {
        //determine if the account exists
        $account = user_load_by_name($username);
        if (!$account && variable_get('certificatelogin_accountcreation', '') == 1) { //if the account does not exist then create the account and login (if enabled)
          $password = user_password();
          $roles = variable_get('certificatelogin_role', '2');
          $roleSet[$roles] = $roles; 
          $userArray = array('name' => $username, 'pass' => $password, 'status' => 1, 'mail' => $username, 'roles' => $roleSet);
          $newAccountSuccess = user_save($account, $userArray); 
          if (!newAccountSuccess) {
            drupal_set_message(t('A new account could not be created for %user.', array('%user' => $username)), 'error');
          }
          else {
            drupal_set_message(t('A new account has been created for %user.', array('%user' => $username)), 'status');
          }
        }
        if (!$account && variable_get('certificatelogin_accountcreation', '') == 0) { //if the account does not exist and cannot be created then return
          drupal_set_message(t('A login was attempted but failed because an account does not exist. You are currently an anonymous user.'), 'error');
          return;
        }
        //now log in
        $account = user_load_by_name($username);
        if ($account != false) {
          session_destroy();
          // D.org issues #1440752 and #979502, fix per http://bugs.php.net/bug.php?id=32330
          session_set_save_handler('sess_open', 'sess_close', 'sess_read', 'sess_write', 'sess_destroy_sid', 'sess_gc');
          session_start();

          $loginargs['uid'] = $account->uid;
          user_login_submit(array(), $loginargs);
          $loginSuccess = 1;
        }
      }
      else {
        $account = user_external_load($username);
        if (isset($account->uid)) {
          $loginargs = array('uid' => $account->uid);
          user_login_submit(array(), $loginargs);
          $loginSuccess = 1;
        }
      }
    }
    if ($loginSuccess) {
      drupal_set_message(t('You have been automatically logged in as %user.', array('%user' => $user->name)), 'status');
    }
    else {
      drupal_set_message(t('A login was attempted but failed. You are currently an anonymous user.'), 'error');
    }
  }
}


/**
 * Implementation of hook_form_alter()
 *
 */
function certificatelogin_form_alter($form_id, &$form) {
  switch ($form_id) {
    case 'system_modules':
      $form['#validate']['certificatelogin_site_403_validate'] = array();
      break;
  }
}

/**
 * Resets the the site 403 variable to the default if the module is disabled
 * and the toboggan redirect on access denied is enabled.
 */
function certificatelogin_site_403_validate($form_id, $form_values) {
  // The check order is important:
  //   1. Is the module disabled?  Skip if so.
  //   2. Has the module been selected to be disabled?
  //   3. Is the current site 403 toboggan/denied?
  // Only reset the site 403 variable if 2 and 3 are true.
  if (!isset($form_values['disabled_modules']['certificatelogin']) && !$form_values['status']['certificatelogin'] && (variable_get('site_403', '') == 'certificatelogin/denied')) {
  }
  variable_set('site_403', '');
}

function certificatelogin_denied() {
  global $user;
  if ($user->uid == 0 && variable_get('certificatelogin_enabled', '0')) {

    global $certificatelogin_denied;
    $certificatelogin_denied = TRUE;

    // build the user menu item as the 403 page content, adjust the page title appropriately, and warn
    // the user that they were denied access.
    menu_set_active_item(variable_get('certificatelogin_loginpath', ''));
    $return = menu_execute_active_handler();
    drupal_set_title(t('Access Denied'));
    drupal_set_message(variable_get('certificatelogin_message', ''), 'error');
  }
  else {
    drupal_set_title(t('Access Denied'));
    $return = theme('lt_access_denied');
  }
  return $return;

}
