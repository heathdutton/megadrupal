<?php
// $Id:


/**
 * @uc_who_bought_what.module (dev 27/May/11)
 *
 * Displays a list of customers who have purchased a particular product in Ubercart.
 *
 * Adds an additional menu item to the Ubercart Reports, that lists the customers
 * who purchased certain products.  And totals, and show all records
 *
 * Copyright 2011 Michael Moradzadeh Cayenne.SF@gmail.com
 * Initial Drupal 7.2 Migration Chris Amendola mrfreshly@gmail.com
 * Based on code from Ubercart project.
 * Released under GPL.
 */

function uc_who_bought_what_report() {

	$product_id = (isset($_GET['pid'])) ? intval($_GET['pid']) : 0;
	$csv = (isset($_GET['csv'])) ? TRUE : FALSE; //branch, depending on whether this is or is not a call for a .csv file
	// if a node was specified, it better be one you can look at!



	if ($product_id <= 0) {
		return drupal_get_form('uc_who_bought_what_form');
	}

	if ($product_id>=1){
	$node = node_load($product_id);
	global $user;
		$output = "";
		if(!user_access('view all who bought what')&& !(user_access('view own who bought what') && $node->uid==$user->uid) ){
		
		drupal_set_message('You are not authorized to view who bought that item.  Please contact your site or shop administrator', 'warning');
	  return drupal_access_denied();
		}

		$tql =	"SELECT COUNT(uc_order_products.qty) AS ordcount, SUM(uc_order_products.qty) AS grandtotal FROM uc_order_products" .
		" JOIN uc_orders ON uc_order_products.order_id = uc_orders.order_id " . 
		" AND uc_order_products.nid  =  :product_id  WHERE order_status <> 'in_checkout' AND order_status <> 'canceled' AND order_status <> 'abandoned' " ;

		$tquery = db_query($tql,array(':product_id'=>$product_id));

		foreach ($tquery as $tresult) {
			$output .= '<h3>' . l($node->title , 'node/' . $node->uid) . " ($tresult->grandtotal sold in $tresult->ordcount orders)</h3>";
		}

		$header = array( //thanks to blackice78 for this code fix
		array('data' => t('Qty'),   'field' => 'qty',   'sql_field' => "uc_order_products.qty"),
		array('data' => t('LName'), 'field' => 'lname', 'sql_field' => "uc_orders.billing_last_name"),
		array('data' => t('FName'), 'field' => 'fname', 'sql_field' => "uc_orders.billing_first_name"),
		array('data' => t('Email'), 'field' => 'email', 'sql_field' => "uc_orders.primary_email"),
		array('data' => t('Phone'), 'field' => 'phone', 'sql_field' => "uc_orders.billing_phone"),
		array('data' => t('Price'), 'field' => 'price', 'sql_field' => "uc_order_products.price"),
		array('data' => t('Total'), 'field' => 'total', 'sql_field' => "(uc_order_products.price * uc_order_products.qty)"),
		array('data' => t('Date'),  'field' => 'date',  'sql_field' => "uc_orders.created"),
		array('data' => t('HowPay'),'field' => 'howpay','sql_field' => "uc_orders.payment_method"),
		array('data' => t('Status'),'field' => 'status','sql_field' => "uc_orders.order_status"),
		array('data' => t('ID'),    'field' => 'id',    'sql_field' => "uc_orders.order_id"),
		array('data' => t('Model'),    'field' => 'model',    'sql_field' => "uc_order_products.model"),
		);

		$sqsel = "  "; //now build the sql query
		foreach($header as $hval){
			$sqsel .= $hval['sql_field'] . " AS " . $hval['field'];
			$sqsel .= ", ";
		}
		$sqsel .=   "uc_orders.uid" .  " AS uid , uc_orders.*,  uccb.country_name AS bill_country, uccs.country_name AS ship_country, " ;
		$sqsel .=   "uccbz.zone_code AS bill_zone, uccsz.zone_code AS ship_zone, " ;

	 $sqsel .=   "uc_order_products.data AS orderdata ";	// this is to collect the raw attribute data and also not to have a comma at the end
	 $sql = "SELECT  $sqsel FROM uc_orders ".
	  		 " JOIN uc_order_products" . 
			 " ON uc_order_products.order_id = uc_orders.order_id " . 
			 " AND uc_order_products.nid  =  :product_id " .
			 " LEFT JOIN uc_countries uccb ON uc_orders.billing_country = uccb.country_id " . 
			 " LEFT JOIN uc_countries uccs ON uc_orders.delivery_country = uccs.country_id " .
 			 " LEFT JOIN uc_zones uccbz ON uc_orders.billing_country = uccbz.zone_country_id AND uc_orders.billing_zone = uccbz.zone_id " .
			 " LEFT JOIN uc_zones uccsz ON uc_orders.delivery_country = uccsz.zone_country_id AND uc_orders.delivery_zone = uccsz.zone_id "  ;

	 $sql .= " WHERE order_status <> 'in_checkout' AND order_status <> 'canceled' AND order_status <> 'abandoned' ";
	 $customers = db_query($sql,array(":product_id"=>$product_id));

	 if (module_exists('uc_attribute')){
	 	//Collect and unserialize the attributes.  First, the names
	 	$attsql = "SELECT att.aid, att.ordering, att.name, IF(LENGTH(uca.label)>0,uca.label, att.name) AS label, uca.nid FROM uc_attributes att
		   JOIN uc_product_attributes uca ON uca.aid=att.aid AND nid = :d Order By ordering, name";
	 	$attresults = (db_query($attsql, array(":d"=>$product_id)));

	 	foreach ($attresults as $attrow) {
	 		$header[]=array('data'=>t($attrow->label));
	 		$attrlist[] = array('data'=>t($attrow->label));

	 	}
		} //end if attribute module exists


		$csv_rows = array();  //hold the plain values.

		$temp_csv = array();
		foreach ($header as $new_csv_val) {
			$temp_csv[] =  strip_tags($new_csv_val['data']);
		}
		$csv_xtra = array('delivery_first_name', 'delivery_last_name', 'delivery_phone', 'delivery_company', 'delivery_street1', 'delivery_street2', 'delivery_city', 'ship_zone', 'delivery_postal_code', 'ship_country', 'billing_first_name', 'billing_last_name', 'billing_phone', 'billing_company', 'billing_street1', 'billing_street2', 'billing_city', 'bill_zone', 'billing_postal_code', 'bill_country');
		foreach($csv_xtra as $newhead){
			$temp_csv[] = $newhead;
		}

		$csv_rows[0]=$temp_csv;

		foreach ($customers as $customer) {
			$temparray = array();
			$temparray[]=  $customer->qty;
			$temparray[]=  l( t(check_plain($customer->lname)) , 'user/' . $customer->uid);
			$temparray[]=  l( t(check_plain($customer->fname)), 'user/' . $customer->uid);
			$temparray[]=  l( t($customer->email), 'mailto:' . $customer->email);
			$temparray[]=  check_plain($customer->phone);
			$temparray[]=  number_format($customer->price,2);
			$temparray[]=  number_format($customer->total,2);
			$temparray[]=  strftime ('%Y.%m.%d',$customer->date);
			$temparray[]=  $customer->howpay;
			$temparray[]=  l(t($customer->status),'admin/store/orders/' . $customer->id);
			$temparray[]=  l(t("#" . $customer->id),'admin/store/orders/' . $customer->id);
			$temparray[]=  check_plain($customer->model);

			$email_addresses[] = $customer->email;  //add to the list

			$mydata=unserialize($customer->orderdata);

			if (isset($attrlist)){
				foreach ($attrlist as $myattrib) {
				  if(isset($mydata['attributes'][$myattrib['data']])){
					 $thisdatum = $mydata['attributes'][$myattrib['data']]; //might be null
				     if (is_array($thisdatum) == 1) {   //Since UC 6.x-2.0-rc6, attributes are stored as arrays just in case there is more than one selected.
				 	    $temparray[] = check_plain(implode(' | ', $thisdatum));
				     }	//end if isarray	  
				  
				  }//end if isset
				  else{// need a placeholder to keep table aligned
				    $temparray[]=NULL;
				  }

				}//end for each
			}// end if attr

			$rows[] = $temparray;

			foreach($csv_xtra as $newhead){
				$temparray[]=strip_tags($customer->$newhead);
			}

			$temp_csv = array();

			foreach ($temparray as $new_csv_val) {
				$temp_csv[] = strip_tags($new_csv_val); // do not need to check_plain because we did that above
			}

			$csv_rows[]=$temp_csv;

			if (empty($rows)) {
				$rows[] = array(array('data' => t('No customers found for this item'), 'colspan' => count($header)));
			}

		}
		if (!empty($rows)) {
		  $output .= theme('table' ,array('header'=>$header,'rows'=>$rows,'width' => '100%', 'class' => 'uc-sales-table') );
		  $output .= '<div class="uc-reports-links">';

		  $output .= l(t('Export ' . (sizeof($csv_rows)-1) . ' rows to csv file'), "admin/store/reports/uc_who_bought_what", array('query'=> array('csv'=> "TRUE", 'pid' =>$product_id)));

		  $output .= '<div class="email-addresses"><h4>Email Addresses</h4><label for="email-addresses-textarea" value="Email addresses:" /><textarea id="email-addresses-textarea" rows="5" cols="100">' . implode(', ', $email_addresses). '</textarea></div>';
        }
		else{
		  $output .= "no results found please go back and pick another item";
		}
		if (!$csv)return $output;
		else{
			drupal_add_http_header('Content-Type', 'text/csv');
			drupal_add_http_header('Content-Disposition', 'attachment; filename=' . 'who_bought_' . convert_to_filename($node->title) . '.csv');

			$new_csv = $csv_rows;
			foreach ($new_csv as $my_row){
				$rcount = count($my_row);
				for ($j = 0; $j<$rcount; $j++){
					$my_row[$j] = '"' . str_replace('"', '""', $my_row[$j]) . '"';
				}
				print implode(',',$my_row) . "\r";
			}
		}
	}

} // function uc_who_bought_what_report



/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/


function uc_who_bought_what_form($form,$form_state) {

	global $user;

	$listquery = "SELECT DISTINCT({uc_products}.nid) AS nid, {node}.title AS title, {uc_product_classes}.name AS type, {node}.status as status
    FROM {uc_products}
    INNER JOIN {node} ON {uc_products}.nid = {node}.nid
    LEFT JOIN {uc_product_classes} ON {uc_product_classes}.pcid = {node}.type";
	//		WHERE status = status";

	if (user_access('view all who bought what'))
	$listquery .= ''; // do nothing. see all
	else {
		if (user_access('view own who bought what'))
		$listquery .= " AND {node}.uid = :uid";
		drupal_set_message("Only displaying reports for items posted by $user->name.");
	};

	$listquery .=  " ORDER BY {uc_product_classes}.name, {node}.title";

	$products = db_query($listquery,array(':uid' => $user->uid));

	$product_list[0] = t('Select an item...');

	foreach ($products as $product) {

		if ($product->type != NULL)
		$type = $product->type;
		else
		$type = "Product";
		$product_list[$type][$product->nid] =  $product->title;
	}

	$form['product_select'] = array(
    '#type' => 'select',
    '#title' => t('Choose a product'),
    '#options' => $product_list,
    '#description' => t('Choose a product.'),
	);
	$form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));

	return $form;

} // function uc_who_bought_what_form



function uc_who_bought_what_form_validate($form, $form_values) {
	if ($form_values['values']['product_select'] == '0') {
		form_set_error('product_select', t('You must select a product.'));
	}
} // function uc_who_bought_what_validate


function uc_who_bought_what_form_submit($form, $form_values) {
	drupal_goto("admin/store/reports/uc_who_bought_what",array('query'=>array('pid'=>$form_values['values']['product_select'])));
} // function uc_who_bought_what_form_submit



/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/


/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the uc_who_bought_what module
 */

function uc_who_bought_what_permission() {
  return array(
    'view own who bought what' => array(
      'title' => t('View own who bought what'), 
      'description' => t('Allow user to see sales of items they own'),
    ), 
    'view all who bought what' => array(
      'title' => t('View all who bought what'), 
      'description' => t('Allow users to access all sales of all items'),
    ),
  );
}


function uc_who_bought_what_menu() {

	$items = array();

	$items['admin/store/reports/uc_who_bought_what'] = array(
    'title' => 'Who Bought What',
    'description' => 'View reports of users who purchased specific products',
    'page callback' => 'uc_who_bought_what_report',
    'access arguments' => array('view own who bought what'),
    'type' => MENU_NORMAL_ITEM,
	);

	return $items;
} // function uc_who_bought_what_menu



/**
 * Converts a string to a valid UNIX filename.
 * @param $string The filename to be converted
 * @return $string The filename converted
 */
function convert_to_filename ($string) {

	// Replace spaces with underscores and makes the string lowercase
	$string = str_replace (" ", "_", $string);

	$string = str_replace ("..", ".", $string);
	$string = strtolower ($string);

	// Match any character that is not in our whitelist
	preg_match_all ("/[^0-9^a-z^_^.]/", $string, $matches);

	// Loop through the matches with foreach
	foreach ($matches[0] as $value) {
		$string = str_replace($value, "", $string);
	}
	return $string;
}


/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function uc_who_bought_what_help($path, $arg) {
	$output = '';
	switch ($path) {
		case "admin/help#uc_who_bought_what":
			$output = '<p>'.  t("Displays list of users who purchased a product") .'</p>';
			break;
	}
	return $output;
} // function uc_who_bought_what_help
?>