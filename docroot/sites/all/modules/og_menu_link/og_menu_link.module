<?php

/**
 * Menu item links to a group.
 */
define('OG_MENU_LINK_GROUP', 'group');

/**
 * Menu item links to group content.
 */
define('OG_MENU_LINK_GROUP_CONTENT', 'group_content');

/**
 * Menu item links to a group.
 */
define('OG_MENU_LINK_GROUP_DESCENDANT', 'group_descendant');

/**
 * Menu item links to a group.
 */
define('OG_MENU_LINK_GROUP_CONTENT_DESCENDANT', 'group_content_descendant');

/**
 * Implements hook_menu().
 */
function og_menu_link_menu() {
  $items['admin/reports/status/rebuild/og-menu-link'] = array(
    'title' => 'Rebuild relations between menu links and groups.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_menu_link_admin_rebuild_confirm'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'og_menu_link.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_requirements().
 */
function og_menu_link_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  $count = db_query('SELECT COUNT(*) FROM {og_menu_link}')->fetchField();
  if ($count) {
    $value = format_plural($count, 'One relation in use', '@count relations in use', array('@count' => $count));
  }
  else {
    $value = $t('Disabled');
  }

  $requirements['og_menu_link'] = array(
    'title' => $t('Organic Groups Menu link '),
    'value' => $value,
    'description' => l($t('Rebuild relations between groups and menu links.'), 'admin/reports/status/rebuild/og-menu-link'),
  );
  return $requirements;
}

/**
 * Returns the IDs of the groups a menu link relates to.
 */
function og_menu_link_relations_get_groups($mlid, $relation_type = NULL, $distance = NULL) {
  $query = db_select('og_menu_link')
    ->fields('og_menu_link', array('gid'))
    ->condition('mlid', $mlid)
    ->groupBy('gid');
  if ($relation) {
    $query->condition('relation', $relation_type);
  }
  if ($distance !== NULL) {
    $query->condition('distance', $distance, '<=');
  }
  return $query->execute()->fetchCol();
}

/**
 * Save relations between a menu link and groups.
 *
 * @param $menu_item
 *   An associative array representing a menu link item.
 * @param $entity_type
 *   Entity type
 * @param $entity
 *   Entity that is considered to live at the page of given menu item.
 */
function og_menu_link_relations_determine($menu_item, $entity_type = NULL, $entity = NULL) {
  $values = array();

  // If no entity is passed try to load it here.
  if (!isset($entity_type, $entity) && $menu_item['router_path'] == 'node/%') {
    list($entity_type, $nid) = explode('/', $menu_item['link_path']);
    $entity = node_load($nid);
    if ($entity === FALSE) {
      unset($entity_type, $entity);
    }
  }

  if (isset($entity_type, $entity)) {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

    // Check if entity is a group.
    if (og_is_group_type($entity_type, $bundle)) {
      foreach (og_get_group_ids($entity_type, array($id)) as $gid) {
        $values[$gid . ':' . OG_MENU_LINK_GROUP] = array($menu_item['mlid'], $gid, OG_MENU_LINK_GROUP, 0);
      }
    }

    // Check if entity is group content.
    if (og_is_group_content_type($entity_type, $bundle)) {
      foreach (og_get_entity_groups($entity_type, $entity) as $gid) {
        $values[$gid . ':' . OG_MENU_LINK_GROUP_CONTENT] = array($menu_item['mlid'], $gid, OG_MENU_LINK_GROUP_CONTENT, 0);
      }
    }
  }

  // Include relations of parent menu link (which included relations of its
  // parent and so on).
  if ($menu_item['depth'] > 1) {
    $plid = $menu_item['p' . ($menu_item['depth'] - 1)];
    $parent_relations = db_select('og_menu_link', NULL, array('fetch' => PDO::FETCH_ASSOC))
      ->fields('og_menu_link', array('gid', 'relation', 'distance'))
      ->condition('mlid', $plid)
      ->execute();

    foreach ($parent_relations as $relation) {
      if ($relation['relation'] == OG_MENU_LINK_GROUP) {
        $relation['relation'] = OG_MENU_LINK_GROUP_DESCENDANT;
      }
      elseif ($relation['relation'] == OG_MENU_LINK_GROUP_CONTENT) {
        $relation['relation'] = OG_MENU_LINK_GROUP_CONTENT_DESCENDANT;
      }

      if (!isset($values[$relation['gid'] . ':' . $relation['relation']])) {
        $values[$relation['gid'] . ':' . $relation['relation']] = array($menu_item['mlid'], $relation['gid'], $relation['relation'], $relation['distance'] + 1);
      }
    }
  }

  if (!empty($values)) {
    $query = db_insert('og_menu_link')->fields(array('mlid', 'gid', 'relation', 'distance'));
    foreach ($values as $record) {
      $query->values($record);
    }
    $query->execute();
  }
}

/**
 * Implements hook_menu_link_update().
 */
function og_menu_link_menu_link_update($item) {
  db_delete('og_menu_link')->condition('mlid', $item['mlid'])->execute();

  og_menu_link_relations_determine($item);

  if ($item['has_children']) {

  }
}

/**
 * Implements hook_menu_link_delete().
 */
function og_menu_link_menu_link_delete($item) {
  db_delete('og_menu_link')->condition('mlid', $item['mlid'])->execute();
  // TODO children? Is hook_menu_link_update() triggered?
}

/**
 * Implements hook_entity_insert().
 *
 * @see menu_node_save()
 * @see og_entity_insert()
 */
function og_menu_link_entity_insert($entity, $entity_type) {
  if ($entity_type == 'node' && variable_get('og_menu_link_restrict_' . $entity->type, 0)) {
    if (!empty($entity->menu['enabled'])) {
      og_menu_link_relations_determine($entity->menu, $entity_type, $entity);
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function og_menu_link_entity_delete($entity, $entity_type) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  // Remove relations to the group being deleted.
  if (og_is_group_type($entity_type, $bundle)) {
    db_delete('og_menu_link')->condition('gid', og_get_group_ids($entity_type, array($id)), 'IN')->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see menu_form_node_type_form_alter()
 */
function og_menu_link_form_node_type_form_alter(&$form, $form_state) {
  if (!empty($form['menu'])) {
    $type = $form['#node_type'];

    $form['menu']['og_menu_link_restrict'] = array(
      '#title' => t('Restrict available menu parent items'),
      '#type' => 'checkbox',
      '#description' => t('Restrict available menu parent items to items that belong to a group the current user is a member of.'),
      '#default_value' => variable_get('og_menu_link_restrict_' . $type->type, 0),
    );

    /*$form['menu']['og_menu_link_group_filter'] = array(
      '#title' => t('Group filter'),
      '#type' => 'checkbox',
      '#description' => t('Add a select form element to filter the parent menu links by group.'),
      '#default_value' => variable_get('og_menu_link_group_filter_' . $type->type, 0),
      '#states' => array(
        'invisible' => array(
          'input[name="menu[og_menu_link_restrict]"]' => array('checked' => FALSE),
        ),
      ),
    );*/
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * @see menu_form_node_form_alter()
 */
function og_menu_link_form_node_form_alter(&$form, $form_state) {
  global $user;

  // If enabled, restrict available menu parents to the ones that are related to
  // a group the current user is a member of.
  if (variable_get('og_menu_link_restrict_' . $form['#node']->type, 0)) {
    $node = $form_state['node'];
    $type = $node->type;
    $op = empty($node->nid) ? 'create' : 'edit';
    $menus = variable_get('menu_options_' . $type, array('main-menu' => 'main-menu'));

    $user_gids = og_get_entity_groups('user', $user);

    if (empty($user_gids)) {
      // TODO is this sufficient?
      $form['menu']['#disabled'] = TRUE;
      $form['menu']['link']['parent']['#options'] = array();
    }

    $query = db_select('og_menu_link', 'ogml')
      ->fields('ogml', array('mlid', 'gid'));
    $query->innerJoin('menu_links', 'ml', 'ogml.mlid = ml.mlid');
    $result = $query
      ->condition('ogml.gid', $user_gids)
      ->condition('ml.menu_name', $menus)
      ->execute();
    $gids = array();
    foreach ($result as $record) {
      $gids[$record->mlid][$record->gid] = $record->gid;
    }

    list($current_menu_name, $current_plid) = explode(':', $form['menu']['link']['parent']['#default_value']);

    // Restrict available menu parent links to links that belong to one of
    // user's groups.
    foreach ($form['menu']['link']['parent']['#options'] as $value => $title) {
      list($menu_name, $mlid) = explode(':', $value);
      $key = ($mlid == 0) ? $menu_name : $mlid;
      $access = (isset($gids[$mlid])) || ($op == 'edit' && $mlid == $current_plid && $menu_name == $current_menu_name);

      // Remove items that user isn't allowed to select.
      if (!$access) {
        unset($form['menu']['link']['parent']['#options'][$value]);
      }

      // Add classes indicating which groups a menu link has a relation to.
      if (!empty($gids[$mlid])) {
        foreach ($gids[$mlid] as $gid) {
          $class = 'og-group-' . $gid;
          $form['menu']['link']['parent'][$value]['#attributes']['class'][$class] = $class;
        }
      }

      // Show menu if there are menu parent options available for current user.
      /*if (!empty($form['menu']['link']['parent']['#options'])) {
        $form['menu']['#access'] = TRUE;
      }*/
    }

    /*if (variable_get('og_menu_link_group_filter_' . $form['#node']->type, 0)) {
      $audience = og_label_multiple(og_get_entity_groups('user', $user), FALSE);
      $form['menu']['link']['og_menu_link'] = array(
        '#type' => 'select',
        '#title' => t('Group'),
        '#empty_option' => t('All groups'),
        '#options' => $audience,
        '#attributes' => array('class' => array('menu-og-menu-link-select')),
        '#attached' => array(
          'js' => array(drupal_get_path('module', 'og_menu_link') . '/og_menu_link.js'),
        ),
        '#weight' => 1,
      );
      $form['menu']['link']['parent']['#weight'] = 2;
      $form['menu']['link']['weight']['#weight'] = 3;
    }*/
  }
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function og_menu_link_og_context_negotiation_info() {
  $providers = array();

  $providers['og_menu_link'] = array(
    'name' => t('Menu link'),
    'description' => t("Select group with closest relation to current menu link."),
    'callback' => 'og_menu_link_context_handler',
  );
}

/**
 * Context handler; Get groups from URL.
 *
 * TODO
 */
function og_menu_link_context_handler() {
  $context = array();
  if ($gids = og_get_context_by_url()) {
    $context = $gids;
  }

  return $context;
}
