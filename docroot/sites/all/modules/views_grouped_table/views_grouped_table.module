<?php
/**
 * @file views_grouped_table.module
 * TODO: Enter file description here.
 */

/**
 * Implements hook_views_api().
 */
function views_grouped_table_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'views_grouped_table'),
  );
}

/**
 * Display a view as a table style.
 */
function template_preprocess_views_grouped_table_view_table_grouped_relationship(&$vars) {
  // Call the parent plugin's preprocessor.
  // This does all the rendering work as usual, we just blank some cells.
  template_preprocess_views_view_table($vars);

  $view     = $vars['view'];
  $fields   = &$view->field;
  $style_plugin  = $view->style_plugin;
  
  //dsm($view);
  //dsm($fields);
  
  // Make an array of fields grouped by relationship alias.
  $fields_by_relationship = array();
  foreach ($fields as $field_id => $field_handler) {
    $relationship_id = empty($field_handler->relationship) ? 'base' : $field_handler->relationship;
    $fields_by_relationship[$relationship_id][$field_id] = $field_handler;
  }
  //dsm($fields_by_relationship);
  
  // on each relationship: $...['reverse_field_ref_product_family_node']->alias
  // $...['reverse_field_ref_product_family_node']->definition['base field'] = nid

  foreach ($fields as $field_name => $field) {
    $lookup[$field_name] = $field->field_alias;
  }
  $lookup_alias_to_field_name = array_flip($lookup);
  //dsm($lookup, 'l');
  //dsm($lookup_alias_to_field_name, 'l a->f');

  //dsm($style_plugin->relationship_field_aliases, 'relationship_field_aliases');
  
  // result is the original DB result, keyed by $view->field[FIELD]->field_alias
  // $vars['rows'] is the rendered stuff, keyed by the keys of $view->field + extra columns set in UI
  //dsm($vars['result'], 'result: from the db');
  //dsm($vars['rows'], 'rows: rendered');

  // Each row 'belongs' to a relationship. This is set by the first relationship
  // for which is has a new, unseen value for the base id field.
  
  // The relationship ids we saw in the previous row.
  $relationship_ids_row_last = array();
  foreach ($vars['rows'] as $index => $row) {
    $relationship_ids_row = array();
    foreach ($style_plugin->relationship_field_aliases as $relationship_id => $rel_field_name) {
      $relationship_ids_row[$rel_field_name] = $vars['result'][$index]->$rel_field_name;  //{$lookup[$rel_field_name]};
      
      // If the id for this relationship matches that of the previous row,
      // then we're still on the same entity for that relationship: we blank
      // all the fields on the relationship to make the table look grouped.
      if (isset($relationship_ids_row_last[$rel_field_name]) && $relationship_ids_row_last[$rel_field_name] == $relationship_ids_row[$rel_field_name]) {
        $relationship_alias = ($relationship_id == 'base') ? 'base' : $view->relationship[$relationship_id]->alias;
        foreach ($fields_by_relationship[$relationship_alias] as $field_id => $handler) {
          $vars['rows'][$index][$field_id] = ''; // '<i>' . $vars['rows'][$index][$field_id] . '</i>';
        }
        //dsm($relationship_alias)
        
        
        //$real_field_name = $lookup_alias_to_field_name[$rel_field_name];
        //$vars['rows'][$index][$real_field_name] = '';
      }
    }
    
    // Remember the relationship IDs for the last row.
    $relationship_ids_row_last = $relationship_ids_row;
  }
}
