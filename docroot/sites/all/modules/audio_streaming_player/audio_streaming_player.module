<?php

/**
 * @file
 * Render a Streaming Audio Player as a Drupal Block.
 */

/**
 * Implements hook_perm().
 */
function audio_streaming_player_perm() {
  return array('administer audiostreamingplayer', 'access audiostreamingplayer configuration');
}

/**
 * Implements hook_permission().
 */
function audio_streaming_player_permission() {
  return array(
    'administer audiostreamingplayer' => array(
      'title' => t('Audio Streaming Player permission'),
      'description' => t('Allows users to perform a task in Audio Streaming Player'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function audio_streaming_player_menu() {
  $items = array();
  // Link of menu for the module settings.
  $items['admin/config/media/audioStreamingPlayer'] = array(
    'title' => 'Audio Streaming Player',
    'description' => 'Administer Audio Streaming Player Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('audio_streaming_player_page_callback'),
    'access arguments' => array('administer audiostreamingplayer'),
    'type' => MENU_NORMAL_ITEM,
  );
  // Link of menu for add a new player.
  $items['admin/config/media/audioStreamingPlayer/newPlayer'] = array(
    'title' => 'Add a New Player',
    'description' => 'Add new Audio Streaming Player Block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('audio_streaming_player_form'),
    'access arguments' => array('administer audiostreamingplayer'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_page_callback().
 */
function audio_streaming_player_page_callback() {
  // Button to redirect to add new player page.
  $form['new_player'] = array(
    '#type' => 'submit',
    '#value' => '+ Add a New Player',
    '#submit' => array('audio_streaming_player_redirect_to_add_new_payer'),
  );
  // Obtain the list of deleted blocks.
  $deleted_blocks = explode('-', variable_get('audio_streaming_player_deleted_blocks'));
  // Headers.
  $form['headers'] = array(
    '#prefix' => '<table><tr><th>Block Name</th>',
    '#suffix' => '<th>Configure</th><th>Delete</th></tr>',
  );
  // Number of blocks.
  $count = variable_get('audio_streaming_player_count_blocks');
  for ($i = 1; $i <= $count; $i++) {
    $deleted = FALSE;
    for ($j = 1; $j <= (count($deleted_blocks)) - 1; $j++) {
      if ($i == $deleted_blocks[$j]) {
        $deleted = TRUE;
      }
    }
    if (!$deleted) {
      // Form that contain the name of block.
      $form['streamingplayer_' . $i] = array(
        '#prefix' => '<tr><td><b>Audio Streaming Player Block ' . $i . '</b></td>',
        '#suffix' => '<td>' . l(t('Configure'), ''
            . 'admin/structure/block/manage/audio_streaming_player/streamingplayer_' .
            $i . '/configure') . '</td>',
      );
      // Form that contain a button to deleta a block.
      $form['submit_' . $i] = array(
        '#prefix' => '<td>',
        '#type' => 'submit',
        '#value' => 'Delete',
        '#name' => 'submit_' . $i,
        '#submit' => array('audio_streaming_player_delete_block'),
        '#suffix' => '</td></tr>',
      );
    }
  }
  $form['end'] = array(
    '#prefix' => '</table>',
  );
  return $form;
}

/**
 * This function is responsible for redirecting to a page to add a new player.
 */
function audio_streaming_player_redirect_to_add_new_payer($form, &$form_state) {
  $form_state['redirect'] = 'admin/config/media/audioStreamingPlayer/newPlayer';
}

/**
 * Function for delete a block of Audio Streaming Player.
 */
function audio_streaming_player_delete_block($form, &$form_state) {
  // Obtain the name of block.
  $name = explode('_', $form_state['clicked_button']['#name']);
  // Obtain the number of block.
  $number_of_block = $name[1];
  variable_set('audio_streaming_player_deleted_blocks',
      variable_get('audio_streaming_player_deleted_blocks') . '-' . $number_of_block);
  // Confirmation Message.
  drupal_set_message(t('Audio Streaming Player Block successfully removed'));
  $form_state['redirect'] = 'admin/config/media/audioStreamingPlayer';
}

/**
 * Implements hook_form().
 */
function audio_streaming_player_form() {
  // Stream Url.
  $form['audio_streaming_player_stream_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the Stream URL'),
    '#size' => 75,
    '#maxlength' => 180,
    '#required' => TRUE,
  );
  $option0 = 'Black Player' . '<img align="left" width="133px" heigth="180px" src=/' .
      drupal_get_path('module', 'audio_streaming_player') .
      '/themes/audio_streaming_player_black/thumbnail.png/></br></br></br></br>';
  $option1 = 'Circular Player' . '<img align="left" src=/' .
      drupal_get_path('module', 'audio_streaming_player') .
      '/themes/audio_streaming_player_circular/thumbnail.png/></br></br></br></br>';
  $option2 = 'Only Text <img align="left" src=/' .
      drupal_get_path('module', 'audio_streaming_player') .
      '/themes/audio_streaming_player_text/thumbnail.png/></br></br></br></br>';
  // Skins.
  $options = array(
    0 => $option0,
    1 => $option1,
    2 => $option2,
  );
  // Select the Themes.
  $form['audio_streaming_player_theme'] = array(
    '#type' => 'radios',
    '#title' => t('Select the theme for the player'),
    '#options' => $options,
  );
  // Auto-Play Option.
  $form['audio_streaming_player_auto_play'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Play'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  return ($form);
}

/**
 * Function for validate an url.
 */
function audio_streaming_player_validate_url($url) {
  $header = get_headers($url);
  $status = array();
  preg_match('/HTTP\/.* ([0-9]+) .*/', $header[0], $status);
  return ($status[1] == 200);
}

/**
 * Implements hook_form_submit().
 */
function audio_streaming_player_form_submit($form, &$form_state) {
  if (audio_streaming_player_validate_url($form_state['values']['audio_streaming_player_stream_url'])) {
    // Set variables.
    variable_set('audio_streaming_player_count_blocks',
        ((variable_get('audio_streaming_player_count_blocks')) + 1));
    $count = variable_get('audio_streaming_player_count_blocks');
    variable_set('audio_streaming_player_stream_url_' .
        $count, ($form_state['values']['audio_streaming_player_stream_url']));
    variable_set('audio_streaming_player_theme_' .
        $count, ($form_state['values']['audio_streaming_player_theme']));
    variable_set('audio_streaming_player_auto_play_' .
        $count, ($form_state['values']['audio_streaming_player_auto_play']));
    // Confirmation message.
    drupal_set_message(t('The configuration options have been saved'));
    $form_state['redirect'] = 'admin/config/media/audioStreamingPlayer/newPlayer';
  }
  else {
    drupal_set_message(t('Invalid URL'), 'error');
  }
}

/**
 * Implements hook_libraries_info().
 */
function audio_streaming_player_libraries_info() {
  $libraries = array();
  $libraries['JPayer'] = array(
    'name' => 'JPlayer',
    'vendor url' => 'http://www.jplayer.org/',
    'download url' => 'http://www.jplayer.org/latest/jQuery.jPlayer.2.6.0.source.zip',
    'version arguments' => array(
      'file' => 'jquery.jplayer.min.js',
      'pattern' => '/jQuery JPlayer v(\d+\.+\d+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'jquery.jplayer.min.js',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_block_configure().
 */
function audio_streaming_player_block_configure($delta = '') {
  // Stream Url.
  $form['audio_streaming_player_stream_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the Stream URL'),
    '#default_value' => variable_get('audio_streaming_player_stream_url_' .
        $delta[strlen($delta) - 1]),
    '#size' => 75,
    '#maxlength' => 180,
    '#required' => TRUE,
  );
  $option0 = 'Black Player' . '<img align="left" width="133px" heigth="180px" src=/' .
      drupal_get_path('module', 'audio_streaming_player') .
      '/themes/audio_streaming_player_black/thumbnail.png/></br></br></br></br>';
  $option1 = 'Circular Player' . '<img align="left" src=/' .
      drupal_get_path('module', 'audio_streaming_player') .
      '/themes/audio_streaming_player_circular/thumbnail.png/></br></br></br></br>';
  $option2 = 'Only Text <img align="left" src=/' .
      drupal_get_path('module', 'audio_streaming_player') .
      '/themes/audio_streaming_player_text/thumbnail.png/></br></br></br></br>';
  // Skins.
  $options = array(
    0 => $option0,
    1 => $option1,
    2 => $option2,
  );
  // Select the Themes.
  $form['audio_streaming_player_theme'] = array(
    '#type' => 'radios',
    '#title' => t('Select the theme for the player'),
    '#default_value' => variable_get('audio_streaming_player_theme_' . $delta[strlen($delta) - 1]),
    '#options' => $options,
  );
  // Auto-Play Option.
  $form['audio_streaming_player_auto_play'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('audio_streaming_player_auto_play_' . $delta[strlen($delta) - 1]),
    '#title' => t('Auto Play'),
  );

  return ($form);
}

/**
 * Implements hook_block_save().
 */
function audio_streaming_player_block_save($delta = '', $edit = array()) {
  if (audio_streaming_player_validate_url($edit['audio_streaming_player_stream_url'])) {
    // Set variables.
    variable_set('audio_streaming_player_stream_url_' . $delta[strlen($delta) - 1],
      ($edit['audio_streaming_player_stream_url']));
    variable_set('audio_streaming_player_theme_' . $delta[strlen($delta) - 1],
      ($edit['audio_streaming_player_theme']));
    variable_set('audio_streaming_player_auto_play_' . $delta[strlen($delta) - 1],
      ($edit['audio_streaming_player_auto_play']));
  }
  else {
    drupal_set_message(t('Invalid URL'), 'error');
  }
}

/**
 * Implements hook_block_info().
 */
function audio_streaming_player_block_info() {
  $blocks['streamingplayer_1'] = array(
        'info' => 'Audio Streaming Player Block 1' ,
        'cache' => DRUPAL_NO_CACHE,
  );
  // Existing block number.
  $count = variable_get('audio_streaming_player_count_blocks');
  $deleted_blocks = explode('-', variable_get('audio_streaming_player_deleted_blocks'));
  // Set information of the blocks.
  for ($i = 1; $i <= $count; $i++) {
    $deleted = FALSE;
    for ($j = 1; $j <= (count($deleted_blocks)) - 1; $j++) {
      if ($i == $deleted_blocks[$j]) {
        $deleted = TRUE;
      }
    }
    if (!$deleted) {
      $blocks['streamingplayer_' . $i] = array(
        'info' => 'Audio Streaming Player Block ' . $i,
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function audio_streaming_player_block_view($delta = '') {

  $block = array();
  switch ($delta) {
    case $delta:

      // Identify the selected theme.
      switch (variable_get('audio_streaming_player_theme_' . $delta[strlen($delta) - 1])) {
        case 0:
          $audio_streaming_player_theme = 'audio_streaming_player_black';
          break;

        case 1:
          $audio_streaming_player_theme = 'audio_streaming_player_circular';
          break;

        case 2:
          $audio_streaming_player_theme = 'audio_streaming_player_text';
          break;

        default:
          $audio_streaming_player_theme = 'audio_streaming_player_text';
          break;
      }

      $module_path = drupal_get_path('module', 'audio_streaming_player');
      // Assign content.
      $block['content'] = array(
        '#markup' => theme($audio_streaming_player_theme, array('theme' => "")),
        '#attached' => array(
          'css' => array(
            $module_path . '/themes/' .
            $audio_streaming_player_theme . '/css/' .
            $audio_streaming_player_theme . '.css',
          ),
          // Libraries.
          'js' => array(
            libraries_get_path('JPlayer') . '/jquery.jplayer.min.js',
            $module_path . '/js/audio_streaming_player.js',
            libraries_get_path('JPlayer') . '/add-on/jquery.jplayer.inspector.js',
            drupal_add_js(array(
              'audiostreamingplayer' => array(
                'swf' => '/' . libraries_get_path('JPlayer') . '/',
                'audio_streaming_player_stream_url' => variable_get('audio_streaming_player_stream_url_' .
                    $delta[strlen($delta) - 1]),
                'audio_streaming_player_auto_play' => variable_get('audio_streaming_player_auto_play_' .
                    $delta[strlen($delta) - 1]),
                  'path' => $module_path )
            ), 'setting'),
          ),
        ),
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function audio_streaming_player_theme() {
  return array(
    'audio_streaming_player_circular' => array(
      'variables' => array('account' => NULL),
      'template' => 'themes/audio_streaming_player_circular/audio_streaming_player_circular',
    ),
    'audio_streaming_player_black' => array(
      'variables' => array('account' => NULL),
      'template' => 'themes/audio_streaming_player_black/audio_streaming_player_black',
    ),
    'audio_streaming_player_text' => array(
      'variables' => array('account' => NULL),
      'template' => 'themes/audio_streaming_player_text/audio_streaming_player_text',
    ),
  );
}
