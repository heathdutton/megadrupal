<?php
/**
 * @file
 * Link API for Drupal 7.
 *
 * @copyright Copyright(c) 2012 Christopher Skene
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 * @author Chris Skene chris at xtfer dot com
 */

/**
 * Define a query sort retaining empty parameters
 */
define('LINK_API_QUERY_SORT_RETAIN', 'retain');

/**
 * Define a query sort removing empty parameters
 */
define('LINK_API_QUERY_SORT_CLEAN', 'clean');

/**
 * Define a URL normalisation method
 */
define('LINK_API_URL_NORMALISE', 'normalise');

/**
 * Define a URL non-normalisation method
 */
define('LINK_API_URL_NORMALISE_NONE', 'no_normalise');

/**
 * Define a link build mode using all link parts
 */
define('LINK_API_URL_BUILD_FULL', 'full');

/**
 * Define the link parts expected in an absolute URL.
 */
define('LINK_API_URL_BUILD_ABSOLUTE', 'absolute');

/**
 * Define a link build mode using only host, path, query and fragment
 */
define('LINK_API_URL_BUILD_PARTIAL', 'partial');

/**
 * Define a link build mode using only the path
 */
define('LINK_API_URL_BUILD_PATH', 'path');

/**
 * If http_build_url is not present, we need to define the default constants.
 */
if (!function_exists('http_build_url')) {

  // Replace every part of the first URL when there's one of the second URL.
  define('HTTP_URL_REPLACE', 0x0001);
  // Join relative paths.
  define('HTTP_URL_JOIN_PATH', 0x0002);
  // Join query strings.
  define('HTTP_URL_JOIN_QUERY', 0x0004);
  // Strip any user authentication information.
  define('HTTP_URL_STRIP_USER', 0x0008);
  // Strip any password authentication information.
  define('HTTP_URL_STRIP_PASS', 0x0010);
  // Strip explicit port numbers.
  define('HTTP_URL_STRIP_PORT', 0x0020);
  // Strip complete path.
  define('HTTP_URL_STRIP_PATH', 0x0040);
  // Strip query string.
  define('HTTP_URL_STRIP_QUERY', 0x0080);
  // Strip any fragments (#identifier)
  define('HTTP_URL_STRIP_FRAGMENT', 0x0100);

  // Combination constants.
  define('HTTP_URL_STRIP_AUTH', HTTP_URL_STRIP_USER | HTTP_URL_STRIP_PASS);
  define('HTTP_URL_STRIP_ALL', HTTP_URL_STRIP_AUTH | HTTP_URL_STRIP_PORT | HTTP_URL_STRIP_QUERY | HTTP_URL_STRIP_FRAGMENT);
}

/**
 * Instantiate a new LinkApiUrl object and set a link on it.
 *
 * @param string $url
 *   (optional) An optional URL to set
 *
 * @return \Drupal\link_api\LinkApi\LinkApiUrl
 *   A Link API URL object.
 */
function link_api_url($url = NULL) {
  return new \Drupal\link_api\LinkApi\LinkApiUrl($url);
}

/**
 * Get a new helper.
 *
 * @return \Drupal\link_api\LinkApi\LinkApiHelper
 *   The helper.
 */
function link_api_helper() {
  return new \Drupal\link_api\LinkApi\LinkApiHelper();
}

/**
 * Get a new stream wrapper helper.
 *
 * @return \Drupal\link_api\LinkApi\StreamWrapperHelper
 *   The helper.
 */
function link_api_stream_wrapper_helper() {
  return new \Drupal\link_api\LinkApi\StreamWrapperHelper();
}

/**
 * Get a new encoding helper().
 *
 * @return \Drupal\link_api\LinkApi\EncodingHelper
 *   The helper.
 */
function link_api_encoding_helper() {
  return new \Drupal\link_api\LinkApi\EncodingHelper();
}
