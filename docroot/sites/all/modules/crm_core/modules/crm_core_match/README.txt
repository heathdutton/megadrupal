-- SUMMARY --

CRM Core Match is a tool for implementing matching engines in CRM Core. Matching engines are used to 
identify contacts and enhance the information they contain. Most frequently, this will be used to identify
contact records in CRM Core, either as duplicates or as the 'right' contact in a given situation.

CRM Core Match can support an unlimited number of matching engines, and this module provides users with a 
framework for implementing them in a consistent way.

-- REQUIREMENTS --

The following modules are required by CRM Core Match:

* CRM Core
* CRM Core Contact
* Entity API
* Field UI
* Field
* Field SQL storage
* Views
* Chaos tools
* Fieldgroup
* Name Field

It is highly recommended that you enable CRM Core Default Matching Engine along with CRM Core Match. 
Unless you have a custom matching engine already installed, CRM Core Match will not do anything without
this matching engine enabled.

-- INSTALLATION --

CRM Core can be installed like any other Drupal module.

1) Download CRM Core to the modules directory for your site.

2) Go to the admin/modules page and enable CRM Core Match.
  
-- RELATED MODULES --

* CRM Core Profile

  A form builder for CRM Core. CRMCP integrates directly with CRM Core Match to identify duplicate contacts
  when contact matching is turned on. The module includes some excellent examples for developers looking to 
  implement their own custom matching interfaces.

  http://drupal.org/project/crm_core_profile

-- CONFIGURATION --

1) Go to admin/config/crm-core/match and enable a matching engine.

2) Use the matching engine's configuration page to configure contact matching.

-- MATCHING ENGINES --

If you don't like the way CRM Core identifies matches, feel free to write your own engine. It can be as simple
or as complex as you like, and you can enable any number of matching engines within CRM Core Match. 

There are many reasons why you might want to buld your own matching engine. CRM Core Default Matching Engine 
operates via entity field queries, which are appropriate in the majority of cases CRM Core will ever be used. 
But some organizations might benefit from having a matching tool that:

- sorts matches according to some unqiue criteria that is hard to enforce through logical operators 
  and weighted scores
- refines matches using Soundex / Levenshtein / Metaphone / etc.
- finds matches from an external source using a web service
- carries out more complex operations using Solr
- does something new or unanticipated with how matches are identified

CRM Core Match was built to support these kinds of cases.

A few things to be aware of when creating your own matching engine:

1) Matching engines should implement CrmCoreMatchEngine.

2) Matching engines identify themselves to CRM Core Match using hook_crm_core_match_engine_register. The code for
   this can be found in the includes folder.
   
3) Matching engines always receive a list of contact ids that represent potential matches when they are run,
   which are generated by whatever matching engines ran before the current one. It is the responsibility of 
   each matching engine to sort / segment / filter / drill down / do whatever to that list. 

4) Most modules that work with CRM Core will accept the top contact returned by a matching engine as the 
   correct 'match.' Always sort matches so that the one you intend to have used is the top result.
   
5) Matching engines are capable of injecting information into a contact record as part of the matching process. 
   This is useful especially in cases where contact information is being matched against sources external to 
   CRM Core. For instance: if you needed to identify a match in an external system, you might want to store
   an external identifier in the case where a match is made.  

-- CONTACT --

Current maintainers:

* techsoldaten - http://drupal.org/user/16339

If you are interested in participating in CRM Core development or seek assistance with CRM Core,
please contact me directly through this form.

Development sponsored by Trellon.

