<?php

/**
 * @file
 * Field lock multi values
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function field_lock_multi_values_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if (field_behaviors_widget('multiple values', $form['#instance']) == FIELD_BEHAVIOR_DEFAULT &&
    ($form['#field']['cardinality'] > 1 || $form['#field']['cardinality'] == FIELD_CARDINALITY_UNLIMITED)) {
    $settings = isset($form['#instance']['settings']['field_lock_multi_values']) ? $form['#instance']['settings']['field_lock_multi_values'] : array();
    $form['instance']['settings']['field_lock_multi_values'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Field lock multi values'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['instance']['settings']['field_lock_multi_values']['lock_previous'] = array(
      '#type' => 'checkbox',
      '#title' => t('Lock previous value'),
      '#default_value' => isset($settings['lock_previous']) ? $settings['lock_previous'] : FALSE,
    );
    if ($form['#instance']['widget']['type'] != 'field_collection_table') {
      $form['instance']['settings']['field_lock_multi_values']['disable_reorder'] = array(
        '#type' => 'checkbox',
        '#title' => t('Disable reorder'),
        '#default_value' => isset($settings['disable_reorder']) ? $settings['disable_reorder'] : FALSE,
      );
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function field_lock_multi_values_field_widget_form_alter(&$element, &$form_state, $context) {
  $settings = isset($context['instance']['settings']['field_lock_multi_values']) ? $context['instance']['settings']['field_lock_multi_values'] : array();
  $element['#field_lock_multi_values_entity_type'] = $context['instance']['entity_type'];
  $element['#field_lock_multi_values_bundle'] = $context['instance']['bundle'];
  if (isset($settings['lock_previous']) && $settings['lock_previous']) {
    if ($context['delta'] < count($context['items'])) {
      $element['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function field_lock_multi_values_theme_registry_alter(&$theme_registry) {
  $theme_registry['field_multiple_value_form']['function'] = 'field_lock_multi_values_field_multiple_value_form';
}

/**
 * Returns HTML for an individual form element.
 *
 * Combine multiple values into a table with drag-n-drop reordering.
 * TODO : convert to a template.
 *
 * @see theme_field_multiple_value_form()
 */
function field_lock_multi_values_field_multiple_value_form($variables) {
  $element = $variables['element'];
  $disable_reorder = FALSE;
  $output = '';
  if ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    // "disable reorder" settings.
    $max_delta = $element['#max_delta'];
    $field_info = field_info_instance($element[$max_delta]['#field_lock_multi_values_entity_type'], $element['#field_name'], $element[$max_delta]['#field_lock_multi_values_bundle']);
    if (isset($field_info['settings']['field_lock_multi_values']['disable_reorder']) && $field_info['settings']['field_lock_multi_values']['disable_reorder']) {
      $disable_reorder = TRUE;
    }
    // Create table.
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';
    $header = array(
      array(
        'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'colspan' => 2,
        'class' => array('field-label'),
      ),
    );
    if (!$disable_reorder) {
      $header[] = t('Order');
    }
    $rows = array();
    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation).
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');
    // Add the items as table rows.
    foreach ($items as $key => $item) {
      if ($disable_reorder) {
        $item['_weight']['#access'] = FALSE;
      }
      $item['_weight']['#attributes']['class'] = array($order_class);
      $delta_element = drupal_render($item['_weight']);
      $cells = array(
        array('data' => '', 'class' => array('field-multiple-drag')),
        drupal_render($item),
        array('data' => $delta_element, 'class' => array('delta-order')),
      );
      if ($disable_reorder) {
        // Remove first and last cell.
        array_shift($cells);
        array_pop($cells);
      }
      $rows[] = array(
        'data' => $cells,
        'class' => !$disable_reorder ? array('draggable') : array(),
      );
    }
    $output = '<div class="form-item">';
    $output .= theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array(
        'id' => $table_id,
        'class' => array('field-multiple-table'),
      ),
    ));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    $output .= '</div>';
    if (!$disable_reorder) {
      drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
    }
  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }
  return $output;
}
