<?php

/**
 * @file human_queue_worker_test.module
 * Test module for the human queue worker module.
 */

/**
 * Implements hook_human_queue_worker_info().
 */
function human_queue_worker_test_human_queue_worker_info() {
  $info = array(
    'test_queue_alpha' => array(
      'queue' => 'test_queue_alpha',
      'label' => t("Test queue alpha"),
      'lease time' => 30 * 60,
      'entity type' => 'entity_operations_test',
      'entity operations' => array(
        // These should be operations defined on the entity.
        'red',
        'blue',
        'lookup',
        'delete_confirm',
        'unqueue',
        'move_queue_beta',
        'skip',
      ),
    ),
    'test_queue_beta' => array(
      'queue' => 'test_queue_beta',
      'label' => t("Test queue beta"),
      'lease time' => 30 * 60,
      'entity type' => 'entity_operations_test',
      'entity operations' => array(
        // These should be operations defined on the entity.
        'red',
        'blue',
        'delete_confirm',
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_operation_info_alter().
 */
function human_queue_worker_test_entity_operation_info_alter(&$operation_info) {
  // Add the delete confirm operation.
  $operation_info['entity_operations_test']['delete_confirm']['handler'] = 'EntityOperationsOperationDeleteConfirm';

  // Add the unqueue operation.
  $operation_info['entity_operations_test']['unqueue']['handler'] = 'HumanQueueWorkerOperationUnQueue';

  // Add the skip operation.
  $operation_info['entity_operations_test']['skip']['handler'] = 'HumanQueueWorkerOperationSkip';

  // Add the move queue operation.
  $operation_info['entity_operations_test']['move_queue_beta'] = array(
    'handler' => 'HumanQueueWorkerOperationMoveQueue',
    // Extra properties for our handler.
    'handler configuration' => array(
      'queue name' => 'test_queue_beta',
    ),
  );

  // Add a dummy operation that has a multi-step form.
  $operation_info['entity_operations_test']['lookup']['handler'] = 'HumanQueueWorkerTestOperationLookup';
}

class HumanQueueWorkerTestOperationLookup extends EntityOperationsOperationForm {

  /**
   * Helper to get the form for this operation.
   *
   * Subclass the parent: we want to do our own thing here!
   */
  function getForm($form, &$form_state, $entity_type, $entity, $operation_path) {
    $form['actions'] = array('#type' => 'actions');
    $form['actions']['search'] = array(
      '#type' => 'submit',
      '#value' => t('Search for data'),
      '#name' => 'search',
    );

    // Step 2: show results.
    if (isset($form_state['values'])) {
      $form['results'] = array(
        '#type' => 'fieldset',
        '#title' => t('Results'),
      );

      $form['results']['lookup_data'] = array(
        '#type' => 'radios',
        '#title' => t("Search result data"),
        '#options' => drupal_map_assoc(array(
          'Rho',
          'Phi',
        )),
      );

      $form['actions']['execute'] = array(
        '#type' => 'submit',
        '#value' => t('Execute operation'),
        '#name' => 'execute',
      );
    }

    return $form;
  }

  /**
   * Form submit handler for this operation.
   *
   * We have to override this to make a multistep form.
   */
  function formSubmit($form, &$form_state, $entity_type, $entity, $operation_path) {
    // Deal with FormAPI wackiness around build ID and multistep :(
    // See http://davidsonj.com/blog/how-create-multi-step-form-drupal-7.
    if (isset($form_state['multistep_values']['form_build_id'])) {
      $form_state['values']['form_build_id'] = $form_state['multistep_values']['form_build_id'];
    }
    $form_state['multistep_values']['form_build_id'] = $form_state['values']['form_build_id'];

    //dsm($form_state);
    // Enable multistep, which allows display of the search results within the
    // form builder.
    $form_state['rebuild'] = TRUE;

    if ($form_state['triggering_element']['#name'] == 'execute') {
      // Disable multistep, so FormAPI knows we are done. Otherwise, the form
      // will continue with the current values rather than present a fresh
      // draft entity to work with.
      $form_state['rebuild'] = FALSE;

      // Perform the actual operation.
      $new_title = $form_state['values']['lookup_data'];

      $entity->title = $new_title;

      $entity->save();

      drupal_set_message("The entity's title has been updated.");
    }
  }

}
