<?php

/**
 * @file human_queue_comment_processing.module
 * Provides a Human Queue for processing comment pending approval.
 */

/**
 * Implements hook_entity_operation_info_alter().
 *
 * Declare the operations we want for the queue.
 */
function human_queue_comment_processing_entity_operation_info_alter(&$operation_info) {
  // Other modules may also define operations on comments, so ensure that we
  // don't clobber them.
  $operation_info['comment']['delete_confirm']['handler'] = 'EntityOperationsOperationDeleteConfirm';
  $operation_info['comment']['publish']['handler'] = 'EntityOperationsOperationPublish';
  $operation_info['comment']['unqueue']['handler'] = 'HumanQueueCommentWorkerOperationUnQueue';
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add a view mode for queue processing, which shows the comment's context.
 */
function human_queue_comment_processing_entity_info_alter(&$entity_info) {
  $entity_info['comment']['view modes']['queue_process'] = array(
    'label' => t("Queue processing"),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_human_queue_worker_info().
 */
function human_queue_comment_processing_human_queue_worker_info() {
  $info = array(
    'comment_approval' => array(
      'queue' => 'comment_approval',
      'label' => t("Comment approval"),
      'lease time' => 30 * 60,
      'entity type' => 'comment',
      'entity operations' => array(
        'delete_confirm',
        'publish',
        'unqueue',
      ),
      'view mode' => 'queue_process',
    ),
  );

  return $info;
}

/**
 * Implements hook_comment_insert().
 *
 * Queue a newly created unapproved comment.
 */
function human_queue_comment_processing_comment_insert($comment) {
  if ($comment->status == COMMENT_NOT_PUBLISHED) {
    $queue = DrupalQueue::get('comment_approval');
    $queue->createItem($comment->cid);
  }
}

/**
 * Implements hook_comment_view_alter().
 *
 * Add context to our view mode, to help the user decide what to do with the
 * comment.
 */
function human_queue_comment_processing_comment_view_alter(&$build) {
  if ($build['#view_mode'] == 'queue_process') {
    // Remove the links from the comment.
    unset($build['links']);

    // Show context for the comment, to help with deciding what to do with it.
    $build['context_node'] = array(
      '#type' => 'fieldset',
      '#title' => t("Parent node"),
    );

    // Show the node it's attached to.
    $node = $build['#node'];
    $build['context_node']['node'] = node_view($node, 'teaser');
    // Remove the links from the node.
    unset($build['context_node']['node']['links']);

    // Show the parent comment if there is one.
    if ($build['#comment']->pid) {
      $parent_comment = comment_load($build['#comment']->pid);
      $build['context_comment'] = array(
        '#type' => 'fieldset',
        '#title' => t("Parent comment"),
      );

      $build['context_comment']['parent_comment'] = comment_view($parent_comment, $node, 'teaser');
      // Remove the links from the parent comment.
      unset($build['context_comment']['parent_comment']['links']);
    }
  }
}
