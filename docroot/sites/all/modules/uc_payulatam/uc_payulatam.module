<?php

/******************************
 *    Constant Definitions    *
 ******************************/

define('UC_PAYULATAM_LIVEURL', 'https://gateway.payulatam.com/ppp-web-gateway/');
define('UC_PAYULATAM_TESTURL', 'https://stg.gateway.payulatam.com/ppp-web-gateway/');

/************************
 *     Drupal Hooks     *
 ************************/

/**
 * Implements hook_menu().
 */
function uc_payulatam_menu() {
  $items['cart/uc_payulatam/confirmation'] = array(
    'title' => 'PayU Latam Confirmation Page',
    'page callback' => '_uc_payulatam_confirmation_page',
    'access callback' => '_uc_payulatam_access_confirmation_page',
    'type' => MENU_CALLBACK,
    'file' => 'uc_payulatam.pages.inc',
    );
  $items['cart/uc_payulatam/response'] = array(
    'title' => 'PayU Latam Response Page',
    'page callback' => '_uc_payulatam_response_page',
    'access callback' => '_uc_payulatam_access_response_page',
    'type' => MENU_CALLBACK,
    'file' => 'uc_payulatam.pages.inc',
    );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function uc_payulatam_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
    global $language;
    global $user;
    $order = uc_order_load($order_id);
    if ($order->payment_method == 'payulatam') {
      $reference_code = uc_payulatam_get_reference($order_id);
      $amount = uc_payulatam_format_amount($order->order_total);
      $currency = uc_payulatam_get_currency();

      $description = array();
      $qty = 0;
      foreach ($order->products as $item) {
        $description[] = $item->qty . " x " . $item->title;
        $qty += $item->qty;
      }
      $description = format_plural($qty, t("1 product"), t("@count products")) . ': ' . implode("; ", $description);

      if (mb_strlen($description) > 250) {
        $description = mb_substr($description, 0, 246) . ' ...';
      }

      $extra3 = array(
        'uid' => $user->uid,
        'order_id' => $order_id,
        'cart_id' => uc_cart_get_id(FALSE),
        'token_id' => session_id(),
        );

      $data = array(
        'amount' => $amount,
        'merchantId' => uc_payulatam_get_merchant_id(),
        'referenceCode' => $reference_code,
        'description' => $description,
        'tax' => uc_payulatam_format_amount(uc_payulatam_get_iva($order)),
        'taxReturnBase' => uc_payulatam_format_amount(uc_payulatam_get_base($order)),
        'signature' => uc_payulatam_get_signature($reference_code, $amount, $currency),
        'currency' => $currency,
        'test' => 1 - uc_payulatam_get_txn_type(),
        'buyerEmail' => $order->primary_email,
        'lng' => array_key_exists(strtoupper($language->language), uc_payulatam_languages()) ? strtoupper($language->language) : uc_payulatam_get_language(),
        'responseUrl' => url('cart/uc_payulatam/response', array('absolute' => TRUE)),
        'confirmationUrl' => url('cart/uc_payulatam/confirmation', array('absolute' => TRUE)),
        'extra3' => serialize($extra3),
        );

      if ($account_id = uc_payulatam_get_account_id()) {
        $data['accountId'] = $account_id;
      }

      foreach ($data as $key => $value) {
        $form[$key] = array(
          '#type' => 'hidden',
          '#value' => $value,
          );
      }

      $form['#action'] = uc_payulatam_get_txn_type() ? UC_PAYULATAM_LIVEURL : UC_PAYULATAM_TESTURL;
      $form['actions']['back'] = array(
        '#type' => 'markup',
        '#markup' => l(t('Back'), 'cart/checkout'),
        );

    }
  }
}

/**************************
 *     Ubercart Hooks     *
 **************************/

/*
 * Implementation of hook_uc_payment_method().
 */
function uc_payulatam_uc_payment_method() {

  $methods[] = array(
    'id' => 'payulatam',
    'name' => t('PayU Latam'),
    'title' => uc_payulatam_get_title(),
    'desc' => t('Receive payments with Credit card, Checking or Savings account or cash through PayU Latam service.'),
    'callback' => 'uc_payulatam_method_payulatam',
    'weight' => 1,
    'checkout' => TRUE,
    );

  return $methods;
}

/**
 * Ubercart callback function for PayU Latam configuration form.
 */
function uc_payulatam_method_payulatam($op, $arg1 = NULL, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'settings':
    $form['uc_payulatam_merchant_id'] = array(
      '#title' => t('Merchant ID'),
      '#type' => 'textfield',
      '#default_value' => uc_payulatam_get_merchant_id(),
      '#required' => TRUE,
      '#maxlength' => 12,
      );
    $form['uc_payulatam_api_key'] = array(
      '#title' => t('API key'),
      '#type' => 'textfield',
      '#default_value' => uc_payulatam_get_api_key(),
      '#required' => TRUE,
      );
    $form['uc_payulatam_account_id'] = array(
      '#title' => t('Account ID'),
      '#type' => 'textfield',
      '#default_value' => uc_payulatam_get_account_id(),
      '#description' => t("Valid only for <strong>Brazil</strong> and <strong>Mexico</strong>."),
      '#maxlength' => 12,
      );
    $form['uc_payulatam_txn_type'] = array(
      '#title' => t('Transaction Type'),
      '#type' => 'select',
      '#options' => array(
        0 => t('Test'),
        1 => t('Live'),
        ),
      '#default_value' => uc_payulatam_get_txn_type(),
      );
    $form['uc_payulatam_reference'] = array(
      '#title' => t('Reference Prefix'),
      '#type' => 'textfield',
      '#default_value' => uc_payulatam_get_reference_prefix(),
      '#description' => t('This will be added to the Order ID.  You must use it if you have more than one Store.'),
      '#maxlength' => 35,
      );
    $form['uc_payulatam_currency'] = array(
      '#type' => 'select',
      '#title' => t('Currency'),
      '#options' => uc_payulatam_currencies(),
      '#default_value' => uc_payulatam_get_currency(),
      '#required' => TRUE,
      );
    $form['uc_payulatam_language'] = array(
      '#type' => 'select',
      '#title' => t('Language'),
      '#options' => uc_payulatam_languages(),
      '#default_value' => uc_payulatam_get_language(),
      '#required' => TRUE,
      '#description' => t("The system will try to show PayU Latam's page in current user's language. If it is not available, it will use this value."),
      );
    $taxoptions[0] = t('No IVA');
    if (module_exists('uc_taxes')) {
      foreach (uc_taxes_rate_load(NULL) as $key => $value) {
        $taxoptions[$key] = $value->name;
      }
      $iva_description = t('This is the list of taxes you have in your !uctaxesurl', array('!uctaxesurl' => l('Tax rates and settings page.', 'admin/store/settings/taxes')));
    }
    else {
      $iva_description = t('You must enable !taxes module.', array('!taxes' => l('Taxes', 'admin/modules', array('fragment' => 'edit-status-uc-taxes-wrapper'))));
    }
    $form['uc_payulatam_iva_tax_id'] = array(
      '#title' => t('IVA'),
      '#type' => 'select',
      '#options' => $taxoptions,
      '#description' => $iva_description,
      '#default_value' => uc_payulatam_get_iva_tax_id(),
      );
    $form['uc_payulatam_method_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Payment method title'),
      '#default_value' => uc_payulatam_get_method_title(),
      );
    $form['uc_payulatam_show_logo'] = array(
      '#type' => 'select',
      '#title' => t('Show'),
      '#options' => array(
        0 => t('Logo + Title'),
        1 => t('Logo'),
        2 => t('Title'),
        ),
      '#default_value' => uc_payulatam_get_show_logo(),
      '#description' => t("The logo is taken from <em>!logo_path</em>", array("!logo_path" => drupal_get_path('module', 'uc_payulatam') . '/img/logopayulatam.png')),
      );

    return $form;
    break;
  }
}

function uc_payulatam_get_title() {
  $path = base_path() . drupal_get_path('module', 'uc_payulatam');
  $logo = '<img src="' . $path . '/img/logopayulatam.png" alt="PayU Latam" />';
  $title = uc_payulatam_get_method_title();
  switch (uc_payulatam_get_show_logo()) {
    case 1:
    $show = $logo;
    break;
    case 2:
    $show = $title;
    break;
    default:
    $show =  $logo . ' ' . $title;
    break;
  }
  return $show;
}

function uc_payulatam_get_merchant_id() {
  return variable_get('uc_payulatam_merchant_id', '');
}

function uc_payulatam_get_api_key() {
  return variable_get('uc_payulatam_api_key', '');
}

function uc_payulatam_get_account_id() {
  return variable_get('uc_payulatam_account_id', '');
}

function uc_payulatam_get_txn_type() {
  return variable_get('uc_payulatam_txn_type', 0);
}

function uc_payulatam_get_reference_prefix() {
  return variable_get('uc_payulatam_reference', t('My Store'));
}

function uc_payulatam_get_currency() {
  return variable_get('uc_payulatam_currency');
}

function uc_payulatam_get_language() {
  return variable_get('uc_payulatam_language');
}

function uc_payulatam_get_iva_tax_id() {
  return variable_get('uc_payulatam_iva_tax_id', 0);
}

function uc_payulatam_get_method_title() {
  return variable_get('uc_payulatam_method_title', t('Payment with Savings or Checking account.'));
}

function uc_payulatam_get_show_logo() {
  return variable_get('uc_payulatam_show_logo', 0);
}

function uc_payulatam_get_reference($order_id) {
  return uc_payulatam_get_reference_prefix() . ' - ' . $order_id . (!uc_payulatam_get_txn_type() ? ' - ' . t('Test') : '');
}

function uc_payulatam_get_iva($order) {
  $iva_tax_id = uc_payulatam_get_iva_tax_id();

  if (!$iva_tax_id) {
    return 0;
  }

  $iva = 0;
  foreach ($order->line_items as $item) {
    if ($item['data']['tax_id'] == $iva_tax_id) {
      $iva += $item['amount'];
    }
  }

  return $iva;
}

function uc_payulatam_get_base($order) {
  $iva_tax_id = uc_payulatam_get_iva_tax_id();

  if (!$iva_tax_id) {
    return 0;
  }

  $base = 0;
  foreach ($order->line_items as $item) {
    if ($item['data']['tax_id'] == $iva_tax_id) {
      $base += $item['data']['taxable_amount'];
    }
  }

  return $base;
}

function uc_payulatam_get_signature($reference_code, $amount, $currency, $txn_state = NULL) {
  $api_key = uc_payulatam_get_api_key();
  $merchant_id = uc_payulatam_get_merchant_id();

  $text = "$api_key~$merchant_id~$reference_code~$amount~$currency";

  if (!is_null($txn_state)) {
    $text .= "~$txn_state";
  }

  return md5($text);
}

function uc_payulatam_format_amount($value) {
  return number_format($value, 2, '.', '');
}

function uc_payulatam_format_price($value) {
  $variables = array(
    'price' => $value
    );
  return theme('uc_price', $variables);
}

function _uc_payulatam_access_confirmation_page() {
  return TRUE;
}

function _uc_payulatam_access_response_page() {
  return TRUE;
}

function _uc_payulatam_set_extra3(&$extra3, $index, $value) {
  $extra3[$index] = $value;
}

function _uc_payulatam_get_extra3($extra3, $index, $value) {
  $extra3 = explode('-', $extra3);
  return $extra3[$index];
}

function uc_payulatam_currencies($key = NULL) {
  $list = array(
    'ARS' => t('Argentine Peso'),
    'BRL' => t('Brazilian Real'),
    'COP' => t('Colombian Peso'),
    'MXN' => t('Mexican Peso'),
    'PEN' => t('Peruvian Nuevo Sol'),
    'USD' => t('US Dollar'),
    );

  if (!is_null($key)) {
    return _uc_payulatam_list_key($list, $key);
  }

  asort($list);

  return $list;
}

function uc_payulatam_languages($key = NULL) {
  $list = array(
    'EN' => t('English'),
    'ES' => t('Spanish'),
    'PT' => t('Portuguese'),
    );

  if (!is_null($key)) {
    return _uc_payulatam_list_key($list, $key);
  }

  return $list;
}

function uc_payulatam_txn_states($key = NULL) {
  $list = array(
    '1' => t("Capturing Data"), //"CAPTURING_DATA  Capturando datos.",
    '2' => t("New"), //"NEW Estado inicial de la transacción.",
    '4' => t("Approved"), //"APPROVED  La transacción fue aprobada por la entidad financiera.",
    '5' => t("Expired"), //"EXPIRED Transacción expiró, por superar el tiempo límite de respuesta.",
    '6' => t("Declined"), //"DECLINED Transacción Declinada o Abandonada.",
    '7' => t("Pending"), //"PENDING Operación pendiente de finalización.",
    '101' => t("Converted"), //"FX_CONVERTED Retornado por el conversor de monedas, indicando la modificación realizada.",
    '102' => t("Verified"), //"VERIFIED Indica que la transacción fue evaluada por nuestro módulo antifraude.",
    '103' => t("Submitted"), //"SUBMITTED Movimiento fue enviado para su procesamiento al proveedor de pago.",
    '104' => t("Error"), //"ERROR Se presentó un error con el medio de pago externo.",
    );

  if (!is_null($key)) {
    return _uc_payulatam_list_key($list, $key);
  }

  return $list;
}

function uc_payulatam_polresponse_codes($key = NULL) {
  $list = array(
    '1' => t("Approved transaction."), // "Transacción Aprobada.",
    '4' => t("Transaction rejected by the entity."), // "Transacción rechazada por la entidad.",
    '5' => t("Transaction declined by the entity."), // "Transacción declinada por la entidad financiera.",
    '6' => t("Insufficient funds."), // "Fondos insuficientes.",
    '7' => t("Invalid card."), // "Tarjeta inválida.",
    '8' => t("It is necessary to contact the entity."), // "Es necesario contactar a la entidad.",
    '9' => t("Expired card."), // "Tarjeta vencida.",
    '10' => t("Restricted card."), // "Tarjeta restringida.",
    '12' => t("Expiry date or security field invalid."), // "Fecha de expiración o campo seg. Inválidos.",
    '13' => t("Repeat transaction."), // "Repita transacción.",
    '14' => t("Invalid transaction."), // "Transacción inválida.",
    '15' => t("Transaction sent to manual validation."), // "Transacción enviada a Validación Manual.",
    '17' => t("Amount exceeds maximum allowed by the entity."), // "Monto excede máximo permitido por entidad.",
    '22' => t("Card not allowed to buy through internet."), // "Tarjeta no autorizada para realizar compras por internet.",
    '23' => t("Transaction rejected by antifraud module."), // "Transacción Rechazada por el Modulo Antifraude.",
    '50' => t("Transaction expired before to be sent to the payment method network."), // "Transacción Expirada, antes de ser enviada a la red del medio de pago.",
    '51' => t("There was an error by the Payment Method Network processing."), // "Ocurrió un error en el procesamiento por parte de la Red del Medio de Pago.",
    '52' => t("The payment method is not enabled. The request is not sent to it."), // "El medio de Pago no se encuentra Activo. No se envía la solicitud a la red del mismo.",
    '53' => t("Bank not available."), // "Banco no disponible.",
    '54' => t("The payment method provider notifies that the transaction was not accepted."), // "El proveedor del Medio de Pago notifica que no fue aceptada la transacción.",
    '55' => t("Error converting the transaction amount."), // "Error convirtiendo el monto de la transacción.",
    '56' => t("Error converting deposit amounts."), // "Error convirtiendo montos del deposito.",
    '9994' => t("Transaction pending to be confirmed."), // "Transacción pendiente por confirmar.",
    '9995' => t("Digital certificate not found."), // "Certificado digital no encontrado.",
    '9997' => t("Messaging error with the financial entity."), // "Error de mensajería con la entidad financiera.",
    '10000' => t("Automatically adjusted."), // "Ajustado Automáticamente.",
    '10001' => t("Automatic adjust and successful reversion."), // "Ajuste Automático y Reversión Exitosa.",
    '10002' => t("Automatic adjust and failed reversion."), // "Ajuste Automático y Reversión Fallida.",
    '10003' => t("Automatic adjust not supported."), // "Ajuste automático no soportado.",
    '10004' => t("Adjust error."), // "Error en el Ajuste.",
    '10005' => t("Adjust and reversion error."), // "Error en el ajuste y reversión.",
    );

  if (!is_null($key)) {
    return _uc_payulatam_list_key($list, $key);
  }

  return $list;
}

function uc_payulatam_lapresponsecode($key = NULL) {
  $list = array(
    'APPROVED' => t("Transaction approved."), // "La transacción fue aprobada.",
    'DECLINED' => t("Transaction rejected."), // "La transacción fue rechazada.",
    'ERROR' => t("There was an error processing the transaction."), // "Ocurrió un error procesando la transacción.",
    'PENDING' => t("Transaction is pending."), // "La transacción quedó pendiente.",
    'ENTITY_DECLINED' => t("Transaction declined by the bank."), // "La transacción fue declinada por el banco.",
    'ANTIFRAUD_REJECTED' => t("Transaction rejected by antifraud system."), // "La transacción fue rechazada por el sistema anti-fraude.",
    'PENDING_TRANSACTION_REVIEW' => t("Transaction stopped and must be checked, this may happen by security filters."), // "La transacción fue detenida y debe ser revisada, esto puede ocurrir por filtros de seguridad.",
    'INTERNAL_PAYMENT_PROVIDER_ERROR' => t("There was an error in the system trying to process the payment."), // "Ocurrió un error en el sistema intentando procesar el pago.",
    'INACTIVE_PAYMENT_PROVIDER' => t("The payment processor is not enabled."), // "El proveedor de pagos no se encontraba activo.",
    'DIGITAL_CERTIFICATE_NOT_FOUND' => t("The finantial network reported an authentication error."), // "La red financiera reportó un error en la autenticación.",
    'PAYMENT_NETWORK_REJECTED' => t("The finantial netowrk rejected the transaction."), // "La red financiera rechazó la transacción.",
    'INVALID_EXPIRATION_DATE_OR_SECURITY_CODE' => t("The security code or the expiration date was invalid."), // "El código de seguridad o la fecha de expiración estaba inválido.",
    'INSUFFICIENT_FUNDS' => t("The account didn't have enough funds."), // "La cuenta no tenía fondos suficientes.",
    'CREDIT_CARD_NOT_AUTHORIZED_FOR_INTERNET_TRANSACTIONS' => t("The credit card was not authorized for internet transactions."), // "La tarjeta de crédito no estaba autorizada para transacciones por Internet.",
    'INVALID_TRANSACTION' => t("The finantial network reported that the transaction was invalid."), // "La red financiera reportó que la transacción fue inválida.",
    'INVALID_CARD' => t("Invalid card."), // "La tarjeta es inválida.",
    'EXPIRED_CARD' => t("Expired card."), // "La tarjeta ya expiró.",
    'RESTRICTED_CARD' => t("The card presents a restriction."), // "La tarjeta presenta una restricción.",
    'CONTACT_THE_ENTITY' => t("You must contact the bank."), // "Debe contactar al banco.",
    'REPEAT_TRANSACTION' => t("Transaction must be repeated."), // "Se debe repetir la transacción.",
    'ENTITY_MESSAGING_ERROR' => t("The finantial network reported a communication error with the bank."), // "La red financiera reportó un error de comunicaciones con el banco.",
    'PENDING_TRANSACTION_CONFIRMATION' => t("The transaction is pending to be confirmed."), // "La transacción está pendiente de ser confirmada.",
    'BANK_UNREACHABLE' => t("The bank is not available."), // "El banco no se encontraba disponible.",
    'EXCEEDED_AMOUNT' => t("The transaction exceeds the amount allowed by the bank."), // "La transacción excede un monto establecido por el banco.",
    'NOT_ACCEPTED_TRANSACTION' => t("For some reason, the transaction was not accepted by the bank."), // "La transacción no fue aceptada por el banco por algún motivo.",
    'ERROR_CONVERTING_TRANSACTION_AMOUNTS' => t("There was an error converting the amount to the payment currency."), // "Ocurrió un error convirtiendo los montos a la moneda de pago.",
    );

  if (!is_null($key)) {
    return _uc_payulatam_list_key($list, $key);
  }

  return $list;
}

function _uc_payulatam_list_key($list, $key) {
  if (array_key_exists($key, $list)) {
    return $list[$key];
  }
  return FALSE;
}
