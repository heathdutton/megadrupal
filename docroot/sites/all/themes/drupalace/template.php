<?php

/**
 * Override theme_button().
 */
function drupalace_button($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'submit';
  element_set_attributes($element, array('id', 'name', 'value'));

  $element['#attributes']['class'][] = 'form-' . $element['#button_type'];
  if (!empty($element['#attributes']['disabled'])) {
    $element['#attributes']['class'][] = 'form-button-disabled';
  }

  // Return normal button for some classes.
  $normal_buttons = array('ctools-jump-menu-hide', 'fivestar-submit');
  foreach ($normal_buttons as $button_class) {
    if (in_array($button_class, $element['#attributes']['class'])) {
      return '<input' . drupal_attributes($element['#attributes']) . ' />';
    }
  }

  return
    '<span class="button">
      <span class = "button-left"></span>
      <span class = "button-center"></span>
      <span class = "button-right"></span>
      <input' . drupal_attributes($element['#attributes']) . ' />
    </span>';
}

/**
 * Return a themed breadcrumb trail.
 *
 * @param $breadcrumb
 *   An array containing the breadcrumb links.
 * @return a string containing the breadcrumb output.
 */
function drupalace_breadcrumb($variables) {
  $breadcrumb = $variables['breadcrumb'];
  if (!empty($breadcrumb)) {
    $output = '<div class="breadcrumb">' . implode(' â€º ', $breadcrumb) . '</div>';
    return $output;
  }
}

/**
 * Override or insert variables into the html template.
 */
function drupalace_preprocess_html(&$vars) {
  global $user;

  // Add variable for theme path.
  $vars['theme_path'] = base_path() . path_to_theme();

  // Add css generated by changing theme settings.
  drupal_add_css('public://drupalace/drupalace.layout.css', array('group' => CSS_THEME));

  // Add conditional CSS for IE7 and lower.
  drupal_add_css(path_to_theme() . '/ie-fixes/ie.css', array('group' => CSS_THEME, 'browsers' => array('IE' => 'lte IE 7', '!IE' => FALSE), 'preprocess' => FALSE));

  // Add js for popup login.
  $popup_login = theme_get_setting('drupalace_popup_login');
  if ($popup_login && !$user->uid) {
    drupal_add_js(path_to_theme() . '/js/drupalace.js');
    drupal_add_library('system', 'ui.dialog');
    drupal_add_library('system', 'effects.explode');
    drupal_add_library('system', 'effects.slide');
  }

  // Add social bookmarks js for node page
  if ($node = menu_get_object()) {
    $social_types = (array) theme_get_setting('drupalace_social_node_types');
    $social_types = drupalace_clean_options($social_types);
    if (in_array($node->type, $social_types)) {
      drupal_add_js(path_to_theme() . '/js/addthis.js');
    }
  }
}

/**
 * Override or insert variables into the page template.
 */
function drupalace_preprocess_page(&$vars) {
  global $user;

  // Move secondary tabs into a separate variable.
  $vars['tabs2'] = array(
    '#theme' => 'menu_local_tasks',
    '#secondary' => $vars['tabs']['#secondary'],
  );
  unset($vars['tabs']['#secondary']);

  if (isset($vars['node'])) {

    // Add title for node if this feature not disabled by admin.
    $hide_node_types = (array) theme_get_setting('drupalace_node_node_types');
    $hide_node_types = drupalace_clean_options($hide_node_types);
    if (!in_array($vars['node']->type, $hide_node_types)) {
      $type = node_type_get_name($vars['node']);
      $vars['title_additional'] = '<span class="additional">' . t($type) . '</span>';
    }

    // Add title class.
    $vars['title_attributes_array']['class'][] = 'title';
    $vars['title_attributes_array']['class'][] = $vars['node']->type;
    $vars['theme_hook_suggestions'][] = 'page__node__full';
  }

  // Add js for popup login.
  $popup_login = theme_get_setting('drupalace_popup_login');
  if ($popup_login && !$user->uid) {
    $vars['login_button'] = l(t('Log in'), 'user', array('attributes' => array('class' => array('user-login'))));
  }

  if ($user->uid) {
    $vars['logout_link'] = l(t('Logout'), 'user/logout', array('attributes' => array('class' => array('user-logout'))));
  }

  // Add developers link.
  $developers = l('Drupalace team', 'http://drupalace.ru', array('absolute' => TRUE, 'attributes' => array('target' => '_blank')));
  $vars['developers'] = t('Theme by !drupalace', array('!drupalace' => $developers));
}

/**
 * Override or insert variables into the node template.
 */
function drupalace_preprocess_node(&$vars) {
  $node = $vars['node'];

  // Unset filter selection for comment form.
  if (isset($vars['content']['comments']['comment_form']['comment_body'])) {
    $comment_language = $vars['content']['comments']['comment_form']['comment_body']['#language'];
    unset($vars['content']['comments']['comment_form']['comment_body'][$comment_language][0]['format']);
  }

  // Add title for node if this feature not disabled by admin.
  $hide_node_types = (array) theme_get_setting('drupalace_node_node_types');
  $hide_node_types = drupalace_clean_options($hide_node_types);
  if (!in_array($vars['node']->type, $hide_node_types)) {
    $type = node_type_get_name($vars['node']);
    $vars['title_additional'] = '<span class="additional">' . t($type) . '</span>';
  }

  // Add title class.
  $vars['title_attributes_array']['class'][] = 'title';
  $vars['title_attributes_array']['class'][] = $node->type;

  // Add node bottom links.
  if ($vars['display_submitted']) {
    $bottom_links = array();
    $bottom_links[] = '<span class = "name">' . $vars['name'] . '</span>';
    $bottom_links[] = '<span class = "date">' . format_date($node->created) . '</span>';
    $vars['bottom_links'] = theme('item_list', array('items' => $bottom_links));
  }

  // Process content if statistics module exists.
  if (isset($vars['content']['links']['statistics']['#links']['statistics_counter'])) {
    $statistics = statistics_get($node->nid);
    $vars['content']['links']['statistics']['#links']['statistics_counter']['title'] = $statistics['totalcount'];
  }

  // Add node bottom additional links.
  if ($vars['teaser']) {
    // READ MORE link should be last in list for teaser.
    $node_links = $vars['content']['links']['node'];
    unset($vars['content']['links']['node']);
    $vars['content']['links']['node'] = $node_links;
  }

  $vars['bottom_right_links'] = render($vars['content']['links']);

  // Add social features.
  $social_types = (array) theme_get_setting('drupalace_social_node_types');
  $social_types = drupalace_clean_options($social_types);
  if ($vars['page'] && in_array($node->type, $social_types)) {
    $buttons = theme_get_setting('drupalace_social_services');
    $buttons = explode(',', $buttons);
    $buttons_code = array();
    foreach ($buttons as $button) {
      $buttons_code[] = '<a class="addthis_button_' . trim($button) . '"></a>';
    }
    $button_size = theme_get_setting('drupalace_social_button_size');
    $style = 'addthis_' . $button_size . 'x' . $button_size . '_style';
    $vars['social_buttons'] = '<div class="addthis_toolbox addthis_default_style ' . $style . '">' . implode('', $buttons_code) . '</div>';
    $text = theme_get_setting('drupalace_social_text');
    $vars['social_text'] = t($text);
  }

  // Add node navigation.
  $navigation_types = (array) theme_get_setting('drupalace_node_navigation');
  $navigation_types = drupalace_clean_options($navigation_types);
  if ($vars['page'] && in_array($node->type, $navigation_types)) {
    $vars['previous_node'] = _drupalace_get_node_previous($node);
    $vars['next_node']     = _drupalace_get_node_next($node);
  }

  // Add regions to node.
  $vars['node_bottom'] = block_get_blocks_by_region('node_bottom');
  $vars['node_top']    = block_get_blocks_by_region('node_top');
}

/**
 * Return only selected options from array
 */
function drupalace_clean_options($array) {
  $output = array();
  foreach ($array as $key => $value) {
    if ($value) {
      $output[] = $key;
    }
  }
  return $output;
}

/**
 * Return link to the previous node
 */
function _drupalace_get_node_previous($node) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', $node->type);
  $query->condition('n.created', $node->created, '<');
  $query->condition('n.status', NODE_PUBLISHED);
  $query->orderBy('n.created', 'DESC');
  $query->range(0, 1);
  $previous_node = $query->execute()->fetchObject();
  if ($previous_node) {
    return l(check_plain($previous_node->title), 'node/' .  $previous_node->nid);
  }
  return '';
}

/**
 * Return link to the next node
 */
function _drupalace_get_node_next($node) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', $node->type);
  $query->condition('n.created', $node->created, '>');
  $query->condition('n.status', NODE_PUBLISHED);
  $query->orderBy('n.created', 'ASC');
  $query->range(0, 1);
  $next_node = $query->execute()->fetchObject();
  if ($next_node) {
    return l(check_plain($next_node->title), 'node/' .  $next_node->nid);
  }
  return '';
}

/**
 * Override or insert variables into the comment template.
 */
function drupalace_preprocess_comment(&$vars) {
  $vars['created'] = date('d.m.Y H:i', $vars['comment']->created);
  $vars['author'] = t('!author wrote:', array('!author' => $vars['author']));
  $uri = entity_uri('comment', $vars['comment']);
  $uri['options'] += array('attributes' => array(
    'class' => 'permalink',
    'rel' => 'bookmark',
  ));
  $vars['permalink'] = l('#' . $vars['id'], $uri['path'], $uri['options']);
}

/**
 * Override or insert variables into the block template.
 */
function drupalace_preprocess_block(&$vars) {
  $vars['title_attributes_array']['class'][] = 'title';
}

/**
 * Override default theme_filter_tips().
 */
function drupalace_filter_tips($variables) {
  $tips = $variables['tips'];
  $output = '';

  $multiple = count($tips) > 1;
  if ($multiple) {
    $output = '<h2>' . t('Text Formats') . '</h2>';
  }

  if (count($tips)) {
    if ($multiple) {
      $output .= '<div class="compose-tips">';
    }
    foreach ($tips as $name => $tiplist) {
      if ($multiple) {
        $output .= '<div class="filter-type filter-' . drupal_html_class($name) . '">';
        $output .= '<h3>' . $name . '</h3>';
      }

      if ($multiple) {
        $output .= '</div>';
      }
    }
    if ($multiple) {
      $output .= '</div>';
    }
  }

  return $output;
}

/**
 * Override default theme_filter_tips_more_info().
 */
function drupalace_filter_tips_more_info() {
  return '';
}

/**
 * Overrides theme_links().
 */
function drupalace_links($variables) {
  $links = $variables['links'];
  $attributes = $variables['attributes'];
  $heading = $variables['heading'];
  global $language_url;
  $output = '';

  if (count($links) > 0) {
    $output = '';

    // Treat the heading first if it is present to prepend it to the
    // list of links.
    if (!empty($heading)) {
      if (is_string($heading)) {
        // Prepare the array that will be used when the passed heading
        // is a string.
        $heading = array(
          'text' => $heading,
          // Set the default level of the heading.
          'level' => 'h2',
        );
      }
      $output .= '<' . $heading['level'];
      if (!empty($heading['class'])) {
        $output .= drupal_attributes(array('class' => $heading['class']));
      }
      $output .= '>' . check_plain($heading['text']) . '</' . $heading['level'] . '>';
    }

    $output .= '<ul' . drupal_attributes($attributes) . '>';

    $num_links = count($links);
    $i = 1;

    foreach ($links as $key => $link) {
      $class = array($key);

      // Add first, last and active classes to the list of links to help out themers.
      if ($i == 1) {
        $class[] = 'first';
      }
      if ($i == $num_links) {
        $class[] = 'last';
      }
      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page()))
           && (empty($link['language']) || $link['language']->language == $language_url->language)) {
        $class[] = 'active';
      }
      $output .= '<li' . drupal_attributes(array('class' => $class)) . '>';

      if (isset($link['href'])) {
        // Pass in $link as $options, they share the same keys.
        $output .= '<span class = "menu-left"></span><span class = "menu-center"></span><span class = "menu-right"></span>' . l($link['title'], $link['href'], $link);
      }
      elseif (!empty($link['title'])) {
        // Some links are actually not links, but we wrap these in <span> for adding title and class attributes.
        if (empty($link['html'])) {
          $link['title'] = check_plain($link['title']);
        }
        $span_attributes = '';
        if (isset($link['attributes'])) {
          $span_attributes = drupal_attributes($link['attributes']);
        }
        $output .= '<span' . $span_attributes . '>' . $link['title'] . '</span>';
      }

      $i++;
      $output .= "</li>\n";
    }

    $output .= '</ul>';
  }

  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalace_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $value = theme_get_setting('drupalace_search_text');
  $text = t($value);
  $form['search_block_form']['#default_value'] = $text;
  $form['search_block_form']['#attributes'] = array(
    'onblur'=> "if (this.value.length == 0) {this.value='{$text}'}",
    'onfocus'=> "if (this.value== '{$text}') {this.value=''}"
  );
  $form['actions']['submit']['#suffix'] = '<span class="spic"></span>';
  $submit = theme_get_setting('drupalace_search_button');
  $form['actions']['submit']['#value'] = t($submit);
  unset($form['search_block_form']['title']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalace_form_comment_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $lang = $form['comment_body']['#language'];
  $form['comment_body'][$lang][0]['#resizable'] = FALSE;
  $form['#attributes']['class'][] = 'clearfix';
  if (!$user->uid) {
    $form['#attributes']['class'][] = 'anonymous';
  }
}

/**
 * Override theme_pager().
 */
function drupalace_pager($variables) {
  $tags = $variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $quantity = $variables['quantity'];
  global $pager_page_array, $pager_total;

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // first is the first page listed by this pager piece (re quantity)
  $pager_first = $pager_current - $pager_middle + 1;
  // last is the last page listed by this pager piece (re quantity)
  $pager_last = $pager_current + $quantity - $pager_middle;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.

  // Prepare for generation loop.
  $i = $pager_first;
  if ($pager_last > $pager_max) {
    // Adjust "center" if at end of query.
    $i = $i + ($pager_max - $pager_last);
    $pager_last = $pager_max;
  }
  if ($i <= 0) {
    // Adjust "center" if at start of query.
    $pager_last = $pager_last + (1 - $i);
    $i = 1;
  }
  // End of generation loop preparation.

  $li_first = theme('pager_first', array('text' => (isset($tags[0]) ? $tags[0] : ''), 'element' => $element, 'parameters' => $parameters));
  $li_previous = theme('pager_previous', array('text' => (isset($tags[1]) ? $tags[1] : ''), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  $li_next = theme('pager_next', array('text' => (isset($tags[3]) ? $tags[3] : ''), 'element' => $element, 'interval' => 1, 'parameters' => $parameters));
  $li_last = theme('pager_last', array('text' => (isset($tags[4]) ? $tags[4] : ''), 'element' => $element, 'parameters' => $parameters));

  $items = array();
  if ($pager_total[$element] > 1) {
    if ($li_first) {
      $items[] = array(
        'class' => array('pager-first'),
        'data' => $li_first,
      );
    }
    if ($li_previous) {
      $items[] = array(
        'class' => array('pager-previous'),
        'data' => $li_previous,
      );
    }

    // When there is more than one page, create the pager list.
    if ($i != $pager_max) {
      if ($i > 1) {
        $items[] = array(
          'class' => array('pager-ellipsis'),
          'data' => 'â€¦',
        );
      }
      // Now generate the actual pager piece.
      for (; $i <= $pager_last && $i <= $pager_max; $i++) {
        if ($i < $pager_current) {
          $items[] = array(
            'class' => array('pager-item'),
            'data' => theme('pager_previous', array('text' => $i, 'element' => $element, 'interval' => ($pager_current - $i), 'parameters' => $parameters)),
          );
        }
        if ($i == $pager_current) {
          $items[] = array(
            'class' => array('pager-current'),
            'data' => $i,
          );
        }
        if ($i > $pager_current) {
          $items[] = array(
            'class' => array('pager-item'),
            'data' => theme('pager_next', array('text' => $i, 'element' => $element, 'interval' => ($i - $pager_current), 'parameters' => $parameters)),
          );
        }
      }
      if ($i < $pager_max) {
        $items[] = array(
          'class' => array('pager-ellipsis'),
          'data' => 'â€¦',
        );
      }
    }
    // End generation.
    if ($li_next) {
      $items[] = array(
        'class' => array('pager-next'),
        'data' => $li_next,
      );
    }
    if ($li_last) {
      $items[] = array(
        'class' => array('pager-last'),
        'data' => $li_last,
      );
    }
    return '<h2 class="element-invisible">' . t('Pages') . '</h2>' . theme('item_list', array(
      'items' => $items,
      'attributes' => array('class' => array('pager')),
    ));
  }
}

/**
 * Override theme_item_list().
 */
function drupalace_item_list($variables) {
  $items = $variables['items'];
  $title = $variables['title'];
  $type = $variables['type'];
  $attributes = $variables['attributes'];

  $output = '<div class="item-list">';
  if (isset($title)) {
    $output .= '<h3>' . $title . '</h3>';
  }

  if (!empty($items)) {
    $output .= "<$type" . drupal_attributes($attributes) . '>';
    $num_items = count($items);
    foreach ($items as $i => $item) {
      $attributes = array();
      $children = array();
      $data = '';
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = $value;
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        // Render nested list.
        $data .= theme_item_list(array('items' => $children, 'title' => NULL, 'type' => $type, 'attributes' => $attributes));
      }
      if ($i == 0) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items - 1) {
        $attributes['class'][] = 'last';
      }
      if ($i % 2 == 0) {
        $attributes['class'][] = 'odd';
      }
      else {
        $attributes['class'][] = 'even';
      }
      $output .= '<li' . drupal_attributes($attributes) . '>' . $data . "</li>\n";
    }
    $output .= "</$type>";
  }
  $output .= '</div>';
  return $output;
}
