<?php
/**
 * Implements hook_vtcore_theme_alter_process()
 *
 * Registering custom theme
 * @see templates/*.tpl.php to change the markup
 */
function blocks_vtcore_theme_alter_process(&$variables) {

  // custom template for user information used in block
  $variables['node_recent_block'] = array(
    'template' => 'vtcore/plugins/blocks/templates/node-recent-block',
    'override preprocess functions' => TRUE,
  );

  // custom template for user information used in block
  $variables['comment_block'] = array(
    'template' => 'vtcore/plugins/blocks/templates/comment-block',
    'override preprocess functions' => TRUE,
  );

  // custom template for RSS feed block
  $variables['feed_icon'] = array(
    'template' => 'vtcore/plugins/blocks/templates/feed-icon',
    'override preprocess functions' => TRUE,
  );

  // custom template for user information used in block
  $variables['user_information'] = array(
  	'template' => 'vtcore/plugins/blocks/templates/user-information',
    'override preprocess functions' => TRUE,
  	'variables' => array(
  		'users' => NULL,
  		'title' => NULL,
  		'control' => NULL),
  );
}

/**
 * Implement hook_vtcore_preprocess_node_recent_block();
 */
function blocks_vtcore_preprocess_node_recent_block(&$variables) {
  $disable_picture = vtcore_get_plugin_setting('disable_user_picture_recent_node', 'blocks');
  foreach ($variables['nodes'] as $node) {
    $account = user_load($node->uid);
    $picture = '';
    if (!$disable_picture) {
      $picture = theme('user_picture', array('account' => $account));
    }
    $options = array(
      '@time' => format_interval(time() - $node->created, 1),
      '!link' => l($node->name, 'user/'. $node->uid),
      '@title' => truncate_utf8($node->title, 30, $wordsafe = TRUE, $dots  = TRUE),
    );
    $variables['contents'][$node->nid] = array(
      'picture' => $picture,
      'title' => $node->title,
      'title_link' => l(t('@title', $options), 'node/' . $node->nid),
      'posted_date' => $node->created,
      'posted_data_themed' => t('Posted @time ago by !link', $options),
      'node' => $node,
      'user' => $account,
      'username' => $account->name,
      'username_linked' => theme('username', array('account' => $account)),
    );
  }
}

/**
 * Implement hook_vtcore_preprocess_comment_block();
 */
function blocks_vtcore_preprocess_comment_block(&$variables) {
  $disable_picture = vtcore_get_plugin_setting('disable_user_picture_recent_comment', 'blocks');
  $number = vtcore_get_plugin_setting('comment_block_count', 'blocks', 10);

  foreach (comment_get_recent($number) as $comment) {
    $account = user_load($comment->uid);
    $comment_object = comment_load($comment->cid);

    $comment_body = '';
    $comment_body_stripped = '';
    $comment_body_safe = '';

    if (isset($comment_object->comment_body[$comment_object->language][0]['value'])) {
      $comment_body = $comment_object->comment_body[$comment_object->language][0]['value'];
      $comment_body_stripped = truncate_utf8(strip_tags($comment_body), 50, $wordsafe = TRUE, $dots = TRUE);
    }

    if (isset($comment_object->comment_body[$comment_object->language][0]['safe_value'])) {
      $comment_body_safe = $comment_object->comment_body[$comment_object->language][0]['safe_value'];
    }

    $name = theme('username', array('account' => $account));

    $picture = '';
    if (!$disable_picture) {
      $picture = theme('user_picture', array('account' => $account));
    }
    $options = array(
      '@time' => format_date($comment->created, 'custom', 'jS F, Y'),
      '!link' => l($comment->name, 'user/'. $comment->uid),
      '@title' => truncate_utf8($comment->subject, 30, $wordsafe = TRUE, $dots  = TRUE),
    );

    $variables['contents'][$comment->cid] = array(
      'picture' => $picture,
      'title_link' => l(t('@title', $options), 'node/' . $comment->nid),
      'posted_data_themed' => t('Comment by !link on @time', $options),
      'comment' => $comment_object,
      'comment_subject' => $comment_object->subject,
      'comment_subject_stripped' => strip_tags($comment_object->subject),
      'comment_body_raw' => $comment_body,
    	'comment_body_stripped' => $comment_body_stripped,
    	'comment_body_safe' => $comment_body_safe,
      'user' => $account,
      'username' => $account->name,
      'username_linked' => theme('username', array('account' => $account)),
    );

  }
}


/**
 * Implement hook_vtcore_preprocess_feed_icon();
 */
function blocks_vtcore_preprocess_feed_icon(&$variables) {
  // Description
  $variables['description'] = t('@feed_desc', array('@feed_desc' => vtcore_get_plugin_setting('feed_icon_description', 'blocks')));

  // Text variables
  $variables['text'] = t('Subscribe to @feed-title', array('@feed-title' => $variables['title']));

  // Image variables
  $image_options = array(
  	'path' => 'misc/feed.png',
  	'width' => 16,
  	'height' => 16,
  	'alt' => $variables['text'],
  );
  $variables['image'] = theme('image', $image_options);

  // Link variables
  $link_options = array(
  	'html' => TRUE,
  	'attributes' => array(
  		'class' => array(
  			'feed-icon'
      ),
      'title' => $variables['text'],
    ),
  );
  $variables['image_links'] = l($variables['image'], $variables['url'], $link_options);
}

/**
 * Implement hook_vtcore_preprocess_user_information();
 */
function blocks_vtcore_preprocess_user_information(&$variables) {
  $user = $variables['user'];
  $title = $variables['title'];
  $control = $variables['control'];
  $picture = array();

  // check if we can build the picture
  if (!$control['disable_picture']) {
    $picture = array('account' => user_load($user->uid));
    $variables['user_picture'] = theme('user_picture', $picture);
  }
  // check if we can build the user name
  if (!$control['disable_name']) {
    $variables['user_name'] = theme('username', array('account' => $user));
  }
  // check if we can build the user info
  if (!$control['disable_info']) {
    $variables['user_info'] = t('Member since @userjoin ago', array('@userjoin' => format_interval(time() - $user->created, 1)));
  }
  // check if we can build the contact link
  if ($control['disable_contact'] == false) {
    $variables['user_contact'] = l(t('Quick contact') , 'user/' . $user->uid . '/contact');
  }
}

/**
 * Implement hook_vtcore_block_view_alter_process()
 *
 * @see hook_block_view_alter()
 * @param $data
 * @param $block
 */
function blocks_vtcore_block_view_alter_process(&$data, &$block) {
  // altering the whos new block
  if ($block->module == 'user' && $block->delta == 'new') {
    if (user_access('access content')) {
      $control = array(
      	'disable_picture' => vtcore_get_plugin_setting('disable_user_picture_whosnew_picture', 'blocks'),
        'disable_name' => vtcore_get_plugin_setting('disable_user_picture_whosnew_name', 'blocks'),
        'disable_info' => vtcore_get_plugin_setting('disable_user_picture_whosnew_info', 'blocks'),
        'disable_contact' => vtcore_get_plugin_setting('disable_user_picture_whosnew_contact', 'blocks'),
      );
      // link to contact module permission
      if (function_exists('_contact_personal_tab_access')) {
        global $user;
        $control['disable_contact'] = !_contact_personal_tab_access($user);
      }
      $data['content'] = '';
      $users = db_query_range('SELECT uid, name, created FROM {users} WHERE status <> 0 AND access <> 0 ORDER BY created DESC', 0, variable_get('user_block_whois_new_count', 5))->fetchAll();
      foreach ($users as $account) {
        $data['content'] .= theme('user_information', array('user' => $account, 'title' => NULL, 'control' => $control));
      }
    }
  }

  // altering the whos online block
  if ($block->module == 'user' && $block->delta == 'online') {
    if (user_access('access content')) {
      $control = array(
      	'disable_picture' => vtcore_get_plugin_setting('disable_user_picture_whosonline_picture', 'blocks'),
        'disable_name' => vtcore_get_plugin_setting('disable_user_picture_whosonline_name', 'blocks'),
        'disable_info' => vtcore_get_plugin_setting('disable_user_picture_whosonline_info', 'blocks'),
        'disable_contact' => vtcore_get_plugin_setting('disable_user_picture_whosonline_contact', 'blocks'),
      );

      // link to contact module permission
      if (function_exists('_contact_personal_tab_access')) {
        global $user;
        $control['disable_contact'] = !_contact_personal_tab_access($user);
      }

      // Count users active within the defined period.
      $interval = REQUEST_TIME - variable_get('user_block_seconds_online', 900);

      // Perform database queries to gather online user lists. We use s.timestamp
      // rather than u.access because it is much faster.
      $authenticated_count = db_query("SELECT COUNT(DISTINCT s.uid) FROM {sessions} s WHERE s.timestamp >= :timestamp AND s.uid > 0", array(':timestamp' => $interval))->fetchField();

      $output = '<p>' . format_plural($authenticated_count, 'There is currently 1 user online.', 'There are currently @count users online.') . '</p>';

      // Display a list of currently online users.
      $max_users = variable_get('user_block_max_list_count', 10);
      if ($authenticated_count && $max_users) {
        $users = db_query_range('SELECT u.uid, u.name, u.created, MAX(s.timestamp) AS max_timestamp FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.timestamp >= :interval AND s.uid > 0 GROUP BY u.uid, u.name ORDER BY max_timestamp DESC', 0, $max_users, array(':interval' => $interval))->fetchAll();
        $data['content'] = '';
        foreach ($users as $account) {
          $data['content'] .= theme('user_information', array('user' => $account, 'title' => NULL, 'control' => $control));
        }
      }

    }
  }
}

/**
 * Implements hook_vtcore_form_alter_process()
 */
function blocks_vtcore_form_alter_process(&$form, &$form_state, $form_id) {

  // Altering search form
  if ($form_id == 'search_block_form') {
    $searchtext = t('!search', array('!search' => vtcore_get_plugin_setting('search_box_text', 'blocks', 'Search')));
    $disable_title = vtcore_get_plugin_setting('search_box_title', 'blocks', 1);
    $title = 'before';
    if ($disable_title) {
      $title = 'invisible';
    }

    $form['search_block_form']['#title_display'] = $title;
    $form['search_block_form']['#size'] = vtcore_get_plugin_setting('search_box_size', 'blocks', '25');
    $form['search_block_form']['#default_value'] = t('@searchtext', array('@searchtext' => $searchtext));
    $form['search_block_form']['#attributes']['onblur'] = "if (this.value == '') {this.value = '". $searchtext ."';}";
    $form['search_block_form']['#attributes']['onfocus'] = "if (this.value == '". $searchtext ."') {this.value = '';}";

    $searchclass = theme_get_setting('search_box_class');
    if (!empty($searchclass)) {
      $searchclass = explode(',' ,str_replace(' ', '', check_plain($searchclass)));
    }
    if (is_array($searchclass)) {
      $form['search_block_form']['#attributes']['class'] = $searchclass;
    }
    $form['actions']['submit']['#attributes']['class'][] = 'element-invisible';
  }

  // Altering the user login block
  if ($form_id == 'user_login_block') {
   // remove the username title if requested by theme setting
   if (vtcore_get_plugin_setting('disable_user_login_block_username_title', 'blocks')) {
     $form['name']['#title_display'] = 'invisible';
     $form['name']['#attributes']['value'] = t('username');
     $form['name']['#attributes']['onblur'] = "if (this.value == '') {this.value = '". t('username') ."';}";
     $form['name']['#attributes']['onfocus'] = "if (this.value == '". t('username') ."') {this.value = '';}";
   }
   // remove the password title if requested by theme setting
   if (vtcore_get_plugin_setting('disable_user_login_block_password_title', 'blocks')) {
     $form['pass']['#title_display'] = 'invisible';
     $form['pass']['#attributes']['value'] = t('Password');
     $form['pass']['#attributes']['onblur'] = "if (this.value == '') {this.value = '". t('Password') ."';}";
     $form['pass']['#attributes']['onfocus'] = "if (this.value == '". t('Password') ."') {this.value = '';}";
   }
   // add class to password and name field

   $form['name']['#attributes']['class'][] = 'user-login-username';
   $form['pass']['#attributes']['class'][] = 'user-login-password';

   // Rebuild the retrieve password and register links
   $register_link = vtcore_get_plugin_setting('user_login_block_register', 'blocks');
   $password_link = vtcore_get_plugin_setting('user_login_block_password', 'blocks');
   $form['links'] = array(
     '#theme' => 'item_list',
     '#weight' => 2,
     '#attributes' => array(
       'class' => array('user-login-links'),
        ),
     '#items' => array(
        '0' => array(
          'data' => l(t('@register_link', array('@register_link' => $register_link)), 'user/register'),
          'class' => array('user-login-register'),
         ),
        '1' => array(
          'data' => l(t('@password_link', array('@password_link' => $password_link)), 'user/password'),
          'class' => array('user-login-password'),
         ),
        ),
   );

   $form['actions']['#weight'] = 1;

   if (isset($form['openid_links']['#weight'])) {
     $form['openid_links']['#weight'] = 3;
   }
  }
}