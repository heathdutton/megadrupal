<?php
/**
 * Building Plugin Manager table
 * The table will provide user with GUI for enabling
 * or disabling VTCore plugin.
 *
 * Without this plugin, all plugin can still be enabled
 * or disabled manually by editing the .meta file
 */
function pluginmanager_vtcore_settings_alter_process(&$form, &$form_state, $theme_key) {
  global $vtcore;

  $form['theme_plugin'] = array(
    '#type' => 'fieldset',
    '#title' => t('Plugin Manager'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#group' => 'theme_core',
    '#weight' => -29,
  );

  // Get plugin loaded state default settings
  $settings = $vtcore->enabled_plugins;

  if (empty($settings)) {
    $settings = $vtcore->all_plugins;
  }

  // Declare the arrays for options and default state
  $options = array();
  $default_values = array();

  $paths = array();

  $paths[] = $vtcore->plugin_path;

  if (is_dir(drupal_get_path('theme', $theme_key) . '/vtcore/plugins')) {
    $paths[] = drupal_get_path('theme', $theme_key) . '/vtcore/plugins';
  }

  // Loop into the plugin directory to parse the plugin meta file
  foreach ($paths as $path) {
    foreach (file_scan_directory($path, '/.*\.meta$/', array('key' => 'filename')) as $file) {
      // Load plugin information from its meta file
      $meta = drupal_parse_info_file($file->uri);

      // skip core plugins, they cannot be disabled
      if (isset($meta['core']) && $meta['core'] == 1) {
        continue;
      }

      // give default weight value if not set
      if (!isset($meta['weight'])) {
        $meta['weight'] = 0;
      }

      // Build the options variables containing data from meta file
      $options[$file->name] = array(
        '#title' => $meta['name'],
        '#version' => $meta['version'],
        '#description' => $meta['description'],
        'weight' => $meta['weight'],
      );

      // Possible we got new plugin in the folder that hasn't been registered yet
      if (!isset($settings[$file->name]['status'])) {
        $settings[$file->name]['status'] = $meta['enabled'];
      }

      // Build the current plugin loaded state
      $default_values[$file->name] = $settings[$file->name]['status'];
    }
  }
  // sort the plugins based on weight
  uasort($options, 'drupal_sort_weight');

  // Build the table headers
  $headers = array(
    '#title' => t('Name'),
    '#description' => t('Description'),
    '#version' => t('Version'),
  );

  // Build the array as a table select with all options and default value
  $form['theme_plugin']['table'] = array(
    '#type' => 'tableselect',
    '#header' => $headers,
    '#options' => $options,
    '#default_value' => $default_values,
    '#multiple' => TRUE,
    '#title' => t('Plugin Manager'),
    '#empty' => t('There is no plugin found'),
    '#description' => t('Check to enable plugins'),
  );

  // Custom submit function to save the plugin loaded state
  if (!isset($form['#submit']) || !in_array('pluginmanager_plugin_form_submit', $form['#submit'])) {
    $form['#submit'][] = 'pluginmanager_plugin_form_submit';
  }

}

/**
 * Additional submit function to save plugin active state
 */
function pluginmanager_plugin_form_submit(&$form, &$form_state) {
  global $vtcore;

  $theme_key = $form_state['build_info']['args'][0];

  $rebuild_theme = FALSE;
  // Build the plugin enabled status array & save it to variables
  $settings = array();
  foreach ($form_state['values']['theme_plugin']['table'] as $key => $value) {
    if (!isset($vtcore->all_plugins[$key])) {
      continue;
    }

    if ($vtcore->all_plugins[$key]['status'] != !empty($value)) {
      $rebuild_theme = TRUE;
    }

    $weight = $vtcore->all_plugins[$key]['weight'];
    $settings[$key] = array('status' => !empty($value), 'weight' => $weight);
  }

  // Save form setting
  variable_set('theme_' . $theme_key . '_plugin', $settings);

  // Save rebuild state
  variable_set('theme_' . $theme_key . '_rebuild_state', $rebuild_theme);
}
