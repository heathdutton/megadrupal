<?php
/**
 * Implement hook_vtcore_settings_alter_process()
 */
function typography_vtcore_settings_alter_process(&$form, &$form_state) {
  $base_theme_path = $form_state['build_info']['theme']['base_theme_path'];
  $file = $base_theme_path . '/vtcore/core/admin/vtcore_css_builder.inc.php';
  vtcore_form_load_includes($file, $form, $form_state);

  // User area specific settings
  $form['typography_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Typography'),
    '#collapsible' => true,
    '#collapsed' => true,
    '#group' => 'theme_core',
    '#weight' => 19,
  	'#tree' => false,
    '#attached' => array(
      'css' => array(
        $base_theme_path . '/vtcore/plugins/typography/css/typography-form.css',
      ),
    ),
  );

  $defaults = array();
  if (!empty($form_state['storage']['old_value']['collective_css']['typography'])) {
    $defaults = $form_state['storage']['old_value']['collective_css']['typography'];
  }

  $form['typography_settings']['collective_css'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );

  $array = array(
  	'body' => t('Body'),
  	'h1' => t('Header 1'),
  	'h2' => t('Header 2'),
  	'h3' => t('Header 3'),
  	'h4' => t('Header 4'),
  	'h5' => t('Header 5'),
  	'h6' => t('Header 6'),
    'p' => t('Paragraph'),
    'aside' => t('Sidebars'),
    'article' => t('Articles'),
    'blockquote' => t('Blockquote'),
    'code' => t('Code'),
    'nav' => t('Navigation'),
    'header' => t('Header'),
    'footer' => t('Footer'),
    'em' => t('Emphasis'),
  );

  $font_type = vtcore_font_create_default_font_family();

  $options_type = array(
    'default' => t('Theme default'),
  );

  foreach ($font_type as $key => $value) {
    $options_type[$key] = ucfirst($key);
  }

  foreach ($array as $key => $title) {
    // Trick for complete blank default
    if (!isset($defaults[$key])) {
      $defaults[$key] = array();
    }
    // recent node block
    $form['typography_settings']['collective_css']['typography'][$key] = array(
      '#type' => 'fieldset',
      '#title' => $title,
      '#collapsible' => true,
      '#collapsed' => true,
      '#tree' => true
    );
    $form['typography_settings']['collective_css']['typography'][$key]['family'] = array(
      '#type' => 'select',
      '#options' => $options_type,
      '#title' => t('Font Family'),
    	'#default_value' => vtcore_get_default_value('family', $defaults[$key], ''),
    );

    $form['typography_settings']['collective_css']['typography'][$key]['style'] = array(
      '#type' => 'select',
      '#options' => array('normal' => t('Normal'), 'italic' => t('Italic'), 'oblique' => t('oblique')),
      '#title' => t('Font Style'),
    	'#default_value' => vtcore_get_default_value('style', $defaults[$key], ''),
    );

    $form['typography_settings']['collective_css']['typography'][$key]['variant'] = array(
      '#type' => 'select',
      '#options' => array('normal' => t('Normal'), 'small-caps' => t('Small Caps')),
      '#title' => t('Font Variant'),
    	'#default_value' => vtcore_get_default_value('variant', $defaults[$key], ''),
    );

    $form['typography_settings']['collective_css']['typography'][$key]['weight'] = array(
      '#type' => 'select',
      '#options' => array('normal' => t('Normal'), 'bold' => t('Bold'), 'bolder' => t('Bolder'), 'lighter' => t('Lighter')),
      '#title' => t('Font Weight'),
    	'#default_value' => vtcore_get_default_value('weight', $defaults[$key], ''),
    );

    $form['typography_settings']['collective_css']['typography'][$key]['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Font Size'),
      '#field_suffix' => 'pixels',
      '#description' => t('If this field left empty then no css entry will be recorded to avoid invalid css entry'),
    	'#default_value' => vtcore_get_default_value('size', $defaults[$key], ''),
    );

    $form['typography_settings']['collective_css']['typography'][$key]['line_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Line Height'),
      '#field_suffix' => '%',
    	'#description' => t('If this field left empty then no css entry will be recorded to avoid invalid css entry'),
    	'#default_value' => vtcore_get_default_value('line_height', $defaults[$key], ''),
    );
  }

  if (!isset($form['#submit']) || !in_array('typography_settings_submit', $form['#submit'])) {
    $form['#submit'][] = 'typography_settings_submit';
  }

}

/**
 * Typography submit function
 */
function typography_settings_submit(&$form, &$form_state) {
  // Clean out elements
  foreach ($form_state['values']['collective_css']['typography'] as $id => $fonts) {
    if ($fonts['family'] == 'default' || empty($fonts['size']) || empty($fonts['line_height'])) {
      unset($form_state['values']['collective_css']['typography'][$id]);

      // Remove old storaged value too
      if (isset($form_state['storage']['old_value']['collective_css']['typography'][$id])) {
        unset($form_state['storage']['old_value']['collective_css']['typography'][$id]);
      }
    }
  }

  if (empty($form_state['values']['collective_css']['typography'])) {
    unset($form_state['values']['collective_css']['typography']);
    unset($form_state['storage']['old_value']['collective_css']['typography']);
  }
}

/**
 * Implement hook vtcore_css_rules_alter_process().
 *
 * @param $css
 * @param $processor
 */
function typography_vtcore_css_rules_alter_process(&$css, &$processor) {

  $processor['typography'] = '';

  $font_type = vtcore_font_create_default_font_family();

  if (!empty($css['typography'])) {
    foreach($css['typography'] as $id => $variables) {
      if (empty($variables['size']) || empty($variables['line_height'])) {
        continue;
      }
      $variables['family'] = $font_type[$variables['family']];
      if ($id == 'body') {
        $processor['typography'] .= vtcore_css_render_font($id, $variables, FALSE);
        $base_size = $variables['size'];
      }
      else {
        $processor['typography'] .= vtcore_css_render_font($id, $variables, $base_size);
      }
    }
  }
}

/**
 * Function to register the font family
 * You can add more custom font family for user
 * to choose from here.
 *
 * @todo : link with google fonts?
 */
function vtcore_font_create_default_font_family() {
  return array(
    'georgia' => 'Georgia, New Century Schoolbook, Nimbus Roman No9 L',
    'bradley' => 'Bradley Hand ITC, Apple Chancery, URW Chancery L',
    'lucida' => 'Lucida Sans, Lucida Grande, Lucida',
    'palatino' => 'Palatino, Palatino Linotype, Georgia, Times, Times New Roman',
    'times' => 'Times New Roman, Times',
    'courier' => 'Courier New, Courier',
    'monaco' => 'Monaco, Bitstream Vera Sans Mono, Lucida Console, Terminal',
    'cambria' => 'Cambria, Hoefler Text, Utopia, Liberation Serif, Nimbus Roman No9 L, Times, Times New Roman',
    'constantia' => 'Constantia, Lucida Bright, LucidaBright, DejaVu Serif, Bitstream Vera Serif, Liberation Serif, Georgia',
    'garamond' => 'Palatino Linotype, Palatino, URW Palladio L, Book Antiqua, Baskerville, Bookman Old Style, Bitstream Charter, Nimbus Roman No9 L, Garamond, New Century Schoolbook, Century Schoolbook, Century Schoolbook L, Georgia',
    'verdana' => 'Corbel, Lucida Grande, Lucida Sans Unicode, Lucida Sans, DejaVu Sans, Bitstream Vera Sans, Liberation Sans, Verdana',
    'trebuchet' => 'Segoe UI, Candara, Bitstream Vera Sans, DejaVu Sans, Trebuchet MS, Verdana',
    'slab' => 'Consolas, Andale Mono, Lucida Console, Lucida Sans Typewriter, DejaVu Sans Mono, Bitstream Vera Sans Mono, Liberation Mono, Nimbus Mono L, Monaco, Courier New, Courier',
    'arial' => 'Arial, Helvetica Neue, Helvetica',
    'geneva' => 'Geneva, Lucida Sans, Lucida Grande, Lucida Sans Unicode, Verdana',
    'helvetica' => 'Helvetica Neue, Arial, Helvetica',
    'tahoma' => 'Tahoma, Geneva, Verdana',
    'baskerville' => 'Baskerville, Times New Roman, Times',
  );
}