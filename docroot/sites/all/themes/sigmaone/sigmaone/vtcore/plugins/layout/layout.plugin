<?php

/**
 * @file
 * File for process the content layout
 */

/**
 * Include files
 */
require_once('inc/layout-core.inc.php');

/**
 * Disabled and enabled state
 */
define('DISABLED', 0);
define('ENABLED', 1);

/**
 * Implement hook_vtcore_theme_alter_process()
 */
function layout_vtcore_theme_alter_process(&$variables, $path) {
  // Search for the files
  if (file_exists($path . '/vtcore/plugins/layout/templates/section.tpl.php')) {
    $file = 'vtcore/plugins/layout/templates/section';
  }

  if (file_exists($path . '/templates/section.tpl.php')) {
    $file = 'templates/section';
  }

  if (file_exists($path . '/section.tpl.php')) {
    $file = 'section';
  }

  $variables['section'] = array(
    'template' => $file,
    'type' => 'theme_engine',
    'file' => '/vtcore/plugins/layout/layout.plugin',
    'path' => $path,
    'render element' => 'section',
    'pattern' => 'section__',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_section',
      'layout_preprocess',
      'layout_preprocess_section',
    ),
    'process functions' => array(
      'template_process',
      'template_process_section',
      'layout_process',
      'layout_process_section'
    ),
  );

  $variables['layout_messages'] = array(
    'template' => 'vtcore/plugins/layout/blocks/messages/templates/layout-messages',
    'render element' => 'element',
    'preprocess functions' => array(
      'layout_block_preprocess_messages',
    ),
    'process functions' => array(
      'layout_block_process_messages'
    ),
  );
}

/**
 * Preprocess function for section
 */
function layout_preprocess_section(&$variables) {

  $section = $variables['section'];
  $variables['theme_hook_suggestions'][] = 'section__' . $section['#delta'];

  // Default fallback if nothing found
  $tag = 'div';
  if (!empty($section['#tag'])) {
    $tag = $section['#tag'];
  }

  $variables['tag'] = $tag;

  // Default fallback if nothing is found
  $tag_wrapper = 'div';
  if (!empty($section['#tag_wrapper'])) {
    $tag_wrapper = $section['#tag_wrapper'];
  }

  $variables['tag_wrapper'] = $tag_wrapper;

  $variables['element_attributes'] = drupal_attributes($section['#attributes']);
  $variables['wrapper_attributes'] = drupal_attributes($section['#attributes_wrapper']);

  $variables['wrapper'] = $section['#wrapper'];

  // Add extra hook for subtheme to alter the section variables
  // Somehow since section theme function is registered in
  // theme level, it won't register as normal theme thus
  // THEMENAME_preprocess_section won't work.
  vtcore_alter_process('preprocess_section', $variables);
}

/**
 * Implements hook_vtcore_preprocess_page().
 * Function for processing the areas and regions
 *
 * @param array $variables
 */
function layout_vtcore_preprocess_page(&$variables) {
  global $vtcore, $theme_key, $user;

  $theme = $theme_key;
  // Switch to admin theme on admin page
  if ($vtcore->admin_page == TRUE && $theme_key != $vtcore->admin_theme && $vtcore->user_access_admin_theme) {
    $theme = $vtcore->admin_theme;
  }

  // Caching the formatted layout, cache_clear_all()
  // will clear the cache.
  // Notice : if something is not right disabling the cache manually
  // by setting $setcache to FALSE.
  // @todo : need actual data if this is really speeds up site loading
  $setcache = $vtcore->cache;

  // Only cache for anonymous user and while not in overlay
  // This is to follow drupal cache options which is only
  // cache anonymous user.
  // Overlay and normal page will overlaps when cached.
  if ($user->uid != 0 || $vtcore->overlay == TRUE) {
    $setcache = FALSE;
  }

  $cache_name = $theme . '--' . current_path();

  // EMERGENCY ONLY : Hard reset to reset this manually
  // cache_clear_all($cache_name, 'cache');
  // unset($cached_layout[$cache_name]);

  static $cached_layout;

  // Now only caching the .layout file caching the actual content
  // will only cause more problem and shouldn't be implemented
  // in theme level anyway.
  if (!isset($cached_layout[$cache_name])) {
    // Only cache for anonymous user and while not in overlay
    $cache = cache_get($cache_name);

    if (!isset($cache) || empty($cache->data)) {
      $cached_layout[$cache_name] = _layout_read_layout_files($theme, $variables);

      // Only store cache if user set the cache on in performance settings page
      if ($setcache) {
        cache_set($cache_name, $cached_layout[$cache_name], 'cache', CACHE_TEMPORARY);
      }

    }
    else {
      $cached_layout[$cache_name] = $cache->data;
    }
  }

  $layouts = array();
  $layout = $cached_layout[$cache_name];

  // Process the area
  _layout_process_area($layouts, $layout, $variables);

  // Process the region
  _layout_process_region($layouts, $layout, $variables);

  // Process the blocks
  _layout_process_block($layouts, $layout, $variables);

  // Hide empty regions
  _layout_hide_empty_region($layouts);

  // Finalize by registering top level properties
  _layout_top_level_register_properties($layouts, $variables);

  unset($variables['page']);
  $variables['page'] = $layouts;

  // Set page ID
  $variables['page']['#attributes']['id'] = 'page';
  $variables['page']['#attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_vtcore_process_page().
 */
function layout_vtcore_process_page(&$variables) {
  // Final Processing for messages
  // Grab any messages that is occured after preprocess function run.
  if (isset($variables['messages']) && !empty($variables['messages'])) {
    global $vtcore, $theme_key;

    $layout = _layout_read_layout_files($theme_key);

    // Only operate if we got valid messages block enabled
    if (isset($layout['block']['messages'])) {
      $region = $layout['block']['messages']['#parent'];
      $area = $layout['region'][$region]['#parent'];
      $messages = $variables['show_messages'] ? $variables['messages'] : '';

      if (isset($variables['page'][$area][$region]['messages'])) {
        $variables['page'][$area][$region]['messages']['content'] .= $messages;
      }
      unset($variables['messages']);
    }
  }
}

/**
 * Implements hook_vtcore_preprocess_region()
 */
function layout_vtcore_preprocess_region(&$variables) {
  // preprocess region
  $element = $variables['elements'];

  if (!isset($element['#attributes']) || !is_array($element['#attributes'])) {
    $element['#attributes'] = array();
  }

  if (!empty($element['classes_array'])) {
    $element['#attributes']['class'] = array_merge($element['classes_array'], $element['#attributes']['class']);
  }

  // Clean double class.
  if (isset($element['#attributes']['class'])) {
    $element['#attributes']['class'] = array_unique($element['#attributes']['class']);
  }

  $tag = 'div';
  if (!empty($element['#tag'])) {
    $tag = $element['#tag'];
  }

  $variables['tag'] = $tag;

  $variables['element_attributes'] = drupal_attributes($element['#attributes']);
}

/**
 * Implements hook_vtcore_preprocess_block().
 */
function layout_vtcore_preprocess_block(&$variables) {
  // Add column to block, This is done via Drupal standard block.tpl.php
  $element = $variables['elements'];

  // Add default header class.
  $variables['title_attributes_array']['class'][] = 'block-title';

  // Add Column class
  if (isset($element['#column'])) {
    $variables['classes_array'][] = _layout_column_class($element['#column']);
  }

  // Add clearfix
  if (isset($element['#clearfix']) && $element['#clearfix'] == ENABLED) {
    $variables['classes_array'][] = 'clearfix';
  }

  // Add newrow
  if (isset($element['#newrow']) && $element['#newrow'] == ENABLED) {
    $variables['classes_array'][] = 'newrow';
  }

  // Add lastrow
  if (isset($element['#lastrow']) && $element['#lastrow'] == ENABLED) {
    $variables['classes_array'][] = 'lastrow';
  }

  // Prevent double classes
  $variables['classes_array'] = array_unique($variables['classes_array']);
}

/**
 * Implements hook_vtcore_preprocess_html_alter_process()
 */
function layout_vtcore_preprocess_html(&$variables) {
  global $vtcore;

  drupal_add_css($vtcore->plugin_path . '/layout/css/1140.css', array('group' => CSS_THEME));

  // Add a CSS class based on the current page context.
  if (!drupal_is_front_page()) {
    $context = explode('/', drupal_get_path_alias());
    $context = reset($context);

    if (!empty($context)) {
      $variables['attributes_array']['class'][] = drupal_html_class('context-' . $context);
    }
  }
}

/**
 * Implement hook_vtcore_special_block_array_alter_process()
 * Procesing all blocks stored in layout/blocks directory
 */
function layout_vtcore_special_block_array_alter_process(&$options, &$variables, &$blocks) {
  // Auto scanning all files in blocks directory
  $layout_blocks = _layout_scan_blocks();
  $delta = $options['#delta'];
  if (isset($layout_blocks[$delta])) {
    // Placeholder to check if dynamic stored options is available
    // Check check check
    $settings = _layout_read_blocks_meta($delta);
    $block_setting = $settings['settings'];
    $options = vtcore_array_merge_recursive_distinct($block_setting, $options);
    $blocks = _layout_read_block_renderable_arrays($delta, $options, $variables);
  }
}