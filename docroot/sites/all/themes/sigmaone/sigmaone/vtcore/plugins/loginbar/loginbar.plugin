<?php

/**
 * Implements hook_vtcore_special_block_register_alter_process().
 */
function loginbar_vtcore_special_block_register_alter_process(&$blocks) {
  $blocks['loginbar'] = t('Login Bar');
}

/**
 * Implement hook_vtcore_special_block_array_alter_process()
 * Registering the renderable array for loginbar special blocks
 *
 * If you have complex layout, it is suggested that you create
 * a custom tpls and print the html markup there.
 */
function loginbar_vtcore_special_block_array_alter_process($options, &$variables, &$blocks) {
  if ($options['#delta'] == 'loginbar') {
    // Merge theme setting with plugin setting
    // Theme setting always win against plugin setting
    $block_setting = vtcore_get_default('loginbar');

    $options = vtcore_array_merge_recursive_distinct($block_setting, $options);

    $form = loginbar_horizontal_login_block();
    global $user, $vtcore;

    // if user is anonymous
    if ($user->uid == 0 ) {
      $form = drupal_get_form('loginbar_horizontal_login_block');
      $markup = render($form);
    }
    // if user is logged in
    else {
      $links = array(
      	'@welcome' => $options['#loginbar_message'],
      	'@user' => ucwords($user->name),
      	'!logout' => l(t('Logout'), 'user/logout'),
      );

      $markup = t('@welcome @user, !logout', $links);
    }

    $blocks = array(
      '#attached' => array(
        'css' => array(
          $vtcore->plugin_path . '/loginbar/css/loginbar.css',
          'misc/ui/jquery.ui.theme.css',),
      ),
      '#markup' => $markup,
      '#weight' => $options['#weight'],
      '#prefix' => '<div id="loginbar"><p>',
      '#suffix' => '</p></div>',
    );
  }
}

/**
 * Function to return form array for horizontal login bar
 */
function loginbar_horizontal_login_block() {
  $form = array(
  	'#action' => url($_GET['q'], array('query' => drupal_get_destination())),
  	'#id' => 'horizontal-login-block',
  	'#validate' => user_login_default_validators(),
  	'#submit' => array('user_login_submit'),
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#prefix' => '<div class="usericon"><span class="ui-widget-header ui-corner-all ui-icon ui-icon-person left"></span>',
    '#suffix' => '</div>',
    '#maxlength' => USERNAME_MAX_LENGTH,
    '#size' => 15,
    '#required' => TRUE,
    '#default_value' => t('Username'),
    '#attributes' => array(
    	'onblur' => "if (this.value == '') {this.value = '" . t('Username') . "';}",
    	'onfocus' => "if (this.value == '" . t('Username') . "') {this.value = '';}"
    ),
  );
  $form['pass'] = array(
    '#type' => 'password',
    '#maxlength' => 60,
    '#size' => 15,
    '#required' => TRUE,
    '#prefix' => '<div class="passicon"><span class="ui-widget-header ui-corner-all ui-icon ui-icon-key left"></span>',
    '#suffix' => '</div>',
  );

  $form['actions'] = array(
  	'#type' => 'actions',
  );

  $form['actions']['submit'] = array(
  	'#type' => 'submit',
  	'#value' => '',
  );

  return $form;
}