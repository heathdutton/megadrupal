// import bourbon helpers
@import "vendor/bourbon";

// get icons
@import "components/fontawesome/fontawesome";

//***********************************
// START FLIGHT MIXINS
// available from base for reference
//***********************************

// sets element as visible
// use on :before / :after
//
//** $display: sets display
//** $direction: position absolute? use: left, right, top, bottom
//** $amount: amount to set $direction as absolute
//
// @mixin before-as-image($display: block, $direction: false, $amount: 0)

// simple list clear: padding, margin, list-style
//
// @mixin list-clear()

// simple inline list
//
// @mixin list-float()

// hit all headers
//
// @mixin all-headers()

// makes div an overflow ellipse
//
// @mixin ellipsis()

// hit all form inputs
//
//** $select: also hit select
//
// @mixin all-form-inputs($select: true)

// strips foundation button styling into a link
//
//** $color: color of link
//** $hover: hover color of link
//
// @mixin undo-button($color: $anchor-font-color, $hover: $anchor-font-color-hover)

// Grid / Layout

// Gets em-compensated value (useful for headers, buttons)
// not especially useful now rem's are being used
//
//** $size: desired em
//** $element: size to modify by (eg. $h2-font-size)
//
// @function compensate-size($size, $element, $base: rem-calc($rem-base))

// add / remove column padding
//
//** $half: true - sets padding to column-gutter/2, otherwise uses value passed as padding. Use 0 to remove
//** $modify: if value present passes padding through compensate-size
//
// @mixin column-padding($half: true, $modify: false)

// expand row - expands a div with negative margins
//
//** $half: true - sets margin to column-gutter/2, otherwise uses value passed as margin. Use 0 to remove
//** $modify: if value present passes padding through compensate-size
//
// @mixin expand-row($half: true, $modify: false)

// runs both column padding and expand row with same value
//
//** $half: true - sets margin to column-gutter/2, otherwise uses value passed as margin. Use 0 to remove
//** $modify: if value present passes padding through compensate-size
//
// @mixin expand-and-padding($half: true, $modify: false)

// fakes a column if proper html structure doesn't allow
//
//** $position: first or last sets padding to 0 accordingly,
//** $columns: column count
//
// @mixin fake-column($position: first, $columns: ($total-columns/2))

// quick even columns using fake column
// accepts list of selectors
//
//** $selectors: list of css selectors to run through
//** $column-counts: list of column widths (eg. "2 4 2"), or false if just equal
//** $property: simple poperty in list format to add to all fake columns (eg. "display block")
//
// @mixin quick-columns($selectors, $column-counts: false, $property: false)

// Border for columns or interior elements that don't have the proper width
// Like border on a row is too wide
//
//** $margin: what margin the border should have, use negative to expand border
//** $padding: padding added to element
//** $border: border property (eg. 1px solid black)
//** $direction: top or bottom, places border either above or below
//** $hide: optional selector to hide border, defaults to last/first child depending on direction
//
// @mixin nice-row-border($margin: $column-gutter/2, $padding: 1em, $border: 1px solid $gray, $direction: bottom, $hide: false)

// centers an element
//
// @mixin centered()

// centers an element with a max width
//
//** $width: max-width element should take
//
// @mixin max-width-center($width: $grid-max-width)

// Responsive

// takes content and puts it inside the $media query... simple shortcut
//
//** $media: a media query, (eg. $small-only, $large-up, ect)
// @mixin respond($media)

//************************************
// Sprites
//************************************

// simple background sprite, does not use compass
//
//** $x: x position
//** $y: y position
//** $img: file name, assumes in /images
//** $repeat: repeat settings
//
// @mixin image-sprite($x, $y, $img: "sprite.png", $repeat: no-repeat)

// text replacing sprite
//
//** $width: width of element
//** $height: height of element
//** $left: x position
//** $top: : y position
//** $img: file name, assumes in /images
//** $repeat: repeat settings
//
// @mixin image-replace($width, $height, $left, $top, $img: "sprite.png", $repeat: no-repeat)

//***********************************
// Animations
//***********************************

// Default variables
//
//** $animation-time: 1s!default
//** $animation-rotation-border-color-inactive: #eee!default
//** $animation-rotation-border-color: #ddd!default
//** $animation-rotation-border-width: rem-calc(2)!default

// Sets up css animation
//
//** $time: Speed
//
// @mixin rotation($time: $animation-time)

// prints out rotation definition
//
// @mixin rotation-init

// Active spinner
//
//** $border-color: color of active spinner
//** $time: Speed
//
// @mixin spinner-active($border-color: $animation-rotation-border-color, $time: $animation-time)

// Spinner container
//
//** $dimensions: size of spinner in list format
//** $border-color-inactive: color of
//** $border-width: width of spinner border
//
// @mixin spinner-core($dimensions, $border-color-inactive: $animation-rotation-border-color-inactive, $border-width: $animation-rotation-border-width)

// Flight variables
//
// ******************************************************

$animation-time: 0.75s;
$animation-rotation-border-color-inactive: $gray;
$animation-rotation-border-color: $gray-dark;
$animation-rotation-border-width: rem-calc(2) !default;

@include rotation-init;

//***********************************
// END FLIGHT MIXINS
//
//***********************************

// @file
// Place your mixins here. Feel free to roll your own mixins.

// clearix override
//
@mixin clearfix {
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
  /* IE6 */
  & * html {
    height: 1%;
  }
  /* IE7 */
  .clearfix *:first-child + html & {
    min-height: 1%;
  }
}

/*********************************** */
// Silent Extends
//
// Silent extends help cut down on the length of compiled css by routing
// each call to the extend at the top of the css file.
//
// They cannot as of SASS 3.2.5 be used within media queries
//
//***********************************

// general
// -----------------------------------
// use the +e() mixin

%hide {
  display: none;
}

%show {
  display: block;
}

%offscreen {
  position: absolute;
  left: -10000px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
  display: inline;
}

// backgrounds
// -----------------------------------
// use the +b() mixin

%background-reset {
  background: transparent;
}

// text colors
// -----------------------------------
// use the +c() mixin

%color-normal {
  color: $body-font-color;
}

%color-link-color {
  color: $anchor-font-color;
}

%color-hover-color {
  color: $anchor-font-color-hover;
}

%color-link {
  @extend %color-link-color;
  &:hover {
    @extend %color-hover-color;
  }
}

%color-link-alt {
  @extend %color-link-color;
  &:hover {
    @extend %color-hover-color;
  }
}

// fonts
// -----------------------------------
// use the +f() mixin

%font-normal {
  font-family: $body-font-family;
  font-style: $body-font-weight;
  font-weight: $body-font-weight;
}

%font-alt {
  font-family: $ff-alt;
  font-style: normal;
  font-weight: $font-weight-normal;
}

%font-alt-bold {
  @extend %font-alt;
  font-weight: $font-weight-bold;
}

%font-reset {
  @extend %font-normal;
  font-size: $base-font-size;
  line-height: $base-line-height;
}

%font-reset-full {
  @extend %font-reset;
  color: $body-font-color;
  text-transform: none;
}

// headers
// -----------------------------------
// use the +h() mixin

%header-core {
  font-family: $header-font-family;
  font-weight: $header-font-weight;
  font-style: $header-font-style;
  color: $header-font-color;
  text-rendering: $header-text-rendering;
  margin-top: $header-top-margin;
  margin-bottom: $header-bottom-margin;
  line-height: $header-line-height;
}

%header-1 {
  @extend %header-core;
  font-size: $h1-font-size;
}

%header-2 {
  @extend %header-core;
  font-size: $h2-font-size;
}

%header-3 {
  @extend %header-core;
  font-size: $h3-font-size;
}

%header-4 {
  @extend %header-core;
  font-size: $h4-font-size;
}

%header-5 {
  @extend %header-core;
  font-size: $h5-font-size;
}

%header-6 {
  @extend %header-core;
  font-size: $h6-font-size;
}

// general extend
// use: +e(hide)
@mixin e($extend) {
  @extend %#{$extend};
}

// extend for backgrounds
// use: +b(reset)
@mixin b($extend) {
  @extend %background-#{$extend};
}

// extend for text color
// use: +c(normal)
@mixin c($extend) {
  @extend %color-#{$extend};
}

// extend for font styles
// use: +f(reset)
@mixin f($extend) {
  @extend %font-#{$extend};
}

// extend for header styles
// use: +h(1)
@mixin h($extend) {
  @extend %header-#{$extend};
}

//***********************************
// Helpers
//
//***********************************

@mixin disable-while-loading($loading: "&", $loaded: "[data-uuid]", $icon: false, $size: rem-calc(50), $color: $gray) {
  @if $icon {
    @include icon(spinner, $size * 53 / 50, $color);
    &:before {
      @include simple-center-both($size);
      height: $size;
      z-index: 1;
      width: $size;
      @include rotation;
    }
  }
  #{$loading} {
    @include opacity(0.2);
    @include transition(opacity ease-in 0.2s);
    @if $icon {
      position: relative;
      z-index: 0;
    }
    @if $loaded {
      &#{$loaded} {
        @include opacity(1);
        @if $icon {
          position: absolute;
          z-index: 2;
        }
      }
    }
  }
}

// Adds a webkit scrollbar
@mixin webkit-scrollbar($color1, $color2, $width: emCalc(10), $height: emCalc(10), $radius-outer: 0, $radius-inner: 0) {
  &::-webkit-scrollbar {
    background-color: $color2;
    &:vertical {
      width: $width;
    }
    &:horizontal {
      height: $height;
    }
  }
  &::-webkit-scrollbar-thumb {
    border-radius: $radius-inner;
    background-color: $color1;
  }
  &::-webkit-scrollbar-track {
    border-radius: $radius-outer;
    background-color: $color2;
  }
}

//***********************************
// Responsive tables
//
// restric
// http://dbushell.com/2012/01/05/responsive-tables-2/
//***********************************

@mixin mobile-tables($table-border: $gray, $min-height: 44px) {
  display: block;
  position: relative;
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0;
  &.sticky-header {
    display: none !important;
  }
  thead,
  tbody {
    border: 1px solid $table-border;
  }
  thead {
    border-right: 0 !important;
    display: block;
    float: left;
    max-width: 50%;
    tr {
      display: block;
    }
  }
  tbody {
    border-left: 0 !important;
    display: block !important;
    width: auto;
    position: relative;
    overflow-x: auto;
    white-space: nowrap;
    tr {
      display: inline-block !important;
      vertical-align: top;
    }
  }
  tr {
    border: none !important;
    padding: 0 !important;
  }
  th,
  td {
    font-size: $table-row-font-size !important;
    margin: 0;
    min-height: $min-height;
    padding: 0.7em !important;
    vertical-align: top;
  }
  th {
    display: block !important;
    text-align: left;
    &, & > * {
      @include ellipsis;
    }
  }
  td {
    display: block !important;
  }
}
